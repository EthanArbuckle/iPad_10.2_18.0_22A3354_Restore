_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x20BD147EC](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_2097E5B4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x20BD1496C](v1 + 416);
  _Unwind_Resume(a1);
}

void TBuffer<char>::resize(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  const void *v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;

  if (*(_BYTE *)(a1 + 280) && *(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2 + 1;
    v4 = (void *)operator new[]();
    v5 = v4;
    v6 = *(const void **)a1;
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      memmove(v4, *(const void **)a1, v7);
    if (v6 != (const void *)(a1 + 24) && v6)
      MEMORY[0x20BD149A8](v6, 0x1000C4077774924);
    *(_QWORD *)a1 = v5;
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 < a2)
  {
    v9 = a2;
    if (*(_BYTE *)(a1 + 280)
      || ((v10 = *(_QWORD *)(a1 + 8), v10 >= a2) ? (v9 = a2) : (v9 = *(_QWORD *)(a1 + 8)),
          v8 < v10 ? (v11 = v9 == v8) : (v11 = 1),
          !v11))
    {
      bzero((void *)(*(_QWORD *)a1 + v8), v9 - v8);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x20BD147F8](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x20BD1496C](a1 + 52);
  return a1;
}

uint64_t TPToken_Open(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  TLexicon *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  TEnvManager *DataManager;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  TEnvManager *v20;
  TTokenizer *v21;
  _QWORD *exception;
  std::string *v24;
  _QWORD *v25;
  std::string *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  locale_t v31[2];
  char v32;

  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v32, "TPToken_Open");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v31);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 136, v8, v9);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v29, "Not initialized");
    *exception = aPpx;
    v24 = (std::string *)(exception + 1);
    if (SHIBYTE(v30) < 0)
    {
      std::string::__init_copy_ctor_external(v24, (const std::string::value_type *)v29, *((std::string::size_type *)&v29 + 1));
    }
    else
    {
      v27 = v29;
      exception[3] = v30;
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v27;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  if (!(a1 | a2))
  {
    conditionalAssert("Bad model", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 137, v8, v9);
    v25 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v29, "Bad model");
    *v25 = aPpx;
    v26 = (std::string *)(v25 + 1);
    if (SHIBYTE(v30) < 0)
    {
      std::string::__init_copy_ctor_external(v26, (const std::string::value_type *)v29, *((std::string::size_type *)&v29 + 1));
    }
    else
    {
      v28 = v29;
      v25[3] = v30;
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v28;
    }
    *v25 = &unk_24C2148C0;
    v25[4] = 3;
  }
  v10 = (TLexicon *)verifyLexiconHandle(a3, "Bad input lexicon handle");
  verifyPointerArgument<TPTokenHandle_fake **>((uint64_t)a4, 0, "Bad output tokenizer handle pointer", v11, v12);
  DataManager = makeDataManager(a1, 1uLL, v13, v14, v15);
  v20 = makeDataManager(a2, 1uLL, v17, v18, v19);
  v21 = (TTokenizer *)operator new();
  TTokenizer::TTokenizer(v21, DataManager, v20, v10);
  *a4 = *((_QWORD *)v21 + 1);
  if (DataManager)
    (*(void (**)(TEnvManager *))(*(_QWORD *)DataManager + 8))(DataManager);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v31);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_2097E5F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  void *v20;
  int v21;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  char *v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0)
          v27 = *(_BYTE **)v27;
        handleException(v27, (uint64_t)"TPToken_Open", *((_QWORD *)v26 + 4), v24, v25);
        break;
      case 6:
        v30 = (char *)__cxa_begin_catch(a1);
        v31 = v30 + 8;
        if (v30[31] < 0)
          v31 = *(_BYTE **)v31;
        handleException(v31, (uint64_t)"TPToken_Open", 6, v28, v29);
        break;
      case 5:
        v34 = (char *)__cxa_begin_catch(a1);
        v35 = v34 + 8;
        if (v34[31] < 0)
          v35 = *(_BYTE **)v35;
LABEL_17:
        handleException(v35, (uint64_t)"TPToken_Open", 2, v32, v33);
        break;
      case 4:
        v38 = (char *)__cxa_begin_catch(a1);
        v39 = v38 + 8;
        if (v38[31] < 0)
          v39 = *(_BYTE **)v39;
        handleException(v39, (uint64_t)"TPToken_Open", 11, v36, v37);
        break;
      case 3:
        v40 = (char *)__cxa_begin_catch(a1);
        v35 = v40 + 8;
        if (v40[31] < 0)
          v35 = *(_BYTE **)v35;
        goto LABEL_17;
      case 2:
        v41 = __cxa_begin_catch(a1);
        v42 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPToken_Open", 1, v43, v44);
        break;
      default:
        if (a2 != 1)
          _Unwind_Resume(a1);
        v45 = __cxa_begin_catch(a1);
        v46 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPToken_Open", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x2097E5DD0);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void sub_2097E61B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2097E61C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2097E61CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2097E61D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2097E61E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2097E61F0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2097E61FC()
{
  __cxa_end_catch();
  JUMPOUT(0x2097E6204);
}

void sub_2097E620C()
{
  __cxa_end_catch();
  JUMPOUT(0x2097E5FF4);
}

uint64_t verifyPointerArgument<TPTokenHandle_fake **>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *exception;
  std::string *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    *exception = aPpx;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  return result;
}

void sub_2097E62F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPToken_Close(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *exception;
  std::string *v9;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  locale_t v16[2];
  char v17;

  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v17, "TPToken_Close");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v16);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 174, v2, v3);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Not initialized");
    *exception = aPpx;
    v9 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  v4 = (_DWORD *)verifyTokenizerHandle(a1, "Bad input tokenizer handle");
  if (v4[30])
  {
    conditionalAssert("Tokenizer is referenced", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 177, v5, v6);
    v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Tokenizer is referenced");
    *v10 = aPpx;
    v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *v10 = &unk_24C2148C0;
    v10[4] = 7;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v16);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_2097E6520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  void *v20;
  int v21;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  char *v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0)
          v27 = *(_BYTE **)v27;
        handleException(v27, (uint64_t)"TPToken_Close", *((_QWORD *)v26 + 4), v24, v25);
        break;
      case 6:
        v30 = (char *)__cxa_begin_catch(a1);
        v31 = v30 + 8;
        if (v30[31] < 0)
          v31 = *(_BYTE **)v31;
        handleException(v31, (uint64_t)"TPToken_Close", 6, v28, v29);
        break;
      case 5:
        v34 = (char *)__cxa_begin_catch(a1);
        v35 = v34 + 8;
        if (v34[31] < 0)
          v35 = *(_BYTE **)v35;
LABEL_17:
        handleException(v35, (uint64_t)"TPToken_Close", 2, v32, v33);
        break;
      case 4:
        v38 = (char *)__cxa_begin_catch(a1);
        v39 = v38 + 8;
        if (v38[31] < 0)
          v39 = *(_BYTE **)v39;
        handleException(v39, (uint64_t)"TPToken_Close", 11, v36, v37);
        break;
      case 3:
        v40 = (char *)__cxa_begin_catch(a1);
        v35 = v40 + 8;
        if (v40[31] < 0)
          v35 = *(_BYTE **)v35;
        goto LABEL_17;
      case 2:
        v41 = __cxa_begin_catch(a1);
        v42 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPToken_Close", 1, v43, v44);
        break;
      default:
        if (a2 != 1)
          _Unwind_Resume(a1);
        v45 = __cxa_begin_catch(a1);
        v46 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPToken_Close", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x2097E63B8);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t TPToken_Tokenize(unint64_t a1, unint64_t a2, const char *a3, char *a4, char *a5, uint64_t *a6, const char *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  TTokenizer *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  unsigned int *v25;
  _QWORD *v27;
  std::string *v28;
  _QWORD *exception;
  std::string *v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[24];
  _BYTE v34[817];
  char v35;
  locale_t v36[2];
  char v37;
  int v38;
  char *v39;
  __int128 v40;
  _BYTE v41[256];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v37, "TPToken_Tokenize");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v36);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 250, v14, v15);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "Not initialized");
    *exception = aPpx;
    v30 = (std::string *)(exception + 1);
    if ((v33[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)v33, *(std::string::size_type *)&v33[8]);
    }
    else
    {
      v32 = *(_OWORD *)v33;
      exception[3] = *(_QWORD *)&v33[16];
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v32;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  v16 = verifyTokenizerHandle(a1, "Bad input tokenizer handle");
  if (!a2
    || (v19 = (TTokenizer *)v16,
        ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v16 + 24) + 80) - *(_QWORD *)(*(_QWORD *)(v16 + 24) + 72)) >> 5) - 1 < a2))
  {
    conditionalAssert("Bad input parameter configuration handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 254, v17, v18);
    v27 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "Bad input parameter configuration handle");
    *v27 = aPpx;
    v28 = (std::string *)(v27 + 1);
    if ((v33[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v33, *(std::string::size_type *)&v33[8]);
    }
    else
    {
      v31 = *(_OWORD *)v33;
      v27[3] = *(_QWORD *)&v33[16];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v31;
    }
    *v27 = &unk_24C2148C0;
    v27[4] = 3;
  }
  verifyStringArgument(a4, 0, 1, "Bad input text pointer", v18);
  verifyPointerArgument<TPTokenResultHandle_fake **>((uint64_t)a6, 0, "Bad output result handle pointer", v20, v21);
  if (a7)
  {
    *(_QWORD *)v33 = v34;
    *(_OWORD *)&v33[8] = xmmword_209A57DD0;
    v35 = 1;
    v22 = *(_QWORD *)(*((_QWORD *)v19 + 3) + 72) + 32 * a2;
    v23 = (int *)(v22 + 8);
    if (*(char *)(v22 + 31) < 0)
      v23 = *(int **)v23;
    TBuffer<wchar_t>::assign((uint64_t)v33, v23);
    v39 = v41;
    v40 = xmmword_209A57DD0;
    v42 = 1;
    v24 = *(_QWORD *)(*((_QWORD *)v19 + 3) + 128);
    if (*(_QWORD *)&v33[16] >= *(_QWORD *)&v33[8])
    {
      if (v35)
      {
        v38 = 0;
        TBuffer<wchar_t>::insert((uint64_t)v33, *(unint64_t *)&v33[16], &v38, 1uLL);
        v25 = *(unsigned int **)v33;
        --*(_QWORD *)&v33[16];
      }
      else
      {
        v25 = *(unsigned int **)v33;
        if (*(_QWORD *)&v33[8])
          *(_DWORD *)(*(_QWORD *)v33 + 4 * *(_QWORD *)&v33[8] - 4) = 0;
      }
    }
    else
    {
      v25 = *(unsigned int **)v33;
      *(_DWORD *)(*(_QWORD *)v33 + 4 * *(_QWORD *)&v33[16]) = 0;
    }
    TLocaleInfo::unicodeToMultiByte(v24, v25, (uint64_t)&v39);
    if (*((_QWORD *)&v40 + 1) >= (unint64_t)v40)
    {
      if (v42)
      {
        LOBYTE(v38) = 0;
        TBuffer<char>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), (char *)&v38, 1uLL);
        --*((_QWORD *)&v40 + 1);
      }
      else if ((_QWORD)v40)
      {
        v39[(_QWORD)v40 - 1] = 0;
      }
    }
    else
    {
      v39[*((_QWORD *)&v40 + 1)] = 0;
    }
    saveDump(v19, v39, a3, a4, a5, a7);
    if (v42 && v39 != v41 && v39)
      MEMORY[0x20BD149A8]();
    if (v35 && *(_BYTE **)v33 != v34 && *(_QWORD *)v33)
      MEMORY[0x20BD149A8]();
  }
  *a6 = TTokenizer::tokenize((uint64_t)v19, a4, a3, a5, a2, 0);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v36);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_2097E6BE0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  int v17;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  char *v36;
  void *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v17)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler((locale_t *)&STACK[0x438]);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v22 = (char *)__cxa_begin_catch(a1);
        v23 = v22 + 8;
        if (v22[31] < 0)
          v23 = *(_BYTE **)v23;
        handleException(v23, (uint64_t)"TPToken_Tokenize", *((_QWORD *)v22 + 4), v20, v21);
        __cxa_end_catch();
        break;
      case 6:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0)
          v27 = *(_BYTE **)v27;
        handleException(v27, (uint64_t)"TPToken_Tokenize", 6, v24, v25);
        __cxa_end_catch();
        break;
      case 5:
        v30 = (char *)__cxa_begin_catch(a1);
        v31 = v30 + 8;
        if (v30[31] < 0)
          v31 = *(_BYTE **)v31;
LABEL_17:
        handleException(v31, (uint64_t)"TPToken_Tokenize", 2, v28, v29);
        __cxa_end_catch();
        break;
      case 4:
        v34 = (char *)__cxa_begin_catch(a1);
        v35 = v34 + 8;
        if (v34[31] < 0)
          v35 = *(_BYTE **)v35;
        handleException(v35, (uint64_t)"TPToken_Tokenize", 11, v32, v33);
        __cxa_end_catch();
        break;
      case 3:
        v36 = (char *)__cxa_begin_catch(a1);
        v31 = v36 + 8;
        if (v36[31] < 0)
          v31 = *(_BYTE **)v31;
        goto LABEL_17;
      case 2:
        v37 = __cxa_begin_catch(a1);
        v38 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v37 + 16))(v37);
        handleException(v38, (uint64_t)"TPToken_Tokenize", 1, v39, v40);
        __cxa_end_catch();
        break;
      default:
        if (a2 != 1)
          _Unwind_Resume(a1);
        v41 = __cxa_begin_catch(a1);
        v42 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPToken_Tokenize", 2, v43, v44);
        __cxa_end_catch();
        break;
    }
    JUMPOUT(0x2097E6A50);
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

_BYTE *verifyStringArgument(_BYTE *result, char a2, char a3, char *a4, uint64_t a5)
{
  _QWORD *exception;
  std::string *v7;
  _QWORD *v9;
  std::string *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 297, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, a4);
    *exception = aPpx;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v14) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v13, *((std::string::size_type *)&v13 + 1));
    }
    else
    {
      v11 = v13;
      exception[3] = v14;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v11;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  if (result && (a3 & 1) == 0 && !*result)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 298, (uint64_t)a4, a5);
    v9 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, a4);
    *v9 = aPpx;
    v10 = (std::string *)(v9 + 1);
    if (SHIBYTE(v14) < 0)
    {
      std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v13, *((std::string::size_type *)&v13 + 1));
    }
    else
    {
      v12 = v13;
      v9[3] = v14;
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
    }
    *v9 = &unk_24C2148C0;
    v9[4] = 3;
  }
  return result;
}

void sub_2097E7070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t verifyPointerArgument<TPTokenResultHandle_fake **>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *exception;
  std::string *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    *exception = aPpx;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  return result;
}

void sub_2097E717C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPToken_DeleteResult(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  std::string *v12;
  _QWORD *exception;
  std::string *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  locale_t v19[2];
  char v20;

  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v20, "TPToken_DeleteResult");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v19);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 283, v4, v5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "Not initialized");
    *exception = aPpx;
    v14 = (std::string *)(exception + 1);
    if (SHIBYTE(v18) < 0)
    {
      std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)v17, *((std::string::size_type *)&v17 + 1));
    }
    else
    {
      v16 = v17;
      exception[3] = v18;
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v16;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  v6 = verifyTokenizerHandle(a1, "Bad input tokenizer handle");
  if (!a2
    || (v9 = *(_QWORD *)(v6 + 96), a2 - 1 >= (unint64_t)((*(_QWORD *)(v6 + 104) - v9) >> 3))
    || !*(_QWORD *)(v9 + 8 * (a2 - 1)))
  {
    conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 287, v7, v8);
    v11 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "Bad input result handle");
    *v11 = aPpx;
    v12 = (std::string *)(v11 + 1);
    if (SHIBYTE(v18) < 0)
    {
      std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v17, *((std::string::size_type *)&v17 + 1));
    }
    else
    {
      v15 = v17;
      v11[3] = v18;
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v15;
    }
    *v11 = &unk_24C2148C0;
    v11[4] = 3;
  }
  TTokenizer::release(v6, a2);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v19);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_2097E73C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  void *v20;
  int v21;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  char *v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0)
          v27 = *(_BYTE **)v27;
        handleException(v27, (uint64_t)"TPToken_DeleteResult", *((_QWORD *)v26 + 4), v24, v25);
        break;
      case 6:
        v30 = (char *)__cxa_begin_catch(a1);
        v31 = v30 + 8;
        if (v30[31] < 0)
          v31 = *(_BYTE **)v31;
        handleException(v31, (uint64_t)"TPToken_DeleteResult", 6, v28, v29);
        break;
      case 5:
        v34 = (char *)__cxa_begin_catch(a1);
        v35 = v34 + 8;
        if (v34[31] < 0)
          v35 = *(_BYTE **)v35;
LABEL_17:
        handleException(v35, (uint64_t)"TPToken_DeleteResult", 2, v32, v33);
        break;
      case 4:
        v38 = (char *)__cxa_begin_catch(a1);
        v39 = v38 + 8;
        if (v38[31] < 0)
          v39 = *(_BYTE **)v39;
        handleException(v39, (uint64_t)"TPToken_DeleteResult", 11, v36, v37);
        break;
      case 3:
        v40 = (char *)__cxa_begin_catch(a1);
        v35 = v40 + 8;
        if (v40[31] < 0)
          v35 = *(_BYTE **)v35;
        goto LABEL_17;
      case 2:
        v41 = __cxa_begin_catch(a1);
        v42 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPToken_DeleteResult", 1, v43, v44);
        break;
      default:
        if (a2 != 1)
          _Unwind_Resume(a1);
        v45 = __cxa_begin_catch(a1);
        v46 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPToken_DeleteResult", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x2097E7258);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t TPToken_GetResultInfo(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  std::string *v15;
  _QWORD *exception;
  std::string *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  locale_t v22[2];
  char v23;

  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v23, "TPToken_GetResultInfo");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v22);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 301, v6, v7);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v20, "Not initialized");
    *exception = aPpx;
    v17 = (std::string *)(exception + 1);
    if (SHIBYTE(v21) < 0)
    {
      std::string::__init_copy_ctor_external(v17, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
    }
    else
    {
      v19 = v20;
      exception[3] = v21;
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  v8 = verifyTokenizerHandle(a1, "Bad input tokenizer handle");
  if (!a2
    || (v11 = v8, v12 = *(_QWORD *)(v8 + 96), a2 - 1 >= (unint64_t)((*(_QWORD *)(v8 + 104) - v12) >> 3))
    || !*(_QWORD *)(v12 + 8 * (a2 - 1)))
  {
    conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 305, v9, v10);
    v14 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v20, "Bad input result handle");
    *v14 = aPpx;
    v15 = (std::string *)(v14 + 1);
    if (SHIBYTE(v21) < 0)
    {
      std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
    }
    else
    {
      v18 = v20;
      v14[3] = v21;
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v18;
    }
    *v14 = &unk_24C2148C0;
    v14[4] = 3;
  }
  verifyPointerArgument<TPTokenResultInfo>(a3, 0, "Bad output info pointer", v9, v10);
  TTokenizer::getResultInfo(v11, a2, a3);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v22);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_2097E785C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  void *v20;
  int v21;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  char *v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0)
          v27 = *(_BYTE **)v27;
        handleException(v27, (uint64_t)"TPToken_GetResultInfo", *((_QWORD *)v26 + 4), v24, v25);
        break;
      case 6:
        v30 = (char *)__cxa_begin_catch(a1);
        v31 = v30 + 8;
        if (v30[31] < 0)
          v31 = *(_BYTE **)v31;
        handleException(v31, (uint64_t)"TPToken_GetResultInfo", 6, v28, v29);
        break;
      case 5:
        v34 = (char *)__cxa_begin_catch(a1);
        v35 = v34 + 8;
        if (v34[31] < 0)
          v35 = *(_BYTE **)v35;
LABEL_17:
        handleException(v35, (uint64_t)"TPToken_GetResultInfo", 2, v32, v33);
        break;
      case 4:
        v38 = (char *)__cxa_begin_catch(a1);
        v39 = v38 + 8;
        if (v38[31] < 0)
          v39 = *(_BYTE **)v39;
        handleException(v39, (uint64_t)"TPToken_GetResultInfo", 11, v36, v37);
        break;
      case 3:
        v40 = (char *)__cxa_begin_catch(a1);
        v35 = v40 + 8;
        if (v40[31] < 0)
          v35 = *(_BYTE **)v35;
        goto LABEL_17;
      case 2:
        v41 = __cxa_begin_catch(a1);
        v42 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPToken_GetResultInfo", 1, v43, v44);
        break;
      default:
        if (a2 != 1)
          _Unwind_Resume(a1);
        v45 = __cxa_begin_catch(a1);
        v46 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPToken_GetResultInfo", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x2097E76F4);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t verifyPointerArgument<TPTokenResultInfo>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *exception;
  std::string *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    *exception = aPpx;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  return result;
}

void sub_2097E7B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPToken_GetResultData(unint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  _QWORD *v32;
  std::string *v33;
  _QWORD *exception;
  std::string *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  locale_t v40[2];
  char v41;

  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v41, "TPToken_GetResultData");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v40);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 322, v14, v15);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v38, "Not initialized");
    *exception = aPpx;
    v35 = (std::string *)(exception + 1);
    if (SHIBYTE(v39) < 0)
    {
      std::string::__init_copy_ctor_external(v35, (const std::string::value_type *)v38, *((std::string::size_type *)&v38 + 1));
    }
    else
    {
      v37 = v38;
      exception[3] = v39;
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v37;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 4;
  }
  v16 = verifyTokenizerHandle(a1, "Bad input tokenizer handle");
  if (!a2
    || (v19 = (_QWORD *)v16,
        v20 = *(_QWORD *)(v16 + 96),
        a2 - 1 >= (unint64_t)((*(_QWORD *)(v16 + 104) - v20) >> 3))
    || !*(_QWORD *)(v20 + 8 * (a2 - 1)))
  {
    conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 326, v17, v18);
    v32 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v38, "Bad input result handle");
    *v32 = aPpx;
    v33 = (std::string *)(v32 + 1);
    if (SHIBYTE(v39) < 0)
    {
      std::string::__init_copy_ctor_external(v33, (const std::string::value_type *)v38, *((std::string::size_type *)&v38 + 1));
    }
    else
    {
      v36 = v38;
      v32[3] = v39;
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v36;
    }
    *v32 = &unk_24C2148C0;
    v32[4] = 3;
  }
  TTokenizer::getResultInfo(v16, a2, (uint64_t)&v38);
  if (a3)
    v22 = DWORD1(v38);
  else
    v22 = 0;
  verifyPointerArgument<TPTokenState,unsigned int>((uint64_t)a3, v22, 1, "Bad output state pointer", v21);
  if (a4)
    v24 = v38;
  else
    v24 = 0;
  verifyPointerArgument<TPTokenTrans,unsigned int>((uint64_t)a4, v24, 1, "Bad output trans pointer", v23);
  if (a5)
    v26 = DWORD2(v38);
  else
    v26 = 0;
  verifyPointerArgument<char,unsigned int>((uint64_t)a5, v26, 1, "Bad output spelling buffer", v25);
  if (a6)
    v28 = HIDWORD(v38);
  else
    v28 = 0;
  verifyPointerArgument<unsigned int,unsigned int>((uint64_t)a6, v28, 1, "Bad output starting state pointer", v27);
  if (a7)
    v30 = v39;
  else
    v30 = 0;
  verifyPointerArgument<unsigned int,unsigned int>((uint64_t)a7, v30, 1, "Bad output accepting state pointer", v29);
  TTokenizer::getResultData(v19, a2, a3, a4, a5, a6, a7);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v40);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_2097E7ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  void *v20;
  int v21;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  char *v40;
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0)
          v27 = *(_BYTE **)v27;
        handleException(v27, (uint64_t)"TPToken_GetResultData", *((_QWORD *)v26 + 4), v24, v25);
        break;
      case 6:
        v30 = (char *)__cxa_begin_catch(a1);
        v31 = v30 + 8;
        if (v30[31] < 0)
          v31 = *(_BYTE **)v31;
        handleException(v31, (uint64_t)"TPToken_GetResultData", 6, v28, v29);
        break;
      case 5:
        v34 = (char *)__cxa_begin_catch(a1);
        v35 = v34 + 8;
        if (v34[31] < 0)
          v35 = *(_BYTE **)v35;
LABEL_17:
        handleException(v35, (uint64_t)"TPToken_GetResultData", 2, v32, v33);
        break;
      case 4:
        v38 = (char *)__cxa_begin_catch(a1);
        v39 = v38 + 8;
        if (v38[31] < 0)
          v39 = *(_BYTE **)v39;
        handleException(v39, (uint64_t)"TPToken_GetResultData", 11, v36, v37);
        break;
      case 3:
        v40 = (char *)__cxa_begin_catch(a1);
        v35 = v40 + 8;
        if (v40[31] < 0)
          v35 = *(_BYTE **)v35;
        goto LABEL_17;
      case 2:
        v41 = __cxa_begin_catch(a1);
        v42 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPToken_GetResultData", 1, v43, v44);
        break;
      default:
        if (a2 != 1)
          _Unwind_Resume(a1);
        v45 = __cxa_begin_catch(a1);
        v46 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPToken_GetResultData", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x2097E7D60);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t verifyPointerArgument<TPTokenState,unsigned int>(uint64_t result, int a2, int a3, char *a4, uint64_t a5)
{
  BOOL v5;
  _QWORD *exception;
  std::string *v8;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (!result && a2 && a3)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 259, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *exception = aPpx;
    v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  if (a2)
    v5 = result == 0;
  else
    v5 = 1;
  if (v5 && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 260, (uint64_t)a4, a5);
    v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *v10 = aPpx;
    v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *v10 = &unk_24C2148C0;
    v10[4] = 3;
  }
  return result;
}

void sub_2097E82CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t verifyPointerArgument<TPTokenTrans,unsigned int>(uint64_t result, int a2, int a3, char *a4, uint64_t a5)
{
  BOOL v5;
  _QWORD *exception;
  std::string *v8;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (!result && a2 && a3)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 259, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *exception = aPpx;
    v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  if (a2)
    v5 = result == 0;
  else
    v5 = 1;
  if (v5 && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 260, (uint64_t)a4, a5);
    v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *v10 = aPpx;
    v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *v10 = &unk_24C2148C0;
    v10[4] = 3;
  }
  return result;
}

void sub_2097E8490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t verifyPointerArgument<char,unsigned int>(uint64_t result, int a2, int a3, char *a4, uint64_t a5)
{
  BOOL v5;
  _QWORD *exception;
  std::string *v8;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (!result && a2 && a3)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 259, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *exception = aPpx;
    v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  if (a2)
    v5 = result == 0;
  else
    v5 = 1;
  if (v5 && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 260, (uint64_t)a4, a5);
    v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *v10 = aPpx;
    v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *v10 = &unk_24C2148C0;
    v10[4] = 3;
  }
  return result;
}

void sub_2097E8654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t verifyPointerArgument<unsigned int,unsigned int>(uint64_t result, int a2, int a3, char *a4, uint64_t a5)
{
  BOOL v5;
  _QWORD *exception;
  std::string *v8;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (!result && a2 && a3)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 259, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *exception = aPpx;
    v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  if (a2)
    v5 = result == 0;
  else
    v5 = 1;
  if (v5 && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 260, (uint64_t)a4, a5);
    v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *v10 = aPpx;
    v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *v10 = &unk_24C2148C0;
    v10[4] = 3;
  }
  return result;
}

{
  BOOL v5;
  _QWORD *exception;
  std::string *v8;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (!result && a2 && a3)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 269, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *exception = aPpx;
    v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
    }
    *exception = &unk_24C2148C0;
    exception[4] = 3;
  }
  if (a2)
    v5 = result == 0;
  else
    v5 = 1;
  if (v5 && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 270, (uint64_t)a4, a5);
    v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *v10 = aPpx;
    v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *v10 = &unk_24C2148C0;
    v10[4] = 3;
  }
  return result;
}

void sub_2097E8818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

void TReentrancyHandler::TReentrancyHandler(TReentrancyHandler *this, const char *a2)
{
  uint64_t v3;
  uint64_t CsIn;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _QWORD *exception;
  std::string *v14;
  __int128 v15;
  void *v16[2];
  uint64_t v17;
  _BYTE __p[24];
  uint64_t v19;

  if (TReentrancyHandler::ms_bIn)
  {
    CsIn = TReentrancyHandler::getCsIn(this);
    if (*(char *)(CsIn + 23) >= 0)
      v9 = CsIn;
    else
      v9 = *(_QWORD *)CsIn;
    tknPrintf("Error: code reentrancy, originally entered in %s and now again in %s.\n", v5, v6, v7, v8, v9, a2);
    std::string::basic_string[abi:ne180100]<0>(v16, &byte_209A88803);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v16[0], (std::string::size_type)v16[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v16;
      v19 = v17;
    }
    *(_QWORD *)__p = &unk_24C217178;
    if (v19 >= 0)
      v12 = &__p[8];
    else
      v12 = *(const char **)&__p[8];
    conditionalAssert(v12, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 58, v10, v11);
    *(_QWORD *)__p = aPpx;
    if (SHIBYTE(v19) < 0)
      operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v17) < 0)
      operator delete(v16[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
    *exception = aPpx;
    v14 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      v15 = *(_OWORD *)__p;
      exception[3] = *(_QWORD *)&__p[16];
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    *exception = &unk_24C217178;
  }
  TReentrancyHandler::ms_bIn = 1;
  v3 = TReentrancyHandler::getCsIn(this);
  MEMORY[0x20BD14750](v3, a2);
}

void sub_2097E8A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t TReentrancyHandler::getCsIn(TReentrancyHandler *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    TReentrancyHandler::getCsIn(void)::s_csIn = (uint64_t)v3;
  }
  return TReentrancyHandler::getCsIn(void)::s_csIn;
}

void sub_2097E8B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TReentrancyException::~TReentrancyException(void **this)
{
  *this = (void *)aPpx;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = (void *)aPpx;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD149A8);
}

void TLocaleHandler::TLocaleHandler(TLocaleHandler *this)
{
  _xlocale *v2;

  *((_BYTE *)this + 8) = 0;
  v2 = (_xlocale *)TLocaleHandler::ms_MacLocale;
  if (!TLocaleHandler::ms_MacLocale)
  {
    v2 = newlocale(2, "UTF-8", 0);
    TLocaleHandler::ms_MacLocale = (uint64_t)v2;
  }
  *(_QWORD *)this = uselocale(v2);
}

void TLocaleHandler::~TLocaleHandler(locale_t *this)
{
  if (!*((_BYTE *)this + 8))
  {
    uselocale(*this);
    *((_BYTE *)this + 8) = 1;
  }
}

void OUTLINED_FUNCTION_0_0()
{
  JUMPOUT(0x20BD149A8);
}

uint64_t OUTLINED_FUNCTION_1_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
}

__int32 **TWord::TWord(__int32 **a1, __int32 *a2, __int32 *a3, __int32 *a4, __int32 *a5)
{
  unint64_t v6;
  _BYTE *v8;
  __int128 v9;
  _BYTE v10[1024];
  char v11;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = 0;
  v8 = v10;
  v9 = xmmword_209A57DD0;
  v11 = 1;
  getThirdField(a2, (uint64_t)&v8);
  v6 = (unint64_t)a1[4] & 0xFFFFFFFFFFFFFFFCLL;
  if (!*((_QWORD *)&v9 + 1))
    v6 |= 2uLL;
  a1[4] = (__int32 *)v6;
  if (v11 && v8 != v10 && v8)
    MEMORY[0x20BD149A8]();
  return a1;
}

void sub_2097E8D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418]))
    TWord::TWord((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int32 *TWord::getSpokenForm(__int32 **a1, uint64_t a2)
{
  return getThirdField(*a1, a2);
}

BOOL TWord::applyMask(uint64_t a1, _DWORD *a2)
{
  return TLexicon::applyMask(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (uint64_t *)(a1 + 32));
}

BOOL TLexicon::applyMask(uint64_t a1, unint64_t a2, _DWORD *a3, uint64_t *a4)
{
  _BOOL8 v4;
  _BOOL8 v5;
  unint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  _BYTE *v12;
  __int128 v13;
  _BYTE v14[1024];
  char v15;

  v4 = *a3 != 33;
  v5 = *a3 == 33;
  if (a2 != -1)
  {
    v6 = 0;
    v7 = &a3[*a3 == 33];
    while (1)
    {
      v8 = v7[v6];
      if (v8 != 48)
        break;
      ++v6;
    }
    if (v8)
    {
      v12 = v14;
      v13 = xmmword_209A57DD0;
      v15 = 1;
      TLexicon::getOptionalTagBits(a1, a2, (uint64_t)&v12, a4);
      if (v6 < *((_QWORD *)&v13 + 1))
      {
        do
        {
          v9 = v7[v6];
          if (!v9)
            break;
          if (v9 != 48 && *(_DWORD *)&v12[4 * v6] == 49)
          {
            if (v15 && v12 != v14)
              MEMORY[0x20BD149A8](v12, 0x1000C4052888210);
            return v4;
          }
          ++v6;
        }
        while (*((_QWORD *)&v13 + 1) != v6);
      }
      if (v15)
      {
        if (v12 != v14 && v12 != 0)
          MEMORY[0x20BD149A8]();
      }
    }
  }
  return v5;
}

void sub_2097E8E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418]))
    TWord::TWord((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL TLexicon::checkBits(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  unint64_t v10;

  if (a2 == -1)
    return 1;
  if ((*(_BYTE *)a5 & 4) == 0)
    TLexicon::getOptionalTagBits(a1, a2, 0, a5);
  if (!a4)
    return 0;
  if ((((unint64_t)*a5 >> *a3) & 1) != 0)
    return 1;
  v9 = 1;
  do
  {
    v10 = v9;
    if (a4 == v9)
      break;
    ++v9;
  }
  while ((((unint64_t)*a5 >> a3[v10]) & 1) == 0);
  return v10 < a4;
}

uint64_t TWord::getUnigramScore(TWord *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[2];
  unsigned int v5;

  v1 = *((_QWORD *)this + 2);
  if (v1 == -1)
    v2 = -1;
  else
    v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 104);
  v5 = 0;
  v4[0] = v2;
  v4[1] = v1;
  SDLm_LmScore(0, 0, 0, 0, 0, v4, 1u, (uint64_t)&v5, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  return v5;
}

void TWord::getCategoryTag(uint64_t a1, _QWORD *a2)
{
  TLexicon::getCategoryTag(*(unint64_t **)(a1 + 8), *(_QWORD *)(a1 + 16), a2);
}

void TLexicon::getCategoryTag(unint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE v13[256];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  TBuffer<wchar_t>::assign((uint64_t)a3, dword_209A60548);
  if (a2 != -1)
  {
    v6 = a1[49];
    if (v6)
    {
      if (a1[50])
      {
        v7 = v6 + 7;
        if (v7 <= 0x807)
        {
          SDWord_GetTagBits(a1[13], a2, 1uLL, v13, v7 >> 3);
          v8 = a1[49];
          if (v8)
          {
            v9 = 0;
            v10 = 0;
            do
            {
              v10 |= ((uint64_t)(v13[v9 >> 3] >> (v9 & 7) << 63) >> 63) & (1 << v9);
              ++v9;
            }
            while (v8 != v9);
          }
          else
          {
            v10 = 0;
          }
          TBuffer<wchar_t>::resize((uint64_t)a3, 0);
          TLocaleInfo::multiByteToUnicode((uint64_t)(a1 + 30), (unsigned __int8 *)(a1[52] + v10 + v10 * a1[51]), a1[51], (uint64_t)a3);
          v11 = a3[2];
          if (v11)
          {
            v12 = 0;
            while (*(_DWORD *)(*a3 + 4 * v12) != 32)
            {
              if (v11 == ++v12)
                return;
            }
            TBuffer<wchar_t>::resize((uint64_t)a3, v12);
          }
        }
      }
    }
  }
}

void TWord::getOptionalTagBits(uint64_t a1, uint64_t a2)
{
  TLexicon::getOptionalTagBits(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (uint64_t *)(a1 + 32));
}

void TLexicon::getOptionalTagBits(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8;
  void *v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[256];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    TBuffer<wchar_t>::resize(a3, 0);
    v8 = *(_QWORD *)(a1 + 384);
    if (*(_BYTE *)(a3 + 1048) && *(_QWORD *)(a3 + 8) < v8)
    {
      *(_QWORD *)(a3 + 8) = v8 + 1;
      v9 = (void *)operator new[]();
      v10 = v9;
      v11 = *(const void **)a3;
      v12 = *(_QWORD *)(a3 + 16);
      if (v12)
        memmove(v9, *(const void **)a3, 4 * v12);
      if (v11 != (const void *)(a3 + 24) && v11)
        MEMORY[0x20BD149A8](v11, 0x1000C4052888210);
      *(_QWORD *)a3 = v10;
    }
    v13 = *(_QWORD *)(a3 + 16);
    if (v13 < v8)
    {
      v14 = v8;
      if (*(_BYTE *)(a3 + 1048)
        || ((v15 = *(_QWORD *)(a3 + 8), v15 >= v8) ? (v14 = v8) : (v14 = *(_QWORD *)(a3 + 8)), v13 < v15 && v14 != v13))
      {
        memset_pattern16((void *)(*(_QWORD *)a3 + 4 * v13), "0", 4 * (v14 - v13));
      }
    }
    *(_QWORD *)(a3 + 16) = v8;
  }
  if (a2 != -1)
  {
    v16 = *(_QWORD *)(a1 + 384);
    if (v16)
    {
      v17 = v16 + 7;
      if (v17 <= 0x807)
      {
        SDWord_GetTagBits(*(_QWORD *)(a1 + 104), a2, 2uLL, v23, v17 >> 3);
        if (a3)
        {
          v18 = *(_QWORD *)(a1 + 384);
          if (v18)
          {
            for (i = 0; i != v18; ++i)
            {
              if (((v23[i >> 3] >> (i & 7)) & 1) != 0)
                *(_DWORD *)(*(_QWORD *)a3 + 4 * i) = 49;
            }
          }
        }
        if (a4)
        {
          v20 = 0;
          v21 = *a4 | 4;
          do
          {
            v22 = v21 & ~(8 << v20);
            v21 |= 8 << v20;
            if (((v23[TWord::ms_pnOTBIndex[v20] >> 3] >> (TWord::ms_pnOTBIndex[v20] & 7)) & 1) == 0)
              v21 = v22;
            *a4 = v21;
            ++v20;
          }
          while (v20 != 5);
        }
      }
    }
  }
}

uint64_t *TWord::getOptionalTagBits(TWord *this)
{
  uint64_t *v1;

  v1 = (uint64_t *)((char *)this + 32);
  if ((*((_BYTE *)this + 32) & 4) == 0)
    TLexicon::getOptionalTagBits(*((_QWORD *)this + 1), *((_QWORD *)this + 2), 0, v1);
  return v1;
}

uint64_t TWord::getWrittenForm(__int32 **a1, uint64_t a2)
{
  return TLexicon::getWrittenForm((int)a1, *a1, a2);
}

uint64_t TLexicon::getWrittenForm(int a1, __int32 *__s, uint64_t a3)
{
  __int32 *v5;
  __int32 v6;
  unint64_t v8;

  v5 = wcschr(__s, 92);
  if (!v5)
    return TBuffer<wchar_t>::assign(a3, __s);
  if (v5 == __s)
  {
    v6 = __s[1];
    if (v6 == 92 || v6 == 0)
      v5 = __s + 1;
    else
      v5 = __s;
  }
  v8 = v5 - __s;
  TBuffer<wchar_t>::resize(a3, 0);
  return TBuffer<wchar_t>::insert(a3, 0, __s, v8);
}

__int32 *TWord::getWordSense(__int32 **a1, uint64_t a2)
{
  return getSecondField(*a1, a2);
}

uint64_t TWord::getTokenName(__int32 **a1, uint64_t a2)
{
  return TLexicon::getTokenName((int)a1, *a1, a2);
}

uint64_t TLexicon::getTokenName(int a1, __int32 *a2, uint64_t a3)
{
  uint64_t result;
  _BYTE *v6;
  __int128 v7;
  _BYTE v8[1024];
  char v9;

  TLexicon::getWrittenForm(a1, a2, a3);
  v6 = v8;
  v7 = xmmword_209A57DD0;
  v9 = 1;
  result = (uint64_t)getSecondField(a2, (uint64_t)&v6);
  if (*((_QWORD *)&v7 + 1))
  {
    TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), (int *)&unk_209A604C4, 1uLL);
    result = TBuffer<wchar_t>::operator+=(a3, (uint64_t)&v6);
  }
  if (v9)
  {
    result = (uint64_t)v6;
    if (v6 != v8)
    {
      if (v6)
        return MEMORY[0x20BD149A8]();
    }
  }
  return result;
}

void sub_2097E9538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418]))
    TWord::TWord((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t TWord::getWordSpec(TWord *this)
{
  if (*((_QWORD *)this + 2) == -1)
    return -1;
  else
    return *(_QWORD *)(*((_QWORD *)this + 1) + 104);
}

uint64_t TWord::getHeadClone(uint64_t this)
{
  if ((*(_BYTE *)(this + 32) & 2) == 0)
    return TLexicon::findHeadClone(*(_QWORD *)(this + 8), *(__int32 **)this);
  return this;
}

uint64_t TLexicon::findHeadClone(uint64_t a1, __int32 *a2)
{
  __int32 *v3;
  uint64_t Word;
  uint64_t v5;
  __int32 *v6;
  _QWORD *v7;
  __int32 *v9;
  __int128 v10;
  _BYTE v11[1024];
  char v12;
  int v13;

  v9 = (__int32 *)v11;
  v10 = xmmword_209A57DD0;
  v12 = 1;
  TLexicon::getTokenName(a1, a2, (uint64_t)&v9);
  if (*((_QWORD *)&v10 + 1) >= (unint64_t)v10)
  {
    if (v12)
    {
      v13 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v9, *((unint64_t *)&v10 + 1), &v13, 1uLL);
      v3 = v9;
      --*((_QWORD *)&v10 + 1);
    }
    else
    {
      v3 = v9;
      if ((_QWORD)v10)
        v9[(_QWORD)v10 - 1] = 0;
    }
  }
  else
  {
    v3 = v9;
    v9[*((_QWORD *)&v10 + 1)] = 0;
  }
  Word = TLexicon::findWord(a1, v3);
  v5 = Word;
  if (!Word || (*(_BYTE *)(Word + 32) & 2) == 0)
  {
    if (*((_QWORD *)&v10 + 1) >= (unint64_t)v10)
    {
      if (v12)
      {
        v13 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v9, *((unint64_t *)&v10 + 1), &v13, 1uLL);
        v6 = v9;
        --*((_QWORD *)&v10 + 1);
      }
      else
      {
        v6 = v9;
        if ((_QWORD)v10)
          v9[(_QWORD)v10 - 1] = 0;
      }
    }
    else
    {
      v6 = v9;
      v9[*((_QWORD *)&v10 + 1)] = 0;
    }
    v7 = TLexicon::computeClones(a1, v6);
    if (v7)
      v5 = v7[3];
    else
      v5 = 0;
  }
  if (v12 && v9 != (__int32 *)v11 && v9)
    MEMORY[0x20BD149A8]();
  return v5;
}

void sub_2097E96FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (LOBYTE(STACK[0x420]))
  {
    if (a10 != v10 && a10 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

void TWord::getClones(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  __int32 *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int32 *v25;
  __int128 v26;
  _BYTE v27[1024];
  char v28;
  int v29[3];

  std::vector<TItnRule *>::resize(a2, 0);
  v25 = (__int32 *)v27;
  v26 = xmmword_209A57DD0;
  v28 = 1;
  TLexicon::getTokenName(v4, *(__int32 **)a1, (uint64_t)&v25);
  v5 = *(_QWORD *)(a1 + 8);
  if (*((_QWORD *)&v26 + 1) >= (unint64_t)v26)
  {
    if (v28)
    {
      v29[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), v29, 1uLL);
      v6 = v25;
      --*((_QWORD *)&v26 + 1);
    }
    else
    {
      v6 = v25;
      if ((_QWORD)v26)
        v25[(_QWORD)v26 - 1] = 0;
    }
  }
  else
  {
    v6 = v25;
    v25[*((_QWORD *)&v26 + 1)] = 0;
  }
  v7 = TLexicon::computeClones(v5, v6);
  v8 = v7;
  if (v7)
  {
    std::vector<TPItnTagHandle_fake **>::reserve((void **)a2, v7[1] - 1);
    v9 = v8[1];
    if (v9)
    {
      v10 = v8 + 3;
      do
      {
        v11 = *v10;
        if (*v10 != a1)
        {
          v13 = *(_QWORD **)(a2 + 8);
          v12 = *(_QWORD *)(a2 + 16);
          if ((unint64_t)v13 >= v12)
          {
            v15 = ((uint64_t)v13 - *(_QWORD *)a2) >> 3;
            if ((unint64_t)(v15 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v16 = v12 - *(_QWORD *)a2;
            v17 = v16 >> 2;
            if (v16 >> 2 <= (unint64_t)(v15 + 1))
              v17 = v15 + 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            if (v18)
            {
              v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a2 + 16, v18);
              v11 = *v10;
            }
            else
            {
              v19 = 0;
            }
            v20 = &v19[8 * v15];
            *(_QWORD *)v20 = v11;
            v14 = v20 + 8;
            v22 = *(char **)a2;
            v21 = *(char **)(a2 + 8);
            if (v21 != *(char **)a2)
            {
              do
              {
                v23 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *((_QWORD *)v20 - 1) = v23;
                v20 -= 8;
              }
              while (v21 != v22);
              v21 = *(char **)a2;
            }
            *(_QWORD *)a2 = v20;
            *(_QWORD *)(a2 + 8) = v14;
            *(_QWORD *)(a2 + 16) = &v19[8 * v18];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *v13 = v11;
            v14 = v13 + 1;
          }
          *(_QWORD *)(a2 + 8) = v14;
          v9 = v8[1];
        }
        ++v10;
      }
      while (v10 != &v8[v9 + 3]);
    }
  }
  if (v28)
  {
    if (v25 != (__int32 *)v27 && v25 != 0)
      MEMORY[0x20BD149A8]();
  }
}

void sub_2097E9954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (LOBYTE(STACK[0x418]))
  {
    if (a9 != v9 && a9 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

_QWORD *TLexicon::computeClones(uint64_t a1, __int32 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t Word;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int32 *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __int32 *v25;
  __int32 **v26;
  __int32 *v27;
  const __int32 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  __int32 ***v37;
  char *v38;
  char *v39;
  __int32 **v40;
  uint64_t v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  _BYTE v54[833];
  char v55;
  void *v56;
  void *v57;
  unint64_t v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  void *__p;
  __int128 v63;
  _BYTE v64[1024];
  char v65;
  _QWORD v66[2];
  uint64_t v67;
  __int32 *v68;
  __int32 **v69;
  void **v70;
  char *v71;
  __int128 v72;
  _BYTE v73[256];
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  ++*(_QWORD *)(a1 + 472);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, a2);
  v4 = std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>(a1 + 176, (uint64_t)&__p);
  if (SHIBYTE(v63) < 0)
    operator delete(__p);
  if ((_QWORD *)(a1 + 184) != v4)
  {
    ++*(_QWORD *)(a1 + 496);
    return (_QWORD *)v4[7];
  }
  Word = TLexicon::findWord(a1, a2);
  if (Word && (*(_BYTE *)(Word + 32) & 1) != 0)
  {
    v5 = 0;
    ++*(_QWORD *)(a1 + 496);
    return v5;
  }
  __p = v64;
  v63 = xmmword_209A57DD0;
  v65 = 1;
  getSecondField(a2, (uint64_t)&__p);
  v71 = v73;
  v72 = xmmword_209A57DD0;
  v74 = 1;
  TLocaleInfo::unicodeToMultiByte(a1 + 240, (unsigned int *)a2, (uint64_t)&v71);
  v61 = 0;
  v60 = 0;
  v59 = 0;
  v8 = *(_QWORD *)(a1 + 104);
  if (*((_QWORD *)&v72 + 1) >= (unint64_t)v72)
  {
    if (v74)
    {
      LOBYTE(v52) = 0;
      TBuffer<char>::insert((uint64_t)&v71, *((unint64_t *)&v72 + 1), (char *)&v52, 1uLL);
      --*((_QWORD *)&v72 + 1);
    }
    else if ((_QWORD)v72)
    {
      v71[(_QWORD)v72 - 1] = 0;
    }
  }
  else
  {
    v71[*((_QWORD *)&v72 + 1)] = 0;
  }
  if (*((_QWORD *)&v63 + 1))
    v9 = "\\";
  else
    v9 = "\\\\";
  SDVoc_GetWords(v8, 0xFFFFFFFFFFFFFFFELL, v71, v9, *(void **)(a1 + 432), *(unsigned int *)(a1 + 424), (unsigned int *)&v61 + 1, (void **)&v60, (unsigned int *)&v61, (void (*)(unint64_t, unsigned int, unsigned int, void *, unsigned int, void **, unsigned int *))callBackMRECArrayReallocator, 0, &v59);
  v57 = 0;
  v56 = 0;
  v58 = 0;
  if (HIDWORD(v61))
  {
    v14 = 0;
    do
    {
      ++*(_QWORD *)(a1 + 512);
      v15 = (__int32 *)v60[v14];
      v16 = TStringParam::get((TStringParam *)(*(_QWORD *)(a1 + 336) + 496));
      if (!TLexicon::applyMask(a1, (unint64_t)v15, v16, 0))
      {
        if (SDWord_GetName(*(_QWORD *)(a1 + 104), (unint64_t)v15, (char *)&v70, 0x100u) < 0x101)
        {
          v52 = v54;
          v53 = xmmword_209A57DD0;
          v55 = 1;
          if (TLocaleInfo::multiByteToUnicode(a1 + 240, (unsigned __int8 *)&v70, (uint64_t)&v52))
          {
            tknPrintf("Warning: '%s' : Can't convert to Unicode. Ignored.\n", v21, v22, v23, v24, &v70);
          }
          else
          {
            if (*((_QWORD *)&v53 + 1) >= (unint64_t)v53)
            {
              if (v55)
              {
                LODWORD(v66[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v52, *((unint64_t *)&v53 + 1), (int *)v66, 1uLL);
                v25 = (const __int32 *)v52;
                --*((_QWORD *)&v53 + 1);
              }
              else
              {
                v25 = (const __int32 *)v52;
                if ((_QWORD)v53)
                  *((_DWORD *)v52 + v53 - 1) = 0;
              }
            }
            else
            {
              v25 = (const __int32 *)v52;
              *((_DWORD *)v52 + *((_QWORD *)&v53 + 1)) = 0;
            }
            v68 = (__int32 *)v25;
            v69 = 0;
            THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find(a1 + 200, (const __int32 **)&v68, v66);
            if (!v67 || (v26 = *(__int32 ***)(v67 + 16)) == 0)
            {
              v27 = (__int32 *)operator new[]();
              if (*((_QWORD *)&v53 + 1) >= (unint64_t)v53)
              {
                if (v55)
                {
                  LODWORD(v66[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v52, *((unint64_t *)&v53 + 1), (int *)v66, 1uLL);
                  v28 = (const __int32 *)v52;
                  --*((_QWORD *)&v53 + 1);
                }
                else
                {
                  v28 = (const __int32 *)v52;
                  if ((_QWORD)v53)
                    *((_DWORD *)v52 + v53 - 1) = 0;
                }
              }
              else
              {
                v28 = (const __int32 *)v52;
                *((_DWORD *)v52 + *((_QWORD *)&v53 + 1)) = 0;
              }
              wcscpy(v27, v28);
              v26 = (__int32 **)operator new();
              TWord::TWord(v26, v27, (__int32 *)a1, v15, *(__int32 **)(a1 + 328));
              v68 = *v26;
              v69 = v26;
              THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::insert(a1 + 200, (const __int32 **)&v68, v29, v30, v31, (uint64_t)v66);
            }
            v32 = (char *)v57;
            if ((unint64_t)v57 >= v58)
            {
              v34 = ((_BYTE *)v57 - (_BYTE *)v56) >> 3;
              if ((unint64_t)(v34 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v35 = (uint64_t)(v58 - (_QWORD)v56) >> 2;
              if (v35 <= v34 + 1)
                v35 = v34 + 1;
              if (v58 - (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                v10 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v10 = v35;
              if (v10)
                v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v58, v10);
              else
                v36 = 0;
              v37 = (__int32 ***)&v36[8 * v34];
              *v37 = v26;
              v33 = v37 + 1;
              v38 = (char *)v57;
              v39 = (char *)v56;
              if (v57 != v56)
              {
                do
                {
                  v40 = (__int32 **)*((_QWORD *)v38 - 1);
                  v38 -= 8;
                  *--v37 = v40;
                }
                while (v38 != v39);
                v38 = (char *)v56;
              }
              v56 = v37;
              v57 = v33;
              v58 = (unint64_t)&v36[8 * v10];
              if (v38)
                operator delete(v38);
            }
            else
            {
              *(_QWORD *)v57 = v26;
              v33 = v32 + 8;
            }
            v57 = v33;
          }
          if (v55)
          {
            if (v52 != v54 && v52 != 0)
              MEMORY[0x20BD149A8]();
          }
        }
        else
        {
          tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'. Ignored.\n", v17, v18, v19, v20, 256, &v70);
        }
      }
      ++v14;
    }
    while (v14 < HIDWORD(v61));
  }
  if (v60 != *(_QWORD **)(a1 + 432))
  {
    tknPrintf("Warning: Inefficient head-clone search. Required dynamic allocation of size %llu\n", v10, v11, v12, v13, v61);
    v42 = *(_QWORD *)(a1 + 432);
    if (v42)
      MEMORY[0x20BD14990](v42, 0x80C80B8603338);
    *(_QWORD *)(a1 + 432) = v60;
    *(_DWORD *)(a1 + 424) = v61;
  }
  v43 = (char *)v56;
  v44 = v57;
  if (v56 == v57)
  {
    v5 = 0;
    if (!v56)
      goto LABEL_74;
  }
  else
  {
    v45 = *(_QWORD *)v56;
    v46 = *(_QWORD *)(*(_QWORD *)v56 + 32);
    *(_QWORD *)(*(_QWORD *)v56 + 32) = v46 | 1;
    v47 = v44 - v43;
    if ((unint64_t)v47 <= 8 && (v46 & 2) != 0)
    {
      v5 = 0;
    }
    else
    {
      *(_QWORD *)(v45 + 32) = v46 | 3;
      if ((unint64_t)v47 >= 9)
      {
        v48 = v47 >> 3;
        if (v48 <= 2)
          v48 = 2;
        v49 = v48 - 1;
        v50 = (uint64_t *)(v43 + 8);
        do
        {
          v51 = *v50++;
          *(_QWORD *)(v51 + 32) |= 1uLL;
          --v49;
        }
        while (v49);
      }
      v5 = TWordBlock::create((uint64_t)&v56, *(_QWORD *)(a1 + 328), 0);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v52, a2);
      v70 = &v52;
      *((_QWORD *)std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring&&>,std::tuple<>>((uint64_t **)(a1 + 176), (uint64_t)&v52, (uint64_t)&std::piecewise_construct, (_OWORD **)&v70)+ 7) = v5;
      if (SHIBYTE(v53) < 0)
        operator delete(v52);
      v43 = (char *)v56;
      if (!v56)
        goto LABEL_74;
    }
  }
  v57 = v43;
  operator delete(v43);
LABEL_74:
  if (v74 && v71 != v73 && v71)
    MEMORY[0x20BD149A8]();
  if (v65 && __p != v64 && __p)
    MEMORY[0x20BD149A8]();
  return v5;
}

void sub_2097EA098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v25;
  unint64_t v26;
  unint64_t v27;

  if (a24 < 0)
    operator delete(__p);
  v25 = (void *)STACK[0x470];
  if (STACK[0x470])
  {
    STACK[0x478] = (unint64_t)v25;
    operator delete(v25);
  }
  if (LOBYTE(STACK[0xB08]))
  {
    v26 = STACK[0x9F0];
    if (STACK[0x9F0] != a15)
    {
      if (v26)
        MEMORY[0x20BD149A8](v26, 0x1000C4077774924);
    }
  }
  if (LOBYTE(STACK[0x8B8]))
  {
    v27 = STACK[0x4A0];
    if (STACK[0x4A0] != a16)
    {
      if (v27)
        MEMORY[0x20BD149A8](v27, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

void TLexicon::getHomophones(uint64_t a1, __int32 *a2, _DWORD *a3, void **a4)
{
  uint64_t Word;
  uint64_t v9;
  unsigned int WordsWithCommonPron;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  __int32 *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const __int32 *v28;
  __int32 **v29;
  __int32 *v30;
  const __int32 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int32 ***v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  __int32 ***v43;
  char *v44;
  char *v45;
  __int32 **v46;
  size_t v48;
  void *__p;
  __int128 v50;
  _BYTE v51[1024];
  char v52;
  _QWORD v53[2];
  uint64_t v54;
  __int32 *v55;
  __int32 **v56;
  unsigned __int8 v57[256];
  _OWORD v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  std::vector<TItnRule *>::resize((uint64_t)a4, 0);
  Word = TLexicon::findWord(a1, a2);
  if (Word)
  {
    v9 = Word;
    memset(v58, 0, 512);
    WordsWithCommonPron = SDWord_GetWordsWithCommonPron(*(_QWORD *)(a1 + 104), *(_QWORD *)(Word + 16), v58, 0x100u);
    if (WordsWithCommonPron < 0x101)
    {
      if (!WordsWithCommonPron)
        return;
      v16 = WordsWithCommonPron;
    }
    else
    {
      loggableUnicode((unsigned int *)a2, &__p);
      if (v50 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      tknPrintf("Warning: '%s' : Too many homophones to process.\n", v11, v12, v13, v14, p_p);
      if (SHIBYTE(v50) < 0)
        operator delete(__p);
      v16 = 256;
    }
    v17 = 0;
    v48 = a1 + 200;
    do
    {
      v18 = (__int32 *)*((_QWORD *)v58 + v17);
      if (v18 != *(__int32 **)(v9 + 16) && !TLexicon::applyMask(a1, *((_QWORD *)v58 + v17), a3, 0))
      {
        v19 = TStringParam::get((TStringParam *)(*(_QWORD *)(a1 + 336) + 496));
        if (!TLexicon::applyMask(a1, (unint64_t)v18, v19, 0))
        {
          if (SDWord_GetName(*(_QWORD *)(a1 + 104), (unint64_t)v18, (char *)v57, 0x100u) < 0x101)
          {
            __p = v51;
            v50 = xmmword_209A57DD0;
            v52 = 1;
            if (TLocaleInfo::multiByteToUnicode(a1 + 240, v57, (uint64_t)&__p))
            {
              tknPrintf("Warning: '%s' : Can't convert to Unicode. Ignored.\n", v24, v25, v26, v27, v57);
            }
            else
            {
              if (*((_QWORD *)&v50 + 1) >= (unint64_t)v50)
              {
                if (v52)
                {
                  LODWORD(v53[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v50 + 1), (int *)v53, 1uLL);
                  v28 = (const __int32 *)__p;
                  --*((_QWORD *)&v50 + 1);
                }
                else
                {
                  v28 = (const __int32 *)__p;
                  if ((_QWORD)v50)
                    *((_DWORD *)__p + v50 - 1) = 0;
                }
              }
              else
              {
                v28 = (const __int32 *)__p;
                *((_DWORD *)__p + *((_QWORD *)&v50 + 1)) = 0;
              }
              v55 = (__int32 *)v28;
              v56 = 0;
              THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find(v48, (const __int32 **)&v55, v53);
              if (!v54 || (v29 = *(__int32 ***)(v54 + 16)) == 0)
              {
                v30 = (__int32 *)operator new[]();
                if (*((_QWORD *)&v50 + 1) >= (unint64_t)v50)
                {
                  if (v52)
                  {
                    LODWORD(v53[0]) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v50 + 1), (int *)v53, 1uLL);
                    v31 = (const __int32 *)__p;
                    --*((_QWORD *)&v50 + 1);
                  }
                  else
                  {
                    v31 = (const __int32 *)__p;
                    if ((_QWORD)v50)
                      *((_DWORD *)__p + v50 - 1) = 0;
                  }
                }
                else
                {
                  v31 = (const __int32 *)__p;
                  *((_DWORD *)__p + *((_QWORD *)&v50 + 1)) = 0;
                }
                wcscpy(v30, v31);
                v29 = (__int32 **)operator new();
                TWord::TWord(v29, v30, (__int32 *)a1, v18, *(__int32 **)(a1 + 328));
                v55 = *v29;
                v56 = v29;
                THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::insert(v48, (const __int32 **)&v55, v32, v33, v34, (uint64_t)v53);
              }
              v36 = (__int32 ***)a4[1];
              v35 = (unint64_t)a4[2];
              if ((unint64_t)v36 >= v35)
              {
                v38 = ((char *)v36 - (_BYTE *)*a4) >> 3;
                if ((unint64_t)(v38 + 1) >> 61)
                  std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                v39 = v35 - (_QWORD)*a4;
                v40 = v39 >> 2;
                if (v39 >> 2 <= (unint64_t)(v38 + 1))
                  v40 = v38 + 1;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
                  v41 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v41 = v40;
                if (v41)
                  v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a4 + 2), v41);
                else
                  v42 = 0;
                v43 = (__int32 ***)&v42[8 * v38];
                *v43 = v29;
                v37 = v43 + 1;
                v45 = (char *)*a4;
                v44 = (char *)a4[1];
                if (v44 != *a4)
                {
                  do
                  {
                    v46 = (__int32 **)*((_QWORD *)v44 - 1);
                    v44 -= 8;
                    *--v43 = v46;
                  }
                  while (v44 != v45);
                  v44 = (char *)*a4;
                }
                *a4 = v43;
                a4[1] = v37;
                a4[2] = &v42[8 * v41];
                if (v44)
                  operator delete(v44);
              }
              else
              {
                *v36 = v29;
                v37 = v36 + 1;
              }
              a4[1] = v37;
            }
            if (v52)
            {
              if (__p != v51 && __p != 0)
                MEMORY[0x20BD149A8]();
            }
          }
          else
          {
            tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'. Ignored.\n", v20, v21, v22, v23, 256, v57);
          }
        }
      }
      ++v17;
    }
    while (v17 != v16);
  }
}

void sub_2097EA6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *TLexiconScore::TLexiconScore(uint64_t *a1, const __int32 *a2, unsigned int *a3, size_t a4, size_t a5, uint64_t a6)
{
  size_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  signed int v18;
  unsigned __int8 v19;
  signed int v20;
  unsigned __int8 v21;
  int v22;
  unsigned __int8 v23;
  int v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 v29;
  int v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned __int8 v36;
  int v37;
  unsigned __int8 v38;
  char isLower;
  char v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  _BOOL4 v45;
  TLocaleInfo *v47;
  TLocaleInfo *v48;
  TLocaleInfo *v49;
  TLocaleInfo *v50;
  TLocaleInfo *v51;
  TLocaleInfo *v52;
  TLocaleInfo *v53;
  TLocaleInfo *v54;
  size_t v55;
  _BYTE *v56;
  __int128 v57;
  _BYTE v58[785];
  char v59;
  _BYTE *v60;
  __int128 v61;
  _BYTE v62[1024];
  char v63;
  unint64_t v64;
  unint64_t v65;
  int v66[3];

  *((_BYTE *)a1 + 8) = 0;
  *a1 = 0;
  v12 = wcslen((const __int32 *)a3);
  if (wcsncmp(a2, (const __int32 *)a3, v12))
  {
    v55 = a4;
    if (*a2)
    {
      v13 = (unsigned int *)a2;
      v14 = a3;
      while (1)
      {
        if (!*v14)
          goto LABEL_77;
        v65 = 0;
        TCollation::collateNext((_QWORD *)(a6 + 16), v13, &v65);
        v64 = 0;
        TCollation::collateNext((_QWORD *)(a6 + 16), v14, &v64);
        if (v65 != v64
          || (v15 = TLocaleInfo::removeDiacritics(a6, *v13),
              v16 = TLocaleInfo::toLower(a6, v15),
              v17 = TLocaleInfo::removeDiacritics(a6, *v14),
              v16 != TLocaleInfo::toLower(a6, v17)))
        {
          ++*((_BYTE *)a1 + 8);
        }
        v18 = *v13;
        if ((v19 & 1) == 0
        {
          v47 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v47);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v47;
        }
        if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v18))
        {
          v20 = *v14;
          if ((v21 & 1) == 0
          {
            v48 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v48);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v48;
          }
          if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v20))
            break;
        }
LABEL_59:
        v13 += v65;
        v14 += v64;
        if (!*v13)
          goto LABEL_77;
      }
      v22 = *v13;
      if ((v23 & 1) == 0
      {
        v49 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v49);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v49;
      }
      if (!TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v22))
        goto LABEL_18;
      v24 = *v14;
      if ((v25 & 1) == 0
      {
        v52 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v52);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v52;
      }
      if (TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v24))
      {
        v26 = *a1;
        if (v14 == a3)
          v27 = v26 | 1;
        else
          v27 = v26 | 4;
      }
      else
      {
LABEL_18:
        v28 = *v13;
        if ((v29 & 1) == 0
        {
          v50 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v50);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v50;
        }
        if (!TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v28))
          goto LABEL_27;
        v30 = *v14;
        if ((v31 & 1) == 0
        {
          v53 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v53);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v53;
        }
        if (!TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v30))
        {
LABEL_27:
          v60 = v62;
          v61 = xmmword_209A57DD0;
          v63 = 1;
          v56 = v58;
          v57 = xmmword_209A57DD0;
          v59 = 1;
          TLocaleInfo::decomposeCharacter(a6, *v13, (uint64_t *)&v60);
          TLocaleInfo::decomposeCharacter(a6, *v14, (uint64_t *)&v56);
          if (*((_QWORD *)&v61 + 1) >= (unint64_t)v61)
          {
            if (v63)
            {
              v66[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v60, *((unint64_t *)&v61 + 1), v66, 1uLL);
              v33 = (uint64_t)v60;
              --*((_QWORD *)&v61 + 1);
            }
            else
            {
              v33 = (uint64_t)v60;
              if ((_QWORD)v61)
                *(_DWORD *)&v60[4 * v61 - 4] = 0;
            }
          }
          else
          {
            v33 = (uint64_t)v60;
            *(_DWORD *)&v60[4 * *((_QWORD *)&v61 + 1)] = 0;
          }
          if (*((_QWORD *)&v57 + 1) >= (unint64_t)v57)
          {
            if (v59)
            {
              v66[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v56, *((unint64_t *)&v57 + 1), v66, 1uLL);
              v34 = (uint64_t)v56;
              --*((_QWORD *)&v57 + 1);
            }
            else
            {
              v34 = (uint64_t)v56;
              if ((_QWORD)v57)
                *(_DWORD *)&v56[4 * v57 - 4] = 0;
            }
          }
          else
          {
            v34 = (uint64_t)v56;
            *(_DWORD *)&v56[4 * *((_QWORD *)&v57 + 1)] = 0;
          }
          if (!wcscmp((const __int32 *)(v33 + 4), (const __int32 *)(v34 + 4)))
            goto LABEL_51;
          v35 = *v13;
          if ((v36 & 1) == 0
          {
            v51 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v51);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v51;
          }
          if (TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v35))
          {
            if (*((_QWORD *)&v61 + 1) < 2uLL)
              goto LABEL_51;
            v37 = *v14;
            if ((v38 & 1) == 0
            {
              v54 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v54);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v54;
            }
            isLower = TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v37);
            v40 = *((_QWORD *)&v57 + 1) > 1uLL ? 1 : isLower;
            if ((v40 & 1) == 0)
              goto LABEL_51;
            v41 = 32;
          }
          else
          {
            v41 = 16;
          }
          *a1 |= v41;
LABEL_51:
          if (v59 && v56 != v58 && v56)
            MEMORY[0x20BD149A8]();
          if (v63 && v60 != v62 && v60)
            MEMORY[0x20BD149A8]();
          goto LABEL_59;
        }
        v32 = *a1;
        if (v13 == (unsigned int *)a2)
          v27 = v32 | 2;
        else
          v27 = v32 | 8;
      }
      *a1 = v27;
      goto LABEL_27;
    }
LABEL_77:
    v42 = wcslen((const __int32 *)a3);
    v43 = *a1;
    if ((*a1 & 5) != 0 && v42 < a5)
      v43 |= 0x40uLL;
    v45 = (v43 & 0x30) != 0 && v42 < v55;
    if ((*a1 & 5) != 0 && v42 < a5 || v45)
    {
      if (v45)
        v43 |= 0x80uLL;
      *a1 = v43;
    }
  }
  return a1;
}

void sub_2097EADB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unint64_t v18;

  MEMORY[0x20BD149A8](a10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x458]) && a17 != a15 && a17)
    MEMORY[0x20BD149A8]();
  if (LOBYTE(STACK[0x878]))
  {
    v18 = STACK[0x460];
    if (STACK[0x460] != a16)
    {
      if (v18)
        MEMORY[0x20BD149A8](v18, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TCollation::collateNext(_QWORD *a1, unsigned int *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  uint64_t v8;

  v4 = a1[3];
  v5 = a1[4];
  result = *a2;
  v7 = v4 == v5 || (_DWORD)result == 0;
  if (!v7 && a2[1])
    return TCollation::collateCharSlow((uint64_t)a1, a2, a3);
  *a3 = 1;
  v8 = a1[2];
  if (v8)
  {
    if ((unint64_t)(int)result < 0x10000)
      return *(unsigned int *)(v8 + 4 * (int)result);
  }
  return result;
}

void TLexiconParamManager::TLexiconParamManager(TLexiconParamManager *this, TLexicon *a2)
{
  _QWORD *v3;
  TParam *v4;
  uint64_t v5;
  const __int32 *v6;
  uint64_t v7;
  const __int32 *v8;
  const __int32 *v9;
  std::vector<std::wstring> *v10;
  std::vector<std::wstring> v12;
  std::vector<std::wstring> v13;
  void **v14[2];

  TParamManager::TParamManager(this, 1, (TLexicon *)((char *)a2 + 240));
  *v3 = &off_24C217148;
  v4 = (TParam *)(v3 + 18);
  TIntParam::TIntParam((TIntParam *)(v3 + 18), (uint64_t)&unk_209A5D008, (uint64_t)&unk_209A5D064, 256, 2, 4, 4, (uint64_t)&unk_209A5D454, (uint64_t)&unk_209A5D48C);
  TStringParam::TStringParam((char *)this + 496, &unk_209A5D490, &unk_209A5D4C8, 0, &unk_209A5D87C, &unk_209A5D994, &unk_209A5D48C);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 1872), (uint64_t)&unk_209A5D9CC, (uint64_t)&unk_209A5DA58, 0, 1, 256, 4, (uint64_t)&unk_209A5D994, (uint64_t)&unk_209A5E1E4);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 2224), (uint64_t)&unk_209A5E224, (uint64_t)&unk_209A5E2A8, 0, 1, 256, 4, (uint64_t)&unk_209A5D994, (uint64_t)&unk_209A5E1E4);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 2576), (uint64_t)&unk_209A5EAC8, (uint64_t)&unk_209A5EB70, 0, 0, 0x7FFFFFFF, 2000, (uint64_t)&unk_209A5D994, (uint64_t)&unk_209A5D48C);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 2928), (uint64_t)&unk_209A5ECE0, (uint64_t)&unk_209A5ED90, 0, 0, 0x7FFFFFFF, 5000, (uint64_t)&unk_209A5D994, (uint64_t)&unk_209A5D48C);
  TStringParam::TStringParam((char *)this + 3280, &unk_209A5EF9C, &unk_209A5EFD0, 256, &unk_209A5D48C, &unk_209A5F0EC, &unk_209A5D48C);
  TStringParam::TStringParam((char *)this + 4656, &unk_209A5F124, &unk_209A5F154, 0, &unk_209A5D48C, &unk_209A5F274, &unk_209A5D48C);
  TStringParam::TStringParam((char *)this + 6032, &unk_209A5F2AC, &unk_209A5F2E8, 0, &unk_209A5D48C, &unk_209A5F274, &unk_209A5D48C);
  TStringParam::TStringParam((char *)this + 7408, &unk_209A5F410, &unk_209A5F458, 0, &unk_209A5D48C, &unk_209A5F274, &unk_209A5D48C);
  TStringParam::TStringParam((char *)this + 8784, &unk_209A5F598);
  TStringParam::TStringParam((char *)this + 10160, &unk_209A5F5F8, &unk_209A5F640, 0, &unk_209A5D48C, &unk_209A5F274, &unk_209A5D48C);
  TStringParam::TStringParam((char *)this + 11536, &unk_209A5F6E0, &unk_209A5F724, 0, &unk_209A5D48C, &unk_209A5F274, &unk_209A5D48C);
  TStringParam::TStringParam((char *)this + 12912, &unk_209A5F850, &unk_209A5F8AC, 0, &unk_209A5D48C, &unk_209A5F274, &unk_209A5D48C);
  TStringParam::TStringParam((char *)this + 14288, &unk_209A5F964, &unk_209A5F9BC, 0, &unk_209A5D48C, &unk_209A5F274, &unk_209A5D48C);
  TStringParam::TStringParam((char *)this + 15664, &unk_209A5FAE8);
  TStringParam::TStringParam((char *)this + 17040, &unk_209A5FB40, &unk_209A5FB78, 0, &unk_209A5D48C, &unk_209A5F274, &unk_209A5D48C);
  TStringParam::TStringParam((char *)this + 18416, &unk_209A5FC80, &unk_209A5FCB4, 0, &unk_209A5D48C, &unk_209A5F274, &unk_209A5D48C);
  TStringParam::TStringParam((char *)this + 19792, &unk_209A5FD20, &unk_209A5FD54, 0, &unk_209A5D48C, &unk_209A5F274, &unk_209A5D48C);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 21168), (uint64_t)&unk_209A5FDC0, (uint64_t)&unk_209A5FE04, 0, 0, 99, 29, (uint64_t)&unk_209A5F274, (uint64_t)&unk_209A5D48C);
  TBoolParam::TBoolParam((uint64_t)this + 21520, (uint64_t)&unk_209A60094, (uint64_t)&unk_209A600E0, 0, 0, (uint64_t)&unk_209A5D994, (uint64_t)&unk_209A5D48C);
  TParamManager::add(this, v4);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 496));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 1872));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 2224));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 2576));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 2928));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 3280));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 4656));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 6032));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 7408));
  MEMORY[0x20BD147A4]((char *)this + 8824, &unk_209A60148);
  MEMORY[0x20BD147A4]((char *)this + 8848, &unk_209A5F274);
  MEMORY[0x20BD147A4]((char *)this + 8872, &unk_209A5D48C);
  std::vector<std::wstring>::vector(&v13, 4uLL);
  std::vector<std::wstring>::vector(&v12, 4uLL);
  v5 = 0;
  v6 = (const __int32 *)&unk_209A60240;
  do
  {
    MEMORY[0x20BD147A4](&v13.__begin_[v5], v6);
    v6 += wcslen(v6) + 1;
    ++v5;
  }
  while (v5 != 4);
  TStringParam::setAllowables((uint64_t)this + 8784, (uint64_t)&v13, 0, 0);
  TStringParam::setOriginal((_QWORD *)this + 1098, 0, dword_209A6029C);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 8784));
  v14[0] = (void **)&v12;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](v14);
  v12.__begin_ = (std::vector<std::wstring>::pointer)&v13;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 10160));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 11536));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 12912));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 14288));
  MEMORY[0x20BD147A4]((char *)this + 15704, &unk_209A602B0);
  MEMORY[0x20BD147A4]((char *)this + 15728, &unk_209A60398);
  MEMORY[0x20BD147A4]((char *)this + 15752, &unk_209A5D48C);
  std::vector<std::wstring>::vector(&v13, 3uLL);
  std::vector<std::wstring>::vector(&v12, 3uLL);
  v7 = 0;
  v8 = (const __int32 *)&unk_209A603D8;
  v9 = (const __int32 *)&unk_209A60470;
  do
  {
    MEMORY[0x20BD147A4](&v13.__begin_[v7], v8);
    if (v9)
    {
      MEMORY[0x20BD147A4](&v12.__begin_[v7], v9);
      v9 += wcslen(v9) + 1;
    }
    v8 += wcslen(v8) + 1;
    ++v7;
  }
  while (v7 != 3);
  if (v9)
    v10 = &v12;
  else
    v10 = 0;
  TStringParam::setAllowables((uint64_t)this + 15664, (uint64_t)&v13, (uint64_t)v10, 0);
  TStringParam::setOriginal((_QWORD *)this + 1958, 0, dword_209A6048C);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 15664));
  v14[0] = (void **)&v12;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](v14);
  v12.__begin_ = (std::vector<std::wstring>::pointer)&v13;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 17040));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 18416));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 19792));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 21168));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 21520));
  *((_QWORD *)this + 2721) = a2;
}

void sub_2097EB6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,uint64_t a27)
{
  TParamManager *v27;
  void **v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  void **v33;
  uint64_t v34;

  a27 = v34 - 120;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  TBoolParam::~TBoolParam(v32);
  TParam::~TParam(v31);
  TStringParam::~TStringParam(v30);
  TStringParam::~TStringParam(v28);
  TStringParam::~TStringParam(a13);
  TStringParam::~TStringParam(v33);
  TStringParam::~TStringParam(a14);
  TStringParam::~TStringParam(a15);
  TStringParam::~TStringParam(a16);
  TStringParam::~TStringParam(a17);
  TStringParam::~TStringParam(v29);
  TStringParam::~TStringParam(a18);
  TStringParam::~TStringParam(a19);
  TStringParam::~TStringParam(a20);
  TStringParam::~TStringParam(a21);
  TParam::~TParam(a22);
  TParam::~TParam(a23);
  TParam::~TParam(a24);
  TParam::~TParam(a25);
  TStringParam::~TStringParam(a26);
  TParam::~TParam(a11);
  TParamManager::~TParamManager(v27);
  _Unwind_Resume(a1);
}

void TParamManager::TParamManager(TParamManager *this, char a2, const TLocaleInfo *a3)
{
  _QWORD *Registry;

  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_24C2148E0;
  *((_QWORD *)this + 1) = -1;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 16) = a3;
  *((_BYTE *)this + 16) = a2;
  TParamManager::newConfig((uint64_t)this, (__int32 *)"H", -1);
  TParamManager::newConfig((uint64_t)this, (__int32 *)"R", 0);
  *((_QWORD *)this + 17) = -1;
  Registry = (_QWORD *)TRegisterable<TParamManager>::getRegistry();
  *((_QWORD *)this + 1) = TBaseRegistry<TLatticeProcessor *>::registerInstance(Registry, (uint64_t)this);
}

void sub_2097EB954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  _QWORD **v6;
  char **v7;
  void **v8;
  void *v10;
  va_list va;

  va_start(va, a2);
  v8 = v5;
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy(v4, *v7);
  std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(v3, *v6);
  v10 = *v8;
  if (*v8)
  {
    v2[4] = v10;
    operator delete(v10);
  }
  TRegisterable<TParamManager>::~TRegisterable(v2);
  _Unwind_Resume(a1);
}

char *TLexiconParamManager::notifyChange(char *this, const TParam *a2)
{
  uint64_t v2;

  if (this + 4656 == (char *)a2)
  {
    v2 = *((_QWORD *)this + 2721);
    this = TStringParam::get(a2);
    *(_QWORD *)(v2 + 248) = this;
  }
  return this;
}

void TLexicon::TLexicon(uint64_t a1, uint64_t a2, unint64_t a3)
{
  TLexiconParamManager *v6;
  uint64_t Handle;
  _BYTE v8[104];
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C219818;
  *(_QWORD *)(a1 + 8) = -1;
  TAllocator::TAllocator((TAllocator *)(a1 + 16), 2048);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 136) = &unk_24C2197D8;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 170) = 1;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 200) = &unk_24C219798;
  *(_BYTE *)(a1 + 234) = 1;
  TLocaleInfo::TLocaleInfo((TLocaleInfo *)(a1 + 240));
  *(_QWORD *)(a1 + 104) = a3;
  v6 = (TLexiconParamManager *)operator new();
  TLexiconParamManager::TLexiconParamManager(v6, (TLexicon *)a1);
  *(_QWORD *)(a1 + 336) = v6;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 424) = 256;
  *(_QWORD *)(a1 + 432) = operator new[]();
  *(_DWORD *)(a1 + 428) = 1024;
  *(_QWORD *)(a1 + 440) = operator new[]();
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(*(_QWORD *)(a1 + 336) + 136) = 1;
  Handle = SDWord_GetHandle(a3, "\\textproc:oov");
  *(_QWORD *)(a1 + 448) = Handle;
  if (Handle == -1)
    *(_QWORD *)(a1 + 448) = SDWord_New(a3, "\\textproc:oov");
  *(_QWORD *)(a1 + 344) = a2;
  *(_QWORD *)&v9 = 8;
  *((_QWORD *)&v9 + 1) = a3;
  TEnvManager::TEnvManager((uint64_t)v8, &v9, 1);
  TDataManager::getStringVar((uint64_t)v8, (uint64_t)"VocVersionID", a1 + 72);
}

void sub_2097EC598(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, TAllocator *a16, _QWORD *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,void *a63)
{
  char a67;
  uint64_t v67;
  char **v68;
  void **v69;
  void *v70;
  _QWORD *v71;
  int v72;
  TDataSaver *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;

  if (a67 < 0)
  {
    operator delete(__p);
    if ((v72 & 1) == 0)
    {
LABEL_6:
      if (a26 < 0)
        operator delete(a21);
      TEnvManager::~TEnvManager(&a45);
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        v75 = *(TDataSaver **)(v67 + 352);
        if (v75)
        {
          TDataSaver::~TDataSaver(v75);
          MEMORY[0x20BD149A8]();
        }
        v76 = *(_QWORD *)(v67 + 336);
        if (v76)
          (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
        v77 = *(_QWORD *)(v67 + 344);
        if (v77)
          (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
        v78 = *(_QWORD *)(v67 + 416);
        if (v78)
          MEMORY[0x20BD14990](v78, 0x1000C8077774924);
        v79 = *(_QWORD *)(v67 + 432);
        if (v79)
          MEMORY[0x20BD14990](v79, 0x80C80B8603338);
        v80 = *(_QWORD *)(v67 + 440);
        if (v80)
          MEMORY[0x20BD14990](v80, 0x80C80B8603338);
        __cxa_rethrow();
      }
      TCollation::~TCollation((TCollation *)(v67 + 256));
      THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(v71);
      std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy(a14, *v68);
      THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(a17);
      v81 = *a15;
      if (*a15)
      {
        *(_QWORD *)(v67 + 120) = v81;
        operator delete(v81);
      }
      if (*(char *)(v67 + 95) < 0)
        operator delete(*v69);
      TAllocator::clear(a16);
      TRegisterable<TLexicon>::~TRegisterable((_QWORD *)v67);
      _Unwind_Resume(a1);
    }
  }
  else if (!v72)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v70);
  goto LABEL_6;
}

void sub_2097EC844()
{
  JUMPOUT(0x2097EC858);
}

void sub_2097EC850()
{
  __cxa_end_catch();
  JUMPOUT(0x2097EC858);
}

void sub_2097EC8B4(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x2097EC8C0);
  __clang_call_terminate(a1);
}

void TLexicon::overrideCollation(TLexicon *this)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  std::vector<std::string>::pointer begin;
  uint64_t v11;
  unint64_t v12;
  CharInfo *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v19;
  std::vector<std::string>::pointer end;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::string *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  unsigned int *v30;
  unsigned int v31;
  __int32 *v32;
  size_t v33;
  __int32 *v34;
  unint64_t v35;
  unsigned int **v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unsigned int **v43;
  char *v44;
  char *v45;
  unsigned int **v46;
  unsigned int *v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int *v53;
  char **v54;
  void *__p[2];
  std::string::size_type v56;
  std::vector<std::string> v57;
  __int32 *v58;
  __int128 v59;
  _BYTE v60[825];
  char v61;
  std::__split_buffer<std::string> __v;
  char *__s;
  __int128 v64;
  _BYTE v65[256];
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)*((_QWORD *)this + 14);
  v54 = (char **)((char *)this + 112);
  v3 = (uint64_t *)*((_QWORD *)this + 15);
  if (v3 == v2)
  {
    v2 = (uint64_t *)*((_QWORD *)this + 15);
  }
  else
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        MEMORY[0x20BD14990](v6, 0x1000C8052888210);
        v2 = (uint64_t *)*((_QWORD *)this + 14);
        v3 = (uint64_t *)*((_QWORD *)this + 15);
      }
      ++v4;
      v5 += 2;
    }
    while (v4 < ((char *)v3 - (char *)v2) >> 4);
  }
  *((_QWORD *)this + 15) = v2;
  v7 = *((_QWORD *)this + 32);
  v8 = (unsigned int *)*((_QWORD *)this + 33);
  v58 = (__int32 *)v60;
  v59 = xmmword_209A57DD0;
  v61 = 1;
  __s = v65;
  v64 = xmmword_209A57DD0;
  v66 = 1;
  memset(&v57, 0, sizeof(v57));
  v9 = (uint64_t)v2;
  v51 = v7;
  if (v7)
  {
    v52 = 1;
    do
    {
      TBuffer<wchar_t>::resize((uint64_t)&v58, 0);
      std::vector<std::string>::resize(&v57, 0);
      v53 = v8;
      if (*v8)
      {
        do
        {
          TBuffer<char>::resize((uint64_t)&__s, 0);
          TLocaleInfo::unicodeToMultiByte((uint64_t)this + 240, v8, (uint64_t)&__s);
          begin = v57.__begin_;
          if (v57.__end_ == v57.__begin_)
            goto LABEL_27;
          v11 = 0;
          v12 = 1;
          do
          {
            v13 = (CharInfo *)&begin[v11];
            if (SHIBYTE(begin[v11].__r_.__value_.__r.__words[2]) < 0)
              v13 = *(CharInfo **)v13;
            v15 = *((_QWORD *)this + 12);
            v14 = *((_QWORD *)this + 13);
            if (*((_QWORD *)&v64 + 1) >= (unint64_t)v64)
            {
              if (v66)
              {
                LOBYTE(__v.__first_) = 0;
                TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v64 + 1), (char *)&__v, 1uLL);
                --*((_QWORD *)&v64 + 1);
              }
              else if ((_QWORD)v64)
              {
                __s[(_QWORD)v64 - 1] = 0;
              }
            }
            else
            {
              __s[*((_QWORD *)&v64 + 1)] = 0;
            }
            v16 = SDColl_StringCompare(v14, v15, v13, (CharInfo *)__s);
            begin = v57.__begin_;
            v17 = v12++ >= 0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_ - (char *)v57.__begin_) >> 3);
            ++v11;
          }
          while (!v17 && v16 != 0);
          if (v16)
          {
LABEL_27:
            v19 = 0;
            while (v8[v19++])
              ;
            TBuffer<wchar_t>::insert((uint64_t)&v58, *((unint64_t *)&v59 + 1), (int *)v8, v19 - 1);
            LODWORD(__v.__first_) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v58, *((unint64_t *)&v59 + 1), (int *)&__v, 1uLL);
            if (*((_QWORD *)&v64 + 1) >= (unint64_t)v64)
            {
              if (v66)
              {
                LOBYTE(__v.__first_) = 0;
                TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v64 + 1), (char *)&__v, 1uLL);
                --*((_QWORD *)&v64 + 1);
              }
              else if ((_QWORD)v64)
              {
                __s[(_QWORD)v64 - 1] = 0;
              }
            }
            else
            {
              __s[*((_QWORD *)&v64 + 1)] = 0;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, __s);
            end = v57.__end_;
            if (v57.__end_ >= v57.__end_cap_.__value_)
            {
              v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_ - (char *)v57.__begin_) >> 3);
              v24 = v23 + 1;
              if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 3) > v24)
                v24 = 0x5555555555555556 * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 3) >= 0x555555555555555)
                v25 = 0xAAAAAAAAAAAAAAALL;
              else
                v25 = v24;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v57.__end_cap_;
              if (v25)
                v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v57.__end_cap_, v25);
              else
                v26 = 0;
              v27 = v26 + v23;
              __v.__first_ = v26;
              __v.__begin_ = v27;
              __v.__end_cap_.__value_ = &v26[v25];
              v28 = *(_OWORD *)__p;
              v27->__r_.__value_.__r.__words[2] = v56;
              *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
              __p[1] = 0;
              v56 = 0;
              __p[0] = 0;
              __v.__end_ = v27 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v57, &__v);
              v29 = v57.__end_;
              std::__split_buffer<std::wstring>::~__split_buffer(&__v);
              v57.__end_ = v29;
              if (SHIBYTE(v56) < 0)
                operator delete(__p[0]);
            }
            else
            {
              v22 = *(_OWORD *)__p;
              v57.__end_->__r_.__value_.__r.__words[2] = v56;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v22;
              v57.__end_ = end + 1;
            }
          }
          v30 = &v8[wcslen((const __int32 *)v8)];
          v31 = v30[1];
          v8 = v30 + 1;
        }
        while (v31);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_ - (char *)v57.__begin_) >> 3) >= 2)
      {
        LODWORD(__v.__first_) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v58, *((unint64_t *)&v59 + 1), (int *)&__v, 1uLL);
        v8 = v53;
        if (*v53)
        {
          do
          {
            v32 = (__int32 *)operator new[]();
            v33 = *((_QWORD *)&v59 + 1);
            if (*((_QWORD *)&v59 + 1) >= (unint64_t)v59)
            {
              if (v61)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v58, *((unint64_t *)&v59 + 1), (int *)&__v, 1uLL);
                v34 = v58;
                v33 = --*((_QWORD *)&v59 + 1);
              }
              else
              {
                v34 = v58;
                if ((_QWORD)v59)
                  v58[(_QWORD)v59 - 1] = 0;
              }
            }
            else
            {
              v34 = v58;
              v58[*((_QWORD *)&v59 + 1)] = 0;
            }
            wmemcpy(v32, v34, v33);
            v36 = (unsigned int **)*((_QWORD *)this + 15);
            v35 = *((_QWORD *)this + 16);
            if ((unint64_t)v36 >= v35)
            {
              v38 = ((char *)v36 - *v54) >> 4;
              v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 60)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v40 = v35 - (_QWORD)*v54;
              if (v40 >> 3 > v39)
                v39 = v40 >> 3;
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
                v41 = 0xFFFFFFFFFFFFFFFLL;
              else
                v41 = v39;
              if (v41)
                v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>((uint64_t)this + 128, v41);
              else
                v42 = 0;
              v43 = (unsigned int **)&v42[16 * v38];
              *v43 = v8;
              v43[1] = (unsigned int *)v32;
              v45 = (char *)*((_QWORD *)this + 14);
              v44 = (char *)*((_QWORD *)this + 15);
              v46 = v43;
              if (v44 != v45)
              {
                do
                {
                  *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
                  v46 -= 2;
                  v44 -= 16;
                }
                while (v44 != v45);
                v44 = *v54;
              }
              v37 = v43 + 2;
              *((_QWORD *)this + 14) = v46;
              *((_QWORD *)this + 15) = v43 + 2;
              *((_QWORD *)this + 16) = &v42[16 * v41];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *v36 = v8;
              v36[1] = (unsigned int *)v32;
              v37 = v36 + 2;
            }
            *((_QWORD *)this + 15) = v37;
            v47 = &v8[wcslen((const __int32 *)v8)];
            v48 = v47[1];
            v8 = v47 + 1;
          }
          while (v48);
        }
      }
      ++v8;
      ++v52;
    }
    while (v52 <= v51);
    v9 = *((_QWORD *)this + 14);
    v2 = (uint64_t *)*((_QWORD *)this + 15);
  }
  v49 = 126 - 2 * __clz(((uint64_t)v2 - v9) >> 4);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)sortByFirst;
  if (v2 == (uint64_t *)v9)
    v50 = 0;
  else
    v50 = v49;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,false>(v9, v2, (uint64_t (**)(uint64_t *, uint64_t *))&__v, v50, 1);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v57;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v66 && __s != v65 && __s)
    MEMORY[0x20BD149A8]();
  if (v61 && v58 != (__int32 *)v60)
  {
    if (v58)
      MEMORY[0x20BD149A8]();
  }
}

void sub_2097ECF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  __p = &a19;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (LOBYTE(STACK[0x5C8]))
  {
    if (STACK[0x4B0] != a9 && STACK[0x4B0] != 0)
      MEMORY[0x20BD149A8]();
  }
  if (LOBYTE(STACK[0x480]) && a22 != a10)
  {
    if (a22)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

_QWORD *TLexicon::validateLexicon(TLexicon *this)
{
  _QWORD *result;
  unint64_t i;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const char *v15;
  int *v16;
  int v17;
  int *v18;
  __int128 v19;
  _BYTE v20[1024];
  char v21;
  int v22;
  _QWORD *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned __int8 v27[256];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  SDVoc_GetWords(*((_QWORD *)this + 13), 0xFFFFFFFFFFFFFFFFLL, &byte_209A88803, &byte_209A88803, 0, 0, &v25, (void **)&v23, &v24, (void (*)(unint64_t, unsigned int, unsigned int, void *, unsigned int, void **, unsigned int *))callBackMRECArrayReallocator, 0, &v22);
  result = v23;
  if (v23)
  {
    if (!v25)
      return (_QWORD *)MEMORY[0x20BD14990]();
    for (i = 0; i < v25; ++i)
    {
      v4 = v23[i];
      v5 = TStringParam::get((TStringParam *)(*((_QWORD *)this + 42) + 496));
      if (!TLexicon::applyMask((uint64_t)this, v4, v5, 0))
      {
        if (SDWord_GetName(*((_QWORD *)this + 13), v4, (char *)v27, 0x100u) < 0x101)
        {
          v18 = (int *)v20;
          v19 = xmmword_209A57DD0;
          v21 = 1;
          v14 = TLocaleInfo::multiByteToUnicode((uint64_t)this + 240, v27, (uint64_t)&v18);
          v15 = "Warning: '%s' : Can't convert to Unicode.\n";
          if ((v14 & 1) != 0)
            goto LABEL_15;
          if (*((_QWORD *)&v19 + 1) >= (unint64_t)v19)
          {
            if (v21)
            {
              v26 = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v18, *((unint64_t *)&v19 + 1), &v26, 1uLL);
              v16 = v18;
              --*((_QWORD *)&v19 + 1);
            }
            else
            {
              v16 = v18;
              if ((_QWORD)v19)
                v18[(_QWORD)v19 - 1] = 0;
            }
          }
          else
          {
            v16 = v18;
            v18[*((_QWORD *)&v19 + 1)] = 0;
          }
          v17 = TLexicon::checkName((uint64_t)this, v16, 0, 0xFFFFFFFFFFFFFFFFLL);
          v15 = "Warning: '%s' : Invalid word found in voc.\n";
          if (v17)
LABEL_15:
            tknPrintf(v15, v10, v11, v12, v13, v27);
          if (v21 && v18 != (int *)v20)
          {
            if (v18)
              MEMORY[0x20BD149A8]();
          }
        }
        else
        {
          tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'.\n", v6, v7, v8, v9, 256, v27);
        }
      }
    }
    result = v23;
    if (v23)
      return (_QWORD *)MEMORY[0x20BD14990]();
  }
  return result;
}

void sub_2097ED274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  if (LOBYTE(STACK[0x448]))
    TWord::TWord((uint64_t)va);
  _Unwind_Resume(a1);
}

void THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::resize(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  _QWORD *v11;
  const __int32 *v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::findNextPrime(a2);
  v4 = v3;
  v5 = 8 * v3;
  v6 = (_QWORD *)operator new[]();
  v7 = v6;
  if (v4)
    bzero(v6, v5);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v11 = *(_QWORD **)(v8 + 8 * i);
      if (v11)
      {
        do
        {
          v13 = (_QWORD *)*v11;
          v12 = (const __int32 *)v11[1];
          v14 = wcslen(v12);
          v15 = 0;
          v16 = 4 * v14;
          if (4 * v14)
          {
            do
            {
              v17 = *(char *)v12;
              v12 = (const __int32 *)((char *)v12 + 1);
              v15 = 33 * v15 + v17;
              --v16;
            }
            while (v16);
          }
          *v11 = v7[v15 % v4];
          v7[v15 % v4] = v11;
          v11 = v13;
        }
        while (v13);
      }
    }
  }
  if (v8)
    MEMORY[0x20BD14990](v8, 0x20C8093837F09);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v4;
}

_QWORD *TRegisterable<TLexicon>::~TRegisterable(_QWORD *a1)
{
  uint64_t *Registry;
  uint64_t v3;

  *a1 = &unk_24C2149B0;
  if (a1[1] != -1)
  {
    Registry = (uint64_t *)TRegisterable<TLexicon>::getRegistry();
    v3 = *Registry;
    *(_QWORD *)(Registry[1] + 8 * a1[1] - 8) = 0;
    *Registry = v3 - 1;
  }
  return a1;
}

void TLexicon::~TLexicon(TLexicon *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ActiveConfigHandle;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  TLexicon *v32;
  uint64_t v33;
  TLexicon *v34;
  TLexicon *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  TDataSaver *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;

  *(_QWORD *)this = &off_24C219818;
  SDWord_DeleteList(*((_QWORD *)this + 13), (uint64_t)this + 448, 1u);
  v2 = *((_QWORD *)this + 52);
  if (v2)
    MEMORY[0x20BD14990](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 54);
  if (v3)
    MEMORY[0x20BD14990](v3, 0x80C80B8603338);
  v4 = *((_QWORD *)this + 55);
  if (v4)
    MEMORY[0x20BD14990](v4, 0x80C80B8603338);
  v5 = *((_QWORD *)this + 42);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v5 + 144));
  v7 = *(int *)(v5 + 4 * TParam::getValidConfig((TParam *)(v5 + 144), ActiveConfigHandle) + 304);
  v8 = *(int *)(*((_QWORD *)this + 42) + 296);
  if (v7 > v8)
  {
    v9 = 0;
    v10 = v7 - v8;
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
    do
    {
      v12 = *((_QWORD *)this + 46);
      v13 = *(_QWORD *)(v12 + 8 * v9);
      if (v13)
      {
        std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(*(_QWORD *)(v12 + 8 * v9), *(_QWORD **)(v13 + 8));
        MEMORY[0x20BD149A8](v13, 0x1020C4062D53EE8);
      }
      v14 = *((_QWORD *)this + 47);
      v15 = *(_QWORD *)(v14 + 8 * v9);
      if (v15)
      {
        std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(*(_QWORD *)(v14 + 8 * v9), *(_QWORD **)(v15 + 8));
        MEMORY[0x20BD149A8](v15, 0x1020C4062D53EE8);
      }
      v16 = *((_QWORD *)this + 7);
      v17 = *(_QWORD *)(v16 + 8 * v9);
      if (v17)
      {
        TAllocator::clear(*(TAllocator **)(v16 + 8 * v9));
        MEMORY[0x20BD149A8](v17, 0x1010C40CCBCF24ELL);
      }
      v18 = *((_QWORD *)this + 8);
      v19 = *(_QWORD *)(v18 + 8 * v9);
      if (v19)
      {
        TAllocator::clear(*(TAllocator **)(v18 + 8 * v9));
        MEMORY[0x20BD149A8](v19, 0x1010C40CCBCF24ELL);
      }
      ++v9;
    }
    while (v11 != v9);
    v20 = *((_QWORD *)this + 46);
    if (v20)
      MEMORY[0x20BD14990](v20, 0x20C8093837F09);
    v21 = *((_QWORD *)this + 47);
    if (v21)
      MEMORY[0x20BD14990](v21, 0x20C8093837F09);
    v22 = *((_QWORD *)this + 7);
    if (v22)
      MEMORY[0x20BD14990](v22, 0x20C8093837F09);
    v23 = *((_QWORD *)this + 8);
    if (v23)
      MEMORY[0x20BD14990](v23, 0x20C8093837F09);
  }
  v24 = *((_QWORD *)this + 27);
  if (v24 >= 1)
  {
    v25 = (_QWORD *)*((_QWORD *)this + 26);
    v26 = &v25[v24];
    while (1)
    {
      v27 = (_QWORD *)*v25;
      if (*v25)
        break;
      if (++v25 >= v26)
        goto LABEL_32;
    }
    do
    {
LABEL_63:
      v84 = (_QWORD *)v27[2];
      if (!*v84 || (MEMORY[0x20BD14990](*v84, 0x1000C8052888210), v27[2]))
        MEMORY[0x20BD149A8]();
      v27 = (_QWORD *)*v27;
    }
    while (v27);
    v85 = v25 + 1;
    while (v85 < v26)
    {
      v86 = (_QWORD *)*v85++;
      v27 = v86;
      if (v86)
      {
        v25 = v85 - 1;
        goto LABEL_63;
      }
    }
  }
LABEL_32:
  v28 = *((_QWORD *)this + 19);
  if (v28 >= 1)
  {
    v29 = (_QWORD *)*((_QWORD *)this + 18);
    v30 = &v29[v28];
    while (1)
    {
      v31 = (_QWORD *)*v29;
      if (*v29)
        break;
      if (++v29 >= v30)
        goto LABEL_36;
    }
    do
    {
LABEL_71:
      v87 = v31[1];
      if (v87)
        MEMORY[0x20BD14990](v87, 0x1000C8052888210);
      v88 = v31[2];
      if (v88)
        MEMORY[0x20BD149A8](v88, 0x1000C4057661CB1);
      v31 = (_QWORD *)*v31;
    }
    while (v31);
    v89 = v29 + 1;
    while (v89 < v30)
    {
      v90 = (_QWORD *)*v89++;
      v31 = v90;
      if (v90)
      {
        v29 = v89 - 1;
        goto LABEL_71;
      }
    }
  }
LABEL_36:
  v32 = (TLexicon *)*((_QWORD *)this + 22);
  if (v32 != (TLexicon *)((char *)this + 184))
  {
    do
    {
      v33 = *((_QWORD *)v32 + 7);
      if (v33)
        MEMORY[0x20BD149A8](v33, 0x1000C4057661CB1);
      v34 = (TLexicon *)*((_QWORD *)v32 + 1);
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = *(TLexicon **)v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (TLexicon *)*((_QWORD *)v32 + 2);
          v36 = *(_QWORD *)v35 == (_QWORD)v32;
          v32 = v35;
        }
        while (!v36);
      }
      v32 = v35;
    }
    while (v35 != (TLexicon *)((char *)this + 184));
  }
  v38 = *((_QWORD *)this + 14);
  v37 = *((_QWORD *)this + 15);
  if (v37 != v38)
  {
    v39 = 0;
    v40 = 8;
    do
    {
      v41 = *(_QWORD *)(v38 + v40);
      if (v41)
      {
        MEMORY[0x20BD14990](v41, 0x1000C8052888210);
        v38 = *((_QWORD *)this + 14);
        v37 = *((_QWORD *)this + 15);
      }
      ++v39;
      v40 += 16;
    }
    while (v39 < (v37 - v38) >> 4);
  }
  v42 = *((_QWORD *)this + 42);
  v43 = TParam::getActiveConfigHandle((TParam *)(v42 + 21520));
  if (*(_BYTE *)(v42 + TParam::getValidConfig((TParam *)(v42 + 21520), v43) + 21672))
  {
    tknPrintString("-- TLexicon --\n");
    tknPrintf("  Clean calls   : %llu\n", v44, v45, v46, v47, *((_QWORD *)this + 65));
    tknPrintString("findWord\n");
    tknPrintf("  Cache lookups : %llu\n", v48, v49, v50, v51, *((_QWORD *)this + 57));
    tknPrintf("  Cache hits    : %llu\n", v52, v53, v54, v55, *((_QWORD *)this + 60));
    tknPrintString("collationSearch\n");
    tknPrintf("  Cache lookups : %llu\n", v56, v57, v58, v59, *((_QWORD *)this + 58));
    tknPrintf("  Cache hits    : %llu\n", v60, v61, v62, v63, *((_QWORD *)this + 61));
    tknPrintf("  Iterations    : %llu\n", v64, v65, v66, v67, *((_QWORD *)this + 63));
    tknPrintString("computeClones\n");
    tknPrintf("  Cache lookups : %llu\n", v68, v69, v70, v71, *((_QWORD *)this + 59));
    tknPrintf("  Cache hits    : %llu\n", v72, v73, v74, v75, *((_QWORD *)this + 62));
    tknPrintf("  Iterations    : %llu\n", v76, v77, v78, v79, *((_QWORD *)this + 64));
  }
  v80 = (TDataSaver *)*((_QWORD *)this + 44);
  if (v80)
  {
    TDataSaver::~TDataSaver(v80);
    MEMORY[0x20BD149A8]();
  }
  v81 = *((_QWORD *)this + 42);
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = *((_QWORD *)this + 43);
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  TCollation::~TCollation((TLexicon *)((char *)this + 256));
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase((_QWORD *)this + 25);
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)this + 176, *((char **)this + 23));
  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase((_QWORD *)this + 17);
  v83 = (void *)*((_QWORD *)this + 14);
  if (v83)
  {
    *((_QWORD *)this + 15) = v83;
    operator delete(v83);
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  TAllocator::clear((TLexicon *)((char *)this + 16));
  TRegisterable<TLexicon>::~TRegisterable(this);
}

{
  TLexicon::~TLexicon(this);
  JUMPOUT(0x20BD149A8);
}

uint64_t TLexicon::checkName(uint64_t a1, int *a2, char a3, unint64_t a4)
{
  unint64_t v4;
  TParam *v8;
  uint64_t ActiveConfigHandle;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  __int32 *v13;
  __int32 *v14;
  unint64_t v15;
  __int32 *v16;
  __int32 v17;
  __int32 *v18;
  uint64_t v19;
  __int32 *v20;
  unsigned int *v21;
  _BOOL4 v22;
  uint64_t v23;
  __int32 *v24;
  char *v25;
  uint64_t Segment;
  uint64_t v27;
  int v28;
  int v29;
  unsigned __int8 v30;
  BOOL v31;
  char *v32;
  uint64_t v33;
  int **v34;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  int **v39;
  int v40;
  TLocaleInfo *v41;
  int v42;
  _BOOL4 v44;
  TLocaleInfo *v45;
  char v46[112];
  char v47[112];
  __int32 *__s;
  __int128 v49;
  _BYTE v50[793];
  char v51;
  char v52;
  char *v53;
  __int128 v54;
  _BYTE v55[256];
  char v56;
  uint64_t v57;

  v4 = a4;
  v57 = *MEMORY[0x24BDAC8D0];
  if (a4 == -1)
  {
    v8 = (TParam *)(*(_QWORD *)(a1 + 336) + 144);
    ActiveConfigHandle = TParam::getActiveConfigHandle(v8);
    v4 = *((int *)v8 + TParam::getValidConfig(v8, ActiveConfigHandle) + 40);
  }
  __s = (__int32 *)v50;
  v49 = xmmword_209A57DD0;
  v51 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&__s, a2);
  v10 = *((_QWORD *)&v49 + 1);
  v11 = v49;
  if (*((_QWORD *)&v49 + 1) >= (unint64_t)v49)
  {
    if (v51)
    {
      LODWORD(v53) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v49 + 1), (int *)&v53, 1uLL);
      v10 = --*((_QWORD *)&v49 + 1);
      v12 = (unsigned int *)__s;
      v11 = v49;
    }
    else
    {
      v12 = (unsigned int *)__s;
      if (!(_QWORD)v49)
        goto LABEL_11;
      __s[(_QWORD)v49 - 1] = 0;
    }
  }
  else
  {
    v12 = (unsigned int *)__s;
    __s[*((_QWORD *)&v49 + 1)] = 0;
  }
  if (v10 >= v11)
  {
    if (v51)
    {
      LODWORD(v53) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, v10, (int *)&v53, 1uLL);
      v13 = __s;
      --*((_QWORD *)&v49 + 1);
      goto LABEL_14;
    }
    if (v11)
      v12[v11 - 1] = 0;
  }
  else
  {
    v12[v10] = 0;
  }
LABEL_11:
  v13 = (__int32 *)v12;
LABEL_14:
  v14 = wcschr(v13, 92);
  if (!v14)
    goto LABEL_163;
  v15 = *((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1) >= (unint64_t)v49)
  {
    if (v51)
    {
      LODWORD(v53) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v49 + 1), (int *)&v53, 1uLL);
      v16 = __s;
      v15 = --*((_QWORD *)&v49 + 1);
    }
    else
    {
      v16 = __s;
      if ((_QWORD)v49)
        __s[(_QWORD)v49 - 1] = 0;
    }
  }
  else
  {
    v16 = __s;
    __s[*((_QWORD *)&v49 + 1)] = 0;
  }
  if (v14 == v16)
  {
    v17 = v14[1];
    if (v17)
      v18 = v14;
    else
      v18 = v14 + 1;
    if (v17 == 92)
      ++v14;
    else
      v14 = v18;
  }
  if (!*v14)
  {
LABEL_163:
    if (*v12)
    {
      LODWORD(v19) = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      goto LABEL_35;
    }
    goto LABEL_96;
  }
  if (v15 >= (unint64_t)v49)
  {
    if (v51)
    {
      LODWORD(v53) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, v15, (int *)&v53, 1uLL);
      --*((_QWORD *)&v49 + 1);
    }
    else if ((_QWORD)v49)
    {
      v16[(_QWORD)v49 - 1] = 0;
    }
  }
  else
  {
    v16[v15] = 0;
  }
  *v14 = 0;
  v20 = v14 + 1;
  v24 = wcschr(v20, 92);
  v22 = v24 != 0;
  if (!v24)
  {
    if (*v20)
    {
      v21 = 0;
LABEL_99:
      if (*v12)
      {
        LODWORD(v19) = 1;
      }
      else
      {
        v19 = 1;
        if (!*v20)
          goto LABEL_156;
      }
LABEL_35:
      v44 = v22;
      v53 = v55;
      v54 = xmmword_209A57DD0;
      v56 = 1;
      v23 = a1 + 240;
      if (TLocaleInfo::unicodeToMultiByte(v23, v12, (uint64_t)&v53))
      {
        v19 = 2;
LABEL_152:
        if (v56 && v53 != v55 && v53)
          MEMORY[0x20BD149A8]();
        goto LABEL_156;
      }
      if (*((_QWORD *)&v54 + 1) >= (unint64_t)v54)
      {
        if (v56)
        {
          v47[0] = 0;
          TBuffer<char>::insert((uint64_t)&v53, *((unint64_t *)&v54 + 1), v47, 1uLL);
          --*((_QWORD *)&v54 + 1);
        }
        else if ((_QWORD)v54)
        {
          v53[(_QWORD)v54 - 1] = 0;
        }
      }
      else
      {
        v53[*((_QWORD *)&v54 + 1)] = 0;
      }
      v25 = v53;
      TSegmenter::TSegmenter(v47, v53, v23, 0);
      for (; *v25; v25 = *(char **)(v27 + 8))
      {
        Segment = TSegmenter::getSegment((TSegmenter *)v47, v25);
        v27 = Segment;
        v28 = *(_DWORD *)(Segment + 24);
        if (v28 == 5 || v4 >= 3 && *(_QWORD *)(Segment + 16))
        {
LABEL_92:
          v19 = 2;
          goto LABEL_151;
        }
        if (!v28)
        {
          v29 = **(_DWORD **)Segment;
          if ((v30 & 1) == 0
          {
            v45 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v45);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v45;
          }
          if (v29 <= 8202)
          {
            if (v29 != 32 && v29 != 160)
              continue;
          }
          else
          {
            v31 = v29 == 8203 || v29 == 65279;
            if (!v31 && v29 != 12288)
              continue;
          }
          if (*((_QWORD *)&v54 + 1) >= (unint64_t)v54)
          {
            if (v56)
            {
              v46[0] = 0;
              TBuffer<char>::insert((uint64_t)&v53, *((unint64_t *)&v54 + 1), v46, 1uLL);
              --*((_QWORD *)&v54 + 1);
            }
            else if ((_QWORD)v54)
            {
              v53[(_QWORD)v54 - 1] = 0;
            }
          }
          else
          {
            v53[*((_QWORD *)&v54 + 1)] = 0;
          }
          if (v25 != v53 || **(_BYTE **)(v27 + 8))
          {
            if (*((_QWORD *)&v54 + 1) >= (unint64_t)v54)
            {
              if (v56)
              {
                v46[0] = 0;
                TBuffer<char>::insert((uint64_t)&v53, *((unint64_t *)&v54 + 1), v46, 1uLL);
                --*((_QWORD *)&v54 + 1);
              }
              else if ((_QWORD)v54)
              {
                v53[(_QWORD)v54 - 1] = 0;
              }
            }
            else
            {
              v53[*((_QWORD *)&v54 + 1)] = 0;
            }
            if (v25 == v53 || !**(_BYTE **)(v27 + 8))
              goto LABEL_92;
          }
        }
      }
      if ((_DWORD)v19)
      {
        TBuffer<char>::resize((uint64_t)&v53, 0);
        if (TLocaleInfo::unicodeToMultiByte(v23, (unsigned int *)v20, (uint64_t)&v53))
        {
          v19 = 5;
          goto LABEL_151;
        }
        v32 = (char *)TBuffer<char>::c_str((uint64_t)&v53);
        TSegmenter::TSegmenter(v46, v32, v23, 0);
        if (*v32)
        {
          while (1)
          {
            v33 = TSegmenter::getSegment((TSegmenter *)v46, v32);
            v34 = (int **)v33;
            v35 = *(_DWORD *)(v33 + 24);
            if (v35 == 5 || v4 >= 3 && *(_QWORD *)(v33 + 16))
              break;
            if (!v35)
            {
              if (*((_QWORD *)&v54 + 1) >= (unint64_t)v54)
              {
                if (v56)
                {
                  v52 = 0;
                  v33 = TBuffer<char>::insert((uint64_t)&v53, *((unint64_t *)&v54 + 1), &v52, 1uLL);
                  --*((_QWORD *)&v54 + 1);
                }
                else if ((_QWORD)v54)
                {
                  v53[(_QWORD)v54 - 1] = 0;
                }
              }
              else
              {
                v53[*((_QWORD *)&v54 + 1)] = 0;
              }
              if (v32 == v53 || !*(_BYTE *)v34[1] || (*v34)[1])
                break;
              v36 = **v34;
              TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)v33);
              if (v36 <= 8202)
              {
                if (v36 != 32 && v36 != 160)
                  break;
              }
              else if (v36 != 8203 && v36 != 65279 && v36 != 12288)
              {
                break;
              }
            }
            v32 = (char *)v34[1];
            if (!*v32)
              goto LABEL_127;
          }
          TSegmenter::~TSegmenter((TSegmenter *)v46);
          v19 = 5;
          goto LABEL_151;
        }
LABEL_127:
        TSegmenter::~TSegmenter((TSegmenter *)v46);
      }
      if (v44)
      {
        TBuffer<char>::resize((uint64_t)&v53, 0);
        if (TLocaleInfo::unicodeToMultiByte(v23, v21, (uint64_t)&v53))
        {
LABEL_148:
          v19 = 3;
LABEL_151:
          TSegmenter::~TSegmenter((TSegmenter *)v47);
          goto LABEL_152;
        }
        v37 = (char *)TBuffer<char>::c_str((uint64_t)&v53);
        TSegmenter::TSegmenter(v46, v37, v23, 0);
        if (*v37)
        {
          while (1)
          {
            v38 = TSegmenter::getSegment((TSegmenter *)v46, v37);
            v39 = (int **)v38;
            v40 = *(_DWORD *)(v38 + 24);
            if (v40 == 5 || v4 >= 3 && (*(_QWORD *)(v38 + 16) & 0xFFFFFFFFFFFFFFFBLL) != 0)
              break;
            if (!v40)
            {
              v41 = (TLocaleInfo *)TBuffer<char>::c_str((uint64_t)&v53);
              if (v37 == (char *)v41 || !*(_BYTE *)v39[1] || (*v39)[1])
                break;
              v42 = **v39;
              TLocaleInfo::getGlobalLocaleInfo(v41);
              if (v42 <= 8202)
              {
                if (v42 != 32 && v42 != 160)
                  break;
              }
              else if (v42 != 8203 && v42 != 65279 && v42 != 12288)
              {
                break;
              }
            }
            v37 = (char *)v39[1];
            if (!*v37)
              goto LABEL_149;
          }
          TSegmenter::~TSegmenter((TSegmenter *)v46);
          goto LABEL_148;
        }
LABEL_149:
        TSegmenter::~TSegmenter((TSegmenter *)v46);
      }
      v19 = 0;
      goto LABEL_151;
    }
LABEL_96:
    v19 = 1;
    goto LABEL_156;
  }
  if (*((_QWORD *)&v49 + 1) >= (unint64_t)v49)
  {
    if (v51)
    {
      LODWORD(v53) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v49 + 1), (int *)&v53, 1uLL);
      --*((_QWORD *)&v49 + 1);
    }
    else if ((_QWORD)v49)
    {
      __s[(_QWORD)v49 - 1] = 0;
    }
  }
  else
  {
    __s[*((_QWORD *)&v49 + 1)] = 0;
  }
  *v24 = 0;
  v21 = (unsigned int *)(v24 + 1);
  if (wcschr((__int32 *)v21, 92))
    goto LABEL_96;
  v19 = 1;
  if (*v21 && (a3 & 1) == 0)
    goto LABEL_99;
LABEL_156:
  if (v51 && __s != (__int32 *)v50 && __s)
    MEMORY[0x20BD149A8]();
  return v19;
}

void sub_2097EE290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  unint64_t v44;

  MEMORY[0x20BD149A8](a11, 0x1070C40ADD13FEBLL);
  TSegmenter::~TSegmenter((TSegmenter *)&a28);
  if (LOBYTE(STACK[0x648]))
  {
    v44 = STACK[0x530];
    if (STACK[0x530] != a9)
    {
      if (v44)
        MEMORY[0x20BD149A8](v44, 0x1000C4077774924);
    }
  }
  if (LOBYTE(STACK[0x520]) && a42 != v42)
  {
    if (a42)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t TBuffer<char>::c_str(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= v3)
  {
    if (*(_BYTE *)(a1 + 280))
    {
      v5 = 0;
      TBuffer<char>::insert(a1, v2, &v5, 1uLL);
      --*(_QWORD *)(a1 + 16);
    }
    else if (v3)
    {
      *(_BYTE *)(v3 + *(_QWORD *)a1 - 1) = 0;
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v2) = 0;
  }
  return *(_QWORD *)a1;
}

void *callBackMRECArrayReallocator(unint64_t a1, unsigned int a2, unsigned int a3, void *a4, unsigned int a5, void **a6, unsigned int *a7)
{
  void *result;

  *a7 = a3;
  result = (void *)operator new[]();
  *a6 = result;
  return result;
}

uint64_t TLexicon::findWord(uint64_t a1, __int32 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int32 *Handle;
  __int32 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __int32 *v13[4];
  const __int32 *v14[2];
  const char *v15;
  __int128 v16;
  _BYTE v17[256];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  ++*(_QWORD *)(a1 + 328);
  ++*(_QWORD *)(a1 + 456);
  v4 = a1 + 200;
  v13[0] = a2;
  v13[1] = 0;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find(a1 + 200, v13, &v15);
  if (*((_QWORD *)&v16 + 1) && (v5 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 16)) != 0)
  {
    *(_QWORD *)(v5 + 24) = *(_QWORD *)(a1 + 328);
    ++*(_QWORD *)(a1 + 480);
  }
  else
  {
    v15 = v17;
    v16 = xmmword_209A57DD0;
    v18 = 1;
    TLocaleInfo::unicodeToMultiByte(a1 + 240, (unsigned int *)a2, (uint64_t)&v15);
    v6 = *(_QWORD *)(a1 + 104);
    if (*((_QWORD *)&v16 + 1) >= (unint64_t)v16)
    {
      if (v18)
      {
        LOBYTE(v13[0]) = 0;
        TBuffer<char>::insert((uint64_t)&v15, *((unint64_t *)&v16 + 1), (char *)v13, 1uLL);
        --*((_QWORD *)&v16 + 1);
      }
      else if ((_QWORD)v16)
      {
        v15[v16 - 1] = 0;
      }
    }
    else
    {
      v15[*((_QWORD *)&v16 + 1)] = 0;
    }
    Handle = (__int32 *)SDWord_GetHandle(v6, v15);
    if (Handle == (__int32 *)-1)
    {
      v5 = 0;
    }
    else
    {
      wcslen(a2);
      v8 = (__int32 *)operator new[]();
      wcscpy(v8, a2);
      v5 = operator new();
      TWord::TWord((__int32 **)v5, v8, (__int32 *)a1, Handle, *(__int32 **)(a1 + 328));
      v14[0] = *(const __int32 **)v5;
      v14[1] = (const __int32 *)v5;
      THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::insert(v4, v14, v9, v10, v11, (uint64_t)v13);
    }
    if (v18 && v15 != v17 && v15)
      MEMORY[0x20BD149A8]();
  }
  return v5;
}

void sub_2097EE65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;

  MEMORY[0x20BD149A8](v51, 0x10F0C4030D8D1E0);
  if (a51 && a16 != v52)
  {
    if (a16)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

_QWORD *TWordBlock::create(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  const void *v8;
  uint64_t v9;
  BOOL v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = operator new[]();
  v7 = (_QWORD *)v6;
  *(_BYTE *)(v6 + 16) = a3;
  v8 = *(const void **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v11 = v9 - *(_QWORD *)a1;
  v10 = v9 == *(_QWORD *)a1;
  v12 = v11 >> 3;
  *(_QWORD *)(v6 + 8) = v11 >> 3;
  if (v10)
  {
    *(_QWORD *)v6 = a2;
  }
  else
  {
    v13 = (uint64_t *)(v6 + 24);
    memmove((void *)(v6 + 24), v8, v11);
    *v7 = a2;
    v14 = 8 * v12;
    do
    {
      v15 = *v13++;
      *(_QWORD *)(v15 + 24) = a2;
      v14 -= 8;
    }
    while (v14);
  }
  return v7;
}

BOOL TLexicon::findHeadClonesCollated(_QWORD *a1, unsigned int *a2, _DWORD *a3, size_t a4, size_t a5, void **a6)
{
  unsigned int *v8;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  __int32 ***v14;
  __int32 **v15;
  _BOOL4 v16;
  __int32 *v17;
  uint64_t v18;
  uint64_t v19;
  __int32 ***v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  _DWORD *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  __int32 ***v32;
  char *v33;
  char *v34;
  __int32 ***v35;
  __int128 v36;
  int v37;
  uint64_t *v39;
  size_t v40;
  __int32 *v43;
  __int128 v44;
  _BYTE v45[1024];
  char v46;
  uint64_t v47[3];

  v8 = a2;
  v40 = wcslen((const __int32 *)a2);
  v43 = (__int32 *)v45;
  v44 = xmmword_209A57DD0;
  v46 = 1;
  v10 = TLexicon::collationSearch(a1, v8);
  v11 = v10;
  if (v10[1])
  {
    v12 = v10 + 3;
    v13 = (uint64_t)(a1 + 30);
    v39 = v10;
    v14 = (__int32 ***)(v10 + 3);
    do
    {
      v15 = *v14;
      v16 = TLexicon::applyMask((uint64_t)(*v14)[1], (unint64_t)(*v14)[2], a3, (uint64_t *)*v14 + 4);
      if (!v16)
      {
        TLexicon::getWrittenForm(v16, *v15, (uint64_t)&v43);
        if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
        {
          if (v46)
          {
            LODWORD(v47[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)v47, 1uLL);
            v17 = v43;
            --*((_QWORD *)&v44 + 1);
          }
          else
          {
            v17 = v43;
            if ((_QWORD)v44)
              v43[(_QWORD)v44 - 1] = 0;
          }
        }
        else
        {
          v17 = v43;
          v43[*((_QWORD *)&v44 + 1)] = 0;
        }
        TLexiconScore::TLexiconScore(v47, (const __int32 *)v8, (unsigned int *)v17, a4, a5, v13);
        v19 = v47[0];
        v18 = v47[1];
        v20 = (__int32 ***)a6[1];
        v21 = (unint64_t)a6[2];
        if ((unint64_t)v20 >= v21)
        {
          v23 = v12;
          v24 = a3;
          v25 = v8;
          v26 = v13;
          v27 = ((char *)v20 - (_BYTE *)*a6) >> 5;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 59)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v29 = v21 - (_QWORD)*a6;
          if (v29 >> 4 > v28)
            v28 = v29 >> 4;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0)
            v30 = 0x7FFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>((uint64_t)(a6 + 2), v30);
          else
            v31 = 0;
          v32 = (__int32 ***)&v31[32 * v27];
          *v32 = v15;
          v32[1] = (__int32 **)v40;
          v32[2] = (__int32 **)v19;
          v32[3] = (__int32 **)v18;
          v34 = (char *)*a6;
          v33 = (char *)a6[1];
          v35 = v32;
          v13 = v26;
          if (v33 != *a6)
          {
            do
            {
              v36 = *((_OWORD *)v33 - 1);
              *((_OWORD *)v35 - 2) = *((_OWORD *)v33 - 2);
              *((_OWORD *)v35 - 1) = v36;
              v35 -= 4;
              v33 -= 32;
            }
            while (v33 != v34);
            v33 = (char *)*a6;
          }
          v8 = v25;
          v22 = v32 + 4;
          *a6 = v35;
          a6[1] = v32 + 4;
          a6[2] = &v31[32 * v30];
          a3 = v24;
          if (v33)
            operator delete(v33);
          v12 = v23;
          v11 = v39;
        }
        else
        {
          *v20 = v15;
          v20[1] = (__int32 **)v40;
          v22 = v20 + 4;
          v20[2] = (__int32 **)v19;
          v20[3] = (__int32 **)v18;
        }
        a6[1] = v22;
      }
      ++v14;
    }
    while (v14 != (__int32 ***)&v12[v11[1]]);
  }
  v37 = *((unsigned __int8 *)v11 + 16);
  if (v46 && v43 != (__int32 *)v45 && v43)
    MEMORY[0x20BD149A8]();
  return v37 != 0;
}

void sub_2097EE9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (LOBYTE(STACK[0x450]))
  {
    if (a16 != a10 && a16 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t *TLexicon::collationSearch(_QWORD *a1, unsigned int *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  __int32 *v16;
  __int32 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v24;
  uint64_t v25;
  __int32 *v26;
  __int128 v27;
  _BYTE v28[833];
  char v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int32 *v35;
  __int128 v36;
  _BYTE v37[1024];
  char v38;

  ++a1[41];
  ++a1[58];
  v35 = (__int32 *)v37;
  v36 = xmmword_209A57DD0;
  v38 = 1;
  TCollation::collate(a1 + 32, a2, (uint64_t)&v35);
  v26 = v35;
  *(_QWORD *)&v27 = 0;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find((size_t)(a1 + 17), (const __int32 **)&v26, &v33);
  if (v34)
  {
    v4 = *(uint64_t **)(v34 + 16);
    v5 = a1[41];
    *v4 = v5;
    v6 = v4[1];
    if (v6)
    {
      v7 = v4 + 3;
      v8 = 8 * v6;
      do
      {
        v9 = *v7++;
        *(_QWORD *)(v9 + 24) = v5;
        v8 -= 8;
      }
      while (v8);
    }
    ++a1[61];
  }
  else
  {
    v31 = 0;
    v30 = 0;
    v32 = 0;
    if (!wcschr((__int32 *)a2, 92) || !wcscmp((const __int32 *)a2, (const __int32 *)&unk_209A604C4))
    {
      if (a1[14] == a1[15])
      {
        v10 = TLexicon::collationSearchInternal((uint64_t)a1, a2, &v30, 0, 0, 0);
      }
      else
      {
        v27 = xmmword_209A57DD0;
        v29 = 1;
        v25 = 100;
        v26 = (__int32 *)v28;
        v10 = TLexicon::collationSearchRec((uint64_t)a1, (const __int32 *)a2, &v30, (uint64_t)&v26, &v25);
        if (!v25)
        {
          loggableUnicode(a2, __p);
          v15 = v24 >= 0 ? __p : (void **)__p[0];
          tknPrintf("Warning: '%s' : Ran over 100 voc searches due to mismatched collation tables. Giving up.\n", v11, v12, v13, v14, v15);
          if (v24 < 0)
            operator delete(__p[0]);
        }
        if (v29 && v26 != (__int32 *)v28 && v26)
          MEMORY[0x20BD149A8]();
      }
    }
    else
    {
      v10 = 0;
    }
    v16 = (__int32 *)operator new[]();
    if (*((_QWORD *)&v36 + 1) >= (unint64_t)v36)
    {
      if (v38)
      {
        LODWORD(v26) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), (int *)&v26, 1uLL);
        v17 = v35;
        --*((_QWORD *)&v36 + 1);
      }
      else
      {
        v17 = v35;
        if ((_QWORD)v36)
          v35[(_QWORD)v36 - 1] = 0;
      }
    }
    else
    {
      v17 = v35;
      v35[*((_QWORD *)&v36 + 1)] = 0;
    }
    wcscpy(v16, v17);
    v4 = TWordBlock::create((uint64_t)&v30, a1[41], v10);
    __p[0] = v16;
    __p[1] = v4;
    THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::insert((uint64_t)(a1 + 17), (const __int32 **)__p, v18, v19, v20, (uint64_t)&v26);
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
  }
  if (v38)
  {
    if (v35 != (__int32 *)v37 && v35 != 0)
      MEMORY[0x20BD149A8]();
  }
  return v4;
}

void sub_2097EED38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  void *v23;

  if (a18 < 0)
    operator delete(__p);
  if (LOBYTE(STACK[0x458]) && a20 != v21 && a20)
    MEMORY[0x20BD149A8]();
  v23 = (void *)STACK[0x460];
  if (STACK[0x460])
  {
    STACK[0x468] = (unint64_t)v23;
    operator delete(v23);
  }
  if (LOBYTE(STACK[0x8A8]))
  {
    if (STACK[0x490] != v20 && STACK[0x490] != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::makeScore(uint64_t a1, const __int32 *a2, unsigned int *a3, size_t a4, size_t a5)
{
  uint64_t v6;

  TLexiconScore::TLexiconScore(&v6, a2, a3, a4, a5, a1 + 240);
  return v6;
}

BOOL TLexicon::findHeadClonesCollated(_QWORD *a1, unsigned int *a2, _QWORD *a3, unint64_t a4, size_t a5, size_t a6, void **a7)
{
  unsigned int *v11;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  __int32 ***v16;
  __int32 **v17;
  _BOOL4 v18;
  __int32 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int32 ***v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  __int32 ***v31;
  char *v32;
  char *v33;
  __int32 ***v34;
  __int128 v35;
  int v36;
  _QWORD *v38;
  unsigned int *v39;
  uint64_t *v40;
  uint64_t v41;
  size_t v42;
  __int32 *v44;
  __int128 v45;
  _BYTE v46[1024];
  char v47;
  uint64_t v48[3];

  v11 = a2;
  v42 = wcslen((const __int32 *)a2);
  v44 = (__int32 *)v46;
  v45 = xmmword_209A57DD0;
  v47 = 1;
  v13 = TLexicon::collationSearch(a1, v11);
  v14 = v13;
  if (v13[1])
  {
    v15 = v13 + 3;
    v40 = v13 + 3;
    v41 = (uint64_t)(a1 + 30);
    v38 = a3;
    v16 = (__int32 ***)(v13 + 3);
    v39 = v11;
    do
    {
      v17 = *v16;
      v18 = TLexicon::checkBits((uint64_t)(*v16)[1], (unint64_t)(*v16)[2], a3, a4, (uint64_t *)*v16 + 4);
      if (v18)
      {
        TLexicon::getWrittenForm(v18, *v17, (uint64_t)&v44);
        if (*((_QWORD *)&v45 + 1) >= (unint64_t)v45)
        {
          if (v47)
          {
            LODWORD(v48[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v44, *((unint64_t *)&v45 + 1), (int *)v48, 1uLL);
            v19 = v44;
            --*((_QWORD *)&v45 + 1);
          }
          else
          {
            v19 = v44;
            if ((_QWORD)v45)
              v44[(_QWORD)v45 - 1] = 0;
          }
        }
        else
        {
          v19 = v44;
          v44[*((_QWORD *)&v45 + 1)] = 0;
        }
        TLexiconScore::TLexiconScore(v48, (const __int32 *)v11, (unsigned int *)v19, a5, a6, v41);
        v20 = v14;
        v22 = v48[0];
        v21 = v48[1];
        v23 = (__int32 ***)a7[1];
        v24 = (unint64_t)a7[2];
        if ((unint64_t)v23 >= v24)
        {
          v26 = ((char *)v23 - (_BYTE *)*a7) >> 5;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 59)
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          v28 = v24 - (_QWORD)*a7;
          if (v28 >> 4 > v27)
            v27 = v28 >> 4;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0)
            v29 = 0x7FFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>((uint64_t)(a7 + 2), v29);
          else
            v30 = 0;
          v31 = (__int32 ***)&v30[32 * v26];
          *v31 = v17;
          v31[1] = (__int32 **)v42;
          v31[2] = (__int32 **)v22;
          v31[3] = (__int32 **)v21;
          v33 = (char *)*a7;
          v32 = (char *)a7[1];
          v34 = v31;
          v14 = v20;
          if (v32 != *a7)
          {
            do
            {
              v35 = *((_OWORD *)v32 - 1);
              *((_OWORD *)v34 - 2) = *((_OWORD *)v32 - 2);
              *((_OWORD *)v34 - 1) = v35;
              v34 -= 4;
              v32 -= 32;
            }
            while (v32 != v33);
            v32 = (char *)*a7;
          }
          v15 = v40;
          v25 = v31 + 4;
          *a7 = v34;
          a7[1] = v31 + 4;
          a7[2] = &v30[32 * v29];
          if (v32)
            operator delete(v32);
          a3 = v38;
          v11 = v39;
        }
        else
        {
          *v23 = v17;
          v23[1] = (__int32 **)v42;
          v25 = v23 + 4;
          v23[2] = (__int32 **)v22;
          v23[3] = (__int32 **)v21;
          v14 = v20;
          v15 = v40;
        }
        a7[1] = v25;
      }
      ++v16;
    }
    while (v16 != (__int32 ***)&v15[v14[1]]);
  }
  v36 = *((unsigned __int8 *)v14 + 16);
  if (v47 && v44 != (__int32 *)v46 && v44)
    MEMORY[0x20BD149A8]();
  return v36 != 0;
}

void sub_2097EF0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (LOBYTE(STACK[0x460]))
  {
    if (a18 != a10 && a18 != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

void TLexicon::findHeadClonesCollatedPrefix(_QWORD *a1, char *a2, TSegmenter *a3, _DWORD *a4, size_t a5, size_t a6, void **a7)
{
  _DWORD *v8;
  char *v9;
  uint64_t Segment;
  const __int32 **v11;
  int v12;
  uint64_t v13;
  int *v14;
  unsigned int *v16;
  const __int32 *v17;
  int v18;
  unsigned __int8 v19;
  uint64_t *v20;
  int v21;
  unsigned __int8 v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  __int32 v29;
  unsigned __int8 v30;
  uint64_t v32;
  __int32 **v33;
  __int32 ***v34;
  __int32 **v35;
  _BOOL4 v36;
  const __int32 *v37;
  __int32 *v38;
  __int32 **v39;
  __int32 **v40;
  __int32 ***v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  __int32 ***v49;
  char *v50;
  char *v51;
  __int32 ***v52;
  __int128 v53;
  TLocaleInfo *v54;
  TLocaleInfo *v55;
  TLocaleInfo *v56;
  uint64_t v59;
  char v60;
  uint64_t v63;
  void *__p[2];
  char v68;
  __int32 *v69;
  __int128 v70;
  _BYTE v71[785];
  char v72;
  int v73[2];
  __int128 v74;
  _BYTE v75[1024];
  char v76;

  v8 = a4;
  v9 = a2;
  v60 = 0;
  *(_QWORD *)v73 = v75;
  v74 = xmmword_209A57DD0;
  v76 = 1;
  v69 = (__int32 *)v71;
  v70 = xmmword_209A57DD0;
  v72 = 1;
  v63 = (uint64_t)(a1 + 30);
  v59 = (uint64_t)(a7 + 2);
  while (1)
  {
    Segment = TSegmenter::getSegment(a3, v9);
    v11 = (const __int32 **)Segment;
    if (!Segment)
      break;
    v12 = *(_DWORD *)(Segment + 24);
    if (v12 == 5)
      break;
    v9 = *(char **)(Segment + 8);
    if (v12)
    {
      v13 = 0;
      v14 = *(int **)Segment;
      while (v14[v13++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)v73, *((unint64_t *)&v74 + 1), v14, v13 - 1);
LABEL_8:
      if (*((_QWORD *)&v74 + 1) > 0xFFuLL)
        break;
      if (*((_QWORD *)&v74 + 1) >= (unint64_t)v74)
      {
        if (v76)
        {
          LODWORD(__p[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v73, *((unint64_t *)&v74 + 1), (int *)__p, 1uLL);
          v16 = *(unsigned int **)v73;
          --*((_QWORD *)&v74 + 1);
        }
        else
        {
          v16 = *(unsigned int **)v73;
          if ((_QWORD)v74)
            *(_DWORD *)(*(_QWORD *)v73 + 4 * v74 - 4) = 0;
        }
      }
      else
      {
        v16 = *(unsigned int **)v73;
        *(_DWORD *)(*(_QWORD *)v73 + 4 * *((_QWORD *)&v74 + 1)) = 0;
      }
      v20 = TLexicon::collationSearch(a1, v16);
      if (!v20[1])
        goto LABEL_88;
      v21 = *(_DWORD *)(*(_QWORD *)v73 + 4 * *((_QWORD *)&v74 + 1) - 4);
      if ((v22 & 1) == 0
      {
        v54 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v54);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v54;
        v8 = a4;
      }
      if (v21 <= 8202)
      {
        if (v21 == 32 || v21 == 160)
          goto LABEL_35;
      }
      else
      {
        v23 = v21 == 8203 || v21 == 65279;
        if (v23 || v21 == 12288)
        {
LABEL_35:
          loggableUnicode(*(unsigned int **)v20[3], __p);
          v28 = __p;
          if (v68 < 0)
            v28 = (void **)__p[0];
          tknPrintf("Warning: '%s' : found a match that ends with a space. Ignored.\n", v24, v25, v26, v27, v28);
          if (v68 < 0)
            operator delete(__p[0]);
          goto LABEL_88;
        }
      }
      if (v20[1])
      {
        v33 = (__int32 **)(v9 - a2);
        v34 = (__int32 ***)(v20 + 3);
        do
        {
          v35 = *v34;
          v36 = TLexicon::applyMask((uint64_t)(*v34)[1], (unint64_t)(*v34)[2], v8, (uint64_t *)*v34 + 4);
          if (!v36)
          {
            TLexicon::getWrittenForm(v36, *v35, (uint64_t)&v69);
            if (*((_QWORD *)&v74 + 1) >= (unint64_t)v74)
            {
              if (v76)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)v73, *((unint64_t *)&v74 + 1), (int *)__p, 1uLL);
                v37 = *(const __int32 **)v73;
                --*((_QWORD *)&v74 + 1);
              }
              else
              {
                v37 = *(const __int32 **)v73;
                if ((_QWORD)v74)
                  *(_DWORD *)(*(_QWORD *)v73 + 4 * v74 - 4) = 0;
              }
            }
            else
            {
              v37 = *(const __int32 **)v73;
              *(_DWORD *)(*(_QWORD *)v73 + 4 * *((_QWORD *)&v74 + 1)) = 0;
            }
            if (*((_QWORD *)&v70 + 1) >= (unint64_t)v70)
            {
              if (v72)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), (int *)__p, 1uLL);
                v38 = v69;
                --*((_QWORD *)&v70 + 1);
              }
              else
              {
                v38 = v69;
                if ((_QWORD)v70)
                  v69[(_QWORD)v70 - 1] = 0;
              }
            }
            else
            {
              v38 = v69;
              v69[*((_QWORD *)&v70 + 1)] = 0;
            }
            TLexiconScore::TLexiconScore((uint64_t *)__p, v37, (unsigned int *)v38, a5, a6, v63);
            v39 = (__int32 **)__p[0];
            v40 = (__int32 **)__p[1];
            v41 = (__int32 ***)a7[1];
            v42 = (unint64_t)a7[2];
            if ((unint64_t)v41 >= v42)
            {
              v44 = ((char *)v41 - (_BYTE *)*a7) >> 5;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 59)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v46 = v42 - (_QWORD)*a7;
              if (v46 >> 4 > v45)
                v45 = v46 >> 4;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0)
                v47 = 0x7FFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
                v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>(v59, v47);
              else
                v48 = 0;
              v49 = (__int32 ***)&v48[32 * v44];
              *v49 = v35;
              v49[1] = v33;
              v49[2] = v39;
              v49[3] = v40;
              v51 = (char *)*a7;
              v50 = (char *)a7[1];
              v52 = v49;
              if (v50 != *a7)
              {
                do
                {
                  v53 = *((_OWORD *)v50 - 1);
                  *((_OWORD *)v52 - 2) = *((_OWORD *)v50 - 2);
                  *((_OWORD *)v52 - 1) = v53;
                  v52 -= 4;
                  v50 -= 32;
                }
                while (v50 != v51);
                v50 = (char *)*a7;
              }
              v43 = v49 + 4;
              *a7 = v52;
              a7[1] = v49 + 4;
              a7[2] = &v48[32 * v47];
              if (v50)
                operator delete(v50);
            }
            else
            {
              *v41 = v35;
              v41[1] = v33;
              v43 = v41 + 4;
              v41[2] = v39;
              v41[3] = v40;
            }
            a7[1] = v43;
            v8 = a4;
          }
          ++v34;
        }
        while (v34 != (__int32 ***)&v20[v20[1] + 3]);
      }
LABEL_88:
      if (!*((_BYTE *)v20 + 16))
        break;
    }
    else
    {
      if (!*((_QWORD *)&v74 + 1))
        break;
      v17 = *(const __int32 **)Segment;
      v18 = **(_DWORD **)Segment;
      if (v18 == 9)
        break;
      if (*(_DWORD *)(*(_QWORD *)v73 + 4 * *((_QWORD *)&v74 + 1) - 4) == 32)
        goto LABEL_42;
      if ((v19 & 1) == 0
      {
        v56 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v56);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v56;
        v8 = a4;
      }
      if (v18 <= 8202)
      {
        if (v18 == 32 || v18 == 160)
        {
LABEL_41:
          v17 = *v11;
          if (wcslen(*v11) > 2)
            break;
          goto LABEL_42;
        }
      }
      else if (v18 == 8203 || v18 == 12288 || v18 == 65279)
      {
        goto LABEL_41;
      }
      v17 = *v11;
LABEL_42:
      v29 = *v17;
      if ((v30 & 1) == 0
      {
        v55 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v55);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v55;
        v8 = a4;
      }
      if (v29 != 13 && v29 != 10)
        goto LABEL_53;
      if ((v60 & 1) != 0)
        break;
      v60 = 1;
      if (*(_DWORD *)(*(_QWORD *)v73 + 4 * *((_QWORD *)&v74 + 1) - 4) != 45)
      {
        v32 = TSegmenter::getSegment(a3, v9);
        if (!v32 || *(_DWORD *)(v32 + 24) == 5)
          break;
        v60 = 1;
        if (**(_DWORD **)v32 != 45)
        {
LABEL_53:
          if (*(_DWORD *)(*(_QWORD *)v73 + 4 * *((_QWORD *)&v74 + 1) - 4) != 32)
          {
            TBuffer<wchar_t>::insert((uint64_t)v73, *((unint64_t *)&v74 + 1), (int *)&unk_209A604BC, 1uLL);
            goto LABEL_8;
          }
        }
      }
    }
  }
  if (v72)
  {
    if (v69 != (__int32 *)v71 && v69 != 0)
      MEMORY[0x20BD149A8]();
  }
  if (v76 && *(_BYTE **)v73 != v75)
  {
    if (*(_QWORD *)v73)
      MEMORY[0x20BD149A8]();
  }
}

void sub_2097EF78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  unint64_t v27;

  MEMORY[0x20BD149A8](v24, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x490]))
  {
    if (a24 != a11 && a24 != 0)
      MEMORY[0x20BD149A8]();
  }
  if (LOBYTE(STACK[0x8B0]))
  {
    v27 = STACK[0x498];
    if (STACK[0x498] != a12)
    {
      if (v27)
        MEMORY[0x20BD149A8](v27, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::getPronCount(uint64_t a1, __int32 *a2)
{
  uint64_t result;
  _DWORD v4[12];

  result = TLexicon::findWord(a1, a2);
  if (result)
  {
    SDWord_GetInfo(*(_QWORD *)(a1 + 104), *(_QWORD *)(result + 16), (uint64_t)v4);
    return (v4[1] + v4[0]);
  }
  return result;
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v4;
  BOOL v5;
  std::vector<std::string>::size_type v6;
  std::string *v7;

  end = this->__end_;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v5 = __sz >= v4;
  v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::string>::__append(this, v6);
  }
  else if (!v5)
  {
    v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    this->__end_ = v7;
  }
}

uint64_t sortByFirst(const __int32 **a1, const __int32 **a2)
{
  return wcscmp(*a1, *a2) >> 31;
}

BOOL TLexicon::collationSearchInternal(uint64_t a1, unsigned int *a2, void **a3, _DWORD *a4, int a5, unint64_t a6)
{
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  __int32 *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int32 *v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  void *v32;
  const __int32 *v33;
  uint64_t v34;
  __int32 *v35;
  const __int32 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *p_p;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v63;
  char *v67;
  size_t v68;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  __int128 v74;
  _BYTE v75[785];
  char v76;
  void *__p;
  __int128 v78;
  _BYTE v79[785];
  char v80;
  int *v81;
  __int128 v82;
  _BYTE v83[1024];
  char v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;
  __int32 *v88;
  uint64_t v89;
  unsigned __int8 v90[9];
  char *v91;
  __int128 v92;
  _BYTE v93[256];
  char v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v11 = v93;
  v91 = v93;
  v92 = xmmword_209A57DD0;
  v94 = 1;
  v12 = a1 + 240;
  TLocaleInfo::unicodeToMultiByte(a1 + 240, a2, (uint64_t)&v91);
  v87 = 0;
  v86 = 0;
  v85 = 0;
  v14 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  if (*((_QWORD *)&v92 + 1) >= (unint64_t)v92)
  {
    if (v94)
    {
      LOBYTE(v81) = 0;
      TBuffer<char>::insert((uint64_t)&v91, *((unint64_t *)&v92 + 1), (char *)&v81, 1uLL);
      --*((_QWORD *)&v92 + 1);
    }
    else if ((_QWORD)v92)
    {
      v91[(_QWORD)v92 - 1] = 0;
    }
  }
  else
  {
    v91[*((_QWORD *)&v92 + 1)] = 0;
  }
  if (a5)
    v15 = &byte_209A88803;
  else
    v15 = "\\";
  SDVoc_GetWords(v13, v14, v91, v15, *(void **)(a1 + 440), *(unsigned int *)(a1 + 428), (unsigned int *)&v87 + 1, (void **)&v86, (unsigned int *)&v87, (void (*)(unint64_t, unsigned int, unsigned int, void *, unsigned int, void **, unsigned int *))callBackMRECArrayReallocator, 0, &v85);
  v81 = (int *)v83;
  v82 = xmmword_209A57DD0;
  v84 = 1;
  if (HIDWORD(v87))
  {
    v16 = 0;
    v71 = 0;
    v72 = 0;
    v70 = (_QWORD *)(a1 + 256);
    v68 = a1 + 200;
    do
    {
      ++*(_QWORD *)(a1 + 504);
      v17 = (__int32 *)v86[v16];
      v18 = TStringParam::get((TStringParam *)(*(_QWORD *)(a1 + 336) + 496));
      if (!TLexicon::applyMask(a1, (unint64_t)v17, v18, 0)
        && (!a4 || !TLexicon::applyMask(a1, (unint64_t)v17, a4, 0)))
      {
        if (SDWord_GetName(*(_QWORD *)(a1 + 104), (unint64_t)v17, (char *)v90, 0x100u) < 0x101)
        {
          __p = v79;
          v78 = xmmword_209A57DD0;
          v80 = 1;
          v23 = TLocaleInfo::multiByteToUnicode(v12, v90, (uint64_t)&__p);
          if (v23)
          {
            tknPrintf("Warning: '%s' : Can't convert to Unicode. Ignored.\n", v24, v25, v26, v27, v90);
          }
          else
          {
            if (!a6)
              goto LABEL_31;
            v73 = v75;
            v74 = xmmword_209A57DD0;
            v76 = 1;
            if (*((_QWORD *)&v78 + 1) >= (unint64_t)v78)
            {
              if (v80)
              {
                LODWORD(v88) = 0;
                v23 = TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v78 + 1), (int *)&v88, 1uLL);
                v28 = (__int32 *)__p;
                --*((_QWORD *)&v78 + 1);
              }
              else
              {
                v28 = (__int32 *)__p;
                if ((_QWORD)v78)
                  *((_DWORD *)__p + v78 - 1) = 0;
              }
            }
            else
            {
              v28 = (__int32 *)__p;
              *((_DWORD *)__p + *((_QWORD *)&v78 + 1)) = 0;
            }
            TLexicon::getWrittenForm(v23, v28, (uint64_t)&v73);
            v29 = *((_QWORD *)&v74 + 1);
            if (v76 && v73 != v75 && v73)
              MEMORY[0x20BD149A8]();
            if (v29 <= a6)
            {
LABEL_31:
              v30 = *((_QWORD *)&v82 + 1);
              if (!*((_QWORD *)&v82 + 1))
              {
                TCollation::collate(v70, a2, (uint64_t)&v81);
                v30 = *((_QWORD *)&v82 + 1);
              }
              if (v30 >= (unint64_t)v82)
              {
                if (v84)
                {
                  LODWORD(v73) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v81, v30, (int *)&v73, 1uLL);
                  v31 = v81;
                  --*((_QWORD *)&v82 + 1);
                }
                else
                {
                  v31 = v81;
                  if ((_QWORD)v82)
                    v81[(_QWORD)v82 - 1] = 0;
                }
              }
              else
              {
                v31 = v81;
                v81[v30] = 0;
              }
              if (*((_QWORD *)&v78 + 1) >= (unint64_t)v78)
              {
                if (v80)
                {
                  LODWORD(v73) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v78 + 1), (int *)&v73, 1uLL);
                  v32 = __p;
                  --*((_QWORD *)&v78 + 1);
                }
                else
                {
                  v32 = __p;
                  if ((_QWORD)v78)
                    *((_DWORD *)__p + v78 - 1) = 0;
                }
              }
              else
              {
                v32 = __p;
                *((_DWORD *)__p + *((_QWORD *)&v78 + 1)) = 0;
              }
              if (!TCollation::collprefixcmp(v70, v31, (uint64_t)v32))
              {
                v67 = v11;
                if (*((_QWORD *)&v78 + 1) >= (unint64_t)v78)
                {
                  if (v80)
                  {
                    LODWORD(v73) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v78 + 1), (int *)&v73, 1uLL);
                    v33 = (const __int32 *)__p;
                    --*((_QWORD *)&v78 + 1);
                  }
                  else
                  {
                    v33 = (const __int32 *)__p;
                    if ((_QWORD)v78)
                      *((_DWORD *)__p + v78 - 1) = 0;
                  }
                }
                else
                {
                  v33 = (const __int32 *)__p;
                  *((_DWORD *)__p + *((_QWORD *)&v78 + 1)) = 0;
                }
                v88 = (__int32 *)v33;
                v89 = 0;
                THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find(v68, (const __int32 **)&v88, &v73);
                if (!*((_QWORD *)&v74 + 1) || (v34 = *(_QWORD *)(*((_QWORD *)&v74 + 1) + 16)) == 0)
                {
                  v35 = (__int32 *)operator new[]();
                  if (*((_QWORD *)&v78 + 1) >= (unint64_t)v78)
                  {
                    if (v80)
                    {
                      LODWORD(v73) = 0;
                      TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v78 + 1), (int *)&v73, 1uLL);
                      v36 = (const __int32 *)__p;
                      --*((_QWORD *)&v78 + 1);
                    }
                    else
                    {
                      v36 = (const __int32 *)__p;
                      if ((_QWORD)v78)
                        *((_DWORD *)__p + v78 - 1) = 0;
                    }
                  }
                  else
                  {
                    v36 = (const __int32 *)__p;
                    *((_DWORD *)__p + *((_QWORD *)&v78 + 1)) = 0;
                  }
                  wcscpy(v35, v36);
                  v34 = operator new();
                  TWord::TWord((__int32 **)v34, v35, (__int32 *)a1, v17, *(__int32 **)(a1 + 328));
                  v88 = *(__int32 **)v34;
                  v89 = v34;
                  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::insert(v68, (const __int32 **)&v88, v37, v38, v39, (uint64_t)&v73);
                }
                ++v72;
                if ((*(_BYTE *)(v34 + 32) & 2) != 0
                  || TLexicon::findHeadClone(*(_QWORD *)(v34 + 8), *(__int32 **)v34) == v34)
                {
                  v41 = (uint64_t *)a3[1];
                  v40 = (unint64_t)a3[2];
                  if ((unint64_t)v41 >= v40)
                  {
                    v43 = ((char *)v41 - (_BYTE *)*a3) >> 3;
                    if ((unint64_t)(v43 + 1) >> 61)
                      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                    v44 = v40 - (_QWORD)*a3;
                    v45 = v44 >> 2;
                    if (v44 >> 2 <= (unint64_t)(v43 + 1))
                      v45 = v43 + 1;
                    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                      v46 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v46 = v45;
                    if (v46)
                      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a3 + 2), v46);
                    else
                      v47 = 0;
                    v48 = (uint64_t *)&v47[8 * v43];
                    *v48 = v34;
                    v42 = v48 + 1;
                    v50 = (char *)*a3;
                    v49 = (char *)a3[1];
                    if (v49 == *a3)
                    {
                      v11 = v67;
                    }
                    else
                    {
                      v11 = v67;
                      do
                      {
                        v51 = *((_QWORD *)v49 - 1);
                        v49 -= 8;
                        *--v48 = v51;
                      }
                      while (v49 != v50);
                      v49 = (char *)*a3;
                    }
                    *a3 = v48;
                    a3[1] = v42;
                    a3[2] = &v47[8 * v46];
                    if (v49)
                      operator delete(v49);
                  }
                  else
                  {
                    *v41 = v34;
                    v42 = v41 + 1;
                    v11 = v67;
                  }
                  a3[1] = v42;
                  ++v71;
                }
                else
                {
                  v11 = v67;
                }
              }
            }
          }
          if (v80)
          {
            if (__p != v79 && __p != 0)
              MEMORY[0x20BD149A8]();
          }
        }
        else
        {
          tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'. Ignored.\n", v19, v20, v21, v22, 256, v90);
        }
      }
      ++v16;
    }
    while (v16 < HIDWORD(v87));
  }
  else
  {
    v71 = 0;
    v72 = 0;
  }
  if (v86 != *(_QWORD **)(a1 + 440))
  {
    loggableUnicode(a2, &__p);
    if (v78 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    tknPrintf("Warning: '%s' : Inefficient voc search. Required dynamic allocation of size %llu\n", v53, v54, v55, v56, p_p, v87);
    if (SHIBYTE(v78) < 0)
      operator delete(__p);
    v58 = *(_QWORD *)(a1 + 440);
    if (v58)
      MEMORY[0x20BD14990](v58, 0x80C80B8603338);
    *(_QWORD *)(a1 + 440) = v86;
    *(_DWORD *)(a1 + 428) = v87;
  }
  if (v72 == v71)
  {
    v59 = ((_BYTE *)a3[1] - (_BYTE *)*a3) >> 3;
    if (v59 - v72 < v59)
    {
      v60 = -v72;
      v61 = (uint64_t)*a3 + 8 * v59;
      do
        *(_QWORD *)(*(_QWORD *)(v61 + 8 * v60) + 32) |= 1uLL;
      while (!__CFADD__(v60++, 1));
    }
  }
  v63 = v85;
  if (v84)
  {
    if (v81 != (int *)v83 && v81 != 0)
      MEMORY[0x20BD149A8]();
  }
  if (v94)
  {
    if (v91 != v11 && v91 != 0)
      MEMORY[0x20BD149A8]();
  }
  return v63 == 1;
}

void sub_2097F0188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  unint64_t v19;

  if (LOBYTE(STACK[0x8C0]))
  {
    v19 = STACK[0x4A8];
    if (STACK[0x4A8] != v17)
    {
      if (v19)
        MEMORY[0x20BD149A8](v19, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0xCE0]))
  {
    if (STACK[0x8C8] != a17 && STACK[0x8C8] != 0)
      MEMORY[0x20BD149A8]();
  }
  if (LOBYTE(STACK[0xF28]))
  {
    if (STACK[0xE10] != a15 && STACK[0xE10] != 0)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::collationSearchRec(uint64_t a1, const __int32 *a2, void **a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  void **v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  const __int32 *v17;
  size_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  int *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  uint64_t v35;
  int v36;
  int v37;

  if (*a5)
  {
    v5 = a5;
    v7 = a3;
    v10 = 0;
    while (*a2)
    {
      v12 = *(_QWORD *)(a1 + 112);
      v11 = *(_QWORD *)(a1 + 120);
      v13 = (v11 - v12) >> 4;
      if (v11 == v12)
      {
        v16 = 0;
        v20 = *(_QWORD *)(a1 + 120);
      }
      else
      {
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v11 = *(_QWORD *)(a1 + 112);
        do
        {
          v17 = *(const __int32 **)(v11 + v14);
          v18 = wcslen(v17);
          v19 = wcsncmp(v17, a2, v18);
          v11 = *(_QWORD *)(a1 + 112);
          v20 = *(_QWORD *)(a1 + 120);
          if (v19 >= 1)
            break;
          if (v19 == 0 && v18 > v16)
          {
            v13 = v15;
            v16 = v18;
          }
          ++v15;
          v14 += 16;
        }
        while (v15 < (v20 - v11) >> 4);
        v5 = a5;
        v7 = a3;
      }
      v21 = v20 - v11;
      if (v13 == (v20 - v11) >> 4)
      {
        v22 = *a2++;
        v36 = v22;
        TBuffer<wchar_t>::insert(a4, *(_QWORD *)(a4 + 16), &v36, 1uLL);
      }
      else
      {
        v23 = *(int **)(v11 + 16 * v13 + 8);
        if (!*v23)
          return v10 & 1;
        v35 = v20 - v11;
        a2 += v16;
        v24 = *(_QWORD *)(a4 + 16);
        do
        {
          v25 = 0;
          while (v23[v25++])
            ;
          TBuffer<wchar_t>::insert(a4, *(_QWORD *)(a4 + 16), v23, v25 - 1);
          v10 |= TLexicon::collationSearchRec(a1, a2, v7, a4, v5);
          TBuffer<wchar_t>::resize(a4, v24);
          v27 = &v23[wcslen(v23)];
          v28 = v27[1];
          v23 = v27 + 1;
        }
        while (v28);
        v21 = v35;
      }
      if (v13 != v21 >> 4)
        return v10 & 1;
    }
    --*v5;
    v30 = *(_QWORD *)(a4 + 8);
    v29 = *(_QWORD *)(a4 + 16);
    if (v29 >= v30)
    {
      if (*(_BYTE *)(a4 + 1048))
      {
        v37 = 0;
        TBuffer<wchar_t>::insert(a4, v29, &v37, 1uLL);
        --*(_QWORD *)(a4 + 16);
        v31 = *(unsigned int **)a4;
      }
      else
      {
        v31 = *(unsigned int **)a4;
        if (v30)
          v31[v30 - 1] = 0;
      }
    }
    else
    {
      v31 = *(unsigned int **)a4;
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v29) = 0;
    }
    LOBYTE(v10) = TLexicon::collationSearchInternal(a1, v31, v7, 0, 0, 0);
  }
  else
  {
    LOBYTE(v10) = 0;
  }
  return v10 & 1;
}

uint64_t THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::insert@<X0>(uint64_t a1@<X0>, const __int32 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  const __int32 *v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = *(_QWORD *)(a1 + 24);
  if (v9 == *(_QWORD *)(a1 + 16))
  {
    if (v9)
    {
      if (*(_BYTE *)(a1 + 34))
      {
        tknPrintf("Warning: hashtable resizing, size was %llu\n", (uint64_t)a2, a3, a4, a5, *(_QWORD *)(a1 + 24));
        v9 = *(_QWORD *)(a1 + 16);
      }
      v10 = 2 * v9;
    }
    else
    {
      v10 = 10781;
    }
    THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::resize(a1, v10);
  }
  v11 = *a2;
  v12 = wcslen(*a2);
  v13 = 0;
  v14 = 4 * v12;
  if (4 * v12)
  {
    do
    {
      v15 = *(char *)v11;
      v11 = (const __int32 *)((char *)v11 + 1);
      v13 = 33 * v13 + v15;
      --v14;
    }
    while (v14);
  }
  v16 = v13 % *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 8) + 8 * v16;
  while (1)
  {
    v17 = *(_QWORD *)v17;
    if (!v17)
      break;
    result = wcscmp(*(const __int32 **)(v17 + 8), *a2);
    if (!(_DWORD)result)
    {
      v19 = 0;
      goto LABEL_15;
    }
  }
  result = operator new();
  v17 = result;
  v20 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = *(_QWORD *)(v20 + 8 * v16);
  *(_OWORD *)(result + 8) = *(_OWORD *)a2;
  *(_QWORD *)(v20 + 8 * v16) = result;
  ++*(_QWORD *)(a1 + 24);
  v19 = 1;
LABEL_15:
  v21 = *(_QWORD *)(a1 + 8);
  v22 = v21 + 8 * v16;
  v23 = v21 + 8 * *(_QWORD *)(a1 + 16);
  *(_QWORD *)a6 = v22;
  *(_QWORD *)(a6 + 8) = v23;
  *(_QWORD *)(a6 + 16) = v17;
  *(_BYTE *)(a6 + 24) = v19;
  return result;
}

_QWORD *TLexicon::addTempWord(uint64_t a1, int *a2, int *a3, int *a4, const __int32 *a5)
{
  uint64_t v9;
  uint64_t v11;
  size_t v13;
  size_t v14;
  uint64_t v15;
  __int32 *v16;
  __int32 *v17;
  _QWORD *v18;
  __int32 *v20;
  __int128 v21;
  _BYTE v22[1024];
  char v23;
  int v24;

  v20 = (__int32 *)v22;
  v21 = xmmword_209A57DD0;
  v23 = 1;
  if (!a2
    || (TBuffer<wchar_t>::assign((uint64_t)&v20, a2), (a2 = (int *)*((_QWORD *)&v21 + 1)) == 0)
    || a3 && *a3
    || a4 && *a4)
  {
    TBuffer<wchar_t>::insert((uint64_t)&v20, (unint64_t)a2, (int *)&unk_209A604C4, 1uLL);
  }
  if (a3)
  {
    v9 = 0;
    while (a3[v9++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), a3, v9 - 1);
  }
  if (a4 && *a4)
  {
    TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), (int *)&unk_209A604C4, 1uLL);
    v11 = 0;
    while (a4[v11++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), a4, v11 - 1);
  }
  if (a5)
    v13 = wcslen(a5) + 2;
  else
    v13 = 1;
  v14 = v13 + *((_QWORD *)&v21 + 1);
  if (v14 >> 62)
    v15 = -1;
  else
    v15 = 4 * v14;
  v16 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 16), v15);
  if (*((_QWORD *)&v21 + 1) >= (unint64_t)v21)
  {
    if (v23)
    {
      v24 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), &v24, 1uLL);
      v17 = v20;
      --*((_QWORD *)&v21 + 1);
    }
    else
    {
      v17 = v20;
      if ((_QWORD)v21)
        v20[(_QWORD)v21 - 1] = 0;
    }
  }
  else
  {
    v17 = v20;
    v20[*((_QWORD *)&v21 + 1)] = 0;
  }
  wcscpy(v16, v17);
  if (a5)
    wcscpy(&v16[*((_QWORD *)&v21 + 1) + 1], a5);
  v18 = TAllocator::allocate((TAllocator *)(a1 + 16), 40);
  *v18 = v16;
  v18[1] = a1;
  v18[2] = -1;
  *(_OWORD *)(v18 + 3) = xmmword_209A5CFC0;
  if (v23 && v20 != (__int32 *)v22 && v20)
    MEMORY[0x20BD149A8]();
  return v18;
}

void sub_2097F085C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

uint64_t THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::erase(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v3 = **(_QWORD ***)a2;
  v4 = *(_QWORD **)(a2 + 16);
  if (v3 != v4)
  {
    do
    {
      v5 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3 != v4);
    *v5 = *v4;
    --*(_QWORD *)(a1 + 24);
LABEL_5:
    JUMPOUT(0x20BD149A8);
  }
  **(_QWORD **)a2 = *v3;
  result = *(_QWORD *)(a2 + 16);
  --*(_QWORD *)(a1 + 24);
  if (result)
    goto LABEL_5;
  return result;
}

unint64_t *TLexicon::cleanCache(TLexicon *this)
{
  unint64_t v2;
  TParam *v3;
  uint64_t ActiveConfigHandle;
  unint64_t *result;
  TParam *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  __int32 *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  const __int32 ***v34;
  __int32 *v35;
  int v36;
  const __int32 **v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v41;
  _QWORD v42[3];
  void *__p[2];
  char v44;
  __int32 *v45;
  __int128 v46;
  _BYTE v47[1024];
  char v48;
  _QWORD v49[3];
  int v50[3];

  ++*((_QWORD *)this + 65);
  TAllocator::clear((TLexicon *)((char *)this + 16));
  v2 = *((_QWORD *)this + 28);
  v3 = (TParam *)(*((_QWORD *)this + 42) + 2576);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v3);
  result = (unint64_t *)TParam::getValidConfig(v3, ActiveConfigHandle);
  if (v2 < *((int *)v3 + (_QWORD)result + 40))
    return result;
  v6 = (TParam *)(*((_QWORD *)this + 42) + 2928);
  v7 = TParam::getActiveConfigHandle(v6);
  result = (unint64_t *)TParam::getValidConfig(v6, v7);
  v8 = *((int *)v6 + (_QWORD)result + 40);
  v9 = *((_QWORD *)this + 41) - v8;
  v10 = *((_QWORD *)this + 19);
  if (v10 >= 1)
  {
    v11 = (_QWORD *)*((_QWORD *)this + 18);
    v12 = &v11[v10];
    while (1)
    {
      v13 = (_QWORD *)*v11;
      if (*v11)
        break;
      if (++v11 >= v12)
        goto LABEL_6;
    }
    while (1)
    {
      while (1)
      {
        result = (unint64_t *)v13[2];
        if (*result > v9)
          break;
        if (!v13[1] || (MEMORY[0x20BD14990](v13[1], 0x1000C8052888210), v13[2]))
          MEMORY[0x20BD149A8]();
        v49[0] = v11;
        v49[1] = v12;
        v49[2] = v13;
        v13 = (_QWORD *)*v13;
        if (!v13)
        {
          v19 = v11 + 1;
          while (1)
          {
            v11 = v19;
            if (v19 >= v12)
              break;
            ++v19;
            v13 = (_QWORD *)*v11;
            if (*v11)
              goto LABEL_21;
          }
          v13 = 0;
        }
LABEL_21:
        result = (unint64_t *)THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::erase((uint64_t)this + 136, (uint64_t)v49);
        if (!v13)
          goto LABEL_6;
      }
      *result -= v9;
      v13 = (_QWORD *)*v13;
      if (!v13)
        break;
LABEL_28:
      if (!v13)
        goto LABEL_6;
    }
    v20 = v11 + 1;
    while (v20 < v12)
    {
      v21 = (_QWORD *)*v20++;
      v13 = v21;
      if (v21)
      {
        v11 = v20 - 1;
        goto LABEL_28;
      }
    }
  }
LABEL_6:
  v14 = *((_QWORD *)this + 27);
  if (v14 < 1)
    goto LABEL_10;
  v15 = (char *)this + 200;
  v16 = (_QWORD *)*((_QWORD *)this + 26);
  v17 = &v16[v14];
  while (1)
  {
    v18 = (_QWORD *)*v16;
    if (*v16)
      break;
    if (++v16 >= v17)
      goto LABEL_10;
  }
  v22 = (char *)this + 176;
  v41 = v9;
  while (1)
  {
    v23 = v18[2];
    v24 = *(_QWORD *)(v23 + 24);
    v25 = v24 > v9;
    v26 = v24 - v9;
    if (!v25)
    {
      v45 = (__int32 *)v47;
      v46 = xmmword_209A57DD0;
      v48 = 1;
      TLexicon::getTokenName((int)result, *(__int32 **)v23, (uint64_t)&v45);
      if (*((_QWORD *)&v46 + 1) >= (unint64_t)v46)
      {
        if (v48)
        {
          v50[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), v50, 1uLL);
          v29 = v45;
          --*((_QWORD *)&v46 + 1);
        }
        else
        {
          v29 = v45;
          if ((_QWORD)v46)
            v45[(_QWORD)v46 - 1] = 0;
        }
      }
      else
      {
        v29 = v45;
        v45[*((_QWORD *)&v46 + 1)] = 0;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v29);
      v30 = std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>((uint64_t)v22, (uint64_t)__p);
      if (v44 < 0)
        operator delete(__p[0]);
      if ((_QWORD *)((char *)this + 184) != v30)
      {
        v31 = v15;
        v32 = v8;
        v33 = v30[7];
        v34 = (const __int32 ***)(v33 + 24);
        if (*(_QWORD *)(v33 + 8))
        {
          do
          {
            if (*((_QWORD *)&v46 + 1) >= (unint64_t)v46)
            {
              if (v48)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), (int *)__p, 1uLL);
                v35 = v45;
                --*((_QWORD *)&v46 + 1);
              }
              else
              {
                v35 = v45;
                if ((_QWORD)v46)
                  v45[(_QWORD)v46 - 1] = 0;
              }
            }
            else
            {
              v35 = v45;
              v45[*((_QWORD *)&v46 + 1)] = 0;
            }
            v36 = wcscmp(v35, **v34);
            v37 = *v34++;
            v37[4] = (const __int32 *)((unint64_t)v37[4] & 0xFFFFFFFFFFFFFFFCLL | (2 * (v36 == 0)));
          }
          while (v34 != (const __int32 ***)(v33 + 24 + 8 * *(_QWORD *)(v33 + 8)));
        }
        MEMORY[0x20BD149A8](v33, 0x1000C4057661CB1);
        v22 = (char *)this + 176;
        std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::erase((uint64_t **)this + 22, (uint64_t)v30);
        v8 = v32;
        v15 = v31;
        v9 = v41;
      }
      v38 = (_QWORD *)v18[2];
      if (!*v38 || (MEMORY[0x20BD14990](*v38, 0x1000C8052888210), v18[2]))
        MEMORY[0x20BD149A8]();
      v42[0] = v16;
      v42[1] = v17;
      v42[2] = v18;
      v18 = (_QWORD *)*v18;
      if (!v18)
      {
        v39 = v16 + 1;
        while (1)
        {
          v16 = v39;
          if (v39 >= v17)
            break;
          ++v39;
          v18 = (_QWORD *)*v16;
          if (*v16)
            goto LABEL_65;
        }
        v18 = 0;
      }
LABEL_65:
      result = (unint64_t *)THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::erase((uint64_t)v15, (uint64_t)v42);
      if (v48)
      {
        result = (unint64_t *)v45;
        if (v45 != (__int32 *)v47 && v45 != 0)
          result = (unint64_t *)MEMORY[0x20BD149A8]();
      }
      goto LABEL_71;
    }
    *(_QWORD *)(v23 + 24) = v26;
    v18 = (_QWORD *)*v18;
    if (!v18)
      break;
LABEL_71:
    if (!v18)
      goto LABEL_10;
  }
  v27 = v16 + 1;
  while (v27 < v17)
  {
    v28 = (_QWORD *)*v27++;
    v18 = v28;
    if (v28)
    {
      v16 = v27 - 1;
      goto LABEL_71;
    }
  }
LABEL_10:
  *((_QWORD *)this + 41) = v8;
  return result;
}

void sub_2097F0D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (LOBYTE(STACK[0x480]) && a22 != a11)
  {
    if (a22)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

void TLexicon::save(TLexicon *this, TDataManager *a2, FileSpec *a3)
{
  const char *v5;
  void **v6;
  unint64_t v7;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD *v10[3];
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  _BYTE v17[16];
  unint64_t v18;

  if (a3)
    SDVoc_Save(*((_QWORD *)this + 13), a3, 1u, 0, 0);
  if (a2)
  {
    v5 = (char *)this + 72;
    if (*((char *)this + 95) < 0)
      v5 = *(const char **)v5;
    TOutputModel::TOutputModel((TOutputModel *)v17, 0, a2, v5, *((const TDataManager **)this + 43));
    TDataManager::setIntVar(a2, "LexVersion");
    if (v18 >= 2)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
      TOutputStream::TOutputStream(v10, &v11, (uint64_t)"LexParam", (uint64_t)this + 240);
      TParamManager::save(*((_QWORD **)this + 42), v10, 1);
      std::stringbuf::str();
      if ((v9 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v9 & 0x80u) == 0)
        v7 = v9;
      else
        v7 = (unint64_t)__p[1];
      (*(void (**)(TDataManager *, const char *, void **, unint64_t))(*(_QWORD *)a2 + 48))(a2, "LexParam", v6, v7);
      if ((char)v9 < 0)
        operator delete(__p[0]);
      v11 = (void *)*MEMORY[0x24BEDB800];
      *(void **)((char *)&v11 + *((_QWORD *)v11 - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
      v12 = MEMORY[0x24BEDB848] + 16;
      if (v15 < 0)
        operator delete(v14);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x20BD1496C](&v16);
    }
    v11 = 0;
    v12 = 0;
    v13 = 0;
    if ((*(uint64_t (**)(_QWORD, const char *, _QWORD, _QWORD))(**((_QWORD **)this + 43) + 40))(*((_QWORD *)this + 43), "LexCollation", 0, 0))
    {
      TDataManager::getStringVar(*((_QWORD *)this + 43), (uint64_t)"LexCollation", (uint64_t)&v11);
    }
    if ((*(uint64_t (**)(_QWORD, const char *, _QWORD, _QWORD))(**((_QWORD **)this + 43) + 40))(*((_QWORD *)this + 43), "LexUpgrade", 0, 0))
    {
      TDataManager::getStringVar(*((_QWORD *)this + 43), (uint64_t)"LexUpgrade", (uint64_t)&v11);
    }
    if ((*(uint64_t (**)(_QWORD, const char *, _QWORD, _QWORD))(**((_QWORD **)this + 43) + 40))(*((_QWORD *)this + 43), "LexUpgradeSpelling", 0, 0))
    {
      TDataManager::getStringVar(*((_QWORD *)this + 43), (uint64_t)"LexUpgradeSpelling", (uint64_t)&v11);
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 43) + 24))(*((_QWORD *)this + 43));
    if (SHIBYTE(v13) < 0)
      operator delete(v11);
  }
}

void sub_2097F10E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t **TLexicon::loadUpgradeMap(TLexicon *this, int a2, unint64_t a3)
{
  unint64_t v3;
  char *v4;
  uint64_t v5;
  int v7;
  TLexicon *v8;
  uint64_t **v9;
  TAllocator *v10;
  uint64_t v11;
  std::string::size_type size;
  TFileObjectParser *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned __int8 v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  void **v27;
  TLexicon *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ActiveConfigHandle;
  uint64_t ValidConfig;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  TLocaleInfo *v39;
  int v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  void **v47;
  __int32 *v48;
  size_t v49;
  uint64_t v50;
  int v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  void **v58;
  __int32 *v59;
  size_t v60;
  uint64_t v61;
  int v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  _QWORD *v78;
  std::string *v79;
  const char *v80;
  _QWORD *v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  const char *v89;
  _QWORD *exception;
  std::string *v91;
  const char *v92;
  _QWORD *v93;
  std::string *v94;
  __int128 v95;
  __int128 v96;
  TFileObjectParser *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t **v102;
  TAllocator *v103;
  uint64_t v104;
  uint64_t v105;
  void *__p[2];
  uint64_t v107;
  _BYTE v108[24];
  uint64_t v109;
  char v110;
  _BYTE v111[24];
  uint64_t v112;
  _BYTE v113[16];
  void *v114;
  char v115;
  void *v116;
  char v117;
  void *v118;
  char v119;
  void *v120;
  char v121;
  void *v122;
  char v123;
  _QWORD *v124[4];
  _QWORD v125[12];
  char v126;
  uint64_t v127;
  std::string v128;
  _BYTE v129[24];
  uint64_t v130;
  __int32 *v131;
  __int128 v132;
  uint64_t v133;
  __int32 *v134;
  int64x2_t v135;
  uint64_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v3 = a3 - *(int *)(*((_QWORD *)this + 42) + 296);
  if (a2)
    v4 = "LexUpgrade";
  else
    v4 = "LexUpgradeSpelling";
  v5 = 368;
  if (!a2)
    v5 = 376;
  v102 = *(uint64_t ***)(*(_QWORD *)((char *)this + v5) + 8 * v3);
  if (!v102)
  {
    v7 = a2;
    v8 = this;
    v99 = v5;
    v9 = (uint64_t **)operator new();
    v9[2] = 0;
    v9[1] = 0;
    v102 = v9;
    *v9 = (uint64_t *)(v9 + 1);
    if (*((_QWORD *)v8 + 44) || *((_QWORD *)v8 + 43))
    {
      v98 = v3;
      v10 = (TAllocator *)operator new();
      TAllocator::TAllocator(v10, 2048);
      memset(&v128, 0, sizeof(v128));
      v11 = *((_QWORD *)v8 + 44);
      if (!v11)
        TDataManager::getStringVar(*((_QWORD *)v8 + 43), (uint64_t)v4, (uint64_t)&v128);
      TDataSaver::getStringVar(v11, v4, (uint64_t)&v128, (uint64_t)&byte_209A88803);
      std::istringstream::basic_istringstream[abi:ne180100](v125, &v128, 8);
      size = HIBYTE(v128.__r_.__value_.__r.__words[2]);
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v128.__r_.__value_.__l.__size_;
      TInputStream::TInputStream((TInputStream *)v113, (uint64_t)v125, size != 0, (uint64_t)v4, (uint64_t)v8 + 240);
      if (v113[8])
      {
        v103 = v10;
        if (TInputStream::verifyHeader((uint64_t)v113, "LexUpgrade", (uint64_t)&pLexUpgradeVersion, 2))
        {
          std::string::basic_string[abi:ne180100]<0>(v111, &byte_209A88803);
          *(_QWORD *)v129 = aPpx;
          if ((v111[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v129[8], *(const std::string::value_type **)v111, *(std::string::size_type *)&v111[8]);
          }
          else
          {
            *(_OWORD *)&v129[8] = *(_OWORD *)v111;
            v130 = *(_QWORD *)&v111[16];
          }
          *(_QWORD *)v129 = &unk_24C214BA0;
          if (v130 >= 0)
            v89 = &v129[8];
          else
            v89 = *(const char **)&v129[8];
          conditionalAssert(v89, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lexicon.cpp", 2222, v83, v84);
          *(_QWORD *)v129 = aPpx;
          if (SHIBYTE(v130) < 0)
            operator delete(*(void **)&v129[8]);
          if ((v111[23] & 0x80000000) != 0)
            operator delete(*(void **)v111);
          exception = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v129, &byte_209A88803);
          *exception = aPpx;
          v91 = (std::string *)(exception + 1);
          if ((v129[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v91, *(const std::string::value_type **)v129, *(std::string::size_type *)&v129[8]);
          }
          else
          {
            v95 = *(_OWORD *)v129;
            exception[3] = *(_QWORD *)&v129[16];
            *(_OWORD *)&v91->__r_.__value_.__l.__data_ = v95;
          }
          *exception = &unk_24C214BA0;
        }
        v13 = (TFileObjectParser *)operator new();
        TFileObjectParser::TFileObjectParser(v13, (TInputStream *)v113);
        v97 = v13;
        v14 = *(_QWORD *)v13;
        *(_QWORD *)v111 = &unk_209A604CC;
        *(int64x2_t *)&v111[8] = vdupq_n_s64(1uLL);
        v112 = -1;
        v15 = TFileObject::verify(v14, (uint64_t)v111, 1uLL, 1);
        v110 = v15;
        if (v15)
        {
          std::string::basic_string[abi:ne180100]<0>(v108, &byte_209A88803);
          *(_QWORD *)v129 = aPpx;
          if ((v108[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v129[8], *(const std::string::value_type **)v108, *(std::string::size_type *)&v108[8]);
          }
          else
          {
            *(_OWORD *)&v129[8] = *(_OWORD *)v108;
            v130 = *(_QWORD *)&v108[16];
          }
          *(_QWORD *)v129 = &unk_24C214BA0;
          if (v130 >= 0)
            v92 = &v129[8];
          else
            v92 = *(const char **)&v129[8];
          conditionalAssert(v92, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lexicon.cpp", 2230, v85, v86);
          *(_QWORD *)v129 = aPpx;
          if (SHIBYTE(v130) < 0)
            operator delete(*(void **)&v129[8]);
          if ((v108[23] & 0x80000000) != 0)
            operator delete(*(void **)v108);
          v93 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v129, &byte_209A88803);
          *v93 = aPpx;
          v94 = (std::string *)(v93 + 1);
          if ((v129[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v94, *(const std::string::value_type **)v129, *(std::string::size_type *)&v129[8]);
          }
          else
          {
            v96 = *(_OWORD *)v129;
            v93[3] = *(_QWORD *)&v129[16];
            *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v96;
          }
          *v93 = &unk_24C214BA0;
        }
        *(_OWORD *)&v129[8] = xmmword_209A57D60;
        *(_QWORD *)v129 = dword_209A604DC;
        v132 = xmmword_209A57D60;
        v130 = -1;
        v131 = dword_209A604F0;
        v135 = vdupq_n_s64(2uLL);
        v133 = -1;
        v134 = dword_209A604FC;
        v136 = -1;
        v16 = *(_QWORD *)(v14 + 24);
        if (v16)
        {
          v101 = v7;
          v100 = a3;
          do
          {
            v104 = v16;
            v17 = TFileObject::verify(v16, (uint64_t)v129, 3uLL, 1);
            v110 = v17;
            if (v17)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
              *(_QWORD *)v108 = aPpx;
              if (SHIBYTE(v107) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v108[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                *(_OWORD *)&v108[8] = *(_OWORD *)__p;
                v109 = v107;
              }
              *(_QWORD *)v108 = &unk_24C214BA0;
              if (v109 >= 0)
                v77 = &v108[8];
              else
                v77 = *(const char **)&v108[8];
              conditionalAssert(v77, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lexicon.cpp", 2245, v73, v74);
              *(_QWORD *)v108 = aPpx;
              if (SHIBYTE(v109) < 0)
                operator delete(*(void **)&v108[8]);
              if (SHIBYTE(v107) < 0)
                operator delete(__p[0]);
              v78 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v108, &byte_209A88803);
              *v78 = aPpx;
              v79 = (std::string *)(v78 + 1);
              if ((v108[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v79, *(const std::string::value_type **)v108, *(std::string::size_type *)&v108[8]);
              }
              else
              {
                v87 = *(_OWORD *)v108;
                v78[3] = *(_QWORD *)&v108[16];
                *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v87;
              }
              *v78 = &unk_24C214BA0;
            }
            v18 = *(int *)(*((_QWORD *)v8 + 42) + 296);
            v19 = *(_QWORD *)(v104 + 24);
            if (v19)
            {
              v105 = 0;
              v20 = 0;
              do
              {
                if (!wcscmp(*(const __int32 **)(v19 + 8), dword_209A604DC))
                {
                  v37 = TFileObject::verify((TFileObject *)v19, 0, 0);
                  v110 |= v37;
                  v20 = v19;
                }
                else if (!wcscmp(*(const __int32 **)(v19 + 8), dword_209A604F0))
                {
                  v38 = TFileObject::verify((TFileObject *)v19, 0, 0);
                  v110 |= v38;
                  v105 = v19;
                }
                else if (!wcscmp(*(const __int32 **)(v19 + 8), dword_209A604FC))
                {
                  v21 = *(unsigned int **)(v19 + 24);
                  if ((v22 & 1) == 0
                  {
                    v39 = (TLocaleInfo *)operator new();
                    TLocaleInfo::TLocaleInfo(v39);
                    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v39;
                  }
                  v23 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v21, (BOOL *)&v110);
                  v18 = v23;
                  if (v110
                    || (v24 = *((_QWORD *)v8 + 42), v23 < (unint64_t)*(int *)(v24 + 296))
                    || (v25 = TParam::getActiveConfigHandle((TParam *)(v24 + 144)),
                        v18 >= *(int *)(v24 + 4 * TParam::getValidConfig((TParam *)(v24 + 144), v25) + 304)))
                  {
                    v110 = 1;
                    loggableFileObject((uint64_t *)v19);
                    if (v108[23] >= 0)
                      v26 = v108;
                    else
                      v26 = *(_BYTE **)v108;
                    loggableUnicode(*(unsigned int **)(v19 + 24), __p);
                    if (v107 >= 0)
                      v27 = __p;
                    else
                      v27 = (void **)__p[0];
                    v28 = v8;
                    v29 = *((_QWORD *)v8 + 42);
                    v30 = *(int *)(v29 + 296);
                    ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v29 + 144));
                    ValidConfig = TParam::getValidConfig((TParam *)(v29 + 144), ActiveConfigHandle);
                    tknPrintf("Error: %s'%s' is an invalid token philosophy version to upgrade.  Expected an integer value in the range of [%lld, %lld).\n", v33, v34, v35, v36, v26, v27, v30, *(int *)(v29 + 4 * ValidConfig + 304));
                    if (SHIBYTE(v107) < 0)
                      operator delete(__p[0]);
                    v8 = v28;
                    if ((v108[23] & 0x80000000) != 0)
                      operator delete(*(void **)v108);
                  }
                }
                v19 = *(_QWORD *)(v19 + 16);
              }
              while (v19);
            }
            else
            {
              v20 = 0;
              v105 = 0;
            }
            v7 = v101;
            if (v18 == v100)
            {
              if (TLexicon::checkName((uint64_t)v8, *(int **)(v20 + 24), 0, v100))
              {
                v110 = 1;
                loggableFileObject((uint64_t *)v20);
                v40 = v108[23];
                v41 = *(_BYTE **)v108;
                loggableUnicode(*(unsigned int **)(v20 + 24), __p);
                v46 = v108;
                if (v40 < 0)
                  v46 = v41;
                v47 = __p;
                if (v107 < 0)
                  v47 = (void **)__p[0];
                tknPrintf("Error: %s'%s' is an invalid wordname for token philosophy %lld.\n", v42, v43, v44, v45, v46, v47, v100);
                if (SHIBYTE(v107) < 0)
                  operator delete(__p[0]);
                if ((v108[23] & 0x80000000) != 0)
                  operator delete(*(void **)v108);
                v48 = 0;
              }
              else
              {
                v49 = wcslen(*(const __int32 **)(v20 + 24));
                if ((v49 + 1) >> 62)
                  v50 = -1;
                else
                  v50 = 4 * (v49 + 1);
                v48 = (__int32 *)TAllocator::allocate(v103, v50);
                wcscpy(v48, *(const __int32 **)(v20 + 24));
              }
              if (TLexicon::checkName((uint64_t)v8, *(int **)(v105 + 24), 0, 0xFFFFFFFFFFFFFFFFLL))
              {
                v110 = 1;
                loggableFileObject((uint64_t *)v105);
                v51 = v108[23];
                v52 = *(_BYTE **)v108;
                loggableUnicode(*(unsigned int **)(v105 + 24), __p);
                v57 = v108;
                if (v51 < 0)
                  v57 = v52;
                v58 = __p;
                if (v107 < 0)
                  v58 = (void **)__p[0];
                tknPrintf("Error: %s'%s' is an invalid wordname.\n", v53, v54, v55, v56, v57, v58);
                if (SHIBYTE(v107) < 0)
                  operator delete(__p[0]);
                if ((v108[23] & 0x80000000) != 0)
                  operator delete(*(void **)v108);
                v59 = 0;
              }
              else
              {
                v60 = wcslen(*(const __int32 **)(v105 + 24));
                if ((v60 + 1) >> 62)
                  v61 = -1;
                else
                  v61 = 4 * (v60 + 1);
                v59 = (__int32 *)TAllocator::allocate(v103, v61);
                wcscpy(v59, *(const __int32 **)(v105 + 24));
                if (*(_BYTE *)(getPropCheckTokenExistence() + 8) && !TLexicon::findWord((uint64_t)v8, v59))
                {
                  loggableFileObject((uint64_t *)v105);
                  v62 = v108[23];
                  v63 = *(_BYTE **)v108;
                  loggableUnicode((unsigned int *)v59, __p);
                  v68 = v108;
                  if (v62 < 0)
                    v68 = v63;
                  v69 = __p;
                  if (v107 < 0)
                    v69 = (void **)__p[0];
                  tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v64, v65, v66, v67, v68, v69);
                  if (SHIBYTE(v107) < 0)
                    operator delete(__p[0]);
                  if ((v108[23] & 0x80000000) != 0)
                    operator delete(*(void **)v108);
                }
              }
              if (v110)
              {
                std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
                *(_QWORD *)v108 = aPpx;
                if (SHIBYTE(v107) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&v108[8], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
                }
                else
                {
                  *(_OWORD *)&v108[8] = *(_OWORD *)__p;
                  v109 = v107;
                }
                *(_QWORD *)v108 = &unk_24C214BA0;
                if (v109 >= 0)
                  v80 = &v108[8];
                else
                  v80 = *(const char **)&v108[8];
                conditionalAssert(v80, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lexicon.cpp", 2323, v75, v76);
                *(_QWORD *)v108 = aPpx;
                if (SHIBYTE(v109) < 0)
                  operator delete(*(void **)&v108[8]);
                if (SHIBYTE(v107) < 0)
                  operator delete(__p[0]);
                v81 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(v108, &byte_209A88803);
                *v81 = aPpx;
                v82 = (std::string *)(v81 + 1);
                if ((v108[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external(v82, *(const std::string::value_type **)v108, *(std::string::size_type *)&v108[8]);
                }
                else
                {
                  v88 = *(_OWORD *)v108;
                  v81[3] = *(_QWORD *)&v108[16];
                  *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v88;
                }
                *v81 = &unk_24C214BA0;
              }
              *(_QWORD *)v108 = v48;
              *(_QWORD *)&v108[8] = v59;
              std::__tree<std::__value_type<wchar_t const*,wchar_t const*>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,wchar_t const*>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,wchar_t const*>>>::__emplace_multi<std::pair<wchar_t *,wchar_t *>>(v102, v108);
            }
            v10 = v103;
            v16 = *(_QWORD *)(v104 + 16);
          }
          while (v16);
        }
        TFileObjectParser::~TFileObjectParser(v97);
        MEMORY[0x20BD149A8]();
      }
      v70 = 64;
      if (v7)
        v70 = 56;
      *(_QWORD *)(*(_QWORD *)((char *)v8 + v70) + 8 * v98) = v10;
      *(_QWORD *)(*(_QWORD *)((char *)v8 + v99) + 8 * v98) = v102;
      std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::destroy((uint64_t)v124, v124[1]);
      if (v123 < 0)
        operator delete(v122);
      if (v121 < 0)
        operator delete(v120);
      if (v119 < 0)
        operator delete(v118);
      if (v117 < 0)
        operator delete(v116);
      if (v115 < 0)
        operator delete(v114);
      v125[0] = *MEMORY[0x24BEDB7F8];
      *(_QWORD *)((char *)v125 + *(_QWORD *)(v125[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
      v125[2] = MEMORY[0x24BEDB848] + 16;
      if (v126 < 0)
        operator delete((void *)v125[10]);
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x20BD1496C](&v127);
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v128.__r_.__value_.__l.__data_);
    }
    else
    {
      if (v7)
        v71 = *((_QWORD *)v8 + 46);
      else
        v71 = *((_QWORD *)v8 + 47);
      *(_QWORD *)(v71 + 8 * v3) = v9;
    }
  }
  return v102;
}

void sub_2097F1E68(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, TFileObjectParser *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, TAllocator *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;
  uint64_t v59;

  MEMORY[0x20BD149A8](v58, 0x1070C40ADD13FEBLL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (a14)
    {
      TFileObjectParser::~TFileObjectParser(a14);
      MEMORY[0x20BD149A8]();
    }
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(a19, *(_QWORD **)(a19 + 8));
    MEMORY[0x20BD149A8](a19, 0x1020C4062D53EE8);
    TAllocator::clear(a20);
    MEMORY[0x20BD149A8](a20, 0x1010C40CCBCF24ELL);
    __cxa_rethrow();
  }
  TInputStream::~TInputStream((TInputStream *)&a35);
  std::istringstream::~istringstream((uint64_t)&a58);
  if (*(char *)(v59 - 193) < 0)
    operator delete(*(void **)(v59 - 216));
  _Unwind_Resume(a1);
}

void sub_2097F2160()
{
  __cxa_end_catch();
  JUMPOUT(0x2097F2168);
}

void sub_2097F218C(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x2097F2198);
  __clang_call_terminate(a1);
}

uint64_t TLexicon::getNGramScore(TLexicon *this, const TWord *a2, const TWord *a3, const TWord *a4, const TWord *a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v8 = 0;
    if (!a3)
      goto LABEL_14;
    goto LABEL_9;
  }
  v7 = *((_QWORD *)a2 + 2);
  if (v7 == -1)
  {
    v24 = -1;
    v25 = -1;
    if ((a6 & 1) != 0)
    {
      v9 = *((_QWORD *)this + 56);
      v24 = *((_QWORD *)this + 13);
      v25 = v9;
    }
  }
  else
  {
    v24 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 104);
    v25 = v7;
  }
  v8 = 1;
  if (a3)
  {
LABEL_9:
    v10 = *((_QWORD *)a3 + 2);
    if (v10 == -1)
    {
      v12 = &v24 + 2 * v8;
      *v12 = -1;
      v12[1] = -1;
      if ((a6 & 1) != 0)
      {
        v13 = *((_QWORD *)this + 56);
        *v12 = *((_QWORD *)this + 13);
        v12[1] = v13;
      }
    }
    else
    {
      v11 = &v24 + 2 * v8;
      *v11 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 104);
      v11[1] = v10;
    }
    ++v8;
  }
LABEL_14:
  if (a4)
  {
    v14 = *((_QWORD *)a4 + 2);
    if (v14 == -1)
    {
      v16 = &v24 + 2 * v8;
      *v16 = -1;
      v16[1] = -1;
      if ((a6 & 1) != 0)
      {
        v17 = *((_QWORD *)this + 56);
        *v16 = *((_QWORD *)this + 13);
        v16[1] = v17;
      }
    }
    else
    {
      v15 = &v24 + 2 * v8;
      *v15 = *(_QWORD *)(*((_QWORD *)a4 + 1) + 104);
      v15[1] = v14;
    }
    LODWORD(v8) = v8 + 1;
  }
  v22 = 0;
  v23 = 0;
  v18 = *((_QWORD *)a5 + 2);
  if (v18 != -1)
  {
    v19 = *(_QWORD *)(*((_QWORD *)a5 + 1) + 104);
LABEL_24:
    v22 = v19;
    v23 = v18;
    goto LABEL_25;
  }
  v22 = -1;
  v23 = -1;
  if (a6)
  {
    v19 = *((_QWORD *)this + 13);
    v18 = *((_QWORD *)this + 56);
    goto LABEL_24;
  }
LABEL_25:
  v21 = 0;
  SDLm_LmScore(0, 0, 0, &v24, v8, &v22, 1u, (uint64_t)&v21, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  return v21;
}

void TLexicon::mapWordSequence(TLexicon *a1, uint64_t *a2, unint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unint64_t *a7)
{
  TParam *v11;
  uint64_t ActiveConfigHandle;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int32 *v16;
  uint64_t Word;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  char *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD **v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  unint64_t v80;
  uint64_t v81;
  BOOL v82;
  char v85[32];
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  void *__p;
  _BYTE *v91;
  uint64_t v92;
  _BYTE v93[40];
  void *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  _OWORD v99[2];
  char *v100;
  char *v101;
  char *v102;
  _QWORD *v103;
  _BYTE *v104;
  __int128 v105;
  __int128 v106;
  _QWORD *v107;

  v11 = (TParam *)(*((_QWORD *)a1 + 42) + 144);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v11);
  TParam::getValidConfig(v11, ActiveConfigHandle);
  if (a3 >= 4)
    v13 = 4;
  else
    v13 = a3;
  *(_QWORD *)&v105 = 0;
  std::vector<TWord const*>::vector(&v103, v13, &v105);
  if (v104 != (_BYTE *)v103)
  {
    v14 = 0;
    v15 = 8 * a3 - 8;
    do
    {
      v16 = *(__int32 **)(*a2 + v15);
      Word = TLexicon::findWord((uint64_t)a1, v16);
      if (!Word)
        Word = (uint64_t)TLexicon::addTempWord((uint64_t)a1, v16, 0, 0, 0);
      v103[v14++] = Word;
      v15 -= 8;
    }
    while (v14 < (v104 - (_BYTE *)v103) >> 3);
  }
  v100 = 0;
  v101 = 0;
  v102 = 0;
  memset(v99, 0, sizeof(v99));
  v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v102, 1uLL);
  v20 = &v18[8 * v19];
  *(_QWORD *)v18 = v99;
  v21 = v18 + 8;
  v23 = v100;
  v22 = v101;
  if (v101 != v100)
  {
    do
    {
      v24 = *((_QWORD *)v22 - 1);
      v22 -= 8;
      *((_QWORD *)v18 - 1) = v24;
      v18 -= 8;
    }
    while (v22 != v23);
    v22 = v100;
  }
  v100 = v18;
  v101 = v21;
  v102 = v20;
  if (v22)
    operator delete(v22);
  v101 = v21;
  v96 = 0;
  v97 = 0;
  v98 = 1;
  v94 = &unk_24C219778;
  v95 = 0;
  TAllocator::TAllocator((TAllocator *)v93, 2048);
  v25 = (v101 - v100) >> 3;
  __p = 0;
  v91 = 0;
  v92 = 0;
  v26 = *a2;
  if (a3 >= (a2[1] - *a2) >> 3)
  {
    v27 = 0;
  }
  else
  {
    v27 = 0;
    do
    {
      TLexicon::mapWord((uint64_t)a1, *(_QWORD *)(v26 + 8 * a3), a4, a5, (uint64_t)&__p);
      THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::clear(&v94);
      v29 = __p;
      v28 = v91;
      if (v91 != __p)
      {
        v30 = 0;
        do
        {
          v31 = v27;
          if (v27 < v25)
          {
            do
            {
              v32 = TAllocator::allocate((TAllocator *)v93, 32);
              v33 = v32;
              v34 = *(_QWORD *)&v100[8 * v31];
              *v32 = *((_QWORD *)__p + v30);
              v32[1] = v34;
              if (v34)
              {
                v35 = *(_QWORD *)(v34 + 16);
                v34 = *(_QWORD *)(v34 + 24);
              }
              else
              {
                v35 = 0;
              }
              v32[2] = v35;
              v32[3] = v34 + v30;
              TDecodeLinkMapWord::computeHistory(v32, (uint64_t)&v88, &v103);
              v33[2] += TLexicon::getNGramScore(a1, *((const TWord **)&v89 + 1), (const TWord *)v89, *((const TWord **)&v88 + 1), (const TWord *)v88, 0);
              v105 = v88;
              v106 = v89;
              v107 = 0;
              THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::find((uint64_t)&v94, &v105, &v86);
              if (v87)
              {
                v39 = *(_QWORD *)(v87 + 40);
                v40 = v33[2];
                v41 = *(_QWORD *)(v39 + 16);
                if (v40 < v41 || v40 == v41 && v33[3] < *(_QWORD *)(v39 + 24))
                  *(_QWORD *)(v87 + 40) = v33;
              }
              else
              {
                v105 = v88;
                v106 = v89;
                v107 = v33;
                THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::insert((uint64_t)&v94, &v105, v36, v37, v38, (uint64_t)v85);
              }
              ++v31;
            }
            while (v25 != v31);
            v29 = __p;
            v28 = v91;
          }
          ++v30;
        }
        while (v30 < (v28 - v29) >> 3);
      }
      v42 = v101 - v100;
      v25 = v97 + ((v101 - v100) >> 3);
      std::vector<TPItnTagHandle_fake **>::reserve((void **)&v100, v25);
      if (v96 >= 1)
      {
        v43 = v95;
        v44 = (unint64_t)&v95[v96];
        while (1)
        {
          v45 = (_QWORD *)*v43;
          if (*v43)
            break;
          if ((unint64_t)++v43 >= v44)
            goto LABEL_35;
        }
        v46 = v101;
        do
        {
LABEL_38:
          if (v46 >= v102)
          {
            v47 = (v46 - v100) >> 3;
            if ((unint64_t)(v47 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v48 = (v102 - v100) >> 2;
            if (v48 <= v47 + 1)
              v48 = v47 + 1;
            if ((unint64_t)(v102 - v100) >= 0x7FFFFFFFFFFFFFF8)
              v49 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v49 = v48;
            if (v49)
              v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v102, v49);
            else
              v50 = 0;
            v51 = &v50[8 * v47];
            *(_QWORD *)v51 = v45[5];
            v46 = v51 + 8;
            v53 = v100;
            v52 = v101;
            if (v101 != v100)
            {
              do
              {
                v54 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v51 - 1) = v54;
                v51 -= 8;
              }
              while (v52 != v53);
              v52 = v100;
            }
            v100 = v51;
            v101 = v46;
            v102 = &v50[8 * v49];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *(_QWORD *)v46 = v45[5];
            v46 += 8;
          }
          v101 = v46;
          v45 = (_QWORD *)*v45;
        }
        while (v45);
        v55 = v43 + 1;
        while ((unint64_t)v55 < v44)
        {
          v56 = (_QWORD *)*v55++;
          v45 = v56;
          if (v56)
          {
            v43 = v55 - 1;
            goto LABEL_38;
          }
        }
      }
LABEL_35:
      v27 = v42 >> 3;
      ++a3;
      v26 = *a2;
    }
    while (a3 < (a2[1] - *a2) >> 3);
  }
  v57 = 0;
  v58 = v25 - v27;
  if (v25 > v27)
  {
    v59 = &v100[8 * v27];
    do
    {
      v60 = *(_QWORD **)v59;
      if (!v57 || (v61 = v60[2], v62 = v57[2], v61 < v62) || v61 == v62 && v60[3] < v57[3])
        v57 = *(_QWORD **)v59;
      v59 += 8;
      --v58;
    }
    while (v58);
  }
  v63 = (_QWORD **)(v57 + 1);
  if (v57[1])
  {
    v64 = a7 + 2;
    v65 = (_QWORD *)a7[1];
    do
    {
      if ((unint64_t)v65 >= *v64)
      {
        v66 = (uint64_t)((uint64_t)v65 - *a7) >> 3;
        if ((unint64_t)(v66 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v67 = *v64 - *a7;
        v68 = v67 >> 2;
        if (v67 >> 2 <= (unint64_t)(v66 + 1))
          v68 = v66 + 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v69 = v68;
        if (v69)
          v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a7 + 2), v69);
        else
          v70 = 0;
        v71 = &v70[8 * v66];
        *(_QWORD *)v71 = *v57;
        v65 = v71 + 8;
        v73 = (char *)*a7;
        v72 = (char *)a7[1];
        if (v72 != (char *)*a7)
        {
          do
          {
            v74 = *((_QWORD *)v72 - 1);
            v72 -= 8;
            *((_QWORD *)v71 - 1) = v74;
            v71 -= 8;
          }
          while (v72 != v73);
          v72 = (char *)*a7;
        }
        *a7 = (unint64_t)v71;
        a7[1] = (unint64_t)v65;
        a7[2] = (unint64_t)&v70[8 * v69];
        if (v72)
          operator delete(v72);
      }
      else
      {
        *v65++ = *v57;
      }
      a7[1] = (unint64_t)v65;
      v57 = *v63;
      v75 = *v63;
      v76 = v75[1];
      v63 = (_QWORD **)(v75 + 1);
    }
    while (v76);
  }
  else
  {
    v65 = (_QWORD *)a7[1];
  }
  v77 = *a7;
  v78 = v65 - 1;
  if ((_QWORD *)*a7 != v65 && (unint64_t)v78 > v77)
  {
    v80 = v77 + 8;
    do
    {
      v81 = *(_QWORD *)(v80 - 8);
      *(_QWORD *)(v80 - 8) = *v78;
      *v78-- = v81;
      v82 = v80 >= (unint64_t)v78;
      v80 += 8;
    }
    while (!v82);
  }
  if (__p)
  {
    v91 = __p;
    operator delete(__p);
  }
  TAllocator::clear((TAllocator *)v93);
  THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::~THashBase(&v94);
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
}

void sub_2097F2950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  void *v34;
  void *v35;

  THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::~THashBase(&a32);
  v34 = *(void **)(v32 - 176);
  if (v34)
  {
    *(_QWORD *)(v32 - 168) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(v32 - 152);
  if (v35)
  {
    *(_QWORD *)(v32 - 144) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void TLexicon::mapWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  const __int32 *v12;
  __int32 *v13;
  TLexicon *v14;
  TParam *v15;
  uint64_t ActiveConfigHandle;
  uint64_t Word;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t **UpgradeMap;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t **v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unsigned int *v52;
  int *v53;
  __int32 *v54;
  uint64_t v55;
  int *v56;
  unint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  BOOL v70;
  __int32 *v71;
  __int128 v72;
  _BYTE v73[785];
  char v74;
  int *v75;
  __int128 v76;
  _BYTE v77[785];
  char v78;
  unsigned int *v79;
  __int128 v80;
  _BYTE v81[1024];
  char v82;
  unsigned int *v83;
  __int128 v84;
  _BYTE v85[1024];
  char v86;
  __int32 *v87;
  int v88;

  v5 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v7 = (void **)v6;
  v9 = v8;
  v11 = v10;
  v13 = (__int32 *)v12;
  v14 = (TLexicon *)v5;
  v87 = (__int32 *)v12;
  std::vector<TItnRule *>::resize(v6, 0);
  v15 = (TParam *)(*((_QWORD *)v14 + 42) + 144);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v15);
  if (*((_DWORD *)v15 + TParam::getValidConfig(v15, ActiveConfigHandle) + 40) == v11)
  {
    Word = TLexicon::findWord((uint64_t)v14, v13);
    if (!Word)
      Word = (uint64_t)TLexicon::addTempWord((uint64_t)v14, v13, 0, 0, 0);
    v18 = (unint64_t)v7[2];
    v19 = (uint64_t *)v7[1];
    if ((unint64_t)v19 >= v18)
    {
      v42 = ((char *)v19 - (_BYTE *)*v7) >> 3;
      if ((unint64_t)(v42 + 1) >> 61)
LABEL_115:
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      v43 = v18 - (_QWORD)*v7;
      v44 = v43 >> 2;
      if (v43 >> 2 <= (unint64_t)(v42 + 1))
        v44 = v42 + 1;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v45 = v44;
      if (v45)
        v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(v7 + 2), v45);
      else
        v46 = 0;
      v47 = (uint64_t *)&v46[8 * v42];
      v48 = &v46[8 * v45];
      *v47 = Word;
      v20 = v47 + 1;
      v50 = (char *)*v7;
      v49 = (char *)v7[1];
      if (v49 != *v7)
      {
        do
        {
          v51 = *((_QWORD *)v49 - 1);
          v49 -= 8;
          *--v47 = v51;
        }
        while (v49 != v50);
        v49 = (char *)*v7;
      }
      *v7 = v47;
      v7[1] = v20;
      v7[2] = v48;
      if (v49)
        operator delete(v49);
    }
    else
    {
      *v19 = Word;
      v20 = v19 + 1;
    }
    v7[1] = v20;
  }
  else
  {
    UpgradeMap = TLexicon::loadUpgradeMap(v14, v9, v11);
    v22 = std::__tree<std::__value_type<wchar_t const*,wchar_t const*>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,wchar_t const*>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,wchar_t const*>>>::__equal_range_multi<wchar_t const*>((uint64_t)UpgradeMap, (const __int32 **)&v87);
    if (v22 == v23
      || (v24 = v22, v25 = v23, LODWORD(v22) = wcscmp((const __int32 *)v22[5], dword_209A60524), !(_DWORD)v22))
    {
      v83 = (unsigned int *)v85;
      v84 = xmmword_209A57DD0;
      v86 = 1;
      v79 = (unsigned int *)v81;
      v80 = xmmword_209A57DD0;
      v82 = 1;
      v75 = (int *)v77;
      v76 = xmmword_209A57DD0;
      v78 = 1;
      TLexicon::getWrittenForm((int)v22, v87, (uint64_t)&v83);
      getSecondField(v87, (uint64_t)&v79);
      getThirdField(v87, (uint64_t)&v75);
      v71 = (__int32 *)v73;
      v72 = xmmword_209A57DD0;
      v74 = 1;
      if (*((_QWORD *)&v84 + 1) >= (unint64_t)v84)
      {
        if (v86)
        {
          v88 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v88, 1uLL);
          v41 = v83;
          --*((_QWORD *)&v84 + 1);
        }
        else
        {
          v41 = v83;
          if ((_QWORD)v84)
            v83[(_QWORD)v84 - 1] = 0;
        }
      }
      else
      {
        v41 = v83;
        v83[*((_QWORD *)&v84 + 1)] = 0;
      }
      if (*((_QWORD *)&v80 + 1) >= (unint64_t)v80)
      {
        if (v82)
        {
          v88 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v79, *((unint64_t *)&v80 + 1), &v88, 1uLL);
          v52 = v79;
          --*((_QWORD *)&v80 + 1);
        }
        else
        {
          v52 = v79;
          if ((_QWORD)v80)
            v79[(_QWORD)v80 - 1] = 0;
        }
      }
      else
      {
        v52 = v79;
        v79[*((_QWORD *)&v80 + 1)] = 0;
      }
      if (*((_QWORD *)&v76 + 1) >= (unint64_t)v76)
      {
        if (v78)
        {
          v88 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v75, *((unint64_t *)&v76 + 1), &v88, 1uLL);
          v53 = v75;
          --*((_QWORD *)&v76 + 1);
        }
        else
        {
          v53 = v75;
          if ((_QWORD)v76)
            v75[(_QWORD)v76 - 1] = 0;
        }
      }
      else
      {
        v53 = v75;
        v75[*((_QWORD *)&v76 + 1)] = 0;
      }
      TLexicon::constructWordName((uint64_t)v14, v41, v52, v53, 1, (uint64_t)&v71);
      if (*((_QWORD *)&v72 + 1) >= (unint64_t)v72)
      {
        if (v74)
        {
          v88 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v71, *((unint64_t *)&v72 + 1), &v88, 1uLL);
          v54 = v71;
          --*((_QWORD *)&v72 + 1);
        }
        else
        {
          v54 = v71;
          if ((_QWORD)v72)
            v71[(_QWORD)v72 - 1] = 0;
        }
      }
      else
      {
        v54 = v71;
        v71[*((_QWORD *)&v72 + 1)] = 0;
      }
      v55 = TLexicon::findWord((uint64_t)v14, v54);
      if (!v55)
      {
        if (*((_QWORD *)&v72 + 1) >= (unint64_t)v72)
        {
          if (v74)
          {
            v88 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v71, *((unint64_t *)&v72 + 1), &v88, 1uLL);
            v56 = v71;
            --*((_QWORD *)&v72 + 1);
          }
          else
          {
            v56 = v71;
            if ((_QWORD)v72)
              v71[(_QWORD)v72 - 1] = 0;
          }
        }
        else
        {
          v56 = v71;
          v71[*((_QWORD *)&v72 + 1)] = 0;
        }
        v55 = (uint64_t)TLexicon::addTempWord((uint64_t)v14, v56, 0, 0, 0);
      }
      v57 = (unint64_t)v7[2];
      v58 = (uint64_t *)v7[1];
      if ((unint64_t)v58 >= v57)
      {
        v60 = ((char *)v58 - (_BYTE *)*v7) >> 3;
        if ((unint64_t)(v60 + 1) >> 61)
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        v61 = v57 - (_QWORD)*v7;
        v62 = v61 >> 2;
        if (v61 >> 2 <= (unint64_t)(v60 + 1))
          v62 = v60 + 1;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v63 = v62;
        if (v63)
          v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(v7 + 2), v63);
        else
          v64 = 0;
        v65 = (uint64_t *)&v64[8 * v60];
        v66 = &v64[8 * v63];
        *v65 = v55;
        v59 = v65 + 1;
        v68 = (char *)*v7;
        v67 = (char *)v7[1];
        if (v67 != *v7)
        {
          do
          {
            v69 = *((_QWORD *)v67 - 1);
            v67 -= 8;
            *--v65 = v69;
          }
          while (v67 != v68);
          v67 = (char *)*v7;
        }
        *v7 = v65;
        v7[1] = v59;
        v7[2] = v66;
        if (v67)
          operator delete(v67);
      }
      else
      {
        *v58 = v55;
        v59 = v58 + 1;
      }
      v7[1] = v59;
      if (v74)
      {
        v70 = v71 == (__int32 *)v73 || v71 == 0;
        if (!v70)
          MEMORY[0x20BD149A8]();
      }
      if (v78 && v75 != (int *)v77 && v75)
        MEMORY[0x20BD149A8]();
      if (v82 && v79 != (unsigned int *)v81 && v79)
        MEMORY[0x20BD149A8]();
      if (v86 && v83 != (unsigned int *)v85 && v83)
        MEMORY[0x20BD149A8]();
    }
    else
    {
      do
      {
        v26 = TLexicon::findWord((uint64_t)v14, (__int32 *)v24[5]);
        if (!v26)
          v26 = (uint64_t)TLexicon::addTempWord((uint64_t)v14, (int *)v24[5], 0, 0, 0);
        v28 = (uint64_t *)v7[1];
        v27 = (unint64_t)v7[2];
        if ((unint64_t)v28 >= v27)
        {
          v30 = ((char *)v28 - (_BYTE *)*v7) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
            goto LABEL_115;
          v31 = v27 - (_QWORD)*v7;
          v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          if (v33)
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(v7 + 2), v33);
          else
            v34 = 0;
          v35 = (uint64_t *)&v34[8 * v30];
          *v35 = v26;
          v29 = v35 + 1;
          v37 = (char *)*v7;
          v36 = (char *)v7[1];
          if (v36 != *v7)
          {
            do
            {
              v38 = *((_QWORD *)v36 - 1);
              v36 -= 8;
              *--v35 = v38;
            }
            while (v36 != v37);
            v36 = (char *)*v7;
          }
          *v7 = v35;
          v7[1] = v29;
          v7[2] = &v34[8 * v33];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *v28 = v26;
          v29 = v28 + 1;
        }
        v7[1] = v29;
        v39 = v24[1];
        if (v39)
        {
          do
          {
            v40 = (uint64_t **)v39;
            v39 = (uint64_t *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = (uint64_t **)v24[2];
            v70 = *v40 == (uint64_t *)v24;
            v24 = v40;
          }
          while (!v70);
        }
        v24 = v40;
      }
      while (v40 != v25);
    }
  }
}

void sub_2097F30BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  if (LOBYTE(STACK[0x428]) && a11 != v15 && a11)
    MEMORY[0x20BD149A8]();
  if (LOBYTE(STACK[0x848]))
  {
    v17 = STACK[0x430];
    if (STACK[0x430] != v14)
    {
      if (v17)
        MEMORY[0x20BD149A8](v17, 0x1000C4052888210);
    }
  }
  if (LOBYTE(STACK[0xC68]))
  {
    v18 = STACK[0x850];
    if (STACK[0x850] != v13)
    {
      if (v18)
        MEMORY[0x20BD149A8](v18, 0x1000C4052888210);
    }
  }
  if (*(_BYTE *)(v12 + 1048))
  {
    v19 = STACK[0xC70];
    if (STACK[0xC70] != v11)
    {
      if (v19)
        MEMORY[0x20BD149A8](v19, 0x1000C4052888210);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  _QWORD *v5;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = v1[1];
      result = *(_QWORD **)(v4 + 8 * i);
      if (result)
      {
        do
        {
          v5 = (_QWORD *)*result;
          MEMORY[0x20BD149A8]();
          result = v5;
        }
        while (v5);
        v4 = v1[1];
        v2 = v1[2];
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  v1[3] = 0;
  return result;
}

void TDecodeLinkMapWord::computeHistory(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  size_t v6;

  v3 = 0;
  if (!a1)
    goto LABEL_5;
  do
  {
    v4 = v3++;
    *(_QWORD *)(a2 + 8 * v4) = *a1;
    if (v4 > 2)
      break;
    a1 = (_QWORD *)a1[1];
  }
  while (a1);
  if (v4 <= 2)
  {
LABEL_5:
    v5 = 0;
    v6 = 32 - 8 * v3;
    while (v5 < (uint64_t)(a3[1] - *a3) >> 3)
    {
      *(_QWORD *)(a2 + 8 * v3 + 8 * v5) = *(_QWORD *)(*a3 + 8 * v5);
      ++v5;
      v6 -= 8;
      if (v3 + v5 == 4)
        return;
    }
    if (v3 + v5 <= 3)
      bzero((void *)(a2 + 8 * v3 + 8 * v5), v6);
  }
}

_QWORD *THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::insert@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *result;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v9 = *(_QWORD *)(a1 + 24);
  if (v9 == *(_QWORD *)(a1 + 16))
  {
    if (v9)
    {
      if (*(_BYTE *)(a1 + 34))
      {
        tknPrintf("Warning: hashtable resizing, size was %llu\n", (uint64_t)a2, a3, a4, a5, *(_QWORD *)(a1 + 24));
        v9 = *(_QWORD *)(a1 + 16);
      }
      v10 = 2 * v9;
    }
    else
    {
      v10 = 10781;
    }
    THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::resize(a1, v10);
  }
  v11 = 0;
  v12 = 0;
  do
    v12 = 33 * v12 + *((char *)a2 + v11++);
  while (v11 != 32);
  v14 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v15 = v12 % v13;
  v16 = (_QWORD *)(v14 + 8 * (v12 % v13));
  result = v16;
  while (1)
  {
    result = (_QWORD *)*result;
    if (!result)
      break;
    if (result[1] == *a2 && result[2] == a2[1] && result[3] == a2[2] && result[4] == a2[3])
    {
      v21 = 0;
      v22 = v14 + 8 * v13;
      goto LABEL_25;
    }
  }
  result = (_QWORD *)operator new();
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(v23 + 8 * v15);
  v26 = *(_OWORD *)a2;
  *(_OWORD *)(result + 3) = *((_OWORD *)a2 + 1);
  *result = v25;
  result[5] = a2[4];
  *(_OWORD *)(result + 1) = v26;
  *(_QWORD *)(v23 + 8 * v15) = result;
  ++*(_QWORD *)(a1 + 24);
  v27 = *(_QWORD *)(a1 + 8);
  v16 = (_QWORD *)(v27 + 8 * v15);
  v22 = v27 + 8 * v24;
  v21 = 1;
LABEL_25:
  *(_QWORD *)a6 = v16;
  *(_QWORD *)(a6 + 8) = v22;
  *(_QWORD *)(a6 + 16) = result;
  *(_BYTE *)(a6 + 24) = v21;
  return result;
}

__int32 *getSecondField(__int32 *a1, uint64_t a2)
{
  __int32 v4;
  __int32 *result;
  __int32 *v6;
  __int32 *v7;
  unint64_t v8;

  TBuffer<wchar_t>::resize(a2, 0);
  if (*a1 != 92)
  {
LABEL_4:
    result = wcschr(a1, 92);
    a1 = result;
    if (!result)
      return result;
    goto LABEL_7;
  }
  v4 = a1[1];
  if (v4 == 92)
  {
    ++a1;
  }
  else if (!v4)
  {
    goto LABEL_4;
  }
LABEL_7:
  v6 = a1 + 1;
  v7 = wcschr(v6, 92);
  if (!v7)
    return (__int32 *)TBuffer<wchar_t>::assign(a2, v6);
  v8 = v7 - v6;
  TBuffer<wchar_t>::resize(a2, 0);
  return (__int32 *)TBuffer<wchar_t>::insert(a2, 0, v6, v8);
}

__int32 *getThirdField(__int32 *a1, uint64_t a2)
{
  __int32 v4;
  __int32 *result;

  TBuffer<wchar_t>::resize(a2, 0);
  if (*a1 != 92)
  {
LABEL_4:
    result = wcschr(a1, 92);
    a1 = result;
    if (!result)
      return result;
    goto LABEL_7;
  }
  v4 = a1[1];
  if (v4 == 92)
  {
    ++a1;
  }
  else if (!v4)
  {
    goto LABEL_4;
  }
LABEL_7:
  result = wcschr(a1 + 1, 92);
  if (result)
    return (__int32 *)TBuffer<wchar_t>::assign(a2, result + 1);
  return result;
}

BOOL TLexicon::constructWordName(uint64_t a1, unsigned int *a2, unsigned int *a3, int *a4, int a5, uint64_t a6)
{
  TParam *v12;
  uint64_t ActiveConfigHandle;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v21;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  int v26;
  int v27;
  int v28;

  v12 = (TParam *)(*(_QWORD *)(a1 + 336) + 144);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v12);
  v14 = *((int *)v12 + TParam::getValidConfig(v12, ActiveConfigHandle) + 40);
  TBuffer<wchar_t>::resize(a6, 0);
  if (*a2)
  {
    if (a5)
    {
      addToWordName(a2, a1 + 240, 1, 0, a6);
    }
    else
    {
      v16 = 0;
      while (a2[v16++])
        ;
      TBuffer<wchar_t>::insert(a6, *(_QWORD *)(a6 + 16), (int *)a2, v16 - 1);
    }
    v15 = 0;
    if (!*a3)
    {
LABEL_10:
      if (!*a4)
        goto LABEL_20;
    }
  }
  else
  {
    v15 = *a3 == 0;
    if (!*a3)
      goto LABEL_10;
  }
  v26 = 92;
  TBuffer<wchar_t>::insert(a6, *(_QWORD *)(a6 + 16), &v26, 1uLL);
  if (*a3)
  {
    if (a5)
    {
      addToWordName(a3, a1 + 240, 0, 0, a6);
    }
    else
    {
      v18 = 0;
      while (a3[v18++])
        ;
      TBuffer<wchar_t>::insert(a6, *(_QWORD *)(a6 + 16), (int *)a3, v18 - 1);
    }
  }
  if (*a4)
  {
    v27 = 92;
    TBuffer<wchar_t>::insert(a6, *(_QWORD *)(a6 + 16), &v27, 1uLL);
    if (!a5)
    {
      v21 = 0;
      while (a4[v21++])
        ;
      TBuffer<wchar_t>::insert(a6, *(_QWORD *)(a6 + 16), a4, v21 - 1);
      if (v15)
        return 1;
      goto LABEL_25;
    }
    addToWordName((unsigned int *)a4, a1 + 240, 0, 1, a6);
  }
LABEL_20:
  if (v15)
    return 1;
LABEL_25:
  v24 = *(_QWORD *)(a6 + 8);
  v23 = *(_QWORD *)(a6 + 16);
  if (v23 >= v24)
  {
    if (*(_BYTE *)(a6 + 1048))
    {
      v28 = 0;
      TBuffer<wchar_t>::insert(a6, v23, &v28, 1uLL);
      --*(_QWORD *)(a6 + 16);
      v25 = *(int **)a6;
    }
    else
    {
      v25 = *(int **)a6;
      if (v24)
        v25[v24 - 1] = 0;
    }
  }
  else
  {
    v25 = *(int **)a6;
    *(_DWORD *)(*(_QWORD *)a6 + 4 * v23) = 0;
  }
  return TLexicon::checkName(a1, v25, 0, v14) != 0;
}

void addToWordName(unsigned int *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  unsigned int *v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned int v23;
  TLocaleInfo *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  int v30;
  TLocaleInfo *v31;
  TLocaleInfo *v32;
  TLocaleInfo *v33;
  TLocaleInfo *v34;
  TLocaleInfo *v35;
  TLocaleInfo *v36;
  unint64_t v37;
  unint64_t v38;
  TLocaleInfo *v39;
  TLocaleInfo *v40;
  int v42;

  v8 = a1;
  v9 = *a1;
  {
    v34 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v34);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v34;
  }
  if ((int)v9 > 159)
  {
    if ((int)v9 >= 12288)
    {
      if ((_DWORD)v9 != 65279 && (_DWORD)v9 != 12288)
        goto LABEL_45;
    }
    else if ((_DWORD)v9 != 160 && (_DWORD)v9 != 8203)
    {
      goto LABEL_45;
    }
  }
  else if (v9 > 0x20 || ((1 << v9) & 0x100002600) == 0)
  {
    goto LABEL_45;
  }
  if (a3)
  {
    if ((v13 & 1) == 0
    {
      v36 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v36);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v36;
    }
    if ((int)v9 <= 8202)
    {
      if ((_DWORD)v9 != 32 && (_DWORD)v9 != 160)
        goto LABEL_45;
    }
    else if ((_DWORD)v9 != 8203 && (_DWORD)v9 != 65279 && (_DWORD)v9 != 12288)
    {
      goto LABEL_45;
    }
  }
  v14 = v8 + 1;
  v15 = v8[1];
  if ((_DWORD)v15)
  {
    do
    {
      if ((v16 & 1) == 0
      {
        v39 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v39);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v39;
      }
      if ((int)v15 > 159)
      {
        if ((int)v15 >= 12288)
        {
          if ((_DWORD)v15 != 65279 && (_DWORD)v15 != 12288)
            goto LABEL_44;
        }
        else if ((_DWORD)v15 != 160 && (_DWORD)v15 != 8203)
        {
          goto LABEL_44;
        }
      }
      else if (v15 > 0x20 || ((1 << v15) & 0x100002600) == 0)
      {
        goto LABEL_44;
      }
      v17 = v14[1];
      ++v14;
      v15 = v17;
    }
    while (v17);
  }
  if ((a3 & 1) == 0)
  {
    v15 = 0;
LABEL_44:
    v8 = v14;
    v9 = v15;
  }
LABEL_45:
  v40 = *(TLocaleInfo **)(a2 + 72);
  if ((unint64_t)v40 >= 3)
  {
    if ((v18 & 1) == 0
    {
      v35 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v35);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v35;
    }
    v9 = TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9);
  }
  v37 = *(_QWORD *)(a5 + 16);
  if ((_DWORD)v9)
  {
    v38 = *(_QWORD *)(a5 + 16);
    while (1)
    {
      v20 = v8[1];
      ++v8;
      v19 = v20;
      if ((a3 & 1) == 0)
      {
        if ((v21 & 1) == 0
        {
          v32 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v32);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v32;
        }
        if ((int)v9 > 159)
        {
          if ((int)v9 >= 12288)
          {
            if ((_DWORD)v9 == 65279 || (_DWORD)v9 == 12288)
            {
LABEL_62:
              if ((_DWORD)v19)
              {
                do
                {
                  if ((v22 & 1) == 0
                  {
                    v24 = (TLocaleInfo *)operator new();
                    TLocaleInfo::TLocaleInfo(v24);
                    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v24;
                  }
                  if ((int)v19 > 159)
                  {
                    if ((int)v19 >= 12288)
                    {
                      if ((_DWORD)v19 != 65279 && (_DWORD)v19 != 12288)
                        break;
                    }
                    else if ((_DWORD)v19 != 160 && (_DWORD)v19 != 8203)
                    {
                      break;
                    }
                  }
                  else if (v19 > 0x20 || ((1 << v19) & 0x100002600) == 0)
                  {
                    break;
                  }
                  v23 = v8[1];
                  ++v8;
                  v19 = v23;
                }
                while (v23);
              }
            }
          }
          else if ((_DWORD)v9 == 160 || (_DWORD)v9 == 8203)
          {
            goto LABEL_62;
          }
        }
        else if (v9 <= 0x20 && ((1 << v9) & 0x100002600) != 0)
        {
          goto LABEL_62;
        }
      }
      if ((unint64_t)v40 < 3)
      {
        v25 = v9;
        v9 = v19;
      }
      else
      {
        if ((_DWORD)v19)
        {
          while (1)
          {
            v25 = v9;
            v26 = TLocaleInfo::composeCharacter(a2, v9, v19);
            if (!(_DWORD)v26)
              break;
            v9 = v26;
            if ((int)v19 >= 1611 && a4 && (v19 < 0x660 || (v19 & 0xFFFFFFFB) == 0x670))
              break;
            v27 = v8[1];
            ++v8;
            v19 = v27;
            if (!v27)
              goto LABEL_86;
          }
        }
        else
        {
LABEL_86:
          v25 = v9;
        }
        if ((v28 & 1) == 0
        {
          v33 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v33);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v33;
        }
        v9 = TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v19);
      }
      v42 = v25;
      TBuffer<wchar_t>::insert(a5, *(_QWORD *)(a5 + 16), &v42, 1uLL);
      if ((v29 & 1) == 0
      {
        v31 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v31);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v31;
      }
      if (v25 > 159)
      {
        if (v25 >= 12288)
        {
          if (v25 == 12288)
            goto LABEL_101;
          v30 = 65279;
        }
        else
        {
          if (v25 == 160)
            goto LABEL_101;
          v30 = 8203;
        }
        if (v25 == v30)
          goto LABEL_101;
LABEL_103:
        v38 = *(_QWORD *)(a5 + 16);
        if (!(_DWORD)v9)
          goto LABEL_112;
      }
      else
      {
        if (v25 > 0x20 || ((1 << v25) & 0x100002600) == 0)
          goto LABEL_103;
LABEL_101:
        if (!(_DWORD)v9)
          goto LABEL_112;
      }
    }
  }
  v38 = *(_QWORD *)(a5 + 16);
LABEL_112:
  if (!a3 || v38 > v37)
    TBuffer<wchar_t>::resize(a5, v38);
}

void sub_2097F3D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD149A8](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TBuffer<wchar_t>::operator+=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int *v6;
  int v8;

  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= v5)
  {
    if (*(_BYTE *)(a2 + 1048))
    {
      v8 = 0;
      TBuffer<wchar_t>::insert(a2, v4, &v8, 1uLL);
      v4 = *(_QWORD *)(a2 + 16) - 1;
      *(_QWORD *)(a2 + 16) = v4;
      v6 = *(int **)a2;
    }
    else
    {
      v6 = *(int **)a2;
      if (v5)
        v6[v5 - 1] = 0;
    }
  }
  else
  {
    v6 = *(int **)a2;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v4) = 0;
  }
  TBuffer<wchar_t>::insert(a1, *(_QWORD *)(a1 + 16), v6, v4);
  return a1;
}

uint64_t respellRoot(uint64_t a1, int *a2)
{
  unint64_t v4;
  unint64_t v5;
  const __int32 *v6;
  unint64_t StressPosition;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  __int32 v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  int v17;
  int v18;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= v5)
  {
    if (*(_BYTE *)(a1 + 1048))
    {
      v17 = 0;
      TBuffer<wchar_t>::insert(a1, v4, &v17, 1uLL);
      --*(_QWORD *)(a1 + 16);
      v6 = *(const __int32 **)a1;
    }
    else
    {
      v6 = *(const __int32 **)a1;
      if (v5)
        v6[v5 - 1] = 0;
    }
  }
  else
  {
    v6 = *(const __int32 **)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v4) = 0;
  }
  if (!wcscmp(v6, dword_209A60554))
    return 1;
  StressPosition = findStressPosition(a2, 0);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 >= v9)
  {
    if (*(_BYTE *)(a1 + 1048))
    {
      v18 = 0;
      TBuffer<wchar_t>::insert(a1, v8, &v18, 1uLL);
      --*(_QWORD *)(a1 + 16);
      v10 = *(int **)a1;
    }
    else
    {
      v10 = *(int **)a1;
      if (v9)
        v10[v9 - 1] = 0;
    }
  }
  else
  {
    v10 = *(int **)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v8) = 0;
  }
  v11 = findStressPosition(v10, 1);
  if (StressPosition >= *(_QWORD *)(a1 + 16))
    return 0;
  v12 = *(_DWORD *)(*(_QWORD *)a1 + 4 * StressPosition);
  if (StressPosition == v11)
  {
    v13 = s_pszAccentedVowels;
    v14 = wcschr(s_pszAccentedVowels, v12);
    if (v14)
    {
      v15 = s_pszUnaccentedVowels;
LABEL_21:
      *(_DWORD *)(*(_QWORD *)a1 + 4 * StressPosition) = *(__int32 *)((char *)v15 + (char *)v14 - (char *)v13);
    }
  }
  else
  {
    v13 = s_pszUnaccentedVowels;
    v14 = wcschr(s_pszUnaccentedVowels, v12);
    if (v14)
    {
      v15 = s_pszAccentedVowels;
      goto LABEL_21;
    }
  }
  return 1;
}

uint64_t findStressPosition(int *a1, int a2)
{
  __int32 v4;
  uint64_t v5;
  __int32 *v6;
  uint64_t v7;
  __int32 *v8;
  char v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  int PreviousVowel;
  uint64_t v14;
  int v15;
  _BYTE *v17;
  __int128 v18;
  _BYTE v19[1024];
  char v20;
  int v21;

  v4 = *a1;
  if (!*a1)
  {
    v7 = 0;
LABEL_7:
    v8 = 0;
    v9 = 1;
    goto LABEL_8;
  }
  v5 = 0;
  while (1)
  {
    v6 = wcschr(s_pszAccentedVowels, v4);
    if (v6)
      break;
    v7 = v5 + 1;
    v4 = a1[++v5];
    if (!v4)
      goto LABEL_7;
  }
  if (a2)
  {
    v8 = v6;
    v9 = 0;
    v7 = v5;
LABEL_8:
    v17 = v19;
    v18 = xmmword_209A57DD0;
    v20 = 1;
    TBuffer<wchar_t>::assign((uint64_t)&v17, a1);
    v10 = v17;
    if ((v9 & 1) == 0)
      *(_DWORD *)&v17[4 * v7] = *(__int32 *)((char *)s_pszUnaccentedVowels + (char *)v8 - (char *)s_pszAccentedVowels);
    v11 = DWORD2(v18) - 1;
    if (wcschr((__int32 *)"s", *(_DWORD *)&v10[4 * DWORD2(v18) - 4]))
    {
      if (*((_QWORD *)&v18 + 1) >= (unint64_t)v18)
      {
        if (v20)
        {
          v21 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v17, *((unint64_t *)&v18 + 1), &v21, 1uLL);
          v12 = (uint64_t)v17;
          --*((_QWORD *)&v18 + 1);
        }
        else
        {
          v12 = (uint64_t)v17;
          if ((_QWORD)v18)
            *(_DWORD *)&v17[4 * v18 - 4] = 0;
        }
      }
      else
      {
        v12 = (uint64_t)v17;
        *(_DWORD *)&v17[4 * *((_QWORD *)&v18 + 1)] = 0;
      }
      PreviousVowel = findPreviousVowel(v12, v11);
      if (PreviousVowel >= 0)
        v11 = PreviousVowel;
    }
    if (*((_QWORD *)&v18 + 1) >= (unint64_t)v18)
    {
      if (v20)
      {
        v21 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v17, *((unint64_t *)&v18 + 1), &v21, 1uLL);
        v14 = (uint64_t)v17;
        --*((_QWORD *)&v18 + 1);
      }
      else
      {
        v14 = (uint64_t)v17;
        if ((_QWORD)v18)
          *(_DWORD *)&v17[4 * v18 - 4] = 0;
      }
    }
    else
    {
      v14 = (uint64_t)v17;
      *(_DWORD *)&v17[4 * *((_QWORD *)&v18 + 1)] = 0;
    }
    v15 = findPreviousVowel(v14, v11);
    if (v15 >= 0)
      v5 = v15;
    else
      v5 = v11;
    if (v20 && v17 != v19 && v17)
      MEMORY[0x20BD149A8]();
  }
  return v5;
}

void sub_2097F4238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10)
      MEMORY[0x20BD149A8]();
  }
  _Unwind_Resume(a1);
}

void TLexiconParamManager::~TLexiconParamManager(TLexiconParamManager *this)
{
  TLexiconParamManager::~TLexiconParamManager(this);
  JUMPOUT(0x20BD149A8);
}

{
  uint64_t v2;
  void **v3;
  char *v4;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t v18;
  void **v19;

  v2 = 0;
  *(_QWORD *)this = &off_24C217148;
  v3 = (void **)((char *)this + 21520);
  *((_QWORD *)this + 2690) = off_24C2135E0;
  v4 = (char *)this + 21767;
  do
  {
    if (v4[v2] < 0)
      operator delete(*(void **)((char *)this + v2 + 21744));
    v2 -= 24;
  }
  while (v2 != -48);
  TParam::~TParam(v3);
  TParam::~TParam((void **)this + 2646);
  *((_QWORD *)this + 2474) = &unk_24C214170;
  v19 = (void **)((char *)this + 21144);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 21120);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 21096);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i = 0; i != -1152; i -= 24)
  {
    if (*((char *)this + i + 21095) < 0)
      operator delete(*(void **)((char *)this + i + 21072));
  }
  TParam::~TParam((void **)this + 2474);
  *((_QWORD *)this + 2302) = &unk_24C214170;
  v19 = (void **)((char *)this + 19768);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 19744);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 19720);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (j = 0; j != -1152; j -= 24)
  {
    if (*((char *)this + j + 19719) < 0)
      operator delete(*(void **)((char *)this + j + 19696));
  }
  TParam::~TParam((void **)this + 2302);
  *((_QWORD *)this + 2130) = &unk_24C214170;
  v19 = (void **)((char *)this + 18392);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 18368);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 18344);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (k = 0; k != -1152; k -= 24)
  {
    if (*((char *)this + k + 18343) < 0)
      operator delete(*(void **)((char *)this + k + 18320));
  }
  TParam::~TParam((void **)this + 2130);
  *((_QWORD *)this + 1958) = &unk_24C214170;
  v19 = (void **)((char *)this + 17016);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 16992);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 16968);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (m = 0; m != -1152; m -= 24)
  {
    if (*((char *)this + m + 16967) < 0)
      operator delete(*(void **)((char *)this + m + 16944));
  }
  TParam::~TParam((void **)this + 1958);
  *((_QWORD *)this + 1786) = &unk_24C214170;
  v19 = (void **)((char *)this + 15640);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 15616);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 15592);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (n = 0; n != -1152; n -= 24)
  {
    if (*((char *)this + n + 15591) < 0)
      operator delete(*(void **)((char *)this + n + 15568));
  }
  TParam::~TParam((void **)this + 1786);
  *((_QWORD *)this + 1614) = &unk_24C214170;
  v19 = (void **)((char *)this + 14264);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 14240);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 14216);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (ii = 0; ii != -1152; ii -= 24)
  {
    if (*((char *)this + ii + 14215) < 0)
      operator delete(*(void **)((char *)this + ii + 14192));
  }
  TParam::~TParam((void **)this + 1614);
  *((_QWORD *)this + 1442) = &unk_24C214170;
  v19 = (void **)((char *)this + 12888);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 12864);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 12840);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (jj = 0; jj != -1152; jj -= 24)
  {
    if (*((char *)this + jj + 12839) < 0)
      operator delete(*(void **)((char *)this + jj + 12816));
  }
  TParam::~TParam((void **)this + 1442);
  *((_QWORD *)this + 1270) = &unk_24C214170;
  v19 = (void **)((char *)this + 11512);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 11488);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 11464);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (kk = 0; kk != -1152; kk -= 24)
  {
    if (*((char *)this + kk + 11463) < 0)
      operator delete(*(void **)((char *)this + kk + 11440));
  }
  TParam::~TParam((void **)this + 1270);
  *((_QWORD *)this + 1098) = &unk_24C214170;
  v19 = (void **)((char *)this + 10136);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 10112);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 10088);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (mm = 0; mm != -1152; mm -= 24)
  {
    if (*((char *)this + mm + 10087) < 0)
      operator delete(*(void **)((char *)this + mm + 10064));
  }
  TParam::~TParam((void **)this + 1098);
  *((_QWORD *)this + 926) = &unk_24C214170;
  v19 = (void **)((char *)this + 8760);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 8736);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 8712);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (nn = 0; nn != -1152; nn -= 24)
  {
    if (*((char *)this + nn + 8711) < 0)
      operator delete(*(void **)((char *)this + nn + 8688));
  }
  TParam::~TParam((void **)this + 926);
  *((_QWORD *)this + 754) = &unk_24C214170;
  v19 = (void **)((char *)this + 7384);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 7360);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 7336);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i1 = 0; i1 != -1152; i1 -= 24)
  {
    if (*((char *)this + i1 + 7335) < 0)
      operator delete(*(void **)((char *)this + i1 + 7312));
  }
  TParam::~TParam((void **)this + 754);
  *((_QWORD *)this + 582) = &unk_24C214170;
  v19 = (void **)((char *)this + 6008);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 5984);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 5960);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i2 = 0; i2 != -1152; i2 -= 24)
  {
    if (*((char *)this + i2 + 5959) < 0)
      operator delete(*(void **)((char *)this + i2 + 5936));
  }
  TParam::~TParam((void **)this + 582);
  *((_QWORD *)this + 410) = &unk_24C214170;
  v19 = (void **)((char *)this + 4632);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 4608);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 4584);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i3 = 0; i3 != -1152; i3 -= 24)
  {
    if (*((char *)this + i3 + 4583) < 0)
      operator delete(*(void **)((char *)this + i3 + 4560));
  }
  TParam::~TParam((void **)this + 410);
  TParam::~TParam((void **)this + 366);
  TParam::~TParam((void **)this + 322);
  TParam::~TParam((void **)this + 278);
  TParam::~TParam((void **)this + 234);
  *((_QWORD *)this + 62) = &unk_24C214170;
  v19 = (void **)((char *)this + 1848);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 1824);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 1800);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  v18 = 1152;
  do
  {
    if (*((char *)this + v18 + 647) < 0)
      operator delete(*(void **)((char *)this + v18 + 624));
    v18 -= 24;
  }
  while (v18);
  TParam::~TParam((void **)this + 62);
  TParam::~TParam((void **)this + 18);
  TParamManager::~TParamManager(this);
}

void TEnvManager::~TEnvManager(void **this)
{
  *this = &off_24C213C28;
  TEnvManager::close((TEnvManager *)this);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  *this = off_24C2140A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  TEnvManager::~TEnvManager(this);
  JUMPOUT(0x20BD149A8);
}

_QWORD *THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C219E58;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::clear(a1);
  v2 = a1[1];
  if (v2)
    MEMORY[0x20BD14990](v2, 0x20C8093837F09);
  return a1;
}

_QWORD *THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  _QWORD *v5;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = v1[1];
      result = *(_QWORD **)(v4 + 8 * i);
      if (result)
      {
        do
        {
          v5 = (_QWORD *)*result;
          MEMORY[0x20BD149A8]();
          result = v5;
        }
        while (v5);
        v4 = v1[1];
        v2 = v1[2];
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  v1[3] = 0;
  return result;
}

void THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(_QWORD *a1)
{
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x20BD149A8);
}

_QWORD *THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C219E98;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::clear(a1);
  v2 = a1[1];
  if (v2)
    MEMORY[0x20BD14990](v2, 0x20C8093837F09);
  return a1;
}

void THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(_QWORD *a1)
{
  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x20BD149A8);
}

size_t THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find@<X0>(size_t result@<X0>, const __int32 **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  size_t v6;
  const __int32 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v6 = result;
    v7 = *a2;
    result = wcslen(*a2);
    v8 = 0;
    v9 = 4 * result;
    if (4 * result)
    {
      do
      {
        v10 = *(char *)v7;
        v7 = (const __int32 *)((char *)v7 + 1);
        v8 = 33 * v8 + v10;
        --v9;
      }
      while (v9);
    }
    v11 = v8 % v4;
    v12 = *(_QWORD *)(v6 + 8) + 8 * v11;
    while (1)
    {
      v12 = *(_QWORD *)v12;
      if (!v12)
        break;
      result = wcscmp(*(const __int32 **)(v12 + 8), *a2);
      if (!(_DWORD)result)
      {
        v13 = *(_QWORD *)(v6 + 8);
        v14 = v13 + 8 * v11;
        v15 = v13 + 8 * *(_QWORD *)(v6 + 16);
        *a3 = v14;
        a3[1] = v15;
        a3[2] = v12;
        return result;
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

_QWORD *THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::~THashBase(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C219E38;
  THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::clear(a1);
  v2 = a1[1];
  if (v2)
    MEMORY[0x20BD14990](v2, 0x20C8093837F09);
  return a1;
}

void THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::~THashBase(_QWORD *a1)
{
  THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::~THashBase(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t findPreviousVowel(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v4;
  __int32 *v5;
  BOOL v6;
  __int32 v7;

  LODWORD(v2) = a2;
  v4 = a2 - 1;
  if (a2 >= 1
    && wcschr((__int32 *)"a", *(_DWORD *)(a1 + 4 * a2))
    && wcschr((__int32 *)"i", *(_DWORD *)(a1 + 4 * v4)))
  {
    LODWORD(v2) = v4;
  }
  v5 = (__int32 *)(a1 + 4 * v2);
  do
  {
    v6 = __OFSUB__((_DWORD)v2, 1);
    v2 = (v2 - 1);
    if ((int)v2 < 0 != v6)
      return 0xFFFFFFFFLL;
    v7 = *--v5;
  }
  while (!wcschr(s_pszUnaccentedVowels, v7));
  if ((v2 + 1) < 2)
    return 0;
  if (wcschr((__int32 *)"i", *v5))
  {
    if (wcschr((__int32 *)"a", *(_DWORD *)(a1 + 4 * (v2 - 1))))
      return (v2 - 1);
    else
      return v2;
  }
  return v2;
}

std::vector<std::wstring> *__cdecl std::vector<std::wstring>::vector(std::vector<std::wstring> *this, std::vector<std::wstring>::size_type __n)
{
  std::vector<std::wstring>::pointer end;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::wstring>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::wstring>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_2097F4EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void TRegisterable<TLexicon>::~TRegisterable(_QWORD *a1)
{
  TRegisterable<TLexicon>::~TRegisterable(a1);
  JUMPOUT(0x20BD149A8);
}

void THashMap<wchar_t *,TWordBlock *,THash<wchar_t const*>,TWideCharEqualTo>::~THashMap(_QWORD *a1)
{
  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x20BD149A8);
}

void THashMap<wchar_t const*,TWord *,THash<wchar_t const*>,TWideCharEqualTo>::~THashMap(_QWORD *a1)
{
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t TRegisterable<TLexicon>::getRegistry()
{
  unsigned __int8 v0;
  _QWORD *v2;

  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    TRegisterable<TLexicon>::getRegistry(void)::s_registry = (uint64_t)v2;
  }
  return TRegisterable<TLexicon>::getRegistry(void)::s_registry;
}

void sub_2097F4FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::findNextPrime(uint64_t a1)
{
  unint64_t v1;
  double result;
  unint64_t v3;
  unint64_t v4;

  v1 = a1 | 1;
  result = sqrt((double)v1);
  v3 = (unint64_t)result;
  if ((unint64_t)result >= 4)
  {
    do
    {
      v4 = 3;
      while (v1 % v4)
      {
        v4 += 2;
        if (v4 >= v3)
          return result;
      }
      v1 += 2;
      result = sqrt((double)v1);
      v3 = (unint64_t)result;
    }
    while ((unint64_t)result > 3);
  }
  return result;
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v5;
  std::string *value;
  std::string *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  size_t v13;
  size_t v14;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(p_end_cap[-1].__value_, v13);
      v7 = (std::string *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v11)
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    v14 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::wstring>::~__split_buffer(&__v);
  }
}

void sub_2097F515C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(a2 - 2, v9);
        if ((_DWORD)result)
        {
          v20 = *v9;
          *v9 = *(a2 - 2);
          *(a2 - 2) = v20;
          v21 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9, v9 + 2, a2 - 2, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9, v9 + 2, v9 + 4, a2 - 2, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2, a3);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>((uint64_t)v9, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>((uint64_t)v9, a2, (uint64_t (**)(_OWORD *, _QWORD *))a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(&v9[2 * (v13 >> 1)], v9, a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9, &v9[2 * (v13 >> 1)], a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9 + 2, v15 - 2, a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9 + 4, &v9[2 * v14 + 2], a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v15 - 2, v15, &v9[2 * v14 + 2], a3);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(v9 - 2, v9) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(v9, a2, (uint64_t (**)(__int128 *, _QWORD *))a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(v9, a2, (uint64_t (**)(_QWORD *, __int128 *))a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9, v17, a3);
          v9 = v17 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v17 + 2, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 2;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,std::pair<wchar_t const*,wchar_t *>*>((uint64_t)v9, a2, a2, (unsigned int (**)(uint64_t, uint64_t))a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  if ((_OWORD *)result != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = (_QWORD *)result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v17 = *v10;
          v12 = v9;
          while (1)
          {
            v13 = (char *)v6 + v12;
            v14 = *(_QWORD *)((char *)v6 + v12 + 8);
            *((_QWORD *)v13 + 2) = *(_QWORD *)((char *)v6 + v12);
            *((_QWORD *)v13 + 3) = v14;
            if (!v12)
              break;
            v12 -= 16;
            result = (*a3)(&v17, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              v15 = (_QWORD *)((char *)v6 + v12 + 16);
              goto LABEL_10;
            }
          }
          v15 = v6;
LABEL_10:
          v16 = *((_QWORD *)&v17 + 1);
          *v15 = v17;
          v15[1] = v16;
        }
        v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD *))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  if ((_OWORD *)result != a2)
  {
    v15 = v3;
    v16 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = (_QWORD *)(result - 16);
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v14 = *v6;
          v11 = v9;
          do
          {
            v12 = v11[3];
            v11[4] = v11[2];
            v11[5] = v12;
            result = (*a3)(&v14, v11);
            v11 -= 2;
          }
          while ((result & 1) != 0);
          v13 = *((_QWORD *)&v14 + 1);
          v11[4] = v14;
          v11[5] = v13;
        }
        v7 = v6 + 1;
        v9 += 2;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v11 = a3 + 1;
      result = 1;
      v12 = a1 + 1;
LABEL_9:
      v15 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    if ((*a4)(a3, a2))
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v11 = a3 + 1;
      result = 2;
      v12 = a2 + 1;
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v15 = a2 + 1;
    v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    if ((*a4)(a2, a1))
    {
      v16 = *a1;
      *a1 = *a2;
      v12 = a1 + 1;
      *a2 = v16;
      result = 2;
LABEL_10:
      v19 = *v12;
      *v12 = *v15;
      *v15 = v19;
      return result;
    }
  }
  return 1;
}

_QWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(__int128 *, _QWORD *))
{
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v4 = a2;
  v12 = *(_OWORD *)a1;
  if (((*a3)(&v12, a2 - 2) & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 2;
    while (((*a3)(&v12, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 2;
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v12, v7);
      v7 = v6 + 2;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 -= 2;
    while (((*a3)(&v12, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *v6;
    *v6 = *v4;
    *v4 = v9;
    v10 = v6[1];
    v6[1] = v4[1];
    v4[1] = v10;
    do
      v6 += 2;
    while (!(*a3)(&v12, v6));
    do
      v4 -= 2;
    while (((*a3)(&v12, v4) & 1) != 0);
  }
  if (v6 - 2 != a1)
  {
    *a1 = *(v6 - 2);
    a1[1] = *(v6 - 1);
  }
  *((_OWORD *)v6 - 1) = v12;
  return v6;
}

_QWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD *, __int128 *))
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  __int128 v13;

  v6 = 0;
  v13 = *(_OWORD *)a1;
  do
    v6 += 2;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  v7 = &a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v7 >= a2)
        break;
      a2 -= 2;
    }
    while (((*a3)(a2, &v13) & 1) == 0);
  }
  else
  {
    do
      a2 -= 2;
    while (!(*a3)(a2, &v13));
  }
  v8 = &a1[v6];
  if (v7 < a2)
  {
    v9 = a2;
    do
    {
      v10 = *v8;
      *v8 = *v9;
      *v9 = v10;
      v11 = v8[1];
      v8[1] = v9[1];
      v9[1] = v11;
      do
        v8 += 2;
      while (((*a3)(v8, &v13) & 1) != 0);
      do
        v9 -= 2;
      while (!(*a3)(v9, &v13));
    }
    while (v8 < v9);
  }
  result = v8 - 2;
  if (v8 - 2 != a1)
  {
    *a1 = *(v8 - 2);
    a1[1] = *(v8 - 1);
  }
  *((_OWORD *)v8 - 1) = v13;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a1 + 4, a3);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v19 = *(_OWORD *)v11;
      v14 = v12;
      while (1)
      {
        v15 = (uint64_t *)((char *)a1 + v14);
        v16 = *(uint64_t *)((char *)a1 + v14 + 40);
        v15[6] = *(uint64_t *)((char *)a1 + v14 + 32);
        v15[7] = v16;
        if (v14 == -32)
          break;
        v14 -= 16;
        if (((*a3)((uint64_t *)&v19, v15 + 2) & 1) == 0)
        {
          v17 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      v18 = *((_QWORD *)&v19 + 1);
      *v17 = v19;
      v17[1] = v18;
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
          v20 = a1[1];
          a1[1] = a2[1];
          a2[1] = v20;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,std::pair<wchar_t const*,wchar_t *>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  if ((uint64_t *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (_OWORD *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if ((*a4)((uint64_t)v14, a1))
        {
          v15 = *v14;
          *v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          v16 = v14[1];
          v14[1] = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a4, v9, (_OWORD *)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      v18 = a2 - 2;
      do
      {
        v20 = *(_QWORD *)a1;
        v19 = *(_QWORD *)(a1 + 8);
        v21 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>((_QWORD *)a1, a4, v17);
        if (v18 == v21)
        {
          *v21 = v20;
          v21[1] = v19;
        }
        else
        {
          *v21 = *v18;
          v21[1] = v18[1];
          *v18 = v20;
          v18[1] = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, (uint64_t)(v21 + 2), (uint64_t (**)(_QWORD *, __int128 *))a4, ((uint64_t)v21 - a1 + 16) >> 4);
        }
        v18 -= 2;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v20 = v4;
    v21 = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v12 = ((uint64_t)a4 - result) >> 3;
      v13 = v12 + 1;
      v14 = (_QWORD *)(result + 16 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 2))
      {
        v14 += 2;
        v13 = v15;
      }
      result = ((uint64_t (*)(_QWORD *, _OWORD *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v19 = *v7;
        do
        {
          v16 = v14;
          *(_QWORD *)v7 = *v14;
          *((_QWORD *)v7 + 1) = v14[1];
          if (v9 < v13)
            break;
          v17 = (2 * v13) | 1;
          v14 = (_QWORD *)(v8 + 16 * v17);
          v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 16 * v17, v14 + 2))
            {
              v14 += 2;
              v17 = v18;
            }
          }
          result = ((uint64_t (*)(_QWORD *, __int128 *))*a2)(v14, &v19);
          v7 = v16;
          v13 = v17;
        }
        while (!(_DWORD)result);
        *v16 = v19;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(_QWORD *a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[2 * v6 + 2];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)((uint64_t)&a1[2 * v6 + 2], (uint64_t)&a1[2 * v6 + 4]))
    {
      v9 += 2;
      v10 = v11;
    }
    *a1 = *v9;
    a1[1] = v9[1];
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  double result;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v15 = v4;
    v16 = v5;
    v9 = v6 >> 1;
    v10 = (_QWORD *)(a1 + 16 * (v6 >> 1));
    v11 = (_OWORD *)(a2 - 16);
    if ((*a3)(v10, (__int128 *)(a2 - 16)))
    {
      v14 = *v11;
      do
      {
        v13 = v10;
        *(_QWORD *)v11 = *v10;
        *((_QWORD *)v11 + 1) = v10[1];
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (_QWORD *)(a1 + 16 * v9);
        v11 = v13;
      }
      while (((*a3)(v10, &v14) & 1) != 0);
      result = *(double *)&v14;
      *v13 = v14;
    }
  }
  return result;
}

void *std::__tree<std::__value_type<wchar_t const*,wchar_t const*>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,wchar_t const*>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,wchar_t const*>>>::__emplace_multi<std::pair<wchar_t *,wchar_t *>>(uint64_t **a1, _OWORD *a2)
{
  void *v4;
  uint64_t **leaf_high;
  uint64_t v7;

  v4 = operator new(0x30uLL);
  *((_OWORD *)v4 + 2) = *a2;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<wchar_t const*,wchar_t const*>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,wchar_t const*>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,wchar_t const*>>>::__find_leaf_high((uint64_t)a1, &v7, (const __int32 **)v4 + 4);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v7, leaf_high, (uint64_t *)v4);
  return v4;
}

void sub_2097F6380(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<wchar_t const*,wchar_t const*>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,wchar_t const*>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,wchar_t const*>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, const __int32 **a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if ((wcscmp(*a3, *(const __int32 **)(v4 + 32)) & 0x80000000) == 0)
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

_QWORD *std::vector<TWord const*>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2097F646C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void THashMap<TDecodeLinkMapWord::THistory,TDecodeLinkMapWord const*,THash<TDecodeLinkMapWord::THistory>,std::equal_to<TDecodeLinkMapWord::THistory>>::~THashMap(_QWORD *a1)
{
  THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::~THashBase(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::find@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    do
      v5 = 33 * v5 + *((char *)a2 + v4++);
    while (v4 != 32);
    v6 = v5 % v3;
    v7 = *(_QWORD *)(result + 8);
    v8 = (_QWORD *)(v7 + 8 * v6);
    v9 = v8;
    while (1)
    {
      v9 = (_QWORD *)*v9;
      if (!v9)
        break;
      result = v9[4];
      if (v9[1] == *a2 && v9[2] == a2[1] && v9[3] == a2[2] && result == a2[3])
      {
        *a3 = v8;
        a3[1] = v7 + 8 * v3;
        a3[2] = v9;
        return result;
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

uint64_t THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::resize(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t i;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t j;
  unint64_t v15;

  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::findNextPrime(a2);
  v4 = v3;
  v5 = 8 * v3;
  v6 = (_QWORD *)operator new[]();
  v7 = v6;
  if (v4)
    bzero(v6, v5);
  result = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v11 = *(_QWORD **)(result + 8 * i);
      if (v11)
      {
        do
        {
          v12 = 0;
          v13 = (_QWORD *)*v11;
          for (j = 8; j != 40; ++j)
            v12 = 33 * v12 + *((char *)v11 + j);
          v15 = v12 % v4;
          *v11 = v7[v15];
          v7[v15] = v11;
          v11 = v13;
        }
        while (v13);
      }
    }
  }
  if (result)
    result = MEMORY[0x20BD14990](result, 0x20C8093837F09);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t **std::__tree<std::__value_type<wchar_t const*,wchar_t const*>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,wchar_t const*>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,wchar_t const*>>>::__equal_range_multi<wchar_t const*>(uint64_t a1, const __int32 **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v5;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return (uint64_t **)v2;
  while (1)
  {
    if (wcscmp(*a2, (const __int32 *)v3[4]) < 0)
    {
      v2 = v3;
      goto LABEL_6;
    }
    if ((wcscmp((const __int32 *)v3[4], *a2) & 0x80000000) == 0)
      break;
    ++v3;
LABEL_6:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return (uint64_t **)v2;
  }
  v7 = (uint64_t **)*v3;
  v5 = (uint64_t **)v3;
  if (*v3)
  {
    v5 = (uint64_t **)v3;
    do
    {
      v8 = wcscmp((const __int32 *)v7[4], *a2);
      v9 = v7 + 1;
      if (v8 >= 0)
      {
        v9 = v7;
        v5 = v7;
      }
      v7 = (uint64_t **)*v9;
    }
    while (*v9);
  }
  v10 = v3[1];
  if (v10)
  {
    do
    {
      v11 = wcscmp(*a2, *(const __int32 **)(v10 + 32));
      v12 = (uint64_t *)(v10 + 8);
      if (v11 < 0)
        v12 = (uint64_t *)v10;
      v10 = *v12;
    }
    while (*v12);
  }
  return v5;
}

void OUTLINED_FUNCTION_0_1()
{
  JUMPOUT(0x20BD149A8);
}

uint64_t OUTLINED_FUNCTION_1_1(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t readObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char v6;
  unsigned __int8 v8;
  unsigned __int8 v9;

  v9 = 0;
  readObject(a1, &v9, a3);
  if (v9 == 2)
    v6 = 2;
  else
    v6 = 1;
  *(_BYTE *)a2 = v6;
  if (*(_BYTE *)(a1 + 35))
  {
    v8 = 0;
    readObject(a1, &v8, a3);
  }
  return readObject(a1, (unsigned __int16 *)(a2 + 2), a3);
}

{
  readObject(a1, (unsigned __int16 *)a2, a3);
  return readObject(a1, (_DWORD *)(a2 + 4), a3);
}

uLong StateMgr::computeOneStateIdNameChecksum(StateMgr *this, unsigned int a2)
{
  uLong v4;
  uint64_t v5;
  const char *v6;
  uInt v7;
  unsigned int v8;
  unsigned int v10;

  v10 = a2;
  v4 = computeCRC32(0, 0, 0);
  v5 = *((_QWORD *)this + 12) + 16 * a2;
  if (*(_DWORD *)(v5 + 8))
    v6 = *(const char **)v5;
  else
    v6 = (const char *)&unk_209A608EE;
  v7 = strlen(v6);
  v8 = computeCRC32(v4, (const unsigned __int8 *)v6, v7);
  return computeCRC32(v8, &v10, 1u);
}

uLong StateMgr::computeStateIdNameChecksum(uLong this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t i;

  *(_DWORD *)(this + 732) = 0;
  v1 = *(unsigned int *)(this + 720);
  if (v1 >= 2)
  {
    v2 = this;
    for (i = 1; i < v1; ++i)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 544) + i))
      {
        if (*(_BYTE *)(*(_QWORD *)(v2 + 560) + i))
        {
          this = StateMgr::computeOneStateIdNameChecksum((StateMgr *)v2, i);
          *(_DWORD *)(v2 + 732) ^= this;
          v1 = *(unsigned int *)(v2 + 720);
        }
      }
    }
  }
  return this;
}

void StateMgr::StateMgr(StateMgr *this, Voc *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  void *v39[2];

  v37 = (char *)this + 48;
  v38 = (char *)this + 16;
  v35 = (char *)this + 80;
  v36 = (char *)this + 64;
  v33 = (char *)this + 112;
  v34 = (char *)this + 96;
  v26 = (char *)this + 176;
  v24 = (char *)this + 192;
  v23 = (char *)this + 208;
  v22 = (char *)this + 224;
  v25 = (char *)this + 240;
  v31 = (char *)this + 256;
  v32 = (char *)this + 128;
  v29 = (char *)this + 272;
  v30 = (char *)this + 144;
  v27 = (char *)this + 288;
  v28 = (char *)this + 160;
  v20 = (char *)this + 416;
  v21 = (char *)this + 400;
  v19 = (char *)this + 432;
  v4 = (char *)this + 448;
  v5 = (char *)this + 496;
  v6 = (char *)this + 512;
  v7 = (char *)this + 528;
  v8 = (char *)this + 576;
  v9 = (char *)this + 592;
  v10 = (char *)this + 608;
  *((_OWORD *)this + 44) = 0u;
  v11 = (_OWORD *)((char *)this + 664);
  bzero(this, 0x290uLL);
  *v11 = 0u;
  v11[1] = 0u;
  *((_QWORD *)this + 92) = a2;
  *((_QWORD *)this + 93) = *((_QWORD *)a2 + 6);
  v12 = MemChunkAlloc(0x110uLL, 0);
  *((_QWORD *)this + 94) = EnvMgr::EnvMgr((EnvMgr *)v12, 2u);
  v13 = MemChunkAlloc(0x110uLL, 0);
  *((_QWORD *)this + 95) = EnvMgr::EnvMgr((EnvMgr *)v13, 2u);
  *((_BYTE *)this + 656) = 1;
  *((_OWORD *)this + 45) = 0u;
  *((_BYTE *)this + 696) = 1;
  if (!*((_DWORD *)this + 3))
    DgnArray<DSMLocalRecord>::reallocElts((uint64_t)this, 1, 0);
  if (!*((_DWORD *)this + 7))
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v38, 1, 0);
  if (!*((_DWORD *)this + 11))
  {
    v39[0] = 0;
    *((_DWORD *)this + 11) = realloc_array(*((_QWORD **)this + 4), v39, 1uLL, *((unsigned int *)this + 10), *((unsigned int *)this + 10), 1);
    *((void **)this + 4) = v39[0];
  }
  if (!*((_DWORD *)this + 15))
    DgnPrimArray<short>::reallocElts((uint64_t)v37, 1, 0);
  if (!*((_DWORD *)this + 19))
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v36, 1, 0);
  if (!*((_DWORD *)this + 23))
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v35, 1, 0);
  if (!*((_DWORD *)this + 27))
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v34, 1, 0);
  if (!*((_DWORD *)this + 31))
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v33, 1, 0);
  if (!*((_DWORD *)this + 35))
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v32, 1, 0);
  if (!*((_DWORD *)this + 39))
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v30, 1, 0);
  if (!*((_DWORD *)this + 43))
    DgnPrimArray<short>::reallocElts((uint64_t)v28, 1, 0);
  if (!*((_DWORD *)this + 47))
    DgnPrimArray<short>::reallocElts((uint64_t)v26, 1, 0);
  if (!*((_DWORD *)this + 51))
    DgnPrimArray<short>::reallocElts((uint64_t)v24, 1, 0);
  if (!*((_DWORD *)this + 55))
    DgnPrimArray<short>::reallocElts((uint64_t)v23, 1, 0);
  if (!*((_DWORD *)this + 59))
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v22, 1, 0);
  if (!*((_DWORD *)this + 63))
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v25, 1, 0);
  if (!*((_DWORD *)this + 67))
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v31, 1, 0);
  if (!*((_DWORD *)this + 71))
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v29, 1, 0);
  if (!*((_DWORD *)this + 75))
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v27, 1, 0);
  if (!*((_DWORD *)this + 79))
  {
    v39[0] = 0;
    *((_DWORD *)this + 79) = realloc_array(*((_QWORD **)this + 38), v39, 1uLL, *((unsigned int *)this + 78), *((unsigned int *)this + 78), 1);
    *((void **)this + 38) = v39[0];
  }
  if (!*((_DWORD *)this + 83))
  {
    v39[0] = 0;
    *((_DWORD *)this + 83) = realloc_array(*((_QWORD **)this + 40), v39, 1uLL, *((unsigned int *)this + 82), *((unsigned int *)this + 82), 1);
    *((void **)this + 40) = v39[0];
  }
  if (!*((_DWORD *)this + 87))
  {
    v39[0] = 0;
    *((_DWORD *)this + 87) = realloc_array(*((_QWORD **)this + 42), v39, 1uLL, *((unsigned int *)this + 86), *((unsigned int *)this + 86), 1);
    *((void **)this + 42) = v39[0];
  }
  if (!*((_DWORD *)this + 91))
  {
    v39[0] = 0;
    *((_DWORD *)this + 91) = realloc_array(*((_QWORD **)this + 44), v39, 1uLL, *((unsigned int *)this + 90), *((unsigned int *)this + 90), 1);
    *((void **)this + 44) = v39[0];
  }
  if (!*((_DWORD *)this + 95))
  {
    v39[0] = 0;
    *((_DWORD *)this + 95) = realloc_array(*((_QWORD **)this + 46), v39, 1uLL, *((unsigned int *)this + 94), *((unsigned int *)this + 94), 1);
    *((void **)this + 46) = v39[0];
  }
  if (!*((_DWORD *)this + 99))
  {
    v39[0] = 0;
    *((_DWORD *)this + 99) = realloc_array(*((_QWORD **)this + 48), v39, 1uLL, *((unsigned int *)this + 98), *((unsigned int *)this + 98), 1);
    *((void **)this + 48) = v39[0];
  }
  if (!*((_DWORD *)this + 103))
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v21, 1, 0);
  if (!*((_DWORD *)this + 107))
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v20, 1, 0);
  if (!*((_DWORD *)this + 111))
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v19, 1, 0);
  if (!*((_DWORD *)this + 115))
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v4, 1, 0);
  if (!*((_DWORD *)this + 131))
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v6, 1, 0);
  if (!*((_DWORD *)this + 123))
  {
    v39[0] = 0;
    *((_DWORD *)this + 123) = realloc_array(*((_QWORD **)this + 60), v39, 1uLL, *((unsigned int *)this + 122), *((unsigned int *)this + 122), 1);
    *((void **)this + 60) = v39[0];
  }
  if (!*((_DWORD *)this + 151))
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v9, 1, 0);
  if (!*((_DWORD *)this + 119))
  {
    v39[0] = 0;
    *((_DWORD *)this + 119) = realloc_array(*((_QWORD **)this + 58), v39, 1uLL, *((unsigned int *)this + 118), *((unsigned int *)this + 118), 1);
    *((void **)this + 58) = v39[0];
  }
  if (!*((_DWORD *)this + 127))
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v5, 1, 0);
  if (!*((_DWORD *)this + 139))
  {
    v39[0] = 0;
    *((_DWORD *)this + 139) = realloc_array(*((_QWORD **)this + 68), v39, 1uLL, *((unsigned int *)this + 138), *((unsigned int *)this + 138), 1);
    *((void **)this + 68) = v39[0];
  }
  if (!*((_DWORD *)this + 143))
  {
    v39[0] = 0;
    *((_DWORD *)this + 143) = realloc_array(*((_QWORD **)this + 70), v39, 1uLL, *((unsigned int *)this + 142), *((unsigned int *)this + 142), 1);
    *((void **)this + 70) = v39[0];
  }
  if (!*((_DWORD *)this + 147))
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v8, 1, 0);
  if (!*((_DWORD *)this + 155))
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v10, 1, 0);
  if (!*((_DWORD *)this + 159))
  {
    v39[0] = 0;
    *((_DWORD *)this + 159) = realloc_array(*((_QWORD **)this + 78), v39, 1uLL, *((unsigned int *)this + 158), *((unsigned int *)this + 158), 1);
    *((void **)this + 78) = v39[0];
  }
  if (!*((_DWORD *)this + 169))
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v11, 1, 0);
  if (!*((_DWORD *)this + 135))
    DgnPrimArray<short>::reallocElts((uint64_t)v7, 1, 0);
  LOWORD(v39[0]) = 0;
  StateMgr::newState(this, 0, (const unsigned __int16 *)v39, v14, v15, v16, v17, v18);
  **((_BYTE **)this + 68) = 0;
  **((_BYTE **)this + 70) = 0;
  *((_DWORD *)this + 183) = 0;
}

void sub_2097F7014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 704);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 680);
  DgnArray<PhnIndexSet>::releaseAll(v29);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 640);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 624);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v36);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v35);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v34);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 560);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 544);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v33);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v32);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 480);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 464);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a17);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 384);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 368);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 352);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 336);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 320);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 304);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a23);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a25);
  DgnArray<DgnArray<ParseToken>>::releaseAll(a27);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a21);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a19);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a20);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a22);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a24);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a26);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a28);
  DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)(v37 - 144));
  DgnArray<DgnString>::releaseAll(*(_QWORD *)(v37 - 136));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(*(_QWORD *)(v37 - 128));
  DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)(v37 - 120));
  DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)(v37 - 112));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 32);
  DgnIOwnArray<BitArray *>::releaseAll(*(_QWORD *)(v37 - 104));
  DgnArray<DgnCollArray<unsigned int,WordList>>::releaseAll(v28);
  _Unwind_Resume(a1);
}

uint64_t StateMgr::newState(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v9;

  v9 = 0;
  return StateMgr::newState(this, a2, &v9, a4, a5, a6, a7, a8);
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  _QWORD v25[2];

  if (*((_DWORD *)this + 182) <= a3)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1552, (uint64_t)"voc/statemgr", 22, (uint64_t)"%u %u", a7, a8, *((_DWORD *)this + 180));
  StateMgr::verifyStateFull(this, a2, 1, 1, a5, a6, a7, a8);
  v13 = *((unsigned int *)this + 178);
  if (!(_DWORD)v13)
    goto LABEL_9;
  v14 = (int *)*((_QWORD *)this + 88);
  v15 = 0xFFFFFFFFLL;
  while (1)
  {
    v16 = *v14++;
    if (v16 == (_DWORD)a3)
      break;
    --v15;
    if (!--v13)
      goto LABEL_9;
  }
  if (!v15)
LABEL_9:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1558, (uint64_t)"voc/statemgr", 29, (uint64_t)"%u", v11, v12, a3);
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v25, *(_DWORD *)(*((_QWORD *)this + 92) + 184));
  *(_DWORD *)v25[0] |= 1u;
  v17 = *((_DWORD *)this + 178);
  if (v17)
  {
    v18 = *((unsigned int *)this + 178);
    v19 = (_DWORD *)*((_QWORD *)this + 88);
    while (*v19 != (_DWORD)a3)
    {
      ++v19;
      if (!--v18)
        goto LABEL_16;
    }
    v20 = v17 - 1;
    *v19 = *(_DWORD *)(*((_QWORD *)this + 88) + 4 * v20);
    *((_DWORD *)this + 178) = v20;
  }
LABEL_16:
  *(_BYTE *)(*((_QWORD *)this + 68) + a3) = 1;
  *(_BYTE *)(*((_QWORD *)this + 70) + a3) = 1;
  BitArray::operator=((int **)(*((_QWORD *)this + 83) + 16 * a3), (uint64_t)v25);
  v21 = *((_QWORD *)this + 16) + 16 * a2;
  v23 = (unsigned int *)(v21 + 8);
  v22 = *(_DWORD *)(v21 + 8);
  if (v22 == *(_DWORD *)(v21 + 12))
  {
    DgnPrimArray<unsigned int>::reallocElts(*((_QWORD *)this + 16) + 16 * a2, 1, 1);
    v22 = *v23;
  }
  *(_DWORD *)(*(_QWORD *)v21 + 4 * v22) = a3;
  ++*v23;
  *(_DWORD *)(*((_QWORD *)this + 14) + 4 * a3) = a2;
  *(_WORD *)(*((_QWORD *)this + 6) + 2 * a3) = 0;
  *(_DWORD *)(*((_QWORD *)this + 8) + 4 * a3) = 0;
  *((_DWORD *)this + 183) ^= StateMgr::computeOneStateIdNameChecksum(this, a3);
  BitArray::~BitArray((BitArray *)v25);
  return a3;
}

void StateMgr::~StateMgr(EnvMgr **this)
{
  DgnDelete<EnvMgr>(this[94]);
  this[94] = 0;
  DgnDelete<EnvMgr>(this[95]);
  this[95] = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 88));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 85));
  DgnArray<PhnIndexSet>::releaseAll((uint64_t)(this + 83));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 80));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 78));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 76));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 74));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 72));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 70));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 68));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 66));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 64));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 62));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 60));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 58));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 56));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 54));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 52));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 50));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 48));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 46));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 44));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 42));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 40));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 38));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 36));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 34));
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)(this + 32));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 30));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 28));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 26));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 24));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 22));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 20));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 18));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 16));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 14));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 12));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 10));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 8));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 6));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 4));
  DgnIOwnArray<BitArray *>::releaseAll((uint64_t)(this + 2));
  DgnArray<DgnCollArray<unsigned int,WordList>>::releaseAll((uint64_t)this);
}

void StateMgr::addPrimitiveBegPhonesArray(_QWORD *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[2];

  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v11, *(_DWORD *)(a1[92] + 184));
  v6 = v11[0];
  *(_DWORD *)v11[0] |= 1u;
  if (*((_DWORD *)a3 + 2))
  {
    v7 = 0;
    v8 = *a3;
    v9 = *(_QWORD *)(a1[93] + 592);
    do
    {
      v10 = *(unsigned __int16 *)(v9 + 2 * *(unsigned int *)(v8 + 4 * v7));
      *(_DWORD *)(v6 + ((v10 >> 3) & 0x1FFC)) |= 1 << v10;
      ++v7;
    }
    while (v7 < *((unsigned int *)a3 + 2));
  }
  BitArray::inplaceOrSameSize((_DWORD **)(a1[83] + 16 * a2), (const BitArray *)v11);
  BitArray::~BitArray((BitArray *)v11);
}

void sub_2097F74A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BitArray::~BitArray((BitArray *)&a9);
  _Unwind_Resume(a1);
}

void StateMgr::addPrimitiveBegPhones(StateMgr *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v8, *(_DWORD *)(*((_QWORD *)this + 92) + 184));
  v6 = v8[0];
  *(_DWORD *)v8[0] |= 1u;
  v7 = *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 93) + 592) + 2 * a3);
  *(_DWORD *)(v6 + ((v7 >> 3) & 0x1FFC)) |= 1 << v7;
  BitArray::inplaceOrSameSize((_DWORD **)(*((_QWORD *)this + 83) + 16 * a2), (const BitArray *)v8);
  BitArray::~BitArray((BitArray *)v8);
}

void sub_2097F754C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BitArray::~BitArray((BitArray *)&a9);
  _Unwind_Resume(a1);
}

void StateMgr::recomputePrimitiveBegPhones(StateMgr *this, unsigned int a2)
{
  _DWORD *v4;
  _BYTE v5[16];

  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v5, *(_DWORD *)(*((_QWORD *)this + 92) + 184));
  BitArray::operator=((int **)(*((_QWORD *)this + 83) + 16 * a2), (uint64_t)v5);
  v4 = *(_DWORD **)(*((_QWORD *)this + 83) + 16 * a2);
  *v4 |= 1u;
  StateMgr::addPrimitiveBegPhonesArray(this, a2, (uint64_t *)(*(_QWORD *)this + 80 * a2 + 8));
  BitArray::~BitArray((BitArray *)v5);
}

void sub_2097F75E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BitArray::~BitArray((BitArray *)&a9);
  _Unwind_Resume(a1);
}

void StateMgr::recomputeAllPrimitiveBegPhones(StateMgr *this)
{
  unint64_t v1;
  unint64_t i;

  v1 = *((unsigned int *)this + 180);
  if (v1 >= 2)
  {
    for (i = 1; i < v1; ++i)
    {
      if (*(_BYTE *)(*((_QWORD *)this + 68) + i))
      {
        StateMgr::recomputePrimitiveBegPhones(this, i);
        v1 = *((unsigned int *)this + 180);
      }
    }
  }
}

uint64_t StateMgr::declarePhnIndexSetsInitialized(uint64_t this)
{
  *(_BYTE *)(this + 656) = 1;
  return this;
}

BOOL StateMgr::isPrecedingNonAcousticWordForState(StateMgr *this, int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  int *v5;
  uint64_t i;
  int v7;

  v3 = *(_DWORD *)(*((_QWORD *)this + 64) + 4 * a3);
  if (!v3)
    return 0;
  v4 = *(unsigned int *)(*(_QWORD *)this + 80 * v3 + 16);
  if (!(_DWORD)v4)
    return 0;
  v5 = *(int **)(*(_QWORD *)this + 80 * v3 + 8);
  for (i = 0xFFFFFFFFLL; ; --i)
  {
    v7 = *v5++;
    if (v7 == a2)
      break;
    if (!--v4)
      return 0;
  }
  return i != 0;
}

uint64_t StateMgr::isValidPrecedingNonAcousticWordStateForUpgrade(WordList **this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  int v27;
  unint64_t v28;
  unsigned int v29;

  StateMgr::verifyState((StateMgr *)this, a2, a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)this[64] + a2))
    return 0;
  StateMgr::verifyStateFull((StateMgr *)this, a2, 1, 0, v10, v11, v12, v13);
  result = 0;
  if (!*((_DWORD *)this[28] + 4 * a2 + 2))
  {
    StateMgr::verifyStateFull((StateMgr *)this, a2, 1, 0, v15, v16, v17, v18);
    result = 0;
    if (!*((_DWORD *)this[76] + 4 * a2 + 2))
    {
      v25 = (uint64_t)*this + 80 * a2;
      v27 = *(_DWORD *)(v25 + 16);
      v26 = (unsigned int *)(v25 + 16);
      if (!v27)
        return 0;
      v28 = 0;
      do
      {
        v29 = *(_DWORD *)(*((_QWORD *)v26 - 1) + 4 * v28);
        WordList::verifyVisible(this[93], v29, v19, v20, v21, v22, v23, v24);
        result = WordList::isGuessedWordByOptionalTag(this[93], v29);
        if ((result & 1) == 0)
          break;
        ++v28;
      }
      while (v28 < *v26);
    }
  }
  return result;
}

void StateMgr::verifyState(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 180) <= a2 || !*(_BYTE *)(*((_QWORD *)this + 68) + a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1326, (uint64_t)"voc/statemgr", 1, (uint64_t)"%u", a7, a8, a2);
}

uint64_t StateMgr::getStateTransition(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  return *((_QWORD *)this + 28) + 16 * a2;
}

uint64_t StateMgr::resetPrecedingNonAcousticWordStates(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;

  v1 = this;
  v2 = *(_DWORD *)(this + 720);
  v3 = *(_DWORD *)(this + 524);
  v4 = v2;
  if (v2 > v3)
  {
    this = DgnPrimArray<unsigned int>::reallocElts(this + 512, v2 - v3, 0);
    v4 = *(_DWORD *)(v1 + 720);
  }
  *(_DWORD *)(v1 + 520) = v2;
  v5 = v4;
  if (*(_DWORD *)(v1 + 492) < v4)
  {
    v17 = 0;
    this = realloc_array(*(_QWORD **)(v1 + 480), &v17, v4, *(unsigned int *)(v1 + 488), *(unsigned int *)(v1 + 488), 1);
    *(_DWORD *)(v1 + 492) = this;
    *(_QWORD *)(v1 + 480) = v17;
    v5 = *(_DWORD *)(v1 + 720);
  }
  *(_DWORD *)(v1 + 488) = v4;
  v6 = (_QWORD *)(v1 + 592);
  v7 = *(_DWORD *)(v1 + 604);
  if (v5 > v7)
    this = DgnArray<DgnPrimArray<double>>::reallocElts(v1 + 592, v5 - v7, 0);
  v8 = *(unsigned int *)(v1 + 600);
  if (v8 <= v5)
  {
    if (v8 < v5)
    {
      v11 = v5 - v8;
      v12 = 16 * v8;
      do
      {
        v13 = (_QWORD *)(*v6 + v12);
        *v13 = 0;
        v13[1] = 0;
        v12 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v5)
  {
    v9 = (int)v8;
    v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      this = DgnPrimArray<unsigned int>::~DgnPrimArray(*v6 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v5);
  }
  *(_DWORD *)(v1 + 600) = v5;
  if (*(_DWORD *)(v1 + 720))
  {
    v14 = 0;
    v15 = 0;
    do
    {
      *(_DWORD *)(*(_QWORD *)(v1 + 512) + 4 * v15) = 0;
      *(_BYTE *)(*(_QWORD *)(v1 + 480) + v15) = 0;
      v16 = *(_QWORD *)(v1 + 592);
      this = *(_QWORD *)(v16 + v14);
      if (this)
      {
        this = MemChunkFree((_QWORD *)this, 0);
        *(_QWORD *)(v16 + v14) = 0;
      }
      *(_QWORD *)(v16 + v14 + 8) = 0;
      ++v15;
      v14 += 16;
    }
    while (v15 < *(unsigned int *)(v1 + 720));
  }
  return this;
}

StateMgr *StateMgr::upgradePrecedingNonAcousticWordsAllowed(StateMgr *result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  StateMgr *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  unsigned int Handle;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t i;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 v35;

  if (*(_DWORD *)(*((_QWORD *)result + 93) + 516) >= 0x3Eu)
  {
    v9 = a2[2];
    if (v9 >= 2)
    {
      v10 = result;
      v11 = (unsigned __int8 *)(*(_QWORD *)a2 + 1);
      v12 = v9 - 1;
      while (1)
      {
        v13 = *v11++;
        if (v13 == 1)
          break;
        if (!--v12)
          return result;
      }
      Handle = StateMgr::getHandle(result, "GuessedWords", 0, a4, a5, a6, a7, a8);
      v33 = 0;
      v34 = 0;
      if (!Handle
        || (v21 = Handle,
            (StateMgr::isValidPrecedingNonAcousticWordStateForUpgrade((WordList **)v10, Handle, v15, v16, v17, v18, v19, v20) & 1) == 0))
      {
        WordList::getAllGuessedWordsByOptionalTag(*((_QWORD *)v10 + 93), (uint64_t)&v33);
        if (!(_DWORD)v34)
          return (StateMgr *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
        v35 = 0;
        v21 = StateMgr::newState(v10, 0, &v35, v22, v23, v24, v25, v26);
        StateMgr::addWordIdArrayNoPhones(v10, v21, (uint64_t)&v33, 1, v27, v28, v29, v30);
      }
      v31 = a2[2];
      if (v31 >= 2)
      {
        for (i = 1; i < v31; ++i)
        {
          if (v21 != i && *(_BYTE *)(*(_QWORD *)a2 + i) == 1)
          {
            *(_DWORD *)(*((_QWORD *)v10 + 64) + 4 * i) = v21;
            StateMgr::addPrecedingNonAcousticWordStateRef((unint64_t)v10, v21, i);
            v31 = a2[2];
          }
        }
      }
      return (StateMgr *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
    }
  }
  return result;
}

void sub_2097F7AF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t StateMgr::getHandle(StateMgr *this, const char *__s2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  void *v19;
  const char *v20;

  v8 = a3;
  if ((_DWORD)a3)
    StateMgr::verifyVisible(this, a3, a3, a4, a5, a6, a7, a8);
  v11 = *((_QWORD *)this + 16);
  v12 = *(unsigned int *)(v11 + 16 * v8 + 8);
  if (!(_DWORD)v12)
    return 0;
  v13 = *(unsigned int **)(v11 + 16 * v8);
  v14 = *((_QWORD *)this + 12);
  while (1)
  {
    v16 = *v13++;
    v15 = v16;
    v17 = v14 + 16 * v16;
    v18 = *(_DWORD *)(v17 + 8);
    v19 = *(void **)v17;
    v20 = (const char *)(v18 ? v19 : &unk_209A608EE);
    if (*v20 && !strcmp(v20, __s2))
      break;
    if (!--v12)
      return 0;
  }
  return v15;
}

uint64_t StateMgr::addWordIdArrayNoPhones(StateMgr *a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BitArray *v17;
  unsigned int v18;
  uint64_t result;

  if (*(_DWORD *)(a3 + 8))
  {
    v12 = 0;
    v13 = a2;
    do
    {
      v14 = *(unsigned int *)(*(_QWORD *)a3 + 4 * v12);
      if (StateMgr::isWordIdInState(a1, a2, *(_DWORD *)(*(_QWORD *)a3 + 4 * v12), a4, a5, a6, a7, a8))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2046, (uint64_t)"voc/statemgr", 3, (uint64_t)"%u %u", v15, v16, v14);
      WordList::addIncludingStateRef(*((_QWORD *)a1 + 93), v14);
      v17 = *(BitArray **)(*((_QWORD *)a1 + 2) + 8 * a2);
      if (v17)
      {
        v18 = *((_DWORD *)v17 + 2);
        if (v18 <= v14)
        {
          BitArray::addSize(v17, v14 + 1 - v18);
          BitArray::clearRange(*(BitArray **)(*((_QWORD *)a1 + 2) + 8 * a2), v18, v14 + 1);
          v17 = *(BitArray **)(*((_QWORD *)a1 + 2) + 8 * a2);
        }
        *(_DWORD *)(*(_QWORD *)v17 + ((v14 >> 3) & 0x1FFFFFFC)) |= 1 << v14;
      }
      ++v12;
    }
    while (v12 < *(unsigned int *)(a3 + 8));
  }
  else
  {
    v13 = a2;
  }
  result = DgnCollArray<unsigned int,WordList>::addArray(*(_QWORD *)a1 + 80 * v13, a3);
  if (!*(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * v13)
    && *(_DWORD *)(*(_QWORD *)a1 + 80 * v13 + 16) >= 0x1F4u)
  {
    return StateMgr::getBitWords(a1, a2);
  }
  return result;
}

unint64_t StateMgr::addPrecedingNonAcousticWordStateRef(unint64_t this, unsigned int a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;

  v4 = *(_QWORD *)(this + 592) + 16 * a2;
  v6 = (unsigned int *)(v4 + 8);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5 == *(_DWORD *)(v4 + 12))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(*(_QWORD *)(this + 592) + 16 * a2, 1, 1);
    v5 = *v6;
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v5) = a3;
  ++*v6;
  return this;
}

uint64_t StateMgr::loadStateMgr(StateMgr *this, DFile *a2, DFileChecksums *a3, int a4, unsigned int a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t MrecHeader;
  uint64_t v14;
  uint64_t v15;
  DgnStream *v16;
  int v17;
  BOOL v18;
  int v19;
  char v20;
  int v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  _WORD *v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  _WORD *v54;
  __int16 *v55;
  __int16 v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  _WORD *v72;
  __int16 *v73;
  __int16 v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;
  uint64_t v91;
  int *v92;
  int v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  uint64_t v110;
  int *v111;
  int v112;
  uint64_t CurrentSubDirComponents;
  unint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  BitArray *v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  _WORD *v164;
  _WORD *v165;
  _WORD *v166;
  uint64_t v167;
  _WORD *v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  char *v172;
  int v173;
  DFileChecksums *v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  unsigned __int16 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD v192[2];
  unsigned int v193;
  unsigned int v194[4];

  *((_BYTE *)this + 656) = 0;
  result = DFile::subFileExists((uint64_t)a2, 0x59u);
  if (!(_DWORD)result)
    return result;
  *((_QWORD *)this + 92) = *(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * a5);
  if (a4)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 746, (uint64_t)"voc/statemgr", 19, (uint64_t)"%s", v11, v12, (char)&unk_209A608EE);
  *(_QWORD *)v194 = 0;
  MrecHeader = OpenAndReadMrecHeader((uint64_t)a2, 0x59u, 1, "MRSTA!? ", &v194[1], v194);
  v16 = (DgnStream *)MrecHeader;
  *(_BYTE *)(MrecHeader + 35) = 0;
  v17 = v194[0];
  v18 = v194[1] == 19 && v194[0] == 38;
  v19 = !v18;
  v176 = v19;
  v174 = a3;
  if (v18)
  {
    v175 = 0;
    v20 = 0;
    v173 = 1;
    *(_BYTE *)(MrecHeader + 35) = 1;
    v21 = 19;
    v17 = 38;
    goto LABEL_20;
  }
  switch(*(_QWORD *)v194)
  {
    case 0x1400000027:
      v175 = 0;
      v20 = 0;
      v173 = 1;
      *(_BYTE *)(MrecHeader + 35) = 1;
      v21 = 20;
      goto LABEL_20;
    case 0x1600000028:
      v20 = 0;
      v175 = 1;
      *(_BYTE *)(MrecHeader + 35) = 1;
      v21 = 22;
LABEL_19:
      v173 = 1;
      goto LABEL_20;
    case 0x1700000029:
    case 0x170000002ALL:
      v175 = 1;
      *(_BYTE *)(MrecHeader + 35) = 1;
      v21 = 23;
      v20 = 1;
      goto LABEL_19;
    case 0x180000002BLL:
      v173 = 0;
      v175 = 1;
      *(_BYTE *)(MrecHeader + 35) = 1;
      v21 = 24;
      break;
    default:
      if (*((_DWORD *)a2 + 6))
        v172 = (char *)*((_QWORD *)a2 + 2);
      else
        v172 = (char *)&unk_209A608EE;
      MrecHeaderCheckVersions(v172, "MRSTA!? ", v194[1], v194[0], 0x18u, 0x2Cu);
      v173 = 0;
      v17 = v194[0];
      v21 = v194[1];
      v175 = 1;
      break;
  }
  v20 = 1;
LABEL_20:
  MrecHeaderCheckLatestVersionIfShared(a2, "MRSTA!? ", v21, v17, 24, 44, v14, v15);
  v193 = 0;
  v192[0] = 0;
  v192[1] = 0;
  v190 = 0;
  v191 = 0;
  v188 = 0;
  v189 = 0;
  v186 = 0;
  v187 = 0;
  v184 = 0;
  v185 = 0;
  readObject<DgnCollArray<unsigned int,WordList>>(v16, (uint64_t)this, &v193);
  readObject<unsigned char>(v16, (uint64_t)this + 32, &v193);
  if (!*((_BYTE *)v16 + 35) || (readObject<RuleSpec>((uint64_t)v16, (uint64_t)&v190, &v193), !*((_BYTE *)v16 + 35)))
    readObject<unsigned short>(v16, (uint64_t)this + 48, &v193);
  readObject<unsigned int>(v16, (uint64_t)this + 64, &v193);
  if (!*((_BYTE *)v16 + 35)
    || (readObject<DgnArray<RuleSpec>>((uint64_t)v16, (uint64_t)&v188, &v193), !*((_BYTE *)v16 + 35)))
  {
    readObject<DgnPrimArray<unsigned short>>(v16, (uint64_t)this + 80, &v193);
  }
  readObject<DgnString>(v16, (uint64_t)this + 96, &v193);
  readObject<unsigned int>(v16, (uint64_t)this + 112, &v193);
  readObject<DgnPrimArray<unsigned int>>(v16, (uint64_t)this + 128, &v193);
  readObject<DgnPrimArray<unsigned short>>(v16, (uint64_t)this + 144, &v193);
  if (!*((_BYTE *)v16 + 35)
    || (readObject<DgnArray<StateSpec>>((uint64_t)v16, (uint64_t)&v186, &v193), !*((_BYTE *)v16 + 35)))
  {
    readObject<DgnPrimArray<unsigned int>>(v16, (uint64_t)this + 224, &v193);
  }
  readObject<DgnPrimArray<unsigned short>>(v16, (uint64_t)this + 240, &v193);
  readObject<DgnArray<ParseToken>>((uint64_t)v16, (uint64_t)this + 256, &v193);
  readObject<unsigned int>(v16, (uint64_t)this + 272, &v193);
  readObject<int>(v16, (uint64_t)this + 288, &v193);
  readObject<unsigned char>(v16, (uint64_t)this + 304, &v193);
  readObject<unsigned char>(v16, (uint64_t)this + 320, &v193);
  readObject<unsigned char>(v16, (uint64_t)this + 336, &v193);
  readObject<unsigned char>(v16, (uint64_t)this + 352, &v193);
  readObject<unsigned char>(v16, (uint64_t)this + 368, &v193);
  readObject<unsigned char>(v16, (uint64_t)this + 384, &v193);
  if (v176)
  {
    readObject<unsigned int>(v16, (uint64_t)this + 400, &v193);
    readObject<unsigned int>(v16, (uint64_t)this + 416, &v193);
    readObject<unsigned int>(v16, (uint64_t)this + 432, &v193);
    readObject<unsigned int>(v16, (uint64_t)this + 448, &v193);
  }
  if ((v20 & 1) != 0)
  {
    readObject<unsigned int>(v16, (uint64_t)this + 512, &v193);
    readObject<unsigned char>(v16, (uint64_t)this + 480, &v193);
    readObject<DgnPrimArray<unsigned int>>(v16, (uint64_t)this + 592, &v193);
  }
  else
  {
    readObject<unsigned char>(v16, (uint64_t)v192, &v193);
  }
  readObject<unsigned char>(v16, (uint64_t)this + 464, &v193);
  readObject<unsigned int>(v16, (uint64_t)this + 496, &v193);
  readObject<unsigned char>(v16, (uint64_t)this + 544, &v193);
  readObject<unsigned char>(v16, (uint64_t)this + 560, &v193);
  readObject<DgnPrimArray<unsigned int>>(v16, (uint64_t)this + 576, &v193);
  if (!*((_BYTE *)v16 + 35)
    || (readObject<DgnArray<StateSpec>>((uint64_t)v16, (uint64_t)&v184, &v193), !*((_BYTE *)v16 + 35)))
  {
    readObject<DgnPrimArray<unsigned int>>(v16, (uint64_t)this + 608, &v193);
  }
  readObject<unsigned int>(v16, (uint64_t)this + 704, &v193);
  v22 = (unsigned int *)((char *)this + 720);
  readObject((uint64_t)v16, (_DWORD *)this + 180, &v193);
  readObject((uint64_t)v16, (_DWORD *)this + 181, &v193);
  if (v175)
    readObject((uint64_t)v16, (_DWORD *)this + 183, &v193);
  if (*((_BYTE *)v16 + 35))
  {
    v183 = 0;
    readObject((uint64_t)v16, &v183, &v193);
    v181 = 0;
    v182 = 0;
    v179 = 0;
    v180 = 0;
    readObject<unsigned int>(v16, (uint64_t)&v181, &v193);
    readObject<unsigned int>(v16, (uint64_t)&v179, &v193);
    if ((_DWORD)v182)
    {
      v27 = 0;
      do
        StateMgr::killStateInternal((EnvMgr **)this, *((unsigned int *)v181 + v27++), 0, 1, v23, v24, v25, v26);
      while (v27 < v182);
    }
    if (*v22)
    {
      v28 = 0;
      do
      {
        v177 = 0;
        v178 = 0;
        v29 = v184;
        v30 = v184 + 16 * v28;
        if (*(_DWORD *)(v30 + 8))
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          do
          {
            v34 = *(unsigned __int16 *)(*(_QWORD *)v30 + v31);
            if ((_DWORD)v34 == v183)
            {
              v35 = *(unsigned int *)(*(_QWORD *)v30 + v31 + 4);
              if (v32 == HIDWORD(v178))
              {
                DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v177, 1, 1);
                v32 = v178;
              }
              *(_QWORD *)(v177 + 8 * v32) = v34 | (v35 << 32);
              v32 = v178 + 1;
              LODWORD(v178) = v178 + 1;
              v29 = v184;
            }
            ++v33;
            v30 = v29 + 16 * v28;
            v31 += 8;
          }
          while (v33 < *(unsigned int *)(v30 + 8));
        }
        else
        {
          v32 = 0;
        }
        DgnArray<StateSpec>::copyArraySlice(v30, &v177, 0, v32);
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v177);
        ++v28;
        v36 = *v22;
      }
      while (v28 < v36);
      if (*v22)
      {
        v37 = 0;
        do
        {
          v38 = v180;
          if ((_DWORD)v180)
          {
            v39 = v179;
            v40 = 0xFFFFFFFFLL;
            while (1)
            {
              v41 = *v39++;
              if (v37 == v41)
                break;
              --v40;
              if (!--v38)
                goto LABEL_73;
            }
            if (v40)
            {
              v177 = 0;
              v178 = 0;
              v42 = v188;
              v43 = v188 + 16 * v37;
              if (*(_DWORD *)(v43 + 8))
              {
                v44 = 0;
                v45 = 0;
                v46 = 0;
                v47 = 0;
                do
                {
                  v48 = *(_QWORD *)v43;
                  v49 = *(unsigned __int16 *)(*(_QWORD *)v43 + v44);
                  if (v49 == v183)
                  {
                    if (v46 == HIDWORD(v178))
                    {
                      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v177, 1, 1);
                      v46 = v178;
                      v45 = v177;
                      LOWORD(v49) = *(_WORD *)(v48 + v44);
                      v42 = v188;
                    }
                    v50 = (_WORD *)(v45 + 4 * v46);
                    *v50 = v49;
                    v50[1] = *(_WORD *)(v48 + v44 + 2);
                    LODWORD(v178) = ++v46;
                  }
                  ++v47;
                  v43 = v42 + 16 * v37;
                  v44 += 4;
                }
                while (v47 < *(unsigned int *)(v43 + 8));
              }
              else
              {
                v46 = 0;
              }
              DgnArray<RuleSpec>::copyArraySlice(v43, &v177, 0, v46);
              DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v177);
              v36 = *v22;
            }
          }
LABEL_73:
          ++v37;
        }
        while (v37 < v36);
      }
    }
    v51 = v191;
    v52 = *((_DWORD *)this + 15);
    LODWORD(v53) = v191;
    if (v191 > v52)
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 48, v191 - v52, 0);
      LODWORD(v53) = v191;
    }
    *((_DWORD *)this + 14) = v51;
    if ((_DWORD)v53)
    {
      v54 = (_WORD *)*((_QWORD *)this + 6);
      v53 = v53;
      v55 = (__int16 *)(v190 + 2);
      do
      {
        v56 = *v55;
        v55 += 2;
        *v54++ = v56;
        --v53;
      }
      while (v53);
    }
    v57 = (_QWORD *)((char *)this + 80);
    v58 = v189;
    v59 = *((_DWORD *)this + 23);
    if (v189 > v59)
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 80, v189 - v59, 0);
    v60 = *((unsigned int *)this + 22);
    if (v60 <= v58)
    {
      if (v60 < v58)
      {
        v63 = v58 - v60;
        v64 = 16 * v60;
        do
        {
          v65 = (_QWORD *)(*v57 + v64);
          *v65 = 0;
          v65[1] = 0;
          v64 += 16;
          --v63;
        }
        while (v63);
      }
    }
    else if ((int)v60 > (int)v58)
    {
      v61 = (int)v60;
      v62 = 16 * (int)v60 - 16;
      do
      {
        --v61;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v57 + v62);
        v62 -= 16;
      }
      while (v61 > (int)v58);
    }
    *((_DWORD *)this + 22) = v58;
    if ((_DWORD)v189)
    {
      v66 = 0;
      v67 = v188;
      do
      {
        v68 = *(_DWORD *)(v67 + 16 * v66 + 8);
        v69 = *v57 + 16 * v66;
        v70 = *(_DWORD *)(v69 + 12);
        LODWORD(v71) = v68;
        if (v68 > v70)
        {
          DgnPrimArray<short>::reallocElts(*v57 + 16 * v66, v68 - v70, 0);
          v67 = v188;
          LODWORD(v71) = *(_DWORD *)(v188 + 16 * v66 + 8);
        }
        *(_DWORD *)(v69 + 8) = v68;
        if ((_DWORD)v71)
        {
          v72 = *(_WORD **)(*v57 + 16 * v66);
          v71 = v71;
          v73 = (__int16 *)(*(_QWORD *)(v67 + 16 * v66) + 2);
          do
          {
            v74 = *v73;
            v73 += 2;
            *v72++ = v74;
            --v71;
          }
          while (v71);
        }
        ++v66;
      }
      while (v66 < v189);
    }
    v75 = (_QWORD *)((char *)this + 224);
    v76 = v187;
    v77 = *((_DWORD *)this + 59);
    if (v187 > v77)
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 224, v187 - v77, 0);
    v78 = *((unsigned int *)this + 58);
    if (v78 <= v76)
    {
      if (v78 < v76)
      {
        v81 = v76 - v78;
        v82 = 16 * v78;
        do
        {
          v83 = (_QWORD *)(*v75 + v82);
          *v83 = 0;
          v83[1] = 0;
          v82 += 16;
          --v81;
        }
        while (v81);
      }
    }
    else if ((int)v78 > (int)v76)
    {
      v79 = (int)v78;
      v80 = 16 * (int)v78 - 16;
      do
      {
        --v79;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v75 + v80);
        v80 -= 16;
      }
      while (v79 > (int)v76);
    }
    *((_DWORD *)this + 58) = v76;
    if ((_DWORD)v187)
    {
      v84 = 0;
      v85 = v186;
      do
      {
        v86 = *(_DWORD *)(v85 + 16 * v84 + 8);
        v87 = *v75 + 16 * v84;
        v88 = *(_DWORD *)(v87 + 12);
        v89 = v86;
        if (v86 > v88)
        {
          DgnPrimArray<unsigned int>::reallocElts(*v75 + 16 * v84, v86 - v88, 0);
          v85 = v186;
          v89 = *(_DWORD *)(v186 + 16 * v84 + 8);
        }
        *(_DWORD *)(v87 + 8) = v86;
        if (v89)
        {
          v90 = 0;
          v91 = *(_QWORD *)(*v75 + 16 * v84);
          v92 = (int *)(*(_QWORD *)(v85 + 16 * v84) + 4);
          do
          {
            v93 = *v92;
            v92 += 2;
            *(_DWORD *)(v91 + 4 * v90++) = v93;
          }
          while (v90 < *(unsigned int *)(v85 + 16 * v84 + 8));
        }
        ++v84;
      }
      while (v84 < v187);
    }
    v94 = (_QWORD *)((char *)this + 608);
    v95 = v185;
    v96 = *((_DWORD *)this + 155);
    if (v185 > v96)
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 608, v185 - v96, 0);
    v97 = *((unsigned int *)this + 154);
    if (v97 <= v95)
    {
      if (v97 < v95)
      {
        v100 = v95 - v97;
        v101 = 16 * v97;
        do
        {
          v102 = (_QWORD *)(*v94 + v101);
          *v102 = 0;
          v102[1] = 0;
          v101 += 16;
          --v100;
        }
        while (v100);
      }
    }
    else if ((int)v97 > (int)v95)
    {
      v98 = (int)v97;
      v99 = 16 * (int)v97 - 16;
      do
      {
        --v98;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v94 + v99);
        v99 -= 16;
      }
      while (v98 > (int)v95);
    }
    *((_DWORD *)this + 154) = v95;
    if ((_DWORD)v185)
    {
      v103 = 0;
      v104 = v184;
      do
      {
        v105 = *(_DWORD *)(v104 + 16 * v103 + 8);
        v106 = *v94 + 16 * v103;
        v107 = *(_DWORD *)(v106 + 12);
        v108 = v105;
        if (v105 > v107)
        {
          DgnPrimArray<unsigned int>::reallocElts(*v94 + 16 * v103, v105 - v107, 0);
          v104 = v184;
          v108 = *(_DWORD *)(v184 + 16 * v103 + 8);
        }
        *(_DWORD *)(v106 + 8) = v105;
        if (v108)
        {
          v109 = 0;
          v110 = *(_QWORD *)(*v94 + 16 * v103);
          v111 = (int *)(*(_QWORD *)(v104 + 16 * v103) + 4);
          do
          {
            v112 = *v111;
            v111 += 2;
            *(_DWORD *)(v110 + 4 * v109++) = v112;
          }
          while (v109 < *(unsigned int *)(v104 + 16 * v103 + 8));
        }
        ++v103;
      }
      while (v103 < v185);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v179);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v181);
  }
  EnvMgr::loadEnvMgrFromStream(*((EnvMgr **)this + 94), a2, v16, &v193, 0);
  EnvMgr::loadEnvMgrFromStream(*((EnvMgr **)this + 95), a2, v16, &v193, 0);
  readObjectChecksumAndVerify(v16, v193);
  CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)v174, CurrentSubDirComponents, 0x59u, v193);
  if ((v20 & 1) == 0)
    StateMgr::resetPrecedingNonAcousticWordStates((uint64_t)this);
  LODWORD(v114) = *v22;
  if ((v176 & 1) != 0)
    goto LABEL_148;
  v115 = *((_DWORD *)this + 103);
  v116 = *v22;
  if (v114 > v115)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 400, v114 - v115, 0);
    v116 = *v22;
  }
  *((_DWORD *)this + 102) = v114;
  v117 = *((_DWORD *)this + 107);
  v118 = v116;
  if (v116 > v117)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 416, v116 - v117, 0);
    v118 = *v22;
  }
  *((_DWORD *)this + 106) = v116;
  v119 = *((_DWORD *)this + 111);
  v120 = v118;
  if (v118 > v119)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 432, v118 - v119, 0);
    v120 = *v22;
  }
  *((_DWORD *)this + 110) = v118;
  v121 = *((_DWORD *)this + 115);
  v122 = v120;
  if (v120 > v121)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 448, v120 - v121, 0);
    v122 = *v22;
  }
  *((_DWORD *)this + 114) = v120;
  if (v122)
  {
    v123 = 0;
    v124 = *((_QWORD *)this + 50);
    v125 = *((_QWORD *)this + 52);
    v126 = *((_QWORD *)this + 54);
    v127 = *((_QWORD *)this + 56);
    do
    {
      *(_DWORD *)(v124 + 4 * v123) = -1;
      *(_DWORD *)(v125 + 4 * v123) = -1;
      *(_DWORD *)(v126 + 4 * v123) = -1;
      *(_DWORD *)(v127 + 4 * v123++) = -1;
      v114 = *v22;
    }
    while (v123 < v114);
LABEL_148:
    if (*((_DWORD *)this + 173) < v114)
    {
      v181 = 0;
      *((_DWORD *)this + 173) = realloc_array(*((_QWORD **)this + 85), &v181, v114, *((unsigned int *)this + 172), *((unsigned int *)this + 172), 1);
      *((_QWORD *)this + 85) = v181;
    }
    goto LABEL_151;
  }
  LODWORD(v114) = 0;
LABEL_151:
  *((_DWORD *)this + 172) = v114;
  if (*((_DWORD *)this + 178))
  {
    v128 = 0;
    do
      *(_BYTE *)(*((_QWORD *)this + 85) + *(unsigned int *)(*((_QWORD *)this + 88) + 4 * v128++)) = 1;
    while (v128 < *((unsigned int *)this + 178));
  }
  v129 = (_QWORD *)((char *)this + 664);
  v130 = *((unsigned int *)this + 168);
  if ((int)v130 >= 1)
  {
    v131 = 16 * v130 - 16;
    do
    {
      BitArray::~BitArray((BitArray *)(*v129 + v131));
      v131 -= 16;
    }
    while (v131 != -16);
  }
  *((_DWORD *)this + 168) = 0;
  v132 = *((_DWORD *)this + 180);
  v133 = *((_DWORD *)this + 169);
  if (v132 > v133)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 664, v132 - v133, 0);
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)&v181, *(_DWORD *)(*((_QWORD *)this + 92) + 184));
  if (*v22)
  {
    v134 = 0;
    v135 = *((_DWORD *)this + 168);
    do
    {
      PhnIndexSet::PhnIndexSet((PhnIndexSet *)(*v129 + 16 * v135), (const PhnIndexSet *)&v181);
      v135 = *((_DWORD *)this + 168) + 1;
      *((_DWORD *)this + 168) = v135;
      ++v134;
    }
    while (v134 < *((_DWORD *)this + 180));
  }
  BitArray::~BitArray((BitArray *)&v181);
  v142 = *((unsigned int *)this + 180);
  v143 = v142;
  if (*((_DWORD *)this + 159) < v142)
  {
    v181 = 0;
    *((_DWORD *)this + 159) = realloc_array(*((_QWORD **)this + 78), &v181, v142, *((unsigned int *)this + 158), *((unsigned int *)this + 158), 1);
    *((_QWORD *)this + 78) = v181;
    v143 = *((_DWORD *)this + 180);
  }
  *((_DWORD *)this + 158) = v142;
  if (v143)
  {
    v144 = 0;
    do
    {
      *(_BYTE *)(*((_QWORD *)this + 78) + v144++) = 0;
      v145 = *((unsigned int *)this + 180);
    }
    while (v144 < v145);
    if ((_DWORD)v145)
    {
      v146 = *((_QWORD *)this + 92);
      v147 = *(_QWORD *)(v146 + 48);
      v148 = *(_QWORD *)(v146 + 16);
      v149 = (_QWORD *)(*(_QWORD *)this + 72);
      v150 = *((unsigned int *)this + 180);
      do
      {
        *(v149 - 2) = WordIdCollSearchCmpFromWordId;
        *(v149 - 1) = v147;
        *v149 = v148;
        v149 += 10;
        --v150;
      }
      while (v150);
    }
    v151 = (StateMgr *)((char *)this + 16);
    v152 = *((_DWORD *)this + 7);
    if (v145 > v152)
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 16, v145 - v152, 0);
  }
  else
  {
    LODWORD(v145) = 0;
    v151 = (StateMgr *)((char *)this + 16);
  }
  v153 = *((unsigned int *)this + 6);
  if (v153 <= v145)
  {
    if (v153 < v145)
    {
      do
        *(_QWORD *)(*(_QWORD *)v151 + 8 * v153++) = 0;
      while (v145 != v153);
    }
  }
  else
  {
    DgnIOwnArray<BitArray *>::destructAt(v151, v145, v153 - v145);
  }
  *((_DWORD *)this + 6) = v145;
  v154 = *((unsigned int *)this + 180);
  if ((_DWORD)v154)
  {
    v155 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)v151 + v155) = 0;
      v155 += 8;
    }
    while (8 * v154 != v155);
  }
  v156 = *((_DWORD *)this + 43);
  v157 = v154;
  if (v154 > v156)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 160, v154 - v156, 0);
    v157 = *v22;
  }
  *((_DWORD *)this + 42) = v154;
  v158 = *((_DWORD *)this + 47);
  v159 = v157;
  if (v157 > v158)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 176, v157 - v158, 0);
    v159 = *v22;
  }
  *((_DWORD *)this + 46) = v157;
  v160 = *((_DWORD *)this + 51);
  v161 = v159;
  if (v159 > v160)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v159 - v160, 0);
    v161 = *v22;
  }
  *((_DWORD *)this + 50) = v159;
  v162 = *((_DWORD *)this + 55);
  v163 = v161;
  if (v161 > v162)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 208, v161 - v162, 0);
    v163 = *v22;
  }
  *((_DWORD *)this + 54) = v161;
  if (v163)
  {
    v164 = (_WORD *)*((_QWORD *)this + 20);
    v165 = (_WORD *)*((_QWORD *)this + 22);
    v166 = (_WORD *)*((_QWORD *)this + 24);
    v167 = v163;
    v168 = (_WORD *)*((_QWORD *)this + 26);
    do
    {
      *v164++ = 0;
      *v165++ = 0;
      *v166++ = 0;
      *v168++ = 0;
      --v167;
    }
    while (v167);
  }
  v169 = *((_DWORD *)this + 135);
  v170 = v163;
  v171 = v163 - v169;
  if (v163 > v169)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 528, v171, 0);
    v170 = *v22;
  }
  *((_DWORD *)this + 134) = v163;
  if (v170)
    memset_pattern16(*((void **)this + 66), &unk_209A60980, 2 * v170);
  if ((v20 & 1) == 0)
    StateMgr::upgradePrecedingNonAcousticWordsAllowed(this, (unsigned int *)v192, v136, v137, v138, v139, v140, v141);
  if (v16)
  {
    (**(void (***)(DgnStream *, uint64_t))v16)(v16, v171);
    MemChunkFree(v16, 0);
  }
  if ((v173 | v175 ^ 1) == 1)
    StateMgr::computeStateIdNameChecksum((uLong)this);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&v184);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&v186);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&v188);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v190);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v192);
}

void sub_2097F8E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;

  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&a20);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&a22);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&a24);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a26);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v26 - 120);
  _Unwind_Resume(a1);
}

void readObject<DgnCollArray<unsigned int,WordList>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;

  v16 = 0;
  readObject((uint64_t)a1, &v16, a3);
  v6 = v16;
  v7 = *(_DWORD *)(a2 + 12);
  if (v16 > v7)
    DgnArray<DSMLocalRecord>::reallocElts(a2, v16 - v7, 0);
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v11 = v6 - v8;
      v12 = 80 * v8;
      do
      {
        v13 = *(_QWORD *)a2 + v12;
        *(_BYTE *)v13 = 0;
        *(_DWORD *)(v13 + 2) = 0;
        *(_OWORD *)(v13 + 8) = 0uLL;
        *(_OWORD *)(v13 + 24) = 0uLL;
        *(_OWORD *)(v13 + 40) = 0uLL;
        *(_QWORD *)(v13 + 64) = 0;
        *(_QWORD *)(v13 + 72) = 0;
        v12 += 80;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    v9 = (int)v8;
    v10 = 80 * (int)v8 - 80;
    do
    {
      --v9;
      DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray(*(_QWORD *)a2 + v10);
      v10 -= 80;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if ((_DWORD)v6)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      DgnCollArray<unsigned int,WordList>::readObject(*(_QWORD *)a2 + v14, a1, a3);
      ++v15;
      v14 += 80;
    }
    while (v15 < *(unsigned int *)(a2 + 8));
  }
}

unint64_t readObject<DgnArray<RuleSpec>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v17 = 0;
  result = readObject(a1, &v17, a3);
  v7 = v17;
  v8 = *(_DWORD *)(a2 + 12);
  if (v17 > v8)
    result = DgnArray<DgnPrimArray<double>>::reallocElts(a2, v17 - v8, 0);
  v9 = *(unsigned int *)(a2 + 8);
  if (v9 <= v7)
  {
    if (v9 < v7)
    {
      v12 = v7 - v9;
      v13 = 16 * v9;
      do
      {
        v14 = (_QWORD *)(*(_QWORD *)a2 + v13);
        *v14 = 0;
        v14[1] = 0;
        v13 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v9 > (int)v7)
  {
    v10 = (int)v9;
    v11 = 16 * (int)v9 - 16;
    do
    {
      --v10;
      result = DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)a2 + v11);
      v11 -= 16;
    }
    while (v10 > (int)v7);
  }
  *(_DWORD *)(a2 + 8) = v7;
  if ((_DWORD)v7)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      result = readObject<RuleSpec>(a1, *(_QWORD *)a2 + v15, a3);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void readObject<DgnPrimArray<unsigned short>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;

  v16 = 0;
  readObject((uint64_t)a1, &v16, a3);
  v6 = v16;
  v7 = *(_DWORD *)(a2 + 12);
  if (v16 > v7)
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v16 - v7, 0);
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      v11 = v6 - v8;
      v12 = 16 * v8;
      do
      {
        v13 = (_QWORD *)(*(_QWORD *)a2 + v12);
        *v13 = 0;
        v13[1] = 0;
        v12 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    v9 = (int)v8;
    v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)a2 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if ((_DWORD)v6)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      readObject<unsigned short>(a1, *(_QWORD *)a2 + v14, a3);
      ++v15;
      v14 += 16;
    }
    while (v15 < *(unsigned int *)(a2 + 8));
  }
}

unint64_t readObject<DgnArray<StateSpec>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v17 = 0;
  result = readObject(a1, &v17, a3);
  v7 = v17;
  v8 = *(_DWORD *)(a2 + 12);
  if (v17 > v8)
    result = DgnArray<DgnPrimArray<double>>::reallocElts(a2, v17 - v8, 0);
  v9 = *(unsigned int *)(a2 + 8);
  if (v9 <= v7)
  {
    if (v9 < v7)
    {
      v12 = v7 - v9;
      v13 = 16 * v9;
      do
      {
        v14 = (_QWORD *)(*(_QWORD *)a2 + v13);
        *v14 = 0;
        v14[1] = 0;
        v13 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v9 > (int)v7)
  {
    v10 = (int)v9;
    v11 = 16 * (int)v9 - 16;
    do
    {
      --v10;
      result = DgnIArray<Utterance *>::~DgnIArray(*(_QWORD *)a2 + v11);
      v11 -= 16;
    }
    while (v10 > (int)v7);
  }
  *(_DWORD *)(a2 + 8) = v7;
  if ((_DWORD)v7)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      result = readObject<StateSpec>(a1, *(_QWORD *)a2 + v15, a3);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void readObject<int>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v8 = 0;
  readObject((uint64_t)a1, &v8, a3);
  v6 = v8;
  v7 = *(_DWORD *)(a2 + 12);
  if (v8 > v7)
    DgnPrimArray<unsigned int>::reallocElts(a2, v8 - v7, 0);
  *(_DWORD *)(a2 + 8) = v6;
  readObjectArray(a1, *(int **)a2, v6, a3);
}

uint64_t StateMgr::killStateInternal(EnvMgr **this, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int ItemEnvId;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  int v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int ItemPairEnvId;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  EnvMgr *v41;
  uint64_t v42;
  EnvMgr *v43;
  char *v44;
  _DWORD *v45;
  uint64_t v46;
  unsigned int v47;
  _DWORD *v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE v75[16];
  _QWORD v76[2];

  if ((a3 & 1) != 0)
  {
    ItemEnvId = EnvMgr::getItemEnvId(this[94], a2);
    if (ItemEnvId)
    {
      EnvMgr::killEnv(this[94], ItemEnvId, v13, v14, v15, v16, v17, v18);
      EnvMgr::setItemEnvId(this[94], a2, 0, v19, v20, v21, v22, v23);
    }
    v24 = a2;
    v25 = (uint64_t)*this + 80 * a2;
    v27 = *(_DWORD *)(v25 + 16);
    v26 = (unsigned int *)(v25 + 16);
    if (v27)
    {
      v28 = 0;
      v29 = v26 - 2;
      do
      {
        ItemPairEnvId = EnvMgr::getItemPairEnvId(this[95], a2, *(_DWORD *)(*(_QWORD *)v29 + 4 * v28));
        if (ItemPairEnvId)
        {
          EnvMgr::killEnv(this[95], ItemPairEnvId, v31, v32, v33, v34, v35, v36);
          EnvMgr::setItemPairEnvId(this[95], a2, *(unsigned int *)(*(_QWORD *)v29 + 4 * v28), 0, v37, v38, v39, v40);
        }
        ++v28;
      }
      while (v28 < *v26);
    }
    *((_DWORD *)this + 183) ^= StateMgr::computeOneStateIdNameChecksum((StateMgr *)this, a2);
  }
  else
  {
    v24 = a2;
  }
  v41 = this[14];
  v42 = *((unsigned int *)v41 + v24);
  v43 = this[16];
  v44 = (char *)v43 + 16 * v42;
  v47 = *((_DWORD *)v44 + 2);
  v45 = v44 + 8;
  v46 = v47;
  if (v47)
  {
    v48 = (_DWORD *)*((_QWORD *)v43 + 2 * v42);
    v49 = v46;
    v50 = v48;
    while (*v50 != (_DWORD)a2)
    {
      ++v50;
      if (!--v49)
        goto LABEL_17;
    }
    v51 = v46 - 1;
    *v50 = v48[v51];
    *v45 = v51;
  }
LABEL_17:
  *((_DWORD *)v41 + v24) = 0;
  *((_WORD *)this[6] + v24) = 0;
  *((_DWORD *)this[8] + v24) = 0;
  v52 = (uint64_t)this[10] + 16 * v24;
  if (*(_QWORD *)v52)
  {
    MemChunkFree(*(_QWORD **)v52, 0);
    *(_QWORD *)v52 = 0;
  }
  *(_QWORD *)(v52 + 8) = 0;
  v53 = (uint64_t)this[12] + 16 * v24;
  if (*(_QWORD *)v53)
  {
    MemChunkFree(*(_QWORD **)v53, 0);
    *(_QWORD *)v53 = 0;
  }
  *(_QWORD *)(v53 + 8) = 0;
  *((_WORD *)this[20] + v24) = 0;
  *((_WORD *)this[22] + v24) = 0;
  *((_WORD *)this[24] + v24) = 0;
  *((_WORD *)this[26] + v24) = 0;
  v54 = (uint64_t)this[72] + 16 * v24;
  if (*(_QWORD *)v54)
  {
    MemChunkFree(*(_QWORD **)v54, 0);
    *(_QWORD *)v54 = 0;
  }
  *(_QWORD *)(v54 + 8) = 0;
  v55 = (uint64_t)this[76] + 16 * v24;
  if (*(_QWORD *)v55)
  {
    MemChunkFree(*(_QWORD **)v55, 0);
    *(_QWORD *)v55 = 0;
  }
  *(_QWORD *)(v55 + 8) = 0;
  v76[0] = 0;
  v76[1] = 0;
  StateMgr::verifyStateFull((StateMgr *)this, a2, a3, 0, a5, a6, a7, a8);
  DgnCollArray<unsigned int,WordList>::setColls((uint64_t)*this + 80 * v24, (uint64_t)v76);
  while (*((_DWORD *)*this + 20 * v24 + 4))
    StateMgr::deleteWordIdNoPhones((StateMgr *)this, a2, **((unsigned int **)*this + 10 * v24 + 1), 0, v56, v57, v58, v59);
  DgnDelete<BitArray>(*((BitArray **)this[2] + v24));
  *((_QWORD *)this[2] + v24) = 0;
  if (a4)
  {
    v65 = (uint64_t)this[28] + 16 * v24;
    if (*(_QWORD *)v65)
    {
      MemChunkFree(*(_QWORD **)v65, 0);
      *(_QWORD *)v65 = 0;
    }
    *(_QWORD *)(v65 + 8) = 0;
    v66 = (uint64_t)this[30] + 16 * v24;
    if (*(_QWORD *)v66)
    {
      MemChunkFree(*(_QWORD **)v66, 0);
      *(_QWORD *)v66 = 0;
    }
    *(_QWORD *)(v66 + 8) = 0;
    v67 = (uint64_t)this[32] + 16 * v24;
    if (*(_QWORD *)v67)
    {
      MemChunkFree(*(_QWORD **)v67, 0);
      *(_QWORD *)v67 = 0;
    }
    *(_QWORD *)(v67 + 8) = 0;
  }
  else
  {
    StateMgr::setEmptyStateTransition((StateMgr *)this, a2, a3, v60, v61, v62, v63, v64);
  }
  *((_BYTE *)this[4] + v24) = 0;
  *((_DWORD *)this[34] + v24) = 0xFFFF;
  *((_DWORD *)this[36] + v24) = 0;
  *((_BYTE *)this[38] + v24) = 1;
  *((_BYTE *)this[40] + v24) = 1;
  *((_BYTE *)this[42] + v24) = 0;
  *((_BYTE *)this[44] + v24) = 1;
  *((_BYTE *)this[46] + v24) = 1;
  *((_BYTE *)this[48] + v24) = 0;
  *((_DWORD *)this[50] + v24) = -1;
  *((_DWORD *)this[52] + v24) = -1;
  *((_DWORD *)this[54] + v24) = -1;
  *((_DWORD *)this[56] + v24) = -1;
  *((_BYTE *)this[60] + v24) = 0;
  StateMgr::setPrecedingNonAcousticWordState((StateMgr *)this, a2, 0, a3, v61, v62, v63, v64);
  v72 = (uint64_t)this[74] + 16 * v24;
  if (*(_QWORD *)v72)
  {
    MemChunkFree(*(_QWORD **)v72, 0);
    *(_QWORD *)v72 = 0;
  }
  *(_QWORD *)(v72 + 8) = 0;
  *((_BYTE *)this[58] + v24) = 1;
  *((_BYTE *)this[85] + v24) = 1;
  StateMgr::setWordAliasState((StateMgr *)this, a2, 0, a3, v68, v69, v70, v71);
  v73 = *((_DWORD *)this + 178);
  if (v73 == *((_DWORD *)this + 179))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)(this + 88), 1, 1);
    v73 = *((_DWORD *)this + 178);
  }
  *((_DWORD *)this[88] + v73) = a2;
  ++*((_DWORD *)this + 178);
  *((_BYTE *)this[68] + v24) = 0;
  *((_BYTE *)this[70] + v24) = 0;
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v75, *((_DWORD *)this[92] + 46));
  BitArray::operator=((int **)this[83] + 2 * v24, (uint64_t)v75);
  BitArray::~BitArray((BitArray *)v75);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v76);
}

void sub_2097F97F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  BitArray::~BitArray((BitArray *)&a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL StateMgr::isEmpty(StateMgr *this)
{
  int v1;

  v1 = *((_DWORD *)this + 178);
  if (*((_DWORD *)this + 181))
    ++v1;
  return *((_DWORD *)this + 180) == v1 + 1 && *(_DWORD *)(*((_QWORD *)this + 18) + 8) == 0;
}

void StateMgr::makeSpecialEouStateId(StateMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;

  v14 = -1;
  v9 = StateMgr::newState(this, 0, &v14, a4, a5, a6, a7, a8);
  *((_DWORD *)this + 181) = v9;
  *(_BYTE *)(*((_QWORD *)this + 70) + v9) = 0;
  *(_BYTE *)(*((_QWORD *)this + 58) + *((unsigned int *)this + 181)) = 0;
  *(_BYTE *)(*((_QWORD *)this + 85) + *((unsigned int *)this + 181)) = 0;
  StateMgr::setEndOfUtteranceAllowed(this, *((_DWORD *)this + 181), 1, 0, v10, v11, v12, v13);
}

uint64_t StateMgr::newState(StateMgr *this, unsigned int a2, const unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  _QWORD *v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  _QWORD *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  unsigned int v38;
  _QWORD *v39;
  unsigned int v40;
  _QWORD *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  _QWORD *v45;
  unsigned int v46;
  _QWORD *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  _QWORD *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int *v75;
  _QWORD v77[2];

  StateMgr::verifyStateFull(this, a2, 1, 1, a5, a6, a7, a8);
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v77, *(_DWORD *)(*((_QWORD *)this + 92) + 184));
  *(_DWORD *)v77[0] |= 1u;
  v13 = *((_DWORD *)this + 178);
  if (v13)
  {
    v14 = v13 - 1;
    v15 = *(unsigned int *)(*((_QWORD *)this + 88) + 4 * v14);
    *((_DWORD *)this + 178) = v14;
    *(_BYTE *)(*((_QWORD *)this + 68) + v15) = 1;
    *(_BYTE *)(*((_QWORD *)this + 70) + v15) = *a3 == 0;
    BitArray::operator=((int **)(*((_QWORD *)this + 83) + 16 * v15), (uint64_t)v77);
    if (!(_DWORD)v15)
      goto LABEL_94;
    goto LABEL_91;
  }
  v15 = *((unsigned int *)this + 180);
  if ((_DWORD)v15 == -1)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1391, (uint64_t)"voc/statemgr", 16, (uint64_t)"%s", v11, v12, (char)&errStr_voc_statemgr_E_TOO_MANY_STATES);
    v15 = *((unsigned int *)this + 180);
  }
  *((_DWORD *)this + 180) = v15 + 1;
  v16 = *((_DWORD *)this + 2);
  if (v16 == *((_DWORD *)this + 3))
  {
    DgnArray<DSMLocalRecord>::reallocElts((uint64_t)this, 1, 1);
    v16 = *((_DWORD *)this + 2);
  }
  v17 = *(_QWORD *)this + 80 * v16;
  *(_BYTE *)v17 = 0;
  *(_DWORD *)(v17 + 2) = 0;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_QWORD *)(v17 + 64) = 0;
  *(_QWORD *)(v17 + 72) = 0;
  ++*((_DWORD *)this + 2);
  v18 = *((_QWORD *)this + 92);
  v19 = *(_QWORD *)(v18 + 48);
  v20 = *(_QWORD *)(v18 + 16);
  v21 = (_QWORD *)(*(_QWORD *)this + 80 * (*((_DWORD *)this + 180) - 1));
  v21[7] = WordIdCollSearchCmpFromWordId;
  v21[8] = v19;
  v21[9] = v20;
  v22 = *((_DWORD *)this + 6);
  if (v22 == *((_DWORD *)this + 7))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 16, 1, 1);
    v22 = *((_DWORD *)this + 6);
  }
  *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v22) = 0;
  *((_DWORD *)this + 6) = v22 + 1;
  v23 = *((_DWORD *)this + 10);
  if (v23 == *((_DWORD *)this + 11))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 32, 1, 1);
    v23 = *((_DWORD *)this + 10);
  }
  *(_BYTE *)(*((_QWORD *)this + 4) + v23) = 0;
  ++*((_DWORD *)this + 10);
  v24 = *((_DWORD *)this + 14);
  if (v24 == *((_DWORD *)this + 15))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 48, 1, 1);
    v24 = *((_DWORD *)this + 14);
  }
  *((_DWORD *)this + 14) = v24 + 1;
  v25 = *((_DWORD *)this + 18);
  if (v25 == *((_DWORD *)this + 19))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 64, 1, 1);
    v25 = *((_DWORD *)this + 18);
  }
  *((_DWORD *)this + 18) = v25 + 1;
  v26 = *((_DWORD *)this + 22);
  if (v26 == *((_DWORD *)this + 23))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 80, 1, 1);
    v26 = *((_DWORD *)this + 22);
  }
  v27 = (_QWORD *)(*((_QWORD *)this + 10) + 16 * v26);
  *v27 = 0;
  v27[1] = 0;
  ++*((_DWORD *)this + 22);
  v28 = *((_DWORD *)this + 26);
  if (v28 == *((_DWORD *)this + 27))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 96, 1, 1);
    v28 = *((_DWORD *)this + 26);
  }
  DgnString::DgnString((DgnString *)(*((_QWORD *)this + 12) + 16 * v28));
  ++*((_DWORD *)this + 26);
  v29 = *((_DWORD *)this + 30);
  if (v29 == *((_DWORD *)this + 31))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 112, 1, 1);
    v29 = *((_DWORD *)this + 30);
  }
  *((_DWORD *)this + 30) = v29 + 1;
  v30 = *((_DWORD *)this + 34);
  if (v30 == *((_DWORD *)this + 35))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 128, 1, 1);
    v30 = *((_DWORD *)this + 34);
  }
  v31 = (_QWORD *)(*((_QWORD *)this + 16) + 16 * v30);
  *v31 = 0;
  v31[1] = 0;
  ++*((_DWORD *)this + 34);
  v32 = *((_DWORD *)this + 42);
  if (v32 == *((_DWORD *)this + 43))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 160, 1, 1);
    v32 = *((_DWORD *)this + 42);
  }
  *(_WORD *)(*((_QWORD *)this + 20) + 2 * v32) = 0;
  *((_DWORD *)this + 42) = v32 + 1;
  v33 = *((_DWORD *)this + 46);
  if (v33 == *((_DWORD *)this + 47))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 176, 1, 1);
    v33 = *((_DWORD *)this + 46);
  }
  *(_WORD *)(*((_QWORD *)this + 22) + 2 * v33) = 0;
  *((_DWORD *)this + 46) = v33 + 1;
  v34 = *((_DWORD *)this + 50);
  if (v34 == *((_DWORD *)this + 51))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
    v34 = *((_DWORD *)this + 50);
  }
  *(_WORD *)(*((_QWORD *)this + 24) + 2 * v34) = 0;
  *((_DWORD *)this + 50) = v34 + 1;
  v35 = *((_DWORD *)this + 54);
  if (v35 == *((_DWORD *)this + 55))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 208, 1, 1);
    v35 = *((_DWORD *)this + 54);
  }
  *(_WORD *)(*((_QWORD *)this + 26) + 2 * v35) = 0;
  *((_DWORD *)this + 54) = v35 + 1;
  v36 = *((_DWORD *)this + 146);
  if (v36 == *((_DWORD *)this + 147))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 576, 1, 1);
    v36 = *((_DWORD *)this + 146);
  }
  v37 = (_QWORD *)(*((_QWORD *)this + 72) + 16 * v36);
  *v37 = 0;
  v37[1] = 0;
  ++*((_DWORD *)this + 146);
  v38 = *((_DWORD *)this + 154);
  if (v38 == *((_DWORD *)this + 155))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 608, 1, 1);
    v38 = *((_DWORD *)this + 154);
  }
  v39 = (_QWORD *)(*((_QWORD *)this + 76) + 16 * v38);
  *v39 = 0;
  v39[1] = 0;
  ++*((_DWORD *)this + 154);
  v40 = *((_DWORD *)this + 38);
  if (v40 == *((_DWORD *)this + 39))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 144, 1, 1);
    v40 = *((_DWORD *)this + 38);
  }
  v41 = (_QWORD *)(*((_QWORD *)this + 18) + 16 * v40);
  *v41 = 0;
  v41[1] = 0;
  ++*((_DWORD *)this + 38);
  v42 = *((_DWORD *)this + 58);
  if (v42 == *((_DWORD *)this + 59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 224, 1, 1);
    v42 = *((_DWORD *)this + 58);
  }
  v43 = (_QWORD *)(*((_QWORD *)this + 28) + 16 * v42);
  *v43 = 0;
  v43[1] = 0;
  ++*((_DWORD *)this + 58);
  v44 = *((_DWORD *)this + 62);
  if (v44 == *((_DWORD *)this + 63))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 240, 1, 1);
    v44 = *((_DWORD *)this + 62);
  }
  v45 = (_QWORD *)(*((_QWORD *)this + 30) + 16 * v44);
  *v45 = 0;
  v45[1] = 0;
  ++*((_DWORD *)this + 62);
  v46 = *((_DWORD *)this + 66);
  if (v46 == *((_DWORD *)this + 67))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 256, 1, 1);
    v46 = *((_DWORD *)this + 66);
  }
  v47 = (_QWORD *)(*((_QWORD *)this + 32) + 16 * v46);
  *v47 = 0;
  v47[1] = 0;
  ++*((_DWORD *)this + 66);
  v48 = *((_DWORD *)this + 70);
  if (v48 == *((_DWORD *)this + 71))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 272, 1, 1);
    v48 = *((_DWORD *)this + 70);
  }
  *(_DWORD *)(*((_QWORD *)this + 34) + 4 * v48) = 0xFFFF;
  ++*((_DWORD *)this + 70);
  v49 = *((_DWORD *)this + 74);
  if (v49 == *((_DWORD *)this + 75))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 288, 1, 1);
    v49 = *((_DWORD *)this + 74);
  }
  *(_DWORD *)(*((_QWORD *)this + 36) + 4 * v49) = 0;
  ++*((_DWORD *)this + 74);
  v50 = *((_DWORD *)this + 78);
  if (v50 == *((_DWORD *)this + 79))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 304, 1, 1);
    v50 = *((_DWORD *)this + 78);
  }
  *(_BYTE *)(*((_QWORD *)this + 38) + v50) = 1;
  ++*((_DWORD *)this + 78);
  v51 = *((_DWORD *)this + 82);
  if (v51 == *((_DWORD *)this + 83))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 320, 1, 1);
    v51 = *((_DWORD *)this + 82);
  }
  *(_BYTE *)(*((_QWORD *)this + 40) + v51) = 1;
  ++*((_DWORD *)this + 82);
  v52 = *((_DWORD *)this + 86);
  if (v52 == *((_DWORD *)this + 87))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 336, 1, 1);
    v52 = *((_DWORD *)this + 86);
  }
  *(_BYTE *)(*((_QWORD *)this + 42) + v52) = 0;
  ++*((_DWORD *)this + 86);
  v53 = *((_DWORD *)this + 90);
  if (v53 == *((_DWORD *)this + 91))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 352, 1, 1);
    v53 = *((_DWORD *)this + 90);
  }
  *(_BYTE *)(*((_QWORD *)this + 44) + v53) = 1;
  ++*((_DWORD *)this + 90);
  v54 = *((_DWORD *)this + 94);
  if (v54 == *((_DWORD *)this + 95))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 368, 1, 1);
    v54 = *((_DWORD *)this + 94);
  }
  *(_BYTE *)(*((_QWORD *)this + 46) + v54) = 1;
  ++*((_DWORD *)this + 94);
  v55 = *((_DWORD *)this + 98);
  if (v55 == *((_DWORD *)this + 99))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 384, 1, 1);
    v55 = *((_DWORD *)this + 98);
  }
  *(_BYTE *)(*((_QWORD *)this + 48) + v55) = 0;
  ++*((_DWORD *)this + 98);
  v56 = *((_DWORD *)this + 102);
  if (v56 == *((_DWORD *)this + 103))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 400, 1, 1);
    v56 = *((_DWORD *)this + 102);
  }
  *(_DWORD *)(*((_QWORD *)this + 50) + 4 * v56) = -1;
  ++*((_DWORD *)this + 102);
  v57 = *((_DWORD *)this + 106);
  if (v57 == *((_DWORD *)this + 107))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 416, 1, 1);
    v57 = *((_DWORD *)this + 106);
  }
  *(_DWORD *)(*((_QWORD *)this + 52) + 4 * v57) = -1;
  ++*((_DWORD *)this + 106);
  v58 = *((_DWORD *)this + 110);
  if (v58 == *((_DWORD *)this + 111))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 432, 1, 1);
    v58 = *((_DWORD *)this + 110);
  }
  *(_DWORD *)(*((_QWORD *)this + 54) + 4 * v58) = -1;
  ++*((_DWORD *)this + 110);
  v59 = *((_DWORD *)this + 114);
  if (v59 == *((_DWORD *)this + 115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 448, 1, 1);
    v59 = *((_DWORD *)this + 114);
  }
  *(_DWORD *)(*((_QWORD *)this + 56) + 4 * v59) = -1;
  ++*((_DWORD *)this + 114);
  v60 = *((_DWORD *)this + 130);
  if (v60 == *((_DWORD *)this + 131))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 512, 1, 1);
    v60 = *((_DWORD *)this + 130);
  }
  *(_DWORD *)(*((_QWORD *)this + 64) + 4 * v60) = 0;
  ++*((_DWORD *)this + 130);
  v61 = *((_DWORD *)this + 122);
  if (v61 == *((_DWORD *)this + 123))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 480, 1, 1);
    v61 = *((_DWORD *)this + 122);
  }
  *(_BYTE *)(*((_QWORD *)this + 60) + v61) = 0;
  ++*((_DWORD *)this + 122);
  v62 = *((_DWORD *)this + 150);
  if (v62 == *((_DWORD *)this + 151))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 592, 1, 1);
    v62 = *((_DWORD *)this + 150);
  }
  v63 = (_QWORD *)(*((_QWORD *)this + 74) + 16 * v62);
  *v63 = 0;
  v63[1] = 0;
  ++*((_DWORD *)this + 150);
  v64 = *((_DWORD *)this + 118);
  if (v64 == *((_DWORD *)this + 119))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 464, 1, 1);
    v64 = *((_DWORD *)this + 118);
  }
  *(_BYTE *)(*((_QWORD *)this + 58) + v64) = 1;
  ++*((_DWORD *)this + 118);
  v65 = *((_DWORD *)this + 172);
  if (v65 == *((_DWORD *)this + 173))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 680, 1, 1);
    v65 = *((_DWORD *)this + 172);
  }
  *(_BYTE *)(*((_QWORD *)this + 85) + v65) = 1;
  ++*((_DWORD *)this + 172);
  v66 = *((_DWORD *)this + 126);
  if (v66 == *((_DWORD *)this + 127))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 496, 1, 1);
    v66 = *((_DWORD *)this + 126);
  }
  *(_DWORD *)(*((_QWORD *)this + 62) + 4 * v66) = 0;
  ++*((_DWORD *)this + 126);
  v67 = *((_DWORD *)this + 134);
  if (v67 == *((_DWORD *)this + 135))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 528, 1, 1);
    v67 = *((_DWORD *)this + 134);
  }
  *(_WORD *)(*((_QWORD *)this + 66) + 2 * v67) = 127;
  *((_DWORD *)this + 134) = v67 + 1;
  v68 = *((_DWORD *)this + 138);
  if (v68 == *((_DWORD *)this + 139))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 544, 1, 1);
    v68 = *((_DWORD *)this + 138);
  }
  *(_BYTE *)(*((_QWORD *)this + 68) + v68) = 1;
  ++*((_DWORD *)this + 138);
  v69 = *a3 == 0;
  v70 = *((_DWORD *)this + 142);
  if (v70 == *((_DWORD *)this + 143))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 560, 1, 1);
    v70 = *((_DWORD *)this + 142);
  }
  *(_BYTE *)(*((_QWORD *)this + 70) + v70) = v69;
  ++*((_DWORD *)this + 142);
  v71 = *((_DWORD *)this + 158);
  if (v71 == *((_DWORD *)this + 159))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 624, 1, 1);
    v71 = *((_DWORD *)this + 158);
  }
  *(_BYTE *)(*((_QWORD *)this + 78) + v71) = 0;
  ++*((_DWORD *)this + 158);
  v72 = *((_DWORD *)this + 168);
  if (v72 == *((_DWORD *)this + 169))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 664, 1, 1);
    v72 = *((_DWORD *)this + 168);
  }
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)(*((_QWORD *)this + 83) + 16 * v72), (const PhnIndexSet *)v77);
  ++*((_DWORD *)this + 168);
  if ((_DWORD)v15)
  {
LABEL_91:
    v73 = *((_QWORD *)this + 16) + 16 * a2;
    v75 = (unsigned int *)(v73 + 8);
    v74 = *(_DWORD *)(v73 + 8);
    if (v74 == *(_DWORD *)(v73 + 12))
    {
      DgnPrimArray<unsigned int>::reallocElts(*((_QWORD *)this + 16) + 16 * a2, 1, 1);
      v74 = *v75;
    }
    *(_DWORD *)(*(_QWORD *)v73 + 4 * v74) = v15;
    ++*v75;
  }
LABEL_94:
  *(_DWORD *)(*((_QWORD *)this + 14) + 4 * v15) = a2;
  *(_WORD *)(*((_QWORD *)this + 6) + 2 * v15) = *a3;
  *(_DWORD *)(*((_QWORD *)this + 8) + 4 * v15) = 0;
  if (*(_BYTE *)(*((_QWORD *)this + 70) + v15))
    *((_DWORD *)this + 183) ^= StateMgr::computeOneStateIdNameChecksum(this, v15);
  BitArray::~BitArray((BitArray *)v77);
  return v15;
}

void sub_2097FA3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  BitArray::~BitArray((BitArray *)va);
  _Unwind_Resume(a1);
}

void StateMgr::setEndOfUtteranceAllowed(StateMgr *this, unsigned int a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;

  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  if (*(_WORD *)(*((_QWORD *)this + 20) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2230, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v11, v12, (char)"setEndOfUtteranceAllowed");
  if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2233, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v11, v12, (char)"setEndOfUtteranceAllowed");
  if (*(_WORD *)(*((_QWORD *)this + 26) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2236, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v11, v12, (char)"setEndOfUtteranceAllowed");
  *(_BYTE *)(*((_QWORD *)this + 4) + a2) = a3;
}

void StateMgr::saveStateMgr(StateMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  DgnStream *v13;
  uint64_t CurrentSubDirComponents;
  unsigned int v15;

  v12 = *((_DWORD *)this + 178);
  if (*((_DWORD *)this + 181))
    ++v12;
  if (*((_DWORD *)this + 180) != v12 + 1 || *(_DWORD *)(*((_QWORD *)this + 18) + 8))
  {
    if (a4)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1115, (uint64_t)"voc/statemgr", 18, (uint64_t)"%s", a7, a8, (char)&errStr_voc_statemgr_E_MIXED_TEXT_AND_BINARY_SUBFILES);
    v13 = OpenAndWriteMrecHeader((uint64_t)a2, 0x59u, a5, "MRSTA!? ", 24, 44);
    v15 = 0;
    writeObject<DgnCollArray<unsigned int,WordList>>((uint64_t)v13, (uint64_t)this, &v15);
    writeObject<unsigned char>((uint64_t)v13, (uint64_t)this + 32, &v15);
    writeObject<unsigned short>((uint64_t)v13, (uint64_t)this + 48, &v15);
    writeObject<unsigned int>((uint64_t)v13, (uint64_t)this + 64, &v15);
    writeObject<DgnPrimArray<unsigned short>>((uint64_t)v13, (uint64_t)this + 80, &v15);
    writeObject<DgnString>((uint64_t)v13, (uint64_t)this + 96, &v15);
    writeObject<unsigned int>((uint64_t)v13, (uint64_t)this + 112, &v15);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v13, (uint64_t)this + 128, &v15);
    writeObject<DgnPrimArray<unsigned short>>((uint64_t)v13, (uint64_t)this + 144, &v15);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v13, (uint64_t)this + 224, &v15);
    writeObject<DgnPrimArray<unsigned short>>((uint64_t)v13, (uint64_t)this + 240, &v15);
    writeObject<DgnArray<ParseToken>>((uint64_t)v13, (uint64_t)this + 256, &v15);
    writeObject<unsigned int>((uint64_t)v13, (uint64_t)this + 272, &v15);
    writeObject<unsigned int>((uint64_t)v13, (uint64_t)this + 288, &v15);
    writeObject<unsigned char>((uint64_t)v13, (uint64_t)this + 304, &v15);
    writeObject<unsigned char>((uint64_t)v13, (uint64_t)this + 320, &v15);
    writeObject<unsigned char>((uint64_t)v13, (uint64_t)this + 336, &v15);
    writeObject<unsigned char>((uint64_t)v13, (uint64_t)this + 352, &v15);
    writeObject<unsigned char>((uint64_t)v13, (uint64_t)this + 368, &v15);
    writeObject<unsigned char>((uint64_t)v13, (uint64_t)this + 384, &v15);
    writeObject<unsigned int>((uint64_t)v13, (uint64_t)this + 400, &v15);
    writeObject<unsigned int>((uint64_t)v13, (uint64_t)this + 416, &v15);
    writeObject<unsigned int>((uint64_t)v13, (uint64_t)this + 432, &v15);
    writeObject<unsigned int>((uint64_t)v13, (uint64_t)this + 448, &v15);
    writeObject<unsigned int>((uint64_t)v13, (uint64_t)this + 512, &v15);
    writeObject<unsigned char>((uint64_t)v13, (uint64_t)this + 480, &v15);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v13, (uint64_t)this + 592, &v15);
    writeObject<unsigned char>((uint64_t)v13, (uint64_t)this + 464, &v15);
    writeObject<unsigned int>((uint64_t)v13, (uint64_t)this + 496, &v15);
    writeObject<unsigned char>((uint64_t)v13, (uint64_t)this + 544, &v15);
    writeObject<unsigned char>((uint64_t)v13, (uint64_t)this + 560, &v15);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v13, (uint64_t)this + 576, &v15);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v13, (uint64_t)this + 608, &v15);
    writeObject<unsigned int>((uint64_t)v13, (uint64_t)this + 704, &v15);
    writeObject((uint64_t)v13, (int *)this + 180, &v15);
    writeObject((uint64_t)v13, (int *)this + 181, &v15);
    writeObject((uint64_t)v13, (int *)this + 183, &v15);
    EnvMgr::saveEnvMgrToStream(*((EnvMgr **)this + 94), v13, &v15, 1, 0);
    EnvMgr::saveEnvMgrToStream(*((EnvMgr **)this + 95), v13, &v15, 1, 0);
    writeObjectChecksum((uint64_t)v13, (int *)&v15);
    CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x59u, v15);
    if (v13)
    {
      (**(void (***)(DgnStream *))v13)(v13);
      MemChunkFree(v13, 0);
    }
  }
}

uint64_t writeObject<DgnCollArray<unsigned int,WordList>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = DgnCollArray<unsigned int,WordList>::writeObject((unsigned __int8 *)(*(_QWORD *)a2 + v7), a1, a3);
      ++v8;
      v7 += 80;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<DgnPrimArray<unsigned short>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<unsigned short>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<DgnPrimArray<unsigned int>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<unsigned int>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void StateMgr::printSize(StateMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  int v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  int v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  int v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  uint64_t v312;
  int v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  uint64_t v331;
  int v332;
  unsigned int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  void *v342;
  uint64_t v343;
  uint64_t v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  void *v352;
  uint64_t v353;
  int v354;
  unsigned int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  void *v364;
  uint64_t v365;
  int v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  void *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  void *v390;
  uint64_t v391;
  int v392;
  unsigned int v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  void *v402;
  uint64_t v403;
  uint64_t v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  void *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  unsigned int v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  void *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  void *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  void *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  void *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  unsigned int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  void *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  void *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  void *v477;
  EnvMgr *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  void *v484;
  EnvMgr *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  void *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  void *v496;
  uint64_t v497;
  unint64_t v498;
  unint64_t v499;
  unint64_t v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  uint64_t v504;
  uint64_t v505;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1143, (DgnString *)&v500);
  if ((_DWORD)v501)
    v16 = (void *)v500;
  else
    v16 = &unk_209A608EE;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A608EE, a3, &unk_209A608EE, v16);
  DgnString::~DgnString((DgnString *)&v500);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A608EE);
  v21 = sizeObject<DgnCollArray<unsigned int,WordList>>((uint64_t)this, 0);
  v22 = sizeObject<DgnCollArray<unsigned int,WordList>>((uint64_t)this, 1);
  LOBYTE(v500) = 0;
  *(_DWORD *)((char *)&v500 + 2) = 0;
  v501 = 0u;
  v502 = 0u;
  v503 = 0u;
  v504 = 0;
  v505 = 0;
  DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray((uint64_t)&v500);
  v23 = (a3 + 1);
  v497 = a3;
  v24 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v29 = (void *)v500;
  else
    v29 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, v23, &unk_209A608EE, v24, v24, v29, v21, v22, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v21;
  *a5 += v22;
  v30 = sizeObject<BitArray *>((uint64_t)this + 16, 0);
  v31 = sizeObject<BitArray *>((uint64_t)this + 16, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v36 = (void *)v500;
  else
    v36 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v23, &unk_209A608EE, v24, v24, v36, v30, v31, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v30;
  *a5 += v31;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v37 = 12;
  else
    v37 = 16;
  v38 = *((_DWORD *)this + 10);
  v39 = *((_DWORD *)this + 11);
  v40 = v39 >= v38;
  v41 = v39 - v38;
  if (v40)
  {
    v43 = v38 & ~(v38 >> 31);
    v38 = 0;
    v42 = v37 + v43;
    v37 += v43 + v41;
  }
  else
  {
    v42 = v37;
  }
  v44 = v38;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v49 = (void *)v500;
  else
    v49 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, v23, &unk_209A608EE, v24, v24, v49, v37, v42, v44);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v37;
  *a5 += v42;
  *a6 += v44;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v50 = 12;
  else
    v50 = 16;
  v51 = *((unsigned int *)this + 14);
  v52 = *((_DWORD *)this + 15);
  if (v52 >= v51)
  {
    v53 = 0;
    if ((int)v51 > 0)
      v50 = (v50 | 2) + 2 * (v51 - 1);
    v54 = v50 + 2 * (v52 - v51);
  }
  else
  {
    v53 = 2 * v51;
    v54 = v50;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v59 = (void *)v500;
  else
    v59 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v23, &unk_209A608EE, v24, v24, v59, v54, v50, v53);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v54;
  *a5 += v50;
  *a6 += v53;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v60 = 12;
  else
    v60 = 16;
  v61 = *((unsigned int *)this + 18);
  v62 = *((_DWORD *)this + 19);
  if (v62 >= v61)
  {
    v63 = 0;
    if ((int)v61 > 0)
      v60 += 4 * (v61 - 1) + 4;
    v64 = v60 + 4 * (v62 - v61);
  }
  else
  {
    v63 = 4 * v61;
    v64 = v60;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v69 = (void *)v500;
  else
    v69 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v23, &unk_209A608EE, v24, v24, v69, v64, v60, v63);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v64;
  *a5 += v60;
  *a6 += v63;
  v70 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 80, 0);
  v71 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 80, 1);
  v500 = 0;
  *(_QWORD *)&v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v76 = (void *)v500;
  else
    v76 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v23, &unk_209A608EE, v24, v24, v76, v70, v71, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v70;
  *a5 += v71;
  v77 = sizeObject<DgnString>((uint64_t)this + 96, 0);
  v78 = sizeObject<DgnString>((uint64_t)this + 96, 1);
  v79 = sizeObject<DgnString>((uint64_t)this + 96, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v84 = (void *)v500;
  else
    v84 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v23, &unk_209A608EE, v24, v24, v84, v77, v78, v79);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v77;
  *a5 += v78;
  *a6 += v79;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v85 = 12;
  else
    v85 = 16;
  v86 = *((unsigned int *)this + 30);
  v87 = *((_DWORD *)this + 31);
  if (v87 >= v86)
  {
    v88 = 0;
    if ((int)v86 > 0)
      v85 += 4 * (v86 - 1) + 4;
    v89 = v85 + 4 * (v87 - v86);
  }
  else
  {
    v88 = 4 * v86;
    v89 = v85;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v94 = (void *)v500;
  else
    v94 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, v23, &unk_209A608EE, v24, v24, v94, v89, v85, v88);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v89;
  *a5 += v85;
  *a6 += v88;
  v95 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 128, 0);
  v96 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 128, 1);
  v500 = 0;
  *(_QWORD *)&v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v101 = (void *)v500;
  else
    v101 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v23, &unk_209A608EE, v24, v24, v101, v95, v96, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v95;
  *a5 += v96;
  v102 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 144, 0);
  v103 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 144, 1);
  v500 = 0;
  *(_QWORD *)&v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v108 = (void *)v500;
  else
    v108 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v23, &unk_209A608EE, v24, v24, v108, v102, v103, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v102;
  *a5 += v103;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v109 = 12;
  else
    v109 = 16;
  v110 = *((unsigned int *)this + 42);
  v111 = *((_DWORD *)this + 43);
  if (v111 >= v110)
  {
    v112 = 0;
    if ((int)v110 > 0)
      v109 = (v109 | 2) + 2 * (v110 - 1);
    v113 = v109 + 2 * (v111 - v110);
  }
  else
  {
    v112 = 2 * v110;
    v113 = v109;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v118 = (void *)v500;
  else
    v118 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v23, &unk_209A608EE, v24, v24, v118, v113, v109, v112);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v113;
  *a5 += v109;
  *a6 += v112;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v119 = 12;
  else
    v119 = 16;
  v120 = *((unsigned int *)this + 46);
  v121 = *((_DWORD *)this + 47);
  if (v121 >= v120)
  {
    v122 = 0;
    if ((int)v120 > 0)
      v119 = (v119 | 2) + 2 * (v120 - 1);
    v123 = v119 + 2 * (v121 - v120);
  }
  else
  {
    v122 = 2 * v120;
    v123 = v119;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v128 = (void *)v500;
  else
    v128 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v124, v125, v126, v127, v23, &unk_209A608EE, v24, v24, v128, v123, v119, v122);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v123;
  *a5 += v119;
  *a6 += v122;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v129 = 12;
  else
    v129 = 16;
  v130 = *((unsigned int *)this + 50);
  v131 = *((_DWORD *)this + 51);
  if (v131 >= v130)
  {
    v132 = 0;
    if ((int)v130 > 0)
      v129 = (v129 | 2) + 2 * (v130 - 1);
    v133 = v129 + 2 * (v131 - v130);
  }
  else
  {
    v132 = 2 * v130;
    v133 = v129;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v138 = (void *)v500;
  else
    v138 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v134, v135, v136, v137, v23, &unk_209A608EE, v24, v24, v138, v133, v129, v132);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v133;
  *a5 += v129;
  *a6 += v132;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v139 = 12;
  else
    v139 = 16;
  v140 = *((unsigned int *)this + 54);
  v141 = *((_DWORD *)this + 55);
  if (v141 >= v140)
  {
    v142 = 0;
    if ((int)v140 > 0)
      v139 = (v139 | 2) + 2 * (v140 - 1);
    v143 = v139 + 2 * (v141 - v140);
  }
  else
  {
    v142 = 2 * v140;
    v143 = v139;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v148 = (void *)v500;
  else
    v148 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v23, &unk_209A608EE, v24, v24, v148, v143, v139, v142);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v143;
  *a5 += v139;
  *a6 += v142;
  v149 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 224, 0);
  v150 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 224, 1);
  v500 = 0;
  *(_QWORD *)&v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v155 = (void *)v500;
  else
    v155 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v151, v152, v153, v154, v23, &unk_209A608EE, v24, v24, v155, v149, v150, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v149;
  *a5 += v150;
  v156 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 240, 0);
  v157 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 240, 1);
  v500 = 0;
  *(_QWORD *)&v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v162 = (void *)v500;
  else
    v162 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v158, v159, v160, v161, v23, &unk_209A608EE, v24, v24, v162, v156, v157, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v156;
  *a5 += v157;
  v163 = sizeObject<DgnArray<ParseToken>>((uint64_t)this + 256, 0);
  v164 = sizeObject<DgnArray<ParseToken>>((uint64_t)this + 256, 1);
  v500 = 0;
  *(_QWORD *)&v501 = 0;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v169 = (void *)v500;
  else
    v169 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v165, v166, v167, v168, v23, &unk_209A608EE, v24, v24, v169, v163, v164, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v163;
  *a5 += v164;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v170 = 12;
  else
    v170 = 16;
  v171 = *((unsigned int *)this + 70);
  v172 = *((_DWORD *)this + 71);
  if (v172 >= v171)
  {
    v173 = 0;
    if ((int)v171 > 0)
      v170 += 4 * (v171 - 1) + 4;
    v174 = v170 + 4 * (v172 - v171);
  }
  else
  {
    v173 = 4 * v171;
    v174 = v170;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v179 = (void *)v500;
  else
    v179 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v175, v176, v177, v178, v23, &unk_209A608EE, v24, v24, v179, v174, v170, v173);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v174;
  *a5 += v170;
  *a6 += v173;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v180 = 12;
  else
    v180 = 16;
  v181 = *((unsigned int *)this + 74);
  v182 = *((_DWORD *)this + 75);
  if (v182 >= v181)
  {
    v183 = 0;
    if ((int)v181 > 0)
      v180 += 4 * (v181 - 1) + 4;
    v184 = v180 + 4 * (v182 - v181);
  }
  else
  {
    v183 = 4 * v181;
    v184 = v180;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v189 = (void *)v500;
  else
    v189 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v185, v186, v187, v188, v23, &unk_209A608EE, v24, v24, v189, v184, v180, v183);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v184;
  *a5 += v180;
  *a6 += v183;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v190 = 12;
  else
    v190 = 16;
  v191 = *((_DWORD *)this + 78);
  v192 = *((_DWORD *)this + 79);
  v40 = v192 >= v191;
  v193 = v192 - v191;
  if (v40)
  {
    v195 = v191 & ~(v191 >> 31);
    v191 = 0;
    v194 = v190 + v195;
    v190 += v195 + v193;
  }
  else
  {
    v194 = v190;
  }
  v196 = v191;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v201 = (void *)v500;
  else
    v201 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v197, v198, v199, v200, v23, &unk_209A608EE, v24, v24, v201, v190, v194, v196);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v190;
  *a5 += v194;
  *a6 += v196;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v202 = 12;
  else
    v202 = 16;
  v203 = *((_DWORD *)this + 82);
  v204 = *((_DWORD *)this + 83);
  v40 = v204 >= v203;
  v205 = v204 - v203;
  if (v40)
  {
    v207 = v203 & ~(v203 >> 31);
    v203 = 0;
    v206 = v202 + v207;
    v202 += v207 + v205;
  }
  else
  {
    v206 = v202;
  }
  v208 = v203;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v213 = (void *)v500;
  else
    v213 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v209, v210, v211, v212, v23, &unk_209A608EE, v24, v24, v213, v202, v206, v208);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v202;
  *a5 += v206;
  *a6 += v208;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v214 = 12;
  else
    v214 = 16;
  v215 = *((_DWORD *)this + 86);
  v216 = *((_DWORD *)this + 87);
  v40 = v216 >= v215;
  v217 = v216 - v215;
  if (v40)
  {
    v219 = v215 & ~(v215 >> 31);
    v215 = 0;
    v218 = v214 + v219;
    v214 += v219 + v217;
  }
  else
  {
    v218 = v214;
  }
  v220 = v215;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v225 = (void *)v500;
  else
    v225 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v221, v222, v223, v224, v23, &unk_209A608EE, v24, v24, v225, v214, v218, v220);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v214;
  *a5 += v218;
  *a6 += v220;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v226 = 12;
  else
    v226 = 16;
  v227 = *((_DWORD *)this + 90);
  v228 = *((_DWORD *)this + 91);
  v40 = v228 >= v227;
  v229 = v228 - v227;
  if (v40)
  {
    v231 = v227 & ~(v227 >> 31);
    v227 = 0;
    v230 = v226 + v231;
    v226 += v231 + v229;
  }
  else
  {
    v230 = v226;
  }
  v232 = v227;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v237 = (void *)v500;
  else
    v237 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v233, v234, v235, v236, v23, &unk_209A608EE, v24, v24, v237, v226, v230, v232);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v226;
  *a5 += v230;
  *a6 += v232;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v238 = 12;
  else
    v238 = 16;
  v239 = *((_DWORD *)this + 94);
  v240 = *((_DWORD *)this + 95);
  v40 = v240 >= v239;
  v241 = v240 - v239;
  if (v40)
  {
    v243 = v239 & ~(v239 >> 31);
    v239 = 0;
    v242 = v238 + v243;
    v238 += v243 + v241;
  }
  else
  {
    v242 = v238;
  }
  v244 = v239;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v249 = (void *)v500;
  else
    v249 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v245, v246, v247, v248, v23, &unk_209A608EE, v24, v24, v249, v238, v242, v244);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v238;
  *a5 += v242;
  *a6 += v244;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v250 = 12;
  else
    v250 = 16;
  v251 = *((_DWORD *)this + 98);
  v252 = *((_DWORD *)this + 99);
  v40 = v252 >= v251;
  v253 = v252 - v251;
  if (v40)
  {
    v255 = v251 & ~(v251 >> 31);
    v251 = 0;
    v254 = v250 + v255;
    v250 += v255 + v253;
  }
  else
  {
    v254 = v250;
  }
  v256 = v251;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v261 = (void *)v500;
  else
    v261 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v257, v258, v259, v260, v23, &unk_209A608EE, v24, v24, v261, v250, v254, v256);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v250;
  *a5 += v254;
  *a6 += v256;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v262 = 12;
  else
    v262 = 16;
  v263 = *((unsigned int *)this + 102);
  v264 = *((_DWORD *)this + 103);
  if (v264 >= v263)
  {
    v265 = 0;
    if ((int)v263 > 0)
      v262 += 4 * (v263 - 1) + 4;
    v266 = v262 + 4 * (v264 - v263);
  }
  else
  {
    v265 = 4 * v263;
    v266 = v262;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v271 = (void *)v500;
  else
    v271 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v267, v268, v269, v270, v23, &unk_209A608EE, v24, v24, v271, v266, v262, v265);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v266;
  *a5 += v262;
  *a6 += v265;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v272 = 12;
  else
    v272 = 16;
  v273 = *((unsigned int *)this + 106);
  v274 = *((_DWORD *)this + 107);
  if (v274 >= v273)
  {
    v275 = 0;
    if ((int)v273 > 0)
      v272 += 4 * (v273 - 1) + 4;
    v276 = v272 + 4 * (v274 - v273);
  }
  else
  {
    v275 = 4 * v273;
    v276 = v272;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v281 = (void *)v500;
  else
    v281 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v277, v278, v279, v280, v23, &unk_209A608EE, v24, v24, v281, v276, v272, v275);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v276;
  *a5 += v272;
  *a6 += v275;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v282 = 12;
  else
    v282 = 16;
  v283 = *((unsigned int *)this + 110);
  v284 = *((_DWORD *)this + 111);
  if (v284 >= v283)
  {
    v285 = 0;
    if ((int)v283 > 0)
      v282 += 4 * (v283 - 1) + 4;
    v286 = v282 + 4 * (v284 - v283);
  }
  else
  {
    v285 = 4 * v283;
    v286 = v282;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v291 = (void *)v500;
  else
    v291 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v287, v288, v289, v290, v23, &unk_209A608EE, v24, v24, v291, v286, v282, v285);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v286;
  *a5 += v282;
  *a6 += v285;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v292 = 12;
  else
    v292 = 16;
  v293 = *((unsigned int *)this + 114);
  v294 = *((_DWORD *)this + 115);
  if (v294 >= v293)
  {
    v295 = 0;
    if ((int)v293 > 0)
      v292 += 4 * (v293 - 1) + 4;
    v296 = v292 + 4 * (v294 - v293);
  }
  else
  {
    v295 = 4 * v293;
    v296 = v292;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v301 = (void *)v500;
  else
    v301 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v297, v298, v299, v300, v23, &unk_209A608EE, v24, v24, v301, v296, v292, v295);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v296;
  *a5 += v292;
  *a6 += v295;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v302 = 12;
  else
    v302 = 16;
  v303 = *((unsigned int *)this + 130);
  v304 = *((_DWORD *)this + 131);
  if (v304 >= v303)
  {
    v305 = 0;
    if ((int)v303 > 0)
      v302 += 4 * (v303 - 1) + 4;
    v306 = v302 + 4 * (v304 - v303);
  }
  else
  {
    v305 = 4 * v303;
    v306 = v302;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v311 = (void *)v500;
  else
    v311 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v307, v308, v309, v310, v23, &unk_209A608EE, v24, v24, v311, v306, v302, v305);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v306;
  *a5 += v302;
  *a6 += v305;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v312 = 12;
  else
    v312 = 16;
  v313 = *((_DWORD *)this + 122);
  v314 = *((_DWORD *)this + 123);
  v40 = v314 >= v313;
  v315 = v314 - v313;
  if (v40)
  {
    v317 = v313 & ~(v313 >> 31);
    v313 = 0;
    v316 = v312 + v317;
    v312 += v317 + v315;
  }
  else
  {
    v316 = v312;
  }
  v318 = v313;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v323 = (void *)v500;
  else
    v323 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v319, v320, v321, v322, v23, &unk_209A608EE, v24, v24, v323, v312, v316, v318);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v312;
  *a5 += v316;
  *a6 += v318;
  v324 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 592, 0);
  v325 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 592, 1);
  v500 = 0;
  *(_QWORD *)&v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v330 = (void *)v500;
  else
    v330 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v326, v327, v328, v329, v23, &unk_209A608EE, v24, v24, v330, v324, v325, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v324;
  *a5 += v325;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v331 = 12;
  else
    v331 = 16;
  v332 = *((_DWORD *)this + 118);
  v333 = *((_DWORD *)this + 119);
  v40 = v333 >= v332;
  v334 = v333 - v332;
  if (v40)
  {
    v336 = v332 & ~(v332 >> 31);
    v332 = 0;
    v335 = v331 + v336;
    v331 += v336 + v334;
  }
  else
  {
    v335 = v331;
  }
  v337 = v332;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v342 = (void *)v500;
  else
    v342 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v338, v339, v340, v341, v23, &unk_209A608EE, v24, v24, v342, v331, v335, v337);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v331;
  *a5 += v335;
  *a6 += v337;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v343 = 12;
  else
    v343 = 16;
  v344 = *((unsigned int *)this + 126);
  v345 = *((_DWORD *)this + 127);
  if (v345 >= v344)
  {
    v346 = 0;
    if ((int)v344 > 0)
      v343 += 4 * (v344 - 1) + 4;
    v347 = v343 + 4 * (v345 - v344);
  }
  else
  {
    v346 = 4 * v344;
    v347 = v343;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v352 = (void *)v500;
  else
    v352 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v348, v349, v350, v351, v23, &unk_209A608EE, v24, v24, v352, v347, v343, v346);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v347;
  *a5 += v343;
  *a6 += v346;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v353 = 12;
  else
    v353 = 16;
  v354 = *((_DWORD *)this + 138);
  v355 = *((_DWORD *)this + 139);
  v40 = v355 >= v354;
  v356 = v355 - v354;
  if (v40)
  {
    v358 = v354 & ~(v354 >> 31);
    v354 = 0;
    v357 = v353 + v358;
    v353 += v358 + v356;
  }
  else
  {
    v357 = v353;
  }
  v359 = v354;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v364 = (void *)v500;
  else
    v364 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v360, v361, v362, v363, v23, &unk_209A608EE, v24, v24, v364, v353, v357, v359);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v353;
  *a5 += v357;
  *a6 += v359;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v365 = 12;
  else
    v365 = 16;
  v366 = *((_DWORD *)this + 142);
  v367 = *((_DWORD *)this + 143);
  v40 = v367 >= v366;
  v368 = v367 - v366;
  if (v40)
  {
    v370 = v366 & ~(v366 >> 31);
    v366 = 0;
    v369 = v365 + v370;
    v365 += v370 + v368;
  }
  else
  {
    v369 = v365;
  }
  v371 = v366;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v376 = (void *)v500;
  else
    v376 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v372, v373, v374, v375, v23, &unk_209A608EE, v24, v24, v376, v365, v369, v371);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v365;
  *a5 += v369;
  *a6 += v371;
  v377 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 576, 0);
  v378 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 576, 1);
  v500 = 0;
  *(_QWORD *)&v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v383 = (void *)v500;
  else
    v383 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v379, v380, v381, v382, v23, &unk_209A608EE, v24, v24, v383, v377, v378, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v377;
  *a5 += v378;
  v384 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 608, 0);
  v385 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 608, 1);
  v500 = 0;
  *(_QWORD *)&v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v390 = (void *)v500;
  else
    v390 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v386, v387, v388, v389, v23, &unk_209A608EE, v24, v24, v390, v384, v385, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v384;
  *a5 += v385;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v391 = 12;
  else
    v391 = 16;
  v392 = *((_DWORD *)this + 158);
  v393 = *((_DWORD *)this + 159);
  v40 = v393 >= v392;
  v394 = v393 - v392;
  if (v40)
  {
    v396 = v392 & ~(v392 >> 31);
    v392 = 0;
    v395 = v391 + v396;
    v391 += v396 + v394;
  }
  else
  {
    v395 = v391;
  }
  v397 = v392;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v402 = (void *)v500;
  else
    v402 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v398, v399, v400, v401, v23, &unk_209A608EE, v24, v24, v402, v391, v395, v397);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v391;
  *a5 += v395;
  *a6 += v397;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v403 = 12;
  else
    v403 = 16;
  v404 = *((unsigned int *)this + 162);
  v405 = *((_DWORD *)this + 163);
  if (v405 >= v404)
  {
    v406 = 0;
    if ((int)v404 > 0)
      v403 += 4 * (v404 - 1) + 4;
    v407 = v403 + 4 * (v405 - v404);
  }
  else
  {
    v406 = 4 * v404;
    v407 = v403;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v412 = (void *)v500;
  else
    v412 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v408, v409, v410, v411, v23, &unk_209A608EE, v24, v24, v412, v407, v403, v406);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v407;
  *a5 += v403;
  *a6 += v406;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v417 = (void *)v500;
  else
    v417 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v413, v414, v415, v416, v23, &unk_209A608EE, v24, v24, v417, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v500);
  ++*a4;
  ++*a5;
  v418 = sizeObject<PhnIndexSet>((uint64_t)this + 664, 0);
  v419 = sizeObject<PhnIndexSet>((uint64_t)this + 664, 1);
  v420 = sizeObject<PhnIndexSet>((uint64_t)this + 664, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v425 = (void *)v500;
  else
    v425 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v421, v422, v423, v424, v23, &unk_209A608EE, v24, v24, v425, v418, v419, v420);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v418;
  *a5 += v419;
  *a6 += v420;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v426 = 12;
  else
    v426 = 16;
  v427 = *((unsigned int *)this + 178);
  v428 = *((_DWORD *)this + 179);
  if (v428 >= v427)
  {
    v429 = 0;
    if ((int)v427 > 0)
      v426 += 4 * (v427 - 1) + 4;
    v430 = v426 + 4 * (v428 - v427);
  }
  else
  {
    v429 = 4 * v427;
    v430 = v426;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v435 = (void *)v500;
  else
    v435 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v431, v432, v433, v434, v23, &unk_209A608EE, v24, v24, v435, v430, v426, v429);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v430;
  *a5 += v426;
  *a6 += v429;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v440 = (void *)v500;
  else
    v440 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v436, v437, v438, v439, v23, &unk_209A608EE, v24, v24, v440, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v445 = (void *)v500;
  else
    v445 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v441, v442, v443, v444, v23, &unk_209A608EE, v24, v24, v445, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v450 = (void *)v500;
  else
    v450 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v446, v447, v448, v449, v23, &unk_209A608EE, v24, v24, v450, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v455 = (void *)v500;
  else
    v455 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v451, v452, v453, v454, v23, &unk_209A608EE, v24, v24, v455, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v456 = 12;
  else
    v456 = 16;
  v457 = *((unsigned int *)this + 134);
  v458 = *((_DWORD *)this + 135);
  if (v458 >= v457)
  {
    v459 = 0;
    if ((int)v457 > 0)
      v456 = (v456 | 2) + 2 * (v457 - 1);
    v460 = v456 + 2 * (v458 - v457);
  }
  else
  {
    v459 = 2 * v457;
    v460 = v456;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if ((_DWORD)v501)
    v465 = (void *)v500;
  else
    v465 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v461, v462, v463, v464, v23, &unk_209A608EE, v24, v24, v465, v460, v456, v459);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v460;
  *a5 += v456;
  *a6 += v459;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v466 = 4;
  else
    v466 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1146, (DgnString *)&v500);
  if ((_DWORD)v501)
    v471 = (void *)v500;
  else
    v471 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v467, v468, v469, v470, v23, &unk_209A608EE, v24, v24, v471, v466, v466, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v466;
  *a5 += v466;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v472 = 4;
  else
    v472 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1147, (DgnString *)&v500);
  if ((_DWORD)v501)
    v477 = (void *)v500;
  else
    v477 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v473, v474, v475, v476, v23, &unk_209A608EE, v24, v24, v477, v472, v472, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v472;
  *a5 += v472;
  v478 = (EnvMgr *)*((_QWORD *)this + 94);
  if (v478)
  {
    v499 = 0;
    v500 = 0;
    v498 = 0;
    EnvMgr::printSize(v478, 0xFFFFFFFFLL, v23, &v500, &v499, &v498);
    *a4 += v500;
    *a5 += v499;
    *a6 += v498;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v479 = 4;
  else
    v479 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1149, (DgnString *)&v500);
  if ((_DWORD)v501)
    v484 = (void *)v500;
  else
    v484 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v480, v481, v482, v483, v23, &unk_209A608EE, v24, v24, v484, v479, v479, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v479;
  *a5 += v479;
  v485 = (EnvMgr *)*((_QWORD *)this + 95);
  if (v485)
  {
    v499 = 0;
    v500 = 0;
    v498 = 0;
    EnvMgr::printSize(v485, 0xFFFFFFFFLL, v23, &v500, &v499, &v498);
    *a4 += v500;
    *a5 += v499;
    *a6 += v498;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v486 = 4;
  else
    v486 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1151, (DgnString *)&v500);
  if ((_DWORD)v501)
    v491 = (void *)v500;
  else
    v491 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v487, v488, v489, v490, v23, &unk_209A608EE, v24, v24, v491, v486, v486, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v486;
  *a5 += v486;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1152, (DgnString *)&v500);
  if ((_DWORD)v501)
    v496 = (void *)v500;
  else
    v496 = &unk_209A608EE;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v492, v493, v494, v495, v497, &unk_209A608EE, (35 - v497), (35 - v497), v496, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v500);
}

void sub_2097FCD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnCollArray<unsigned int,WordList>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v9[2];
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = 0;
  v9[0] = 0;
  v10 = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = 0;
  if (a2 != 3)
  {
    v2 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v5 = *(unsigned int *)(a1 + 8);
      if ((int)v5 >= 1)
      {
        v6 = v5 + 1;
        do
        {
          if (a2 == 2)
            v7 = 80;
          else
            v7 = DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::sizeObject(*(_QWORD *)a1 + 80 * (v6 - 2), a2);
          v2 += v7;
          --v6;
        }
        while (v6 > 1);
      }
      if (!a2)
        v2 += 80 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray((uint64_t)v9);
  return v2;
}

void sub_2097FCF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<BitArray *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += BitArray::sizeObject(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t sizeObject<DgnPrimArray<unsigned short>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];

  v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  else
    v3 = 16;
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = v3;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 8);
      v2 = v3;
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        v2 = v3;
        do
          v2 += sizeObject<unsigned short>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v2;
}

void sub_2097FD134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *StateMgr::getName(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;

  StateMgr::verifyVisible(this, a2, a3, a4, a5, a6, a7, a8);
  v10 = (_DWORD *)(*((_QWORD *)this + 12) + 16 * a2);
  if (v10[2])
    return *(void **)v10;
  else
    return &unk_209A608EE;
}

unint64_t DgnPrimArray<unsigned int>::compact(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(result + 8);
  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v1 != (_DWORD)v2)
  {
    v3 = result;
    if ((_DWORD)v1)
    {
      v4 = 0;
      result = realloc_array(*(_QWORD **)result, &v4, 4 * v1, 4 * v1, 4 * v2, 0);
      *(_DWORD *)(v3 + 12) = result >> 2;
      *(_QWORD *)v3 = v4;
    }
    else
    {
      result = *(_QWORD *)result;
      if (*(_QWORD *)v3)
        result = MemChunkFree((_QWORD *)result, 0);
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 12) = 0;
    }
  }
  return result;
}

uint64_t StateMgr::precedingNonAcousticWordStateValid(StateMgr *this, uint64_t a2, uint64_t a3, DgnString *a4, uint64_t a5)
{
  if (!(_DWORD)a3)
    return 1;
  if (*(_DWORD *)(*((_QWORD *)this + 74) + 16 * a2 + 8))
  {
    DgnString::stringPrintf(a4, "State %d is a precedingNonAcousticWordState for other states", a3, (uint64_t)a4, a5, a2);
  }
  else if (*(_DWORD *)(*((_QWORD *)this + 64) + 4 * a3))
  {
    DgnString::stringPrintf(a4, "PrecedingNonAcousticWordState %d has another state as its precedingNonAcousticWordState", a3, (uint64_t)a4, a5, a3);
  }
  else
  {
    if (!*(_DWORD *)(*((_QWORD *)this + 62) + 4 * a3))
      return 1;
    DgnString::stringPrintf(a4, "PrecedingNonAcousticWordState %d has a word alias state", a3, (uint64_t)a4, a5, a3);
  }
  return 0;
}

void StateMgr::verifyVisible(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 180) <= a2 || !*(_BYTE *)(*((_QWORD *)this + 70) + a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1332, (uint64_t)"voc/statemgr", 1, (uint64_t)"%u", a7, a8, a2);
}

void StateMgr::verifyStateFull(StateMgr *this, unsigned int a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;

  if (a2 || (a4 & 1) == 0)
  {
    v8 = *((_DWORD *)this + 180);
    if (a3)
    {
      if (v8 > a2)
      {
        v9 = *((_QWORD *)this + 70);
        goto LABEL_8;
      }
    }
    else if (v8 > a2)
    {
      v9 = *((_QWORD *)this + 68);
LABEL_8:
      if (*(_BYTE *)(v9 + a2))
        return;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1339, (uint64_t)"voc/statemgr", 1, (uint64_t)"%u", a7, a8, a2);
  }
}

void StateMgr::verifyAliasingValid(StateMgr *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 && (*(_DWORD *)(*((_QWORD *)this + 72) + 16 * a2 + 8) || *(_DWORD *)(*((_QWORD *)this + 62) + 4 * a3)))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1344, (uint64_t)"voc/statemgr", 9, (uint64_t)"%s", a7, a8, (char)&errStr_voc_statemgr_E_CHAINED_WORD_ALIAS);
}

void StateMgr::verifyPrecedingNonAcousticWordStateValid(StateMgr *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;

  DgnString::DgnString((DgnString *)&v10);
  if ((StateMgr::precedingNonAcousticWordStateValid(this, a2, a3, (DgnString *)&v10, v6) & 1) == 0)
  {
    if (v11)
      LOBYTE(v9) = v10;
    else
      v9 = &unk_209A608EE;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1354, (uint64_t)"voc/statemgr", 35, (uint64_t)"%.500s", v7, v8, (char)v9);
  }
  DgnString::~DgnString((DgnString *)&v10);
}

void sub_2097FD478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t StateMgr::preAllocToEnsureStateId(uint64_t this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr *v9;
  unsigned int i;
  uint64_t v11;
  unsigned __int16 v12;

  v9 = (StateMgr *)this;
  *(_BYTE *)(this + 696) = 1;
  *(_BYTE *)(this + 656) = 0;
  for (i = *(_DWORD *)(this + 720); i < a2; i = *((_DWORD *)v9 + 180))
  {
    v12 = 0;
    this = StateMgr::newState(v9, 0, &v12, a4, a5, a6, a7, a8);
  }
  if (i >= 2)
  {
    v11 = 1;
    do
    {
      this = StateMgr::killState(v9, v11, 1, a4, a5, a6, a7, a8);
      v11 = (v11 + 1);
    }
    while (v11 < *((_DWORD *)v9 + 180));
  }
  *((_DWORD *)v9 + 182) = a2;
  return this;
}

uint64_t StateMgr::killState(StateMgr *this, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  if (*(_DWORD *)(*((_QWORD *)this + 16) + 16 * a2 + 8))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1834, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"delete");
  if (*(_DWORD *)(*((_QWORD *)this + 18) + 16 * a2 + 8))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1837, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"delete");
  if (*(_DWORD *)(*((_QWORD *)this + 10) + 16 * a2 + 8))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1841, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"delete");
  if (*(_WORD *)(*((_QWORD *)this + 20) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1844, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v13, v14, (char)"delete");
  if (*(_WORD *)(*((_QWORD *)this + 22) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1847, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v13, v14, (char)"delete");
  if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1850, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v13, v14, (char)"delete");
  if (*(_WORD *)(*((_QWORD *)this + 26) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1853, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v13, v14, (char)"delete");
  if (*(_DWORD *)(*((_QWORD *)this + 72) + 16 * a2 + 8))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1857, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"delete");
  if (*(_DWORD *)(*((_QWORD *)this + 74) + 16 * a2 + 8))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1861, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"delete");
  if (*(_DWORD *)(*((_QWORD *)this + 76) + 16 * a2 + 8))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1865, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"delete");
  return StateMgr::killStateInternal((EnvMgr **)this, a2, a3, 0, v11, v12, v13, v14);
}

uint64_t StateMgr::doneEnsureStateId(uint64_t this)
{
  *(_DWORD *)(this + 728) = 0;
  return this;
}

void sub_2097FDAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  BitArray::~BitArray((BitArray *)va);
  _Unwind_Resume(a1);
}

BOOL StateMgr::allTransitioningStatesAlreadyHaveRPA(StateMgr *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 76);
  v3 = *(unsigned int *)(v2 + 16 * a2 + 8);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(v2 + 16 * a2);
    do
    {
      v7 = *(unsigned int *)(v6 + 4 * v4);
      if ((_DWORD)v7 != a2 && *(_BYTE *)(*((_QWORD *)this + 85) + v7) != 1)
        break;
      v5 = ++v4 >= v3;
    }
    while (v3 != v4);
  }
  else
  {
    return 1;
  }
  return v5;
}

BOOL StateMgr::allTransitioningStatesHavePA(StateMgr *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 76);
  v3 = *(unsigned int *)(v2 + 16 * a2 + 8);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(v2 + 16 * a2);
    do
    {
      v7 = *(unsigned int *)(v6 + 4 * v4);
      if ((_DWORD)v7 != a2 && !*(_BYTE *)(*((_QWORD *)this + 58) + v7))
        break;
      v5 = ++v4 >= v3;
    }
    while (v3 != v4);
  }
  else
  {
    return 1;
  }
  return v5;
}

BOOL StateMgr::anyTransitionedStatesHavePA(StateMgr *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 28);
  v3 = *(unsigned int *)(v2 + 16 * a2 + 8);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v2 + 16 * a2);
    v6 = 1;
    do
    {
      v7 = *(unsigned int *)(v5 + 4 * v4);
      if ((_DWORD)v7 != a2 && *(_BYTE *)(*((_QWORD *)this + 58) + v7))
        break;
      v6 = ++v4 < v3;
    }
    while (v3 != v4);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL StateMgr::changeRecursivePrefilteringAllowed(StateMgr *this, unsigned int a2)
{
  uint64_t v3;
  _BOOL8 result;

  v3 = a2;
  if (*(_BYTE *)(*((_QWORD *)this + 58) + a2) == 1)
  {
    result = StateMgr::allTransitioningStatesAlreadyHaveRPA(this, a2);
    if (result)
    {
      *(_BYTE *)(*((_QWORD *)this + 85) + v3) = 1;
      return result;
    }
  }
  else if (*(_DWORD *)(*((_QWORD *)this + 28) + 16 * a2 + 8))
  {
    result = StateMgr::anyTransitionedStatesHavePA(this, a2);
    if (result)
      return result;
  }
  else
  {
    *(_BYTE *)(*((_QWORD *)this + 85) + a2) = 0;
    result = StateMgr::allTransitioningStatesHavePA(this, a2);
    if (result)
      return result;
  }
  *((_BYTE *)this + 696) = 1;
  return result;
}

uint64_t StateMgr::setColls(StateMgr *a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(a1, a2, a4, 0, a5, a6, a7, a8);
  return DgnCollArray<unsigned int,WordList>::setColls(*(_QWORD *)a1 + 80 * a2, a3);
}

uint64_t StateMgr::deleteWordIdNoPhones(StateMgr *this, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int ItemPairEnvId;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD *v28;

  if (!StateMgr::isWordIdInState(this, a2, a3, a4, a5, a6, a7, a8))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2105, (uint64_t)"voc/statemgr", 4, (uint64_t)"%u %u", v12, v13, a3);
  if (*(_WORD *)(*((_QWORD *)this + 20) + 2 * a2)
    && WordList::getIncludingLatticeRefCount(*(WordList **)(*((_QWORD *)this + 92) + 48), a3))
  {
    WordList::getIncludingLatticeRefCount(*(WordList **)(*((_QWORD *)this + 92) + 48), a3);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2112, (uint64_t)"voc/statemgr", 14, (uint64_t)"%.500s %d %d %d %d", v14, v15, (char)"word");
  }
  if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2116, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v12, v13, (char)"word");
  if (*(_WORD *)(*((_QWORD *)this + 26) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2119, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v12, v13, (char)"word");
  if (a4)
  {
    ItemPairEnvId = EnvMgr::getItemPairEnvId(*((EnvMgr **)this + 95), a2, a3);
    if (ItemPairEnvId)
    {
      EnvMgr::killEnv(*((EnvMgr **)this + 95), ItemPairEnvId, v17, v18, v19, v20, v21, v22);
      EnvMgr::setItemPairEnvId(*((EnvMgr **)this + 95), a2, a3, 0, v23, v24, v25, v26);
    }
  }
  DgnCollArray<unsigned int,WordList>::remove(*(_QWORD *)this + 80 * a2, a3);
  result = WordList::removeIncludingStateRef(*((_QWORD *)this + 93), a3);
  v28 = *(_QWORD **)(*((_QWORD *)this + 2) + 8 * a2);
  if (v28)
    *(_DWORD *)(*v28 + 4 * (a3 >> 5)) &= ~(1 << a3);
  return result;
}

BitArray *DgnDelete<BitArray>(BitArray *result)
{
  _QWORD *v1;

  if (result)
  {
    BitArray::~BitArray(result);
    return (BitArray *)MemChunkFree(v1, 0);
  }
  return result;
}

_QWORD *StateMgr::setEmptyStateTransition(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *result;

  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  v12 = a2;
  if (*(_WORD *)(*((_QWORD *)this + 20) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3116, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v10, v11, (char)"setEmptyStateTransition");
  if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3118, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v10, v11, (char)"setEmptyStateTransition");
  if (*(_WORD *)(*((_QWORD *)this + 26) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3121, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v10, v11, (char)"setEmptyStateTransition");
  if (!*((_BYTE *)this + 696) && !*(_BYTE *)(*((_QWORD *)this + 58) + a2))
  {
    v13 = *((_QWORD *)this + 85);
    if (*(_BYTE *)(v13 + a2) == 1)
    {
      if (StateMgr::allTransitioningStatesHavePA(this, a2))
        *(_BYTE *)(v13 + a2) = 0;
      else
        *((_BYTE *)this + 696) = 1;
    }
  }
  v14 = *((_QWORD *)this + 28) + 16 * a2;
  v16 = (_QWORD *)(v14 + 8);
  v15 = *(unsigned int *)(v14 + 8);
  v17 = *(_QWORD **)v14;
  if (*(_DWORD *)(v14 + 8))
  {
    v18 = 0;
    v19 = *((_QWORD *)this + 76);
    do
    {
      v20 = *((unsigned int *)v17 + v18);
      v21 = v19 + 16 * v20;
      v24 = *(_DWORD *)(v21 + 8);
      v22 = (_DWORD *)(v21 + 8);
      v23 = v24;
      if (v24)
      {
        v25 = *(_DWORD **)(v19 + 16 * v20);
        v26 = v23;
        v27 = v25;
        while (*v27 != a2)
        {
          ++v27;
          if (!--v26)
            goto LABEL_21;
        }
        *v27 = v25[(v23 - 1)];
        *v22 = v23 - 1;
        v15 = *(unsigned int *)v16;
      }
LABEL_21:
      ++v18;
    }
    while (v18 < v15);
  }
  if (v17)
  {
    MemChunkFree(v17, 0);
    *(_QWORD *)v14 = 0;
  }
  *v16 = 0;
  v28 = *((_QWORD *)this + 30) + 16 * a2;
  if (*(_QWORD *)v28)
  {
    MemChunkFree(*(_QWORD **)v28, 0);
    *(_QWORD *)v28 = 0;
  }
  *(_QWORD *)(v28 + 8) = 0;
  v29 = *((_QWORD *)this + 32) + 16 * v12;
  result = *(_QWORD **)v29;
  if (*(_QWORD *)v29)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)v29 = 0;
  }
  *(_QWORD *)(v29 + 8) = 0;
  return result;
}

void StateMgr::setPrecedingNonAcousticWordState(StateMgr *this, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  _BYTE v32[16];

  if (a4)
  {
    StateMgr::verifyStateFull(this, a2, 1, 0, a5, a6, a7, a8);
    StateMgr::verifyStateFull(this, a3, 1, 1, v11, v12, v13, v14);
    StateMgr::verifyPrecedingNonAcousticWordStateValid(this, a2, a3);
  }
  else
  {
    DgnString::DgnString((DgnString *)v32);
    DgnString::~DgnString((DgnString *)v32);
  }
  v21 = *((_QWORD *)this + 64);
  v22 = *(unsigned int *)(v21 + 4 * a2);
  if ((_DWORD)v22)
  {
    v23 = *((_QWORD *)this + 74);
    v24 = v23 + 16 * v22;
    v27 = *(_DWORD *)(v24 + 8);
    v25 = (_DWORD *)(v24 + 8);
    v26 = v27;
    if (v27)
    {
      v28 = *(_DWORD **)(v23 + 16 * v22);
      v29 = v26;
      v30 = v28;
      while (*v30 != (_DWORD)a2)
      {
        ++v30;
        if (!--v29)
          goto LABEL_11;
      }
      v31 = v26 - 1;
      *v30 = v28[v31];
      *v25 = v31;
    }
  }
LABEL_11:
  *(_DWORD *)(v21 + 4 * a2) = a3;
  if ((_DWORD)a3)
    StateMgr::addPrecedingNonAcousticWordStateRef((unint64_t)this, a3, a2);
  if (*(_DWORD *)(*((_QWORD *)this + 10) + 16 * a2 + 8))
    RuleMgr::alteredStateInRule(*(RuleMgr **)(*((_QWORD *)this + 92) + 64), a2, v15, v16, v17, v18, v19, v20);
}

void StateMgr::setWordAliasState(StateMgr *this, unsigned int a2, unsigned int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;

  if ((a4 & 1) != 0)
  {
    StateMgr::verifyStateFull(this, a2, 1, 0, a5, a6, a7, a8);
    StateMgr::verifyStateFull(this, a3, 1, 1, v11, v12, v13, v14);
    StateMgr::verifyAliasingValid(this, a2, a3, v15, v16, v17, v18, v19);
    v22 = a2;
    if (*(_WORD *)(*((_QWORD *)this + 20) + 2 * a2))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3312, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v20, v21, (char)"setWordAliasState");
    if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * a2))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3314, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v20, v21, (char)"setWordAliasState");
    if (*(_WORD *)(*((_QWORD *)this + 26) + 2 * a2))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3317, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v20, v21, (char)"setWordAliasState");
  }
  else
  {
    v22 = a2;
  }
  v23 = *((_QWORD *)this + 62);
  v24 = *(unsigned int *)(v23 + 4 * v22);
  if ((_DWORD)v24)
  {
    v25 = *((_QWORD *)this + 72);
    v26 = v25 + 16 * v24;
    v29 = *(_DWORD *)(v26 + 8);
    v27 = (_DWORD *)(v26 + 8);
    v28 = v29;
    if (v29)
    {
      v30 = *(_DWORD **)(v25 + 16 * v24);
      v31 = v28;
      v32 = v30;
      while (*v32 != a2)
      {
        ++v32;
        if (!--v31)
          goto LABEL_14;
      }
      v33 = v28 - 1;
      *v32 = v30[v33];
      *v27 = v33;
      if (!a3)
        goto LABEL_17;
LABEL_15:
      StateMgr::addAliasingStateRef((unint64_t)this, a3, a2);
      *(_DWORD *)(*((_QWORD *)this + 62) + 4 * v22) = a3;
      goto LABEL_18;
    }
  }
LABEL_14:
  if (a3)
    goto LABEL_15;
LABEL_17:
  *(_DWORD *)(v23 + 4 * v22) = 0;
LABEL_18:
  if (*(_DWORD *)(*((_QWORD *)this + 10) + 16 * v22 + 8))
    RuleMgr::alteredStateInRule(*(RuleMgr **)(*((_QWORD *)this + 92) + 64), a2);
}

void StateMgr::setStateCharacteristicsForRuleState(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;

  v8 = a3;
  StateMgr::verifyState(this, a2, a3, a4, a5, a6, a7, a8);
  StateMgr::verifyState(this, v8, v11, v12, v13, v14, v15, v16);
  *(_DWORD *)(*((_QWORD *)this + 34) + 4 * a2) = *(_DWORD *)(*((_QWORD *)this + 34) + 4 * v8);
  *(_DWORD *)(*((_QWORD *)this + 36) + 4 * a2) = *(_DWORD *)(*((_QWORD *)this + 36) + 4 * v8);
  *(_BYTE *)(*((_QWORD *)this + 38) + a2) = *(_BYTE *)(*((_QWORD *)this + 38) + v8);
  *(_BYTE *)(*((_QWORD *)this + 40) + a2) = *(_BYTE *)(*((_QWORD *)this + 40) + v8);
  *(_BYTE *)(*((_QWORD *)this + 48) + a2) = *(_BYTE *)(*((_QWORD *)this + 48) + v8);
  *(_DWORD *)(*((_QWORD *)this + 50) + 4 * a2) = *(_DWORD *)(*((_QWORD *)this + 50) + 4 * v8);
  *(_DWORD *)(*((_QWORD *)this + 52) + 4 * a2) = *(_DWORD *)(*((_QWORD *)this + 52) + 4 * v8);
  *(_DWORD *)(*((_QWORD *)this + 54) + 4 * a2) = *(_DWORD *)(*((_QWORD *)this + 54) + 4 * v8);
  *(_DWORD *)(*((_QWORD *)this + 56) + 4 * a2) = *(_DWORD *)(*((_QWORD *)this + 56) + 4 * v8);
  StateMgr::setPrecedingNonAcousticWordState(this, a2, *(_DWORD *)(*((_QWORD *)this + 64) + 4 * v8), 0);
  *(_BYTE *)(*((_QWORD *)this + 60) + a2) = *(_BYTE *)(*((_QWORD *)this + 60) + v8);
  v21 = *((_QWORD *)this + 58);
  v22 = *(unsigned __int8 *)(v21 + v8);
  if (*(unsigned __int8 *)(v21 + a2) != v22)
  {
    *(_BYTE *)(v21 + a2) = v22;
    if (!*((_BYTE *)this + 696))
      StateMgr::changeRecursivePrefilteringAllowed(this, a2);
  }
  *(_BYTE *)(*((_QWORD *)this + 44) + a2) = *(_BYTE *)(*((_QWORD *)this + 44) + v8);
  *(_BYTE *)(*((_QWORD *)this + 46) + a2) = *(_BYTE *)(*((_QWORD *)this + 46) + v8);
  *(_BYTE *)(*((_QWORD *)this + 4) + a2) = 0;
  *(_BYTE *)(*((_QWORD *)this + 42) + a2) = 0;
  if (*(_DWORD *)(*((_QWORD *)this + 62) + 4 * v8))
    v23 = *(_DWORD *)(*((_QWORD *)this + 62) + 4 * v8);
  else
    v23 = v8;
  StateMgr::setWordAliasState(this, a2, v23, 0, v17, v18, v19, v20);
  *(_DWORD *)(*((_QWORD *)this + 8) + 4 * a2) = v8;
}

uint64_t StateMgr::setName(StateMgr *this, unsigned int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;

  StateMgr::verifyVisible(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  StateMgr::verifyVisible(this, a2, v11, v12, v13, v14, v15, v16);
  if (a2)
    v22 = *(unsigned int *)(*((_QWORD *)this + 14) + 4 * a2);
  else
    v22 = 0;
  result = StateMgr::getHandle(this, a3, v22, v17, v18, v19, v20, v21);
  if ((_DWORD)result != a2)
  {
    if ((_DWORD)result)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1957, (uint64_t)"voc/statemgr", 2, (uint64_t)"%.500s", v24, v25, (char)a3);
    *((_DWORD *)this + 183) ^= StateMgr::computeOneStateIdNameChecksum(this, a2);
    DgnString::operator=((DgnString *)(*((_QWORD *)this + 12) + 16 * a2), a3);
    result = StateMgr::computeOneStateIdNameChecksum(this, a2);
    *((_DWORD *)this + 183) ^= result;
  }
  return result;
}

uint64_t StateMgr::getParent(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyVisible(this, a2, a3, a4, a5, a6, a7, a8);
  if (a2)
    return *(unsigned int *)(*((_QWORD *)this + 14) + 4 * a2);
  else
    return 0;
}

void StateMgr::setWeights(StateMgr *this, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 92) + 72) + 688))(*(_QWORD *)(*((_QWORD *)this + 92) + 72), a3);
  *(_DWORD *)(*((_QWORD *)this + 34) + 4 * a2) = a3;
  if (*(_DWORD *)(*((_QWORD *)this + 10) + 16 * a2 + 8))
    RuleMgr::alteredStateInRule(*(RuleMgr **)(*((_QWORD *)this + 92) + 64), a2, v11, v12, v13, v14, v15, v16);
}

uint64_t StateMgr::getWeights(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  return *(unsigned int *)(*((_QWORD *)this + 34) + 4 * a2);
}

void StateMgr::setWordPenalty(StateMgr *this, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  if ((a3 - 1001) <= 0xFFFFF82E)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2007, (uint64_t)"voc/statemgr", 32, (uint64_t)"%s", v15, v16, (char)&errStr_voc_statemgr_E_WORDPENALTY);
  *(_DWORD *)(*((_QWORD *)this + 36) + 4 * a2) = a3;
  if (*(_DWORD *)(*((_QWORD *)this + 10) + 16 * a2 + 8))
    RuleMgr::alteredStateInRule(*(RuleMgr **)(*((_QWORD *)this + 92) + 64), a2, v11, v12, v13, v14, v15, v16);
}

uint64_t StateMgr::getWordPenalty(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  return *(unsigned int *)(*((_QWORD *)this + 36) + 4 * a2);
}

void StateMgr::checkCollIdExposed(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  StateMgr::verifyVisible(this, a2, a3, a4, a5, a6, a7, a8);
  DgnCollArray<unsigned int,WordList>::checkCollIdExposed(*(_QWORD *)this + 80 * a2, a3, v11, v12, v13, v14, v15, v16);
}

void DgnCollArray<unsigned int,WordList>::checkCollIdExposed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a2 != 0xFFFF
    && (!*(_BYTE *)a1 || !*(_BYTE *)(a1 + 5) || *(unsigned __int16 *)(a1 + 2) != (_DWORD)a2)
    && (*(_DWORD *)(a1 + 32) <= a2 || !*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a2)))
  {
    errorBadCollationId(a2, a2, a3, a4, a5, a6, a7, a8);
  }
}

BOOL StateMgr::isWordIdInState(StateMgr *this, unsigned int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v13;
  int *v14;
  uint64_t i;
  int v16;

  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  v11 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2);
  if (v11
    || *(_DWORD *)(*(_QWORD *)this + 80 * a2 + 16) >= 0x1F4u
    && (StateMgr::getBitWords(this, a2), (v11 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2)) != 0))
  {
    if (*(_DWORD *)(v11 + 8) > a3)
      return (*(_DWORD *)(*(_QWORD *)v11 + 4 * (a3 >> 5)) >> a3) & 1;
    return 0;
  }
  v13 = *(unsigned int *)(*(_QWORD *)this + 80 * a2 + 16);
  if (!(_DWORD)v13)
    return 0;
  v14 = *(int **)(*(_QWORD *)this + 80 * a2 + 8);
  for (i = 0xFFFFFFFFLL; ; --i)
  {
    v16 = *v14++;
    if (v16 == a3)
      break;
    if (!--v13)
      return 0;
  }
  return i != 0;
}

uint64_t DgnCollArray<unsigned int,WordList>::addArray(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int16 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unsigned __int16 v26;

  v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    v4 = result;
    v5 = *(_DWORD *)(result + 16);
    if (v5)
    {
      v6 = onePlusHighestSet32(v5);
      v7 = *(_DWORD *)(v4 + 16);
      v8 = v6 * v2 > v7;
      v2 = *(_DWORD *)(a2 + 8);
    }
    else
    {
      v7 = 0;
      v8 = 1;
    }
    DgnCollArray<unsigned int,WordList>::preAllocate(v4, v2 + v7);
    v23 = 0;
    v24 = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)&v23, (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
    if (*(_BYTE *)v4)
    {
      v13 = *(_WORD *)(v4 + 2);
      v25 = *(_OWORD *)(v4 + 64);
      v26 = v13;
      mrec_qsort_r<WordList>(v23, v24, 4uLL, (CollMgr **)&v25, v9, v10, v11, v12);
      v14 = *(unsigned __int16 *)(v4 + 2);
      if (v8)
        DgnCollArray<unsigned int,WordList>::mergeLargeSortedArray(v4, &v23, v14);
      else
        DgnCollArray<unsigned int,WordList>::mergeSmallSortedArray(v4, &v23, v14);
    }
    else
    {
      v15 = *(_DWORD *)(a2 + 8);
      v16 = *(_DWORD *)(v4 + 20);
      v17 = *(_DWORD *)(v4 + 16) + v15;
      if (v17 > v16)
      {
        DgnPrimArray<unsigned int>::reallocElts(v4 + 8, v17 - v16, 1);
        v15 = *(_DWORD *)(a2 + 8);
      }
      if (v15)
      {
        v18 = 0;
        v19 = *(_QWORD *)a2;
        v20 = *(_QWORD *)(v4 + 8);
        do
        {
          *(_DWORD *)(v20 + 4 * (v18 + *(_DWORD *)(v4 + 16))) = *(_DWORD *)(v19 + 4 * v18);
          ++v18;
          v21 = *(unsigned int *)(a2 + 8);
        }
        while (v18 < v21);
      }
      else
      {
        LODWORD(v21) = 0;
      }
      *(_DWORD *)(v4 + 16) += v21;
    }
    if (*(_DWORD *)(v4 + 32))
    {
      v22 = 0;
      do
      {
        if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v22))
        {
          v25 = *(_OWORD *)(v4 + 64);
          v26 = v22;
          mrec_qsort_r<WordList>(v23, v24, 4uLL, (CollMgr **)&v25, v9, v10, v11, v12);
          if (v8)
            DgnCollArray<unsigned int,WordList>::mergeLargeSortedArray(v4, &v23, v22);
          else
            DgnCollArray<unsigned int,WordList>::mergeSmallSortedArray(v4, &v23, v22);
        }
        ++v22;
      }
      while (*(_DWORD *)(v4 + 32) > v22);
    }
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v23);
  }
  return result;
}

void sub_2097FEB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t StateMgr::getBitWords(StateMgr *this, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  BitArray *v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2);
  if (!result)
  {
    v4 = a2;
    v5 = *(_QWORD *)this;
    v6 = *(_DWORD *)(*((_QWORD *)this + 93) + 388);
    v7 = MemChunkAlloc(0x10uLL, 0);
    BitArray::BitArray((BitArray *)v7, v6);
    BitArray::clearRange(v8, 0, *((_DWORD *)v8 + 2));
    v9 = v5 + 80 * v4;
    v11 = *(_DWORD *)(v9 + 16);
    v10 = (unsigned int *)(v9 + 16);
    if (v11)
    {
      v12 = 0;
      v13 = *(_QWORD *)(v5 + 80 * v4 + 8);
      v14 = *v7;
      do
      {
        *(_DWORD *)(v14 + (((unint64_t)*(unsigned int *)(v13 + 4 * v12) >> 3) & 0x1FFFFFFC)) |= 1 << *(_DWORD *)(v13 + 4 * v12);
        ++v12;
      }
      while (v12 < *v10);
    }
    *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v4) = v7;
    return *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v4);
  }
  return result;
}

void StateMgr::addWordIdArray(StateMgr *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = a4;
  StateMgr::verifyState(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)a1 + 80 * a2;
  StateMgr::verifyState(a1, a2, v13, v14, v15, v16, v17, v18);
  DgnCollArray<unsigned int,WordList>::preAllocate(v12, *(_DWORD *)(a3 + 8) + *(_DWORD *)(*(_QWORD *)a1 + 80 * a2 + 16));
  StateMgr::addWordIdArrayNoPhones(a1, a2, a3, v8, v19, v20, v21, v22);
  StateMgr::addPrimitiveBegPhonesArray(a1, a2, (uint64_t *)a3);
}

unint64_t DgnCollArray<unsigned int,WordList>::preAllocate(unint64_t result, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  unsigned int v9;

  v3 = result;
  v4 = *(_DWORD *)(result + 20);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if ((_DWORD)v6 != 0 && v5)
    result = DgnPrimArray<unsigned int>::reallocElts(result + 8, v6, 0);
  v7 = *(unsigned int *)(v3 + 32);
  if ((_DWORD)v7)
  {
    for (i = 0; i < v7; ++i)
    {
      result = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i);
      if (result)
      {
        v9 = *(_DWORD *)(result + 12);
        if (a2 > v9)
        {
          result = DgnPrimArray<unsigned int>::reallocElts(result, a2 - v9, 0);
          v7 = *(unsigned int *)(v3 + 32);
        }
      }
    }
  }
  return result;
}

void StateMgr::addWordIdsToStatesWithId(StateMgr *this, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;

  if (*((_DWORD *)this + 180))
  {
    v11 = 0;
    do
    {
      if (*(_BYTE *)(*((_QWORD *)this + 68) + v11))
      {
        if (StateMgr::isWordIdInState(this, v11, a3, 0, a5, a6, a7, a8))
          StateMgr::addWordIdArray(this, v11, a2, 0, a5, a6, a7, a8);
      }
      ++v11;
    }
    while (v11 < *((unsigned int *)this + 180));
  }
}

uint64_t DgnCollArray<unsigned int,WordList>::remove(uint64_t result, int a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = *(unsigned int *)(result + 16);
  if (*(_BYTE *)result)
  {
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = *(_QWORD *)(result + 8);
      while (*(_DWORD *)(v4 + 4 * v3) != a2)
      {
        if (v2 == ++v3)
          goto LABEL_6;
      }
      LODWORD(v2) = v2 - 1;
      if (v2 > v3)
      {
        do
        {
          *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v4 + 4 * v3 + 4);
          v2 = (*(_DWORD *)(result + 16) - 1);
          ++v3;
        }
        while (v3 < v2);
      }
    }
    else
    {
LABEL_6:
      LODWORD(v2) = v2 - 1;
    }
  }
  else
  {
    if (!(_DWORD)v2)
      goto LABEL_17;
    v5 = *(unsigned int *)(result + 16);
    v6 = *(_DWORD **)(result + 8);
    while (*v6 != a2)
    {
      ++v6;
      if (!--v5)
        goto LABEL_17;
    }
    LODWORD(v2) = v2 - 1;
    *v6 = *(_DWORD *)(*(_QWORD *)(result + 8) + 4 * v2);
  }
  *(_DWORD *)(result + 16) = v2;
LABEL_17:
  v7 = *(_DWORD *)(result + 32);
  if (v7)
  {
    v8 = 0;
    v9 = *(_QWORD *)(result + 24);
    do
    {
      v10 = *(uint64_t **)(v9 + 8 * v8);
      if (v10)
      {
        v11 = *((unsigned int *)v10 + 2);
        if ((_DWORD)v11)
        {
          v12 = 0;
          v13 = *v10;
          while (*(_DWORD *)(v13 + 4 * v12) != a2)
          {
            if (v11 == ++v12)
              goto LABEL_24;
          }
          LODWORD(v11) = v11 - 1;
          if (v11 > v12)
          {
            do
            {
              *(_DWORD *)(v13 + 4 * v12) = *(_DWORD *)(v13 + 4 * v12 + 4);
              v11 = (*((_DWORD *)v10 + 2) - 1);
              ++v12;
            }
            while (v12 < v11);
            v7 = *(_DWORD *)(result + 32);
          }
        }
        else
        {
LABEL_24:
          LODWORD(v11) = v11 - 1;
        }
        *((_DWORD *)v10 + 2) = v11;
      }
      ++v8;
    }
    while (v7 > v8);
  }
  return result;
}

uint64_t StateMgr::deleteWordIdArrayNoPhones(StateMgr *this, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int ItemPairEnvId;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v32;

  v10 = a2;
  v12 = a2;
  if (*(_WORD *)(*((_QWORD *)this + 24) + 2 * a2))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2149, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"word");
  if (*(_WORD *)(*((_QWORD *)this + 26) + 2 * v12))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2152, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"word");
  if (*(_DWORD *)(a3 + 8))
  {
    v13 = 0;
    v32 = v10;
    do
    {
      v14 = *(unsigned int *)(*(_QWORD *)a3 + 4 * v13);
      if (!StateMgr::isWordIdInState(this, v10, *(_DWORD *)(*(_QWORD *)a3 + 4 * v13), a4, a5, a6, a7, a8))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2163, (uint64_t)"voc/statemgr", 4, (uint64_t)"%u %u", v15, v16, v14);
      if (*(_WORD *)(*((_QWORD *)this + 20) + 2 * v12)
        && WordList::getIncludingLatticeRefCount(*(WordList **)(*((_QWORD *)this + 92) + 48), v14))
      {
        WordList::getIncludingLatticeRefCount(*(WordList **)(*((_QWORD *)this + 92) + 48), v14);
        v10 = v32;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2170, (uint64_t)"voc/statemgr", 14, (uint64_t)"%.500s %d %d %d %d", v17, v18, (char)"word");
      }
      if (a4)
      {
        ItemPairEnvId = EnvMgr::getItemPairEnvId(*((EnvMgr **)this + 95), v10, v14);
        if (ItemPairEnvId)
        {
          EnvMgr::killEnv(*((EnvMgr **)this + 95), ItemPairEnvId, v20, v21, v22, v23, v24, v25);
          EnvMgr::setItemPairEnvId(*((EnvMgr **)this + 95), v10, v14, 0, v26, v27, v28, v29);
        }
      }
      WordList::removeIncludingStateRef(*((_QWORD *)this + 93), v14);
      v30 = *(_QWORD **)(*((_QWORD *)this + 2) + 8 * v12);
      if (v30)
        *(_DWORD *)(*v30 + ((v14 >> 3) & 0x1FFFFFFC)) &= ~(1 << v14);
      ++v13;
    }
    while (v13 < *(unsigned int *)(a3 + 8));
  }
  return DgnCollArray<unsigned int,WordList>::removeArray(*(_QWORD *)this + 80 * v12, a3);
}

uint64_t DgnCollArray<unsigned int,WordList>::removeArray(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned __int16 i;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unsigned __int16 v21;

  v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    v4 = result;
    v18 = 0;
    v19 = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)&v18, (uint64_t *)a2, 0, v2);
    if (*(_BYTE *)v4)
    {
      v9 = *(_WORD *)(v4 + 2);
      v20 = *(_OWORD *)(v4 + 64);
      v21 = v9;
      mrec_qsort_r<WordList>(v18, v19, 4uLL, (CollMgr **)&v20, v5, v6, v7, v8);
      DgnCollArray<unsigned int,WordList>::removeSortedArray(v4, (uint64_t)&v18, *(unsigned __int16 *)(v4 + 2));
    }
    else
    {
      v10 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = *(_QWORD *)a2;
        v13 = *(_DWORD *)(v4 + 16);
        do
        {
          if (v13)
          {
            v14 = v13;
            v15 = *(_DWORD **)(v4 + 8);
            while (*v15 != *(_DWORD *)(v12 + 4 * v11))
            {
              ++v15;
              if (!--v14)
                goto LABEL_12;
            }
            *v15 = *(_DWORD *)(*(_QWORD *)(v4 + 8) + 4 * --v13);
            *(_DWORD *)(v4 + 16) = v13;
            v10 = *(unsigned int *)(a2 + 8);
          }
LABEL_12:
          ++v11;
        }
        while (v11 < v10);
      }
    }
    v16 = *(_DWORD *)(v4 + 32);
    if (v16)
    {
      for (i = 0; i < v16; ++i)
      {
        if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * i))
        {
          v20 = *(_OWORD *)(v4 + 64);
          v21 = i;
          mrec_qsort_r<WordList>(v18, v19, 4uLL, (CollMgr **)&v20, v5, v6, v7, v8);
          DgnCollArray<unsigned int,WordList>::removeSortedArray(v4, (uint64_t)&v18, i);
          v16 = *(_DWORD *)(v4 + 32);
        }
      }
    }
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
  }
  return result;
}

void sub_2097FF2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void StateMgr::deleteWordIdArray(StateMgr *a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  StateMgr::deleteWordIdArrayNoPhones(a1, a2, a3, a4, a5, a6, a7, a8);
  StateMgr::verifyState(a1, a2, v10, v11, v12, v13, v14, v15);
  if (*(_DWORD *)(*(_QWORD *)a1 + 80 * a2 + 16) <= 5u)
    StateMgr::recomputePrimitiveBegPhones(a1, a2);
}

void StateMgr::deleteWordIdsFromStatesWithId(StateMgr *this, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;

  if (*((_DWORD *)this + 180))
  {
    v11 = 0;
    do
    {
      if (*(_BYTE *)(*((_QWORD *)this + 68) + v11))
      {
        if (StateMgr::isWordIdInState(this, v11, a3, 0, a5, a6, a7, a8))
          StateMgr::deleteWordIdArray(this, v11, a2, 0, a5, a6, a7, a8);
      }
      ++v11;
    }
    while (v11 < *((unsigned int *)this + 180));
  }
}

BOOL StateMgr::getEndOfUtteranceAllowed(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyState(this, a2, a3, a4, a5, a6, a7, a8);
  return *(_BYTE *)(*((_QWORD *)this + 4) + a2) != 0;
}

BOOL StateMgr::isStateInRule(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t i;
  int v15;

  v8 = a3;
  StateMgr::verifyVisible(this, a2, a3, a4, a5, a6, a7, a8);
  v11 = *((_QWORD *)this + 10);
  v12 = *(unsigned int *)(v11 + 16 * a2 + 8);
  if (!(_DWORD)v12)
    return 0;
  v13 = *(unsigned __int16 **)(v11 + 16 * a2);
  for (i = 0xFFFFFFFFLL; ; --i)
  {
    v15 = *v13++;
    if (v15 == v8)
      break;
    if (!--v12)
      return 0;
  }
  return i != 0;
}

unint64_t StateMgr::includeStateInRule(unint64_t this, unsigned int a2, __int16 a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;

  v4 = *(_QWORD *)(this + 80) + 16 * a2;
  v6 = (unsigned int *)(v4 + 8);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5 == *(_DWORD *)(v4 + 12))
  {
    this = DgnPrimArray<short>::reallocElts(*(_QWORD *)(this + 80) + 16 * a2, 1, 1);
    v5 = *v6;
  }
  *(_WORD *)(*(_QWORD *)v4 + 2 * v5) = a3;
  *v6 = v5 + 1;
  return this;
}

uint64_t StateMgr::unincludeStateInRule(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  _WORD *v8;
  uint64_t v9;
  _WORD *i;
  int v11;

  v3 = *(_QWORD *)(this + 80);
  v4 = v3 + 16 * a2;
  v7 = *(_DWORD *)(v4 + 8);
  v5 = (_DWORD *)(v4 + 8);
  v6 = v7;
  if (v7)
  {
    v8 = *(_WORD **)(v3 + 16 * a2);
    v9 = v6;
    for (i = v8; (unsigned __int16)*i != a3; ++i)
    {
      if (!--v9)
        return this;
    }
    v11 = v6 - 1;
    *i = v8[v11];
    *v5 = v11;
  }
  return this;
}

void StateMgr::getWordsWithPrefix(uint64_t *a1, unsigned int a2, uint64_t a3, char *a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  StateMgr::verifyVisible((StateMgr *)a1, a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  DgnCollArray<unsigned int,WordList>::checkCollIdExposed(*a1 + 80 * a2, a3, v15, v16, v17, v18, v19, v20);
  v22 = *a1;
  if ((_DWORD)a3 == 0xFFFF || *(_BYTE *)(v22 + 80 * a2) && *(unsigned __int16 *)(v22 + 80 * a2 + 2) == (_DWORD)a3)
    v23 = v22 + 80 * a2 + 8;
  else
    v23 = *(_QWORD *)(*(_QWORD *)(v22 + 80 * a2 + 24) + 8 * a3);
  WordList::getWordsWithPrefix(a1[93], v23, a3, a4, a5, a6, a7, v21);
}

uint64_t StateMgr::getCollWords(StateMgr *this, unsigned int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;

  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  v11 = *(_QWORD *)this;
  if (a3 == 0xFFFF || *(_BYTE *)(v11 + 80 * a2) && *(unsigned __int16 *)(v11 + 80 * a2 + 2) == a3)
    return v11 + 80 * a2 + 8;
  else
    return *(_QWORD *)(*(_QWORD *)(v11 + 80 * a2 + 24) + 8 * a3);
}

uint64_t StateMgr::getColls(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  return *(_QWORD *)this + 80 * a2 + 40;
}

uint64_t DgnCollArray<unsigned int,WordList>::setColls(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t *v27;

  v2 = result;
  v3 = (uint64_t *)(result + 40);
  if (result + 40 == a2)
  {
    v4 = *(_DWORD *)(a2 + 8);
    goto LABEL_8;
  }
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(result + 48) != v4)
  {
LABEL_8:
    DgnPrimArray<unsigned short>::copyArraySlice(result + 40, (uint64_t *)a2, 0, v4);
    result = DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::wipeOtherArrays(v2);
    if (!*(_BYTE *)v2 || !*(_BYTE *)(v2 + 4))
      *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 5) = 0;
    v14 = *(_DWORD *)(v2 + 48);
    if (!v14)
      return result;
    if (v14 != 1)
    {
      v15 = 0;
      v16 = 1;
      do
      {
        v17 = *(_QWORD *)(v2 + 40);
        v18 = *(unsigned __int16 *)(v17 + 2 * v15);
        if (*(_BYTE *)v2 && v18 == *(unsigned __int16 *)(v2 + 2))
        {
          if (v18 == 65534)
          {
            v16 = 0;
            *(_BYTE *)(v2 + 5) = 1;
          }
        }
        else
        {
          if (v18 == 65534)
          {
            v16 = 0;
            *(_BYTE *)v2 = 1;
            *(_DWORD *)(v2 + 2) = 16842750;
          }
          else
          {
            v19 = *(_DWORD *)(v2 + 32);
            if (v19 <= v18)
            {
              v20 = v18 - v19 + 1;
              do
              {
                if (v19 == *(_DWORD *)(v2 + 36))
                {
                  DgnPrimArray<unsigned long long>::reallocElts(v2 + 24, 1, 1);
                  v19 = *(_DWORD *)(v2 + 32);
                }
                *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * v19++) = 0;
                *(_DWORD *)(v2 + 32) = v19;
                --v20;
              }
              while (v20);
            }
            v21 = MemChunkAlloc(0x10uLL, 0);
            *v21 = 0;
            v21[1] = 0;
            *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * *(unsigned __int16 *)(*(_QWORD *)(v2 + 40) + 2 * v15)) = v21;
            DgnPrimArray<int>::copyArraySlice(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * *(unsigned __int16 *)(*(_QWORD *)(v2 + 40) + 2 * v15)), (uint64_t *)(v2 + 8), 0, *(_DWORD *)(v2 + 16));
            v17 = *(_QWORD *)(v2 + 40);
          }
          result = DgnCollArray<unsigned int,WordList>::sortCollation(v2, *(unsigned __int16 *)(v17 + 2 * v15), v8, v9, v10, v11, v12, v13);
          v14 = *(_DWORD *)(v2 + 48);
        }
        ++v15;
      }
      while (v15 < (v14 - v16));
      if (v16 != 1)
        return result;
    }
    v22 = (v14 - 1);
    if (*(_BYTE *)v2)
    {
      v23 = *(_QWORD *)(v2 + 40);
      if (*(_BYTE *)(v2 + 4))
      {
        v24 = *(unsigned __int16 *)(v23 + 2 * v22);
        if (v24 == 65534)
        {
          *(_BYTE *)(v2 + 5) = 1;
          return result;
        }
        v25 = *(_DWORD *)(v2 + 32);
        if (v25 <= v24)
        {
          v26 = v24 - v25 + 1;
          do
          {
            if (v25 == *(_DWORD *)(v2 + 36))
            {
              DgnPrimArray<unsigned long long>::reallocElts(v2 + 24, 1, 1);
              v25 = *(_DWORD *)(v2 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * v25++) = 0;
            *(_DWORD *)(v2 + 32) = v25;
            --v26;
          }
          while (v26);
        }
        v27 = MemChunkAlloc(0x10uLL, 0);
        *v27 = 0;
        v27[1] = 0;
        *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * *(unsigned __int16 *)(*(_QWORD *)(v2 + 40) + 2 * v22)) = v27;
        DgnPrimArray<int>::copyArraySlice(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * *(unsigned __int16 *)(*(_QWORD *)(v2 + 40) + 2 * v22)), (uint64_t *)(v2 + 8), 0, *(_DWORD *)(v2 + 16));
        v23 = *(_QWORD *)(v2 + 40);
        return DgnCollArray<unsigned int,WordList>::sortCollation(v2, *(unsigned __int16 *)(v23 + 2 * v22), v8, v9, v10, v11, v12, v13);
      }
    }
    else
    {
      v23 = *v3;
    }
    *(_BYTE *)v2 = 1;
    *(_WORD *)(v2 + 4) = 256;
    *(_WORD *)(v2 + 2) = *(_WORD *)(v23 + 2 * v22);
    return DgnCollArray<unsigned int,WordList>::sortCollation(v2, *(unsigned __int16 *)(v23 + 2 * v22), v8, v9, v10, v11, v12, v13);
  }
  v5 = *(unsigned int *)(result + 48);
  while ((int)v5 >= 1)
  {
    v6 = *v3 + 2 * v5;
    v7 = *(unsigned __int16 *)(*(_QWORD *)a2 - 2 + 2 * v5--);
    if (*(unsigned __int16 *)(v6 - 2) != v7)
    {
      v4 = *(_DWORD *)(result + 48);
      goto LABEL_8;
    }
  }
  return result;
}

void StateMgr::setLMAllowed(StateMgr *this, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  *(_BYTE *)(*((_QWORD *)this + 38) + a2) = a3;
  if (*(_DWORD *)(*((_QWORD *)this + 10) + 16 * a2 + 8))
    RuleMgr::alteredStateInRule(*(RuleMgr **)(*((_QWORD *)this + 92) + 64), a2, v11, v12, v13, v14, v15, v16);
}

BOOL StateMgr::getLMAllowed(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  return *(_BYTE *)(*((_QWORD *)this + 38) + a2) != 0;
}

void StateMgr::setPrecedingNonAcousticWordRequired(StateMgr *this, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  if ((a3 & 1) != 0)
  {
    v17 = a2;
    if (!*(_DWORD *)(*((_QWORD *)this + 64) + 4 * a2))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2468, (uint64_t)"voc/statemgr", 36, (uint64_t)"%u", v15, v16, a2);
  }
  else
  {
    v17 = a2;
  }
  *(_BYTE *)(*((_QWORD *)this + 60) + v17) = a3;
  if (*(_DWORD *)(*((_QWORD *)this + 10) + 16 * v17 + 8))
    RuleMgr::alteredStateInRule(*(RuleMgr **)(*((_QWORD *)this + 92) + 64), a2, v11, v12, v13, v14, v15, v16);
}

uint64_t StateMgr::getPrecedingNonAcousticWordState(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, 1, 0, a5, a6, a7, a8);
  return *(unsigned int *)(*((_QWORD *)this + 64) + 4 * a2);
}

BOOL StateMgr::getPrecedingNonAcousticWordRequired(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, 1, 0, a5, a6, a7, a8);
  return *(_BYTE *)(*((_QWORD *)this + 60) + a2) != 0;
}

void StateMgr::setPrefilteringAllowed(StateMgr *this, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;

  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  v17 = *((_QWORD *)this + 58);
  v18 = *(unsigned __int8 *)(v17 + a2);
  *(_BYTE *)(v17 + a2) = a3;
  if (*((_BYTE *)this + 696))
    v19 = 1;
  else
    v19 = v18 == *(unsigned __int8 *)(*((_QWORD *)this + 58) + a2);
  if (!v19)
    StateMgr::changeRecursivePrefilteringAllowed(this, a2);
  if (*(_DWORD *)(*((_QWORD *)this + 10) + 16 * a2 + 8))
    RuleMgr::alteredStateInRule(*(RuleMgr **)(*((_QWORD *)this + 92) + 64), a2, v11, v12, v13, v14, v15, v16);
}

BOOL StateMgr::getPrefilteringAllowed(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, 1, 0, a5, a6, a7, a8);
  return *(_BYTE *)(*((_QWORD *)this + 58) + a2) != 0;
}

void StateMgr::setCoartAllowed(StateMgr *this, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  *(_BYTE *)(*((_QWORD *)this + 40) + a2) = a3;
  if (*(_DWORD *)(*((_QWORD *)this + 10) + 16 * a2 + 8))
    RuleMgr::alteredStateInRule(*(RuleMgr **)(*((_QWORD *)this + 92) + 64), a2, v11, v12, v13, v14, v15, v16);
}

BOOL StateMgr::getCoartAllowed(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  return *(_BYTE *)(*((_QWORD *)this + 40) + a2) != 0;
}

void StateMgr::setSkipAllowed(StateMgr *this, unsigned int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  if ((*(_DWORD *)(*((_QWORD *)this + 76) + 16 * a2 + 8) || *(_DWORD *)(*((_QWORD *)this + 28) + 16 * a2 + 8))
    && *(unsigned __int8 *)(*((_QWORD *)this + 44) + a2) != *(unsigned __int8 *)(*((_QWORD *)this + 46) + a2))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2550, (uint64_t)"voc/statemgr", 24, (uint64_t)"%s", v11, v12, (char)&errStr_voc_statemgr_E_SKIPPABLE_WB_MISMATCH);
  }
  *(_BYTE *)(*((_QWORD *)this + 42) + a2) = a3;
  if (a3)
  {
    VocMgr::beginRuleStateRecursiveOperation((uint64_t *)VocMgr::smpVocMgr);
    StateMgr::verifyStateNotInAllSkippableLoop((unint64_t)this, a2, a2, v13, v14, v15, v16, v17);
    VocMgr::endRuleStateRecursiveOperation((VocMgr *)VocMgr::smpVocMgr);
  }
}

unint64_t StateMgr::verifyStateNotInAllSkippableLoop(unint64_t this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;

  v8 = *(_QWORD *)(this + 624);
  if (!*(_BYTE *)(v8 + a2))
  {
    v11 = this;
    v12 = a2;
    *(_BYTE *)(v8 + a2) = 1;
    v13 = *(_DWORD *)(this + 648);
    if (v13 == *(_DWORD *)(this + 652))
    {
      this = DgnPrimArray<unsigned int>::reallocElts(this + 640, 1, 1);
      v13 = *(_DWORD *)(v11 + 648);
    }
    *(_DWORD *)(*(_QWORD *)(v11 + 640) + 4 * v13) = a2;
    ++*(_DWORD *)(v11 + 648);
    if (*(_BYTE *)(*(_QWORD *)(v11 + 336) + v12))
    {
      v14 = *(_QWORD *)(v11 + 224);
      if (*(_DWORD *)(v14 + 16 * v12 + 8))
      {
        v15 = 0;
        do
        {
          v16 = *(_DWORD *)(*(_QWORD *)(v14 + 16 * v12) + 4 * v15);
          if (v16 == a3)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2757, (uint64_t)"voc/statemgr", 23, (uint64_t)"%d %d", a7, a8, a3);
            v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 224) + 16 * v12) + 4 * v15);
          }
          this = StateMgr::verifyStateNotInAllSkippableLoop((StateMgr *)v11, v16, a3);
          ++v15;
          v14 = *(_QWORD *)(v11 + 224);
        }
        while (v15 < *(unsigned int *)(v14 + 16 * v12 + 8));
      }
    }
  }
  return this;
}

BOOL StateMgr::getSkipAllowed(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  return *(_BYTE *)(*((_QWORD *)this + 42) + a2) != 0;
}

void StateMgr::setLeftWBAllowed(StateMgr *this, unsigned int a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  if (*(_DWORD *)(*((_QWORD *)this + 10) + 16 * a2 + 8))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2577, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v11, v12, (char)"setLeftWBAllowed");
  if (*(_DWORD *)(*((_QWORD *)this + 76) + 16 * a2 + 8))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2581, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v11, v12, (char)"setLeftWBAllowed");
    if (*(_DWORD *)(*((_QWORD *)this + 76) + 16 * a2 + 8))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2585, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"setLeftWBAllowed");
  }
  *(_BYTE *)(*((_QWORD *)this + 44) + a2) = a3;
}

BOOL StateMgr::getLeftWBAllowed(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  return *(_BYTE *)(*((_QWORD *)this + 44) + a2) != 0;
}

void StateMgr::setRightWBAllowed(StateMgr *this, unsigned int a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  if (*(_DWORD *)(*((_QWORD *)this + 10) + 16 * a2 + 8))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2606, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v11, v12, (char)"setRightWBAllowed");
  if (*(_DWORD *)(*((_QWORD *)this + 76) + 16 * a2 + 8))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2610, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v11, v12, (char)"setRightWBAllowed");
    if (*(_DWORD *)(*((_QWORD *)this + 76) + 16 * a2 + 8))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2614, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"setRightWBAllowed");
  }
  *(_BYTE *)(*((_QWORD *)this + 46) + a2) = a3;
}

BOOL StateMgr::getRightWBAllowed(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  return *(_BYTE *)(*((_QWORD *)this + 46) + a2) != 0;
}

void StateMgr::setCollapsible(StateMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a3;
  StateMgr::verifyState(this, a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(*((_QWORD *)this + 48) + a2) = v8;
  if (*(_DWORD *)(*((_QWORD *)this + 10) + 16 * a2 + 8))
    RuleMgr::alteredStateInRule(*(RuleMgr **)(*((_QWORD *)this + 92) + 64), a2, v11, v12, v13, v14, v15, v16);
}

BOOL StateMgr::getCollapsible(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyState(this, a2, a3, a4, a5, a6, a7, a8);
  return *(_BYTE *)(*((_QWORD *)this + 48) + a2) != 0;
}

void StateMgr::setTimeConstraint(StateMgr *this, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v14;
  uint64_t v15;

  v8 = a6;
  v9 = a5;
  StateMgr::verifyStateFull(this, a2, 1, 0, a5, a6, a7, a8);
  if (a3 != -1 && a3 > a4)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2659, (uint64_t)"voc/statemgr", 34, (uint64_t)"%u %.500s %u %.500s %u", v14, v15, a2);
  if (v9 != -1 && v9 > v8)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2666, (uint64_t)"voc/statemgr", 34, (uint64_t)"%u %.500s %u %.500s %u", v14, v15, a2);
  if (a3 != -1 && v8 != -1 && a3 >= v8)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2673, (uint64_t)"voc/statemgr", 34, (uint64_t)"%u %.500s %u %.500s %u", v14, v15, a2);
  *(_DWORD *)(*((_QWORD *)this + 50) + 4 * a2) = a3;
  *(_DWORD *)(*((_QWORD *)this + 52) + 4 * a2) = a4;
  *(_DWORD *)(*((_QWORD *)this + 54) + 4 * a2) = v9;
  *(_DWORD *)(*((_QWORD *)this + 56) + 4 * a2) = v8;
}

void StateMgr::getTimeConstraint(StateMgr *this, unsigned int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, 1, 0, (uint64_t)a5, (uint64_t)a6, a7, a8);
  *a3 = *(_DWORD *)(*((_QWORD *)this + 50) + 4 * a2);
  *a4 = *(_DWORD *)(*((_QWORD *)this + 52) + 4 * a2);
  *a5 = *(_DWORD *)(*((_QWORD *)this + 54) + 4 * a2);
  *a6 = *(_DWORD *)(*((_QWORD *)this + 56) + 4 * a2);
}

uint64_t StateMgr::getIncludingRules(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyVisible(this, a2, a3, a4, a5, a6, a7, a8);
  return *((_QWORD *)this + 10) + 16 * a2;
}

void StateMgr::addChildRule(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  StateMgr::verifyStateFull(this, a2, 1, 1, a5, a6, a7, a8);
  v11 = *((_QWORD *)this + 18);
  v12 = v11 + 16 * a2;
  v14 = (unsigned int *)(v12 + 8);
  v13 = *(_DWORD *)(v12 + 8);
  if (!v13)
    goto LABEL_7;
  v15 = *(unsigned __int16 **)v12;
  v16 = 0xFFFFFFFFLL;
  v17 = *(unsigned int *)(v12 + 8);
  while (1)
  {
    v18 = *v15++;
    if (v18 == a3)
      break;
    --v16;
    if (!--v17)
      goto LABEL_7;
  }
  if (!v16)
  {
LABEL_7:
    if (v13 == *(_DWORD *)(v11 + 16 * a2 + 12))
    {
      DgnPrimArray<short>::reallocElts(v12, 1, 1);
      v13 = *v14;
    }
    *(_WORD *)(*(_QWORD *)v12 + 2 * v13) = a3;
    *v14 = v13 + 1;
  }
}

uint64_t StateMgr::getChildRuleCount(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, 1, 1, a5, a6, a7, a8);
  return *(unsigned int *)(*((_QWORD *)this + 18) + 16 * a2 + 8);
}

uint64_t StateMgr::getChildRules(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, 1, 1, a5, a6, a7, a8);
  return *((_QWORD *)this + 18) + 16 * a2;
}

double StateMgr::endRecursiveOperation(StateMgr *this)
{
  unint64_t v2;
  _QWORD *v3;
  double result;

  if (*((_DWORD *)this + 162))
  {
    v2 = 0;
    do
      *(_BYTE *)(*((_QWORD *)this + 78) + *(unsigned int *)(*((_QWORD *)this + 80) + 4 * v2++)) = 0;
    while (v2 < *((unsigned int *)this + 162));
  }
  v3 = (_QWORD *)*((_QWORD *)this + 80);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((_QWORD *)this + 80) = 0;
  }
  result = 0.0;
  *((_QWORD *)this + 81) = 0;
  return result;
}

uint64_t StateMgr::getChildStates(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, 1, 1, a5, a6, a7, a8);
  return *((_QWORD *)this + 16) + 16 * a2;
}

unint64_t StateMgr::addAliasingStateRef(unint64_t this, unsigned int a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;

  v4 = *(_QWORD *)(this + 576) + 16 * a2;
  v6 = (unsigned int *)(v4 + 8);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5 == *(_DWORD *)(v4 + 12))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(*(_QWORD *)(this + 576) + 16 * a2, 1, 1);
    v5 = *v6;
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v5) = a3;
  ++*v6;
  return this;
}

unint64_t StateMgr::addTransitioningStateRef(unint64_t this, unsigned int a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;

  v4 = *(_QWORD *)(this + 608) + 16 * a2;
  v6 = (unsigned int *)(v4 + 8);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5 == *(_DWORD *)(v4 + 12))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(*(_QWORD *)(this + 608) + 16 * a2, 1, 1);
    v5 = *v6;
  }
  *(_DWORD *)(*(_QWORD *)v4 + 4 * v5) = a3;
  ++*v6;
  return this;
}

uint64_t StateMgr::getStateTransitionNumParseTokens(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  return *((_QWORD *)this + 30) + 16 * a2;
}

uint64_t StateMgr::getStateTransitionParseTokens(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  return *((_QWORD *)this + 32) + 16 * a2;
}

void StateMgr::fastEmptyTransitionsForKill(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];

  BitArray::BitArray((BitArray *)v39, *(_DWORD *)(a1 + 720));
  if (*(_DWORD *)(a2 + 8))
  {
    v8 = 0;
    do
    {
      v9 = *(unsigned int *)(*(_QWORD *)a2 + 4 * v8);
      *(_DWORD *)(v39[0] + ((v9 >> 3) & 0x1FFFFFFC)) |= 1 << v9;
      StateMgr::verifyStateFull((StateMgr *)a1, v9, 0, 0, v4, v5, v6, v7);
      if (*(_WORD *)(*(_QWORD *)(a1 + 160) + 2 * v9))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3037, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v6, v7, (char)"fastEmptyTransitionsForKill");
      if (*(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v9))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3040, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v6, v7, (char)"fastEmptyTransitionsForKill");
      if (*(_WORD *)(*(_QWORD *)(a1 + 208) + 2 * v9))
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3043, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v6, v7, (char)"fastEmptyTransitionsForKill");
      if (!*(_BYTE *)(a1 + 696)
        && !*(_BYTE *)(*(_QWORD *)(a1 + 464) + v9)
        && *(_BYTE *)(*(_QWORD *)(a1 + 680) + v9) == 1
        && !StateMgr::allTransitioningStatesHavePA((StateMgr *)a1, v9))
      {
        *(_BYTE *)(a1 + 696) = 1;
      }
      ++v8;
      v10 = *(unsigned int *)(a2 + 8);
    }
    while (v8 < v10);
    if ((_DWORD)v10)
    {
      v11 = 0;
      do
      {
        v12 = *(unsigned int *)(*(_QWORD *)a2 + 4 * v11);
        v13 = *(_QWORD *)(a1 + 224) + 16 * v12;
        v15 = (_QWORD *)(v13 + 8);
        v14 = *(unsigned int *)(v13 + 8);
        if (*(_DWORD *)(v13 + 8))
        {
          v16 = 0;
          v17 = *(_QWORD *)v13;
          v18 = v39[0];
          do
          {
            v19 = *(unsigned int *)(v17 + 4 * v16);
            if (((*(_DWORD *)(v18 + ((v19 >> 3) & 0x1FFFFFFC)) >> v19) & 1) == 0)
            {
              v20 = *(_QWORD *)(a1 + 608);
              v21 = v20 + 16 * v19;
              v24 = *(_DWORD *)(v21 + 8);
              v22 = (_DWORD *)(v21 + 8);
              v23 = v24;
              if (v24)
              {
                v25 = *(_DWORD **)(v20 + 16 * v19);
                v26 = v23;
                v27 = v25;
                while (*v27 != (_DWORD)v12)
                {
                  ++v27;
                  if (!--v26)
                    goto LABEL_20;
                }
                *v27 = v25[(v23 - 1)];
                *v22 = v23 - 1;
                v14 = *(unsigned int *)v15;
              }
            }
LABEL_20:
            ++v16;
          }
          while (v16 < v14);
        }
        v28 = *(_QWORD *)(a1 + 608);
        v29 = v28 + 16 * v12;
        v32 = *(_DWORD *)(v29 + 8);
        v30 = (unsigned int *)(v29 + 8);
        v31 = v32;
        if (v32)
        {
          v33 = 0;
          v34 = *(_QWORD *)(v28 + 16 * v12);
          v35 = v39[0];
          do
          {
            v36 = *(unsigned int *)(v34 + 4 * v33);
            if (((*(_DWORD *)(v35 + ((v36 >> 3) & 0x1FFFFFFC)) >> v36) & 1) != 0)
            {
              *(_DWORD *)(v34 + 4 * v33) = *(_DWORD *)(v34 + 4 * --v31);
              *v30 = v31;
              --v33;
            }
            ++v33;
          }
          while (v33 < v31);
        }
        if (*(_QWORD *)v13)
        {
          MemChunkFree(*(_QWORD **)v13, 0);
          *(_QWORD *)v13 = 0;
        }
        *v15 = 0;
        v37 = *(_QWORD *)(a1 + 240) + 16 * v12;
        if (*(_QWORD *)v37)
        {
          MemChunkFree(*(_QWORD **)v37, 0);
          *(_QWORD *)v37 = 0;
        }
        *(_QWORD *)(v37 + 8) = 0;
        v38 = *(_QWORD *)(a1 + 256) + 16 * v12;
        if (*(_QWORD *)v38)
        {
          MemChunkFree(*(_QWORD **)v38, 0);
          *(_QWORD *)v38 = 0;
        }
        *(_QWORD *)(v38 + 8) = 0;
        ++v11;
      }
      while (v11 < *(unsigned int *)(a2 + 8));
    }
  }
  BitArray::~BitArray((BitArray *)v39);
}

void sub_209800BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  BitArray::~BitArray((BitArray *)va);
  _Unwind_Resume(a1);
}

void StateMgr::addStateTransition(unint64_t a1, unsigned int a2, uint64_t *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;

  v8 = a6;
  v10 = a2;
  StateMgr::verifyStateFull((StateMgr *)a1, a2, a4, 0, a5, a6, a7, a8);
  v16 = v10;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 336) + v10)
    && *(unsigned __int8 *)(*(_QWORD *)(a1 + 368) + v10) != *(unsigned __int8 *)(*(_QWORD *)(a1 + 352) + v10))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3193, (uint64_t)"voc/statemgr", 24, (uint64_t)"%s", v14, v15, (char)&errStr_voc_statemgr_E_SKIPPABLE_WB_MISMATCH);
  }
  LODWORD(v17) = *((_DWORD *)a3 + 2);
  if ((_DWORD)v17)
  {
    v84 = v8;
    v18 = 0;
    do
    {
      v19 = *(unsigned int *)(*a3 + 4 * v18);
      v20 = *(_BYTE *)(*(_QWORD *)(a1 + 368) + v10) == 0;
      StateMgr::verifyStateFull((StateMgr *)a1, *(_DWORD *)(*a3 + 4 * v18), 0, 0, v12, v13, v14, v15);
      if (((v20 ^ (*(_BYTE *)(*(_QWORD *)(a1 + 352) + v19) != 0)) & 1) == 0)
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3199, (uint64_t)"voc/statemgr", 25, (uint64_t)"%s", v23, v24, (char)&errStr_voc_statemgr_E_TRANSITION_WB_MISMATCH);
      StateMgr::verifyStateFull((StateMgr *)a1, v19, 0, 0, v21, v22, v23, v24);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 336) + v19))
      {
        v25 = *(_BYTE *)(*(_QWORD *)(a1 + 368) + v10) == 0;
        StateMgr::verifyStateFull((StateMgr *)a1, v19, 0, 0, v12, v13, v14, v15);
        if (((v25 ^ (*(_BYTE *)(*(_QWORD *)(a1 + 368) + v19) != 0)) & 1) == 0)
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3203, (uint64_t)"voc/statemgr", 24, (uint64_t)"%s", v14, v15, (char)&errStr_voc_statemgr_E_SKIPPABLE_WB_MISMATCH);
      }
      ++v18;
      v17 = *((unsigned int *)a3 + 2);
    }
    while (v18 < v17);
    v8 = v84;
  }
  v26 = *(_QWORD *)(a1 + 224) + 16 * v10;
  v28 = *(_DWORD *)(v26 + 8);
  v27 = (_DWORD *)(v26 + 8);
  v29 = *(_DWORD *)(v26 + 12);
  v30 = v28 + (_DWORD)v17 - v29;
  v31 = a5;
  if (v28 + (int)v17 > v29)
  {
    DgnPrimArray<unsigned int>::reallocElts(*(_QWORD *)(a1 + 224) + 16 * v10, v30, 1);
    v31 = a5;
    LODWORD(v17) = *((_DWORD *)a3 + 2);
  }
  if ((_DWORD)v17)
  {
    v32 = 0;
    v33 = *a3;
    v34 = *(_QWORD *)v26;
    do
    {
      *(_DWORD *)(v34 + 4 * (v32 + *v27)) = *(_DWORD *)(v33 + 4 * v32);
      ++v32;
      v35 = *((unsigned int *)a3 + 2);
    }
    while (v32 < v35);
  }
  else
  {
    LODWORD(v35) = 0;
  }
  *v27 += v35;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 336) + v10) == 1)
  {
    VocMgr::beginRuleStateRecursiveOperation((uint64_t *)VocMgr::smpVocMgr);
    StateMgr::verifyStateNotInAllSkippableLoop(a1, v10, v10, v36, v37, v38, v39, v40);
    VocMgr::endRuleStateRecursiveOperation((VocMgr *)VocMgr::smpVocMgr);
    v31 = a5;
  }
  if (*(_WORD *)(*(_QWORD *)(a1 + 48) + 2 * v10))
  {
    v41 = *(_DWORD *)(v8 + 8);
    v85 = v10;
    v42 = *(_QWORD *)(a1 + 240) + 16 * v10;
    v43 = *(_DWORD *)(v42 + 12);
    v44 = *(_DWORD *)(v42 + 8) + v41;
    if (v44 > v43)
    {
      DgnPrimArray<short>::reallocElts(v42, v44 - v43, 1);
      v31 = a5;
      v41 = *(_DWORD *)(v8 + 8);
    }
    v45 = v8;
    v83 = v10;
    if (v41)
    {
      v46 = 0;
      v47 = 0;
      v48 = 8;
      do
      {
        v49 = *(_DWORD *)(v31 + 8);
        v50 = *(_DWORD *)(*(_QWORD *)v45 + v48);
        v51 = *(_QWORD *)(a1 + 240) + 16 * v85;
        v53 = (unsigned int *)(v51 + 8);
        v52 = *(_DWORD *)(v51 + 8);
        if (v52 == *(_DWORD *)(v51 + 12))
        {
          DgnPrimArray<short>::reallocElts(*(_QWORD *)(a1 + 240) + 16 * v85, 1, 1);
          v31 = a5;
          v52 = *v53;
          v41 = *(_DWORD *)(v45 + 8);
        }
        *(_WORD *)(*(_QWORD *)v51 + 2 * v52) = v50 + v49;
        *v53 = v52 + 1;
        v47 += v50 + v49;
        ++v46;
        v48 += 16;
      }
      while (v46 < v41);
    }
    else
    {
      v47 = 0;
    }
    v54 = *(_QWORD *)(a1 + 256) + 16 * v85;
    v55 = *(_DWORD *)(v54 + 12);
    v56 = *(_DWORD *)(v54 + 8) + v47;
    v57 = v45;
    if (v56 > v55)
    {
      DgnPrimArray<unsigned int>::reallocElts(v54, v56 - v55, 1);
      v31 = a5;
      v41 = *(_DWORD *)(v45 + 8);
    }
    v10 = v83;
    v16 = v85;
    if (v41)
    {
      v58 = 0;
      do
      {
        v59 = *(_QWORD *)(a1 + 256) + 16 * v85;
        v60 = *(_DWORD *)(v31 + 8);
        v62 = (unsigned int *)(v59 + 8);
        v61 = *(_DWORD *)(v59 + 8);
        v63 = *(_DWORD *)(v59 + 12);
        if (v61 + v60 > v63)
        {
          DgnPrimArray<unsigned int>::reallocElts(*(_QWORD *)(a1 + 256) + 16 * v85, v61 + v60 - v63, 1);
          v31 = a5;
          v60 = *(_DWORD *)(a5 + 8);
          v61 = *v62;
        }
        if (v60)
        {
          v64 = *(_QWORD *)v59;
          v65 = v60;
          v66 = *(_QWORD *)v31 + 2;
          v67 = v61;
          do
          {
            *(_DWORD *)(v64 + 4 * v67) = *(_DWORD *)(v66 - 2);
            v66 += 4;
            ++v67;
            --v65;
          }
          while (v65);
        }
        *v62 = v60 + v61;
        v68 = *(_QWORD *)(a1 + 256) + 16 * v85;
        v69 = *(_QWORD *)v57 + 16 * v58;
        v70 = *(_DWORD *)(v69 + 8);
        v72 = (unsigned int *)(v68 + 8);
        v71 = *(_DWORD *)(v68 + 8);
        v73 = *(_DWORD *)(v68 + 12);
        if (v71 + v70 > v73)
        {
          DgnPrimArray<unsigned int>::reallocElts(*(_QWORD *)(a1 + 256) + 16 * v85, v71 + v70 - v73, 1);
          v31 = a5;
          v70 = *(_DWORD *)(v69 + 8);
          v71 = *v72;
        }
        if (v70)
        {
          v74 = *(_QWORD *)v68;
          v75 = v70;
          v76 = *(_QWORD *)v69 + 2;
          v77 = v71;
          do
          {
            *(_DWORD *)(v74 + 4 * v77) = *(_DWORD *)(v76 - 2);
            v76 += 4;
            ++v77;
            --v75;
          }
          while (v75);
        }
        *v72 = v70 + v71;
        ++v58;
      }
      while (v58 < *(unsigned int *)(v57 + 8));
    }
  }
  if (*((_DWORD *)a3 + 2))
  {
    v78 = 0;
    LOBYTE(v79) = 0;
    do
    {
      v80 = *(unsigned int *)(*a3 + 4 * v78);
      v79 = v79 || *(unsigned __int8 *)(*(_QWORD *)(a1 + 680) + v80) == 1;
      StateMgr::addTransitioningStateRef(a1, v80, v10);
      ++v78;
    }
    while (v78 < *((unsigned int *)a3 + 2));
  }
  else
  {
    v79 = 0;
  }
  if (!*(_BYTE *)(a1 + 696))
  {
    v81 = *(_QWORD *)(a1 + 680);
    if (*(_BYTE *)(v81 + v16))
      v82 = 0;
    else
      v82 = v79;
    if (v82)
    {
      if (StateMgr::allTransitioningStatesAlreadyHaveRPA((StateMgr *)a1, v10))
        *(_BYTE *)(v81 + v16) = 1;
      else
        *(_BYTE *)(a1 + 696) = 1;
    }
  }
}

uint64_t StateMgr::getWordAliasState(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  return *(unsigned int *)(*((_QWORD *)this + 62) + 4 * a2);
}

void StateMgr::notifyPronsChanged(StateMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;

  if (*((_DWORD *)this + 180) >= 2u)
  {
    v10 = 1;
    do
    {
      if (*(_BYTE *)(*((_QWORD *)this + 68) + v10) && *(_DWORD *)(a2 + 8))
      {
        for (i = 0; i < *(unsigned int *)(a2 + 8); ++i)
        {
          if (StateMgr::isWordIdInState(this, v10, *(_DWORD *)(*(_QWORD *)a2 + 4 * i), 0, a5, a6, a7, a8))
          {
            StateMgr::verifyState(this, v10, v12, v13, a5, a6, a7, a8);
            if (*(_DWORD *)(*(_QWORD *)this + 80 * v10 + 16) <= 5u)
            {
              StateMgr::recomputePrimitiveBegPhones(this, v10);
              break;
            }
            StateMgr::addPrimitiveBegPhones(this, v10, *(_DWORD *)(*(_QWORD *)a2 + 4 * i));
          }
        }
      }
      ++v10;
    }
    while (v10 < *((unsigned int *)this + 180));
  }
}

_DWORD **StateMgr::mergeBegPhones(_QWORD *a1, unsigned int a2, _DWORD **a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD **result;
  uint64_t v9;
  unint64_t v10;

  **a3 |= 1u;
  v6 = a2;
  v7 = *(unsigned int *)(a1[62] + 4 * a2);
  if (!(_DWORD)v7)
    v7 = a2;
  result = BitArray::inplaceOrSameSize(a3, (const BitArray *)(a1[83] + 16 * v7));
  if (*(_BYTE *)(a1[42] + a2))
  {
    v9 = a1[28];
    if (*(_DWORD *)(v9 + 16 * v6 + 8))
    {
      v10 = 0;
      do
      {
        result = (_DWORD **)StateMgr::mergeBegPhones(a1, *(unsigned int *)(*(_QWORD *)(v9 + 16 * v6) + 4 * v10++), a3);
        v9 = a1[28];
      }
      while (v10 < *(unsigned int *)(v9 + 16 * v6 + 8));
    }
  }
  return result;
}

_DWORD **StateMgr::mergeNextPhones(_DWORD **result, unsigned int a2, _DWORD **a3)
{
  _DWORD *v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  **a3 |= 1u;
  v3 = result[28];
  if (v3[4 * a2 + 2])
  {
    v5 = result;
    v6 = 0;
    v7 = a2;
    v8 = 4 * a2;
    do
    {
      result = StateMgr::mergeBegPhones(v5, *(_DWORD *)(*(_QWORD *)&v3[v8] + 4 * v6++), a3);
      v3 = (_DWORD *)v5[28];
    }
    while (v6 < v3[4 * v7 + 2]);
  }
  return result;
}

uint64_t StateMgr::cacheAllWordInStateInfo(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 24);
  if (v1 >= 2)
  {
    v2 = this;
    v3 = 1;
    v4 = 96;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 544) + v3)
        && !*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * v3)
        && *(_DWORD *)(*(_QWORD *)v2 + v4) >= 0x1F4u)
      {
        this = StateMgr::getBitWords((StateMgr *)v2, v3);
        v1 = *(unsigned int *)(v2 + 24);
      }
      ++v3;
      v4 += 80;
    }
    while (v3 < v1);
  }
  return this;
}

_QWORD *DgnArray<DgnCollArray<unsigned int,WordList>>::releaseAll(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = 80 * v2 - 80;
    do
    {
      DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray(*(_QWORD *)a1 + v3);
      v3 -= 80;
    }
    while (v3 != -80);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnIOwnArray<DgnPrimArray<unsigned int> *>::destructAt(uint64_t result, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (a3 + a2 > a2)
  {
    v3 = (_QWORD *)result;
    v4 = a2;
    v5 = a3 + a2 - 1;
    do
    {
      result = DgnDelete<DgnPrimArray<unsigned int>>(*(_QWORD *)(*v3 + 8 * v5));
      *(_QWORD *)(*v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

_QWORD *DgnIOwnArray<BitArray *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<BitArray>(*(BitArray **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

BitArray *DgnIOwnArray<BitArray *>::destructAt(BitArray *result, int a2, int a3)
{
  BitArray *v3;
  uint64_t v4;
  uint64_t v5;

  if (a3 + a2 > a2)
  {
    v3 = result;
    v4 = a2;
    v5 = a3 + a2 - 1;
    do
    {
      result = DgnDelete<BitArray>(*(BitArray **)(*(_QWORD *)v3 + 8 * v5));
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

void DgnCollArray<unsigned int,WordList>::readObject(uint64_t a1, DgnStream *a2, unsigned int *a3)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  readObject<unsigned int>(a2, a1 + 8, a3);
  readObject<unsigned short>(a2, a1 + 40, a3);
  v15 = 0;
  readObject((uint64_t)a2, &v15, a3);
  readObject((uint64_t)a2, &v15, a3);
  *(_BYTE *)a1 = (_DWORD)v15 != 0;
  readObject((uint64_t)a2, (_DWORD *)&v15 + 1, a3);
  *(_WORD *)(a1 + 2) = WORD2(v15);
  readObject((uint64_t)a2, &v15, a3);
  *(_BYTE *)(a1 + 4) = (_DWORD)v15 != 0;
  readObject((uint64_t)a2, &v15, a3);
  *(_BYTE *)(a1 + 5) = (_DWORD)v15 != 0;
  v14 = 0;
  readObject((uint64_t)a2, &v14, a3);
  LODWORD(v6) = *(_DWORD *)(a1 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    do
    {
      DgnDelete<DgnPrimArray<unsigned int>>(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v7));
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v7++) = 0;
      v6 = *(unsigned int *)(a1 + 32);
    }
    while (v7 < v6);
  }
  v8 = (_QWORD *)(a1 + 24);
  v9 = v14;
  v10 = *(_DWORD *)(a1 + 36);
  if (v14 > v10)
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1 + 24, v14 - v10, 0);
    LODWORD(v6) = *(_DWORD *)(a1 + 32);
  }
  if (v6 <= v9)
  {
    if (v6 < v9)
    {
      v6 = v6;
      do
        *(_QWORD *)(*v8 + 8 * v6++) = 0;
      while (v9 != v6);
    }
  }
  else
  {
    DgnIOwnArray<DgnPrimArray<unsigned int> *>::destructAt(a1 + 24, v9, v6 - v9);
  }
  *(_DWORD *)(a1 + 32) = v9;
  if ((_DWORD)v9)
  {
    v11 = 0;
    do
    {
      v13 = 0;
      readObject((uint64_t)a2, &v13, a3);
      *(_QWORD *)(*v8 + 8 * v11) = 0;
      if (v13)
      {
        v12 = MemChunkAlloc(0x10uLL, 0);
        *v12 = 0;
        v12[1] = 0;
        *(_QWORD *)(*v8 + 8 * v11) = v12;
        readObject<unsigned int>(a2, *(_QWORD *)(*v8 + 8 * v11), a3);
      }
      ++v11;
    }
    while (v11 < *(unsigned int *)(a1 + 32));
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
}

unint64_t DgnArray<StateSpec>::copyArraySlice(unint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v7 = result;
  *(_DWORD *)(result + 8) = 0;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    result = DgnPrimArray<unsigned long long>::reallocElts(result, a4 - v8, 0);
  }
  v9 = *(_DWORD *)(v7 + 8);
  v10 = a4;
  do
  {
    *(_QWORD *)(*(_QWORD *)v7 + 8 * v9) = *(_QWORD *)(*a2 + 8 * a3);
    v9 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v9;
    ++a3;
    --v10;
  }
  while (v10);
LABEL_6:
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

unint64_t DgnArray<RuleSpec>::copyArraySlice(unint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;

  v7 = result;
  *(_DWORD *)(result + 8) = 0;
  v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    v9 = 0;
    v10 = 0;
    if (!a4)
      goto LABEL_6;
  }
  else
  {
    result = DgnPrimArray<unsigned int>::reallocElts(result, a4 - v8, 0);
    v9 = *(_DWORD *)(v7 + 8);
  }
  v11 = *a2;
  v12 = *(_QWORD *)v7;
  v13 = a4;
  v10 = v9;
  do
  {
    *(_DWORD *)(v12 + 4 * v10++) = *(_DWORD *)(v11 + 4 * a3++);
    --v13;
  }
  while (v13);
LABEL_6:
  if (v10 < a4)
  {
    v14 = a4 - (unint64_t)v10;
    v15 = *(_QWORD *)v7 + 4 * v10 + 2;
    do
    {
      *(_DWORD *)(v15 - 2) = 127;
      v15 += 4;
      --v14;
    }
    while (v14);
  }
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

uint64_t DgnCollArray<unsigned int,WordList>::writeObject(unsigned __int8 *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  writeObject<unsigned int>(a2, (uint64_t)(a1 + 8), a3);
  writeObject<unsigned short>(a2, (uint64_t)(a1 + 40), a3);
  v13 = 0;
  writeObject(a2, &v13, a3);
  v12 = *a1;
  writeObject(a2, &v12, a3);
  v11 = *((unsigned __int16 *)a1 + 1);
  writeObject(a2, &v11, a3);
  v10 = a1[4];
  writeObject(a2, &v10, a3);
  v9 = a1[5];
  writeObject(a2, &v9, a3);
  v8 = *((_DWORD *)a1 + 8);
  result = writeObject(a2, &v8, a3);
  if (*((_DWORD *)a1 + 8))
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * v7) != 0;
      result = writeObject(a2, &v8, a3);
      if (v8)
        result = writeObject<unsigned int>(a2, *(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * v7), a3);
      ++v7;
    }
    while (v7 < *((unsigned int *)a1 + 8));
  }
  return result;
}

uint64_t DgnCollArray<unsigned int,WordList>::mergeLargeSortedArray(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  __int16 v3;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  _DWORD *v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v3 = a3;
  if (*(_BYTE *)a1 && *(unsigned __int16 *)(a1 + 2) == a3)
    v6 = a1 + 8;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a3);
  v7 = *(_DWORD *)(v6 + 8);
  v8 = *((_DWORD *)a2 + 2) + v7;
  v32 = 0;
  v33 = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v32, (uint64_t *)v6, 0, v7);
  v14 = *(_DWORD *)(v6 + 12);
  if (v8 > v14)
    DgnPrimArray<unsigned int>::reallocElts(v6, v8 - v14, 0);
  v15 = 0;
  *(_DWORD *)(v6 + 8) = v8;
  v30 = *(_OWORD *)(a1 + 64);
  v31 = v3;
  v16 = v33;
  v17 = *((_DWORD *)a2 + 2);
  v18 = 0;
  v19 = 0;
  if ((_DWORD)v33 && v17)
  {
    v19 = 0;
    v18 = 0;
    v15 = 0;
    do
    {
      v20 = WordList::compareElements((CollMgr **)&v30, (unsigned int *)(v32 + 4 * v15), (unsigned int *)(*a2 + 4 * v18), v9, v10, v11, v12, v13);
      v21 = (_DWORD *)(v32 + 4 * v15);
      if (v20 < 1)
        ++v15;
      else
        v21 = (_DWORD *)(*a2 + 4 * v18);
      *(_DWORD *)(*(_QWORD *)v6 + 4 * v19) = *v21;
      if (v20 > 0)
        ++v18;
      ++v19;
      v16 = v33;
      v17 = *((_DWORD *)a2 + 2);
    }
    while (v15 < v33 && v18 < v17);
  }
  if (v15 < v16)
  {
    v23 = v32;
    v24 = *(_QWORD *)v6;
    v25 = v15;
    do
      *(_DWORD *)(v24 + 4 * v19++) = *(_DWORD *)(v23 + 4 * v25++);
    while (v25 < v33);
    v17 = *((_DWORD *)a2 + 2);
  }
  if (v18 < v17)
  {
    v26 = *a2;
    v27 = *(_QWORD *)v6;
    v28 = v18;
    do
      *(_DWORD *)(v27 + 4 * v19++) = *(_DWORD *)(v26 + 4 * v28++);
    while (v28 < *((unsigned int *)a2 + 2));
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
}

void sub_209801B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DgnCollArray<unsigned int,WordList>::mergeSmallSortedArray(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  __int16 v3;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t v20;
  int v21;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  __int128 v26;
  __int16 v27;
  char v28;

  v3 = a3;
  if (*(_BYTE *)a1 && *(unsigned __int16 *)(a1 + 2) == a3)
    v6 = (_QWORD **)(a1 + 8);
  else
    v6 = *(_QWORD ***)(*(_QWORD *)(a1 + 24) + 8 * a3);
  v7 = *((unsigned int *)v6 + 2);
  v8 = *((unsigned int *)a2 + 2);
  v23 = 0;
  v24 = 0;
  if ((_DWORD)v8 + (_DWORD)v7)
  {
    v25 = 0;
    HIDWORD(v24) = realloc_array(0, &v25, 4 * (v8 + v7), 0, 0, 1) >> 2;
    v9 = v25;
    v23 = v25;
  }
  else
  {
    v9 = 0;
  }
  LODWORD(v24) = v8 + v7;
  v10 = (uint64_t)*v6;
  if ((_DWORD)v8)
  {
    v11 = 0;
    v12 = 0;
    v13 = *a2;
    do
    {
      LODWORD(v25) = *(_DWORD *)(v13 + 4 * v11);
      v26 = *(_OWORD *)(a1 + 64);
      v27 = v3;
      v28 = 0;
      v14 = DgnPrimArray<unsigned int>::searchLastOrBefore(v6, v12, *((_DWORD *)v6 + 2), (uint64_t)&v25, *(uint64_t (**)(uint64_t, uint64_t))(a1 + 56));
      LODWORD(v15) = v14 + 1;
      if (v14 == -1)
        v15 = v12;
      else
        v15 = v15;
      if (v12 < v15)
      {
        v16 = (int *)(v10 + 4 * v12);
        v17 = v15 - v12;
        do
        {
          v18 = *v16++;
          *v9++ = v18;
          --v17;
        }
        while (v17);
      }
      *v9++ = *(_DWORD *)(v13 + 4 * v11++);
      v12 = v15;
    }
    while (v11 != v8);
  }
  else
  {
    LODWORD(v15) = 0;
  }
  if (v15 < v7)
  {
    v19 = (int *)(v10 + 4 * v15);
    v20 = v7 - v15;
    do
    {
      v21 = *v19++;
      *v9++ = v21;
      --v20;
    }
    while (v20);
  }
  if (*v6)
  {
    MemChunkFree(*v6, 0);
    *v6 = 0;
  }
  *v6 = v23;
  v6[1] = v24;
  v23 = 0;
  v24 = 0;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v23);
}

void sub_209801D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t mrec_qsort_r<WordList>(uint64_t result, unint64_t a2, unint64_t a3, CollMgr **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CollMgr **v8;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  int v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unint64_t v34;
  unsigned int *v35;
  int v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int *v66;
  char v67;
  int v68;
  _QWORD *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  unsigned int *v88;
  int64_t v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  char v97;
  BOOL v98;
  int64_t v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  int v106;
  CollMgr **v107;
  unsigned int *v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  unsigned int *v120;
  unsigned int *v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  unsigned int *v132;
  unint64_t v133;
  unsigned int *v134;
  _BOOL4 v135;
  unsigned int *v136;
  unsigned int *v137;
  unint64_t v138;
  unsigned int *v139;
  BOOL v141;
  int v142;

  v8 = a4;
  v10 = a2;
  v11 = (unsigned int *)result;
  v12 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0)
    v13 = 2;
  else
    v13 = a3 != 8;
  v141 = ((result | a3) & 7) == 0;
  v142 = v13;
  if (a2 < 7)
  {
LABEL_117:
    if ((uint64_t)(v10 * a3) > (uint64_t)a3)
    {
      v107 = v8;
      v139 = (unsigned int *)((char *)v11 + v10 * a3);
      v108 = (unsigned int *)((char *)v11 + a3);
      v109 = v11;
      do
      {
        if (v108 > v11)
        {
          v110 = v109;
          v111 = v108;
          do
          {
            v112 = v111;
            v111 = (unsigned int *)((char *)v111 + v12);
            result = WordList::compareElements(v107, v111, v112, a4, a5, a6, a7, a8);
            if ((int)result < 1)
              break;
            if (v142)
            {
              if (v141)
              {
                v113 = 0;
                v114 = (uint64_t)v110 + a3;
                do
                {
                  v115 = *(_QWORD *)(v114 + 8 * v113);
                  *(_QWORD *)(v114 + 8 * v113) = *(_QWORD *)&v110[2 * v113];
                  *(_QWORD *)&v110[2 * v113++] = v115;
                }
                while (a3 >> 3 != v113);
              }
              else
              {
                v117 = 0;
                v118 = (uint64_t)v110 + a3;
                do
                {
                  v119 = *(_BYTE *)(v118 + v117);
                  *(_BYTE *)(v118 + v117) = *((_BYTE *)v110 + v117);
                  *((_BYTE *)v110 + v117++) = v119;
                }
                while (a3 != v117);
              }
            }
            else
            {
              v116 = *(_QWORD *)v112;
              *(_QWORD *)v112 = *(_QWORD *)v111;
              *(_QWORD *)v111 = v116;
            }
            v110 = (unsigned int *)((char *)v110 + v12);
          }
          while (v111 > v11);
        }
        v108 = (unsigned int *)((char *)v108 + a3);
        v109 = (unsigned int *)((char *)v109 + a3);
      }
      while (v108 < v139);
    }
    return result;
  }
  v135 = a3 != 8;
  v14 = a3 >> 3;
  while (1)
  {
    v15 = (unsigned int *)((char *)v11 + (v10 >> 1) * a3);
    if (v10 == 7)
      goto LABEL_44;
    v16 = (unsigned int *)((char *)v11 + (v10 - 1) * a3);
    if (v10 >= 0x29)
    {
      v136 = (unsigned int *)((char *)v11 + (v10 - 1) * a3);
      v17 = (v10 >> 3) * a3;
      v18 = (unsigned int *)((char *)v11 + v17);
      v133 = v17;
      v19 = (unsigned int *)((char *)v11 + 2 * v17);
      v20 = WordList::compareElements(v8, v11, (unsigned int *)((char *)v11 + v17), a4, a5, a6, a7, a8);
      v137 = v18;
      v26 = WordList::compareElements(v8, v18, v19, v21, v22, v23, v24, v25);
      if (v20 < 0)
      {
        if ((v26 & 0x80000000) == 0)
        {
          if ((int)WordList::compareElements(v8, v11, v19, v27, v28, v29, v30, v31) >= 0)
            v32 = v11;
          else
            v32 = v19;
          goto LABEL_18;
        }
      }
      else if (v26 <= 0)
      {
        if ((int)WordList::compareElements(v8, v11, v19, v27, v28, v29, v30, v31) >= 0)
          v32 = v19;
        else
          v32 = v11;
LABEL_18:
        v137 = v32;
      }
      v34 = (v10 >> 3) * a3;
      v35 = (unsigned int *)((char *)v15 + v133);
      v132 = (unsigned int *)((char *)v15 - v133);
      v36 = WordList::compareElements(v8, (unsigned int *)((char *)v15 - v133), (unsigned int *)((char *)v11 + (v10 >> 1) * a3), v27, v28, v29, v30, v31);
      v42 = WordList::compareElements(v8, (unsigned int *)((char *)v11 + (v10 >> 1) * a3), (unsigned int *)((char *)v15 + v133), v37, v38, v39, v40, v41);
      if (v36 < 0)
      {
        if ((v42 & 0x80000000) == 0)
        {
          v15 = (unsigned int *)((char *)v15 - v133);
          if ((int)WordList::compareElements(v8, v132, v35, v43, v44, v45, v46, v47) < 0)
            v15 = v35;
        }
      }
      else if (v42 <= 0)
      {
        v15 = (unsigned int *)((char *)v15 - v133);
        if ((int)WordList::compareElements(v8, v132, v35, v43, v44, v45, v46, v47) >= 0)
          v15 = v35;
      }
      v16 = (unsigned int *)((char *)v136 - v133);
      v134 = (unsigned int *)((char *)v136 - 2 * v133);
      v48 = WordList::compareElements(v8, (unsigned int *)((char *)v136 - 2 * v34), (unsigned int *)((char *)v136 - v34), v43, v44, v45, v46, v47);
      v54 = WordList::compareElements(v8, (unsigned int *)((char *)v136 - v34), v136, v49, v50, v51, v52, v53);
      if (v48 < 0)
      {
        v33 = v137;
        if ((v54 & 0x80000000) == 0)
        {
          v16 = (unsigned int *)((char *)v11 + (v10 - 1) * a3);
          if ((int)WordList::compareElements(v8, v134, v136, a4, a5, a6, a7, a8) >= 0)
            v16 = v134;
        }
      }
      else
      {
        v33 = v137;
        if (v54 <= 0)
        {
          v16 = (unsigned int *)((char *)v11 + (v10 - 1) * a3);
          if ((int)WordList::compareElements(v8, v134, v136, a4, a5, a6, a7, a8) < 0)
            v16 = v134;
        }
      }
      goto LABEL_35;
    }
    v33 = v11;
LABEL_35:
    v55 = WordList::compareElements(v8, v33, v15, a4, a5, a6, a7, a8);
    result = WordList::compareElements(v8, v15, v16, v56, v57, v58, v59, v60);
    if (v55 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WordList::compareElements(v8, v33, v16, a4, a5, a6, a7, a8);
        if ((int)result >= 0)
          v15 = v33;
        else
          v15 = v16;
      }
    }
    else if ((int)result <= 0)
    {
      result = WordList::compareElements(v8, v33, v16, a4, a5, a6, a7, a8);
      if ((int)result >= 0)
        v15 = v16;
      else
        v15 = v33;
    }
LABEL_44:
    if (v142)
    {
      if (v141)
      {
        v61 = v11;
        v62 = a3 >> 3;
        do
        {
          v63 = *(_QWORD *)v61;
          *(_QWORD *)v61 = *(_QWORD *)v15;
          v61 += 2;
          *(_QWORD *)v15 = v63;
          v15 += 2;
          --v62;
        }
        while (v62);
      }
      else
      {
        v65 = a3;
        v66 = v11;
        do
        {
          v67 = *(_BYTE *)v66;
          *(_BYTE *)v66 = *(_BYTE *)v15;
          v66 = (unsigned int *)((char *)v66 + 1);
          *(_BYTE *)v15 = v67;
          v15 = (unsigned int *)((char *)v15 + 1);
          --v65;
        }
        while (v65);
      }
    }
    else
    {
      v64 = *(_QWORD *)v11;
      *(_QWORD *)v11 = *(_QWORD *)v15;
      *(_QWORD *)v15 = v64;
    }
    v68 = 0;
    v69 = (_QWORD *)((char *)v11 + a3);
    v138 = v10;
    v70 = (unsigned int *)((char *)v11 + (v10 - 1) * a3);
    v71 = v70;
    v72 = (unsigned int *)((char *)v11 + a3);
LABEL_53:
    while (v72 <= v71)
    {
      result = WordList::compareElements(v8, v72, v11, a4, a5, a6, a7, a8);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v142)
        {
          if (v141)
          {
            v73 = 0;
            do
            {
              v74 = v69[v73];
              v69[v73] = *(_QWORD *)&v72[2 * v73];
              *(_QWORD *)&v72[2 * v73++] = v74;
            }
            while (v14 != v73);
          }
          else
          {
            v83 = 0;
            do
            {
              v84 = *((_BYTE *)v69 + v83);
              *((_BYTE *)v69 + v83) = *((_BYTE *)v72 + v83);
              *((_BYTE *)v72 + v83++) = v84;
            }
            while (a3 != v83);
          }
        }
        else
        {
          v82 = *v69;
          *v69 = *(_QWORD *)v72;
          *(_QWORD *)v72 = v82;
        }
        v69 = (_QWORD *)((char *)v69 + a3);
        v68 = 1;
      }
      v72 = (unsigned int *)((char *)v72 + a3);
    }
    while (v72 <= v71)
    {
      result = WordList::compareElements(v8, v71, v11, a4, a5, a6, a7, a8);
      if ((result & 0x80000000) != 0)
      {
        if (v142)
        {
          if (v141)
          {
            v80 = 0;
            do
            {
              v81 = *(_QWORD *)&v72[2 * v80];
              *(_QWORD *)&v72[2 * v80] = *(_QWORD *)&v71[2 * v80];
              *(_QWORD *)&v71[2 * v80++] = v81;
            }
            while (v14 != v80);
          }
          else
          {
            v86 = 0;
            do
            {
              v87 = *((_BYTE *)v72 + v86);
              *((_BYTE *)v72 + v86) = *((_BYTE *)v71 + v86);
              *((_BYTE *)v71 + v86++) = v87;
            }
            while (a3 != v86);
          }
        }
        else
        {
          v85 = *(_QWORD *)v72;
          *(_QWORD *)v72 = *(_QWORD *)v71;
          *(_QWORD *)v71 = v85;
        }
        v72 = (unsigned int *)((char *)v72 + a3);
        v71 = (unsigned int *)((char *)v71 + v12);
        v68 = 1;
        goto LABEL_53;
      }
      if (!(_DWORD)result)
      {
        if (v142)
        {
          if (v141)
          {
            v75 = 0;
            do
            {
              v76 = *(_QWORD *)&v71[2 * v75];
              *(_QWORD *)&v71[2 * v75] = *(_QWORD *)&v70[2 * v75];
              *(_QWORD *)&v70[2 * v75++] = v76;
            }
            while (v14 != v75);
          }
          else
          {
            v78 = 0;
            do
            {
              v79 = *((_BYTE *)v71 + v78);
              *((_BYTE *)v71 + v78) = *((_BYTE *)v70 + v78);
              *((_BYTE *)v70 + v78++) = v79;
            }
            while (a3 != v78);
          }
        }
        else
        {
          v77 = *(_QWORD *)v71;
          *(_QWORD *)v71 = *(_QWORD *)v70;
          *(_QWORD *)v70 = v77;
        }
        v70 = (unsigned int *)((char *)v70 + v12);
        v68 = 1;
      }
      v71 = (unsigned int *)((char *)v71 + v12);
    }
    v88 = (unsigned int *)((char *)v11 + v138 * a3);
    if (!v68)
      break;
    v89 = (char *)v72 - (char *)v69;
    if ((char *)v69 - (char *)v11 >= (char *)v72 - (char *)v69)
      v90 = (char *)v72 - (char *)v69;
    else
      v90 = (char *)v69 - (char *)v11;
    if (v90)
    {
      if (v141)
      {
        v91 = (_QWORD *)((char *)v72 - v90);
        v92 = v90 >> 3;
        v93 = v11;
        do
        {
          v94 = *(_QWORD *)v93;
          *(_QWORD *)v93 = *v91;
          v93 += 2;
          *v91++ = v94;
          --v92;
        }
        while (v92);
      }
      else
      {
        v95 = -(uint64_t)v90;
        v96 = v11;
        do
        {
          v97 = *(_BYTE *)v96;
          *(_BYTE *)v96 = *((_BYTE *)v72 + v95);
          v96 = (unsigned int *)((char *)v96 + 1);
          *((_BYTE *)v72 + v95) = v97;
          v98 = __CFADD__(v95++, 1);
        }
        while (!v98);
      }
    }
    v99 = (char *)v70 - (char *)v71;
    if ((char *)v70 - (char *)v71 >= (char *)v88 - ((char *)v70 + a3))
      v100 = (char *)v88 - ((char *)v70 + a3);
    else
      v100 = (char *)v70 - (char *)v71;
    if (v100)
    {
      if (v141)
      {
        v101 = (char *)v88 - v100;
        v102 = v100 >> 3;
        do
        {
          v103 = *(_QWORD *)v72;
          *(_QWORD *)v72 = *(_QWORD *)v101;
          v72 += 2;
          *(_QWORD *)v101 = v103;
          v101 += 8;
          --v102;
        }
        while (v102);
      }
      else
      {
        v104 = -(uint64_t)v100;
        do
        {
          v105 = *(_BYTE *)v72;
          *(_BYTE *)v72 = *((_BYTE *)v88 + v104);
          v72 = (unsigned int *)((char *)v72 + 1);
          *((_BYTE *)v88 + v104) = v105;
          v98 = __CFADD__(v104++, 1);
        }
        while (!v98);
      }
    }
    if (v89 > (uint64_t)a3)
      result = mrec_qsort_r<WordList>(v11, v89 / a3, a3, a4);
    if (v99 <= (uint64_t)a3)
      return result;
    v11 = (unsigned int *)((char *)v88 - v99);
    v10 = v99 / a3;
    v106 = v135;
    if (((((_DWORD)v88 - (_DWORD)v99) | a3) & 7) != 0)
      v106 = 2;
    v141 = ((((_DWORD)v88 - (_DWORD)v99) | a3) & 7) == 0;
    v142 = v106;
    v8 = a4;
    if (v10 < 7)
      goto LABEL_117;
  }
  v120 = (unsigned int *)((char *)v11 + a3);
  if ((uint64_t)(v138 * a3) > (uint64_t)a3)
  {
    v121 = v11;
    do
    {
      if (v120 > v11)
      {
        v122 = v121;
        v123 = v120;
        do
        {
          v124 = v123;
          v123 = (unsigned int *)((char *)v123 + v12);
          result = WordList::compareElements(a4, v123, v124, a4, a5, a6, a7, a8);
          if ((int)result < 1)
            break;
          if (v142)
          {
            if (v141)
            {
              v125 = 0;
              v126 = (uint64_t)v122 + a3;
              do
              {
                v127 = *(_QWORD *)(v126 + 8 * v125);
                *(_QWORD *)(v126 + 8 * v125) = *(_QWORD *)&v122[2 * v125];
                *(_QWORD *)&v122[2 * v125++] = v127;
              }
              while (v14 != v125);
            }
            else
            {
              v129 = 0;
              v130 = (uint64_t)v122 + a3;
              do
              {
                v131 = *(_BYTE *)(v130 + v129);
                *(_BYTE *)(v130 + v129) = *((_BYTE *)v122 + v129);
                *((_BYTE *)v122 + v129++) = v131;
              }
              while (a3 != v129);
            }
          }
          else
          {
            v128 = *(_QWORD *)v124;
            *(_QWORD *)v124 = *(_QWORD *)v123;
            *(_QWORD *)v123 = v128;
          }
          v122 = (unsigned int *)((char *)v122 + v12);
        }
        while (v123 > v11);
      }
      v120 = (unsigned int *)((char *)v120 + a3);
      v121 = (unsigned int *)((char *)v121 + a3);
    }
    while (v120 < v88);
  }
  return result;
}

uint64_t DgnCollArray<unsigned int,WordList>::removeSortedArray(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int Equal;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int *v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  __int128 v23;
  __int16 v24;
  char v25;

  if (*(_BYTE *)a1 && *(unsigned __int16 *)(a1 + 2) == a3)
    v4 = a1 + 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a3);
  v5 = *(_DWORD *)(v4 + 8);
  v6 = *(_DWORD *)(a2 + 8);
  LODWORD(v22) = **(_DWORD **)a2;
  v23 = *(_OWORD *)(a1 + 64);
  v24 = a3;
  v25 = 0;
  Equal = DgnPrimArray<unsigned int>::searchFirstEqual((_QWORD *)v4, 0, v5, (uint64_t)&v22, *(uint64_t (**)(uint64_t, uint64_t))(a1 + 56));
  v8 = v5 - v6;
  v22 = 0;
  *(_QWORD *)&v23 = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v22, (uint64_t *)v4, 0, *(_DWORD *)(v4 + 8));
  v9 = *(_DWORD *)(v4 + 12);
  if (v8 > v9)
    DgnPrimArray<unsigned int>::reallocElts(v4, v8 - v9, 0);
  *(_DWORD *)(v4 + 8) = v8;
  if (Equal < v5)
  {
    v10 = 0;
    v11 = v22;
    v12 = *(_DWORD **)a2;
    v13 = Equal;
    do
    {
      v14 = *(_DWORD *)(v11 + 4 * v13);
      if (v14 == v12[v10])
      {
        v15 = v13 + 1;
        if (++v10 == *(_DWORD *)(a2 + 8) && v15 < v5)
        {
          v17 = *(_QWORD *)v4;
          v18 = (int *)(v11 + 4 * v15);
          v19 = ~v13 + v5;
          do
          {
            v20 = *v18++;
            *(_DWORD *)(v17 + 4 * Equal++) = v20;
            --v19;
          }
          while (v19);
          return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
        }
        ++v13;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)v4 + 4 * Equal++) = v14;
        ++v13;
      }
    }
    while (v13 < v5);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
}

void sub_20980265C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t DgnPrimArray<unsigned int>::searchFirstEqual(_QWORD *a1, int a2, int a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  int v6;
  int v10;
  int v11;
  int v12;
  BOOL v13;

  v5 = 0xFFFFFFFFLL;
  if (a3)
  {
    v6 = a2;
    if (a3 > a2)
    {
      v10 = a3 - 1;
      do
      {
        v11 = v10 + v6;
        if (v10 + v6 < 0 != __OFADD__(v10, v6))
          ++v11;
        v5 = (v11 >> 1);
        v12 = a5(*a1 + 4 * v5, a4);
        if (v12)
        {
          if (v12 >= 0)
            v10 = v5 - 1;
          else
            v6 = v5 + 1;
        }
        else
        {
          v13 = v10 == v6;
          v10 = v5;
          if (v13)
            return v5;
        }
      }
      while (v6 <= v10);
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t DgnCollArray<unsigned int,WordList>::sortCollation(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  __int16 v11;

  if (*(_BYTE *)a1 && *(unsigned __int16 *)(a1 + 2) == a2)
    v8 = a1 + 8;
  else
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a2);
  v10 = *(_OWORD *)(a1 + 64);
  v11 = a2;
  return mrec_qsort_r<WordList>(*(_QWORD *)v8, *(unsigned int *)(v8 + 8), 4uLL, (CollMgr **)&v10, a5, a6, a7, a8);
}

void MrecInitModule_fstcore_fst(void)
{
  uint64_t *v0;
  _QWORD *v1;

  if (!gParDebugFstLatticeConstruction)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugFstLatticeConstruction", (const char *)&unk_209A609B3, (const char *)&unk_209A609B3, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugFstLatticeConstruction = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstLatticeConstruction);
  }
}

uint64_t FstCore::FstCore(uint64_t a1, __int128 *a2, __int16 a3, uint64_t a4, uint64_t a5, const ArcGraph *a6)
{
  uint64_t v11;
  const PicMgr *v12;
  uint64_t *v13;
  FwdBwd *v14;
  __int128 v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  *(_QWORD *)a1 = 0x7FFFFFFFF0;
  *(_WORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = -16;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  PelStats::resetStats((PelStats *)(a1 + 80));
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  PelStats::resetStats((PelStats *)(a1 + 256));
  SearchStats::resetStats(a1 + 432);
  SearchStats::resetStats(a1 + 464);
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  LatticeStats::LatticeStats((LatticeStats *)(a1 + 688));
  *(_DWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 8);
  *(_BYTE *)(a1 + 1112) = *((_BYTE *)a2 + 79);
  if (a4)
    v12 = *(const PicMgr **)(a4 + 48);
  else
    v12 = 0;
  if (*((_BYTE *)a2 + 78))
  {
    v13 = MemChunkAlloc(0x138uLL, 0);
    v14 = FwdBwd::FwdBwd((FwdBwd *)v13, v12);
  }
  else
  {
    FstCore::generateDecoder(*((_DWORD *)a2 + 7), *((unsigned __int8 *)a2 + 76), *((unsigned __int8 *)a2 + 64), *((unsigned __int8 *)a2 + 77), *((_DWORD *)a2 + 9) != 5000, *((_DWORD *)a2 + 17), *((_DWORD *)a2 + 18), v11);
  }
  *(_QWORD *)(a1 + 16) = v14;
  *((_QWORD *)v14 + 13) = a1 + 1120;
  v15 = *a2;
  *((_QWORD *)&v15 + 1) = *(_QWORD *)((char *)a2 + 12);
  *(_OWORD *)((char *)v14 + 8) = v15;
  SearchItf::setHashPropagateBestTokensFirst((uint64_t)v14, *((_DWORD *)a2 + 5));
  v16 = *(_DWORD **)(a1 + 16);
  v16[7] = *((_DWORD *)a2 + 6);
  (*(void (**)(_DWORD *, const PicMgr *))(*(_QWORD *)v16 + 96))(v16, v12);
  (*(void (**)(_QWORD, const PicMgr *, uint64_t))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16), v12, a5);
  v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v17 + 56) = a4;
  v18 = **(_QWORD **)(a4 + 48);
  *(_DWORD *)(v17 + 64) = *(_DWORD *)v18;
  *(_WORD *)(v17 + 68) = *(_WORD *)(v18 + 56);
  *(_QWORD *)(v17 + 72) = *((_QWORD *)a2 + 4);
  SearchItf::setArcGraph((SearchItf *)v17, a6);
  (*(void (**)(_QWORD, _QWORD, BOOL))(**(_QWORD **)(a1 + 16) + 144))(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), (_DWORD)a5 == 2);
  *(_QWORD *)(a1 + 60) = *((_QWORD *)a2 + 5);
  v19 = MemChunkAlloc(0xD0uLL, 0);
  *(_QWORD *)(a1 + 72) = SearchLMScorer::SearchLMScorer((uint64_t)v19, *((_DWORD *)a2 + 12), *((_BYTE *)a2 + 52), *((_DWORD *)a2 + 14), *((_DWORD *)a2 + 15), 0, 0, 0, 0, 0);
  return a1;
}

void FstCore::~FstCore(SearchItf **this)
{
  SearchItf *v2;

  SearchItf::unsetArcGraph(this[2]);
  v2 = this[2];
  if (v2)
  {
    (*(void (**)(SearchItf *))(*(_QWORD *)v2 + 16))(this[2]);
    MemChunkFree(v2, 0);
  }
  this[2] = 0;
  DgnDelete<SearchLMScorer>(this[9]);
  this[9] = 0;
  DgnDelete<Constraint>(this[138]);
  this[138] = 0;
}

SearchLMScorer *DgnDelete<SearchLMScorer>(SearchLMScorer *result)
{
  _QWORD *v1;

  if (result)
  {
    SearchLMScorer::~SearchLMScorer(result);
    return (SearchLMScorer *)MemChunkFree(v1, 0);
  }
  return result;
}

Constraint *DgnDelete<Constraint>(Constraint *result)
{
  _QWORD *v1;

  if (result)
  {
    Constraint::~Constraint(result);
    return (Constraint *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t FstCore::beginTopRecPassSyncRecogEmbedded(FstCore *this, int a2, uint64_t a3, PelScorer *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t ArcGraphOrThrow;

  *((_QWORD *)this + 4) = a4;
  v9 = *((_DWORD *)this + 12) * a2;
  *((_DWORD *)this + 13) = a2;
  *((_DWORD *)this + 14) = v9;
  *((_DWORD *)this + 10) = a3;
  *(_DWORD *)this = a5;
  v10 = *((_QWORD *)this + 2);
  v11 = *(_DWORD *)(v10 + 128);
  if (v11)
  {
    if (v11 != 1)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 202, (uint64_t)"fst/fstcore", 4, (uint64_t)&errStr_fst_fstcore_E_FST_TOO_MANY_EMBEDDED_TRANSDUCERS, a7, a8, *(_DWORD *)(v10 + 128));
    ArcGraphOrThrow = ArcGraphMgr::getArcGraphOrThrow((ArcGraphMgr *)ArcGraphMgr::smpArcGraphMgr, *(unsigned __int16 *)(*(_QWORD *)(v10 + 120) + 6), a3, (uint64_t)a4, a5, a6, a7, a8);
    v10 = *((_QWORD *)this + 2);
  }
  else
  {
    ArcGraphOrThrow = 0;
  }
  return (*(uint64_t (**)(uint64_t, PelScorer *, uint64_t))(*(_QWORD *)v10 + 48))(v10, a4, ArcGraphOrThrow);
}

uint64_t FstCore::beginTopRecPassSyncRecog(FstCore *this, int a2, uint64_t a3, PelScorer *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FstCore::beginTopRecPassSyncRecogEmbedded(this, a2, a3, a4, 0, a6, a7, a8);
  PelScoreCache::addCacheClient(*(_QWORD *)(*((_QWORD *)this + 4) + 120), this);
  *((_BYTE *)this + 44) = 1;
  return FstCore::seedTheory(this, 0, 0, 4294967294);
}

uint64_t FstCore::seedTheory(FstCore *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*((_BYTE *)this + 24))
    a3 = (2 * (_DWORD)a3) | 1u;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *))(**((_QWORD **)this + 2) + 112))(*((_QWORD *)this + 2), a2, a3, a4, (char *)this + 432);
}

uint64_t FstCore::endTopRecPassSyncRecog(FstCore *this)
{
  PelScoreCache *v2;
  double v3;

  v2 = *(PelScoreCache **)(*((_QWORD *)this + 4) + 120);
  PelScoreCache::removeCacheClientOfFramesFromTimeOn((uint64_t)v2, *(_DWORD *)this, (void *)1, this);
  v3 = PelScoreCache::removeCacheClient(v2, this);
  *((_BYTE *)this + 44) = 0;
  *((_QWORD *)this + 4) = 0;
  return (*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), v3);
}

uint64_t FstCore::endTopRecPassSyncRecogEmbedded(FstCore *this)
{
  *((_QWORD *)this + 4) = 0;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2));
}

uint64_t FstCore::doFrame(unsigned int *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *a1;
  v4 = (_QWORD *)*((_QWORD *)a1 + 4);
  v5 = v4[15];
  (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t, unsigned int *, _QWORD))(*v4 + 56))(v4, v3, 0, a2, a1 + 20, *((unsigned __int8 *)a1 + 1112));
  FstCore::doFrameEmbedded((FstCore *)a1, 5000, 1);
  (*(void (**)(_QWORD, uint64_t, unsigned int *))(**((_QWORD **)a1 + 4) + 64))(*((_QWORD *)a1 + 4), v3, a1 + 20);
  return PelScoreCache::removeCacheClientOfFrame(v5, v3, a1);
}

uint64_t FstCore::doFrameEmbedded(FstCore *this, uint64_t a2, int a3)
{
  uint64_t v6;
  SearchItf *v7;
  int v8;
  int v9;
  SearchItf *v10;
  int v11;
  uint64_t (*v12)(void);
  SearchItf *v13;
  int v14;
  int v15;
  uint64_t result;

  if (*((_BYTE *)this + 24))
  {
    v6 = (2 * *(_DWORD *)this);
    if (a3)
    {
      v7 = (SearchItf *)*((_QWORD *)this + 2);
      if (*(int *)this <= 0)
        v8 = -1;
      else
        v8 = v6 - 1;
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 184))(*((_QWORD *)this + 2));
      a2 = SearchItf::normalizeBestAndComputeEstimatedThresh(v7, v8, v9);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, char *, _QWORD))(**((_QWORD **)this + 2) + 8))(*((_QWORD *)this + 2), v6, a2, (char *)this + 432, 0);
    if (a3)
    {
      v10 = (SearchItf *)*((_QWORD *)this + 2);
      v11 = (*(uint64_t (**)(SearchItf *))(*(_QWORD *)v10 + 184))(v10);
      SearchItf::normalizeBestAndComputeEstimatedThresh(v10, v6, v11);
    }
    v12 = *(uint64_t (**)(void))(**((_QWORD **)this + 2) + 8);
  }
  else
  {
    if (a3)
    {
      v13 = (SearchItf *)*((_QWORD *)this + 2);
      if (*(int *)this <= 0)
        v14 = -1;
      else
        v14 = *(_DWORD *)this - 1;
      v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v13 + 184))(*((_QWORD *)this + 2));
      SearchItf::normalizeBestAndComputeEstimatedThresh(v13, v14, v15);
    }
    v12 = *(uint64_t (**)(void))(**((_QWORD **)this + 2) + 8);
  }
  result = v12();
  ++*((_DWORD *)this + 108);
  ++*(_DWORD *)this;
  return result;
}

uint64_t FstCore::getNActiveStates(FstCore *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 152))(*((_QWORD *)this + 2));
}

uint64_t FstCore::setRecogEndTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t FstCore::beginTopRecSyncRecog(uint64_t a1, int a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = a2;
  *(_DWORD *)a1 = -16;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a3);
  return (***(uint64_t (****)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 16));
}

double FstStats::resetStats(FstStats *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

double FstCore::endTopRecSyncRecog(FstCore *this)
{
  double result;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  result = 0.0;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 86) = 0u;
  *((_OWORD *)this + 87) = 0u;
  *((_OWORD *)this + 88) = 0u;
  *((_OWORD *)this + 89) = 0u;
  *((_OWORD *)this + 90) = 0u;
  *((_OWORD *)this + 91) = 0u;
  *((_OWORD *)this + 92) = 0u;
  *((_OWORD *)this + 93) = 0u;
  *((_OWORD *)this + 94) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *((_OWORD *)this + 97) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *((_OWORD *)this + 99) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *((_OWORD *)this + 101) = 0u;
  return result;
}

BOOL FstCore::checkForDone(FstCore *this)
{
  int v1;

  v1 = *((_DWORD *)this + 10);
  return v1 != -16 && *(_DWORD *)this == v1;
}

void FstCore::printSize(FstCore *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  SearchLMScorer *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  Constraint *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  int v229;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 382, (DgnString *)&v228);
  if (v229)
    v16 = (void *)v228;
  else
    v16 = &unk_209A609B3;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A609B3, a3, &unk_209A609B3, v16);
  DgnString::~DgnString((DgnString *)&v228);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A609B3);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 383, (DgnString *)&v228);
  if (v229)
    v27 = (void *)v228;
  else
    v27 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A609B3, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 384, (DgnString *)&v228);
  if (v229)
    v32 = (void *)v228;
  else
    v32 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A609B3, (34 - a3), (34 - a3), v32, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 2;
  *a5 += 2;
  v33 = *((_QWORD *)this + 2);
  if (v33)
  {
    v227 = 0;
    v228 = 0;
    v226 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v33 + 64))(v33, 0xFFFFFFFFLL, (a3 + 1), &v228, &v227, &v226);
    *a4 += v228;
    *a5 += v227;
    *a6 += v226;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v34 = 4;
  else
    v34 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 385, (DgnString *)&v228);
  if (v229)
    v39 = (void *)v228;
  else
    v39 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, (a3 + 1), &unk_209A609B3, (34 - a3), (34 - a3), v39, v34, v34, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v34;
  *a5 += v34;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 387, (DgnString *)&v228);
  if (v229)
    v44 = (void *)v228;
  else
    v44 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &unk_209A609B3, (34 - a3), (34 - a3), v44, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v228);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v45 = 4;
  else
    v45 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 388, (DgnString *)&v228);
  if (v229)
    v50 = (void *)v228;
  else
    v50 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, (a3 + 1), &unk_209A609B3, (34 - a3), (34 - a3), v50, v45, v45, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v45;
  *a5 += v45;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 390, (DgnString *)&v228);
  if (v229)
    v55 = (void *)v228;
  else
    v55 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, (a3 + 1), &unk_209A609B3, (34 - a3), (34 - a3), v55, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 392, (DgnString *)&v228);
  if (v229)
    v60 = (void *)v228;
  else
    v60 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, (a3 + 1), &unk_209A609B3, (34 - a3), (34 - a3), v60, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v228);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 394, (DgnString *)&v228);
  if (v229)
    v65 = (void *)v228;
  else
    v65 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, (a3 + 1), &unk_209A609B3, (34 - a3), (34 - a3), v65, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 396, (DgnString *)&v228);
  if (v229)
    v70 = (void *)v228;
  else
    v70 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, (a3 + 1), &unk_209A609B3, (34 - a3), (34 - a3), v70, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 398, (DgnString *)&v228);
  if (v229)
    v75 = (void *)v228;
  else
    v75 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, (a3 + 1), &unk_209A609B3, (34 - a3), (34 - a3), v75, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 400, (DgnString *)&v228);
  if (v229)
    v80 = (void *)v228;
  else
    v80 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, (a3 + 1), &unk_209A609B3, (34 - a3), (34 - a3), v80, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 402, (DgnString *)&v228);
  if (v229)
    v85 = (void *)v228;
  else
    v85 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, (a3 + 1), &unk_209A609B3, (34 - a3), (34 - a3), v85, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  v86 = (SearchLMScorer *)*((_QWORD *)this + 9);
  if (v86)
  {
    v227 = 0;
    v228 = 0;
    v226 = 0;
    SearchLMScorer::printSize(v86, 0xFFFFFFFFLL, (a3 + 1), &v228, &v227, &v226);
    *a4 += v228;
    *a5 += v227;
    *a6 += v226;
  }
  v225 = a3;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v87 = 4;
  else
    v87 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 404, (DgnString *)&v228);
  if (v229)
    v92 = (void *)v228;
  else
    v92 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, (a3 + 1), &unk_209A609B3, (34 - a3), (34 - a3), v92, v87, v87, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v87;
  *a5 += v87;
  v93 = PelStats::sizeObject((uint64_t)this + 80, 0);
  v94 = PelStats::sizeObject((uint64_t)this + 80, 1);
  v95 = PelStats::sizeObject((uint64_t)this + 80, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 406, (DgnString *)&v228);
  if (v229)
    v100 = (void *)v228;
  else
    v100 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v96, v97, v98, v99, v21, &unk_209A609B3, v22, v22, v100, v93, v94, v95);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v93;
  *a5 += v94;
  *a6 += v95;
  v101 = PelStats::sizeObject((uint64_t)this + 256, 0);
  v102 = PelStats::sizeObject((uint64_t)this + 256, 1);
  v103 = PelStats::sizeObject((uint64_t)this + 256, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 408, (DgnString *)&v228);
  if (v229)
    v108 = (void *)v228;
  else
    v108 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v21, &unk_209A609B3, v22, v22, v108, v101, v102, v103);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v101;
  *a5 += v102;
  *a6 += v103;
  v109 = sizeObject((uint64_t)this + 432, 0);
  v110 = sizeObject((uint64_t)this + 432, 1);
  v111 = sizeObject((uint64_t)this + 432, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 410, (DgnString *)&v228);
  if (v229)
    v116 = (void *)v228;
  else
    v116 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, v21, &unk_209A609B3, v22, v22, v116, v109, v110, v111);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v109;
  *a5 += v110;
  *a6 += v111;
  v117 = sizeObject((uint64_t)this + 464, 0);
  v118 = sizeObject((uint64_t)this + 464, 1);
  v119 = sizeObject((uint64_t)this + 464, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 412, (DgnString *)&v228);
  if (v229)
    v124 = (void *)v228;
  else
    v124 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v120, v121, v122, v123, v21, &unk_209A609B3, v22, v22, v124, v117, v118, v119);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v117;
  *a5 += v118;
  *a6 += v119;
  v125 = SnapTime::sizeObject((uint64_t)this + 496, 0);
  v126 = SnapTime::sizeObject((uint64_t)this + 496, 1);
  v127 = SnapTime::sizeObject((uint64_t)this + 496, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 414, (DgnString *)&v228);
  if (v229)
    v132 = (void *)v228;
  else
    v132 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v128, v129, v130, v131, v21, &unk_209A609B3, v22, v22, v132, v125, v126, v127);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v125;
  *a5 += v126;
  *a6 += v127;
  v133 = SnapTime::sizeObject((uint64_t)this + 528, 0);
  v134 = SnapTime::sizeObject((uint64_t)this + 528, 1);
  v135 = SnapTime::sizeObject((uint64_t)this + 528, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 416, (DgnString *)&v228);
  if (v229)
    v140 = (void *)v228;
  else
    v140 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v136, v137, v138, v139, v21, &unk_209A609B3, v22, v22, v140, v133, v134, v135);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v133;
  *a5 += v134;
  *a6 += v135;
  v141 = SnapTime::sizeObject((uint64_t)this + 560, 0);
  v142 = SnapTime::sizeObject((uint64_t)this + 560, 1);
  v143 = SnapTime::sizeObject((uint64_t)this + 560, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 418, (DgnString *)&v228);
  if (v229)
    v148 = (void *)v228;
  else
    v148 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v21, &unk_209A609B3, v22, v22, v148, v141, v142, v143);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v141;
  *a5 += v142;
  *a6 += v143;
  v149 = SnapTime::sizeObject((uint64_t)this + 592, 0);
  v150 = SnapTime::sizeObject((uint64_t)this + 592, 1);
  v151 = SnapTime::sizeObject((uint64_t)this + 592, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 420, (DgnString *)&v228);
  if (v229)
    v156 = (void *)v228;
  else
    v156 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v152, v153, v154, v155, v21, &unk_209A609B3, v22, v22, v156, v149, v150, v151);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v149;
  *a5 += v150;
  *a6 += v151;
  v157 = SnapTime::sizeObject((uint64_t)this + 624, 0);
  v158 = SnapTime::sizeObject((uint64_t)this + 624, 1);
  v159 = SnapTime::sizeObject((uint64_t)this + 624, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 422, (DgnString *)&v228);
  if (v229)
    v164 = (void *)v228;
  else
    v164 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v21, &unk_209A609B3, v22, v22, v164, v157, v158, v159);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v157;
  *a5 += v158;
  *a6 += v159;
  v165 = SnapTime::sizeObject((uint64_t)this + 656, 0);
  v166 = SnapTime::sizeObject((uint64_t)this + 656, 1);
  v167 = SnapTime::sizeObject((uint64_t)this + 656, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 424, (DgnString *)&v228);
  if (v229)
    v172 = (void *)v228;
  else
    v172 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v168, v169, v170, v171, v21, &unk_209A609B3, v22, v22, v172, v165, v166, v167);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v165;
  *a5 += v166;
  *a6 += v167;
  v173 = LatticeStats::sizeObject((uint64_t)this + 688, 0);
  v174 = LatticeStats::sizeObject((uint64_t)this + 688, 1);
  v175 = LatticeStats::sizeObject((uint64_t)this + 688, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 426, (DgnString *)&v228);
  if (v229)
    v180 = (void *)v228;
  else
    v180 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v176, v177, v178, v179, v21, &unk_209A609B3, v22, v22, v180, v173, v174, v175);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v173;
  *a5 += v174;
  *a6 += v175;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 428, (DgnString *)&v228);
  if (v229)
    v185 = (void *)v228;
  else
    v185 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v181, v182, v183, v184, v21, &unk_209A609B3, v22, v22, v185, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 430, (DgnString *)&v228);
  if (v229)
    v190 = (void *)v228;
  else
    v190 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v186, v187, v188, v189, v21, &unk_209A609B3, v22, v22, v190, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  v191 = (Constraint *)*((_QWORD *)this + 138);
  if (v191)
  {
    v227 = 0;
    v228 = 0;
    v226 = 0;
    Constraint::printSize(v191, 0xFFFFFFFFLL, v21, &v228, &v227, &v226);
    *a4 += v228;
    *a5 += v227;
    *a6 += v226;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v192 = 4;
  else
    v192 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 432, (DgnString *)&v228);
  if (v229)
    v197 = (void *)v228;
  else
    v197 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v193, v194, v195, v196, v21, &unk_209A609B3, v22, v22, v197, v192, v192, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v192;
  *a5 += v192;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 434, (DgnString *)&v228);
  if (v229)
    v202 = (void *)v228;
  else
    v202 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v198, v199, v200, v201, v21, &unk_209A609B3, v22, v22, v202, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v228);
  ++*a4;
  ++*a5;
  v203 = FstStats::sizeObject((uint64_t)this + 1120, 0);
  v204 = FstStats::sizeObject((uint64_t)this + 1120, 1);
  v205 = FstStats::sizeObject((uint64_t)this + 1120, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 435, (DgnString *)&v228);
  if (v229)
    v210 = (void *)v228;
  else
    v210 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v206, v207, v208, v209, v21, &unk_209A609B3, v22, v22, v210, v203, v204, v205);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v203;
  *a5 += v204;
  *a6 += v205;
  v211 = (char *)this + 1376;
  v212 = FstStats::sizeObject((uint64_t)this + 1376, 0);
  v213 = FstStats::sizeObject((uint64_t)v211, 1);
  v214 = FstStats::sizeObject((uint64_t)v211, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 437, (DgnString *)&v228);
  if (v229)
    v219 = (void *)v228;
  else
    v219 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v215, v216, v217, v218, v21, &unk_209A609B3, v22, v22, v219, v212, v213, v214);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v212;
  *a5 += v213;
  *a6 += v214;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 438, (DgnString *)&v228);
  if (v229)
    v224 = (void *)v228;
  else
    v224 = &unk_209A609B3;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v225, &unk_209A609B3, (35 - v225), (35 - v225), v224, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v228);
}

void sub_209804268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

WordLattice *FstCore::makeRecognizerResults(FstCore *this, LatticeStats *a2)
{
  WordLattice *SilentLattice;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WordLattice *v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;

  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 1879048192;
  v22[0] = 0;
  v22[1] = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *, uint64_t *, int *, _QWORD *))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2), &v26, &v24, &v23, v22))
  {
    SnapTime::recordTime((FstCore *)((char *)this + 496), 1, 1, 1, 1);
    SilentLattice = (WordLattice *)MemChunkAlloc(0x120uLL, 0);
    WordLattice::WordLattice(SilentLattice, *((_DWORD *)this + 10), *((_DWORD *)this + 13), *((_DWORD *)this + 14), *((_WORD *)this + 4), 1, (char)a2, 0, 1);
    (*(void (**)(_QWORD, WordLattice *, uint64_t *, uint64_t *, _QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2), SilentLattice, &v26, &v24, *((unsigned __int8 *)this + 24));
    v21 = 0;
    if (FstCore::maybeAddGrammarStates(this, (unsigned int **)SilentLattice, &v21, v5, v6, v7, v8, v9))
    {
      if (SilentLattice)
      {
        (*(void (**)(WordLattice *))(*(_QWORD *)SilentLattice + 48))(SilentLattice);
        MemChunkFree(SilentLattice, 0);
      }
      SilentLattice = v21;
    }
    SnapTime::recordTime((FstCore *)((char *)this + 528), 1, 1, 1, 1);
    v10 = *((_QWORD *)this + 138);
    if (*(_DWORD *)(v10 + 192))
      v11 = (uint64_t *)(v10 + 184);
    else
      v11 = 0;
    WordLattice::computeParseTokens((uint64_t)SilentLattice, v10 + 168, v11);
    Lattice<WordLatticeLC>::minimize((uint64_t)SilentLattice);
    v12 = FstCore::maybeRescoreLattice(this, SilentLattice);
    SnapTime::recordTime((FstCore *)((char *)this + 624), 1, 1, 1, 1);
    Lattice<WordLatticeLC>::minimize((uint64_t)SilentLattice);
    WordLattice::maybePruneToNumUniquePaths((uint64_t)SilentLattice, *((_DWORD *)this + 15));
    *((_BYTE *)SilentLattice + 210) = v12 == 1;
    WordLattice::fixStateIds((uint64_t)SilentLattice, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    SilentLattice = (WordLattice *)BackTraceLatticeBuilder::makeSilentLattice((BackTraceLatticeBuilder *)*((unsigned __int16 *)this + 4), *((_DWORD *)this + 10), *((_DWORD *)this + 13), *((_DWORD *)this + 14), 1, (uint64_t)this + 688, a2);
    *((_BYTE *)SilentLattice + 209) = 1;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v24);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v26);
  return SilentLattice;
}

void sub_2098044E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v4 - 48);
  _Unwind_Resume(a1);
}

uint64_t FstCore::maybeAddGrammarStates(FstCore *this, unsigned int **a2, WordLattice **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WordLattice *v9;
  unsigned int v11;
  unsigned __int16 *v12;
  unsigned int v13;
  uint64_t StateTransition;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  WordLattice *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  int v42;
  BOOL v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t **Bucket;
  uint64_t v65;
  int *v66;
  int v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int v86;
  _DWORD *v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  unsigned int v98;
  _DWORD *v99;
  _DWORD *v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  WordLattice **v121;
  FstCore *v122;
  int **v123;
  uint64_t v124;
  StateMgr *v125;
  uint64_t *v126;
  uint64_t *v127;
  _DWORD *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  __int128 v134;
  unint64_t v135;
  uint64_t v136;
  __n128 v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD v141[2];
  uint64_t v142;
  void *v143;

  v9 = (WordLattice *)a2;
  v11 = *a2[2];
  v12 = (unsigned __int16 *)*((_QWORD *)this + 138);
  v125 = *(StateMgr **)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr + 8 * *v12) + 56);
  if (*((_DWORD *)v12 + 44) == 1)
  {
    v13 = **((_DWORD **)v12 + 21);
    StateTransition = StateMgr::getStateTransition(v125, v13, 0, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(StateTransition + 8);
    if (!v15 || v15 == 1 && **(_DWORD **)StateTransition == v13)
    {
      v16 = *((unsigned int *)v9 + 26);
      if ((_DWORD)v16)
      {
        v17 = (unsigned int *)*((_QWORD *)v9 + 12);
        v18 = *((_QWORD *)v9 + 16);
        do
        {
          v19 = *v17++;
          v20 = v18 + 136 * v19;
          v21 = *(_DWORD *)(v20 + 88) & 0xFFFFFF;
          *(_WORD *)(v20 + 92) = 0x3FFF;
          if ((v21 - 16777213) >= 2)
            v22 = v13;
          else
            v22 = 0;
          *(_DWORD *)(v20 + 96) = v22;
          --v16;
        }
        while (v16);
      }
      return 0;
    }
  }
  v24 = MemChunkAlloc(0x68uLL, 0);
  HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::HashKEV((uint64_t)v24, 0, 16);
  v126 = MemChunkAlloc(0x70uLL, 0);
  Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::Hash((uint64_t)v126, 0, 16);
  v141[0] = 0;
  v141[1] = 0;
  v142 = 0;
  TEHeapSort<TimeQueEl>::make_space((uint64_t)v141, 64);
  v122 = this;
  v139 = 0;
  v140 = 0;
  v25 = *(unsigned int *)(*((_QWORD *)v9 + 10) + 24 * v11 + 20);
  if ((_DWORD)v25 == -2)
  {
    v26 = 2;
  }
  else
  {
    LODWORD(v27) = *((_DWORD *)v12 + 44);
    v26 = 2;
    do
    {
      if ((_DWORD)v27)
      {
        v28 = 0;
        do
        {
          v135 = 0;
          v29 = *((_QWORD *)v9 + 16) + 136 * v25;
          v30 = *(_DWORD *)(*((_QWORD *)v9 + 10) + 24 * *(unsigned int *)(v29 + 120));
          LODWORD(v29) = *(_DWORD *)(v29 + 88);
          v137.n128_u64[0] = __PAIR64__(*(_DWORD *)(*((_QWORD *)v12 + 21) + 4 * v28), v30);
          v137.n128_u64[1] = v29 | 0xFAFFFFFC00000000;
          v138 = v26;
          if (HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::insert((uint64_t)v24, &v137, &v135))
          {
            v137.n128_u32[0] = *(_DWORD *)(*((_QWORD *)v9 + 16) + 136 * v25 + 20)
                             + *(_DWORD *)(*((_QWORD *)v9 + 16) + 136 * v25 + 16)
                             + *(_DWORD *)(*((_QWORD *)v9 + 16) + 136 * v25 + 24);
            v137.n128_u64[1] = v135;
            TEHeapSort<TimeQueEl>::add_to_heap((uint64_t)v141, &v137);
            ++v26;
          }
          v31 = v140;
          if (v140 == (unint64_t)HIDWORD(v140))
          {
            DgnArray<CWIDAC>::reallocElts((uint64_t)&v139, 1, 1);
            v31 = v140;
          }
          v32 = v139 + 24 * v31;
          *(_DWORD *)v32 = 0;
          *(_DWORD *)(v32 + 4) = v26 - 1;
          *(_QWORD *)(v32 + 8) = 0xFAFFFFFC00000000;
          *(_DWORD *)(v32 + 16) = -83886084;
          *(_DWORD *)(v32 + 20) = v25;
          LODWORD(v140) = v140 + 1;
          ++v28;
          v27 = *((unsigned int *)v12 + 44);
        }
        while (v28 < v27);
      }
      v25 = *(unsigned int *)(*((_QWORD *)v9 + 16) + 136 * v25 + 128);
    }
    while ((_DWORD)v25 != -2);
  }
  v135 = 0;
  v136 = 0;
  v137.n128_u64[0] = 0;
  v33 = realloc_array(0, (void **)&v137, 0x40uLL, 0, 0, 1);
  v121 = a3;
  v135 = v137.n128_u64[0];
  LODWORD(v136) = 16;
  HIDWORD(v136) = v33 >> 2;
  v127 = v24;
  if ((int)v142 >= 2)
  {
    v34 = v9;
    while (1)
    {
      LODWORD(v134) = -16;
      *((_QWORD *)&v134 + 1) = 0;
      TEHeapSort<TimeQueEl>::remove_from_heap((int *)v141, &v134);
      v40 = 0;
      v41 = (unsigned int *)*((_QWORD *)&v134 + 1);
      LODWORD(v136) = 0;
      v42 = *(_DWORD *)(*((_QWORD *)&v134 + 1) + 4);
      if (!HIDWORD(v136))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v135, 1, 1);
        v40 = v136;
      }
      *(_DWORD *)(v135 + 4 * v40) = v42;
      v43 = __CFADD__((_DWORD)v136, 1);
      v44 = v136 + 1;
      LODWORD(v136) = v136 + 1;
      if (!v43)
        break;
LABEL_61:
      if ((int)v142 <= 1)
        goto LABEL_62;
    }
    while (1)
    {
      v45 = v44 - 1;
      v46 = *(unsigned int *)(v135 + 4 * v45);
      LODWORD(v136) = v45;
      v47 = *(_DWORD *)(*((_QWORD *)v125 + 62) + 4 * v46);
      if (!v47)
        v47 = v46;
      v48 = *(_QWORD *)v125 + 80 * v47;
      v49 = *(unsigned int *)(v48 + 16);
      v50 = StateMgr::getStateTransition(v125, v46, 0, v35, v36, v37, v38, v39);
      v52 = v50;
      v124 = v49;
      if (!(_DWORD)v49 && *(_DWORD *)(v50 + 8))
      {
        v53 = 0;
        v54 = v136;
        do
        {
          v55 = *(_DWORD *)(*(_QWORD *)v52 + 4 * v53);
          if (v54 == HIDWORD(v136))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v135, 1, 1);
            v54 = v136;
          }
          *(_DWORD *)(v135 + 4 * v54) = v55;
          v54 = v136 + 1;
          LODWORD(v136) = v136 + 1;
          ++v53;
        }
        while (v53 < *(unsigned int *)(v52 + 8));
      }
      v56 = *(unsigned int *)(*((_QWORD *)v9 + 10) + 24 * *(unsigned int *)(*((_QWORD *)v9 + 2) + 4 * *v41) + 20);
      if ((_DWORD)v56 != -2)
        break;
LABEL_60:
      v44 = v136;
      if (!(_DWORD)v136)
        goto LABEL_61;
    }
    v123 = (int **)(v48 + 8);
    v57 = *((_QWORD *)v9 + 16);
    while (1)
    {
      v58 = *(_DWORD *)(v57 + 136 * v56 + 88);
      v59 = v58 & 0xFFFFFF;
      if ((v58 & 0xFFFFFF) == 0xFFFFFD)
      {
        if (StateMgr::getEndOfUtteranceAllowed(v125, v46, v51, v35, v36, v37, v38, v39))
        {
          v60 = v41[4];
          v61 = *((_QWORD *)v41 + 1);
          v62 = v140;
          if (v140 == (unint64_t)HIDWORD(v140))
          {
            DgnArray<CWIDAC>::reallocElts((uint64_t)&v139, 1, 1);
            v62 = v140;
          }
          v63 = v139 + 24 * v62;
          *(_DWORD *)v63 = v60;
          *(_DWORD *)(v63 + 4) = 1;
          *(_DWORD *)(v63 + 8) = v46;
          *(_QWORD *)(v63 + 12) = v61;
          *(_DWORD *)(v63 + 20) = v56;
          LODWORD(v140) = v140 + 1;
        }
      }
      else
      {
        v132 = (void *)__PAIR64__(v46, v58);
        Bucket = Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket((uint64_t)v126, &v132);
        if (*Bucket)
        {
          if (*((_BYTE *)*Bucket + 20))
            goto LABEL_52;
        }
        else
        {
          if ((_DWORD)v124)
          {
            v65 = v124;
            v66 = *v123;
            while (1)
            {
              v67 = *v66++;
              if (v67 == v59)
                break;
              if (!--v65)
                goto LABEL_50;
            }
            v137.n128_u8[0] = 1;
            Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::add((uint64_t)v126, &v132, &v137);
LABEL_52:
            if (*(_DWORD *)(v52 + 8))
            {
              v68 = 0;
              do
              {
                v69 = *(_DWORD *)(*(_QWORD *)v52 + 4 * v68);
                v130 = 0;
                v70 = *((_QWORD *)v9 + 16) + 136 * v56;
                v71 = *(_DWORD *)(*((_QWORD *)v9 + 10) + 24 * *(unsigned int *)(v70 + 120));
                LODWORD(v70) = *(_DWORD *)(v70 + 88);
                v137.n128_u64[0] = __PAIR64__(v69, v71);
                v137.n128_u64[1] = v70 | 0xFAFFFFFC00000000;
                v138 = v26;
                if (HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::insert((uint64_t)v127, &v137, &v130))
                {
                  v137.n128_u32[0] = *(_DWORD *)(*((_QWORD *)v9 + 16) + 136 * v56 + 20)
                                   + *(_DWORD *)(*((_QWORD *)v9 + 16) + 136 * v56 + 16)
                                   + *(_DWORD *)(*((_QWORD *)v9 + 16) + 136 * v56 + 24);
                  v137.n128_u64[1] = (unint64_t)v130;
                  TEHeapSort<TimeQueEl>::add_to_heap((uint64_t)v141, &v137);
                  ++v26;
                }
                v72 = v41[4];
                v73 = *((_DWORD *)v130 + 4);
                v74 = *((_QWORD *)v41 + 1);
                v75 = v140;
                if (v140 == (unint64_t)HIDWORD(v140))
                {
                  DgnArray<CWIDAC>::reallocElts((uint64_t)&v139, 1, 1);
                  v75 = v140;
                }
                v76 = v139 + 24 * v75;
                *(_DWORD *)v76 = v72;
                *(_DWORD *)(v76 + 4) = v73;
                *(_DWORD *)(v76 + 8) = v46;
                *(_QWORD *)(v76 + 12) = v74;
                *(_DWORD *)(v76 + 20) = v56;
                LODWORD(v140) = v140 + 1;
                ++v68;
                v9 = v34;
              }
              while (v68 < *(unsigned int *)(v52 + 8));
            }
            goto LABEL_59;
          }
LABEL_50:
          v137.n128_u8[0] = 0;
          Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::add((uint64_t)v126, &v132, &v137);
        }
      }
LABEL_59:
      v57 = *((_QWORD *)v9 + 16);
      v56 = *(unsigned int *)(v57 + 136 * v56 + 128);
      if ((_DWORD)v56 == -2)
        goto LABEL_60;
    }
  }
LABEL_62:
  v77 = v140;
  v137 = 0uLL;
  if ((_DWORD)v140)
  {
    *(_QWORD *)&v134 = 0;
    v78 = realloc_array(0, (void **)&v134, 8 * v140, 0, 0, 1);
    v79 = 0;
    v80 = v78 >> 3;
    v81 = v134;
    v137.n128_u64[0] = v134;
    v137.n128_u64[1] = __PAIR64__(v80, v77);
    v82 = (unsigned int *)(v134 + 4);
    v83 = (unsigned int *)(v139 + 4);
    do
    {
      v84 = *v83;
      if (*v83 == 1)
      {
        *v83 = v26;
        v84 = v26;
      }
      *(v82 - 1) = v79;
      *v82 = v84;
      ++v79;
      v82 += 2;
      v83 += 6;
    }
    while (v77 != v79);
    v85 = v77;
  }
  else
  {
    v81 = 0;
    v85 = 0;
    v137.n128_u32[2] = 0;
  }
  mrec_qsort_r<SortLink>(v81, v85, 8);
  v134 = 0uLL;
  v86 = v26 + 1;
  if (v26 == -1)
  {
    v87 = 0;
  }
  else
  {
    v132 = 0;
    HIDWORD(v134) = realloc_array(0, &v132, 4 * (v26 + 1), 0, 0, 1) >> 2;
    v87 = v132;
    *(_QWORD *)&v134 = v132;
  }
  DWORD2(v134) = v26 + 1;
  if ((_DWORD)v77)
  {
    v88 = 0;
    v89 = (unsigned int *)v137.n128_u64[0];
    v90 = v139;
    v91 = v26 + 1;
    do
    {
      v92 = *v89;
      v89 += 2;
      v93 = v90 + 24 * v92;
      v96 = *(_DWORD *)(v93 + 4);
      v94 = (unsigned int *)(v93 + 4);
      v95 = v96;
      if (v96 != v91)
      {
        v87[v95] = v88;
        v91 = *v94;
      }
      ++v88;
    }
    while (v85 != v88);
  }
  v132 = 0;
  v133 = 0;
  if (v26 == -1)
  {
    LODWORD(v133) = 0;
  }
  else
  {
    v130 = 0;
    v97 = realloc_array(0, &v130, 4 * (v26 + 1), 0, 0, 1);
    v132 = v130;
    LODWORD(v133) = v26 + 1;
    HIDWORD(v133) = v97 >> 2;
    bzero(v130, 4 * (v26 + 1));
  }
  v130 = 0;
  v131 = 0;
  v98 = 1;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v130, 1, 1);
  v99 = v130;
  v100 = v132;
  *((_DWORD *)v130 + v131) = v26;
  LODWORD(v131) = v131 + 1;
  v100[v26] = 1;
  v101 = v131;
  if ((_DWORD)v131)
  {
    v98 = 1;
    do
    {
      v102 = v99[--v101];
      LODWORD(v131) = v101;
      if ((_DWORD)v102)
      {
        v103 = *(_DWORD *)(v134 + 4 * v102);
        do
        {
          v104 = *(_DWORD *)(v137.n128_u64[0] + 8 * v103);
          if (*(_DWORD *)(v139 + 24 * v104 + 4) != (_DWORD)v102)
            break;
          v105 = *(unsigned int *)(v139 + 24 * v104);
          if (!*((_DWORD *)v132 + v105))
          {
            *((_DWORD *)v132 + v105) = 1;
            v106 = v131;
            if (v131 == (unint64_t)HIDWORD(v131))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v130, 1, 1);
              v106 = v131;
              v99 = v130;
            }
            v99[v106] = v105;
            v101 = v131 + 1;
            LODWORD(v131) = v131 + 1;
            ++v98;
          }
          ++v103;
        }
        while (v103 < v77);
      }
    }
    while (v101);
  }
  v107 = MemChunkAlloc(0x120uLL, 0);
  WordLattice::WordLattice((WordLattice *)v107, *((_DWORD *)v122 + 10), *((_DWORD *)v122 + 13), *((_DWORD *)v122 + 14), *((_WORD *)v122 + 4), 1, 0, 0, 1);
  v128 = 0;
  v129 = 0;
  if (v98)
  {
    v143 = 0;
    HIDWORD(v129) = realloc_array(0, &v143, 4 * v98, 0, 0, 1) >> 2;
    v128 = v143;
  }
  LODWORD(v129) = v98;
  if (v86)
  {
    v108 = 0;
    v109 = 0;
    v110 = 4 * v86;
    do
    {
      if (*(int *)((char *)v132 + v108) < 1)
      {
        *(_DWORD *)((char *)v132 + v108) = -1;
      }
      else
      {
        *(_DWORD *)((char *)v132 + v108) = v109;
        v128[v109++] = Lattice<WordLatticeLC>::createNode((uint64_t)v107);
      }
      v108 += 4;
    }
    while (v110 != v108);
  }
  v111 = v140;
  if ((_DWORD)v140)
  {
    v112 = 0;
    v113 = 0;
    do
    {
      v114 = *(unsigned int *)(v139 + v112 + 4);
      v115 = (unsigned int *)v132;
      if ((*((_DWORD *)v132 + v114) & 0x80000000) == 0)
      {
        v116 = *(unsigned int *)(v139 + v112);
        if ((*((_DWORD *)v132 + v116) & 0x80000000) == 0)
        {
          v117 = v139 + v112;
          v118 = *((_QWORD *)v9 + 16) + 136 * *(unsigned int *)(v139 + v112 + 20);
          v119 = *(_DWORD *)(v118 + 88) & 0xFFFFFF;
          *(_WORD *)(v118 + 92) = 0x3FFF;
          if ((v119 - 16777213) >= 2)
            v120 = *(_DWORD *)(v117 + 8);
          else
            v120 = 0;
          *(_DWORD *)(v118 + 96) = v120;
          *(_QWORD *)(v118 + 104) = *(_QWORD *)(v117 + 12);
          Lattice<WordLatticeLC>::maybeCreateAndConnectLink(v107, v128[v115[v116]], (const WordLatticeLC *)v128[v115[v114]], (WordLatticeLC *)v118, 1, 0);
          v111 = v140;
        }
      }
      ++v113;
      v112 += 24;
    }
    while (v113 < v111);
  }
  *v121 = (WordLattice *)v107;
  if (v127)
  {
    (*(void (**)(uint64_t *))*v127)(v127);
    MemChunkFree(v127, 0);
  }
  if (v126)
  {
    (*(void (**)(uint64_t *))*v126)(v126);
    MemChunkFree(v126, 0);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v128);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v130);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v132);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v134);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v137);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v135);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v139);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v141);
  return 1;
}

void sub_209804FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a21);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a23);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a25);
  DgnIArray<Utterance *>::~DgnIArray(v27 - 152);
  DgnIArray<Utterance *>::~DgnIArray(v27 - 136);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::minimize(uint64_t result)
{
  unint64_t v1;

  if (!*(_BYTE *)(result + 8))
  {
    v1 = result;
    result = (uint64_t)Lattice<WordLatticeLC>::gc((_QWORD *)result);
    if (*(_DWORD *)(v1 + 24) >= 2u)
    {
      Lattice<WordLatticeLC>::minimizeDAG(v1);
      result = Lattice<WordLatticeLC>::topSortInternal(v1, 0);
    }
    *(_BYTE *)(v1 + 8) = 1;
  }
  return result;
}

uint64_t FstCore::maybeRescoreLattice(FstCore *this, WordLattice *a2)
{
  _QWORD **v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = (_QWORD **)VocMgr::smpVocMgr;
  v31 = 0;
  v32 = 0;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v31, 1, 1);
  v5 = -50331650;
  *(_DWORD *)(v31 + 4 * v32) = -50331650;
  LODWORD(v32) = v32 + 1;
  SearchLMScorer::setInitialContext(*((_DWORD **)this + 9), &v31);
  v6 = *((_QWORD *)this + 9);
  if (!*(_BYTE *)(v6 + 51))
  {
    v7 = *(unsigned __int8 *)(v6 + 54);
    if (!v7)
    {
      v24 = 0;
      goto LABEL_32;
    }
  }
  SnapTime::recordTime((FstCore *)((char *)this + 560), 1, 1, 1, 1);
  v29 = 0;
  v30 = 0;
  if (!*((_DWORD *)a2 + 26))
  {
LABEL_30:
    v21 = 0;
    v20 = 0;
    goto LABEL_31;
  }
  v8 = 0;
  do
  {
    v9 = *((_QWORD *)a2 + 16) + 136 * *(unsigned int *)(*((_QWORD *)a2 + 12) + 4 * v8);
    v12 = *(_DWORD *)(v9 + 88);
    v10 = (unsigned int *)(v9 + 88);
    v11 = v12;
    if (v12 >> 27 != 31)
    {
      v13 = v30;
      if (!(_DWORD)v30)
        goto LABEL_12;
      v14 = v29;
      v15 = v30;
      v16 = 0xFFFFFFFFLL;
      while (1)
      {
        v17 = *v14++;
        if (v17 == v11 >> 25)
          break;
        --v16;
        if (!--v15)
          goto LABEL_12;
      }
      if (!v16)
      {
LABEL_12:
        v18 = *((_QWORD *)this + 138);
        if ((*(_DWORD *)(v18 + 68) & 0xFFFFFFFD) == 0)
        {
          if (!Constraint::isLMAllowedForState(v18, v10))
            goto LABEL_18;
          v13 = v30;
        }
        if (v13 == HIDWORD(v30))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v29, 1, 1);
          v13 = v30;
        }
        v29[v13] = v11 >> 25;
        LODWORD(v30) = v13 + 1;
      }
    }
LABEL_18:
    ++v8;
  }
  while (v8 < *((unsigned int *)a2 + 26));
  if (!(_DWORD)v30)
    goto LABEL_30;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  do
  {
    v22 = *(_QWORD *)(*(_QWORD *)(**v4 + 8 * v29[v19]) + 72);
    v23 = *((_QWORD *)this + 9);
    if (*(_BYTE *)(v23 + 51))
    {
      if ((*(unsigned int (**)(_QWORD, unsigned int *))(*(_QWORD *)v22 + 448))(*(_QWORD *)(*(_QWORD *)(**v4 + 8 * v29[v19]) + 72), v10))
      {
        v21 = 1;
      }
      v23 = *((_QWORD *)this + 9);
    }
    if (*(_BYTE *)(v23 + 54) && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 312))(v22, 0))
      v20 = 1;
    ++v19;
  }
  while (v19 < v30);
LABEL_31:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v29);
  v24 = v21 & 1;
  v7 = v20 & 1;
  if ((v21 & 1) == 0)
  {
LABEL_32:
    if (!v7)
    {
      v25 = 0;
      goto LABEL_42;
    }
  }
  v26 = *((_QWORD *)this + 9);
  if (*(_DWORD *)(v26 + 112))
    v5 = **(_DWORD **)(v26 + 104);
  if (v24)
    v27 = 4;
  else
    v27 = 3;
  v25 = WordLattice::expandLMContext(a2, v27, v5, *((_DWORD *)this + 16), (uint64_t)this + 688, (_DWORD *)this + 274, (_DWORD *)this + 275);
  if ((_DWORD)v25 != 1)
  {
    SnapTime::recordTime((FstCore *)((char *)this + 592), 1, 1, 1, 1);
    WordLattice::rescoreLatticeLM(a2, *((SearchLMScorer **)this + 9), (FstCore *)((char *)this + 688), v24);
  }
LABEL_42:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v31);
  return v25;
}

void sub_20980539C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void FstCore::estimateActivePelsThisFrame(FstCore *this, BitArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 658, (uint64_t)"fst/fstcore", 1, (uint64_t)"%.500s", a7, a8, (char)"estimateActivePelsThisFrame");
}

uint64_t FstCore::makeRecognizer(__int128 *a1, __int16 a2, uint64_t a3, uint64_t a4, const ArcGraph *a5)
{
  uint64_t *v10;

  v10 = MemChunkAlloc(0x660uLL, 0);
  return FstCore::FstCore((uint64_t)v10, a1, a2, a3, a4, a5);
}

__n128 FstCoreOptions::FstCoreOptions(uint64_t a1, int a2, int a3, char a4, int a5, int a6, int a7, int a8, __n128 a9, int a10, int a11, char a12, int a13, int a14, char a15, int a16, int a17, char a18, char a19, char a20,char a21)
{
  __n128 result;

  result = a9;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_BYTE *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  *(_DWORD *)(a1 + 16) = a6;
  *(_DWORD *)(a1 + 20) = a7;
  *(_DWORD *)(a1 + 24) = a8;
  *(__n128 *)(a1 + 28) = a9;
  *(_DWORD *)(a1 + 44) = a10;
  *(_DWORD *)(a1 + 48) = a11;
  *(_BYTE *)(a1 + 52) = a12;
  *(_DWORD *)(a1 + 56) = a13;
  *(_DWORD *)(a1 + 60) = a14;
  *(_BYTE *)(a1 + 64) = a15;
  *(_DWORD *)(a1 + 68) = a16;
  *(_DWORD *)(a1 + 72) = a17;
  *(_BYTE *)(a1 + 76) = a18;
  *(_BYTE *)(a1 + 77) = a19;
  *(_BYTE *)(a1 + 78) = a20;
  *(_BYTE *)(a1 + 79) = a21;
  return result;
}

double FstCoreOptions::FstCoreOptions(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  result = *(double *)(a2 + 68);
  *(double *)(a1 + 68) = result;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  return result;
}

uint64_t TEHeapSort<TimeQueEl>::make_space(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = (a2 + 1);
  v5 = *(_DWORD *)(a1 + 12);
  if (v4 > v5)
    DgnArray<DgnPrimArray<double>>::reallocElts(a1, v4 - v5, 0);
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 < v4)
  {
    v7 = v4 - v6;
    v8 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6 + 8);
    do
    {
      *((_DWORD *)v8 - 2) = -16;
      *v8 = 0;
      v8 += 2;
      --v7;
    }
    while (v7);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = a2;
  return 0;
}

uint64_t HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::insert(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  unsigned int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t result;

  v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1)
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v6);
  v7 = a2[1];
  HIDWORD(v8) = *a2;
  LODWORD(v8) = *a2;
  HIDWORD(v8) = (v8 >> 19) + v7;
  LODWORD(v8) = HIDWORD(v8);
  v10 = a2[2];
  v9 = a2[3];
  HIDWORD(v8) = (v8 >> 19) + v9;
  LODWORD(v8) = HIDWORD(v8);
  v11 = (v8 >> 19) + v10;
  v12 = *(_DWORD *)(a1 + 16);
  if (v12)
    v13 = (-1640531527 * v11) >> -(char)v12;
  else
    v13 = 0;
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(uint64_t **)(v14 + 8 * v13);
  if (!v15)
  {
LABEL_13:
    v16 = *(_QWORD *)(a1 + 32);
    if (!v16)
    {
      DgnPool::addChunk((DgnPool *)(a1 + 24));
      v16 = *(_QWORD *)(a1 + 32);
    }
    *(_QWORD *)(a1 + 32) = *(_QWORD *)v16;
    *(_DWORD *)(v16 + 8) = 0;
    v17 = *(_OWORD *)a2;
    *(_DWORD *)(v16 + 28) = a2[4];
    *(_OWORD *)(v16 + 12) = v17;
    *a3 = v16 + 12;
    *(_DWORD *)(v16 + 8) = v11;
    ++*(_DWORD *)(a1 + 8);
    if (*(_BYTE *)(a1 + 20))
    {
      *(_QWORD *)v16 = *(_QWORD *)(v14 + 8 * v13);
    }
    else
    {
      *(_QWORD *)v16 = 0;
      v18 = *(_QWORD **)(v14 + 8 * v13);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
        *v19 = v16;
        return 1;
      }
    }
    *(_QWORD *)(v14 + 8 * v13) = v16;
    return 1;
  }
  while (*((_DWORD *)v15 + 2) != v11
       || *((_DWORD *)v15 + 3) != *a2
       || *((_DWORD *)v15 + 4) != v7
       || *((_DWORD *)v15 + 5) != v10
       || *((_DWORD *)v15 + 6) != v9)
  {
    v15 = (uint64_t *)*v15;
    if (!v15)
      goto LABEL_13;
  }
  result = 0;
  *a3 = (char *)v15 + 12;
  return result;
}

__n128 TEHeapSort<TimeQueEl>::add_to_heap(uint64_t a1, __n128 *a2)
{
  signed int v4;
  signed int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  __n128 result;

  v5 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 20);
  if (v5 >= v4)
  {
    v6 = (2 * v4);
    v7 = *(_DWORD *)(a1 + 12);
    if (v6 > v7)
      DgnArray<DgnPrimArray<double>>::reallocElts(a1, v6 - v7, 0);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 < v6)
    {
      v9 = v6 - v8;
      v10 = (_QWORD *)(*(_QWORD *)a1 + 16 * v8 + 8);
      do
      {
        *((_DWORD *)v10 - 2) = -16;
        *v10 = 0;
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 20) = 2 * *(_DWORD *)(a1 + 20) - 1;
  }
  v11 = *(_QWORD *)a1;
  v12 = (_OWORD *)(*(_QWORD *)a1 + 16 * v5);
  if (v5 >= 2)
  {
    v14 = v5;
    while (1)
    {
      v13 = (_DWORD *)(v11 + 16 * (v14 >> 1));
      if ((signed __int32)a2->n128_u32[0] <= *v13)
        break;
      *v12 = *(_OWORD *)v13;
      v12 = (_OWORD *)(v11 + 16 * (v14 >> 1));
      v15 = v14 > 3;
      v14 >>= 1;
      if (!v15)
        goto LABEL_13;
    }
  }
  v13 = v12;
LABEL_13:
  result = *a2;
  *(__n128 *)v13 = *a2;
  *(_DWORD *)(a1 + 16) = v5 + 1;
  return result;
}

uint64_t TEHeapSort<TimeQueEl>::remove_from_heap(int *a1, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (a1[4] < 2)
    return 0;
  v3 = *(_QWORD *)a1;
  *a2 = *(_OWORD *)(*(_QWORD *)a1 + 16);
  v4 = a1[4];
  v5 = v4 - 1;
  a1[4] = v4 - 1;
  v6 = (int *)(v3 + 16 * (v4 - 1));
  v7 = *v6;
  v15 = *(_QWORD *)(v6 + 1);
  v16 = v6[3];
  v8 = 1;
  if (v4 < 4)
    goto LABEL_17;
  v9 = 2;
  v10 = 3;
  v11 = 1;
  while (1)
  {
    v12 = *(_DWORD *)(v3 + 16 * v9);
    if (v7 <= v12)
    {
      if (v10 >= v5)
      {
        v13 = v9;
        v10 = v9;
      }
      else
      {
        if (*(_DWORD *)(v3 + 16 * v10) <= v12)
          v10 = v9;
        v13 = v10;
      }
      goto LABEL_14;
    }
    if (v10 >= v5 || v7 > *(_DWORD *)(v3 + 16 * v10))
      break;
    v13 = v10;
LABEL_14:
    v8 = v10;
    *(_OWORD *)(v3 + 16 * v11) = *(_OWORD *)(v3 + 16 * v13);
    v9 = 2 * v10;
    v10 = (2 * v10) | 1;
    v5 = a1[4];
    v11 = v8;
    if (v9 >= v5)
      goto LABEL_17;
  }
  v8 = v11;
LABEL_17:
  v14 = v3 + 16 * v8;
  *(_DWORD *)v14 = v7;
  *(_QWORD *)(v14 + 4) = v15;
  *(_DWORD *)(v14 + 12) = v16;
  return 1;
}

uint64_t Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::add(uint64_t result, _DWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v5 = result;
  v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1)
    result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  HIDWORD(v7) = *a2;
  LODWORD(v7) = *a2;
  v8 = (v7 >> 19) + a2[1];
  v9 = *(_DWORD *)(v5 + 16);
  if (v9)
    v10 = (-1640531527 * v8) >> -(char)v9;
  else
    v10 = 0;
  v11 = *(_QWORD *)(v5 + 80);
  v12 = *(_QWORD *)(v5 + 32);
  if (!v12)
  {
    result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    v12 = *(_QWORD *)(v5 + 32);
  }
  v13 = (_QWORD *)(v11 + 8 * v10);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)v12;
  *(_DWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 12) = *(_QWORD *)a2;
  *(_BYTE *)(v12 + 20) = *a3;
  *(_DWORD *)(v12 + 8) = v8;
  ++*(_DWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 20))
  {
    *(_QWORD *)v12 = *v13;
  }
  else
  {
    *(_QWORD *)v12 = 0;
    v14 = (_QWORD *)*v13;
    if (*v13)
    {
      do
      {
        v13 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
  *v13 = v12;
  return result;
}

unint64_t mrec_qsort_r<SortLink>(unint64_t result, unint64_t a2, int64_t a3)
{
  int64_t v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  _BYTE *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  char *v40;
  char v41;
  int v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _BYTE *v46;
  _QWORD *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  unint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char v73;
  BOOL v74;
  int64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;

  v4 = -a3;
  v5 = a3 != 8;
  v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v7 = 2;
  else
    v7 = a3 != 8;
  if (a2 < 7)
  {
LABEL_121:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v82 = result + a2 * a3;
      v83 = result + a3;
      v84 = result;
      do
      {
        if (v83 > result)
        {
          v85 = v84;
          v86 = v83;
          do
          {
            v87 = v86;
            v86 += v4;
            if (*(_DWORD *)(v86 + 4) <= *(_DWORD *)(v87 + 4))
              break;
            if (v7)
            {
              v88 = 0;
              v89 = v85 + a3;
              if (v6)
              {
                do
                {
                  v90 = *(_QWORD *)(v89 + 8 * v88);
                  *(_QWORD *)(v89 + 8 * v88) = *(_QWORD *)(v85 + 8 * v88);
                  *(_QWORD *)(v85 + 8 * v88++) = v90;
                }
                while ((unint64_t)a3 >> 3 != v88);
              }
              else
              {
                do
                {
                  v91 = *(_BYTE *)(v89 + v88);
                  *(_BYTE *)(v89 + v88) = *(_BYTE *)(v85 + v88);
                  *(_BYTE *)(v85 + v88++) = v91;
                }
                while (a3 != v88);
              }
            }
            else
            {
              v92 = *(_QWORD *)v87;
              *(_QWORD *)v87 = *(_QWORD *)v86;
              *(_QWORD *)v86 = v92;
            }
            v85 += v4;
          }
          while (v86 > result);
        }
        v83 += a3;
        v84 += a3;
      }
      while (v83 < v82);
    }
  }
  else
  {
    v8 = (unint64_t)a3 >> 3;
    while (1)
    {
      v9 = (_BYTE *)(result + (a2 >> 1) * a3);
      if (a2 != 7)
      {
        v10 = result + (a2 - 1) * a3;
        if (a2 < 0x29)
        {
          v12 = result;
          v27 = result + (a2 - 1) * a3;
        }
        else
        {
          v11 = (a2 >> 3) * a3;
          v12 = result + v11;
          v13 = 2 * v11;
          v14 = result + 2 * v11;
          v15 = *(_DWORD *)(result + 4);
          v16 = *(_DWORD *)(result + v11 + 4);
          v17 = *(_DWORD *)(v14 + 4);
          if (v15 >= v17)
            v18 = result + 2 * v11;
          else
            v18 = result;
          if (v16 > v17)
            v18 = result + v11;
          if (v15 >= v17)
            v14 = result;
          if (v16 >= v17)
            v12 = v14;
          if (v15 >= v16)
            v12 = v18;
          v19 = -(uint64_t)v11;
          v20 = &v9[-v11];
          v21 = &v9[v11];
          v22 = *((_DWORD *)v20 + 1);
          v23 = *((_DWORD *)v9 + 1);
          v24 = *((_DWORD *)v21 + 1);
          if (v22 >= v24)
            v25 = v21;
          else
            v25 = v20;
          if (v23 > v24)
            v25 = (_BYTE *)(result + (a2 >> 1) * a3);
          if (v22 >= v24)
            v21 = v20;
          if (v23 >= v24)
            v9 = v21;
          if (v22 >= v23)
            v9 = v25;
          v26 = v10 - v13;
          v27 = v10 + v19;
          v28 = *(_DWORD *)(v26 + 4);
          v29 = *(_DWORD *)(v27 + 4);
          v30 = *(_DWORD *)(v10 + 4);
          if (v28 >= v29)
          {
            if (v29 <= v30)
            {
              if (v28 >= v30)
                v27 = result + (a2 - 1) * a3;
              else
                v27 = v26;
            }
          }
          else if (v29 >= v30)
          {
            if (v28 >= v30)
              v27 = v26;
            else
              v27 = result + (a2 - 1) * a3;
          }
        }
        v31 = *(_DWORD *)(v12 + 4);
        v32 = *((_DWORD *)v9 + 1);
        v33 = *(_DWORD *)(v27 + 4);
        if (v31 >= v33)
          v34 = (_BYTE *)v27;
        else
          v34 = (_BYTE *)v12;
        if (v32 > v33)
          v34 = v9;
        if (v31 < v33)
          v12 = v27;
        if (v32 >= v33)
          v9 = (_BYTE *)v12;
        if (v31 >= v32)
          v9 = v34;
      }
      if (v7)
      {
        if (v6)
        {
          v35 = (uint64_t *)result;
          v36 = (unint64_t)a3 >> 3;
          do
          {
            v37 = *v35;
            *v35++ = *(_QWORD *)v9;
            *(_QWORD *)v9 = v37;
            v9 += 8;
            --v36;
          }
          while (v36);
        }
        else
        {
          v39 = a3;
          v40 = (char *)result;
          do
          {
            v41 = *v40;
            *v40++ = *v9;
            *v9++ = v41;
            --v39;
          }
          while (v39);
        }
      }
      else
      {
        v38 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)v9;
        *(_QWORD *)v9 = v38;
      }
      v42 = 0;
      v43 = result + a3;
      v44 = (_QWORD *)(result + (a2 - 1) * a3);
      v45 = v44;
      v46 = (_BYTE *)(result + a3);
      v47 = (_QWORD *)(result + a3);
LABEL_60:
      while (v46 <= (_BYTE *)v45)
      {
        v48 = *((_DWORD *)v46 + 1);
        v49 = *(_DWORD *)(result + 4);
        if (v48 > v49)
          break;
        if (v48 == v49)
        {
          if (v7)
          {
            v50 = 0;
            if (v6)
            {
              do
              {
                v51 = v47[v50];
                v47[v50] = *(_QWORD *)&v46[8 * v50];
                *(_QWORD *)&v46[8 * v50++] = v51;
              }
              while (v8 != v50);
            }
            else
            {
              do
              {
                v52 = *((_BYTE *)v47 + v50);
                *((_BYTE *)v47 + v50) = v46[v50];
                v46[v50++] = v52;
              }
              while (a3 != v50);
            }
          }
          else
          {
            v62 = *v47;
            *v47 = *(_QWORD *)v46;
            *(_QWORD *)v46 = v62;
          }
          v47 = (_QWORD *)((char *)v47 + a3);
          v42 = 1;
        }
        v46 += a3;
      }
      while (v46 <= (_BYTE *)v45)
      {
        v57 = *((_DWORD *)v45 + 1);
        v58 = *(_DWORD *)(result + 4);
        if (v57 < v58)
        {
          if (v7)
          {
            v59 = 0;
            if (v6)
            {
              do
              {
                v60 = *(_QWORD *)&v46[8 * v59];
                *(_QWORD *)&v46[8 * v59] = v45[v59];
                v45[v59++] = v60;
              }
              while (v8 != v59);
            }
            else
            {
              do
              {
                v61 = v46[v59];
                v46[v59] = *((_BYTE *)v45 + v59);
                *((_BYTE *)v45 + v59++) = v61;
              }
              while (a3 != v59);
            }
          }
          else
          {
            v63 = *(_QWORD *)v46;
            *(_QWORD *)v46 = *v45;
            *v45 = v63;
          }
          v46 += a3;
          v45 = (_QWORD *)((char *)v45 + v4);
          v42 = 1;
          goto LABEL_60;
        }
        if (v57 == v58)
        {
          if (v7)
          {
            v53 = 0;
            if (v6)
            {
              do
              {
                v54 = v45[v53];
                v45[v53] = v44[v53];
                v44[v53++] = v54;
              }
              while (v8 != v53);
            }
            else
            {
              do
              {
                v55 = *((_BYTE *)v45 + v53);
                *((_BYTE *)v45 + v53) = *((_BYTE *)v44 + v53);
                *((_BYTE *)v44 + v53++) = v55;
              }
              while (a3 != v53);
            }
          }
          else
          {
            v56 = *v45;
            *v45 = *v44;
            *v44 = v56;
          }
          v44 = (_QWORD *)((char *)v44 + v4);
          v42 = 1;
        }
        v45 = (_QWORD *)((char *)v45 + v4);
      }
      v64 = result + a2 * a3;
      if (!v42)
        break;
      v65 = v46 - (_BYTE *)v47;
      if ((uint64_t)((uint64_t)v47 - result) >= v46 - (_BYTE *)v47)
        v66 = v46 - (_BYTE *)v47;
      else
        v66 = (unint64_t)v47 - result;
      if (v66)
      {
        if (v6)
        {
          v67 = (uint64_t *)&v46[-v66];
          v68 = v66 >> 3;
          v69 = (uint64_t *)result;
          do
          {
            v70 = *v69;
            *v69++ = *v67;
            *v67++ = v70;
            --v68;
          }
          while (v68);
        }
        else
        {
          v71 = -(uint64_t)v66;
          v72 = (char *)result;
          do
          {
            v73 = *v72;
            *v72++ = v46[v71];
            v46[v71] = v73;
            v74 = __CFADD__(v71++, 1);
          }
          while (!v74);
        }
      }
      v75 = (char *)v44 - (char *)v45;
      v76 = v64 - ((_QWORD)v44 + a3);
      if ((char *)v44 - (char *)v45 < (uint64_t)v76)
        v76 = (char *)v44 - (char *)v45;
      if (v76)
      {
        if (v6)
        {
          v77 = (_QWORD *)(v64 - v76);
          v78 = v76 >> 3;
          do
          {
            v79 = *(_QWORD *)v46;
            *(_QWORD *)v46 = *v77;
            v46 += 8;
            *v77++ = v79;
            --v78;
          }
          while (v78);
        }
        else
        {
          v80 = -(uint64_t)v76;
          do
          {
            v81 = *v46;
            *v46++ = *(_BYTE *)(v64 + v80);
            *(_BYTE *)(v64 + v80) = v81;
            v74 = __CFADD__(v80++, 1);
          }
          while (!v74);
        }
      }
      if (v65 > a3)
        result = mrec_qsort_r<SortLink>();
      if (v75 <= a3)
        return result;
      result = v64 - v75;
      a2 = v75 / (unint64_t)a3;
      v6 = (((v64 - v75) | a3) & 7) == 0;
      if ((((v64 - v75) | a3) & 7) != 0)
        v7 = 2;
      else
        v7 = v5;
      if (a2 < 7)
        goto LABEL_121;
    }
    if ((uint64_t)(a2 * a3) > a3)
    {
      v93 = result;
      do
      {
        if (v43 > result)
        {
          v94 = v93;
          v95 = v43;
          do
          {
            v96 = v95;
            v95 += v4;
            if (*(_DWORD *)(v95 + 4) <= *(_DWORD *)(v96 + 4))
              break;
            if (v7)
            {
              v97 = 0;
              v98 = v94 + a3;
              if (v6)
              {
                do
                {
                  v99 = *(_QWORD *)(v98 + 8 * v97);
                  *(_QWORD *)(v98 + 8 * v97) = *(_QWORD *)(v94 + 8 * v97);
                  *(_QWORD *)(v94 + 8 * v97++) = v99;
                }
                while (v8 != v97);
              }
              else
              {
                do
                {
                  v100 = *(_BYTE *)(v98 + v97);
                  *(_BYTE *)(v98 + v97) = *(_BYTE *)(v94 + v97);
                  *(_BYTE *)(v94 + v97++) = v100;
                }
                while (a3 != v97);
              }
            }
            else
            {
              v101 = *(_QWORD *)v96;
              *(_QWORD *)v96 = *(_QWORD *)v95;
              *(_QWORD *)v95 = v101;
            }
            v94 += v4;
          }
          while (v95 > result);
        }
        v43 += a3;
        v93 += a3;
      }
      while (v43 < v64);
    }
  }
  return result;
}

uint64_t Lattice<WordLatticeLC>::createNode(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_DWORD *)(a1 + 72);
  if (v2)
  {
    v3 = v2 - 1;
    v4 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v3);
    *(_DWORD *)(a1 + 72) = v3;
    v5 = *(_QWORD *)(a1 + 80);
  }
  else
  {
    v4 = *(unsigned int *)(a1 + 88);
    v6 = v4;
    if ((_DWORD)v4 == *(_DWORD *)(a1 + 92))
    {
      DgnArray<CWIDAC>::reallocElts(a1 + 80, 1, 1);
      v6 = *(_DWORD *)(a1 + 88);
    }
    v5 = *(_QWORD *)(a1 + 80);
    v7 = v5 + 24 * v6;
    *(_OWORD *)v7 = xmmword_209A58830;
    *(_QWORD *)(v7 + 16) = 0x100000001;
    *(_DWORD *)(a1 + 88) = v6 + 1;
  }
  v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v8 + 1;
  v9 = v5 + 24 * v4;
  v10 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)v9 = v10;
  *(_DWORD *)(v9 + 4) = v8;
  *(_OWORD *)(v9 + 8) = xmmword_209A609A0;
  if (v10 == *(_DWORD *)(a1 + 28))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 16, 1, 1);
    v10 = *(_DWORD *)(a1 + 24);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v10) = v4;
  ++*(_DWORD *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 40);
  if (v11 == *(_DWORD *)(a1 + 44))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 32, 1, 1);
    v11 = *(_DWORD *)(a1 + 40);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v11) = v4;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_DWORD *)(a1 + 56);
  if (v12 == *(_DWORD *)(a1 + 60))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 48, 1, 1);
    v12 = *(_DWORD *)(a1 + 56);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v12) = v4;
  ++*(_DWORD *)(a1 + 56);
  *(_BYTE *)(a1 + 8) = 0;
  return v4;
}

uint64_t Lattice<WordLatticeLC>::maybeCreateAndConnectLink(uint64_t *a1, unsigned int a2, const WordLatticeLC *a3, WordLatticeLC *this, int a5, _DWORD *a6)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  const WordLatticeLC *Link;
  const WordLatticeLC *v15;
  uint64_t result;

  v9 = (int)a3;
  v12 = *(unsigned int *)(a1[10] + 24 * a2 + 20);
  if ((_DWORD)v12 == -2)
  {
LABEL_7:
    Link = (const WordLatticeLC *)Lattice<WordLatticeLC>::createLink((uint64_t)a1, a2, v9, this);
    v15 = Link;
    if (a6)
      *a6 = *(_DWORD *)(a1[16] + 136 * Link + 112);
    if (a5)
    {
      Lattice<WordLatticeLC>::connectInLink(a1, Link);
      Lattice<WordLatticeLC>::connectOutLink(a1, v15);
    }
    else
    {
      Lattice<WordLatticeLC>::connectInLinkUnordered(a1, Link);
      Lattice<WordLatticeLC>::connectOutLinkUnordered(a1, v15);
    }
    return 1;
  }
  v13 = a1[16];
  while (*(_DWORD *)(v13 + 136 * v12 + 120) != v9)
  {
LABEL_6:
    v12 = *(unsigned int *)(v13 + 136 * v12 + 128);
    if ((_DWORD)v12 == -2)
      goto LABEL_7;
  }
  if (WordLatticeLC::cmpForDuplicateCheck(this, (const WordLatticeLC *)(v13 + 136 * v12), a3))
  {
    v13 = a1[16];
    goto LABEL_6;
  }
  result = 0;
  if (a6)
    *a6 = *(_DWORD *)(a1[16] + 136 * v12 + 112);
  return result;
}

ActiveWordEmbeddedFst *FstCore::makeFstActiveWord(uint64_t a1, uint64_t a2, __int128 *a3, __int16 a4, uint64_t a5, unsigned __int16 a6, PelScorer *a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  ActiveWordMgr *v17;
  uint64_t *v18;
  uint64_t *v19;

  v17 = (ActiveWordMgr *)(a2 + 16);
  v18 = MemChunkAlloc(0xC0uLL, 0);
  FstHmmNet::FstHmmNet((uint64_t)v18, (uint64_t)v17, a1, 1, 1, 0, a10, 0, a9, a4, a7, a8, a3, a5, a6);
  v19 = MemChunkAlloc(0x28uLL, 0);
  return ActiveWordEmbeddedFst::ActiveWordEmbeddedFst((ActiveWordEmbeddedFst *)v19, v17, (HmmNet *)v18);
}

uint64_t FstCore::getBestExitScore(FstCore *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 160))(*((_QWORD *)this + 2));
}

uint64_t FstCore::getBestScoreMaybeUpdateFstNode(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 168))(*(_QWORD *)(a1 + 16));
}

uint64_t FstCore::expandEmbFstHistory(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16));
}

uint64_t FstStats::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = SnapTime::sizeObject(a1, a2);
  v5 = SnapTime::sizeObject(a1 + 32, a2) + v4;
  v6 = SnapTime::sizeObject(a1 + 64, a2);
  v7 = v5 + v6 + SnapTime::sizeObject(a1 + 96, a2);
  v8 = SnapTime::sizeObject(a1 + 128, a2);
  v9 = v8 + SnapTime::sizeObject(a1 + 160, a2);
  v10 = v7 + v9 + SnapTime::sizeObject(a1 + 192, a2);
  return v10 + SnapTime::sizeObject(a1 + 224, a2);
}

__n128 FstStats::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v7;
  v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  result = *(__n128 *)(a2 + 224);
  v10 = *(_OWORD *)(a2 + 240);
  *(__n128 *)(a1 + 224) = result;
  *(_OWORD *)(a1 + 240) = v10;
  return result;
}

int64x2_t FstStats::operator-=(int64x2_t *a1, int64x2_t *a2)
{
  int64x2_t v2;
  int64x2_t v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t result;

  v2 = a1[1];
  *a1 = vsubq_s64(*a1, *a2);
  a1[1] = vsubq_s64(v2, a2[1]);
  v3 = a1[3];
  a1[2] = vsubq_s64(a1[2], a2[2]);
  a1[3] = vsubq_s64(v3, a2[3]);
  v4 = a1[5];
  a1[4] = vsubq_s64(a1[4], a2[4]);
  a1[5] = vsubq_s64(v4, a2[5]);
  v5 = a1[7];
  a1[6] = vsubq_s64(a1[6], a2[6]);
  a1[7] = vsubq_s64(v5, a2[7]);
  v6 = a1[9];
  a1[8] = vsubq_s64(a1[8], a2[8]);
  a1[9] = vsubq_s64(v6, a2[9]);
  v7 = a1[11];
  a1[10] = vsubq_s64(a1[10], a2[10]);
  a1[11] = vsubq_s64(v7, a2[11]);
  v8 = a1[13];
  a1[12] = vsubq_s64(a1[12], a2[12]);
  a1[13] = vsubq_s64(v8, a2[13]);
  v9 = a1[15];
  a1[14] = vsubq_s64(a1[14], a2[14]);
  result = vsubq_s64(v9, a2[15]);
  a1[15] = result;
  return result;
}

uint64_t FstCore::getRequiredVirtMapSize(FstCore *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2));
}

uint64_t FstCore::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16), a2, a3, *(unsigned __int8 *)(a1 + 24));
}

void FstCore::setConstraint(Constraint **this, Constraint *a2)
{
  uint64_t v4;
  uint64_t v5;
  Constraint *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  DgnDelete<Constraint>(this[138]);
  this[138] = a2;
  if (a2)
  {
    Constraint::setupConstraint(a2);
    v6 = this[138];
    *((_QWORD *)this[9] + 16) = v6;
    v7 = *((_QWORD *)this[2] + 5);
    v8 = (_QWORD *)((char *)v6 + 168);
    v9 = (_QWORD *)(v7 + 216);
    v10 = *((_DWORD *)v6 + 48);
    if (v10)
      v11 = (uint64_t)v6 + 184;
    else
      v11 = 0;
    v12 = *(unsigned int *)(v7 + 224);
    if ((_DWORD)v12)
      v13 = v8 == v9;
    else
      v13 = 1;
    if (!v13)
    {
      if (*((_DWORD *)v6 + 44) == (_DWORD)v12)
      {
        v14 = *v9 - 4;
        while ((int)v12 >= 1)
        {
          v15 = *v8 + 4 * v12;
          v16 = *(_DWORD *)(v14 + 4 * v12--);
          if (*(_DWORD *)(v15 - 4) != v16)
            goto LABEL_13;
        }
      }
      else
      {
LABEL_13:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 1774, (uint64_t)"fst/fstcore", 2, (uint64_t)"%s", v4, v5, (char)&unk_209A609B3);
      }
    }
    if (*(_DWORD *)(v7 + 240))
      v17 = v10 == 0;
    else
      v17 = 1;
    if (!v17 && (DgnArray<DgnArray<ParseToken>>::operator==(v11, v7 + 232) & 1) == 0)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 1777, (uint64_t)"fst/fstcore", 3, (uint64_t)"%s", v18, v19, (char)&errStr_fst_fstcore_E_FST_START_TOKENS_DO_NOT_MATCH);
  }
}

unint64_t FstCore::setEmbeddedTransducers(unint64_t result, uint64_t a2)
{
  if (a2)
    return DgnArray<StateSpec>::copyArraySlice(*(_QWORD *)(result + 16) + 120, (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
  return result;
}

void LatticeStats::LatticeStats(LatticeStats *this)
{
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  LMStats::resetStats((LatticeStats *)((char *)this + 48));
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  LMStats::resetStats((LatticeStats *)((char *)this + 256));
  LatticeStats::resetStats(this);
}

_QWORD *Lattice<WordLatticeLC>::gc(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;

  Lattice<WordLatticeLC>::gcNonTerminal((unint64_t)a1);
  Lattice<WordLatticeLC>::gcNonInitial((unint64_t)a1);
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    MemChunkFree(v2, 0);
    a1[22] = 0;
  }
  a1[23] = 0;
  result = (_QWORD *)a1[20];
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    a1[20] = 0;
  }
  a1[21] = 0;
  return result;
}

uint64_t Lattice<WordLatticeLC>::minimizeDAG(unint64_t a1)
{
  char v2;
  char v3;
  uint64_t v4;
  const WordLatticeLC *v5;
  uint64_t result;

  do
  {
    do
    {
      v2 = Lattice<WordLatticeLC>::reduceDAGOnceBackward(a1);
      v3 = Lattice<WordLatticeLC>::reduceDAGOnceForward(a1);
      result = Lattice<WordLatticeLC>::removeMultiLinks(a1, v4, v5);
    }
    while ((result & 1) != 0);
  }
  while ((v3 & 1) != 0 || (v2 & 1) != 0);
  return result;
}

unint64_t Lattice<WordLatticeLC>::gcNonTerminal(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  Lattice<WordLatticeLC>::gcSetup(a1);
  if (*(_DWORD *)(a1 + 56))
  {
    v2 = 0;
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 80);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_DWORD *)(a1 + 24);
    do
    {
      v7 = *(_DWORD *)(v3 + 4 * v2);
      *(_DWORD *)(v4 + 24 * v7) = v6;
      *(_DWORD *)(v5 + 4 * v6) = v7;
      v6 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v6;
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 56));
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 24);
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 48, (uint64_t *)(a1 + 16), 0, v6);
  *(_DWORD *)(a1 + 40) = 0;
  if (*(_DWORD *)(a1 + 24))
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(_DWORD *)(v9 + 4 * v8);
      v11 = *(_QWORD *)(a1 + 80);
      if (*(_DWORD *)(v11 + 24 * v10 + 8))
      {
        v12 = *(unsigned int *)(v11 + 24 * v10 + 16);
        if ((_DWORD)v12 != -2)
        {
          v13 = *(_QWORD *)(a1 + 128);
          v14 = *(_QWORD *)(a1 + 96);
          do
          {
            v15 = *(_DWORD *)(v13 + 136 * v12 + 116);
            v16 = (_DWORD *)(v11 + 24 * v15);
            if (*v16 == -1)
            {
              v17 = *(unsigned int *)(a1 + 24);
              *v16 = v17;
              *(_DWORD *)(v9 + 4 * v17) = v15;
              ++*(_DWORD *)(a1 + 24);
            }
            v18 = *(unsigned int *)(a1 + 104);
            v19 = v13 + 136 * v12;
            *(_DWORD *)(v19 + 112) = v18;
            *(_DWORD *)(v14 + 4 * v18) = v12;
            ++*(_DWORD *)(a1 + 104);
            v12 = *(unsigned int *)(v19 + 124);
          }
          while ((_DWORD)v12 != -2);
        }
      }
      else
      {
        v20 = *(unsigned int *)(a1 + 40);
        if (v20 == *(_DWORD *)(a1 + 44))
        {
          DgnPrimArray<unsigned int>::reallocElts(a1 + 32, 1, 1);
          v20 = *(unsigned int *)(a1 + 40);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v20) = v10;
        ++*(_DWORD *)(a1 + 40);
      }
      ++v8;
    }
    while (v8 < *(unsigned int *)(a1 + 24));
  }
  return Lattice<WordLatticeLC>::gcCleanup(a1);
}

unint64_t Lattice<WordLatticeLC>::gcNonInitial(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  Lattice<WordLatticeLC>::gcSetup(a1);
  if (*(_DWORD *)(a1 + 40))
  {
    v2 = 0;
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 80);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_DWORD *)(a1 + 24);
    do
    {
      v7 = *(_DWORD *)(v3 + 4 * v2);
      *(_DWORD *)(v4 + 24 * v7) = v6;
      *(_DWORD *)(v5 + 4 * v6) = v7;
      v6 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v6;
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 40));
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 24);
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 32, (uint64_t *)(a1 + 16), 0, v6);
  *(_DWORD *)(a1 + 56) = 0;
  if (*(_DWORD *)(a1 + 24))
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(_DWORD *)(v9 + 4 * v8);
      v11 = *(_QWORD *)(a1 + 80);
      if (*(_DWORD *)(v11 + 24 * v10 + 12))
      {
        v12 = *(unsigned int *)(v11 + 24 * v10 + 20);
        if ((_DWORD)v12 != -2)
        {
          v13 = *(_QWORD *)(a1 + 128);
          v14 = *(_QWORD *)(a1 + 96);
          do
          {
            v15 = *(_DWORD *)(v13 + 136 * v12 + 120);
            v16 = (_DWORD *)(v11 + 24 * v15);
            if (*v16 == -1)
            {
              v17 = *(unsigned int *)(a1 + 24);
              *v16 = v17;
              *(_DWORD *)(v9 + 4 * v17) = v15;
              ++*(_DWORD *)(a1 + 24);
            }
            v18 = *(unsigned int *)(a1 + 104);
            v19 = v13 + 136 * v12;
            *(_DWORD *)(v19 + 112) = v18;
            *(_DWORD *)(v14 + 4 * v18) = v12;
            ++*(_DWORD *)(a1 + 104);
            v12 = *(unsigned int *)(v19 + 128);
          }
          while ((_DWORD)v12 != -2);
        }
      }
      else
      {
        v20 = *(unsigned int *)(a1 + 56);
        if (v20 == *(_DWORD *)(a1 + 60))
        {
          DgnPrimArray<unsigned int>::reallocElts(a1 + 48, 1, 1);
          v20 = *(unsigned int *)(a1 + 56);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v20) = v10;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v8;
    }
    while (v8 < *(unsigned int *)(a1 + 24));
  }
  return Lattice<WordLatticeLC>::gcCleanup(a1);
}

unint64_t Lattice<WordLatticeLC>::gcSetup(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = *(unsigned int *)(a1 + 40);
  if ((int)v2 >= 1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 80);
    LODWORD(v5) = *(_DWORD *)(a1 + 40);
    do
    {
      if (!*(_DWORD *)(v4 + 24 * *(unsigned int *)(v3 + 4 * (v2 - 1)) + 12))
      {
        LODWORD(v5) = v5 - 1;
        if (v5 > (int)v2 - 1)
        {
          v6 = (v2 - 1);
          do
          {
            *(_DWORD *)(v3 + 4 * v6) = *(_DWORD *)(v3 + 4 * v6 + 4);
            v5 = (*(_DWORD *)(a1 + 40) - 1);
            ++v6;
          }
          while (v6 < v5);
        }
        *(_DWORD *)(a1 + 40) = v5;
      }
      v7 = v2-- <= 1;
    }
    while (!v7);
  }
  v8 = *(unsigned int *)(a1 + 56);
  if ((int)v8 >= 1)
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 80);
    LODWORD(v11) = *(_DWORD *)(a1 + 56);
    do
    {
      if (!*(_DWORD *)(v10 + 24 * *(unsigned int *)(v9 + 4 * (v8 - 1)) + 8))
      {
        LODWORD(v11) = v11 - 1;
        if (v11 > (int)v8 - 1)
        {
          v12 = (v8 - 1);
          do
          {
            *(_DWORD *)(v9 + 4 * v12) = *(_DWORD *)(v9 + 4 * v12 + 4);
            v11 = (*(_DWORD *)(a1 + 56) - 1);
            ++v12;
          }
          while (v12 < v11);
        }
        *(_DWORD *)(a1 + 56) = v11;
      }
      v7 = v8-- <= 1;
    }
    while (!v7);
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 176, (uint64_t *)(a1 + 16), 0, *(_DWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 24) = 0;
  v13 = *(unsigned int *)(a1 + 184);
  if ((int)v13 >= 1)
  {
    v14 = *(_QWORD *)(a1 + 176);
    v15 = *(_QWORD *)(a1 + 80);
    v16 = v13 + 1;
    do
      *(_DWORD *)(v15 + 24 * *(unsigned int *)(v14 + 4 * (v16-- - 2))) = -1;
    while (v16 > 1);
  }
  result = DgnPrimArray<int>::copyArraySlice(a1 + 160, (uint64_t *)(a1 + 96), 0, *(_DWORD *)(a1 + 104));
  *(_DWORD *)(a1 + 104) = 0;
  v18 = *(unsigned int *)(a1 + 168);
  if ((int)v18 >= 1)
  {
    v19 = *(_QWORD *)(a1 + 160);
    v20 = *(_QWORD *)(a1 + 128);
    v21 = v18 + 1;
    do
      *(_DWORD *)(v20 + 136 * *(unsigned int *)(v19 + 4 * (v21-- - 2)) + 112) = -1;
    while (v21 > 1);
  }
  return result;
}

unint64_t Lattice<WordLatticeLC>::gcCleanup(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v1 = result;
  v2 = *(unsigned int *)(result + 168);
  if ((int)v2 >= 1)
  {
    v3 = v2 + 1;
    do
    {
      v4 = *(_DWORD *)(*(_QWORD *)(v1 + 160) + 4 * (v3 - 2));
      if (*(_DWORD *)(*(_QWORD *)(v1 + 128) + 136 * v4 + 112) == -1)
        result = Lattice<WordLatticeLC>::disconnectAndDestroyLink(v1, v4);
      --v3;
    }
    while (v3 > 1);
  }
  v5 = *(unsigned int *)(v1 + 184);
  if ((int)v5 >= 1)
  {
    v6 = v5 + 1;
    do
    {
      v7 = *(_DWORD *)(*(_QWORD *)(v1 + 176) + 4 * (v6 - 2));
      v8 = *(_QWORD *)(v1 + 80);
      if (*(_DWORD *)(v8 + 24 * v7) == -1)
      {
        *(_QWORD *)(v8 + 24 * v7 + 16) = 0x100000001;
        result = Lattice<WordLatticeLC>::destroyNode(v1, v7);
      }
      --v6;
    }
    while (v6 > 1);
  }
  return result;
}

unint64_t Lattice<WordLatticeLC>::disconnectAndDestroyLink(unint64_t a1, unsigned int a2)
{
  Lattice<WordLatticeLC>::disconnectInLink(a1, a2);
  Lattice<WordLatticeLC>::disconnectOutLink(a1, a2);
  return Lattice<WordLatticeLC>::destroyLinkNoDuplicateCheck(a1, a2);
}

unint64_t Lattice<WordLatticeLC>::destroyNode(unint64_t result, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_QWORD *)(result + 80);
  v5 = *(unsigned int *)(v4 + 24 * a2);
  if ((_DWORD)v5 != -1)
  {
    v6 = *(_DWORD *)(result + 24) - 1;
    v7 = *(_QWORD *)(result + 16);
    v8 = *(_DWORD *)(v7 + 4 * v6);
    *(_DWORD *)(v7 + 4 * v5) = v8;
    *(_DWORD *)(v4 + 24 * v8) = v5;
    *(_DWORD *)(result + 24) = v6;
  }
  if (!*(_DWORD *)(v4 + 24 * a2 + 8))
  {
    v10 = *(unsigned int *)(result + 40);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *(_QWORD *)(result + 32);
      while (*(_DWORD *)(v12 + 4 * v11) != a2)
      {
        if (v10 == ++v11)
          goto LABEL_4;
      }
      if ((_DWORD)v11 != -1)
      {
        LODWORD(v10) = v10 - 1;
        if (v10 > v11)
        {
          do
          {
            *(_DWORD *)(v12 + 4 * v11) = *(_DWORD *)(v12 + 4 * v11 + 4);
            v10 = (*(_DWORD *)(result + 40) - 1);
            ++v11;
          }
          while (v11 < v10);
        }
        *(_DWORD *)(result + 40) = v10;
      }
    }
  }
LABEL_4:
  if (!*(_DWORD *)(v4 + 24 * a2 + 12))
  {
    v13 = *(unsigned int *)(result + 56);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = *(_QWORD *)(result + 48);
      while (*(_DWORD *)(v15 + 4 * v14) != a2)
      {
        if (v13 == ++v14)
          goto LABEL_5;
      }
      if ((_DWORD)v14 != -1)
      {
        LODWORD(v13) = v13 - 1;
        if (v13 > v14)
        {
          do
          {
            *(_DWORD *)(v15 + 4 * v14) = *(_DWORD *)(v15 + 4 * v14 + 4);
            v13 = (*(_DWORD *)(result + 56) - 1);
            ++v14;
          }
          while (v14 < v13);
        }
        *(_DWORD *)(result + 56) = v13;
      }
    }
  }
LABEL_5:
  v9 = *(_DWORD *)(result + 72);
  if (v9 == *(_DWORD *)(result + 76))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(result + 64, 1, 1);
    v9 = *(_DWORD *)(v3 + 72);
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 64) + 4 * v9) = a2;
  ++*(_DWORD *)(v3 + 72);
  return result;
}

unint64_t Lattice<WordLatticeLC>::disconnectInLink(unint64_t result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v16;
  int v17;
  unsigned int v18;

  v3 = *(_QWORD *)(result + 128);
  v4 = *(_DWORD *)(v3 + 136 * a2 + 120);
  v5 = *(_QWORD *)(result + 80);
  if (*(_DWORD *)(v5 + 24 * v4) != -1)
  {
    v6 = result;
    v7 = v5 + 24 * v4;
    v10 = *(_DWORD *)(v7 + 16);
    v8 = (_DWORD *)(v7 + 16);
    v9 = v10;
    v11 = v10 == (unint64_t)a2;
    if (v10 != -2 && v9 != a2)
    {
      do
      {
        v13 = v3 + 136 * v9;
        v14 = *(_DWORD *)(v13 + 124);
        v8 = (_DWORD *)(v13 + 124);
        v9 = v14;
        v11 = v14 == (unint64_t)a2;
      }
      while (v14 != -2 && v9 != a2);
    }
    if (v11)
    {
      *v8 = *(_DWORD *)(v3 + 136 * a2 + 124);
      v16 = v5 + 24 * v4;
      v17 = *(_DWORD *)(v16 + 8) - 1;
      *(_DWORD *)(v16 + 8) = v17;
      if (!v17)
      {
        v18 = *(_DWORD *)(result + 40);
        if (v18 == *(_DWORD *)(result + 44))
        {
          result = DgnPrimArray<unsigned int>::reallocElts(result + 32, 1, 1);
          v18 = *(_DWORD *)(v6 + 40);
          v3 = *(_QWORD *)(v6 + 128);
        }
        *(_DWORD *)(*(_QWORD *)(v6 + 32) + 4 * v18) = v4;
        ++*(_DWORD *)(v6 + 40);
      }
    }
  }
  *(_DWORD *)(v3 + 136 * a2 + 120) = -2;
  return result;
}

unint64_t Lattice<WordLatticeLC>::disconnectOutLink(unint64_t result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v16;
  int v17;
  unsigned int v18;

  v3 = *(_QWORD *)(result + 128);
  v4 = *(_DWORD *)(v3 + 136 * a2 + 116);
  v5 = *(_QWORD *)(result + 80);
  if (*(_DWORD *)(v5 + 24 * v4) != -1)
  {
    v6 = result;
    v7 = v5 + 24 * v4;
    v10 = *(_DWORD *)(v7 + 20);
    v8 = (_DWORD *)(v7 + 20);
    v9 = v10;
    v11 = v10 == (unint64_t)a2;
    if (v10 != -2 && v9 != a2)
    {
      do
      {
        v13 = v3 + 136 * v9;
        v14 = *(_DWORD *)(v13 + 128);
        v8 = (_DWORD *)(v13 + 128);
        v9 = v14;
        v11 = v14 == (unint64_t)a2;
      }
      while (v14 != -2 && v9 != a2);
    }
    if (v11)
    {
      *v8 = *(_DWORD *)(v3 + 136 * a2 + 128);
      v16 = v5 + 24 * v4;
      v17 = *(_DWORD *)(v16 + 12) - 1;
      *(_DWORD *)(v16 + 12) = v17;
      if (!v17)
      {
        v18 = *(_DWORD *)(result + 56);
        if (v18 == *(_DWORD *)(result + 60))
        {
          result = DgnPrimArray<unsigned int>::reallocElts(result + 48, 1, 1);
          v18 = *(_DWORD *)(v6 + 56);
          v3 = *(_QWORD *)(v6 + 128);
        }
        *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v18) = v4;
        ++*(_DWORD *)(v6 + 56);
      }
    }
  }
  *(_DWORD *)(v3 + 136 * a2 + 116) = -2;
  return result;
}

unint64_t Lattice<WordLatticeLC>::destroyLinkNoDuplicateCheck(unint64_t result, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v3 = result;
  v4 = *(_QWORD *)(result + 128);
  v5 = *(unsigned int *)(v4 + 136 * a2 + 112);
  if ((_DWORD)v5 != -1)
  {
    v6 = *(_DWORD *)(result + 104) - 1;
    v7 = *(_QWORD *)(result + 96);
    v8 = *(_DWORD *)(v7 + 4 * v6);
    *(_DWORD *)(v7 + 4 * v5) = v8;
    *(_DWORD *)(v4 + 136 * v8 + 112) = v5;
    *(_DWORD *)(result + 104) = v6;
  }
  v9 = *(_DWORD *)(result + 120);
  if (v9 == *(_DWORD *)(result + 124))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(result + 112, 1, 1);
    v9 = *(_DWORD *)(v3 + 120);
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 112) + 4 * v9) = a2;
  ++*(_DWORD *)(v3 + 120);
  return result;
}

uint64_t Lattice<WordLatticeLC>::removeMultiLinks(unint64_t a1, uint64_t a2, const WordLatticeLC *a3)
{
  unint64_t v3;
  unint64_t v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;

  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v5) + 20);
      if (v7 != -2)
      {
        do
        {
          v8 = v7;
          v9 = *(_QWORD *)(a1 + 128) + 136 * v7;
          while (2)
          {
            v10 = *(_DWORD *)(v9 + 128);
            while (1)
            {
              if (v10 == -2)
              {
                v7 = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 136 * v8 + 128);
                goto LABEL_13;
              }
              v11 = *(_QWORD *)(a1 + 128);
              v12 = v10;
              if (*(_DWORD *)(v11 + 136 * v8 + 120) != *(_DWORD *)(v11 + 136 * v10 + 120))
                goto LABEL_11;
              v13 = WordLatticeLC::cmpForMultiLinkCheck((WordLatticeLC *)(v11 + 136 * v8), (const WordLatticeLC *)(v11 + 136 * v10), a3);
              if (v13 < 1)
                break;
              v10 = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 136 * v10 + 128);
              Lattice<WordLatticeLC>::disconnectAndDestroyLink(a1, v12);
              v6 = 1;
            }
            v11 = *(_QWORD *)(a1 + 128);
            if ((v13 & 0x80000000) == 0)
            {
LABEL_11:
              v9 = v11 + 136 * v10;
              continue;
            }
            break;
          }
          v7 = *(_DWORD *)(v11 + 136 * v8 + 128);
          Lattice<WordLatticeLC>::disconnectAndDestroyLink(a1, v8);
          v6 = 1;
LABEL_13:
          ;
        }
        while (v7 != -2);
        v3 = *(unsigned int *)(a1 + 24);
      }
      ++v5;
    }
    while (v5 < v3);
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t Lattice<WordLatticeLC>::reduceDAGOnceBackward(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *__b;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  void *v39;

  v2 = *(unsigned int *)(a1 + 24);
  v37 = 0;
  v38 = 0;
  if ((_DWORD)v2)
  {
    __b = 0;
    v3 = realloc_array(0, &__b, 4 * v2, 0, 0, 1);
    v37 = __b;
    LODWORD(v38) = v2;
    HIDWORD(v38) = v3 >> 2;
    if ((int)v2 >= 1)
      memset(__b, 255, 4 * v2);
  }
  else
  {
    LODWORD(v38) = 0;
  }
  v4 = *(unsigned int *)(a1 + 56);
  __b = 0;
  v36 = 0;
  if ((_DWORD)v4)
  {
    v33 = 0;
    v5 = realloc_array(0, &v33, 4 * v4, 0, 0, 1);
    v6 = v33;
    __b = v33;
    v7 = *(unsigned int *)(a1 + 56);
    LODWORD(v36) = v4;
    HIDWORD(v36) = v5 >> 2;
    if ((int)v7 >= 1)
    {
      v8 = *(_QWORD *)(a1 + 48);
      v9 = *(_QWORD *)(a1 + 80);
      v10 = v7 + 1;
      v11 = v37;
      do
      {
        v12 = *(_DWORD *)(v8 + 4 * (v10 - 2));
        v6[(v10 - 2)] = v12;
        v11[*(unsigned int *)(v9 + 24 * v12)] = 0;
        --v10;
      }
      while (v10 > 1);
    }
  }
  else
  {
    LODWORD(v36) = 0;
  }
  v33 = 0;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  v13 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v13)
  {
    v39 = 0;
    HIDWORD(v34) = realloc_array(0, &v39, 4 * v13, 0, 0, 1) >> 2;
    v33 = v39;
    LODWORD(v13) = *(_DWORD *)(a1 + 24);
    v14 = HIDWORD(v32);
  }
  else
  {
    v14 = 0;
  }
  if (v14 < v13)
  {
    v39 = 0;
    HIDWORD(v32) = realloc_array(v31, &v39, 4 * v13, 4 * v32, 4 * v32, 1) >> 2;
    v31 = v39;
  }
  if ((_DWORD)v36)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      (*(void (**)(unint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &__b);
      v17 = v36;
      if (v36 >= 2)
      {
        v18 = 0;
        v19 = 1;
        do
        {
          if (Lattice<WordLatticeLC>::cmpNodesByOutLinksIgnoreNodes(a1, *((_DWORD *)__b + v18), *((_DWORD *)__b + v19)))
          {
            v18 = v19;
          }
          else
          {
            Lattice<WordLatticeLC>::copyInLinks(a1, *((_DWORD *)__b + v19), (const WordLatticeLC *)*((unsigned int *)__b + v18));
            Lattice<WordLatticeLC>::destroyAllLinks(a1, *((_DWORD *)__b + v19));
            v20 = *((_DWORD *)__b + v19);
            v21 = v32;
            if (v32 == (unint64_t)HIDWORD(v32))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v31, 1, 1);
              v21 = v32;
            }
            *((_DWORD *)v31 + v21) = v20;
            LODWORD(v32) = v32 + 1;
            v15 = 1;
          }
          ++v19;
          v17 = v36;
        }
        while (v19 < v36);
      }
      LODWORD(v34) = 0;
      if (v17)
      {
        v22 = 0;
        v23 = *(_QWORD *)(a1 + 80);
        do
        {
          v24 = *(unsigned int *)(v23 + 24 * *((unsigned int *)__b + v22) + 16);
          if ((_DWORD)v24 != -2)
          {
            v25 = *(_QWORD *)(a1 + 128);
            v26 = v37;
            do
            {
              v27 = *(_DWORD *)(v25 + 136 * v24 + 116);
              if ((v26[*(unsigned int *)(v23 + 24 * v27)] & 0x80000000) != 0)
              {
                v28 = v34;
                if (v34 == (unint64_t)HIDWORD(v34))
                {
                  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v33, 1, 1);
                  v28 = v34;
                  v23 = *(_QWORD *)(a1 + 80);
                  v26 = v37;
                  v25 = *(_QWORD *)(a1 + 128);
                }
                *((_DWORD *)v33 + v28) = v27;
                LODWORD(v34) = v34 + 1;
                v26[*(unsigned int *)(v23 + 24 * v27)] = v16 + 1;
              }
              v24 = *(unsigned int *)(v25 + 136 * v24 + 124);
            }
            while ((_DWORD)v24 != -2);
            v17 = v36;
          }
          ++v22;
        }
        while (v22 < v17);
        v29 = v34;
      }
      else
      {
        v29 = 0;
      }
      DgnPrimArray<int>::copyArraySlice((unint64_t)&__b, (uint64_t *)&v33, 0, v29);
      ++v16;
    }
    while ((_DWORD)v36);
  }
  else
  {
    v15 = 0;
  }
  if ((_DWORD)v32)
    Lattice<WordLatticeLC>::destroyNodesUsingGcMarks(a1, (uint64_t)&v31);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v31);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&__b);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v37);
  return v15 & 1;
}

void sub_209807718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::reduceDAGOnceForward(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *__b;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  void *v39;

  v2 = *(unsigned int *)(a1 + 24);
  v37 = 0;
  v38 = 0;
  if ((_DWORD)v2)
  {
    __b = 0;
    v3 = realloc_array(0, &__b, 4 * v2, 0, 0, 1);
    v37 = __b;
    LODWORD(v38) = v2;
    HIDWORD(v38) = v3 >> 2;
    if ((int)v2 >= 1)
      memset(__b, 255, 4 * v2);
  }
  else
  {
    LODWORD(v38) = 0;
  }
  v4 = *(unsigned int *)(a1 + 40);
  __b = 0;
  v36 = 0;
  if ((_DWORD)v4)
  {
    v33 = 0;
    v5 = realloc_array(0, &v33, 4 * v4, 0, 0, 1);
    v6 = v33;
    __b = v33;
    v7 = *(unsigned int *)(a1 + 40);
    LODWORD(v36) = v4;
    HIDWORD(v36) = v5 >> 2;
    if ((int)v7 >= 1)
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 80);
      v10 = v7 + 1;
      v11 = v37;
      do
      {
        v12 = *(_DWORD *)(v8 + 4 * (v10 - 2));
        v6[(v10 - 2)] = v12;
        v11[*(unsigned int *)(v9 + 24 * v12)] = 0;
        --v10;
      }
      while (v10 > 1);
    }
  }
  else
  {
    LODWORD(v36) = 0;
  }
  v33 = 0;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  v13 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v13)
  {
    v39 = 0;
    HIDWORD(v34) = realloc_array(0, &v39, 4 * v13, 0, 0, 1) >> 2;
    v33 = v39;
    LODWORD(v13) = *(_DWORD *)(a1 + 24);
    v14 = HIDWORD(v32);
  }
  else
  {
    v14 = 0;
  }
  if (v14 < v13)
  {
    v39 = 0;
    HIDWORD(v32) = realloc_array(v31, &v39, 4 * v13, 4 * v32, 4 * v32, 1) >> 2;
    v31 = v39;
  }
  if ((_DWORD)v36)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      (*(void (**)(unint64_t, void **))(*(_QWORD *)a1 + 32))(a1, &__b);
      v17 = v36;
      if (v36 >= 2)
      {
        v18 = 0;
        v19 = 1;
        do
        {
          if (Lattice<WordLatticeLC>::cmpNodesByInLinksIgnoreNodes(a1, *((_DWORD *)__b + v18), *((_DWORD *)__b + v19)))
          {
            v18 = v19;
          }
          else
          {
            Lattice<WordLatticeLC>::copyOutLinks(a1, *((_DWORD *)__b + v19), (const WordLatticeLC *)*((unsigned int *)__b + v18));
            Lattice<WordLatticeLC>::destroyAllLinks(a1, *((_DWORD *)__b + v19));
            v20 = *((_DWORD *)__b + v19);
            v21 = v32;
            if (v32 == (unint64_t)HIDWORD(v32))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v31, 1, 1);
              v21 = v32;
            }
            *((_DWORD *)v31 + v21) = v20;
            LODWORD(v32) = v32 + 1;
            v15 = 1;
          }
          ++v19;
          v17 = v36;
        }
        while (v19 < v36);
      }
      LODWORD(v34) = 0;
      if (v17)
      {
        v22 = 0;
        v23 = *(_QWORD *)(a1 + 80);
        do
        {
          v24 = *(unsigned int *)(v23 + 24 * *((unsigned int *)__b + v22) + 20);
          if ((_DWORD)v24 != -2)
          {
            v25 = *(_QWORD *)(a1 + 128);
            v26 = v37;
            do
            {
              v27 = *(_DWORD *)(v25 + 136 * v24 + 120);
              if ((v26[*(unsigned int *)(v23 + 24 * v27)] & 0x80000000) != 0)
              {
                v28 = v34;
                if (v34 == (unint64_t)HIDWORD(v34))
                {
                  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v33, 1, 1);
                  v28 = v34;
                  v23 = *(_QWORD *)(a1 + 80);
                  v26 = v37;
                  v25 = *(_QWORD *)(a1 + 128);
                }
                *((_DWORD *)v33 + v28) = v27;
                LODWORD(v34) = v34 + 1;
                v26[*(unsigned int *)(v23 + 24 * v27)] = v16 + 1;
              }
              v24 = *(unsigned int *)(v25 + 136 * v24 + 128);
            }
            while ((_DWORD)v24 != -2);
            v17 = v36;
          }
          ++v22;
        }
        while (v22 < v17);
        v29 = v34;
      }
      else
      {
        v29 = 0;
      }
      DgnPrimArray<int>::copyArraySlice((unint64_t)&__b, (uint64_t *)&v33, 0, v29);
      ++v16;
    }
    while ((_DWORD)v36);
  }
  else
  {
    v15 = 0;
  }
  if ((_DWORD)v32)
    Lattice<WordLatticeLC>::destroyNodesUsingGcMarks(a1, (uint64_t)&v31);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v31);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&__b);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v37);
  return v15 & 1;
}

void sub_209807B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::cmpNodesByOutLinksIgnoreNodes(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return 0;
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_DWORD *)(v5 + 24 * a2 + 12);
  v7 = *(_DWORD *)(v5 + 24 * a3 + 12);
  if (v6 == v7)
  {
    v8 = *(_DWORD *)(v5 + 24 * a2 + 20);
    if (v8 == -2)
    {
      return 0;
    }
    else
    {
      v9 = (unsigned int *)(v5 + 24 * a3 + 20);
      while (1)
      {
        v10 = *v9;
        result = Lattice<WordLatticeLC>::cmpOutLink(a1, v8, (const WordLatticeLC *)*v9);
        if ((_DWORD)result)
          break;
        v11 = *(_QWORD *)(a1 + 128);
        v12 = v11 + 136 * v8;
        v9 = (unsigned int *)(v11 + 136 * v10 + 128);
        v8 = *(_DWORD *)(v12 + 128);
        if (v8 == -2)
          return 0;
      }
    }
  }
  else if (v6 < v7)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
  return result;
}

void Lattice<WordLatticeLC>::copyInLinks(uint64_t a1, unsigned int a2, const WordLatticeLC *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  const WordLatticeLC *Link;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;

  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(unsigned int *)(v3 + 24 * a2 + 16);
  if ((_DWORD)v4 != -2)
  {
    v5 = (int)a3;
    v7 = 0;
    v22 = a3;
    v8 = *(unsigned int *)(v3 + 24 * a3 + 16);
    v9 = *(_QWORD *)(a1 + 128);
    v10 = 1;
    v11 = -2;
    do
    {
      if ((_DWORD)v8 != -2)
      {
        do
        {
          v12 = v8;
          v13 = v8;
          v14 = WordLatticeLC::cmp((WordLatticeLC *)(v9 + 136 * v8), (const WordLatticeLC *)(v9 + 136 * v4), a3);
          if (v14)
          {
            v9 = *(_QWORD *)(a1 + 128);
            if ((v14 & 0x80000000) == 0)
              goto LABEL_12;
          }
          else
          {
            v9 = *(_QWORD *)(a1 + 128);
            v15 = *(_DWORD *)(v9 + 136 * v13 + 116);
            v16 = *(_DWORD *)(v9 + 136 * v4 + 116);
            if (v15 == v16)
              goto LABEL_16;
            if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v15 + 4) >= *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v16 + 4))
              goto LABEL_12;
          }
          v10 = 0;
          v8 = *(unsigned int *)(v9 + 136 * v13 + 124);
          v11 = v12;
        }
        while ((_DWORD)v8 != -2);
        v11 = v12;
      }
      v12 = 4294967294;
LABEL_12:
      Link = (const WordLatticeLC *)Lattice<WordLatticeLC>::createLink(a1, *(_DWORD *)(v9 + 136 * v4 + 116), v5, (WordLatticeLC *)(v9 + 136 * v4));
      v18 = Link;
      if ((v10 & 1) != 0)
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v22 + 16) = (_DWORD)Link;
        v19 = *(_QWORD *)(a1 + 128);
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 128);
        *(_DWORD *)(v19 + 136 * v11 + 124) = (_DWORD)Link;
      }
      *(_DWORD *)(v19 + 136 * Link + 124) = v12;
      Lattice<WordLatticeLC>::connectOutLink((uint64_t *)a1, Link);
      v10 = 0;
      ++v7;
      v9 = *(_QWORD *)(a1 + 128);
      v11 = v18;
LABEL_16:
      v4 = *(unsigned int *)(v9 + 136 * v4 + 124);
      v8 = v12;
    }
    while ((_DWORD)v4 != -2);
    if (v7)
    {
      *(_BYTE *)(a1 + 8) = 0;
      v20 = *(_QWORD *)(a1 + 80);
      v21 = *(_DWORD *)(v20 + 24 * v22 + 8);
      if (!v21)
      {
        DgnPrimArray<unsigned int>::removeKeepOrder((uint64_t *)(a1 + 32), v5);
        v20 = *(_QWORD *)(a1 + 80);
        v21 = *(_DWORD *)(v20 + 24 * v22 + 8);
      }
      *(_DWORD *)(v20 + 24 * v22 + 8) = v21 + v7;
    }
  }
}

unint64_t Lattice<WordLatticeLC>::destroyAllLinks(unint64_t result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v2 = result;
  v3 = *(_QWORD *)(result + 80);
  v5 = *(_DWORD *)(v3 + 24 * a2 + 20);
  if (v5 != -2)
  {
    do
    {
      v6 = *(_DWORD *)(*(_QWORD *)(v2 + 128) + 136 * v5 + 128);
      result = Lattice<WordLatticeLC>::disconnectAndDestroyLink(v2, v5);
      v5 = v6;
    }
    while (v6 != -2);
    v3 = *(_QWORD *)(v2 + 80);
  }
  v7 = *(_DWORD *)(v3 + 24 * a2 + 16);
  if (v7 != -2)
  {
    do
    {
      v8 = *(_DWORD *)(*(_QWORD *)(v2 + 128) + 136 * v7 + 124);
      result = Lattice<WordLatticeLC>::disconnectAndDestroyLink(v2, v7);
      v7 = v8;
    }
    while (v8 != -2);
  }
  return result;
}

unint64_t Lattice<WordLatticeLC>::destroyNodesUsingGcMarks(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t i;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t j;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  unint64_t k;
  unsigned int v26;
  uint64_t v27;
  unint64_t result;
  unint64_t v29;
  unsigned int v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  void *v34;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = *(unsigned int **)a2;
    v6 = *(_QWORD *)(a1 + 80);
    do
    {
      v7 = *v5++;
      *(_DWORD *)(v6 + 24 * v7) = -1;
      --v4;
    }
    while (v4);
  }
  v32 = 0;
  v33 = 0;
  v8 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v8)
  {
    v34 = 0;
    HIDWORD(v33) = realloc_array(0, &v34, 4 * v8, 0, 0, 1) >> 2;
    v9 = v34;
    v32 = v34;
    v10 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v10)
    {
      for (i = 0; i < v10; ++i)
      {
        v12 = *(_QWORD *)(a1 + 16);
        v13 = (_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * *(unsigned int *)(v12 + 4 * i));
        if (*v13 != -1)
        {
          v14 = v33;
          *v13 = v33;
          v15 = *(_DWORD *)(v12 + 4 * i);
          if (v14 == HIDWORD(v33))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v32, 1, 1);
            v14 = v33;
            v9 = v32;
          }
          v9[v14] = v15;
          LODWORD(v33) = v33 + 1;
          v10 = *(unsigned int *)(a1 + 24);
        }
      }
    }
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 16, (uint64_t *)&v32, 0, v33);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  v32 = 0;
  v33 = 0;
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16)
  {
    v34 = 0;
    HIDWORD(v33) = realloc_array(0, &v34, 4 * v16, 0, 0, 1) >> 2;
    v17 = v34;
    v32 = v34;
    v18 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v18)
    {
      for (j = 0; j < v18; ++j)
      {
        v20 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * j);
        if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v20) != -1)
        {
          v21 = v33;
          if (v33 == (unint64_t)HIDWORD(v33))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v32, 1, 1);
            v21 = v33;
            v17 = v32;
          }
          v17[v21] = v20;
          LODWORD(v33) = v33 + 1;
          v18 = *(unsigned int *)(a1 + 40);
        }
      }
    }
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 32, (uint64_t *)&v32, 0, v33);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  v32 = 0;
  v33 = 0;
  v22 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v22)
  {
    v34 = 0;
    HIDWORD(v33) = realloc_array(0, &v34, 4 * v22, 0, 0, 1) >> 2;
    v23 = v34;
    v32 = v34;
    v24 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v24)
    {
      for (k = 0; k < v24; ++k)
      {
        v26 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * k);
        if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v26) != -1)
        {
          v27 = v33;
          if (v33 == (unint64_t)HIDWORD(v33))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v32, 1, 1);
            v27 = v33;
            v23 = v32;
          }
          v23[v27] = v26;
          LODWORD(v33) = v33 + 1;
          v24 = *(unsigned int *)(a1 + 56);
        }
      }
    }
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 48, (uint64_t *)&v32, 0, v33);
  result = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  if (*(_DWORD *)(a2 + 8))
  {
    v29 = 0;
    v30 = *(_DWORD *)(a1 + 72);
    do
    {
      v31 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v29);
      if (v30 == *(_DWORD *)(a1 + 76))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a1 + 64, 1, 1);
        v30 = *(_DWORD *)(a1 + 72);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v30) = v31;
      v30 = *(_DWORD *)(a1 + 72) + 1;
      *(_DWORD *)(a1 + 72) = v30;
      ++v29;
    }
    while (v29 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void sub_2098081A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::cmpOutLink(uint64_t a1, unsigned int a2, const WordLatticeLC *a3)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  if (a2 == (_DWORD)a3)
    return 0;
  v4 = a3;
  result = WordLatticeLC::cmp((WordLatticeLC *)(*(_QWORD *)(a1 + 128) + 136 * a2), (const WordLatticeLC *)(*(_QWORD *)(a1 + 128) + 136 * a3), a3);
  if (!(_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 128);
    v8 = *(_DWORD *)(v7 + 136 * a2 + 120);
    v9 = *(_DWORD *)(v7 + 136 * v4 + 120);
    if (v8 == v9)
    {
      return 0;
    }
    else if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v8 + 4) < *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v9 + 4))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t Lattice<WordLatticeLC>::createLink(uint64_t a1, int a2, int a3, WordLatticeLC *a4)
{
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  __int16 v24;
  __int128 v25;

  WordLatticeLC::WordLatticeLC((WordLatticeLC *)v15, a4);
  v7 = *(_DWORD *)(a1 + 120);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = *(unsigned int *)(*(_QWORD *)(a1 + 112) + 4 * v8);
    *(_DWORD *)(a1 + 120) = v8;
  }
  else
  {
    v9 = *(unsigned int *)(a1 + 136);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 140))
    {
      DgnArray<LatticeLink<WordLatticeLC>>::reallocElts(a1 + 128, 1, 1);
      v10 = *(_DWORD *)(a1 + 136);
    }
    v11 = *(_QWORD *)(a1 + 128) + 136 * v10;
    *(_DWORD *)(v11 + 16) = -16;
    *(_OWORD *)(v11 + 20) = 0u;
    *(_OWORD *)(v11 + 36) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_QWORD *)(v11 + 64) = 1879048192;
    *(_QWORD *)(v11 + 80) = -1;
    *(_DWORD *)(v11 + 72) = 0;
    *(_QWORD *)v11 = &off_24C2149F8;
    *(_QWORD *)(v11 + 8) = 0xBFF0000000000000;
    *(_DWORD *)(v11 + 92) = 0x3FFF;
    *(_OWORD *)(v11 + 96) = xmmword_209A593D0;
    ++*(_DWORD *)(a1 + 136);
  }
  v12 = *(_QWORD *)(a1 + 128) + 136 * v9;
  *(_QWORD *)(v12 + 8) = v15[1];
  *(_OWORD *)(v12 + 16) = v16;
  *(_OWORD *)(v12 + 32) = v17;
  *(_OWORD *)(v12 + 48) = v18;
  *(_QWORD *)(v12 + 64) = v19;
  *(_DWORD *)(v12 + 72) = v20;
  *(_QWORD *)(v12 + 80) = v21;
  *(_DWORD *)(v12 + 88) = v22;
  *(_WORD *)(v12 + 92) = v23;
  *(_WORD *)(v12 + 94) = v24;
  *(_OWORD *)(v12 + 96) = v25;
  v13 = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v12 + 112) = v13;
  *(_DWORD *)(v12 + 116) = a2;
  *(_DWORD *)(v12 + 120) = a3;
  *(_QWORD *)(v12 + 124) = 0x100000001;
  if (v13 == *(_DWORD *)(a1 + 108))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 96, 1, 1);
    v13 = *(_DWORD *)(a1 + 104);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v13) = v9;
  ++*(_DWORD *)(a1 + 104);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v15);
  return v9;
}

void sub_209808418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&a9);
  _Unwind_Resume(a1);
}

void Lattice<WordLatticeLC>::connectOutLink(uint64_t *a1, const WordLatticeLC *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int *v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;

  v4 = a1[16];
  v5 = a2;
  v6 = *(_DWORD *)(v4 + 136 * a2 + 116);
  v7 = a1[10];
  v8 = v7 + 24 * v6;
  v11 = *(_DWORD *)(v8 + 20);
  v10 = (int *)(v8 + 20);
  v9 = v11;
  if (v11 == -2)
  {
    v12 = -2;
  }
  else
  {
    do
    {
      v13 = Lattice<WordLatticeLC>::cmpOutLink((uint64_t)a1, v9, a2);
      if (v13)
      {
        if (v13 >= 1)
        {
          v12 = *v10;
          v4 = a1[16];
          goto LABEL_9;
        }
      }
      else
      {
        DuplicateLinkError(*(_DWORD *)(a1[16] + 136 * v5 + 112), *(_DWORD *)(a1[16] + 136 * *v10 + 112), v14, v15, v16, v17, v18, v19);
      }
      v4 = a1[16];
      v20 = v4 + 136 * *v10;
      v21 = *(_DWORD *)(v20 + 128);
      v10 = (int *)(v20 + 128);
      v9 = v21;
    }
    while (v21 != -2);
    v12 = -2;
LABEL_9:
    v7 = a1[10];
  }
  *v10 = (int)a2;
  *(_DWORD *)(v4 + 136 * v5 + 128) = v12;
  v22 = v7 + 24 * v6;
  v23 = *(_DWORD *)(v22 + 12);
  *(_DWORD *)(v22 + 12) = v23 + 1;
  if (!v23)
    DgnPrimArray<unsigned int>::removeKeepOrder(a1 + 6, v6);
}

uint64_t DgnPrimArray<unsigned int>::removeKeepOrder(uint64_t *a1, int a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;

  v2 = *((unsigned int *)a1 + 2);
  if (!(_DWORD)v2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = *a1;
  while (*(_DWORD *)(v5 + 4 * result) != a2)
  {
    if (v2 == ++result)
      return 0xFFFFFFFFLL;
  }
  LODWORD(v2) = v2 - 1;
  if (v2 > result)
  {
    v6 = result;
    do
    {
      *(_DWORD *)(v5 + 4 * v6) = *(_DWORD *)(v5 + 4 * v6 + 4);
      v2 = (*((_DWORD *)a1 + 2) - 1);
      ++v6;
    }
    while (v6 < v2);
  }
  *((_DWORD *)a1 + 2) = v2;
  return result;
}

void WordLatticeLC::WordLatticeLC(WordLatticeLC *this, const WordLatticeLC *a2)
{
  uint64_t v3;

  BaseWordLatticeLC::BaseWordLatticeLC((uint64_t)this, (uint64_t)a2);
  *(_QWORD *)v3 = &off_24C2149F8;
  *(_DWORD *)(v3 + 88) = *((_DWORD *)a2 + 22);
  *(_DWORD *)(v3 + 92) = *((_DWORD *)a2 + 23);
  *(_OWORD *)(v3 + 96) = *((_OWORD *)a2 + 6);
}

double BaseWordLatticeLC::BaseWordLatticeLC(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &unk_24C215938;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  result = *(double *)(a2 + 64);
  *(double *)(a1 + 64) = result;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return result;
}

unint64_t DgnArray<LatticeLink<WordLatticeLC>>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 136 * v6, 136 * v5, 136 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x88;
  *(_QWORD *)a1 = v8;
  return result;
}

uint64_t Lattice<WordLatticeLC>::cmpNodesByInLinksIgnoreNodes(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == a3)
    return 0;
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_DWORD *)(v5 + 24 * a2 + 8);
  v7 = *(_DWORD *)(v5 + 24 * a3 + 8);
  if (v6 == v7)
  {
    v8 = *(_DWORD *)(v5 + 24 * a2 + 16);
    if (v8 == -2)
    {
      return 0;
    }
    else
    {
      v9 = (unsigned int *)(v5 + 24 * a3 + 16);
      while (1)
      {
        v10 = *v9;
        result = Lattice<WordLatticeLC>::cmpInLink(a1, v8, (const WordLatticeLC *)*v9);
        if ((_DWORD)result)
          break;
        v11 = *(_QWORD *)(a1 + 128);
        v12 = v11 + 136 * v8;
        v9 = (unsigned int *)(v11 + 136 * v10 + 124);
        v8 = *(_DWORD *)(v12 + 124);
        if (v8 == -2)
          return 0;
      }
    }
  }
  else if (v6 < v7)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
  return result;
}

void Lattice<WordLatticeLC>::copyOutLinks(uint64_t a1, unsigned int a2, const WordLatticeLC *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  const WordLatticeLC *Link;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;

  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(unsigned int *)(v3 + 24 * a2 + 20);
  if ((_DWORD)v4 != -2)
  {
    v5 = (int)a3;
    v7 = 0;
    v22 = a3;
    v8 = *(unsigned int *)(v3 + 24 * a3 + 20);
    v9 = *(_QWORD *)(a1 + 128);
    v10 = 1;
    v11 = -2;
    do
    {
      if ((_DWORD)v8 != -2)
      {
        do
        {
          v12 = v8;
          v13 = v8;
          v14 = WordLatticeLC::cmp((WordLatticeLC *)(v9 + 136 * v8), (const WordLatticeLC *)(v9 + 136 * v4), a3);
          if (v14)
          {
            v9 = *(_QWORD *)(a1 + 128);
            if ((v14 & 0x80000000) == 0)
              goto LABEL_12;
          }
          else
          {
            v9 = *(_QWORD *)(a1 + 128);
            v15 = *(_DWORD *)(v9 + 136 * v13 + 120);
            v16 = *(_DWORD *)(v9 + 136 * v4 + 120);
            if (v15 == v16)
              goto LABEL_16;
            if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v15 + 4) >= *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v16 + 4))
              goto LABEL_12;
          }
          v10 = 0;
          v8 = *(unsigned int *)(v9 + 136 * v13 + 128);
          v11 = v12;
        }
        while ((_DWORD)v8 != -2);
        v11 = v12;
      }
      v12 = 4294967294;
LABEL_12:
      Link = (const WordLatticeLC *)Lattice<WordLatticeLC>::createLink(a1, v5, *(_DWORD *)(v9 + 136 * v4 + 120), (WordLatticeLC *)(v9 + 136 * v4));
      v18 = Link;
      if ((v10 & 1) != 0)
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v22 + 20) = (_DWORD)Link;
        v19 = *(_QWORD *)(a1 + 128);
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 128);
        *(_DWORD *)(v19 + 136 * v11 + 128) = (_DWORD)Link;
      }
      *(_DWORD *)(v19 + 136 * Link + 128) = v12;
      Lattice<WordLatticeLC>::connectInLink((uint64_t *)a1, Link);
      v10 = 0;
      ++v7;
      v9 = *(_QWORD *)(a1 + 128);
      v11 = v18;
LABEL_16:
      v4 = *(unsigned int *)(v9 + 136 * v4 + 128);
      v8 = v12;
    }
    while ((_DWORD)v4 != -2);
    if (v7)
    {
      *(_BYTE *)(a1 + 8) = 0;
      v20 = *(_QWORD *)(a1 + 80);
      v21 = *(_DWORD *)(v20 + 24 * v22 + 12);
      if (!v21)
      {
        DgnPrimArray<unsigned int>::removeKeepOrder((uint64_t *)(a1 + 48), v5);
        v20 = *(_QWORD *)(a1 + 80);
        v21 = *(_DWORD *)(v20 + 24 * v22 + 12);
      }
      *(_DWORD *)(v20 + 24 * v22 + 12) = v21 + v7;
    }
  }
}

uint64_t Lattice<WordLatticeLC>::cmpInLink(uint64_t a1, unsigned int a2, const WordLatticeLC *a3)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  if (a2 == (_DWORD)a3)
    return 0;
  v4 = a3;
  result = WordLatticeLC::cmp((WordLatticeLC *)(*(_QWORD *)(a1 + 128) + 136 * a2), (const WordLatticeLC *)(*(_QWORD *)(a1 + 128) + 136 * a3), a3);
  if (!(_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 128);
    v8 = *(_DWORD *)(v7 + 136 * a2 + 116);
    v9 = *(_DWORD *)(v7 + 136 * v4 + 116);
    if (v8 == v9)
    {
      return 0;
    }
    else if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v8 + 4) < *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v9 + 4))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void Lattice<WordLatticeLC>::connectInLink(uint64_t *a1, const WordLatticeLC *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int *v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;

  v4 = a1[16];
  v5 = a2;
  v6 = *(_DWORD *)(v4 + 136 * a2 + 120);
  v7 = a1[10];
  v8 = v7 + 24 * v6;
  v11 = *(_DWORD *)(v8 + 16);
  v10 = (int *)(v8 + 16);
  v9 = v11;
  if (v11 == -2)
  {
    v12 = -2;
  }
  else
  {
    do
    {
      v13 = Lattice<WordLatticeLC>::cmpInLink((uint64_t)a1, v9, a2);
      if (v13)
      {
        if (v13 >= 1)
        {
          v12 = *v10;
          v4 = a1[16];
          goto LABEL_9;
        }
      }
      else
      {
        DuplicateLinkError(*(_DWORD *)(a1[16] + 136 * v5 + 112), *(_DWORD *)(a1[16] + 136 * *v10 + 112), v14, v15, v16, v17, v18, v19);
      }
      v4 = a1[16];
      v20 = v4 + 136 * *v10;
      v21 = *(_DWORD *)(v20 + 124);
      v10 = (int *)(v20 + 124);
      v9 = v21;
    }
    while (v21 != -2);
    v12 = -2;
LABEL_9:
    v7 = a1[10];
  }
  *v10 = (int)a2;
  *(_DWORD *)(v4 + 136 * v5 + 124) = v12;
  v22 = v7 + 24 * v6;
  v23 = *(_DWORD *)(v22 + 8);
  *(_DWORD *)(v22 + 8) = v23 + 1;
  if (!v23)
    DgnPrimArray<unsigned int>::removeKeepOrder(a1 + 4, v6);
}

uint64_t Lattice<WordLatticeLC>::topSortInternal(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int8 v49;
  unsigned int *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  size_t v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  void *v73[2];
  _DWORD *v74;
  uint64_t v75;

  v4 = *(unsigned int *)(a1 + 24);
  v5 = (_QWORD *)(a1 + 16);
  v74 = 0;
  v75 = 0;
  if ((_DWORD)v4)
  {
    v73[0] = 0;
    v6 = realloc_array(0, v73, 4 * v4, 0, 0, 1);
    v7 = v73[0];
    v74 = v73[0];
    v8 = *(_DWORD *)(a1 + 24);
    LODWORD(v75) = v4;
    HIDWORD(v75) = v6 >> 2;
    if (!v8)
    {
      v21 = 0;
      goto LABEL_36;
    }
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 80);
    do
    {
      v13 = *(_DWORD *)(v11 + 4 * v9);
      v14 = *(_DWORD *)(v12 + 24 * v13 + 8);
      if (!v14)
      {
        if (v9 == v10)
        {
          v14 = 0;
        }
        else
        {
          if ((a2 & 1) != 0)
            goto LABEL_66;
          v15 = *(_DWORD *)(v11 + 4 * v10);
          *(_DWORD *)(v11 + 4 * v9) = v15;
          *(_DWORD *)(v12 + 24 * v15) = v9;
          *(_DWORD *)(v11 + 4 * v10) = v13;
          *(_DWORD *)(v12 + 24 * v13) = v10;
          v14 = v7[v10];
          v7[v10] = 0;
        }
        v10 = (v10 + 1);
      }
      v7[v9++] = v14;
    }
    while (v9 < *(unsigned int *)(a1 + 24));
    if (v10 >= 2)
    {
      if ((a2 & 1) != 0)
      {
        v16 = (unsigned int *)(*v5 + 4);
        v17 = *(unsigned int *)*v5;
        v18 = v10 - 1;
        while (1)
        {
          v20 = *v16++;
          v19 = v20;
          if (v17 == v20
            || *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v17 + 4) >= *(_DWORD *)(*(_QWORD *)(a1 + 80)
                                                                             + 24 * v19
                                                                             + 4))
          {
            goto LABEL_66;
          }
          v17 = v19;
          if (!--v18)
            goto LABEL_19;
        }
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 24))(a1, v5, v10);
      if ((int)v10 >= 1)
      {
        v67 = *(_QWORD *)(a1 + 16);
        v68 = *(_QWORD *)(a1 + 80);
        v69 = v10;
        v70 = *(_QWORD *)(a1 + 32);
        do
        {
          v71 = v69-- > 1;
          *(_DWORD *)(v68 + 24 * *(unsigned int *)(v67 + 4 * v69)) = v69;
          *(_DWORD *)(v70 + 4 * v69) = *(_DWORD *)(v67 + 4 * v69);
        }
        while (v71);
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
    LODWORD(v75) = 0;
  }
LABEL_19:
  v21 = *(_DWORD *)(a1 + 24);
  if (v21)
  {
    v22 = 0;
    v23 = 0;
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_QWORD *)(a1 + 80);
    do
    {
      v26 = *(unsigned int *)(v25 + 24 * *(unsigned int *)(v24 + 4 * v22) + 20);
      if ((_DWORD)v26 != -2)
      {
        v27 = *(_QWORD *)(a1 + 128);
        v28 = v74;
        do
        {
          v29 = *(unsigned int *)(v27 + 136 * v26 + 112);
          if (v23 != (_DWORD)v29)
          {
            if ((a2 & 1) != 0)
              goto LABEL_66;
            v30 = *(_QWORD *)(a1 + 96);
            v31 = *(_DWORD *)(v30 + 4 * v29);
            v32 = *(_DWORD *)(v30 + 4 * v23);
            *(_DWORD *)(v30 + 4 * v29) = v32;
            *(_DWORD *)(v27 + 136 * v32 + 112) = v29;
            *(_DWORD *)(v30 + 4 * v23) = v31;
            *(_DWORD *)(v27 + 136 * v31 + 112) = v23;
          }
          v33 = *(unsigned int *)(v25 + 24 * *(unsigned int *)(v27 + 136 * v26 + 120));
          v34 = v28[v33] - 1;
          v28[v33] = v34;
          if (!v34)
          {
            if ((_DWORD)v33 != (_DWORD)v10)
            {
              if ((a2 & 1) != 0)
                goto LABEL_66;
              v35 = *(_DWORD *)(v24 + 4 * v33);
              v36 = *(_DWORD *)(v24 + 4 * v10);
              *(_DWORD *)(v24 + 4 * v33) = v36;
              *(_DWORD *)(v25 + 24 * v36) = v33;
              *(_DWORD *)(v24 + 4 * v10) = v35;
              *(_DWORD *)(v25 + 24 * v35) = v10;
              v28[v33] = v28[v10];
              v28[v10] = 0;
            }
            LODWORD(v10) = v10 + 1;
          }
          v26 = *(unsigned int *)(v27 + 136 * v26 + 128);
          ++v23;
        }
        while ((_DWORD)v26 != -2);
        v21 = *(_DWORD *)(a1 + 24);
      }
      ++v22;
    }
    while (v22 < v21);
  }
LABEL_36:
  v37 = *(_DWORD *)(a1 + 56);
  if (v37 >= 2)
  {
    if ((a2 & 1) != 0)
    {
      v38 = v37 - 1;
      v39 = v21 - 2;
      while (1)
      {
        v40 = __OFSUB__(v38--, 1);
        if (v38 < 0 != v40)
          break;
        v41 = *(_DWORD *)(*v5 + 4 * v39);
        v42 = *(_DWORD *)(*v5 + 4 * (v39 + 1));
        if (v41 != v42)
        {
          --v39;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v41 + 4) < *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v42 + 4))
            continue;
        }
        goto LABEL_66;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a1 + 48);
      if ((int)(v37 - 1) < 0)
        goto LABEL_60;
      v43 = *(_QWORD *)(a1 + 16);
      v44 = *(_QWORD *)(a1 + 80);
      v45 = (unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (v37 - 1));
      v46 = *(_DWORD *)(a1 + 24) - 1;
      do
      {
        v47 = *v45--;
        *(_DWORD *)(v43 + 4 * v46) = v47;
        *(_DWORD *)(v44 + 24 * v47) = v46--;
        --v37;
      }
      while (v37);
    }
  }
  if (a2)
  {
    v48 = *(_DWORD *)(a1 + 24);
    if (v48)
    {
      v49 = 0;
      v50 = *(unsigned int **)(a1 + 16);
      v51 = *(_QWORD *)(a1 + 80);
      v52 = 1;
      v53 = *(unsigned int *)(a1 + 24);
      do
      {
        v55 = *v50++;
        v54 = v55;
        v56 = *(_DWORD *)(v51 + 24 * v55 + 8);
        if ((v52 & 1) == 0 && !v56)
          goto LABEL_66;
        v57 = *(_DWORD *)(v51 + 24 * v54 + 12);
        if ((v49 & (v57 != 0)) != 0)
          goto LABEL_66;
        v49 |= v57 == 0;
        v52 &= v56 == 0;
      }
      while (--v53);
    }
    DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v73, v48);
    v58 = *(unsigned int *)(a1 + 24);
    if ((int)v58 >= 1)
      bzero(v73[0], v58);
    v59 = *(unsigned int *)(a1 + 104);
    if ((_DWORD)v59)
    {
      v60 = *(unsigned int **)(a1 + 96);
      v61 = *(_QWORD *)(a1 + 128);
      v62 = *(_QWORD *)(a1 + 80);
      v63 = v73[0];
      while (1)
      {
        v64 = *v60++;
        v65 = v61 + 136 * v64;
        v63[*(unsigned int *)(v62 + 24 * *(unsigned int *)(v65 + 116))] = 1;
        if (v63[*(unsigned int *)(v62 + 24 * *(unsigned int *)(v65 + 120))])
          break;
        if (!--v59)
          goto LABEL_59;
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v73);
LABEL_66:
      v66 = 0;
      goto LABEL_67;
    }
LABEL_59:
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v73);
  }
LABEL_60:
  v66 = 1;
LABEL_67:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v74);
  return v66;
}

void sub_209808F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::HashKEV(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C219080;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 28;
  else
    v7 = 32;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_209809040(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::~HashKEV(uint64_t a1)
{
  HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::~HashKEV(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::~HashKEV(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C219080;
  if (*(_DWORD *)(a1 + 8))
    HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::Hash(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;

  HashBase::HashBase((HashBase *)a1, a2);
  *(_QWORD *)v5 = &unk_24C218A40;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v7 = 17;
  else
    v7 = 21;
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20980918C(_Unwind_Exception *a1)
{
  DgnPool *v1;
  uint64_t v2;

  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::~Hash(uint64_t a1)
{
  Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::~Hash(a1);
  JUMPOUT(0x20BD149A8);
}

uint64_t Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::~Hash(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C218A40;
  if (*(_DWORD *)(a1 + 8))
    Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll(a1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));
  return MrecInitModule_sdpres_sdapi();
}

uint64_t **Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(uint64_t a1, _DWORD *a2)
{
  int v2;
  unint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t **result;
  uint64_t *v8;
  uint64_t **v9;

  v2 = a2[1];
  HIDWORD(v3) = *a2;
  LODWORD(v3) = *a2;
  v4 = (v3 >> 19) + v2;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
    v6 = (-1640531527 * v4) >> -(char)v5;
  else
    v6 = 0;
  result = (uint64_t **)(*(_QWORD *)(a1 + 80) + 8 * v6);
  v8 = *result;
  if (*result)
  {
    do
    {
      v9 = (uint64_t **)v8;
      if (*((_DWORD *)v8 + 2) == v4 && *((_DWORD *)v8 + 3) == *a2 && *((_DWORD *)v8 + 4) == v2)
        break;
      v8 = (uint64_t *)*v8;
      result = v9;
    }
    while (*v9);
  }
  return result;
}

uint64_t *Lattice<WordLatticeLC>::connectInLinkUnordered(uint64_t *result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = result[16] + 136 * a2;
  v4 = *(_DWORD *)(v3 + 120);
  v5 = result[10] + 24 * v4;
  v6 = *(_DWORD *)(v5 + 16);
  *(_DWORD *)(v5 + 16) = a2;
  *(_DWORD *)(v3 + 124) = v6;
  v7 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)(v5 + 8) = v7 + 1;
  if (!v7)
    return (uint64_t *)DgnPrimArray<unsigned int>::removeKeepOrder(result + 4, v4);
  return result;
}

uint64_t *Lattice<WordLatticeLC>::connectOutLinkUnordered(uint64_t *result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = result[16] + 136 * a2;
  v4 = *(_DWORD *)(v3 + 116);
  v5 = result[10] + 24 * v4;
  v6 = *(_DWORD *)(v5 + 20);
  *(_DWORD *)(v5 + 20) = a2;
  *(_DWORD *)(v3 + 128) = v6;
  v7 = *(_DWORD *)(v5 + 12);
  *(_DWORD *)(v5 + 12) = v7 + 1;
  if (!v7)
    return (uint64_t *)DgnPrimArray<unsigned int>::removeKeepOrder(result + 6, v4);
  return result;
}

void TTokenizerParamManager::TTokenizerParamManager(TTokenizerParamManager *this, TLocaleInfo *a2)
{
  _QWORD *v3;
  uint64_t v4;
  const __int32 *v5;
  uint64_t v6;
  const __int32 *v7;
  __int128 v8;
  TParam *v9;
  std::vector<std::wstring> v10;
  std::vector<std::wstring> v11;
  void **v12[2];

  TParamManager::TParamManager(this, 0, a2);
  *v3 = &off_24C217758;
  v9 = (TParam *)(v3 + 18);
  TBoolParam::TBoolParam((uint64_t)(v3 + 18), (uint64_t)"S", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 392, (uint64_t)"P", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 640, (uint64_t)"T", (uint64_t)"T", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 888, (uint64_t)"A", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 1136, (uint64_t)"M", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 1384, (uint64_t)"T", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 1632, (uint64_t)"T", (uint64_t)"A", 0, 1, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 1880, (uint64_t)"S", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 2128, (uint64_t)"M", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TStringParam::TStringParam((char *)this + 2376, "C", "A", 0, "'", "1", &dword_209A60DB4);
  TStringParam::TStringParam((char *)this + 3752, "C", "A", 0, &dword_209A60DB4, "1", &dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 5128, (uint64_t)"D", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 5376, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 5624, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 5872, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 6120, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TStringParam::TStringParam((char *)this + 6368, "D", "B", 0, &dword_209A60DB4, "1", "1");
  TBoolParam::TBoolParam((uint64_t)this + 7744, (uint64_t)"C", (uint64_t)"R", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TStringParam::TStringParam((char *)this + 7992, "C", "S", 256, &dword_209A60DB4, "9", &dword_209A60DB4);
  TStringParam::TStringParam((char *)this + 9368, "C", "W", 0, "x", "1", "1");
  TStringParam::TStringParam((char *)this + 10744, "V", "T", 0, &dword_209A60DB4, "9", &dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 12120, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 12368, (uint64_t)"R", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 12616, (uint64_t)"C", (uint64_t)"N", 0, 1, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 12864, (uint64_t)"C", (uint64_t)"T", 0, 0, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 13112, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 13360, (uint64_t)"H", (uint64_t)"S", 0, 0, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 13608), (uint64_t)"N", (uint64_t)"I", 0, 0, 1000, 30, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 13960), (uint64_t)"M", (uint64_t)"I", 0, 0, 1000, 5, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 14312), (uint64_t)"N", (uint64_t)"W", 0, 0, 4, 0, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 14664), (uint64_t)"P", (uint64_t)"T", 0, 0, 300, 0, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 15016, (uint64_t)"P", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 15264, (uint64_t)"A", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 15512, (uint64_t)"M", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 15760), (uint64_t)"P", (uint64_t)"T", 0, -1, 100, 10, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 16112), (uint64_t)"C", (uint64_t)"P", 0, 1, 256, 4, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 16464), (uint64_t)"A", (uint64_t)"P", 0, 1, 256, 4, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 16816), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 20, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 17168), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 30, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 17520), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 40, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 17872, (uint64_t)"O", (uint64_t)"O", 0, 0, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 18120), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, -1, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 18472), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 50, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 18824), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 60, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 19176, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 19424, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 19672, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 19920, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 20168, (uint64_t)"U", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 20416, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 20664, (uint64_t)"L", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 20912, (uint64_t)"L", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 21160), (uint64_t)"M", (uint64_t)"M", 0, 1, 100, 10, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 21512, (uint64_t)"L", (uint64_t)"L", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 21760, (uint64_t)"L", (uint64_t)"L", 0, 0, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 22008, (uint64_t)"D", (uint64_t)"D", 32, 1, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TBoolParam::TBoolParam((uint64_t)this + 22256, (uint64_t)"D", (uint64_t)"D", 288, 1, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TStringParam::TStringParam((char *)this + 22504, "D", "D", 32, &dword_209A60DB4, "9", &dword_209A60DB4);
  TStringParam::TStringParam((char *)this + 23880, "D", "D", 288, &dword_209A60DB4, "1", &dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 25256), (uint64_t)"D", (uint64_t)"D", 32, -1, 10, 5, (uint64_t)"9", (uint64_t)&dword_209A60DB4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 25608), (uint64_t)"D", (uint64_t)"D", 288, -1, 10, 5, (uint64_t)"1", (uint64_t)&dword_209A60DB4);
  TStringParam::TStringParam((char *)this + 25960, "D");
  TStringParam::TStringParam((char *)this + 27336, "D");
  TFloatParam::TFloatParam((uint64_t)this + 28712, (uint64_t)"D", (uint64_t)"D", 32, (uint64_t)"9", (uint64_t)&dword_209A60DB4, 0.0);
  TFloatParam::TFloatParam((uint64_t)this + 29248, (uint64_t)"D", (uint64_t)"D", 288, (uint64_t)"1", (uint64_t)&dword_209A60DB4, 0.0);
  TParamManager::add(this, v9);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 392));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 640));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 888));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1136));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1384));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1632));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1880));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 2128));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 2376));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 3752));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5128));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5376));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5624));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5872));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 6120));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 6368));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 7744));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 7992));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 9368));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 10744));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12120));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12368));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12616));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12864));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13112));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13360));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13608));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13960));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 14312));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 14664));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15016));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15264));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15512));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15760));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 16112));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 16464));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 16816));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 17168));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 17520));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 17872));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 18120));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 18472));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 18824));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19176));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19424));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19672));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19920));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20168));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20416));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20664));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20912));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 21160));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 21512));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 21760));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 22008));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 22256));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 22504));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 23880));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 25256));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 25608));
  MEMORY[0x20BD147A4]((char *)this + 26000, "D");
  MEMORY[0x20BD147A4]((char *)this + 26024, "9");
  MEMORY[0x20BD147A4]((char *)this + 26048, &dword_209A60DB4);
  *((_QWORD *)this + 3259) |= 0x20uLL;
  std::vector<std::wstring>::vector(&v11, 4uLL);
  std::vector<std::wstring>::vector(&v10, 4uLL);
  v4 = 0;
  v5 = (const __int32 *)"a";
  do
  {
    MEMORY[0x20BD147A4](&v11.__begin_[v4], v5);
    v5 += wcslen(v5) + 1;
    ++v4;
  }
  while (v4 != 4);
  TStringParam::setAllowables((uint64_t)this + 25960, (uint64_t)&v11, 0, 0);
  TStringParam::setOriginal((_QWORD *)this + 3245, 0, &dword_209A60DB4);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 25960));
  v12[0] = (void **)&v10;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](v12);
  v10.__begin_ = (std::vector<std::wstring>::pointer)&v11;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  MEMORY[0x20BD147A4]((char *)this + 27376, "D");
  MEMORY[0x20BD147A4]((char *)this + 27400, "1");
  MEMORY[0x20BD147A4]((char *)this + 27424, &dword_209A60DB4);
  *((_QWORD *)this + 3431) |= 0x120uLL;
  std::vector<std::wstring>::vector(&v11, 4uLL);
  std::vector<std::wstring>::vector(&v10, 4uLL);
  v6 = 0;
  v7 = (const __int32 *)"a";
  do
  {
    MEMORY[0x20BD147A4](&v11.__begin_[v6], v7);
    v7 += wcslen(v7) + 1;
    ++v6;
  }
  while (v6 != 4);
  TStringParam::setAllowables((uint64_t)this + 27336, (uint64_t)&v11, 0, 0);
  TStringParam::setOriginal((_QWORD *)this + 3417, 0, &dword_209A60DB4);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 27336));
  v12[0] = (void **)&v10;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](v12);
  v10.__begin_ = (std::vector<std::wstring>::pointer)&v11;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 28712));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 29248));
  *(_QWORD *)&v8 = -1;
  *((_QWORD *)&v8 + 1) = -1;
  *(_OWORD *)((char *)this + 29784) = v8;
  *(_OWORD *)((char *)this + 29800) = v8;
}

void sub_20980A670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,void **a33,void **a34,void **a35,void **a36,void **a37,void **a38,void **a39,void **a40,void **a41,void **a42,void **a43,void **a44,void **a45,void **a46,void **a47,void **a48,void **a49,void **a50,void **a51,void **a52,void **a53,void **a54)
{
  TParamManager *v54;
  void **v55;
  void **v56;
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  void **v61;
  uint64_t v62;

  *(_QWORD *)(v62 - 144) = v62 - 120;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 144));
  TParam::~TParam(v60);
  TParam::~TParam(v55);
  TStringParam::~TStringParam(v59);
  TStringParam::~TStringParam(v58);
  TParam::~TParam(v57);
  TParam::~TParam(v56);
  TStringParam::~TStringParam(v61);
  TStringParam::~TStringParam(a11);
  TBoolParam::~TBoolParam(a12);
  TBoolParam::~TBoolParam(a13);
  TBoolParam::~TBoolParam(a14);
  TBoolParam::~TBoolParam(a15);
  TParam::~TParam(a16);
  TBoolParam::~TBoolParam(a17);
  TBoolParam::~TBoolParam(a18);
  TBoolParam::~TBoolParam(a19);
  TBoolParam::~TBoolParam(a20);
  TBoolParam::~TBoolParam(a21);
  TBoolParam::~TBoolParam(a22);
  TBoolParam::~TBoolParam(a23);
  TBoolParam::~TBoolParam(a24);
  TParam::~TParam(a25);
  TParam::~TParam(a26);
  TParam::~TParam(a27);
  TBoolParam::~TBoolParam(a28);
  TParam::~TParam(a29);
  TParam::~TParam(a30);
  TParam::~TParam(a31);
  TParam::~TParam(a32);
  TParam::~TParam(a33);
  TParam::~TParam(a34);
  TBoolParam::~TBoolParam(a35);
  TBoolParam::~TBoolParam(a36);
  TBoolParam::~TBoolParam(a37);
  TParam::~TParam(a38);
  TParam::~TParam(a39);
  TParam::~TParam(a40);
  TParam::~TParam(a41);
  TBoolParam::~TBoolParam(a42);
  TBoolParam::~TBoolParam(a43);
  TBoolParam::~TBoolParam(a44);
  TBoolParam::~TBoolParam(a45);
  TBoolParam::~TBoolParam(a46);
  TBoolParam::~TBoolParam(a47);
  TStringParam::~TStringParam(a48);
  TStringParam::~TStringParam(a49);
  TStringParam::~TStringParam(a50);
  TBoolParam::~TBoolParam(a51);
  TStringParam::~TStringParam(a52);
  TBoolParam::~TBoolParam(a53);
  TBoolParam::~TBoolParam(a54);
  TBoolParam::~TBoolParam(*(void ***)(v62 - 256));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 248));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 240));
  TStringParam::~TStringParam(*(void ***)(v62 - 232));
  TStringParam::~TStringParam(*(void ***)(v62 - 224));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 216));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 208));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 200));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 192));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 184));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 176));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 168));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 160));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 152));
  TParamManager::~TParamManager(v54);
  _Unwind_Resume(a1);
}

void TTokenizerParamManager::notifyChange(TTokenizerParamManager *this, const TParam *a2)
{
  char *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *__p[2];
  char v11;

  if ((TTokenizerParamManager *)((char *)this + 3752) == a2)
  {
    v3 = TStringParam::get(a2);
    if ((wcslen((const __int32 *)v3) & 1) != 0)
    {
      v4 = (unsigned int *)TStringParam::get(a2);
      loggableUnicode(v4, __p);
      if (v11 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      tknPrintf("Warning: CharacterMapping contains an odd number of characters: <%s>\n", v5, v6, v7, v8, v9);
      if (v11 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_20980AB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *TTokenizerParamManager::upgradeParam(_QWORD *this, const TParam *a2)
{
  _QWORD *v3;
  uint64_t ActiveConfigHandle;
  uint64_t ValidConfig;
  TParam *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  TParam *v14;
  uint64_t v15;
  TIntParam *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = this;
  if (this + 2397 == (_QWORD *)a2)
  {
    ActiveConfigHandle = TParam::getActiveConfigHandle(a2);
    ValidConfig = TParam::getValidConfig(a2, ActiveConfigHandle);
    v6 = (TParam *)(v3 + 2102);
    if (!*((_BYTE *)v3 + ValidConfig + 19328))
      goto LABEL_21;
    v7 = v3[17];
    v3[2116] &= ~(1 << (v7 + 33));
    return (_QWORD *)TParam::notifyChange((uint64_t)v6, v7);
  }
  if (this + 2428 == (_QWORD *)a2)
  {
    v8 = TParam::getActiveConfigHandle(a2);
    v9 = TParam::getValidConfig(a2, v8);
    v6 = (TParam *)(v3 + 2146);
    if (!*((_BYTE *)v3 + v9 + 19576))
      goto LABEL_21;
    v7 = v3[17];
    v3[2160] &= ~(1 << (v7 + 33));
    return (_QWORD *)TParam::notifyChange((uint64_t)v6, v7);
  }
  if (this + 2459 == (_QWORD *)a2)
  {
    v10 = TParam::getActiveConfigHandle(a2);
    v11 = TParam::getValidConfig(a2, v10);
    v6 = (TParam *)(v3 + 2190);
    if (!*((_BYTE *)v3 + v11 + 19824))
      goto LABEL_21;
    v7 = v3[17];
    v3[2204] &= ~(1 << (v7 + 33));
    return (_QWORD *)TParam::notifyChange((uint64_t)v6, v7);
  }
  if (this + 2521 == (_QWORD *)a2)
  {
    v12 = TParam::getActiveConfigHandle(a2);
    v13 = *((unsigned __int8 *)v3 + TParam::getValidConfig(a2, v12) + 20320);
    v14 = (TParam *)(v3 + 2265);
    v15 = TParam::getActiveConfigHandle(v14);
    v16 = v14;
    if (v13)
    {
      v17 = 45;
      return (_QWORD *)TIntParam::set(v16, v15, v17);
    }
LABEL_22:
    v17 = -1;
    return (_QWORD *)TIntParam::set(v16, v15, v17);
  }
  if (this + 2552 == (_QWORD *)a2)
  {
    v18 = TParam::getActiveConfigHandle(a2);
    v19 = TParam::getValidConfig(a2, v18);
    v6 = (TParam *)(v3 + 2309);
    if (*((_BYTE *)v3 + v19 + 20568))
    {
      v7 = v3[17];
      v3[2323] &= ~(1 << (v7 + 33));
      return (_QWORD *)TParam::notifyChange((uint64_t)v6, v7);
    }
LABEL_21:
    v15 = TParam::getActiveConfigHandle(v6);
    v16 = v6;
    goto LABEL_22;
  }
  if (this + 2490 == (_QWORD *)a2)
  {
    v20 = TParam::getActiveConfigHandle(a2);
    v21 = TParam::getValidConfig(a2, v20);
    v6 = (TParam *)(v3 + 2353);
    if (*((_BYTE *)v3 + v21 + 20072))
    {
      v7 = v3[17];
      v3[2367] &= ~(1 << (v7 + 33));
      return (_QWORD *)TParam::notifyChange((uint64_t)v6, v7);
    }
    goto LABEL_21;
  }
  return this;
}

uint64_t TTokenizerParamManager::initializeParamConfigs(TTokenizerParamManager *this)
{
  uint64_t Config;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;

  Config = TParamManager::getConfig((uint64_t)this, (__int32 *)"A");
  *((_QWORD *)this + 3724) = Config;
  if (Config == -1)
    *((_QWORD *)this + 3724) = TParamManager::newConfig((uint64_t)this, (__int32 *)"A", 1);
  v3 = TParamManager::getConfig((uint64_t)this, (__int32 *)"B");
  *((_QWORD *)this + 3725) = v3;
  if (v3 == -1)
  {
    v4 = TParamManager::newConfig((uint64_t)this, (__int32 *)"B", 1);
    *((_QWORD *)this + 3725) = v4;
    *((_BYTE *)this + v4 + 18024) = 1;
    *((_QWORD *)this + 2248) |= 1 << (v4 + 9);
    TParam::notifyChange((uint64_t)this + 17872, v4);
  }
  v5 = TParamManager::getConfig((uint64_t)this, (__int32 *)"A");
  *((_QWORD *)this + 3726) = v5;
  if (v5 == -1)
  {
    v6 = TParamManager::newConfig((uint64_t)this, (__int32 *)"A", 1);
    *((_QWORD *)this + 3726) = v6;
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 14312), v6, 0);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 17520), *((_QWORD *)this + 3726), -1);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 18120), *((_QWORD *)this + 3726), -1);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 18472), *((_QWORD *)this + 3726), -1);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 18824), *((_QWORD *)this + 3726), -1);
  }
  result = TParamManager::getConfig((uint64_t)this, (__int32 *)"F");
  *((_QWORD *)this + 3723) = result;
  if (result == -1)
  {
    v8 = TParamManager::newConfig((uint64_t)this, (__int32 *)"F", *((_QWORD *)this + 3724));
    *((_QWORD *)this + 3723) = v8;
    *((_BYTE *)this + v8 + 792) = 1;
    *((_QWORD *)this + 94) |= 1 << (v8 + 9);
    return TParam::notifyChange((uint64_t)this + 640, v8);
  }
  return result;
}

void TTokenizerParamManager::~TTokenizerParamManager(void **this)
{
  TTokenizerParamManager::~TTokenizerParamManager(this);
  JUMPOUT(0x20BD149A8);
}

{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t v31;
  uint64_t kk;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t mm;
  uint64_t nn;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;

  *this = &off_24C217758;
  TParam::~TParam(this + 3656);
  TParam::~TParam(this + 3589);
  this[3417] = &unk_24C214170;
  v49 = this + 3586;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 3583;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 3580;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (i = 0; i != -144; i -= 3)
  {
    if (SHIBYTE(this[i + 3579]) < 0)
      operator delete(this[i + 3577]);
  }
  TParam::~TParam(this + 3417);
  this[3245] = &unk_24C214170;
  v49 = this + 3414;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 3411;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 3408;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (j = 0; j != -144; j -= 3)
  {
    if (SHIBYTE(this[j + 3407]) < 0)
      operator delete(this[j + 3405]);
  }
  TParam::~TParam(this + 3245);
  TParam::~TParam(this + 3201);
  TParam::~TParam(this + 3157);
  this[2985] = &unk_24C214170;
  v49 = this + 3154;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 3151;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 3148;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (k = 0; k != -144; k -= 3)
  {
    if (SHIBYTE(this[k + 3147]) < 0)
      operator delete(this[k + 3145]);
  }
  TParam::~TParam(this + 2985);
  this[2813] = &unk_24C214170;
  v49 = this + 2982;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 2979;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 2976;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (m = 0; m != -144; m -= 3)
  {
    if (SHIBYTE(this[m + 2975]) < 0)
      operator delete(this[m + 2973]);
  }
  TParam::~TParam(this + 2813);
  v6 = 0;
  this[2782] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v6 + 2812]) < 0)
      operator delete(this[v6 + 2810]);
    v6 -= 3;
  }
  while (v6 != -6);
  TParam::~TParam(this + 2782);
  v7 = 0;
  this[2751] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v7 + 2781]) < 0)
      operator delete(this[v7 + 2779]);
    v7 -= 3;
  }
  while (v7 != -6);
  TParam::~TParam(this + 2751);
  v8 = 0;
  this[2720] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v8 + 2750]) < 0)
      operator delete(this[v8 + 2748]);
    v8 -= 3;
  }
  while (v8 != -6);
  TParam::~TParam(this + 2720);
  v9 = 0;
  this[2689] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v9 + 2719]) < 0)
      operator delete(this[v9 + 2717]);
    v9 -= 3;
  }
  while (v9 != -6);
  TParam::~TParam(this + 2689);
  TParam::~TParam(this + 2645);
  v10 = 0;
  this[2614] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v10 + 2644]) < 0)
      operator delete(this[v10 + 2642]);
    v10 -= 3;
  }
  while (v10 != -6);
  TParam::~TParam(this + 2614);
  v11 = 0;
  this[2583] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v11 + 2613]) < 0)
      operator delete(this[v11 + 2611]);
    v11 -= 3;
  }
  while (v11 != -6);
  TParam::~TParam(this + 2583);
  v12 = 0;
  this[2552] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v12 + 2582]) < 0)
      operator delete(this[v12 + 2580]);
    v12 -= 3;
  }
  while (v12 != -6);
  TParam::~TParam(this + 2552);
  v13 = 0;
  this[2521] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v13 + 2551]) < 0)
      operator delete(this[v13 + 2549]);
    v13 -= 3;
  }
  while (v13 != -6);
  TParam::~TParam(this + 2521);
  v14 = 0;
  this[2490] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v14 + 2520]) < 0)
      operator delete(this[v14 + 2518]);
    v14 -= 3;
  }
  while (v14 != -6);
  TParam::~TParam(this + 2490);
  v15 = 0;
  this[2459] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v15 + 2489]) < 0)
      operator delete(this[v15 + 2487]);
    v15 -= 3;
  }
  while (v15 != -6);
  TParam::~TParam(this + 2459);
  v16 = 0;
  this[2428] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v16 + 2458]) < 0)
      operator delete(this[v16 + 2456]);
    v16 -= 3;
  }
  while (v16 != -6);
  TParam::~TParam(this + 2428);
  v17 = 0;
  this[2397] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v17 + 2427]) < 0)
      operator delete(this[v17 + 2425]);
    v17 -= 3;
  }
  while (v17 != -6);
  TParam::~TParam(this + 2397);
  TParam::~TParam(this + 2353);
  TParam::~TParam(this + 2309);
  TParam::~TParam(this + 2265);
  v18 = 0;
  this[2234] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v18 + 2264]) < 0)
      operator delete(this[v18 + 2262]);
    v18 -= 3;
  }
  while (v18 != -6);
  TParam::~TParam(this + 2234);
  TParam::~TParam(this + 2190);
  TParam::~TParam(this + 2146);
  TParam::~TParam(this + 2102);
  TParam::~TParam(this + 2058);
  TParam::~TParam(this + 2014);
  TParam::~TParam(this + 1970);
  v19 = 0;
  this[1939] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v19 + 1969]) < 0)
      operator delete(this[v19 + 1967]);
    v19 -= 3;
  }
  while (v19 != -6);
  TParam::~TParam(this + 1939);
  v20 = 0;
  this[1908] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v20 + 1938]) < 0)
      operator delete(this[v20 + 1936]);
    v20 -= 3;
  }
  while (v20 != -6);
  TParam::~TParam(this + 1908);
  v21 = 0;
  this[1877] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v21 + 1907]) < 0)
      operator delete(this[v21 + 1905]);
    v21 -= 3;
  }
  while (v21 != -6);
  TParam::~TParam(this + 1877);
  TParam::~TParam(this + 1833);
  TParam::~TParam(this + 1789);
  TParam::~TParam(this + 1745);
  TParam::~TParam(this + 1701);
  v22 = 0;
  this[1670] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v22 + 1700]) < 0)
      operator delete(this[v22 + 1698]);
    v22 -= 3;
  }
  while (v22 != -6);
  TParam::~TParam(this + 1670);
  v23 = 0;
  this[1639] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v23 + 1669]) < 0)
      operator delete(this[v23 + 1667]);
    v23 -= 3;
  }
  while (v23 != -6);
  TParam::~TParam(this + 1639);
  v24 = 0;
  this[1608] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v24 + 1638]) < 0)
      operator delete(this[v24 + 1636]);
    v24 -= 3;
  }
  while (v24 != -6);
  TParam::~TParam(this + 1608);
  v25 = 0;
  this[1577] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v25 + 1607]) < 0)
      operator delete(this[v25 + 1605]);
    v25 -= 3;
  }
  while (v25 != -6);
  TParam::~TParam(this + 1577);
  v26 = 0;
  this[1546] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v26 + 1576]) < 0)
      operator delete(this[v26 + 1574]);
    v26 -= 3;
  }
  while (v26 != -6);
  TParam::~TParam(this + 1546);
  v27 = 0;
  this[1515] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v27 + 1545]) < 0)
      operator delete(this[v27 + 1543]);
    v27 -= 3;
  }
  while (v27 != -6);
  TParam::~TParam(this + 1515);
  this[1343] = &unk_24C214170;
  v49 = this + 1512;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 1509;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 1506;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (n = 0; n != -144; n -= 3)
  {
    if (SHIBYTE(this[n + 1505]) < 0)
      operator delete(this[n + 1503]);
  }
  TParam::~TParam(this + 1343);
  this[1171] = &unk_24C214170;
  v49 = this + 1340;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 1337;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 1334;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (ii = 0; ii != -144; ii -= 3)
  {
    if (SHIBYTE(this[ii + 1333]) < 0)
      operator delete(this[ii + 1331]);
  }
  TParam::~TParam(this + 1171);
  this[999] = &unk_24C214170;
  v49 = this + 1168;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 1165;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 1162;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (jj = 0; jj != -144; jj -= 3)
  {
    if (SHIBYTE(this[jj + 1161]) < 0)
      operator delete(this[jj + 1159]);
  }
  TParam::~TParam(this + 999);
  v31 = 0;
  this[968] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v31 + 998]) < 0)
      operator delete(this[v31 + 996]);
    v31 -= 3;
  }
  while (v31 != -6);
  TParam::~TParam(this + 968);
  this[796] = &unk_24C214170;
  v49 = this + 965;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 962;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 959;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (kk = 0; kk != -144; kk -= 3)
  {
    if (SHIBYTE(this[kk + 958]) < 0)
      operator delete(this[kk + 956]);
  }
  TParam::~TParam(this + 796);
  v33 = 0;
  this[765] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v33 + 795]) < 0)
      operator delete(this[v33 + 793]);
    v33 -= 3;
  }
  while (v33 != -6);
  TParam::~TParam(this + 765);
  v34 = 0;
  this[734] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v34 + 764]) < 0)
      operator delete(this[v34 + 762]);
    v34 -= 3;
  }
  while (v34 != -6);
  TParam::~TParam(this + 734);
  v35 = 0;
  this[703] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v35 + 733]) < 0)
      operator delete(this[v35 + 731]);
    v35 -= 3;
  }
  while (v35 != -6);
  TParam::~TParam(this + 703);
  v36 = 0;
  this[672] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v36 + 702]) < 0)
      operator delete(this[v36 + 700]);
    v36 -= 3;
  }
  while (v36 != -6);
  TParam::~TParam(this + 672);
  v37 = 0;
  this[641] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v37 + 671]) < 0)
      operator delete(this[v37 + 669]);
    v37 -= 3;
  }
  while (v37 != -6);
  TParam::~TParam(this + 641);
  this[469] = &unk_24C214170;
  v49 = this + 638;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 635;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 632;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (mm = 0; mm != -144; mm -= 3)
  {
    if (SHIBYTE(this[mm + 631]) < 0)
      operator delete(this[mm + 629]);
  }
  TParam::~TParam(this + 469);
  this[297] = &unk_24C214170;
  v49 = this + 466;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 463;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  v49 = this + 460;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (nn = 0; nn != -144; nn -= 3)
  {
    if (SHIBYTE(this[nn + 459]) < 0)
      operator delete(this[nn + 457]);
  }
  TParam::~TParam(this + 297);
  v40 = 0;
  this[266] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v40 + 296]) < 0)
      operator delete(this[v40 + 294]);
    v40 -= 3;
  }
  while (v40 != -6);
  TParam::~TParam(this + 266);
  v41 = 0;
  this[235] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v41 + 265]) < 0)
      operator delete(this[v41 + 263]);
    v41 -= 3;
  }
  while (v41 != -6);
  TParam::~TParam(this + 235);
  v42 = 0;
  this[204] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v42 + 234]) < 0)
      operator delete(this[v42 + 232]);
    v42 -= 3;
  }
  while (v42 != -6);
  TParam::~TParam(this + 204);
  v43 = 0;
  this[173] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v43 + 203]) < 0)
      operator delete(this[v43 + 201]);
    v43 -= 3;
  }
  while (v43 != -6);
  TParam::~TParam(this + 173);
  v44 = 0;
  this[142] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v44 + 172]) < 0)
      operator delete(this[v44 + 170]);
    v44 -= 3;
  }
  while (v44 != -6);
  TParam::~TParam(this + 142);
  v45 = 0;
  this[111] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v45 + 141]) < 0)
      operator delete(this[v45 + 139]);
    v45 -= 3;
  }
  while (v45 != -6);
  TParam::~TParam(this + 111);
  v46 = 0;
  this[80] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v46 + 110]) < 0)
      operator delete(this[v46 + 108]);
    v46 -= 3;
  }
  while (v46 != -6);
  TParam::~TParam(this + 80);
  v47 = 0;
  this[49] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v47 + 79]) < 0)
      operator delete(this[v47 + 77]);
    v47 -= 3;
  }
  while (v47 != -6);
  TParam::~TParam(this + 49);
  v48 = 0;
  this[18] = off_24C2135E0;
  do
  {
    if (SHIBYTE(this[v48 + 48]) < 0)
      operator delete(this[v48 + 46]);
    v48 -= 3;
  }
  while (v48 != -6);
  TParam::~TParam(this + 18);
  TParamManager::~TParamManager((TParamManager *)this);
}

uint64_t TFloatParam::TFloatParam(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v9;

  v9 = TParam::TParam(a1, 3, a2, a3, a4, a5, a6);
  *(_QWORD *)v9 = &off_24C213C70;
  *(double *)(v9 + 152) = a7;
  *(_QWORD *)(v9 + 112) |= 0x200uLL;
  TParam::notifyChange(v9, 0);
  return a1;
}

void sub_20980B034(_Unwind_Exception *a1)
{
  void **v1;

  TParam::~TParam(v1);
  _Unwind_Resume(a1);
}

void CTModelRelevance::~CTModelRelevance(CTModelRelevance *this)
{
  char *v2;

  *(_QWORD *)this = 0;
  v2 = (char *)this + 8;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8);
  DgnArray<DgnArray<DgnPrimArray<long long>>>::releaseAll((uint64_t)this + 24);
  DgnArray<DgnArray<DgnPrimArray<long long>>>::releaseAll((uint64_t)this + 24);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v2);
}

_QWORD *DgnArray<DgnArray<DgnPrimArray<long long>>>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnArray<DgnArray<DgnPrimArray<long long>>>::destructAt((_QWORD *)a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sizeObject<DgnArray<DgnPrimArray<long long>>>(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v9[0] = 0;
  v9[1] = 0;
  v10[0] = 0;
  v10[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 12;
  else
    v4 = 16;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v10);
  v5 = 0;
  if (a2 != 3)
  {
    v5 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      v6 = *(unsigned int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        do
          v5 += sizeObject<DgnPrimArray<double>>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v5 += v4 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v9);
  return v5;
}

void sub_20980C148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CTModelRelevance::computeModelRelevance(CTModelRelevance *this, PelMgr *a2, unsigned int a3, double a4, int a5, int a6, int a7, int a8, char a9)
{
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  int64_t v66;
  unsigned int v67;
  _QWORD *v68;
  _QWORD *v69;
  unsigned int *v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  _QWORD *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  unsigned int v106;
  double v107;
  double v108;
  _QWORD *v109;
  unsigned int *v110;
  _QWORD *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  _QWORD *v120;
  int v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  int *v125;
  uint64_t *v126;
  uint64_t *v127;
  double v128;
  uint64_t v129;
  int *v130;
  int v131;
  double v132;
  uint64_t v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  int *v139;
  int v140;
  uint64_t *v141;
  uint64_t *v142;
  double v143;
  uint64_t v144;
  int *v145;
  int v146;
  double v147;
  uint64_t v148;
  double v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t *v162;
  unsigned int *v163;
  _QWORD *v164;
  double v165;
  uint64_t v166;
  unsigned int *v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  int v171;
  double v172;
  int v173;
  _QWORD *v174;
  uint64_t v175;
  int v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  unsigned int v182;
  uint64_t *v183;
  uint64_t v184;
  int v185;
  double v186;
  double v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t i;
  unint64_t *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t j;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  _QWORD *v213;
  unsigned int v215;
  uint64_t v216;
  int v218;
  unsigned int v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  _QWORD *v224;
  int v225;
  int v226;
  uint64_t v227;
  void *v228;
  uint64_t *v229;
  int v230;
  uint64_t *v231;
  int v232;
  _QWORD v233[2];
  _QWORD v234[2];
  _QWORD *v235;
  uint64_t v236;
  _QWORD v237[3];

  *(_QWORD *)this = 0;
  v12 = *((unsigned int *)a2 + 33);
  v218 = *((_DWORD *)a2 + 4);
  v13 = (a6 ^ 1 | a7) == 1 && a5 == 0;
  if (!v13 || (a9 & 1) == 0)
  {
    v15 = (v12 + 1);
LABEL_11:
    v14 = 1;
    v16 = v15;
    goto LABEL_12;
  }
  v14 = 0;
  v15 = (v12 + 1);
  v16 = 2;
  if (v218 == 1 && (a8 & 1) == 0)
    goto LABEL_11;
LABEL_12:
  v225 = v14;
  v216 = v15;
  v17 = (_QWORD *)((char *)this + 8);
  v18 = *((_DWORD *)this + 5);
  if (v12 > v18)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 8, v12 - v18, 0);
  v213 = v17;
  v19 = *((unsigned int *)this + 4);
  if (v19 <= v12)
  {
    v20 = v17;
    if (v19 < v12)
    {
      v23 = v12 - v19;
      v24 = 16 * v19;
      do
      {
        v25 = (_QWORD *)(*v17 + v24);
        *v25 = 0;
        v25[1] = 0;
        v24 += 16;
        --v23;
      }
      while (v23);
    }
  }
  else
  {
    v20 = v17;
    if ((int)v19 > (int)v12)
    {
      v21 = (int)v19;
      v22 = 16 * (int)v19 - 16;
      do
      {
        --v21;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v17 + v22);
        v22 -= 16;
      }
      while (v21 > (int)v12);
    }
  }
  *((_DWORD *)this + 4) = v12;
  if ((_DWORD)v12)
  {
    v26 = 0;
    while (1)
    {
      v27 = *v20 + v26;
      v28 = *(_DWORD *)(v27 + 12);
      if (v16 > v28)
        break;
      *(_DWORD *)(v27 + 8) = v16;
      if (v16)
        goto LABEL_27;
LABEL_28:
      v26 += 16;
      if (16 * v12 == v26)
        goto LABEL_29;
    }
    DgnPrimArray<unsigned long long>::reallocElts(*v20 + v26, v16 - v28, 0);
    *(_DWORD *)(v27 + 8) = v16;
LABEL_27:
    bzero(*(void **)(*v20 + v26), 8 * v16);
    goto LABEL_28;
  }
LABEL_29:
  v29 = a8;
  if (v218 != 1)
    v29 = 1;
  if (v29)
    v30 = v12;
  else
    v30 = (v216 * v12) >> 1;
  *((_DWORD *)this + 10) = v30;
  v31 = (_QWORD *)((char *)this + 24);
  v32 = *((_DWORD *)this + 9);
  if (v30 > v32)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v31, v30 - v32, 0);
  v33 = *((unsigned int *)this + 8);
  if (v33 <= v30)
  {
    if (v33 < v30)
    {
      v34 = v30 - v33;
      v35 = 16 * v33;
      do
      {
        v36 = (_QWORD *)(*v31 + v35);
        *v36 = 0;
        v36[1] = 0;
        v35 += 16;
        --v34;
      }
      while (v34);
    }
  }
  else
  {
    DgnArray<DgnArray<DgnPrimArray<long long>>>::destructAt(v31, v30, v33 - v30);
  }
  *((_DWORD *)this + 8) = v30;
  v224 = (_QWORD *)((char *)this + 24);
  if (*((_DWORD *)this + 10))
  {
    v37 = 0;
    v38 = v16;
    v39 = (int)v16;
    v215 = v16;
    v220 = (int)v16;
    do
    {
      v222 = v37;
      v40 = *v31 + 16 * v37;
      v41 = *(_DWORD *)(v40 + 12);
      if (v16 > v41)
        DgnArray<DgnPrimArray<double>>::reallocElts(v40, v16 - v41, 0);
      v42 = *(unsigned int *)(v40 + 8);
      if (v42 <= v16)
      {
        if (v42 < v16)
        {
          v45 = v38 - v42;
          v46 = 16 * v42;
          do
          {
            v47 = (_QWORD *)(*(_QWORD *)v40 + v46);
            *v47 = 0;
            v47[1] = 0;
            v46 += 16;
            --v45;
          }
          while (v45);
        }
      }
      else if ((int)v42 > (int)v16)
      {
        v43 = (int)v42;
        v44 = 16 * (int)v42 - 16;
        do
        {
          --v43;
          DgnPrimArray<unsigned int>::~DgnPrimArray(*(_QWORD *)v40 + v44);
          v44 -= 16;
        }
        while (v43 > v39);
      }
      *(_DWORD *)(v40 + 8) = v16;
      if (v16)
      {
        v48 = 0;
        v49 = *(_QWORD *)(*v224 + 16 * v222);
        v50 = 8;
        v51 = 8;
        do
        {
          v52 = v48 + 1;
          v53 = *(unsigned int *)(v49 + v51 + 4);
          if (v48 >= v53)
          {
            DgnPrimArray<unsigned long long>::reallocElts(v49 + v51 - 8, (v48 - v53 + 1), 0);
            v55 = *(_QWORD *)(*v224 + 16 * v222);
            v54 = v52;
          }
          else
          {
            v54 = v48 + 1;
            v55 = v49;
          }
          *(_DWORD *)(v49 + v51) = v54;
          bzero(*(void **)(v55 + v51 - 8), v50);
          v51 += 16;
          v50 += 8;
          v49 = v55;
          v48 = v52;
        }
        while (v38 != v52);
      }
      v39 = v220;
      v37 = v222 + 1;
      v16 = v215;
      v31 = (_QWORD *)((char *)this + 24);
    }
    while (v222 + 1 < (unint64_t)*((unsigned int *)this + 10));
  }
  v237[0] = 0;
  v237[1] = 0;
  v235 = 0;
  v236 = 0;
  if ((_DWORD)v216)
  {
    v228 = 0;
    HIDWORD(v236) = realloc_array(0, &v228, 8 * v216, 0, 0, 1) >> 3;
    v235 = v228;
  }
  LODWORD(v236) = v216;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v234, v216);
  if ((_DWORD)v216)
  {
    v56 = 0;
    v57 = 1;
    do
    {
      if (v56)
        v58 = 2;
      else
        v58 = 1;
      if (v225)
        v59 = v57;
      else
        v59 = v58;
      v60 = v234[0] + v56;
      v61 = *(_DWORD *)(v234[0] + v56 + 12);
      if (v59 > v61)
        DgnPrimArray<unsigned long long>::reallocElts(v234[0] + v56, v59 - v61, 0);
      *(_DWORD *)(v60 + 8) = v59;
      v56 += 16;
      ++v57;
    }
    while (16 * v216 != v56);
  }
  v62 = ((double)a3 * 256.0 + 0.5);
  *(_QWORD *)this = v62;
  v63 = 40.7436654;
  v64 = 100.0 / a4;
  if (v218 == 1)
    v63 = 1.0;
  v65 = (double)v62 * v63 + 0.5;
  v66 = ((unint64_t)v65 & 0x3FFFFFFFFFFFLL) << 10;
  if (v218 == 1)
  {
    v103 = *((unsigned int *)a2 + 38);
    v233[0] = 0;
    v233[1] = 0;
    v231 = 0;
    v232 = 0;
    if (a8)
      v104 = 1;
    else
      v104 = v12;
    v105 = v104 * v12;
    if (v104 * (_DWORD)v12)
    {
      v231 = MemChunkAlloc(8 * (v104 * v12), 0);
      v232 = v105;
    }
    v221 = 0;
    v219 = 0;
    v106 = 0;
    v107 = 1.0 / (double)(1 << (*((_DWORD *)a2 + 40) + *((_DWORD *)a2 + 41)));
    v108 = (double)v66;
    v68 = v213;
    while (1)
    {
      if (!PelMgr::getComponentByIndex((unint64_t)a2, v106, (uint64_t)v237, (uint64_t)v233))
      {
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v231);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v233);
        goto LABEL_234;
      }
      v109 = v235;
      *v235 = 1;
      if ((_DWORD)v12)
      {
        v110 = (unsigned int *)v237[0];
        v111 = v109 + 1;
        v112 = v12;
        do
        {
          v113 = *v110++;
          *v111++ = v113;
          --v112;
        }
        while (v112);
      }
      v114 = v234[0];
      **(_QWORD **)v234[0] = 0x400000;
      if (v216 >= 2)
      {
        v115 = 1;
        do
        {
          v116 = 0;
          v117 = v115++;
          if (v115 <= 1)
            v118 = 1;
          else
            v118 = v115;
          if (v225)
            v119 = 1;
          else
            v119 = v117;
          v120 = *(_QWORD **)(v114 + 16 * v117);
          if (!v225)
            v118 = 2;
          do
          {
            v121 = v116;
            if (v116)
              v122 = 8;
            else
              v122 = 15;
            *v120++ = (v109[v117] << v122) * v109[v116];
            v116 += v119;
            --v118;
          }
          while (v118);
        }
        while (v115 != v216);
        v123 = 256;
        if (!v121)
          v123 = 0x8000;
        v221 = v123;
      }
      if (a8)
        break;
      LODWORD(v228) = v12;
      HIDWORD(v228) = v12;
      v230 = 0;
      v229 = 0;
      if ((_DWORD)v12 * (_DWORD)v12)
      {
        v229 = MemChunkAlloc(8 * (v12 * v12), 0);
        v230 = v12 * v12;
      }
      if ((_DWORD)v12)
      {
        v136 = 0;
        v137 = v231;
        do
        {
          v138 = 0;
          v139 = (int *)v233[0];
          v140 = (int)v228;
          v141 = v229;
          do
          {
            if ((_DWORD)v103)
            {
              v142 = (uint64_t *)*((_QWORD *)a2 + 23);
              v143 = 0.0;
              v144 = v103;
              v145 = v139;
              do
              {
                v146 = *v145++;
                v147 = (double)v146;
                v148 = *v142;
                v142 += 2;
                v143 = v143 + v147 * (double)*(int *)(*(_QWORD *)(v148 + 16 * v136) + 4 * v138);
                --v144;
              }
              while (v144);
            }
            else
            {
              v143 = 0.0;
            }
            v149 = v107 * v143;
            *(double *)&v137[(v12 * v136 + v138)] = v149;
            if ((a6 & 1) != 0)
              *(double *)&v141[(v136 + v140 * v138)] = v149;
            ++v138;
          }
          while (v138 != v12);
          ++v136;
        }
        while (v136 != v12);
      }
      if ((a6 & 1) != 0)
      {
        DgnMatrix::invert((double **)&v228, (uint64_t)&v226);
        if ((_DWORD)v12)
        {
          v150 = 0;
          v151 = v226;
          v152 = v227;
          v153 = v234[0];
          do
          {
            if (v225)
              v154 = v150;
            else
              v154 = 1;
            v155 = v150 + 1;
            if ((_DWORD)v154)
            {
              v156 = 0;
              v157 = *(_QWORD *)(v153 + 16 * v155);
              do
              {
                if (v225)
                  v158 = v156;
                else
                  v158 = v150;
                if (v225)
                  v159 = v156 + 1;
                else
                  v159 = 1;
                *(_QWORD *)(v157 + 8 * v159) += (uint64_t)(*(double *)(v152 + 8 * (v150 + v151 * v158))
                                                        * (double)v221);
                ++v156;
              }
              while (v154 != v156);
            }
            ++v150;
          }
          while (v155 != v12);
        }
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v227);
      }
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v229);
      if ((_DWORD)v12)
        goto LABEL_191;
LABEL_212:
      v179 = *((unsigned int *)this + 10);
      if ((_DWORD)v179)
      {
        v180 = 0;
        v181 = 0;
        v182 = 0;
        v183 = v231;
        v184 = v234[0];
        do
        {
          if (a8)
          {
            v185 = v180;
          }
          else
          {
            v185 = v181 + v182 * v12;
            if (v181 + 1 <= v182)
            {
              ++v181;
            }
            else
            {
              ++v182;
              v181 = 0;
            }
          }
          v186 = *(double *)&v183[v185];
          if (v186 < 0.0)
            v187 = -0.5;
          else
            v187 = 0.5;
          v188 = v180 + 1;
          if (v16)
          {
            v189 = 0;
            v190 = v187 + v186 * v108;
            if (v225)
              v191 = 1;
            else
              v191 = v180 + 1;
            v192 = *(_QWORD *)(*v224 + 16 * v180);
            v193 = 1;
            do
            {
              v194 = 0;
              v195 = *(_QWORD *)(v184 + 16 * (v191 * v189));
              v196 = *(_QWORD *)(v192 + 16 * v189);
              do
              {
                *(_QWORD *)(v196 + 8 * v194) += (*(_QWORD *)(v195 + 8 * v194) * (uint64_t)v190) >> 18;
                ++v194;
              }
              while (v193 != v194);
              ++v189;
              ++v193;
            }
            while (v189 != v16);
          }
          v180 = v188;
        }
        while (v188 != v179);
      }
      v106 = ((double)++v219 * v64 + 0.5);
    }
    if (!(_DWORD)v12)
      goto LABEL_212;
    v124 = 0;
    v125 = (int *)v233[0];
    v126 = v231;
    do
    {
      if ((_DWORD)v103)
      {
        v127 = (uint64_t *)*((_QWORD *)a2 + 23);
        v128 = 0.0;
        v129 = v103;
        v130 = v125;
        do
        {
          v131 = *v130++;
          v132 = (double)v131;
          v133 = *v127;
          v127 += 2;
          v128 = v128 + v132 * (double)*(int *)(*(_QWORD *)(v133 + 16 * v124) + 4 * v124);
          --v129;
        }
        while (v129);
      }
      else
      {
        v128 = 0.0;
      }
      v134 = v107 * v128;
      *(double *)&v126[v124] = v134;
      if ((a6 & 1) != 0)
      {
        v134 = (double)v221 / v134;
        if (v225)
          v135 = v124 + 1;
        else
          v135 = 1;
        ++v124;
        *(_QWORD *)(*(_QWORD *)(v114 + 16 * v124) + 8 * v135) += (uint64_t)v134;
      }
      else
      {
        ++v124;
      }
    }
    while (v124 != v12);
LABEL_191:
    v160 = 0;
    v161 = 0;
    v162 = v231;
    v163 = (unsigned int *)v237[0];
    v164 = v235;
    do
    {
      if (a8)
      {
        LODWORD(v134) = v163[v161];
        v165 = *(double *)&v162[v161] * (double)*(unint64_t *)&v134;
      }
      else
      {
        v165 = 0.0;
        v166 = v12;
        v167 = v163;
        v168 = v160;
        do
        {
          v169 = *v167++;
          v165 = v165 + *(double *)&v162[v168++] * (double)v169;
          --v166;
        }
        while (v166);
      }
      if (v165 < 0.0)
        v134 = -0.5;
      else
        v134 = 0.5;
      v170 = v161 + 1;
      if (v16)
      {
        v171 = 0;
        v172 = v134 + v165 * v108;
        if (v225)
          v173 = 1;
        else
          v173 = v161 + 1;
        v174 = *(_QWORD **)(*v213 + 16 * v161);
        v175 = v16;
        do
        {
          v176 = v171;
          if (v171)
            v177 = 8;
          else
            v177 = 15;
          *v174++ += (v164[v176] * ((uint64_t)v172 << v177)) >> 18;
          v171 = v176 + v173;
          --v175;
        }
        while (v175);
        v178 = 256;
        if (!v176)
          v178 = 0x8000;
        v221 = v178;
      }
      v160 += v12;
      v161 = v170;
    }
    while (v170 != v12);
    goto LABEL_212;
  }
  v219 = 0;
  v67 = 0;
  v228 = 0;
  v229 = 0;
  v68 = v213;
  while (PelMgr::getComponentByIndex((unint64_t)a2, v67, (uint64_t)v237, (uint64_t)&v228, v65))
  {
    v69 = v235;
    *v235 = 1;
    if ((_DWORD)v12)
    {
      v70 = (unsigned int *)v237[0];
      v71 = v69 + 1;
      v72 = v12;
      do
      {
        v73 = *v70++;
        *v71++ = v73;
        --v72;
      }
      while (v72);
    }
    v74 = v234[0];
    **(_QWORD **)v234[0] = 0x400000;
    if (v216 >= 2)
    {
      v75 = (unsigned int *)v228;
      v76 = 1;
      do
      {
        v77 = 0;
        v78 = v76++;
        if (v225)
          LODWORD(v79) = v76;
        else
          LODWORD(v79) = 2;
        if (v225)
          v80 = 1;
        else
          v80 = v78;
        v81 = *(_QWORD *)(v74 + 16 * v78);
        v82 = v79 - 1;
        if (v79 <= 1)
          v79 = 1;
        else
          v79 = v79;
        v83 = *(_QWORD **)(v74 + 16 * v78);
        do
        {
          if (v77)
            v84 = 8;
          else
            v84 = 15;
          *v83++ = (v69[v78] << v84) * v69[v77];
          v77 += v80;
          --v79;
        }
        while (v79);
        if (a6)
        {
          v85 = v75[v78 - 1];
          *(_QWORD *)(v81 + 8 * v82) += (uint64_t)((double)(unint64_t)((v85 << v84) * v85) * 0.0245436926);
        }
      }
      while (v76 != v216);
    }
    if ((_DWORD)v12)
    {
      v86 = 0;
      v87 = v228;
      v88 = v237[0];
      do
      {
        v89 = v86 + 1;
        if (v16)
        {
          v90 = 0;
          v91 = (v87[v86] * v87[v86]);
          v92 = *(unsigned int *)(v88 + 4 * v86);
          v93 = 16 * v86;
          v94 = *(_QWORD *)(*v213 + 16 * v86);
          if (v225)
            v95 = 1;
          else
            v95 = v89;
          v96 = *(_QWORD *)(*v224 + v93);
          v97 = 1;
          v98 = (v66 + (v91 >> 1)) / v91;
          do
          {
            v99 = 0;
            if (v95 * (_DWORD)v90)
              v100 = 8;
            else
              v100 = 15;
            *(_QWORD *)(v94 + 8 * v90) += (v69[(v95 * v90)] * v98 * (v92 << v100)) >> 18;
            v101 = *(_QWORD *)(v74 + 16 * (v95 * v90));
            v102 = *(_QWORD *)(v96 + 16 * v90);
            do
            {
              *(_QWORD *)(v102 + 8 * v99) += (uint64_t)(*(_QWORD *)(v101 + 8 * v99) * v98) >> 18;
              ++v99;
            }
            while (v97 != v99);
            ++v90;
            ++v97;
          }
          while (v90 != v16);
        }
        v86 = v89;
      }
      while (v89 != v12);
    }
    v65 = (double)++v219 * v64 + 0.5;
    v67 = v65;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v228);
LABEL_234:
  v197 = v219 >> 1;
  if ((_DWORD)v12)
  {
    for (i = 0; i != v12; ++i)
    {
      if (v16)
      {
        v199 = *(unint64_t **)(*v68 + 16 * i);
        v200 = v16;
        do
        {
          v201 = (*v199 + v197) / v219;
          if ((*v199 & 0x8000000000000000) != 0)
            v201 = -(uint64_t)((v197 - *v199) / v219);
          *v199++ = v201;
          --v200;
        }
        while (v200);
      }
    }
  }
  v202 = *((unsigned int *)this + 10);
  if ((_DWORD)v202)
  {
    for (j = 0; j != v202; ++j)
    {
      if (v16)
      {
        v204 = 0;
        v205 = *(_QWORD *)(*v224 + 16 * j);
        v206 = 1;
        do
        {
          v207 = 0;
          v208 = *(_QWORD *)(v205 + 16 * v204);
          do
          {
            v209 = *(_QWORD *)(v208 + 8 * v207);
            v210 = (v197 - v209) / (unint64_t)v219;
            v13 = v209 >= 0;
            v211 = (v209 + v197) / (unint64_t)v219;
            if (!v13)
              v211 = -(uint64_t)v210;
            *(_QWORD *)(v208 + 8 * v207++) = v211;
          }
          while (v206 != v207);
          ++v204;
          ++v206;
        }
        while (v204 != v16);
      }
    }
  }
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v234);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v235);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v237);
}

void sub_20980CEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;

  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a30);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a32);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v32 - 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v32 - 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v32 - 152);
  _Unwind_Resume(a1);
}

uint64_t CTPelAccum::CTPelAccum(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, char a7, char a8, char a9, int a10, uint64_t a11, double **a12, uint64_t a13)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 20) = a4;
  *(_BYTE *)(a1 + 21) = a5 | a9;
  *(_BYTE *)(a1 + 23) = a6;
  *(_BYTE *)(a1 + 24) = a7;
  *(_BYTE *)(a1 + 25) = a8;
  *(_BYTE *)(a1 + 26) = a9;
  *(_DWORD *)(a1 + 28) = a10;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 40) = a11;
  *(_QWORD *)(a1 + 48) = a13;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 22) = 0;
  CTPelAccum::init(a1, a12);
  return a1;
}

void sub_20980D008(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 144);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v5);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void CTPelAccum::init(uint64_t a1, double **a2)
{
  BOOL v3;
  char v4;
  _DWORD *v5;
  unsigned int v6;
  _BYTE *v7;
  void **v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  _BOOL4 v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;

  v3 = *(_DWORD *)(*(_QWORD *)a1 + 16) == 1 && *(_BYTE *)(a1 + 20) == 0;
  if (*(_DWORD *)(a1 + 28))
    v4 = CTPelAccum::determineNumSignificantSingularValues(a1, a2);
  else
    v4 = 0;
  *(_BYTE *)(a1 + 27) = v4;
  *(_QWORD *)(a1 + 56) = 0;
  if (*(_BYTE *)(a1 + 26))
  {
    *(_DWORD *)(a1 + 160) = 0;
    v5 = (_DWORD *)(a1 + 160);
    *(_DWORD *)(a1 + 96) = 0;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 120) = v6;
    v7 = (_BYTE *)(a1 + 24);
    if (!*(_BYTE *)(a1 + 24))
      goto LABEL_25;
    v8 = (void **)(a1 + 104);
    v9 = *(_DWORD *)(a1 + 116);
    v10 = v6;
    if (v6 > v9)
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 104, v6 - v9, 0);
      v10 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 112) = v6;
    if (v10)
      goto LABEL_12;
    goto LABEL_13;
  }
  if (v3)
  {
    v11 = (*(_DWORD *)(a1 + 16) + *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 16)) >> 1;
    *(_DWORD *)(a1 + 96) = v11;
    v12 = (_DWORD *)(a1 + 96);
  }
  else
  {
    v12 = (_DWORD *)(a1 + 96);
    if ((v4 & 1) != 0)
      v11 = *(_DWORD *)(a1 + 32);
    else
      v11 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 96) = v11;
  }
  *(_DWORD *)(a1 + 160) = v11;
  v5 = (_DWORD *)(a1 + 160);
  *(_DWORD *)(a1 + 120) = 0;
  v7 = (_BYTE *)(a1 + 24);
  if (!*(_BYTE *)(a1 + 24))
  {
LABEL_25:
    if (!*(_BYTE *)(a1 + 23))
      return;
    goto LABEL_26;
  }
  v13 = *(_DWORD *)(*(_QWORD *)a1 + 16) == 1 && *(_BYTE *)(a1 + 20) == 0;
  if (!*(_BYTE *)(a1 + 25))
    v13 = 1;
  v32 = *(unsigned int *)(a1 + 16);
  if (v13)
    v33 = v32 + 1;
  else
    v33 = 2;
  v34 = (_QWORD *)(a1 + 64);
  v35 = *(_DWORD *)(a1 + 76);
  if (v32 > v35)
    DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 64, v32 - v35, 0);
  v36 = *(unsigned int *)(a1 + 72);
  if (v36 <= v32)
  {
    if (v36 < v32)
    {
      v39 = v32 - v36;
      v40 = 16 * v36;
      do
      {
        v41 = (_QWORD *)(*v34 + v40);
        *v41 = 0;
        v41[1] = 0;
        v40 += 16;
        --v39;
      }
      while (v39);
    }
  }
  else if ((int)v36 > (int)v32)
  {
    v37 = (int)v36;
    v38 = 16 * (int)v36 - 16;
    do
    {
      --v37;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v34 + v38);
      v38 -= 16;
    }
    while (v37 > (int)v32);
  }
  *(_DWORD *)(a1 + 72) = v32;
  if (*(_DWORD *)(a1 + 16))
  {
    v42 = 0;
    v43 = 0;
    while (1)
    {
      v44 = *v34 + v42;
      v45 = *(_DWORD *)(v44 + 12);
      if (v33 > v45)
        break;
      *(_DWORD *)(v44 + 8) = v33;
      if (v33)
        goto LABEL_69;
LABEL_70:
      ++v43;
      v42 += 16;
      if (v43 >= *(unsigned int *)(a1 + 16))
        goto LABEL_71;
    }
    DgnPrimArray<unsigned long long>::reallocElts(*v34 + v42, v33 - v45, 0);
    *(_DWORD *)(v44 + 8) = v33;
LABEL_69:
    bzero(*(void **)(*v34 + v42), 8 * v33);
    goto LABEL_70;
  }
LABEL_71:
  v46 = (v33 + v33 * v33) >> 1;
  v8 = (void **)(a1 + 80);
  v47 = *(_DWORD *)(a1 + 92);
  v48 = *(_DWORD *)(a1 + 96) * v46;
  v10 = v48;
  if (v48 > v47)
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1 + 80, v48 - v47, 0);
    v10 = *v12 * v46;
  }
  *(_DWORD *)(a1 + 88) = v48;
  if (v10)
LABEL_12:
    bzero(*v8, 8 * v10);
LABEL_13:
  if (!*v7 || *(_BYTE *)(a1 + 21))
    goto LABEL_25;
LABEL_26:
  v14 = *(unsigned int *)(a1 + 16);
  v15 = (_QWORD *)(a1 + 128);
  v16 = *(_DWORD *)(a1 + 140);
  if (v14 > v16)
    DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 128, v14 - v16, 0);
  v17 = *(unsigned int *)(a1 + 136);
  if (v17 <= v14)
  {
    if (v17 < v14)
    {
      v20 = v14 - v17;
      v21 = 16 * v17;
      do
      {
        v22 = (_QWORD *)(*v15 + v21);
        *v22 = 0;
        v22[1] = 0;
        v21 += 16;
        --v20;
      }
      while (v20);
    }
  }
  else if ((int)v17 > (int)v14)
  {
    v18 = (int)v17;
    v19 = 16 * (int)v17 - 16;
    do
    {
      --v18;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v15 + v19);
      v19 -= 16;
    }
    while (v18 > (int)v14);
  }
  v23 = v14 + 1;
  *(_DWORD *)(a1 + 136) = v14;
  if (*(_DWORD *)(a1 + 16))
  {
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v15 + v24;
      v27 = *(_DWORD *)(v26 + 12);
      if (v23 > v27)
        break;
      *(_DWORD *)(v26 + 8) = v23;
      if ((_DWORD)v14 != -1)
        goto LABEL_41;
LABEL_42:
      ++v25;
      v24 += 16;
      if (v25 >= *(unsigned int *)(a1 + 16))
        goto LABEL_43;
    }
    DgnPrimArray<unsigned long long>::reallocElts(*v15 + v24, v23 - v27, 0);
    *(_DWORD *)(v26 + 8) = v23;
LABEL_41:
    bzero(*(void **)(*v15 + v24), 8 * (v14 + 1));
    goto LABEL_42;
  }
LABEL_43:
  v28 = (v23 * ((_DWORD)v14 + 2)) >> 1;
  v29 = *(_DWORD *)(a1 + 156);
  v30 = *(_DWORD *)(a1 + 160) * v28;
  v31 = v30;
  if (v30 > v29)
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1 + 144, v30 - v29, 0);
    v31 = *v5 * v28;
  }
  *(_DWORD *)(a1 + 152) = v30;
  if (v31)
    bzero(*(void **)(a1 + 144), 8 * v31);
}

void CTPelAccum::~CTPelAccum(CTPelAccum *this)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64);
}

uint64_t CTPelAccum::determineNumSignificantSingularValues(uint64_t a1, double **a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;

  v2 = 0;
  if (a2)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      v2 = *(_QWORD *)(a1 + 48);
      if (v2)
      {
        v3 = *(unsigned int *)(*(_QWORD *)a1 + 132);
        v4 = **a2;
        v5 = 0.0 - v4;
        if (v4 < 0.0)
          v4 = 0.0 - v4;
        if (v3 < 2)
        {
          LODWORD(v7) = 1;
        }
        else
        {
          LODWORD(v5) = *(_DWORD *)(a1 + 28);
          v6 = (double)*(unint64_t *)&v5 * 0.01 * v4;
          v7 = 1;
          while (1)
          {
            v8 = (*a2)[v7];
            if (v8 < 0.0)
              v8 = 0.0 - v8;
            if (v8 < v6)
              break;
            if (v3 == ++v7)
            {
              LODWORD(v7) = *(_DWORD *)(*(_QWORD *)a1 + 132);
              break;
            }
          }
        }
        *(_DWORD *)(a1 + 32) = v7;
        return 1;
      }
    }
  }
  return v2;
}

void CTPelAccum::reset(CTPelAccum *this)
{
  void **v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _BOOL4 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  *((_QWORD *)this + 7) = 0;
  if (*((_BYTE *)this + 24))
  {
    if (*((_BYTE *)this + 26))
    {
      v2 = (void **)((char *)this + 104);
      v3 = *((_DWORD *)this + 4);
      v4 = *((_DWORD *)this + 29);
      v5 = v3;
      if (v3 > v4)
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 104, v3 - v4, 0);
        v5 = *((_DWORD *)this + 4);
      }
      *((_DWORD *)this + 28) = v3;
      LODWORD(v6) = v5;
      if (!v5)
        goto LABEL_23;
    }
    else
    {
      v7 = *(_DWORD *)(*(_QWORD *)this + 16) == 1 && *((_BYTE *)this + 20) == 0;
      if (!*((_BYTE *)this + 25))
        v7 = 1;
      v6 = *((unsigned int *)this + 4);
      if (v7)
        v8 = v6 + 1;
      else
        v8 = 2;
      if ((_DWORD)v6)
      {
        v9 = 0;
        do
        {
          if (v8)
            bzero(*(void **)(*((_QWORD *)this + 8) + v9), 8 * v8);
          v9 += 16;
        }
        while (16 * v6 != v9);
      }
      v5 = *((_DWORD *)this + 24) * ((v8 + v8 * v8) >> 1);
      if (!v5)
      {
LABEL_23:
        if (*((_BYTE *)this + 24) && !*((_BYTE *)this + 21))
          goto LABEL_27;
        goto LABEL_25;
      }
      v2 = (void **)((char *)this + 80);
    }
    bzero(*v2, 8 * v5);
    goto LABEL_23;
  }
LABEL_25:
  if (!*((_BYTE *)this + 23))
    goto LABEL_36;
  LODWORD(v6) = *((_DWORD *)this + 4);
LABEL_27:
  if ((_DWORD)v6)
  {
    v10 = 0;
    v11 = v6 + 1;
    do
    {
      if ((_DWORD)v6 != -1)
        bzero(*(void **)(*((_QWORD *)this + 16) + v10), 8 * (v6 + 1));
      v10 += 16;
    }
    while (16 * v6 != v10);
  }
  else
  {
    v11 = 1;
  }
  v12 = *((_DWORD *)this + 40);
  if (v12 * ((v11 * (v6 + 2)) >> 1))
    bzero(*((void **)this + 18), 8 * v12 * ((v11 * (v6 + 2)) >> 1));
LABEL_36:
  *((_BYTE *)this + 22) = 0;
}

uint64_t writeObject<DgnPrimArray<long long>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v9 = *(_DWORD *)(a2 + 8);
  result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      result = writeObject<unsigned long long>(a1, *(_QWORD *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void CTPelAccum::addAccum(CTPelAccum *this, const CTPelAccum *a2, char a3)
{
  int v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int i;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  CTPelAccum *v49;
  CTPelAccum *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;

  *((_QWORD *)this + 7) += *((_QWORD *)a2 + 7);
  if (*((_BYTE *)this + 24))
  {
    if (*((_BYTE *)this + 26))
    {
      v4 = *((_DWORD *)this + 4);
      if (v4)
      {
        v5 = (uint64_t *)*((_QWORD *)a2 + 13);
        v6 = (_QWORD *)*((_QWORD *)this + 13);
        v7 = *((unsigned int *)this + 4);
        do
        {
          v8 = *v5++;
          *v6++ += v8;
          --v7;
        }
        while (v7);
      }
      goto LABEL_37;
    }
    v9 = *(_DWORD *)(*(_QWORD *)this + 16) == 1 && *((_BYTE *)this + 20) == 0;
    if (!*((_BYTE *)this + 25))
      v9 = 1;
    v10 = *((_DWORD *)this + 4);
    if (v9)
      v11 = (v10 + 1);
    else
      v11 = 2;
    v57 = *((unsigned int *)this + 4);
    if (v10)
    {
      v12 = 0;
      v13 = *((_QWORD *)a2 + 8);
      do
      {
        if ((_DWORD)v11)
        {
          v14 = *(uint64_t **)(v13 + 16 * v12);
          v15 = *(_QWORD **)(*((_QWORD *)this + 8) + 16 * v12);
          v16 = v11;
          do
          {
            v17 = *v14++;
            *v15++ += v17;
            --v16;
          }
          while (v16);
        }
        ++v12;
      }
      while (v12 != v57);
    }
    v51 = (v11 + v11 * v11) >> 1;
    v53 = *((_DWORD *)this + 24);
    if ((a3 & 1) != 0 || !*((_BYTE *)a2 + 27))
    {
      v26 = v53 * v51;
      if ((_DWORD)v26)
      {
        v27 = (uint64_t *)*((_QWORD *)a2 + 10);
        v28 = (_QWORD *)*((_QWORD *)this + 10);
        do
        {
          v29 = *v27++;
          *v28++ += v29;
          --v26;
        }
        while (v26);
      }
    }
    else if (v53)
    {
      v48 = a3;
      v49 = this;
      v55 = 0;
      for (i = 0; i != v53; ++i)
      {
        if ((_DWORD)v57 != -1)
        {
          v19 = 0;
          v20 = 0;
          v21 = *((_QWORD *)v49 + 10);
          v22 = 2;
          v23 = 1;
          do
          {
            v24 = 0;
            do
            {
              *(_QWORD *)(v21 + 8 * (v55 + (v19 >> 1) + v24)) += (uint64_t)(CTPelAccum::getDataDataAccumUnscaled(a2, i, v20, v24)+ 0.5);
              ++v24;
            }
            while (v23 != v24);
            ++v23;
            v19 += v22;
            v22 += 2;
          }
          while (v20++ != (_DWORD)v57);
        }
        v55 += v51;
      }
      v4 = v57;
      this = v49;
      a3 = v48;
LABEL_37:
      if (!*((_BYTE *)this + 21))
        goto LABEL_40;
      goto LABEL_38;
    }
    v4 = v57;
    goto LABEL_37;
  }
LABEL_38:
  if (!*((_BYTE *)this + 23))
    return;
  v4 = *((_DWORD *)this + 4);
LABEL_40:
  if (v4)
  {
    v30 = 0;
    v31 = v4 + 1;
    v32 = *((_QWORD *)a2 + 16);
    do
    {
      if (v4 != -1)
      {
        v33 = *(uint64_t **)(v32 + 16 * v30);
        v34 = *(_QWORD **)(*((_QWORD *)this + 16) + 16 * v30);
        v35 = (v4 + 1);
        do
        {
          v36 = *v33++;
          *v34++ += v36;
          --v35;
        }
        while (v35);
      }
      ++v30;
    }
    while (v30 != v4);
  }
  else
  {
    v31 = 1;
  }
  v52 = (v31 * (v4 + 2)) >> 1;
  v54 = *((_DWORD *)this + 40);
  if ((a3 & 1) != 0 || !*((_BYTE *)a2 + 27))
  {
    v44 = v54 * v52;
    if ((_DWORD)v44)
    {
      v45 = (uint64_t *)*((_QWORD *)a2 + 18);
      v46 = (_QWORD *)*((_QWORD *)this + 18);
      do
      {
        v47 = *v45++;
        *v46++ += v47;
        --v44;
      }
      while (v44);
    }
  }
  else
  {
    v50 = this;
    if (v54)
    {
      v58 = 0;
      v37 = 0;
      v56 = v31;
      do
      {
        if (v31)
        {
          v38 = 0;
          v39 = 0;
          v40 = *((_QWORD *)v50 + 18);
          v41 = 2;
          v42 = 1;
          do
          {
            v43 = 0;
            v59 = v39 + 1;
            do
            {
              *(_QWORD *)(v40 + 8 * (v58 + (v38 >> 1) + v43)) += (uint64_t)(CTPelAccum::getMeanMeanAccumUnscaled(a2, v37, v39, v43)+ 0.5);
              ++v43;
            }
            while (v42 != v43);
            ++v42;
            v38 += v41;
            v41 += 2;
            v31 = v56;
            ++v39;
          }
          while (v59 != v56);
        }
        ++v37;
        v58 += v52;
      }
      while (v37 != v54);
    }
  }
}

double CTPelAccum::getDataDataAccumUnscaled(CTPelAccum *this, unsigned int a2, int a3, int a4)
{
  BOOL v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  double result;

  v4 = *(_DWORD *)(*(_QWORD *)this + 16) == 1 && *((_BYTE *)this + 20) == 0;
  if (v4 || !*((_BYTE *)this + 25))
    v5 = *((_DWORD *)this + 4) + 1;
  else
    v5 = 2;
  v6 = a4 + ((a3 + a3 * a3) >> 1);
  v7 = (v5 + v5 * v5) >> 1;
  if (!*((_BYTE *)this + 27))
    return (double)*(uint64_t *)(*((_QWORD *)this + 10) + 8 * (v6 + v7 * a2));
  v8 = *((unsigned int *)this + 8);
  if (!(_DWORD)v8)
    return 0.0;
  v9 = (int *)*((_QWORD *)this + 6);
  v10 = *v9;
  v11 = *((_QWORD *)v9 + 1);
  result = 0.0;
  do
  {
    result = result + *(double *)(v11 + 8 * a2) * (double)*(uint64_t *)(*((_QWORD *)this + 10) + 8 * v6);
    v6 += v7;
    a2 += v10;
    --v8;
  }
  while (v8);
  return result;
}

double CTPelAccum::getMeanMeanAccumUnscaled(CTPelAccum *this, unsigned int a2, int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  double result;

  v4 = a4 + ((a3 + a3 * a3) >> 1);
  v5 = (*((_DWORD *)this + 4) + 2 + (*((_DWORD *)this + 4) + 2) * *((_DWORD *)this + 4)) >> 1;
  if (!*((_BYTE *)this + 27))
    return (double)*(uint64_t *)(*((_QWORD *)this + 18) + 8 * (v4 + v5 * a2));
  v6 = *((unsigned int *)this + 8);
  if (!(_DWORD)v6)
    return 0.0;
  v7 = (int *)*((_QWORD *)this + 6);
  v8 = *v7;
  v9 = *((_QWORD *)v7 + 1);
  result = 0.0;
  do
  {
    result = result + *(double *)(v9 + 8 * a2) * (double)*(uint64_t *)(*((_QWORD *)this + 18) + 8 * v4);
    v4 += v5;
    a2 += v8;
    --v6;
  }
  while (v6);
  return result;
}

uint64_t CTPelAccum::scaleAccum(uint64_t this, double a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  double v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t *v13;
  double v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  double v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  double v32;

  if (a2 != 1.0)
  {
    *(_QWORD *)(this + 56) = (unint64_t)((double)*(uint64_t *)(this + 56) * a2 + 0.5);
    if (!*(_BYTE *)(this + 24))
      goto LABEL_35;
    if (*(_BYTE *)(this + 26))
    {
      LODWORD(v2) = *(_DWORD *)(this + 16);
      if ((_DWORD)v2)
      {
        v3 = *(uint64_t **)(this + 104);
        v4 = *(unsigned int *)(this + 16);
        do
        {
          if (*v3 < 0)
            v5 = -0.5;
          else
            v5 = 0.5;
          *v3 = (uint64_t)(v5 + (double)*v3 * a2);
          ++v3;
          --v4;
        }
        while (v4);
      }
    }
    else
    {
      v6 = *(_DWORD *)(*(_QWORD *)this + 16) == 1 && *(_BYTE *)(this + 20) == 0;
      if (!*(_BYTE *)(this + 25))
        v6 = 1;
      v2 = *(unsigned int *)(this + 16);
      if (v6)
        v7 = (v2 + 1);
      else
        v7 = 2;
      if ((_DWORD)v2)
      {
        for (i = 0; i != v2; ++i)
        {
          if ((_DWORD)v7)
          {
            v9 = *(uint64_t **)(*(_QWORD *)(this + 64) + 16 * i);
            v10 = v7;
            do
            {
              if (*v9 < 0)
                v11 = -0.5;
              else
                v11 = 0.5;
              *v9 = (uint64_t)(v11 + (double)*v9 * a2);
              ++v9;
              --v10;
            }
            while (v10);
          }
        }
      }
      v12 = *(_DWORD *)(this + 96) * ((v7 + v7 * v7) >> 1);
      if ((_DWORD)v12)
      {
        v13 = *(uint64_t **)(this + 80);
        do
        {
          if (*v13 < 0)
            v14 = -0.5;
          else
            v14 = 0.5;
          *v13 = (uint64_t)(v14 + (double)*v13 * a2);
          ++v13;
          --v12;
        }
        while (v12);
      }
    }
    if (*(_BYTE *)(this + 21))
    {
LABEL_35:
      if (!*(_BYTE *)(this + 23))
        return this;
      LODWORD(v2) = *(_DWORD *)(this + 16);
    }
    if ((_DWORD)v2)
    {
      v15 = 0;
      v16 = v2 + 1;
      do
      {
        if ((_DWORD)v2 != -1)
        {
          v17 = *(uint64_t **)(*(_QWORD *)(this + 128) + 16 * v15);
          v18 = (v2 + 1);
          do
          {
            if (*v17 < 0)
              v19 = -0.5;
            else
              v19 = 0.5;
            *v17 = (uint64_t)(v19 + (double)*v17 * a2);
            ++v17;
            --v18;
          }
          while (v18);
        }
        ++v15;
      }
      while (v15 != v2);
    }
    else
    {
      v16 = 1;
    }
    v20 = *(_DWORD *)(this + 160);
    if (v20)
    {
      v21 = 0;
      v22 = 0;
      v23 = (v16 * (v2 + 2)) >> 1;
      do
      {
        if (v16)
        {
          v24 = 0;
          v25 = 0;
          v26 = *(_QWORD *)(this + 144);
          v27 = 2;
          v28 = 1;
          do
          {
            v29 = 0;
            v30 = v21 + (v24 >> 1);
            ++v25;
            do
            {
              v31 = *(_QWORD *)(v26 + 8 * (v30 + v29));
              if (v31 < 0)
                v32 = -0.5;
              else
                v32 = 0.5;
              *(_QWORD *)(v26 + 8 * (v30 + v29++)) = (uint64_t)(v32 + (double)v31 * a2);
            }
            while (v28 != v29);
            ++v28;
            v24 += v27;
            v27 += 2;
          }
          while (v25 != v16);
        }
        ++v22;
        v21 += v23;
      }
      while (v22 != v20);
    }
  }
  return this;
}

unint64_t CTPelAccum::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v4 = 8;
  else
    v4 = 16;
  v5 = sizeObject<DgnPrimArray<double>>(a1 + 64, a2);
  v6 = sizeObject<unsigned long long>(a1 + 80, a2);
  v7 = sizeObject<unsigned long long>(a1 + 104, a2);
  v8 = sizeObject<DgnPrimArray<double>>(a1 + 128, a2);
  v9 = sizeObject<unsigned long long>(a1 + 144, a2);
  if (a2 == 3)
    v10 = 0;
  else
    v10 = v4;
  v11 = 12;
  if (a2 == 3)
    v11 = 0;
  return (v11 & 0xFFFFFFFFFFFFFFFDLL | (2 * (a2 != 3)))
       + v5
       + v6
       + v7
       + v8
       + v9
       + ((2 * (a2 != 3)) | (8 * (a2 != 3)))
       + v10;
}

BOOL CTPelAccum::adaptOneFrame(uint64_t *a1, unsigned int a2, int a3, AdaptStats *a4, int a5, uint64_t a6, double a7, double a8)
{
  _BOOL8 v8;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double ComponentProbs;
  unsigned int v23;
  _BOOL4 v24;
  unint64_t v25;
  unsigned int v26;
  __n128 v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  char v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int *v48;
  int v49;
  int v50;
  unint64_t v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  char v64;
  unint64_t v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  char *v70;
  double v71;
  double v72;
  unsigned int v73;
  int v74;
  double v75;
  double v76;
  _DWORD *v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  _DWORD *v81;
  unsigned int v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  BOOL v91;
  int v92;
  uint64_t v93;
  int *v94;
  uint64_t *v95;
  uint64_t *v96;
  double v97;
  uint64_t v98;
  uint64_t *v99;
  int *v100;
  int v101;
  double v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  _BYTE *v107;
  _QWORD *v108;
  uint64_t v109;
  int v110;
  unsigned int *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  _BOOL4 v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  _QWORD *v131;
  uint64_t v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  _BOOL4 v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  _QWORD *v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  int *v150;
  uint64_t *v151;
  double v152;
  uint64_t v153;
  uint64_t *v154;
  int *v155;
  int v156;
  double v157;
  uint64_t v158;
  BOOL v159;
  BOOL v160;
  int v161;
  uint64_t v162;
  uint64_t *v163;
  unsigned int *v164;
  BOOL v165;
  char v166;
  _BYTE *v167;
  double v168;
  uint64_t v169;
  unsigned int *v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  char v180;
  char v181;
  int v182;
  uint64_t v183;
  uint64_t *v184;
  _BYTE *v185;
  unsigned int *v186;
  uint64_t v187;
  double v188;
  unsigned __int8 *v189;
  uint64_t v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  double v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  unsigned int v202;
  uint64_t *v203;
  _QWORD *v204;
  _QWORD *v205;
  int v206;
  int v207;
  int v208;
  double v209;
  uint64_t v210;
  double v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  int v219;
  char *v220;
  unsigned int v221;
  int v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t v233;
  int v235;
  unsigned int v236;
  uint64_t v237;
  unsigned int v238;
  AdaptStats *v239;
  unint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  uint64_t v244;
  unsigned int *v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  int64_t v249;
  int v250;
  _BOOL4 v251;
  BOOL v252;
  unsigned int v253;
  unsigned int v254;
  _QWORD v255[2];
  uint64_t *v256;
  int v257;
  _QWORD v258[2];
  _QWORD v259[2];
  void *v260[2];
  void *v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  void *v267;
  uint64_t v268;
  _BYTE *v269;
  unint64_t v270;
  _QWORD v271[2];
  _BYTE v272[40];
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  int v282;

  if (a7 != 0.0)
  {
    v15 = a2;
    v282 = 0;
    v281 = 0;
    v17 = *(unsigned __int16 *)(*(_QWORD *)(*a1 + 288) + 2 * a2);
    v280 = 0u;
    v279 = 0u;
    v278 = 0u;
    v277 = 0u;
    v276 = 0u;
    v275 = 0u;
    v274 = 0u;
    v273 = 0u;
    PelStats::resetStats((PelStats *)v272);
    if (!*(_DWORD *)(a6 + 8))
      a6 = PelScorer::setFrameStaticsForGenoneAdapt((PelScorer *)a1[1], v17, a3, (PelStats *)v272, v18, v19, v20, v21);
    v271[0] = 0;
    v271[1] = 0;
    DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v271, (_QWORD *)a6, 0, *(_DWORD *)(a6 + 8));
    ComponentProbs = PelScorer::getComponentProbs((PelScorer *)a1[1], v15, (uint64_t)&v281, a5);
    if (ComponentProbs == 0.0)
    {
      v8 = 0;
LABEL_245:
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v271);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v281);
      return v8;
    }
    if (*((_BYTE *)a1 + 24))
      v252 = *((_BYTE *)a1 + 21) == 0;
    else
      v252 = 0;
    v242 = *(_DWORD *)(*a1 + 16);
    v239 = a4;
    v23 = v15;
    v24 = v242 != 1 || *((_BYTE *)a1 + 20) != 0;
    v269 = 0;
    v270 = 0;
    v267 = 0;
    v268 = 0;
    v25 = (*((_DWORD *)a1 + 4) + 1);
    v265 = 0;
    v26 = realloc_array(0, &v265, v25, 0, 0, 1);
    v269 = v265;
    v270 = __PAIR64__(v26, v25);
    *(_BYTE *)v265 = 1;
    LODWORD(v28) = *((_DWORD *)a1 + 4);
    if ((_DWORD)v28)
    {
      v29 = 0;
      do
      {
        v269[v29 + 1] = *(_BYTE *)(v271[0] + v29);
        v28 = *((unsigned int *)a1 + 4);
        ++v29;
      }
      while (v29 < v28);
    }
    if (!*((_BYTE *)a1 + 25))
      v24 = 0;
    if (*((_BYTE *)a1 + 24))
    {
      v30 = (v28 + 2 + (v28 + 2) * v28) >> 1;
      v31 = 2 * v28 + 2;
      if (v24)
        v32 = v31;
      else
        v32 = v30;
      v33 = v267;
      if (HIDWORD(v268) < v32)
      {
        v265 = 0;
        HIDWORD(v268) = realloc_array(v267, &v265, 8 * v32, 8 * v268, 8 * v268, 1) >> 3;
        v33 = v265;
        v267 = v265;
      }
      LODWORD(v268) = v32;
      *v33 = 0x400000;
      if (v24)
        v33[1] = 0;
      LODWORD(v28) = *((_DWORD *)a1 + 4);
      v34 = (v28 + 1);
      v15 = v23;
      if (v34 >= 2)
      {
        v35 = v269;
        v36 = 1;
        do
        {
          v37 = 0;
          v38 = v36++;
          if (v36 <= 1)
            v39 = 1;
          else
            v39 = v36;
          if (v24)
            v40 = v38;
          else
            v40 = 1;
          v41 = 2 * v38;
          if (v24)
            v39 = 2;
          else
            v41 = (v36 * v38) >> 1;
          do
          {
            if (v37)
              v42 = 8;
            else
              v42 = 15;
            v33[v41++] = ((unint64_t)v35[v38] << v42)
                       * (unint64_t)v35[v37];
            v37 += v40;
            --v39;
          }
          while (v39);
        }
        while (v36 != v34);
      }
    }
    v265 = 0;
    v266 = 0;
    v263 = 0;
    v264 = 0;
    if (v252 || *((_BYTE *)a1 + 23))
    {
      v43 = v28 + 1;
      if ((_DWORD)v28 == -1)
      {
        v44 = 0;
        v45 = 0;
        v46 = -1;
      }
      else
      {
        v261 = 0;
        HIDWORD(v266) = realloc_array(0, &v261, 4 * (v28 + 1), 0, 0, 1) >> 2;
        v265 = v261;
        v46 = *((_DWORD *)a1 + 4);
        v45 = HIDWORD(v264);
        v44 = v46 + 1;
      }
      LODWORD(v266) = v43;
      v47 = (v44 * (v46 + 2)) >> 1;
      if (v45 < v47)
      {
        v261 = 0;
        HIDWORD(v264) = realloc_array(v263, &v261, 8 * ((v44 * (v46 + 2)) >> 1), 8 * v264, 8 * v264, 1) >> 3;
        v263 = v261;
      }
      LODWORD(v264) = v47;
    }
    v238 = v15;
    v237 = v15;
    v48 = (int *)(*(_QWORD *)(*a1 + 456) + 4 * v15);
    v50 = *v48;
    v49 = v48[1];
    v261 = 0;
    v262 = 0;
    v51 = (v49 - v50);
    if (v49 == v50)
    {
      v52 = 0;
      LODWORD(v262) = v49 - v50;
    }
    else
    {
      v260[0] = 0;
      v53 = realloc_array(0, v260, 16 * v51, 0, 0, 1);
      v54 = 0;
      v55 = v53 >> 4;
      v52 = v260[0];
      v261 = v260[0];
      LODWORD(v262) = v49 - v50;
      HIDWORD(v262) = v55;
      v56 = v281;
      v57 = (char *)v260[0] + 8;
      v51 = (v49 - v50);
      do
      {
        *v57 = v54;
        v27.n128_f64[0] = *(double *)(v56 + 8 * v54) / ComponentProbs;
        *((_QWORD *)v57 - 1) = v27.n128_u64[0];
        ++v54;
        v57 += 4;
      }
      while (v49 - v50 != v54);
    }
    v240 = v51;
    mrec_qsort_r<CompAndProb>((unint64_t)v52, v51, 16, v27);
    v260[0] = 0;
    v260[1] = 0;
    v259[0] = 0;
    v259[1] = 0;
    v258[0] = 0;
    v258[1] = 0;
    v255[1] = 0;
    v256 = 0;
    v257 = 0;
    v255[0] = 0;
    v58 = *a1;
    if (v242 == 1)
    {
      DgnArray<DgnArray<DgnPrimArray<int>>>::copyArraySlice((uint64_t)v255, (_QWORD *)(v58 + 184), 0, *(_DWORD *)(v58 + 192));
      v58 = *a1;
      v236 = *(_DWORD *)(*a1 + 152);
      v60 = *(_DWORD *)(*a1 + 160);
      v59 = *(_DWORD *)(*a1 + 164);
      v61 = *((_DWORD *)a1 + 4);
      if (*((_BYTE *)a1 + 20))
        v62 = 1;
      else
        v62 = *((_DWORD *)a1 + 4);
      v63 = v61 * v62;
      if (v61 * v62 && !v257)
      {
        v256 = MemChunkAlloc(8 * (v61 * v62), 0);
        v257 = v63;
        v58 = *a1;
      }
      v64 = v60 + v59;
    }
    else
    {
      v236 = 0;
      v64 = 0;
    }
    v65 = v240;
    v66 = 0.0;
    if (v49 == v50)
    {
LABEL_244:
      DgnArray<DgnArray<DgnPrimArray<int>>>::releaseAll((uint64_t)v255);
      v8 = v66 > 0.0;
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v256);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v258);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v259);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v260);
      DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v261);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v263);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v265);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v267);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v269);
      goto LABEL_245;
    }
    v67 = 0;
    v68 = 1.0 / (double)(1 << v64);
    v69 = a7 * 256.0;
    v235 = *(_DWORD *)(*(_QWORD *)(v58 + 272) + 4 * v17);
    while (1)
    {
      v70 = (char *)v261 + 16 * v67;
      v71 = *(double *)v70;
      v72 = v69 * *(double *)v70 + 0.5;
      v73 = v72;
      if (v72)
        break;
LABEL_243:
      if (++v67 == v65)
        goto LABEL_244;
    }
    v241 = v67;
    v74 = *((_DWORD *)v70 + 2);
    a1[7] += v73;
    if (v239)
      AdaptStats::update(v239, *(_DWORD *)(*(_QWORD *)(*a1 + 416) + 4 * v237), v72, 256);
    v75 = (double)v73 + 0.5;
    if (v242 == 1)
    {
      PelMgr::unpackPelMixtureComponent(*a1, v238, v74, (uint64_t)v260, (uint64_t)v258);
    }
    else
    {
      if (!*((_BYTE *)a1 + 26))
        v75 = (double)v73 * 40.7436654 + 0.5;
      PelMgr::unpackPelMixtureComponent(*a1, v238, v74, (uint64_t)v260, (uint64_t)v259, (double)v73 * 40.7436654 + 0.5);
    }
    if (v252 || *((_BYTE *)a1 + 23))
    {
      v77 = v265;
      v78 = 1;
      *(_DWORD *)v265 = 1;
      LODWORD(v79) = *((_DWORD *)a1 + 4);
      if (!(_DWORD)v79)
        goto LABEL_80;
      v80 = 0;
      v81 = v260[0];
      do
      {
        v77[v80 + 1] = v81[v80];
        v79 = *((unsigned int *)a1 + 4);
        ++v80;
      }
      while (v80 < v79);
      v78 = v79 + 1;
      if ((_DWORD)v79 == -1)
      {
        v78 = 0;
        LODWORD(v79) = -1;
      }
      else
      {
LABEL_80:
        v82 = 0;
        v83 = 0;
        v84 = v263;
        v85 = 2;
        v86 = 1;
        do
        {
          v87 = 0;
          v88 = v77[v83];
          v89 = v83 + 1;
          do
          {
            if (v87 | v83)
              v90 = 15;
            else
              v90 = 22;
            if (v87)
              v91 = v83 == 0;
            else
              v91 = 1;
            if (!v91)
              v90 = 8;
            v84[(v82 >> 1) + v87] = (v88 << v90) * v77[v87];
            ++v87;
          }
          while (v86 != v87);
          ++v86;
          v82 += v85;
          v85 += 2;
          ++v83;
        }
        while (v89 != v78);
      }
    }
    else
    {
      LODWORD(v79) = *((_DWORD *)a1 + 4);
      v78 = v79 + 1;
    }
    v249 = ((unint64_t)v75 & 0x3FFFFFFFFFFFLL) << 10;
    v253 = (v78 * ((_DWORD)v79 + 2)) >> 1;
    v254 = v78;
    if (v242 == 1)
    {
      v92 = *((unsigned __int8 *)a1 + 20);
      if (*((_BYTE *)a1 + 20))
      {
        if ((_DWORD)v79)
        {
          v93 = 0;
          v94 = (int *)v258[0];
          v95 = (uint64_t *)v255[0];
          v96 = v256;
          do
          {
            v97 = 0.0;
            if (v236)
            {
              v98 = v236;
              v99 = v95;
              v100 = v94;
              do
              {
                v101 = *v100++;
                v102 = (double)v101;
                v103 = *v99;
                v99 += 2;
                v76 = (double)*(int *)(*(_QWORD *)(v103 + 16 * v93) + 4 * v93);
                v97 = v97 + v102 * v76;
                --v98;
              }
              while (v98);
            }
            *(double *)&v96[v93++] = v68 * v97;
          }
          while (v93 != v79);
          goto LABEL_156;
        }
      }
      else if ((_DWORD)v79)
      {
        v147 = 0;
        v148 = v256;
        do
        {
          v149 = 0;
          v150 = (int *)v258[0];
          v151 = (uint64_t *)v255[0];
          do
          {
            v152 = 0.0;
            if (v236)
            {
              v153 = v236;
              v154 = v151;
              v155 = v150;
              do
              {
                v156 = *v155++;
                v157 = (double)v156;
                v158 = *v154;
                v154 += 2;
                v76 = (double)*(int *)(*(_QWORD *)(v158 + 16 * v147) + 4 * v149);
                v152 = v152 + v157 * v76;
                --v153;
              }
              while (v153);
            }
            *(double *)&v148[(v79 * v147 + v149++)] = v68 * v152;
          }
          while (v149 != v79);
          ++v147;
        }
        while (v147 != v79);
LABEL_156:
        v251 = *((_BYTE *)a1 + 24) != 0;
        v159 = (_DWORD)v79 != 0;
        if (*((_BYTE *)a1 + 24))
          v160 = (_DWORD)v79 == 0;
        else
          v160 = 1;
        if (!v160)
        {
          v161 = 0;
          v162 = 0;
          v163 = v256;
          v164 = (unsigned int *)v260[0];
          if (v92)
            v165 = *((_BYTE *)a1 + 25) == 0;
          else
            v165 = 1;
          v166 = v165;
          v167 = v269;
          do
          {
            if (v92)
            {
              LODWORD(v76) = v164[v162];
              v168 = *(double *)&v163[v162] * (double)*(unint64_t *)&v76;
            }
            else
            {
              v168 = 0.0;
              v169 = v79;
              v170 = v164;
              v171 = v161;
              do
              {
                v172 = *v170++;
                v168 = v168 + *(double *)&v163[v171++] * (double)v172;
                --v169;
              }
              while (v169);
            }
            if (v168 < 0.0)
              v76 = -0.5;
            else
              v76 = 0.5;
            v173 = (uint64_t)(v76 + v168 * (double)v249);
            if ((v166 & 1) != 0)
            {
              if (v78)
              {
                v174 = 0;
                v175 = *(_QWORD *)(a1[8] + 16 * v162);
                do
                {
                  if (v174)
                    v176 = 8;
                  else
                    v176 = 15;
                  *(_QWORD *)(v175 + 8 * v174) += ((v173 << v176) * v167[v174]) >> 18;
                  ++v174;
                }
                while (v78 != v174);
              }
            }
            else
            {
              v177 = 0;
              v178 = *(_QWORD *)(a1[8] + 16 * v162);
              v179 = 1;
              v180 = 15;
              do
              {
                v181 = v179;
                *(_QWORD *)(v178 + 8 * v177) += ((v173 << v180) * v167[v177 * (v162 + 1)]) >> 18;
                v180 = 8;
                v177 = 1;
                v179 = 0;
              }
              while ((v181 & 1) != 0);
            }
            ++v162;
            v161 += v79;
          }
          while (v162 != v79);
        }
        if (v252)
        {
LABEL_191:
          v182 = 0;
          v183 = 0;
          v184 = v256;
          v185 = v269;
          v186 = (unsigned int *)v265;
          if (v79 <= 1)
            v187 = 1;
          else
            v187 = v79;
          do
          {
            if (v92)
            {
              LOBYTE(v76) = v185[v183 + 1];
              v188 = *(double *)&v184[v183] * (double)*(unint64_t *)&v76;
            }
            else
            {
              v188 = 0.0;
              v189 = v185 + 1;
              v190 = v187;
              v191 = v182;
              do
              {
                v192 = *v189++;
                v188 = v188 + *(double *)&v184[v191++] * (double)v192;
                --v190;
              }
              while (v190);
            }
            if (v188 < 0.0)
              v76 = -0.5;
            else
              v76 = 0.5;
            if (v78)
            {
              v193 = 0;
              v194 = v76 + v188 * (double)v249;
              v195 = *(_QWORD *)(a1[16] + 16 * v183);
              do
              {
                if (v193)
                  v196 = 8;
                else
                  v196 = 15;
                *(_QWORD *)(v195 + 8 * v193) += (((uint64_t)v194 << v196) * v186[v193]) >> 18;
                ++v193;
              }
              while (v78 != v193);
            }
            ++v183;
            v182 += v79;
          }
          while (v183 != v187);
LABEL_208:
          v197 = *((unsigned int *)a1 + 24);
          if ((_DWORD)v197)
          {
            v198 = 0;
            v199 = 0;
            v200 = 0;
            v201 = 0;
            v202 = 0;
            v203 = v256;
            v204 = v267;
            v205 = v263;
            if (v78 <= 1)
              v206 = 1;
            else
              v206 = v78;
            v207 = 1;
            while (1)
            {
              if (v92)
              {
                v208 = v200;
              }
              else
              {
                v208 = v201 + v202 * v79;
                if (v201 + 1 <= v202)
                {
                  ++v201;
                }
                else
                {
                  ++v202;
                  v201 = 0;
                }
              }
              v209 = *(double *)&v203[v208];
              v210 = v207 & 0x7FFFFFFF;
              if (v209 < 0.0)
                v211 = -0.5;
              else
                v211 = 0.5;
              v212 = (uint64_t)(v211 + v209 * (double)v249);
              if (!v251)
                goto LABEL_234;
              if (v92 && *((_BYTE *)a1 + 25))
                break;
              if (v78)
              {
                v221 = 0;
                v222 = 0;
                v223 = a1[10];
                v224 = 2;
                v225 = 1;
                do
                {
                  v226 = 0;
                  ++v222;
                  do
                  {
                    *(_QWORD *)(v223 + 8 * (v198 + (v221 >> 1) + v226)) += (v204[(v221 >> 1)
                                                                                               + v226]
                                                                                          * v212) >> 18;
                    ++v226;
                  }
                  while (v225 != v226);
                  ++v225;
                  v221 += v224;
                  v224 += 2;
                  v78 = v254;
                }
                while (v222 != v254);
LABEL_234:
                if ((v252 || *((_BYTE *)a1 + 23)) && v78)
                {
                  v227 = 0;
                  v228 = 0;
                  v229 = a1[18];
                  v230 = 2;
                  v231 = 1;
                  do
                  {
                    v232 = v227 >> 1;
                    ++v228;
                    v233 = v231;
                    do
                    {
                      *(_QWORD *)(v229 + 8 * (v198 + v232)) += (v205[v232] * v212) >> 18;
                      ++v232;
                      --v233;
                    }
                    while (v233);
                    ++v231;
                    v227 += v230;
                    v230 += 2;
                  }
                  while (v228 != v206);
                }
              }
              ++v200;
              v199 += 3;
              v207 = v210 + 1;
              v198 += v253;
              if (v200 == v197)
                goto LABEL_242;
            }
            v213 = 0;
            v214 = a1[10];
            v215 = 1;
            v216 = 1;
            do
            {
              v217 = 0;
              v218 = v215;
              v219 = v199 + ((v213 + v213 * v213) >> 1);
              v220 = (char *)v204 + 16 * v210 * v213;
              do
              {
                *(_QWORD *)(v214 + 8 * (v219 + v217)) += (*(_QWORD *)&v220[8 * v217] * v212) >> 18;
                ++v217;
              }
              while (v216 != v217);
              v215 = 0;
              ++v216;
              v213 = 1;
            }
            while ((v218 & 1) != 0);
            goto LABEL_234;
          }
          goto LABEL_242;
        }
LABEL_189:
        if (!*((_BYTE *)a1 + 23) || !v159)
          goto LABEL_208;
        goto LABEL_191;
      }
      v251 = *((_BYTE *)a1 + 24) != 0;
      if (v252)
        goto LABEL_208;
      v159 = 0;
      goto LABEL_189;
    }
    if (!(_DWORD)v79)
    {
LABEL_242:
      v66 = v66 + v71;
      v65 = v240;
      v67 = v241;
      if (v66 > a8)
        goto LABEL_244;
      goto LABEL_243;
    }
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v248 = v259[0];
    v250 = *((unsigned __int8 *)a1 + 27);
    v243 = v74 + v235;
    v245 = (unsigned int *)v260[0];
    v247 = *((unsigned __int8 *)a1 + 24);
    v107 = v269;
    v246 = v79;
    v108 = v267;
    v244 = v271[0];
    v109 = v78;
    v110 = 2;
    v111 = (unsigned int *)v265;
    while (1)
    {
      v112 = (*(_DWORD *)(v248 + 4 * v106) * *(_DWORD *)(v248 + 4 * v106));
      v113 = v249 + (v112 >> 1);
      v114 = v113 / v112;
      if (v250)
      {
        v115 = v113 / v112;
        if (v106 < *((unsigned int *)a1 + 8))
          v115 = (uint64_t)((double)(unint64_t)v249
                         * *(double *)(*(_QWORD *)(a1[5] + 8) + 8 * (v243 + *(_DWORD *)a1[5] * v106))
                         + 0.5);
      }
      else
      {
        v115 = v113 / v112;
      }
      if (!v247)
        goto LABEL_119;
      v116 = v245[v106];
      v117 = v114 * v116;
      if (*((_BYTE *)a1 + 25))
      {
        if (!*((_BYTE *)a1 + 26))
        {
          v118 = 0;
          v119 = *(_QWORD *)(a1[8] + 16 * v106);
          v120 = a1[10];
          v121 = 1;
          v122 = 15;
          v123 = 1;
          do
          {
            v124 = 0;
            *(_QWORD *)(v119 + 8 * v118) += (uint64_t)(((unint64_t)v107[v118 * (v106 + 1)] << v122)
                                                    * v117) >> 18;
            v125 = v121;
            do
            {
              *(_QWORD *)(v120 + 8 * (v105 + ((v118 + v118 * v118) >> 1) + v124)) += (uint64_t)(v108[2 * ((v110 * v118) >> 1) + v124] * v114) >> 18;
              ++v124;
            }
            while (v123 != v124);
            v121 = 0;
            ++v123;
            v122 = 8;
            v118 = 1;
          }
          while ((v125 & 1) != 0);
          goto LABEL_119;
        }
      }
      else if (!*((_BYTE *)a1 + 26))
      {
        if (v250)
          v137 = v106 < *((unsigned int *)a1 + 8);
        else
          v137 = 1;
        if (v254)
        {
          v138 = 0;
          v139 = 0;
          v140 = *(_QWORD *)(a1[8] + 16 * v106);
          v141 = 2;
          v142 = v267;
          v143 = 1;
          do
          {
            if (v139)
              v144 = 8;
            else
              v144 = 15;
            *(_QWORD *)(v140 + 8 * v139) += (uint64_t)(((unint64_t)v107[v139] << v144) * v117) >> 18;
            if (v137)
            {
              v145 = 0;
              v146 = a1[10];
              do
              {
                *(_QWORD *)(v146 + 8 * (v104 + (v138 >> 1) + v145)) += (v142[(v138 >> 1)
                                                                                           + v145]
                                                                                      * v115) >> 18;
                ++v145;
              }
              while (v143 != v145);
            }
            ++v139;
            ++v143;
            v138 += v141;
            v141 += 2;
          }
          while (v139 != v109);
        }
        goto LABEL_119;
      }
      *(_QWORD *)(a1[13] + 8 * v106) += (uint64_t)(((unint64_t)v75 << 25)
                                                * (*(unsigned __int8 *)(v244 + v106) - v116)) >> 18;
LABEL_119:
      if (v252 || *((_BYTE *)a1 + 23))
      {
        v126 = !v250 || v106 < *((unsigned int *)a1 + 8);
        if (v254)
        {
          v127 = 0;
          v128 = 0;
          v129 = *(_QWORD *)(a1[16] + 16 * v106);
          v130 = 2;
          v131 = v263;
          v132 = 1;
          do
          {
            if (v128)
              v133 = 8;
            else
              v133 = 15;
            *(_QWORD *)(v129 + 8 * v128) += (uint64_t)(((unint64_t)v107[v106 + 1] << v133)
                                                    * v114
                                                    * v111[v128]) >> 18;
            if (v126)
            {
              v134 = v127 >> 1;
              v135 = a1[18];
              v136 = v132;
              do
              {
                *(_QWORD *)(v135 + 8 * (v104 + v134)) += (v131[v134] * v115) >> 18;
                ++v134;
                --v136;
              }
              while (v136);
            }
            ++v128;
            ++v132;
            v127 += v130;
            v130 += 2;
          }
          while (v128 != v109);
        }
      }
      ++v106;
      v105 += 3;
      v110 += 2;
      v104 += v253;
      if (v106 == v246)
        goto LABEL_242;
    }
  }
  return 0;
}

void sub_20980EFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48)
{
  uint64_t v48;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a44);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a46);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a48);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v48 - 168);
  _Unwind_Resume(a1);
}

unint64_t mrec_qsort_r<CompAndProb>(unint64_t result, unint64_t a2, int64_t a3, __n128 a4)
{
  int64_t v5;
  _BOOL4 v6;
  BOOL v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int64_t v33;
  char *v34;
  char v35;
  int v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  _QWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char v66;
  BOOL v67;
  int64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  double v76;
  _BYTE *v77;
  _BYTE *v78;
  double v79;
  double v80;
  double v81;
  double v82;
  uint64_t v83;
  unint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  double v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;

  v5 = -a3;
  v6 = a3 != 8;
  v7 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v8 = 2;
  else
    v8 = a3 != 8;
  if (a2 < 7)
  {
LABEL_5:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v9 = result + a2 * a3;
      v10 = result + a3;
      v11 = result;
      do
      {
        if (v10 > result)
        {
          v12 = v11;
          v13 = v10;
          do
          {
            v14 = v13;
            v13 += v5;
            v15 = *(double *)v14;
            if (*(double *)v13 == *(double *)v14)
            {
              if (*(_DWORD *)(v13 + 8) <= *(_DWORD *)(v14 + 8))
                break;
            }
            else if (*(double *)v13 > *(double *)v14)
            {
              break;
            }
            if (v8)
            {
              v16 = 0;
              v17 = v12 + a3;
              if (v7)
              {
                do
                {
                  v18 = *(_QWORD *)(v17 + 8 * v16);
                  *(_QWORD *)(v17 + 8 * v16) = *(_QWORD *)(v12 + 8 * v16);
                  *(_QWORD *)(v12 + 8 * v16++) = v18;
                }
                while ((unint64_t)a3 >> 3 != v16);
              }
              else
              {
                do
                {
                  v19 = *(_BYTE *)(v17 + v16);
                  *(_BYTE *)(v17 + v16) = *(_BYTE *)(v12 + v16);
                  *(_BYTE *)(v12 + v16++) = v19;
                }
                while (a3 != v16);
              }
            }
            else
            {
              *(_QWORD *)v14 = *(_QWORD *)v13;
              *(double *)v13 = v15;
            }
            v12 += v5;
          }
          while (v13 > result);
        }
        v10 += a3;
        v11 += a3;
      }
      while (v10 < v9);
    }
    return result;
  }
  v20 = (unint64_t)a3 >> 3;
  while (2)
  {
    v21 = (_BYTE *)(result + (a2 >> 1) * a3);
    if (a2 == 7)
      goto LABEL_25;
    v25 = result + (a2 - 1) * a3;
    if (a2 < 0x29)
    {
      v27 = result;
      goto LABEL_110;
    }
    v26 = (a2 >> 3) * a3;
    v27 = result + v26;
    v28 = result + 2 * v26;
    v29 = *(double *)result;
    v30 = *(double *)(result + v26);
    if (*(double *)result == v30)
    {
      if (*(_DWORD *)(result + 8) < *(_DWORD *)(v27 + 8))
        goto LABEL_33;
    }
    else if (*(double *)result > v30)
    {
LABEL_33:
      v31 = *(double *)v28;
      if (v30 == *(double *)v28)
      {
        if (*(_DWORD *)(v27 + 8) < *(_DWORD *)(v28 + 8))
          goto LABEL_127;
      }
      else if (v30 > *(double *)v28)
      {
        goto LABEL_127;
      }
      if (v29 == v31)
      {
        v27 = result + 2 * v26;
        if (*(_DWORD *)(result + 8) < *(_DWORD *)(v28 + 8))
          goto LABEL_127;
      }
      else
      {
        v27 = result + 2 * v26;
        if (v29 > v31)
          goto LABEL_127;
      }
      v27 = result;
      goto LABEL_127;
    }
    v76 = *(double *)v28;
    if (v30 == *(double *)v28)
    {
      if (*(_DWORD *)(v27 + 8) > *(_DWORD *)(v28 + 8))
        goto LABEL_127;
    }
    else if (v30 <= *(double *)v28)
    {
      goto LABEL_127;
    }
    if (v29 != v76)
    {
      v27 = result;
      if (v29 > v76)
        goto LABEL_127;
      goto LABEL_126;
    }
    v27 = result;
    if (*(_DWORD *)(result + 8) >= *(_DWORD *)(v28 + 8))
LABEL_126:
      v27 = result + 2 * v26;
LABEL_127:
    v77 = &v21[-v26];
    v78 = &v21[v26];
    v79 = *(double *)&v21[-v26];
    v80 = *(double *)v21;
    if (v79 == *(double *)v21)
    {
      if (*((_DWORD *)v77 + 2) < *((_DWORD *)v21 + 2))
        goto LABEL_129;
    }
    else if (v79 > *(double *)v21)
    {
LABEL_129:
      v81 = *(double *)v78;
      if (v80 == *(double *)v78)
      {
        if (*((_DWORD *)v21 + 2) < *((_DWORD *)v78 + 2))
          goto LABEL_148;
      }
      else if (v80 > *(double *)v78)
      {
        goto LABEL_148;
      }
      if (v79 == v81)
      {
        v21 += v26;
        if (*((_DWORD *)v77 + 2) < *((_DWORD *)v78 + 2))
          goto LABEL_148;
      }
      else
      {
        v21 += v26;
        if (v79 > v81)
          goto LABEL_148;
      }
      v21 = v77;
      goto LABEL_148;
    }
    v82 = *(double *)v78;
    if (v80 == *(double *)v78)
    {
      if (*((_DWORD *)v21 + 2) > *((_DWORD *)v78 + 2))
        goto LABEL_148;
    }
    else if (v80 <= *(double *)v78)
    {
      goto LABEL_148;
    }
    if (v79 != v82)
    {
      v21 -= v26;
      if (v79 > v82)
        goto LABEL_148;
      goto LABEL_147;
    }
    v21 -= v26;
    if (*((_DWORD *)v77 + 2) >= *((_DWORD *)v78 + 2))
LABEL_147:
      v21 = v78;
LABEL_148:
    v83 = -(uint64_t)v26;
    v75 = v25 - 2 * v26;
    v84 = v25 + v83;
    v85 = *(double *)v75;
    v86 = *(double *)(v25 + v83);
    if (*(double *)v75 == v86)
    {
      if (*(_DWORD *)(v75 + 8) < *(_DWORD *)(v84 + 8))
        goto LABEL_150;
LABEL_154:
      v88 = *(double *)v25;
      if (v86 == *(double *)v25)
      {
        if (*(_DWORD *)(v84 + 8) > *(_DWORD *)(v25 + 8))
          goto LABEL_165;
      }
      else if (v86 <= *(double *)v25)
      {
        goto LABEL_165;
      }
      if (v85 == v88)
      {
        if (*(_DWORD *)(v75 + 8) >= *(_DWORD *)(v25 + 8))
          goto LABEL_110;
      }
      else if (v85 <= v88)
      {
        goto LABEL_110;
      }
      goto LABEL_166;
    }
    if (*(double *)v75 <= v86)
      goto LABEL_154;
LABEL_150:
    v87 = *(double *)v25;
    if (v86 == *(double *)v25)
    {
      if (*(_DWORD *)(v84 + 8) < *(_DWORD *)(v25 + 8))
        goto LABEL_165;
      goto LABEL_158;
    }
    if (v86 > *(double *)v25)
    {
LABEL_165:
      v75 = v25 + v83;
      goto LABEL_166;
    }
LABEL_158:
    if (v85 == v87)
    {
      if (*(_DWORD *)(v75 + 8) >= *(_DWORD *)(v25 + 8))
        goto LABEL_166;
LABEL_110:
      v75 = result + (a2 - 1) * a3;
      goto LABEL_166;
    }
    if (v85 > v87)
      goto LABEL_110;
LABEL_166:
    a4.n128_u64[0] = *(_QWORD *)v27;
    v89 = *(double *)v21;
    if (*(double *)v27 == *(double *)v21)
    {
      if (*(_DWORD *)(v27 + 8) < *((_DWORD *)v21 + 2))
        goto LABEL_168;
LABEL_172:
      v91 = *(double *)v75;
      if (v89 == *(double *)v75)
      {
        if (*((_DWORD *)v21 + 2) > *(_DWORD *)(v75 + 8))
          goto LABEL_25;
      }
      else if (v89 <= *(double *)v75)
      {
        goto LABEL_25;
      }
      if (a4.n128_f64[0] == v91)
      {
        v21 = (_BYTE *)v27;
        if (*(_DWORD *)(v27 + 8) < *(_DWORD *)(v75 + 8))
          goto LABEL_25;
      }
      else
      {
        v21 = (_BYTE *)v27;
        if (a4.n128_f64[0] > v91)
          goto LABEL_25;
      }
      v21 = (_BYTE *)v75;
      goto LABEL_25;
    }
    if (*(double *)v27 <= *(double *)v21)
      goto LABEL_172;
LABEL_168:
    v90 = *(double *)v75;
    if (v89 == *(double *)v75)
    {
      if (*((_DWORD *)v21 + 2) < *(_DWORD *)(v75 + 8))
        goto LABEL_25;
    }
    else if (v89 > *(double *)v75)
    {
      goto LABEL_25;
    }
    if (a4.n128_f64[0] == v90)
    {
      v21 = (_BYTE *)v75;
      if (*(_DWORD *)(v27 + 8) >= *(_DWORD *)(v75 + 8))
        goto LABEL_184;
    }
    else
    {
      v21 = (_BYTE *)v75;
      if (a4.n128_f64[0] <= v90)
LABEL_184:
        v21 = (_BYTE *)v27;
    }
LABEL_25:
    if (v8)
    {
      if (v7)
      {
        v22 = (uint64_t *)result;
        v23 = (unint64_t)a3 >> 3;
        do
        {
          v24 = *v22;
          *v22++ = *(_QWORD *)v21;
          *(_QWORD *)v21 = v24;
          v21 += 8;
          --v23;
        }
        while (v23);
      }
      else
      {
        v33 = a3;
        v34 = (char *)result;
        do
        {
          v35 = *v34;
          *v34++ = *v21;
          *v21++ = v35;
          --v33;
        }
        while (v33);
      }
    }
    else
    {
      v32 = *(double *)result;
      *(_QWORD *)result = *(_QWORD *)v21;
      *(double *)v21 = v32;
    }
    v36 = 0;
    v37 = result + a3;
    v38 = (unint64_t *)(result + (a2 - 1) * a3);
    v39 = v38;
    v40 = (unint64_t *)(result + a3);
    v41 = (_QWORD *)(result + a3);
    while (1)
    {
LABEL_40:
      if (v40 > v39)
        goto LABEL_56;
      a4.n128_u64[0] = *v40;
      if (*(double *)v40 == *(double *)result)
        break;
      if (*(double *)v40 <= *(double *)result)
        goto LABEL_56;
LABEL_76:
      v40 = (unint64_t *)((char *)v40 + a3);
    }
    v42 = *((_DWORD *)v40 + 2);
    v43 = *(_DWORD *)(result + 8);
    if (v42 == v43)
    {
      if (v8)
      {
        v44 = 0;
        if (v7)
        {
          do
          {
            v45 = v41[v44];
            v41[v44] = v40[v44];
            v40[v44++] = v45;
          }
          while (v20 != v44);
        }
        else
        {
          do
          {
            v46 = *((_BYTE *)v41 + v44);
            *((_BYTE *)v41 + v44) = *((_BYTE *)v40 + v44);
            *((_BYTE *)v40 + v44++) = v46;
          }
          while (a3 != v44);
        }
      }
      else
      {
        v55 = *v41;
        *v41 = a4.n128_u64[0];
        *v40 = v55;
      }
      v41 = (_QWORD *)((char *)v41 + a3);
      v36 = 1;
      goto LABEL_76;
    }
    if (v42 < v43)
      goto LABEL_76;
LABEL_56:
    while (v40 <= v39)
    {
      a4.n128_u64[0] = *v39;
      if (*(double *)v39 == *(double *)result)
      {
        v47 = *((_DWORD *)v39 + 2);
        v48 = *(_DWORD *)(result + 8);
        if (v47 == v48)
        {
          if (v8)
          {
            v49 = 0;
            if (v7)
            {
              do
              {
                v50 = v39[v49];
                v39[v49] = v38[v49];
                v38[v49++] = v50;
              }
              while (v20 != v49);
            }
            else
            {
              do
              {
                v51 = *((_BYTE *)v39 + v49);
                *((_BYTE *)v39 + v49) = *((_BYTE *)v38 + v49);
                *((_BYTE *)v38 + v49++) = v51;
              }
              while (a3 != v49);
            }
          }
          else
          {
            *v39 = *v38;
            *v38 = a4.n128_u64[0];
          }
          v38 = (unint64_t *)((char *)v38 + v5);
          v36 = 1;
        }
        else if (v47 < v48)
        {
LABEL_68:
          if (v8)
          {
            v52 = 0;
            if (v7)
            {
              do
              {
                v53 = v40[v52];
                v40[v52] = v39[v52];
                v39[v52++] = v53;
              }
              while (v20 != v52);
            }
            else
            {
              do
              {
                v54 = *((_BYTE *)v40 + v52);
                *((_BYTE *)v40 + v52) = *((_BYTE *)v39 + v52);
                *((_BYTE *)v39 + v52++) = v54;
              }
              while (a3 != v52);
            }
          }
          else
          {
            v56 = *v40;
            *v40 = a4.n128_u64[0];
            *v39 = v56;
          }
          v40 = (unint64_t *)((char *)v40 + a3);
          v39 = (unint64_t *)((char *)v39 + v5);
          v36 = 1;
          goto LABEL_40;
        }
      }
      else if (*(double *)v39 > *(double *)result)
      {
        goto LABEL_68;
      }
      v39 = (unint64_t *)((char *)v39 + v5);
    }
    v57 = result + a2 * a3;
    if (v36)
    {
      v58 = (char *)v40 - (char *)v41;
      if ((uint64_t)((uint64_t)v41 - result) >= (char *)v40 - (char *)v41)
        v59 = (char *)v40 - (char *)v41;
      else
        v59 = (unint64_t)v41 - result;
      if (v59)
      {
        if (v7)
        {
          v60 = (uint64_t *)((char *)v40 - v59);
          v61 = v59 >> 3;
          v62 = (uint64_t *)result;
          do
          {
            v63 = *v62;
            *v62++ = *v60;
            *v60++ = v63;
            --v61;
          }
          while (v61);
        }
        else
        {
          v64 = -(uint64_t)v59;
          v65 = (char *)result;
          do
          {
            v66 = *v65;
            *v65++ = *((_BYTE *)v40 + v64);
            *((_BYTE *)v40 + v64) = v66;
            v67 = __CFADD__(v64++, 1);
          }
          while (!v67);
        }
      }
      v68 = (char *)v38 - (char *)v39;
      v69 = v57 - ((_QWORD)v38 + a3);
      if ((char *)v38 - (char *)v39 < (uint64_t)v69)
        v69 = (char *)v38 - (char *)v39;
      if (v69)
      {
        if (v7)
        {
          v70 = (unint64_t *)(v57 - v69);
          v71 = v69 >> 3;
          do
          {
            v72 = *v40;
            *v40++ = *v70;
            *v70++ = v72;
            --v71;
          }
          while (v71);
        }
        else
        {
          v73 = -(uint64_t)v69;
          do
          {
            v74 = *(_BYTE *)v40;
            *(_BYTE *)v40 = *(_BYTE *)(v57 + v73);
            v40 = (unint64_t *)((char *)v40 + 1);
            *(_BYTE *)(v57 + v73) = v74;
            v67 = __CFADD__(v73++, 1);
          }
          while (!v67);
        }
      }
      if (v58 > a3)
        result = mrec_qsort_r<CompAndProb>(a4);
      if (v68 > a3)
      {
        result = v57 - v68;
        a2 = v68 / (unint64_t)a3;
        v7 = (((v57 - v68) | a3) & 7) == 0;
        if ((((v57 - v68) | a3) & 7) != 0)
          v8 = 2;
        else
          v8 = v6;
        if (a2 < 7)
          goto LABEL_5;
        continue;
      }
    }
    else if ((uint64_t)(a2 * a3) > a3)
    {
      v92 = result;
      do
      {
        if (v37 > result)
        {
          v93 = v92;
          v94 = v37;
          do
          {
            v95 = v94;
            v94 += v5;
            v96 = *(double *)v95;
            if (*(double *)v94 == *(double *)v95)
            {
              if (*(_DWORD *)(v94 + 8) <= *(_DWORD *)(v95 + 8))
                break;
            }
            else if (*(double *)v94 > *(double *)v95)
            {
              break;
            }
            if (v8)
            {
              v97 = 0;
              v98 = v93 + a3;
              if (v7)
              {
                do
                {
                  v99 = *(_QWORD *)(v98 + 8 * v97);
                  *(_QWORD *)(v98 + 8 * v97) = *(_QWORD *)(v93 + 8 * v97);
                  *(_QWORD *)(v93 + 8 * v97++) = v99;
                }
                while (v20 != v97);
              }
              else
              {
                do
                {
                  v100 = *(_BYTE *)(v98 + v97);
                  *(_BYTE *)(v98 + v97) = *(_BYTE *)(v93 + v97);
                  *(_BYTE *)(v93 + v97++) = v100;
                }
                while (a3 != v97);
              }
            }
            else
            {
              *(_QWORD *)v95 = *(_QWORD *)v94;
              *(double *)v94 = v96;
            }
            v93 += v5;
          }
          while (v94 > result);
        }
        v37 += a3;
        v92 += a3;
      }
      while (v37 < v57);
    }
    return result;
  }
}

uint64_t CTPelAccum::addModelRelevance(uint64_t result, _QWORD *a2, unsigned int a3)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v3 = *(_DWORD *)(*(_QWORD *)result + 16);
  v4 = v3 == 1 && *(_BYTE *)(result + 20) == 0;
  v5 = *(_QWORD *)(result + 56);
  if ((unint64_t)((double)v5 * 0.00390625 + 0.5) < a3)
  {
    *(_QWORD *)(result + 56) = *a2 + v5;
    if (!*(_BYTE *)(result + 25))
      v4 = 1;
    v6 = !v4 && *(_BYTE *)(result + 21) == 0;
    if (*(_BYTE *)(result + 24))
    {
      if (!*(_BYTE *)(result + 26))
      {
        v7 = v3 == 1 && *(_BYTE *)(result + 20) == 0;
        if (!*(_BYTE *)(result + 25))
          v7 = 1;
        v8 = *(unsigned int *)(result + 16);
        if (v7)
          v9 = (v8 + 1);
        else
          v9 = 2;
        if ((_DWORD)v8)
        {
          v10 = 0;
          do
          {
            if ((_DWORD)v9)
            {
              v11 = 0;
              v12 = 16 * v10;
              v13 = v10 + 1;
              if (v6)
                v14 = v10 + 1;
              else
                v14 = 1;
              v15 = *(_QWORD *)(a2[1] + v12);
              v16 = *(_QWORD **)(*(_QWORD *)(result + 64) + v12);
              v17 = v9;
              do
              {
                *v16++ += *(_QWORD *)(v15 + 8 * v11);
                v11 += v14;
                --v17;
              }
              while (v17);
            }
            else
            {
              v13 = v10 + 1;
            }
            v10 = v13;
          }
          while (v13 != v8);
        }
        v18 = *(unsigned int *)(result + 96);
        if ((_DWORD)v18)
        {
          v19 = 0;
          v20 = 0;
          do
          {
            v21 = v20 + 1;
            if ((_DWORD)v9)
            {
              v22 = 0;
              v23 = 0;
              if (v6)
                v24 = v20 + 1;
              else
                v24 = 1;
              v25 = *(_QWORD *)(a2[3] + 16 * v20);
              v26 = *(_QWORD *)(result + 80);
              v27 = 2;
              v28 = 1;
              do
              {
                v29 = 0;
                v30 = 0;
                v31 = *(_QWORD *)(v25 + 16 * (v24 * v23++));
                do
                {
                  *(_QWORD *)(v26 + 8 * (v19 + (v22 >> 1) + v30++)) += *(_QWORD *)(v31 + 8 * v29);
                  v29 += v24;
                }
                while (v28 != v30);
                ++v28;
                v22 += v27;
                v27 += 2;
              }
              while (v23 != v9);
            }
            v19 += (v9 + v9 * v9) >> 1;
            v20 = v21;
          }
          while (v21 != v18);
        }
      }
      if (!*(_BYTE *)(result + 21))
        goto LABEL_44;
    }
    if (*(_BYTE *)(result + 23))
    {
LABEL_44:
      v32 = *(unsigned int *)(result + 16);
      if ((_DWORD)v32)
      {
        v33 = 0;
        v34 = v32 + 1;
        do
        {
          if ((_DWORD)v32 != -1)
          {
            v35 = *(uint64_t **)(a2[1] + 16 * v33);
            v36 = *(_QWORD **)(*(_QWORD *)(result + 128) + 16 * v33);
            v37 = (v32 + 1);
            do
            {
              v38 = *v35++;
              *v36++ += v38;
              --v37;
            }
            while (v37);
          }
          ++v33;
        }
        while (v33 != v32);
      }
      else
      {
        v34 = 1;
      }
      v39 = *(unsigned int *)(result + 160);
      if ((_DWORD)v39)
      {
        v40 = 0;
        v41 = 0;
        v42 = (v34 * (v32 + 2)) >> 1;
        do
        {
          if (v34)
          {
            v43 = 0;
            v44 = 0;
            v45 = *(_QWORD *)(a2[3] + 16 * v41);
            v46 = *(_QWORD *)(result + 144);
            v47 = 2;
            v48 = 1;
            do
            {
              v49 = 0;
              v50 = *(_QWORD *)(v45 + 16 * v44++);
              do
              {
                *(_QWORD *)(v46 + 8 * (v40 + (v43 >> 1) + v49)) += *(_QWORD *)(v50 + 8 * v49);
                ++v49;
              }
              while (v48 != v49);
              ++v48;
              v43 += v47;
              v47 += 2;
            }
            while (v44 != v34);
          }
          ++v41;
          v40 += v42;
        }
        while (v41 != v39);
      }
    }
  }
  return result;
}

double ConstrainedTransAccMgr::ConstrainedTransAccMgr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

void ConstrainedTransAccMgr::~ConstrainedTransAccMgr(CTModelRelevance **this)
{
  CTModelRelevance *v2;
  CTFTMgr *v3;

  ConstrainedTransAccMgr::releaseAccum(this);
  v2 = this[7];
  if (v2)
  {
    MemChunkFree(v2, 0);
    this[7] = 0;
  }
  this[8] = 0;
  this[1] = 0;
  this[2] = 0;
  *this = 0;
  v3 = this[3];
  if (v3)
    CTFTMgr::resetOnlineCTList(v3);
  this[3] = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 7));
  DgnIOwnArray<CTPelAccum *>::releaseAll((uint64_t)(this + 5));
}

GenoneClassTree *ConstrainedTransAccMgr::releaseAccum(CTModelRelevance **this)
{
  GenoneClassTree *result;

  DgnDelete<CTModelRelevance>(this[4]);
  this[4] = 0;
  DgnIOwnArray<CTPelAccum *>::releaseAll((uint64_t)(this + 5));
  result = this[2];
  if (result)
    return (GenoneClassTree *)GenoneClassTree::release(result);
  return result;
}

_QWORD *CTFTMgr::resetOnlineCTList(CTFTMgr *this)
{
  _QWORD *result;

  DgnArray<LinearTransform>::releaseAll((uint64_t)this + 224);
  result = (_QWORD *)*((_QWORD *)this + 30);
  if (result)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *((_QWORD *)this + 30) = 0;
  }
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 4) = 0;
  return result;
}

uint64_t ConstrainedTransAccMgr::initAccum(ConstrainedTransAccMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  char v13;
  char v14;
  _BOOL4 v15;
  unsigned int v16;
  uint64_t PelMgr;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t *v28;
  BOOL v29;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t i;
  uint64_t *v35;
  uint64_t v36;
  double **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  double v45;
  uint64_t *v47;
  unsigned int v48;
  char v49;
  _BOOL4 v50;
  _BOOL4 v51;
  PelMgr *v52;

  v49 = a2;
  if ((a2 & 1) != 0)
  {
    v52 = *(PelMgr **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1)) + 56);
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 208))(*((_QWORD *)this + 1));
    v10 = result;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 1;
    v50 = 1;
    v51 = 1;
    v15 = 1;
    v16 = 1;
  }
  else
  {
    PelMgr = AdaptController::getPelMgr(*(AdaptController **)this, a2, a3, a4, a5, a6, a7, a8);
    v20 = *(_QWORD **)this;
    v10 = *(_QWORD *)(*(_QWORD *)this + 32);
    v52 = (PelMgr *)PelMgr;
    v21 = *(_DWORD *)(PelMgr + 16);
    v22 = *(unsigned __int8 **)(*(_QWORD *)this + 8);
    v50 = v22[96] != 0;
    v51 = v22[332] != 0;
    v23 = v22[81];
    v24 = v22[82];
    if (!(v24 | v23))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2383, (uint64_t)"recogctl/contrnac", 2, (uint64_t)"%s", v18, v19, (char)&errStr_recogctl_contrnac_E_IDENTITY_TRANSFORM);
      v22 = *(unsigned __int8 **)(*(_QWORD *)this + 8);
    }
    if (v23)
      v25 = 1;
    else
      v25 = v24 == 0;
    v13 = !v25;
    v26 = v22[83];
    v14 = v22[83] != 0;
    v15 = *((_WORD *)v20 + 26) != 0;
    v12 = *((_BYTE *)v20 + 48) != 0;
    if (*((_BYTE *)v20 + 53))
      v27 = 2;
    else
      v27 = *((unsigned __int8 *)v20 + 52);
    v28 = (uint64_t *)((char *)this + 56);
    result = GenoneClassTree::initForType(*((_QWORD *)this + 2), v27, (uint64_t)this + 56);
    v48 = result;
    if ((_DWORD)result == 1)
    {
      result = *v28;
      if (*v28)
      {
        result = MemChunkFree((_QWORD *)result, 0);
        *v28 = 0;
      }
      *((_QWORD *)this + 8) = 0;
    }
    if (v23)
      v29 = v26 == 0;
    else
      v29 = 0;
    if (!v29 || v21 == 1)
    {
      v11 = 0;
      v16 = v48;
    }
    else
    {
      v16 = v48;
      if (*(_QWORD *)this)
      {
        v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 160);
        if (v11)
          result = GenoneClassTree::decomposeInverseVariancesForTransformationMatrixAdaptation(*((GenoneClassTree **)this
                                                                                               + 2));
      }
      else
      {
        v11 = 0;
      }
      v14 = 0;
    }
  }
  v31 = (_QWORD *)((char *)this + 40);
  v32 = *((_DWORD *)this + 13);
  if (v16 > v32)
    result = DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 40, v16 - v32, 0);
  v33 = *((unsigned int *)this + 12);
  if (v33 <= v16)
  {
    if (v33 < v16)
    {
      do
        *(_QWORD *)(*v31 + 8 * v33++) = 0;
      while (v16 != v33);
    }
  }
  else
  {
    result = (uint64_t)DgnIOwnArray<CTPelAccum *>::destructAt((ConstrainedTransAccMgr *)((char *)this + 40), v16, v33 - v16);
  }
  *((_DWORD *)this + 12) = v16;
  if (v16)
  {
    for (i = 0; i != v16; *(_QWORD *)(*v31 + 8 * i++) = result)
    {
      v35 = MemChunkAlloc(0xA8uLL, 0);
      v36 = *((_QWORD *)this + 2);
      if (v36)
      {
        if (i >= *(unsigned int *)(v36 + 272))
          v37 = 0;
        else
          v37 = (double **)(*(_QWORD *)(v36 + 264) + 16 * i);
        v38 = v36 + 240;
        if (i >= *(unsigned int *)(v36 + 288))
          v36 = 0;
        else
          v36 = *(_QWORD *)(v36 + 280) + 24 * i;
      }
      else
      {
        v37 = 0;
        v38 = 0;
      }
      result = CTPelAccum::CTPelAccum((uint64_t)v35, (uint64_t)v52, v10, v51, v50, v12, v15, v14, v13, v11, v38, v37, v36);
    }
  }
  if ((v49 & 1) == 0)
  {
    v39 = *(_QWORD *)(*(_QWORD *)this + 8);
    v40 = 352;
    if (v15)
      v40 = 72;
    v41 = 152;
    if (!v15)
      v41 = 392;
    v42 = 384;
    if (v15)
      v42 = 112;
    v43 = *(_DWORD *)(v39 + v41);
    if (v43)
    {
      v44 = *(_DWORD *)(v39 + v42);
      v45 = *(double *)(v39 + v40);
      if (v45 != 0.0 && v44 != 0)
      {
        v47 = MemChunkAlloc(0x30uLL, 0);
        *(_OWORD *)(v47 + 1) = 0u;
        *(_OWORD *)(v47 + 3) = 0u;
        *((_QWORD *)this + 4) = v47;
        return CTModelRelevance::computeModelRelevance((CTModelRelevance *)v47, v52, v43, v45, v12, v15, v50, v51, v14);
      }
    }
  }
  return result;
}

CTModelRelevance *DgnDelete<CTModelRelevance>(CTModelRelevance *result)
{
  _QWORD *v1;

  if (result)
  {
    CTModelRelevance::~CTModelRelevance(result);
    return (CTModelRelevance *)MemChunkFree(v1, 0);
  }
  return result;
}

_QWORD *DgnIOwnArray<CTPelAccum *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<CTPelAccum>(*(CTPelAccum **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

BOOL ConstrainedTransAccMgr::adaptPel(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v10;
  unsigned int v12;
  int v14;
  AdaptStats *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL4 v19;
  AdaptController *v20;
  uint64_t v21;
  int v22;
  double v23;
  uint64_t v24;
  uint64_t v25;

  v10 = a3;
  v12 = a2;
  v14 = *(_DWORD *)(a4 + 8);
  if (v14)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = *((_DWORD *)a1 + 12);
    v19 = 1;
  }
  else
  {
    v20 = (AdaptController *)*a1;
    v16 = *a1 + 40;
    v15 = *(AdaptStats **)(*a1 + 152);
    if (*(_BYTE *)(*a1 + 52))
      v19 = 1;
    else
      v19 = *((_BYTE *)v20 + 53) != 0;
    v18 = *((_DWORD *)a1 + 12);
    v17 = *(unsigned __int16 *)(*(_QWORD *)(AdaptController::getPelMgr(v20, a2, a3, a4, a5, a6, a7, a8) + 288)
                              + 2 * a2);
  }
  if (v18 == 1)
  {
    v21 = 0;
    if (v14)
    {
LABEL_9:
      v22 = 0;
      v23 = 1.0;
      return CTPelAccum::adaptOneFrame(*(uint64_t **)(a1[5] + 8 * v21), v12, v22, v15, v10, a4, a9, v23);
    }
  }
  else
  {
    v21 = *(unsigned int *)(a1[7] + 4 * v17);
    if (v14)
      goto LABEL_9;
  }
  v24 = *(_QWORD *)(*a1 + 8);
  v25 = 376;
  if (v19)
    v25 = 104;
  v23 = *(double *)(v24 + v25);
  v22 = *(_BYTE *)(v24 + 140) && *(_BYTE *)(v16 + 13) && *(_DWORD *)(a1[3] + 12) == *(_DWORD *)a1[3];
  return CTPelAccum::adaptOneFrame(*(uint64_t **)(a1[5] + 8 * v21), v12, v22, v15, v10, a4, a9, v23);
}

uint64_t ConstrainedTransAccMgr::downScaleAccum(uint64_t this, unsigned int a2, unsigned int a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    if (a3)
    {
      if (!(a2 % a3))
      {
        v4 = this;
        v5 = *(unsigned int *)(this + 48);
        if ((_DWORD)v5)
        {
          v7 = 0;
          v8 = 8 * v5;
          do
          {
            this = CTPelAccum::scaleAccum(*(_QWORD *)(*(_QWORD *)(v4 + 40) + v7), a4);
            v7 += 8;
          }
          while (v8 != v7);
        }
      }
    }
  }
  return this;
}

unint64_t ConstrainedTransAccMgr::getFrameCountsByTNode(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = *(_DWORD *)(*(_QWORD *)(result + 16) + 200);
  v5 = *(_DWORD *)(a2 + 12);
  if (v4 > v5)
    result = DgnPrimArray<unsigned int>::reallocElts(a2, v4 - v5, 0);
  *(_DWORD *)(a2 + 8) = v4;
  if (*(_DWORD *)(v3 + 48))
  {
    v6 = 0;
    v7 = *(_QWORD *)(v3 + 40);
    v8 = *(_QWORD *)a2;
    do
    {
      *(_DWORD *)(v8 + 4 * v6) = ((double)*(uint64_t *)(*(_QWORD *)(v7 + 8 * v6) + 56) * 0.00390625 + 0.5);
      ++v6;
    }
    while (v6 < *(unsigned int *)(v3 + 48));
  }
  return result;
}

uint64_t *ConstrainedTransAccMgr::computeGlobalSmoothing(AdaptController **this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t PelMgr;
  AdaptController *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  char v23;
  uint64_t *v24;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  double v28;

  v11 = *((unsigned int *)this + 12);
  PelMgr = AdaptController::getPelMgr(*this, a3, a4, a5, a6, a7, a8, a9);
  v15 = *this;
  v16 = *((_QWORD *)*this + 4);
  v17 = (unsigned __int8 *)*((_QWORD *)*this + 1);
  v18 = v17[332];
  v19 = v17[83];
  v20 = v17[81];
  v21 = v17[82];
  if (!(v21 | v20))
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2719, (uint64_t)"recogctl/contrnac", 2, (uint64_t)"%s", v12, v13, (char)&errStr_recogctl_contrnac_E_IDENTITY_TRANSFORM);
  if (v20)
    v22 = 1;
  else
    v22 = v21 == 0;
  v23 = !v22;
  v24 = MemChunkAlloc(0xA8uLL, 0);
  v25 = v24;
  if (*((_BYTE *)v15 + 52))
    v26 = 1;
  else
    v26 = *((_BYTE *)v15 + 53) != 0;
  CTPelAccum::CTPelAccum((uint64_t)v24, PelMgr, v16, v18 != 0, *(_BYTE *)(*((_QWORD *)*this + 1) + 96) != 0, *((_BYTE *)v15 + 48) != 0, v26, v19 != 0, v23, 0, 0, 0, 0);
  if ((_DWORD)v11)
  {
    v27 = 0;
    do
    {
      CTPelAccum::addAccum((CTPelAccum *)v25, *(const CTPelAccum **)((char *)this[5] + v27), 0);
      v27 += 8;
    }
    while (8 * v11 != v27);
  }
  v28 = (double)v25[7] * 0.00390625;
  if (v28 <= 0.0)
  {
    DgnDelete<CTPelAccum>((CTPelAccum *)v25);
    return 0;
  }
  else
  {
    CTPelAccum::scaleAccum((uint64_t)v25, a2 / v28);
  }
  return v25;
}

CTPelAccum *DgnDelete<CTPelAccum>(CTPelAccum *result)
{
  _QWORD *v1;

  if (result)
  {
    CTPelAccum::~CTPelAccum(result);
    return (CTPelAccum *)MemChunkFree(v1, 0);
  }
  return result;
}

void ConstrainedTransAccMgr::printSize(ConstrainedTransAccMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v78;
  uint64_t v79;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2766, (DgnString *)&v78);
  if ((_DWORD)v79)
    v15 = v78;
  else
    v15 = &unk_209A6C6C1;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A6C6C1, a3, &unk_209A6C6C1, v15);
  DgnString::~DgnString((DgnString *)&v78);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A6C6C1);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v20 = 4;
  else
    v20 = 8;
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2767, (DgnString *)&v78);
  if ((_DWORD)v79)
    v27 = v78;
  else
    v27 = &unk_209A6C6C1;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C6C1, (34 - a3), (34 - a3), v27, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v20;
  *a5 += v20;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v28 = 4;
  else
    v28 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2768, (DgnString *)&v78);
  if ((_DWORD)v79)
    v33 = v78;
  else
    v33 = &unk_209A6C6C1;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, (a3 + 1), &unk_209A6C6C1, (34 - a3), (34 - a3), v33, v28, v28, 0);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v28;
  *a5 += v28;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v34 = 4;
  else
    v34 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2769, (DgnString *)&v78);
  if ((_DWORD)v79)
    v39 = v78;
  else
    v39 = &unk_209A6C6C1;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, (a3 + 1), &unk_209A6C6C1, (34 - a3), (34 - a3), v39, v34, v34, 0);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v34;
  *a5 += v34;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v40 = 12;
  else
    v40 = 16;
  v41 = *((unsigned int *)this + 16);
  v42 = *((_DWORD *)this + 17);
  if (v42 >= v41)
  {
    v43 = 0;
    if ((int)v41 > 0)
      v40 += 4 * (v41 - 1) + 4;
    v44 = v40 + 4 * (v42 - v41);
  }
  else
  {
    v43 = 4 * v41;
    v44 = v40;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2771, (DgnString *)&v78);
  if ((_DWORD)v79)
    v49 = v78;
  else
    v49 = &unk_209A6C6C1;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, (a3 + 1), &unk_209A6C6C1, (34 - a3), (34 - a3), v49, v44, v40, v43);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v44;
  *a5 += v40;
  *a6 += v43;
  v50 = sizeObject<CTPelAccum *>((uint64_t)this + 40, 0);
  v51 = sizeObject<CTPelAccum *>((uint64_t)this + 40, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2772, (DgnString *)&v78);
  if ((_DWORD)v79)
    v56 = v78;
  else
    v56 = &unk_209A6C6C1;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, (a3 + 1), &unk_209A6C6C1, (34 - a3), (34 - a3), v56, v50, v51, 0);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v50;
  *a5 += v51;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v57 = 4;
  else
    v57 = 8;
  v58 = *((_QWORD *)this + 4);
  if (v58)
  {
    v75 = a3;
    v76 = (a3 + 1);
    v59 = sizeObject<DgnPrimArray<double>>(v58 + 8, 0);
    v60 = v57 + v59 + sizeObject<DgnArray<DgnPrimArray<long long>>>(v58 + 24, 0) + 12;
    v61 = *((_QWORD *)this + 4);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v57 = 4;
    else
      v57 = 8;
    if (v61)
    {
      v62 = sizeObject<DgnPrimArray<double>>(v61 + 8, 1);
      v57 += v62 + sizeObject<DgnArray<DgnPrimArray<long long>>>(v61 + 24, 1) + 12;
      v63 = *((_QWORD *)this + 4);
      v21 = v76;
      if (v63)
      {
        v78 = 0;
        v79 = 0;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v78);
        v64 = sizeObject<DgnArray<DgnPrimArray<long long>>>(v63 + 24, 3);
      }
      else
      {
        v64 = 0;
      }
      a3 = v75;
    }
    else
    {
      v64 = 0;
      a3 = v75;
      v21 = v76;
    }
  }
  else
  {
    v64 = 0;
    v60 = v57;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2774, (DgnString *)&v78);
  if ((_DWORD)v79)
    v69 = v78;
  else
    v69 = &unk_209A6C6C1;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v21, &unk_209A6C6C1, v22, v22, v69, v60, v57, v64);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v60;
  *a5 += v57;
  *a6 += v64;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2776, (DgnString *)&v78);
  if ((_DWORD)v79)
    v74 = v78;
  else
    v74 = &unk_209A6C6C1;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, a3, &unk_209A6C6C1, (35 - a3), (35 - a3), v74, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v78);
}

void sub_209810A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<CTPelAccum *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += CTPelAccum::sizeObject(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

BOOL ConstrainedTransAccMgr::computeTransform(ConstrainedTransAccMgr *this, uint64_t a2, double a3, SnapTime *a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  unsigned int v23;
  char *v24;
  unsigned int v25;
  char v26;
  char v27;
  uint64_t PelMgr;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  _BOOL4 v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  double v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  double v48;
  double v49;
  unsigned int v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unsigned int v56;
  int v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unsigned int v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  _BOOL8 v80;
  unsigned int *v81;
  _BOOL4 v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t *v89;
  DgnMatrix *v90;
  __int16 v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  char *v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  unsigned int *v145;
  char *v146;
  _QWORD *v147;
  unsigned int *v148;
  int v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  unint64_t v154;
  _QWORD *v155;
  unsigned int v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  char *v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  unint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t i;
  unsigned int j;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v182;
  unsigned int v183;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  CTPelAccum *v189;
  char v190;
  _BOOL4 v191;
  unsigned int v192;
  int v193;
  int v194;
  uint64_t v195;
  char v196;
  unsigned int v197;
  _BOOL4 v198;
  int v199;
  int v200;
  int v201;
  char v202;
  unsigned __int16 v203;
  unsigned int v204;
  unsigned int v205;
  void *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  int *v210[2];
  LinearTransform *v211;
  uint64_t v212;
  unsigned int v213;
  double *v214;
  int v215;
  void *v216;
  uint64_t v217;
  int v218;
  _DWORD *v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  _DWORD *v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  _QWORD *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;

  v194 = a2;
  if (a5)
    *a5 = 0;
  if ((a2 & 1) != 0)
  {
    v11 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1)) + 56);
    v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 208))(*((_QWORD *)this + 1));
    v20 = 0;
    v193 = 0;
    v185 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v187 = v11;
    v198 = *(_DWORD *)(v11 + 16) == 1;
    v24 = (char *)this + 40;
    v25 = *((_DWORD *)this + 12);
    v191 = 1;
    v26 = 1;
    v27 = 1;
    v200 = 1;
    v202 = 0;
LABEL_21:
    v199 = 1;
    goto LABEL_22;
  }
  PelMgr = AdaptController::getPelMgr(*(AdaptController **)this, a2, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, a9);
  v29 = *(_BYTE **)this;
  v30 = *(_QWORD *)(*(_QWORD *)this + 32);
  v31 = *(_QWORD *)this + 40;
  v32 = *(_QWORD *)(*(_QWORD *)this + 8);
  v26 = *(_BYTE *)(v32 + 332) != 0;
  v27 = *(_BYTE *)(v32 + 96) != 0;
  v33 = *(unsigned __int8 *)(v32 + 81);
  v34 = *(unsigned __int8 *)(v32 + 82);
  v35 = *(_BYTE *)(v32 + 82) != 0;
  if (!(v34 | v33))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2890, (uint64_t)"recogctl/contrnac", 2, (uint64_t)"%s", v17, v18, (char)&errStr_recogctl_contrnac_E_IDENTITY_TRANSFORM);
    v32 = *(_QWORD *)(*(_QWORD *)this + 8);
  }
  v185 = v31;
  if (v33)
    v36 = 1;
  else
    v36 = v34 == 0;
  v37 = !v36;
  v187 = PelMgr;
  v193 = v37;
  v191 = *(_BYTE *)(v32 + 83) != 0;
  v200 = v35;
  if (v29[52])
  {
    v38 = v29[48] != 0;
    v198 = *(_DWORD *)(PelMgr + 16) == 1;
    v24 = (char *)this + 40;
    v25 = *((_DWORD *)this + 12);
    v39 = v29[53];
    v21 = *(_DWORD *)(v32 + 84);
    v20 = *(_DWORD *)(v32 + 156);
    v202 = v38;
    if (!v39)
    {
      v19 = v30;
      v22 = 0;
      v23 = *(_DWORD *)(v32 + 100);
      goto LABEL_21;
    }
LABEL_18:
    v19 = v30;
    v40 = *(_DWORD *)(v32 + 148);
    v22 = 0;
    if (v40 == -1)
      v23 = 0;
    else
      v23 = *(_DWORD *)(v32 + 144) + v40;
    goto LABEL_21;
  }
  v198 = *(_DWORD *)(PelMgr + 16) == 1;
  v24 = (char *)this + 40;
  v25 = *((_DWORD *)this + 12);
  v202 = v29[48] != 0;
  if (v29[53])
  {
    v21 = *(_DWORD *)(v32 + 84);
    v20 = *(_DWORD *)(v32 + 156);
    goto LABEL_18;
  }
  v19 = v30;
  v199 = 0;
  v20 = *(_DWORD *)(v32 + 360);
  v23 = *(_DWORD *)(v32 + 372);
  v22 = 1;
  v21 = v20;
LABEL_22:
  v229 = 0;
  v230 = 0;
  v227 = 0;
  v228 = 0;
  v197 = v25;
  if (v25 >= 2)
  {
    v41 = (double)*(int *)(*(_QWORD *)(*(_QWORD *)this + 8) + 68) / 10000.0;
    v42 = v199;
    if (v41 <= 0.0)
      v42 = 0;
    if (v42 != 1)
      goto LABEL_34;
    v43 = *(unsigned int *)(*((_QWORD *)this + 7)
                          + 4
                          * **(unsigned __int16 **)(AdaptController::getPelMgr(*(AdaptController **)this, v12, v13, v14, v15, v16, v17, v18)+ 288));
    v44 = *((_QWORD *)this + 5);
    v45 = *(_QWORD *)(v44 + 8 * v43);
    v46 = (double)*(uint64_t *)(v45 + 56);
    v47 = v197;
    v48 = 0.0;
    do
    {
      if (v43)
        v48 = v48 + (double)*(uint64_t *)(*(_QWORD *)v44 + 56) * 0.00390625;
      --v43;
      v44 += 8;
      --v47;
    }
    while (v47);
    v49 = 0.0;
    if (v48 > 0.0)
    {
      if (v46 * 0.00390625 / v48 <= v41)
        goto LABEL_34;
      v49 = v41 * v48 / (v46 * 0.00390625);
    }
    CTPelAccum::scaleAccum(v45, v49);
LABEL_34:
    v216 = 0;
    v217 = 0;
    ConstrainedTransAccMgr::getFrameCountsByTNode((unint64_t)this, (uint64_t)&v216);
    GenoneClassTree::getDynamicClasses(*((_QWORD *)this + 2), (uint64_t *)&v216, v23, v20, v21, (uint64_t)&v229, (uint64_t)&v227);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 8) + 80) && v230 >= 2)
    {
      v211 = 0;
      v212 = 0;
      v50 = v228;
      if ((_DWORD)v228 == HIDWORD(v228))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v227, 1, 1);
        v50 = v228;
      }
      v51 = &v227[2 * v50];
      *v51 = 0;
      v51[1] = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)v51, (uint64_t *)&v211, 0, v212);
      LODWORD(v228) = v228 + 1;
      v52 = v230;
      if ((_DWORD)v230)
      {
        v53 = 0;
        v54 = v229;
        do
        {
          if (LODWORD(v54[2 * v53 + 1]))
          {
            v55 = 0;
            v56 = v212;
            do
            {
              v57 = *(_DWORD *)(v54[2 * v53] + 4 * v55);
              if (v56 == HIDWORD(v212))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v211, 1, 1);
                v56 = v212;
                v54 = v229;
              }
              *((_DWORD *)v211 + v56) = v57;
              v56 = v212 + 1;
              LODWORD(v212) = v212 + 1;
              ++v55;
            }
            while (v55 < LODWORD(v54[2 * v53 + 1]));
            v52 = v230;
          }
          ++v53;
        }
        while (v53 < v52);
      }
      else
      {
        v52 = 0;
      }
      if (v52 == HIDWORD(v230))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v229, 1, 1);
        v52 = v230;
      }
      v68 = &v229[16 * v52];
      *(_QWORD *)v68 = 0;
      *((_QWORD *)v68 + 1) = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)v68, (uint64_t *)&v211, 0, v212);
      LODWORD(v230) = v230 + 1;
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v211);
      v183 = 1;
    }
    else
    {
      v183 = 0;
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v216);
    goto LABEL_78;
  }
  if (v20 <= ((double)*(uint64_t *)(**(_QWORD **)v24 + 56) * 0.00390625 + 0.5))
  {
    v216 = 0;
    HIDWORD(v230) = realloc_array(0, &v216, 0x10uLL, 0, 0, 1) >> 4;
    v58 = v216;
    v229 = (char *)v216;
    v59 = v230;
    if (v230 <= 1)
    {
      if (!(_DWORD)v230)
      {
        *(_QWORD *)v216 = 0;
        v58[1] = 0;
      }
    }
    else if ((int)v230 >= 2)
    {
      v60 = 16 * v230 - 16;
      do
      {
        --v59;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v229[v60]);
        v60 -= 16;
      }
      while (v59 > 1);
    }
    LODWORD(v230) = 1;
    v61 = v229;
    v62 = *((_DWORD *)v229 + 2);
    if (v62 == *((_DWORD *)v229 + 3))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v229, 1, 1);
      v62 = v61[2];
    }
    *(_DWORD *)(*(_QWORD *)v61 + 4 * v62) = 0;
    ++v61[2];
    if (!HIDWORD(v228))
    {
      v216 = 0;
      HIDWORD(v228) = realloc_array(v227, &v216, 0x10uLL, 16 * v228, 16 * v228, 1) >> 4;
      v227 = v216;
    }
    v63 = v228;
    if (v228 <= 1)
    {
      if (!(_DWORD)v228)
      {
        v65 = v227;
        *v227 = 0;
        v65[1] = 0;
      }
    }
    else if ((int)v228 >= 2)
    {
      v64 = 16 * v228 - 16;
      do
      {
        --v63;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v227 + v64);
        v64 -= 16;
      }
      while (v63 > 1);
    }
    LODWORD(v228) = 1;
    v66 = v227;
    v67 = *((_DWORD *)v227 + 2);
    if (v67 == *((_DWORD *)v227 + 3))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v227, 1, 1);
      v67 = *((_DWORD *)v66 + 2);
    }
    v183 = 0;
    *(_DWORD *)(*v66 + 4 * v67) = 0;
    ++*((_DWORD *)v66 + 2);
  }
  else
  {
    v183 = 0;
  }
LABEL_78:
  v69 = v230;
  SnapTime::recordTime(a4, 1, 1, 1, 1);
  if (!(_DWORD)v69)
    goto LABEL_87;
  if ((v194 & 1) != 0)
  {
    v77 = 1;
LABEL_83:
    v78 = *(_DWORD *)(*((_QWORD *)this + 3) + 136);
    SnapTime::recordTime(a4, 1, 1, 1, 1);
    if (v78 >= v77)
      v79 = v77;
    else
      v79 = v78;
    if (v69 < v79)
      goto LABEL_87;
    if ((v199 & 1) != 0)
    {
      v204 = 1 << *(_DWORD *)(*((_QWORD *)this + 3) + 4);
      if ((v194 & 1) != 0)
      {
        v192 = 0;
        goto LABEL_98;
      }
      goto LABEL_95;
    }
    if ((v194 & 1) != 0)
    {
      v192 = 0;
      v204 = 0x4000;
      goto LABEL_98;
    }
LABEL_96:
    v81 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 8) + 384);
    v204 = 0x4000;
    goto LABEL_97;
  }
  if (*(_BYTE *)(v185 + 13))
  {
    v77 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 144);
    goto LABEL_83;
  }
  if (!v199)
    goto LABEL_96;
  v204 = 1 << *(_DWORD *)(*((_QWORD *)this + 3) + 4);
LABEL_95:
  v81 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)this + 8) + 112);
LABEL_97:
  v192 = *v81;
LABEL_98:
  v190 = v22 ^ (v193 | v27 | v22);
  if (((v193 | (v27 | v22)) & 1) != 0)
  {
    v83 = v187;
    v82 = v191;
  }
  else
  {
    v82 = v191;
    v83 = v187;
    if (v191)
      v190 = v26 | !v198;
  }
  v186 = v69;
  if ((v194 & 1) == 0)
  {
    v189 = 0;
    v196 = 0;
    v85 = *(_QWORD *)(*(_QWORD *)this + 8);
    v86 = 368;
    if (v199)
      v86 = 92;
    v87 = 364;
    if (v199)
      v87 = 88;
    v84 = *(_DWORD *)(v85 + v87);
    if (v186 < 2)
      goto LABEL_112;
    v88 = *(_DWORD *)(v85 + v86);
    if (!v88)
      goto LABEL_112;
    v189 = (CTPelAccum *)ConstrainedTransAccMgr::computeGlobalSmoothing((AdaptController **)this, (double)v88, v70, v71, v72, v73, v74, v75, v76);
    SnapTime::recordTime(a4, 1, 1, 1, 1);
    if (v189)
    {
      v196 = 1;
      goto LABEL_112;
    }
LABEL_87:
    v80 = 0;
    goto LABEL_270;
  }
  v196 = 0;
  v84 = 0;
  v189 = 0;
LABEL_112:
  v89 = MemChunkAlloc(0xA8uLL, 0);
  CTPelAccum::CTPelAccum((uint64_t)v89, v83, v19, v26, v27, v202, v199, v82, v193, 0, 0, 0, 0);
  v90 = (DgnMatrix *)*((unsigned int *)v89 + 4);
  if (v82)
    v91 = 2;
  else
    v91 = 1;
  if (v193)
    v91 = 3;
  v203 = v91;
  if (v193)
    v92 = 0;
  else
    v92 = v90;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(&v225, v92);
  v93 = v226;
  if (v226)
  {
    v94 = 0;
    v95 = 0;
    if ((v82 & (v193 ^ 1)) != 0)
      v96 = 1;
    else
      v96 = v90;
    do
    {
      v97 = v225 + v94;
      v98 = *(_DWORD *)(v225 + v94 + 12);
      if (v96 > v98)
      {
        DgnPrimArray<unsigned int>::reallocElts(v225 + v94, v96 - v98, 0);
        v93 = v226;
      }
      *(_DWORD *)(v97 + 8) = v96;
      ++v95;
      v94 += 16;
    }
    while (v95 < v93);
  }
  v201 = v82 | v200;
  if (v201)
    v99 = v90;
  else
    v99 = 0;
  v223 = 0;
  v224 = 0;
  if (v99)
  {
    v216 = 0;
    HIDWORD(v224) = realloc_array(0, &v216, 4 * v99, 0, 0, 1) >> 2;
    v223 = v216;
  }
  LODWORD(v224) = v99;
  DgnArray<LinearTransform>::DgnArray(&v221, v186);
  v219 = 0;
  v220 = 0;
  if (v199)
  {
    v216 = 0;
    v100 = realloc_array(0, &v216, 4 * v186, 0, 0, 1);
    v219 = v216;
    LODWORD(v220) = v186;
    HIDWORD(v220) = v100 >> 2;
  }
  v101 = 0;
  v102 = 0;
  v216 = 0;
  v217 = 0;
  v218 = 0;
  v215 = 0;
  v182 = (v186 - 1);
  if (v186 <= 1)
    v103 = 1;
  else
    v103 = v186;
  v195 = v103;
  v214 = 0;
  do
  {
    CTPelAccum::reset((CTPelAccum *)v89);
    v104 = v229;
    if (*(_DWORD *)&v229[16 * v101 + 8])
    {
      v105 = 0;
      do
      {
        CTPelAccum::addAccum((CTPelAccum *)v89, *(const CTPelAccum **)(*(_QWORD *)v24 + 8 * *(unsigned int *)(v104[2 * v101] + 4 * v105++)), 0);
        v104 = v229;
      }
      while (v105 < *(unsigned int *)&v229[16 * v101 + 8]);
    }
    if ((v196 & 1) != 0 && (unint64_t)((double)v89[7] * 0.00390625 + 0.5) < v84)
      CTPelAccum::addAccum((CTPelAccum *)v89, v189, 0);
    v106 = (_QWORD *)*((_QWORD *)this + 4);
    if (v106)
      CTPelAccum::addModelRelevance((uint64_t)v89, v106, v192);
    DgnMatrix::makeIdentity(v90, (uint64_t)&v211);
    v216 = v211;
    DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v217, &v212, 0, v213);
    v107 = v197;
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v212);
    LODWORD(v212) = 0;
    v211 = 0;
    if ((_DWORD)v90)
    {
      v211 = (LinearTransform *)MemChunkAlloc(8 * (_QWORD)v90, 0);
      LODWORD(v212) = (_DWORD)v90;
      bzero(v211, 8 * (_QWORD)v90);
    }
    DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v214, (uint64_t *)&v211, 0, v90);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v211);
    if (v199)
    {
      if ((v190 & 1) == 0
        && !ConstrainedTransAccMgr::computeInitialTransform(this, (CTPelAccum *)v89, v198, (DgnMatrix *)&v216))
      {
        DgnMatrix::makeIdentity(v90, (uint64_t)&v211);
        v216 = v211;
        DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v217, &v212, 0, v213);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v212);
        LODWORD(v212) = 0;
        v211 = 0;
        if ((_DWORD)v90)
        {
          v211 = (LinearTransform *)MemChunkAlloc(8 * (_QWORD)v90, 0);
          LODWORD(v212) = (_DWORD)v90;
          bzero(v211, 8 * (_QWORD)v90);
        }
        DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v214, (uint64_t *)&v211, 0, v90);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v211);
      }
      v108 = ConstrainedTransAccMgr::computeIterativeTransform((uint64_t *)this, (uint64_t)v89, v194, v198, v191, v193, (int *)&v216, &v214, a3);
    }
    else
    {
      v108 = ConstrainedTransAccMgr::computeMeansTransform(this, (CTPelAccum *)v89, v198, (DgnMatrix *)&v216);
    }
    if (!v108 || !fillIntTransform((uint64_t)&v216, &v214, &v225, &v223, v204, v203, v201, v90))
    {
      DgnMatrix::makeIdentity(v90, (uint64_t)&v211);
      v216 = v211;
      DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v217, &v212, 0, v213);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v212);
      LODWORD(v212) = 0;
      v211 = 0;
      if ((_DWORD)v90)
      {
        v211 = (LinearTransform *)MemChunkAlloc(8 * (_QWORD)v90, 0);
        LODWORD(v212) = (_DWORD)v90;
        bzero(v211, 8 * (_QWORD)v90);
      }
      DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v214, (uint64_t *)&v211, 0, v90);
      ++v102;
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v211);
      fillIntTransform((uint64_t)&v216, &v214, &v225, &v223, v204, v203, v201, v90);
    }
    LinearTransform::setSize(v221 + 72 * v101, (int)v90, (int)v90);
    LinearTransform::setTransform(v221 + 72 * v101, (uint64_t)&v225, v203, (uint64_t)&v223, v201, v204, 0, v109);
    if (v199)
    {
      v110 = DgnMatrix::determinant((double **)&v216);
      v111 = DgnLog(v110) * (double)v204;
      if (v111 >= 0.0)
        v112 = 0.5;
      else
        v112 = -0.5;
      v219[v101] = (int)(v111 + v112);
    }
    ++v101;
  }
  while (v101 != v195);
  DgnDelete<CTPelAccum>((CTPelAccum *)v89);
  DgnDelete<CTPelAccum>(v189);
  SnapTime::recordTime(a4, 1, 1, 1, 1);
  v117 = v187;
  v118 = (20 * (int)v186 + 50) / 0x64u;
  v80 = v102 <= v118;
  if (v102 <= v118)
  {
    v211 = 0;
    v212 = 0;
    v119 = v186;
    v210[0] = 0;
    v210[1] = 0;
    v120 = a5;
    if (v183)
    {
      if (v230 <= v182)
      {
        if (v230 < v182)
        {
          v123 = v182 - v230;
          v124 = 16 * v230;
          do
          {
            v125 = &v229[v124];
            *(_QWORD *)v125 = 0;
            *((_QWORD *)v125 + 1) = 0;
            v124 += 16;
            --v123;
          }
          while (v123);
        }
      }
      else if ((int)v230 > (int)v182)
      {
        v121 = (int)v230;
        v122 = 16 * (int)v230 - 16;
        do
        {
          --v121;
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v229[v122]);
          v122 -= 16;
        }
        while (v121 > (int)v182);
      }
      LODWORD(v230) = v186 - 1;
      if (v228 <= v182)
      {
        if (v228 < v182)
        {
          v128 = v182 - v228;
          v129 = 2 * v228;
          do
          {
            v130 = &v227[v129];
            *v130 = 0;
            v130[1] = 0;
            v129 += 2;
            --v128;
          }
          while (v128);
        }
      }
      else if ((int)v228 > (int)v182)
      {
        v126 = (int)v228;
        v127 = 16 * (int)v228 - 16;
        do
        {
          --v126;
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v227 + v127);
          v127 -= 16;
        }
        while (v126 > (int)v182);
      }
      LODWORD(v228) = v186 - 1;
      DgnArray<LinearTransform>::copyArraySlice((uint64_t)&v211, &v221, v182, 1u);
      DgnPrimArray<int>::copyArraySlice((unint64_t)v210, (uint64_t *)&v219, v182, 1u);
      v131 = (int)v222;
      if (v222 <= v182)
      {
        if (v222 < v182)
        {
          v133 = ~v222 + v186;
          v134 = 72 * v222;
          do
          {
            LinearTransform::LinearTransform((LinearTransform *)(v221 + v134));
            v134 += 72;
            --v133;
          }
          while (v133);
        }
      }
      else if ((int)v222 > (int)v182)
      {
        v132 = 72 * (int)v222 - 72;
        do
        {
          --v131;
          LinearTransform::~LinearTransform((LinearTransform *)(v221 + v132));
          v132 -= 72;
        }
        while (v131 > (int)v182);
      }
      v119 = v186 - 1;
      v222 = v186 - 1;
      LODWORD(v220) = v186 - 1;
    }
    if ((v194 & 1) != 0)
    {
      CTFTMgr::setOnlineCTList(*((_DWORD **)this + 3), (uint64_t)&v221, (uint64_t)&v219);
    }
    else if (v199)
    {
      v135 = *((_QWORD *)this + 2);
      v136 = v135 + 120;
      v137 = 152;
      if (*(_BYTE *)(v185 + 13))
        v136 = v135 + 152;
      else
        v137 = 120;
      v138 = *(_DWORD *)(*(_QWORD *)(v135 + v137) + 4 * (*(_DWORD *)(v136 + 8) - 1));
      v208 = 0;
      v209 = 0;
      v139 = v138 + 1;
      if (v138 != -1)
      {
        v206 = 0;
        HIDWORD(v209) = realloc_array(0, &v206, 4 * (v138 + 1), 0, 0, 1) >> 2;
        v208 = (char *)v206;
        v135 = *((_QWORD *)this + 2);
      }
      LODWORD(v209) = v139;
      v206 = 0;
      v207 = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)&v206, (uint64_t *)(v135 + 192), 0, *(_DWORD *)(v135 + 200));
      if ((_DWORD)v209)
      {
        v140 = 0;
        v141 = v208;
        do
          *(_DWORD *)&v141[4 * v140++] = -1;
        while (v140 < v209);
      }
      v142 = v228;
      if ((_DWORD)v228)
      {
        v143 = 0;
        v144 = v227;
        v145 = (unsigned int *)v206;
        v146 = v208;
        do
        {
          v147 = &v144[2 * v143];
          v149 = *((_DWORD *)v147 + 2);
          v148 = (unsigned int *)(v147 + 1);
          if (v149)
          {
            v150 = 0;
            v151 = v144[2 * v143];
            do
              *(_DWORD *)&v146[4 * v145[*(unsigned int *)(v151 + 4 * v150++)]] = v143;
            while (v150 < *v148);
            v142 = v228;
          }
          ++v143;
        }
        while (v143 < v142);
      }
      if (*(_BYTE *)(v185 + 12))
      {
        CTFTMgr::setSpeakerCTList(*((_DWORD **)this + 3), (uint64_t)&v221, (uint64_t)&v219, (uint64_t)&v208, (uint64_t)&v211, (uint64_t)v210);
      }
      else if (*(_BYTE *)(v185 + 13))
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 8) + 140))
        {
          v173 = *((_QWORD *)this + 3);
          if (*(_DWORD *)(v173 + 12) == *(_DWORD *)v173
            && v119 == *(_DWORD *)(v173 + 136)
            && v183 == *(_DWORD *)(v173 + 176))
          {
            if ((_DWORD)v209)
            {
              v174 = 0;
              while (1)
              {
                v175 = *(_DWORD *)&v208[v174];
                if (v175 != -1 && (!v119 || v175 != *(_DWORD *)(*(_QWORD *)(v173 + 40) + v174)))
                  break;
                v174 += 4;
                if (4 * v209 == v174)
                  goto LABEL_255;
              }
            }
            else
            {
LABEL_255:
              if (v119)
              {
                for (i = 0; i != v119; ++i)
                  multiplyIntTransform((LinearTransform *)(v221 + 72 * i), (const LinearTransform *)(*(_QWORD *)(*((_QWORD *)this + 3) + 144) + 72 * i), v204, v203, v201, v90, &v219[i]);
              }
              for (j = 0; j < v183; j = 1)
                multiplyIntTransform(v211, *(const LinearTransform **)(*((_QWORD *)this + 3) + 184), v204, v203, v201, v90, v210[0]);
            }
          }
        }
        CTFTMgr::setChannelCTList(*((_DWORD **)this + 3), (uint64_t)&v221, (uint64_t)&v219, (uint64_t)&v208, (uint64_t)&v211, (uint64_t)v210);
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v206);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v208);
    }
    else
    {
      v205 = v119;
      v208 = 0;
      v209 = 0;
      v152 = *((_QWORD *)this + 2);
      v206 = 0;
      v207 = 0;
      if ((_DWORD)v228)
      {
        v153 = 0;
        v154 = 0;
        do
        {
          LODWORD(v207) = 0;
          v155 = v227;
          if (LODWORD(v227[2 * v154 + 1]))
          {
            v156 = 0;
            v157 = 0;
            do
            {
              v158 = *(_QWORD *)(*((_QWORD *)this + 2) + 208) + 16 * *(unsigned int *)(v155[2 * v154] + 4 * v157);
              v159 = *(unsigned int *)(v158 + 8);
              if (*(_DWORD *)(v158 + 8))
              {
                v160 = 0;
                do
                {
                  v161 = *(unsigned int *)(*(_QWORD *)v158 + 4 * v160);
                  if (((*(_DWORD *)(*(_QWORD *)(v152 + 64) + ((v161 >> 3) & 0x1FFFFFFC)) >> v161) & 1) != 0)
                  {
                    v162 = *(unsigned __int16 *)(*(_QWORD *)(v152 + 32) + 2 * v161);
                    if (v162 != 65534)
                    {
                      if (v156 == HIDWORD(v207))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)&v206, 1, 1);
                        v156 = v207;
                        v159 = *(unsigned int *)(v158 + 8);
                      }
                      *((_WORD *)v206 + v156++) = v162;
                      LODWORD(v207) = v156;
                    }
                  }
                  ++v160;
                }
                while (v160 < v159);
                v155 = v227;
              }
              ++v157;
            }
            while (v157 < LODWORD(v155[2 * v154 + 1]));
            v153 = v209;
            v107 = v197;
            v117 = v187;
          }
          if (v153 == HIDWORD(v209))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v208, 1, 1);
            v153 = v209;
          }
          v163 = &v208[16 * v153];
          *(_QWORD *)v163 = 0;
          *((_QWORD *)v163 + 1) = 0;
          DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v163, (uint64_t *)&v206, 0, v207);
          v153 = v209 + 1;
          LODWORD(v209) = v209 + 1;
          ++v154;
        }
        while (v154 < v228);
      }
      v164 = v222;
      if (v222)
      {
        v165 = 0;
        v166 = v208;
        do
        {
          if (*(_DWORD *)&v166[16 * v165 + 8])
          {
            v167 = 0;
            do
            {
              v168 = *(unsigned __int16 *)(*(_QWORD *)&v166[16 * v165] + 2 * v167);
              v169 = *(_DWORD *)(*(_QWORD *)(v117 + 272) + 4 * v168);
              v170 = *(_DWORD *)(*(_QWORD *)(v117 + 272) + 4 * v168 + 4);
              v171 = v170 - v169;
              if (v170 != v169)
              {
                v172 = 0;
                do
                {
                  ConstrainedTransAccMgr::copyBackMeans((AdaptController **)this, v168, v172, (LinearTransform *)(v221 + 72 * v165), v113, v114, v115, v116);
                  v172 = (v172 + 1);
                }
                while (v171 != (_DWORD)v172);
                v166 = v208;
              }
              ++v167;
            }
            while (v167 < *(unsigned int *)&v166[16 * v165 + 8]);
            v164 = v222;
            v107 = v197;
          }
          ++v165;
        }
        while (v165 < v164);
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v206);
      DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v208);
      v120 = a5;
      v119 = v205;
    }
    if (v107)
    {
      v178 = *(uint64_t **)v24;
      v179 = v107;
      do
      {
        v180 = *v178++;
        *(_BYTE *)(v180 + 22) = 1;
        --v179;
      }
      while (v179);
    }
    SnapTime::recordTime(a4, 1, 1, 1, 1);
    if (v120)
      *v120 = v119;
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v210);
    DgnArray<LinearTransform>::releaseAll((uint64_t)&v211);
    v80 = 1;
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v214);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v217);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v219);
  DgnArray<LinearTransform>::releaseAll((uint64_t)&v221);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v223);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v225);
LABEL_270:
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v227);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v229);
  return v80;
}

void sub_2098120A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a34);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a36);
  DgnArray<LinearTransform>::releaseAll((uint64_t)&a38);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a41);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a29);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v41 - 216);
  DgnArray<LinearTransform>::releaseAll(v41 - 200);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v41 - 184);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v41 - 168);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v41 - 152);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v41 - 136);
  _Unwind_Resume(a1);
}

BOOL ConstrainedTransAccMgr::computeInitialTransform(ConstrainedTransAccMgr *this, CTPelAccum *a2, int a3, DgnMatrix *a4)
{
  DgnMatrix *v8;
  int v9;
  _BOOL8 v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  DgnMatrix *v15;
  unsigned int v16;
  unsigned int v17;
  int v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;

  v8 = (DgnMatrix *)*((unsigned int *)a2 + 4);
  DgnMatrix::makeIdentity(v8, (uint64_t)&v21);
  if ((ConstrainedTransAccMgr::computeMeansTransform(this, a2, a3, (DgnMatrix *)&v21) & 1) != 0)
  {
    DgnMatrix::invert(&v21, (uint64_t)&v19);
    v9 = v19;
    v10 = v19 != 0;
    if (v19 && (_DWORD)v8)
    {
      v11 = 0;
      v12 = v20;
      v13 = *(_DWORD *)a4;
      v14 = *((_QWORD *)a4 + 1);
      do
      {
        v15 = v8;
        v16 = v11;
        v17 = v11;
        do
        {
          *(_QWORD *)(v14 + 8 * v17) = *(_QWORD *)(v12 + 8 * v16);
          v17 += v13;
          v16 += v9;
          v15 = (DgnMatrix *)((char *)v15 - 1);
        }
        while (v15);
        ++v11;
      }
      while (v11 != (_DWORD)v8);
    }
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v20);
  }
  else
  {
    v10 = 0;
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v22);
  return v10;
}

void sub_209812320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ConstrainedTransAccMgr::computeIterativeTransform(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int *a7, _QWORD *a8, double a9)
{
  int v10;
  double v11;
  char v12;
  int v19;
  unint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t i;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  double v40;
  uint64_t **v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  CTPelAccum *v55;
  unsigned int v56;
  int v57;
  int v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  BOOL v74;
  double v75;
  double v76;
  char v77;
  long double v78;
  double v79;
  double v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v101;
  double v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  uint64_t *v110;
  int v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  double v121;
  double v122;
  uint64_t v124;
  uint64_t v125;
  double *v126;
  double *v127;
  double v128;
  BOOL v129;
  uint64_t *v130;
  int v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  double *v137;
  double v138;
  double *v139;
  double *v140;
  uint64_t v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double *v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  int v161;
  unsigned int v162;
  double v163;
  int v164;
  double v165;
  BOOL v166;
  double v167;
  uint64_t v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  char v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  unsigned int v183[2];
  double v184;
  int *v185;
  double DataDataAccumUnscaled;
  double v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  unsigned int v193;
  _DWORD *v194;
  double v195;
  uint64_t *v196;
  int v197;
  uint64_t v198;
  double *v200[2];
  double *v201[2];
  _QWORD v202[2];
  uint64_t *v203;
  uint64_t v204;
  unsigned int v205;
  double *v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t *v209;
  int v210;
  uint64_t *v211;
  unsigned int v212;
  double *v213;
  uint64_t *v214;
  int v215;
  void *v216;
  uint64_t *v217;
  int v218;
  _DWORD *v219;
  uint64_t v220;

  if (*(_BYTE *)(a2 + 20))
    v10 = 0;
  else
    v10 = a4;
  v11 = (double)*(uint64_t *)(a2 + 56) * 0.00390625;
  if (v11 != 0.0)
  {
    v177 = v10;
    v181 = *(unsigned int *)(a2 + 16);
    if (*a1)
      v19 = *(_DWORD *)(*(_QWORD *)(*a1 + 8) + 168);
    else
      v19 = 0;
    v219 = 0;
    v220 = 0;
    if (v10)
    {
      v216 = 0;
      v20 = realloc_array(0, &v216, 4 * v181, 0, 0, 1);
      v21 = v216;
      v219 = v216;
      LODWORD(v220) = v181;
      HIDWORD(v220) = v20 >> 2;
      *(_DWORD *)v216 = 0;
      if (v181 >= 2)
      {
        v22 = 0;
        for (i = 1; i != v181; ++i)
        {
          v22 += i;
          v21[i] = v22;
        }
      }
    }
    v24 = *a1;
    v162 = 1;
    if ((v177 | a5 ^ 1) == 1 && !a3)
      v162 = *(_DWORD *)(*(_QWORD *)(v24 + 8) + 116);
    if ((a5 & 1) != 0 || (a6 & 1) != 0)
    {
      v25 = 0;
      if (!v24)
      {
        v26 = 1;
        goto LABEL_21;
      }
    }
    else
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 + 8) + 82);
    }
    v26 = *(_BYTE *)(*(_QWORD *)(v24 + 8) + 164) != 0;
LABEL_21:
    v166 = v26;
    LODWORD(v216) = v181;
    HIDWORD(v216) = v181;
    v27 = HIDWORD(v216) * HIDWORD(v216);
    v218 = 0;
    v217 = 0;
    if (HIDWORD(v216) * HIDWORD(v216))
    {
      v217 = MemChunkAlloc(8 * (HIDWORD(v216) * HIDWORD(v216)), 0);
      v218 = v27;
    }
    if (!v162)
    {
LABEL_173:
      v12 = 1;
LABEL_178:
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v217);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v219);
      return v12 & 1;
    }
    v28 = 0;
    v161 = 0;
    v29 = 1.0 / v11 / 1000.0;
    v184 = (double)v19 * 0.1 * (1.0 / v11 * v29 * ((double)v19 * 0.1));
    v30 = v181;
    v176 = (v25 + (_DWORD)v181) * (v25 + (_DWORD)v181);
    v190 = v25 + v181;
    v178 = 8 * v190;
    v168 = 8 * v176;
    v167 = v11;
    v165 = -v11;
    v31 = 1.0;
    if (a3)
      v31 = a9;
    v163 = v31;
    v191 = v25;
    v198 = v25 - 1;
    v192 = 1 - v25;
    v180 = v25;
    v179 = a8;
    v185 = a7;
    v174 = a5;
    v175 = a6;
    v164 = a3;
    v32 = (uint64_t *)a2;
    v193 = v25;
    while (1)
    {
      v33 = 8 * v181;
      if ((_DWORD)v30)
        break;
LABEL_172:
      v28 = ++v161 >= v162;
      if (v161 == v162)
        goto LABEL_173;
    }
    v34 = 0;
    v182 = v28;
    while (1)
    {
      *(_QWORD *)v183 = v34;
      if (v175)
      {
        LODWORD(v214) = 0;
        v213 = 0;
        v35 = MemChunkAlloc(v33, 0);
        v213 = (double *)v35;
        LODWORD(v214) = v30;
        bzero(v35, v33);
        v35[v34] = 0x3FF0000000000000;
        v36 = a7[1];
        if ((_DWORD)v36)
        {
          v37 = *a7;
          v38 = *((_QWORD *)a7 + 1);
          v39 = v34;
          do
          {
            v40 = *(double *)v35++;
            *(double *)(v38 + 8 * v39) = v40;
            v39 += v37;
            --v36;
          }
          while (v36);
        }
        *(double *)(*a8 + 8 * v34) = (double)*(uint64_t *)(v32[13] + 8 * v34)
                                   * -0.0000305175781
                                   / ((double)v32[7]
                                    * 0.00390625);
        v41 = (uint64_t **)&v213;
        goto LABEL_171;
      }
      LODWORD(v213) = v190;
      HIDWORD(v213) = v190;
      v215 = 0;
      v214 = 0;
      if ((_DWORD)v176)
      {
        v214 = MemChunkAlloc(v168, 0);
        v215 = v176;
      }
      v212 = 0;
      v211 = 0;
      if ((_DWORD)v190)
      {
        v42 = MemChunkAlloc(v178, 0);
        v211 = v42;
        v212 = v190;
        bzero(v42, v178);
        if ((v174 & 1) != 0)
          goto LABEL_38;
      }
      else
      {
        v42 = 0;
        if ((v174 & 1) != 0)
        {
LABEL_38:
          v34 = *(_QWORD *)v183;
          if (v177)
            v43 = v183[0] + 1;
          else
            v43 = 1;
          v44 = v183[0];
          if (v177)
            v44 = v219[*(_QWORD *)v183] + v183[0];
          v45 = *(uint64_t **)(v32[8] + 16 * *(_QWORD *)v183);
          v46 = (double)*v45 * 0.0000305175781;
          v47 = (double)v45[v43];
          DataDataAccumUnscaled = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)v32, v44, 0, 0);
          v172 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)v32, v44, v43, 0);
          v170 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)v32, v44, v43, v43);
          v48 = 32768.0;
          if (v43)
            v49 = 256.0;
          else
            v49 = 32768.0;
          if (!v43)
            v48 = 4194304.0;
          v169 = v48;
          if (v43)
            v50 = 256.0;
          else
            v50 = 4194304.0;
          v51 = v47 / v49;
          if (v177)
          {
            v52 = 0;
            v194 = v219;
            while (v52 >= *(_QWORD *)v183)
            {
              if (v52 != *(_QWORD *)v183)
              {
                v53 = v194[v52] + v183[0];
                v54 = v52 + 1;
                v55 = (CTPelAccum *)v32;
                v56 = v53;
                v57 = v52 + 1;
                v58 = v183[0] + 1;
                goto LABEL_58;
              }
              ++v52;
LABEL_59:
              if (v52 == v30)
                goto LABEL_60;
            }
            v53 = v194[*(_QWORD *)v183] + v52;
            v54 = v52 + 1;
            v55 = (CTPelAccum *)v32;
            v56 = v53;
            v57 = v183[0] + 1;
            v58 = v52 + 1;
LABEL_58:
            v59 = CTPelAccum::getDataDataAccumUnscaled(v55, v56, v57, v58) * 0.00390625;
            v60 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)v32, v53, v183[0] + 1, 0) * 0.0000305175781;
            v61 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)v32, v53, v54, 0) * 0.0000305175781;
            v62 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)v32, v53, 0, 0);
            v63 = *(double *)(*((_QWORD *)v185 + 1) + 8 * (v52 + v52 * *v185));
            v64 = *(double *)(*a8 + 8 * v52);
            v51 = v51 - (v60 * v64 + v63 * v59);
            v46 = v46 - (v62 * 0.000000238418579 * v64 + v63 * v61);
            v52 = v54;
            v25 = v193;
            goto LABEL_59;
          }
LABEL_60:
          v65 = DataDataAccumUnscaled * 0.000000238418579;
          v187 = v170 / v50;
          v195 = v172 / v169;
          v66 = v195 * v195 - v65 * (v170 / v50);
          v67 = 0.0 - v66;
          if (v66 >= 0.0)
            v67 = v195 * v195 - v65 * (v170 / v50);
          v12 = v182;
          a7 = v185;
          if (v67 < 1.0e-10)
            goto LABEL_177;
          v68 = (v51 * v65 - v195 * v46) / v66;
          v69 = v167 * v65 / v66 * -4.0;
          v70 = v69 + v68 * v68;
          if (v70 < 0.0)
            goto LABEL_177;
          v71 = (DgnSqrt(v69 + v68 * v68) - v68) * 0.5;
          v72 = (-v68 - DgnSqrt(v70)) * 0.5;
          if (v71 <= 0.0 || v72 >= 1.0)
            goto LABEL_177;
          v74 = v71 + v72 <= 2.0 || v72 <= 0.0;
          if (!v74 || v65 == 0.0)
            goto LABEL_177;
          v75 = v46 + -v195 * v71;
          v76 = v75 / v65;
          v77 = v177;
          if (v72 <= 0.0)
            v77 = 1;
          if ((v77 & 1) != 0
            || (v173 = v75 / v65,
                v171 = DgnLog(v71),
                v78 = DgnLog(v72),
                v79 = (v46 + -v195 * v72) / v65,
                v76 = v173,
                v51 * v71
              + v167 * v171
              + v46 * v173
              + (v173 * (v65 * v173) + v187 * v71 * v71 + (v195 + v195) * v173 * v71) * -0.5 >= v51 * v72
                                                                                              + v167 * v78
                                                                                              + v46 * v79
                                                                                              + (v79 * (v65 * v79)
                                                                                               + v187 * v72 * v72
                                                                                               + (v195 + v195)
                                                                                               * v79
                                                                                               * v72)
                                                                                              * -0.5))
          {
            v79 = v76;
            v72 = v71;
          }
          v80 = 1.0 - a9 + a9 * v72;
          if (!v164)
            v80 = v72;
          v81 = v211;
          *(double *)&v211[*(_QWORD *)v183] = v80;
          v82 = v185[1];
          if ((_DWORD)v82)
          {
            v83 = *v185;
            v84 = *((_QWORD *)v185 + 1);
            v85 = v183[0];
            do
            {
              v86 = *v81++;
              *(_QWORD *)(v84 + 8 * v85) = v86;
              v85 += v83;
              --v82;
            }
            while (v82);
          }
          *(double *)(*a8 + 8 * *(_QWORD *)v183) = v163 * v79;
          goto LABEL_170;
        }
      }
      v196 = v42;
      if (v177)
        v87 = v219[*(_QWORD *)v183] + v183[0];
      else
        v87 = v183[0];
      if ((_DWORD)v190)
      {
        v88 = 0;
        v89 = 0;
        v188 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 16 * *(_QWORD *)v183);
        v90 = v213;
        v91 = v214;
        do
        {
          v92 = 0;
          v93 = 0;
          v94 = v89++;
          v95 = v89 - v25;
          v96 = 256.0;
          if (v89 == v191)
            v96 = 32768.0;
          *(double *)&v196[v94] = v29 * ((double)*(uint64_t *)(v188 + 8 * v95) / v96);
          if (v89 == v191)
            v97 = 0.0;
          else
            v97 = v184;
          do
          {
            v98 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)a2, v87, v95, v192 + v93);
            v99 = 32768.0;
            if (!((v192 + (_DWORD)v93) | v95))
              v99 = 4194304.0;
            if (v198 != v93 && v89 != v191)
              v99 = 256.0;
            v101 = v29 * (v98 / v99);
            if (v94 == v93)
              v102 = v97;
            else
              v102 = 0.0;
            *(double *)&v103 = v102 + v101;
            v91[(v94 + v92)] = v103;
            v91[(v88 + v93)] = v103;
            v92 += v90;
            ++v93;
          }
          while (v89 != v93);
          v88 += v90;
          v25 = v193;
        }
        while (v89 != v190);
      }
      a8 = v179;
      a7 = v185;
      v32 = (uint64_t *)a2;
      v30 = v181;
      v12 = v182;
      if ((v177 & 1) != 0)
      {
        LODWORD(v208) = v190;
        HIDWORD(v208) = v190;
        v210 = 0;
        v209 = 0;
        v104 = *(_QWORD *)v183;
        if ((_DWORD)v176)
        {
          v209 = MemChunkAlloc(v168, 0);
          v210 = v176;
        }
        v105 = 0;
        do
        {
          if (v105 != v104)
          {
            v189 = v105;
            LODWORD(v204) = 0;
            v203 = 0;
            if ((_DWORD)v190)
            {
              v106 = MemChunkAlloc(v178, 0);
              v203 = v106;
              LODWORD(v204) = v190;
            }
            else
            {
              v106 = 0;
            }
            v107 = v189;
            if (v25)
              *v106 = *(_QWORD *)(*a8 + 8 * v189);
            v108 = *a7;
            v109 = *((_QWORD *)a7 + 1);
            v110 = &v106[v180];
            do
            {
              *v110++ = *(_QWORD *)(v109 + 8 * v107);
              v107 += v108;
              --v30;
            }
            while (v30);
            v111 = v189;
            if (v189 <= v104)
              v112 = v104;
            else
              v112 = v189;
            if (v189 >= v104)
              v111 = v104;
            if ((_DWORD)v190)
            {
              v113 = 0;
              v197 = 0;
              v114 = v219[v112] + v111;
              v115 = v208;
              v116 = v209;
              v117 = 1;
              do
              {
                v118 = 0;
                v119 = v197++;
                v120 = v197 - v25;
                do
                {
                  v121 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)a2, v114, v120, v192 + v118);
                  v25 = v193;
                  v122 = 32768.0;
                  if (!((v192 + (_DWORD)v118) | v120))
                    v122 = 4194304.0;
                  if (v198 != v118 && v197 != v193)
                    v122 = 256.0;
                  *(double *)&v124 = v29 * (v121 / v122);
                  v116[v119] = v124;
                  v116[(v113 + v118)] = v124;
                  v119 += v115;
                  ++v118;
                }
                while (v117 != v118);
                ++v117;
                v113 += v115;
              }
              while (v197 != (_DWORD)v190);
            }
            DgnVector::operator*((uint64_t *)&v203, (int *)&v208, (uint64_t)&v206);
            v125 = v212;
            v32 = (uint64_t *)a2;
            v30 = v181;
            v12 = v182;
            if (v212)
            {
              v126 = v206;
              v127 = (double *)v211;
              do
              {
                v128 = *v126++;
                *v127 = *v127 - v128;
                ++v127;
                --v125;
              }
              while (v125);
            }
            DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v206);
            DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v203);
            a8 = v179;
            a7 = v185;
            v105 = v189;
            v104 = *(_QWORD *)v183;
          }
          ++v105;
        }
        while (v105 != v30);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v209);
      }
      DgnMatrix::invert(&v213, (uint64_t)&v208);
      v34 = *(_QWORD *)v183;
      if (!(_DWORD)v208)
        goto LABEL_176;
      v129 = v166;
      if (!*(_QWORD *)v183)
        v129 = 0;
      if (!v129)
      {
        DgnMatrix::cofactorMatrix((double **)a7, (uint64_t)&v203);
        v216 = v203;
        DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v217, &v204, 0, v205);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v204);
      }
      LODWORD(v204) = 0;
      v203 = 0;
      if ((_DWORD)v190)
        break;
      v130 = 0;
      if (v25)
        goto LABEL_151;
LABEL_152:
      v131 = (int)v216;
      v132 = v217;
      v133 = &v130[v180];
      v134 = v30;
      v135 = v183[0];
      do
      {
        *v133++ = v132[v135];
        v135 += v131;
        --v134;
      }
      while (v134);
      DgnVector::operator*((uint64_t *)&v203, (int *)&v208, (uint64_t)&v206);
      v136 = v207;
      if (v207)
      {
        v137 = v206;
        v138 = 0.0;
        v139 = (double *)v203;
        v140 = v206;
        v141 = v207;
        do
        {
          v142 = *v140++;
          v143 = v142;
          v144 = *v139++;
          v138 = v138 + v143 * v144;
          --v141;
        }
        while (v141);
        v145 = 0.0;
        v146 = (double *)v211;
        do
        {
          v147 = *v137++;
          v148 = v147;
          v149 = *v146++;
          v145 = v145 + v148 * v149;
          --v136;
        }
        while (v136);
      }
      else
      {
        v138 = 0.0;
        v145 = 0.0;
      }
      v150 = v29 * v138;
      if (v29 * v138 < 1.0e-10 || (v151 = v150 * -4.0 * v165 + v145 * v145, v151 < 0.0))
      {
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v206);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v203);
LABEL_176:
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v209);
LABEL_177:
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v211);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v214);
        goto LABEL_178;
      }
      v152 = DgnSqrt(v151);
      DgnVector::operator*((uint64_t)&v203, (uint64_t)v200, v29 * ((v152 - v145) / (v150 + v150)));
      DgnVector::operator+((uint64_t)&v211, v200, (uint64_t)v201);
      DgnMatrix::operator*(&v208, v201, (uint64_t)v202);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v201);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v200);
      v153 = v202[0];
      if (v25)
        *(_QWORD *)(*a8 + 8 * *(_QWORD *)v183) = *(_QWORD *)v202[0];
      v154 = *a7;
      v155 = *((_QWORD *)a7 + 1);
      v156 = (uint64_t *)(v153 + v180 * 8);
      v157 = v30;
      v158 = v183[0];
      do
      {
        v159 = *v156++;
        *(_QWORD *)(v155 + 8 * v158) = v159;
        v158 += v154;
        --v157;
      }
      while (v157);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v202);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v206);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v203);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v209);
LABEL_170:
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v211);
      v41 = &v214;
LABEL_171:
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v41);
      ++v34;
      v33 = 8 * v181;
      if (v34 == v30)
        goto LABEL_172;
    }
    v130 = MemChunkAlloc(v178, 0);
    v203 = v130;
    LODWORD(v204) = v190;
    if (!v25)
      goto LABEL_152;
LABEL_151:
    *v130 = 0;
    goto LABEL_152;
  }
  v12 = 0;
  return v12 & 1;
}

void sub_209813124(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 168);
  _Unwind_Resume(a1);
}

uint64_t ConstrainedTransAccMgr::computeMeansTransform(ConstrainedTransAccMgr *this, CTPelAccum *a2, int a3, DgnMatrix *a4)
{
  CTPelAccum *v5;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t i;
  double v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double MeanMeanAccumUnscaled;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  CTPelAccum *v66;
  _QWORD v67[2];
  uint64_t v68[2];
  uint64_t v69;
  uint64_t *v70;
  int v71;
  double *v72;
  unsigned int v73;
  void *v74;
  uint64_t *v75;
  int v76;
  _DWORD *v77;
  uint64_t v78;

  v5 = a2;
  v7 = *(unsigned __int8 *)(*(_QWORD *)this + 48);
  if (*((_BYTE *)a2 + 20))
    v8 = 0;
  else
    v8 = a3;
  v9 = *((unsigned int *)a2 + 4);
  v77 = 0;
  v78 = 0;
  v59 = v8;
  if (v8 == 1)
  {
    v74 = 0;
    v10 = realloc_array(0, &v74, 4 * v9, 0, 0, 1);
    v11 = v74;
    v77 = v74;
    LODWORD(v78) = v9;
    HIDWORD(v78) = v10 >> 2;
    *(_DWORD *)v74 = 0;
    if (v9 >= 2)
    {
      v12 = 0;
      for (i = 1; i != v9; ++i)
      {
        v12 += i;
        v11[i] = v12;
      }
    }
  }
  v65 = v9;
  v14 = (double)*((uint64_t *)v5 + 7) * 0.00390625;
  if (v14 != 0.0)
  {
    v55 = 1;
    if (v7)
    {
      if (a3)
      {
        v55 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 388);
        if (!v55)
        {
          v53 = 1;
          goto LABEL_54;
        }
      }
    }
    v56 = 0;
    v15 = 1.0 / (v14 * 1000.0);
    LODWORD(v16) = v9;
    v60 = v16 * v16;
    v57 = 8 * (v16 * v16);
    v58 = 8 * v9;
    v66 = v5;
    while (!(_DWORD)v16)
    {
LABEL_50:
      v53 = 1;
      if (++v56 == v55)
        goto LABEL_54;
    }
    v17 = 0;
    while (1)
    {
      LODWORD(v74) = v16;
      HIDWORD(v74) = v16;
      v76 = 0;
      v75 = 0;
      if (v60)
      {
        v75 = MemChunkAlloc(v57, 0);
        v76 = v60;
      }
      v73 = 0;
      v72 = 0;
      v18 = MemChunkAlloc(v58, 0);
      v72 = (double *)v18;
      v73 = v16;
      if (v59)
        v19 = (v77[v17] + v17);
      else
        v19 = v17;
      v20 = 0;
      v21 = 0;
      v62 = v17;
      v63 = *(_QWORD *)(*((_QWORD *)v5 + 16) + 16 * v17);
      v22 = (int)v74;
      v23 = v75;
      v24 = 1;
      v64 = v18;
      do
      {
        v25 = 0;
        v26 = v21++;
        *(double *)&v18[v26] = v15 * ((double)*(uint64_t *)(v63 + 8 * v21) * 0.00390625);
        do
        {
          v27 = v19;
          MeanMeanAccumUnscaled = CTPelAccum::getMeanMeanAccumUnscaled(v66, v19, v21, (int)v25 + 1);
          v19 = v27;
          *(double *)&v29 = v15 * (MeanMeanAccumUnscaled * 0.00390625);
          v23[v26] = v29;
          v23[(v20 + v25)] = v29;
          LODWORD(v26) = v26 + v22;
          ++v25;
        }
        while (v24 != v25);
        ++v24;
        v20 += v22;
        v18 = v64;
        v16 = v65;
      }
      while (v21 != v65);
      v30 = v62;
      if ((v59 & 1) != 0)
      {
        LODWORD(v69) = v65;
        HIDWORD(v69) = v65;
        v71 = 0;
        v70 = 0;
        if (v60)
        {
          v70 = MemChunkAlloc(v57, 0);
          v71 = v60;
        }
        v31 = 0;
        do
        {
          if (v31 != v30)
          {
            DgnMatrix::getRow((uint64_t *)a4, v31, (uint64_t)v68);
            v32 = 0;
            v33 = 0;
            if (v31 <= v30)
              v34 = v30;
            else
              v34 = v31;
            if (v31 >= v30)
              v35 = v30;
            else
              v35 = v31;
            v36 = v77[v34] + v35;
            v37 = v69;
            v38 = v70;
            v39 = 1;
            do
            {
              v40 = 0;
              v41 = v33++;
              do
              {
                *(double *)&v42 = v15 * (CTPelAccum::getMeanMeanAccumUnscaled(v66, v36, v33, (int)v40 + 1) * 0.00390625);
                v38[v41] = v42;
                v38[(v32 + v40)] = v42;
                v41 += v37;
                ++v40;
              }
              while (v39 != v40);
              ++v39;
              v32 += v37;
              v16 = v65;
            }
            while (v33 != (_DWORD)v65);
            DgnVector::operator*(v68, (int *)&v69, (uint64_t)v67);
            v43 = v73;
            v30 = v62;
            if (v73)
            {
              v44 = (double *)v67[0];
              v45 = v72;
              do
              {
                v46 = *v44++;
                *v45 = *v45 - v46;
                ++v45;
                --v43;
              }
              while (v43);
            }
            DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v67);
            DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v68);
          }
          ++v31;
        }
        while (v31 != v16);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v70);
      }
      DgnMatrix::invert((double **)&v74, (uint64_t)&v69);
      if (!(_DWORD)v69)
        break;
      DgnMatrix::operator*(&v69, &v72, (uint64_t)v68);
      v47 = *((unsigned int *)a4 + 1);
      v5 = v66;
      if ((_DWORD)v47)
      {
        v48 = (uint64_t *)v68[0];
        v49 = *(_DWORD *)a4;
        v50 = v30;
        v51 = *((_QWORD *)a4 + 1);
        do
        {
          v52 = *v48++;
          *(_QWORD *)(v51 + 8 * v50) = v52;
          v50 += v49;
          --v47;
        }
        while (v47);
      }
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v68);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v70);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v72);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v75);
      v17 = v30 + 1;
      if (v17 == v16)
        goto LABEL_50;
    }
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v70);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v72);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v75);
  }
  v53 = 0;
LABEL_54:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v77);
  return v53;
}

void sub_2098136A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 120);
  _Unwind_Resume(a1);
}

BOOL fillIntTransform(uint64_t a1, double **a2, uint64_t *a3, _DWORD **a4, unsigned int a5, int a6, int a7, unsigned int a8)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BOOL8 v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double *v19;
  double v20;
  _DWORD *v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  BOOL v27;

  if (a6 == 3 || !a8)
  {
LABEL_19:
    v12 = 1;
    if (a8 && a7)
    {
      v19 = *a2;
      v20 = (double)a5;
      v21 = *a4;
      v22 = a8 - 1;
      do
      {
        v23 = *v19++;
        v24 = v23 * v20;
        if (v23 * v20 >= 0.0)
          v25 = 0.5;
        else
          v25 = -0.5;
        *v21++ = (int)(v24 + v25);
        v12 = v24 <= 1073741820.0 && v24 >= -1073741820.0;
        v27 = v22-- != 0;
      }
      while (v12 && v27);
    }
  }
  else
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (double)a5;
    v11 = *a3;
    while (a6 == 2)
    {
      v12 = 0;
      v13 = *(double *)(v9 + 8 * (v8 + v8 * *(_DWORD *)a1)) * v10;
      if (v13 >= 0.0)
        v14 = 0.5;
      else
        v14 = -0.5;
      **(_DWORD **)(v11 + 16 * v8) = (int)(v13 + v14);
      if (v13 < -32768.0 || v13 > 32767.0)
        return v12;
LABEL_18:
      if (++v8 == a8)
        goto LABEL_19;
    }
    v15 = 0;
    v16 = *(_QWORD *)(v11 + 16 * v8);
    while (1)
    {
      v12 = 0;
      v17 = *(double *)(v9 + 8 * (v8 + *(_DWORD *)a1 * v15)) * v10;
      v18 = v17 >= 0.0 ? 0.5 : -0.5;
      *(_DWORD *)(v16 + 4 * v15) = (int)(v17 + v18);
      if (v17 < -32768.0 || v17 > 32767.0)
        break;
      if (a8 == ++v15)
        goto LABEL_18;
    }
  }
  return v12;
}

void DgnArray<LinearTransform>::copyArraySlice(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= 1)
  {
    v9 = 72 * v8 - 72;
    do
    {
      LinearTransform::~LinearTransform((LinearTransform *)(*(_QWORD *)a1 + v9));
      v9 -= 72;
    }
    while (v9 != -72);
  }
  *(_DWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_14;
  }
  else
  {
    DgnArray<LinearTransform>::reallocElts(a1, a4 - v10, 0);
    v11 = *(_DWORD *)(a1 + 8);
  }
  v13 = 0;
  v12 = v11;
  do
  {
    LinearTransform::LinearTransform((LinearTransform *)(*(_QWORD *)a1 + 72 * v12), (const LinearTransform *)(*a2 + 72 * (a3 + v13)));
    v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      v14 = (int)v12;
      v15 = 72 * (int)v12 - 72;
      do
      {
        --v14;
        LinearTransform::~LinearTransform((LinearTransform *)(*(_QWORD *)a1 + v15));
        v15 -= 72;
      }
      while (v14 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  v16 = a4 - v12;
  if (a4 > v12)
  {
    v17 = 72 * v12;
    do
    {
      LinearTransform::LinearTransform((LinearTransform *)(*(_QWORD *)a1 + v17));
      v17 += 72;
      --v16;
    }
    while (v16);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

unint64_t CTFTMgr::setSpeakerCTList(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v11;
  unint64_t result;
  int v13;

  v11 = a1 + 16;
  DgnArray<LinearTransform>::copyArraySlice((uint64_t)(a1 + 16), (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 20), (uint64_t *)a3, 0, *(_DWORD *)(a3 + 8));
  a1[14] = a1[18];
  DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 6), (uint64_t *)a4, 0, *(_DWORD *)(a4 + 8));
  DgnArray<LinearTransform>::copyArraySlice((uint64_t)(a1 + 26), (_QWORD *)a5, 0, *(_DWORD *)(a5 + 8));
  result = DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 30), (uint64_t *)a6, 0, *(_DWORD *)(a6 + 8));
  a1[24] = a1[28];
  v13 = a1[14];
  if (v13)
    v13 = *(_DWORD *)(*(_QWORD *)v11 + 4);
  a1[2] = v13;
  return result;
}

uint64_t multiplyIntTransform(LinearTransform *a1, const LinearTransform *a2, unsigned int a3, int a4, int a5, DgnMatrix *this, int *a7)
{
  DgnMatrix *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  unsigned int v33;
  double *v34;
  int v35;
  double *v36;
  int v37;
  double *v38;
  int v39;
  double *v40;
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  DgnMatrix::makeIdentity(this, (uint64_t)&v44);
  DgnMatrix::makeIdentity(this, (uint64_t)&v42);
  DgnMatrix::makeIdentity(this, (uint64_t)&v40);
  v39 = 0;
  v38 = 0;
  if ((_DWORD)this)
  {
    v38 = (double *)MemChunkAlloc(8 * this, 0);
    v39 = (int)this;
    bzero(v38, 8 * this);
    v36 = (double *)MemChunkAlloc(8 * this, 0);
    v37 = (int)this;
    bzero(v36, 8 * this);
    v34 = (double *)MemChunkAlloc(8 * this, 0);
    v35 = (int)this;
    bzero(v34, 8 * this);
  }
  else
  {
    v37 = 0;
    v36 = 0;
    v35 = 0;
    v34 = 0;
  }
  LinearTransform::getUnscaledData((int *)a1, &v44, &v38);
  LinearTransform::getUnscaledData((int *)a2, &v42, &v36);
  if (a4 == 3)
  {
    if ((a5 & 1) != 0)
    {
      DgnVector::operator+((uint64_t)&v36, &v38, (uint64_t)&v31);
      DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v34, (uint64_t *)&v31, 0, v32);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v31);
    }
    v14 = 0;
  }
  else
  {
    DgnMatrix::operator*(&v44, (DgnMatrix *)&v42, (uint64_t)&v31);
    v40 = (double *)v31;
    DgnPrimFixArray<double>::copyArraySlice((uint64_t)v41, &v32, 0, v33);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v32);
    v14 = this;
    if (a5)
    {
      DgnMatrix::operator*(&v44, &v36, (uint64_t)&v29);
      DgnVector::operator+((uint64_t)&v29, &v38, (uint64_t)&v31);
      DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v34, (uint64_t *)&v31, 0, v32);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v31);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
      v14 = this;
    }
  }
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(&v29, (uint64_t)v14);
  v15 = v30;
  if (v30)
  {
    v16 = 0;
    v17 = 0;
    if (a4 == 2)
      v18 = 1;
    else
      v18 = this;
    do
    {
      v19 = v29 + v16;
      v20 = *(_DWORD *)(v29 + v16 + 12);
      if (v18 > v20)
      {
        DgnPrimArray<unsigned int>::reallocElts(v29 + v16, v18 - v20, 0);
        v15 = v30;
      }
      *(_DWORD *)(v19 + 8) = v18;
      ++v17;
      v16 += 16;
    }
    while (v17 < v15);
  }
  if (a5)
    v21 = this;
  else
    v21 = 0;
  v27 = 0;
  v28 = 0;
  if (v21)
  {
    v31 = 0;
    HIDWORD(v28) = realloc_array(0, &v31, 4 * v21, 0, 0, 1) >> 2;
    v27 = v31;
  }
  LODWORD(v28) = v21;
  if (!fillIntTransform((uint64_t)&v40, &v34, &v29, &v27, a3, a4, a5, this))
  {
    DgnMatrix::makeIdentity(this, (uint64_t)&v31);
    v40 = (double *)v31;
    DgnPrimFixArray<double>::copyArraySlice((uint64_t)v41, &v32, 0, v33);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v32);
    LODWORD(v32) = 0;
    v31 = 0;
    if ((_DWORD)this)
    {
      v31 = MemChunkAlloc(8 * this, 0);
      LODWORD(v32) = (_DWORD)this;
      bzero(v31, 8 * this);
    }
    DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v34, (uint64_t *)&v31, 0, this);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v31);
    fillIntTransform((uint64_t)&v40, &v34, &v29, &v27, a3, a4, a5, this);
  }
  LinearTransform::setSize((uint64_t)a1, (int)this, (int)this);
  LinearTransform::setTransform((uint64_t)a1, (uint64_t)&v29, a4, (uint64_t)&v27, a5, a3, 0, v22);
  v23 = DgnMatrix::determinant(&v40);
  v24 = DgnLog(v23) * (double)a3;
  v25 = 0.5;
  if (v24 < 0.0)
    v25 = -0.5;
  *a7 = (int)(v24 + v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v29);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v34);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v36);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v38);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v41);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v43);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v45);
}

void sub_209813E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a14);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a12);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a17);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a19);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a21);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a24);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a27);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v27 - 104);
  _Unwind_Resume(a1);
}

unint64_t CTFTMgr::setChannelCTList(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v11;
  unint64_t result;
  int v13;

  v11 = a1 + 36;
  DgnArray<LinearTransform>::copyArraySlice((uint64_t)(a1 + 36), (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 40), (uint64_t *)a3, 0, *(_DWORD *)(a3 + 8));
  a1[34] = a1[38];
  DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 10), (uint64_t *)a4, 0, *(_DWORD *)(a4 + 8));
  DgnArray<LinearTransform>::copyArraySlice((uint64_t)(a1 + 46), (_QWORD *)a5, 0, *(_DWORD *)(a5 + 8));
  result = DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 50), (uint64_t *)a6, 0, *(_DWORD *)(a6 + 8));
  a1[44] = a1[48];
  v13 = a1[34];
  if (v13)
    v13 = *(_DWORD *)(*(_QWORD *)v11 + 4);
  a1[3] = v13;
  return result;
}

uint64_t ConstrainedTransAccMgr::copyBackMeans(AdaptController **this, uint64_t a2, uint64_t a3, LinearTransform *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  unint64_t PelMgr;
  double v12;
  uint64_t v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unsigned int *v20[2];
  int *v21[2];
  _QWORD v22[2];
  _QWORD v23[2];

  v9 = a3;
  v10 = a2;
  PelMgr = AdaptController::getPelMgr(*this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = PelMgr;
  v23[0] = 0;
  v23[1] = 0;
  v22[0] = 0;
  v22[1] = 0;
  v21[0] = 0;
  v21[1] = 0;
  v14 = *(_DWORD *)(PelMgr + 16);
  if (v14 == 1)
    PelMgr::unpackGenoneComponent(PelMgr, v10, v9, (uint64_t)v23, (uint64_t)v21);
  else
    PelMgr::unpackGenoneComponent(PelMgr, v10, v9, (uint64_t)v23, (uint64_t)v22, v12);
  v20[0] = 0;
  v20[1] = 0;
  LinearTransform::transformMeans((int *)a4, (uint64_t)v23, (uint64_t)v20);
  if (v14 == 1)
    PelMgr::packGenoneComponent(v13, v10, v9, v20, v21, 1, v15, v16, v17, v18);
  else
    PelMgr::packGenoneComponent(v13, v10, v9, v20, v22, v15);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v21);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v23);
}

void sub_209814158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

unint64_t CTFTMgr::setOnlineCTList(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  unint64_t result;
  int v7;

  v5 = a1 + 56;
  DgnArray<LinearTransform>::copyArraySlice((uint64_t)(a1 + 56), (_QWORD *)a2, 0, *(_DWORD *)(a2 + 8));
  result = DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 60), (uint64_t *)a3, 0, *(_DWORD *)(a3 + 8));
  v7 = a1[58];
  a1[54] = v7;
  if (v7)
    v7 = *(_DWORD *)(*(_QWORD *)v5 + 4);
  a1[4] = v7;
  return result;
}

double DgnVector::operator+@<D0>(uint64_t a1@<X0>, double **a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v6;
  double *v7;
  double *v8;
  double v9;

  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  result = DgnPrimFixArray<double>::copyArraySlice(a3, (uint64_t *)a1, 0, *(_DWORD *)(a1 + 8));
  v6 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v6)
  {
    v7 = *a2;
    v8 = *(double **)a3;
    do
    {
      v9 = *v7++;
      result = v9 + *v8;
      *v8++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

_QWORD *DgnArray<DgnArray<DgnPrimArray<long long>>>::destructAt(_QWORD *result, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;

  v3 = result;
  v4 = a3 + a2;
  v5 = a2;
  v6 = v4 + 1;
  for (i = 16 * v4 - 16; --v6 > v5; i = v8)
  {
    v8 = i - 16;
    result = DgnArray<DgnPrimArray<unsigned char>>::releaseAll(*v3 + i);
  }
  return result;
}

_QWORD *DgnArray<DgnArray<DgnPrimArray<int>>>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnArray<DgnArray<DgnPrimArray<int>>>::destructAt((_QWORD *)a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnArray<DgnArray<DgnPrimArray<int>>>::destructAt(_QWORD *result, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;

  v3 = result;
  v4 = a3 + a2;
  v5 = a2;
  v6 = v4 + 1;
  for (i = 16 * v4 - 16; --v6 > v5; i = v8)
  {
    v8 = i - 16;
    result = DgnArray<DgnPrimArray<unsigned char>>::releaseAll(*v3 + i);
  }
  return result;
}

uint64_t DgnArray<DgnArray<DgnPrimArray<int>>>::copyArraySlice(uint64_t a1, _QWORD *a2, int a3, unsigned int a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  result = (uint64_t)DgnArray<DgnArray<DgnPrimArray<int>>>::destructAt((_QWORD *)a1, 0, *(_DWORD *)(a1 + 8));
  *(_DWORD *)(a1 + 8) = 0;
  v9 = *(_DWORD *)(a1 + 12);
  if (a4 <= v9)
  {
    v10 = 0;
    v11 = 0;
    if (!a4)
      goto LABEL_8;
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1, a4 - v9, 0);
    v10 = *(_DWORD *)(a1 + 8);
  }
  v12 = 0;
  v11 = v10;
  do
  {
    v13 = *a2 + 16 * (a3 + v12);
    v14 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
    *v14 = 0;
    v14[1] = 0;
    result = DgnArray<DgnPrimArray<unsigned int>>::copyArraySlice((uint64_t)v14, (_QWORD *)v13, 0, *(_DWORD *)(v13 + 8));
    v11 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v11;
    ++v12;
  }
  while (a4 != v12);
  if (v11 > a4)
  {
    result = (uint64_t)DgnArray<DgnArray<DgnPrimArray<int>>>::destructAt((_QWORD *)a1, a4, v11 - a4);
    goto LABEL_11;
  }
LABEL_8:
  if (v11 < a4)
  {
    v15 = a4 - (unint64_t)v11;
    v16 = 16 * v11;
    do
    {
      v17 = (_QWORD *)(*(_QWORD *)a1 + v16);
      *v17 = 0;
      v17[1] = 0;
      v16 += 16;
      --v15;
    }
    while (v15);
  }
LABEL_11:
  *(_DWORD *)(a1 + 8) = a4;
  return result;
}

CTPelAccum *DgnIOwnArray<CTPelAccum *>::destructAt(CTPelAccum *result, int a2, int a3)
{
  CTPelAccum *v3;
  uint64_t v4;
  uint64_t v5;

  if (a3 + a2 > a2)
  {
    v3 = result;
    v4 = a2;
    v5 = a3 + a2 - 1;
    do
    {
      result = DgnDelete<CTPelAccum>(*(CTPelAccum **)(*(_QWORD *)v3 + 8 * v5));
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

_QWORD *DgnArray<LinearTransform>::DgnArray(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if ((_DWORD)a2)
  {
    DgnArray<LinearTransform>::reallocElts((uint64_t)a1, a2, 0);
    v4 = *((_DWORD *)a1 + 2);
    if (v4 > v2)
    {
      if ((int)v4 > (int)v2)
      {
        v5 = (int)v4;
        v6 = 72 * (int)v4 - 72;
        do
        {
          --v5;
          LinearTransform::~LinearTransform((LinearTransform *)(*a1 + v6));
          v6 -= 72;
        }
        while (v5 > (int)v2);
      }
      goto LABEL_11;
    }
  }
  else
  {
    v4 = 0;
  }
  v7 = v2 - v4;
  if (v2 > v4)
  {
    v8 = 72 * v4;
    do
    {
      LinearTransform::LinearTransform((LinearTransform *)(*a1 + v8));
      v8 += 72;
      --v7;
    }
    while (v7);
  }
LABEL_11:
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

unint64_t DgnArray<LinearTransform>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  unint64_t result;
  void *v8;

  v3 = a2;
  if (a3)
    v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 12) + v3;
  v8 = 0;
  result = realloc_array(*(_QWORD **)a1, &v8, 72 * v6, 72 * v5, 72 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x48;
  *(_QWORD *)a1 = v8;
  return result;
}

void DgnSharedMemMgr::DgnSharedMemMgr(DgnSharedMemMgr *this, const char *a2)
{
  DgnString *v3;

  v3 = DgnString::DgnString(this, a2);
  recursive_mutex_init((_opaque_pthread_mutex_t *)((char *)v3 + 16));
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = 0;
}

void sub_209814648(_Unwind_Exception *a1)
{
  DgnString *v1;

  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void DgnSharedMemMgr::startupDSMMgr(DgnSharedMemMgr *this, const char *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = MemChunkAlloc(0x70uLL, 0);
  DgnSharedMemMgr::DgnSharedMemMgr((DgnSharedMemMgr *)v3, (const char *)this);
  DgnSharedMemMgr::smpDSMMgr = v4;
}

void DgnSharedMemMgr::printSize(DgnSharedMemMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 78, (DgnString *)&v77);
  if (v78)
    v16 = (void *)v77;
  else
    v16 = &unk_209A6C6C2;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C6C2, a3, &unk_209A6C6C2, v16);
  v74 = a5;
  DgnString::~DgnString((DgnString *)&v77);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C6C2);
  v21 = sizeObject(this);
  v22 = sizeObject(this);
  v23 = sizeObject(this);
  v24 = (a3 + 1);
  v73 = a3;
  v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 80, (DgnString *)&v77);
  if (v78)
    v30 = (void *)v77;
  else
    v30 = &unk_209A6C6C2;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_209A6C6C2, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v77);
  *a4 += v21;
  *v74 += v22;
  *a6 += v23;
  v31 = sizeObject((uint64_t)this + 16, 0);
  v32 = sizeObject((uint64_t)this + 16, 1);
  v33 = sizeObject((uint64_t)this + 16, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 81, (DgnString *)&v77);
  if (v78)
    v38 = (void *)v77;
  else
    v38 = &unk_209A6C6C2;
  v72 = v25;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v24, &unk_209A6C6C2, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v77);
  *a4 += v31;
  *v74 += v32;
  *a6 += v33;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 82, (DgnString *)&v77);
  if (v78)
    v43 = (void *)v77;
  else
    v43 = &unk_209A6C6C2;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v39, v40, v41, v42, v24, &unk_209A6C6C2, v24, &unk_209A6C6C2, v43);
  v71 = a6;
  DgnString::~DgnString((DgnString *)&v77);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v44, v45, v46, v47, v24, &unk_209A6C6C2);
  v48 = *((unsigned int *)this + 26);
  if ((_DWORD)v48)
  {
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = a4;
    do
    {
      v54 = *((_QWORD *)this + 12);
      if (*(_QWORD *)(v54 + 8 * v49))
      {
        v76 = 0;
        v77 = 0;
        v75 = 0;
        DgnSharedMemSet::printSize(*(DSMSetData ***)(v54 + 8 * v49), v49, (v73 + 2), &v77, &v76, &v75);
        v52 += v77;
        v51 += v76;
        v50 += v75;
        v48 = *((unsigned int *)this + 26);
      }
      ++v49;
    }
    while (v49 < v48);
  }
  else
  {
    v52 = 0;
    v51 = 0;
    v50 = 0;
    v48 = 0;
    v53 = a4;
  }
  v55 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v55 = 16;
  v56 = v55 + v52;
  v57 = v55 + v51;
  v58 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v58 = 3;
  v59 = v56 + ((unint64_t)*((unsigned int *)this + 27) << v58);
  v60 = v57 + (v48 << v58);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 82, (DgnString *)&v77);
  if (v78)
    v65 = (void *)v77;
  else
    v65 = &unk_209A6C6C2;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, v24, &unk_209A6C6C2, v72, v72, v65, v59, v60, v50);
  DgnString::~DgnString((DgnString *)&v77);
  *v53 += v59;
  *v74 += v60;
  *v71 += v50;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 84, (DgnString *)&v77);
  if (v78)
    v70 = (void *)v77;
  else
    v70 = &unk_209A6C6C2;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v73, &unk_209A6C6C2, (35 - v73), (35 - v73), v70, *v53, *v74, *v71);
  DgnString::~DgnString((DgnString *)&v77);
}

void sub_209814AE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t DgnSharedMemMgr::getMaybeCreateSetObjectEx(DgnSharedMemMgr *this, const DgnString *a2, const DgnString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  const DgnString *v13;
  uint64_t v14;
  uint64_t SetPrefixName;
  const char *v16;
  const char *v17;
  uint64_t SetCacheDir;
  const char *v19;
  const char *v20;
  uint64_t *Set;
  unsigned int v22;
  uint64_t v23;
  int v24;
  void *v26;
  int v27;

  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 115, (uint64_t)"mrecutil/dsmmgr", 2, (uint64_t)"%s", a7, a8, (char)&unk_209A6C6C2);
  DgnString::DgnString((DgnString *)&v26, this);
  DgnString::operator+=(&v26, (uint64_t)a3);
  v11 = *((unsigned int *)this + 26);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  ++*((_DWORD *)this + 20);
  v12 = (_QWORD *)((char *)this + 96);
  *((_QWORD *)this + 11) = pthread_self();
  if ((_DWORD)v11)
  {
    v14 = 0;
    while (1)
    {
      SetPrefixName = DgnSharedMemSet::getSetPrefixName(*(DgnSharedMemSet **)(*v12 + 8 * v14));
      v16 = *(_DWORD *)(SetPrefixName + 8) ? *(const char **)SetPrefixName : (const char *)&unk_209A6C6C2;
      v17 = (const char *)(v27 ? v26 : &unk_209A6C6C2);
      if (!strcmp(v16, v17))
      {
        SetCacheDir = DgnSharedMemSet::getSetCacheDir(*(DgnSharedMemSet **)(*v12 + 8 * v14));
        v19 = *(_DWORD *)(SetCacheDir + 8) ? *(const char **)SetCacheDir : (const char *)&unk_209A6C6C2;
        v20 = *((_DWORD *)a2 + 2) ? *(const char **)a2 : (const char *)&unk_209A6C6C2;
        if (!strcmp(v19, v20))
          break;
      }
      if (v11 == ++v14)
      {
        LODWORD(v14) = v11;
        goto LABEL_21;
      }
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if ((_DWORD)v14 == (_DWORD)v11)
  {
LABEL_21:
    Set = DgnSharedMemSet::createSet(a2, (const DgnString *)&v26, v13);
    v22 = *((_DWORD *)this + 26);
    if (v22 == *((_DWORD *)this + 27))
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 96, 1, 1);
      v22 = *((_DWORD *)this + 26);
    }
    *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v22) = Set;
    *((_DWORD *)this + 26) = v22 + 1;
  }
  v23 = *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v14);
  v24 = *((_DWORD *)this + 20) - 1;
  *((_DWORD *)this + 20) = v24;
  if (!v24)
    *((_QWORD *)this + 11) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
  DgnString::~DgnString((DgnString *)&v26);
  return v23;
}

void sub_209814CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  pthread_mutex_t *v12;
  int v14;

  v14 = *(_DWORD *)(v11 + 80) - 1;
  *(_DWORD *)(v11 + 80) = v14;
  if (!v14)
    *(_QWORD *)(v11 + 88) = 0;
  pthread_mutex_unlock(v12);
  DgnString::~DgnString((DgnString *)&a11);
  _Unwind_Resume(a1);
}

uint64_t loggableToken(uint64_t a1)
{
  size_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  v2 = strlen((const char *)a1);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" (", 2);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") : ", 4);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD1496C](&v8);
}

void sub_209814E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void TLexerLexicon::TLexerLexicon(TLexerLexicon *this, const TLocaleInfo *a2)
{
  _QWORD *v4;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  v4 = (_QWORD *)operator new();
  TRegExp::TRegExp(v4, (uint64_t)a2);
  *((_QWORD *)this + 6) = v4;
}

void sub_209814E7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;

  MEMORY[0x20BD149A8](v2, 0x60C40CE5A77A8);
  v4 = *(void **)(v1 + 24);
  if (v4)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void TLexerLexicon::~TLexerLexicon(TLexerLexicon *this)
{
  TRegExp *v2;
  void *v3;
  void *v4;

  v2 = (TRegExp *)*((_QWORD *)this + 6);
  if (v2)
  {
    TRegExp::~TRegExp(v2);
    MEMORY[0x20BD149A8]();
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void TLexerLexicon::addRegExp(uint64_t a1, __int32 *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  TRegExp::add(*(const TLocaleInfo ***)(a1 + 48), a2, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 16, v12);
      v8 = *(_QWORD **)a1;
      v6 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a3;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = a3;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void TLexerLexicon::addLiteral(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int32 *v5;
  __int32 *v6;
  __int128 v7;
  _BYTE v8[1024];
  char v9;
  int v10;

  v6 = (__int32 *)v8;
  v7 = xmmword_209A57DD0;
  v9 = 1;
  TRegExp::stringToRegExp(a2, (uint64_t)&v6, 0, 0);
  if (*((_QWORD *)&v7 + 1) >= (unint64_t)v7)
  {
    if (v9)
    {
      v10 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v6, *((unint64_t *)&v7 + 1), &v10, 1uLL);
      v5 = v6;
      --*((_QWORD *)&v7 + 1);
    }
    else
    {
      v5 = v6;
      if ((_QWORD)v7)
        v6[(_QWORD)v7 - 1] = 0;
    }
  }
  else
  {
    v5 = v6;
    v6[*((_QWORD *)&v7 + 1)] = 0;
  }
  TLexerLexicon::addRegExp(a1, v5, a3);
  if (v9 && v6 != (__int32 *)v8)
  {
    if (v6)
      MEMORY[0x20BD149A8]();
  }
}

void sub_209815184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (LOBYTE(STACK[0x420]))
    TSegmenter::findSegmentEnd((uint64_t *)va, v2);
  _Unwind_Resume(a1);
}

void TLexerLexicon::addString(_QWORD *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  void **v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;

  v8 = (uint64_t)(a1 + 5);
  v9 = a1[5];
  v10 = (char *)a1[4];
  if ((unint64_t)v10 >= v9)
  {
    v12 = (void **)(a1 + 3);
    v13 = (char *)a1[3];
    v14 = (v10 - v13) >> 4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60)
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    v16 = v9 - (_QWORD)v13;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v8, v17);
      v13 = (char *)a1[3];
      v10 = (char *)a1[4];
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[16 * v14];
    *(_QWORD *)v19 = a3;
    v20 = &v18[16 * v17];
    *((_DWORD *)v19 + 2) = a2;
    *((_DWORD *)v19 + 3) = a4;
    v11 = v19 + 16;
    if (v10 != v13)
    {
      do
      {
        *((_OWORD *)v19 - 1) = *((_OWORD *)v10 - 1);
        v19 -= 16;
        v10 -= 16;
      }
      while (v10 != v13);
      v13 = (char *)*v12;
    }
    a1[3] = v19;
    a1[4] = v11;
    a1[5] = v20;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *(_QWORD *)v10 = a3;
    v11 = v10 + 16;
    *((_DWORD *)v10 + 2) = a2;
    *((_DWORD *)v10 + 3) = a4;
  }
  a1[4] = v11;
}

TRegExpCompiler *TLexerLexicon::doneAdding(TRegExp **this)
{
  return TRegExp::doneAdding(this[6]);
}

uint64_t TLexerLexicon::findLongestMatch(uint64_t a1, unsigned int **a2, TAllocator *this)
{
  const __int32 **v4;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  const __int32 *v13;
  unsigned int v14;
  BOOL v15;
  _DWORD *i;
  uint64_t v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  __int32 *v22;
  uint64_t v23;
  int v24;
  int v25;
  __int32 *v26;
  __int32 *j;
  int v28;
  int v29;
  int v30;
  int v31;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  signed int v38;
  unsigned __int8 v39;
  int v40;
  unsigned __int8 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  TLocaleInfo *v46;
  TLocaleInfo *v47;
  _QWORD *v48;
  uint64_t v49;
  _BYTE *v50;
  size_t v51;
  uint64_t v52;
  __int32 *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v57;
  const __int32 **v58;
  void *__p;
  _BYTE *v60;
  uint64_t v61;

  v4 = (const __int32 **)a2;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 32) - v6;
  if (v8)
  {
    v9 = 0;
    v10 = v8 >> 4;
    v11 = *v7;
    if (v10 <= 1)
      v10 = 1;
    v12 = v6 + 8;
    while (v11 != *(_DWORD *)(v12 + v9))
    {
      v9 += 16;
      if (!--v10)
        goto LABEL_44;
    }
    v13 = (const __int32 *)(v7 + 1);
    v14 = v7[1];
    v15 = v14 == v11;
    for (i = v7 + 1; !v15 && v14 != 0; v15 = *i == v11)
    {
      if (v14 == 92 && i[1])
        v18 = 2;
      else
        v18 = 1;
      i += v18;
      v14 = *i;
    }
    if (v14 == v11)
    {
      *v4 = v13;
      v19 = (char *)((char *)i - (char *)v13);
      v20 = i - v13;
      if ((v20 + 1) >> 62)
        v21 = -1;
      else
        v21 = 4 * (v20 + 1);
      v22 = (__int32 *)TAllocator::allocate(this, v21);
      wcsncpy(v22, *v4, v20);
      *(_DWORD *)&v19[(_QWORD)v22] = 0;
      v23 = *(_QWORD *)(a1 + 24) + v9;
      v24 = *(_DWORD *)(v23 + 8);
      v25 = *(_DWORD *)(v23 + 12);
      v26 = v22;
      for (j = v22; ; ++j)
      {
        v28 = *v26;
        if (*v26 == 92)
        {
          if (v25 == 2)
          {
            v28 = v26[1];
            if (v28 == v24 || v28 == 92)
              ++v26;
            else
              v28 = 92;
          }
          else if (v25 == 1)
          {
            v30 = v26[1];
            ++v26;
            v29 = v30;
            if (v30 == 114)
              v31 = 13;
            else
              v31 = v29;
            if (v29 == 116)
              v31 = 9;
            if (v29 == 110)
              v28 = 10;
            else
              v28 = v31;
          }
          else
          {
            v28 = 92;
          }
        }
        else if (!v28)
        {
          *j = 0;
          *v4 = i + 1;
          return *(_QWORD *)(*(_QWORD *)(a1 + 24) + v9);
        }
        *j = v28;
        ++v26;
      }
    }
  }
LABEL_44:
  __p = 0;
  v60 = 0;
  v61 = 0;
  TRegExp::match(*(_QWORD **)(a1 + 48), v7, 2, (uint64_t)&__p);
  v33 = (char *)__p;
  if (v60 == __p)
    goto LABEL_67;
  v57 = (_QWORD *)a1;
  v58 = v4;
  v34 = 0;
  v35 = 0;
  v36 = 0xAAAAAAAAAAAAAAABLL * ((v60 - (_BYTE *)__p) >> 3);
  do
  {
    v37 = &v33[v34];
    v38 = *(_DWORD *)(*(_QWORD *)&v33[v34 + 8] - 4);
    if ((v39 & 1) == 0
    {
      v46 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v46);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v46;
    }
    if (!TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v38))
      goto LABEL_60;
    v40 = **((_DWORD **)v37 + 1);
    if ((v41 & 1) == 0
    {
      v47 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v47);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v47;
    }
    v42 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
    if ((v40 < 48
       || v40 >= 0x3A
       && (v40 < 0x660
        || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v40) == -1))
      && (TLocaleInfo::isAlpha(v42, v40) & 1) == 0)
    {
LABEL_60:
      if (v36 == 0xAAAAAAAAAAAAAAABLL * ((v60 - (_BYTE *)__p) >> 3)
        || (v43 = *((_QWORD *)v37 + 1), v44 = *((_QWORD *)__p + 3 * v36 + 1), v43 > v44)
        || v43 == v44 && *(_QWORD *)&v33[v34 + 16] < *((_QWORD *)__p + 3 * v36 + 2))
      {
        v36 = v35;
      }
    }
    ++v35;
    v33 = (char *)__p;
    v45 = 0xAAAAAAAAAAAAAAABLL * ((v60 - (_BYTE *)__p) >> 3);
    v34 += 24;
  }
  while (v35 < v45);
  v4 = v58;
  if (v36 == v45)
  {
LABEL_67:
    v48 = TAllocator::allocate(this, 8);
    v49 = (uint64_t)(*v4 + 1);
    *v48 = *(unsigned int *)*v4;
    *v4 = (const __int32 *)v49;
    v50 = __p;
    v55 = -1;
    if (!__p)
      return v55;
  }
  else
  {
    v51 = (uint64_t)(*((_QWORD *)__p + 3 * v36 + 1) - (_QWORD)*v58) >> 2;
    if ((v51 + 1) >> 62)
      v52 = -1;
    else
      v52 = 4 * (v51 + 1);
    v53 = (__int32 *)TAllocator::allocate(this, v52);
    wcsncpy(v53, *v58, v51);
    v53[v51] = 0;
    v50 = __p;
    v54 = (char *)__p + 24 * v36;
    *v58 = (const __int32 *)*((_QWORD *)v54 + 1);
    v55 = *(_QWORD *)(*v57 + 8 * *((_QWORD *)v54 + 2));
  }
  v60 = v50;
  operator delete(v50);
  return v55;
}

void sub_2098156EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  MEMORY[0x20BD149A8](v13, 0x1070C40ADD13FEBLL);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t TLexer::TLexer(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char **v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  unsigned int *v14;
  uint64_t LongestMatch;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  TLocaleInfo *v32;
  unsigned int *v34;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v9 = a1 + 32;
  TAllocator::TAllocator((TAllocator *)(a1 + 32), 2048);
  *(_QWORD *)(a1 + 88) = 0;
  v10 = (char **)(a1 + 88);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (a5)
    v11 = a5;
  else
    v11 = v9;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  MEMORY[0x20BD14750](a1, "'string'");
  v34 = a2;
  v12 = *a2;
  if (*a2)
  {
    do
    {
      if ((v13 & 1) == 0
      {
        v32 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v32);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v32;
      }
      if (v12 > 159)
      {
        if (v12 >= 12288)
        {
          if (v12 != 65279 && v12 != 12288)
          {
LABEL_19:
            LongestMatch = TLexerLexicon::findLongestMatch(*(_QWORD *)(a1 + 80), &v34, *(TAllocator **)(a1 + 72));
            v17 = v16;
            v18 = TAllocator::allocate(*(TAllocator **)(a1 + 72), 24);
            v19 = v18;
            *v18 = LongestMatch;
            v18[1] = v17;
            v18[2] = 0;
            v21 = *(_QWORD **)(a1 + 96);
            v20 = *(_QWORD *)(a1 + 104);
            if ((unint64_t)v21 >= v20)
            {
              v23 = ((char *)v21 - *v10) >> 3;
              if ((unint64_t)(v23 + 1) >> 61)
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              v24 = v20 - (_QWORD)*v10;
              v25 = v24 >> 2;
              if (v24 >> 2 <= (unint64_t)(v23 + 1))
                v25 = v23 + 1;
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
                v26 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v26 = v25;
              if (v26)
                v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 104, v26);
              else
                v27 = 0;
              v28 = &v27[8 * v23];
              *(_QWORD *)v28 = v19;
              v22 = v28 + 8;
              v30 = *(char **)(a1 + 88);
              v29 = *(char **)(a1 + 96);
              if (v29 != v30)
              {
                do
                {
                  v31 = *((_QWORD *)v29 - 1);
                  v29 -= 8;
                  *((_QWORD *)v28 - 1) = v31;
                  v28 -= 8;
                }
                while (v29 != v30);
                v29 = *v10;
              }
              *(_QWORD *)(a1 + 88) = v28;
              *(_QWORD *)(a1 + 96) = v22;
              *(_QWORD *)(a1 + 104) = &v27[8 * v26];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *v21 = v18;
              v22 = v21 + 1;
            }
            *(_QWORD *)(a1 + 96) = v22;
            v14 = v34;
            goto LABEL_17;
          }
        }
        else if (v12 != 160 && v12 != 8203)
        {
          goto LABEL_19;
        }
      }
      else if (v12 > 0x20 || ((1 << v12) & 0x100002600) == 0)
      {
        goto LABEL_19;
      }
      v14 = ++v34;
LABEL_17:
      v12 = *v14;
    }
    while (*v14);
  }
  return a1;
}

void sub_2098159B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  TAllocator *v2;
  void **v3;
  uint64_t v4;
  void *v6;

  MEMORY[0x20BD149A8](v4, 0x1070C40ADD13FEBLL);
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 96) = v6;
    operator delete(v6);
  }
  TAllocator::clear(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void TLexer::TLexer(TLexer *this, TInputStream *a2, unint64_t a3, const TLexerLexicon *a4, TAllocator *a5)
{
  TAllocator *v9;
  TAllocator *v10;
  char *v11;
  __int32 *v12;
  int v13;
  unsigned __int8 v14;
  __int32 *v15;
  uint64_t LongestMatch;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int32 *v29;
  __int32 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  TLocaleInfo *v40;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  _QWORD *exception;
  std::string *v47;
  __int128 v48;
  char **v49;
  void *v50[2];
  uint64_t v51;
  _BYTE __p[24];
  uint64_t v53;
  __int32 *v54;
  __int32 *__s1;
  __int128 v56;
  _BYTE v57[1024];
  char v58;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  TAllocator::TAllocator((TLexer *)((char *)this + 32), 2048);
  *((_QWORD *)this + 11) = 0;
  v49 = (char **)((char *)this + 88);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  if (a5)
    v10 = a5;
  else
    v10 = v9;
  *((_QWORD *)this + 9) = v10;
  *((_QWORD *)this + 10) = a4;
  *((_QWORD *)this + 3) = 0;
  if (*((char *)a2 + 39) >= 0)
    v11 = (char *)a2 + 16;
  else
    v11 = (char *)*((_QWORD *)a2 + 2);
  MEMORY[0x20BD14750](this, v11);
  MEMORY[0x20BD147A4]((char *)a2 + 128, &unk_209A6C6E8);
  __s1 = (__int32 *)v57;
  v56 = xmmword_209A57DD0;
  v58 = 1;
LABEL_8:
  while (TInputStream::getNextLine((uint64_t)a2, (uint64_t)&__s1))
  {
    if (*((_QWORD *)&v56 + 1) >= (unint64_t)v56)
    {
      if (v58)
      {
        *(_DWORD *)__p = 0;
        TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v56 + 1), (int *)__p, 1uLL);
        v12 = __s1;
        --*((_QWORD *)&v56 + 1);
      }
      else
      {
        v12 = __s1;
        if ((_QWORD)v56)
          __s1[(_QWORD)v56 - 1] = 0;
      }
    }
    else
    {
      v12 = __s1;
      __s1[*((_QWORD *)&v56 + 1)] = 0;
    }
    v54 = v12;
    v13 = *v12;
    if (*v12)
    {
      while (1)
      {
        if ((v14 & 1) == 0
        {
          v40 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v40);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v40;
        }
        if (v13 > 159)
        {
          if (v13 >= 12288)
          {
            if (v13 == 65279 || v13 == 12288)
            {
LABEL_27:
              v15 = ++v54;
              goto LABEL_28;
            }
          }
          else if (v13 == 160 || v13 == 8203)
          {
            goto LABEL_27;
          }
        }
        else if (v13 <= 0x20 && ((1 << v13) & 0x100002600) != 0)
        {
          goto LABEL_27;
        }
        v15 = v54;
        if (!wcsncmp(v54, (const __int32 *)"/", 2uLL))
          goto LABEL_8;
        if (!wcsncmp(v15, (const __int32 *)"/", 2uLL))
        {
          while (TInputStream::getNextLine((uint64_t)a2, (uint64_t)&__s1))
          {
            if (*((_QWORD *)&v56 + 1) >= (unint64_t)v56)
            {
              if (v58)
              {
                *(_DWORD *)__p = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v56 + 1), (int *)__p, 1uLL);
                v29 = __s1;
                --*((_QWORD *)&v56 + 1);
              }
              else
              {
                v29 = __s1;
                if ((_QWORD)v56)
                  __s1[(_QWORD)v56 - 1] = 0;
              }
            }
            else
            {
              v29 = __s1;
              __s1[*((_QWORD *)&v56 + 1)] = 0;
            }
            v30 = wcsstr(v29, (const __int32 *)"*");
            if (v30)
            {
              v15 = v30 + 2;
              v54 = v30 + 2;
              break;
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(**(_QWORD **)a2 - 24) + 32) & 2) != 0)
          {
            v42 = (char *)a2 + 16;
            if (*((char *)a2 + 39) < 0)
              v42 = (char *)*((_QWORD *)a2 + 2);
            tknPrintf("Error: %s (%llu) : /* */ mismatch", v25, v26, v27, v28, v42, *((_QWORD *)a2 + 8));
            std::string::basic_string[abi:ne180100]<0>(v50, &byte_209A88803);
            *(_QWORD *)__p = aPpx;
            if (SHIBYTE(v51) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v50[0], (std::string::size_type)v50[1]);
            }
            else
            {
              *(_OWORD *)&__p[8] = *(_OWORD *)v50;
              v53 = v51;
            }
            *(_QWORD *)__p = &unk_24C215870;
            if (v53 >= 0)
              v45 = &__p[8];
            else
              v45 = *(const char **)&__p[8];
            conditionalAssert(v45, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lexer.cpp", 339, v43, v44);
            *(_QWORD *)__p = aPpx;
            if (SHIBYTE(v53) < 0)
              operator delete(*(void **)&__p[8]);
            if (SHIBYTE(v51) < 0)
              operator delete(v50[0]);
            exception = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_209A88803);
            *exception = aPpx;
            v47 = (std::string *)(exception + 1);
            if ((__p[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v47, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            }
            else
            {
              v48 = *(_OWORD *)__p;
              exception[3] = *(_QWORD *)&__p[16];
              *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
            }
            *exception = &unk_24C215870;
          }
        }
        else
        {
          LongestMatch = TLexerLexicon::findLongestMatch(*((_QWORD *)this + 10), (unsigned int **)&v54, *((TAllocator **)this + 9));
          v18 = v17;
          v19 = TAllocator::allocate(*((TAllocator **)this + 9), 24);
          v20 = v19;
          v21 = *((_QWORD *)a2 + 8);
          *v19 = LongestMatch;
          v19[1] = v18;
          v19[2] = v21;
          v23 = (_QWORD *)*((_QWORD *)this + 12);
          v22 = *((_QWORD *)this + 13);
          if ((unint64_t)v23 >= v22)
          {
            v31 = ((char *)v23 - *v49) >> 3;
            if ((unint64_t)(v31 + 1) >> 61)
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            v32 = v22 - (_QWORD)*v49;
            v33 = v32 >> 2;
            if (v32 >> 2 <= (unint64_t)(v31 + 1))
              v33 = v31 + 1;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
              v34 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v34 = v33;
            if (v34)
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 104, v34);
            else
              v35 = 0;
            v36 = &v35[8 * v31];
            *(_QWORD *)v36 = v20;
            v24 = v36 + 8;
            v38 = (char *)*((_QWORD *)this + 11);
            v37 = (char *)*((_QWORD *)this + 12);
            if (v37 != v38)
            {
              do
              {
                v39 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v36 - 1) = v39;
                v36 -= 8;
              }
              while (v37 != v38);
              v37 = *v49;
            }
            *((_QWORD *)this + 11) = v36;
            *((_QWORD *)this + 12) = v24;
            *((_QWORD *)this + 13) = &v35[8 * v34];
            if (v37)
              operator delete(v37);
          }
          else
          {
            *v23 = v19;
            v24 = v23 + 1;
          }
          *((_QWORD *)this + 12) = v24;
          v15 = v54;
        }
LABEL_28:
        v13 = *v15;
        if (!*v15)
          goto LABEL_8;
      }
    }
  }
  if (v58)
  {
    if (__s1 != (__int32 *)v57 && __s1 != 0)
      MEMORY[0x20BD149A8]();
  }
}

void sub_209815F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, TAllocator *a12, uint64_t a13, uint64_t a14, void **a15, void *a16, uint64_t a17, uint64_t a18, void *__p, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  void *v27;

  if (LOBYTE(STACK[0x490]))
  {
    if (a24 != a13 && a24 != 0)
      MEMORY[0x20BD149A8]();
  }
  v27 = *a15;
  if (*a15)
  {
    *(_QWORD *)(v24 + 96) = v27;
    operator delete(v27);
  }
  TAllocator::clear(a12);
  if (*(char *)(v24 + 23) < 0)
    operator delete(*(void **)v24);
  _Unwind_Resume(a1);
}

uint64_t *ArcGraphMgr::startupArcGraphMgr(uint64_t a1)
{
  uint64_t *result;

  result = MemChunkAlloc(8uLL, 0);
  *result = a1;
  ArcGraphMgr::smpArcGraphMgr = (uint64_t)result;
  return result;
}

void ArcGraphMgr::printSize(ArcGraphMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/agmgr.cpp", 64, (DgnString *)&v31);
  if (v32)
    v15 = v31;
  else
    v15 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_209A88803, a3, &byte_209A88803, v15);
  DgnString::~DgnString((DgnString *)&v31);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_209A88803);
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v20 = 4;
  else
    v20 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/agmgr.cpp", 65, (DgnString *)&v31);
  if (v32)
    v25 = v31;
  else
    v25 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v25, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v31);
  *a4 += v20;
  *a5 += v20;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/agmgr.cpp", 66, (DgnString *)&v31);
  if (v32)
    v30 = v31;
  else
    v30 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, a3, &byte_209A88803, (35 - a3), (35 - a3), v30, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v31);
}

void sub_2098162D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t ArcGraphMgr::getArcGraphOrThrow(ArcGraphMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (*(_DWORD *)(*(_QWORD *)this + 8) <= a2 || (result = *(_QWORD *)(**(_QWORD **)this + 8 * a2)) == 0)
  {
    v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/agmgr.cpp", 73, (uint64_t)"fst/agmgr", 1, (uint64_t)"%u", a7, a8, a2);
    return *(_QWORD *)(**(_QWORD **)this + 8 * v10);
  }
  return result;
}

void checkValidityOfDouble(const double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = *((unsigned __int8 *)a1 + 6);
  if ((*((_BYTE *)a1 + 7) & 0x7F) != 0 || v8 > 0xF)
  {
    if ((*((_BYTE *)a1 + 7) & 0x7F) == 0x7F && v8 >= 0xF0)
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/littlend.cpp", 93, (uint64_t)"dfutil/littlend", 2, (uint64_t)"%.500s %02x %02x %02x %02x %02x %02x %02x %02x", a7, a8, (char)"illegal (NaN/infinity)");
  }
  else if (*(unsigned __int8 *)a1 | *((unsigned __int8 *)a1 + 1)
         || *((_BYTE *)a1 + 2)
         || *((_BYTE *)a1 + 3)
         || *((_BYTE *)a1 + 4)
         || *((_BYTE *)a1 + 5)
         || *((_BYTE *)a1 + 6))
  {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/littlend.cpp", 89, (uint64_t)"dfutil/littlend", 2, (uint64_t)"%.500s %02x %02x %02x %02x %02x %02x %02x %02x", a7, a8, (char)"denormalized");
  }
}

void RecogCtlMgr::RecogCtlMgr(RecogCtlMgr *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;

  *(_QWORD *)this = 0x100010000001DLL;
  *((_QWORD *)this + 1) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0x10000001DLL;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 24) = 1;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0x10000001DLL;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 40) = 1;
  *((_DWORD *)this + 48) = 0;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  v2 = (char *)this + 248;
  *((_QWORD *)this + 25) = 0x10000001DLL;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 52) = 1;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  v3 = (char *)this + 280;
  *((_QWORD *)this + 37) = 0x10000001DLL;
  *((_QWORD *)this + 39) = 0;
  *((_DWORD *)this + 76) = 1;
  *((_OWORD *)this + 20) = 0u;
  *((_DWORD *)this + 84) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  v4 = (char *)this + 344;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 45) = 0x10000001DLL;
  *((_DWORD *)this + 92) = 1;
  *((_DWORD *)this + 100) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  v5 = (char *)this + 408;
  *((_OWORD *)this + 24) = 0u;
  *((_QWORD *)this + 53) = 0x10000001DLL;
  *((_QWORD *)this + 55) = 0;
  *((_DWORD *)this + 108) = 1;
  *((_DWORD *)this + 116) = 0;
  *((_OWORD *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_QWORD *)this + 61) = 0x10000001DLL;
  *((_QWORD *)this + 63) = 0;
  *((_DWORD *)this + 124) = 1;
  *((_DWORD *)this + 132) = 0;
  *((_OWORD *)this + 32) = 0u;
  v13 = (char *)this + 472;
  *(_OWORD *)((char *)this + 536) = 0u;
  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 56, 1, 1);
  v6 = *((_DWORD *)this + 65);
  v7 = *((_DWORD *)this + 64);
  v8 = *((unsigned int *)this + 16);
  *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v8) = 0;
  *((_DWORD *)this + 16) = v8 + 1;
  if (v7 == v6)
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v2, 1, 1);
    v7 = *((_DWORD *)this + 64);
  }
  *(_QWORD *)(*((_QWORD *)this + 31) + 8 * v7) = 0;
  *((_DWORD *)this + 64) = v7 + 1;
  v9 = *((_DWORD *)this + 72);
  if (v9 == *((_DWORD *)this + 73))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v3, 1, 1);
    v9 = *((_DWORD *)this + 72);
  }
  *(_QWORD *)(*((_QWORD *)this + 35) + 8 * v9) = 0;
  *((_DWORD *)this + 72) = v9 + 1;
  v10 = *((_DWORD *)this + 88);
  if (v10 == *((_DWORD *)this + 89))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v4, 1, 1);
    v10 = *((_DWORD *)this + 88);
  }
  *(_QWORD *)(*((_QWORD *)this + 43) + 8 * v10) = 0;
  *((_DWORD *)this + 88) = v10 + 1;
  v11 = *((_DWORD *)this + 104);
  if (v11 == *((_DWORD *)this + 105))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v5, 1, 1);
    v11 = *((_DWORD *)this + 104);
  }
  *(_QWORD *)(*((_QWORD *)this + 51) + 8 * v11) = 0;
  *((_DWORD *)this + 104) = v11 + 1;
  v12 = *((_DWORD *)this + 120);
  if (v12 == *((_DWORD *)this + 121))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v13, 1, 1);
    v12 = *((_DWORD *)this + 120);
  }
  *(_QWORD *)(*((_QWORD *)this + 59) + 8 * v12) = 0;
  *((_DWORD *)this + 120) = v12 + 1;
}

void sub_209816760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  DgnIOwnArray<VirtMap *>::releaseAll(a17);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a16);
  DgnIOwnArray<AdaptControllerResults *>::releaseAll(a18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a15);
  DgnIOwnArray<Sausage *>::releaseAll(v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23);
  DgnIOwnArray<PrefilterResult *>::releaseAll(v22);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v21);
  DgnIOwnArray<WordLattice *>::releaseAll(v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  DgnIOwnArray<ParamSetBase *>::releaseAll(v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a13);
  DgnIOwnArray<AdaptApplyResult *>::releaseAll(a14);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a9);
  DgnIOwnArray<AdaptAccumResult *>::releaseAll(a10);
  DgnIOwnArray<AdaptController *>::releaseAll(v20);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a12);
  _Unwind_Resume(a1);
}

void RecogCtlMgr::deleteRecogController(RecogCtlMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t RecogController;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;

  RecogController = RecogCtlMgr::getRecogController(this, a2, a3, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)RecogController + 104))(RecogController) & 1) == 0
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)RecogController + 96))(RecogController))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)RecogController + 120))(RecogController);
  }
  v11 = *((_QWORD *)this + 31);
  v12 = *(_QWORD **)(v11 + 8 * a2);
  if (v12)
  {
    (*(void (**)(_QWORD *))*v12)(v12);
    MemChunkFree(v12, 0);
    v11 = *((_QWORD *)this + 31);
  }
  *(_QWORD *)(v11 + 8 * a2) = 0;
  if (a2)
  {
    v13 = *((_DWORD *)this + 68);
    if (v13)
    {
      v14 = *((unsigned int *)this + 68);
      v15 = (_DWORD *)*((_QWORD *)this + 33);
      while (*v15 != a2)
      {
        ++v15;
        if (!--v14)
          goto LABEL_13;
      }
      v16 = v13 - 1;
      *v15 = *(_DWORD *)(*((_QWORD *)this + 33) + 4 * v16);
      *((_DWORD *)this + 68) = v16;
    }
  }
LABEL_13:
  IdMgr<unsigned int>::recycleId((unsigned int *)this + 50, a2);
}

_QWORD *DgnIOwnArray<AdaptAccumResult *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<AdaptAccumResult>(*(AdaptAccumResult **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<AdaptApplyResult *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<AdaptApplyResult>(*(AdaptApplyResult **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<WordLattice *>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnIOwnArray<WordLattice *>::destructAt(a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<PrefilterResult *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<PrefilterResult>(*(PrefilterResult **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<Sausage *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<Sausage>(*(Sausage **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<AdaptControllerResults *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<AdaptControllerResults>(*(AdaptControllerResults **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<VirtMap *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<VirtMap>(*(VirtMap **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void RecogCtlMgr::startupRecogCtlMgr(RecogCtlMgr *this)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = MemChunkAlloc(0x228uLL, 0);
  RecogCtlMgr::RecogCtlMgr((RecogCtlMgr *)v1);
  RecogCtlMgr::smpRecogCtlMgr = v2;
}

void RecogCtlMgr::printSize(RecogCtlMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  int v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  uint64_t v278;
  int v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  void *v322;
  uint64_t v323;
  unint64_t *v324;
  uint64_t v325;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  int v330;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 210, (DgnString *)&v329);
  if (v330)
    v15 = (void *)v329;
  else
    v15 = &unk_209A6C756;
  v325 = a3;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A6C756, a3, &unk_209A6C756, v15);
  DgnString::~DgnString((DgnString *)&v329);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A6C756);
  v20 = (a3 + 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 212, (DgnString *)&v329);
  if (v330)
    v25 = (void *)v329;
  else
    v25 = &unk_209A6C756;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v21, v22, v23, v24, (a3 + 1), &unk_209A6C756, (a3 + 1), &unk_209A6C756, v25);
  v324 = a6;
  DgnString::~DgnString((DgnString *)&v329);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v26, v27, v28, v29, (a3 + 1), &unk_209A6C756);
  v30 = *((unsigned int *)this + 16);
  if ((_DWORD)v30)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = a5;
    do
    {
      v36 = *((_QWORD *)this + 7);
      if (*(_QWORD *)(v36 + 8 * v31))
      {
        v328 = 0;
        v329 = 0;
        v327 = 0;
        AdaptController::printSize(*(AdaptController **)(v36 + 8 * v31), v31, (v325 + 2), &v329, &v328, &v327);
        v34 += v329;
        v33 += v328;
        v32 += v327;
        v30 = *((unsigned int *)this + 16);
      }
      ++v31;
    }
    while (v31 < v30);
  }
  else
  {
    v34 = 0;
    v33 = 0;
    v32 = 0;
    v30 = 0;
    v35 = a5;
  }
  v37 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v37 = 16;
  v38 = v37 + v34;
  v39 = v37 + v33;
  v40 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v40 = 3;
  v41 = v38 + ((unint64_t)*((unsigned int *)this + 17) << v40);
  v42 = v39 + (v30 << v40);
  v43 = (34 - v325);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 212, (DgnString *)&v329);
  if (v330)
    v48 = (void *)v329;
  else
    v48 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, v20, &unk_209A6C756, v43, v43, v48, v41, v42, v32);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v41;
  *v35 += v42;
  *v324 += v32;
  v49 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v49 = 16;
  v50 = *((unsigned int *)this + 12);
  v51 = *((_DWORD *)this + 13);
  v52 = (v49 | 2) + 2 * (v50 - 1);
  if ((int)v50 <= 0)
    v52 = v49;
  if (v51 >= v50)
    v53 = v52;
  else
    v53 = v49;
  if (v51 >= v50)
    v54 = v52 + 2 * (v51 - v50);
  else
    v54 = v49;
  if (v51 >= v50)
    v55 = 0;
  else
    v55 = 2 * v50;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 213, (DgnString *)&v329);
  if (v330)
    v60 = (void *)v329;
  else
    v60 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, v20, &unk_209A6C756, v43, v43, v60, v54, v53, v55);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v54;
  *v35 += v53;
  *v324 += v55;
  v61 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v61 = 16;
  v62 = *((_DWORD *)this + 4);
  v63 = *((_DWORD *)this + 5);
  v64 = v63 >= v62;
  v65 = v63 - v62;
  if (v64)
  {
    if (v62 > 0)
      v61 = (v61 | 2) + 2 * (v62 - 1);
    v61 += 2 * v65;
  }
  v66 = v61 + 20;
  v67 = DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::sizeObject((_DWORD *)this + 2, 1u) + 8;
  v68 = *((unsigned int *)this + 4);
  if (v68 <= *((_DWORD *)this + 5))
    v69 = 0;
  else
    v69 = 2 * v68;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 215, (DgnString *)&v329);
  if (v330)
    v74 = (void *)v329;
  else
    v74 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v20, &unk_209A6C756, v43, v43, v74, v66, v67, v69);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v66;
  *v35 += v67;
  *v324 += v69;
  v75 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v75 = 16;
  v76 = *((_DWORD *)this + 28);
  v77 = *((_DWORD *)this + 29);
  v64 = v77 >= v76;
  v78 = v77 - v76;
  if (v64)
  {
    if (v76 > 0)
      v75 += 4 * (v76 - 1) + 4;
    v75 += 4 * v78;
  }
  v79 = v75 + 24;
  v80 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 26, 1u) + 12;
  v81 = *((unsigned int *)this + 28);
  if (v81 <= *((_DWORD *)this + 29))
    v82 = 0;
  else
    v82 = 4 * v81;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 217, (DgnString *)&v329);
  if (v330)
    v87 = (void *)v329;
  else
    v87 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v20, &unk_209A6C756, v43, v43, v87, v79, v80, v82);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v79;
  *v35 += v80;
  *v324 += v82;
  v88 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v88 = 16;
  v89 = *((_DWORD *)this + 44);
  v90 = *((_DWORD *)this + 45);
  v64 = v90 >= v89;
  v91 = v90 - v89;
  if (v64)
  {
    if (v89 > 0)
      v88 += 4 * (v89 - 1) + 4;
    v88 += 4 * v91;
  }
  v92 = v88 + 24;
  v93 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 42, 1u) + 12;
  v94 = *((unsigned int *)this + 44);
  if (v94 <= *((_DWORD *)this + 45))
    v95 = 0;
  else
    v95 = 4 * v94;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 219, (DgnString *)&v329);
  if (v330)
    v100 = (void *)v329;
  else
    v100 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v96, v97, v98, v99, v20, &unk_209A6C756, v43, v43, v100, v92, v93, v95);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v92;
  *v35 += v93;
  *v324 += v95;
  v101 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v101 = 16;
  v102 = *((_DWORD *)this + 56);
  v103 = *((_DWORD *)this + 57);
  v64 = v103 >= v102;
  v104 = v103 - v102;
  if (v64)
  {
    if (v102 > 0)
      v101 += 4 * (v102 - 1) + 4;
    v101 += 4 * v104;
  }
  v105 = v101 + 24;
  v106 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 54, 1u) + 12;
  v107 = *((unsigned int *)this + 56);
  if (v107 <= *((_DWORD *)this + 57))
    v108 = 0;
  else
    v108 = 4 * v107;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 221, (DgnString *)&v329);
  if (v330)
    v113 = (void *)v329;
  else
    v113 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v20, &unk_209A6C756, v43, v43, v113, v105, v106, v108);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v105;
  *v35 += v106;
  *v324 += v108;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 223, (DgnString *)&v329);
  if (v330)
    v118 = (void *)v329;
  else
    v118 = &unk_209A6C756;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v114, v115, v116, v117, v20, &unk_209A6C756, v20, &unk_209A6C756, v118);
  DgnString::~DgnString((DgnString *)&v329);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v119, v120, v121, v122, v20, &unk_209A6C756);
  v123 = *((unsigned int *)this + 64);
  if ((_DWORD)v123)
  {
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v127 = 0;
    do
    {
      v128 = *((_QWORD *)this + 31);
      if (*(_QWORD *)(v128 + 8 * v124))
      {
        v328 = 0;
        v329 = 0;
        v327 = 0;
        (*(void (**)(_QWORD, unint64_t, _QWORD, unint64_t *, unint64_t *, unint64_t *))(**(_QWORD **)(v128 + 8 * v124) + 280))(*(_QWORD *)(v128 + 8 * v124), v124, (v325 + 2), &v329, &v328, &v327);
        v127 += v329;
        v126 += v328;
        v125 += v327;
        v123 = *((unsigned int *)this + 64);
      }
      ++v124;
    }
    while (v124 < v123);
  }
  else
  {
    v127 = 0;
    v126 = 0;
    v125 = 0;
    v123 = 0;
  }
  v129 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v129 = 16;
  v130 = v129 + v127;
  v131 = v129 + v126;
  v132 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v132 = 3;
  v133 = v130 + ((unint64_t)*((unsigned int *)this + 65) << v132);
  v134 = v131 + (v123 << v132);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 223, (DgnString *)&v329);
  if (v330)
    v139 = (void *)v329;
  else
    v139 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v20, &unk_209A6C756, v43, v43, v139, v133, v134, v125);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v133;
  *a5 += v134;
  *v324 += v125;
  v140 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v140 = 16;
  v141 = *((unsigned int *)this + 68);
  v142 = *((_DWORD *)this + 69);
  v143 = v140 + 4 * (v141 - 1) + 4;
  if ((int)v141 <= 0)
    v143 = v140;
  if (v142 >= v141)
    v144 = v143;
  else
    v144 = v140;
  if (v142 >= v141)
    v145 = v143 + 4 * (v142 - v141);
  else
    v145 = v140;
  if (v142 >= v141)
    v146 = 0;
  else
    v146 = 4 * v141;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 225, (DgnString *)&v329);
  if (v330)
    v151 = (void *)v329;
  else
    v151 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v147, v148, v149, v150, v20, &unk_209A6C756, v43, v43, v151, v145, v144, v146);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v145;
  *a5 += v144;
  *v324 += v146;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 226, (DgnString *)&v329);
  if (v330)
    v156 = (void *)v329;
  else
    v156 = &unk_209A6C756;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v152, v153, v154, v155, v20, &unk_209A6C756, v20, &unk_209A6C756, v156);
  DgnString::~DgnString((DgnString *)&v329);
  v323 = v20;
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v157, v158, v159, v160, v20, &unk_209A6C756);
  v161 = *((unsigned int *)this + 72);
  if ((_DWORD)v161)
  {
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v165 = 0;
    v166 = a4;
    do
    {
      v167 = *((_QWORD *)this + 35);
      if (*(_QWORD *)(v167 + 8 * v162))
      {
        v328 = 0;
        v329 = 0;
        v327 = 0;
        (*(void (**)(_QWORD, unint64_t, _QWORD, unint64_t *, unint64_t *, unint64_t *))(**(_QWORD **)(v167 + 8 * v162) + 64))(*(_QWORD *)(v167 + 8 * v162), v162, (v325 + 2), &v329, &v328, &v327);
        v165 += v329;
        v164 += v328;
        v163 += v327;
        v161 = *((unsigned int *)this + 72);
      }
      ++v162;
    }
    while (v162 < v161);
  }
  else
  {
    v165 = 0;
    v164 = 0;
    v163 = 0;
    v161 = 0;
    v166 = a4;
  }
  v168 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v168 = 16;
  v169 = v168 + v165;
  v170 = v168 + v164;
  v171 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v171 = 3;
  v172 = v169 + ((unint64_t)*((unsigned int *)this + 73) << v171);
  v173 = v170 + (v161 << v171);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 226, (DgnString *)&v329);
  if (v330)
    v177 = (void *)v329;
  else
    v177 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v174, (uint64_t)&unk_209A6C756, v175, v176, v323, &unk_209A6C756, v43, v43, v177, v172, v173, v163);
  DgnString::~DgnString((DgnString *)&v329);
  *v166 += v172;
  *a5 += v173;
  *v324 += v163;
  v178 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v178 = 16;
  v179 = *((_DWORD *)this + 80);
  v180 = *((_DWORD *)this + 81);
  v181 = v178 + 4 * (v179 - 1) + 4;
  if (v179 <= 0)
    v181 = v178;
  v64 = v180 >= v179;
  v182 = v181 + 4 * (v180 - v179);
  if (v64)
    v178 = v182;
  v183 = v178 + 24;
  v184 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 78, 1u) + 12;
  v185 = *((unsigned int *)this + 80);
  if (v185 <= *((_DWORD *)this + 81))
    v186 = 0;
  else
    v186 = 4 * v185;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 228, (DgnString *)&v329);
  if (v330)
    v191 = (void *)v329;
  else
    v191 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v187, v188, v189, v190, v323, &unk_209A6C756, v43, v43, v191, v183, v184, v186);
  DgnString::~DgnString((DgnString *)&v329);
  *v166 += v183;
  *a5 += v184;
  *v324 += v186;
  v192 = sizeObject<PrefilterResult *>((uint64_t)this + 344, 0);
  v193 = sizeObject<PrefilterResult *>((uint64_t)this + 344, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 230, (DgnString *)&v329);
  if (v330)
    v198 = (void *)v329;
  else
    v198 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v194, v195, v196, v197, v323, &unk_209A6C756, v43, v43, v198, v192, v193, 0);
  DgnString::~DgnString((DgnString *)&v329);
  *v166 += v192;
  *a5 += v193;
  v199 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v199 = 16;
  v200 = *((_DWORD *)this + 96);
  v201 = *((_DWORD *)this + 97);
  v64 = v201 >= v200;
  v202 = v201 - v200;
  if (v64)
  {
    if (v200 > 0)
      v199 += 4 * (v200 - 1) + 4;
    v199 += 4 * v202;
  }
  v203 = v199 + 24;
  v204 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 94, 1u) + 12;
  v205 = *((unsigned int *)this + 96);
  if (v205 <= *((_DWORD *)this + 97))
    v206 = 0;
  else
    v206 = 4 * v205;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 232, (DgnString *)&v329);
  if (v330)
    v211 = (void *)v329;
  else
    v211 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v207, v208, v209, v210, v323, &unk_209A6C756, v43, v43, v211, v203, v204, v206);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v203;
  *a5 += v204;
  *v324 += v206;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 233, (DgnString *)&v329);
  if (v330)
    v216 = (void *)v329;
  else
    v216 = &unk_209A6C756;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v212, v213, v214, v215, v323, &unk_209A6C756, v323, &unk_209A6C756, v216);
  DgnString::~DgnString((DgnString *)&v329);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v217, v218, v219, v220, v323, &unk_209A6C756);
  v221 = *((unsigned int *)this + 104);
  if ((_DWORD)v221)
  {
    v222 = 0;
    v223 = 0;
    v224 = 0;
    v225 = 0;
    do
    {
      v226 = *((_QWORD *)this + 51);
      if (*(_QWORD *)(v226 + 8 * v222))
      {
        v328 = 0;
        v329 = 0;
        v327 = 0;
        Sausage::printSize(*(Sausage **)(v226 + 8 * v222), v222, (v325 + 2), &v329, &v328, &v327);
        v225 += v329;
        v224 += v328;
        v223 += v327;
        v221 = *((unsigned int *)this + 104);
      }
      ++v222;
    }
    while (v222 < v221);
  }
  else
  {
    v225 = 0;
    v224 = 0;
    v223 = 0;
    v221 = 0;
  }
  v227 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v227 = 16;
  v228 = v227 + v225;
  v229 = v227 + v224;
  v230 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v230 = 3;
  v231 = v228 + ((unint64_t)*((unsigned int *)this + 105) << v230);
  v232 = v229 + (v221 << v230);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 233, (DgnString *)&v329);
  if (v330)
    v237 = (void *)v329;
  else
    v237 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v233, v234, v235, v236, v323, &unk_209A6C756, v43, v43, v237, v231, v232, v223);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v231;
  *a5 += v232;
  *v324 += v223;
  v238 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v238 = 16;
  v239 = *((_DWORD *)this + 112);
  v240 = *((_DWORD *)this + 113);
  v241 = v238 + 4 * (v239 - 1) + 4;
  if (v239 <= 0)
    v241 = v238;
  v64 = v240 >= v239;
  v242 = v241 + 4 * (v240 - v239);
  if (v64)
    v238 = v242;
  v243 = v238 + 24;
  v244 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 110, 1u) + 12;
  v245 = *((unsigned int *)this + 112);
  if (v245 <= *((_DWORD *)this + 113))
    v246 = 0;
  else
    v246 = 4 * v245;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 235, (DgnString *)&v329);
  if (v330)
    v251 = (void *)v329;
  else
    v251 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v247, v248, v249, v250, v323, &unk_209A6C756, v43, v43, v251, v243, v244, v246);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v243;
  *a5 += v244;
  *v324 += v246;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 237, (DgnString *)&v329);
  if (v330)
    v256 = (void *)v329;
  else
    v256 = &unk_209A6C756;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v252, v253, v254, v255, v323, &unk_209A6C756, v323, &unk_209A6C756, v256);
  DgnString::~DgnString((DgnString *)&v329);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v257, v258, v259, v260, v323, &unk_209A6C756);
  v261 = *((unsigned int *)this + 120);
  if ((_DWORD)v261)
  {
    v262 = 0;
    v263 = 0;
    v264 = 0;
    v265 = 0;
    do
    {
      v266 = *((_QWORD *)this + 59);
      if (*(_QWORD *)(v266 + 8 * v262))
      {
        v328 = 0;
        v329 = 0;
        v327 = 0;
        AdaptControllerResults::printSize(*(AdaptControllerResults **)(v266 + 8 * v262), v262, (v325 + 2), &v329, &v328, &v327);
        v265 += v329;
        v264 += v328;
        v263 += v327;
        v261 = *((unsigned int *)this + 120);
      }
      ++v262;
    }
    while (v262 < v261);
  }
  else
  {
    v265 = 0;
    v264 = 0;
    v263 = 0;
    v261 = 0;
  }
  v267 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v267 = 16;
  v268 = v267 + v265;
  v269 = v267 + v264;
  v270 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v270 = 3;
  v271 = v268 + ((unint64_t)*((unsigned int *)this + 121) << v270);
  v272 = v269 + (v261 << v270);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 237, (DgnString *)&v329);
  if (v330)
    v277 = (void *)v329;
  else
    v277 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v273, v274, v275, v276, v323, &unk_209A6C756, v43, v43, v277, v271, v272, v263);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v271;
  *a5 += v272;
  *v324 += v263;
  v278 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v278 = 16;
  v279 = *((_DWORD *)this + 128);
  v280 = *((_DWORD *)this + 129);
  v281 = v278 + 4 * (v279 - 1) + 4;
  if (v279 <= 0)
    v281 = v278;
  v64 = v280 >= v279;
  v282 = v281 + 4 * (v280 - v279);
  if (v64)
    v278 = v282;
  v283 = v278 + 24;
  v284 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 126, 1u) + 12;
  v285 = *((unsigned int *)this + 128);
  if (v285 <= *((_DWORD *)this + 129))
    v286 = 0;
  else
    v286 = 4 * v285;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 239, (DgnString *)&v329);
  if (v330)
    v291 = (void *)v329;
  else
    v291 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v287, v288, v289, v290, v323, &unk_209A6C756, v43, v43, v291, v283, v284, v286);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v283;
  *a5 += v284;
  *v324 += v286;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 240, (DgnString *)&v329);
  if (v330)
    v296 = (void *)v329;
  else
    v296 = &unk_209A6C756;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v292, v293, v294, v295, v323, &unk_209A6C756, v323, &unk_209A6C756, v296);
  DgnString::~DgnString((DgnString *)&v329);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v297, v298, v299, v300, v323, &unk_209A6C756);
  v301 = *((unsigned int *)this + 136);
  if ((_DWORD)v301)
  {
    v302 = 0;
    v303 = 0;
    v304 = 0;
    v305 = 0;
    do
    {
      v306 = *((_QWORD *)this + 67);
      if (*(_QWORD *)(v306 + 8 * v302))
      {
        v328 = 0;
        v329 = 0;
        v327 = 0;
        VirtMap::printSize(*(VirtMap **)(v306 + 8 * v302), v302, (v325 + 2), &v329, &v328, &v327);
        v305 += v329;
        v304 += v328;
        v303 += v327;
        v301 = *((unsigned int *)this + 136);
      }
      ++v302;
    }
    while (v302 < v301);
  }
  else
  {
    v305 = 0;
    v304 = 0;
    v303 = 0;
    v301 = 0;
  }
  v307 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v307 = 16;
  v308 = v307 + v305;
  v309 = v307 + v304;
  v310 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v310 = 3;
  v311 = v308 + ((unint64_t)*((unsigned int *)this + 137) << v310);
  v312 = v309 + (v301 << v310);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 240, (DgnString *)&v329);
  if (v330)
    v317 = (void *)v329;
  else
    v317 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v313, v314, v315, v316, v323, &unk_209A6C756, v43, v43, v317, v311, v312, v303);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v311;
  *a5 += v312;
  *v324 += v303;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 241, (DgnString *)&v329);
  if (v330)
    v322 = (void *)v329;
  else
    v322 = &unk_209A6C756;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v318, v319, v320, v321, v325, &unk_209A6C756, (35 - v325), (35 - v325), v322, *a4, *a5, *v324);
  DgnString::~DgnString((DgnString *)&v329);
}

void sub_209817FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sizeObject<PrefilterResult *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += PrefilterResult::sizeObject(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t IdMgr<unsigned short>::getNextId(uint64_t a1)
{
  uint64_t v1;
  __int16 v3;

  v1 = a1 + 8;
  if (*(_DWORD *)(a1 + 32) <= *(_DWORD *)a1)
  {
    v3 = *(_WORD *)(a1 + 6);
    do
    {
      DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::enqueue(v1, v3);
      v3 = *(_WORD *)(a1 + 6) + 1;
      *(_WORD *)(a1 + 6) = v3;
    }
    while (*(_DWORD *)(a1 + 32) <= *(_DWORD *)a1);
  }
  return DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::dequeue(v1);
}

AdaptController *DgnDelete<AdaptController>(AdaptController *result)
{
  _QWORD *v1;

  if (result)
  {
    AdaptController::~AdaptController(result);
    return (AdaptController *)MemChunkFree(v1, 0);
  }
  return result;
}

void IdMgr<unsigned short>::recycleId(unsigned int *a1, __int16 a2)
{
  _QWORD *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int16 v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v4 = a1 + 2;
  DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::enqueue((uint64_t)(a1 + 2), a2);
  v5 = *a1;
  v6 = a1[8];
  if (v6 > *a1)
  {
    v7 = a2 + 1;
    v8 = *((unsigned __int16 *)a1 + 3);
    v9 = v6 - 1;
    do
    {
      if (v7 != (unsigned __int16)v8)
        break;
      a1[8] = v9;
      v10 = a1[7];
      if (!v10)
        v10 = a1[4];
      v11 = v10 - 1;
      a1[7] = v10 - 1;
      v12 = v8 - 1;
      *((_WORD *)a1 + 3) = v8 - 1;
      if (v9)
      {
        if (!v11)
          v11 = a1[4];
        LOWORD(v8) = *(_WORD *)(*v4 + 2 * (v11 - 1)) + 1;
      }
      v7 = v8;
      v8 = v12;
    }
    while (v9-- > v5);
  }
}

AdaptAccumResult *DgnDelete<AdaptAccumResult>(AdaptAccumResult *result)
{
  _QWORD *v1;

  if (result)
  {
    AdaptAccumResult::~AdaptAccumResult(result);
    return (AdaptAccumResult *)MemChunkFree(v1, 0);
  }
  return result;
}

AdaptApplyResult *DgnDelete<AdaptApplyResult>(AdaptApplyResult *result)
{
  _QWORD *v1;

  if (result)
  {
    AdaptApplyResult::~AdaptApplyResult(result);
    return (AdaptApplyResult *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t RecogCtlMgr::newRecogController(uint64_t a1, uint64_t a2, const RecogSpec *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, PrefiltererSearchParamSet *a8, SearchCrossLayerParamSet *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t NextId;
  unsigned int i;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  NextId = IdMgr<unsigned int>::getNextId((_DWORD *)(a1 + 200));
  for (i = *(_DWORD *)(a1 + 256); i <= NextId; *(_DWORD *)(a1 + 256) = i)
  {
    if (i == *(_DWORD *)(a1 + 260))
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 248, 1, 1);
      i = *(_DWORD *)(a1 + 256);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * i++) = 0;
  }
  RecogControllerBase::makeRecogController(a2, a3, a7, a8, a9);
  v22 = v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, a4, a5, a6, a10, a11, a12, a13, a14);
  *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * NextId) = v22;
  v23 = *(_DWORD *)(a1 + 272);
  if (v23 == *(_DWORD *)(a1 + 276))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 264, 1, 1);
    v23 = *(_DWORD *)(a1 + 272);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * v23) = NextId;
  ++*(_DWORD *)(a1 + 272);
  return NextId;
}

uint64_t RecogCtlMgr::getRecogController(RecogCtlMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (*((_DWORD *)this + 64) <= a2 || (result = *(_QWORD *)(*((_QWORD *)this + 31) + 8 * a2)) == 0)
  {
    v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 408, (uint64_t)"recogctl/rctlmgr", 8, (uint64_t)"%u", a7, a8, a2);
    return *(_QWORD *)(*((_QWORD *)this + 31) + 8 * v10);
  }
  return result;
}

uint64_t RecogCtlMgr::getVirtMap(RecogCtlMgr *this, unsigned int a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v23;

  if (!a2)
    return 0;
  v4 = (_QWORD *)((char *)this + 536);
  v5 = *((unsigned int *)this + 136);
  v6 = a2 >> 6;
  if (!(_DWORD)v5)
    goto LABEL_11;
  v7 = 0;
  v8 = -1;
  do
  {
    result = *(_QWORD *)(*v4 + 8 * v7);
    if (!*(_BYTE *)(result + 60))
    {
      if (v6 + 1 == *(_DWORD *)(result + 56))
        goto LABEL_29;
      v8 = v7;
    }
    ++v7;
  }
  while (v5 != v7);
  if (v8 == -1)
  {
LABEL_11:
    v11 = MemChunkAlloc(0x40uLL, 0);
    VirtMap::VirtMap((VirtMap *)v11);
    v10 = *((unsigned int *)this + 136);
    v12 = v10;
    if ((_DWORD)v10 == *((_DWORD *)this + 137))
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v4, 1, 1);
      v12 = *((_DWORD *)this + 136);
    }
    *(_QWORD *)(*((_QWORD *)this + 67) + 8 * v12) = 0;
    *((_DWORD *)this + 136) = v12 + 1;
    *(_QWORD *)(*((_QWORD *)this + 67) + 8 * v10) = v11;
  }
  else
  {
    v10 = v8;
  }
  v13 = *(_QWORD *)(*v4 + 8 * v10);
  v14 = *(_DWORD *)(v13 + 56);
  if (v6 >= v14)
  {
    v15 = v6 + 1;
    *(_DWORD *)(v13 + 56) = v15;
    v16 = *(_DWORD *)(v13 + 12);
    if (v16 <= v6)
      DgnArray<DgnPrimArray<double>>::reallocElts(v13, v15 - v16, 0);
    v17 = *(unsigned int *)(v13 + 8);
    if (v17 <= v15)
    {
      if (v17 <= v6)
      {
        v20 = ((unint64_t)a2 >> 6) - v17 + 1;
        v21 = (_DWORD *)(*(_QWORD *)v13 + 16 * v17 + 8);
        do
        {
          *((_QWORD *)v21 - 1) = 0;
          *v21 = 0;
          v21 += 4;
          --v20;
        }
        while (v20);
      }
    }
    else if ((int)v17 > (int)v15)
    {
      v18 = (int)v17;
      v19 = 16 * (int)v17 - 16;
      do
      {
        --v18;
        DgnPrimFixArray<double>::~DgnPrimFixArray(*(_QWORD *)v13 + v19);
        v19 -= 16;
      }
      while (v18 > v15);
    }
    *(_DWORD *)(v13 + 8) = v15;
    v22 = *(_DWORD *)(v13 + 56);
    v23 = *(_DWORD *)(v13 + 28);
    v14 = v22;
    if (v22 > v23)
    {
      DgnPrimArray<unsigned long long>::reallocElts(v13 + 16, v22 - v23, 0);
      v14 = *(_DWORD *)(v13 + 56);
    }
    *(_DWORD *)(v13 + 24) = v22;
    *(_DWORD *)(v13 + 52) = 0;
  }
  bzero(*(void **)(v13 + 16), 8 * v14);
  result = *(_QWORD *)(*v4 + 8 * v10);
LABEL_29:
  *(_BYTE *)(result + 60) = 1;
  return result;
}

uint64_t RecogCtlMgr::releaseVirtMap(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *i;

  if (a2)
  {
    v2 = *(unsigned int *)(result + 544);
    if ((_DWORD)v2)
    {
      for (i = *(_QWORD **)(result + 536); *i != a2; ++i)
      {
        if (!--v2)
          return result;
      }
      *(_BYTE *)(a2 + 60) = 0;
    }
  }
  return result;
}

PrefilterResult *DgnDelete<PrefilterResult>(PrefilterResult *result)
{
  _QWORD *v1;

  if (result)
  {
    PrefilterResult::~PrefilterResult(result);
    return (PrefilterResult *)MemChunkFree(v1, 0);
  }
  return result;
}

Sausage *DgnDelete<Sausage>(Sausage *result)
{
  _QWORD *v1;

  if (result)
  {
    Sausage::~Sausage(result);
    return (Sausage *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnThreadTrace::add(uint64_t a1, int a2, char a3)
{
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t CurrentCpuMicrosec;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 24);
  if (v6 == *(_DWORD *)(a1 + 28))
  {
    DgnPrimArray<char>::reallocElts(a1 + 16, 1, 1);
    v6 = *(_DWORD *)(a1 + 24);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + v6) = a3;
  ++*(_DWORD *)(a1 + 24);
  result = mach_absolute_time();
  v8 = result;
  v9 = *(_DWORD *)(a1 + 40);
  if (v9 == *(_DWORD *)(a1 + 44))
  {
    result = DgnPrimArray<unsigned long long>::reallocElts(a1 + 32, 1, 1);
    v9 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v8;
  *(_DWORD *)(a1 + 40) = v9 + 1;
  v10 = *(_DWORD *)(a1 + 56);
  if (v10 == *(_DWORD *)(a1 + 60))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(a1 + 48, 1, 1);
    v10 = *(_DWORD *)(a1 + 56);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v10) = a2;
  ++*(_DWORD *)(a1 + 56);
  if (*(_BYTE *)a1)
  {
    CurrentCpuMicrosec = ClockTimer::getCurrentCpuMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
    v12 = *(_DWORD *)(a1 + 72);
    if (v12 == *(_DWORD *)(a1 + 76))
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 64, 1, 1);
      v12 = *(_DWORD *)(a1 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v12) = CurrentCpuMicrosec;
    *(_DWORD *)(a1 + 72) = v12 + 1;
    result = ClockTimer::getCurrentCpuMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
    v13 = result;
    v14 = *(_DWORD *)(a1 + 88);
    if (v14 == *(_DWORD *)(a1 + 92))
    {
      result = DgnPrimArray<unsigned long long>::reallocElts(a1 + 80, 1, 1);
      v14 = *(_DWORD *)(a1 + 88);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v14) = v13;
    *(_DWORD *)(a1 + 88) = v14 + 1;
  }
  if (*(_BYTE *)(a1 + 1))
  {
    result = ClockTimer::getCurrentMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
    v15 = result;
    v16 = *(_DWORD *)(a1 + 104);
    if (v16 == *(_DWORD *)(a1 + 108))
    {
      result = DgnPrimArray<unsigned long long>::reallocElts(a1 + 96, 1, 1);
      v16 = *(_DWORD *)(a1 + 104);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v16) = v15;
    *(_DWORD *)(a1 + 104) = v16 + 1;
  }
  return result;
}

_QWORD *DgnIOwnArray<AdaptController *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<AdaptController>(*(AdaptController **)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnIOwnArray<WordLattice *>::destructAt(uint64_t result, int a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (a3 + a2 > a2)
  {
    v3 = (uint64_t *)result;
    v4 = a2;
    v5 = a3 + a2 - 1;
    do
    {
      v6 = *v3;
      v7 = *(_QWORD **)(*v3 + 8 * v5);
      if (v7)
      {
        (*(void (**)(_QWORD))(*v7 + 48))(*(_QWORD *)(*v3 + 8 * v5));
        result = MemChunkFree(v7, 0);
        v6 = *v3;
      }
      *(_QWORD *)(v6 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

VirtMap *DgnDelete<VirtMap>(VirtMap *result)
{
  _QWORD *v1;

  if (result)
  {
    VirtMap::~VirtMap(result);
    return (VirtMap *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::sizeObject(_DWORD *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v4 = sizeObject<unsigned short>((uint64_t)a1, a2);
  v5 = 12;
  if (a2 == 3)
    v5 = 0;
  result = v5 + v4;
  if (a2 > 3 || a2 == 1)
  {
    v7 = a1[2];
    if (a1[6] < v7)
    {
      v8 = 0;
      v10 = a1[4];
      v9 = a1[5];
      do
      {
        if (v9 >= v10)
        {
          if (v8 >= v10 && v8 < v9)
            goto LABEL_15;
        }
        else if (v8 < v9 || v8 >= v10)
        {
          goto LABEL_15;
        }
        result -= 2;
LABEL_15:
        ++v8;
      }
      while (v7 != v8);
    }
  }
  return result;
}

void DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::enqueue(uint64_t a1, __int16 a2)
{
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = *(_DWORD *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 8);
  if (v4 == v5)
  {
    v6 = *(_DWORD *)(a1 + 12);
    if (v4 == v6)
    {
      DgnPrimArray<short>::reallocElts(a1, 1, 1);
      v6 = *(_DWORD *)(a1 + 12);
      v4 = *(_DWORD *)(a1 + 24);
    }
    *(_DWORD *)(a1 + 8) = v6;
    v7 = v6 - v4;
    if (v4)
    {
      v8 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v8)
      {
        memmove((void *)(*(_QWORD *)a1 + 2 * v8 + 2 * v7), (const void *)(*(_QWORD *)a1 + 2 * v8), 2 * (v4 - v8));
        v4 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 16) += v7;
      }
      else
      {
        *(_DWORD *)(a1 + 20) = v4;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 16) = 0;
    }
    bzero((void *)(*(_QWORD *)a1 + 2 * v4), 2 * v7);
    v5 = *(_DWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a1 + 24);
  }
  v9 = *(unsigned int *)(a1 + 20);
  *(_WORD *)(*(_QWORD *)a1 + 2 * v9) = a2;
  if ((_DWORD)v9 + 1 == v5)
    v10 = 0;
  else
    v10 = v9 + 1;
  *(_DWORD *)(a1 + 20) = v10;
  *(_DWORD *)(a1 + 24) = v4 + 1;
}

uint64_t DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::dequeue(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;

  v1 = *(unsigned int *)(a1 + 16);
  v2 = *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * v1);
  *(_WORD *)(*(_QWORD *)a1 + 2 * v1) = 0;
  v3 = v1 + 1;
  *(_DWORD *)(a1 + 16) = v3;
  v4 = *(_DWORD *)(a1 + 24) - 1;
  *(_DWORD *)(a1 + 24) = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = v3 >= v5;
    v7 = v3 - v5;
    if (v6)
      *(_DWORD *)(a1 + 16) = v7;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  return v2;
}

void AdaptAccumResult::~AdaptAccumResult(AdaptAccumResult *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  if (v1)
    MemChunkFree(v1, 0);
}

void AdaptApplyResult::~AdaptApplyResult(AdaptApplyResult *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  if (v1)
    MemChunkFree(v1, 0);
}

uint64_t SDEnv_GetData(unint64_t *a1, EnvMgr *a2, void *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  void *v17;
  EnvHolderMgr *v18;
  unint64_t v19;
  ModelMgr *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t VocOrThrow;
  StateMgr *v29;
  EnvMgr *EnvMgr;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int TopEnvId;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ParamSetHolderMgr *v45;
  unint64_t v46;
  ChannelMgr *v47;
  unint64_t v48;
  ModelMgr *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  StateMgr *v57;
  unint64_t v58;
  ModelMgr *v59;
  unint64_t v60;
  ModelMgr *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  RuleMgr *v69;
  unint64_t v70;
  ModelMgr *v71;
  unint64_t v72;
  ChannelMgr *v73;
  unint64_t v74;
  Utterance *Utterance;
  ModelMgr *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WordList *v84;
  unint64_t v85;
  uint64_t Data;
  uint64_t v87;
  _BYTE v89[151];
  char v90;

  v8 = SdapiInsurance::SdapiInsurance(v89, "SDEnv_GetData", 1, 1, 91);
  if (!v89[97])
    goto LABEL_107;
  if (!a2)
    throwBadStringPointer(v8, v9, v10, v11, v12, v13, v14, v15);
  v90 = 0;
  if (gbShowCalls)
  {
    if (gbShowCallPointerArguments)
      v16 = a1;
    else
      v16 = 0;
    if (gbShowCallPointerArguments)
      v17 = a3;
    else
      v17 = 0;
    xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, '%.500s', Masked:0x%016llx, %llu)\n", v9, v10, v11, v12, "SDEnv_GetData", v16, a2, v17, a4);
  }
  if (!a1)
    throwBadLengthForNullPointer(1, "DgnVerifyReadPtr", v10, v11, v12, v13, v14, v15);
  v90 = 0;
  if (!a3 && a4)
    throwBadLengthForNullPointer(a4, "DgnVerifyWritePtr", v10, v11, v12, v13, v14, v15);
  if (!*(_BYTE *)a2)
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdenv.cpp", 48, (uint64_t)"sdapi/sdenv", 1, (uint64_t)"%s", v14, v15, (char)&errStr_sdapi_sdenv_E_EMPTYNAME);
  switch(*a1)
  {
    case 1uLL:
      v18 = (EnvHolderMgr *)EnvHolderMgr::smpEnvHolderMgr;
      v19 = a1[1];
      if (v19 == -1)
      {
        LODWORD(v19) = -1;
      }
      else
      {
        if (HIDWORD(v19))
          throwBadSdapiArgument("SDhEnvHolder", v19, v10, v11, v12, v13, v14, v15);
        if ((v19 + 1) <= 1)
          throwBadSdapiArgument("SDhEnvHolder", v19, v10, v11, v12, v13, v14, v15);
      }
      EnvMgr = *(EnvMgr **)EnvHolderMgr::getEnvHolder(v18, v19, v10, v11, v12, v13, v14, v15);
      TopEnvId = EnvMgr::getTopEnvId(EnvMgr);
      break;
    case 2uLL:
      v61 = (ModelMgr *)ModelMgr::smpModelMgr;
      v62 = a1[1];
      if (HIDWORD(v62) || (v62 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
      if ((unsigned __int16)v62 - 1 >= 0x7B)
        throwBadSdapiArgument("SDhVoc", v62, v10, v11, v12, v13, v14, v15);
      v69 = *(RuleMgr **)(ModelMgr::getVocOrThrow(v61, (unsigned __int16)v62, v10, v11, v12, v13, v14, v15) + 64);
      EnvMgr = (EnvMgr *)*((_QWORD *)v69 + 10);
      v70 = a1[2];
      if (HIDWORD(v70) || (v70 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhRule", v70, v63, v64, v65, v66, v67, v68);
      if ((unsigned __int16)v70 == 0xFFFF || !(_WORD)v70)
        throwBadSdapiArgument("SDhRule", v70, v63, v64, v65, v66, v67, v68);
      RuleMgr::verifyRule(v69, (unsigned __int16)v70, 1, v64, v65, v66, v67, v68);
      TopEnvId = EnvMgr::getItemEnvId(EnvMgr, (unsigned __int16)v70);
      break;
    case 3uLL:
      v47 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
      v48 = a1[1];
      if (v48 == -1)
      {
        LODWORD(v48) = -1;
      }
      else
      {
        if (HIDWORD(v48))
          throwBadSdapiArgument("SDhSigProc", v48, v10, v11, v12, v13, v14, v15);
        if ((v48 + 1) <= 1)
          throwBadSdapiArgument("SDhSigProc", v48, v10, v11, v12, v13, v14, v15);
      }
      EnvMgr = *(EnvMgr **)(ChannelMgr::getSigProc(v47, v48, v10, v11, v12, v13, v14, v15) + 424);
      TopEnvId = EnvMgr::getTopEnvId(EnvMgr);
      break;
    case 4uLL:
      v49 = (ModelMgr *)ModelMgr::smpModelMgr;
      v50 = a1[1];
      if (HIDWORD(v50) || (v50 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
      if ((unsigned __int16)v50 - 1 >= 0x7B)
        throwBadSdapiArgument("SDhVoc", v50, v10, v11, v12, v13, v14, v15);
      v57 = *(StateMgr **)(ModelMgr::getVocOrThrow(v49, (unsigned __int16)v50, v10, v11, v12, v13, v14, v15) + 56);
      EnvMgr = (EnvMgr *)*((_QWORD *)v57 + 94);
      v58 = a1[2];
      if (HIDWORD(v58))
        throwBadSdapiArgument("SDhState", v58, v51, v52, v53, v54, v55, v56);
      if ((v58 + 1) <= 1)
        throwBadSdapiArgument("SDhState", v58, v51, v52, v53, v54, v55, v56);
      StateMgr::verifyVisible(v57, v58, v51, v52, v53, v54, v55, v56);
      TopEnvId = EnvMgr::getItemEnvId(EnvMgr, v58);
      break;
    case 5uLL:
      v20 = (ModelMgr *)ModelMgr::smpModelMgr;
      v21 = a1[1];
      if (HIDWORD(v21) || (v21 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
      if ((unsigned __int16)v21 - 1 >= 0x7B)
        throwBadSdapiArgument("SDhVoc", v21, v10, v11, v12, v13, v14, v15);
      VocOrThrow = ModelMgr::getVocOrThrow(v20, (unsigned __int16)v21, v10, v11, v12, v13, v14, v15);
      v29 = *(StateMgr **)(VocOrThrow + 56);
      EnvMgr = (EnvMgr *)*((_QWORD *)v29 + 95);
      v31 = a1[2];
      if (HIDWORD(v31))
        throwBadSdapiArgument("SDhState", a1[2], v22, v23, v24, v25, v26, v27);
      if ((v31 + 1) <= 1)
        throwBadSdapiArgument("SDhState", v31, v22, v23, v24, v25, v26, v27);
      StateMgr::verifyVisible(v29, v31, v22, v23, v24, v25, v26, v27);
      v38 = a1[3];
      if ((v38 - 1) >> 32)
        throwBadSdapiArgument("SDhWord", v38, v32, v33, v34, v35, v36, v37);
      if ((v38 - 1) >= 0xFFFFF4)
        throwBadSdapiArgument("SDhWord", v38, v32, v33, v34, v35, v36, v37);
      WordList::verifyVisible(*(WordList **)(VocOrThrow + 48), v38 - 1, v32, v33, v34, v35, v36, v37);
      TopEnvId = EnvMgr::getItemPairEnvId(EnvMgr, v31, (int)v38 - 1);
      break;
    case 6uLL:
      v71 = (ModelMgr *)ModelMgr::smpModelMgr;
      v72 = a1[1];
      if (HIDWORD(v72) || (v72 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhUser", v72, v10, v11, v12, v13, v14, v15);
      if ((unsigned __int16)v72 == 0xFFFF || !(_WORD)v72)
        throwBadSdapiArgument("SDhUser", v72, v10, v11, v12, v13, v14, v15);
      EnvMgr = *(EnvMgr **)ModelMgr::getUserOrThrow(v71, (unsigned __int16)v72, v10, v11, v12, v13, v14, v15);
      TopEnvId = EnvMgr::getTopEnvId(EnvMgr);
      break;
    case 7uLL:
      v73 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
      v74 = a1[1];
      if (HIDWORD(v74))
        throwBadSdapiArgument("SDhUtt", v74, v10, v11, v12, v13, v14, v15);
      if ((v74 + 1) <= 1)
        throwBadSdapiArgument("SDhUtt", v74, v10, v11, v12, v13, v14, v15);
      Utterance = (Utterance *)ChannelMgr::getUtterance(v73, v74, v10, v11, v12, v13, v14, v15);
      EnvMgr = Utterance::getEnvMgr(Utterance);
      TopEnvId = EnvMgr::getTopEnvId(EnvMgr);
      break;
    case 8uLL:
      v59 = (ModelMgr *)ModelMgr::smpModelMgr;
      v60 = a1[1];
      if (HIDWORD(v60) || (v60 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhVoc", v60, v10, v11, v12, v13, v14, v15);
      if ((unsigned __int16)v60 - 1 >= 0x7B)
        throwBadSdapiArgument("SDhVoc", v60, v10, v11, v12, v13, v14, v15);
      EnvMgr = *(EnvMgr **)ModelMgr::getVocOrThrow(v59, (unsigned __int16)v60, v10, v11, v12, v13, v14, v15);
      TopEnvId = EnvMgr::getTopEnvId(EnvMgr);
      break;
    case 9uLL:
      v76 = (ModelMgr *)ModelMgr::smpModelMgr;
      v77 = a1[1];
      if (HIDWORD(v77) || (v77 & 0xFFFF0000) != 0)
        throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
      if ((unsigned __int16)v77 - 1 >= 0x7B)
        throwBadSdapiArgument("SDhVoc", v77, v10, v11, v12, v13, v14, v15);
      v84 = *(WordList **)(ModelMgr::getVocOrThrow(v76, (unsigned __int16)v77, v10, v11, v12, v13, v14, v15) + 48);
      EnvMgr = (EnvMgr *)*((_QWORD *)v84 + 3);
      v85 = a1[2];
      if ((v85 - 1) >> 32)
        throwBadSdapiArgument("SDhWord", v85, v78, v79, v80, v81, v82, v83);
      if ((v85 - 1) >= 0xFFFFF4)
        throwBadSdapiArgument("SDhWord", v85, v78, v79, v80, v81, v82, v83);
      WordList::verifyVisible(v84, v85 - 1, v78, v79, v80, v81, v82, v83);
      TopEnvId = EnvMgr::getItemEnvId(EnvMgr, (int)v85 - 1);
      break;
    case 0xAuLL:
      v45 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
      v46 = a1[1];
      if (HIDWORD(v46))
        throwBadSdapiArgument("SDhParamSetHolder", v46, v10, v11, v12, v13, v14, v15);
      if ((v46 + 1) <= 1)
        throwBadSdapiArgument("SDhParamSetHolder", v46, v10, v11, v12, v13, v14, v15);
      EnvMgr = *(EnvMgr **)(ParamSetHolderMgr::getParamSetHolder(v45, v46, v10, v11, v12, v13, v14, v15) + 1112);
      TopEnvId = EnvMgr::getTopEnvId(EnvMgr);
      break;
    default:
      throwBadSdapiArgument("SDEnvContainerType", *a1, v10, v11, v12, v13, v14, v15);
      goto LABEL_107;
  }
  if (TopEnvId && (Data = EnvMgr::getData(EnvMgr, TopEnvId, a2, v40, v41, v42, v43, v44)) != 0)
    v87 = sdUtilItemMove(1, *(const void **)Data, *(unsigned int *)(Data + 8), a3, a4);
  else
LABEL_107:
    v87 = 0;
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v89);
  return v87;
}

void sub_2098193CC()
{
  __cxa_end_catch();
  JUMPOUT(0x2098193D8);
}

void SDEnv_SetData(unint64_t *a1, EnvMgr *a2, const unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  const unsigned __int8 *v17;
  int v18;
  EnvHolderMgr *v19;
  unint64_t v20;
  ModelMgr *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t VocOrThrow;
  StateMgr *v30;
  EnvMgr *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int ItemPairEnvIdMaybeNew;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  ParamSetHolderMgr *v63;
  unint64_t v64;
  EnvMgr *EnvMgr;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int TopEnvIdMaybeNew;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  ChannelMgr *v87;
  unint64_t v88;
  ModelMgr *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  StateMgr *v97;
  EnvMgr *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int ItemEnvIdMaybeNew;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  ModelMgr *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  ModelMgr *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  RuleMgr *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  ModelMgr *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  ChannelMgr *v179;
  unint64_t v180;
  Utterance *Utterance;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  ModelMgr *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WordList *v204;
  EnvMgr *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _BYTE v266[151];
  char v267;

  v8 = SdapiInsurance::SdapiInsurance(v266, "SDEnv_SetData", 1, 1, 92);
  if (v266[97])
  {
    if (!a2)
      throwBadStringPointer(v8, v9, v10, v11, v12, v13, v14, v15);
    v267 = 0;
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments)
        v16 = a1;
      else
        v16 = 0;
      if (gbShowCallPointerArguments)
        v17 = a3;
      else
        v17 = 0;
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, '%.500s', Masked:0x%016llx, %llu)\n", v9, v10, v11, v12, "SDEnv_SetData", v16, a2, v17, a4);
    }
    if (!a1)
      throwBadLengthForNullPointer(1, "DgnVerifyReadPtr", v10, v11, v12, v13, v14, v15);
    v267 = 0;
    if (!a3 && (_DWORD)a4)
      throwBadLengthForNullPointer(a4, "DgnVerifyReadPtr", v10, v11, v12, v13, v14, v15);
    v267 = 0;
    v18 = *(unsigned __int8 *)a2;
    if (!*(_BYTE *)a2)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdenv.cpp", 166, (uint64_t)"sdapi/sdenv", 1, (uint64_t)"%s", v14, v15, (char)&errStr_sdapi_sdenv_E_EMPTYNAME);
      v18 = *(unsigned __int8 *)a2;
    }
    if (v18 == 95)
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdenv.cpp", 167, (uint64_t)"sdapi/sdenv", 2, (uint64_t)"%.500s", v14, v15, (char)a2);
    switch(*a1)
    {
      case 1uLL:
        v19 = (EnvHolderMgr *)EnvHolderMgr::smpEnvHolderMgr;
        v20 = a1[1];
        if (v20 == -1)
        {
          LODWORD(v20) = -1;
        }
        else
        {
          if (HIDWORD(v20))
            throwBadSdapiArgument("SDhEnvHolder", v20, v10, v11, v12, v13, v14, v15);
          if ((v20 + 1) <= 1)
            throwBadSdapiArgument("SDhEnvHolder", v20, v10, v11, v12, v13, v14, v15);
        }
        EnvMgr = *(EnvMgr **)EnvHolderMgr::getEnvHolder(v19, v20, v10, v11, v12, v13, v14, v15);
        TopEnvIdMaybeNew = EnvMgr::getTopEnvIdMaybeNew(EnvMgr, (_DWORD)a4 != 0, v246, v247, v248, v249, v250, v251);
        if (TopEnvIdMaybeNew)
        {
          EnvMgr::setData(EnvMgr, TopEnvIdMaybeNew, a2, a3, a4, 0, v252, v253);
          if (!(_DWORD)a4
            && !*(_DWORD *)(EnvMgr::getNameIds(EnvMgr, TopEnvIdMaybeNew, v254, v255, v256, v257, v258, v259) + 8))
          {
            goto LABEL_135;
          }
        }
        break;
      case 2uLL:
        v141 = (ModelMgr *)ModelMgr::smpModelMgr;
        v142 = a1[1];
        if (HIDWORD(v142) || (v142 & 0xFFFF0000) != 0)
          throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
        if ((unsigned __int16)v142 - 1 >= 0x7B)
          throwBadSdapiArgument("SDhVoc", v142, v10, v11, v12, v13, v14, v15);
        v149 = *(RuleMgr **)(ModelMgr::getVocOrThrow(v141, (unsigned __int16)v142, v10, v11, v12, v13, v14, v15) + 64);
        v98 = (EnvMgr *)*((_QWORD *)v149 + 10);
        v99 = a1[2];
        if (HIDWORD(v99) || (v99 & 0xFFFF0000) != 0)
          throwBadSdapiArgument("SDhRule", v99, v143, v144, v145, v146, v147, v148);
        if ((unsigned __int16)v99 == 0xFFFF || !(_WORD)v99)
          throwBadSdapiArgument("SDhRule", v99, v143, v144, v145, v146, v147, v148);
        RuleMgr::verifyRule(v149, (unsigned __int16)v99, 1, v144, v145, v146, v147, v148);
        LODWORD(v99) = (unsigned __int16)v99;
        ItemEnvIdMaybeNew = EnvMgr::getItemEnvIdMaybeNew(v98, (unsigned __int16)v99, (_DWORD)a4 != 0, v150, v151, v152, v153, v154);
        if (ItemEnvIdMaybeNew)
        {
          EnvMgr::setData(v98, ItemEnvIdMaybeNew, a2, a3, a4, 0, v155, v156);
          if (!(_DWORD)a4
            && !*(_DWORD *)(EnvMgr::getNameIds(v98, ItemEnvIdMaybeNew, v157, v158, v159, v160, v161, v162) + 8))
          {
            goto LABEL_69;
          }
        }
        break;
      case 3uLL:
        v87 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
        v88 = a1[1];
        if (v88 == -1)
        {
          LODWORD(v88) = -1;
        }
        else
        {
          if (HIDWORD(v88))
            throwBadSdapiArgument("SDhSigProc", v88, v10, v11, v12, v13, v14, v15);
          if ((v88 + 1) <= 1)
            throwBadSdapiArgument("SDhSigProc", v88, v10, v11, v12, v13, v14, v15);
        }
        EnvMgr = *(EnvMgr **)(ChannelMgr::getSigProc(v87, v88, v10, v11, v12, v13, v14, v15) + 424);
        TopEnvIdMaybeNew = EnvMgr::getTopEnvIdMaybeNew(EnvMgr, (_DWORD)a4 != 0, v232, v233, v234, v235, v236, v237);
        if (TopEnvIdMaybeNew)
        {
          EnvMgr::setData(EnvMgr, TopEnvIdMaybeNew, a2, a3, a4, 0, v238, v239);
          if (!(_DWORD)a4
            && !*(_DWORD *)(EnvMgr::getNameIds(EnvMgr, TopEnvIdMaybeNew, v240, v241, v242, v243, v244, v245) + 8))
          {
            goto LABEL_135;
          }
        }
        break;
      case 4uLL:
        v89 = (ModelMgr *)ModelMgr::smpModelMgr;
        v90 = a1[1];
        if (HIDWORD(v90) || (v90 & 0xFFFF0000) != 0)
          throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
        if ((unsigned __int16)v90 - 1 >= 0x7B)
          throwBadSdapiArgument("SDhVoc", v90, v10, v11, v12, v13, v14, v15);
        v97 = *(StateMgr **)(ModelMgr::getVocOrThrow(v89, (unsigned __int16)v90, v10, v11, v12, v13, v14, v15) + 56);
        v98 = (EnvMgr *)*((_QWORD *)v97 + 94);
        v99 = a1[2];
        if (HIDWORD(v99))
          throwBadSdapiArgument("SDhState", v99, v91, v92, v93, v94, v95, v96);
        if ((v99 + 1) <= 1)
          throwBadSdapiArgument("SDhState", v99, v91, v92, v93, v94, v95, v96);
        StateMgr::verifyVisible(v97, v99, v91, v92, v93, v94, v95, v96);
        ItemEnvIdMaybeNew = EnvMgr::getItemEnvIdMaybeNew(v98, v99, (_DWORD)a4 != 0, v100, v101, v102, v103, v104);
        if (ItemEnvIdMaybeNew)
        {
          EnvMgr::setData(v98, ItemEnvIdMaybeNew, a2, a3, a4, 0, v105, v106);
          if (!(_DWORD)a4
            && !*(_DWORD *)(EnvMgr::getNameIds(v98, ItemEnvIdMaybeNew, v108, v109, v110, v111, v112, v113) + 8))
          {
LABEL_69:
            EnvMgr::killEnv(v98, ItemEnvIdMaybeNew, v114, v115, v116, v117, v118, v119);
            EnvMgr::setItemEnvId(v98, v99, 0, v120, v121, v122, v123, v124);
          }
        }
        break;
      case 5uLL:
        v21 = (ModelMgr *)ModelMgr::smpModelMgr;
        v22 = a1[1];
        if (HIDWORD(v22) || (v22 & 0xFFFF0000) != 0)
          throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
        if ((unsigned __int16)v22 - 1 >= 0x7B)
          throwBadSdapiArgument("SDhVoc", v22, v10, v11, v12, v13, v14, v15);
        VocOrThrow = ModelMgr::getVocOrThrow(v21, (unsigned __int16)v22, v10, v11, v12, v13, v14, v15);
        v30 = *(StateMgr **)(VocOrThrow + 56);
        v31 = (EnvMgr *)*((_QWORD *)v30 + 95);
        v32 = a1[2];
        if (HIDWORD(v32))
          throwBadSdapiArgument("SDhState", a1[2], v23, v24, v25, v26, v27, v28);
        if ((v32 + 1) <= 1)
          throwBadSdapiArgument("SDhState", v32, v23, v24, v25, v26, v27, v28);
        StateMgr::verifyVisible(v30, v32, v23, v24, v25, v26, v27, v28);
        v39 = a1[3];
        if ((v39 - 1) >> 32)
          throwBadSdapiArgument("SDhWord", v39, v33, v34, v35, v36, v37, v38);
        if ((v39 - 1) >= 0xFFFFF4)
          throwBadSdapiArgument("SDhWord", v39, v33, v34, v35, v36, v37, v38);
        WordList::verifyVisible(*(WordList **)(VocOrThrow + 48), v39 - 1, v33, v34, v35, v36, v37, v38);
        ItemPairEnvIdMaybeNew = EnvMgr::getItemPairEnvIdMaybeNew(v31, v32, v39 - 1, (_DWORD)a4 != 0, v40, v41, v42, v43);
        if (ItemPairEnvIdMaybeNew)
        {
          EnvMgr::setData(v31, ItemPairEnvIdMaybeNew, a2, a3, a4, 0, v44, v45);
          if (!(_DWORD)a4
            && !*(_DWORD *)(EnvMgr::getNameIds(v31, ItemPairEnvIdMaybeNew, v47, v48, v49, v50, v51, v52) + 8))
          {
            EnvMgr::killEnv(v31, ItemPairEnvIdMaybeNew, v53, v54, v55, v56, v57, v58);
            EnvMgr::setItemPairEnvId(v31, v32, v39 - 1, 0, v59, v60, v61, v62);
          }
        }
        break;
      case 6uLL:
        v163 = (ModelMgr *)ModelMgr::smpModelMgr;
        v164 = a1[1];
        if (HIDWORD(v164) || (v164 & 0xFFFF0000) != 0)
          throwBadSdapiArgument("SDhUser", v164, v10, v11, v12, v13, v14, v15);
        if ((unsigned __int16)v164 == 0xFFFF || !(_WORD)v164)
          throwBadSdapiArgument("SDhUser", v164, v10, v11, v12, v13, v14, v15);
        EnvMgr = *(EnvMgr **)ModelMgr::getUserOrThrow(v163, (unsigned __int16)v164, v10, v11, v12, v13, v14, v15);
        TopEnvIdMaybeNew = EnvMgr::getTopEnvIdMaybeNew(EnvMgr, (_DWORD)a4 != 0, v165, v166, v167, v168, v169, v170);
        if (TopEnvIdMaybeNew)
        {
          EnvMgr::setData(EnvMgr, TopEnvIdMaybeNew, a2, a3, a4, 0, v171, v172);
          if (!(_DWORD)a4
            && !*(_DWORD *)(EnvMgr::getNameIds(EnvMgr, TopEnvIdMaybeNew, v173, v174, v175, v176, v177, v178) + 8))
          {
            goto LABEL_135;
          }
        }
        break;
      case 7uLL:
        v179 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
        v180 = a1[1];
        if (HIDWORD(v180))
          throwBadSdapiArgument("SDhUtt", v180, v10, v11, v12, v13, v14, v15);
        if ((v180 + 1) <= 1)
          throwBadSdapiArgument("SDhUtt", v180, v10, v11, v12, v13, v14, v15);
        Utterance = (Utterance *)ChannelMgr::getUtterance(v179, v180, v10, v11, v12, v13, v14, v15);
        EnvMgr = Utterance::getEnvMgr(Utterance);
        TopEnvIdMaybeNew = EnvMgr::getTopEnvIdMaybeNew(EnvMgr, (_DWORD)a4 != 0, v182, v183, v184, v185, v186, v187);
        if (TopEnvIdMaybeNew)
        {
          EnvMgr::setData(EnvMgr, TopEnvIdMaybeNew, a2, a3, a4, 0, v188, v189);
          if (!(_DWORD)a4
            && !*(_DWORD *)(EnvMgr::getNameIds(EnvMgr, TopEnvIdMaybeNew, v190, v191, v192, v193, v194, v195) + 8))
          {
            goto LABEL_135;
          }
        }
        break;
      case 8uLL:
        v125 = (ModelMgr *)ModelMgr::smpModelMgr;
        v126 = a1[1];
        if (HIDWORD(v126) || (v126 & 0xFFFF0000) != 0)
          throwBadSdapiArgument("SDhVoc", v126, v10, v11, v12, v13, v14, v15);
        if ((unsigned __int16)v126 - 1 >= 0x7B)
          throwBadSdapiArgument("SDhVoc", v126, v10, v11, v12, v13, v14, v15);
        EnvMgr = *(EnvMgr **)ModelMgr::getVocOrThrow(v125, (unsigned __int16)v126, v10, v11, v12, v13, v14, v15);
        TopEnvIdMaybeNew = EnvMgr::getTopEnvIdMaybeNew(EnvMgr, (_DWORD)a4 != 0, v127, v128, v129, v130, v131, v132);
        if (TopEnvIdMaybeNew)
        {
          EnvMgr::setData(EnvMgr, TopEnvIdMaybeNew, a2, a3, a4, 0, v133, v134);
          if (!(_DWORD)a4
            && !*(_DWORD *)(EnvMgr::getNameIds(EnvMgr, TopEnvIdMaybeNew, v135, v136, v137, v138, v139, v140) + 8))
          {
            goto LABEL_135;
          }
        }
        break;
      case 9uLL:
        v196 = (ModelMgr *)ModelMgr::smpModelMgr;
        v197 = a1[1];
        if (HIDWORD(v197) || (v197 & 0xFFFF0000) != 0)
          throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
        if ((unsigned __int16)v197 - 1 >= 0x7B)
          throwBadSdapiArgument("SDhVoc", v197, v10, v11, v12, v13, v14, v15);
        v204 = *(WordList **)(ModelMgr::getVocOrThrow(v196, (unsigned __int16)v197, v10, v11, v12, v13, v14, v15) + 48);
        v205 = (EnvMgr *)*((_QWORD *)v204 + 3);
        v206 = a1[2];
        if ((v206 - 1) >> 32)
          throwBadSdapiArgument("SDhWord", v206, v198, v199, v200, v201, v202, v203);
        if ((v206 - 1) >= 0xFFFFF4)
          throwBadSdapiArgument("SDhWord", v206, v198, v199, v200, v201, v202, v203);
        WordList::verifyVisible(v204, v206 - 1, v198, v199, v200, v201, v202, v203);
        v214 = EnvMgr::getItemEnvIdMaybeNew(v205, v206 - 1, (_DWORD)a4 != 0, v207, v208, v209, v210, v211);
        if (v214)
        {
          EnvMgr::setData(v205, v214, a2, a3, a4, 0, v212, v213);
          if (!(_DWORD)a4 && !*(_DWORD *)(EnvMgr::getNameIds(v205, v214, v215, v216, v217, v218, v219, v220) + 8))
          {
            EnvMgr::killEnv(v205, v214, v221, v222, v223, v224, v225, v226);
            EnvMgr::setItemEnvId(v205, v206 - 1, 0, v227, v228, v229, v230, v231);
          }
        }
        break;
      case 0xAuLL:
        v63 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        v64 = a1[1];
        if (HIDWORD(v64))
          throwBadSdapiArgument("SDhParamSetHolder", v64, v10, v11, v12, v13, v14, v15);
        if ((v64 + 1) <= 1)
          throwBadSdapiArgument("SDhParamSetHolder", v64, v10, v11, v12, v13, v14, v15);
        EnvMgr = *(EnvMgr **)(ParamSetHolderMgr::getParamSetHolder(v63, v64, v10, v11, v12, v13, v14, v15) + 1112);
        TopEnvIdMaybeNew = EnvMgr::getTopEnvIdMaybeNew(EnvMgr, (_DWORD)a4 != 0, v66, v67, v68, v69, v70, v71);
        if (TopEnvIdMaybeNew)
        {
          EnvMgr::setData(EnvMgr, TopEnvIdMaybeNew, a2, a3, a4, 0, v72, v73);
          if (!(_DWORD)a4
            && !*(_DWORD *)(EnvMgr::getNameIds(EnvMgr, TopEnvIdMaybeNew, v75, v76, v77, v78, v79, v80) + 8))
          {
LABEL_135:
            EnvMgr::killEnv(EnvMgr, TopEnvIdMaybeNew, v81, v82, v83, v84, v85, v86);
            EnvMgr::setTopEnvId(EnvMgr, 0, v260, v261, v262, v263, v264, v265);
          }
        }
        break;
      default:
        throwBadSdapiArgument("SDEnvContainerType", *a1, v10, v11, v12, v13, v14, v15);
        break;
    }
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v266);
}

void sub_209819F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  ApiState *v15;
  DgnException *v16;
  void *v17;

  if (a2 == 2)
  {
    v15 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v15, v16);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a14);
      _Unwind_Resume(a1);
    }
    v17 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v17);
  }
  __cxa_end_catch();
  JUMPOUT(0x209819F00);
}

uint64_t onePlusHighestSet32(unsigned int a1)
{
  unsigned int v1;

  v1 = 32 - __clz(a1);
  if (a1)
    return v1;
  else
    return 0;
}

uint64_t SearchItf::beginTopRecPassSyncRecogBase(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(result + 80) = 0;
  return result;
}

uint64_t SearchItf::endTopRecPassSyncRecogBase(uint64_t this)
{
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 80) = 1879048192;
  return this;
}

uint64_t SearchItf::unsetArcGraph(SearchItf *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(SearchItf *))(*(_QWORD *)this + 136))(this);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SearchItf::setArcGraph(SearchItf *this, const ArcGraph *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  *((_QWORD *)this + 5) = a2;
  (*(void (**)(SearchItf *))(*(_QWORD *)this + 128))(this);
  result = VocMgr::getVocOrThrow((VocMgr *)VocMgr::smpVocMgr, *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174), v3, v4, v5, v6, v7, v8);
  *((_QWORD *)this + 6) = *(_QWORD *)(result + 48);
  return result;
}

void SearchItf::SearchItf(SearchItf *this)
{
  *(_QWORD *)this = &unk_24C219D48;
  *(_OWORD *)((char *)this + 8) = xmmword_209A6C790;
  *((_QWORD *)this + 3) = 0x4E2000000000;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = -1;
  *((_QWORD *)this + 9) = 0x4E2000000064;
  *((_DWORD *)this + 20) = 1879048192;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
}

void SearchItf::~SearchItf(SearchItf *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C219D48;
  v1 = (char *)this + 88;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v1);
}

void SearchItf::printSize(SearchItf *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v141;
  int v142;

  *a4 = 0;
  *a5 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 104, (DgnString *)&v141);
  if (v142)
    v15 = v141;
  else
    v15 = &byte_209A88803;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_209A88803, a3, &byte_209A88803, v15);
  DgnString::~DgnString((DgnString *)&v141);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_209A88803);
  v20 = (a3 + 1);
  v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 105, (DgnString *)&v141);
  if (v142)
    v26 = v141;
  else
    v26 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 106, (DgnString *)&v141);
  if (v142)
    v31 = v141;
  else
    v31 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 107, (DgnString *)&v141);
  if (v142)
    v36 = v141;
  else
    v36 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v36, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 108, (DgnString *)&v141);
  if (v142)
    v41 = v141;
  else
    v41 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 110, (DgnString *)&v141);
  if (v142)
    v46 = v141;
  else
    v46 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v46, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 112, (DgnString *)&v141);
  if (v142)
    v51 = v141;
  else
    v51 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v51, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 4;
  else
    v52 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 113, (DgnString *)&v141);
  if (v142)
    v57 = v141;
  else
    v57 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v57, v52, v52, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v52;
  *a5 += v52;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v58 = 4;
  else
    v58 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 114, (DgnString *)&v141);
  if (v142)
    v63 = v141;
  else
    v63 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v63, v58, v58, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v58;
  *a5 += v58;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v64 = 4;
  else
    v64 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 115, (DgnString *)&v141);
  if (v142)
    v69 = v141;
  else
    v69 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v69, v64, v64, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v64;
  *a5 += v64;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v70 = 4;
  else
    v70 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 116, (DgnString *)&v141);
  if (v142)
    v75 = v141;
  else
    v75 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v75, v70, v70, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v70;
  *a5 += v70;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 117, (DgnString *)&v141);
  if (v142)
    v80 = v141;
  else
    v80 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v80, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 119, (DgnString *)&v141);
  if (v142)
    v85 = v141;
  else
    v85 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v85, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 121, (DgnString *)&v141);
  if (v142)
    v90 = v141;
  else
    v90 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v90, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 123, (DgnString *)&v141);
  if (v142)
    v95 = v141;
  else
    v95 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, (a3 + 1), &byte_209A88803, (34 - a3), (34 - a3), v95, 4, 4, 0);
  v139 = a3;
  v96 = a6;
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 125, (DgnString *)&v141);
  if (v142)
    v101 = v141;
  else
    v101 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &byte_209A88803, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v102 = 12;
  else
    v102 = 16;
  v103 = *((unsigned int *)this + 24);
  v104 = *((_DWORD *)this + 25);
  if (v104 >= v103)
  {
    v105 = 0;
    if ((int)v103 > 0)
      v102 += 4 * (v103 - 1) + 4;
    v106 = v102 + 4 * (v104 - v103);
  }
  else
  {
    v105 = 4 * v103;
    v106 = v102;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 127, (DgnString *)&v141);
  if (v142)
    v111 = v141;
  else
    v111 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v107, v108, v109, v110, v20, &byte_209A88803, v21, v21, v111, v106, v102, v105);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v106;
  *a5 += v102;
  *v96 += v105;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v112 = 4;
  else
    v112 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 128, (DgnString *)&v141);
  if (v142)
    v117 = v141;
  else
    v117 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v113, v114, v115, v116, v20, &byte_209A88803, v21, v21, v117, v112, v112, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v112;
  *a5 += v112;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v118 = 4;
  else
    v118 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 129, (DgnString *)&v141);
  if (v142)
    v123 = v141;
  else
    v123 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v20, &byte_209A88803, v21, v21, v123, v118, v118, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v118;
  *a5 += v118;
  v124 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v124 = 16;
  v125 = *((unsigned int *)this + 32);
  v126 = 8 * v125;
  if ((int)v125 <= 0)
    v126 = 0;
  v127 = v126 + v124;
  v128 = v126 + v124 + 8 * (*((_DWORD *)this + 33) - v125);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 131, (DgnString *)&v141);
  if (v142)
    v133 = v141;
  else
    v133 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v20, &byte_209A88803, v21, v21, v133, v128, v127, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v128;
  *a5 += v127;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 132, (DgnString *)&v141);
  if (v142)
    v138 = v141;
  else
    v138 = &byte_209A88803;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v134, v135, v136, v137, v139, &byte_209A88803, (35 - v139), (35 - v139), v138, *a4, *a5, *v96);
  DgnString::~DgnString((DgnString *)&v141);
}

void sub_20981AAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t SearchItf::setHashPropagateBestTokensFirst(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SearchItf::normalizeBestAndComputeEstimatedThresh(SearchItf *this, int a2, int a3)
{
  int v5;
  int v6;
  unsigned int v7;

  if (a3 == 20000 || a2 <= -1)
    v5 = 0;
  else
    v5 = a3;
  v6 = *((_DWORD *)this + 20) + v5;
  *((_DWORD *)this + 20) = v6;
  v7 = *((_DWORD *)this + 24);
  if (v7 == *((_DWORD *)this + 25))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 88, 1, 1);
    v7 = *((_DWORD *)this + 24);
  }
  *(_DWORD *)(*((_QWORD *)this + 11) + 4 * v7) = v6;
  ++*((_DWORD *)this + 24);
  *(_DWORD *)(*((_QWORD *)this + 4) + 256) = v5;
  return 20000;
}

void MrecInitModule_adaptctl_recogctl(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;

  if (!gParDebugShowSegmentation)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowSegmentation", byte_209A6C7BB, byte_209A6C7BB, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugShowSegmentation = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowSegmentation);
  }
  if (!gParDebugAdaptationStartup)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugAdaptationStartup", byte_209A6C7BB, byte_209A6C7BB, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugAdaptationStartup = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAdaptationStartup);
  }
  if (!gParDebugAdaptationAccumulate)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugAdaptationAccumulate", byte_209A6C7BB, byte_209A6C7BB, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugAdaptationAccumulate = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAdaptationAccumulate);
  }
  if (!gParDebugAdaptationApply)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugAdaptationApply", byte_209A6C7BB, byte_209A6C7BB, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDebugAdaptationApply = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAdaptationApply);
  }
}

void AdaptControllerResults::~AdaptControllerResults(AdaptControllerResults *this)
{
  DgnDelete<Segmentation>(*((_QWORD *)this + 4));
  *((_QWORD *)this + 4) = 0;
  DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 5));
  *((_QWORD *)this + 5) = 0;
  DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 6));
  *((_QWORD *)this + 6) = 0;
  DgnDelete<NBestChoiceList>(*((NBestChoiceList **)this + 7));
  *((_QWORD *)this + 7) = 0;
  PhnMgr::~PhnMgr((AdaptControllerResults *)((char *)this + 64));
  DgnString::~DgnString((AdaptControllerResults *)((char *)this + 16));
}

PelScoreCacheData *DgnDelete<PelScoreCacheData>(PelScoreCacheData *result)
{
  _QWORD *v1;

  if (result)
  {
    PelScoreCacheData::~PelScoreCacheData(result);
    return (PelScoreCacheData *)MemChunkFree(v1, 0);
  }
  return result;
}

void AdaptControllerResults::printSize(AdaptControllerResults *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  Segmentation *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  PelScoreCacheData *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  PelScoreCacheData *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  NBestChoiceList *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 427, (DgnString *)&v80);
  if (v81)
    v16 = (void *)v80;
  else
    v16 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C7BB, a3, &unk_209A6C7BB, v16);
  DgnString::~DgnString((DgnString *)&v80);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C7BB);
  v21 = (a3 + 1);
  v77 = a3;
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 429, (DgnString *)&v80);
  if (v81)
    v27 = (void *)v80;
  else
    v27 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, v21, &unk_209A6C7BB, v22, v22, v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += 4;
  *a5 += 4;
  v28 = sizeObject((uint64_t)this + 4, 0);
  v29 = sizeObject((uint64_t)this + 4, 1);
  v30 = sizeObject((uint64_t)this + 4, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 431, (DgnString *)&v80);
  if (v81)
    v35 = (void *)v80;
  else
    v35 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, v21, &unk_209A6C7BB, v22, v22, v35, v28, v29, v30);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v28;
  *a5 += v29;
  *a6 += v30;
  v36 = sizeObject((char *)this + 16);
  v37 = sizeObject((char *)this + 16);
  v38 = sizeObject((char *)this + 16);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 433, (DgnString *)&v80);
  if (v81)
    v43 = (void *)v80;
  else
    v43 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v21, &unk_209A6C7BB, v22, v22, v43, v36, v37, v38);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v36;
  *a5 += v37;
  *a6 += v38;
  v44 = (Segmentation *)*((_QWORD *)this + 4);
  if (v44)
  {
    v79 = 0;
    v80 = 0;
    v78 = 0;
    Segmentation::printSize(v44, 0xFFFFFFFFLL, v21, &v80, &v79, &v78);
    *a4 += v80;
    *a5 += v79;
    *a6 += v78;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v45 = 4;
  else
    v45 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 435, (DgnString *)&v80);
  if (v81)
    v50 = (void *)v80;
  else
    v50 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v21, &unk_209A6C7BB, v22, v22, v50, v45, v45, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v45;
  *a5 += v45;
  v79 = 0;
  v80 = 0;
  v78 = 0;
  PhnMgr::printSize((AdaptControllerResults *)((char *)this + 64), 0xFFFFFFFFLL, v21, &v80, &v79, &v78);
  *a4 += v80;
  *a5 += v79;
  *a6 += v78;
  v51 = (PelScoreCacheData *)*((_QWORD *)this + 5);
  if (v51)
  {
    v79 = 0;
    v80 = 0;
    v78 = 0;
    PelScoreCacheData::printSize(v51, 0xFFFFFFFFLL, v21, &v80, &v79, &v78);
    *a4 += v80;
    *a5 += v79;
    *a6 += v78;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 4;
  else
    v52 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 438, (DgnString *)&v80);
  if (v81)
    v57 = (void *)v80;
  else
    v57 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v21, &unk_209A6C7BB, v22, v22, v57, v52, v52, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v52;
  *a5 += v52;
  v58 = (PelScoreCacheData *)*((_QWORD *)this + 6);
  if (v58)
  {
    v79 = 0;
    v80 = 0;
    v78 = 0;
    PelScoreCacheData::printSize(v58, 0xFFFFFFFFLL, v21, &v80, &v79, &v78);
    *a4 += v80;
    *a5 += v79;
    *a6 += v78;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v59 = 4;
  else
    v59 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 440, (DgnString *)&v80);
  if (v81)
    v64 = (void *)v80;
  else
    v64 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v21, &unk_209A6C7BB, v22, v22, v64, v59, v59, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v59;
  *a5 += v59;
  v65 = (NBestChoiceList *)*((_QWORD *)this + 7);
  if (v65)
  {
    v79 = 0;
    v80 = 0;
    v78 = 0;
    NBestChoiceList::printSize(v65, 0xFFFFFFFFLL, v21, &v80, &v79, &v78);
    *a4 += v80;
    *a5 += v79;
    *a6 += v78;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v66 = 4;
  else
    v66 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 442, (DgnString *)&v80);
  if (v81)
    v71 = (void *)v80;
  else
    v71 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v21, &unk_209A6C7BB, v22, v22, v71, v66, v66, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v66;
  *a5 += v66;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 444, (DgnString *)&v80);
  if (v81)
    v76 = (void *)v80;
  else
    v76 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v77, &unk_209A6C7BB, (35 - v77), (35 - v77), v76, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v80);
}

void sub_20981B494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void AdaptAccumStats::printSize(AdaptAccumStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  int v71;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 455, (DgnString *)&v70);
  if (v71)
    v16 = v70;
  else
    v16 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C7BB, a3, &unk_209A6C7BB, v16);
  DgnString::~DgnString((DgnString *)&v70);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C7BB);
  v21 = SnapTime::sizeObject((uint64_t)this, 0);
  v22 = SnapTime::sizeObject((uint64_t)this, 1);
  v23 = SnapTime::sizeObject((uint64_t)this, 3);
  v24 = (a3 + 1);
  v69 = a3;
  v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 457, (DgnString *)&v70);
  if (v71)
    v30 = v70;
  else
    v30 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_209A6C7BB, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  v31 = SnapTime::sizeObject((uint64_t)this + 32, 0);
  v32 = SnapTime::sizeObject((uint64_t)this + 32, 1);
  v33 = SnapTime::sizeObject((uint64_t)this + 32, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 459, (DgnString *)&v70);
  if (v71)
    v38 = v70;
  else
    v38 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v24, &unk_209A6C7BB, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v31;
  *a5 += v32;
  *a6 += v33;
  v39 = SnapTime::sizeObject((uint64_t)this + 64, 0);
  v40 = SnapTime::sizeObject((uint64_t)this + 64, 1);
  v41 = SnapTime::sizeObject((uint64_t)this + 64, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 461, (DgnString *)&v70);
  if (v71)
    v46 = v70;
  else
    v46 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v24, &unk_209A6C7BB, v25, v25, v46, v39, v40, v41);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v39;
  *a5 += v40;
  *a6 += v41;
  v47 = SnapTime::sizeObject((uint64_t)this + 96, 0);
  v48 = SnapTime::sizeObject((uint64_t)this + 96, 1);
  v49 = SnapTime::sizeObject((uint64_t)this + 96, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 463, (DgnString *)&v70);
  if (v71)
    v54 = v70;
  else
    v54 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v24, &unk_209A6C7BB, v25, v25, v54, v47, v48, v49);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v47;
  *a5 += v48;
  *a6 += v49;
  v55 = (char *)this + 128;
  v56 = SnapTime::sizeObject((uint64_t)this + 128, 0);
  v57 = SnapTime::sizeObject((uint64_t)v55, 1);
  v58 = SnapTime::sizeObject((uint64_t)v55, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 465, (DgnString *)&v70);
  if (v71)
    v63 = v70;
  else
    v63 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v24, &unk_209A6C7BB, v25, v25, v63, v56, v57, v58);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v56;
  *a5 += v57;
  *a6 += v58;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 466, (DgnString *)&v70);
  if (v71)
    v68 = v70;
  else
    v68 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, v69, &unk_209A6C7BB, (35 - v69), (35 - v69), v68, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v70);
}

void sub_20981B930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t AdaptController::getPelMgr(AdaptController *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(_QWORD *)(ModelMgr::getUserOrThrow((ModelMgr *)ModelMgr::smpModelMgr, *((unsigned __int16 *)this + 1), a3, a4, a5, a6, a7, a8)+ 56);
}

void AdaptApplyStats::printSize(AdaptApplyStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  int v71;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 585, (DgnString *)&v70);
  if (v71)
    v16 = v70;
  else
    v16 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C7BB, a3, &unk_209A6C7BB, v16);
  DgnString::~DgnString((DgnString *)&v70);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C7BB);
  v21 = SnapTime::sizeObject((uint64_t)this, 0);
  v22 = SnapTime::sizeObject((uint64_t)this, 1);
  v23 = SnapTime::sizeObject((uint64_t)this, 3);
  v24 = (a3 + 1);
  v69 = a3;
  v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 587, (DgnString *)&v70);
  if (v71)
    v30 = v70;
  else
    v30 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_209A6C7BB, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  v31 = SnapTime::sizeObject((uint64_t)this + 32, 0);
  v32 = SnapTime::sizeObject((uint64_t)this + 32, 1);
  v33 = SnapTime::sizeObject((uint64_t)this + 32, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 589, (DgnString *)&v70);
  if (v71)
    v38 = v70;
  else
    v38 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v24, &unk_209A6C7BB, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v31;
  *a5 += v32;
  *a6 += v33;
  v39 = SnapTime::sizeObject((uint64_t)this + 64, 0);
  v40 = SnapTime::sizeObject((uint64_t)this + 64, 1);
  v41 = SnapTime::sizeObject((uint64_t)this + 64, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 591, (DgnString *)&v70);
  if (v71)
    v46 = v70;
  else
    v46 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v24, &unk_209A6C7BB, v25, v25, v46, v39, v40, v41);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v39;
  *a5 += v40;
  *a6 += v41;
  v47 = SnapTime::sizeObject((uint64_t)this + 96, 0);
  v48 = SnapTime::sizeObject((uint64_t)this + 96, 1);
  v49 = SnapTime::sizeObject((uint64_t)this + 96, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 593, (DgnString *)&v70);
  if (v71)
    v54 = v70;
  else
    v54 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v24, &unk_209A6C7BB, v25, v25, v54, v47, v48, v49);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v47;
  *a5 += v48;
  *a6 += v49;
  v55 = (char *)this + 128;
  v56 = SnapTime::sizeObject((uint64_t)this + 128, 0);
  v57 = SnapTime::sizeObject((uint64_t)v55, 1);
  v58 = SnapTime::sizeObject((uint64_t)v55, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 595, (DgnString *)&v70);
  if (v71)
    v63 = v70;
  else
    v63 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v24, &unk_209A6C7BB, v25, v25, v63, v56, v57, v58);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v56;
  *a5 += v57;
  *a6 += v58;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 596, (DgnString *)&v70);
  if (v71)
    v68 = v70;
  else
    v68 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, v69, &unk_209A6C7BB, (35 - v69), (35 - v69), v68, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v70);
}

void sub_20981BDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void AdaptController::~AdaptController(AdaptController *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  SigProc *SigProc;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  User *UserOrThrow;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;

  AdaptController::releaseAccumulators(this);
  if (*((_DWORD *)this + 10))
  {
    SigProc = (SigProc *)ChannelMgr::getSigProc((ChannelMgr *)ChannelMgr::smpChannelMgr, *((_DWORD *)this + 1), v2, v3, v4, v5, v6, v7);
    SigProc::decrementAdapterCount(SigProc, v9, v10, v11, v12, v13, v14, v15);
    UserOrThrow = (User *)ModelMgr::getUserOrThrow((ModelMgr *)ModelMgr::smpModelMgr, *((unsigned __int16 *)this + 1), v16, v17, v18, v19, v20, v21);
    User::decrementAdapterCount(UserOrThrow, v23, v24, v25, v26, v27, v28, v29);
  }
  v30 = *((_QWORD *)this + 1);
  if (v30)
  {
    --*(_DWORD *)(v30 + 36);
    *((_QWORD *)this + 1) = 0;
  }
  v31 = *((_QWORD *)this + 2);
  if (v31)
  {
    --*(_DWORD *)(v31 + 36);
    *((_QWORD *)this + 2) = 0;
  }
  v32 = *((_QWORD *)this + 3);
  if (v32)
  {
    --*(_DWORD *)(v32 + 36);
    *((_QWORD *)this + 3) = 0;
  }
  v33 = (_QWORD *)*((_QWORD *)this + 4);
  if (v33)
  {
    (*(void (**)(_QWORD))(*v33 + 16))(*((_QWORD *)this + 4));
    MemChunkFree(v33, 0);
  }
  *((_QWORD *)this + 4) = 0;
  v34 = (_QWORD *)*((_QWORD *)this + 20);
  if (v34)
    MemChunkFree(v34, 0);
  *((_QWORD *)this + 20) = 0;
  v35 = (_QWORD *)*((_QWORD *)this + 21);
  if (v35)
    MemChunkFree(v35, 0);
  *((_QWORD *)this + 21) = 0;
  DgnIOwnArray<WeightAccum *>::releaseAll((uint64_t)this + 96);
  DgnArray<DgnIOwnArray<BasisAccum *>>::releaseAll((uint64_t)this + 80);
  AdaptConfig::clear((_QWORD *)this + 5);
}

_QWORD *AdaptController::releaseAccumulators(AdaptController *this)
{
  _QWORD *result;

  DgnDelete<DgnPrimArray<unsigned int>>(*((_QWORD *)this + 18));
  *((_QWORD *)this + 18) = 0;
  DgnDelete<DgnPrimArray<unsigned int>>(*((_QWORD *)this + 19));
  *((_QWORD *)this + 19) = 0;
  DgnDelete<ConstrainedTransAccMgr>(*((ConstrainedTransAccMgr **)this + 7));
  *((_QWORD *)this + 7) = 0;
  DgnDelete<IntruderMgr>(*((IntruderMgr **)this + 8));
  *((_QWORD *)this + 8) = 0;
  DgnDelete<WarpChooser>(*((WarpChooser **)this + 9));
  *((_QWORD *)this + 9) = 0;
  DgnDelete<DurAccum>(*((_QWORD *)this + 14));
  *((_QWORD *)this + 14) = 0;
  DgnArray<DgnIOwnArray<BasisAccum *>>::releaseAll((uint64_t)this + 80);
  result = DgnIOwnArray<WeightAccum *>::releaseAll((uint64_t)this + 96);
  *((_BYTE *)this + 137) = 0;
  return result;
}

void AdaptController::printSize(AdaptController *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  IntruderMgr *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  WarpChooser *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  ConstrainedTransAccMgr *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  AdaptAccumStats *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  AdaptApplyStats *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  int v191;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 798, (DgnString *)&v190);
  if (v191)
    v16 = (void *)v190;
  else
    v16 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C7BB, a3, &unk_209A6C7BB, v16);
  DgnString::~DgnString((DgnString *)&v190);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C7BB);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 799, (DgnString *)&v190);
  if (v191)
    v27 = (void *)v190;
  else
    v27 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C7BB, (34 - a3), (34 - a3), v27, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 800, (DgnString *)&v190);
  if (v191)
    v32 = (void *)v190;
  else
    v32 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C7BB, (34 - a3), (34 - a3), v32, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 801, (DgnString *)&v190);
  if (v191)
    v37 = (void *)v190;
  else
    v37 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C7BB, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v187 = a3;
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += 4;
  *a5 += 4;
  v38 = *((_QWORD *)this + 4);
  if (v38)
  {
    v189 = 0;
    v190 = 0;
    v188 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)v38 + 32))(v38, 0xFFFFFFFFLL, (a3 + 1), &v190, &v189, &v188);
    *a4 += v190;
    *a5 += v189;
    *a6 += v188;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v39 = 4;
  else
    v39 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 803, (DgnString *)&v190);
  if (v191)
    v44 = (void *)v190;
  else
    v44 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v21, &unk_209A6C7BB, v22, v22, v44, v39, v39, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v39;
  *a5 += v39;
  v45 = sizeObject((uint64_t)this + 40, 0);
  v46 = sizeObject((uint64_t)this + 40, 1);
  v47 = sizeObject((uint64_t)this + 40, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 804, (DgnString *)&v190);
  if (v191)
    v52 = (void *)v190;
  else
    v52 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A6C7BB, v22, v22, v52, v45, v46, v47);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v45;
  *a5 += v46;
  *a6 += v47;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 4;
  else
    v53 = 8;
  v54 = *((_QWORD *)this + 1);
  if (v54)
  {
    v55 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 104))(v54, 0) + v53;
    v56 = *((_QWORD *)this + 1);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v53 = 4;
    else
      v53 = 8;
    if (v56
      && (v53 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 104))(v56, 1),
          (v57 = *((_QWORD *)this + 1)) != 0))
    {
      v58 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 104))(v57, 3);
    }
    else
    {
      v58 = 0;
    }
  }
  else
  {
    v58 = 0;
    v55 = v53;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 806, (DgnString *)&v190);
  if (v191)
    v63 = (void *)v190;
  else
    v63 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v21, &unk_209A6C7BB, v22, v22, v63, v55, v53, v58);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v55;
  *a5 += v53;
  *a6 += v58;
  v64 = (IntruderMgr *)*((_QWORD *)this + 8);
  if (v64)
  {
    v189 = 0;
    v190 = 0;
    v188 = 0;
    IntruderMgr::printSize(v64, 0xFFFFFFFFLL, v21, &v190, &v189, &v188);
    *a4 += v190;
    *a5 += v189;
    *a6 += v188;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v65 = 4;
  else
    v65 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 808, (DgnString *)&v190);
  if (v191)
    v70 = (void *)v190;
  else
    v70 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v21, &unk_209A6C7BB, v22, v22, v70, v65, v65, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v65;
  *a5 += v65;
  v71 = (WarpChooser *)*((_QWORD *)this + 9);
  if (v71)
  {
    v189 = 0;
    v190 = 0;
    v188 = 0;
    WarpChooser::printSize(v71, 0xFFFFFFFFLL, v21, &v190, &v189, &v188);
    *a4 += v190;
    *a5 += v189;
    *a6 += v188;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v72 = 4;
  else
    v72 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 810, (DgnString *)&v190);
  if (v191)
    v77 = (void *)v190;
  else
    v77 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v73, v74, v75, v76, v21, &unk_209A6C7BB, v22, v22, v77, v72, v72, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v72;
  *a5 += v72;
  v78 = (ConstrainedTransAccMgr *)*((_QWORD *)this + 7);
  if (v78)
  {
    v189 = 0;
    v190 = 0;
    v188 = 0;
    ConstrainedTransAccMgr::printSize(v78, 0xFFFFFFFFLL, v21, &v190, &v189, &v188);
    *a4 += v190;
    *a5 += v189;
    *a6 += v188;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v79 = 4;
  else
    v79 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 812, (DgnString *)&v190);
  if (v191)
    v84 = (void *)v190;
  else
    v84 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v21, &unk_209A6C7BB, v22, v22, v84, v79, v79, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v79;
  *a5 += v79;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 814, (DgnString *)&v190);
  if (v191)
    v89 = (void *)v190;
  else
    v89 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v21, &unk_209A6C7BB, v22, v22, v89, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 816, (DgnString *)&v190);
  if (v191)
    v94 = (void *)v190;
  else
    v94 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, v21, &unk_209A6C7BB, v22, v22, v94, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 818, (DgnString *)&v190);
  if (v191)
    v99 = (void *)v190;
  else
    v99 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, v21, &unk_209A6C7BB, v22, v22, v99, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 819, (DgnString *)&v190);
  if (v191)
    v104 = (void *)v190;
  else
    v104 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v100, v101, v102, v103, v21, &unk_209A6C7BB, v22, v22, v104, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v190);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 821, (DgnString *)&v190);
  if (v191)
    v109 = (void *)v190;
  else
    v109 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v105, v106, v107, v108, v21, &unk_209A6C7BB, v22, v22, v109, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v190);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 823, (DgnString *)&v190);
  if (v191)
    v114 = (void *)v190;
  else
    v114 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v21, &unk_209A6C7BB, v22, v22, v114, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v190);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 824, (DgnString *)&v190);
  if (v191)
    v119 = (void *)v190;
  else
    v119 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v21, &unk_209A6C7BB, v22, v22, v119, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v190);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v120 = 4;
  else
    v120 = 8;
  v121 = *((_QWORD *)this + 18);
  if (v121)
  {
    v122 = sizeObject(v121, 0) + v120;
    v123 = *((_QWORD *)this + 18);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v120 = 4;
    else
      v120 = 8;
    if (v123 && (v120 += sizeObject(v123, 1), (v124 = *((_QWORD *)this + 18)) != 0))
      v125 = sizeObject(v124, 3);
    else
      v125 = 0;
  }
  else
  {
    v125 = 0;
    v122 = v120;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 825, (DgnString *)&v190);
  if (v191)
    v130 = (void *)v190;
  else
    v130 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v126, v127, v128, v129, v21, &unk_209A6C7BB, v22, v22, v130, v122, v120, v125);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v122;
  *a5 += v120;
  *a6 += v125;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v131 = 4;
  else
    v131 = 8;
  v132 = *((_QWORD *)this + 19);
  if (v132)
  {
    v133 = sizeObject(v132, 0) + v131;
    v134 = *((_QWORD *)this + 19);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v131 = 4;
    else
      v131 = 8;
    if (v134 && (v131 += sizeObject(v134, 1), (v135 = *((_QWORD *)this + 19)) != 0))
      v136 = sizeObject(v135, 3);
    else
      v136 = 0;
  }
  else
  {
    v136 = 0;
    v133 = v131;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 827, (DgnString *)&v190);
  if (v191)
    v141 = (void *)v190;
  else
    v141 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, v21, &unk_209A6C7BB, v22, v22, v141, v133, v131, v136);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v133;
  *a5 += v131;
  *a6 += v136;
  v142 = sizeObject<DgnIOwnArray<BasisAccum *>>((uint64_t)this + 80, 0);
  v143 = sizeObject<DgnIOwnArray<BasisAccum *>>((uint64_t)this + 80, 1);
  v144 = sizeObject<DgnIOwnArray<BasisAccum *>>((uint64_t)this + 80, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 829, (DgnString *)&v190);
  if (v191)
    v149 = (void *)v190;
  else
    v149 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v21, &unk_209A6C7BB, v22, v22, v149, v142, v143, v144);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v142;
  *a5 += v143;
  *a6 += v144;
  v150 = sizeObject<WeightAccum *>((uint64_t)this + 96, 0);
  v151 = sizeObject<WeightAccum *>((uint64_t)this + 96, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 831, (DgnString *)&v190);
  if (v191)
    v156 = (void *)v190;
  else
    v156 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v152, v153, v154, v155, v21, &unk_209A6C7BB, v22, v22, v156, v150, v151, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v150;
  *a5 += v151;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v157 = 4;
  else
    v157 = 8;
  v158 = *((_QWORD *)this + 14);
  if (v158)
  {
    v159 = DurAccum::sizeObject(v158, 0) + v157;
    v160 = *((_QWORD *)this + 14);
    if (gShadowDiagnosticShowIdealizedObjectSizes)
      v157 = 4;
    else
      v157 = 8;
    if (v160 && (v157 += DurAccum::sizeObject(v160, 1), (v161 = *((_QWORD *)this + 14)) != 0))
      v162 = DurAccum::sizeObject(v161, 3);
    else
      v162 = 0;
  }
  else
  {
    v162 = 0;
    v159 = v157;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 832, (DgnString *)&v190);
  if (v191)
    v167 = (void *)v190;
  else
    v167 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v21, &unk_209A6C7BB, v22, v22, v167, v159, v157, v162);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v159;
  *a5 += v157;
  *a6 += v162;
  v168 = (AdaptAccumStats *)*((_QWORD *)this + 20);
  if (v168)
  {
    v189 = 0;
    v190 = 0;
    v188 = 0;
    AdaptAccumStats::printSize(v168, 0xFFFFFFFFLL, v21, &v190, &v189, &v188);
    *a4 += v190;
    *a5 += v189;
    *a6 += v188;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v169 = 4;
  else
    v169 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 834, (DgnString *)&v190);
  if (v191)
    v174 = (void *)v190;
  else
    v174 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v170, v171, v172, v173, v21, &unk_209A6C7BB, v22, v22, v174, v169, v169, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v169;
  *a5 += v169;
  v175 = (AdaptApplyStats *)*((_QWORD *)this + 21);
  if (v175)
  {
    v189 = 0;
    v190 = 0;
    v188 = 0;
    AdaptApplyStats::printSize(v175, 0xFFFFFFFFLL, v21, &v190, &v189, &v188);
    *a4 += v190;
    *a5 += v189;
    *a6 += v188;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v176 = 4;
  else
    v176 = 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 836, (DgnString *)&v190);
  if (v191)
    v181 = (void *)v190;
  else
    v181 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v177, v178, v179, v180, v21, &unk_209A6C7BB, v22, v22, v181, v176, v176, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v176;
  *a5 += v176;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 837, (DgnString *)&v190);
  if (v191)
    v186 = (void *)v190;
  else
    v186 = &unk_209A6C7BB;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v182, v183, v184, v185, v187, &unk_209A6C7BB, (35 - v187), (35 - v187), v186, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v190);
}

void sub_20981CF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnIOwnArray<BasisAccum *>>(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[2];

  v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v3 = 12;
  else
    v3 = 16;
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v2 = v3;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 8);
      v2 = v3;
      if ((int)v6 >= 1)
      {
        v7 = v6 + 1;
        v2 = v3;
        do
          v2 += sizeObject<BasisAccum *>(*(_QWORD *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2)
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnIOwnArray<BasisAccum *>::releaseAll((uint64_t)v9);
  return v2;
}

void sub_20981D0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnIOwnArray<BasisAccum *>::releaseAll((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<WeightAccum *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += WeightAccum::sizeObject(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

ConstrainedTransAccMgr *DgnDelete<ConstrainedTransAccMgr>(ConstrainedTransAccMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    ConstrainedTransAccMgr::~ConstrainedTransAccMgr(result);
    return (ConstrainedTransAccMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

IntruderMgr *DgnDelete<IntruderMgr>(IntruderMgr *result)
{
  _QWORD *v1;

  if (result)
  {
    IntruderMgr::~IntruderMgr(result);
    return (IntruderMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

WarpChooser *DgnDelete<WarpChooser>(WarpChooser *result)
{
  _QWORD *v1;

  if (result)
  {
    WarpChooser::~WarpChooser(result);
    return (WarpChooser *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<DurAccum>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnPrimArray<unsigned int>::~DgnPrimArray(result + 24);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 1));
    return MemChunkFree(v1, 0);
  }
  return result;
}

_QWORD *DgnArray<DgnIOwnArray<BasisAccum *>>::releaseAll(uint64_t a1)
{
  _QWORD *result;

  DgnArray<DgnIOwnArray<BasisAccum *>>::destructAt((_QWORD *)a1, 0, *(_DWORD *)(a1 + 8));
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *DgnIOwnArray<WeightAccum *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<WeightAccum>(*(_QWORD *)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

IntruderSet *DgnDelete<IntruderSet>(IntruderSet *result)
{
  _QWORD *v1;

  if (result)
  {
    IntruderSet::~IntruderSet(result);
    return (IntruderSet *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t *Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;

  v4 = CWIDAC::computeHash(a2);
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
    v6 = (-1640531527 * v4) >> -(char)v5;
  else
    v6 = 0;
  v7 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 8 * v6);
  v8 = *v7;
  if (*v7)
  {
    v9 = v4;
    do
    {
      v10 = (uint64_t *)v8;
      if (*(_DWORD *)(v8 + 8) == v9 && CWIDAC::operator==(v8 + 12, a2))
        break;
      v8 = *v10;
      v7 = v10;
    }
    while (*v10);
  }
  return v7;
}

uint64_t sizeObject<BasisAccum *>(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 == 3)
    return 0;
  v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v2 = 12;
  else
    v2 = 16;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      v7 = v6 + 1;
      v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8)
          v9 = 4;
        else
          v9 = 8;
        if (a2 != 2)
        {
          v10 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += BasisAccum::sizeObject(v10, a2);
            v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      v11 = 2;
      if (!v4)
        v11 = 3;
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

_QWORD *DgnIOwnArray<BasisAccum *>::releaseAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<BasisAccum>(*(_QWORD *)(*(_QWORD *)a1 + v3));
      *(_QWORD *)(*(_QWORD *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)MemChunkFree(result, 0);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnDelete<BasisAccum>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnPrimFixArray<double>::~DgnPrimFixArray(result + 32);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)(v1 + 2));
    return MemChunkFree(v1, 0);
  }
  return result;
}

_QWORD *DgnArray<DgnIOwnArray<BasisAccum *>>::destructAt(_QWORD *result, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;

  v3 = result;
  v4 = a3 + a2;
  v5 = a2;
  v6 = v4 + 1;
  for (i = 16 * v4 - 16; --v6 > v5; i = v8)
  {
    v8 = i - 16;
    result = DgnIOwnArray<BasisAccum *>::releaseAll(*v3 + i);
  }
  return result;
}

uint64_t DgnDelete<WeightAccum>(uint64_t result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = (_QWORD *)result;
    DgnPrimFixArray<double>::~DgnPrimFixArray(result + 8);
    return MemChunkFree(v1, 0);
  }
  return result;
}

void MrecInitModule_fstsrch_fst(void)
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;

  if (!gParDebugFstBestPath)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugFstBestPath", (const char *)&unk_209A6C820, (const char *)&unk_209A6C820, 0, 0, 0);
    *v1 = &unk_24C214CE8;
    gParDebugFstBestPath = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstBestPath);
  }
  if (!gParDebugFstRecognition)
  {
    v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugFstRecognition", (const char *)&unk_209A6C820, (const char *)&unk_209A6C820, 0, 0, 0);
    *v3 = &unk_24C214CE8;
    gParDebugFstRecognition = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstRecognition);
  }
  if (!gParDebugFstSeeding)
  {
    v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugFstSeeding", (const char *)&unk_209A6C820, (const char *)&unk_209A6C820, 0, 0, 0);
    *v5 = &unk_24C214CE8;
    gParDebugFstSeeding = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstSeeding);
  }
  if (!gParDebugFstSeedingMini)
  {
    v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugFstSeedingMini", (const char *)&unk_209A6C820, (const char *)&unk_209A6C820, 0, 0, 0);
    *v7 = &unk_24C214CE8;
    gParDebugFstSeedingMini = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstSeedingMini);
  }
  if (!gParDebugFstScoring)
  {
    v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugFstScoring", (const char *)&unk_209A6C820, (const char *)&unk_209A6C820, 0, 0, 0);
    *v9 = &unk_24C214CE8;
    gParDebugFstScoring = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstScoring);
  }
  if (!gParDebugFstDumpTraces)
  {
    v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "DebugFstDumpTraces", (const char *)&unk_209A6C820, (const char *)&unk_209A6C820, 0, 0, 0);
    *v11 = &unk_24C214CE8;
    gParDebugFstDumpTraces = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstDumpTraces);
  }
}

int64x2_t FstSearchLateLatticeHashBackoff::advanceDeltas(FstSearchLateLatticeHashBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v10;
  unint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  signed __int32 ScoreAllowBackoff_updateNodeInSequence;
  signed __int32 v19;
  __n128 *v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  __n128 *v32;
  unint64_t v33;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  int64x2_t *v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t *v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int64x2_t v57;
  int64x2_t *v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t *v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  uint64_t v67;
  int64x2_t *v68;
  int64x2_t result;
  int64x2_t v70;
  int v71;
  int *v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int v91;
  __n128 v92;
  unint64_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int v96[3];

  v96[0] = a2;
  v94 = 0u;
  v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  v92.n128_u64[0] = 0xFFFFFFFF00000000;
  v92.n128_u32[2] = -1;
  v92.n128_u16[6] = -2;
  v93 = 0;
  *((_DWORD *)this + 58) = a3;
  v10 = *((_DWORD *)this + 2);
  v72 = (int *)((char *)this + 232);
  v11 = *((unsigned int *)this + 50);
  if ((_DWORD)v11)
  {
    v71 = a5;
    for (i = 0; i < v11; ++i)
    {
      v13 = *((_QWORD *)this + 24);
      v14 = v13 + 24 * i;
      v15 = *(unsigned int *)(v14 + 4);
      v16 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v16 + 160) != (_DWORD)v15)
      {
        if (*(_DWORD *)(v16 + 140) > (int)v15)
        {
          v17 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000
              ? 5000
              : *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
          ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v13 + 24 * i + 12), *(_DWORD *)v14, v17);
          v19 = *((_DWORD *)this + 58);
          if (ScoreAllowBackoff_updateNodeInSequence - v10 <= v19)
          {
            if (v19 > ScoreAllowBackoff_updateNodeInSequence)
              *v72 = ScoreAllowBackoff_updateNodeInSequence;
            v20 = (__n128 *)(*((_QWORD *)this + 24) + 24 * i);
            v21 = v20[1].n128_u64[0];
            v92 = *v20;
            v93 = v21;
            v92.n128_u32[0] = ScoreAllowBackoff_updateNodeInSequence;
            FstSearchLateLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, &v92);
          }
        }
        v22 = v15;
        do
        {
          v23 = *((_QWORD *)this + 5);
          v24 = *(_QWORD *)(v23 + 152);
          v25 = *(_DWORD *)(v24 + 4 * v22);
          v26 = *(_DWORD *)(v24 + 4 * (v22 + 1));
          v27 = *(_DWORD *)(v23 + 140);
          if (v27 <= v26)
          {
            if (v27 <= (int)v15 && *((_BYTE *)this + 356) != 0)
            {
              v35 = (v25 & 0xFFFFF) <= 0xFFFF3 ? v25 & 0xFFFFF : v25 & 0xFFFFF | 0xF00000;
              if (v35 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v89);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v35, (DgnString *)&v89, v36, v37, v38, v39, v40);
                v45 = &unk_209A6C820;
                if (v89.i32[2])
                  v45 = (void *)v89.i64[0];
                xprintf("Seed from state %d score %d trace %d, %s\n", v41, v42, v43, v44, v15, *(unsigned int *)(*((_QWORD *)this + 24) + 24 * i), *(unsigned int *)(*((_QWORD *)this + 24) + 24 * i + 8), v45);
                MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((_QWORD *)this + 24) + 24 * i), *(_DWORD *)(*((_QWORD *)this + 24) + 24 * i + 20), *(_DWORD *)(*((_QWORD *)this + 24) + 24 * i + 8), v26);
                DgnString::~DgnString((DgnString *)&v89);
              }
            }
          }
          else
          {
            v28 = (v25 >> 20) & 0x3FF;
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000)
              v29 = 5000;
            else
              v29 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
            v30 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v24 + 4 * v22), *(_DWORD *)(*((_QWORD *)this + 24) + 24 * i) + v28, v29);
            v31 = *((_DWORD *)this + 58);
            if (v30 - v10 <= v31)
            {
              if (v31 > v30)
                *v72 = v30;
              v32 = (__n128 *)(*((_QWORD *)this + 24) + 24 * i);
              v33 = v32[1].n128_u64[0];
              v92 = *v32;
              HIDWORD(v93) = HIDWORD(v33);
              v92.n128_u64[0] = __PAIR64__(v26, v30);
              v92.n128_u16[6] = v25;
              LODWORD(v93) = v33 + v28;
              FstSearchLateLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, &v92);
            }
          }
          v22 += 2;
        }
        while ((v25 & 0x80000000) == 0);
        v11 = *((unsigned int *)this + 50);
      }
    }
    a3 = *v72;
    a5 = v71;
  }
  v91 = a3 + v10;
  if (*((_BYTE *)this + 356))
    MiniFst::updateFrame((char *)this + 240, v72, v10, a2);
  v89 = 0u;
  v90 = 0u;
  SnapTime::recordTime((SnapTime *)&v89, 1, 0, 0, 0);
  v89 = vsubq_s64(v89, v94);
  v90 = vsubq_s64(v90, v95);
  v46 = (int64x2_t *)*((_QWORD *)this + 13);
  v47 = vaddq_s64(v46[1], v90);
  *v46 = vaddq_s64(*v46, v89);
  v46[1] = v47;
  v87 = 0u;
  v88 = 0u;
  SnapTime::recordTime((SnapTime *)&v87, 1, 0, 0, 0);
  FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v91);
  v85 = 0u;
  v86 = 0u;
  SnapTime::recordTime((SnapTime *)&v85, 1, 0, 0, 0);
  v48 = vsubq_s64(v85, v87);
  v49 = (int64x2_t *)*((_QWORD *)this + 13);
  v50 = v49[3];
  v51 = vaddq_s64(v49[2], v48);
  v85 = v48;
  v86 = vsubq_s64(v86, v88);
  v52 = vaddq_s64(v50, v86);
  v49[2] = v51;
  v49[3] = v52;
  v83 = 0u;
  v84 = 0u;
  SnapTime::recordTime((SnapTime *)&v83, 1, 0, 0, 0);
  v53 = *((_QWORD *)this + 24);
  v54 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 24) = v54;
  *((_QWORD *)this + 26) = v53;
  LODWORD(v53) = *((_DWORD *)this + 51);
  v55 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 25) = v55;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v53;
  v56 = *((unsigned int *)this + 6);
  if ((_DWORD)v56 && (_DWORD)v55 && v56 < v55)
    mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(v54, v56, v55);
  v81 = 0u;
  v82 = 0u;
  SnapTime::recordTime((SnapTime *)&v81, 1, 0, 0, 0);
  v57 = vsubq_s64(v81, v83);
  v58 = (int64x2_t *)*((_QWORD *)this + 13);
  v59 = v58[5];
  v60 = vaddq_s64(v58[4], v57);
  v81 = v57;
  v82 = vsubq_s64(v82, v84);
  v61 = vaddq_s64(v59, v82);
  v58[4] = v60;
  v58[5] = v61;
  v79 = 0u;
  v80 = 0u;
  SnapTime::recordTime((SnapTime *)&v79, 1, 0, 0, 0);
  VirtMap::setEmpty(*((_QWORD *)this + 14));
  v77 = 0u;
  v78 = 0u;
  SnapTime::recordTime((SnapTime *)&v77, 1, 0, 0, 0);
  v62 = vsubq_s64(v77, v79);
  v63 = (int64x2_t *)*((_QWORD *)this + 13);
  v64 = v63[9];
  v65 = vaddq_s64(v63[8], v62);
  v77 = v62;
  v78 = vsubq_s64(v78, v80);
  v66 = vaddq_s64(v64, v78);
  v63[8] = v65;
  v63[9] = v66;
  v75 = 0u;
  v76 = 0u;
  SnapTime::recordTime((SnapTime *)&v75, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  v67 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v67;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v67;
    if (*((_DWORD *)a4 + 2) > v67)
      LODWORD(v67) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v67;
  }
  if (*((_BYTE *)this + 356))
    FstSearchLateLatticeHashBackoff::seedFromMiniFst((uint64_t)this, v96);
  if (a5)
    FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, v91, a2, a4);
  *((_DWORD *)this + 56) = a2;
  v73 = 0u;
  v74 = 0u;
  SnapTime::recordTime((SnapTime *)&v73, 1, 0, 0, 0);
  v68 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v68[6], vsubq_s64(v73, v75));
  v70 = vaddq_s64(v68[7], vsubq_s64(v74, v76));
  v68[6] = result;
  v68[7] = v70;
  return result;
}

void sub_20981DE30(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(PelScoreCache *this, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  if (!*((_BYTE *)this + 494))
  {
    v8 = PelScoreCache::computePelScoreNoCache(this, a2);
    return (v8 + a3 - *((_DWORD *)this + 64));
  }
  v7 = *((_QWORD *)this + 8);
  v8 = *(__int16 *)(v7 + 2 * a2);
  if (v8 != 20046)
    return (v8 + a3 - *((_DWORD *)this + 64));
  v9 = a2;
  v10 = *(unsigned __int16 *)(**((_QWORD **)this + 2) + 2 * a2);
  if (v10 == 0xFFFF)
    goto LABEL_20;
  v12 = *(__int16 *)(v7 + 2 * v10);
  if (v12 == 20046)
  {
    if (*((_BYTE *)this + 492))
    {
      v13 = *(unsigned __int16 *)(**((_QWORD **)this + 3) + 2 * v10);
      if (*(_DWORD *)(*((_QWORD *)this + 18) + 4 * v13) == -1)
        PelScoreCache::computeGenScores(this, *(unsigned __int16 *)(**((_QWORD **)this + 3) + 2 * v10));
      v12 = PelScoreCache::computePelScoreFromGenScores(this, v10, v13);
    }
    else
    {
      v12 = PelScoreCache::computePelScore(this, *(unsigned __int16 *)(**((_QWORD **)this + 2) + 2 * a2));
    }
  }
  result = (a3 - *((_DWORD *)this + 64) + v12);
  if ((int)result < a4)
  {
LABEL_20:
    if (*((_BYTE *)this + 492))
    {
      v15 = *(unsigned __int16 *)(**((_QWORD **)this + 3) + 2 * a2);
      if (*(_DWORD *)(*((_QWORD *)this + 18) + 4 * v15) == -1)
        PelScoreCache::computeGenScores(this, *(unsigned __int16 *)(**((_QWORD **)this + 3) + 2 * v9));
      v8 = PelScoreCache::computePelScoreFromGenScores(this, a2, v15);
    }
    else
    {
      v8 = PelScoreCache::computePelScore(this, a2);
    }
    return (v8 + a3 - *((_DWORD *)this + 64));
  }
  return result;
}

__n128 FstSearchLateLatticeHashBackoff::maybeInsertHashedToken(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  __n128 result;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  __n128 *v22;
  unsigned int v23;
  __n128 *v24;

  v4 = a2->n128_u32[1];
  v5 = v4 >> 6;
  v6 = v4 & 0x3F;
  v7 = *(uint64_t **)(a1 + 112);
  v8 = v7[2];
  v9 = *(uint64_t **)(v8 + 8 * v5);
  if (!v9)
  {
    v10 = *((unsigned int *)v7 + 12);
    v11 = *((unsigned int *)v7 + 13);
    v12 = *v7;
    if (v10 >= v11)
    {
      v13 = v12 + 16 * v11;
      v15 = *(_DWORD *)(v13 + 8);
      v14 = (_DWORD *)(v13 + 8);
      if (!v15)
      {
        *(_QWORD *)(v12 + 16 * v11) = MemChunkAlloc(0x100uLL, 0);
        *v14 = 64;
        v12 = *v7;
        v8 = v7[2];
        LODWORD(v10) = *((_DWORD *)v7 + 12);
        v11 = *((unsigned int *)v7 + 13);
      }
      *(_QWORD *)(v8 + 8 * v5) = v12 + 16 * v11;
      *((_DWORD *)v7 + 13) = v11 + 1;
    }
    else
    {
      *(_QWORD *)(v8 + 8 * v5) = v12 + 16 * v10;
    }
    *((_DWORD *)v7 + 12) = v10 + 1;
    v16 = *(_QWORD *)(v7[2] + 8 * v5);
    memset(*(void **)v16, 255, 4 * *(unsigned int *)(v16 + 8));
    v18 = *((_DWORD *)v7 + 10);
    if (v18 == *((_DWORD *)v7 + 11))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v7 + 4), 1, 1);
      v18 = *((_DWORD *)v7 + 10);
    }
    *(_DWORD *)(v7[4] + 4 * v18) = v5;
    ++*((_DWORD *)v7 + 10);
    v9 = *(uint64_t **)(v7[2] + 8 * v5);
  }
  v19 = *v9;
  v20 = *(_DWORD *)(v19 + 4 * v6);
  v21 = (_QWORD *)(a1 + 208);
  if (v20 == -1)
  {
    *(_DWORD *)(v19 + 4 * v6) = *(_DWORD *)(a1 + 216);
    v23 = *(_DWORD *)(a1 + 216);
    if (v23 == *(_DWORD *)(a1 + 220))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)v21, 1, 1);
      v23 = *(_DWORD *)(a1 + 216);
    }
    v24 = (__n128 *)(*(_QWORD *)(a1 + 208) + 24 * v23);
    result = *a2;
    v24[1].n128_u64[0] = a2[1].n128_u64[0];
    *v24 = result;
    ++*(_DWORD *)(a1 + 216);
  }
  else
  {
    v22 = (__n128 *)(*v21 + 24 * v20);
    if ((signed __int32)v22->n128_u32[0] > (signed __int32)a2->n128_u32[0])
    {
      result = *a2;
      v22[1].n128_u64[0] = a2[1].n128_u64[0];
      *v22 = result;
    }
  }
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(unsigned int *)(this + 216);
  if (v4 > a2)
  {
    v6 = this;
    v7 = (_QWORD *)(this + 208);
    v8 = a2;
    this = mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(*(_QWORD *)(this + 208), a2, v4);
    v9 = *(_DWORD *)(*v7 + 24 * a2);
    if (*a3 > v9)
      *a3 = v9;
    v10 = *(_DWORD *)(v6 + 220);
    if (a2 > v10)
      this = DgnArray<CWIDAC>::reallocElts((uint64_t)v7, a2 - v10, 0);
    v11 = *(unsigned int *)(v6 + 216);
    if (v11 < a2)
    {
      v12 = v8 - v11;
      v13 = (_QWORD *)(*v7 + 24 * v11 + 16);
      do
      {
        *(v13 - 2) = 0xFFFFFFFF00000000;
        *((_DWORD *)v13 - 2) = -1;
        *((_WORD *)v13 - 2) = -2;
        *v13 = 0;
        v13 += 3;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 216) = a2;
  }
  return this;
}

uint64_t mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  if (a3 >= 2)
  {
    v3 = 0;
    do
    {
      v4 = (_DWORD *)(result + 24 * v3);
      v5 = 0;
      if ((result & 7) != 0)
      {
        v6 = &v4[6 * (a3 >> 1)];
        do
        {
          v7 = *((_BYTE *)v4 + v5);
          *((_BYTE *)v4 + v5) = *((_BYTE *)v6 + v5);
          *((_BYTE *)v6 + v5++) = v7;
        }
        while (v5 != 24);
      }
      else
      {
        v8 = result + 24 * (v3 + (a3 >> 1));
        do
        {
          v9 = *(_QWORD *)((char *)v4 + v5);
          *(_QWORD *)((char *)v4 + v5) = *(_QWORD *)(v8 + v5);
          *(_QWORD *)(v8 + v5) = v9;
          v5 += 8;
        }
        while (v5 != 24);
      }
      v10 = (_DWORD *)(result + 24 * (v3 + a3) - 24);
      v11 = (_DWORD *)(result + 24 * v3);
      do
      {
        v12 = v11 + 6;
        while (1)
        {
          v11 = v12;
          if (v12 >= v10)
            break;
          v12 += 6;
          if (*v11 > *v4)
          {
            v13 = (char *)v11;
            while (*v10 >= *v4)
            {
              v10 -= 6;
              if (v11 >= v10)
                goto LABEL_22;
            }
            v14 = 0;
            if ((result & 7) != 0)
            {
              do
              {
                v15 = *v13;
                *v13++ = *((_BYTE *)v10 + v14);
                *((_BYTE *)v10 + v14++) = v15;
              }
              while (v14 != 24);
            }
            else
            {
              do
              {
                v16 = *(_QWORD *)v13;
                *(_QWORD *)v13 = *(_QWORD *)((char *)v10 + v14);
                v13 += 8;
                *(_QWORD *)((char *)v10 + v14) = v16;
                v14 += 8;
              }
              while (v14 != 24);
            }
            v10 -= 6;
            break;
          }
        }
LABEL_22:
        ;
      }
      while (v11 < v10);
      if (*v11 > *v4)
        v11 -= 6;
      if (v11 > v4)
      {
        v17 = 0;
        if ((result & 7) != 0)
        {
          do
          {
            v18 = *((_BYTE *)v11 + v17);
            *((_BYTE *)v11 + v17) = *((_BYTE *)v4 + v17);
            *((_BYTE *)v4 + v17++) = v18;
          }
          while (v17 != 24);
        }
        else
        {
          do
          {
            v19 = *(_QWORD *)((char *)v11 + v17);
            *(_QWORD *)((char *)v11 + v17) = *(_QWORD *)((char *)v4 + v17);
            *(_QWORD *)((char *)v4 + v17) = v19;
            v17 += 8;
          }
          while (v17 != 24);
        }
      }
      v20 = ((char *)v11 - (char *)v4) / 0x18uLL;
      if (v20 <= a2)
      {
        if (v20 >= a2)
          return result;
        v21 = v20 + 1;
        v3 += v21;
        a2 -= v21;
        v20 = a3 - v21;
      }
      a3 = v20;
    }
    while (v20 > 1);
  }
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[2];

  if (*(_BYTE *)(this + 356))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      v22 = this + 192;
      v23 = (_QWORD *)(this + 160);
      do
      {
        v6 = (int *)(*(_QWORD *)(v2 + 256) + v4);
        v7 = *v6;
        v9 = v6[4];
        v8 = v6[5];
        v10 = v6[6];
        v11 = v6[7];
        v12 = v6[2];
        v25[0] = 0;
        v25[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v13 = -2 - v12;
        if (v11 == 16777213)
        {
          v11 = 16777209;
          if (*(_DWORD *)(*v23 + 36 * v13) == 16777209)
            v13 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 16 * *(unsigned int *)(*v23 + 36 * v13 + 8) + 12);
        }
        v14 = *a2;
        v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v23, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        v16 = *(_QWORD *)(v2 + 160);
        v17 = v16 + 36 * v15;
        *(_DWORD *)v17 = v11;
        *(_DWORD *)(v17 + 4) = v14;
        *(_QWORD *)(v17 + 8) = 0xFFFFFFFFLL;
        *(_DWORD *)(v17 + 16) = v7;
        *(_DWORD *)(v17 + 20) = v13;
        *(_DWORD *)(v17 + 24) = v9;
        *(_DWORD *)(v17 + 28) = v8;
        *(_WORD *)(v17 + 32) = -2;
        v18 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v18 + 1;
        *(_DWORD *)(v16 + 36 * v18 + 12) = 1;
        v19 = *(unsigned int *)(v2 + 200);
        if (v19 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<CWIDAC>::reallocElts(v22, 1, 1);
          LODWORD(v19) = *(_DWORD *)(v2 + 200);
        }
        v20 = *(_QWORD *)(v2 + 192) + 24 * v19;
        *(_DWORD *)v20 = v7;
        *(_DWORD *)(v20 + 4) = v10;
        *(_DWORD *)(v20 + 8) = v18;
        *(_WORD *)(v20 + 12) = -2;
        *(_DWORD *)(v20 + 16) = v9;
        *(_DWORD *)(v20 + 20) = v8;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
        ++v5;
        v21 = *(_DWORD *)(v2 + 264);
        if (v21 >= *(_DWORD *)(v2 + 20))
          v21 = *(_DWORD *)(v2 + 20);
        v4 += 36;
      }
      while (v5 < v21);
    }
  }
  return this;
}

void sub_20981E5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLatticeHashBackoff::propagateNulls(uint64_t this, int a2, int a3, SearchStats *a4)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  unsigned int v46;
  unint64_t v47;
  _QWORD *v48;
  int v49;
  SearchStats *v50;
  uint64_t v51;
  int v52;
  int v54;
  int v55;
  uint64_t v56;
  __int16 v57;
  __int16 v58;
  unsigned int v59;
  unsigned int v60;

  v4 = this;
  v5 = *(_DWORD *)(this + 168);
  v6 = (uint64_t *)(this + 192);
  v7 = *(_DWORD *)(this + 200);
  v56 = this + 192;
  if (v7)
  {
    v49 = *(_DWORD *)(this + 168);
    v8 = 0;
    v50 = a4;
    v51 = this + 160;
    v54 = a2;
    do
    {
      v9 = *(unsigned int *)(*(_QWORD *)(v4 + 192) + 24 * v8 + 4);
      v10 = *(_QWORD *)(v4 + 40);
      if (*(_DWORD *)(v10 + 160) != (_DWORD)v9
        && (*(_DWORD *)(v10 + 140) <= (int)v9 || (*(_DWORD *)(*(_QWORD *)(v10 + 152) + 4 * v9) & 0x40000000) != 0))
      {
        v11 = *(_DWORD *)(*(_QWORD *)(v4 + 192) + 24 * v8 + 4);
        do
        {
          v12 = *(_QWORD *)(v4 + 40);
          v13 = *(_QWORD *)(v12 + 152);
          v14 = *(_DWORD *)(v13 + 4 * v11);
          v15 = *(_DWORD *)(v13 + 4 * (v11 + 1));
          v16 = *(_DWORD *)(v12 + 140);
          if (v16 <= v15)
          {
            v17 = (v14 & 0xFFFFF) <= 0xFFFF3 ? v14 & 0xFFFFF : v14 & 0xFFFFF | 0xF00000;
            if (v16 > (int)v9 || v17 == 16777210)
            {
              v19 = (v14 >> 20) & 0x3FF;
              v20 = *v6;
              v21 = *v6 + 24 * v8;
              v22 = *(_DWORD *)v21 + v19;
              if (v22 <= a2)
              {
                v23 = *(_DWORD *)(v21 + 8);
                this = *(unsigned __int16 *)(v21 + 12);
                v24 = *(_WORD *)(v21 + 14);
                v25 = *(_DWORD *)(v21 + 20);
                v26 = *(_DWORD *)(v21 + 16) + v19;
                if (v17 == 16777210)
                {
                  if (v7 == *(_DWORD *)(v4 + 204))
                  {
                    v57 = *(_WORD *)(v21 + 14);
                    v59 = *(unsigned __int16 *)(v21 + 12);
                    v27 = *(_DWORD *)(v21 + 8);
                    DgnArray<CWIDAC>::reallocElts(v56, 1, 1);
                    v23 = v27;
                    v24 = v57;
                    this = v59;
                    a2 = v54;
                    v6 = (uint64_t *)v56;
                    v7 = *(_DWORD *)(v4 + 200);
                    v20 = *(_QWORD *)(v4 + 192);
                  }
                  v28 = v20 + 24 * v7;
                  *(_DWORD *)v28 = v22;
                }
                else
                {
                  v29 = v22 - v26;
                  if (v17 == 16777214)
                  {
                    v30 = 0;
                  }
                  else
                  {
                    v29 = *(_DWORD *)v21 + v19;
                    v30 = *(_DWORD *)(v21 + 16) + v19;
                  }
                  if (v17 == 16777214)
                    v31 = *(_DWORD *)(v21 + 16) + v19;
                  else
                    v31 = 0;
                  if (v17 == 16777209)
                    v32 = v22;
                  else
                    v32 = v29;
                  if (v17 == 16777209)
                    v33 = v26;
                  else
                    v33 = v30;
                  if (v17 == 16777209)
                    v31 = 0;
                  else
                    v25 = v17 + 2 * v25 + 1;
                  v34 = *(unsigned int *)(v4 + 168);
                  v58 = v24;
                  v60 = this;
                  v55 = v31;
                  if (v34 == *(_DWORD *)(v4 + 172))
                  {
                    v35 = v23;
                    v52 = v32;
                    DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(v51, 1, 1);
                    a2 = v54;
                    v31 = v55;
                    v32 = v52;
                    v23 = v35;
                    v24 = v58;
                    this = v60;
                    v6 = (uint64_t *)v56;
                    LODWORD(v34) = *(_DWORD *)(v4 + 168);
                  }
                  v36 = *(_QWORD *)(v4 + 160) + 36 * v34;
                  *(_DWORD *)v36 = v17;
                  *(_DWORD *)(v36 + 4) = a3;
                  *(_QWORD *)(v36 + 8) = 0xFFFFFFFFLL;
                  *(_DWORD *)(v36 + 16) = v32;
                  *(_DWORD *)(v36 + 20) = v23;
                  *(_DWORD *)(v36 + 24) = v33;
                  *(_DWORD *)(v36 + 28) = v25;
                  *(_WORD *)(v36 + 32) = this;
                  v23 = *(_DWORD *)(v4 + 168);
                  *(_DWORD *)(v4 + 168) = v23 + 1;
                  v37 = *(unsigned int *)(v4 + 200);
                  if (v37 == *(_DWORD *)(v4 + 204))
                  {
                    v38 = v23;
                    v39 = v32;
                    DgnArray<CWIDAC>::reallocElts(v56, 1, 1);
                    a2 = v54;
                    v31 = v55;
                    v32 = v39;
                    v23 = v38;
                    v24 = v58;
                    this = v60;
                    v6 = (uint64_t *)v56;
                    LODWORD(v37) = *(_DWORD *)(v4 + 200);
                  }
                  v26 = v31 + v33;
                  v28 = *v6 + 24 * v37;
                  *(_DWORD *)v28 = v31 + v32;
                }
                *(_DWORD *)(v28 + 4) = v15;
                *(_DWORD *)(v28 + 8) = v23;
                *(_WORD *)(v28 + 12) = this;
                *(_WORD *)(v28 + 14) = v24;
                *(_DWORD *)(v28 + 16) = v26;
                *(_DWORD *)(v28 + 20) = v25;
                v7 = *(_DWORD *)(v4 + 200) + 1;
                *(_DWORD *)(v4 + 200) = v7;
              }
            }
          }
          v11 += 2;
        }
        while ((v14 & 0x80000000) == 0);
      }
      ++v8;
    }
    while (v8 < v7);
    v40 = *(_DWORD *)(v4 + 152);
    if (v7 > v40)
    {
      this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*(_QWORD *)(v4 + 192) + 24 * v40), v7 - v40, 24);
      v6 = (uint64_t *)v56;
      v40 = *(_DWORD *)(v4 + 152);
      v7 = *(_DWORD *)(v4 + 200);
    }
    a4 = v50;
    v5 = v49;
    if (v40 < v7)
    {
      v41 = v40;
      v42 = 24 * v40;
      do
      {
        v43 = *v6 + v42;
        if (*(_DWORD *)(v43 + 4) != *(_DWORD *)(*v6 + 24 * (v41 - 1) + 4))
        {
          v44 = *v6 + 24 * v40;
          v45 = *(_OWORD *)v43;
          *(_QWORD *)(v44 + 16) = *(_QWORD *)(v43 + 16);
          *(_OWORD *)v44 = v45;
          ++v40;
          v7 = *(_DWORD *)(v4 + 200);
        }
        ++v41;
        v42 += 24;
      }
      while (v41 < v7);
    }
    if (v50)
      goto LABEL_52;
  }
  else
  {
    v40 = *(_DWORD *)(this + 152);
    if (a4)
LABEL_52:
      *((_DWORD *)a4 + 1) += *(_DWORD *)(v4 + 168) - v5;
  }
  v46 = *(_DWORD *)(v4 + 204);
  if (v40 > v46)
  {
    this = DgnArray<CWIDAC>::reallocElts(v56, v40 - v46, 0);
    v6 = (uint64_t *)v56;
    v7 = *(_DWORD *)(v4 + 200);
  }
  if (v7 < v40)
  {
    v47 = v40 - (unint64_t)v7;
    v48 = (_QWORD *)(*v6 + 24 * v7 + 16);
    do
    {
      *(v48 - 2) = 0xFFFFFFFF00000000;
      *((_DWORD *)v48 - 2) = -1;
      *((_WORD *)v48 - 2) = -2;
      *v48 = 0;
      v48 += 3;
      --v47;
    }
    while (v47);
  }
  *(_DWORD *)(v4 + 200) = v40;
  return this;
}

char *mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(char *result, unint64_t a2, int64_t a3)
{
  int64_t v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  char *v8;
  char *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int64_t v34;
  char *v35;
  char v36;
  int v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char v68;
  BOOL v69;
  int64_t v70;
  int64_t v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  int64_t v75;
  char v76;
  char *v77;
  int v78;
  char *v79;
  char *v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  char *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;

  v4 = -a3;
  v5 = a3 != 8;
  v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v7 = 2;
  else
    v7 = a3 != 8;
  if (a2 < 7)
  {
LABEL_5:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v8 = &result[a2 * a3];
      v9 = &result[a3];
      v10 = result;
      do
      {
        if (v9 > result)
        {
          v11 = v10;
          v12 = v9;
          do
          {
            v13 = v12;
            v12 = (_DWORD *)((char *)v12 + v4);
            v14 = v12[1];
            v15 = v13[1];
            if (v14 == v15)
            {
              if (*v13 >= *v12)
                break;
            }
            else if (v14 < v15)
            {
              break;
            }
            if (v7)
            {
              v16 = 0;
              v17 = (uint64_t)v11 + a3;
              if (v6)
              {
                do
                {
                  v18 = *(_QWORD *)(v17 + 8 * v16);
                  *(_QWORD *)(v17 + 8 * v16) = *(_QWORD *)&v11[2 * v16];
                  *(_QWORD *)&v11[2 * v16++] = v18;
                }
                while ((unint64_t)a3 >> 3 != v16);
              }
              else
              {
                do
                {
                  v19 = *(_BYTE *)(v17 + v16);
                  *(_BYTE *)(v17 + v16) = *((_BYTE *)v11 + v16);
                  *((_BYTE *)v11 + v16++) = v19;
                }
                while (a3 != v16);
              }
            }
            else
            {
              v20 = *(_QWORD *)v13;
              *(_QWORD *)v13 = *(_QWORD *)v12;
              *(_QWORD *)v12 = v20;
            }
            v11 = (_DWORD *)((char *)v11 + v4);
          }
          while (v12 > (_DWORD *)result);
        }
        v9 += a3;
        v10 = (_DWORD *)((char *)v10 + a3);
      }
      while (v9 < v8);
    }
    return result;
  }
  v21 = (unint64_t)a3 >> 3;
  while (2)
  {
    v22 = &result[(a2 >> 1) * a3];
    if (a2 == 7)
      goto LABEL_25;
    v26 = &result[(a2 - 1) * a3];
    if (a2 < 0x29)
    {
      v28 = result;
      goto LABEL_110;
    }
    v27 = (a2 >> 3) * a3;
    v28 = &result[v27];
    v29 = &result[2 * v27];
    v30 = *((_DWORD *)result + 1);
    v31 = *(_DWORD *)&result[v27 + 4];
    if (v30 == v31)
    {
      if (*(_DWORD *)v28 <= *(_DWORD *)result)
        goto LABEL_33;
    }
    else if (v30 >= v31)
    {
LABEL_33:
      v32 = *((_DWORD *)v29 + 1);
      if (v31 == v32)
      {
        if (*(_DWORD *)v29 < *(_DWORD *)v28)
          goto LABEL_129;
      }
      else if (v31 >= v32)
      {
        goto LABEL_129;
      }
      if (v30 == v32)
      {
        if (*(_DWORD *)result != *(_DWORD *)v29)
        {
          v28 = result;
          if (*(_DWORD *)v29 > *(_DWORD *)result)
            goto LABEL_129;
        }
      }
      else
      {
        v28 = result;
        if (v30 < v32)
          goto LABEL_129;
      }
      v28 = &result[2 * v27];
      goto LABEL_129;
    }
    v78 = *((_DWORD *)v29 + 1);
    if (v31 == v78)
    {
      if (*(_DWORD *)v29 > *(_DWORD *)v28)
        goto LABEL_129;
    }
    else if (v31 < v78)
    {
      goto LABEL_129;
    }
    if (v30 != v78)
    {
      v28 = &result[2 * v27];
      if (v30 < v78)
        goto LABEL_129;
      goto LABEL_128;
    }
    v28 = result;
    if (*(_DWORD *)result != *(_DWORD *)v29)
    {
      v28 = &result[2 * v27];
      if (*(_DWORD *)v29 <= *(_DWORD *)result)
LABEL_128:
        v28 = result;
    }
LABEL_129:
    v79 = &v22[-v27];
    v80 = &v22[v27];
    v81 = *(_DWORD *)&v22[-v27 + 4];
    v82 = *((_DWORD *)v22 + 1);
    if (v81 == v82)
    {
      if (*(_DWORD *)v22 <= *(_DWORD *)v79)
        goto LABEL_131;
    }
    else if (v81 >= v82)
    {
LABEL_131:
      v83 = *((_DWORD *)v80 + 1);
      if (v82 == v83)
      {
        if (*(_DWORD *)v80 < *(_DWORD *)v22)
          goto LABEL_152;
      }
      else if (v82 >= v83)
      {
        goto LABEL_152;
      }
      if (v81 == v83)
      {
        if (*(_DWORD *)v79 != *(_DWORD *)v80)
        {
          v22 -= v27;
          if (*(_DWORD *)v80 > *(_DWORD *)v79)
            goto LABEL_152;
        }
      }
      else
      {
        v22 -= v27;
        if (v81 < v83)
          goto LABEL_152;
      }
      v22 = v80;
      goto LABEL_152;
    }
    v84 = *((_DWORD *)v80 + 1);
    if (v82 == v84)
    {
      if (*(_DWORD *)v80 > *(_DWORD *)v22)
        goto LABEL_152;
    }
    else if (v82 < v84)
    {
      goto LABEL_152;
    }
    if (v81 != v84)
    {
      v22 += v27;
      if (v81 < v84)
        goto LABEL_152;
      goto LABEL_151;
    }
    if (*(_DWORD *)v79 == *(_DWORD *)v80 || (v22 += v27, *(_DWORD *)v80 <= *(_DWORD *)v79))
LABEL_151:
      v22 = v79;
LABEL_152:
    v85 = -(uint64_t)v27;
    v77 = &v26[-2 * v27];
    v86 = &v26[v85];
    v87 = *((_DWORD *)v77 + 1);
    v88 = *((_DWORD *)v86 + 1);
    if (v87 == v88)
    {
      if (*(_DWORD *)v86 <= *(_DWORD *)v77)
      {
LABEL_154:
        v89 = *((_DWORD *)v26 + 1);
        if (v88 == v89)
        {
          if (*(_DWORD *)v26 < *(_DWORD *)v86)
            goto LABEL_167;
LABEL_162:
          if (v87 == v89)
          {
            if (*(_DWORD *)v77 != *(_DWORD *)v26 && *(_DWORD *)v26 > *(_DWORD *)v77)
              goto LABEL_168;
          }
          else if (v87 < v89)
          {
            goto LABEL_168;
          }
LABEL_110:
          v77 = &result[(a2 - 1) * a3];
          goto LABEL_168;
        }
        if (v88 < v89)
          goto LABEL_162;
LABEL_167:
        v77 = v86;
        goto LABEL_168;
      }
    }
    else if (v87 >= v88)
    {
      goto LABEL_154;
    }
    v90 = *((_DWORD *)v26 + 1);
    if (v88 == v90)
    {
      if (*(_DWORD *)v26 > *(_DWORD *)v86)
        goto LABEL_167;
    }
    else if (v88 < v90)
    {
      goto LABEL_167;
    }
    if (v87 != v90)
    {
      if (v87 >= v90)
        goto LABEL_168;
      goto LABEL_110;
    }
    if (*(_DWORD *)v77 != *(_DWORD *)v26 && *(_DWORD *)v26 > *(_DWORD *)v77)
      goto LABEL_110;
LABEL_168:
    v91 = *((_DWORD *)v28 + 1);
    v92 = *((_DWORD *)v22 + 1);
    if (v91 != v92)
    {
      if (v91 >= v92)
        goto LABEL_170;
LABEL_174:
      v94 = *((_DWORD *)v77 + 1);
      if (v92 == v94)
      {
        if (*(_DWORD *)v77 > *(_DWORD *)v22)
          goto LABEL_25;
      }
      else if (v92 < v94)
      {
        goto LABEL_25;
      }
      if (v91 == v94)
      {
        if (*(_DWORD *)v28 != *(_DWORD *)v77)
        {
          v22 = v77;
          if (*(_DWORD *)v77 > *(_DWORD *)v28)
            goto LABEL_25;
        }
      }
      else
      {
        v22 = v77;
        if (v91 < v94)
          goto LABEL_25;
      }
      v22 = v28;
      goto LABEL_25;
    }
    if (*(_DWORD *)v22 > *(_DWORD *)v28)
      goto LABEL_174;
LABEL_170:
    v93 = *((_DWORD *)v77 + 1);
    if (v92 == v93)
    {
      if (*(_DWORD *)v77 < *(_DWORD *)v22)
        goto LABEL_25;
    }
    else if (v92 >= v93)
    {
      goto LABEL_25;
    }
    if (v91 == v93)
    {
      if (*(_DWORD *)v28 == *(_DWORD *)v77)
        goto LABEL_192;
      v22 = v28;
      if (*(_DWORD *)v77 <= *(_DWORD *)v28)
        goto LABEL_192;
    }
    else
    {
      v22 = v28;
      if (v91 >= v93)
LABEL_192:
        v22 = v77;
    }
LABEL_25:
    if (v7)
    {
      if (v6)
      {
        v23 = result;
        v24 = (unint64_t)a3 >> 3;
        do
        {
          v25 = *(_QWORD *)v23;
          *(_QWORD *)v23 = *(_QWORD *)v22;
          v23 += 8;
          *(_QWORD *)v22 = v25;
          v22 += 8;
          --v24;
        }
        while (v24);
      }
      else
      {
        v34 = a3;
        v35 = result;
        do
        {
          v36 = *v35;
          *v35++ = *v22;
          *v22++ = v36;
          --v34;
        }
        while (v34);
      }
    }
    else
    {
      v33 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)v22;
      *(_QWORD *)v22 = v33;
    }
    v37 = 0;
    v38 = &result[a3];
    v39 = &result[(a2 - 1) * a3];
    v40 = v39;
    v41 = &result[a3];
    v42 = &result[a3];
    while (1)
    {
LABEL_40:
      if (v41 > v40)
        goto LABEL_56;
      v43 = *((_DWORD *)v41 + 1);
      v44 = *((_DWORD *)result + 1);
      if (v43 == v44)
        break;
      if (v43 >= v44)
        goto LABEL_56;
LABEL_76:
      v41 += a3;
    }
    if (*(_DWORD *)v41 == *(_DWORD *)result)
    {
      if (v7)
      {
        v45 = 0;
        if (v6)
        {
          do
          {
            v46 = *(_QWORD *)&v42[8 * v45];
            *(_QWORD *)&v42[8 * v45] = *(_QWORD *)&v41[8 * v45];
            *(_QWORD *)&v41[8 * v45++] = v46;
          }
          while (v21 != v45);
        }
        else
        {
          do
          {
            v47 = v42[v45];
            v42[v45] = v41[v45];
            v41[v45++] = v47;
          }
          while (a3 != v45);
        }
      }
      else
      {
        v57 = *(_QWORD *)v42;
        *(_QWORD *)v42 = *(_QWORD *)v41;
        *(_QWORD *)v41 = v57;
      }
      v42 += a3;
      v37 = 1;
      goto LABEL_76;
    }
    if (*(_DWORD *)result > *(_DWORD *)v41)
      goto LABEL_76;
LABEL_56:
    while (v41 <= v40)
    {
      v49 = *((_DWORD *)v40 + 1);
      v50 = *((_DWORD *)result + 1);
      if (v49 == v50)
      {
        if (*(_DWORD *)v40 == *(_DWORD *)result)
        {
          if (v7)
          {
            v51 = 0;
            if (v6)
            {
              do
              {
                v52 = *(_QWORD *)&v40[8 * v51];
                *(_QWORD *)&v40[8 * v51] = *(_QWORD *)&v39[8 * v51];
                *(_QWORD *)&v39[8 * v51++] = v52;
              }
              while (v21 != v51);
            }
            else
            {
              do
              {
                v53 = v40[v51];
                v40[v51] = v39[v51];
                v39[v51++] = v53;
              }
              while (a3 != v51);
            }
          }
          else
          {
            v48 = *(_QWORD *)v40;
            *(_QWORD *)v40 = *(_QWORD *)v39;
            *(_QWORD *)v39 = v48;
          }
          v39 += v4;
          v37 = 1;
        }
        else if (*(_DWORD *)result > *(_DWORD *)v40)
        {
LABEL_68:
          if (v7)
          {
            v54 = 0;
            if (v6)
            {
              do
              {
                v55 = *(_QWORD *)&v41[8 * v54];
                *(_QWORD *)&v41[8 * v54] = *(_QWORD *)&v40[8 * v54];
                *(_QWORD *)&v40[8 * v54++] = v55;
              }
              while (v21 != v54);
            }
            else
            {
              do
              {
                v56 = v41[v54];
                v41[v54] = v40[v54];
                v40[v54++] = v56;
              }
              while (a3 != v54);
            }
          }
          else
          {
            v58 = *(_QWORD *)v41;
            *(_QWORD *)v41 = *(_QWORD *)v40;
            *(_QWORD *)v40 = v58;
          }
          v41 += a3;
          v40 += v4;
          v37 = 1;
          goto LABEL_40;
        }
      }
      else if (v49 < v50)
      {
        goto LABEL_68;
      }
      v40 += v4;
    }
    v59 = &result[a2 * a3];
    if (v37)
    {
      v60 = v41 - v42;
      if (v42 - result >= v41 - v42)
        v61 = v41 - v42;
      else
        v61 = v42 - result;
      if (v61)
      {
        if (v6)
        {
          v62 = &v41[-v61];
          v63 = v61 >> 3;
          v64 = result;
          do
          {
            v65 = *(_QWORD *)v64;
            *(_QWORD *)v64 = *(_QWORD *)v62;
            v64 += 8;
            *(_QWORD *)v62 = v65;
            v62 += 8;
            --v63;
          }
          while (v63);
        }
        else
        {
          v66 = -(uint64_t)v61;
          v67 = result;
          do
          {
            v68 = *v67;
            *v67++ = v41[v66];
            v41[v66] = v68;
            v69 = __CFADD__(v66++, 1);
          }
          while (!v69);
        }
      }
      v70 = v39 - v40;
      v71 = v59 - &v39[a3];
      if (v39 - v40 < v71)
        v71 = v39 - v40;
      if (v71)
      {
        if (v6)
        {
          v72 = &v59[-v71];
          v73 = (unint64_t)v71 >> 3;
          do
          {
            v74 = *(_QWORD *)v41;
            *(_QWORD *)v41 = *(_QWORD *)v72;
            v41 += 8;
            *(_QWORD *)v72 = v74;
            v72 += 8;
            --v73;
          }
          while (v73);
        }
        else
        {
          v75 = -v71;
          do
          {
            v76 = *v41;
            *v41++ = v59[v75];
            v59[v75] = v76;
            v69 = __CFADD__(v75++, 1);
          }
          while (!v69);
        }
      }
      if (v60 > a3)
        result = (char *)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>();
      if (v70 > a3)
      {
        result = &v59[-v70];
        a2 = v70 / (unint64_t)a3;
        v6 = ((((_BYTE)v59 - v70) | a3) & 7) == 0;
        if (((((_BYTE)v59 - v70) | a3) & 7) != 0)
          v7 = 2;
        else
          v7 = v5;
        if (a2 < 7)
          goto LABEL_5;
        continue;
      }
    }
    else if ((uint64_t)(a2 * a3) > a3)
    {
      v95 = result;
      do
      {
        if (v38 > result)
        {
          v96 = v95;
          v97 = v38;
          do
          {
            v98 = v97;
            v97 = (_DWORD *)((char *)v97 + v4);
            v99 = v97[1];
            v100 = v98[1];
            if (v99 == v100)
            {
              if (*v98 >= *v97)
                break;
            }
            else if (v99 < v100)
            {
              break;
            }
            if (v7)
            {
              v101 = 0;
              v102 = (uint64_t)v96 + a3;
              if (v6)
              {
                do
                {
                  v103 = *(_QWORD *)(v102 + 8 * v101);
                  *(_QWORD *)(v102 + 8 * v101) = *(_QWORD *)&v96[2 * v101];
                  *(_QWORD *)&v96[2 * v101++] = v103;
                }
                while (v21 != v101);
              }
              else
              {
                do
                {
                  v104 = *(_BYTE *)(v102 + v101);
                  *(_BYTE *)(v102 + v101) = *((_BYTE *)v96 + v101);
                  *((_BYTE *)v96 + v101++) = v104;
                }
                while (a3 != v101);
              }
            }
            else
            {
              v105 = *(_QWORD *)v98;
              *(_QWORD *)v98 = *(_QWORD *)v97;
              *(_QWORD *)v97 = v105;
            }
            v96 = (_DWORD *)((char *)v96 + v4);
          }
          while (v97 > (_DWORD *)result);
        }
        v38 += a3;
        v95 = (_DWORD *)((char *)v95 + a3);
      }
      while (v38 < v59);
    }
    return result;
  }
}

uint64_t FstSearchLateLatticeHashBackoff::getTraceTimeBoundaries(uint64_t result, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *(_DWORD *)(result + 168);
  if (!v5)
  {
    v14 = 0;
    LODWORD(v10) = 0;
    *(_DWORD *)(a3 + 8) = 0;
    v11 = *a2;
    v12 = *(_QWORD *)a3;
LABEL_23:
    v17 = 1879048192;
    goto LABEL_24;
  }
  v6 = result;
  v7 = *(_DWORD *)(*(_QWORD *)(result + 160) + 36 * (v5 - 1) + 4) + 1;
  if (*(_DWORD *)(*(_QWORD *)(result + 160) + 36 * (v5 - 1) + 4) != -1 && *((_DWORD *)a2 + 2) == 0)
  {
    result = (uint64_t)MemChunkAlloc(4* (*(_DWORD *)(*(_QWORD *)(result + 160) + 36 * (v5 - 1) + 4) + 1), 0);
    *a2 = result;
    *((_DWORD *)a2 + 2) = v7;
  }
  v9 = *(_DWORD *)(a3 + 12);
  if (v7 > v9)
    result = DgnPrimArray<unsigned int>::reallocElts(a3, v7 - v9, 0);
  v10 = *(unsigned int *)(v6 + 168);
  *(_DWORD *)(a3 + 8) = v7;
  v11 = *a2;
  v12 = *(_QWORD *)a3;
  if (!(_DWORD)v10)
  {
    v14 = 0;
    LODWORD(v10) = 0;
    goto LABEL_23;
  }
  v13 = 0;
  v14 = 0;
  v15 = *(_QWORD *)(v6 + 160);
  v16 = *(_QWORD *)(v6 + 176);
  v17 = 1879048192;
  do
  {
    v18 = v15 + 36 * v13;
    v19 = *(_DWORD *)(v18 + 4);
    v20 = *(unsigned int *)(v18 + 8);
    result = v18 + 4;
    v21 = *(_DWORD *)(v16 + 16 * v20);
    if (v14 == v19)
    {
      if (v17 >= v21)
        v17 = v21;
    }
    else
    {
      if ((int)v14 < v19)
      {
        do
        {
          *(_DWORD *)(v12 + 4 * v14) = v17;
          *(_DWORD *)(v11 + 4 * v14++) = v13;
          v17 = 1879048192;
        }
        while ((signed int)v14 < *(_DWORD *)result);
        v10 = *(unsigned int *)(v6 + 168);
      }
      v17 = v21;
    }
    ++v13;
  }
  while (v13 < v10);
  v12 = *(_QWORD *)a3;
LABEL_24:
  *(_DWORD *)(v11 + 4 * v14) = v10;
  *(_DWORD *)(v12 + 4 * v14) = v17;
  return result;
}

int64x2_t FstSearchLateLatticeHashBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  int64x2_t *v6;
  int64x2_t result;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;

  FstSearchLateLatticeHashBackoff::advanceDeltas((FstSearchLateLatticeHashBackoff *)this, a2, a3, a4, a5);
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v9 = 0u;
  v10 = 0u;
  SnapTime::recordTime((SnapTime *)&v9, 1, 0, 0, 0);
  v6 = this[13];
  result = vaddq_s64(v6[14], vsubq_s64(v9, v11));
  v8 = vaddq_s64(v6[15], vsubq_s64(v10, v12));
  v6[14] = result;
  v6[15] = v8;
  return result;
}

int64x2_t FstSearchLateLatticeHashBackoff::reset(FstSearchLateLatticeHashBackoff *this)
{
  int64x2_t *v2;
  int64x2_t result;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;

  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 50) = 0;
  v7 = 0u;
  v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  v5 = 0u;
  v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  v2 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchLateLatticeHashBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLateLatticeHashBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::beginTopRecPassSyncRecog(FstSearchLateLatticeHashBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((_BYTE *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLateLatticeHashBackoff::generateTraceTokensFromTraces((FstSearchLateLatticeHashBackoff *)this);
  FstSearchLateLatticeHashBackoff::generateTraceTokensForLateLattice((FstSearchLateLatticeHashBackoff *)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = this[13];
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

int32x4_t FstSearchLateLatticeHashBackoff::generateTraceTokensFromTraces(FstSearchLateLatticeHashBackoff *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  int32x4_t result;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  int32x4_t v13;

  v2 = (_QWORD *)((char *)this + 176);
  v3 = *((unsigned int *)this + 42);
  v4 = *((_DWORD *)this + 47);
  if (v3 > v4)
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 176, v3 - v4, 0);
  v6 = *((unsigned int *)this + 46);
  if (v6 < v3)
  {
    v7 = v3 - v6;
    v8 = (_OWORD *)(*v2 + 16 * v6);
    result.i64[0] = 0;
    do
    {
      *v8++ = xmmword_209A6C7C0;
      --v7;
    }
    while (v7);
  }
  *((_DWORD *)this + 46) = v3;
  v9 = *((unsigned int *)this + 42);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = *((_QWORD *)this + 22);
    v12 = (_OWORD *)(*((_QWORD *)this + 20) + 16);
    do
    {
      *((_DWORD *)v12 - 2) = v10;
      v13 = *(int32x4_t *)v12;
      v12 = (_OWORD *)((char *)v12 + 36);
      result = vuzp1q_s32(v13, (int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL));
      *(int32x4_t *)(v11 + 16 * v10++) = result;
    }
    while (v9 != v10);
  }
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::generateTraceTokensForLateLattice(FstSearchLateLatticeHashBackoff *this)
{
  FstSearchLateLatticeHashBackoff *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int32 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _OWORD *v34;
  ArcGraph **v35;
  int v36;
  int v37;
  _BOOL4 v38;
  BOOL v39;
  _BOOL4 isLexPelPhnMatch;
  uint64_t v41;
  uint64_t v42;
  int32x2_t *v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  _OWORD *v62;
  void *v63;
  int v64;
  unsigned int v65;
  void *v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  _WORD *v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  __int128 *v91;
  uint64_t v92;
  char *v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  void *v100;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t *v105;
  int v106;
  int v107;
  int32x2_t *v108;
  int32x2_t *v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  void *v115;
  unsigned int v116;
  unsigned int v117;
  void *v118;
  unsigned int v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  __int16 v123;
  __int16 v124;
  int v125;
  _QWORD v126[2];
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  _QWORD v131[2];
  uint64_t v132;
  int v133;
  void *v134;

  v1 = this;
  v131[1] = 0;
  v132 = 0;
  v133 = 0;
  v131[0] = 0;
  FstSearchLateLatticeHashBackoff::getTraceTimeBoundaries((uint64_t)this, &v132, (uint64_t)v131);
  v129 = 0;
  v130 = 0;
  v127 = 0;
  v128 = 0;
  v126[0] = 0;
  v126[1] = 0;
  v125 = 1879048192;
  v2 = (*(uint64_t (**)(FstSearchLateLatticeHashBackoff *, uint64_t *, uint64_t *, int *, _QWORD *))(*(_QWORD *)v1 + 80))(v1, &v129, &v127, &v125, v126);
  v9 = *((_DWORD *)v1 + 7);
  v10 = *((_DWORD *)v1 + 2);
  v122 = -1;
  v124 = 256;
  v123 = *((_WORD *)v1 + 34);
  if (v2)
  {
    v120 = 0;
    v121 = 0;
    v11 = (uint64_t *)((char *)v1 + 160);
    v12 = *((unsigned int *)v1 + 42);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v105 = (uint64_t *)((char *)v1 + 160);
      v102 = v10;
      v103 = v9;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            --v12;
            v14 = *v11;
            if (*(_BYTE *)(v129 + v12))
              break;
            *(_DWORD *)(v14 + 36 * v12 + 8) = -1;
            if (!(_DWORD)v12)
              goto LABEL_77;
          }
          v15 = (unsigned int *)(v14 + 36 * v12);
          v16 = *v15;
          v17 = *((_QWORD *)v1 + 6);
          if (*(_DWORD *)(v17 + 388) > v16 && *(_BYTE *)(*(_QWORD *)(v17 + 104) + v16))
            v18 = *(_WORD *)(*(_QWORD *)(v17 + 72) + 2 * *(unsigned int *)(*(_QWORD *)(v17 + 48) + 4 * v16));
          else
            v18 = 0;
          v19 = *((_QWORD *)v1 + 11);
          v20 = *(_DWORD *)(v19 + 4 * v15[1]);
          v22 = v15[2];
          v21 = v15 + 2;
          v23 = *((_QWORD *)v1 + 22);
          v24 = *((_DWORD *)v1 + 3);
          v25 = *(_DWORD *)(v126[0] + 4 * v12);
          HIWORD(v122) = v18;
          v109 = (int32x2_t *)(v23 + 16 * v22);
          v26 = v109[1].u32[1];
          if ((v26 & 0x80000000) == 0)
            break;
          *v21 = v13;
          if (v13 == HIDWORD(v121))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
            v13 = v121;
          }
          *((_OWORD *)v120 + v13) = *(_OWORD *)v109->i8;
          v13 = v121 + 1;
          LODWORD(v121) = v121 + 1;
          *(_DWORD *)(*v11 + 36 * v12 + 12) = 1;
          if (!(_DWORD)v12)
            goto LABEL_77;
        }
        v110 = v12;
        v113 = v109[1].u32[1];
        v27 = v14 + 36 * v26;
        v28 = *(unsigned int *)(v27 + 4);
        v29 = (_DWORD)v28 ? *(unsigned int *)(v132 + 4 * (v28 - 1)) : 0;
        v114 = v24 + v125 - v25;
        v108 = (int32x2_t *)(v23 + 16 * *(unsigned int *)(v27 + 8));
        v107 = v20 + v109->i32[0] - *(_DWORD *)(v19 + 4 * v28) - v108->i32[0];
        v106 = v108->i32[0] - *(_DWORD *)(v131[0] + 4 * v28);
        v30 = v13;
        if (v29 < *(unsigned int *)(v132 + 4 * v28))
          break;
LABEL_42:
        if (v13 >= v30)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 150, (uint64_t)"fst/fstsrch", 2, (uint64_t)"%s", v7, v8, (char)&unk_209A6C820);
          v30 = v121;
        }
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>((char *)v120 + 16 * v13, v30 - v13, 16);
        v45 = v13 + 1;
        v46 = v121;
        if (v45 < v121)
        {
          v47 = 16 * (v13 + 1);
          v48 = v13;
          do
          {
            if (*(_DWORD *)((char *)v120 + v47 + 8) != *((_DWORD *)v120 + 4 * v48 + 2))
            {
              *((_OWORD *)v120 + ++v48) = *(_OWORD *)((char *)v120 + v47);
              v46 = v121;
            }
            ++v45;
            v47 += 16;
          }
          while (v45 < v46);
          LODWORD(v45) = v48 + 1;
        }
        v49 = (char *)v120;
        if (HIDWORD(v121) < v45)
        {
          v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v45, 16 * v46, 16 * v46, 1) >> 4;
          v49 = (char *)v118;
          v120 = v118;
          v46 = v121;
        }
        if (v46 < v45)
        {
          v50 = v45 - (unint64_t)v46;
          v51 = &v49[16 * v46];
          do
          {
            *(_OWORD *)v51 = xmmword_209A6C7C0;
            v51 += 16;
            --v50;
          }
          while (v50);
        }
        LODWORD(v121) = v45;
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(&v49[16 * v13], v45 - v13, 16);
        v52 = 16 * v13;
        v53 = v114;
        if (*(_DWORD *)((char *)v120 + v52) + v10 < v114)
          v53 = *((_DWORD *)v120 + 4 * v13) + v10;
        v54 = v121;
        v55 = *((_DWORD *)v1 + 5) + v13;
        if (v121 < v55)
          v55 = v121;
        v56 = *((_QWORD *)v1 + 20);
        *(_DWORD *)(v56 + 36 * v110 + 8) = v13;
        if (v13 >= v55)
        {
          v60 = v13;
        }
        else
        {
          while (*(_DWORD *)((char *)v120 + v52) <= v53)
          {
            v57 = *(unsigned int *)((char *)v120 + v52 + 12);
            if ((v57 & 0x80000000) == 0)
            {
              *(_BYTE *)(v129 + v57) = 1;
              v58 = (_DWORD)v57 == (_DWORD)v113 ? 0 : v106 + v9;
              v59 = v58 + v107 + *(_DWORD *)(v126[0] + 4 * v110);
              if (*(_DWORD *)(v126[0] + 4 * v57) > v59)
                *(_DWORD *)(v126[0] + 4 * v57) = v59;
            }
            ++v13;
            v52 += 16;
            if (v55 == v13)
            {
              v13 = v55;
              break;
            }
          }
          v56 = *v11;
          v60 = *(_DWORD *)(*v11 + 36 * v110 + 8);
          v54 = v121;
        }
        *(_DWORD *)(v56 + 36 * v110 + 12) = v13 - v60;
        if (HIDWORD(v121) < v13)
        {
          v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v13, 16 * v54, 16 * v54, 1) >> 4;
          v120 = v118;
          v54 = v121;
        }
        if (v54 < v13)
        {
          v61 = v13 - (unint64_t)v54;
          v62 = (char *)v120 + 16 * v54;
          do
          {
            *v62++ = xmmword_209A6C7C0;
            --v61;
          }
          while (v61);
        }
        LODWORD(v121) = v13;
        if (!v110)
        {
LABEL_77:
          v63 = v120;
          v64 = HIDWORD(v121);
          v65 = *((_DWORD *)v1 + 42);
          goto LABEL_79;
        }
      }
      v104 = v12;
      v112 = v106 + v9;
      v111 = v20 + v109->i32[0] - v108->i32[0];
      v31 = 36 * v29;
      while (1)
      {
        if (v113 == v29)
          v32 = 0;
        else
          v32 = v112;
        v33 = *((_QWORD *)v1 + 20);
        v34 = (_OWORD *)(*((_QWORD *)v1 + 22) + 16 * *(unsigned int *)(v33 + v31 + 8));
        if ((int)(v111 + v32 + *(_DWORD *)v34) <= v114)
        {
          v35 = (ArcGraph **)v1;
          v36 = *(_DWORD *)(v33 + 36 * v110);
          v37 = *(_DWORD *)(v33 + v31);
          v38 = v37 != 16777209
             && ArcGraph::lexToCWID(v35[5], *(_DWORD *)(v33 + v31), v3, v4, v5, v6, v7, v8) >> 25 != 126;
          if (v36 == 16777209)
          {
            v1 = (FstSearchLateLatticeHashBackoff *)v35;
            if (v38)
              goto LABEL_35;
          }
          else
          {
            v39 = v36 == 16777214 || v37 == 16777213;
            v1 = (FstSearchLateLatticeHashBackoff *)v35;
            if (!v39)
            {
LABEL_35:
              isLexPelPhnMatch = FstSearchLateLatticeHashBackoff::isLexPelPhnMatch((uint64_t)v1, v29, (uint64_t)&v122);
              v1 = (FstSearchLateLatticeHashBackoff *)v35;
              if (isLexPelPhnMatch)
              {
                v41 = v121;
                if (v121 == (unint64_t)HIDWORD(v121))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
                  v41 = v121;
                  v1 = (FstSearchLateLatticeHashBackoff *)v35;
                }
                *((_OWORD *)v120 + v41) = *v34;
                v42 = v121;
                LODWORD(v121) = v121 + 1;
                v43 = (int32x2_t *)((char *)v120 + 16 * v42);
                v43[1].i32[1] = v29;
                *v43 = vadd_s32(vsub_s32(vadd_s32(*v109, vdup_n_s32(v32)), *v108), *v43);
                v44 = *(_DWORD *)(*v105 + 36 * v110);
                if (v44 != 16777209)
                  v43[1].i32[0] = v44 + 2 * v43[1].i32[0] + 1;
              }
            }
          }
        }
        ++v29;
        v31 += 36;
        if (v29 >= *(unsigned int *)(v132 + 4 * v28))
        {
          v30 = v121;
          v12 = v104;
          v11 = v105;
          v10 = v102;
          v9 = v103;
          goto LABEL_42;
        }
      }
    }
    v65 = 0;
    v13 = 0;
    v64 = 0;
    v63 = 0;
LABEL_79:
    v66 = (void *)*((_QWORD *)v1 + 22);
    *((_QWORD *)v1 + 22) = v63;
    v120 = v66;
    v67 = *((_DWORD *)v1 + 47);
    *((_DWORD *)v1 + 46) = v13;
    *((_DWORD *)v1 + 47) = v64;
    LODWORD(v121) = 0;
    HIDWORD(v121) = v67;
    v119 = 0;
    v118 = 0;
    if (v65)
    {
      v68 = MemChunkAlloc(4 * v65, 0);
      v118 = v68;
      v119 = v65;
      if (*((_DWORD *)v1 + 42))
      {
        v69 = 0;
        v70 = 0;
        v65 = 0;
        do
        {
          v71 = (__int128 *)(*v11 + v69);
          if (*((_DWORD *)v71 + 2) == -1)
          {
            *((_DWORD *)v68 + v70) = -1;
          }
          else
          {
            if (v70 != v65)
            {
              v72 = *v11 + 36 * v65;
              v73 = *v71;
              v74 = v71[1];
              *(_WORD *)(v72 + 32) = *((_WORD *)v71 + 16);
              *(_OWORD *)v72 = v73;
              *(_OWORD *)(v72 + 16) = v74;
            }
            *((_DWORD *)v68 + v70) = v65++;
          }
          ++v70;
          v75 = *((unsigned int *)v1 + 42);
          v69 += 36;
        }
        while (v70 < v75);
        v76 = *((_DWORD *)v1 + 43);
        if (v65 > v76)
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v11, v65 - v76, 0);
          LODWORD(v75) = *((_DWORD *)v1 + 42);
        }
        if (v75 < v65)
        {
          v77 = v65 - (unint64_t)v75;
          v78 = (_WORD *)(*v11 + 36 * v75 + 32);
          do
          {
            *((_OWORD *)v78 - 2) = xmmword_209A6C7D0;
            *((_OWORD *)v78 - 1) = xmmword_209A6C7E0;
            *v78 = -2;
            v78 += 18;
            --v77;
          }
          while (v77);
        }
      }
      else
      {
        v65 = 0;
      }
    }
    *((_DWORD *)v1 + 42) = v65;
    v79 = *((unsigned int *)v1 + 46);
    if ((_DWORD)v79)
    {
      v80 = v118;
      v81 = (_DWORD *)(*((_QWORD *)v1 + 22) + 12);
      do
      {
        v82 = *v81;
        if ((v82 & 0x80000000) == 0)
          *v81 = v80[v82];
        v81 += 4;
        --v79;
      }
      while (v79);
    }
    DgnArray<FstSearchLateLatticeHashBackoffActiveToken>::DgnArray(&v115, *((unsigned int *)v1 + 50));
    v83 = *((unsigned int *)v1 + 50);
    if ((_DWORD)v83)
    {
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v87 = v118;
      v88 = v115;
      do
      {
        v89 = *((unsigned int *)v1 + 38);
        if (v86 < v89 && v85 == v89)
          *((_DWORD *)v1 + 38) = v86;
        v91 = (__int128 *)(*((_QWORD *)v1 + 24) + v84);
        v92 = *((unsigned int *)v91 + 2);
        if ((_DWORD)v92 == -1 || v87[v92] != -1)
        {
          v93 = (char *)&v88[6 * v86];
          v94 = *v91;
          *((_QWORD *)v93 + 2) = *((_QWORD *)v91 + 2);
          *(_OWORD *)v93 = v94;
          v95 = *(unsigned int *)(*((_QWORD *)v1 + 24) + v84 + 8);
          if ((_DWORD)v95 != -1)
            LODWORD(v95) = v87[v95];
          v88[6 * v86++ + 2] = v95;
          v83 = *((unsigned int *)v1 + 50);
        }
        ++v85;
        v84 += 24;
      }
      while (v85 < v83);
    }
    else
    {
      v86 = 0;
    }
    if (v86 < *((_DWORD *)v1 + 38))
      *((_DWORD *)v1 + 38) = v86;
    LODWORD(v96) = v117;
    v97 = (char *)v115;
    if (v117 < v86)
    {
      v134 = 0;
      v96 = realloc_array(v115, &v134, 24 * v86, 24 * v116, 24 * v116, 1) / 0x18;
      v97 = (char *)v134;
    }
    if (v116 < v86)
    {
      v98 = v86 - (unint64_t)v116;
      v99 = &v97[24 * v116 + 16];
      do
      {
        *((_QWORD *)v99 - 2) = 0xFFFFFFFF00000000;
        *((_DWORD *)v99 - 2) = -1;
        *((_WORD *)v99 - 2) = -2;
        *(_QWORD *)v99 = 0;
        v99 += 24;
        --v98;
      }
      while (v98);
    }
    v100 = (void *)*((_QWORD *)v1 + 24);
    *((_QWORD *)v1 + 24) = v97;
    v115 = v100;
    LODWORD(v100) = *((_DWORD *)v1 + 51);
    *((_DWORD *)v1 + 50) = v86;
    *((_DWORD *)v1 + 51) = v96;
    v116 = 0;
    v117 = v100;
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v115);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v118);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v120);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v126);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v127);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v129);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v131);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v132);
}

void sub_2098200C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a25);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 160);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 128);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 112);
  _Unwind_Resume(a1);
}

void FstSearchLateLatticeHashBackoff::printSize(FstSearchLateLatticeHashBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 24 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A6C820, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 16 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((_DWORD *)this + 50);
  v65 = 22 * v64;
  if (v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 22 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((_DWORD *)this + 54);
  v75 = 22 * v74;
  if (v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 22 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 240, 0);
  v99 = sizeObject((uint64_t)this + 240, 1);
  v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_209820890(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLatticeHashBackoff::getBestTrace(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if ((a4 & 1) != 0)
    v4 = 0;
  else
    v4 = *(unsigned int *)(a1 + 152);
  v5 = *(unsigned int *)(a1 + 200);
  if (v4 >= v5)
    goto LABEL_21;
  v6 = 24 * v4;
  v7 = 1879048192;
  v8 = 0xFFFFFFFFLL;
  do
  {
    v9 = *(_QWORD *)(a1 + 192);
    if (!a4 || (v10 = *(unsigned int *)(v9 + v6 + 8), (_DWORD)v10 == -1))
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4))
        goto LABEL_19;
      v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2)
      *(_BYTE *)(*a2 + v10) = 1;
    if (a3)
      *(_BYTE *)(*a3 + v10) = 1;
    v11 = *(_QWORD *)(a1 + 160) + 36 * v10;
    v12 = *(_DWORD *)(v11 + 16) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v11 + 4));
    if (v7 > v12)
      v8 = v10;
    if (v7 >= v12)
      v7 = v12;
    v5 = *(unsigned int *)(a1 + 200);
LABEL_19:
    ++v4;
    v6 += 24;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    v13 = *(unsigned int *)(a1 + 168);
    v8 = 0xFFFFFFFFLL;
    while (v13)
    {
      --v13;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(_QWORD *)(a1 + 160) + 36 * v13) == 16777213)
      {
        if (a2)
          *(_BYTE *)(*a2 + v13) = 1;
        v8 = v13;
        if (a3)
          *(_BYTE *)(*a3 + v13) = 1;
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLateLatticeHashBackoff::findBestPath(uint64_t a1, uint64_t **a2, uint64_t a3, int *a4, uint64_t a5)
{
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  unsigned int BestTrace;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;

  v10 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v10)
    v11 = *(_DWORD *)(a3 + 8) == 0;
  else
    v11 = 0;
  if (v11)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v10;
  }
  if ((_DWORD)v10)
    v12 = *((_DWORD *)a2 + 2) == 0;
  else
    v12 = 0;
  if (v12)
  {
    *a2 = MemChunkAlloc(v10, 0);
    *((_DWORD *)a2 + 2) = v10;
  }
  else if (!(_DWORD)v10)
  {
    goto LABEL_16;
  }
  v13 = 0;
  do
  {
    *((_BYTE *)*a2 + v13) = 0;
    *(_BYTE *)(*(_QWORD *)a3 + v13++) = 0;
  }
  while (v10 != v13);
LABEL_16:
  BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
  {
    v20 = 1879048192;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 160);
    v16 = v15 + 36 * BestTrace;
    v18 = *(_DWORD *)(v16 + 4);
    v17 = (int *)(v16 + 4);
    v19 = v17[3] + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v18);
    *a4 = v19;
    v20 = 1879048192;
    if (v19 != 1879048192)
    {
      v21 = *(_DWORD *)(a1 + 168);
      if (v21)
      {
        v22 = v21 - 1;
        v23 = 1879048192;
        v24 = *v17;
        do
        {
          v25 = v22;
          if (*(_DWORD *)(v15 + 36 * v22 + 4) == v24
            && *(_DWORD *)(v15 + 36 * v22) == 16777213
            && !*((_BYTE *)*a2 + v22))
          {
            *((_BYTE *)*a2 + v22) = 2;
            *(_BYTE *)(*(_QWORD *)a3 + v22) = 1;
            v15 = *(_QWORD *)(a1 + 160);
            if (v23 >= *(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                      + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4)))
              v23 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                  + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4));
          }
          --v22;
        }
        while (v25);
        v19 = *a4;
        v26 = *(_DWORD *)(a1 + 168);
      }
      else
      {
        v26 = 0;
        v23 = 1879048192;
      }
      v27 = *(_DWORD *)(a1 + 28);
      v28 = __OFSUB__(v19, v23);
      v29 = v19 - v23;
      if ((v29 < 0) ^ v28 | (v29 == 0))
        v30 = 0;
      else
        v30 = v29;
      v31 = *(_DWORD *)(a5 + 12);
      v32 = v26;
      if (v26 > v31)
      {
        DgnPrimArray<unsigned int>::reallocElts(a5, v26 - v31, 0);
        v32 = *(_DWORD *)(a1 + 168);
      }
      *(_DWORD *)(a5 + 8) = v26;
      v20 = *a4;
      if (v32)
      {
        v33 = 0;
        v34 = 0;
        v35 = v20 - (v30 + v27) + *(_DWORD *)(a1 + 12);
        do
        {
          v36 = *a2;
          v37 = *((unsigned __int8 *)*a2 + v34);
          if (v37 == 2)
          {
            v38 = *(_QWORD *)a5;
            if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + v33 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + v33 + 4)) <= v35)
            {
              *(_DWORD *)(v38 + 4 * v34) = v30 + v27;
              *((_BYTE *)v36 + v34) = 1;
            }
            else
            {
              *(_DWORD *)(v38 + 4 * v34) = 1879048192;
              *((_BYTE *)v36 + v34) = 0;
            }
          }
          else if (v37 == 1)
          {
            *(_DWORD *)(*(_QWORD *)a5 + 4 * v34) = 0;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a5 + 4 * v34) = 1879048192;
          }
          ++v34;
          v33 += 36;
        }
        while (v34 < *(unsigned int *)(a1 + 168));
        v20 = *a4;
      }
    }
  }
  return v20 != 1879048192;
}

unint64_t FstSearchLateLatticeHashBackoff::createLatticeNodes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t result;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int Node;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int *v43;
  int v44;
  int v45;
  uint64_t **v47;
  uint64_t v48;
  int v49;
  uint64_t v50;

  v8 = a2;
  v9 = a1;
  v10 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v10)
    v11 = *((_DWORD *)a2 + 2) == 0;
  else
    v11 = 0;
  if (v11)
  {
    *a2 = MemChunkAlloc(4 * v10, 0);
    *((_DWORD *)v8 + 2) = v10;
  }
  result = Lattice<WordLatticeLC>::createNode(a4);
  v13 = result;
  v14 = *(_DWORD *)(a3 + 8);
  if (v14 == *(_DWORD *)(a3 + 12))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    v14 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  v15 = *(_DWORD *)(v9 + 168);
  v17 = a6;
  v16 = a7;
  if (v15)
  {
    result = 2;
    v18 = -1;
    v47 = v8;
    v48 = a3;
    v50 = v9;
    do
    {
      --v15;
      v19 = *v8;
      *((_DWORD *)*v8 + v15) = -1;
      if (*(_BYTE *)(*v17 + v15))
      {
        v20 = v15;
        v21 = *(_QWORD *)(v9 + 160);
        v22 = *(unsigned int *)(*(_QWORD *)(v9 + 88) + 4 * *(unsigned int *)(v21 + 36 * v15 + 4));
        if (*(_BYTE *)(*v16 + v15))
        {
          if (*(_BYTE *)(*v17 + v15) != 1 || v18 == -1)
          {
            Node = Lattice<WordLatticeLC>::createNode(a4);
            *((_DWORD *)*v8 + v15) = *(_DWORD *)(a3 + 8);
            v25 = *(unsigned int *)(a3 + 8);
            if (v25 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              v25 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v25) = Node;
            v26 = *(_DWORD *)(a3 + 8);
            *(_DWORD *)(a3 + 8) = v26 + 1;
            v17 = a6;
            v16 = a7;
            if (*(_BYTE *)(*a6 + v15) == 1)
              v18 = v26;
            v21 = *(_QWORD *)(v9 + 160);
            result = 2;
          }
          else
          {
            *((_DWORD *)v19 + v15) = v18;
          }
        }
        v27 = (unsigned int *)(v21 + 36 * v15);
        if ((int)v27[3] >= 1)
        {
          v49 = v18;
          v28 = *v27;
          v29 = *(_DWORD *)(v21 + 36 * v15 + 8);
          do
          {
            v30 = *(_QWORD *)(v9 + 176);
            v31 = v29;
            v32 = (_DWORD *)(v30 + 16 * v29);
            v33 = v32[3];
            if ((v32[3] & 0x80000000) != 0)
            {
              *v32 += v22;
            }
            else
            {
              if ((_DWORD)v28 == 16777209)
              {
                v34 = *a5 + 16 * v33;
                v36 = (_DWORD *)(v34 + 8);
                v35 = *(unsigned int *)(v34 + 8);
                v37 = *(_QWORD *)(v9 + 176);
                if (v35 == *(_DWORD *)(v34 + 12))
                {
                  v38 = v20;
                  v39 = v22;
                  v40 = v28;
                  DgnPrimArray<unsigned int>::reallocElts(v34, 1, 1);
                  v28 = v40;
                  v22 = v39;
                  v20 = v38;
                  v9 = v50;
                  v17 = a6;
                  result = 2;
                  v16 = a7;
                  v35 = *v36;
                  v21 = *(_QWORD *)(v50 + 160);
                  v37 = *(_QWORD *)(v50 + 176);
                }
                *(_DWORD *)(*(_QWORD *)v34 + 4 * v35) = v15;
                ++*v36;
                v33 = v32[3];
              }
              else
              {
                *(_BYTE *)(*v16 + v33) = 1;
                v37 = v30;
              }
              v41 = v21 + 36 * v33;
              v42 = *(_DWORD *)(*(_QWORD *)(v9 + 88) + 4 * *(unsigned int *)(v41 + 4));
              v43 = (int *)(v37 + 16 * *(unsigned int *)(v41 + 8));
              v44 = v22 + *v32 - v42;
              v45 = *v43;
              LODWORD(v43) = v43[1];
              *v32 = v44 - v45;
              *(_DWORD *)(v30 + 16 * v31 + 4) -= (_DWORD)v43;
              *(_BYTE *)(*v17 + v33) = 2;
              v21 = *(_QWORD *)(v9 + 160);
            }
            v29 = v31 + 1;
          }
          while ((int)v31 + 1 < *(_DWORD *)(v21 + 36 * v20 + 12)
                               + *(_DWORD *)(v21 + 36 * v20 + 8));
          v8 = v47;
          a3 = v48;
          v18 = v49;
        }
      }
    }
    while (v15);
  }
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchLateLatticeHashBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  v23 = (uint64_t)v9;
  v24 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v24)
  {
    v11 = 0;
    v12 = v28;
    do
    {
      if (*(_BYTE *)(*a3 + v11))
      {
        v13 = *(_QWORD *)(a1 + 160);
        if ((*(_DWORD *)(v13 + 36 * v11) - 16777209) >= 2 && *(int *)(v13 + 36 * v11 + 12) >= 1)
        {
          v14 = *(_DWORD *)(v13 + 36 * v11 + 8);
          do
          {
            v15 = *(_QWORD *)(a1 + 176) + 16 * v14;
            v16 = *(unsigned int *)(v15 + 12);
            if ((_DWORD)v16 == -1)
              v17 = 0;
            else
              v17 = v12 - *((_DWORD *)v29 + v16);
            v18 = *(unsigned int *)(v27 + 4 * v17);
            if (*(_BYTE *)(*a4 + v11))
              FstSearchLateLatticeHashBackoff::createLatticeLink(a1, v11, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v11))), a2, v10, a5);
            v19 = v26[0];
            if (*(_DWORD *)(v26[0] + 16 * v11 + 8))
            {
              v20 = 0;
              do
              {
                v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v11) + 4 * v20);
                FstSearchLateLatticeHashBackoff::createLatticeLink(a1, v11, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v21))), a2, v10, a5);
                ++v20;
                v19 = v26[0];
              }
              while (v20 < *(unsigned int *)(v26[0] + 16 * v11 + 8));
            }
            ++v14;
          }
          while (v14 < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 36 * v11 + 12)
                      + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 36 * v11 + 8));
        }
      }
      ++v11;
    }
    while (v11 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_2098211FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLateLatticeHashBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _QWORD v39[2];
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  __int128 v54;
  _DWORD v55[2];
  __int128 v56;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0 || (v17 = v16 + 36 * a4, v18 = *(_DWORD *)(v17 + 12), v18 < 1))
  {
    v22 = 0;
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 8);
    v20 = v18 + v19;
    do
    {
      v21 = *(_QWORD *)(a1 + 176);
      if (*(_DWORD *)(v21 + 16 * v19 + 12) == a2)
        v22 = (_DWORD *)(v21 + 16 * v19);
      else
        v22 = 0;
      ++v19;
    }
    while ((int)v19 < v20 && !v22);
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 36 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v55);
  v23 = a3[1];
  if (v22)
  {
    v23 += v22[1];
    v24 = *v22 + *a3;
  }
  else
  {
    v24 = *a3;
  }
  if (v55[0] >> 25 == 126)
  {
    v25 = 0;
    v26 = v23;
  }
  else
  {
    v25 = *(_DWORD *)(a1 + 136);
    v26 = v23 - v25;
  }
  if ((v12 & 0x80000000) != 0)
  {
    v27 = 0;
  }
  else
  {
    v27 = *(_DWORD *)(a1 + 140);
    v26 -= v27;
  }
  v28 = v24 - v23;
  v29 = a3[3];
  v30 = *(_QWORD *)(a1 + 160);
  if (v29 == -1)
  {
    v32 = 0;
    if (a9)
      goto LABEL_26;
  }
  else
  {
    v31 = *(_DWORD *)(v30 + 36 * v29 + 4);
    if (a9)
    {
      if (v31 >= 1)
        --v31;
      v32 = (v31 >> 1) + 1;
LABEL_26:
      v33 = *(_DWORD *)(v30 + 36 * a2 + 4);
      if (v33 >= 1)
        --v33;
      v34 = v33 >> 1;
      v35 = (v33 >> 1) - v32 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v36 = *(_DWORD *)(v30 + 36 * v12 + 4);
        if (v36 >= 1)
          --v36;
        v37 = v36 >> 1;
        goto LABEL_35;
      }
LABEL_36:
      v38 = 0;
      goto LABEL_37;
    }
    v32 = v31 + 1;
  }
  v34 = *(_DWORD *)(v30 + 36 * a2 + 4);
  v35 = v34 - v32 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_36;
  v37 = *(_DWORD *)(v30 + 36 * v12 + 4);
LABEL_35:
  v38 = v37 - v34;
LABEL_37:
  v40 = v32;
  v41 = v35;
  v42 = v38;
  v43 = v26;
  v44 = 0;
  v45 = v25;
  v46 = v28;
  v47 = 0;
  v48 = v27;
  v49 = xmmword_209A6C7F0;
  v50 = 0;
  v51 = -1;
  v39[0] = &off_24C2149F8;
  v39[1] = 0xBFF0000000000000;
  v52 = v55[0];
  v53 = v55[1];
  v54 = v56;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v39);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v39);
}

void sub_20982146C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(uint64_t result)
{
  _QWORD *inited;

  if (result)
  {
    DgnPrimArray<unsigned int>::~DgnPrimArray(result + 16);
    inited = (_QWORD *)MrecInitModule_sdpres_sdapi();
    return MemChunkFree(inited, 0);
  }
  return result;
}

uint64_t Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(uint64_t *a1, unsigned int a2, const WordLatticeLC *a3, WordLatticeLC *this)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;

  v8 = *(_DWORD *)(a1[10] + 24 * a2 + 20);
  while (v8 != -2)
  {
    v9 = a1[16];
    v10 = v8;
    if (*(_DWORD *)(v9 + 136 * v8 + 120) == (_DWORD)a3)
    {
      result = WordLatticeLC::cmpForMultiLinkCheck((WordLatticeLC *)(v9 + 136 * v8), this, a3);
      if ((int)result > 0)
        return result;
      v8 = *(_DWORD *)(a1[16] + 136 * v8 + 128);
      if ((result & 0x80000000) != 0)
        Lattice<WordLatticeLC>::disconnectAndDestroyLink((unint64_t)a1, v10);
    }
    else
    {
      v8 = *(_DWORD *)(v9 + 136 * v8 + 128);
    }
  }
  return Lattice<WordLatticeLC>::maybeCreateAndConnectLink(a1, a2, a3, this, 1, 0);
}

uint64_t FstSearchLateLatticeHashBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 356))
    return MiniFst::beginTopFstSyncRecog(this + 240);
  return this;
}

uint64_t FstSearchLateLatticeHashBackoff::endTopRecSyncRecog(FstSearchLateLatticeHashBackoff *this)
{
  uint64_t result;

  VirtMap::setEmpty(*((_QWORD *)this + 14));
  result = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::getBestExitScore(FstSearchLateLatticeHashBackoff *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 57) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 50);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 24 * v1;
  do
  {
    v7 = *((_QWORD *)this + 24) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 36 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 24;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 36 * v13 + 16);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 36 * v12 + 20);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_209821730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLatticeHashBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLateLatticeHashBackoff *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 50);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 24);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 6;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLateLatticeHashBackoff::seedTheory(FstSearchLateLatticeHashBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 36 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_QWORD *)(v12 + 8) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 16) = a2;
    *(_QWORD *)(v12 + 20) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 28) = 0;
    *(_WORD *)(v12 + 32) = -2;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 192, 1, 1);
    v14 = *((_DWORD *)this + 50);
  }
  v15 = *((_QWORD *)this + 24) + 24 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_QWORD *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLateLatticeHashBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 228);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 36 * v8);
    for (i = v10[5]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 36 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 36 * v8 + 16);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 36 * v16);
      i = v10[5];
    }
    *a4 = *v10;
  }
  return result;
}

BOOL FstSearchLateLatticeHashBackoff::isLexPelPhnMatch(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int16 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  _QWORD *v13;
  int v14;
  __int16 v15;

  v3 = *(_QWORD *)(a1 + 160);
  v4 = *(unsigned int *)(v3 + 36 * a2);
  v15 = 0;
  if ((v4 - 16777209) > 5 || ((1 << (v4 + 7)) & 0x31) == 0)
  {
    v13 = *(_QWORD **)(a1 + 48);
    v6 = (__int16 *)(v13[9] + 2 * *(unsigned int *)(v13[6] + 4 * v4));
    v14 = *(unsigned __int16 *)(v13[4] + 2 * v4);
    if (!v14)
    {
      v11 = 0xFFFFFFFFLL;
      goto LABEL_13;
    }
    if (v14 == 2)
    {
      *(_WORD *)(a3 + 2) = *v6;
      *(_WORD *)a3 = *(_WORD *)(a1 + 68);
      *(_BYTE *)(a3 + 10) = 0;
      v11 = 1;
      goto LABEL_13;
    }
    v11 = (v14 - 1);
    if (v14 != 1)
    {
      *(_WORD *)(a3 + 2) = v6[v14 - 2];
      *(_WORD *)a3 = v6[v14 - 3];
      *(_BYTE *)(a3 + 10) = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v6 = &v15;
  }
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v3 + 36 * a2 + 8) + 12);
  if ((v7 & 0x80000000) != 0)
  {
    v10 = *(_WORD *)(a1 + 68);
  }
  else
  {
    v8 = *(unsigned int *)(v3 + 36 * v7);
    v9 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(v9 + 388) > v8 && *(_BYTE *)(*(_QWORD *)(v9 + 104) + v8))
      v10 = *(_WORD *)(*(_QWORD *)(v9 + 72)
                     + 2 * *(unsigned int *)(*(_QWORD *)(v9 + 48) + 4 * v8)
                     + 2 * (*(unsigned __int16 *)(*(_QWORD *)(v9 + 32) + 2 * v8) - 1));
    else
      v10 = 0;
  }
  v11 = 0;
  *(_WORD *)(a3 + 2) = v10;
  *(_WORD *)a3 = *(_WORD *)(a1 + 68);
  *(_BYTE *)(a3 + 10) = 1;
LABEL_13:
  *(_WORD *)(a3 + 4) = v6[v11];
  return *PicMgr::getPicNode(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 48), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 48) + 16)+ (unsigned __int16)v6[v11])- 1, (unsigned __int16 *)a3) == *(unsigned __int16 *)(*(_QWORD *)(a1 + 160) + 36 * a2 + 32);
}

char *mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>(char *result, unint64_t a2, int64_t a3)
{
  int64_t v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  char *v8;
  char *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  char *v53;
  char v54;
  int v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char v86;
  BOOL v87;
  int64_t v88;
  int64_t v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  int64_t v93;
  char v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;

  v4 = -a3;
  v5 = a3 != 8;
  v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v7 = 2;
  else
    v7 = a3 != 8;
  if (a2 < 7)
  {
LABEL_5:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v8 = &result[a2 * a3];
      v9 = &result[a3];
      v10 = result;
      do
      {
        if (v9 > result)
        {
          v11 = v10;
          v12 = v9;
          do
          {
            v13 = v12;
            v12 = (_DWORD *)((char *)v12 + v4);
            v14 = v12[2];
            v15 = v13[2];
            if (v14 <= v15 && (v14 < v15 || *v12 <= *v13))
              break;
            if (v7)
            {
              v16 = 0;
              v17 = (uint64_t)v11 + a3;
              if (v6)
              {
                do
                {
                  v18 = *(_QWORD *)(v17 + 8 * v16);
                  *(_QWORD *)(v17 + 8 * v16) = *(_QWORD *)&v11[2 * v16];
                  *(_QWORD *)&v11[2 * v16++] = v18;
                }
                while ((unint64_t)a3 >> 3 != v16);
              }
              else
              {
                do
                {
                  v19 = *(_BYTE *)(v17 + v16);
                  *(_BYTE *)(v17 + v16) = *((_BYTE *)v11 + v16);
                  *((_BYTE *)v11 + v16++) = v19;
                }
                while (a3 != v16);
              }
            }
            else
            {
              v20 = *(_QWORD *)v13;
              *(_QWORD *)v13 = *(_QWORD *)v12;
              *(_QWORD *)v12 = v20;
            }
            v11 = (_DWORD *)((char *)v11 + v4);
          }
          while (v12 > (_DWORD *)result);
        }
        v9 += a3;
        v10 = (_DWORD *)((char *)v10 + a3);
      }
      while (v9 < v8);
    }
    return result;
  }
  v21 = (unint64_t)a3 >> 3;
  while (1)
  {
    v22 = &result[(a2 >> 1) * a3];
    if (a2 == 7)
      goto LABEL_101;
    v23 = &result[(a2 - 1) * a3];
    if (a2 < 0x29)
    {
      v25 = result;
      goto LABEL_82;
    }
    v24 = (a2 >> 3) * a3;
    v25 = &result[v24];
    v26 = &result[2 * v24];
    v27 = *((_DWORD *)result + 2);
    v28 = *(_DWORD *)&result[v24 + 8];
    if (v27 > v28 || v27 >= v28 && *(_DWORD *)result >= *(_DWORD *)v25)
    {
      v30 = *((_DWORD *)v26 + 2);
      if (v28 <= v30 && (v28 < v30 || *(_DWORD *)v25 <= *(_DWORD *)v26))
      {
        if (v27 > v30 || (v25 = result, v27 >= v30) && (v25 = result, *(_DWORD *)result >= *(_DWORD *)v26))
LABEL_38:
          v25 = &result[2 * v24];
      }
    }
    else
    {
      v29 = *((_DWORD *)v26 + 2);
      if (v28 > v29 || v28 >= v29 && *(_DWORD *)v25 >= *(_DWORD *)v26)
      {
        v25 = result;
        if (v27 <= v29)
        {
          if (v27 < v29)
            goto LABEL_38;
          v25 = &result[2 * v24];
          if (*(_DWORD *)result >= *(_DWORD *)v26)
            v25 = result;
        }
      }
    }
    v31 = &v22[-v24];
    v32 = &v22[v24];
    v33 = *(_DWORD *)&v22[-v24 + 8];
    v34 = *((_DWORD *)v22 + 2);
    if (v33 > v34 || v33 >= v34 && *(_DWORD *)v31 >= *(_DWORD *)v22)
    {
      v36 = *((_DWORD *)v32 + 2);
      if (v34 <= v36 && (v34 < v36 || *(_DWORD *)v22 <= *(_DWORD *)v32))
      {
        if (v33 <= v36)
        {
          if (v33 < v36)
          {
LABEL_62:
            v22 -= v24;
            goto LABEL_63;
          }
          v22 -= v24;
          if (*(_DWORD *)v31 < *(_DWORD *)v32)
            goto LABEL_63;
        }
LABEL_57:
        v22 = v32;
      }
    }
    else
    {
      v35 = *((_DWORD *)v32 + 2);
      if (v34 > v35 || v34 >= v35 && *(_DWORD *)v22 >= *(_DWORD *)v32)
      {
        if (v33 > v35)
          goto LABEL_62;
        if (v33 < v35)
          goto LABEL_57;
        if (*(_DWORD *)v31 >= *(_DWORD *)v32)
          v22 -= v24;
        else
          v22 += v24;
      }
    }
LABEL_63:
    v37 = -(uint64_t)v24;
    v38 = &v23[-2 * v24];
    v39 = &v23[v37];
    v40 = *((_DWORD *)v38 + 2);
    v41 = *((_DWORD *)v39 + 2);
    if (v40 > v41 || v40 >= v41 && *(_DWORD *)v38 >= *(_DWORD *)v39)
    {
      v43 = *((_DWORD *)v23 + 2);
      if (v41 > v43 || v41 >= v43 && *(_DWORD *)v39 > *(_DWORD *)v23)
      {
LABEL_81:
        v23 = v39;
        goto LABEL_82;
      }
      if (v40 <= v43 && (v40 < v43 || *(_DWORD *)v38 < *(_DWORD *)v23))
LABEL_78:
        v23 = v38;
    }
    else
    {
      v42 = *((_DWORD *)v23 + 2);
      if (v41 <= v42 && (v41 < v42 || *(_DWORD *)v39 < *(_DWORD *)v23))
        goto LABEL_81;
      if (v40 > v42)
        goto LABEL_78;
      if (v40 >= v42 && *(_DWORD *)v38 >= *(_DWORD *)v23)
        v23 = v38;
    }
LABEL_82:
    v44 = *((_DWORD *)v25 + 2);
    v45 = *((_DWORD *)v22 + 2);
    if (v44 <= v45 && (v44 < v45 || *(_DWORD *)v25 < *(_DWORD *)v22))
    {
      v46 = *((_DWORD *)v23 + 2);
      if (v45 <= v46 && (v45 < v46 || *(_DWORD *)v22 < *(_DWORD *)v23))
        goto LABEL_101;
      if (v44 <= v46)
      {
        if (v44 >= v46)
        {
          if (*(_DWORD *)v25 >= *(_DWORD *)v23)
            v22 = v25;
          else
            v22 = v23;
          goto LABEL_101;
        }
LABEL_95:
        v22 = v23;
        goto LABEL_101;
      }
LABEL_100:
      v22 = v25;
      goto LABEL_101;
    }
    v47 = *((_DWORD *)v23 + 2);
    if (v45 > v47 || v45 >= v47 && *(_DWORD *)v22 > *(_DWORD *)v23)
      goto LABEL_101;
    if (v44 > v47)
      goto LABEL_95;
    if (v44 < v47)
      goto LABEL_100;
    v22 = v25;
    if (*(_DWORD *)v25 >= *(_DWORD *)v23)
      goto LABEL_95;
LABEL_101:
    if (v7)
    {
      if (v6)
      {
        v48 = result;
        v49 = (unint64_t)a3 >> 3;
        do
        {
          v50 = *(_QWORD *)v48;
          *(_QWORD *)v48 = *(_QWORD *)v22;
          v48 += 8;
          *(_QWORD *)v22 = v50;
          v22 += 8;
          --v49;
        }
        while (v49);
      }
      else
      {
        v52 = a3;
        v53 = result;
        do
        {
          v54 = *v53;
          *v53++ = *v22;
          *v22++ = v54;
          --v52;
        }
        while (v52);
      }
    }
    else
    {
      v51 = *(_QWORD *)result;
      *(_QWORD *)result = *(_QWORD *)v22;
      *(_QWORD *)v22 = v51;
    }
    v55 = 0;
    v56 = &result[a3];
    v57 = &result[(a2 - 1) * a3];
    v58 = v57;
    v59 = &result[a3];
    v60 = &result[a3];
LABEL_110:
    while (v59 <= v58)
    {
      v61 = *((_DWORD *)v59 + 2);
      v62 = *((_DWORD *)result + 2);
      if (v61 > v62)
        break;
      if (v61 >= v62)
      {
        if (*(_DWORD *)v59 == *(_DWORD *)result)
        {
          if (v7)
          {
            v63 = 0;
            if (v6)
            {
              do
              {
                v64 = *(_QWORD *)&v60[8 * v63];
                *(_QWORD *)&v60[8 * v63] = *(_QWORD *)&v59[8 * v63];
                *(_QWORD *)&v59[8 * v63++] = v64;
              }
              while (v21 != v63);
            }
            else
            {
              do
              {
                v65 = v60[v63];
                v60[v63] = v59[v63];
                v59[v63++] = v65;
              }
              while (a3 != v63);
            }
          }
          else
          {
            v75 = *(_QWORD *)v60;
            *(_QWORD *)v60 = *(_QWORD *)v59;
            *(_QWORD *)v59 = v75;
          }
          v60 += a3;
          v55 = 1;
        }
        else if (*(_DWORD *)v59 > *(_DWORD *)result)
        {
          break;
        }
      }
      v59 += a3;
    }
    while (v59 <= v58)
    {
      v67 = *((_DWORD *)v58 + 2);
      v68 = *((_DWORD *)result + 2);
      if (v67 <= v68)
      {
        if (v67 < v68)
          goto LABEL_136;
        if (*(_DWORD *)v58 == *(_DWORD *)result)
        {
          if (v7)
          {
            v69 = 0;
            if (v6)
            {
              do
              {
                v70 = *(_QWORD *)&v58[8 * v69];
                *(_QWORD *)&v58[8 * v69] = *(_QWORD *)&v57[8 * v69];
                *(_QWORD *)&v57[8 * v69++] = v70;
              }
              while (v21 != v69);
            }
            else
            {
              do
              {
                v71 = v58[v69];
                v58[v69] = v57[v69];
                v57[v69++] = v71;
              }
              while (a3 != v69);
            }
          }
          else
          {
            v66 = *(_QWORD *)v58;
            *(_QWORD *)v58 = *(_QWORD *)v57;
            *(_QWORD *)v57 = v66;
          }
          v57 += v4;
          v55 = 1;
        }
        else if (*(_DWORD *)v58 <= *(_DWORD *)result)
        {
LABEL_136:
          if (v7)
          {
            v72 = 0;
            if (v6)
            {
              do
              {
                v73 = *(_QWORD *)&v59[8 * v72];
                *(_QWORD *)&v59[8 * v72] = *(_QWORD *)&v58[8 * v72];
                *(_QWORD *)&v58[8 * v72++] = v73;
              }
              while (v21 != v72);
            }
            else
            {
              do
              {
                v74 = v59[v72];
                v59[v72] = v58[v72];
                v58[v72++] = v74;
              }
              while (a3 != v72);
            }
          }
          else
          {
            v76 = *(_QWORD *)v59;
            *(_QWORD *)v59 = *(_QWORD *)v58;
            *(_QWORD *)v58 = v76;
          }
          v59 += a3;
          v58 += v4;
          v55 = 1;
          goto LABEL_110;
        }
      }
      v58 += v4;
    }
    v77 = &result[a2 * a3];
    if (!v55)
      break;
    v78 = v59 - v60;
    if (v60 - result >= v59 - v60)
      v79 = v59 - v60;
    else
      v79 = v60 - result;
    if (v79)
    {
      if (v6)
      {
        v80 = &v59[-v79];
        v81 = v79 >> 3;
        v82 = result;
        do
        {
          v83 = *(_QWORD *)v82;
          *(_QWORD *)v82 = *(_QWORD *)v80;
          v82 += 8;
          *(_QWORD *)v80 = v83;
          v80 += 8;
          --v81;
        }
        while (v81);
      }
      else
      {
        v84 = -(uint64_t)v79;
        v85 = result;
        do
        {
          v86 = *v85;
          *v85++ = v59[v84];
          v59[v84] = v86;
          v87 = __CFADD__(v84++, 1);
        }
        while (!v87);
      }
    }
    v88 = v57 - v58;
    v89 = v77 - &v57[a3];
    if (v57 - v58 < v89)
      v89 = v57 - v58;
    if (v89)
    {
      if (v6)
      {
        v90 = &v77[-v89];
        v91 = (unint64_t)v89 >> 3;
        do
        {
          v92 = *(_QWORD *)v59;
          *(_QWORD *)v59 = *(_QWORD *)v90;
          v59 += 8;
          *(_QWORD *)v90 = v92;
          v90 += 8;
          --v91;
        }
        while (v91);
      }
      else
      {
        v93 = -v89;
        do
        {
          v94 = *v59;
          *v59++ = v77[v93];
          v77[v93] = v94;
          v87 = __CFADD__(v93++, 1);
        }
        while (!v87);
      }
    }
    if (v78 > a3)
      result = (char *)mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>();
    if (v88 <= a3)
      return result;
    result = &v77[-v88];
    a2 = v88 / (unint64_t)a3;
    v6 = ((((_BYTE)v77 - v88) | a3) & 7) == 0;
    if (((((_BYTE)v77 - v88) | a3) & 7) != 0)
      v7 = 2;
    else
      v7 = v5;
    if (a2 < 7)
      goto LABEL_5;
  }
  if ((uint64_t)(a2 * a3) > a3)
  {
    v95 = result;
    do
    {
      if (v56 > result)
      {
        v96 = v95;
        v97 = v56;
        do
        {
          v98 = v97;
          v97 = (_DWORD *)((char *)v97 + v4);
          v99 = v97[2];
          v100 = v98[2];
          if (v99 <= v100 && (v99 < v100 || *v97 <= *v98))
            break;
          if (v7)
          {
            v101 = 0;
            v102 = (uint64_t)v96 + a3;
            if (v6)
            {
              do
              {
                v103 = *(_QWORD *)(v102 + 8 * v101);
                *(_QWORD *)(v102 + 8 * v101) = *(_QWORD *)&v96[2 * v101];
                *(_QWORD *)&v96[2 * v101++] = v103;
              }
              while (v21 != v101);
            }
            else
            {
              do
              {
                v104 = *(_BYTE *)(v102 + v101);
                *(_BYTE *)(v102 + v101) = *((_BYTE *)v96 + v101);
                *((_BYTE *)v96 + v101++) = v104;
              }
              while (a3 != v101);
            }
          }
          else
          {
            v105 = *(_QWORD *)v98;
            *(_QWORD *)v98 = *(_QWORD *)v97;
            *(_QWORD *)v97 = v105;
          }
          v96 = (_DWORD *)((char *)v96 + v4);
        }
        while (v97 > (_DWORD *)result);
      }
      v56 += a3;
      v95 = (_DWORD *)((char *)v95 + a3);
    }
    while (v56 < v77);
  }
  return result;
}

char *mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(char *result, unint64_t a2, int64_t a3)
{
  int64_t v4;
  _BOOL4 v5;
  BOOL v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  char *v40;
  int v41;
  int v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  char *v49;
  char v50;
  int v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char v78;
  BOOL v79;
  int64_t v80;
  int64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  int64_t v85;
  char v86;
  char *v87;
  char *v88;
  _DWORD *v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;

  v4 = -a3;
  v5 = a3 != 8;
  v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0)
    v7 = 2;
  else
    v7 = a3 != 8;
  if (a2 < 7)
  {
LABEL_157:
    if ((uint64_t)(a2 * a3) > a3)
    {
      v87 = &result[a2 * a3];
      v88 = &result[a3];
      v89 = result;
      do
      {
        if (v88 > result)
        {
          v90 = v89;
          v91 = v88;
          do
          {
            v92 = v91;
            v91 = (_DWORD *)((char *)v91 + v4);
            if (*v91 <= *v92)
              break;
            if (v7)
            {
              v93 = 0;
              v94 = (uint64_t)v90 + a3;
              if (v6)
              {
                do
                {
                  v95 = *(_QWORD *)(v94 + 8 * v93);
                  *(_QWORD *)(v94 + 8 * v93) = *(_QWORD *)&v90[2 * v93];
                  *(_QWORD *)&v90[2 * v93++] = v95;
                }
                while ((unint64_t)a3 >> 3 != v93);
              }
              else
              {
                do
                {
                  v96 = *(_BYTE *)(v94 + v93);
                  *(_BYTE *)(v94 + v93) = *((_BYTE *)v90 + v93);
                  *((_BYTE *)v90 + v93++) = v96;
                }
                while (a3 != v93);
              }
            }
            else
            {
              v97 = *(_QWORD *)v92;
              *(_QWORD *)v92 = *(_QWORD *)v91;
              *(_QWORD *)v91 = v97;
            }
            v90 = (_DWORD *)((char *)v90 + v4);
          }
          while (v91 > (_DWORD *)result);
        }
        v88 += a3;
        v89 = (_DWORD *)((char *)v89 + a3);
      }
      while (v88 < v87);
    }
  }
  else
  {
    v8 = (unint64_t)a3 >> 3;
    while (1)
    {
      v9 = &result[(a2 >> 1) * a3];
      if (a2 != 7)
      {
        v10 = &result[(a2 - 1) * a3];
        if (a2 <= 0x28)
        {
          v22 = *(_DWORD *)result;
          v33 = *(_DWORD *)v9;
          v13 = result;
          v42 = *(_DWORD *)v10;
        }
        else
        {
          v11 = (a2 >> 3) * a3;
          v12 = 2 * v11;
          v13 = &result[2 * v11];
          v14 = *(_DWORD *)result;
          v15 = *(_DWORD *)&result[v11];
          v16 = *(_DWORD *)v13;
          if (*(_DWORD *)result >= *(_DWORD *)v13)
            v17 = *(_DWORD *)v13;
          else
            v17 = *(_DWORD *)result;
          if (v14 >= v16)
            v18 = &result[2 * v11];
          else
            v18 = result;
          if (v15 > v16)
          {
            v17 = *(_DWORD *)&result[v11];
            v18 = &result[v11];
          }
          if (v14 <= v16)
            v19 = *(_DWORD *)v13;
          else
            v19 = *(_DWORD *)result;
          if (v14 >= v16)
            v13 = result;
          v20 = v15 < v16;
          if (v15 >= v16)
            v21 = v19;
          else
            v21 = *(_DWORD *)&result[v11];
          if (v20)
            v13 = &result[v11];
          if (v14 < v15)
            v22 = v21;
          else
            v22 = v17;
          if (v14 >= v15)
            v13 = v18;
          v23 = -(uint64_t)v11;
          v24 = &v9[-v11];
          v25 = &v9[v11];
          v26 = *(_DWORD *)v24;
          v27 = *(_DWORD *)v9;
          v28 = *(_DWORD *)v25;
          if (*(_DWORD *)v24 >= *(_DWORD *)v25)
            v29 = *(_DWORD *)v25;
          else
            v29 = *(_DWORD *)v24;
          if (v26 >= v28)
            v30 = v25;
          else
            v30 = v24;
          if (v27 > v28)
          {
            v29 = *(_DWORD *)v9;
            v30 = &result[(a2 >> 1) * a3];
          }
          if (v26 <= v28)
            v31 = *(_DWORD *)v25;
          else
            v31 = *(_DWORD *)v24;
          if (v26 >= v28)
            v25 = v24;
          if (v27 >= v28)
            v32 = v31;
          else
            v32 = *(_DWORD *)v9;
          if (v27 >= v28)
            v9 = v25;
          if (v26 < v27)
            v33 = v32;
          else
            v33 = v29;
          if (v26 >= v27)
            v9 = v30;
          v34 = &v10[-v12];
          v35 = &v10[v23];
          v36 = *(_DWORD *)v34;
          v37 = *(_DWORD *)v35;
          v38 = *(_DWORD *)v10;
          if (*(_DWORD *)v34 >= *(_DWORD *)v10)
            v39 = *(_DWORD *)v10;
          else
            v39 = *(_DWORD *)v34;
          if (v36 >= v38)
            v40 = &result[(a2 - 1) * a3];
          else
            v40 = v34;
          if (v37 > v38)
          {
            v39 = *(_DWORD *)v35;
            v40 = v35;
          }
          if (v36 <= v38)
            v41 = *(_DWORD *)v10;
          else
            v41 = *(_DWORD *)v34;
          if (v36 >= v38)
            v10 = v34;
          if (v37 >= v38)
            v42 = v41;
          else
            v42 = *(_DWORD *)v35;
          if (v37 < v38)
            v10 = v35;
          if (v36 >= v37)
          {
            v42 = v39;
            v10 = v40;
          }
        }
        if (v22 >= v42)
          v43 = v10;
        else
          v43 = v13;
        if (v33 > v42)
          v43 = v9;
        if (v22 >= v42)
          v10 = v13;
        if (v33 >= v42)
          v9 = v10;
        if (v22 >= v33)
          v9 = v43;
      }
      if (v7)
      {
        if (v6)
        {
          v44 = result;
          v45 = (unint64_t)a3 >> 3;
          do
          {
            v46 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v9;
            v44 += 8;
            *(_QWORD *)v9 = v46;
            v9 += 8;
            --v45;
          }
          while (v45);
        }
        else
        {
          v48 = a3;
          v49 = result;
          do
          {
            v50 = *v49;
            *v49++ = *v9;
            *v9++ = v50;
            --v48;
          }
          while (v48);
        }
      }
      else
      {
        v47 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)v9;
        *(_QWORD *)v9 = v47;
      }
      v51 = 0;
      v52 = &result[a3];
      v53 = &result[(a2 - 1) * a3];
      v54 = v53;
      v55 = &result[a3];
      v56 = &result[a3];
LABEL_96:
      while (v55 <= v54 && *(_DWORD *)v55 <= *(_DWORD *)result)
      {
        if (*(_DWORD *)v55 == *(_DWORD *)result)
        {
          if (v7)
          {
            v57 = 0;
            if (v6)
            {
              do
              {
                v58 = *(_QWORD *)&v56[8 * v57];
                *(_QWORD *)&v56[8 * v57] = *(_QWORD *)&v55[8 * v57];
                *(_QWORD *)&v55[8 * v57++] = v58;
              }
              while (v8 != v57);
            }
            else
            {
              do
              {
                v59 = v56[v57];
                v56[v57] = v55[v57];
                v55[v57++] = v59;
              }
              while (a3 != v57);
            }
          }
          else
          {
            v67 = *(_QWORD *)v56;
            *(_QWORD *)v56 = *(_QWORD *)v55;
            *(_QWORD *)v55 = v67;
          }
          v56 += a3;
          v51 = 1;
        }
        v55 += a3;
      }
      while (v55 <= v54)
      {
        if (*(_DWORD *)v54 < *(_DWORD *)result)
        {
          if (v7)
          {
            v64 = 0;
            if (v6)
            {
              do
              {
                v65 = *(_QWORD *)&v55[8 * v64];
                *(_QWORD *)&v55[8 * v64] = *(_QWORD *)&v54[8 * v64];
                *(_QWORD *)&v54[8 * v64++] = v65;
              }
              while (v8 != v64);
            }
            else
            {
              do
              {
                v66 = v55[v64];
                v55[v64] = v54[v64];
                v54[v64++] = v66;
              }
              while (a3 != v64);
            }
          }
          else
          {
            v68 = *(_QWORD *)v55;
            *(_QWORD *)v55 = *(_QWORD *)v54;
            *(_QWORD *)v54 = v68;
          }
          v55 += a3;
          v54 += v4;
          v51 = 1;
          goto LABEL_96;
        }
        if (*(_DWORD *)v54 == *(_DWORD *)result)
        {
          if (v7)
          {
            v60 = 0;
            if (v6)
            {
              do
              {
                v61 = *(_QWORD *)&v54[8 * v60];
                *(_QWORD *)&v54[8 * v60] = *(_QWORD *)&v53[8 * v60];
                *(_QWORD *)&v53[8 * v60++] = v61;
              }
              while (v8 != v60);
            }
            else
            {
              do
              {
                v62 = v54[v60];
                v54[v60] = v53[v60];
                v53[v60++] = v62;
              }
              while (a3 != v60);
            }
          }
          else
          {
            v63 = *(_QWORD *)v54;
            *(_QWORD *)v54 = *(_QWORD *)v53;
            *(_QWORD *)v53 = v63;
          }
          v53 += v4;
          v51 = 1;
        }
        v54 += v4;
      }
      v69 = &result[a2 * a3];
      if (!v51)
        break;
      v70 = v55 - v56;
      if (v56 - result >= v55 - v56)
        v71 = v55 - v56;
      else
        v71 = v56 - result;
      if (v71)
      {
        if (v6)
        {
          v72 = &v55[-v71];
          v73 = v71 >> 3;
          v74 = result;
          do
          {
            v75 = *(_QWORD *)v74;
            *(_QWORD *)v74 = *(_QWORD *)v72;
            v74 += 8;
            *(_QWORD *)v72 = v75;
            v72 += 8;
            --v73;
          }
          while (v73);
        }
        else
        {
          v76 = -(uint64_t)v71;
          v77 = result;
          do
          {
            v78 = *v77;
            *v77++ = v55[v76];
            v55[v76] = v78;
            v79 = __CFADD__(v76++, 1);
          }
          while (!v79);
        }
      }
      v80 = v53 - v54;
      v81 = v69 - &v53[a3];
      if (v53 - v54 < v81)
        v81 = v53 - v54;
      if (v81)
      {
        if (v6)
        {
          v82 = &v69[-v81];
          v83 = (unint64_t)v81 >> 3;
          do
          {
            v84 = *(_QWORD *)v55;
            *(_QWORD *)v55 = *(_QWORD *)v82;
            v55 += 8;
            *(_QWORD *)v82 = v84;
            v82 += 8;
            --v83;
          }
          while (v83);
        }
        else
        {
          v85 = -v81;
          do
          {
            v86 = *v55;
            *v55++ = v69[v85];
            v69[v85] = v86;
            v79 = __CFADD__(v85++, 1);
          }
          while (!v79);
        }
      }
      if (v70 > a3)
        result = (char *)mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>();
      if (v80 <= a3)
        return result;
      result = &v69[-v80];
      a2 = v80 / (unint64_t)a3;
      v6 = ((((_BYTE)v69 - v80) | a3) & 7) == 0;
      if (((((_BYTE)v69 - v80) | a3) & 7) != 0)
        v7 = 2;
      else
        v7 = v5;
      if (a2 < 7)
        goto LABEL_157;
    }
    if ((uint64_t)(a2 * a3) > a3)
    {
      v98 = result;
      do
      {
        if (v52 > result)
        {
          v99 = v98;
          v100 = v52;
          do
          {
            v101 = v100;
            v100 = (_DWORD *)((char *)v100 + v4);
            if (*v100 <= *v101)
              break;
            if (v7)
            {
              v102 = 0;
              v103 = (uint64_t)v99 + a3;
              if (v6)
              {
                do
                {
                  v104 = *(_QWORD *)(v103 + 8 * v102);
                  *(_QWORD *)(v103 + 8 * v102) = *(_QWORD *)&v99[2 * v102];
                  *(_QWORD *)&v99[2 * v102++] = v104;
                }
                while (v8 != v102);
              }
              else
              {
                do
                {
                  v105 = *(_BYTE *)(v103 + v102);
                  *(_BYTE *)(v103 + v102) = *((_BYTE *)v99 + v102);
                  *((_BYTE *)v99 + v102++) = v105;
                }
                while (a3 != v102);
              }
            }
            else
            {
              v106 = *(_QWORD *)v101;
              *(_QWORD *)v101 = *(_QWORD *)v100;
              *(_QWORD *)v100 = v106;
            }
            v99 = (_DWORD *)((char *)v99 + v4);
          }
          while (v100 > (_DWORD *)result);
        }
        v52 += a3;
        v98 = (_DWORD *)((char *)v98 + a3);
      }
      while (v52 < v69);
    }
  }
  return result;
}

void FstSearchLateLatticeHashBackoff::checkSearchParametersValidityForArcGraph(FstSearchLateLatticeHashBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLateLatticeHashBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _DWORD v28[2];
  __int128 v29;

  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    v9 = a4;
    LODWORD(v11) = 0;
    v12 = a2;
    v13 = a2;
    do
    {
      v14 = (_DWORD *)(*(_QWORD *)(a1 + 160) + 36 * v13);
      if (*v14 == 16777209)
        v11 = v11;
      else
        v11 = (v11 + 1);
      v13 = v14[5];
    }
    while ((_DWORD)v13 != -1);
    v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15)
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      v17 = v11 - v16;
      v18 = *(_QWORD *)a3 + 32 * v16;
      do
      {
        *(_QWORD *)v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_209A593D0;
        *(_QWORD *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if ((_DWORD)v11)
    {
      v19 = *(_QWORD *)(a1 + 160);
      v20 = -16;
      do
      {
        v21 = (unsigned int *)(v19 + 36 * v12);
        v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            v23 = v22 - 1;
            if (v22 < 1)
              v23 = v22;
            v20 = (v23 >> 1) + 1;
          }
          else
          {
            v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            v24 = v22 - 1;
            if (v22 < 1)
              v24 = v21[1];
            v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16)
            v25 = v22 + 1;
          else
            v25 = v20;
          v26 = v28[1];
          v11 = (v11 - 1);
          v27 = *(_QWORD *)a3 + 32 * v11;
          *(_DWORD *)v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          v19 = *(_QWORD *)(a1 + 160);
          v20 = -16;
        }
        v12 = *(unsigned int *)(v19 + 36 * v12 + 20);
      }
      while ((_DWORD)v12 != -1);
    }
  }
}

uint64_t FstSearchLateLatticeHashBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchLateLatticeHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 36 * v24;
  return (*(_DWORD *)(v22 + 16) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_20982300C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLateLatticeHash::advanceDeltas(FstSearchLateLatticeHash *this, int a2, signed __int32 a3, SearchStats *a4, int a5)
{
  signed __int32 *v10;
  int v11;
  unint64_t v12;
  unint64_t i;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  signed __int32 v19;
  signed __int32 v20;
  __n128 *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int ScoreNoBackoff;
  uint64_t v31;
  signed __int32 v32;
  signed __int32 v33;
  uint64_t v34;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  int64x2_t *v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t *v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64x2_t v58;
  int64x2_t *v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t *v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  uint64_t v68;
  int64x2_t *v69;
  int64x2_t result;
  int64x2_t v71;
  int v72;
  SearchStats *v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int v92;
  __n128 v93;
  unint64_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int v97[3];

  v97[0] = a2;
  v95 = 0u;
  v96 = 0u;
  SnapTime::recordTime((SnapTime *)&v95, 1, 0, 0, 0);
  v93.n128_u64[0] = 0xFFFFFFFF00000000;
  v93.n128_u32[2] = -1;
  v93.n128_u16[6] = -2;
  v94 = 0;
  *((_DWORD *)this + 58) = a3;
  v10 = (signed __int32 *)((char *)this + 232);
  v11 = *((_DWORD *)this + 2);
  v12 = *((unsigned int *)this + 50);
  if ((_DWORD)v12)
  {
    v72 = a5;
    v73 = a4;
    for (i = 0; i < v12; ++i)
    {
      v14 = *((_QWORD *)this + 24);
      v15 = (int *)(v14 + 24 * i);
      v16 = v15[1];
      v17 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v17 + 160) != (_DWORD)v16)
      {
        if (*(_DWORD *)(v17 + 140) > (int)v16)
        {
          v18 = *v15;
          v19 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + 24 * i + 12))+ v18;
          v20 = *((_DWORD *)this + 58);
          if (v19 - v11 <= v20)
          {
            if (v20 > v19)
              *v10 = v19;
            v21 = (__n128 *)(*((_QWORD *)this + 24) + 24 * i);
            v22 = v21[1].n128_u64[0];
            v93 = *v21;
            v94 = v22;
            v93.n128_u32[0] = v19;
            FstSearchLateLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, &v93);
          }
        }
        v23 = v16;
        do
        {
          v24 = *((_QWORD *)this + 5);
          v25 = *(_QWORD *)(v24 + 152);
          v26 = *(_DWORD *)(v25 + 4 * v23);
          v27 = *(_DWORD *)(v25 + 4 * (v23 + 1));
          v28 = *(_DWORD *)(v24 + 140);
          if (v28 <= v27)
          {
            if (v28 <= (int)v16 && *((_BYTE *)this + 356) != 0)
            {
              v36 = (v26 & 0xFFFFF) <= 0xFFFF3 ? v26 & 0xFFFFF : v26 & 0xFFFFF | 0xF00000;
              if (v36 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v90);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v36, (DgnString *)&v90, v37, v38, v39, v40, v41);
                v46 = &unk_209A6C820;
                if (v90.i32[2])
                  v46 = (void *)v90.i64[0];
                xprintf("Seed from state %d score %d trace %d, %s\n", v42, v43, v44, v45, v16, *(unsigned int *)(*((_QWORD *)this + 24) + 24 * i), *(unsigned int *)(*((_QWORD *)this + 24) + 24 * i + 8), v46);
                MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((_QWORD *)this + 24) + 24 * i), *(_DWORD *)(*((_QWORD *)this + 24) + 24 * i + 20), *(_DWORD *)(*((_QWORD *)this + 24) + 24 * i + 8), v27);
                DgnString::~DgnString((DgnString *)&v90);
              }
            }
          }
          else
          {
            v29 = (v26 >> 20) & 0x3FF;
            ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v25 + 4 * v23));
            v31 = *((_QWORD *)this + 24) + 24 * i;
            v32 = ScoreNoBackoff + v29 + *(_DWORD *)v31;
            v33 = *((_DWORD *)this + 58);
            if (v32 - v11 <= v33)
            {
              if (v33 > v32)
                *v10 = v32;
              v34 = *(_QWORD *)(v31 + 16);
              v93 = *(__n128 *)v31;
              HIDWORD(v94) = HIDWORD(v34);
              v93.n128_u64[0] = __PAIR64__(v27, v32);
              v93.n128_u16[6] = v26;
              LODWORD(v94) = v34 + v29;
              FstSearchLateLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, &v93);
            }
          }
          v23 += 2;
        }
        while ((v26 & 0x80000000) == 0);
        v12 = *((unsigned int *)this + 50);
      }
    }
    a3 = *v10;
    a4 = v73;
    a5 = v72;
  }
  v92 = a3 + v11;
  if (*((_BYTE *)this + 356))
    MiniFst::updateFrame((char *)this + 240, (int *)this + 58, v11, a2);
  v90 = 0u;
  v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  v90 = vsubq_s64(v90, v95);
  v91 = vsubq_s64(v91, v96);
  v47 = (int64x2_t *)*((_QWORD *)this + 13);
  v48 = vaddq_s64(v47[1], v91);
  *v47 = vaddq_s64(*v47, v90);
  v47[1] = v48;
  v88 = 0u;
  v89 = 0u;
  SnapTime::recordTime((SnapTime *)&v88, 1, 0, 0, 0);
  FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v92);
  v86 = 0u;
  v87 = 0u;
  SnapTime::recordTime((SnapTime *)&v86, 1, 0, 0, 0);
  v49 = vsubq_s64(v86, v88);
  v50 = (int64x2_t *)*((_QWORD *)this + 13);
  v51 = v50[3];
  v52 = vaddq_s64(v50[2], v49);
  v86 = v49;
  v87 = vsubq_s64(v87, v89);
  v53 = vaddq_s64(v51, v87);
  v50[2] = v52;
  v50[3] = v53;
  v84 = 0u;
  v85 = 0u;
  SnapTime::recordTime((SnapTime *)&v84, 1, 0, 0, 0);
  v54 = *((_QWORD *)this + 24);
  v55 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 24) = v55;
  *((_QWORD *)this + 26) = v54;
  LODWORD(v54) = *((_DWORD *)this + 51);
  v56 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 25) = v56;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v54;
  v57 = *((unsigned int *)this + 6);
  if ((_DWORD)v57 && (_DWORD)v56 && v57 < v56)
    mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(v55, v57, v56);
  v82 = 0u;
  v83 = 0u;
  SnapTime::recordTime((SnapTime *)&v82, 1, 0, 0, 0);
  v58 = vsubq_s64(v82, v84);
  v59 = (int64x2_t *)*((_QWORD *)this + 13);
  v60 = v59[5];
  v61 = vaddq_s64(v59[4], v58);
  v82 = v58;
  v83 = vsubq_s64(v83, v85);
  v62 = vaddq_s64(v60, v83);
  v59[4] = v61;
  v59[5] = v62;
  v80 = 0u;
  v81 = 0u;
  SnapTime::recordTime((SnapTime *)&v80, 1, 0, 0, 0);
  VirtMap::setEmpty(*((_QWORD *)this + 14));
  v78 = 0u;
  v79 = 0u;
  SnapTime::recordTime((SnapTime *)&v78, 1, 0, 0, 0);
  v63 = vsubq_s64(v78, v80);
  v64 = (int64x2_t *)*((_QWORD *)this + 13);
  v65 = v64[9];
  v66 = vaddq_s64(v64[8], v63);
  v78 = v63;
  v79 = vsubq_s64(v79, v81);
  v67 = vaddq_s64(v65, v79);
  v64[8] = v66;
  v64[9] = v67;
  v76 = 0u;
  v77 = 0u;
  SnapTime::recordTime((SnapTime *)&v76, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  v68 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v68;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v68;
    if (*((_DWORD *)a4 + 2) > v68)
      LODWORD(v68) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v68;
  }
  if (*((_BYTE *)this + 356))
    FstSearchLateLatticeHash::seedFromMiniFst((uint64_t)this, v97);
  if (a5)
    FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, v92, a2, a4);
  *((_DWORD *)this + 56) = a2;
  v74 = 0u;
  v75 = 0u;
  SnapTime::recordTime((SnapTime *)&v74, 1, 0, 0, 0);
  v69 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v69[6], vsubq_s64(v74, v76));
  v71 = vaddq_s64(v69[7], vsubq_s64(v75, v77));
  v69[6] = result;
  v69[7] = v71;
  return result;
}

void sub_209823598(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t PelScoreCache::getScoreNoBackoff(PelScoreCache *this, uint64_t a2)
{
  int v4;
  uint64_t v6;

  if (*((_BYTE *)this + 494))
  {
    v4 = *(__int16 *)(*((_QWORD *)this + 8) + 2 * a2);
    if (v4 == 20046)
    {
      if (*((_BYTE *)this + 495))
      {
        v4 = 19999;
      }
      else if (*((_BYTE *)this + 492))
      {
        v6 = *(unsigned __int16 *)(**((_QWORD **)this + 3) + 2 * a2);
        if (*(_DWORD *)(*((_QWORD *)this + 18) + 4 * v6) == -1)
          PelScoreCache::computeGenScores(this, *(unsigned __int16 *)(**((_QWORD **)this + 3) + 2 * a2));
        v4 = PelScoreCache::computePelScoreFromGenScores(this, a2, v6);
      }
      else
      {
        v4 = PelScoreCache::computePelScore(this, a2);
      }
    }
  }
  else
  {
    v4 = PelScoreCache::computePelScoreNoCache(this, a2);
  }
  return (v4 - *((_DWORD *)this + 64));
}

uint64_t FstSearchLateLatticeHash::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[2];

  if (*(_BYTE *)(this + 356))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      v22 = this + 192;
      v23 = (_QWORD *)(this + 160);
      do
      {
        v6 = (int *)(*(_QWORD *)(v2 + 256) + v4);
        v7 = *v6;
        v9 = v6[4];
        v8 = v6[5];
        v10 = v6[6];
        v11 = v6[7];
        v12 = v6[2];
        v25[0] = 0;
        v25[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v13 = -2 - v12;
        if (v11 == 16777213)
        {
          v11 = 16777209;
          if (*(_DWORD *)(*v23 + 36 * v13) == 16777209)
            v13 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 16 * *(unsigned int *)(*v23 + 36 * v13 + 8) + 12);
        }
        v14 = *a2;
        v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v23, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        v16 = *(_QWORD *)(v2 + 160);
        v17 = v16 + 36 * v15;
        *(_DWORD *)v17 = v11;
        *(_DWORD *)(v17 + 4) = v14;
        *(_QWORD *)(v17 + 8) = 0xFFFFFFFFLL;
        *(_DWORD *)(v17 + 16) = v7;
        *(_DWORD *)(v17 + 20) = v13;
        *(_DWORD *)(v17 + 24) = v9;
        *(_DWORD *)(v17 + 28) = v8;
        *(_WORD *)(v17 + 32) = -2;
        v18 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v18 + 1;
        *(_DWORD *)(v16 + 36 * v18 + 12) = 1;
        v19 = *(unsigned int *)(v2 + 200);
        if (v19 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<CWIDAC>::reallocElts(v22, 1, 1);
          LODWORD(v19) = *(_DWORD *)(v2 + 200);
        }
        v20 = *(_QWORD *)(v2 + 192) + 24 * v19;
        *(_DWORD *)v20 = v7;
        *(_DWORD *)(v20 + 4) = v10;
        *(_DWORD *)(v20 + 8) = v18;
        *(_WORD *)(v20 + 12) = -2;
        *(_DWORD *)(v20 + 16) = v9;
        *(_DWORD *)(v20 + 20) = v8;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
        ++v5;
        v21 = *(_DWORD *)(v2 + 264);
        if (v21 >= *(_DWORD *)(v2 + 20))
          v21 = *(_DWORD *)(v2 + 20);
        v4 += 36;
      }
      while (v5 < v21);
    }
  }
  return this;
}

void sub_209823878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLateLatticeHash::vite(int64x2_t **this, int a2, signed __int32 a3, SearchStats *a4, int a5)
{
  int64x2_t *v6;
  int64x2_t result;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;

  FstSearchLateLatticeHash::advanceDeltas((FstSearchLateLatticeHash *)this, a2, a3, a4, a5);
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v9 = 0u;
  v10 = 0u;
  SnapTime::recordTime((SnapTime *)&v9, 1, 0, 0, 0);
  v6 = this[13];
  result = vaddq_s64(v6[14], vsubq_s64(v9, v11));
  v8 = vaddq_s64(v6[15], vsubq_s64(v10, v12));
  v6[14] = result;
  v6[15] = v8;
  return result;
}

int64x2_t FstSearchLateLatticeHash::reset(FstSearchLateLatticeHash *this)
{
  int64x2_t *v2;
  int64x2_t result;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;

  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 50) = 0;
  v7 = 0u;
  v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  v5 = 0u;
  v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  v2 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchLateLatticeHash::doFrame(int64x2_t **this, int a2, signed __int32 a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLateLatticeHash::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLateLatticeHash::beginTopRecPassSyncRecog(FstSearchLateLatticeHash *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((_BYTE *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLateLatticeHash::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLateLatticeHashBackoff::generateTraceTokensFromTraces((FstSearchLateLatticeHashBackoff *)this);
  FstSearchLateLatticeHash::generateTraceTokensForLateLattice((FstSearchLateLatticeHash *)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = this[13];
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

uint64_t FstSearchLateLatticeHash::generateTraceTokensForLateLattice(FstSearchLateLatticeHash *this)
{
  FstSearchLateLatticeHash *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int32 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _OWORD *v34;
  ArcGraph **v35;
  int v36;
  int v37;
  _BOOL4 v38;
  BOOL v39;
  _BOOL4 isLexPelPhnMatch;
  uint64_t v41;
  uint64_t v42;
  int32x2_t *v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  _OWORD *v62;
  void *v63;
  int v64;
  unsigned int v65;
  void *v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  _WORD *v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  __int128 *v91;
  uint64_t v92;
  char *v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  void *v100;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t *v105;
  int v106;
  int v107;
  int32x2_t *v108;
  int32x2_t *v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  void *v115;
  unsigned int v116;
  unsigned int v117;
  void *v118;
  unsigned int v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  __int16 v123;
  __int16 v124;
  int v125;
  _QWORD v126[2];
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  _QWORD v131[2];
  uint64_t v132;
  int v133;
  void *v134;

  v1 = this;
  v131[1] = 0;
  v132 = 0;
  v133 = 0;
  v131[0] = 0;
  FstSearchLateLatticeHashBackoff::getTraceTimeBoundaries((uint64_t)this, &v132, (uint64_t)v131);
  v129 = 0;
  v130 = 0;
  v127 = 0;
  v128 = 0;
  v126[0] = 0;
  v126[1] = 0;
  v125 = 1879048192;
  v2 = (*(uint64_t (**)(FstSearchLateLatticeHash *, uint64_t *, uint64_t *, int *, _QWORD *))(*(_QWORD *)v1 + 80))(v1, &v129, &v127, &v125, v126);
  v9 = *((_DWORD *)v1 + 7);
  v10 = *((_DWORD *)v1 + 2);
  v122 = -1;
  v124 = 256;
  v123 = *((_WORD *)v1 + 34);
  if (v2)
  {
    v120 = 0;
    v121 = 0;
    v11 = (uint64_t *)((char *)v1 + 160);
    v12 = *((unsigned int *)v1 + 42);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v105 = (uint64_t *)((char *)v1 + 160);
      v102 = v10;
      v103 = v9;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            --v12;
            v14 = *v11;
            if (*(_BYTE *)(v129 + v12))
              break;
            *(_DWORD *)(v14 + 36 * v12 + 8) = -1;
            if (!(_DWORD)v12)
              goto LABEL_77;
          }
          v15 = (unsigned int *)(v14 + 36 * v12);
          v16 = *v15;
          v17 = *((_QWORD *)v1 + 6);
          if (*(_DWORD *)(v17 + 388) > v16 && *(_BYTE *)(*(_QWORD *)(v17 + 104) + v16))
            v18 = *(_WORD *)(*(_QWORD *)(v17 + 72) + 2 * *(unsigned int *)(*(_QWORD *)(v17 + 48) + 4 * v16));
          else
            v18 = 0;
          v19 = *((_QWORD *)v1 + 11);
          v20 = *(_DWORD *)(v19 + 4 * v15[1]);
          v22 = v15[2];
          v21 = v15 + 2;
          v23 = *((_QWORD *)v1 + 22);
          v24 = *((_DWORD *)v1 + 3);
          v25 = *(_DWORD *)(v126[0] + 4 * v12);
          HIWORD(v122) = v18;
          v109 = (int32x2_t *)(v23 + 16 * v22);
          v26 = v109[1].u32[1];
          if ((v26 & 0x80000000) == 0)
            break;
          *v21 = v13;
          if (v13 == HIDWORD(v121))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
            v13 = v121;
          }
          *((_OWORD *)v120 + v13) = *(_OWORD *)v109->i8;
          v13 = v121 + 1;
          LODWORD(v121) = v121 + 1;
          *(_DWORD *)(*v11 + 36 * v12 + 12) = 1;
          if (!(_DWORD)v12)
            goto LABEL_77;
        }
        v110 = v12;
        v113 = v109[1].u32[1];
        v27 = v14 + 36 * v26;
        v28 = *(unsigned int *)(v27 + 4);
        v29 = (_DWORD)v28 ? *(unsigned int *)(v132 + 4 * (v28 - 1)) : 0;
        v114 = v24 + v125 - v25;
        v108 = (int32x2_t *)(v23 + 16 * *(unsigned int *)(v27 + 8));
        v107 = v20 + v109->i32[0] - *(_DWORD *)(v19 + 4 * v28) - v108->i32[0];
        v106 = v108->i32[0] - *(_DWORD *)(v131[0] + 4 * v28);
        v30 = v13;
        if (v29 < *(unsigned int *)(v132 + 4 * v28))
          break;
LABEL_42:
        if (v13 >= v30)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 150, (uint64_t)"fst/fstsrch", 2, (uint64_t)"%s", v7, v8, (char)&unk_209A6C820);
          v30 = v121;
        }
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>((char *)v120 + 16 * v13, v30 - v13, 16);
        v45 = v13 + 1;
        v46 = v121;
        if (v45 < v121)
        {
          v47 = 16 * (v13 + 1);
          v48 = v13;
          do
          {
            if (*(_DWORD *)((char *)v120 + v47 + 8) != *((_DWORD *)v120 + 4 * v48 + 2))
            {
              *((_OWORD *)v120 + ++v48) = *(_OWORD *)((char *)v120 + v47);
              v46 = v121;
            }
            ++v45;
            v47 += 16;
          }
          while (v45 < v46);
          LODWORD(v45) = v48 + 1;
        }
        v49 = (char *)v120;
        if (HIDWORD(v121) < v45)
        {
          v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v45, 16 * v46, 16 * v46, 1) >> 4;
          v49 = (char *)v118;
          v120 = v118;
          v46 = v121;
        }
        if (v46 < v45)
        {
          v50 = v45 - (unint64_t)v46;
          v51 = &v49[16 * v46];
          do
          {
            *(_OWORD *)v51 = xmmword_209A6C7C0;
            v51 += 16;
            --v50;
          }
          while (v50);
        }
        LODWORD(v121) = v45;
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(&v49[16 * v13], v45 - v13, 16);
        v52 = 16 * v13;
        v53 = v114;
        if (*(_DWORD *)((char *)v120 + v52) + v10 < v114)
          v53 = *((_DWORD *)v120 + 4 * v13) + v10;
        v54 = v121;
        v55 = *((_DWORD *)v1 + 5) + v13;
        if (v121 < v55)
          v55 = v121;
        v56 = *((_QWORD *)v1 + 20);
        *(_DWORD *)(v56 + 36 * v110 + 8) = v13;
        if (v13 >= v55)
        {
          v60 = v13;
        }
        else
        {
          while (*(_DWORD *)((char *)v120 + v52) <= v53)
          {
            v57 = *(unsigned int *)((char *)v120 + v52 + 12);
            if ((v57 & 0x80000000) == 0)
            {
              *(_BYTE *)(v129 + v57) = 1;
              v58 = (_DWORD)v57 == (_DWORD)v113 ? 0 : v106 + v9;
              v59 = v58 + v107 + *(_DWORD *)(v126[0] + 4 * v110);
              if (*(_DWORD *)(v126[0] + 4 * v57) > v59)
                *(_DWORD *)(v126[0] + 4 * v57) = v59;
            }
            ++v13;
            v52 += 16;
            if (v55 == v13)
            {
              v13 = v55;
              break;
            }
          }
          v56 = *v11;
          v60 = *(_DWORD *)(*v11 + 36 * v110 + 8);
          v54 = v121;
        }
        *(_DWORD *)(v56 + 36 * v110 + 12) = v13 - v60;
        if (HIDWORD(v121) < v13)
        {
          v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v13, 16 * v54, 16 * v54, 1) >> 4;
          v120 = v118;
          v54 = v121;
        }
        if (v54 < v13)
        {
          v61 = v13 - (unint64_t)v54;
          v62 = (char *)v120 + 16 * v54;
          do
          {
            *v62++ = xmmword_209A6C7C0;
            --v61;
          }
          while (v61);
        }
        LODWORD(v121) = v13;
        if (!v110)
        {
LABEL_77:
          v63 = v120;
          v64 = HIDWORD(v121);
          v65 = *((_DWORD *)v1 + 42);
          goto LABEL_79;
        }
      }
      v104 = v12;
      v112 = v106 + v9;
      v111 = v20 + v109->i32[0] - v108->i32[0];
      v31 = 36 * v29;
      while (1)
      {
        if (v113 == v29)
          v32 = 0;
        else
          v32 = v112;
        v33 = *((_QWORD *)v1 + 20);
        v34 = (_OWORD *)(*((_QWORD *)v1 + 22) + 16 * *(unsigned int *)(v33 + v31 + 8));
        if ((int)(v111 + v32 + *(_DWORD *)v34) <= v114)
        {
          v35 = (ArcGraph **)v1;
          v36 = *(_DWORD *)(v33 + 36 * v110);
          v37 = *(_DWORD *)(v33 + v31);
          v38 = v37 != 16777209
             && ArcGraph::lexToCWID(v35[5], *(_DWORD *)(v33 + v31), v3, v4, v5, v6, v7, v8) >> 25 != 126;
          if (v36 == 16777209)
          {
            v1 = (FstSearchLateLatticeHash *)v35;
            if (v38)
              goto LABEL_35;
          }
          else
          {
            v39 = v36 == 16777214 || v37 == 16777213;
            v1 = (FstSearchLateLatticeHash *)v35;
            if (!v39)
            {
LABEL_35:
              isLexPelPhnMatch = FstSearchLateLatticeHashBackoff::isLexPelPhnMatch((uint64_t)v1, v29, (uint64_t)&v122);
              v1 = (FstSearchLateLatticeHash *)v35;
              if (isLexPelPhnMatch)
              {
                v41 = v121;
                if (v121 == (unint64_t)HIDWORD(v121))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
                  v41 = v121;
                  v1 = (FstSearchLateLatticeHash *)v35;
                }
                *((_OWORD *)v120 + v41) = *v34;
                v42 = v121;
                LODWORD(v121) = v121 + 1;
                v43 = (int32x2_t *)((char *)v120 + 16 * v42);
                v43[1].i32[1] = v29;
                *v43 = vadd_s32(vsub_s32(vadd_s32(*v109, vdup_n_s32(v32)), *v108), *v43);
                v44 = *(_DWORD *)(*v105 + 36 * v110);
                if (v44 != 16777209)
                  v43[1].i32[0] = v44 + 2 * v43[1].i32[0] + 1;
              }
            }
          }
        }
        ++v29;
        v31 += 36;
        if (v29 >= *(unsigned int *)(v132 + 4 * v28))
        {
          v30 = v121;
          v12 = v104;
          v11 = v105;
          v10 = v102;
          v9 = v103;
          goto LABEL_42;
        }
      }
    }
    v65 = 0;
    v13 = 0;
    v64 = 0;
    v63 = 0;
LABEL_79:
    v66 = (void *)*((_QWORD *)v1 + 22);
    *((_QWORD *)v1 + 22) = v63;
    v120 = v66;
    v67 = *((_DWORD *)v1 + 47);
    *((_DWORD *)v1 + 46) = v13;
    *((_DWORD *)v1 + 47) = v64;
    LODWORD(v121) = 0;
    HIDWORD(v121) = v67;
    v119 = 0;
    v118 = 0;
    if (v65)
    {
      v68 = MemChunkAlloc(4 * v65, 0);
      v118 = v68;
      v119 = v65;
      if (*((_DWORD *)v1 + 42))
      {
        v69 = 0;
        v70 = 0;
        v65 = 0;
        do
        {
          v71 = (__int128 *)(*v11 + v69);
          if (*((_DWORD *)v71 + 2) == -1)
          {
            *((_DWORD *)v68 + v70) = -1;
          }
          else
          {
            if (v70 != v65)
            {
              v72 = *v11 + 36 * v65;
              v73 = *v71;
              v74 = v71[1];
              *(_WORD *)(v72 + 32) = *((_WORD *)v71 + 16);
              *(_OWORD *)v72 = v73;
              *(_OWORD *)(v72 + 16) = v74;
            }
            *((_DWORD *)v68 + v70) = v65++;
          }
          ++v70;
          v75 = *((unsigned int *)v1 + 42);
          v69 += 36;
        }
        while (v70 < v75);
        v76 = *((_DWORD *)v1 + 43);
        if (v65 > v76)
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v11, v65 - v76, 0);
          LODWORD(v75) = *((_DWORD *)v1 + 42);
        }
        if (v75 < v65)
        {
          v77 = v65 - (unint64_t)v75;
          v78 = (_WORD *)(*v11 + 36 * v75 + 32);
          do
          {
            *((_OWORD *)v78 - 2) = xmmword_209A6C7D0;
            *((_OWORD *)v78 - 1) = xmmword_209A6C7E0;
            *v78 = -2;
            v78 += 18;
            --v77;
          }
          while (v77);
        }
      }
      else
      {
        v65 = 0;
      }
    }
    *((_DWORD *)v1 + 42) = v65;
    v79 = *((unsigned int *)v1 + 46);
    if ((_DWORD)v79)
    {
      v80 = v118;
      v81 = (_DWORD *)(*((_QWORD *)v1 + 22) + 12);
      do
      {
        v82 = *v81;
        if ((v82 & 0x80000000) == 0)
          *v81 = v80[v82];
        v81 += 4;
        --v79;
      }
      while (v79);
    }
    DgnArray<FstSearchLateLatticeHashBackoffActiveToken>::DgnArray(&v115, *((unsigned int *)v1 + 50));
    v83 = *((unsigned int *)v1 + 50);
    if ((_DWORD)v83)
    {
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v87 = v118;
      v88 = v115;
      do
      {
        v89 = *((unsigned int *)v1 + 38);
        if (v86 < v89 && v85 == v89)
          *((_DWORD *)v1 + 38) = v86;
        v91 = (__int128 *)(*((_QWORD *)v1 + 24) + v84);
        v92 = *((unsigned int *)v91 + 2);
        if ((_DWORD)v92 == -1 || v87[v92] != -1)
        {
          v93 = (char *)&v88[6 * v86];
          v94 = *v91;
          *((_QWORD *)v93 + 2) = *((_QWORD *)v91 + 2);
          *(_OWORD *)v93 = v94;
          v95 = *(unsigned int *)(*((_QWORD *)v1 + 24) + v84 + 8);
          if ((_DWORD)v95 != -1)
            LODWORD(v95) = v87[v95];
          v88[6 * v86++ + 2] = v95;
          v83 = *((unsigned int *)v1 + 50);
        }
        ++v85;
        v84 += 24;
      }
      while (v85 < v83);
    }
    else
    {
      v86 = 0;
    }
    if (v86 < *((_DWORD *)v1 + 38))
      *((_DWORD *)v1 + 38) = v86;
    LODWORD(v96) = v117;
    v97 = (char *)v115;
    if (v117 < v86)
    {
      v134 = 0;
      v96 = realloc_array(v115, &v134, 24 * v86, 24 * v116, 24 * v116, 1) / 0x18;
      v97 = (char *)v134;
    }
    if (v116 < v86)
    {
      v98 = v86 - (unint64_t)v116;
      v99 = &v97[24 * v116 + 16];
      do
      {
        *((_QWORD *)v99 - 2) = 0xFFFFFFFF00000000;
        *((_DWORD *)v99 - 2) = -1;
        *((_WORD *)v99 - 2) = -2;
        *(_QWORD *)v99 = 0;
        v99 += 24;
        --v98;
      }
      while (v98);
    }
    v100 = (void *)*((_QWORD *)v1 + 24);
    *((_QWORD *)v1 + 24) = v97;
    v115 = v100;
    LODWORD(v100) = *((_DWORD *)v1 + 51);
    *((_DWORD *)v1 + 50) = v86;
    *((_DWORD *)v1 + 51) = v96;
    v116 = 0;
    v117 = v100;
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v115);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v118);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v120);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v126);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v127);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v129);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v131);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v132);
}

void sub_20982447C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a25);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 160);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 128);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 112);
  _Unwind_Resume(a1);
}

void FstSearchLateLatticeHash::printSize(FstSearchLateLatticeHash *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 24 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A6C820, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 16 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((_DWORD *)this + 50);
  v65 = 22 * v64;
  if (v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 22 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((_DWORD *)this + 54);
  v75 = 22 * v74;
  if (v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 22 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 240, 0);
  v99 = sizeObject((uint64_t)this + 240, 1);
  v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_209824C44(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLateLatticeHash::findBestPath(uint64_t a1, uint64_t **a2, uint64_t a3, int *a4, uint64_t a5)
{
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  unsigned int BestTrace;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;

  v10 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v10)
    v11 = *(_DWORD *)(a3 + 8) == 0;
  else
    v11 = 0;
  if (v11)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v10;
  }
  if ((_DWORD)v10)
    v12 = *((_DWORD *)a2 + 2) == 0;
  else
    v12 = 0;
  if (v12)
  {
    *a2 = MemChunkAlloc(v10, 0);
    *((_DWORD *)a2 + 2) = v10;
  }
  else if (!(_DWORD)v10)
  {
    goto LABEL_16;
  }
  v13 = 0;
  do
  {
    *((_BYTE *)*a2 + v13) = 0;
    *(_BYTE *)(*(_QWORD *)a3 + v13++) = 0;
  }
  while (v10 != v13);
LABEL_16:
  BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
  {
    v20 = 1879048192;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 160);
    v16 = v15 + 36 * BestTrace;
    v18 = *(_DWORD *)(v16 + 4);
    v17 = (int *)(v16 + 4);
    v19 = v17[3] + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v18);
    *a4 = v19;
    v20 = 1879048192;
    if (v19 != 1879048192)
    {
      v21 = *(_DWORD *)(a1 + 168);
      if (v21)
      {
        v22 = v21 - 1;
        v23 = 1879048192;
        v24 = *v17;
        do
        {
          v25 = v22;
          if (*(_DWORD *)(v15 + 36 * v22 + 4) == v24
            && *(_DWORD *)(v15 + 36 * v22) == 16777213
            && !*((_BYTE *)*a2 + v22))
          {
            *((_BYTE *)*a2 + v22) = 2;
            *(_BYTE *)(*(_QWORD *)a3 + v22) = 1;
            v15 = *(_QWORD *)(a1 + 160);
            if (v23 >= *(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                      + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4)))
              v23 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                  + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4));
          }
          --v22;
        }
        while (v25);
        v19 = *a4;
        v26 = *(_DWORD *)(a1 + 168);
      }
      else
      {
        v26 = 0;
        v23 = 1879048192;
      }
      v27 = *(_DWORD *)(a1 + 28);
      v28 = __OFSUB__(v19, v23);
      v29 = v19 - v23;
      if ((v29 < 0) ^ v28 | (v29 == 0))
        v30 = 0;
      else
        v30 = v29;
      v31 = *(_DWORD *)(a5 + 12);
      v32 = v26;
      if (v26 > v31)
      {
        DgnPrimArray<unsigned int>::reallocElts(a5, v26 - v31, 0);
        v32 = *(_DWORD *)(a1 + 168);
      }
      *(_DWORD *)(a5 + 8) = v26;
      v20 = *a4;
      if (v32)
      {
        v33 = 0;
        v34 = 0;
        v35 = v20 - (v30 + v27) + *(_DWORD *)(a1 + 12);
        do
        {
          v36 = *a2;
          v37 = *((unsigned __int8 *)*a2 + v34);
          if (v37 == 2)
          {
            v38 = *(_QWORD *)a5;
            if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + v33 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + v33 + 4)) <= v35)
            {
              *(_DWORD *)(v38 + 4 * v34) = v30 + v27;
              *((_BYTE *)v36 + v34) = 1;
            }
            else
            {
              *(_DWORD *)(v38 + 4 * v34) = 1879048192;
              *((_BYTE *)v36 + v34) = 0;
            }
          }
          else if (v37 == 1)
          {
            *(_DWORD *)(*(_QWORD *)a5 + 4 * v34) = 0;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a5 + 4 * v34) = 1879048192;
          }
          ++v34;
          v33 += 36;
        }
        while (v34 < *(unsigned int *)(a1 + 168));
        v20 = *a4;
      }
    }
  }
  return v20 != 1879048192;
}

uint64_t FstSearchLateLatticeHash::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchLateLatticeHashBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  v23 = (uint64_t)v9;
  v24 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v24)
  {
    v11 = 0;
    v12 = v28;
    do
    {
      if (*(_BYTE *)(*a3 + v11))
      {
        v13 = *(_QWORD *)(a1 + 160);
        if ((*(_DWORD *)(v13 + 36 * v11) - 16777209) >= 2 && *(int *)(v13 + 36 * v11 + 12) >= 1)
        {
          v14 = *(_DWORD *)(v13 + 36 * v11 + 8);
          do
          {
            v15 = *(_QWORD *)(a1 + 176) + 16 * v14;
            v16 = *(unsigned int *)(v15 + 12);
            if ((_DWORD)v16 == -1)
              v17 = 0;
            else
              v17 = v12 - *((_DWORD *)v29 + v16);
            v18 = *(unsigned int *)(v27 + 4 * v17);
            if (*(_BYTE *)(*a4 + v11))
              FstSearchLateLatticeHash::createLatticeLink(a1, v11, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v11))), a2, v10, a5);
            v19 = v26[0];
            if (*(_DWORD *)(v26[0] + 16 * v11 + 8))
            {
              v20 = 0;
              do
              {
                v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v11) + 4 * v20);
                FstSearchLateLatticeHash::createLatticeLink(a1, v11, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v21))), a2, v10, a5);
                ++v20;
                v19 = v26[0];
              }
              while (v20 < *(unsigned int *)(v26[0] + 16 * v11 + 8));
            }
            ++v14;
          }
          while (v14 < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 36 * v11 + 12)
                      + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 36 * v11 + 8));
        }
      }
      ++v11;
    }
    while (v11 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_209825170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLateLatticeHash::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _QWORD v39[2];
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  __int128 v54;
  _DWORD v55[2];
  __int128 v56;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0 || (v17 = v16 + 36 * a4, v18 = *(_DWORD *)(v17 + 12), v18 < 1))
  {
    v22 = 0;
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 8);
    v20 = v18 + v19;
    do
    {
      v21 = *(_QWORD *)(a1 + 176);
      if (*(_DWORD *)(v21 + 16 * v19 + 12) == a2)
        v22 = (_DWORD *)(v21 + 16 * v19);
      else
        v22 = 0;
      ++v19;
    }
    while ((int)v19 < v20 && !v22);
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 36 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v55);
  v23 = a3[1];
  if (v22)
  {
    v23 += v22[1];
    v24 = *v22 + *a3;
  }
  else
  {
    v24 = *a3;
  }
  if (v55[0] >> 25 == 126)
  {
    v25 = 0;
    v26 = v23;
  }
  else
  {
    v25 = *(_DWORD *)(a1 + 136);
    v26 = v23 - v25;
  }
  if ((v12 & 0x80000000) != 0)
  {
    v27 = 0;
  }
  else
  {
    v27 = *(_DWORD *)(a1 + 140);
    v26 -= v27;
  }
  v28 = v24 - v23;
  v29 = a3[3];
  v30 = *(_QWORD *)(a1 + 160);
  if (v29 == -1)
  {
    v32 = 0;
    if (a9)
      goto LABEL_26;
  }
  else
  {
    v31 = *(_DWORD *)(v30 + 36 * v29 + 4);
    if (a9)
    {
      if (v31 >= 1)
        --v31;
      v32 = (v31 >> 1) + 1;
LABEL_26:
      v33 = *(_DWORD *)(v30 + 36 * a2 + 4);
      if (v33 >= 1)
        --v33;
      v34 = v33 >> 1;
      v35 = (v33 >> 1) - v32 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v36 = *(_DWORD *)(v30 + 36 * v12 + 4);
        if (v36 >= 1)
          --v36;
        v37 = v36 >> 1;
        goto LABEL_35;
      }
LABEL_36:
      v38 = 0;
      goto LABEL_37;
    }
    v32 = v31 + 1;
  }
  v34 = *(_DWORD *)(v30 + 36 * a2 + 4);
  v35 = v34 - v32 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_36;
  v37 = *(_DWORD *)(v30 + 36 * v12 + 4);
LABEL_35:
  v38 = v37 - v34;
LABEL_37:
  v40 = v32;
  v41 = v35;
  v42 = v38;
  v43 = v26;
  v44 = 0;
  v45 = v25;
  v46 = v28;
  v47 = 0;
  v48 = v27;
  v49 = xmmword_209A6C7F0;
  v50 = 0;
  v51 = -1;
  v39[0] = &off_24C2149F8;
  v39[1] = 0xBFF0000000000000;
  v52 = v55[0];
  v53 = v55[1];
  v54 = v56;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v39);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v39);
}

void sub_2098253E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLatticeHash::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 356))
    return MiniFst::beginTopFstSyncRecog(this + 240);
  return this;
}

uint64_t FstSearchLateLatticeHash::endTopRecSyncRecog(FstSearchLateLatticeHash *this)
{
  uint64_t result;

  VirtMap::setEmpty(*((_QWORD *)this + 14));
  result = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return result;
}

uint64_t FstSearchLateLatticeHash::getBestExitScore(FstSearchLateLatticeHash *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 57) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 50);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 24 * v1;
  do
  {
    v7 = *((_QWORD *)this + 24) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 36 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 24;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 36 * v13 + 16);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 36 * v12 + 20);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_209825584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLatticeHash::getBestScoreMaybeUpdateFstNode(FstSearchLateLatticeHash *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 50);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 24);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 6;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLateLatticeHash::seedTheory(FstSearchLateLatticeHash *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 36 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_QWORD *)(v12 + 8) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 16) = a2;
    *(_QWORD *)(v12 + 20) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 28) = 0;
    *(_WORD *)(v12 + 32) = -2;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 192, 1, 1);
    v14 = *((_DWORD *)this + 50);
  }
  v15 = *((_QWORD *)this + 24) + 24 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_QWORD *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLateLatticeHash::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 228);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 36 * v8);
    for (i = v10[5]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 36 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 36 * v8 + 16);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 36 * v16);
      i = v10[5];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLateLatticeHash::checkSearchParametersValidityForArcGraph(FstSearchLateLatticeHash *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLateLatticeHash::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchLateLatticeHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 36 * v24;
  return (*(_DWORD *)(v22 + 16) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_209825CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLatticeHashBackoff::generateNullTraces(unint64_t this, int a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v3 = *(unsigned int *)(this + 200);
  if (v3 > a3)
  {
    v5 = this;
    v6 = this + 160;
    v7 = this + 176;
    v8 = a3;
    v9 = *(_QWORD *)(this + 192);
    v10 = 28 * a3;
    do
    {
      if ((*(_DWORD *)(v9 + v10 + 24) & 0x80000000) == 0)
      {
        v11 = *(_DWORD *)(v5 + 184);
        v12 = *(unsigned int *)(v5 + 168);
        if (v12 == *(_DWORD *)(v5 + 172))
        {
          this = DgnArray<DgnPrimArray<double>>::reallocElts(v6, 1, 1);
          v12 = *(unsigned int *)(v5 + 168);
        }
        v13 = (_DWORD *)(*(_QWORD *)(v5 + 160) + 16 * v12);
        *v13 = 16777210;
        v13[1] = a2;
        v13[2] = v11;
        v13[3] = 0;
        v14 = *(_DWORD *)(v5 + 168) + 1;
        *(_DWORD *)(v5 + 168) = v14;
        v15 = *(_DWORD *)(v5 + 184);
        if (v15 == *(_DWORD *)(v5 + 188))
        {
          this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v7, 1, 1);
          v15 = *(_DWORD *)(v5 + 184);
          v14 = *(_DWORD *)(v5 + 168);
        }
        v16 = *(_QWORD *)(v5 + 176) + 20 * v15;
        *(_DWORD *)(v5 + 184) = v15 + 1;
        v9 = *(_QWORD *)(v5 + 192);
        v17 = v9 + v10;
        *(_DWORD *)v16 = *(_DWORD *)(v9 + v10);
        *(_QWORD *)&v18 = *(_QWORD *)(v9 + v10 + 16);
        DWORD2(v18) = *(_DWORD *)(v9 + v10 + 8);
        HIDWORD(v18) = *(_DWORD *)(v9 + v10 + 24);
        *(_OWORD *)(v16 + 4) = v18;
        *(_DWORD *)(v17 + 24) = -1;
        *(_DWORD *)(v17 + 8) = v14 - 1;
        v3 = *(unsigned int *)(v5 + 200);
      }
      ++v8;
      v10 += 28;
    }
    while (v8 < v3);
  }
  return this;
}

int64x2_t FstSearchLatticeHashBackoff::advanceDeltas(FstSearchLatticeHashBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v10;
  unint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int ScoreAllowBackoff_updateNodeInSequence;
  int v19;
  _OWORD *v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  _OWORD *v32;
  __int128 v33;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  int64x2_t *v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t *v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int64x2_t v57;
  int64x2_t *v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t *v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  uint64_t v67;
  int64x2_t *v68;
  int64x2_t result;
  int64x2_t v70;
  int v71;
  SearchStats *v72;
  int *v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int v92;
  _BYTE v93[28];
  int64x2_t v94;
  int64x2_t v95;
  int v96[5];

  v96[0] = a2;
  v94 = 0u;
  v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  *(_QWORD *)v93 = 0xFFFFFFFF00000000;
  *(_DWORD *)&v93[8] = -1;
  *(_WORD *)&v93[12] = -2;
  *(_QWORD *)&v93[16] = 0;
  *(_DWORD *)&v93[24] = -1;
  *((_DWORD *)this + 58) = a3;
  v10 = *((_DWORD *)this + 2);
  v73 = (int *)((char *)this + 232);
  v11 = *((unsigned int *)this + 50);
  if ((_DWORD)v11)
  {
    v71 = a5;
    v72 = a4;
    for (i = 0; i < v11; ++i)
    {
      v13 = *((_QWORD *)this + 24);
      v14 = v13 + 28 * i;
      v15 = *(unsigned int *)(v14 + 4);
      v16 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v16 + 160) != (_DWORD)v15)
      {
        if (*(_DWORD *)(v16 + 140) > (int)v15)
        {
          v17 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000
              ? 5000
              : *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
          ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v13 + 28 * i + 12), *(_DWORD *)v14, v17);
          v19 = *((_DWORD *)this + 58);
          if (ScoreAllowBackoff_updateNodeInSequence - v10 <= v19)
          {
            if (v19 > ScoreAllowBackoff_updateNodeInSequence)
              *v73 = ScoreAllowBackoff_updateNodeInSequence;
            v20 = (_OWORD *)(*((_QWORD *)this + 24) + 28 * i);
            v21 = *(_OWORD *)((char *)v20 + 12);
            *(_OWORD *)v93 = *v20;
            *(_OWORD *)&v93[12] = v21;
            *(_DWORD *)v93 = ScoreAllowBackoff_updateNodeInSequence;
            FstSearchLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, (int *)v93);
          }
        }
        v22 = v15;
        do
        {
          v23 = *((_QWORD *)this + 5);
          v24 = *(_QWORD *)(v23 + 152);
          v25 = *(_DWORD *)(v24 + 4 * v22);
          v26 = *(_DWORD *)(v24 + 4 * (v22 + 1));
          v27 = *(_DWORD *)(v23 + 140);
          if (v27 <= v26)
          {
            if (v27 <= (int)v15 && *((_BYTE *)this + 356) != 0)
            {
              v35 = (v25 & 0xFFFFF) <= 0xFFFF3 ? v25 & 0xFFFFF : v25 & 0xFFFFF | 0xF00000;
              if (v35 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v90);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v35, (DgnString *)&v90, v36, v37, v38, v39, v40);
                v45 = &unk_209A6C820;
                if (v90.i32[2])
                  v45 = (void *)v90.i64[0];
                xprintf("Seed from state %d score %d trace %d, %s\n", v41, v42, v43, v44, v15, *(unsigned int *)(*((_QWORD *)this + 24) + 28 * i), *(unsigned int *)(*((_QWORD *)this + 24) + 28 * i + 8), v45);
                MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((_QWORD *)this + 24) + 28 * i), *(_DWORD *)(*((_QWORD *)this + 24) + 28 * i + 20), *(_DWORD *)(*((_QWORD *)this + 24) + 28 * i + 8), v26);
                DgnString::~DgnString((DgnString *)&v90);
              }
            }
          }
          else
          {
            v28 = (v25 >> 20) & 0x3FF;
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000)
              v29 = 5000;
            else
              v29 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
            v30 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v24 + 4 * v22), *(_DWORD *)(*((_QWORD *)this + 24) + 28 * i) + v28, v29);
            v31 = *((_DWORD *)this + 58);
            if (v30 - v10 <= v31)
            {
              if (v31 > v30)
                *v73 = v30;
              v32 = (_OWORD *)(*((_QWORD *)this + 24) + 28 * i);
              v33 = *(_OWORD *)((char *)v32 + 12);
              *(_OWORD *)v93 = *v32;
              *(_OWORD *)&v93[12] = v33;
              *(_DWORD *)v93 = v30;
              *(_DWORD *)&v93[4] = v26;
              *(_WORD *)&v93[12] = v25;
              *(_DWORD *)&v93[16] = DWORD1(v33) + v28;
              FstSearchLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, (int *)v93);
            }
          }
          v22 += 2;
        }
        while ((v25 & 0x80000000) == 0);
        v11 = *((unsigned int *)this + 50);
      }
    }
    a3 = *v73;
    a4 = v72;
    a5 = v71;
  }
  v92 = a3 + v10;
  if (*((_BYTE *)this + 356))
    MiniFst::updateFrame((char *)this + 240, v73, v10, a2);
  v90 = 0u;
  v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  v90 = vsubq_s64(v90, v94);
  v91 = vsubq_s64(v91, v95);
  v46 = (int64x2_t *)*((_QWORD *)this + 13);
  v47 = vaddq_s64(v46[1], v91);
  *v46 = vaddq_s64(*v46, v90);
  v46[1] = v47;
  v88 = 0u;
  v89 = 0u;
  SnapTime::recordTime((SnapTime *)&v88, 1, 0, 0, 0);
  FstSearchLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v92);
  v86 = 0u;
  v87 = 0u;
  SnapTime::recordTime((SnapTime *)&v86, 1, 0, 0, 0);
  v48 = vsubq_s64(v86, v88);
  v49 = (int64x2_t *)*((_QWORD *)this + 13);
  v50 = v49[3];
  v51 = vaddq_s64(v49[2], v48);
  v86 = v48;
  v87 = vsubq_s64(v87, v89);
  v52 = vaddq_s64(v50, v87);
  v49[2] = v51;
  v49[3] = v52;
  v84 = 0u;
  v85 = 0u;
  SnapTime::recordTime((SnapTime *)&v84, 1, 0, 0, 0);
  v53 = *((_QWORD *)this + 24);
  v54 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 24) = v54;
  *((_QWORD *)this + 26) = v53;
  LODWORD(v53) = *((_DWORD *)this + 51);
  v55 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 25) = v55;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v53;
  v56 = *((unsigned int *)this + 6);
  if ((_DWORD)v56 && (_DWORD)v55 && v56 < v55)
    mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(v54, v56, v55);
  FstSearchLatticeHashBackoff::generateNullTraces((unint64_t)this, a2, 0);
  v82 = 0u;
  v83 = 0u;
  SnapTime::recordTime((SnapTime *)&v82, 1, 0, 0, 0);
  v57 = vsubq_s64(v82, v84);
  v58 = (int64x2_t *)*((_QWORD *)this + 13);
  v59 = v58[5];
  v60 = vaddq_s64(v58[4], v57);
  v82 = v57;
  v83 = vsubq_s64(v83, v85);
  v61 = vaddq_s64(v59, v83);
  v58[4] = v60;
  v58[5] = v61;
  v80 = 0u;
  v81 = 0u;
  SnapTime::recordTime((SnapTime *)&v80, 1, 0, 0, 0);
  VirtMap::setEmpty(*((_QWORD *)this + 14));
  v78 = 0u;
  v79 = 0u;
  SnapTime::recordTime((SnapTime *)&v78, 1, 0, 0, 0);
  v62 = vsubq_s64(v78, v80);
  v63 = (int64x2_t *)*((_QWORD *)this + 13);
  v64 = v63[9];
  v65 = vaddq_s64(v63[8], v62);
  v78 = v62;
  v79 = vsubq_s64(v79, v81);
  v66 = vaddq_s64(v64, v79);
  v63[8] = v65;
  v63[9] = v66;
  v76 = 0u;
  v77 = 0u;
  SnapTime::recordTime((SnapTime *)&v76, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  v67 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v67;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v67;
    if (*((_DWORD *)a4 + 2) > v67)
      LODWORD(v67) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v67;
  }
  if (*((_BYTE *)this + 356))
    FstSearchLatticeHashBackoff::seedFromMiniFst((uint64_t)this, v96);
  if (a5)
    FstSearchLatticeHashBackoff::propagateNulls(this, v92, a2, a4);
  *((_DWORD *)this + 56) = a2;
  v74 = 0u;
  v75 = 0u;
  SnapTime::recordTime((SnapTime *)&v74, 1, 0, 0, 0);
  v68 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v68[6], vsubq_s64(v74, v76));
  v70 = vaddq_s64(v68[7], vsubq_s64(v75, v77));
  v68[6] = result;
  v68[7] = v70;
  return result;
}

void sub_2098263D4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

__n128 FstSearchLatticeHashBackoff::maybeInsertHashedToken(uint64_t a1, int *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  __n128 result;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  int v37;
  unsigned int v38;
  _DWORD *v39;
  int v40;
  int v41;
  int v42;
  _DWORD *v43;
  int v44;
  int v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v4 = a2[1];
  v5 = v4 >> 6;
  v6 = v4 & 0x3F;
  v7 = *(uint64_t **)(a1 + 112);
  v8 = v7[2];
  v9 = *(_QWORD **)(v8 + 8 * v5);
  if (!v9)
  {
    v10 = *((unsigned int *)v7 + 12);
    v11 = *((unsigned int *)v7 + 13);
    v12 = *v7;
    if (v10 >= v11)
    {
      v13 = v12 + 16 * v11;
      v15 = *(_DWORD *)(v13 + 8);
      v14 = (_DWORD *)(v13 + 8);
      if (!v15)
      {
        *(_QWORD *)(v12 + 16 * v11) = MemChunkAlloc(0x100uLL, 0);
        *v14 = 64;
        v12 = *v7;
        v8 = v7[2];
        LODWORD(v10) = *((_DWORD *)v7 + 12);
        v11 = *((unsigned int *)v7 + 13);
      }
      *(_QWORD *)(v8 + 8 * v5) = v12 + 16 * v11;
      *((_DWORD *)v7 + 13) = v11 + 1;
    }
    else
    {
      *(_QWORD *)(v8 + 8 * v5) = v12 + 16 * v10;
    }
    *((_DWORD *)v7 + 12) = v10 + 1;
    v16 = *(_QWORD *)(v7[2] + 8 * v5);
    memset(*(void **)v16, 255, 4 * *(unsigned int *)(v16 + 8));
    v18 = *((_DWORD *)v7 + 10);
    if (v18 == *((_DWORD *)v7 + 11))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v7 + 4), 1, 1);
      v18 = *((_DWORD *)v7 + 10);
    }
    *(_DWORD *)(v7[4] + 4 * v18) = v5;
    ++*((_DWORD *)v7 + 10);
    v9 = *(_QWORD **)(v7[2] + 8 * v5);
  }
  v19 = *(unsigned int *)(*v9 + 4 * v6);
  if ((_DWORD)v19 == -1)
  {
    *(_DWORD *)(*v9 + 4 * v6) = *(_DWORD *)(a1 + 216);
    a2[6] = -1;
    v20 = *(_DWORD *)(a1 + 216);
    if (v20 == *(_DWORD *)(a1 + 220))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(a1 + 208, 1, 1);
      v20 = *(_DWORD *)(a1 + 216);
    }
    v21 = *(_QWORD *)(a1 + 208) + 28 * v20;
    result = *(__n128 *)a2;
    *(_OWORD *)(v21 + 12) = *(_OWORD *)(a2 + 3);
    *(__n128 *)v21 = result;
    ++*(_DWORD *)(a1 + 216);
    return result;
  }
  v22 = a2[5];
  v23 = *(_QWORD *)(a1 + 208);
  v24 = (int *)(v23 + 28 * v19);
  if (v22 == v24[5])
  {
    if (*v24 <= *a2)
      return result;
LABEL_16:
    result = *(__n128 *)a2;
    *(_OWORD *)(v24 + 3) = *(_OWORD *)(a2 + 3);
    *(__n128 *)v24 = result;
    return result;
  }
  v25 = v19 ^ 0xFFFFFFFFLL;
  v26 = *v24;
  v27 = v23 + 28 * v19;
  v30 = *(_DWORD *)(v27 + 24);
  v28 = (_DWORD *)(v27 + 24);
  v29 = v30;
  if ((v30 & 0x80000000) != 0)
  {
    v32 = 1;
    v34 = *v24;
LABEL_25:
    if (v32 >= *(_DWORD *)(a1 + 20))
    {
      v42 = *a2;
      if (v34 <= *a2)
        return result;
      if ((v25 & 0x80000000) != 0)
      {
        a2[6] = v29;
        goto LABEL_16;
      }
      v31 = *(_QWORD *)(a1 + 176);
      v43 = (_DWORD *)(v31 + 20 * v25);
      a2[6] = v43[4];
      v44 = a2[4];
      *v43 = v42;
      v43[1] = v44;
      v45 = a2[2];
      v43[2] = v22;
      v43[3] = v45;
      v33 = v25;
      goto LABEL_35;
    }
    a2[6] = v29;
    v33 = *(unsigned int *)(a1 + 184);
    v37 = *(_DWORD *)(a1 + 188);
    *v28 = v33;
    v38 = v33;
    if ((_DWORD)v33 == v37)
    {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(a1 + 176, 1, 1);
      v38 = *(_DWORD *)(a1 + 184);
      v22 = a2[5];
    }
    v31 = *(_QWORD *)(a1 + 176);
    v39 = (_DWORD *)(v31 + 20 * v38);
    *(_DWORD *)(a1 + 184) = v38 + 1;
    v40 = a2[4];
    *v39 = *a2;
    v39[1] = v40;
    v41 = a2[2];
    v39[2] = v22;
    v39[3] = v41;
    v39[4] = a2[6];
    if ((v33 & 0x80000000) == 0)
    {
      v23 = *(_QWORD *)(a1 + 208);
      v26 = *(_DWORD *)(v23 + 28 * v19);
      v42 = *(_DWORD *)(v31 + 20 * v33);
      goto LABEL_35;
    }
  }
  else
  {
    v31 = *(_QWORD *)(a1 + 176);
    v32 = 1;
    v33 = v29;
    v34 = *v24;
    while (1)
    {
      v35 = (int *)(v31 + 20 * v33);
      v36 = *v35;
      if (v35[2] == v22)
        break;
      if (v34 <= v36)
      {
        v25 = v33;
        v34 = *v35;
      }
      ++v32;
      v33 = *(unsigned int *)(v31 + 20 * v33 + 16);
      if ((v33 & 0x80000000) != 0)
        goto LABEL_25;
    }
    v42 = *a2;
    if (v36 > *a2)
    {
      v46 = (_DWORD *)(v31 + 20 * v33);
      a2[6] = v46[4];
      *v35 = v42;
      v46[1] = a2[4];
      v35[2] = v22;
      v46[3] = a2[2];
LABEL_35:
      if (v26 > v42)
      {
        v47 = v31 + 20 * v33;
        v48 = v23 + 28 * v19;
        v49 = *(_DWORD *)(v47 + 12);
        *(_DWORD *)v47 = v26;
        *(_QWORD *)&v50 = *(_QWORD *)(v48 + 16);
        v51 = *(_DWORD *)(v48 + 24);
        DWORD2(v50) = *(_DWORD *)(v48 + 8);
        HIDWORD(v50) = *(_DWORD *)(v47 + 16);
        v52 = *(_QWORD *)(v47 + 4);
        *(_OWORD *)(v47 + 4) = v50;
        result = *(__n128 *)a2;
        *(_OWORD *)(v48 + 12) = *(_OWORD *)(a2 + 3);
        *(__n128 *)v48 = result;
        v53 = *(_QWORD *)(a1 + 208) + 28 * v19;
        *(_DWORD *)v53 = v42;
        *(_DWORD *)(v53 + 8) = v49;
        *(_QWORD *)(v53 + 16) = v52;
        *(_DWORD *)(v53 + 24) = v51;
      }
    }
  }
  return result;
}

uint64_t FstSearchLatticeHashBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(unsigned int *)(this + 216);
  if (v4 > a2)
  {
    v6 = this;
    v7 = (_QWORD *)(this + 208);
    v8 = a2;
    this = mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*(_QWORD *)(this + 208), a2, v4);
    v9 = *(_DWORD *)(*v7 + 28 * a2);
    if (*a3 > v9)
      *a3 = v9;
    v10 = *(_DWORD *)(v6 + 220);
    if (a2 > v10)
      this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v7, a2 - v10, 0);
    v11 = *(unsigned int *)(v6 + 216);
    if (v11 < a2)
    {
      v12 = v8 - v11;
      v13 = *v7 + 28 * v11 + 12;
      do
      {
        *(_QWORD *)(v13 - 12) = 0xFFFFFFFF00000000;
        *(_DWORD *)(v13 - 4) = -1;
        *(_WORD *)v13 = -2;
        *(_DWORD *)(v13 + 4) = 0;
        *(_DWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 12) = -1;
        v13 += 28;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 216) = a2;
  }
  return this;
}

uint64_t mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  char v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  char *v11;
  uint64_t i;
  char v13;
  uint64_t j;
  char v15;
  unint64_t v16;
  unint64_t v17;

  if (a3 >= 2)
  {
    v3 = 0;
    do
    {
      v4 = 0;
      v5 = (_DWORD *)(result + 28 * v3);
      v6 = &v5[7 * (a3 >> 1)];
      do
      {
        v7 = *((_BYTE *)v5 + v4);
        *((_BYTE *)v5 + v4) = *((_BYTE *)v6 + v4);
        *((_BYTE *)v6 + v4++) = v7;
      }
      while (v4 != 28);
      v8 = (_DWORD *)(result + 28 * (v3 + a3) - 28);
      v9 = (_DWORD *)(result + 28 * v3);
      do
      {
        v10 = v9 + 7;
        while (1)
        {
          v9 = v10;
          if (v10 >= v8)
            break;
          v10 += 7;
          if (*v9 > *v5)
          {
            v11 = (char *)v9;
            while (*v8 >= *v5)
            {
              v8 -= 7;
              if (v9 >= v8)
                goto LABEL_16;
            }
            for (i = 0; i != 28; ++i)
            {
              v13 = *v11;
              *v11++ = *((_BYTE *)v8 + i);
              *((_BYTE *)v8 + i) = v13;
            }
            v8 -= 7;
            break;
          }
        }
LABEL_16:
        ;
      }
      while (v9 < v8);
      if (*v9 > *v5)
        v9 -= 7;
      if (v9 > v5)
      {
        for (j = 0; j != 28; ++j)
        {
          v15 = *((_BYTE *)v9 + j);
          *((_BYTE *)v9 + j) = *((_BYTE *)v5 + j);
          *((_BYTE *)v5 + j) = v15;
        }
      }
      v16 = ((char *)v9 - (char *)v5) / 0x1CuLL;
      if (v16 <= a2)
      {
        if (v16 >= a2)
          return result;
        v17 = v16 + 1;
        v3 += v17;
        a2 -= v17;
        v16 = a3 - v17;
      }
      a3 = v16;
    }
    while (v16 > 1);
  }
  return result;
}

uint64_t FstSearchLatticeHashBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;

  if (*(_BYTE *)(this + 356))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v46 = this + 176;
      v47 = (_QWORD *)(this + 160);
      v39 = this + 192;
      do
      {
        v5 = (int *)(*(_QWORD *)(v2 + 256) + 36 * v4);
        v6 = v5[4];
        v7 = v5[5];
        v8 = v5[6];
        v44 = *v5;
        v45 = v5[7];
        v9 = v5[2];
        v48 = 0;
        v49 = 0;
        v42 = v7;
        v43 = v6;
        v41 = v8;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          v10 = 0;
          v11 = 0;
          do
          {
            if (v11 == HIDWORD(v49))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v48, 1, 1);
              v11 = v49;
              v10 = v48;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            v12 = v49;
            v11 = v49 + 1;
            LODWORD(v49) = v49 + 1;
            v9 = *(_DWORD *)(*(_QWORD *)(v2 + 240) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            v14 = v12 + 1;
            v15 = 4 * v12;
            do
            {
              v16 = *(_DWORD *)(v48 + v15);
              v17 = *(_QWORD *)(v2 + 240);
              v18 = (int *)(v17 + 36 * v16);
              v19 = *v18;
              v20 = *((_QWORD *)v18 + 2);
              v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
                v21 = *(_DWORD *)(v2 + 184);
                v17 = *(_QWORD *)(v2 + 240);
              }
              v22 = *(_QWORD *)(v2 + 176) + 20 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)v22 = v19;
              *(_QWORD *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = -1;
              v23 = *(_QWORD *)(v17 + 36 * v16 + 28);
              v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v47, 1, 1);
                v24 = *(unsigned int *)(v2 + 168);
              }
              v25 = *(_QWORD *)(v2 + 160);
              v26 = v25 + 16 * v24;
              *(_QWORD *)v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
          v27 = *(_DWORD *)(v2 + 184);
        }
        v28 = *(_QWORD *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        v29 = (_DWORD *)(v28 + 20 * v27);
        *v29 = v44;
        v29[1] = v43;
        v29[2] = v42;
        v29[3] = v13;
        v29[4] = -1;
        if (v45 == 16777213)
        {
          v45 = 16777209;
          if (*(_DWORD *)(*v47 + 16 * v13) == 16777209)
          {
            v27 = *(_DWORD *)(*v47 + 16 * v13 + 8);
            v45 = 16777209;
          }
        }
        v30 = *a2;
        v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v47, 1, 1);
          v31 = *(unsigned int *)(v2 + 168);
        }
        v32 = *(_QWORD *)(v2 + 160);
        v33 = (int *)(v32 + 16 * v31);
        *v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        v35 = *(unsigned int *)(v2 + 200);
        if (v35 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v39, 1, 1);
          LODWORD(v35) = *(_DWORD *)(v2 + 200);
        }
        v36 = *(_QWORD *)(v2 + 192) + 28 * v35;
        *(_DWORD *)v36 = v44;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v43;
        *(_DWORD *)(v36 + 20) = v42;
        *(_DWORD *)(v36 + 24) = -1;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 264);
        v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38)
          v37 = v38;
        else
          v37 = v37;
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_209826D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLatticeHashBackoff::propagateNulls(FstSearchLatticeHashBackoff *this, int a2, int a3, SearchStats *a4)
{
  FstSearchLatticeHashBackoff *v4;
  int v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  __int16 v32;
  int v33;
  int *v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  _QWORD *v40;
  __int16 v41;
  int v42;
  FstSearchLatticeHashBackoff *v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _DWORD *v54;
  _DWORD *v55;
  int v56;
  __int128 *v57;
  __int128 v58;
  _OWORD *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  int v65;
  SearchStats *v66;
  char *v67;
  uint64_t *v68;
  int v69;
  int v70;
  char *v71;
  unint64_t v73;
  int v74;
  __int16 v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;

  v4 = this;
  v5 = *((_DWORD *)this + 42);
  v6 = (_QWORD *)((char *)this + 192);
  LODWORD(v7) = *((_DWORD *)this + 50);
  if (!(_DWORD)v7)
  {
    v46 = *((_DWORD *)this + 38) - 1;
    if (a4)
      goto LABEL_54;
    goto LABEL_55;
  }
  v65 = *((_DWORD *)this + 42);
  v8 = 0;
  v66 = a4;
  v67 = (char *)this + 160;
  v68 = (uint64_t *)((char *)this + 176);
  v76 = a2;
  v71 = (char *)this + 192;
  do
  {
    v9 = *(unsigned int *)(*((_QWORD *)v4 + 24) + 28 * v8 + 4);
    v10 = *((_QWORD *)v4 + 5);
    if (*(_DWORD *)(v10 + 160) != (_DWORD)v9
      && (*(_DWORD *)(v10 + 140) <= (int)v9 || (*(_DWORD *)(*(_QWORD *)(v10 + 152) + 4 * v9) & 0x40000000) != 0))
    {
      v11 = *(_DWORD *)(*((_QWORD *)v4 + 24) + 28 * v8 + 4);
      v73 = v8;
      do
      {
        v12 = *((_QWORD *)v4 + 5);
        v13 = *(_QWORD *)(v12 + 152);
        v14 = *(_DWORD *)(v13 + 4 * v11);
        v15 = *(_DWORD *)(v13 + 4 * (v11 + 1));
        v16 = *(_DWORD *)(v12 + 140);
        if (v16 > v15)
          goto LABEL_34;
        v17 = (v14 & 0xFFFFF) <= 0xFFFF3 ? v14 & 0xFFFFF : v14 & 0xFFFFF | 0xF00000;
        if (v16 <= (int)v9 && v17 != 16777210)
          goto LABEL_34;
        v19 = (v14 >> 20) & 0x3FF;
        v20 = *v6;
        v21 = *v6 + 28 * v8;
        v22 = *(_DWORD *)v21 + v19;
        if (v22 > a2)
          goto LABEL_34;
        v23 = *(_DWORD *)(v21 + 8);
        v24 = *(_WORD *)(v21 + 12);
        v25 = *(_WORD *)(v21 + 14);
        v26 = *(_DWORD *)(v21 + 20);
        v27 = *(_DWORD *)(v21 + 24);
        v28 = *(_DWORD *)(v21 + 16) + v19;
        if (v17 == 16777210)
        {
          if ((_DWORD)v7 != *((_DWORD *)v4 + 51))
            goto LABEL_33;
        }
        else
        {
          if (v17 == 16777214)
            v29 = v28;
          else
            v29 = 0;
          if (v17 == 16777214)
            v30 = 0;
          else
            v30 = v28;
          v31 = *((_DWORD *)v4 + 46);
          v74 = v28;
          v75 = v25;
          if (v31 == *((_DWORD *)v4 + 47))
          {
            v81 = v26;
            v77 = v23;
            v32 = v24;
            v69 = v29;
            v70 = v30;
            DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v68, 1, 1);
            v29 = v69;
            v30 = v70;
            a2 = v76;
            v23 = v77;
            v28 = v74;
            v25 = v75;
            v26 = v81;
            v24 = v32;
            v31 = *((_DWORD *)v4 + 46);
          }
          v26 = v17 + 2 * v26 + 1;
          v33 = v22 - v29;
          v34 = (int *)(*((_QWORD *)v4 + 22) + 20 * v31);
          *((_DWORD *)v4 + 46) = v31 + 1;
          *v34 = v33;
          v34[1] = v30;
          v34[2] = v26;
          v34[3] = v23;
          v34[4] = v27;
          v35 = *((unsigned int *)v4 + 42);
          if (v35 == *((_DWORD *)v4 + 43))
          {
            v82 = v26;
            v79 = v27;
            v36 = v24;
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v67, 1, 1);
            v28 = v74;
            v25 = v75;
            v26 = v82;
            v24 = v36;
            v27 = v79;
            a2 = v76;
            v35 = *((unsigned int *)v4 + 42);
          }
          v7 = *((_QWORD *)v4 + 20) + 16 * v35;
          *(_DWORD *)v7 = v17;
          *(_DWORD *)(v7 + 4) = a3;
          *(_DWORD *)(v7 + 8) = v31;
          *(_DWORD *)(v7 + 12) = 0;
          v23 = *((_DWORD *)v4 + 42);
          *((_DWORD *)v4 + 42) = v23 + 1;
          LODWORD(v7) = *((_DWORD *)v4 + 50);
          v6 = v71;
          if ((_DWORD)v7 != *((_DWORD *)v4 + 51))
            goto LABEL_32;
        }
        v78 = v23;
        v83 = v26;
        v80 = v27;
        v37 = (uint64_t)v6;
        v38 = v24;
        v39 = v9;
        v40 = v6;
        v41 = v25;
        v42 = v22;
        v43 = v4;
        v44 = v28;
        DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v37, 1, 1);
        v28 = v44;
        v4 = v43;
        v22 = v42;
        v26 = v83;
        v25 = v41;
        v6 = v40;
        v9 = v39;
        v8 = v73;
        v23 = v78;
        v27 = v80;
        v24 = v38;
        a2 = v76;
        LODWORD(v7) = *((_DWORD *)v4 + 50);
LABEL_32:
        v20 = *v6;
LABEL_33:
        v7 = v20 + 28 * v7;
        *(_DWORD *)v7 = v22;
        *(_DWORD *)(v7 + 4) = v15;
        *(_DWORD *)(v7 + 8) = v23;
        *(_WORD *)(v7 + 12) = v24;
        *(_WORD *)(v7 + 14) = v25;
        *(_DWORD *)(v7 + 16) = v28;
        *(_DWORD *)(v7 + 20) = v26;
        *(_DWORD *)(v7 + 24) = v27;
        LODWORD(v7) = *((_DWORD *)v4 + 50) + 1;
        *((_DWORD *)v4 + 50) = v7;
LABEL_34:
        v11 += 2;
      }
      while ((v14 & 0x80000000) == 0);
    }
    ++v8;
  }
  while (v8 < v7);
  v45 = *((_DWORD *)v4 + 38);
  if (v7 > v45)
  {
    mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*((_QWORD *)v4 + 24) + 28 * v45), v7 - v45, 28);
    v45 = *((_DWORD *)v4 + 38);
    LODWORD(v7) = *((_DWORD *)v4 + 50);
  }
  v46 = v45 - 1;
  if (v45 < v7)
  {
    v47 = v45;
    do
    {
      v48 = *v6;
      if (*(_DWORD *)(*v6 + 28 * v47 + 4) == *(_DWORD *)(*v6 + 28 * (v47 - 1) + 4))
      {
        if (v45 - v46 < *((_DWORD *)v4 + 5))
        {
          v49 = *(_DWORD *)(v48 + 28 * v47 + 20);
          if (v49 != *(_DWORD *)(v48 + 28 * v46 + 20))
          {
            v50 = *(unsigned int *)(v48 + 28 * v46 + 24);
            v51 = v50;
            if ((v50 & 0x80000000) != 0)
            {
LABEL_47:
              if (v51 == 0xFFFFFFFFLL)
              {
                v53 = *((_DWORD *)v4 + 46);
                if (v53 == *((_DWORD *)v4 + 47))
                {
                  DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v68, 1, 1);
                  v53 = *((_DWORD *)v4 + 46);
                  v48 = *((_QWORD *)v4 + 24);
                  v49 = *(_DWORD *)(v48 + 28 * v47 + 20);
                  LODWORD(v50) = *(_DWORD *)(v48 + 28 * v46 + 24);
                }
                v54 = (_DWORD *)(*((_QWORD *)v4 + 22) + 20 * v53);
                *((_DWORD *)v4 + 46) = v53 + 1;
                v55 = (_DWORD *)(v48 + 28 * v47);
                v56 = v55[4];
                *v54 = *v55;
                v54[1] = v56;
                LODWORD(v55) = v55[2];
                v54[2] = v49;
                v54[3] = (_DWORD)v55;
                v54[4] = v50;
                *(_DWORD *)(v48 + 28 * v46 + 24) = v53;
                ++v45;
              }
            }
            else
            {
              v52 = *v68;
              v51 = *(unsigned int *)(v48 + 28 * v46 + 24);
              while (v49 != *(_DWORD *)(v52 + 20 * v51 + 8))
              {
                v51 = *(unsigned int *)(v52 + 20 * v51 + 16);
                if ((v51 & 0x80000000) != 0)
                  goto LABEL_47;
              }
            }
          }
        }
      }
      else
      {
        v57 = (__int128 *)(v48 + 28 * v47);
        v45 = v46 + 2;
        ++v46;
        v58 = *v57;
        v59 = (_OWORD *)(v48 + 28 * v46);
        *(_OWORD *)((char *)v59 + 12) = *(__int128 *)((char *)v57 + 12);
        *v59 = v58;
      }
      ++v47;
      v7 = *((unsigned int *)v4 + 50);
    }
    while (v47 < v7);
  }
  a4 = v66;
  v5 = v65;
  if (v66)
LABEL_54:
    *((_DWORD *)a4 + 1) += *((_DWORD *)v4 + 42) - v5;
LABEL_55:
  v60 = v46 + 1;
  v61 = *((_DWORD *)v4 + 51);
  if (v60 > v61)
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v6, v60 - v61, 0);
    LODWORD(v7) = *((_DWORD *)v4 + 50);
  }
  if (v7 < v60)
  {
    v62 = v60 - v7;
    v63 = *v6 + 28 * v7 + 12;
    do
    {
      *(_QWORD *)(v63 - 12) = 0xFFFFFFFF00000000;
      *(_DWORD *)(v63 - 4) = -1;
      *(_WORD *)v63 = -2;
      *(_DWORD *)(v63 + 4) = 0;
      *(_DWORD *)(v63 + 8) = 0;
      *(_DWORD *)(v63 + 12) = -1;
      v63 += 28;
      --v62;
    }
    while (v62);
  }
  *((_DWORD *)v4 + 50) = v60;
  return FstSearchLatticeHashBackoff::generateNullTraces((unint64_t)v4, a3, *((_DWORD *)v4 + 38));
}

unint64_t FstSearchLatticeHashBackoff::getCandidateTokensForTrace(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int32x2_t v12;
  unsigned int v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int32x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  if (*(int *)(a2 + 12) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 176);
      v8 = (int32x2_t *)(v7 + 20 * (*(_DWORD *)(a2 + 8) + v6));
      v9 = v8[1].u32[1];
      if ((_DWORD)v9 == -1 || (v10 = *(_QWORD *)(v5 + 160), *(_DWORD *)(v10 + 16 * v9) != 16777210))
      {
        v19 = *(unsigned int *)(a3 + 8);
        if (v19 == *(_DWORD *)(a3 + 12))
        {
          result = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(a3, 1, 1);
          LODWORD(v19) = *(_DWORD *)(a3 + 8);
        }
        v20 = *(_QWORD *)a3 + 20 * v19;
        v21 = *(_OWORD *)v8->i8;
        *(_DWORD *)(v20 + 16) = v8[2].i32[0];
        *(_OWORD *)v20 = v21;
        LODWORD(v20) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v20 + 1;
        *(_DWORD *)(*(_QWORD *)a3 + 20 * v20 + 16) = -1;
      }
      else
      {
        v11 = *(unsigned int *)(v10 + 16 * v9 + 8);
        if ((v11 & 0x80000000) == 0)
        {
          v12 = vsub_s32(*v8, *(int32x2_t *)(v7 + 20 * v11));
          v13 = *(_DWORD *)(a3 + 8);
          do
          {
            v14 = *(_QWORD *)(v5 + 176);
            if (v13 == *(_DWORD *)(a3 + 12))
            {
              result = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(a3, 1, 1);
              v13 = *(_DWORD *)(a3 + 8);
            }
            v15 = (__int128 *)(v14 + 20 * v11);
            v16 = *(_QWORD *)a3 + 20 * v13;
            v17 = *v15;
            *(_DWORD *)(v16 + 16) = *((_DWORD *)v15 + 4);
            *(_OWORD *)v16 = v17;
            LODWORD(v15) = *(_DWORD *)(a3 + 8);
            v13 = (_DWORD)v15 + 1;
            *(_DWORD *)(a3 + 8) = (_DWORD)v15 + 1;
            v18 = (int32x2_t *)(*(_QWORD *)a3 + 20 * v15);
            *v18 = vadd_s32(v12, *v18);
            v18[2].i32[0] = -1;
            v11 = *(unsigned int *)(v14 + 20 * v11 + 16);
          }
          while ((v11 & 0x80000000) == 0);
        }
      }
      ++v6;
    }
    while (v6 < *(_DWORD *)(a2 + 12));
  }
  return result;
}

double FstSearchLatticeHashBackoff::annihilateNullActiveTokens(FstSearchLatticeHashBackoff *this)
{
  unint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  int v10;
  unsigned int v11;
  _OWORD *v12;
  __int128 v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  double result;

  if (*((_DWORD *)this + 50))
  {
    v2 = 0;
    do
    {
      v3 = *((_QWORD *)this + 24);
      v4 = (__int128 *)(v3 + 28 * v2);
      v5 = *((unsigned int *)v4 + 2);
      if ((v5 & 0x80000000) != 0 || (v6 = *((_QWORD *)this + 20), *(_DWORD *)(v6 + 16 * v5) != 16777210))
      {
        v19 = *((unsigned int *)this + 54);
        if (v19 == *((_DWORD *)this + 55))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 208, 1, 1);
          LODWORD(v19) = *((_DWORD *)this + 54);
        }
        v20 = (_OWORD *)(*((_QWORD *)this + 26) + 28 * v19);
        v21 = *v4;
        *(_OWORD *)((char *)v20 + 12) = *(__int128 *)((char *)v4 + 12);
        *v20 = v21;
        ++*((_DWORD *)this + 54);
      }
      else
      {
        v7 = *(unsigned int *)(v6 + 16 * v5 + 8);
        if ((v7 & 0x80000000) == 0)
        {
          v8 = (_DWORD *)(*((_QWORD *)this + 22) + 20 * v7);
          v9 = *(_DWORD *)v4 - *v8;
          v10 = *(_DWORD *)(v3 + 28 * v2 + 16) - v8[1];
          v11 = *((_DWORD *)this + 54);
          do
          {
            if (v11 == *((_DWORD *)this + 55))
            {
              DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 208, 1, 1);
              v11 = *((_DWORD *)this + 54);
            }
            v12 = (_OWORD *)(*((_QWORD *)this + 26) + 28 * v11);
            v13 = *v4;
            *(_OWORD *)((char *)v12 + 12) = *(__int128 *)((char *)v4 + 12);
            *v12 = v13;
            v14 = *((_DWORD *)this + 54);
            v11 = v14 + 1;
            *((_DWORD *)this + 54) = v14 + 1;
            v15 = (_DWORD *)(*((_QWORD *)this + 26) + 28 * v14);
            v16 = (_DWORD *)(*((_QWORD *)this + 22) + 20 * v7);
            v17 = v16[2];
            v15[2] = v16[3];
            v18 = v16[1];
            v7 = v16[4];
            *v15 = v9 + *v16;
            v15[4] = v10 + v18;
            v15[5] = v17;
            v15[6] = -1;
          }
          while ((v7 & 0x80000000) == 0);
        }
      }
      ++v2;
    }
    while (v2 < *((unsigned int *)this + 50));
  }
  v22 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v22;
  LODWORD(v22) = *((_DWORD *)this + 51);
  result = *((double *)this + 27);
  *((double *)this + 25) = result;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v22;
  return result;
}

unint64_t FstSearchLatticeHashBackoff::annihilateNullTraces(unint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  char *v10;
  int v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;

  if (*(_DWORD *)(this + 168))
  {
    v1 = this;
    v2 = 0;
    v3 = (_QWORD *)(this + 176);
    do
    {
      v37 = *(_QWORD *)(v1 + 160);
      v38 = 0;
      v39 = 0;
      FstSearchLatticeHashBackoff::getCandidateTokensForTrace(v1, v37 + 16 * v2, (uint64_t)&v38);
      v4 = v39;
      v5 = (char *)v38;
      if (v39 < 2
        || (mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>((char *)v38 + 20, (v39 - 1), 20),
            v4 = v39,
            v5 = (char *)v38,
            v39 < 2))
      {
        v7 = 0;
        v9 = xmmword_209A6C7C0;
      }
      else
      {
        v6 = 0;
        v7 = 0;
        v8 = 20 * v39 - 20;
        v9 = xmmword_209A6C7C0;
        do
        {
          v10 = &v5[v6];
          v11 = *(_DWORD *)&v5[v6 + 28];
          if (v11 != *(_DWORD *)&v5[20 * v7 + 8] && *((_DWORD *)v5 + 2) != v11)
          {
            ++v7;
            v12 = *(_OWORD *)(v10 + 20);
            v13 = &v5[20 * v7];
            *((_DWORD *)v13 + 4) = *((_DWORD *)v10 + 9);
            *(_OWORD *)v13 = v12;
          }
          v6 += 20;
        }
        while (v8 != v6);
      }
      v14 = v7 + 1;
      if (HIDWORD(v39) < v14)
      {
        v40 = 0;
        HIDWORD(v39) = realloc_array(v5, &v40, 20 * v14, 20 * v4, 20 * v4, 1) / 0x14;
        v5 = (char *)v40;
        v38 = v40;
        v4 = v39;
        v9 = xmmword_209A6C7C0;
      }
      if (v4 < v14)
      {
        v15 = v14 - v4;
        v16 = &v5[20 * v4 + 16];
        do
        {
          *((_OWORD *)v16 - 1) = v9;
          *(_DWORD *)v16 = -1;
          v16 += 20;
          --v15;
        }
        while (v15);
      }
      LODWORD(v39) = v7 + 1;
      mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(v5 + 20, v7, 20);
      v17 = v39;
      v18 = *(unsigned int *)(v1 + 20);
      v36 = v2;
      if (v39 > v18)
      {
        if (HIDWORD(v39) < v18)
        {
          v40 = 0;
          HIDWORD(v39) = realloc_array(v38, &v40, 20 * v18, 20 * v39, 20 * v39, 1)
                       / 0x14;
          v38 = v40;
          v17 = v39;
        }
        if (v17 < v18)
        {
          v19 = v18 - v17;
          v20 = (char *)v38 + 20 * v17 + 16;
          do
          {
            *((_OWORD *)v20 - 1) = xmmword_209A6C7C0;
            *v20 = -1;
            v20 += 5;
            --v19;
          }
          while (v19);
        }
        LODWORD(v39) = v18;
        v17 = v18;
      }
      if (v17)
      {
        v21 = 0;
        v22 = 0;
        v23 = v37 + 16 * v2;
        v24 = (_DWORD *)(v23 + 12);
        v25 = (_DWORD *)(v23 + 8);
        v26 = 0xFFFFFFFFLL;
        do
        {
          if (*v24 <= (int)v22)
          {
            v30 = *(unsigned int *)(v1 + 184);
            v31 = *(_QWORD *)(v1 + 176);
            *(_DWORD *)(v31 + 20 * v26 + 16) = v30;
            v32 = (char *)v38;
            if (v30 == *(_DWORD *)(v1 + 188))
            {
              DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v3, 1, 1);
              v33 = *(_DWORD *)(v1 + 184);
              v31 = *(_QWORD *)(v1 + 176);
              v17 = v39;
            }
            else
            {
              v33 = v30;
            }
            v34 = v31 + 20 * v33;
            v35 = *(_OWORD *)&v32[v21];
            *(_DWORD *)(v34 + 16) = *(_DWORD *)&v32[v21 + 16];
            *(_OWORD *)v34 = v35;
            ++*(_DWORD *)(v1 + 184);
          }
          else
          {
            v27 = *v3 + 20 * (v22 + *v25);
            v28 = *(_OWORD *)((char *)v38 + v21);
            *(_DWORD *)(v27 + 16) = *(_DWORD *)((char *)v38 + v21 + 16);
            *(_OWORD *)v27 = v28;
            v29 = v22 + *v25;
            if (v22)
              *(_DWORD *)(*v3 + 20 * (v22 + *v25 - 1) + 16) = v29;
            v30 = v29;
          }
          ++v22;
          v21 += 20;
          v26 = v30;
        }
        while (v22 < v17);
      }
      *(_DWORD *)(v37 + 16 * v36 + 12) = 0;
      this = DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v38);
      v2 = v36 + 1;
    }
    while (v36 + 1 < (unint64_t)*(unsigned int *)(v1 + 168));
  }
  return this;
}

void sub_209827938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLatticeHashBackoff::annihilateNullLongestFinal(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  int32x2_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int32x2_t *v24;
  int32x2_t v25;
  int32x2_t v26;
  unsigned int v27;
  int32x2_t *v28;
  uint64_t v29;

  LODWORD(v1) = *(_DWORD *)(this + 168);
  if ((_DWORD)v1)
  {
    v2 = this;
    v3 = (uint64_t *)(this + 160);
    v4 = (uint64_t *)(this + 176);
    v29 = this + 160;
    do
    {
      v1 = (v1 - 1);
      v5 = *v3;
      v6 = *(_DWORD *)(*v3 + 16 * v1);
      if (v6 == 16777210)
      {
        v7 = v5 + 16 * v1;
        v8 = *v4;
        v9 = *v4 + 20 * *(unsigned int *)(v7 + 8);
        v10 = *(unsigned int *)(v9 + 12);
        if ((_DWORD)v10 != -1)
        {
          v11 = *(int32x2_t *)v9;
          v12 = (int *)(v5 + 16 * v10);
          v13 = *v12;
          v15 = v12[2];
          v14 = v12[3];
          v16 = *(_DWORD *)(v2 + 184);
          v17 = *(_DWORD *)(v7 + 4);
          v18 = *(unsigned int *)(v2 + 168);
          if (v18 == *(_DWORD *)(v2 + 172))
          {
            this = DgnArray<DgnPrimArray<double>>::reallocElts(v29, 1, 1);
            v18 = *(unsigned int *)(v2 + 168);
            v5 = *(_QWORD *)(v2 + 160);
            v8 = *(_QWORD *)(v2 + 176);
          }
          v19 = (_DWORD *)(v5 + 16 * v18);
          *v19 = v13;
          v19[1] = v17;
          v19[2] = v16;
          v19[3] = v14;
          ++*(_DWORD *)(v2 + 168);
          if (v15 != 0xFFFFFFFFLL)
          {
            v20 = vsub_s32(v11, *(int32x2_t *)(v8 + 20 * v15));
            v21 = *(_DWORD *)(v2 + 184);
            v22 = -1;
            do
            {
              v23 = v21;
              if ((v22 & 0x80000000) == 0)
                *(_DWORD *)(v8 + 20 * v22 + 16) = v21;
              v24 = (int32x2_t *)(v8 + 20 * v15);
              v25 = *v24;
              v26 = v24[1];
              v27 = v23;
              if (v23 == *(_DWORD *)(v2 + 188))
              {
                this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v4, 1, 1);
                v27 = *(_DWORD *)(v2 + 184);
                v8 = *(_QWORD *)(v2 + 176);
              }
              v28 = (int32x2_t *)(v8 + 20 * v27);
              *v28 = vadd_s32(v20, v25);
              v28[1] = v26;
              v28[2].i32[0] = -1;
              v21 = *(_DWORD *)(v2 + 184) + 1;
              *(_DWORD *)(v2 + 184) = v21;
              v8 = *(_QWORD *)(v2 + 176);
              v15 = *(unsigned int *)(v8 + 20 * v15 + 16);
              v22 = v23;
            }
            while ((_DWORD)v15 != -1);
          }
          v3 = (uint64_t *)v29;
          if (v13 == 16777213)
            return this;
        }
      }
      else if (v6 == 16777213)
      {
        return this;
      }
    }
    while ((_DWORD)v1);
  }
  return this;
}

uint64_t FstSearchLatticeHashBackoff::collectTraces(FstSearchLatticeHashBackoff *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;

  v2 = *((unsigned int *)this + 42);
  v43 = 0;
  v42 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v42 = v3;
    v43 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v43);
  }
  v5 = *((unsigned int *)this + 50);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v42;
    v8 = (unsigned int *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v10 = *v8;
      v8 += 7;
      v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v11) = *((_DWORD *)this + 42);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = (uint64_t *)((char *)this + 160);
    v14 = v42;
    do
    {
      v11 = (v11 - 1);
      if ((v12 & 1) != 0)
      {
        v12 = 1;
      }
      else if (*(_DWORD *)(*v13 + 16 * v11) == 16777213)
      {
        v12 = 1;
        *((_DWORD *)v14 + v11) = 1;
      }
      else
      {
        v12 = 0;
      }
      if (*((_DWORD *)v14 + v11))
      {
        v15 = *(unsigned int *)(*v13 + 16 * v11 + 8);
        if ((_DWORD)v15 != -1)
        {
          v16 = *((_QWORD *)this + 22);
          do
          {
            v17 = *(unsigned int *)(v16 + 20 * v15 + 12);
            if ((_DWORD)v17 != -1)
              *((_DWORD *)v14 + v17) = 1;
            v15 = *(unsigned int *)(v16 + 20 * v15 + 16);
          }
          while ((_DWORD)v15 != -1);
        }
      }
    }
    while ((_DWORD)v11);
    v18 = *((_DWORD *)this + 42);
    v40 = 0;
    v41 = 0;
    if (v18)
    {
      v19 = 0;
      v20 = 0;
      do
      {
        if (*((_DWORD *)v42 + v19))
        {
          v21 = *v13;
          if (v19 != v20)
          {
            *(_OWORD *)(v21 + 16 * v20) = *(_OWORD *)(v21 + 16 * v19);
            v21 = *v13;
          }
          v22 = v41;
          *(_DWORD *)(v21 + 16 * v20 + 8) = v41;
          v23 = *(unsigned int *)(v21 + 16 * v19 + 8);
          if ((_DWORD)v23 == -1)
          {
            v24 = v40;
            v25 = v22;
          }
          else
          {
            v26 = *((_QWORD *)this + 22);
            v25 = v22;
            do
            {
              if (v25 == HIDWORD(v41))
              {
                DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)&v40, 1, 1);
                v25 = v41;
              }
              v24 = v40;
              v27 = v40 + 20 * v25;
              *(_OWORD *)v27 = *(_OWORD *)(v26 + 20 * v23);
              LODWORD(v41) = ++v25;
              v30 = *(_DWORD *)(v27 + 12);
              v28 = (_DWORD *)(v27 + 12);
              v29 = v30;
              v28[1] = v25;
              if (v30 != -1)
                *v28 = *((_DWORD *)v42 + v29);
              v26 = *((_QWORD *)this + 22);
              v23 = *(unsigned int *)(v26 + 20 * v23 + 16);
            }
            while ((_DWORD)v23 != -1);
            v21 = *v13;
            v22 = *(_DWORD *)(*v13 + 16 * v20 + 8);
          }
          *(_DWORD *)(v24 + 20 * (v25 - 1) + 16) = -1;
          *(_DWORD *)(v21 + 16 * v20 + 12) = v25 - v22;
          *((_DWORD *)v42 + v19) = v20++;
          v18 = *((_DWORD *)this + 42);
        }
        ++v19;
      }
      while (v19 < v18);
      v31 = *((_DWORD *)this + 43);
      if (v20 > v31)
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, v20 - v31, 0);
        v18 = *((_DWORD *)this + 42);
      }
      if (v18 < v20)
      {
        v32 = v20 - (unint64_t)v18;
        v33 = (_OWORD *)(*v13 + 16 * v18);
        do
        {
          *v33++ = xmmword_209A6C7D0;
          --v32;
        }
        while (v32);
      }
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v20 = 0;
    v40 = 0;
    v41 = 0;
  }
  *((_DWORD *)this + 42) = v20;
  v34 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v40;
  v40 = v34;
  LODWORD(v34) = *((_DWORD *)this + 47);
  *((_QWORD *)this + 23) = v41;
  LODWORD(v41) = 0;
  HIDWORD(v41) = v34;
  v35 = *((unsigned int *)this + 50);
  if ((_DWORD)v35)
  {
    v36 = v42;
    v37 = (_DWORD *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v38 = *v37;
      if ((_DWORD)v38 != -1)
        *v37 = *((_DWORD *)v36 + v38);
      v37 += 7;
      --v35;
    }
    while (v35);
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v40);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v42);
}

void sub_209827E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a11);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLatticeHashBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLatticeHashBackoff::advanceDeltas((FstSearchLatticeHashBackoff *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLatticeHashBackoff::collectTraces((FstSearchLatticeHashBackoff *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

int64x2_t FstSearchLatticeHashBackoff::reset(FstSearchLatticeHashBackoff *this)
{
  int64x2_t *v2;
  int64x2_t result;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;

  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 50) = 0;
  v7 = 0u;
  v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  v5 = 0u;
  v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  v2 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchLatticeHashBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLatticeHashBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLatticeHashBackoff::beginTopRecPassSyncRecog(FstSearchLatticeHashBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((_BYTE *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLatticeHashBackoff::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLatticeHashBackoff::collectTraces((FstSearchLatticeHashBackoff *)this);
  FstSearchLatticeHashBackoff::annihilateNullTraces((unint64_t)this);
  FstSearchLatticeHashBackoff::annihilateNullActiveTokens((FstSearchLatticeHashBackoff *)this);
  FstSearchLatticeHashBackoff::annihilateNullLongestFinal((unint64_t)this);
  FstSearchLatticeHashBackoff::collectTraces((FstSearchLatticeHashBackoff *)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = this[13];
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLatticeHashBackoff::printSize(FstSearchLatticeHashBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 16 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 16 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 20 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 20 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((_DWORD *)this + 50);
  v65 = 26 * v64;
  if (v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 26 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((_DWORD *)this + 54);
  v75 = 26 * v74;
  if (v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 26 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 240, 0);
  v99 = sizeObject((uint64_t)this + 240, 1);
  v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_209828828(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeHashBackoff::getBestTrace(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if ((a4 & 1) != 0)
    v4 = 0;
  else
    v4 = *(unsigned int *)(a1 + 152);
  v5 = *(unsigned int *)(a1 + 200);
  if (v4 >= v5)
    goto LABEL_21;
  v6 = 28 * v4;
  v7 = 1879048192;
  v8 = 0xFFFFFFFFLL;
  do
  {
    v9 = *(_QWORD *)(a1 + 192);
    if (!a4 || (v10 = *(unsigned int *)(v9 + v6 + 8), (_DWORD)v10 == -1))
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4))
        goto LABEL_19;
      v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2)
      *(_BYTE *)(*a2 + v10) = 1;
    if (a3)
      *(_BYTE *)(*a3 + v10) = 1;
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8))
        + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 4));
    if (v7 > v11)
      v8 = v10;
    if (v7 >= v11)
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8))
         + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 4));
    v5 = *(unsigned int *)(a1 + 200);
LABEL_19:
    ++v4;
    v6 += 28;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    v12 = *(unsigned int *)(a1 + 168);
    v8 = 0xFFFFFFFFLL;
    while (v12)
    {
      --v12;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v12) == 16777213)
      {
        if (a2)
          *(_BYTE *)(*a2 + v12) = 1;
        v8 = v12;
        if (a3)
          *(_BYTE *)(*a3 + v12) = 1;
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLatticeHashBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLatticeHashBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

unint64_t FstSearchLatticeHashBackoff::createLatticeNodes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t result;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int Node;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int *v43;
  int v44;
  int v45;
  uint64_t **v47;
  uint64_t v48;
  int v49;
  uint64_t v50;

  v8 = a2;
  v9 = a1;
  v10 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v10)
    v11 = *((_DWORD *)a2 + 2) == 0;
  else
    v11 = 0;
  if (v11)
  {
    *a2 = MemChunkAlloc(4 * v10, 0);
    *((_DWORD *)v8 + 2) = v10;
  }
  result = Lattice<WordLatticeLC>::createNode(a4);
  v13 = result;
  v14 = *(_DWORD *)(a3 + 8);
  if (v14 == *(_DWORD *)(a3 + 12))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    v14 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  v15 = *(_DWORD *)(v9 + 168);
  v17 = a6;
  v16 = a7;
  if (v15)
  {
    result = 2;
    v18 = -1;
    v47 = v8;
    v48 = a3;
    v50 = v9;
    do
    {
      --v15;
      v19 = *v8;
      *((_DWORD *)*v8 + v15) = -1;
      if (*(_BYTE *)(*v17 + v15))
      {
        v20 = v15;
        v21 = *(_QWORD *)(v9 + 160);
        v22 = *(unsigned int *)(*(_QWORD *)(v9 + 88) + 4 * *(unsigned int *)(v21 + 16 * v15 + 4));
        if (*(_BYTE *)(*v16 + v15))
        {
          if (*(_BYTE *)(*v17 + v15) != 1 || v18 == -1)
          {
            Node = Lattice<WordLatticeLC>::createNode(a4);
            *((_DWORD *)*v8 + v15) = *(_DWORD *)(a3 + 8);
            v25 = *(unsigned int *)(a3 + 8);
            if (v25 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              v25 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v25) = Node;
            v26 = *(_DWORD *)(a3 + 8);
            *(_DWORD *)(a3 + 8) = v26 + 1;
            v17 = a6;
            v16 = a7;
            if (*(_BYTE *)(*a6 + v15) == 1)
              v18 = v26;
            v21 = *(_QWORD *)(v9 + 160);
            result = 2;
          }
          else
          {
            *((_DWORD *)v19 + v15) = v18;
          }
        }
        v27 = (unsigned int *)(v21 + 16 * v15);
        if ((int)v27[3] >= 1)
        {
          v49 = v18;
          v28 = *v27;
          v29 = v27[2];
          do
          {
            v30 = *(_QWORD *)(v9 + 176);
            v31 = v29;
            v32 = (_DWORD *)(v30 + 20 * v29);
            v33 = v32[3];
            if ((v32[3] & 0x80000000) != 0)
            {
              *v32 += v22;
            }
            else
            {
              if ((_DWORD)v28 == 16777209)
              {
                v34 = *a5 + 16 * v33;
                v36 = (_DWORD *)(v34 + 8);
                v35 = *(unsigned int *)(v34 + 8);
                v37 = *(_QWORD *)(v9 + 176);
                if (v35 == *(_DWORD *)(v34 + 12))
                {
                  v38 = v20;
                  v39 = v22;
                  v40 = v28;
                  DgnPrimArray<unsigned int>::reallocElts(v34, 1, 1);
                  v28 = v40;
                  v22 = v39;
                  v20 = v38;
                  v9 = v50;
                  v17 = a6;
                  result = 2;
                  v16 = a7;
                  v35 = *v36;
                  v21 = *(_QWORD *)(v50 + 160);
                  v37 = *(_QWORD *)(v50 + 176);
                }
                *(_DWORD *)(*(_QWORD *)v34 + 4 * v35) = v15;
                ++*v36;
                v33 = v32[3];
              }
              else
              {
                *(_BYTE *)(*v16 + v33) = 1;
                v37 = v30;
              }
              v41 = v21 + 16 * v33;
              v42 = *(_DWORD *)(*(_QWORD *)(v9 + 88) + 4 * *(unsigned int *)(v41 + 4));
              v43 = (int *)(v37 + 20 * *(unsigned int *)(v41 + 8));
              v44 = v22 + *v32 - v42;
              v45 = *v43;
              LODWORD(v43) = v43[1];
              *v32 = v44 - v45;
              *(_DWORD *)(v30 + 20 * v31 + 4) -= (_DWORD)v43;
              *(_BYTE *)(*v17 + v33) = 2;
              v21 = *(_QWORD *)(v9 + 160);
            }
            v29 = v31 + 1;
          }
          while ((int)(v31 + 1) < *(_DWORD *)(v21 + 16 * v20 + 12) + *(_DWORD *)(v21 + 16 * v20 + 8));
          v8 = v47;
          a3 = v48;
          v18 = v49;
        }
      }
    }
    while (v15);
  }
  return result;
}

uint64_t FstSearchLatticeHashBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, char a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v27, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLatticeHashBackoff::createLatticeNodes(a1, &v30, (uint64_t)&v28, (uint64_t)a2, v27, a3, a4);
  v23 = (uint64_t)v8;
  v24 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v24)
  {
    v10 = 0;
    v11 = v29;
    do
    {
      if (*(_BYTE *)(*a3 + v10))
      {
        v12 = *(_QWORD *)(a1 + 160);
        if ((*(_DWORD *)(v12 + 16 * v10) - 16777209) >= 2)
        {
          v13 = v12 + 16 * v10;
          if (*(int *)(v13 + 12) >= 1)
          {
            v14 = *(_DWORD *)(v13 + 8);
            do
            {
              v15 = *(_QWORD *)(a1 + 176) + 20 * v14;
              v16 = *(unsigned int *)(v15 + 12);
              if ((_DWORD)v16 == -1)
                v17 = 0;
              else
                v17 = v11 - *((_DWORD *)v30 + v16);
              v18 = *(unsigned int *)(v28 + 4 * v17);
              if (*(_BYTE *)(*a4 + v10))
                FstSearchLatticeHashBackoff::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v10))), a2, v9, a5);
              v19 = v27[0];
              if (*(_DWORD *)(v27[0] + 16 * v10 + 8))
              {
                v20 = 0;
                do
                {
                  v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v10) + 4 * v20);
                  FstSearchLatticeHashBackoff::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v21))), a2, v9, a5);
                  ++v20;
                  v19 = v27[0];
                }
                while (v20 < *(unsigned int *)(v27[0] + 16 * v10 + 8));
              }
              ++v14;
            }
            while (v14 < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 12)
                        + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v30);
}

void sub_209828FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLatticeHashBackoff::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  _DWORD *SilenceToken;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  ArcGraph *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _QWORD v33[2];
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  __int128 v48;
  _DWORD v49[2];
  __int128 v50;

  v11 = a5;
  v12 = a4;
  if ((a4 & 0x80000000) != 0)
    SilenceToken = 0;
  else
    SilenceToken = (_DWORD *)FstSearchLatticeHashBackoff::getSilenceToken((FstSearchLatticeHashBackoff *)this, a4, a2);
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v49);
  v17 = a3[1];
  if (SilenceToken)
  {
    v17 += SilenceToken[1];
    v18 = *SilenceToken + *a3;
  }
  else
  {
    v18 = *a3;
  }
  if (v49[0] >> 25 == 126)
  {
    v19 = 0;
    v20 = v17;
  }
  else
  {
    v19 = *((_DWORD *)this + 34);
    v20 = v17 - v19;
  }
  if ((v12 & 0x80000000) != 0)
  {
    v21 = 0;
  }
  else
  {
    v21 = *((_DWORD *)this + 35);
    v20 -= v21;
  }
  v22 = v18 - v17;
  v23 = a3[3];
  v24 = this[20];
  if ((_DWORD)v23 == -1)
  {
    v26 = 0;
    if (a9)
      goto LABEL_19;
  }
  else
  {
    v25 = *((_DWORD *)v24 + 4 * v23 + 1);
    if (a9)
    {
      if (v25 >= 1)
        --v25;
      v26 = (v25 >> 1) + 1;
LABEL_19:
      v27 = *((_DWORD *)v24 + 4 * a2 + 1);
      if (v27 >= 1)
        --v27;
      v28 = v27 >> 1;
      v29 = (v27 >> 1) - v26 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v30 = *((_DWORD *)v24 + 4 * v12 + 1);
        if (v30 >= 1)
          --v30;
        v31 = v30 >> 1;
        goto LABEL_28;
      }
LABEL_29:
      v32 = 0;
      goto LABEL_30;
    }
    v26 = v25 + 1;
  }
  v28 = *((_DWORD *)v24 + 4 * a2 + 1);
  v29 = v28 - v26 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_29;
  v31 = *((_DWORD *)v24 + 4 * v12 + 1);
LABEL_28:
  v32 = v31 - v28;
LABEL_30:
  v34 = v26;
  v35 = v29;
  v36 = v32;
  v37 = v20;
  v38 = 0;
  v39 = v19;
  v40 = v22;
  v41 = 0;
  v42 = v21;
  v43 = xmmword_209A6C7F0;
  v44 = 0;
  v45 = -1;
  v33[0] = &off_24C2149F8;
  v33[1] = 0xBFF0000000000000;
  v46 = v49[0];
  v47 = v49[1];
  v48 = v50;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v33);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v33);
}

void sub_209829210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeHashBackoff::getSilenceToken(FstSearchLatticeHashBackoff *this, unsigned int a2, int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v3 = *((_QWORD *)this + 20) + 16 * a2;
  v4 = *(_DWORD *)(v3 + 12);
  if (v4 < 1)
    return 0;
  v5 = *(_DWORD *)(v3 + 8);
  v6 = v4 + v5;
  v7 = *((_QWORD *)this + 22);
  do
  {
    if (*(_DWORD *)(v7 + 20 * v5 + 12) == a3)
      result = v7 + 20 * v5;
    else
      result = 0;
    ++v5;
  }
  while ((int)v5 < v6 && !result);
  return result;
}

uint64_t FstSearchLatticeHashBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 356))
    return MiniFst::beginTopFstSyncRecog(this + 240);
  return this;
}

uint64_t FstSearchLatticeHashBackoff::endTopRecSyncRecog(FstSearchLatticeHashBackoff *this)
{
  uint64_t result;

  VirtMap::setEmpty(*((_QWORD *)this + 14));
  result = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return result;
}

uint64_t FstSearchLatticeHashBackoff::getBestExitScore(FstSearchLatticeHashBackoff *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  *((_DWORD *)this + 57) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 50);
  if (v1 >= v2)
    goto LABEL_19;
  v4 = 0;
  v5 = 0;
  v6 = 28 * v1;
  do
  {
    v7 = *((_QWORD *)this + 24) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          v5 = v22;
          v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 20);
    v11 = 1879048192;
    do
    {
      v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        v14 = *(_DWORD *)(v12 + 8);
        v15 = v13 + v14;
        v16 = *((_QWORD *)this + 22);
        do
        {
          v17 = v14;
          v18 = *(_DWORD *)(v16 + 20 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 57) = *(_DWORD *)(v16 + 20 * v17 + 12);
            v11 = v18;
          }
          v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v19 = 20000;
  else
    v19 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_20982942C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeHashBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLatticeHashBackoff *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 50);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 24);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 7;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

unint64_t FstSearchLatticeHashBackoff::seedTheory(FstSearchLatticeHashBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 176, 1, 1);
      v11 = *((_DWORD *)this + 46);
    }
    v12 = *((_QWORD *)this + 22) + 20 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_209A6C800;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)v12 = a2;
    v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      v13 = *((_DWORD *)this + 42);
    }
    v14 = (_DWORD *)(*((_QWORD *)this + 20) + 16 * v13);
    *v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v15 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v16 = *((_DWORD *)this + 50);
  if (v16 == *((_DWORD *)this + 51))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 192, 1, 1);
    v16 = *((_DWORD *)this + 50);
  }
  v17 = *((_QWORD *)this + 24) + 28 * v16;
  *(_DWORD *)v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(_QWORD *)(v17 + 16) = 0;
  *(_DWORD *)(v17 + 24) = -1;
  LODWORD(v17) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v17;
  *((_DWORD *)this + 38) = v17;
  return FstSearchLatticeHashBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchLatticeHashBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 228);
  if ((_DWORD)v8 != -1)
  {
    v9 = (_QWORD *)result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(_QWORD *)(result + 176) + 20 * v10[2] + 12); (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = v9[5];
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = v9[20];
      v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = v9[20];
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v9[22] + 20 * *(unsigned int *)(v20 + 16 * v8 + 8));
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(v9[20] + 16 * v16);
      i = *(unsigned int *)(v9[22] + 20 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLatticeHashBackoff::checkSearchParametersValidityForArcGraph(FstSearchLatticeHashBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLatticeHashBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _DWORD v28[2];
  __int128 v29;

  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    v9 = a4;
    LODWORD(v11) = 0;
    v12 = a2;
    v13 = a2;
    do
    {
      v14 = (_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v13);
      if (*v14 == 16777209)
        v11 = v11;
      else
        v11 = (v11 + 1);
      v13 = *(unsigned int *)(*(_QWORD *)(a1 + 176) + 20 * v14[2] + 12);
    }
    while ((_DWORD)v13 != -1);
    v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15)
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      v17 = v11 - v16;
      v18 = *(_QWORD *)a3 + 32 * v16;
      do
      {
        *(_QWORD *)v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_209A593D0;
        *(_QWORD *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if ((_DWORD)v11)
    {
      v19 = *(_QWORD *)(a1 + 160);
      v20 = -16;
      do
      {
        v21 = (unsigned int *)(v19 + 16 * v12);
        v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            v23 = v22 - 1;
            if (v22 < 1)
              v23 = v22;
            v20 = (v23 >> 1) + 1;
          }
          else
          {
            v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            v24 = v22 - 1;
            if (v22 < 1)
              v24 = v21[1];
            v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16)
            v25 = v22 + 1;
          else
            v25 = v20;
          v26 = v28[1];
          v11 = (v11 - 1);
          v27 = *(_QWORD *)a3 + 32 * v11;
          *(_DWORD *)v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          v19 = *(_QWORD *)(a1 + 160);
          v20 = -16;
        }
        v12 = *(unsigned int *)(*(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(v19 + 16 * v12 + 8) + 12);
      }
      while ((_DWORD)v12 != -1);
    }
  }
}

uint64_t FstSearchLatticeHashBackoff::makePartialResult(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  _QWORD v25[2];
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLatticeHashBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v24 = BestTrace;
  FstSearchLatticeHashBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v26 = v17;
      v27 = v19 - v17;
      v28 = v20 - v19;
      v29 = 0u;
      v30 = 0u;
      v31 = 0;
      v32 = 1879048192;
      v33 = 0;
      v34 = -1;
      v25[0] = &off_24C2149F8;
      v25[1] = 0xBFF0000000000000;
      v35 = *v18;
      v36 = v18[1];
      v37 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v25);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v25);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = a1[20] + 16 * v24;
  return (*(_DWORD *)(a1[22] + 20 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_209829D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLatticeHash::advanceDeltas(FstSearchLatticeHash *this, int a2, int a3, SearchStats *a4, int a5)
{
  int *v10;
  int v11;
  unint64_t v12;
  unint64_t i;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  _OWORD *v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int ScoreNoBackoff;
  uint64_t v31;
  int v32;
  int v33;
  __int128 v34;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  int64x2_t *v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t *v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64x2_t v58;
  int64x2_t *v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t *v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  uint64_t v68;
  int64x2_t *v69;
  int64x2_t result;
  int64x2_t v71;
  int v72;
  SearchStats *v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int v92;
  _BYTE v93[28];
  int64x2_t v94;
  int64x2_t v95;
  int v96[5];

  v96[0] = a2;
  v94 = 0u;
  v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  *(_QWORD *)v93 = 0xFFFFFFFF00000000;
  *(_DWORD *)&v93[8] = -1;
  *(_WORD *)&v93[12] = -2;
  *(_QWORD *)&v93[16] = 0;
  *(_DWORD *)&v93[24] = -1;
  *((_DWORD *)this + 58) = a3;
  v10 = (int *)((char *)this + 232);
  v11 = *((_DWORD *)this + 2);
  v12 = *((unsigned int *)this + 50);
  if ((_DWORD)v12)
  {
    v72 = a5;
    v73 = a4;
    for (i = 0; i < v12; ++i)
    {
      v14 = *((_QWORD *)this + 24);
      v15 = (int *)(v14 + 28 * i);
      v16 = v15[1];
      v17 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v17 + 160) != (_DWORD)v16)
      {
        if (*(_DWORD *)(v17 + 140) > (int)v16)
        {
          v18 = *v15;
          v19 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + 28 * i + 12))+ v18;
          v20 = *((_DWORD *)this + 58);
          if (v19 - v11 <= v20)
          {
            if (v20 > v19)
              *v10 = v19;
            v21 = (_OWORD *)(*((_QWORD *)this + 24) + 28 * i);
            v22 = *(_OWORD *)((char *)v21 + 12);
            *(_OWORD *)v93 = *v21;
            *(_OWORD *)&v93[12] = v22;
            *(_DWORD *)v93 = v19;
            FstSearchLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, (int *)v93);
          }
        }
        v23 = v16;
        do
        {
          v24 = *((_QWORD *)this + 5);
          v25 = *(_QWORD *)(v24 + 152);
          v26 = *(_DWORD *)(v25 + 4 * v23);
          v27 = *(_DWORD *)(v25 + 4 * (v23 + 1));
          v28 = *(_DWORD *)(v24 + 140);
          if (v28 <= v27)
          {
            if (v28 <= (int)v16 && *((_BYTE *)this + 356) != 0)
            {
              v36 = (v26 & 0xFFFFF) <= 0xFFFF3 ? v26 & 0xFFFFF : v26 & 0xFFFFF | 0xF00000;
              if (v36 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v90);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v36, (DgnString *)&v90, v37, v38, v39, v40, v41);
                v46 = &unk_209A6C820;
                if (v90.i32[2])
                  v46 = (void *)v90.i64[0];
                xprintf("Seed from state %d score %d trace %d, %s\n", v42, v43, v44, v45, v16, *(unsigned int *)(*((_QWORD *)this + 24) + 28 * i), *(unsigned int *)(*((_QWORD *)this + 24) + 28 * i + 8), v46);
                MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((_QWORD *)this + 24) + 28 * i), *(_DWORD *)(*((_QWORD *)this + 24) + 28 * i + 20), *(_DWORD *)(*((_QWORD *)this + 24) + 28 * i + 8), v27);
                DgnString::~DgnString((DgnString *)&v90);
              }
            }
          }
          else
          {
            v29 = (v26 >> 20) & 0x3FF;
            ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v25 + 4 * v23));
            v31 = *((_QWORD *)this + 24) + 28 * i;
            v32 = ScoreNoBackoff + v29 + *(_DWORD *)v31;
            v33 = *((_DWORD *)this + 58);
            if (v32 - v11 <= v33)
            {
              if (v33 > v32)
                *v10 = v32;
              v34 = *(_OWORD *)(v31 + 12);
              *(_OWORD *)v93 = *(_OWORD *)v31;
              *(_OWORD *)&v93[12] = v34;
              *(_DWORD *)v93 = v32;
              *(_DWORD *)&v93[4] = v27;
              *(_WORD *)&v93[12] = v26;
              *(_DWORD *)&v93[16] = DWORD1(v34) + v29;
              FstSearchLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, (int *)v93);
            }
          }
          v23 += 2;
        }
        while ((v26 & 0x80000000) == 0);
        v12 = *((unsigned int *)this + 50);
      }
    }
    a3 = *v10;
    a4 = v73;
    a5 = v72;
  }
  v92 = a3 + v11;
  if (*((_BYTE *)this + 356))
    MiniFst::updateFrame((char *)this + 240, (int *)this + 58, v11, a2);
  v90 = 0u;
  v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  v90 = vsubq_s64(v90, v94);
  v91 = vsubq_s64(v91, v95);
  v47 = (int64x2_t *)*((_QWORD *)this + 13);
  v48 = vaddq_s64(v47[1], v91);
  *v47 = vaddq_s64(*v47, v90);
  v47[1] = v48;
  v88 = 0u;
  v89 = 0u;
  SnapTime::recordTime((SnapTime *)&v88, 1, 0, 0, 0);
  FstSearchLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v92);
  v86 = 0u;
  v87 = 0u;
  SnapTime::recordTime((SnapTime *)&v86, 1, 0, 0, 0);
  v49 = vsubq_s64(v86, v88);
  v50 = (int64x2_t *)*((_QWORD *)this + 13);
  v51 = v50[3];
  v52 = vaddq_s64(v50[2], v49);
  v86 = v49;
  v87 = vsubq_s64(v87, v89);
  v53 = vaddq_s64(v51, v87);
  v50[2] = v52;
  v50[3] = v53;
  v84 = 0u;
  v85 = 0u;
  SnapTime::recordTime((SnapTime *)&v84, 1, 0, 0, 0);
  v54 = *((_QWORD *)this + 24);
  v55 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 24) = v55;
  *((_QWORD *)this + 26) = v54;
  LODWORD(v54) = *((_DWORD *)this + 51);
  v56 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 25) = v56;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v54;
  v57 = *((unsigned int *)this + 6);
  if ((_DWORD)v57 && (_DWORD)v56 && v57 < v56)
    mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(v55, v57, v56);
  FstSearchLatticeHashBackoff::generateNullTraces((unint64_t)this, a2, 0);
  v82 = 0u;
  v83 = 0u;
  SnapTime::recordTime((SnapTime *)&v82, 1, 0, 0, 0);
  v58 = vsubq_s64(v82, v84);
  v59 = (int64x2_t *)*((_QWORD *)this + 13);
  v60 = v59[5];
  v61 = vaddq_s64(v59[4], v58);
  v82 = v58;
  v83 = vsubq_s64(v83, v85);
  v62 = vaddq_s64(v60, v83);
  v59[4] = v61;
  v59[5] = v62;
  v80 = 0u;
  v81 = 0u;
  SnapTime::recordTime((SnapTime *)&v80, 1, 0, 0, 0);
  VirtMap::setEmpty(*((_QWORD *)this + 14));
  v78 = 0u;
  v79 = 0u;
  SnapTime::recordTime((SnapTime *)&v78, 1, 0, 0, 0);
  v63 = vsubq_s64(v78, v80);
  v64 = (int64x2_t *)*((_QWORD *)this + 13);
  v65 = v64[9];
  v66 = vaddq_s64(v64[8], v63);
  v78 = v63;
  v79 = vsubq_s64(v79, v81);
  v67 = vaddq_s64(v65, v79);
  v64[8] = v66;
  v64[9] = v67;
  v76 = 0u;
  v77 = 0u;
  SnapTime::recordTime((SnapTime *)&v76, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  v68 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v68;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v68;
    if (*((_DWORD *)a4 + 2) > v68)
      LODWORD(v68) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v68;
  }
  if (*((_BYTE *)this + 356))
    FstSearchLatticeHash::seedFromMiniFst((uint64_t)this, v96);
  if (a5)
    FstSearchLatticeHashBackoff::propagateNulls(this, v92, a2, a4);
  *((_DWORD *)this + 56) = a2;
  v74 = 0u;
  v75 = 0u;
  SnapTime::recordTime((SnapTime *)&v74, 1, 0, 0, 0);
  v69 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v69[6], vsubq_s64(v74, v76));
  v71 = vaddq_s64(v69[7], vsubq_s64(v75, v77));
  v69[6] = result;
  v69[7] = v71;
  return result;
}

void sub_20982A304(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLatticeHash::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;

  if (*(_BYTE *)(this + 356))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v46 = this + 176;
      v47 = (_QWORD *)(this + 160);
      v39 = this + 192;
      do
      {
        v5 = (int *)(*(_QWORD *)(v2 + 256) + 36 * v4);
        v6 = v5[4];
        v7 = v5[5];
        v8 = v5[6];
        v44 = *v5;
        v45 = v5[7];
        v9 = v5[2];
        v48 = 0;
        v49 = 0;
        v42 = v7;
        v43 = v6;
        v41 = v8;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          v10 = 0;
          v11 = 0;
          do
          {
            if (v11 == HIDWORD(v49))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v48, 1, 1);
              v11 = v49;
              v10 = v48;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            v12 = v49;
            v11 = v49 + 1;
            LODWORD(v49) = v49 + 1;
            v9 = *(_DWORD *)(*(_QWORD *)(v2 + 240) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            v14 = v12 + 1;
            v15 = 4 * v12;
            do
            {
              v16 = *(_DWORD *)(v48 + v15);
              v17 = *(_QWORD *)(v2 + 240);
              v18 = (int *)(v17 + 36 * v16);
              v19 = *v18;
              v20 = *((_QWORD *)v18 + 2);
              v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
                v21 = *(_DWORD *)(v2 + 184);
                v17 = *(_QWORD *)(v2 + 240);
              }
              v22 = *(_QWORD *)(v2 + 176) + 20 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)v22 = v19;
              *(_QWORD *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = -1;
              v23 = *(_QWORD *)(v17 + 36 * v16 + 28);
              v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v47, 1, 1);
                v24 = *(unsigned int *)(v2 + 168);
              }
              v25 = *(_QWORD *)(v2 + 160);
              v26 = v25 + 16 * v24;
              *(_QWORD *)v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
          v27 = *(_DWORD *)(v2 + 184);
        }
        v28 = *(_QWORD *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        v29 = (_DWORD *)(v28 + 20 * v27);
        *v29 = v44;
        v29[1] = v43;
        v29[2] = v42;
        v29[3] = v13;
        v29[4] = -1;
        if (v45 == 16777213)
        {
          v45 = 16777209;
          if (*(_DWORD *)(*v47 + 16 * v13) == 16777209)
          {
            v27 = *(_DWORD *)(*v47 + 16 * v13 + 8);
            v45 = 16777209;
          }
        }
        v30 = *a2;
        v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v47, 1, 1);
          v31 = *(unsigned int *)(v2 + 168);
        }
        v32 = *(_QWORD *)(v2 + 160);
        v33 = (int *)(v32 + 16 * v31);
        *v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        v35 = *(unsigned int *)(v2 + 200);
        if (v35 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v39, 1, 1);
          LODWORD(v35) = *(_DWORD *)(v2 + 200);
        }
        v36 = *(_QWORD *)(v2 + 192) + 28 * v35;
        *(_DWORD *)v36 = v44;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v43;
        *(_DWORD *)(v36 + 20) = v42;
        *(_DWORD *)(v36 + 24) = -1;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 264);
        v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38)
          v37 = v38;
        else
          v37 = v37;
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_20982A698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLatticeHash::annihilateNullTraces(unint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  char *v10;
  int v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;

  if (*(_DWORD *)(this + 168))
  {
    v1 = this;
    v2 = 0;
    v3 = (_QWORD *)(this + 176);
    do
    {
      v37 = *(_QWORD *)(v1 + 160);
      v38 = 0;
      v39 = 0;
      FstSearchLatticeHashBackoff::getCandidateTokensForTrace(v1, v37 + 16 * v2, (uint64_t)&v38);
      v4 = v39;
      v5 = (char *)v38;
      if (v39 < 2
        || (mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>((char *)v38 + 20, (v39 - 1), 20),
            v4 = v39,
            v5 = (char *)v38,
            v39 < 2))
      {
        v7 = 0;
        v9 = xmmword_209A6C7C0;
      }
      else
      {
        v6 = 0;
        v7 = 0;
        v8 = 20 * v39 - 20;
        v9 = xmmword_209A6C7C0;
        do
        {
          v10 = &v5[v6];
          v11 = *(_DWORD *)&v5[v6 + 28];
          if (v11 != *(_DWORD *)&v5[20 * v7 + 8] && *((_DWORD *)v5 + 2) != v11)
          {
            ++v7;
            v12 = *(_OWORD *)(v10 + 20);
            v13 = &v5[20 * v7];
            *((_DWORD *)v13 + 4) = *((_DWORD *)v10 + 9);
            *(_OWORD *)v13 = v12;
          }
          v6 += 20;
        }
        while (v8 != v6);
      }
      v14 = v7 + 1;
      if (HIDWORD(v39) < v14)
      {
        v40 = 0;
        HIDWORD(v39) = realloc_array(v5, &v40, 20 * v14, 20 * v4, 20 * v4, 1) / 0x14;
        v5 = (char *)v40;
        v38 = v40;
        v4 = v39;
        v9 = xmmword_209A6C7C0;
      }
      if (v4 < v14)
      {
        v15 = v14 - v4;
        v16 = &v5[20 * v4 + 16];
        do
        {
          *((_OWORD *)v16 - 1) = v9;
          *(_DWORD *)v16 = -1;
          v16 += 20;
          --v15;
        }
        while (v15);
      }
      LODWORD(v39) = v7 + 1;
      mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(v5 + 20, v7, 20);
      v17 = v39;
      v18 = *(unsigned int *)(v1 + 20);
      v36 = v2;
      if (v39 > v18)
      {
        if (HIDWORD(v39) < v18)
        {
          v40 = 0;
          HIDWORD(v39) = realloc_array(v38, &v40, 20 * v18, 20 * v39, 20 * v39, 1)
                       / 0x14;
          v38 = v40;
          v17 = v39;
        }
        if (v17 < v18)
        {
          v19 = v18 - v17;
          v20 = (char *)v38 + 20 * v17 + 16;
          do
          {
            *((_OWORD *)v20 - 1) = xmmword_209A6C7C0;
            *v20 = -1;
            v20 += 5;
            --v19;
          }
          while (v19);
        }
        LODWORD(v39) = v18;
        v17 = v18;
      }
      if (v17)
      {
        v21 = 0;
        v22 = 0;
        v23 = v37 + 16 * v2;
        v24 = (_DWORD *)(v23 + 12);
        v25 = (_DWORD *)(v23 + 8);
        v26 = 0xFFFFFFFFLL;
        do
        {
          if (*v24 <= (int)v22)
          {
            v30 = *(unsigned int *)(v1 + 184);
            v31 = *(_QWORD *)(v1 + 176);
            *(_DWORD *)(v31 + 20 * v26 + 16) = v30;
            v32 = (char *)v38;
            if (v30 == *(_DWORD *)(v1 + 188))
            {
              DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v3, 1, 1);
              v33 = *(_DWORD *)(v1 + 184);
              v31 = *(_QWORD *)(v1 + 176);
              v17 = v39;
            }
            else
            {
              v33 = v30;
            }
            v34 = v31 + 20 * v33;
            v35 = *(_OWORD *)&v32[v21];
            *(_DWORD *)(v34 + 16) = *(_DWORD *)&v32[v21 + 16];
            *(_OWORD *)v34 = v35;
            ++*(_DWORD *)(v1 + 184);
          }
          else
          {
            v27 = *v3 + 20 * (v22 + *v25);
            v28 = *(_OWORD *)((char *)v38 + v21);
            *(_DWORD *)(v27 + 16) = *(_DWORD *)((char *)v38 + v21 + 16);
            *(_OWORD *)v27 = v28;
            v29 = v22 + *v25;
            if (v22)
              *(_DWORD *)(*v3 + 20 * (v22 + *v25 - 1) + 16) = v29;
            v30 = v29;
          }
          ++v22;
          v21 += 20;
          v26 = v30;
        }
        while (v22 < v17);
      }
      *(_DWORD *)(v37 + 16 * v36 + 12) = 0;
      this = DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v38);
      v2 = v36 + 1;
    }
    while (v36 + 1 < (unint64_t)*(unsigned int *)(v1 + 168));
  }
  return this;
}

void sub_20982AA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeHash::collectTraces(FstSearchLatticeHash *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;

  v2 = *((unsigned int *)this + 42);
  v43 = 0;
  v42 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v42 = v3;
    v43 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v43);
  }
  v5 = *((unsigned int *)this + 50);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v42;
    v8 = (unsigned int *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v10 = *v8;
      v8 += 7;
      v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v11) = *((_DWORD *)this + 42);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = (uint64_t *)((char *)this + 160);
    v14 = v42;
    do
    {
      v11 = (v11 - 1);
      if ((v12 & 1) != 0)
      {
        v12 = 1;
      }
      else if (*(_DWORD *)(*v13 + 16 * v11) == 16777213)
      {
        v12 = 1;
        *((_DWORD *)v14 + v11) = 1;
      }
      else
      {
        v12 = 0;
      }
      if (*((_DWORD *)v14 + v11))
      {
        v15 = *(unsigned int *)(*v13 + 16 * v11 + 8);
        if ((_DWORD)v15 != -1)
        {
          v16 = *((_QWORD *)this + 22);
          do
          {
            v17 = *(unsigned int *)(v16 + 20 * v15 + 12);
            if ((_DWORD)v17 != -1)
              *((_DWORD *)v14 + v17) = 1;
            v15 = *(unsigned int *)(v16 + 20 * v15 + 16);
          }
          while ((_DWORD)v15 != -1);
        }
      }
    }
    while ((_DWORD)v11);
    v18 = *((_DWORD *)this + 42);
    v40 = 0;
    v41 = 0;
    if (v18)
    {
      v19 = 0;
      v20 = 0;
      do
      {
        if (*((_DWORD *)v42 + v19))
        {
          v21 = *v13;
          if (v19 != v20)
          {
            *(_OWORD *)(v21 + 16 * v20) = *(_OWORD *)(v21 + 16 * v19);
            v21 = *v13;
          }
          v22 = v41;
          *(_DWORD *)(v21 + 16 * v20 + 8) = v41;
          v23 = *(unsigned int *)(v21 + 16 * v19 + 8);
          if ((_DWORD)v23 == -1)
          {
            v24 = v40;
            v25 = v22;
          }
          else
          {
            v26 = *((_QWORD *)this + 22);
            v25 = v22;
            do
            {
              if (v25 == HIDWORD(v41))
              {
                DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)&v40, 1, 1);
                v25 = v41;
              }
              v24 = v40;
              v27 = v40 + 20 * v25;
              *(_OWORD *)v27 = *(_OWORD *)(v26 + 20 * v23);
              LODWORD(v41) = ++v25;
              v30 = *(_DWORD *)(v27 + 12);
              v28 = (_DWORD *)(v27 + 12);
              v29 = v30;
              v28[1] = v25;
              if (v30 != -1)
                *v28 = *((_DWORD *)v42 + v29);
              v26 = *((_QWORD *)this + 22);
              v23 = *(unsigned int *)(v26 + 20 * v23 + 16);
            }
            while ((_DWORD)v23 != -1);
            v21 = *v13;
            v22 = *(_DWORD *)(*v13 + 16 * v20 + 8);
          }
          *(_DWORD *)(v24 + 20 * (v25 - 1) + 16) = -1;
          *(_DWORD *)(v21 + 16 * v20 + 12) = v25 - v22;
          *((_DWORD *)v42 + v19) = v20++;
          v18 = *((_DWORD *)this + 42);
        }
        ++v19;
      }
      while (v19 < v18);
      v31 = *((_DWORD *)this + 43);
      if (v20 > v31)
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, v20 - v31, 0);
        v18 = *((_DWORD *)this + 42);
      }
      if (v18 < v20)
      {
        v32 = v20 - (unint64_t)v18;
        v33 = (_OWORD *)(*v13 + 16 * v18);
        do
        {
          *v33++ = xmmword_209A6C7D0;
          --v32;
        }
        while (v32);
      }
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v20 = 0;
    v40 = 0;
    v41 = 0;
  }
  *((_DWORD *)this + 42) = v20;
  v34 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v40;
  v40 = v34;
  LODWORD(v34) = *((_DWORD *)this + 47);
  *((_QWORD *)this + 23) = v41;
  LODWORD(v41) = 0;
  HIDWORD(v41) = v34;
  v35 = *((unsigned int *)this + 50);
  if ((_DWORD)v35)
  {
    v36 = v42;
    v37 = (_DWORD *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v38 = *v37;
      if ((_DWORD)v38 != -1)
        *v37 = *((_DWORD *)v36 + v38);
      v37 += 7;
      --v35;
    }
    while (v35);
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v40);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v42);
}

void sub_20982AD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a11);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLatticeHash::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLatticeHash::advanceDeltas((FstSearchLatticeHash *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLatticeHash::collectTraces((FstSearchLatticeHash *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

int64x2_t FstSearchLatticeHash::reset(FstSearchLatticeHash *this)
{
  int64x2_t *v2;
  int64x2_t result;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;

  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 50) = 0;
  v7 = 0u;
  v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  v5 = 0u;
  v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  v2 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchLatticeHash::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLatticeHash::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLatticeHash::beginTopRecPassSyncRecog(FstSearchLatticeHash *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((_BYTE *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLatticeHash::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLatticeHash::collectTraces((FstSearchLatticeHash *)this);
  FstSearchLatticeHash::annihilateNullTraces((unint64_t)this);
  FstSearchLatticeHashBackoff::annihilateNullActiveTokens((FstSearchLatticeHashBackoff *)this);
  FstSearchLatticeHashBackoff::annihilateNullLongestFinal((unint64_t)this);
  FstSearchLatticeHash::collectTraces((FstSearchLatticeHash *)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = this[13];
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLatticeHash::printSize(FstSearchLatticeHash *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 16 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 16 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 20 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 20 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((_DWORD *)this + 50);
  v65 = 26 * v64;
  if (v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 26 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((_DWORD *)this + 54);
  v75 = 26 * v74;
  if (v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 26 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 240, 0);
  v99 = sizeObject((uint64_t)this + 240, 1);
  v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_20982B74C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLatticeHash::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLatticeHashBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchLatticeHash::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, char a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v27, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLatticeHashBackoff::createLatticeNodes(a1, &v30, (uint64_t)&v28, (uint64_t)a2, v27, a3, a4);
  v23 = (uint64_t)v8;
  v24 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v24)
  {
    v10 = 0;
    v11 = v29;
    do
    {
      if (*(_BYTE *)(*a3 + v10))
      {
        v12 = *(_QWORD *)(a1 + 160);
        if ((*(_DWORD *)(v12 + 16 * v10) - 16777209) >= 2)
        {
          v13 = v12 + 16 * v10;
          if (*(int *)(v13 + 12) >= 1)
          {
            v14 = *(_DWORD *)(v13 + 8);
            do
            {
              v15 = *(_QWORD *)(a1 + 176) + 20 * v14;
              v16 = *(unsigned int *)(v15 + 12);
              if ((_DWORD)v16 == -1)
                v17 = 0;
              else
                v17 = v11 - *((_DWORD *)v30 + v16);
              v18 = *(unsigned int *)(v28 + 4 * v17);
              if (*(_BYTE *)(*a4 + v10))
                FstSearchLatticeHash::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v10))), a2, v9, a5);
              v19 = v27[0];
              if (*(_DWORD *)(v27[0] + 16 * v10 + 8))
              {
                v20 = 0;
                do
                {
                  v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v10) + 4 * v20);
                  FstSearchLatticeHash::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v21))), a2, v9, a5);
                  ++v20;
                  v19 = v27[0];
                }
                while (v20 < *(unsigned int *)(v27[0] + 16 * v10 + 8));
              }
              ++v14;
            }
            while (v14 < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 12)
                        + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v30);
}

void sub_20982BAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLatticeHash::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  _DWORD *SilenceToken;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  ArcGraph *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _QWORD v33[2];
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  __int128 v48;
  _DWORD v49[2];
  __int128 v50;

  v11 = a5;
  v12 = a4;
  if ((a4 & 0x80000000) != 0)
    SilenceToken = 0;
  else
    SilenceToken = (_DWORD *)FstSearchLatticeHashBackoff::getSilenceToken((FstSearchLatticeHashBackoff *)this, a4, a2);
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v49);
  v17 = a3[1];
  if (SilenceToken)
  {
    v17 += SilenceToken[1];
    v18 = *SilenceToken + *a3;
  }
  else
  {
    v18 = *a3;
  }
  if (v49[0] >> 25 == 126)
  {
    v19 = 0;
    v20 = v17;
  }
  else
  {
    v19 = *((_DWORD *)this + 34);
    v20 = v17 - v19;
  }
  if ((v12 & 0x80000000) != 0)
  {
    v21 = 0;
  }
  else
  {
    v21 = *((_DWORD *)this + 35);
    v20 -= v21;
  }
  v22 = v18 - v17;
  v23 = a3[3];
  v24 = this[20];
  if ((_DWORD)v23 == -1)
  {
    v26 = 0;
    if (a9)
      goto LABEL_19;
  }
  else
  {
    v25 = *((_DWORD *)v24 + 4 * v23 + 1);
    if (a9)
    {
      if (v25 >= 1)
        --v25;
      v26 = (v25 >> 1) + 1;
LABEL_19:
      v27 = *((_DWORD *)v24 + 4 * a2 + 1);
      if (v27 >= 1)
        --v27;
      v28 = v27 >> 1;
      v29 = (v27 >> 1) - v26 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v30 = *((_DWORD *)v24 + 4 * v12 + 1);
        if (v30 >= 1)
          --v30;
        v31 = v30 >> 1;
        goto LABEL_28;
      }
LABEL_29:
      v32 = 0;
      goto LABEL_30;
    }
    v26 = v25 + 1;
  }
  v28 = *((_DWORD *)v24 + 4 * a2 + 1);
  v29 = v28 - v26 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_29;
  v31 = *((_DWORD *)v24 + 4 * v12 + 1);
LABEL_28:
  v32 = v31 - v28;
LABEL_30:
  v34 = v26;
  v35 = v29;
  v36 = v32;
  v37 = v20;
  v38 = 0;
  v39 = v19;
  v40 = v22;
  v41 = 0;
  v42 = v21;
  v43 = xmmword_209A6C7F0;
  v44 = 0;
  v45 = -1;
  v33[0] = &off_24C2149F8;
  v33[1] = 0xBFF0000000000000;
  v46 = v49[0];
  v47 = v49[1];
  v48 = v50;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v33);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v33);
}

void sub_20982BCF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeHash::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 356))
    return MiniFst::beginTopFstSyncRecog(this + 240);
  return this;
}

uint64_t FstSearchLatticeHash::endTopRecSyncRecog(FstSearchLatticeHash *this)
{
  uint64_t result;

  VirtMap::setEmpty(*((_QWORD *)this + 14));
  result = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return result;
}

uint64_t FstSearchLatticeHash::getBestExitScore(FstSearchLatticeHash *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  *((_DWORD *)this + 57) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 50);
  if (v1 >= v2)
    goto LABEL_19;
  v4 = 0;
  v5 = 0;
  v6 = 28 * v1;
  do
  {
    v7 = *((_QWORD *)this + 24) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          v5 = v22;
          v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 20);
    v11 = 1879048192;
    do
    {
      v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        v14 = *(_DWORD *)(v12 + 8);
        v15 = v13 + v14;
        v16 = *((_QWORD *)this + 22);
        do
        {
          v17 = v14;
          v18 = *(_DWORD *)(v16 + 20 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 57) = *(_DWORD *)(v16 + 20 * v17 + 12);
            v11 = v18;
          }
          v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v19 = 20000;
  else
    v19 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_20982BEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeHash::getBestScoreMaybeUpdateFstNode(FstSearchLatticeHash *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 50);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 24);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 7;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

unint64_t FstSearchLatticeHash::seedTheory(FstSearchLatticeHash *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 176, 1, 1);
      v11 = *((_DWORD *)this + 46);
    }
    v12 = *((_QWORD *)this + 22) + 20 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_209A6C800;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)v12 = a2;
    v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      v13 = *((_DWORD *)this + 42);
    }
    v14 = (_DWORD *)(*((_QWORD *)this + 20) + 16 * v13);
    *v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v15 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v16 = *((_DWORD *)this + 50);
  if (v16 == *((_DWORD *)this + 51))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 192, 1, 1);
    v16 = *((_DWORD *)this + 50);
  }
  v17 = *((_QWORD *)this + 24) + 28 * v16;
  *(_DWORD *)v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(_QWORD *)(v17 + 16) = 0;
  *(_DWORD *)(v17 + 24) = -1;
  LODWORD(v17) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v17;
  *((_DWORD *)this + 38) = v17;
  return FstSearchLatticeHashBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchLatticeHash::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 228);
  if ((_DWORD)v8 != -1)
  {
    v9 = (_QWORD *)result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(_QWORD *)(result + 176) + 20 * v10[2] + 12); (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = v9[5];
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = v9[20];
      v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = v9[20];
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v9[22] + 20 * *(unsigned int *)(v20 + 16 * v8 + 8));
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(v9[20] + 16 * v16);
      i = *(unsigned int *)(v9[22] + 20 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLatticeHash::checkSearchParametersValidityForArcGraph(FstSearchLatticeHash *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLatticeHash::makePartialResult(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  _QWORD v25[2];
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLatticeHashBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v24 = BestTrace;
  FstSearchLatticeHashBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v26 = v17;
      v27 = v19 - v17;
      v28 = v20 - v19;
      v29 = 0u;
      v30 = 0u;
      v31 = 0;
      v32 = 1879048192;
      v33 = 0;
      v34 = -1;
      v25[0] = &off_24C2149F8;
      v25[1] = 0xBFF0000000000000;
      v35 = *v18;
      v36 = v18[1];
      v37 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v25);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v25);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = a1[20] + 16 * v24;
  return (*(_DWORD *)(a1[22] + 20 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_20982C640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationHashBackoff::maybeInitDurModel(FstSearchDurationHashBackoff *this, const PicMgr *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1)
    v6 = 56;
  else
    v6 = 72;
  v7 = v16;
  v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!(_DWORD)v7)
      goto LABEL_13;
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  v9 = 0;
  v10 = v15;
  v11 = *((_QWORD *)this + 24);
  do
  {
    if (!(_WORD)v9 || (v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF))
      v13 = 0;
    else
      v13 = *(_WORD *)(*(_QWORD *)((char *)a2 + v6) + 2 * v12);
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_20982C740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchDurationHashBackoff::advanceDeltas(FstSearchDurationHashBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int ScoreAllowBackoff_updateNodeInSequence;
  __int128 *v20;
  __int128 v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  __int128 *v34;
  __int128 v35;
  int v36;
  int v37;
  int v38;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  int v51;
  int v52;
  int64x2_t *v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t *v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int64x2_t v64;
  int64x2_t *v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t *v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  uint64_t v74;
  int64x2_t *v75;
  int64x2_t result;
  int64x2_t v77;
  int v78;
  SearchStats *v79;
  int v80;
  int v81;
  int v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int v101;
  _BYTE v102[28];
  int64x2_t v103;
  int64x2_t v104;
  int v105[5];

  v105[0] = a2;
  v103 = 0u;
  v104 = 0u;
  SnapTime::recordTime((SnapTime *)&v103, 1, 0, 0, 0);
  *(_QWORD *)v102 = 0xFFFFFFFF00000000;
  *(_DWORD *)&v102[8] = -1;
  *(_WORD *)&v102[12] = -2;
  *(_QWORD *)&v102[16] = 0;
  *(_DWORD *)&v102[24] = 0;
  v10 = (int *)((char *)this + 256);
  *((_DWORD *)this + 64) = a3;
  v82 = *((_DWORD *)this + 2);
  v11 = *((unsigned int *)this + 56);
  if ((_DWORD)v11)
  {
    v78 = a5;
    v79 = a4;
    v12 = 0;
    v81 = *((_DWORD *)this + 53);
    v80 = *((unsigned __int8 *)this + 208);
    v13 = *((_DWORD *)this + 2);
    do
    {
      v14 = *((_QWORD *)this + 27);
      v15 = v14 + 28 * v12;
      v16 = *(unsigned int *)(v15 + 4);
      v17 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v17 + 160) != (_DWORD)v16)
      {
        if (*(_DWORD *)(v17 + 140) > (int)v16)
        {
          if (*((_DWORD *)this + 19) + *((_DWORD *)this + 64) >= 5000)
            v18 = 5000;
          else
            v18 = *((_DWORD *)this + 19) + *((_DWORD *)this + 64);
          ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + 28 * v12 + 12), *(_DWORD *)v15, v18);
          v20 = (__int128 *)(*((_QWORD *)this + 27) + 28 * v12);
          v21 = *v20;
          *(_OWORD *)&v102[12] = *(__int128 *)((char *)v20 + 12);
          *(_OWORD *)v102 = v21;
          v22 = WORD6(v21);
          if (WORD6(v21))
          {
            if (*(int *)&v102[20] >= 1)
              v23 = v80 - *(_DWORD *)&v102[20];
            else
              v23 = v80;
            v22 = v23 & ((*(_DWORD *)&v102[20] - v80) >> 31);
            *(_DWORD *)&v102[20] -= v80;
            *(_DWORD *)&v102[24] += v22;
          }
          v24 = v22 + ScoreAllowBackoff_updateNodeInSequence;
          if (v24 - v13 <= *v10)
          {
            if (*v10 > v24)
              *v10 = v24;
            *(_DWORD *)v102 = v24;
            FstSearchDurationHashBackoff::maybeInsertHashedToken((uint64_t)this, (uint64_t)v102);
          }
        }
        v25 = v16;
        do
        {
          v26 = *((_QWORD *)this + 5);
          v27 = *(_QWORD *)(v26 + 152);
          v28 = *(_DWORD *)(v27 + 4 * v25);
          v29 = *(_DWORD *)(v27 + 4 * (v25 + 1));
          v30 = *(_DWORD *)(v26 + 140);
          if (v30 <= v29)
          {
            if (v30 <= (int)v16 && *((_BYTE *)this + 380) != 0)
            {
              v40 = (v28 & 0xFFFFF) <= 0xFFFF3 ? v28 & 0xFFFFF : v28 & 0xFFFFF | 0xF00000;
              if (v40 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v99);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v40, (DgnString *)&v99, v41, v42, v43, v44, v45);
                v50 = &unk_209A6C820;
                if (v99.i32[2])
                  v50 = (void *)v99.i64[0];
                xprintf("Seed from state %d score %d trace %d, %s\n", v46, v47, v48, v49, v16, *(unsigned int *)(*((_QWORD *)this + 27) + 28 * v12), *(unsigned int *)(*((_QWORD *)this + 27) + 28 * v12 + 8), v50);
                MiniFst::seed((uint64_t)this + 264, *(_DWORD *)(*((_QWORD *)this + 27) + 28 * v12), 0, *(_DWORD *)(*((_QWORD *)this + 27) + 28 * v12 + 8), v29);
                DgnString::~DgnString((DgnString *)&v99);
              }
            }
          }
          else
          {
            v31 = (v28 >> 20) & 0x3FF;
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 64) >= 5000)
              v32 = 5000;
            else
              v32 = *((_DWORD *)this + 19) + *((_DWORD *)this + 64);
            v33 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v27 + 4 * v25), *(_DWORD *)(*((_QWORD *)this + 27) + 28 * v12) + v31, v32);
            v34 = (__int128 *)(*((_QWORD *)this + 27) + 28 * v12);
            v35 = *v34;
            *(_OWORD *)&v102[12] = *(__int128 *)((char *)v34 + 12);
            *(_OWORD *)v102 = v35;
            v36 = *(_DWORD *)&v102[20] & ~(*(int *)&v102[20] >> 31);
            v37 = (unsigned __int16)v28;
            if ((_WORD)v28)
            {
              v37 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * (unsigned __int16)v28);
              v36 -= v37 & (v37 >> 31);
              v38 = v81;
            }
            else
            {
              v38 = 0;
            }
            v13 = v82;
            v51 = v38 + v36;
            *(_DWORD *)&v102[20] = v37;
            *(_DWORD *)&v102[24] += v51;
            v52 = v51 + v33;
            if (v52 - v82 <= *v10)
            {
              if (*v10 > v52)
                *v10 = v52;
              *(_DWORD *)v102 = v52;
              *(_DWORD *)&v102[4] = v29;
              *(_WORD *)&v102[12] = v28;
              *(_DWORD *)&v102[16] += v31;
              FstSearchDurationHashBackoff::maybeInsertHashedToken((uint64_t)this, (uint64_t)v102);
            }
          }
          v25 += 2;
        }
        while ((v28 & 0x80000000) == 0);
        v11 = *((unsigned int *)this + 56);
      }
      ++v12;
    }
    while (v12 < v11);
    a3 = *v10;
    a4 = v79;
    a5 = v78;
  }
  v101 = a3 + v82;
  if (*((_BYTE *)this + 380))
    MiniFst::updateFrame((char *)this + 264, (int *)this + 64, v82, a2);
  v99 = 0u;
  v100 = 0u;
  SnapTime::recordTime((SnapTime *)&v99, 1, 0, 0, 0);
  v99 = vsubq_s64(v99, v103);
  v100 = vsubq_s64(v100, v104);
  v53 = (int64x2_t *)*((_QWORD *)this + 13);
  v54 = vaddq_s64(v53[1], v100);
  *v53 = vaddq_s64(*v53, v99);
  v53[1] = v54;
  v97 = 0u;
  v98 = 0u;
  SnapTime::recordTime((SnapTime *)&v97, 1, 0, 0, 0);
  FstSearchDurationHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v101);
  v95 = 0u;
  v96 = 0u;
  SnapTime::recordTime((SnapTime *)&v95, 1, 0, 0, 0);
  v55 = vsubq_s64(v95, v97);
  v56 = (int64x2_t *)*((_QWORD *)this + 13);
  v57 = v56[3];
  v58 = vaddq_s64(v56[2], v55);
  v95 = v55;
  v96 = vsubq_s64(v96, v98);
  v59 = vaddq_s64(v57, v96);
  v56[2] = v58;
  v56[3] = v59;
  v93 = 0u;
  v94 = 0u;
  SnapTime::recordTime((SnapTime *)&v93, 1, 0, 0, 0);
  v60 = *((_QWORD *)this + 27);
  v61 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 27) = v61;
  *((_QWORD *)this + 29) = v60;
  LODWORD(v60) = *((_DWORD *)this + 57);
  v62 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 28) = v62;
  *((_DWORD *)this + 60) = 0;
  *((_DWORD *)this + 61) = v60;
  v63 = *((unsigned int *)this + 6);
  if ((_DWORD)v63 && (_DWORD)v62 && v63 < v62)
    mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(v61, v63, v62);
  v91 = 0u;
  v92 = 0u;
  SnapTime::recordTime((SnapTime *)&v91, 1, 0, 0, 0);
  v64 = vsubq_s64(v91, v93);
  v65 = (int64x2_t *)*((_QWORD *)this + 13);
  v66 = v65[5];
  v67 = vaddq_s64(v65[4], v64);
  v91 = v64;
  v92 = vsubq_s64(v92, v94);
  v68 = vaddq_s64(v66, v92);
  v65[4] = v67;
  v65[5] = v68;
  v89 = 0u;
  v90 = 0u;
  SnapTime::recordTime((SnapTime *)&v89, 1, 0, 0, 0);
  VirtMap::setEmpty(*((_QWORD *)this + 14));
  v87 = 0u;
  v88 = 0u;
  SnapTime::recordTime((SnapTime *)&v87, 1, 0, 0, 0);
  v69 = vsubq_s64(v87, v89);
  v70 = (int64x2_t *)*((_QWORD *)this + 13);
  v71 = v70[9];
  v72 = vaddq_s64(v70[8], v69);
  v87 = v69;
  v88 = vsubq_s64(v88, v90);
  v73 = vaddq_s64(v71, v88);
  v70[8] = v72;
  v70[9] = v73;
  v85 = 0u;
  v86 = 0u;
  SnapTime::recordTime((SnapTime *)&v85, 1, 0, 0, 0);
  *((_DWORD *)this + 60) = 0;
  v74 = *((unsigned int *)this + 56);
  *((_DWORD *)this + 38) = v74;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v74;
    if (*((_DWORD *)a4 + 2) > v74)
      LODWORD(v74) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v74;
  }
  if (*((_BYTE *)this + 380))
    FstSearchDurationHashBackoff::seedFromMiniFst((uint64_t)this, v105);
  if (a5)
    FstSearchDurationHashBackoff::propagateNulls(this, v101, a2, a4);
  *((_DWORD *)this + 62) = a2;
  v83 = 0u;
  v84 = 0u;
  SnapTime::recordTime((SnapTime *)&v83, 1, 0, 0, 0);
  v75 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v75[6], vsubq_s64(v83, v85));
  v77 = vaddq_s64(v75[7], vsubq_s64(v84, v86));
  v75[6] = result;
  v75[7] = v77;
  return result;
}

void sub_20982CD9C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

__n128 FstSearchDurationHashBackoff::maybeInsertHashedToken(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  __n128 result;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;

  v4 = *(unsigned int *)(a2 + 4);
  v5 = v4 >> 6;
  v6 = v4 & 0x3F;
  v7 = *(uint64_t **)(a1 + 112);
  v8 = v7[2];
  v9 = *(uint64_t **)(v8 + 8 * v5);
  if (!v9)
  {
    v10 = *((unsigned int *)v7 + 12);
    v11 = *((unsigned int *)v7 + 13);
    v12 = *v7;
    if (v10 >= v11)
    {
      v13 = v12 + 16 * v11;
      v15 = *(_DWORD *)(v13 + 8);
      v14 = (_DWORD *)(v13 + 8);
      if (!v15)
      {
        *(_QWORD *)(v12 + 16 * v11) = MemChunkAlloc(0x100uLL, 0);
        *v14 = 64;
        v12 = *v7;
        v8 = v7[2];
        LODWORD(v10) = *((_DWORD *)v7 + 12);
        v11 = *((unsigned int *)v7 + 13);
      }
      *(_QWORD *)(v8 + 8 * v5) = v12 + 16 * v11;
      *((_DWORD *)v7 + 13) = v11 + 1;
    }
    else
    {
      *(_QWORD *)(v8 + 8 * v5) = v12 + 16 * v10;
    }
    *((_DWORD *)v7 + 12) = v10 + 1;
    v16 = *(_QWORD *)(v7[2] + 8 * v5);
    memset(*(void **)v16, 255, 4 * *(unsigned int *)(v16 + 8));
    v18 = *((_DWORD *)v7 + 10);
    if (v18 == *((_DWORD *)v7 + 11))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v7 + 4), 1, 1);
      v18 = *((_DWORD *)v7 + 10);
    }
    *(_DWORD *)(v7[4] + 4 * v18) = v5;
    ++*((_DWORD *)v7 + 10);
    v9 = *(uint64_t **)(v7[2] + 8 * v5);
  }
  v19 = *v9;
  v20 = *(_DWORD *)(v19 + 4 * v6);
  v21 = (_QWORD *)(a1 + 232);
  if (v20 == -1)
  {
    *(_DWORD *)(v19 + 4 * v6) = *(_DWORD *)(a1 + 240);
    v23 = *(_DWORD *)(a1 + 240);
    if (v23 == *(_DWORD *)(a1 + 244))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v21, 1, 1);
      v23 = *(_DWORD *)(a1 + 240);
    }
    v24 = *(_QWORD *)(a1 + 232) + 28 * v23;
    result = *(__n128 *)a2;
    *(_OWORD *)(v24 + 12) = *(_OWORD *)(a2 + 12);
    *(__n128 *)v24 = result;
    ++*(_DWORD *)(a1 + 240);
  }
  else
  {
    v22 = *v21 + 28 * v20;
    if (*(_DWORD *)v22 > *(_DWORD *)a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)(v22 + 12) = *(_OWORD *)(a2 + 12);
      *(__n128 *)v22 = result;
    }
  }
  return result;
}

uint64_t FstSearchDurationHashBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(unsigned int *)(this + 240);
  if (v4 > a2)
  {
    v6 = this;
    v7 = (_QWORD *)(this + 232);
    v8 = a2;
    this = mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*(_QWORD *)(this + 232), a2, v4);
    v9 = *(_DWORD *)(*v7 + 28 * a2);
    if (*a3 > v9)
      *a3 = v9;
    v10 = *(_DWORD *)(v6 + 244);
    if (a2 > v10)
      this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v7, a2 - v10, 0);
    v11 = *(unsigned int *)(v6 + 240);
    if (v11 < a2)
    {
      v12 = v8 - v11;
      v13 = *v7 + 28 * v11 + 12;
      do
      {
        *(_QWORD *)(v13 - 12) = 0xFFFFFFFF00000000;
        *(_DWORD *)(v13 - 4) = -1;
        *(_WORD *)v13 = -2;
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 4) = 0;
        v13 += 28;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 240) = a2;
  }
  return this;
}

uint64_t FstSearchDurationHashBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[2];

  if (*(_BYTE *)(this + 380))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 288);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v5 = 0;
      v6 = 0;
      v20 = this + 216;
      v21 = (_QWORD *)(this + 160);
      do
      {
        v7 = (int *)(*(_QWORD *)(v2 + 280) + v5);
        v8 = *v7;
        v10 = v7[6];
        v9 = v7[7];
        v11 = v7[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v11 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v12 = -2 - v11;
        if (v9 == 16777213)
        {
          v9 = 16777209;
          if (*(_DWORD *)(*v21 + 28 * v12) == 16777209)
            v12 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 16 * *(unsigned int *)(*v21 + 28 * v12 + 8) + 8);
        }
        v13 = *a2;
        v14 = *(unsigned int *)(v2 + 168);
        if (v14 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v21, 1, 1);
          LODWORD(v14) = *(_DWORD *)(v2 + 168);
        }
        v15 = (int *)(*(_QWORD *)(v2 + 160) + 28 * v14);
        *v15 = v9;
        v15[1] = v13;
        v15[2] = -1;
        v15[3] = v8;
        v15[5] = 0;
        v15[6] = 0;
        v15[4] = v12;
        v16 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v16 + 1;
        v17 = *(unsigned int *)(v2 + 224);
        if (v17 == *(_DWORD *)(v2 + 228))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v20, 1, 1);
          LODWORD(v17) = *(_DWORD *)(v2 + 224);
        }
        v18 = *(_QWORD *)(v2 + 216) + 28 * v17;
        *(_DWORD *)v18 = v8;
        *(_DWORD *)(v18 + 4) = v10;
        *(_DWORD *)(v18 + 8) = v16;
        *(_WORD *)(v18 + 12) = -2;
        *(_QWORD *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        ++*(_DWORD *)(v2 + 224);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        v19 = *(_DWORD *)(v2 + 288);
        if (v19 >= *(_DWORD *)(v2 + 20))
          v19 = *(_DWORD *)(v2 + 20);
        v5 += 36;
      }
      while (v6 < v19);
    }
  }
  return this;
}

void sub_20982D214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *FstSearchDurationHashBackoff::propagateNulls(FstSearchDurationHashBackoff *this, int a2, int a3, SearchStats *a4)
{
  int v5;
  _QWORD *result;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  SearchStats *v48;
  int v49;
  int v50;
  int v51;
  __int16 v52;
  __int16 v53;
  unsigned int v55;
  unint64_t v56;
  int v57;
  _QWORD *v58;

  v5 = *((_DWORD *)this + 42);
  result = (_QWORD *)((char *)this + 216);
  v7 = *((_DWORD *)this + 56);
  v58 = result;
  if (!v7)
  {
    v38 = *((_DWORD *)this + 38);
    if (a4)
      goto LABEL_42;
    goto LABEL_43;
  }
  v47 = v5;
  v8 = 0;
  v48 = a4;
  v57 = a2;
  do
  {
    v9 = *(unsigned int *)(*((_QWORD *)this + 27) + 28 * v8 + 4);
    v10 = *((_QWORD *)this + 5);
    if (*(_DWORD *)(v10 + 160) != (_DWORD)v9
      && (*(_DWORD *)(v10 + 140) <= (int)v9 || (*(_DWORD *)(*(_QWORD *)(v10 + 152) + 4 * v9) & 0x40000000) != 0))
    {
      v11 = *(_DWORD *)(*((_QWORD *)this + 27) + 28 * v8 + 4);
      v55 = v11;
      v56 = v8;
      do
      {
        v12 = *((_QWORD *)this + 5);
        v13 = *(_QWORD *)(v12 + 152);
        v14 = *(_DWORD *)(v13 + 4 * v11);
        v15 = *(_DWORD *)(v13 + 4 * (v11 + 1));
        v16 = *(_DWORD *)(v12 + 140);
        if (v16 > v15)
          goto LABEL_32;
        v17 = (v14 & 0xFFFFF) <= 0xFFFF3 ? v14 & 0xFFFFF : v14 & 0xFFFFF | 0xF00000;
        if (v16 <= (int)v9 && v17 != 16777210)
          goto LABEL_32;
        v19 = (v14 >> 20) & 0x3FF;
        v20 = *result;
        v21 = *result + 28 * v8;
        v22 = *(_DWORD *)v21 + v19;
        if (v22 > a2)
          goto LABEL_32;
        v23 = *(_DWORD *)(v21 + 8);
        v24 = *(_WORD *)(v21 + 12);
        v25 = *(_WORD *)(v21 + 14);
        v26 = *(_DWORD *)(v21 + 24);
        v27 = *(_DWORD *)(v21 + 16) + v19;
        if (v17 == 16777210)
        {
          if (v7 != *((_DWORD *)this + 57))
            goto LABEL_31;
        }
        else
        {
          if (v17 == 16777214)
            v28 = *(_DWORD *)(v21 + 16) + v19;
          else
            v28 = 0;
          if (v17 == 16777214)
            v29 = 0;
          else
            v29 = v27;
          v30 = *((unsigned int *)this + 42);
          if (v30 == *((_DWORD *)this + 43))
          {
            v52 = v25;
            v53 = v24;
            v50 = v29;
            v51 = v23;
            v49 = v28;
            DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, 1, 1);
            v28 = v49;
            v29 = v50;
            v23 = v51;
            v25 = v52;
            v24 = v53;
            a2 = v57;
            result = v58;
            LODWORD(v30) = *((_DWORD *)this + 42);
          }
          v31 = 0;
          v32 = (int *)(*((_QWORD *)this + 20) + 28 * v30);
          *v32 = v17;
          v32[1] = a3;
          v32[2] = -1;
          v32[3] = v22 - v28;
          v32[4] = v23;
          v32[5] = v29;
          v32[6] = v26;
          v23 = *((_DWORD *)this + 42);
          *((_DWORD *)this + 42) = v23 + 1;
          v7 = *((_DWORD *)this + 56);
          v26 = 0;
          if (v7 != *((_DWORD *)this + 57))
            goto LABEL_30;
        }
        v33 = v24;
        v34 = v27;
        v35 = v25;
        v36 = v23;
        DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)result, 1, 1);
        v23 = v36;
        v25 = v35;
        v27 = v34;
        LODWORD(v9) = v55;
        v8 = v56;
        v24 = v33;
        a2 = v57;
        result = v58;
        v7 = *((_DWORD *)this + 56);
        v31 = v26;
LABEL_30:
        v20 = *result;
        v26 = v31;
LABEL_31:
        v37 = v20 + 28 * v7;
        *(_DWORD *)v37 = v22;
        *(_DWORD *)(v37 + 4) = v15;
        *(_DWORD *)(v37 + 8) = v23;
        *(_WORD *)(v37 + 12) = v24;
        *(_WORD *)(v37 + 14) = v25;
        *(_DWORD *)(v37 + 16) = v27;
        *(_DWORD *)(v37 + 20) = 0;
        *(_DWORD *)(v37 + 24) = v26;
        v7 = *((_DWORD *)this + 56) + 1;
        *((_DWORD *)this + 56) = v7;
LABEL_32:
        v11 += 2;
      }
      while ((v14 & 0x80000000) == 0);
    }
    ++v8;
  }
  while (v8 < v7);
  v38 = *((_DWORD *)this + 38);
  if (v7 > v38)
  {
    mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*((_QWORD *)this + 27) + 28 * v38), v7 - v38, 28);
    result = v58;
    v38 = *((_DWORD *)this + 38);
    v7 = *((_DWORD *)this + 56);
  }
  a4 = v48;
  v5 = v47;
  if (v38 < v7)
  {
    v39 = v38;
    v40 = 28 * v38;
    do
    {
      v41 = *result + v40;
      if (*(_DWORD *)(v41 + 4) != *(_DWORD *)(*result + 28 * (v39 - 1) + 4))
      {
        v42 = (_OWORD *)(*result + 28 * v38);
        v43 = *(_OWORD *)v41;
        *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)(v41 + 12);
        *v42 = v43;
        ++v38;
        v7 = *((_DWORD *)this + 56);
      }
      ++v39;
      v40 += 28;
    }
    while (v39 < v7);
  }
  if (v48)
LABEL_42:
    *((_DWORD *)a4 + 1) += *((_DWORD *)this + 42) - v5;
LABEL_43:
  v44 = *((_DWORD *)this + 57);
  if (v38 > v44)
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)result, v38 - v44, 0);
    result = v58;
    v7 = *((_DWORD *)this + 56);
  }
  if (v7 < v38)
  {
    v45 = v38 - (unint64_t)v7;
    v46 = *result + 28 * v7 + 12;
    do
    {
      *(_QWORD *)(v46 - 12) = 0xFFFFFFFF00000000;
      *(_DWORD *)(v46 - 4) = -1;
      *(_WORD *)v46 = -2;
      *(_QWORD *)(v46 + 8) = 0;
      *(_DWORD *)(v46 + 4) = 0;
      v46 += 28;
      --v45;
    }
    while (v45);
  }
  *((_DWORD *)this + 56) = v38;
  return result;
}

uint64_t FstSearchDurationHashBackoff::collectTraces(FstSearchDurationHashBackoff *this)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v35;
  int v36;

  v2 = *((unsigned int *)this + 42);
  v36 = 0;
  v35 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v35 = v3;
    v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = *((unsigned int *)this + 56);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unsigned int *)(*((_QWORD *)this + 27) + 8);
    do
    {
      v9 = *v7;
      v7 += 7;
      v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        v5 = *((unsigned int *)this + 56);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v10 = *((_DWORD *)this + 42);
  if (!v10)
    goto LABEL_32;
  v11 = (uint64_t *)((char *)this + 160);
  v12 = v10 - 1;
  do
  {
    v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      v14 = *(unsigned int *)(*v11 + 28 * v12 + 16);
      if ((_DWORD)v14 != -1)
        *((_DWORD *)v3 + v14) = 1;
    }
    --v12;
  }
  while (v13);
  v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        v19 = *v11;
        if (v17 != v18)
        {
          v20 = (__int128 *)(v19 + v16);
          v21 = (_OWORD *)(v19 + 28 * v18);
          v22 = *v20;
          *(_OWORD *)((char *)v21 + 12) = *(__int128 *)((char *)v20 + 12);
          *v21 = v22;
          v19 = *v11;
        }
        v23 = v19 + 28 * v18;
        v26 = *(_DWORD *)(v23 + 16);
        v24 = (_DWORD *)(v23 + 16);
        v25 = v26;
        if (v26 != -1)
          *v24 = *((_DWORD *)v3 + v25);
        *((_DWORD *)v3 + v17) = v18++;
        v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 28;
    }
    while (v17 < v15);
    v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      v28 = v18 - (unint64_t)v15;
      v29 = (_DWORD *)(*v11 + 28 * v15 + 24);
      do
      {
        *(_OWORD *)(v29 - 6) = xmmword_209A6C7D0;
        *((_QWORD *)v29 - 1) = 0xFFFFFFFFLL;
        *v29 = 0;
        v29 += 7;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  v30 = *((unsigned int *)this + 56);
  if ((_DWORD)v30)
  {
    v31 = v35;
    v32 = (_DWORD *)(*((_QWORD *)this + 27) + 8);
    do
    {
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        *v32 = *((_DWORD *)v31 + v33);
      v32 += 7;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_20982D7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchDurationHashBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchDurationHashBackoff::advanceDeltas((FstSearchDurationHashBackoff *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchDurationHashBackoff::collectTraces((FstSearchDurationHashBackoff *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

int64x2_t FstSearchDurationHashBackoff::reset(FstSearchDurationHashBackoff *this)
{
  int64x2_t *v2;
  int64x2_t result;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;

  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 56) = 0;
  v7 = 0u;
  v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  v5 = 0u;
  v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  v2 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchDurationHashBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchDurationHashBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchDurationHashBackoff::beginTopRecPassSyncRecog(FstSearchDurationHashBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 264, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 94) = result;
    *((_BYTE *)this + 380) = 1;
  }
  return result;
}

uint64_t FstSearchDurationHashBackoff::endTopRecPassSyncRecog(FstSearchDurationHashBackoff *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchDurationHashBackoff::generateTraceTokensFromTraces((unint64_t)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 64) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

unint64_t FstSearchDurationHashBackoff::generateTraceTokensFromTraces(unint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  float *v12;
  float32x2x2_t v13;
  float32x2x2_t v14;
  unint64_t v15;

  v1 = this;
  v2 = (_QWORD *)(this + 176);
  v3 = *(unsigned int *)(this + 168);
  v4 = *(_DWORD *)(this + 188);
  if (v3 > v4)
    this = DgnArray<DgnPrimArray<double>>::reallocElts(this + 176, v3 - v4, 0);
  v5 = *(unsigned int *)(v1 + 184);
  if (v5 < v3)
  {
    v6 = v3 - v5;
    v7 = (_OWORD *)(*v2 + 16 * v5);
    do
    {
      *v7++ = xmmword_209A6C810;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)(v1 + 184) = v3;
  v8 = *(unsigned int *)(v1 + 168);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *(_QWORD *)(v1 + 176);
    v11 = (_OWORD *)(*(_QWORD *)(v1 + 160) + 12);
    do
    {
      *((_DWORD *)v11 - 1) = v9;
      v12 = (float *)(v10 + 16 * v9);
      v13 = (float32x2x2_t)*v11;
      v11 = (_OWORD *)((char *)v11 + 28);
      v14 = v13;
      v15 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
      vst2_f32(v12, v14);
      ++v9;
    }
    while (v8 != v9);
  }
  return this;
}

void FstSearchDurationHashBackoff::printSize(FstSearchDurationHashBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 28 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 28 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A6C820, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 16 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((_DWORD *)this + 56);
  v65 = 26 * v64;
  if (v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 26 * (*((_DWORD *)this + 57) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((_DWORD *)this + 60);
  v75 = 26 * v74;
  if (v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 26 * (*((_DWORD *)this + 61) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 264, 0);
  v99 = sizeObject((uint64_t)this + 264, 1);
  v100 = sizeObject((uint64_t)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_20982E240(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationHashBackoff::getBestTrace(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if ((a4 & 1) != 0)
    v4 = 0;
  else
    v4 = *(unsigned int *)(a1 + 152);
  v5 = *(unsigned int *)(a1 + 224);
  if (v4 >= v5)
    goto LABEL_21;
  v6 = 28 * v4;
  v7 = 1879048192;
  v8 = 0xFFFFFFFFLL;
  do
  {
    v9 = *(_QWORD *)(a1 + 216);
    if (!a4 || (v10 = *(unsigned int *)(v9 + v6 + 8), (_DWORD)v10 == -1))
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4))
        goto LABEL_19;
      v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2)
      *(_BYTE *)(*a2 + v10) = 1;
    if (a3)
      *(_BYTE *)(*a3 + v10) = 1;
    v11 = *(_QWORD *)(a1 + 160) + 28 * v10;
    v12 = *(_DWORD *)(v11 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v11 + 4));
    if (v7 > v12)
      v8 = v10;
    if (v7 >= v12)
      v7 = v12;
    v5 = *(unsigned int *)(a1 + 224);
LABEL_19:
    ++v4;
    v6 += 28;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    v13 = *(unsigned int *)(a1 + 168);
    v8 = 0xFFFFFFFFLL;
    while (v13)
    {
      --v13;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(_QWORD *)(a1 + 160) + 28 * v13) == 16777213)
      {
        if (a2)
          *(_BYTE *)(*a2 + v13) = 1;
        v8 = v13;
        if (a3)
          *(_BYTE *)(*a3 + v13) = 1;
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchDurationHashBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 28 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchDurationHashBackoff::createLatticeNodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6, _QWORD *a7)
{
  uint64_t v8;
  BOOL v9;
  int Node;
  uint64_t result;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int *v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a2 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a2 = MemChunkAlloc(4 * v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
  }
  Node = Lattice<WordLatticeLC>::createNode(a4);
  result = a3;
  v12 = *(_DWORD *)(a3 + 8);
  if (v12 == *(_DWORD *)(a3 + 12))
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    result = a3;
    v12 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v12) = Node;
  ++*(_DWORD *)(result + 8);
  v13 = *(_DWORD *)(a1 + 168);
  v15 = a7;
  v14 = a6;
  v16 = (uint64_t *)a2;
  if (v13)
  {
    v17 = (v13 - 1);
    v18 = 28 * v17;
    v19 = -1;
    do
    {
      v20 = *v16;
      *(_DWORD *)(*v16 + 4 * v17) = -1;
      v21 = *v14;
      if (*(_BYTE *)(*v14 + v17))
      {
        v22 = *(_QWORD *)(a1 + 160);
        v23 = *(_QWORD *)(a1 + 88);
        result = *(unsigned int *)(v23 + 4 * *(unsigned int *)(v22 + v18 + 4));
        if (*(_BYTE *)(*v15 + v17))
        {
          if (*(_BYTE *)(*v14 + v17) != 1 || v19 == -1)
          {
            v25 = *(unsigned int *)(v23 + 4 * *(unsigned int *)(v22 + v18 + 4));
            v26 = v19;
            v27 = Lattice<WordLatticeLC>::createNode(a4);
            v28 = a3;
            v16 = (uint64_t *)a2;
            *(_DWORD *)(*(_QWORD *)a2 + 4 * v17) = *(_DWORD *)(a3 + 8);
            v29 = *(unsigned int *)(a3 + 8);
            if (v29 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              v28 = a3;
              v16 = (uint64_t *)a2;
              v29 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v28 + 4 * v29) = v27;
            v30 = *(_DWORD *)(v28 + 8);
            *(_DWORD *)(v28 + 8) = v30 + 1;
            v14 = a6;
            v21 = *a6;
            if (*(_BYTE *)(*a6 + v17) == 1)
              v19 = v30;
            else
              v19 = v26;
            v22 = *(_QWORD *)(a1 + 160);
            result = v25;
          }
          else
          {
            *(_DWORD *)(v20 + 4 * v17) = v19;
          }
        }
        v31 = *(unsigned int *)(v22 + v18 + 8);
        v32 = *(_QWORD *)(a1 + 176);
        v33 = (_DWORD *)(v32 + 16 * v31);
        v34 = v33[2];
        if ((v33[2] & 0x80000000) != 0)
        {
          *v33 += result;
        }
        else
        {
          if (*(_DWORD *)(v22 + v18) == 16777209)
          {
            v35 = *a5 + 16 * v34;
            v37 = (_DWORD *)(v35 + 8);
            v36 = *(unsigned int *)(v35 + 8);
            v38 = *(_QWORD *)(a1 + 176);
            if (v36 == *(_DWORD *)(v35 + 12))
            {
              v44 = result;
              v45 = v19;
              DgnPrimArray<unsigned int>::reallocElts(v35, 1, 1);
              result = v44;
              v19 = v45;
              v16 = (uint64_t *)a2;
              v14 = a6;
              v36 = *v37;
              v22 = *(_QWORD *)(a1 + 160);
              v38 = *(_QWORD *)(a1 + 176);
              v21 = *a6;
            }
            *(_DWORD *)(*(_QWORD *)v35 + 4 * v36) = v17;
            ++*v37;
            v34 = v33[2];
            v15 = a7;
          }
          else
          {
            *(_BYTE *)(*v15 + v34) = 1;
            v38 = v32;
          }
          v39 = v22 + 28 * v34;
          v40 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v39 + 4));
          v41 = (int *)(v38 + 16 * *(unsigned int *)(v39 + 8));
          v42 = result + *v33 - v40;
          v43 = *v41;
          LODWORD(v41) = v41[1];
          *v33 = v42 - v43;
          *(_DWORD *)(v32 + 16 * v31 + 4) -= (_DWORD)v41;
          *(_BYTE *)(v21 + v34) = 2;
        }
      }
      --v17;
      v18 -= 28;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t FstSearchDurationHashBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchDurationHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  v23 = (uint64_t)v9;
  v11 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = v27;
    do
    {
      if (*(_BYTE *)(*a3 + v12))
      {
        v14 = *(_QWORD *)(a1 + 160);
        if ((*(_DWORD *)(v14 + 28 * v12) - 16777209) >= 2)
        {
          v15 = *(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v14 + 28 * v12 + 8);
          v16 = *(unsigned int *)(v15 + 8);
          if ((_DWORD)v16 == -1)
            v17 = 0;
          else
            v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(_BYTE *)(*a4 + v12))
            FstSearchDurationHashBackoff::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            v20 = 0;
            do
            {
              v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v12) + 4 * v20);
              FstSearchDurationHashBackoff::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_20982E988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchDurationHashBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _QWORD v35[2];
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  __int128 v50;
  _DWORD v51[2];
  __int128 v52;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    v17 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8) + 8) == a2)
  {
    v17 = (_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8));
  }
  else
  {
    v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 28 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v51);
  v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    v19 = *v17 + *a3;
  }
  else
  {
    v19 = *a3;
  }
  if (v51[0] >> 25 == 126)
  {
    v20 = 0;
    v21 = v18;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_11:
      v22 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 136);
    v21 = v18 - v20;
    if ((v12 & 0x80000000) != 0)
      goto LABEL_11;
  }
  v22 = *(_DWORD *)(a1 + 140);
  v21 -= v22;
LABEL_14:
  v23 = a3[3];
  if (v17)
    v23 += v17[3];
  v24 = v19 - v18 - v23;
  v25 = a3[2];
  v26 = *(_QWORD *)(a1 + 160);
  if (v25 == -1)
  {
    v28 = 0;
    if (a9)
      goto LABEL_22;
  }
  else
  {
    v27 = *(_DWORD *)(v26 + 28 * v25 + 4);
    if (a9)
    {
      if (v27 >= 1)
        --v27;
      v28 = (v27 >> 1) + 1;
LABEL_22:
      v29 = *(_DWORD *)(v26 + 28 * a2 + 4);
      if (v29 >= 1)
        --v29;
      v30 = v29 >> 1;
      v31 = (v29 >> 1) - v28 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v32 = *(_DWORD *)(v26 + 28 * v12 + 4);
        if (v32 >= 1)
          --v32;
        v33 = v32 >> 1;
        goto LABEL_31;
      }
LABEL_32:
      v34 = 0;
      goto LABEL_33;
    }
    v28 = v27 + 1;
  }
  v30 = *(_DWORD *)(v26 + 28 * a2 + 4);
  v31 = v30 - v28 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_32;
  v33 = *(_DWORD *)(v26 + 28 * v12 + 4);
LABEL_31:
  v34 = v33 - v30;
LABEL_33:
  v36 = v28;
  v37 = v31;
  v38 = v34;
  v39 = v21;
  v40 = 0;
  v41 = v20;
  v42 = v24;
  v43 = v23;
  v44 = v22;
  v45 = xmmword_209A6C7F0;
  v46 = 0;
  v47 = -1;
  v35[0] = &off_24C2149F8;
  v35[1] = 0xBFF0000000000000;
  v48 = v51[0];
  v49 = v51[1];
  v50 = v52;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v35);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v35);
}

void sub_20982EBEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationHashBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 380))
    return MiniFst::beginTopFstSyncRecog(this + 264);
  return this;
}

uint64_t FstSearchDurationHashBackoff::endTopRecSyncRecog(FstSearchDurationHashBackoff *this)
{
  uint64_t result;

  VirtMap::setEmpty(*((_QWORD *)this + 14));
  result = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return result;
}

uint64_t FstSearchDurationHashBackoff::getBestExitScore(FstSearchDurationHashBackoff *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 63) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 56);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 28 * v1;
  do
  {
    v7 = *((_QWORD *)this + 27) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 28 * v8 + 4) == *((_DWORD *)this + 62))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 56);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 28 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 63) = *(_DWORD *)(v9 + 28 * v12 + 16);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_20982ED90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationHashBackoff::getBestScoreMaybeUpdateFstNode(FstSearchDurationHashBackoff *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 56);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 27);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 7;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

_QWORD *FstSearchDurationHashBackoff::seedTheory(FstSearchDurationHashBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 28 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(_QWORD *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 56);
  if (v14 == *((_DWORD *)this + 57))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 216, 1, 1);
    v14 = *((_DWORD *)this + 56);
  }
  v15 = *((_QWORD *)this + 27) + 28 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_QWORD *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 24) = 0;
  LODWORD(v15) = *((_DWORD *)this + 56) + 1;
  *((_DWORD *)this + 56) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchDurationHashBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchDurationHashBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 252);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 28 * v8);
    for (i = v10[4]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 28 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 28 * v8 + 12);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 28 * v16);
      i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchDurationHashBackoff::checkSearchParametersValidityForArcGraph(FstSearchDurationHashBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchDurationHashBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _DWORD v28[2];
  __int128 v29;

  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    v9 = a4;
    LODWORD(v11) = 0;
    v12 = a2;
    v13 = a2;
    do
    {
      v14 = (_DWORD *)(*(_QWORD *)(a1 + 160) + 28 * v13);
      if (*v14 == 16777209)
        v11 = v11;
      else
        v11 = (v11 + 1);
      v13 = v14[4];
    }
    while ((_DWORD)v13 != -1);
    v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15)
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      v17 = v11 - v16;
      v18 = *(_QWORD *)a3 + 32 * v16;
      do
      {
        *(_QWORD *)v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_209A593D0;
        *(_QWORD *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if ((_DWORD)v11)
    {
      v19 = *(_QWORD *)(a1 + 160);
      v20 = -16;
      do
      {
        v21 = (unsigned int *)(v19 + 28 * v12);
        v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            v23 = v22 - 1;
            if (v22 < 1)
              v23 = v22;
            v20 = (v23 >> 1) + 1;
          }
          else
          {
            v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            v24 = v22 - 1;
            if (v22 < 1)
              v24 = v21[1];
            v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16)
            v25 = v22 + 1;
          else
            v25 = v20;
          v26 = v28[1];
          v11 = (v11 - 1);
          v27 = *(_QWORD *)a3 + 32 * v11;
          *(_DWORD *)v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          v19 = *(_QWORD *)(a1 + 160);
          v20 = -16;
        }
        v12 = *(unsigned int *)(v19 + 28 * v12 + 16);
      }
      while ((_DWORD)v12 != -1);
    }
  }
}

uint64_t FstSearchDurationHashBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchDurationHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 28 * v24;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_20982F640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationHash::maybeInitDurModel(FstSearchDurationHash *this, const PicMgr *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1)
    v6 = 56;
  else
    v6 = 72;
  v7 = v16;
  v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!(_DWORD)v7)
      goto LABEL_13;
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  v9 = 0;
  v10 = v15;
  v11 = *((_QWORD *)this + 24);
  do
  {
    if (!(_WORD)v9 || (v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF))
      v13 = 0;
    else
      v13 = *(_WORD *)(*(_QWORD *)((char *)a2 + v6) + 2 * v12);
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_20982F740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchDurationHash::advanceDeltas(FstSearchDurationHash *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8;
  int *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int ScoreNoBackoff;
  __int128 *v20;
  __int128 v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  int v35;
  int v36;
  int v37;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  int v50;
  int v51;
  int v52;
  int64x2_t *v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t *v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int64x2_t v64;
  int64x2_t *v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t *v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  uint64_t v74;
  int64x2_t *v75;
  int64x2_t result;
  int64x2_t v77;
  int v78;
  SearchStats *v79;
  int v80;
  int v81;
  int v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int v101;
  _BYTE v102[28];
  int64x2_t v103;
  int64x2_t v104;
  int v105[5];

  v8 = a2;
  v105[0] = a2;
  v103 = 0u;
  v104 = 0u;
  SnapTime::recordTime((SnapTime *)&v103, 1, 0, 0, 0);
  *(_QWORD *)v102 = 0xFFFFFFFF00000000;
  *(_DWORD *)&v102[8] = -1;
  *(_WORD *)&v102[12] = -2;
  *(_QWORD *)&v102[16] = 0;
  *(_DWORD *)&v102[24] = 0;
  v10 = (int *)((char *)this + 256);
  *((_DWORD *)this + 64) = a3;
  v11 = *((_DWORD *)this + 2);
  v12 = *((unsigned int *)this + 56);
  if ((_DWORD)v12)
  {
    v78 = a5;
    v79 = a4;
    v13 = 0;
    v82 = *((_DWORD *)this + 53);
    v80 = v8;
    v81 = *((unsigned __int8 *)this + 208);
    do
    {
      v14 = *((_QWORD *)this + 27);
      v15 = (int *)(v14 + 28 * v13);
      v16 = v15[1];
      v17 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v17 + 160) != (_DWORD)v16)
      {
        if (*(_DWORD *)(v17 + 140) > (int)v16)
        {
          v18 = *v15;
          ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + 28 * v13 + 12));
          v20 = (__int128 *)(*((_QWORD *)this + 27) + 28 * v13);
          v21 = *v20;
          *(_OWORD *)&v102[12] = *(__int128 *)((char *)v20 + 12);
          *(_OWORD *)v102 = v21;
          v22 = WORD6(v21);
          if (WORD6(v21))
          {
            if (*(int *)&v102[20] >= 1)
              v23 = v81 - *(_DWORD *)&v102[20];
            else
              v23 = v81;
            v22 = v23 & ((*(_DWORD *)&v102[20] - v81) >> 31);
            *(_DWORD *)&v102[20] -= v81;
            *(_DWORD *)&v102[24] += v22;
          }
          v24 = ScoreNoBackoff + v18 + v22;
          if (v24 - v11 <= *v10)
          {
            if (*v10 > v24)
              *v10 = v24;
            *(_DWORD *)v102 = v24;
            FstSearchDurationHashBackoff::maybeInsertHashedToken((uint64_t)this, (uint64_t)v102);
          }
        }
        v25 = v16;
        do
        {
          v26 = *((_QWORD *)this + 5);
          v27 = *(_QWORD *)(v26 + 152);
          v28 = *(_DWORD *)(v27 + 4 * v25);
          v29 = *(_DWORD *)(v27 + 4 * (v25 + 1));
          v30 = *(_DWORD *)(v26 + 140);
          if (v30 <= v29)
          {
            if (v30 <= (int)v16 && *((_BYTE *)this + 380) != 0)
            {
              v39 = (v28 & 0xFFFFF) <= 0xFFFF3 ? v28 & 0xFFFFF : v28 & 0xFFFFF | 0xF00000;
              if (v39 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v99);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v39, (DgnString *)&v99, v40, v41, v42, v43, v44);
                v49 = &unk_209A6C820;
                if (v99.i32[2])
                  v49 = (void *)v99.i64[0];
                xprintf("Seed from state %d score %d trace %d, %s\n", v45, v46, v47, v48, v16, *(unsigned int *)(*((_QWORD *)this + 27) + 28 * v13), *(unsigned int *)(*((_QWORD *)this + 27) + 28 * v13 + 8), v49);
                MiniFst::seed((uint64_t)this + 264, *(_DWORD *)(*((_QWORD *)this + 27) + 28 * v13), 0, *(_DWORD *)(*((_QWORD *)this + 27) + 28 * v13 + 8), v29);
                DgnString::~DgnString((DgnString *)&v99);
              }
            }
          }
          else
          {
            v31 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v27 + 4 * v25));
            v32 = *((_QWORD *)this + 27) + 28 * v13;
            v33 = *(_DWORD *)v32;
            v34 = *(_OWORD *)v32;
            *(_OWORD *)&v102[12] = *(_OWORD *)(v32 + 12);
            *(_OWORD *)v102 = v34;
            v35 = *(_DWORD *)&v102[20] & ~(*(int *)&v102[20] >> 31);
            if ((_WORD)v28)
            {
              v36 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * (unsigned __int16)v28);
              v35 -= v36 & (v36 >> 31);
              v37 = v82;
            }
            else
            {
              v36 = 0;
              v37 = 0;
            }
            v50 = (v28 >> 20) & 0x3FF;
            v51 = v37 + v35;
            *(_DWORD *)&v102[20] = v36;
            *(_DWORD *)&v102[24] += v51;
            v52 = v31 + v50 + v33 + v51;
            if (v52 - v11 <= *v10)
            {
              if (*v10 > v52)
                *v10 = v52;
              *(_DWORD *)v102 = v52;
              *(_DWORD *)&v102[4] = v29;
              *(_WORD *)&v102[12] = v28;
              *(_DWORD *)&v102[16] += v50;
              FstSearchDurationHashBackoff::maybeInsertHashedToken((uint64_t)this, (uint64_t)v102);
            }
          }
          v25 += 2;
        }
        while ((v28 & 0x80000000) == 0);
        v12 = *((unsigned int *)this + 56);
      }
      ++v13;
    }
    while (v13 < v12);
    a3 = *v10;
    v8 = v80;
    a4 = v79;
    a5 = v78;
  }
  v101 = a3 + v11;
  if (*((_BYTE *)this + 380))
    MiniFst::updateFrame((char *)this + 264, (int *)this + 64, v11, v8);
  v99 = 0u;
  v100 = 0u;
  SnapTime::recordTime((SnapTime *)&v99, 1, 0, 0, 0);
  v99 = vsubq_s64(v99, v103);
  v100 = vsubq_s64(v100, v104);
  v53 = (int64x2_t *)*((_QWORD *)this + 13);
  v54 = vaddq_s64(v53[1], v100);
  *v53 = vaddq_s64(*v53, v99);
  v53[1] = v54;
  v97 = 0u;
  v98 = 0u;
  SnapTime::recordTime((SnapTime *)&v97, 1, 0, 0, 0);
  FstSearchDurationHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v101);
  v95 = 0u;
  v96 = 0u;
  SnapTime::recordTime((SnapTime *)&v95, 1, 0, 0, 0);
  v55 = vsubq_s64(v95, v97);
  v56 = (int64x2_t *)*((_QWORD *)this + 13);
  v57 = v56[3];
  v58 = vaddq_s64(v56[2], v55);
  v95 = v55;
  v96 = vsubq_s64(v96, v98);
  v59 = vaddq_s64(v57, v96);
  v56[2] = v58;
  v56[3] = v59;
  v93 = 0u;
  v94 = 0u;
  SnapTime::recordTime((SnapTime *)&v93, 1, 0, 0, 0);
  v60 = *((_QWORD *)this + 27);
  v61 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 27) = v61;
  *((_QWORD *)this + 29) = v60;
  LODWORD(v60) = *((_DWORD *)this + 57);
  v62 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 28) = v62;
  *((_DWORD *)this + 60) = 0;
  *((_DWORD *)this + 61) = v60;
  v63 = *((unsigned int *)this + 6);
  if ((_DWORD)v63 && (_DWORD)v62 && v63 < v62)
    mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(v61, v63, v62);
  v91 = 0u;
  v92 = 0u;
  SnapTime::recordTime((SnapTime *)&v91, 1, 0, 0, 0);
  v64 = vsubq_s64(v91, v93);
  v65 = (int64x2_t *)*((_QWORD *)this + 13);
  v66 = v65[5];
  v67 = vaddq_s64(v65[4], v64);
  v91 = v64;
  v92 = vsubq_s64(v92, v94);
  v68 = vaddq_s64(v66, v92);
  v65[4] = v67;
  v65[5] = v68;
  v89 = 0u;
  v90 = 0u;
  SnapTime::recordTime((SnapTime *)&v89, 1, 0, 0, 0);
  VirtMap::setEmpty(*((_QWORD *)this + 14));
  v87 = 0u;
  v88 = 0u;
  SnapTime::recordTime((SnapTime *)&v87, 1, 0, 0, 0);
  v69 = vsubq_s64(v87, v89);
  v70 = (int64x2_t *)*((_QWORD *)this + 13);
  v71 = v70[9];
  v72 = vaddq_s64(v70[8], v69);
  v87 = v69;
  v88 = vsubq_s64(v88, v90);
  v73 = vaddq_s64(v71, v88);
  v70[8] = v72;
  v70[9] = v73;
  v85 = 0u;
  v86 = 0u;
  SnapTime::recordTime((SnapTime *)&v85, 1, 0, 0, 0);
  *((_DWORD *)this + 60) = 0;
  v74 = *((unsigned int *)this + 56);
  *((_DWORD *)this + 38) = v74;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v74;
    if (*((_DWORD *)a4 + 2) > v74)
      LODWORD(v74) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v74;
  }
  if (*((_BYTE *)this + 380))
    FstSearchDurationHash::seedFromMiniFst((uint64_t)this, v105);
  if (a5)
    FstSearchDurationHashBackoff::propagateNulls(this, v101, v8, a4);
  *((_DWORD *)this + 62) = v8;
  v83 = 0u;
  v84 = 0u;
  SnapTime::recordTime((SnapTime *)&v83, 1, 0, 0, 0);
  v75 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v75[6], vsubq_s64(v83, v85));
  v77 = vaddq_s64(v75[7], vsubq_s64(v84, v86));
  v75[6] = result;
  v75[7] = v77;
  return result;
}

void sub_20982FD5C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchDurationHash::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[2];

  if (*(_BYTE *)(this + 380))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 288);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v5 = 0;
      v6 = 0;
      v20 = this + 216;
      v21 = (_QWORD *)(this + 160);
      do
      {
        v7 = (int *)(*(_QWORD *)(v2 + 280) + v5);
        v8 = *v7;
        v10 = v7[6];
        v9 = v7[7];
        v11 = v7[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v11 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v12 = -2 - v11;
        if (v9 == 16777213)
        {
          v9 = 16777209;
          if (*(_DWORD *)(*v21 + 28 * v12) == 16777209)
            v12 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 16 * *(unsigned int *)(*v21 + 28 * v12 + 8) + 8);
        }
        v13 = *a2;
        v14 = *(unsigned int *)(v2 + 168);
        if (v14 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v21, 1, 1);
          LODWORD(v14) = *(_DWORD *)(v2 + 168);
        }
        v15 = (int *)(*(_QWORD *)(v2 + 160) + 28 * v14);
        *v15 = v9;
        v15[1] = v13;
        v15[2] = -1;
        v15[3] = v8;
        v15[5] = 0;
        v15[6] = 0;
        v15[4] = v12;
        v16 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v16 + 1;
        v17 = *(unsigned int *)(v2 + 224);
        if (v17 == *(_DWORD *)(v2 + 228))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v20, 1, 1);
          LODWORD(v17) = *(_DWORD *)(v2 + 224);
        }
        v18 = *(_QWORD *)(v2 + 216) + 28 * v17;
        *(_DWORD *)v18 = v8;
        *(_DWORD *)(v18 + 4) = v10;
        *(_DWORD *)(v18 + 8) = v16;
        *(_WORD *)(v18 + 12) = -2;
        *(_QWORD *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        ++*(_DWORD *)(v2 + 224);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        v19 = *(_DWORD *)(v2 + 288);
        if (v19 >= *(_DWORD *)(v2 + 20))
          v19 = *(_DWORD *)(v2 + 20);
        v5 += 36;
      }
      while (v6 < v19);
    }
  }
  return this;
}

void sub_20982FF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationHash::collectTraces(FstSearchDurationHash *this)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v35;
  int v36;

  v2 = *((unsigned int *)this + 42);
  v36 = 0;
  v35 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v35 = v3;
    v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = *((unsigned int *)this + 56);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unsigned int *)(*((_QWORD *)this + 27) + 8);
    do
    {
      v9 = *v7;
      v7 += 7;
      v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        v5 = *((unsigned int *)this + 56);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v10 = *((_DWORD *)this + 42);
  if (!v10)
    goto LABEL_32;
  v11 = (uint64_t *)((char *)this + 160);
  v12 = v10 - 1;
  do
  {
    v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      v14 = *(unsigned int *)(*v11 + 28 * v12 + 16);
      if ((_DWORD)v14 != -1)
        *((_DWORD *)v3 + v14) = 1;
    }
    --v12;
  }
  while (v13);
  v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        v19 = *v11;
        if (v17 != v18)
        {
          v20 = (__int128 *)(v19 + v16);
          v21 = (_OWORD *)(v19 + 28 * v18);
          v22 = *v20;
          *(_OWORD *)((char *)v21 + 12) = *(__int128 *)((char *)v20 + 12);
          *v21 = v22;
          v19 = *v11;
        }
        v23 = v19 + 28 * v18;
        v26 = *(_DWORD *)(v23 + 16);
        v24 = (_DWORD *)(v23 + 16);
        v25 = v26;
        if (v26 != -1)
          *v24 = *((_DWORD *)v3 + v25);
        *((_DWORD *)v3 + v17) = v18++;
        v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 28;
    }
    while (v17 < v15);
    v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      v28 = v18 - (unint64_t)v15;
      v29 = (_DWORD *)(*v11 + 28 * v15 + 24);
      do
      {
        *(_OWORD *)(v29 - 6) = xmmword_209A6C7D0;
        *((_QWORD *)v29 - 1) = 0xFFFFFFFFLL;
        *v29 = 0;
        v29 += 7;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  v30 = *((unsigned int *)this + 56);
  if ((_DWORD)v30)
  {
    v31 = v35;
    v32 = (_DWORD *)(*((_QWORD *)this + 27) + 8);
    do
    {
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        *v32 = *((_DWORD *)v31 + v33);
      v32 += 7;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_209830178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchDurationHash::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchDurationHash::advanceDeltas((FstSearchDurationHash *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchDurationHash::collectTraces((FstSearchDurationHash *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

int64x2_t FstSearchDurationHash::reset(FstSearchDurationHash *this)
{
  int64x2_t *v2;
  int64x2_t result;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;

  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 56) = 0;
  v7 = 0u;
  v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  v5 = 0u;
  v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  v2 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchDurationHash::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchDurationHash::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchDurationHash::beginTopRecPassSyncRecog(FstSearchDurationHash *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 264, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 94) = result;
    *((_BYTE *)this + 380) = 1;
  }
  return result;
}

uint64_t FstSearchDurationHash::endTopRecPassSyncRecog(FstSearchDurationHash *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchDurationHashBackoff::generateTraceTokensFromTraces((unint64_t)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 64) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchDurationHash::printSize(FstSearchDurationHash *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 28 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 28 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A6C820, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 16 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((_DWORD *)this + 56);
  v65 = 26 * v64;
  if (v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 26 * (*((_DWORD *)this + 57) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((_DWORD *)this + 60);
  v75 = 26 * v74;
  if (v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 26 * (*((_DWORD *)this + 61) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 264, 0);
  v99 = sizeObject((uint64_t)this + 264, 1);
  v100 = sizeObject((uint64_t)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_209830B18(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchDurationHash::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 28 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchDurationHash::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchDurationHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  v23 = (uint64_t)v9;
  v11 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = v27;
    do
    {
      if (*(_BYTE *)(*a3 + v12))
      {
        v14 = *(_QWORD *)(a1 + 160);
        if ((*(_DWORD *)(v14 + 28 * v12) - 16777209) >= 2)
        {
          v15 = *(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v14 + 28 * v12 + 8);
          v16 = *(unsigned int *)(v15 + 8);
          if ((_DWORD)v16 == -1)
            v17 = 0;
          else
            v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(_BYTE *)(*a4 + v12))
            FstSearchDurationHash::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            v20 = 0;
            do
            {
              v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v12) + 4 * v20);
              FstSearchDurationHash::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_209830E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchDurationHash::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _QWORD v35[2];
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  __int128 v50;
  _DWORD v51[2];
  __int128 v52;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    v17 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8) + 8) == a2)
  {
    v17 = (_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8));
  }
  else
  {
    v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 28 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v51);
  v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    v19 = *v17 + *a3;
  }
  else
  {
    v19 = *a3;
  }
  if (v51[0] >> 25 == 126)
  {
    v20 = 0;
    v21 = v18;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_11:
      v22 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 136);
    v21 = v18 - v20;
    if ((v12 & 0x80000000) != 0)
      goto LABEL_11;
  }
  v22 = *(_DWORD *)(a1 + 140);
  v21 -= v22;
LABEL_14:
  v23 = a3[3];
  if (v17)
    v23 += v17[3];
  v24 = v19 - v18 - v23;
  v25 = a3[2];
  v26 = *(_QWORD *)(a1 + 160);
  if (v25 == -1)
  {
    v28 = 0;
    if (a9)
      goto LABEL_22;
  }
  else
  {
    v27 = *(_DWORD *)(v26 + 28 * v25 + 4);
    if (a9)
    {
      if (v27 >= 1)
        --v27;
      v28 = (v27 >> 1) + 1;
LABEL_22:
      v29 = *(_DWORD *)(v26 + 28 * a2 + 4);
      if (v29 >= 1)
        --v29;
      v30 = v29 >> 1;
      v31 = (v29 >> 1) - v28 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v32 = *(_DWORD *)(v26 + 28 * v12 + 4);
        if (v32 >= 1)
          --v32;
        v33 = v32 >> 1;
        goto LABEL_31;
      }
LABEL_32:
      v34 = 0;
      goto LABEL_33;
    }
    v28 = v27 + 1;
  }
  v30 = *(_DWORD *)(v26 + 28 * a2 + 4);
  v31 = v30 - v28 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_32;
  v33 = *(_DWORD *)(v26 + 28 * v12 + 4);
LABEL_31:
  v34 = v33 - v30;
LABEL_33:
  v36 = v28;
  v37 = v31;
  v38 = v34;
  v39 = v21;
  v40 = 0;
  v41 = v20;
  v42 = v24;
  v43 = v23;
  v44 = v22;
  v45 = xmmword_209A6C7F0;
  v46 = 0;
  v47 = -1;
  v35[0] = &off_24C2149F8;
  v35[1] = 0xBFF0000000000000;
  v48 = v51[0];
  v49 = v51[1];
  v50 = v52;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v35);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v35);
}

void sub_2098310C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationHash::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 380))
    return MiniFst::beginTopFstSyncRecog(this + 264);
  return this;
}

uint64_t FstSearchDurationHash::endTopRecSyncRecog(FstSearchDurationHash *this)
{
  uint64_t result;

  VirtMap::setEmpty(*((_QWORD *)this + 14));
  result = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return result;
}

uint64_t FstSearchDurationHash::getBestExitScore(FstSearchDurationHash *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 63) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 56);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 28 * v1;
  do
  {
    v7 = *((_QWORD *)this + 27) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 28 * v8 + 4) == *((_DWORD *)this + 62))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 56);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 28 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 63) = *(_DWORD *)(v9 + 28 * v12 + 16);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_20983126C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationHash::getBestScoreMaybeUpdateFstNode(FstSearchDurationHash *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 56);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 27);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 7;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

_QWORD *FstSearchDurationHash::seedTheory(FstSearchDurationHash *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 28 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(_QWORD *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 56);
  if (v14 == *((_DWORD *)this + 57))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 216, 1, 1);
    v14 = *((_DWORD *)this + 56);
  }
  v15 = *((_QWORD *)this + 27) + 28 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_QWORD *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 24) = 0;
  LODWORD(v15) = *((_DWORD *)this + 56) + 1;
  *((_DWORD *)this + 56) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchDurationHashBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchDurationHash::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 252);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 28 * v8);
    for (i = v10[4]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 28 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 28 * v8 + 12);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 28 * v16);
      i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchDurationHash::checkSearchParametersValidityForArcGraph(FstSearchDurationHash *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchDurationHash::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchDurationHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 28 * v24;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_209831988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchHashBackoff::advanceDeltas(FstSearchHashBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v10;
  unint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  signed __int32 ScoreAllowBackoff_updateNodeInSequence;
  signed __int32 v19;
  __n128 *v20;
  unsigned __int32 v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  __n128 *v32;
  unsigned __int32 v33;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  int64x2_t *v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t *v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int64x2_t v57;
  int64x2_t *v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t *v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  uint64_t v67;
  int64x2_t *v68;
  int64x2_t result;
  int64x2_t v70;
  int v71;
  int *v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int v91;
  __n128 v92;
  unsigned __int32 v93;
  int64x2_t v94;
  int64x2_t v95;
  int v96[3];

  v96[0] = a2;
  v94 = 0u;
  v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  v92.n128_u64[0] = 0xFFFFFFFF00000000;
  v92.n128_u32[2] = -1;
  v92.n128_u16[6] = -2;
  v93 = 0;
  *((_DWORD *)this + 58) = a3;
  v10 = *((_DWORD *)this + 2);
  v72 = (int *)((char *)this + 232);
  v11 = *((unsigned int *)this + 50);
  if ((_DWORD)v11)
  {
    v71 = a5;
    for (i = 0; i < v11; ++i)
    {
      v13 = *((_QWORD *)this + 24);
      v14 = v13 + 20 * i;
      v15 = *(unsigned int *)(v14 + 4);
      v16 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v16 + 160) != (_DWORD)v15)
      {
        if (*(_DWORD *)(v16 + 140) > (int)v15)
        {
          v17 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000
              ? 5000
              : *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
          ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v13 + 20 * i + 12), *(_DWORD *)v14, v17);
          v19 = *((_DWORD *)this + 58);
          if (ScoreAllowBackoff_updateNodeInSequence - v10 <= v19)
          {
            if (v19 > ScoreAllowBackoff_updateNodeInSequence)
              *v72 = ScoreAllowBackoff_updateNodeInSequence;
            v20 = (__n128 *)(*((_QWORD *)this + 24) + 20 * i);
            v21 = v20[1].n128_u32[0];
            v92 = *v20;
            v93 = v21;
            v92.n128_u32[0] = ScoreAllowBackoff_updateNodeInSequence;
            FstSearchHashBackoff::maybeInsertHashedToken((uint64_t)this, &v92);
          }
        }
        v22 = v15;
        do
        {
          v23 = *((_QWORD *)this + 5);
          v24 = *(_QWORD *)(v23 + 152);
          v25 = *(_DWORD *)(v24 + 4 * v22);
          v26 = *(_DWORD *)(v24 + 4 * (v22 + 1));
          v27 = *(_DWORD *)(v23 + 140);
          if (v27 <= v26)
          {
            if (v27 <= (int)v15 && *((_BYTE *)this + 356) != 0)
            {
              v35 = (v25 & 0xFFFFF) <= 0xFFFF3 ? v25 & 0xFFFFF : v25 & 0xFFFFF | 0xF00000;
              if (v35 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v89);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v35, (DgnString *)&v89, v36, v37, v38, v39, v40);
                v45 = &unk_209A6C820;
                if (v89.i32[2])
                  v45 = (void *)v89.i64[0];
                xprintf("Seed from state %d score %d trace %d, %s\n", v41, v42, v43, v44, v15, *(unsigned int *)(*((_QWORD *)this + 24) + 20 * i), *(unsigned int *)(*((_QWORD *)this + 24) + 20 * i + 8), v45);
                MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((_QWORD *)this + 24) + 20 * i), 0, *(_DWORD *)(*((_QWORD *)this + 24) + 20 * i + 8), v26);
                DgnString::~DgnString((DgnString *)&v89);
              }
            }
          }
          else
          {
            v28 = (v25 >> 20) & 0x3FF;
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000)
              v29 = 5000;
            else
              v29 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
            v30 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v24 + 4 * v22), *(_DWORD *)(*((_QWORD *)this + 24) + 20 * i) + v28, v29);
            v31 = *((_DWORD *)this + 58);
            if (v30 - v10 <= v31)
            {
              if (v31 > v30)
                *v72 = v30;
              v32 = (__n128 *)(*((_QWORD *)this + 24) + 20 * i);
              v33 = v32[1].n128_u32[0];
              v92 = *v32;
              v92.n128_u64[0] = __PAIR64__(v26, v30);
              v92.n128_u16[6] = v25;
              v93 = v33 + v28;
              FstSearchHashBackoff::maybeInsertHashedToken((uint64_t)this, &v92);
            }
          }
          v22 += 2;
        }
        while ((v25 & 0x80000000) == 0);
        v11 = *((unsigned int *)this + 50);
      }
    }
    a3 = *v72;
    a5 = v71;
  }
  v91 = a3 + v10;
  if (*((_BYTE *)this + 356))
    MiniFst::updateFrame((char *)this + 240, v72, v10, a2);
  v89 = 0u;
  v90 = 0u;
  SnapTime::recordTime((SnapTime *)&v89, 1, 0, 0, 0);
  v89 = vsubq_s64(v89, v94);
  v90 = vsubq_s64(v90, v95);
  v46 = (int64x2_t *)*((_QWORD *)this + 13);
  v47 = vaddq_s64(v46[1], v90);
  *v46 = vaddq_s64(*v46, v89);
  v46[1] = v47;
  v87 = 0u;
  v88 = 0u;
  SnapTime::recordTime((SnapTime *)&v87, 1, 0, 0, 0);
  FstSearchHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v91);
  v85 = 0u;
  v86 = 0u;
  SnapTime::recordTime((SnapTime *)&v85, 1, 0, 0, 0);
  v48 = vsubq_s64(v85, v87);
  v49 = (int64x2_t *)*((_QWORD *)this + 13);
  v50 = v49[3];
  v51 = vaddq_s64(v49[2], v48);
  v85 = v48;
  v86 = vsubq_s64(v86, v88);
  v52 = vaddq_s64(v50, v86);
  v49[2] = v51;
  v49[3] = v52;
  v83 = 0u;
  v84 = 0u;
  SnapTime::recordTime((SnapTime *)&v83, 1, 0, 0, 0);
  v53 = *((_QWORD *)this + 24);
  v54 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 24) = v54;
  *((_QWORD *)this + 26) = v53;
  LODWORD(v53) = *((_DWORD *)this + 51);
  v55 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 25) = v55;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v53;
  v56 = *((unsigned int *)this + 6);
  if ((_DWORD)v56 && (_DWORD)v55 && v56 < v55)
    mrec_nth_element<FstSearchHashBackoffcmpTok>(v54, v56, v55);
  v81 = 0u;
  v82 = 0u;
  SnapTime::recordTime((SnapTime *)&v81, 1, 0, 0, 0);
  v57 = vsubq_s64(v81, v83);
  v58 = (int64x2_t *)*((_QWORD *)this + 13);
  v59 = v58[5];
  v60 = vaddq_s64(v58[4], v57);
  v81 = v57;
  v82 = vsubq_s64(v82, v84);
  v61 = vaddq_s64(v59, v82);
  v58[4] = v60;
  v58[5] = v61;
  v79 = 0u;
  v80 = 0u;
  SnapTime::recordTime((SnapTime *)&v79, 1, 0, 0, 0);
  VirtMap::setEmpty(*((_QWORD *)this + 14));
  v77 = 0u;
  v78 = 0u;
  SnapTime::recordTime((SnapTime *)&v77, 1, 0, 0, 0);
  v62 = vsubq_s64(v77, v79);
  v63 = (int64x2_t *)*((_QWORD *)this + 13);
  v64 = v63[9];
  v65 = vaddq_s64(v63[8], v62);
  v77 = v62;
  v78 = vsubq_s64(v78, v80);
  v66 = vaddq_s64(v64, v78);
  v63[8] = v65;
  v63[9] = v66;
  v75 = 0u;
  v76 = 0u;
  SnapTime::recordTime((SnapTime *)&v75, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  v67 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v67;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v67;
    if (*((_DWORD *)a4 + 2) > v67)
      LODWORD(v67) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v67;
  }
  if (*((_BYTE *)this + 356))
    FstSearchHashBackoff::seedFromMiniFst((uint64_t)this, v96);
  if (a5)
    FstSearchHashBackoff::propagateNulls((uint64_t)this, v91, a2, a4);
  *((_DWORD *)this + 56) = a2;
  v73 = 0u;
  v74 = 0u;
  SnapTime::recordTime((SnapTime *)&v73, 1, 0, 0, 0);
  v68 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v68[6], vsubq_s64(v73, v75));
  v70 = vaddq_s64(v68[7], vsubq_s64(v74, v76));
  v68[6] = result;
  v68[7] = v70;
  return result;
}

void sub_209831F54(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

__n128 FstSearchHashBackoff::maybeInsertHashedToken(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  __n128 result;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  __n128 *v22;
  unsigned int v23;
  __n128 *v24;

  v4 = a2->n128_u32[1];
  v5 = v4 >> 6;
  v6 = v4 & 0x3F;
  v7 = *(uint64_t **)(a1 + 112);
  v8 = v7[2];
  v9 = *(uint64_t **)(v8 + 8 * v5);
  if (!v9)
  {
    v10 = *((unsigned int *)v7 + 12);
    v11 = *((unsigned int *)v7 + 13);
    v12 = *v7;
    if (v10 >= v11)
    {
      v13 = v12 + 16 * v11;
      v15 = *(_DWORD *)(v13 + 8);
      v14 = (_DWORD *)(v13 + 8);
      if (!v15)
      {
        *(_QWORD *)(v12 + 16 * v11) = MemChunkAlloc(0x100uLL, 0);
        *v14 = 64;
        v12 = *v7;
        v8 = v7[2];
        LODWORD(v10) = *((_DWORD *)v7 + 12);
        v11 = *((unsigned int *)v7 + 13);
      }
      *(_QWORD *)(v8 + 8 * v5) = v12 + 16 * v11;
      *((_DWORD *)v7 + 13) = v11 + 1;
    }
    else
    {
      *(_QWORD *)(v8 + 8 * v5) = v12 + 16 * v10;
    }
    *((_DWORD *)v7 + 12) = v10 + 1;
    v16 = *(_QWORD *)(v7[2] + 8 * v5);
    memset(*(void **)v16, 255, 4 * *(unsigned int *)(v16 + 8));
    v18 = *((_DWORD *)v7 + 10);
    if (v18 == *((_DWORD *)v7 + 11))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v7 + 4), 1, 1);
      v18 = *((_DWORD *)v7 + 10);
    }
    *(_DWORD *)(v7[4] + 4 * v18) = v5;
    ++*((_DWORD *)v7 + 10);
    v9 = *(uint64_t **)(v7[2] + 8 * v5);
  }
  v19 = *v9;
  v20 = *(_DWORD *)(v19 + 4 * v6);
  v21 = (_QWORD *)(a1 + 208);
  if (v20 == -1)
  {
    *(_DWORD *)(v19 + 4 * v6) = *(_DWORD *)(a1 + 216);
    v23 = *(_DWORD *)(a1 + 216);
    if (v23 == *(_DWORD *)(a1 + 220))
    {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v21, 1, 1);
      v23 = *(_DWORD *)(a1 + 216);
    }
    v24 = (__n128 *)(*(_QWORD *)(a1 + 208) + 20 * v23);
    result = *a2;
    v24[1].n128_u32[0] = a2[1].n128_u32[0];
    *v24 = result;
    ++*(_DWORD *)(a1 + 216);
  }
  else
  {
    v22 = (__n128 *)(*v21 + 20 * v20);
    if ((signed __int32)v22->n128_u32[0] > (signed __int32)a2->n128_u32[0])
    {
      result = *a2;
      v22[1].n128_u32[0] = a2[1].n128_u32[0];
      *v22 = result;
    }
  }
  return result;
}

uint64_t FstSearchHashBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  v4 = *(unsigned int *)(this + 216);
  if (v4 > a2)
  {
    v6 = this;
    v7 = (_QWORD *)(this + 208);
    v8 = a2;
    this = mrec_nth_element<FstSearchHashBackoffcmpTok>(*(_QWORD *)(this + 208), a2, v4);
    v9 = *(_DWORD *)(*v7 + 20 * a2);
    if (*a3 > v9)
      *a3 = v9;
    v10 = *(_DWORD *)(v6 + 220);
    if (a2 > v10)
      this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v7, a2 - v10, 0);
    v11 = *(unsigned int *)(v6 + 216);
    if (v11 < a2)
    {
      v12 = v8 - v11;
      v13 = (_DWORD *)(*v7 + 20 * v11 + 16);
      do
      {
        *((_QWORD *)v13 - 2) = 0xFFFFFFFF00000000;
        *(v13 - 2) = -1;
        *((_WORD *)v13 - 2) = -2;
        *v13 = 0;
        v13 += 5;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 216) = a2;
  }
  return this;
}

uint64_t mrec_nth_element<FstSearchHashBackoffcmpTok>(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  char v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  char *v11;
  uint64_t i;
  char v13;
  uint64_t j;
  char v15;
  unint64_t v16;
  unint64_t v17;

  if (a3 >= 2)
  {
    v3 = 0;
    do
    {
      v4 = 0;
      v5 = (_DWORD *)(result + 20 * v3);
      v6 = &v5[5 * (a3 >> 1)];
      do
      {
        v7 = *((_BYTE *)v5 + v4);
        *((_BYTE *)v5 + v4) = *((_BYTE *)v6 + v4);
        *((_BYTE *)v6 + v4++) = v7;
      }
      while (v4 != 20);
      v8 = (_DWORD *)(result + 20 * (v3 + a3) - 20);
      v9 = (_DWORD *)(result + 20 * v3);
      do
      {
        v10 = v9 + 5;
        while (1)
        {
          v9 = v10;
          if (v10 >= v8)
            break;
          v10 += 5;
          if (*v9 > *v5)
          {
            v11 = (char *)v9;
            while (*v8 >= *v5)
            {
              v8 -= 5;
              if (v9 >= v8)
                goto LABEL_16;
            }
            for (i = 0; i != 20; ++i)
            {
              v13 = *v11;
              *v11++ = *((_BYTE *)v8 + i);
              *((_BYTE *)v8 + i) = v13;
            }
            v8 -= 5;
            break;
          }
        }
LABEL_16:
        ;
      }
      while (v9 < v8);
      if (*v9 > *v5)
        v9 -= 5;
      if (v9 > v5)
      {
        for (j = 0; j != 20; ++j)
        {
          v15 = *((_BYTE *)v9 + j);
          *((_BYTE *)v9 + j) = *((_BYTE *)v5 + j);
          *((_BYTE *)v5 + j) = v15;
        }
      }
      v16 = ((char *)v9 - (char *)v5) / 0x14uLL;
      if (v16 <= a2)
      {
        if (v16 >= a2)
          return result;
        v17 = v16 + 1;
        v3 += v17;
        a2 -= v17;
        v16 = a3 - v17;
      }
      a3 = v16;
    }
    while (v16 > 1);
  }
  return result;
}

uint64_t FstSearchHashBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD v22[2];

  if (*(_BYTE *)(this + 356))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v5 = 0;
      v6 = 0;
      v7 = (_QWORD *)(this + 160);
      v21 = this + 192;
      do
      {
        v8 = (int *)(*(_QWORD *)(v2 + 256) + v5);
        v9 = *v8;
        v11 = v8[6];
        v10 = v8[7];
        v12 = v8[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v13 = -2 - v12;
        if (v10 == 16777213)
        {
          v10 = 16777209;
          if (*(_DWORD *)(*v7 + 24 * v13) == 16777209)
            v13 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 12 * *(unsigned int *)(*v7 + 24 * v13 + 8) + 8);
        }
        v14 = *a2;
        v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<CWIDAC>::reallocElts(v2 + 160, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        v16 = (int *)(*(_QWORD *)(v2 + 160) + 24 * v15);
        *v16 = v10;
        v16[1] = v14;
        v16[2] = -1;
        v16[3] = v9;
        v16[4] = v13;
        v16[5] = 0;
        v17 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v17 + 1;
        v18 = *(unsigned int *)(v2 + 200);
        if (v18 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v21, 1, 1);
          LODWORD(v18) = *(_DWORD *)(v2 + 200);
        }
        v19 = *(_QWORD *)(v2 + 192) + 20 * v18;
        *(_DWORD *)v19 = v9;
        *(_DWORD *)(v19 + 4) = v11;
        *(_DWORD *)(v19 + 8) = v17;
        *(_WORD *)(v19 + 12) = -2;
        *(_DWORD *)(v19 + 16) = 0;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        v20 = *(_DWORD *)(v2 + 264);
        if (v20 >= *(_DWORD *)(v2 + 20))
          v20 = *(_DWORD *)(v2 + 20);
        v5 += 36;
      }
      while (v6 < v20);
    }
  }
  return this;
}

void sub_2098324FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchHashBackoff::propagateNulls(uint64_t this, int a2, int a3, SearchStats *a4)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  __int16 v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int *v29;
  __int16 v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  __int16 v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  unsigned int v42;
  unint64_t v43;
  _DWORD *v44;
  int v45;
  SearchStats *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  __int16 v50;
  __int16 v51;
  unint64_t v53;
  int v54;
  uint64_t v55;

  v4 = this;
  v5 = *(_DWORD *)(this + 168);
  v6 = (uint64_t *)(this + 192);
  v7 = *(_DWORD *)(this + 200);
  v55 = this + 192;
  if (!v7)
  {
    v36 = *(_DWORD *)(this + 152);
    if (a4)
      goto LABEL_42;
    goto LABEL_43;
  }
  v45 = *(_DWORD *)(this + 168);
  v8 = 0;
  v46 = a4;
  v47 = this + 160;
  v54 = a2;
  do
  {
    v9 = *(unsigned int *)(*(_QWORD *)(v4 + 192) + 20 * v8 + 4);
    v10 = *(_QWORD *)(v4 + 40);
    if (*(_DWORD *)(v10 + 160) != (_DWORD)v9
      && (*(_DWORD *)(v10 + 140) <= (int)v9 || (*(_DWORD *)(*(_QWORD *)(v10 + 152) + 4 * v9) & 0x40000000) != 0))
    {
      v11 = *(_DWORD *)(*(_QWORD *)(v4 + 192) + 20 * v8 + 4);
      v53 = v8;
      do
      {
        v12 = *(_QWORD *)(v4 + 40);
        v13 = *(_QWORD *)(v12 + 152);
        v14 = *(_DWORD *)(v13 + 4 * v11);
        v15 = *(_DWORD *)(v13 + 4 * (v11 + 1));
        v16 = *(_DWORD *)(v12 + 140);
        if (v16 > v15)
          goto LABEL_32;
        v17 = (v14 & 0xFFFFF) <= 0xFFFF3 ? v14 & 0xFFFFF : v14 & 0xFFFFF | 0xF00000;
        if (v16 <= (int)v9 && v17 != 16777210)
          goto LABEL_32;
        v19 = (v14 >> 20) & 0x3FF;
        v20 = *v6;
        v21 = *v6 + 20 * v8;
        v22 = *(_DWORD *)v21 + v19;
        if (v22 > a2)
          goto LABEL_32;
        v23 = *(_DWORD *)(v21 + 8);
        v24 = *(_WORD *)(v21 + 12);
        v25 = *(_WORD *)(v21 + 14);
        v26 = *(_DWORD *)(v21 + 16) + v19;
        if (v17 == 16777210)
        {
          if (v7 != *(_DWORD *)(v4 + 204))
            goto LABEL_31;
        }
        else
        {
          if (v17 == 16777214)
            v27 = *(_DWORD *)(v21 + 16) + v19;
          else
            v27 = 0;
          if (v17 == 16777214)
            this = 0;
          else
            this = v26;
          v28 = *(unsigned int *)(v4 + 168);
          if (v28 == *(_DWORD *)(v4 + 172))
          {
            v49 = this;
            v50 = *(_WORD *)(v21 + 14);
            v51 = *(_WORD *)(v21 + 12);
            v48 = v27;
            DgnArray<CWIDAC>::reallocElts(v47, 1, 1);
            v27 = v48;
            this = v49;
            v25 = v50;
            v24 = v51;
            a2 = v54;
            v6 = (uint64_t *)v55;
            LODWORD(v28) = *(_DWORD *)(v4 + 168);
          }
          v29 = (int *)(*(_QWORD *)(v4 + 160) + 24 * v28);
          *v29 = v17;
          v29[1] = a3;
          v29[2] = -1;
          v29[3] = v22 - v27;
          v29[4] = v23;
          v29[5] = this;
          v23 = *(_DWORD *)(v4 + 168);
          *(_DWORD *)(v4 + 168) = v23 + 1;
          v7 = *(_DWORD *)(v4 + 200);
          if (v7 != *(_DWORD *)(v4 + 204))
            goto LABEL_30;
        }
        v30 = v24;
        v31 = v23;
        v32 = v9;
        v33 = v26;
        v34 = v25;
        this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v55, 1, 1);
        v25 = v34;
        v26 = v33;
        v9 = v32;
        v23 = v31;
        v8 = v53;
        v24 = v30;
        a2 = v54;
        v6 = (uint64_t *)v55;
        v7 = *(_DWORD *)(v4 + 200);
LABEL_30:
        v20 = *v6;
LABEL_31:
        v35 = v20 + 20 * v7;
        *(_DWORD *)v35 = v22;
        *(_DWORD *)(v35 + 4) = v15;
        *(_DWORD *)(v35 + 8) = v23;
        *(_WORD *)(v35 + 12) = v24;
        *(_WORD *)(v35 + 14) = v25;
        *(_DWORD *)(v35 + 16) = v26;
        v7 = *(_DWORD *)(v4 + 200) + 1;
        *(_DWORD *)(v4 + 200) = v7;
LABEL_32:
        v11 += 2;
      }
      while ((v14 & 0x80000000) == 0);
    }
    ++v8;
  }
  while (v8 < v7);
  v36 = *(_DWORD *)(v4 + 152);
  if (v7 > v36)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*(_QWORD *)(v4 + 192) + 20 * v36), v7 - v36, 20);
    v6 = (uint64_t *)v55;
    v36 = *(_DWORD *)(v4 + 152);
    v7 = *(_DWORD *)(v4 + 200);
  }
  a4 = v46;
  v5 = v45;
  if (v36 < v7)
  {
    v37 = v36;
    v38 = 20 * v36;
    do
    {
      v39 = *v6 + v38;
      if (*(_DWORD *)(v39 + 4) != *(_DWORD *)(*v6 + 20 * (v37 - 1) + 4))
      {
        v40 = *v6 + 20 * v36;
        v41 = *(_OWORD *)v39;
        *(_DWORD *)(v40 + 16) = *(_DWORD *)(v39 + 16);
        *(_OWORD *)v40 = v41;
        ++v36;
        v7 = *(_DWORD *)(v4 + 200);
      }
      ++v37;
      v38 += 20;
    }
    while (v37 < v7);
  }
  if (v46)
LABEL_42:
    *((_DWORD *)a4 + 1) += *(_DWORD *)(v4 + 168) - v5;
LABEL_43:
  v42 = *(_DWORD *)(v4 + 204);
  if (v36 > v42)
  {
    this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v55, v36 - v42, 0);
    v6 = (uint64_t *)v55;
    v7 = *(_DWORD *)(v4 + 200);
  }
  if (v7 < v36)
  {
    v43 = v36 - (unint64_t)v7;
    v44 = (_DWORD *)(*v6 + 20 * v7 + 16);
    do
    {
      *((_QWORD *)v44 - 2) = 0xFFFFFFFF00000000;
      *(v44 - 2) = -1;
      *((_WORD *)v44 - 2) = -2;
      *v44 = 0;
      v44 += 5;
      --v43;
    }
    while (v43);
  }
  *(_DWORD *)(v4 + 200) = v36;
  return this;
}

uint64_t FstSearchHashBackoff::collectTraces(FstSearchHashBackoff *this)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v35;
  int v36;

  v2 = *((unsigned int *)this + 42);
  v36 = 0;
  v35 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v35 = v3;
    v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = *((unsigned int *)this + 50);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unsigned int *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v9 = *v7;
      v7 += 5;
      v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v10 = *((_DWORD *)this + 42);
  if (!v10)
    goto LABEL_32;
  v11 = (uint64_t *)((char *)this + 160);
  v12 = v10 - 1;
  do
  {
    v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      v14 = *(unsigned int *)(*v11 + 24 * v12 + 16);
      if ((_DWORD)v14 != -1)
        *((_DWORD *)v3 + v14) = 1;
    }
    --v12;
  }
  while (v13);
  v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        v19 = *v11;
        if (v17 != v18)
        {
          v20 = (__int128 *)(v19 + v16);
          v21 = v19 + 24 * v18;
          v22 = *v20;
          *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v21 = v22;
          v19 = *v11;
        }
        v23 = v19 + 24 * v18;
        v26 = *(_DWORD *)(v23 + 16);
        v24 = (_DWORD *)(v23 + 16);
        v25 = v26;
        if (v26 != -1)
          *v24 = *((_DWORD *)v3 + v25);
        *((_DWORD *)v3 + v17) = v18++;
        v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 24;
    }
    while (v17 < v15);
    v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      v28 = v18 - (unint64_t)v15;
      v29 = (_QWORD *)(*v11 + 24 * v15 + 16);
      do
      {
        *((_OWORD *)v29 - 1) = xmmword_209A6C7D0;
        *v29 = 0xFFFFFFFFLL;
        v29 += 3;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  v30 = *((unsigned int *)this + 50);
  if ((_DWORD)v30)
  {
    v31 = v35;
    v32 = (_DWORD *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        *v32 = *((_DWORD *)v31 + v33);
      v32 += 5;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_209832AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchHashBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchHashBackoff::advanceDeltas((FstSearchHashBackoff *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchHashBackoff::collectTraces((FstSearchHashBackoff *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

int64x2_t FstSearchHashBackoff::reset(FstSearchHashBackoff *this)
{
  int64x2_t *v2;
  int64x2_t result;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;

  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 50) = 0;
  v7 = 0u;
  v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  v5 = 0u;
  v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  v2 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchHashBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchHashBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchHashBackoff::beginTopRecPassSyncRecog(FstSearchHashBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((_BYTE *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchHashBackoff::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchHashBackoff::generateTraceTokensFromTraces((FstSearchHashBackoff *)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = this[13];
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

int32x2_t FstSearchHashBackoff::generateTraceTokensFromTraces(FstSearchHashBackoff *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  int32x2_t result;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  int32x2_t *v12;
  int32x2_t v13;

  v2 = (_QWORD *)((char *)this + 176);
  v3 = *((unsigned int *)this + 42);
  v4 = *((_DWORD *)this + 47);
  if (v3 > v4)
    DgnArray<RuleDesc>::reallocElts((uint64_t)this + 176, v3 - v4, 0);
  v6 = *((unsigned int *)this + 46);
  if (v6 < v3)
  {
    v7 = v3 - v6;
    v8 = (_DWORD *)(*v2 + 12 * v6 + 8);
    do
    {
      *((_QWORD *)v8 - 1) = 0;
      *v8 = -1;
      v8 += 3;
      --v7;
    }
    while (v7);
  }
  *((_DWORD *)this + 46) = v3;
  v9 = *((unsigned int *)this + 42);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = (int32x2_t *)(*((_QWORD *)this + 22) + 4);
    v12 = (int32x2_t *)(*((_QWORD *)this + 20) + 16);
    do
    {
      v12[-1].i32[0] = v10;
      v11[-1].i32[1] = v12[-1].i32[1];
      v13 = *v12;
      v12 += 3;
      result = vrev64_s32(v13);
      *v11 = result;
      v11 = (int32x2_t *)((char *)v11 + 12);
      ++v10;
    }
    while (v9 != v10);
  }
  return result;
}

void FstSearchHashBackoff::printSize(FstSearchHashBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 12;
  v44 = *((unsigned int *)this + 42);
  v45 = 24 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A6C820, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 12;
  v54 = *((unsigned int *)this + 46);
  v55 = 12 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 12 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((unsigned int *)this + 50);
  v65 = 18 * v64;
  if ((int)v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 18 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((unsigned int *)this + 54);
  v75 = 18 * v74;
  if ((int)v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 18 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 240, 0);
  v99 = sizeObject((uint64_t)this + 240, 1);
  v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_20983352C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchHashBackoff::getBestTrace(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if ((a4 & 1) != 0)
    v4 = 0;
  else
    v4 = *(unsigned int *)(a1 + 152);
  v5 = *(unsigned int *)(a1 + 200);
  if (v4 >= v5)
    goto LABEL_21;
  v6 = 20 * v4;
  v7 = 1879048192;
  v8 = 0xFFFFFFFFLL;
  do
  {
    v9 = *(_QWORD *)(a1 + 192);
    if (!a4 || (v10 = *(unsigned int *)(v9 + v6 + 8), (_DWORD)v10 == -1))
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4))
        goto LABEL_19;
      v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2)
      *(_BYTE *)(*a2 + v10) = 1;
    if (a3)
      *(_BYTE *)(*a3 + v10) = 1;
    v11 = *(_QWORD *)(a1 + 160) + 24 * v10;
    v12 = *(_DWORD *)(v11 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v11 + 4));
    if (v7 > v12)
      v8 = v10;
    if (v7 >= v12)
      v7 = v12;
    v5 = *(unsigned int *)(a1 + 200);
LABEL_19:
    ++v4;
    v6 += 20;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    v13 = *(unsigned int *)(a1 + 168);
    v8 = 0xFFFFFFFFLL;
    while (v13)
    {
      --v13;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(_QWORD *)(a1 + 160) + 24 * v13) == 16777213)
      {
        if (a2)
          *(_BYTE *)(*a2 + v13) = 1;
        v8 = v13;
        if (a3)
          *(_BYTE *)(*a3 + v13) = 1;
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchHashBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchHashBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 24 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchHashBackoff::createLatticeNodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6, _QWORD *a7)
{
  uint64_t v9;
  BOOL v10;
  int Node;
  uint64_t result;
  unsigned int v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int *v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  _QWORD *v46;

  v9 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v9)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(4 * v9, 0);
    *(_DWORD *)(a2 + 8) = v9;
  }
  Node = Lattice<WordLatticeLC>::createNode(a4);
  result = a3;
  v13 = *(_DWORD *)(a3 + 8);
  if (v13 == *(_DWORD *)(a3 + 12))
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    result = a3;
    v13 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v13) = Node;
  ++*(_DWORD *)(result + 8);
  v14 = *(_DWORD *)(a1 + 168);
  v15 = a6;
  v16 = (uint64_t *)a2;
  if (v14)
  {
    v17 = (v14 - 1);
    v18 = 24 * v17;
    result = 0xFFFFFFFFLL;
    v46 = a7;
    do
    {
      v19 = *v16;
      *(_DWORD *)(*v16 + 4 * v17) = -1;
      v20 = *v15;
      if (*(_BYTE *)(*v15 + v17))
      {
        v21 = *(_QWORD *)(a1 + 160);
        v22 = *(_QWORD *)(a1 + 88);
        v23 = *(_DWORD *)(v22 + 4 * *(unsigned int *)(v21 + v18 + 4));
        if (*(_BYTE *)(*a7 + v17))
        {
          if (*(_BYTE *)(*v15 + v17) != 1 || (_DWORD)result == -1)
          {
            v25 = *(_DWORD *)(v22 + 4 * *(unsigned int *)(v21 + v18 + 4));
            v26 = result;
            v27 = Lattice<WordLatticeLC>::createNode(a4);
            v28 = a3;
            v16 = (uint64_t *)a2;
            *(_DWORD *)(*(_QWORD *)a2 + 4 * v17) = *(_DWORD *)(a3 + 8);
            v29 = *(unsigned int *)(a3 + 8);
            if (v29 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              v28 = a3;
              v16 = (uint64_t *)a2;
              v29 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v28 + 4 * v29) = v27;
            v30 = *(_DWORD *)(v28 + 8);
            *(_DWORD *)(v28 + 8) = v30 + 1;
            v15 = a6;
            v20 = *a6;
            if (*(_BYTE *)(*a6 + v17) == 1)
              result = v30;
            else
              result = v26;
            v21 = *(_QWORD *)(a1 + 160);
            v23 = v25;
          }
          else
          {
            *(_DWORD *)(v19 + 4 * v17) = result;
          }
        }
        v31 = *(_DWORD *)(v21 + v18 + 8);
        v32 = *(_QWORD *)(a1 + 176);
        v33 = (_DWORD *)(v32 + 12 * v31);
        v34 = v33[2];
        if ((v33[2] & 0x80000000) != 0)
        {
          *v33 += v23;
        }
        else
        {
          if (*(_DWORD *)(v21 + v18) == 16777209)
          {
            v35 = *a5 + 16 * v34;
            v37 = (_DWORD *)(v35 + 8);
            v36 = *(unsigned int *)(v35 + 8);
            v38 = *(_QWORD *)(a1 + 176);
            if (v36 == *(_DWORD *)(v35 + 12))
            {
              v44 = v23;
              v45 = result;
              DgnPrimArray<unsigned int>::reallocElts(v35, 1, 1);
              v23 = v44;
              result = v45;
              v16 = (uint64_t *)a2;
              v15 = a6;
              v36 = *v37;
              v21 = *(_QWORD *)(a1 + 160);
              v38 = *(_QWORD *)(a1 + 176);
              v20 = *a6;
            }
            *(_DWORD *)(*(_QWORD *)v35 + 4 * v36) = v17;
            ++*v37;
            v34 = v33[2];
            a7 = v46;
          }
          else
          {
            *(_BYTE *)(*a7 + v34) = 1;
            v38 = v32;
          }
          v39 = v21 + 24 * v34;
          v40 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v39 + 4));
          v41 = (int *)(v38 + 12 * *(unsigned int *)(v39 + 8));
          v42 = v23 + *v33 - v40;
          v43 = *v41;
          LODWORD(v41) = v41[1];
          *v33 = v42 - v43;
          *(_DWORD *)(v32 + 12 * v31 + 4) -= (_DWORD)v41;
          *(_BYTE *)(v20 + v34) = 2;
        }
      }
      --v17;
      v18 -= 24;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t FstSearchHashBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  v23 = (uint64_t)v9;
  v11 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = v27;
    do
    {
      if (*(_BYTE *)(*a3 + v12))
      {
        v14 = *(_QWORD *)(a1 + 160);
        if ((*(_DWORD *)(v14 + 24 * v12) - 16777209) >= 2)
        {
          v15 = *(_QWORD *)(a1 + 176) + 12 * *(unsigned int *)(v14 + 24 * v12 + 8);
          v16 = *(unsigned int *)(v15 + 8);
          if ((_DWORD)v16 == -1)
            v17 = 0;
          else
            v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(_BYTE *)(*a4 + v12))
            FstSearchHashBackoff::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            v20 = 0;
            do
            {
              v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v12) + 4 * v20);
              FstSearchHashBackoff::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_209833C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchHashBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _QWORD v34[2];
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  __int128 v49;
  _DWORD v50[2];
  __int128 v51;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    v17 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8) + 8) == a2)
  {
    v17 = (_DWORD *)(*(_QWORD *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8));
  }
  else
  {
    v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 24 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v50);
  v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    v19 = *v17 + *a3;
  }
  else
  {
    v19 = *a3;
  }
  if (v50[0] >> 25 == 126)
  {
    v20 = 0;
    v21 = v18;
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 136);
    v21 = v18 - v20;
  }
  if ((v12 & 0x80000000) != 0)
  {
    v22 = 0;
  }
  else
  {
    v22 = *(_DWORD *)(a1 + 140);
    v21 -= v22;
  }
  v23 = v19 - v18;
  v24 = a3[2];
  v25 = *(_QWORD *)(a1 + 160);
  if (v24 == -1)
  {
    v27 = 0;
    if (a9)
      goto LABEL_21;
  }
  else
  {
    v26 = *(_DWORD *)(v25 + 24 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1)
        --v26;
      v27 = (v26 >> 1) + 1;
LABEL_21:
      v28 = *(_DWORD *)(v25 + 24 * a2 + 4);
      if (v28 >= 1)
        --v28;
      v29 = v28 >> 1;
      v30 = (v28 >> 1) - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v31 = *(_DWORD *)(v25 + 24 * v12 + 4);
        if (v31 >= 1)
          --v31;
        v32 = v31 >> 1;
        goto LABEL_30;
      }
LABEL_31:
      v33 = 0;
      goto LABEL_32;
    }
    v27 = v26 + 1;
  }
  v29 = *(_DWORD *)(v25 + 24 * a2 + 4);
  v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_31;
  v32 = *(_DWORD *)(v25 + 24 * v12 + 4);
LABEL_30:
  v33 = v32 - v29;
LABEL_32:
  v35 = v27;
  v36 = v30;
  v37 = v33;
  v38 = v21;
  v39 = 0;
  v40 = v20;
  v41 = v23;
  v42 = 0;
  v43 = v22;
  v44 = xmmword_209A6C7F0;
  v45 = 0;
  v46 = -1;
  v34[0] = &off_24C2149F8;
  v34[1] = 0xBFF0000000000000;
  v47 = v50[0];
  v48 = v50[1];
  v49 = v51;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_209833EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchHashBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 356))
    return MiniFst::beginTopFstSyncRecog(this + 240);
  return this;
}

uint64_t FstSearchHashBackoff::endTopRecSyncRecog(FstSearchHashBackoff *this)
{
  uint64_t result;

  VirtMap::setEmpty(*((_QWORD *)this + 14));
  result = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return result;
}

uint64_t FstSearchHashBackoff::getBestExitScore(FstSearchHashBackoff *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 57) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 50);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 20 * v1;
  do
  {
    v7 = *((_QWORD *)this + 24) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 24 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 20;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 24 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 24 * v12 + 16);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_209834084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchHashBackoff::getBestScoreMaybeUpdateFstNode(FstSearchHashBackoff *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 50);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 24);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 5;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchHashBackoff::seedTheory(FstSearchHashBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 24 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(_QWORD *)(v12 + 16) = 0xFFFFFFFFLL;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 192, 1, 1);
    v14 = *((_DWORD *)this + 50);
  }
  v15 = *((_QWORD *)this + 24) + 20 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_DWORD *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchHashBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 228);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 24 * v8);
    for (i = v10[4]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 24 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 24 * v8 + 12);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 24 * v16);
      i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchHashBackoff::checkSearchParametersValidityForArcGraph(FstSearchHashBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchHashBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _DWORD v28[2];
  __int128 v29;

  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    v9 = a4;
    LODWORD(v11) = 0;
    v12 = a2;
    v13 = a2;
    do
    {
      v14 = (_DWORD *)(*(_QWORD *)(a1 + 160) + 24 * v13);
      if (*v14 == 16777209)
        v11 = v11;
      else
        v11 = (v11 + 1);
      v13 = v14[4];
    }
    while ((_DWORD)v13 != -1);
    v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15)
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      v17 = v11 - v16;
      v18 = *(_QWORD *)a3 + 32 * v16;
      do
      {
        *(_QWORD *)v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_209A593D0;
        *(_QWORD *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if ((_DWORD)v11)
    {
      v19 = *(_QWORD *)(a1 + 160);
      v20 = -16;
      do
      {
        v21 = (unsigned int *)(v19 + 24 * v12);
        v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            v23 = v22 - 1;
            if (v22 < 1)
              v23 = v22;
            v20 = (v23 >> 1) + 1;
          }
          else
          {
            v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            v24 = v22 - 1;
            if (v22 < 1)
              v24 = v21[1];
            v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16)
            v25 = v22 + 1;
          else
            v25 = v20;
          v26 = v28[1];
          v11 = (v11 - 1);
          v27 = *(_QWORD *)a3 + 32 * v11;
          *(_DWORD *)v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          v19 = *(_QWORD *)(a1 + 160);
          v20 = -16;
        }
        v12 = *(unsigned int *)(v19 + 24 * v12 + 16);
      }
      while ((_DWORD)v12 != -1);
    }
  }
}

uint64_t FstSearchHashBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 24 * v24;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_20983492C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchHash::advanceDeltas(FstSearchHash *this, int a2, signed __int32 a3, SearchStats *a4, int a5)
{
  signed __int32 *v10;
  int v11;
  unint64_t v12;
  unint64_t i;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  signed __int32 v19;
  signed __int32 v20;
  __n128 *v21;
  unsigned __int32 v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int ScoreNoBackoff;
  __n128 *v31;
  signed __int32 v32;
  signed __int32 v33;
  unsigned __int32 v34;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  int64x2_t *v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t *v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64x2_t v58;
  int64x2_t *v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t *v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  uint64_t v68;
  int64x2_t *v69;
  int64x2_t result;
  int64x2_t v71;
  int v72;
  SearchStats *v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int v92;
  __n128 v93;
  unsigned __int32 v94;
  int64x2_t v95;
  int64x2_t v96;
  int v97[3];

  v97[0] = a2;
  v95 = 0u;
  v96 = 0u;
  SnapTime::recordTime((SnapTime *)&v95, 1, 0, 0, 0);
  v93.n128_u64[0] = 0xFFFFFFFF00000000;
  v93.n128_u32[2] = -1;
  v93.n128_u16[6] = -2;
  v94 = 0;
  *((_DWORD *)this + 58) = a3;
  v10 = (signed __int32 *)((char *)this + 232);
  v11 = *((_DWORD *)this + 2);
  v12 = *((unsigned int *)this + 50);
  if ((_DWORD)v12)
  {
    v72 = a5;
    v73 = a4;
    for (i = 0; i < v12; ++i)
    {
      v14 = *((_QWORD *)this + 24);
      v15 = (int *)(v14 + 20 * i);
      v16 = v15[1];
      v17 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v17 + 160) != (_DWORD)v16)
      {
        if (*(_DWORD *)(v17 + 140) > (int)v16)
        {
          v18 = *v15;
          v19 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + 20 * i + 12))+ v18;
          v20 = *((_DWORD *)this + 58);
          if (v19 - v11 <= v20)
          {
            if (v20 > v19)
              *v10 = v19;
            v21 = (__n128 *)(*((_QWORD *)this + 24) + 20 * i);
            v22 = v21[1].n128_u32[0];
            v93 = *v21;
            v94 = v22;
            v93.n128_u32[0] = v19;
            FstSearchHashBackoff::maybeInsertHashedToken((uint64_t)this, &v93);
          }
        }
        v23 = v16;
        do
        {
          v24 = *((_QWORD *)this + 5);
          v25 = *(_QWORD *)(v24 + 152);
          v26 = *(_DWORD *)(v25 + 4 * v23);
          v27 = *(_DWORD *)(v25 + 4 * (v23 + 1));
          v28 = *(_DWORD *)(v24 + 140);
          if (v28 <= v27)
          {
            if (v28 <= (int)v16 && *((_BYTE *)this + 356) != 0)
            {
              v36 = (v26 & 0xFFFFF) <= 0xFFFF3 ? v26 & 0xFFFFF : v26 & 0xFFFFF | 0xF00000;
              if (v36 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v90);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v36, (DgnString *)&v90, v37, v38, v39, v40, v41);
                v46 = &unk_209A6C820;
                if (v90.i32[2])
                  v46 = (void *)v90.i64[0];
                xprintf("Seed from state %d score %d trace %d, %s\n", v42, v43, v44, v45, v16, *(unsigned int *)(*((_QWORD *)this + 24) + 20 * i), *(unsigned int *)(*((_QWORD *)this + 24) + 20 * i + 8), v46);
                MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((_QWORD *)this + 24) + 20 * i), 0, *(_DWORD *)(*((_QWORD *)this + 24) + 20 * i + 8), v27);
                DgnString::~DgnString((DgnString *)&v90);
              }
            }
          }
          else
          {
            v29 = (v26 >> 20) & 0x3FF;
            ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v25 + 4 * v23));
            v31 = (__n128 *)(*((_QWORD *)this + 24) + 20 * i);
            v32 = ScoreNoBackoff + v29 + v31->n128_u32[0];
            v33 = *((_DWORD *)this + 58);
            if (v32 - v11 <= v33)
            {
              if (v33 > v32)
                *v10 = v32;
              v34 = v31[1].n128_u32[0];
              v93 = *v31;
              v93.n128_u64[0] = __PAIR64__(v27, v32);
              v93.n128_u16[6] = v26;
              v94 = v34 + v29;
              FstSearchHashBackoff::maybeInsertHashedToken((uint64_t)this, &v93);
            }
          }
          v23 += 2;
        }
        while ((v26 & 0x80000000) == 0);
        v12 = *((unsigned int *)this + 50);
      }
    }
    a3 = *v10;
    a4 = v73;
    a5 = v72;
  }
  v92 = a3 + v11;
  if (*((_BYTE *)this + 356))
    MiniFst::updateFrame((char *)this + 240, (int *)this + 58, v11, a2);
  v90 = 0u;
  v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  v90 = vsubq_s64(v90, v95);
  v91 = vsubq_s64(v91, v96);
  v47 = (int64x2_t *)*((_QWORD *)this + 13);
  v48 = vaddq_s64(v47[1], v91);
  *v47 = vaddq_s64(*v47, v90);
  v47[1] = v48;
  v88 = 0u;
  v89 = 0u;
  SnapTime::recordTime((SnapTime *)&v88, 1, 0, 0, 0);
  FstSearchHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v92);
  v86 = 0u;
  v87 = 0u;
  SnapTime::recordTime((SnapTime *)&v86, 1, 0, 0, 0);
  v49 = vsubq_s64(v86, v88);
  v50 = (int64x2_t *)*((_QWORD *)this + 13);
  v51 = v50[3];
  v52 = vaddq_s64(v50[2], v49);
  v86 = v49;
  v87 = vsubq_s64(v87, v89);
  v53 = vaddq_s64(v51, v87);
  v50[2] = v52;
  v50[3] = v53;
  v84 = 0u;
  v85 = 0u;
  SnapTime::recordTime((SnapTime *)&v84, 1, 0, 0, 0);
  v54 = *((_QWORD *)this + 24);
  v55 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 24) = v55;
  *((_QWORD *)this + 26) = v54;
  LODWORD(v54) = *((_DWORD *)this + 51);
  v56 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 25) = v56;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v54;
  v57 = *((unsigned int *)this + 6);
  if ((_DWORD)v57 && (_DWORD)v56 && v57 < v56)
    mrec_nth_element<FstSearchHashBackoffcmpTok>(v55, v57, v56);
  v82 = 0u;
  v83 = 0u;
  SnapTime::recordTime((SnapTime *)&v82, 1, 0, 0, 0);
  v58 = vsubq_s64(v82, v84);
  v59 = (int64x2_t *)*((_QWORD *)this + 13);
  v60 = v59[5];
  v61 = vaddq_s64(v59[4], v58);
  v82 = v58;
  v83 = vsubq_s64(v83, v85);
  v62 = vaddq_s64(v60, v83);
  v59[4] = v61;
  v59[5] = v62;
  v80 = 0u;
  v81 = 0u;
  SnapTime::recordTime((SnapTime *)&v80, 1, 0, 0, 0);
  VirtMap::setEmpty(*((_QWORD *)this + 14));
  v78 = 0u;
  v79 = 0u;
  SnapTime::recordTime((SnapTime *)&v78, 1, 0, 0, 0);
  v63 = vsubq_s64(v78, v80);
  v64 = (int64x2_t *)*((_QWORD *)this + 13);
  v65 = v64[9];
  v66 = vaddq_s64(v64[8], v63);
  v78 = v63;
  v79 = vsubq_s64(v79, v81);
  v67 = vaddq_s64(v65, v79);
  v64[8] = v66;
  v64[9] = v67;
  v76 = 0u;
  v77 = 0u;
  SnapTime::recordTime((SnapTime *)&v76, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  v68 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v68;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v68;
    if (*((_DWORD *)a4 + 2) > v68)
      LODWORD(v68) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v68;
  }
  if (*((_BYTE *)this + 356))
    FstSearchHash::seedFromMiniFst((uint64_t)this, v97);
  if (a5)
    FstSearchHashBackoff::propagateNulls((uint64_t)this, v92, a2, a4);
  *((_DWORD *)this + 56) = a2;
  v74 = 0u;
  v75 = 0u;
  SnapTime::recordTime((SnapTime *)&v74, 1, 0, 0, 0);
  v69 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v69[6], vsubq_s64(v74, v76));
  v71 = vaddq_s64(v69[7], vsubq_s64(v75, v77));
  v69[6] = result;
  v69[7] = v71;
  return result;
}

void sub_209834EB4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchHash::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD v22[2];

  if (*(_BYTE *)(this + 356))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v5 = 0;
      v6 = 0;
      v7 = (_QWORD *)(this + 160);
      v21 = this + 192;
      do
      {
        v8 = (int *)(*(_QWORD *)(v2 + 256) + v5);
        v9 = *v8;
        v11 = v8[6];
        v10 = v8[7];
        v12 = v8[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v13 = -2 - v12;
        if (v10 == 16777213)
        {
          v10 = 16777209;
          if (*(_DWORD *)(*v7 + 24 * v13) == 16777209)
            v13 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 12 * *(unsigned int *)(*v7 + 24 * v13 + 8) + 8);
        }
        v14 = *a2;
        v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<CWIDAC>::reallocElts(v2 + 160, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        v16 = (int *)(*(_QWORD *)(v2 + 160) + 24 * v15);
        *v16 = v10;
        v16[1] = v14;
        v16[2] = -1;
        v16[3] = v9;
        v16[4] = v13;
        v16[5] = 0;
        v17 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v17 + 1;
        v18 = *(unsigned int *)(v2 + 200);
        if (v18 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v21, 1, 1);
          LODWORD(v18) = *(_DWORD *)(v2 + 200);
        }
        v19 = *(_QWORD *)(v2 + 192) + 20 * v18;
        *(_DWORD *)v19 = v9;
        *(_DWORD *)(v19 + 4) = v11;
        *(_DWORD *)(v19 + 8) = v17;
        *(_WORD *)(v19 + 12) = -2;
        *(_DWORD *)(v19 + 16) = 0;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        v20 = *(_DWORD *)(v2 + 264);
        if (v20 >= *(_DWORD *)(v2 + 20))
          v20 = *(_DWORD *)(v2 + 20);
        v5 += 36;
      }
      while (v6 < v20);
    }
  }
  return this;
}

void sub_2098350B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchHash::collectTraces(FstSearchHash *this)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v35;
  int v36;

  v2 = *((unsigned int *)this + 42);
  v36 = 0;
  v35 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v35 = v3;
    v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = *((unsigned int *)this + 50);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unsigned int *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v9 = *v7;
      v7 += 5;
      v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  v10 = *((_DWORD *)this + 42);
  if (!v10)
    goto LABEL_32;
  v11 = (uint64_t *)((char *)this + 160);
  v12 = v10 - 1;
  do
  {
    v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      v14 = *(unsigned int *)(*v11 + 24 * v12 + 16);
      if ((_DWORD)v14 != -1)
        *((_DWORD *)v3 + v14) = 1;
    }
    --v12;
  }
  while (v13);
  v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        v19 = *v11;
        if (v17 != v18)
        {
          v20 = (__int128 *)(v19 + v16);
          v21 = v19 + 24 * v18;
          v22 = *v20;
          *(_QWORD *)(v21 + 16) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v21 = v22;
          v19 = *v11;
        }
        v23 = v19 + 24 * v18;
        v26 = *(_DWORD *)(v23 + 16);
        v24 = (_DWORD *)(v23 + 16);
        v25 = v26;
        if (v26 != -1)
          *v24 = *((_DWORD *)v3 + v25);
        *((_DWORD *)v3 + v17) = v18++;
        v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 24;
    }
    while (v17 < v15);
    v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      v28 = v18 - (unint64_t)v15;
      v29 = (_QWORD *)(*v11 + 24 * v15 + 16);
      do
      {
        *((_OWORD *)v29 - 1) = xmmword_209A6C7D0;
        *v29 = 0xFFFFFFFFLL;
        v29 += 3;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  v30 = *((unsigned int *)this + 50);
  if ((_DWORD)v30)
  {
    v31 = v35;
    v32 = (_DWORD *)(*((_QWORD *)this + 24) + 8);
    do
    {
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        *v32 = *((_DWORD *)v31 + v33);
      v32 += 5;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_2098352D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchHash::vite(int64x2_t **this, int a2, signed __int32 a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchHash::advanceDeltas((FstSearchHash *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchHash::collectTraces((FstSearchHash *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

int64x2_t FstSearchHash::reset(FstSearchHash *this)
{
  int64x2_t *v2;
  int64x2_t result;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;

  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 50) = 0;
  v7 = 0u;
  v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  v5 = 0u;
  v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  v2 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchHash::doFrame(int64x2_t **this, int a2, signed __int32 a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchHash::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchHash::beginTopRecPassSyncRecog(FstSearchHash *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((_BYTE *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchHash::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchHashBackoff::generateTraceTokensFromTraces((FstSearchHashBackoff *)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = this[13];
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchHash::printSize(FstSearchHash *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 12;
  v44 = *((unsigned int *)this + 42);
  v45 = 24 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A6C820, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 12;
  v54 = *((unsigned int *)this + 46);
  v55 = 12 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 12 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((unsigned int *)this + 50);
  v65 = 18 * v64;
  if ((int)v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 18 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((unsigned int *)this + 54);
  v75 = 18 * v74;
  if ((int)v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 18 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 240, 0);
  v99 = sizeObject((uint64_t)this + 240, 1);
  v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_209835C78(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchHash::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchHashBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 24 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchHash::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  v23 = (uint64_t)v9;
  v11 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = v27;
    do
    {
      if (*(_BYTE *)(*a3 + v12))
      {
        v14 = *(_QWORD *)(a1 + 160);
        if ((*(_DWORD *)(v14 + 24 * v12) - 16777209) >= 2)
        {
          v15 = *(_QWORD *)(a1 + 176) + 12 * *(unsigned int *)(v14 + 24 * v12 + 8);
          v16 = *(unsigned int *)(v15 + 8);
          if ((_DWORD)v16 == -1)
            v17 = 0;
          else
            v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(_BYTE *)(*a4 + v12))
            FstSearchHash::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            v20 = 0;
            do
            {
              v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v12) + 4 * v20);
              FstSearchHash::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_209835FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchHash::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _QWORD v34[2];
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  __int128 v49;
  _DWORD v50[2];
  __int128 v51;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    v17 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8) + 8) == a2)
  {
    v17 = (_DWORD *)(*(_QWORD *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8));
  }
  else
  {
    v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 24 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v50);
  v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    v19 = *v17 + *a3;
  }
  else
  {
    v19 = *a3;
  }
  if (v50[0] >> 25 == 126)
  {
    v20 = 0;
    v21 = v18;
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 136);
    v21 = v18 - v20;
  }
  if ((v12 & 0x80000000) != 0)
  {
    v22 = 0;
  }
  else
  {
    v22 = *(_DWORD *)(a1 + 140);
    v21 -= v22;
  }
  v23 = v19 - v18;
  v24 = a3[2];
  v25 = *(_QWORD *)(a1 + 160);
  if (v24 == -1)
  {
    v27 = 0;
    if (a9)
      goto LABEL_21;
  }
  else
  {
    v26 = *(_DWORD *)(v25 + 24 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1)
        --v26;
      v27 = (v26 >> 1) + 1;
LABEL_21:
      v28 = *(_DWORD *)(v25 + 24 * a2 + 4);
      if (v28 >= 1)
        --v28;
      v29 = v28 >> 1;
      v30 = (v28 >> 1) - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v31 = *(_DWORD *)(v25 + 24 * v12 + 4);
        if (v31 >= 1)
          --v31;
        v32 = v31 >> 1;
        goto LABEL_30;
      }
LABEL_31:
      v33 = 0;
      goto LABEL_32;
    }
    v27 = v26 + 1;
  }
  v29 = *(_DWORD *)(v25 + 24 * a2 + 4);
  v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_31;
  v32 = *(_DWORD *)(v25 + 24 * v12 + 4);
LABEL_30:
  v33 = v32 - v29;
LABEL_32:
  v35 = v27;
  v36 = v30;
  v37 = v33;
  v38 = v21;
  v39 = 0;
  v40 = v20;
  v41 = v23;
  v42 = 0;
  v43 = v22;
  v44 = xmmword_209A6C7F0;
  v45 = 0;
  v46 = -1;
  v34[0] = &off_24C2149F8;
  v34[1] = 0xBFF0000000000000;
  v47 = v50[0];
  v48 = v50[1];
  v49 = v51;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_20983621C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchHash::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 356))
    return MiniFst::beginTopFstSyncRecog(this + 240);
  return this;
}

uint64_t FstSearchHash::endTopRecSyncRecog(FstSearchHash *this)
{
  uint64_t result;

  VirtMap::setEmpty(*((_QWORD *)this + 14));
  result = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return result;
}

uint64_t FstSearchHash::getBestExitScore(FstSearchHash *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 57) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 50);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 20 * v1;
  do
  {
    v7 = *((_QWORD *)this + 24) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 24 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 20;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 24 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 24 * v12 + 16);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_2098363C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchHash::getBestScoreMaybeUpdateFstNode(FstSearchHash *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 50);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 24);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 5;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchHash::seedTheory(FstSearchHash *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 24 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(_QWORD *)(v12 + 16) = 0xFFFFFFFFLL;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 192, 1, 1);
    v14 = *((_DWORD *)this + 50);
  }
  v15 = *((_QWORD *)this + 24) + 20 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_DWORD *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchHash::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 228);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 24 * v8);
    for (i = v10[4]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 24 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 24 * v8 + 12);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 24 * v16);
      i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchHash::checkSearchParametersValidityForArcGraph(FstSearchHash *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchHash::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 24 * v24;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_209836AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLeafLatticeDurationBackoff::maybeGeneratePelMaps(FstSearchLeafLatticeDurationBackoff *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 248, (uint64_t)this + 232);
}

uint64_t FstSearchLeafLatticeDurationBackoff::maybeInitDurModel(FstSearchLeafLatticeDurationBackoff *this, const PicMgr *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1)
    v6 = 56;
  else
    v6 = 72;
  v7 = v16;
  v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!(_DWORD)v7)
      goto LABEL_13;
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  v9 = 0;
  v10 = v15;
  v11 = *((_QWORD *)this + 24);
  do
  {
    if (!(_WORD)v9 || (v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF))
      v13 = 0;
    else
      v13 = *(_WORD *)(*(_QWORD *)((char *)a2 + v6) + 2 * v12);
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_209836BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafLatticeDurationBackoff::advanceDeltas(FstSearchLeafLatticeDurationBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int ScoreAllowBackoff_updateNodeInSequence;
  uint64_t v21;
  __int16 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  void *v86;
  int *v87;
  unsigned int v88;
  int64x2_t *v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t *v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  unint64_t v96;
  unint64_t v97;
  int64x2_t v98;
  int64x2_t *v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  uint64_t v103;
  int64x2_t *v104;
  int64x2_t result;
  int64x2_t v106;
  int v109;
  int v110;
  unsigned int v111;
  SearchStats *v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  char *v116;
  int *v117;
  uint64_t v118;
  _BYTE v119[12];
  uint64_t v120;
  int v121;
  int v122;
  unsigned int v123;
  int v124;
  int v125;
  int v126;
  __int16 v127;
  int v128;
  uint64_t v129;
  __int16 v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  int v135;
  int v136;
  uint64_t *v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int v152;
  int64x2_t v153;
  int64x2_t v154;
  int v155[3];

  v155[0] = a2;
  v153 = 0u;
  v154 = 0u;
  SnapTime::recordTime((SnapTime *)&v153, 1, 0, 0, 0);
  v117 = (int *)((char *)this + 304);
  *((_DWORD *)this + 76) = a3;
  v8 = *((_DWORD *)this + 2);
  v9 = *((_DWORD *)this + 68);
  if (v9)
  {
    *(_DWORD *)&v119[8] = 0;
    v10 = 0;
    v137 = (uint64_t *)((char *)this + 216);
    v109 = *((_DWORD *)this + 53);
    v110 = *((unsigned __int8 *)this + 208);
    v116 = (char *)this + 280;
    v112 = a4;
    *(_QWORD *)v119 = *((unsigned int *)this + 2);
    do
    {
      v11 = *((_QWORD *)this + 33);
      v12 = v10;
      v13 = *(unsigned int *)(v11 + 40 * v10 + 4);
      v111 = v10;
      if (v9 <= v10 + 1)
        v14 = v10 + 1;
      else
        v14 = v9;
      while (v14 - 1 != v10)
      {
        if (*(_DWORD *)(v11 + 40 * ++v10 + 4) != (_DWORD)v13)
          goto LABEL_10;
      }
      v10 = v14;
LABEL_10:
      v15 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v15 + 160) != (_DWORD)v13)
      {
        v16 = *(_DWORD *)(v15 + 140) <= (int)v13 || v111 >= v10;
        v114 = v10;
        v120 = v12;
        v113 = v13;
        if (!v16)
        {
          v17 = v10;
          v18 = v12;
          v129 = v10;
          do
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 76) >= 5000)
              v19 = 5000;
            else
              v19 = *((_DWORD *)this + 19) + *((_DWORD *)this + 76);
            ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(*((_QWORD *)this + 33) + 40 * v18 + 12), *(_DWORD *)(*((_QWORD *)this + 33) + 40 * v18), v19);
            v21 = *((_QWORD *)this + 33) + 40 * v18;
            v22 = *(_WORD *)(v21 + 12);
            v23 = *(_DWORD *)(v21 + 32);
            v24 = v110;
            if (v23 >= 1)
              v24 = v110 - v23;
            v25 = v24 & ((v23 - v110) >> 31);
            v26 = v25 + *(_DWORD *)(v21 + 36);
            if (*(_WORD *)(v21 + 12))
            {
              v27 = v23 - v110;
            }
            else
            {
              v26 = *(_DWORD *)(v21 + 36);
              v27 = *(_DWORD *)(v21 + 32);
            }
            if (*(_WORD *)(v21 + 12))
              v28 = v25;
            else
              v28 = 0;
            v29 = v28 + ScoreAllowBackoff_updateNodeInSequence;
            if (v28 + ScoreAllowBackoff_updateNodeInSequence - v8 <= *v117)
            {
              v30 = *(_QWORD *)(v21 + 4);
              v133 = *(_WORD *)(v21 + 14);
              v135 = v26;
              v31 = *(_QWORD *)(v21 + 16);
              v32 = *(_DWORD *)(v21 + 24);
              v33 = *(unsigned __int16 *)(v21 + 28);
              v131 = *(_WORD *)(v21 + 30);
              if (*v117 > v29)
                *v117 = v29;
              v34 = *((_DWORD *)this + 56);
              v35 = v34;
              if ((_DWORD)v33)
              {
                v36 = *v137;
                v37 = v33;
                v35 = *((_DWORD *)this + 56);
                do
                {
                  v38 = *(_WORD *)(v36 + 2 * v32);
                  if (v35 == *((_DWORD *)this + 57))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)v137, 1, 1);
                    v35 = *((_DWORD *)this + 56);
                    v36 = *((_QWORD *)this + 27);
                  }
                  *(_WORD *)(v36 + 2 * v35++) = v38;
                  *((_DWORD *)this + 56) = v35;
                  ++v32;
                  --v37;
                }
                while (v37);
              }
              if (v35 == *((_DWORD *)this + 57))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)v137, 1, 1);
                v35 = *((_DWORD *)this + 56);
              }
              *(_WORD *)(*((_QWORD *)this + 27) + 2 * v35) = v22;
              *((_DWORD *)this + 56) = v35 + 1;
              v39 = *((unsigned int *)this + 72);
              v12 = v120;
              if (v39 == *((_DWORD *)this + 73))
              {
                DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v116, 1, 1);
                LODWORD(v39) = *((_DWORD *)this + 72);
              }
              v40 = *((_QWORD *)this + 35) + 40 * v39;
              *(_DWORD *)v40 = v29;
              *(_QWORD *)(v40 + 4) = v30;
              *(_WORD *)(v40 + 12) = v22;
              *(_WORD *)(v40 + 14) = v133;
              *(_QWORD *)(v40 + 16) = v31;
              *(_DWORD *)(v40 + 24) = v34;
              *(_WORD *)(v40 + 28) = v33 + 1;
              *(_WORD *)(v40 + 30) = v131;
              *(_DWORD *)(v40 + 32) = v27;
              *(_DWORD *)(v40 + 36) = v135;
              v41 = *((_DWORD *)this + 72) + 1;
              *((_DWORD *)this + 72) = v41;
              v8 = *(_DWORD *)v119;
              if (v18 == v120)
              {
                v42 = *(_DWORD *)&v119[4];
                if (*(_DWORD *)&v119[8] == 2 * *((_DWORD *)this + 4))
                  v42 = v41;
                *(_DWORD *)&v119[4] = v42;
                ++*(_DWORD *)&v119[8];
              }
              v10 = v114;
              v13 = v113;
              v17 = v129;
            }
            else
            {
              v10 = v114;
              v13 = v113;
            }
            ++v18;
          }
          while (v18 != v17);
        }
        v43 = v10;
        v44 = v13;
        v118 = v10;
        do
        {
          v45 = *((_QWORD *)this + 5);
          v46 = *(_QWORD *)(v45 + 152);
          v47 = *(_DWORD *)(v46 + 4 * v44);
          v48 = *(_DWORD *)(v45 + 140);
          v122 = *(_DWORD *)(v46 + 4 * (v44 + 1));
          v123 = v47;
          v115 = v44;
          if (v48 <= v122)
          {
            if (*((_BYTE *)this + 428))
              v74 = v48 <= (int)v13;
            else
              v74 = 0;
            if (v74)
            {
              if ((v47 & 0xFFFFF) <= 0xFFFF3)
                v75 = v47 & 0xFFFFF;
              else
                v75 = v47 & 0xFFFFF | 0xF00000;
              if (v75 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v150);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v75, (DgnString *)&v150, v76, v77, v78, v79, v80);
                v86 = &unk_209A6C820;
                if (v150.i32[2])
                  v86 = (void *)v150.i64[0];
                v85 = (unsigned int *)(*((_QWORD *)this + 33) + 40 * v12);
                xprintf("Seed from state %d score %d trace %d, %s\n", v81, v82, v83, v84, v13, *v85, v85[2], v86);
                v87 = (int *)(*((_QWORD *)this + 33) + 40 * v12);
                MiniFst::seed((uint64_t)this + 312, *v87, v87[5], v87[2], v122);
                DgnString::~DgnString((DgnString *)&v150);
              }
              v47 = v123;
            }
          }
          else
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 76) >= 5000)
              v49 = 5000;
            else
              v49 = *((_DWORD *)this + 19) + *((_DWORD *)this + 76);
            v121 = (v47 >> 20) & 0x3FF;
            v50 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v46 + 4 * v44), *(_DWORD *)(*((_QWORD *)this + 33) + 40 * v12) + ((*(_DWORD *)(v46 + 4 * v44) >> 20) & 0x3FFu), v49);
            if (v111 < v10)
            {
              v134 = v50 - *(_DWORD *)(*((_QWORD *)this + 33) + 40 * v12);
              v51 = (unsigned __int16)v47;
              v52 = v109;
              if (!(_WORD)v47)
                v52 = 0;
              v132 = v52;
              v53 = v12;
              do
              {
                v54 = *((_QWORD *)this + 33) + 40 * v53;
                v55 = v134 + *(_DWORD *)v54;
                v56 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * v51);
                v57 = v56 & (v56 >> 31);
                if (!(_DWORD)v51)
                  v56 = 0;
                v136 = v56;
                if ((_DWORD)v51)
                  v58 = v57;
                else
                  v58 = 0;
                v59 = (*(_DWORD *)(v54 + 32) & ~(*(int *)(v54 + 32) >> 31)) - v58 + v132;
                v60 = v55 + v59;
                v61 = v55 + v59 - v8;
                v62 = *((_DWORD *)this + 76);
                if (v61 <= v62)
                {
                  v130 = *(_WORD *)(v54 + 14);
                  v125 = *(_DWORD *)(v54 + 16);
                  v126 = *(_DWORD *)(v54 + 8);
                  v63 = *(_DWORD *)(v54 + 24);
                  v64 = *(unsigned __int16 *)(v54 + 28);
                  v127 = *(_WORD *)(v54 + 30);
                  v128 = *(_DWORD *)(v54 + 20);
                  v124 = *(_DWORD *)(v54 + 36);
                  if (v62 > v60)
                    *v117 = v60;
                  v65 = *((_DWORD *)this + 56);
                  v66 = v65;
                  if ((_DWORD)v64)
                  {
                    v67 = *v137;
                    v68 = v64;
                    v66 = *((_DWORD *)this + 56);
                    do
                    {
                      v69 = *(_WORD *)(v67 + 2 * v63);
                      if (v66 == *((_DWORD *)this + 57))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)v137, 1, 1);
                        v66 = *((_DWORD *)this + 56);
                        v67 = *((_QWORD *)this + 27);
                      }
                      *(_WORD *)(v67 + 2 * v66++) = v69;
                      *((_DWORD *)this + 56) = v66;
                      ++v63;
                      --v68;
                    }
                    while (v68);
                  }
                  if (v66 == *((_DWORD *)this + 57))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)v137, 1, 1);
                    v66 = *((_DWORD *)this + 56);
                  }
                  v47 = v123;
                  *(_WORD *)(*((_QWORD *)this + 27) + 2 * v66) = v123;
                  *((_DWORD *)this + 56) = v66 + 1;
                  v70 = *((unsigned int *)this + 72);
                  v12 = v120;
                  if (v70 == *((_DWORD *)this + 73))
                  {
                    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v116, 1, 1);
                    LODWORD(v70) = *((_DWORD *)this + 72);
                  }
                  v71 = *((_QWORD *)this + 35) + 40 * v70;
                  *(_DWORD *)v71 = v60;
                  *(_DWORD *)(v71 + 4) = v122;
                  *(_DWORD *)(v71 + 8) = v126;
                  *(_WORD *)(v71 + 12) = v123;
                  *(_WORD *)(v71 + 14) = v130;
                  *(_DWORD *)(v71 + 16) = v125 + v121;
                  *(_DWORD *)(v71 + 20) = v128;
                  *(_DWORD *)(v71 + 24) = v65;
                  *(_WORD *)(v71 + 28) = v64 + 1;
                  *(_WORD *)(v71 + 30) = v127;
                  *(_DWORD *)(v71 + 32) = v136;
                  *(_DWORD *)(v71 + 36) = v59 + v124;
                  v72 = *((_DWORD *)this + 72) + 1;
                  *((_DWORD *)this + 72) = v72;
                  if (v53 == v120)
                  {
                    v73 = *(_DWORD *)&v119[4];
                    if (*(_DWORD *)&v119[8] == 2 * *((_DWORD *)this + 4))
                      v73 = v72;
                    *(_DWORD *)&v119[4] = v73;
                    ++*(_DWORD *)&v119[8];
                  }
                  v8 = *(_DWORD *)v119;
                  v43 = v118;
                }
                ++v53;
              }
              while (v53 != v43);
            }
          }
          v10 = v114;
          v44 = v115 + 2;
          v88 = v47;
          a4 = v112;
          v13 = v113;
        }
        while ((v88 & 0x80000000) == 0);
        v9 = *((_DWORD *)this + 68);
      }
    }
    while (v10 < v9);
    a3 = *v117;
  }
  else
  {
    *(_QWORD *)&v119[4] = 0;
  }
  v152 = a3 + v8;
  if (*((_BYTE *)this + 428))
    MiniFst::updateFrame((char *)this + 312, v117, v8, a2);
  v150 = 0u;
  v151 = 0u;
  SnapTime::recordTime((SnapTime *)&v150, 1, 0, 0, 0);
  v150 = vsubq_s64(v150, v153);
  v151 = vsubq_s64(v151, v154);
  v89 = (int64x2_t *)*((_QWORD *)this + 13);
  v90 = vaddq_s64(v89[1], v151);
  *v89 = vaddq_s64(*v89, v150);
  v89[1] = v90;
  v148 = 0u;
  v149 = 0u;
  SnapTime::recordTime((SnapTime *)&v148, 1, 0, 0, 0);
  if (*(_DWORD *)&v119[8] > (2 * *((_DWORD *)this + 4)))
    FstSearchLeafLatticeDurationBackoff::applyCutoffOnEmitting((uint64_t)this, *(unsigned int *)&v119[4], &v152);
  v146 = 0u;
  v147 = 0u;
  SnapTime::recordTime((SnapTime *)&v146, 1, 0, 0, 0);
  v91 = vsubq_s64(v146, v148);
  v92 = (int64x2_t *)*((_QWORD *)this + 13);
  v93 = v92[3];
  v94 = vaddq_s64(v92[2], v91);
  v146 = v91;
  v147 = vsubq_s64(v147, v149);
  v95 = vaddq_s64(v93, v147);
  v92[2] = v94;
  v92[3] = v95;
  v144 = 0u;
  v145 = 0u;
  SnapTime::recordTime((SnapTime *)&v144, 1, 0, 0, 0);
  FstSearchLeafLatticeDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v96 = *((unsigned int *)this + 6);
  if ((_DWORD)v96)
  {
    v97 = *((unsigned int *)this + 68);
    if (v96 < v97)
      mrec_nth_element<FstSearchLeafLatticeDurationBackoffcmpTok>(*((_QWORD *)this + 33), v96, v97);
  }
  v142 = 0u;
  v143 = 0u;
  SnapTime::recordTime((SnapTime *)&v142, 1, 0, 0, 0);
  v98 = vsubq_s64(v142, v144);
  v99 = (int64x2_t *)*((_QWORD *)this + 13);
  v100 = v99[5];
  v101 = vaddq_s64(v99[4], v98);
  v142 = v98;
  v143 = vsubq_s64(v143, v145);
  v102 = vaddq_s64(v100, v143);
  v99[4] = v101;
  v99[5] = v102;
  v140 = 0u;
  v141 = 0u;
  SnapTime::recordTime((SnapTime *)&v140, 1, 0, 0, 0);
  *((_DWORD *)this + 72) = 0;
  v103 = *((unsigned int *)this + 68);
  *((_DWORD *)this + 38) = v103;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v103;
    if (*((_DWORD *)a4 + 2) > v103)
      LODWORD(v103) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v103;
  }
  if (*((_BYTE *)this + 428))
    FstSearchLeafLatticeDurationBackoff::seedFromMiniFst((uint64_t)this, v155);
  if (a5)
    FstSearchLeafLatticeDurationBackoff::propagateNulls((uint64_t)this, v152, a2, a4);
  *((_DWORD *)this + 74) = a2;
  v138 = 0u;
  v139 = 0u;
  SnapTime::recordTime((SnapTime *)&v138, 1, 0, 0, 0);
  v104 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v104[6], vsubq_s64(v138, v140));
  v106 = vaddq_s64(v104[7], vsubq_s64(v139, v141));
  v104[6] = result;
  v104[7] = v106;
  return result;
}

void sub_20983751C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLeafLatticeDurationBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(unsigned int *)(this + 288);
  if (v4 > a2)
  {
    v6 = this;
    v7 = (_QWORD *)(this + 280);
    v8 = a2;
    this = mrec_nth_element<FstSearchLeafLatticeDurationBackoffcmpTok>(*(_QWORD *)(this + 280), a2, v4);
    v9 = *(_DWORD *)(*v7 + 40 * a2);
    if (*a3 > v9)
      *a3 = v9;
    v10 = *(_DWORD *)(v6 + 292);
    if (a2 > v10)
      this = DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v7, a2 - v10, 0);
    v11 = *(unsigned int *)(v6 + 288);
    if (v11 < a2)
    {
      v12 = v8 - v11;
      v13 = 40 * v11;
      do
      {
        v14 = *v7 + v13;
        *(_QWORD *)v14 = 0xFFFFFFFF00000000;
        *(_DWORD *)(v14 + 8) = -1;
        *(_WORD *)(v14 + 12) = -2;
        *(_QWORD *)(v14 + 32) = 0;
        *(_QWORD *)(v14 + 16) = 0;
        *(_QWORD *)(v14 + 22) = 0;
        v13 += 40;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 288) = a2;
  }
  return this;
}

uint64_t FstSearchLeafLatticeDurationBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int128 *v8;
  unsigned int i;
  int v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v1 = this;
  v2 = *(unsigned int *)(this + 288);
  if ((_DWORD)v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 280), v2, 40);
    v3 = *(_DWORD *)(v1 + 288);
    *(_DWORD *)(v1 + 272) = 0;
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0;
      do
      {
        v7 = *(_QWORD *)(v1 + 280);
        if (v5 && (v8 = (__int128 *)(v7 + 40 * v5), *((_DWORD *)v8 + 1) == *((_DWORD *)v8 - 9)))
        {
          if (v4 >= *(_DWORD *)(v1 + 20) + v6)
            goto LABEL_16;
          i = v6;
          if (v6 < v4)
          {
            v10 = *(_DWORD *)(v7 + 40 * v5 + 20);
            v11 = (int *)(*(_QWORD *)(v1 + 264) + 40 * v6 + 20);
            for (i = v6; v4 != i; ++i)
            {
              v12 = *v11;
              v11 += 10;
              if (v12 == v10)
                break;
            }
          }
          if (i != v4)
            goto LABEL_16;
          v13 = *(_DWORD *)(v1 + 276);
        }
        else
        {
          v8 = (__int128 *)(v7 + 40 * v5);
          v13 = *(_DWORD *)(v1 + 276);
          v6 = v4;
        }
        if (v4 == v13)
        {
          this = DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(v1 + 264, 1, 1);
          v4 = *(_DWORD *)(v1 + 272);
        }
        v14 = *(_QWORD *)(v1 + 264) + 40 * v4;
        v15 = *v8;
        v16 = v8[1];
        *(_QWORD *)(v14 + 32) = *((_QWORD *)v8 + 4);
        *(_OWORD *)v14 = v15;
        *(_OWORD *)(v14 + 16) = v16;
        v4 = *(_DWORD *)(v1 + 272) + 1;
        *(_DWORD *)(v1 + 272) = v4;
LABEL_16:
        ++v5;
      }
      while (v5 < *(unsigned int *)(v1 + 288));
    }
  }
  else
  {
    *(_DWORD *)(this + 272) = 0;
  }
  return this;
}

uint64_t mrec_nth_element<FstSearchLeafLatticeDurationBackoffcmpTok>(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  if (a3 >= 2)
  {
    v3 = 0;
    do
    {
      v4 = (_DWORD *)(result + 40 * v3);
      v5 = 0;
      if ((result & 7) != 0)
      {
        v6 = &v4[10 * (a3 >> 1)];
        do
        {
          v7 = *((_BYTE *)v4 + v5);
          *((_BYTE *)v4 + v5) = *((_BYTE *)v6 + v5);
          *((_BYTE *)v6 + v5++) = v7;
        }
        while (v5 != 40);
      }
      else
      {
        v8 = result + 40 * (v3 + (a3 >> 1));
        do
        {
          v9 = *(_QWORD *)((char *)v4 + v5);
          *(_QWORD *)((char *)v4 + v5) = *(_QWORD *)(v8 + v5);
          *(_QWORD *)(v8 + v5) = v9;
          v5 += 8;
        }
        while (v5 != 40);
      }
      v10 = (_DWORD *)(result + 40 * (v3 + a3) - 40);
      v11 = (_DWORD *)(result + 40 * v3);
      do
      {
        v12 = v11 + 10;
        while (1)
        {
          v11 = v12;
          if (v12 >= v10)
            break;
          v12 += 10;
          if (*v11 > *v4)
          {
            v13 = (char *)v11;
            while (*v10 >= *v4)
            {
              v10 -= 10;
              if (v11 >= v10)
                goto LABEL_22;
            }
            v14 = 0;
            if ((result & 7) != 0)
            {
              do
              {
                v15 = *v13;
                *v13++ = *((_BYTE *)v10 + v14);
                *((_BYTE *)v10 + v14++) = v15;
              }
              while (v14 != 40);
            }
            else
            {
              do
              {
                v16 = *(_QWORD *)v13;
                *(_QWORD *)v13 = *(_QWORD *)((char *)v10 + v14);
                v13 += 8;
                *(_QWORD *)((char *)v10 + v14) = v16;
                v14 += 8;
              }
              while (v14 != 40);
            }
            v10 -= 10;
            break;
          }
        }
LABEL_22:
        ;
      }
      while (v11 < v10);
      if (*v11 > *v4)
        v11 -= 10;
      if (v11 > v4)
      {
        v17 = 0;
        if ((result & 7) != 0)
        {
          do
          {
            v18 = *((_BYTE *)v11 + v17);
            *((_BYTE *)v11 + v17) = *((_BYTE *)v4 + v17);
            *((_BYTE *)v4 + v17++) = v18;
          }
          while (v17 != 40);
        }
        else
        {
          do
          {
            v19 = *(_QWORD *)((char *)v11 + v17);
            *(_QWORD *)((char *)v11 + v17) = *(_QWORD *)((char *)v4 + v17);
            *(_QWORD *)((char *)v4 + v17) = v19;
            v17 += 8;
          }
          while (v17 != 40);
        }
      }
      v20 = ((char *)v11 - (char *)v4) / 0x28uLL;
      if (v20 <= a2)
      {
        if (v20 >= a2)
          return result;
        v21 = v20 + 1;
        v3 += v21;
        a2 -= v21;
        v20 = a3 - v21;
      }
      a3 = v20;
    }
    while (v20 > 1);
  }
  return result;
}

uint64_t FstSearchLeafLatticeDurationBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (*(_BYTE *)(this + 428))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 336);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v46 = this + 176;
      v5 = (_QWORD *)(this + 160);
      v39 = this + 264;
      do
      {
        v6 = (int *)(*(_QWORD *)(v2 + 328) + 36 * v4);
        v7 = v6[4];
        v43 = *v6;
        v44 = v6[5];
        v8 = v6[6];
        v45 = v6[7];
        v9 = v6[2];
        v47 = 0;
        v48 = 0;
        v41 = v8;
        v42 = v7;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          v10 = 0;
          v11 = 0;
          do
          {
            if (v11 == HIDWORD(v48))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v47, 1, 1);
              v11 = v48;
              v10 = v47;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            v12 = v48;
            v11 = v48 + 1;
            LODWORD(v48) = v48 + 1;
            v9 = *(_DWORD *)(*(_QWORD *)(v2 + 312) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            v14 = v12 + 1;
            v15 = 4 * v12;
            do
            {
              v16 = *(_DWORD *)(v47 + v15);
              v17 = *(_QWORD *)(v2 + 312);
              v18 = (int *)(v17 + 36 * v16);
              v19 = *v18;
              v20 = *((_QWORD *)v18 + 2);
              v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v46, 1, 1);
                v21 = *(_DWORD *)(v2 + 184);
                v17 = *(_QWORD *)(v2 + 312);
              }
              v22 = *(_QWORD *)(v2 + 176) + 28 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)v22 = v19;
              *(_QWORD *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = 0;
              *(_WORD *)(v22 + 20) = 0;
              *(_DWORD *)(v22 + 24) = 0;
              v23 = *(_QWORD *)(v17 + 36 * v16 + 28);
              v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                v24 = *(unsigned int *)(v2 + 168);
              }
              v25 = *(_QWORD *)(v2 + 160);
              v26 = v25 + 16 * v24;
              *(_QWORD *)v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v46, 1, 1);
          v27 = *(_DWORD *)(v2 + 184);
        }
        v28 = *(_QWORD *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        v29 = v28 + 28 * v27;
        *(_DWORD *)v29 = v43;
        *(_DWORD *)(v29 + 4) = v42;
        *(_DWORD *)(v29 + 8) = v44;
        *(_DWORD *)(v29 + 12) = v13;
        *(_DWORD *)(v29 + 16) = 0;
        *(_WORD *)(v29 + 20) = 0;
        *(_DWORD *)(v29 + 24) = 0;
        if (v45 == 16777213)
        {
          v45 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v13) == 16777209)
          {
            v27 = *(_DWORD *)(*v5 + 16 * v13 + 8);
            v45 = 16777209;
          }
        }
        v30 = *a2;
        v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          v31 = *(unsigned int *)(v2 + 168);
        }
        v32 = *(_QWORD *)(v2 + 160);
        v33 = (int *)(v32 + 16 * v31);
        *v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        v35 = *(unsigned int *)(v2 + 272);
        if (v35 == *(_DWORD *)(v2 + 276))
        {
          DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(v39, 1, 1);
          LODWORD(v35) = *(_DWORD *)(v2 + 272);
        }
        v36 = *(_QWORD *)(v2 + 264) + 40 * v35;
        *(_DWORD *)v36 = v43;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v42;
        *(_QWORD *)(v36 + 20) = v44;
        *(_WORD *)(v36 + 28) = 0;
        *(_QWORD *)(v36 + 32) = 0;
        ++*(_DWORD *)(v2 + 272);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 336);
        v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38)
          v37 = v38;
        else
          v37 = v37;
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_209837C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeDurationBackoff::propagateNulls(uint64_t this, int a2, int a3, SearchStats *a4)
{
  int v4;
  uint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  __int16 v28;
  int v29;
  int v30;
  __int16 v31;
  __int16 v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  __int16 v38;
  __int16 v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int *v54;
  int v55;
  uint64_t v56;
  __int16 v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int *v69;
  int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  SearchStats *v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v85;
  int v86;
  unsigned int v87;
  int v88;
  _QWORD *v89;
  __int16 v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;

  v4 = *(_DWORD *)(this + 168);
  v5 = (uint64_t *)(this + 264);
  LODWORD(v6) = *(_DWORD *)(this + 272);
  v91 = this;
  if ((_DWORD)v6)
  {
    v78 = *(_DWORD *)(this + 168);
    v79 = a4;
    v7 = 0;
    v89 = (_QWORD *)(this + 160);
    v85 = this + 176;
    v94 = this + 264;
    v93 = a2;
    do
    {
      v8 = v7;
      v9 = *(unsigned int *)(*v5 + 40 * v7 + 4);
      v83 = v7;
      if (v6 <= v7 + 1)
        v10 = v7 + 1;
      else
        v10 = v6;
      while (v10 - 1 != v7)
      {
        if (*(_DWORD *)(*v5 + 40 * ++v7 + 4) != (_DWORD)v9)
          goto LABEL_10;
      }
      v7 = v10;
LABEL_10:
      v11 = *(_QWORD *)(this + 40);
      if (*(_DWORD *)(v11 + 160) != (_DWORD)v9
        && (*(_DWORD *)(v11 + 140) <= (int)v9 || (*(_DWORD *)(*(_QWORD *)(v11 + 152) + 4 * v9) & 0x40000000) != 0))
      {
        v99 = 40 * v8;
        v82 = v7;
        v80 = v7 - v83;
        v81 = v9;
        v12 = v9;
        do
        {
          v13 = *(_QWORD *)(this + 40);
          v14 = *(_QWORD *)(v13 + 152);
          v87 = v12;
          v92 = *(_DWORD *)(v14 + 4 * v12);
          v15 = *(_DWORD *)(v13 + 140);
          v96 = *(_DWORD *)(v14 + 4 * (v12 + 1));
          if (v15 <= v96)
          {
            v16 = (v92 & 0xFFFFF) <= 0xFFFF3 ? v92 & 0xFFFFF : v92 & 0xFFFFF | 0xF00000;
            v17 = v16 != 16777210 && v15 <= v81;
            if (!v17 && v82 > v83)
            {
              v19 = 0;
              v20 = (v92 >> 20) & 0x3FF;
              v88 = v16 + 1;
              v21 = v80;
              v95 = v16;
              do
              {
                v22 = *v5;
                v23 = *v5 + v99;
                v24 = *(_DWORD *)(v23 + v19) + v20;
                if (v24 > a2)
                  break;
                v25 = v23 + v19;
                v26 = *(_DWORD *)(v25 + 8);
                v27 = *(_WORD *)(v25 + 12);
                v28 = *(_WORD *)(v25 + 14);
                v29 = *(_DWORD *)(v25 + 20);
                v30 = *(_DWORD *)(v25 + 24);
                v31 = *(_WORD *)(v25 + 28);
                v32 = *(_WORD *)(v25 + 30);
                v33 = *(_DWORD *)(v25 + 36);
                v34 = *(_DWORD *)(v25 + 16) + v20;
                if (v16 == 16777210)
                {
                  v44 = *(unsigned int *)(this + 272);
                  if (v44 == *(_DWORD *)(this + 276))
                  {
                    v45 = (uint64_t)v5;
                    v98 = v33;
                    v46 = v32;
                    v47 = v30;
                    v48 = v27;
                    v101 = v34;
                    v49 = v28;
                    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(v45, 1, 1);
                    v33 = v98;
                    a2 = v93;
                    v28 = v49;
                    v34 = v101;
                    v27 = v48;
                    v30 = v47;
                    v32 = v46;
                    v5 = (uint64_t *)v94;
                    v20 = (v92 >> 20) & 0x3FF;
                    v16 = v95;
                    this = v91;
                    LODWORD(v44) = *(_DWORD *)(v91 + 272);
                    v22 = *(_QWORD *)(v91 + 264);
                  }
                  v50 = v22 + 40 * v44;
                  *(_DWORD *)v50 = v24;
                  *(_DWORD *)(v50 + 4) = v96;
                  *(_DWORD *)(v50 + 8) = v26;
                  *(_WORD *)(v50 + 12) = v27;
                  *(_WORD *)(v50 + 14) = v28;
                  *(_DWORD *)(v50 + 16) = v34;
                  *(_DWORD *)(v50 + 20) = v29;
                  *(_DWORD *)(v50 + 24) = v30;
                  *(_WORD *)(v50 + 28) = v31;
                  *(_WORD *)(v50 + 30) = v32;
                  *(_DWORD *)(v50 + 32) = 0;
                  *(_DWORD *)(v50 + 36) = v33;
                  ++*(_DWORD *)(this + 272);
                }
                else
                {
                  v90 = *(_WORD *)(v25 + 12);
                  if (v16 == 16777214)
                    v35 = *(_DWORD *)(v25 + 16) + v20;
                  else
                    v35 = 0;
                  v100 = *(_DWORD *)(v25 + 16) + v20;
                  if (v16 == 16777214)
                    v36 = 0;
                  else
                    v36 = *(_DWORD *)(v25 + 16) + v20;
                  v37 = *(_DWORD *)(this + 184);
                  if (v37 == *(_DWORD *)(this + 188))
                  {
                    v97 = *(_DWORD *)(v25 + 36);
                    v38 = *(_WORD *)(v25 + 30);
                    v86 = *(_DWORD *)(v25 + 24);
                    v39 = *(_WORD *)(v25 + 14);
                    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v85, 1, 1);
                    v33 = v97;
                    v28 = v39;
                    v30 = v86;
                    v32 = v38;
                    v20 = (v92 >> 20) & 0x3FF;
                    v16 = v95;
                    this = v91;
                    v37 = *(_DWORD *)(v91 + 184);
                  }
                  v40 = v88 + 2 * v29;
                  v41 = *(_QWORD *)(this + 176);
                  *(_DWORD *)(this + 184) = v37 + 1;
                  v42 = v41 + 28 * v37;
                  *(_DWORD *)v42 = v24 - v35;
                  *(_DWORD *)(v42 + 4) = v36;
                  *(_DWORD *)(v42 + 8) = v40;
                  *(_DWORD *)(v42 + 12) = v26;
                  *(_DWORD *)(v42 + 16) = v30;
                  *(_WORD *)(v42 + 20) = v31;
                  *(_DWORD *)(v42 + 24) = v33;
                  v43 = *(_DWORD *)(this + 168);
                  if (v19)
                  {
                    v5 = (uint64_t *)v94;
                    a2 = v93;
                  }
                  else
                  {
                    v5 = (uint64_t *)v94;
                    if (v43 == *(_DWORD *)(this + 172))
                    {
                      v51 = v32;
                      v52 = v30;
                      v53 = v28;
                      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v89, 1, 1);
                      v28 = v53;
                      v30 = v52;
                      v32 = v51;
                      v20 = (v92 >> 20) & 0x3FF;
                      v16 = v95;
                      this = v91;
                      v43 = *(_DWORD *)(v91 + 168);
                    }
                    v54 = (int *)(*(_QWORD *)(this + 160) + 16 * v43);
                    *v54 = v16;
                    v54[1] = a3;
                    v54[2] = v37;
                    v54[3] = 0;
                    v55 = *(_DWORD *)(this + 168);
                    *(_DWORD *)(this + 168) = v55 + 1;
                    v56 = *(unsigned int *)(this + 272);
                    if (v56 == *(_DWORD *)(this + 276))
                    {
                      v57 = v32;
                      v58 = v30;
                      v59 = v28;
                      DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(v94, 1, 1);
                      v28 = v59;
                      v30 = v58;
                      v32 = v57;
                      v20 = (v92 >> 20) & 0x3FF;
                      v16 = v95;
                      this = v91;
                      LODWORD(v56) = *(_DWORD *)(v91 + 272);
                    }
                    v60 = *(_QWORD *)(this + 264) + 40 * v56;
                    *(_DWORD *)v60 = v24;
                    *(_DWORD *)(v60 + 4) = v96;
                    *(_DWORD *)(v60 + 8) = v55;
                    *(_WORD *)(v60 + 12) = v90;
                    *(_WORD *)(v60 + 14) = v28;
                    *(_DWORD *)(v60 + 16) = v100;
                    *(_DWORD *)(v60 + 20) = v40;
                    *(_DWORD *)(v60 + 24) = v30;
                    *(_WORD *)(v60 + 28) = 0;
                    *(_WORD *)(v60 + 30) = v32;
                    *(_QWORD *)(v60 + 32) = 0;
                    ++*(_DWORD *)(this + 272);
                    v43 = *(_DWORD *)(this + 168);
                    a2 = v93;
                  }
                  v61 = *v89 + 16 * (v43 - 1);
                  ++*(_DWORD *)(v61 + 12);
                }
                v19 += 40;
                --v21;
              }
              while (v21);
            }
          }
          v12 = v87 + 2;
        }
        while ((v92 & 0x80000000) == 0);
        LODWORD(v6) = *(_DWORD *)(this + 272);
        v7 = v82;
      }
    }
    while (v7 < v6);
    v62 = *(unsigned int *)(this + 152);
    if (v6 > v62)
    {
      mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*(_QWORD *)(this + 264) + 40 * v62), (v6 - v62), 40);
      this = v91;
      v62 = *(unsigned int *)(v91 + 152);
      LODWORD(v6) = *(_DWORD *)(v91 + 272);
    }
    if (v62 < v6)
    {
      v63 = v62;
      v64 = v62;
      do
      {
        v65 = *v5;
        v66 = *v5 + 40 * v63;
        v67 = v62;
        if (*(_DWORD *)(v66 + 4) != *(_DWORD *)(*v5 + 40 * (v63 - 1) + 4))
          goto LABEL_64;
        if ((v62 - v64) < *(_DWORD *)(this + 20))
        {
          v68 = v64;
          if (v62 > v64)
          {
            v69 = (int *)(v65 + 40 * v64 + 20);
            v68 = v64;
            while (1)
            {
              v70 = *v69;
              v69 += 10;
              if (v70 == *(_DWORD *)(v65 + 40 * v63 + 20))
                break;
              if ((_DWORD)v62 == ++v68)
              {
                v67 = v64;
                goto LABEL_64;
              }
            }
          }
          v67 = v64;
          if (v68 == (_DWORD)v62)
          {
LABEL_64:
            v71 = v65 + 40 * v62;
            v72 = *(_OWORD *)v66;
            v73 = *(_OWORD *)(v66 + 16);
            *(_QWORD *)(v71 + 32) = *(_QWORD *)(v66 + 32);
            *(_OWORD *)v71 = v72;
            *(_OWORD *)(v71 + 16) = v73;
            v62 = (v62 + 1);
            v64 = v67;
          }
        }
        ++v63;
        v6 = *(unsigned int *)(this + 272);
      }
      while (v63 < v6);
    }
    a4 = v79;
    v4 = v78;
    if (v79)
      goto LABEL_67;
  }
  else
  {
    LODWORD(v62) = *(_DWORD *)(this + 152);
    if (a4)
LABEL_67:
      *((_DWORD *)a4 + 1) += *(_DWORD *)(this + 168) - v4;
  }
  v74 = *(_DWORD *)(this + 276);
  if (v62 > v74)
  {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v5, v62 - v74, 0);
    this = v91;
    LODWORD(v6) = *(_DWORD *)(v91 + 272);
  }
  if (v6 < v62)
  {
    v75 = v62 - (unint64_t)v6;
    v76 = 40 * v6;
    do
    {
      v77 = *v5 + v76;
      *(_QWORD *)v77 = 0xFFFFFFFF00000000;
      *(_DWORD *)(v77 + 8) = -1;
      *(_WORD *)(v77 + 12) = -2;
      *(_QWORD *)(v77 + 32) = 0;
      *(_QWORD *)(v77 + 16) = 0;
      *(_QWORD *)(v77 + 22) = 0;
      v76 += 40;
      --v75;
    }
    while (v75);
  }
  *(_DWORD *)(this + 272) = v62;
  return this;
}

uint64_t FstSearchLeafLatticeDurationBackoff::collectTraces(FstSearchLeafLatticeDurationBackoff *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  __int128 *v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  __int16 v42;
  unsigned int v43;
  unint64_t v44;
  _OWORD *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t *v58;
  _DWORD *v59;
  uint64_t v60;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;

  v2 = *((unsigned int *)this + 42);
  v66 = 0;
  v65 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v65 = v3;
    v66 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v66);
  }
  v5 = *((unsigned int *)this + 68);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v65;
    v8 = (unsigned int *)(*((_QWORD *)this + 33) + 8);
    do
    {
      v10 = *v8;
      v8 += 10;
      v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        v5 = *((unsigned int *)this + 68);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v11) = *((_DWORD *)this + 42);
  if (!(_DWORD)v11)
  {
    v63 = 0;
    v64 = 0;
LABEL_54:
    v25 = 0;
    *((_DWORD *)this + 42) = 0;
    goto LABEL_55;
  }
  v12 = 0;
  v13 = (uint64_t *)((char *)this + 160);
  v14 = v65;
  v15 = (uint64_t *)((char *)this + 176);
  do
  {
    v11 = (v11 - 1);
    if ((v12 & 1) != 0)
    {
      v12 = 1;
    }
    else if (*(_DWORD *)(*v13 + 16 * v11) == 16777213)
    {
      v12 = 1;
      *((_DWORD *)v14 + v11) = 1;
    }
    else
    {
      v12 = 0;
    }
    if (*((_DWORD *)v14 + v11))
    {
      v16 = *v13 + 16 * v11;
      v17 = *(_DWORD *)(v16 + 12);
      if (v17 >= 1)
      {
        v18 = *(_DWORD *)(v16 + 8);
        v19 = v17 + v18;
        v20 = *v15;
        do
        {
          v21 = *(unsigned int *)(v20 + 28 * v18 + 12);
          if ((_DWORD)v21 != -1)
            *((_DWORD *)v14 + v21) = 1;
          ++v18;
        }
        while ((int)v18 < v19);
      }
    }
  }
  while ((_DWORD)v11);
  v22 = *((_DWORD *)this + 42);
  v63 = 0;
  v64 = 0;
  if (!v22)
    goto LABEL_54;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  do
  {
    if (*((_DWORD *)v65 + v23))
    {
      v26 = *v13;
      v62 = v24;
      if (v23 != v24)
      {
        *(_OWORD *)(v26 + 16 * v24) = *(_OWORD *)(v26 + 16 * v23);
        v26 = *v13;
      }
      *(_DWORD *)(v26 + 16 * v24 + 8) = v25;
      v27 = v26 + 16 * v23;
      v28 = *(unsigned int *)(v27 + 8);
      v29 = (*(_DWORD *)(v27 + 12) + v28);
      if (v28 < v29)
      {
        v30 = *v15;
        do
        {
          v31 = v25;
          if (v28 != v25)
          {
            v32 = (__int128 *)(v30 + 28 * v28);
            v33 = (_OWORD *)(v30 + 28 * v25);
            v34 = *v32;
            *(_OWORD *)((char *)v33 + 12) = *(__int128 *)((char *)v32 + 12);
            *v33 = v34;
            v30 = *v15;
          }
          v35 = v30 + 28 * v25;
          v38 = *(_DWORD *)(v35 + 12);
          v36 = (_DWORD *)(v35 + 12);
          v37 = v38;
          if (v38 != -1)
            *v36 = *((_DWORD *)v65 + v37);
          v39 = v64;
          if (*(_WORD *)(v30 + 28 * v31 + 20))
          {
            v40 = 0;
            v41 = v64;
            do
            {
              v42 = *(_WORD *)(*((_QWORD *)this + 27) + 2 * (v40 + *(_DWORD *)(v30 + 28 * v31 + 16)));
              if (v41 == HIDWORD(v64))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
                v41 = v64;
                v30 = *v15;
              }
              *(_WORD *)(v63 + 2 * v41++) = v42;
              LODWORD(v64) = v41;
              ++v40;
            }
            while (v40 < *(unsigned __int16 *)(v30 + 28 * v31 + 20));
          }
          *(_DWORD *)(v30 + 28 * v31 + 16) = v39;
          v25 = v31 + 1;
          ++v28;
        }
        while (v28 != v29);
      }
      *((_DWORD *)v65 + v23) = v62;
      v24 = v62 + 1;
      v22 = *((_DWORD *)this + 42);
      v13 = (uint64_t *)((char *)this + 160);
    }
    ++v23;
  }
  while (v23 < v22);
  v43 = *((_DWORD *)this + 43);
  if (v24 > v43)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v13, v24 - v43, 0);
    v22 = *((_DWORD *)this + 42);
  }
  if (v22 < v24)
  {
    v44 = v24 - (unint64_t)v22;
    v45 = (_OWORD *)(*v13 + 16 * v22);
    do
    {
      *v45++ = xmmword_209A6C7D0;
      --v44;
    }
    while (v44);
  }
  *((_DWORD *)this + 42) = v24;
  v46 = *((_DWORD *)this + 47);
  if (v25 > v46)
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 176, v25 - v46, 0);
  v47 = *((unsigned int *)this + 46);
  if (v47 < v25)
  {
    v48 = v25 - v47;
    v49 = (_DWORD *)(*v15 + 28 * v47 + 24);
    do
    {
      *(_OWORD *)(v49 - 6) = xmmword_209A6C7C0;
      *(v49 - 2) = 0;
      *((_WORD *)v49 - 2) = 0;
      *v49 = 0;
      v49 += 7;
      --v48;
    }
    while (v48);
  }
LABEL_55:
  *((_DWORD *)this + 46) = v25;
  v50 = *((unsigned int *)this + 68);
  if ((_DWORD)v50)
  {
    v51 = 0;
    v52 = v64;
    v53 = *((_QWORD *)this + 33);
    do
    {
      if (*(_WORD *)(v53 + 40 * v51 + 28))
      {
        v54 = 0;
        LODWORD(v55) = v52;
        do
        {
          v56 = *(_WORD *)(*((_QWORD *)this + 27) + 2 * (v54 + *(_DWORD *)(v53 + 40 * v51 + 24)));
          if ((_DWORD)v55 == HIDWORD(v64))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
            LODWORD(v55) = v64;
            v53 = *((_QWORD *)this + 33);
          }
          *(_WORD *)(v63 + 2 * v55) = v56;
          v55 = (v55 + 1);
          LODWORD(v64) = v55;
          ++v54;
        }
        while (v54 < *(unsigned __int16 *)(v53 + 40 * v51 + 28));
        v50 = *((unsigned int *)this + 68);
      }
      else
      {
        v55 = v52;
      }
      *(_DWORD *)(v53 + 40 * v51++ + 24) = v52;
      v52 = v55;
    }
    while (v51 < v50);
  }
  else
  {
    LODWORD(v55) = v64;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 216, &v63, 0, v55);
  v57 = *((unsigned int *)this + 68);
  if ((_DWORD)v57)
  {
    v58 = v65;
    v59 = (_DWORD *)(*((_QWORD *)this + 33) + 8);
    do
    {
      v60 = *v59;
      if ((_DWORD)v60 != -1)
        *v59 = *((_DWORD *)v58 + v60);
      v59 += 10;
      --v57;
    }
    while (v57);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v63);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v65);
}

void sub_209838778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafLatticeDurationBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLeafLatticeDurationBackoff::advanceDeltas((FstSearchLeafLatticeDurationBackoff *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLeafLatticeDurationBackoff::collectTraces((FstSearchLeafLatticeDurationBackoff *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafLatticeDurationBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  this[68] = 0;
  return this;
}

double FstSearchLeafLatticeDurationBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLeafLatticeDurationBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafLatticeDurationBackoff::beginTopRecPassSyncRecog(FstSearchLeafLatticeDurationBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 312, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 106) = result;
    *((_BYTE *)this + 428) = 1;
  }
  return result;
}

uint64_t FstSearchLeafLatticeDurationBackoff::endTopRecPassSyncRecog(FstSearchLeafLatticeDurationBackoff *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 76) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLeafLatticeDurationBackoff::printSize(FstSearchLeafLatticeDurationBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  int v126;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126)
    v15 = v125;
  else
    v15 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A6C820, a3, &unk_209A6C820, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A6C820);
  v20 = (a3 + 1);
  v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126)
    v26 = v125;
  else
    v26 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126)
    v31 = v125;
  else
    v31 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126)
    v36 = v125;
  else
    v36 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v36, 4, 4, 0);
  v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126)
    v41 = v125;
  else
    v41 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v42 = 16;
  v43 = *((unsigned int *)this + 42);
  v44 = 16 * v43;
  if ((int)v43 <= 0)
    v44 = 0;
  v45 = v44 + v42;
  v46 = v44 + v42 + 16 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126)
    v51 = v125;
  else
    v51 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 16;
  v53 = *((_DWORD *)this + 46);
  v54 = 26 * v53;
  if (v53 <= 0)
    v54 = 0;
  v55 = v54 + v52;
  v56 = v54 + v52 + 26 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126)
    v61 = v125;
  else
    v61 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v61, v56, v55, 0);
  v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v62 = 12;
  else
    v62 = 16;
  v63 = *((unsigned int *)this + 56);
  v64 = *((_DWORD *)this + 57);
  if (v64 >= v63)
  {
    v65 = 0;
    if ((int)v63 > 0)
      v62 = (v62 | 2) + 2 * (v63 - 1);
    v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    v65 = 2 * v63;
    v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126)
    v71 = v125;
  else
    v71 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_209A6C820, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v72 = 16;
  v73 = *((unsigned int *)this + 68);
  v74 = 36 * v73;
  if ((int)v73 <= 0)
    v74 = 0;
  v75 = v74 + v72;
  v76 = v74 + v72 + 36 * (*((_DWORD *)this + 69) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126)
    v81 = v125;
  else
    v81 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_209A6C820, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v82 = 16;
  v83 = *((unsigned int *)this + 72);
  v84 = 36 * v83;
  if ((int)v83 <= 0)
    v84 = 0;
  v85 = v84 + v82;
  v86 = v84 + v82 + 36 * (*((_DWORD *)this + 73) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126)
    v91 = v125;
  else
    v91 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_209A6C820, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126)
    v96 = v125;
  else
    v96 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_209A6C820, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126)
    v101 = v125;
  else
    v101 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_209A6C820, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126)
    v106 = v125;
  else
    v106 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_209A6C820, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v107 = sizeObject((uint64_t)this + 312, 0);
  v108 = sizeObject((uint64_t)this + 312, 1);
  v109 = sizeObject((uint64_t)this + 312, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126)
    v114 = v125;
  else
    v114 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_209A6C820, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  v123 = 0;
  v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126)
    v119 = v125;
  else
    v119 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_209A6C820, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_209839168(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeDurationBackoff::getBestTrace(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if ((a4 & 1) != 0)
    v4 = 0;
  else
    v4 = *(unsigned int *)(a1 + 152);
  v5 = *(unsigned int *)(a1 + 272);
  if (v4 >= v5)
    goto LABEL_21;
  v6 = 40 * v4;
  v7 = 1879048192;
  v8 = 0xFFFFFFFFLL;
  do
  {
    v9 = *(_QWORD *)(a1 + 264);
    if (!a4 || (v10 = *(unsigned int *)(v9 + v6 + 8), (_DWORD)v10 == -1))
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4))
        goto LABEL_19;
      v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2)
      *(_BYTE *)(*a2 + v10) = 1;
    if (a3)
      *(_BYTE *)(*a3 + v10) = 1;
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 28 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8))
        + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 4));
    if (v7 > v11)
      v8 = v10;
    if (v7 >= v11)
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 28 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8))
         + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 4));
    v5 = *(unsigned int *)(a1 + 272);
LABEL_19:
    ++v4;
    v6 += 40;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    v12 = *(unsigned int *)(a1 + 168);
    v8 = 0xFFFFFFFFLL;
    while (v12)
    {
      --v12;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v12) == 16777213)
      {
        if (a2)
          *(_BYTE *)(*a2 + v12) = 1;
        v8 = v12;
        if (a3)
          *(_BYTE *)(*a3 + v12) = 1;
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLeafLatticeDurationBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLeafLatticeDurationBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 28 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

unint64_t FstSearchLeafLatticeDurationBackoff::createLatticeNodes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t result;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int Node;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int *v43;
  int v44;
  int v45;
  uint64_t **v47;
  uint64_t v48;
  int v49;
  uint64_t v50;

  v8 = a2;
  v9 = a1;
  v10 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v10)
    v11 = *((_DWORD *)a2 + 2) == 0;
  else
    v11 = 0;
  if (v11)
  {
    *a2 = MemChunkAlloc(4 * v10, 0);
    *((_DWORD *)v8 + 2) = v10;
  }
  result = Lattice<WordLatticeLC>::createNode(a4);
  v13 = result;
  v14 = *(_DWORD *)(a3 + 8);
  if (v14 == *(_DWORD *)(a3 + 12))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    v14 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  v15 = *(_DWORD *)(v9 + 168);
  v17 = a6;
  v16 = a7;
  if (v15)
  {
    result = 2;
    v18 = -1;
    v47 = v8;
    v48 = a3;
    v50 = v9;
    do
    {
      --v15;
      v19 = *v8;
      *((_DWORD *)*v8 + v15) = -1;
      if (*(_BYTE *)(*v17 + v15))
      {
        v20 = v15;
        v21 = *(_QWORD *)(v9 + 160);
        v22 = *(unsigned int *)(*(_QWORD *)(v9 + 88) + 4 * *(unsigned int *)(v21 + 16 * v15 + 4));
        if (*(_BYTE *)(*v16 + v15))
        {
          if (*(_BYTE *)(*v17 + v15) != 1 || v18 == -1)
          {
            Node = Lattice<WordLatticeLC>::createNode(a4);
            *((_DWORD *)*v8 + v15) = *(_DWORD *)(a3 + 8);
            v25 = *(unsigned int *)(a3 + 8);
            if (v25 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              v25 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v25) = Node;
            v26 = *(_DWORD *)(a3 + 8);
            *(_DWORD *)(a3 + 8) = v26 + 1;
            v17 = a6;
            v16 = a7;
            if (*(_BYTE *)(*a6 + v15) == 1)
              v18 = v26;
            v21 = *(_QWORD *)(v9 + 160);
            result = 2;
          }
          else
          {
            *((_DWORD *)v19 + v15) = v18;
          }
        }
        v27 = (unsigned int *)(v21 + 16 * v15);
        if ((int)v27[3] >= 1)
        {
          v49 = v18;
          v28 = *v27;
          v29 = v27[2];
          do
          {
            v30 = *(_QWORD *)(v9 + 176);
            v31 = v29;
            v32 = (_DWORD *)(v30 + 28 * v29);
            v33 = v32[3];
            if ((v32[3] & 0x80000000) != 0)
            {
              *v32 += v22;
            }
            else
            {
              if ((_DWORD)v28 == 16777209)
              {
                v34 = *a5 + 16 * v33;
                v36 = (_DWORD *)(v34 + 8);
                v35 = *(unsigned int *)(v34 + 8);
                v37 = *(_QWORD *)(v9 + 176);
                if (v35 == *(_DWORD *)(v34 + 12))
                {
                  v38 = v20;
                  v39 = v22;
                  v40 = v28;
                  DgnPrimArray<unsigned int>::reallocElts(v34, 1, 1);
                  v28 = v40;
                  v22 = v39;
                  v20 = v38;
                  v9 = v50;
                  v17 = a6;
                  result = 2;
                  v16 = a7;
                  v35 = *v36;
                  v21 = *(_QWORD *)(v50 + 160);
                  v37 = *(_QWORD *)(v50 + 176);
                }
                *(_DWORD *)(*(_QWORD *)v34 + 4 * v35) = v15;
                ++*v36;
                v33 = v32[3];
              }
              else
              {
                *(_BYTE *)(*v16 + v33) = 1;
                v37 = v30;
              }
              v41 = v21 + 16 * v33;
              v42 = *(_DWORD *)(*(_QWORD *)(v9 + 88) + 4 * *(unsigned int *)(v41 + 4));
              v43 = (int *)(v37 + 28 * *(unsigned int *)(v41 + 8));
              v44 = v22 + *v32 - v42;
              v45 = *v43;
              LODWORD(v43) = v43[1];
              *v32 = v44 - v45;
              *(_DWORD *)(v30 + 28 * v31 + 4) -= (_DWORD)v43;
              *(_BYTE *)(*v17 + v33) = 2;
              v21 = *(_QWORD *)(v9 + 160);
            }
            v29 = v31 + 1;
          }
          while ((int)(v31 + 1) < *(_DWORD *)(v21 + 16 * v20 + 12) + *(_DWORD *)(v21 + 16 * v20 + 8));
          v8 = v47;
          a3 = v48;
          v18 = v49;
        }
      }
    }
    while (v15);
  }
  return result;
}

uint64_t FstSearchLeafLatticeDurationBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, unsigned __int8 a5)
{
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafLatticeDurationBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  v22 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v22)
  {
    v9 = 0;
    v10 = v28;
    do
    {
      if (*(_BYTE *)(*a3 + v9))
      {
        v11 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v11 + 16 * v9) != 16777209)
        {
          v12 = v11 + 16 * v9;
          if (*(int *)(v12 + 12) >= 1)
          {
            v13 = *(_DWORD *)(v12 + 8);
            do
            {
              v14 = *(_QWORD *)(a1 + 176) + 28 * v13;
              v15 = *(unsigned int *)(v14 + 12);
              v25 = v13;
              if ((_DWORD)v15 == -1)
                v16 = 0;
              else
                v16 = v10 - *((_DWORD *)v29 + v15);
              v17 = *(unsigned int *)(v27 + 4 * v16);
              if (*(_BYTE *)(*a4 + v9))
                FstSearchLeafLatticeDurationBackoff::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, 0xFFFFFFFFLL, v17, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v9))), a2, (uint64_t)v8, a5);
              v18 = v26[0];
              if (*(_DWORD *)(v26[0] + 16 * v9 + 8))
              {
                v19 = 0;
                do
                {
                  v20 = *(unsigned int *)(*(_QWORD *)(v18 + 16 * v9) + 4 * v19);
                  FstSearchLeafLatticeDurationBackoff::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, v20, v17, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v20))), a2, (uint64_t)v8, a5);
                  ++v19;
                  v18 = v26[0];
                }
                while (v19 < *(unsigned int *)(v26[0] + 16 * v9 + 8));
              }
              v13 = v25 + 1;
            }
            while ((int)(v25 + 1) < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v9 + 12)
                                   + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v9 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v22);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_209839930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafLatticeDurationBackoff::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v12;
  unsigned int v13;
  _DWORD *SilenceToken;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  ArcGraph *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _QWORD v35[2];
  _QWORD v36[2];
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  __int128 v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  __int128 v51;
  _DWORD v52[2];
  __int128 v53;

  v12 = a5;
  v13 = a4;
  if ((a4 & 0x80000000) != 0)
    SilenceToken = 0;
  else
    SilenceToken = (_DWORD *)FstSearchLeafLatticeDurationBackoff::getSilenceToken((FstSearchLeafLatticeDurationBackoff *)this, a4, a2);
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v52);
  v18 = a3[1];
  if (SilenceToken)
  {
    v18 += SilenceToken[1];
    v19 = *SilenceToken + *a3;
  }
  else
  {
    v19 = *a3;
  }
  if (v52[0] >> 25 == 126)
  {
    v20 = 0;
    v21 = v18;
    if ((v13 & 0x80000000) != 0)
    {
LABEL_9:
      v22 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v20 = *((_DWORD *)this + 34);
    v21 = v18 - v20;
    if ((v13 & 0x80000000) != 0)
      goto LABEL_9;
  }
  v22 = *((_DWORD *)this + 35);
  v21 -= v22;
LABEL_12:
  v23 = a3[6];
  if (SilenceToken)
    v23 += SilenceToken[6];
  v24 = v19 - v18 - v23;
  v25 = a3[3];
  v26 = this[20];
  if ((_DWORD)v25 == -1)
  {
    v28 = 0;
    if (a9)
      goto LABEL_20;
  }
  else
  {
    v27 = *((_DWORD *)v26 + 4 * v25 + 1);
    if (a9)
    {
      if (v27 >= 1)
        --v27;
      v28 = (v27 >> 1) + 1;
LABEL_20:
      v29 = *((_DWORD *)v26 + 4 * a2 + 1);
      if (v29 >= 1)
        --v29;
      v30 = (v29 >> 1) + 1;
      v31 = v30 - v28;
      if ((v13 & 0x80000000) == 0)
      {
        v32 = *((_DWORD *)v26 + 4 * v13 + 1);
        if (v32 >= 1)
          --v32;
        v33 = v32 >> 1;
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    v28 = v27 + 1;
  }
  v30 = *((_DWORD *)v26 + 4 * a2 + 1) + 1;
  v31 = v30 - v28;
  if ((v13 & 0x80000000) == 0)
  {
    v33 = *((_DWORD *)v26 + 4 * v13 + 1);
LABEL_29:
    v34 = v33 - v30 + 1;
    goto LABEL_31;
  }
LABEL_30:
  v34 = 0;
LABEL_31:
  v37 = v28;
  v38 = v31;
  v39 = v34;
  v40 = v21;
  v41 = 0;
  v42 = v20;
  v43 = v24;
  v44 = v23;
  v45 = v22;
  v46 = xmmword_209A6C7F0;
  v47 = 0;
  v48 = -1;
  v36[0] = &off_24C2149F8;
  v36[1] = 0xBFF0000000000000;
  v49 = v52[0];
  v50 = v52[1];
  v51 = v53;
  v35[0] = 0;
  v35[1] = 0;
  FstSearchLeafLatticeDurationBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v35, (uint64_t)a3, v28, a9);
  if (SilenceToken)
    FstSearchLeafLatticeDurationBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v35, (uint64_t)SilenceToken, v30, a9);
  v48 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v35, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v12, a6, (WordLatticeLC *)v36);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v35);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v36);
}

void sub_209839BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&a11);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeDurationBackoff::getSilenceToken(FstSearchLeafLatticeDurationBackoff *this, unsigned int a2, int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v3 = *((_QWORD *)this + 20) + 16 * a2;
  v4 = *(_DWORD *)(v3 + 12);
  if (v4 < 1)
    return 0;
  v5 = *(_DWORD *)(v3 + 8);
  v6 = v4 + v5;
  v7 = *((_QWORD *)this + 22);
  do
  {
    if (*(_DWORD *)(v7 + 28 * v5 + 12) == a3)
      result = v7 + 28 * v5;
    else
      result = 0;
    ++v5;
  }
  while ((int)v5 < v6 && !result);
  return result;
}

unint64_t FstSearchLeafLatticeDurationBackoff::buildLinkSegmentation(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  unsigned int v6;
  unint64_t v10;
  unsigned int v11;
  int v12;
  __int16 v13;
  unsigned __int16 v14;
  int v15;

  if (a5)
    v5 = 2;
  else
    v5 = 1;
  v6 = *(unsigned __int16 *)(a3 + 20);
  if (*(_WORD *)(a3 + 20))
  {
    v10 = result;
    v11 = 0;
    v12 = 0;
    v13 = *(_WORD *)(*(_QWORD *)(result + 56) + 136);
    v14 = -1;
    do
    {
      v15 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 216) + 2 * (v11 + *(_DWORD *)(a3 + 16)));
      if (v15 != v14)
      {
        if (v12)
        {
          result = FstSearchLeafLatticeDurationBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
          a4 += v12;
          v6 = *(unsigned __int16 *)(a3 + 20);
          v14 = v15;
          v12 = 0;
        }
        else
        {
          v14 = *(_WORD *)(*(_QWORD *)(v10 + 216) + 2 * (v11 + *(_DWORD *)(a3 + 16)));
        }
      }
      ++v12;
      v11 += v5;
    }
    while (v11 < v6);
    if (v12)
      return FstSearchLeafLatticeDurationBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
  }
  return result;
}

unint64_t FstSearchLeafLatticeDurationBackoff::addLinkSegment(unint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, __int16 a6)
{
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;

  v11 = result;
  v12 = *(_DWORD *)(a2 + 8);
  if (v12 == *(_DWORD *)(a2 + 12))
  {
    result = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(a2, 1, 1);
    v12 = *(_DWORD *)(a2 + 8);
  }
  v13 = *(_QWORD *)a2 + 28 * v12;
  *(_QWORD *)v13 = -1;
  *(_DWORD *)(v13 + 8) = 0xFFFF;
  *(_DWORD *)(v13 + 20) = -16;
  LODWORD(v13) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v13 + 1;
  v14 = *(_QWORD *)a2 + 28 * v13;
  *(_WORD *)(v14 + 16) = a3;
  *(_DWORD *)(v14 + 20) = a4;
  *(_DWORD *)(v14 + 24) = a5;
  *(_DWORD *)(v14 + 12) = *(_DWORD *)(*(_QWORD *)(v11 + 232) + 4 * a3);
  v15 = *(_WORD *)(*(_QWORD *)(v11 + 248) + 2 * a3);
  *(_WORD *)v14 = a6;
  *(_WORD *)(v14 + 2) = a6;
  *(_WORD *)(v14 + 4) = v15;
  *(_WORD *)(v14 + 6) = a6;
  *(_WORD *)(v14 + 8) = a6;
  *(_WORD *)(v14 + 10) = 0;
  return result;
}

uint64_t FstSearchLeafLatticeDurationBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 428))
    return MiniFst::beginTopFstSyncRecog(this + 312);
  return this;
}

uint64_t FstSearchLeafLatticeDurationBackoff::endTopRecSyncRecog(FstSearchLeafLatticeDurationBackoff *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafLatticeDurationBackoff::getBestExitScore(FstSearchLeafLatticeDurationBackoff *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  *((_DWORD *)this + 75) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 68);
  if (v1 >= v2)
    goto LABEL_19;
  v4 = 0;
  v5 = 0;
  v6 = 40 * v1;
  do
  {
    v7 = *((_QWORD *)this + 33) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 74))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          v5 = v22;
          v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        v2 = *((unsigned int *)this + 68);
      }
    }
    ++v1;
    v6 += 40;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 20);
    v11 = 1879048192;
    do
    {
      v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        v14 = *(_DWORD *)(v12 + 8);
        v15 = v13 + v14;
        v16 = *((_QWORD *)this + 22);
        do
        {
          v17 = v14;
          v18 = *(_DWORD *)(v16 + 28 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 75) = *(_DWORD *)(v16 + 28 * v17 + 12);
            v11 = v18;
          }
          v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v19 = 20000;
  else
    v19 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_209839FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeDurationBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLeafLatticeDurationBackoff *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 68);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 33);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 10;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLeafLatticeDurationBackoff::seedTheory(FstSearchLeafLatticeDurationBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 176, 1, 1);
      v11 = *((_DWORD *)this + 46);
    }
    v12 = *((_QWORD *)this + 22) + 28 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_209A6C810;
    *(_WORD *)(v12 + 20) = 0;
    *(_DWORD *)(v12 + 24) = 0;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)v12 = a2;
    v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      v13 = *((_DWORD *)this + 42);
    }
    v14 = (_DWORD *)(*((_QWORD *)this + 20) + 16 * v13);
    *v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v15 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v16 = *((_DWORD *)this + 68);
  if (v16 == *((_DWORD *)this + 69))
  {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)this + 264, 1, 1);
    v16 = *((_DWORD *)this + 68);
  }
  v17 = *((_QWORD *)this + 33) + 40 * v16;
  *(_DWORD *)v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 22) = 0;
  LODWORD(v17) = *((_DWORD *)this + 68) + 1;
  *((_DWORD *)this + 68) = v17;
  *((_DWORD *)this + 38) = v17;
  return FstSearchLeafLatticeDurationBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLeafLatticeDurationBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 300);
  if ((_DWORD)v8 != -1)
  {
    v9 = (_QWORD *)result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(_QWORD *)(result + 176) + 28 * v10[2] + 12); (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = v9[5];
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = v9[20];
      v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = v9[20];
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v9[22] + 28 * *(unsigned int *)(v20 + 16 * v8 + 8));
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(v9[20] + 16 * v16);
      i = *(unsigned int *)(v9[22] + 28 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLeafLatticeDurationBackoff::checkSearchParametersValidityForArcGraph(FstSearchLeafLatticeDurationBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLeafLatticeDurationBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _DWORD v28[2];
  __int128 v29;

  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    v9 = a4;
    LODWORD(v11) = 0;
    v12 = a2;
    v13 = a2;
    do
    {
      v14 = (_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v13);
      if (*v14 == 16777209)
        v11 = v11;
      else
        v11 = (v11 + 1);
      v13 = *(unsigned int *)(*(_QWORD *)(a1 + 176) + 28 * v14[2] + 12);
    }
    while ((_DWORD)v13 != -1);
    v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15)
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      v17 = v11 - v16;
      v18 = *(_QWORD *)a3 + 32 * v16;
      do
      {
        *(_QWORD *)v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_209A593D0;
        *(_QWORD *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if ((_DWORD)v11)
    {
      v19 = *(_QWORD *)(a1 + 160);
      v20 = -16;
      do
      {
        v21 = (unsigned int *)(v19 + 16 * v12);
        v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            v23 = v22 - 1;
            if (v22 < 1)
              v23 = v22;
            v20 = (v23 >> 1) + 1;
          }
          else
          {
            v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            v24 = v22 - 1;
            if (v22 < 1)
              v24 = v21[1];
            v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16)
            v25 = v22 + 1;
          else
            v25 = v20;
          v26 = v28[1];
          v11 = (v11 - 1);
          v27 = *(_QWORD *)a3 + 32 * v11;
          *(_DWORD *)v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          v19 = *(_QWORD *)(a1 + 160);
          v20 = -16;
        }
        v12 = *(unsigned int *)(*(_QWORD *)(a1 + 176) + 28 * *(unsigned int *)(v19 + 16 * v12 + 8) + 12);
      }
      while ((_DWORD)v12 != -1);
    }
  }
}

uint64_t FstSearchLeafLatticeDurationBackoff::makePartialResult(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  _QWORD v25[2];
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLeafLatticeDurationBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v24 = BestTrace;
  FstSearchLeafLatticeDurationBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v26 = v17;
      v27 = v19 - v17;
      v28 = v20 - v19;
      v29 = 0u;
      v30 = 0u;
      v31 = 0;
      v32 = 1879048192;
      v33 = 0;
      v34 = -1;
      v25[0] = &off_24C2149F8;
      v25[1] = 0xBFF0000000000000;
      v35 = *v18;
      v36 = v18[1];
      v37 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v25);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v25);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = a1[20] + 16 * v24;
  return (*(_DWORD *)(a1[22] + 28 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_20983A8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLeafLatticeDuration::maybeGeneratePelMaps(FstSearchLeafLatticeDuration *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 248, (uint64_t)this + 232);
}

uint64_t FstSearchLeafLatticeDuration::maybeInitDurModel(FstSearchLeafLatticeDuration *this, const PicMgr *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1)
    v6 = 56;
  else
    v6 = 72;
  v7 = v16;
  v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!(_DWORD)v7)
      goto LABEL_13;
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  v9 = 0;
  v10 = v15;
  v11 = *((_QWORD *)this + 24);
  do
  {
    if (!(_WORD)v9 || (v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF))
      v13 = 0;
    else
      v13 = *(_WORD *)(*(_QWORD *)((char *)a2 + v6) + 2 * v12);
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_20983AA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafLatticeDuration::advanceDeltas(FstSearchLeafLatticeDuration *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int ScoreNoBackoff;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  void *v86;
  int *v87;
  int64x2_t *v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t *v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  unint64_t v95;
  unint64_t v96;
  int64x2_t v97;
  int64x2_t *v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  uint64_t v102;
  int64x2_t *v103;
  int64x2_t result;
  int64x2_t v105;
  int v108;
  int v109;
  unsigned int v110;
  SearchStats *v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  char *v115;
  int *v116;
  int v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  int v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  int v129;
  __int16 v130;
  __int16 v131;
  __int16 v132;
  int v133;
  int v134;
  __int16 v135;
  int v136;
  int v137;
  uint64_t *v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int v153;
  int64x2_t v154;
  int64x2_t v155;
  int v156[3];

  v156[0] = a2;
  v154 = 0u;
  v155 = 0u;
  SnapTime::recordTime((SnapTime *)&v154, 1, 0, 0, 0);
  v116 = (int *)((char *)this + 304);
  *((_DWORD *)this + 76) = a3;
  v8 = *((_DWORD *)this + 2);
  v9 = *((_DWORD *)this + 68);
  if (v9)
  {
    v123 = 0;
    v10 = 0;
    v138 = (uint64_t *)((char *)this + 216);
    v108 = *((_DWORD *)this + 53);
    v109 = *((unsigned __int8 *)this + 208);
    v115 = (char *)this + 280;
    v111 = a4;
    v117 = *((_DWORD *)this + 2);
    do
    {
      v11 = *((_QWORD *)this + 33);
      v124 = v10;
      v12 = *(unsigned int *)(v11 + 40 * v10 + 4);
      v110 = v10;
      if (v9 <= v10 + 1)
        v13 = v10 + 1;
      else
        v13 = v9;
      while (v13 - 1 != v10)
      {
        if (*(_DWORD *)(v11 + 40 * ++v10 + 4) != (_DWORD)v12)
          goto LABEL_10;
      }
      v10 = v13;
LABEL_10:
      v14 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v14 + 160) != (_DWORD)v12)
      {
        v15 = *(_DWORD *)(v14 + 140) <= (int)v12 || v110 >= v10;
        v113 = v10;
        v112 = v12;
        if (!v15)
        {
          v16 = v10;
          v17 = v124;
          v128 = v10;
          do
          {
            v18 = *((_QWORD *)this + 33) + 40 * v17;
            v19 = *(_DWORD *)v18;
            v20 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v18 + 12)) + v19;
            v21 = *((_QWORD *)this + 33) + 40 * v17;
            v22 = *(_WORD *)(v21 + 12);
            v23 = *(_DWORD *)(v21 + 32);
            v24 = *(_DWORD *)(v21 + 36);
            v25 = v109;
            v26 = v23 - v109;
            if (v23 >= 1)
              v25 = v109 - v23;
            v27 = v25 & (v26 >> 31);
            if (*(_WORD *)(v21 + 12))
              v24 += v27;
            else
              v26 = *(_DWORD *)(v21 + 32);
            if (*(_WORD *)(v21 + 12))
              v28 = v27;
            else
              v28 = 0;
            v29 = v20 + v28;
            if (v20 + v28 - v8 <= *v116)
            {
              v134 = v26;
              v136 = v24;
              v30 = *(_QWORD *)(v21 + 4);
              v31 = *(_QWORD *)(v21 + 16);
              v32 = *(_DWORD *)(v21 + 24);
              v33 = *(unsigned __int16 *)(v21 + 28);
              v130 = *(_WORD *)(v21 + 30);
              v132 = *(_WORD *)(v21 + 14);
              if (*v116 > v29)
                *v116 = v29;
              v34 = *((_DWORD *)this + 56);
              v35 = v34;
              if ((_DWORD)v33)
              {
                v36 = *v138;
                v37 = v33;
                v35 = *((_DWORD *)this + 56);
                do
                {
                  v38 = *(_WORD *)(v36 + 2 * v32);
                  if (v35 == *((_DWORD *)this + 57))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)v138, 1, 1);
                    v35 = *((_DWORD *)this + 56);
                    v36 = *((_QWORD *)this + 27);
                  }
                  *(_WORD *)(v36 + 2 * v35++) = v38;
                  *((_DWORD *)this + 56) = v35;
                  ++v32;
                  --v37;
                }
                while (v37);
              }
              if (v35 == *((_DWORD *)this + 57))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)v138, 1, 1);
                v35 = *((_DWORD *)this + 56);
              }
              *(_WORD *)(*((_QWORD *)this + 27) + 2 * v35) = v22;
              *((_DWORD *)this + 56) = v35 + 1;
              v39 = *((unsigned int *)this + 72);
              if (v39 == *((_DWORD *)this + 73))
              {
                DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v115, 1, 1);
                LODWORD(v39) = *((_DWORD *)this + 72);
              }
              v40 = *((_QWORD *)this + 35) + 40 * v39;
              *(_DWORD *)v40 = v29;
              *(_QWORD *)(v40 + 4) = v30;
              *(_WORD *)(v40 + 12) = v22;
              *(_WORD *)(v40 + 14) = v132;
              *(_QWORD *)(v40 + 16) = v31;
              *(_DWORD *)(v40 + 24) = v34;
              *(_WORD *)(v40 + 28) = v33 + 1;
              *(_WORD *)(v40 + 30) = v130;
              *(_DWORD *)(v40 + 32) = v134;
              *(_DWORD *)(v40 + 36) = v136;
              v41 = *((_DWORD *)this + 72) + 1;
              *((_DWORD *)this + 72) = v41;
              if (v17 == v124)
              {
                v42 = v123;
                if (HIDWORD(v123) == 2 * *((_DWORD *)this + 4))
                  v42 = v41;
                v123 = __PAIR64__(HIDWORD(v123), v42) + 0x100000000;
              }
              v10 = v113;
              v12 = v112;
              v16 = v128;
            }
            else
            {
              v10 = v113;
              v12 = v112;
            }
            ++v17;
          }
          while (v17 != v16);
        }
        v43 = v10;
        v44 = v12;
        v118 = v10;
        do
        {
          v45 = *((_QWORD *)this + 5);
          v46 = *(_QWORD *)(v45 + 152);
          v47 = *(_DWORD *)(v46 + 4 * v44);
          v48 = *(_DWORD *)(v45 + 140);
          v125 = *(_DWORD *)(v46 + 4 * (v44 + 1));
          v114 = v44;
          if (v48 <= v125)
          {
            if (*((_BYTE *)this + 428))
              v74 = v48 <= (int)v12;
            else
              v74 = 0;
            if (v74)
            {
              v75 = (v47 & 0xFFFFF) <= 0xFFFF3 ? v47 & 0xFFFFF : v47 & 0xFFFFF | 0xF00000;
              if (v75 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v151);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v75, (DgnString *)&v151, v76, v77, v78, v79, v80);
                v86 = &unk_209A6C820;
                if (v151.i32[2])
                  v86 = (void *)v151.i64[0];
                v85 = (unsigned int *)(*((_QWORD *)this + 33) + 40 * v124);
                xprintf("Seed from state %d score %d trace %d, %s\n", v81, v82, v83, v84, v12, *v85, v85[2], v86);
                v87 = (int *)(*((_QWORD *)this + 33) + 40 * v124);
                MiniFst::seed((uint64_t)this + 312, *v87, v87[5], v87[2], v125);
                DgnString::~DgnString((DgnString *)&v151);
              }
            }
          }
          else
          {
            ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v46 + 4 * v44));
            if (v110 < v10)
            {
              v119 = (v47 >> 20) & 0x3FF;
              v50 = ScoreNoBackoff + v119;
              v51 = (unsigned __int16)v47;
              if ((_WORD)v47)
                v52 = v108;
              else
                v52 = 0;
              v53 = v124;
              v120 = v47;
              v121 = v52;
              v122 = ScoreNoBackoff + v119;
              do
              {
                v54 = *((_QWORD *)this + 33) + 40 * v53;
                v55 = v50 + *(_DWORD *)v54;
                if ((_DWORD)v51)
                  v57 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * v51);
                else
                  v57 = 0;
                if ((_DWORD)v51)
                {
                  v56 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * v51);
                  v58 = v56 & (v56 >> 31);
                }
                else
                {
                  v58 = 0;
                }
                v59 = (*(_DWORD *)(v54 + 32) & ~(*(int *)(v54 + 32) >> 31)) - v58 + v52;
                v60 = v55 + v59;
                v61 = v55 + v59 - v8;
                v62 = *((_DWORD *)this + 76);
                if (v61 <= v62)
                {
                  v135 = *(_WORD *)(v54 + 14);
                  v137 = v57;
                  v127 = *(_DWORD *)(v54 + 16);
                  v129 = *(_DWORD *)(v54 + 8);
                  v63 = *(_DWORD *)(v54 + 24);
                  v64 = *(unsigned __int16 *)(v54 + 28);
                  v131 = *(_WORD *)(v54 + 30);
                  v133 = *(_DWORD *)(v54 + 20);
                  v126 = *(_DWORD *)(v54 + 36);
                  if (v62 > v60)
                    *v116 = v60;
                  v65 = *((_DWORD *)this + 56);
                  v66 = v65;
                  if ((_DWORD)v64)
                  {
                    v67 = *v138;
                    v68 = v64;
                    v66 = *((_DWORD *)this + 56);
                    do
                    {
                      v69 = *(_WORD *)(v67 + 2 * v63);
                      if (v66 == *((_DWORD *)this + 57))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)v138, 1, 1);
                        v66 = *((_DWORD *)this + 56);
                        v67 = *((_QWORD *)this + 27);
                      }
                      *(_WORD *)(v67 + 2 * v66++) = v69;
                      *((_DWORD *)this + 56) = v66;
                      ++v63;
                      --v68;
                    }
                    while (v68);
                  }
                  if (v66 == *((_DWORD *)this + 57))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)v138, 1, 1);
                    v66 = *((_DWORD *)this + 56);
                  }
                  v47 = v120;
                  *(_WORD *)(*((_QWORD *)this + 27) + 2 * v66) = v120;
                  *((_DWORD *)this + 56) = v66 + 1;
                  v70 = *((unsigned int *)this + 72);
                  if (v70 == *((_DWORD *)this + 73))
                  {
                    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v115, 1, 1);
                    LODWORD(v70) = *((_DWORD *)this + 72);
                  }
                  v71 = *((_QWORD *)this + 35) + 40 * v70;
                  *(_DWORD *)v71 = v60;
                  *(_DWORD *)(v71 + 4) = v125;
                  *(_DWORD *)(v71 + 8) = v129;
                  *(_WORD *)(v71 + 12) = v120;
                  *(_WORD *)(v71 + 14) = v135;
                  *(_DWORD *)(v71 + 16) = v127 + v119;
                  *(_DWORD *)(v71 + 20) = v133;
                  *(_DWORD *)(v71 + 24) = v65;
                  *(_WORD *)(v71 + 28) = v64 + 1;
                  *(_WORD *)(v71 + 30) = v131;
                  *(_DWORD *)(v71 + 32) = v137;
                  *(_DWORD *)(v71 + 36) = v59 + v126;
                  v72 = *((_DWORD *)this + 72) + 1;
                  *((_DWORD *)this + 72) = v72;
                  v8 = v117;
                  if (v53 == v124)
                  {
                    v73 = v123;
                    if (HIDWORD(v123) == 2 * *((_DWORD *)this + 4))
                      v73 = v72;
                    v123 = __PAIR64__(HIDWORD(v123), v73) + 0x100000000;
                  }
                  v43 = v118;
                  v52 = v121;
                  v50 = v122;
                }
                ++v53;
              }
              while (v53 != v43);
            }
          }
          v10 = v113;
          v44 = v114 + 2;
          a4 = v111;
          v12 = v112;
        }
        while ((v47 & 0x80000000) == 0);
        v9 = *((_DWORD *)this + 68);
      }
    }
    while (v10 < v9);
    a3 = *v116;
  }
  else
  {
    v123 = 0;
  }
  v153 = a3 + v8;
  if (*((_BYTE *)this + 428))
    MiniFst::updateFrame((char *)this + 312, v116, v8, a2);
  v151 = 0u;
  v152 = 0u;
  SnapTime::recordTime((SnapTime *)&v151, 1, 0, 0, 0);
  v151 = vsubq_s64(v151, v154);
  v152 = vsubq_s64(v152, v155);
  v88 = (int64x2_t *)*((_QWORD *)this + 13);
  v89 = vaddq_s64(v88[1], v152);
  *v88 = vaddq_s64(*v88, v151);
  v88[1] = v89;
  v149 = 0u;
  v150 = 0u;
  SnapTime::recordTime((SnapTime *)&v149, 1, 0, 0, 0);
  if (HIDWORD(v123) > 2 * *((_DWORD *)this + 4))
    FstSearchLeafLatticeDurationBackoff::applyCutoffOnEmitting((uint64_t)this, v123, &v153);
  v147 = 0u;
  v148 = 0u;
  SnapTime::recordTime((SnapTime *)&v147, 1, 0, 0, 0);
  v90 = vsubq_s64(v147, v149);
  v91 = (int64x2_t *)*((_QWORD *)this + 13);
  v92 = v91[3];
  v93 = vaddq_s64(v91[2], v90);
  v147 = v90;
  v148 = vsubq_s64(v148, v150);
  v94 = vaddq_s64(v92, v148);
  v91[2] = v93;
  v91[3] = v94;
  v145 = 0u;
  v146 = 0u;
  SnapTime::recordTime((SnapTime *)&v145, 1, 0, 0, 0);
  FstSearchLeafLatticeDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v95 = *((unsigned int *)this + 6);
  if ((_DWORD)v95)
  {
    v96 = *((unsigned int *)this + 68);
    if (v95 < v96)
      mrec_nth_element<FstSearchLeafLatticeDurationBackoffcmpTok>(*((_QWORD *)this + 33), v95, v96);
  }
  v143 = 0u;
  v144 = 0u;
  SnapTime::recordTime((SnapTime *)&v143, 1, 0, 0, 0);
  v97 = vsubq_s64(v143, v145);
  v98 = (int64x2_t *)*((_QWORD *)this + 13);
  v99 = v98[5];
  v100 = vaddq_s64(v98[4], v97);
  v143 = v97;
  v144 = vsubq_s64(v144, v146);
  v101 = vaddq_s64(v99, v144);
  v98[4] = v100;
  v98[5] = v101;
  v141 = 0u;
  v142 = 0u;
  SnapTime::recordTime((SnapTime *)&v141, 1, 0, 0, 0);
  *((_DWORD *)this + 72) = 0;
  v102 = *((unsigned int *)this + 68);
  *((_DWORD *)this + 38) = v102;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v102;
    if (*((_DWORD *)a4 + 2) > v102)
      LODWORD(v102) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v102;
  }
  if (*((_BYTE *)this + 428))
    FstSearchLeafLatticeDuration::seedFromMiniFst((uint64_t)this, v156);
  if (a5)
    FstSearchLeafLatticeDurationBackoff::propagateNulls((uint64_t)this, v153, a2, a4);
  *((_DWORD *)this + 74) = a2;
  v139 = 0u;
  v140 = 0u;
  SnapTime::recordTime((SnapTime *)&v139, 1, 0, 0, 0);
  v103 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v103[6], vsubq_s64(v139, v141));
  v105 = vaddq_s64(v103[7], vsubq_s64(v140, v142));
  v103[6] = result;
  v103[7] = v105;
  return result;
}

void sub_20983B2E4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLeafLatticeDuration::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (*(_BYTE *)(this + 428))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 336);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v46 = this + 176;
      v5 = (_QWORD *)(this + 160);
      v39 = this + 264;
      do
      {
        v6 = (int *)(*(_QWORD *)(v2 + 328) + 36 * v4);
        v7 = v6[4];
        v43 = *v6;
        v44 = v6[5];
        v8 = v6[6];
        v45 = v6[7];
        v9 = v6[2];
        v47 = 0;
        v48 = 0;
        v41 = v8;
        v42 = v7;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          v10 = 0;
          v11 = 0;
          do
          {
            if (v11 == HIDWORD(v48))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v47, 1, 1);
              v11 = v48;
              v10 = v47;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            v12 = v48;
            v11 = v48 + 1;
            LODWORD(v48) = v48 + 1;
            v9 = *(_DWORD *)(*(_QWORD *)(v2 + 312) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            v14 = v12 + 1;
            v15 = 4 * v12;
            do
            {
              v16 = *(_DWORD *)(v47 + v15);
              v17 = *(_QWORD *)(v2 + 312);
              v18 = (int *)(v17 + 36 * v16);
              v19 = *v18;
              v20 = *((_QWORD *)v18 + 2);
              v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v46, 1, 1);
                v21 = *(_DWORD *)(v2 + 184);
                v17 = *(_QWORD *)(v2 + 312);
              }
              v22 = *(_QWORD *)(v2 + 176) + 28 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)v22 = v19;
              *(_QWORD *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = 0;
              *(_WORD *)(v22 + 20) = 0;
              *(_DWORD *)(v22 + 24) = 0;
              v23 = *(_QWORD *)(v17 + 36 * v16 + 28);
              v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                v24 = *(unsigned int *)(v2 + 168);
              }
              v25 = *(_QWORD *)(v2 + 160);
              v26 = v25 + 16 * v24;
              *(_QWORD *)v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v46, 1, 1);
          v27 = *(_DWORD *)(v2 + 184);
        }
        v28 = *(_QWORD *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        v29 = v28 + 28 * v27;
        *(_DWORD *)v29 = v43;
        *(_DWORD *)(v29 + 4) = v42;
        *(_DWORD *)(v29 + 8) = v44;
        *(_DWORD *)(v29 + 12) = v13;
        *(_DWORD *)(v29 + 16) = 0;
        *(_WORD *)(v29 + 20) = 0;
        *(_DWORD *)(v29 + 24) = 0;
        if (v45 == 16777213)
        {
          v45 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v13) == 16777209)
          {
            v27 = *(_DWORD *)(*v5 + 16 * v13 + 8);
            v45 = 16777209;
          }
        }
        v30 = *a2;
        v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          v31 = *(unsigned int *)(v2 + 168);
        }
        v32 = *(_QWORD *)(v2 + 160);
        v33 = (int *)(v32 + 16 * v31);
        *v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        v35 = *(unsigned int *)(v2 + 272);
        if (v35 == *(_DWORD *)(v2 + 276))
        {
          DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(v39, 1, 1);
          LODWORD(v35) = *(_DWORD *)(v2 + 272);
        }
        v36 = *(_QWORD *)(v2 + 264) + 40 * v35;
        *(_DWORD *)v36 = v43;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v42;
        *(_QWORD *)(v36 + 20) = v44;
        *(_WORD *)(v36 + 28) = 0;
        *(_QWORD *)(v36 + 32) = 0;
        ++*(_DWORD *)(v2 + 272);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 336);
        v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38)
          v37 = v38;
        else
          v37 = v37;
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_20983B68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeDuration::collectTraces(FstSearchLeafLatticeDuration *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  __int128 *v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  __int16 v42;
  unsigned int v43;
  unint64_t v44;
  _OWORD *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t *v58;
  _DWORD *v59;
  uint64_t v60;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;

  v2 = *((unsigned int *)this + 42);
  v66 = 0;
  v65 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v65 = v3;
    v66 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v66);
  }
  v5 = *((unsigned int *)this + 68);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v65;
    v8 = (unsigned int *)(*((_QWORD *)this + 33) + 8);
    do
    {
      v10 = *v8;
      v8 += 10;
      v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        v5 = *((unsigned int *)this + 68);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v11) = *((_DWORD *)this + 42);
  if (!(_DWORD)v11)
  {
    v63 = 0;
    v64 = 0;
LABEL_54:
    v25 = 0;
    *((_DWORD *)this + 42) = 0;
    goto LABEL_55;
  }
  v12 = 0;
  v13 = (uint64_t *)((char *)this + 160);
  v14 = v65;
  v15 = (uint64_t *)((char *)this + 176);
  do
  {
    v11 = (v11 - 1);
    if ((v12 & 1) != 0)
    {
      v12 = 1;
    }
    else if (*(_DWORD *)(*v13 + 16 * v11) == 16777213)
    {
      v12 = 1;
      *((_DWORD *)v14 + v11) = 1;
    }
    else
    {
      v12 = 0;
    }
    if (*((_DWORD *)v14 + v11))
    {
      v16 = *v13 + 16 * v11;
      v17 = *(_DWORD *)(v16 + 12);
      if (v17 >= 1)
      {
        v18 = *(_DWORD *)(v16 + 8);
        v19 = v17 + v18;
        v20 = *v15;
        do
        {
          v21 = *(unsigned int *)(v20 + 28 * v18 + 12);
          if ((_DWORD)v21 != -1)
            *((_DWORD *)v14 + v21) = 1;
          ++v18;
        }
        while ((int)v18 < v19);
      }
    }
  }
  while ((_DWORD)v11);
  v22 = *((_DWORD *)this + 42);
  v63 = 0;
  v64 = 0;
  if (!v22)
    goto LABEL_54;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  do
  {
    if (*((_DWORD *)v65 + v23))
    {
      v26 = *v13;
      v62 = v24;
      if (v23 != v24)
      {
        *(_OWORD *)(v26 + 16 * v24) = *(_OWORD *)(v26 + 16 * v23);
        v26 = *v13;
      }
      *(_DWORD *)(v26 + 16 * v24 + 8) = v25;
      v27 = v26 + 16 * v23;
      v28 = *(unsigned int *)(v27 + 8);
      v29 = (*(_DWORD *)(v27 + 12) + v28);
      if (v28 < v29)
      {
        v30 = *v15;
        do
        {
          v31 = v25;
          if (v28 != v25)
          {
            v32 = (__int128 *)(v30 + 28 * v28);
            v33 = (_OWORD *)(v30 + 28 * v25);
            v34 = *v32;
            *(_OWORD *)((char *)v33 + 12) = *(__int128 *)((char *)v32 + 12);
            *v33 = v34;
            v30 = *v15;
          }
          v35 = v30 + 28 * v25;
          v38 = *(_DWORD *)(v35 + 12);
          v36 = (_DWORD *)(v35 + 12);
          v37 = v38;
          if (v38 != -1)
            *v36 = *((_DWORD *)v65 + v37);
          v39 = v64;
          if (*(_WORD *)(v30 + 28 * v31 + 20))
          {
            v40 = 0;
            v41 = v64;
            do
            {
              v42 = *(_WORD *)(*((_QWORD *)this + 27) + 2 * (v40 + *(_DWORD *)(v30 + 28 * v31 + 16)));
              if (v41 == HIDWORD(v64))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
                v41 = v64;
                v30 = *v15;
              }
              *(_WORD *)(v63 + 2 * v41++) = v42;
              LODWORD(v64) = v41;
              ++v40;
            }
            while (v40 < *(unsigned __int16 *)(v30 + 28 * v31 + 20));
          }
          *(_DWORD *)(v30 + 28 * v31 + 16) = v39;
          v25 = v31 + 1;
          ++v28;
        }
        while (v28 != v29);
      }
      *((_DWORD *)v65 + v23) = v62;
      v24 = v62 + 1;
      v22 = *((_DWORD *)this + 42);
      v13 = (uint64_t *)((char *)this + 160);
    }
    ++v23;
  }
  while (v23 < v22);
  v43 = *((_DWORD *)this + 43);
  if (v24 > v43)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v13, v24 - v43, 0);
    v22 = *((_DWORD *)this + 42);
  }
  if (v22 < v24)
  {
    v44 = v24 - (unint64_t)v22;
    v45 = (_OWORD *)(*v13 + 16 * v22);
    do
    {
      *v45++ = xmmword_209A6C7D0;
      --v44;
    }
    while (v44);
  }
  *((_DWORD *)this + 42) = v24;
  v46 = *((_DWORD *)this + 47);
  if (v25 > v46)
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 176, v25 - v46, 0);
  v47 = *((unsigned int *)this + 46);
  if (v47 < v25)
  {
    v48 = v25 - v47;
    v49 = (_DWORD *)(*v15 + 28 * v47 + 24);
    do
    {
      *(_OWORD *)(v49 - 6) = xmmword_209A6C7C0;
      *(v49 - 2) = 0;
      *((_WORD *)v49 - 2) = 0;
      *v49 = 0;
      v49 += 7;
      --v48;
    }
    while (v48);
  }
LABEL_55:
  *((_DWORD *)this + 46) = v25;
  v50 = *((unsigned int *)this + 68);
  if ((_DWORD)v50)
  {
    v51 = 0;
    v52 = v64;
    v53 = *((_QWORD *)this + 33);
    do
    {
      if (*(_WORD *)(v53 + 40 * v51 + 28))
      {
        v54 = 0;
        LODWORD(v55) = v52;
        do
        {
          v56 = *(_WORD *)(*((_QWORD *)this + 27) + 2 * (v54 + *(_DWORD *)(v53 + 40 * v51 + 24)));
          if ((_DWORD)v55 == HIDWORD(v64))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
            LODWORD(v55) = v64;
            v53 = *((_QWORD *)this + 33);
          }
          *(_WORD *)(v63 + 2 * v55) = v56;
          v55 = (v55 + 1);
          LODWORD(v64) = v55;
          ++v54;
        }
        while (v54 < *(unsigned __int16 *)(v53 + 40 * v51 + 28));
        v50 = *((unsigned int *)this + 68);
      }
      else
      {
        v55 = v52;
      }
      *(_DWORD *)(v53 + 40 * v51++ + 24) = v52;
      v52 = v55;
    }
    while (v51 < v50);
  }
  else
  {
    LODWORD(v55) = v64;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 216, &v63, 0, v55);
  v57 = *((unsigned int *)this + 68);
  if ((_DWORD)v57)
  {
    v58 = v65;
    v59 = (_DWORD *)(*((_QWORD *)this + 33) + 8);
    do
    {
      v60 = *v59;
      if ((_DWORD)v60 != -1)
        *v59 = *((_DWORD *)v58 + v60);
      v59 += 10;
      --v57;
    }
    while (v57);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v63);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v65);
}

void sub_20983BB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafLatticeDuration::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLeafLatticeDuration::advanceDeltas((FstSearchLeafLatticeDuration *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLeafLatticeDuration::collectTraces((FstSearchLeafLatticeDuration *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafLatticeDuration::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  this[68] = 0;
  return this;
}

double FstSearchLeafLatticeDuration::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLeafLatticeDuration::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafLatticeDuration::beginTopRecPassSyncRecog(FstSearchLeafLatticeDuration *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 312, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 106) = result;
    *((_BYTE *)this + 428) = 1;
  }
  return result;
}

uint64_t FstSearchLeafLatticeDuration::endTopRecPassSyncRecog(FstSearchLeafLatticeDuration *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 76) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLeafLatticeDuration::printSize(FstSearchLeafLatticeDuration *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  int v126;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126)
    v15 = v125;
  else
    v15 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A6C820, a3, &unk_209A6C820, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A6C820);
  v20 = (a3 + 1);
  v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126)
    v26 = v125;
  else
    v26 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126)
    v31 = v125;
  else
    v31 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126)
    v36 = v125;
  else
    v36 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v36, 4, 4, 0);
  v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126)
    v41 = v125;
  else
    v41 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v42 = 16;
  v43 = *((unsigned int *)this + 42);
  v44 = 16 * v43;
  if ((int)v43 <= 0)
    v44 = 0;
  v45 = v44 + v42;
  v46 = v44 + v42 + 16 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126)
    v51 = v125;
  else
    v51 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 16;
  v53 = *((_DWORD *)this + 46);
  v54 = 26 * v53;
  if (v53 <= 0)
    v54 = 0;
  v55 = v54 + v52;
  v56 = v54 + v52 + 26 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126)
    v61 = v125;
  else
    v61 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v61, v56, v55, 0);
  v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v62 = 12;
  else
    v62 = 16;
  v63 = *((unsigned int *)this + 56);
  v64 = *((_DWORD *)this + 57);
  if (v64 >= v63)
  {
    v65 = 0;
    if ((int)v63 > 0)
      v62 = (v62 | 2) + 2 * (v63 - 1);
    v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    v65 = 2 * v63;
    v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126)
    v71 = v125;
  else
    v71 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_209A6C820, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v72 = 16;
  v73 = *((unsigned int *)this + 68);
  v74 = 36 * v73;
  if ((int)v73 <= 0)
    v74 = 0;
  v75 = v74 + v72;
  v76 = v74 + v72 + 36 * (*((_DWORD *)this + 69) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126)
    v81 = v125;
  else
    v81 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_209A6C820, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v82 = 16;
  v83 = *((unsigned int *)this + 72);
  v84 = 36 * v83;
  if ((int)v83 <= 0)
    v84 = 0;
  v85 = v84 + v82;
  v86 = v84 + v82 + 36 * (*((_DWORD *)this + 73) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126)
    v91 = v125;
  else
    v91 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_209A6C820, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126)
    v96 = v125;
  else
    v96 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_209A6C820, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126)
    v101 = v125;
  else
    v101 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_209A6C820, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126)
    v106 = v125;
  else
    v106 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_209A6C820, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v107 = sizeObject((uint64_t)this + 312, 0);
  v108 = sizeObject((uint64_t)this + 312, 1);
  v109 = sizeObject((uint64_t)this + 312, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126)
    v114 = v125;
  else
    v114 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_209A6C820, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  v123 = 0;
  v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126)
    v119 = v125;
  else
    v119 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_209A6C820, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_20983C52C(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLeafLatticeDuration::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLeafLatticeDurationBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 28 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchLeafLatticeDuration::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, unsigned __int8 a5)
{
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafLatticeDurationBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  v22 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v22)
  {
    v9 = 0;
    v10 = v28;
    do
    {
      if (*(_BYTE *)(*a3 + v9))
      {
        v11 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v11 + 16 * v9) != 16777209)
        {
          v12 = v11 + 16 * v9;
          if (*(int *)(v12 + 12) >= 1)
          {
            v13 = *(_DWORD *)(v12 + 8);
            do
            {
              v14 = *(_QWORD *)(a1 + 176) + 28 * v13;
              v15 = *(unsigned int *)(v14 + 12);
              v25 = v13;
              if ((_DWORD)v15 == -1)
                v16 = 0;
              else
                v16 = v10 - *((_DWORD *)v29 + v15);
              v17 = *(unsigned int *)(v27 + 4 * v16);
              if (*(_BYTE *)(*a4 + v9))
                FstSearchLeafLatticeDuration::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, 0xFFFFFFFFLL, v17, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v9))), a2, (uint64_t)v8, a5);
              v18 = v26[0];
              if (*(_DWORD *)(v26[0] + 16 * v9 + 8))
              {
                v19 = 0;
                do
                {
                  v20 = *(unsigned int *)(*(_QWORD *)(v18 + 16 * v9) + 4 * v19);
                  FstSearchLeafLatticeDuration::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, v20, v17, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v20))), a2, (uint64_t)v8, a5);
                  ++v19;
                  v18 = v26[0];
                }
                while (v19 < *(unsigned int *)(v26[0] + 16 * v9 + 8));
              }
              v13 = v25 + 1;
            }
            while ((int)(v25 + 1) < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v9 + 12)
                                   + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v9 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v22);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_20983C8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafLatticeDuration::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v12;
  unsigned int v13;
  _DWORD *SilenceToken;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  ArcGraph *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _QWORD v35[2];
  _QWORD v36[2];
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  __int128 v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  __int128 v51;
  _DWORD v52[2];
  __int128 v53;

  v12 = a5;
  v13 = a4;
  if ((a4 & 0x80000000) != 0)
    SilenceToken = 0;
  else
    SilenceToken = (_DWORD *)FstSearchLeafLatticeDurationBackoff::getSilenceToken((FstSearchLeafLatticeDurationBackoff *)this, a4, a2);
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v52);
  v18 = a3[1];
  if (SilenceToken)
  {
    v18 += SilenceToken[1];
    v19 = *SilenceToken + *a3;
  }
  else
  {
    v19 = *a3;
  }
  if (v52[0] >> 25 == 126)
  {
    v20 = 0;
    v21 = v18;
    if ((v13 & 0x80000000) != 0)
    {
LABEL_9:
      v22 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v20 = *((_DWORD *)this + 34);
    v21 = v18 - v20;
    if ((v13 & 0x80000000) != 0)
      goto LABEL_9;
  }
  v22 = *((_DWORD *)this + 35);
  v21 -= v22;
LABEL_12:
  v23 = a3[6];
  if (SilenceToken)
    v23 += SilenceToken[6];
  v24 = v19 - v18 - v23;
  v25 = a3[3];
  v26 = this[20];
  if ((_DWORD)v25 == -1)
  {
    v28 = 0;
    if (a9)
      goto LABEL_20;
  }
  else
  {
    v27 = *((_DWORD *)v26 + 4 * v25 + 1);
    if (a9)
    {
      if (v27 >= 1)
        --v27;
      v28 = (v27 >> 1) + 1;
LABEL_20:
      v29 = *((_DWORD *)v26 + 4 * a2 + 1);
      if (v29 >= 1)
        --v29;
      v30 = (v29 >> 1) + 1;
      v31 = v30 - v28;
      if ((v13 & 0x80000000) == 0)
      {
        v32 = *((_DWORD *)v26 + 4 * v13 + 1);
        if (v32 >= 1)
          --v32;
        v33 = v32 >> 1;
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    v28 = v27 + 1;
  }
  v30 = *((_DWORD *)v26 + 4 * a2 + 1) + 1;
  v31 = v30 - v28;
  if ((v13 & 0x80000000) == 0)
  {
    v33 = *((_DWORD *)v26 + 4 * v13 + 1);
LABEL_29:
    v34 = v33 - v30 + 1;
    goto LABEL_31;
  }
LABEL_30:
  v34 = 0;
LABEL_31:
  v37 = v28;
  v38 = v31;
  v39 = v34;
  v40 = v21;
  v41 = 0;
  v42 = v20;
  v43 = v24;
  v44 = v23;
  v45 = v22;
  v46 = xmmword_209A6C7F0;
  v47 = 0;
  v48 = -1;
  v36[0] = &off_24C2149F8;
  v36[1] = 0xBFF0000000000000;
  v49 = v52[0];
  v50 = v52[1];
  v51 = v53;
  v35[0] = 0;
  v35[1] = 0;
  FstSearchLeafLatticeDurationBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v35, (uint64_t)a3, v28, a9);
  if (SilenceToken)
    FstSearchLeafLatticeDurationBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v35, (uint64_t)SilenceToken, v30, a9);
  v48 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v35, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v12, a6, (WordLatticeLC *)v36);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v35);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v36);
}

void sub_20983CB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&a11);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeDuration::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 428))
    return MiniFst::beginTopFstSyncRecog(this + 312);
  return this;
}

uint64_t FstSearchLeafLatticeDuration::endTopRecSyncRecog(FstSearchLeafLatticeDuration *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafLatticeDuration::getBestExitScore(FstSearchLeafLatticeDuration *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  *((_DWORD *)this + 75) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 68);
  if (v1 >= v2)
    goto LABEL_19;
  v4 = 0;
  v5 = 0;
  v6 = 40 * v1;
  do
  {
    v7 = *((_QWORD *)this + 33) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 74))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          v5 = v22;
          v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        v2 = *((unsigned int *)this + 68);
      }
    }
    ++v1;
    v6 += 40;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 20);
    v11 = 1879048192;
    do
    {
      v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        v14 = *(_DWORD *)(v12 + 8);
        v15 = v13 + v14;
        v16 = *((_QWORD *)this + 22);
        do
        {
          v17 = v14;
          v18 = *(_DWORD *)(v16 + 28 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 75) = *(_DWORD *)(v16 + 28 * v17 + 12);
            v11 = v18;
          }
          v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v19 = 20000;
  else
    v19 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_20983CD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeDuration::getBestScoreMaybeUpdateFstNode(FstSearchLeafLatticeDuration *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 68);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 33);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 10;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLeafLatticeDuration::seedTheory(FstSearchLeafLatticeDuration *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 176, 1, 1);
      v11 = *((_DWORD *)this + 46);
    }
    v12 = *((_QWORD *)this + 22) + 28 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_209A6C810;
    *(_WORD *)(v12 + 20) = 0;
    *(_DWORD *)(v12 + 24) = 0;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)v12 = a2;
    v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      v13 = *((_DWORD *)this + 42);
    }
    v14 = (_DWORD *)(*((_QWORD *)this + 20) + 16 * v13);
    *v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v15 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v16 = *((_DWORD *)this + 68);
  if (v16 == *((_DWORD *)this + 69))
  {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)this + 264, 1, 1);
    v16 = *((_DWORD *)this + 68);
  }
  v17 = *((_QWORD *)this + 33) + 40 * v16;
  *(_DWORD *)v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 22) = 0;
  LODWORD(v17) = *((_DWORD *)this + 68) + 1;
  *((_DWORD *)this + 68) = v17;
  *((_DWORD *)this + 38) = v17;
  return FstSearchLeafLatticeDurationBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLeafLatticeDuration::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 300);
  if ((_DWORD)v8 != -1)
  {
    v9 = (_QWORD *)result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(_QWORD *)(result + 176) + 28 * v10[2] + 12); (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = v9[5];
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = v9[20];
      v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = v9[20];
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v9[22] + 28 * *(unsigned int *)(v20 + 16 * v8 + 8));
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(v9[20] + 16 * v16);
      i = *(unsigned int *)(v9[22] + 28 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLeafLatticeDuration::checkSearchParametersValidityForArcGraph(FstSearchLeafLatticeDuration *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLeafLatticeDuration::makePartialResult(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  _QWORD v25[2];
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLeafLatticeDurationBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v24 = BestTrace;
  FstSearchLeafLatticeDurationBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v26 = v17;
      v27 = v19 - v17;
      v28 = v20 - v19;
      v29 = 0u;
      v30 = 0u;
      v31 = 0;
      v32 = 1879048192;
      v33 = 0;
      v34 = -1;
      v25[0] = &off_24C2149F8;
      v25[1] = 0xBFF0000000000000;
      v35 = *v18;
      v36 = v18[1];
      v37 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v25);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v25);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = a1[20] + 16 * v24;
  return (*(_DWORD *)(a1[22] + 28 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_20983D4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLeafLatticeBackoff::maybeGeneratePelMaps(FstSearchLeafLatticeBackoff *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 224, (uint64_t)this + 208);
}

int64x2_t FstSearchLeafLatticeBackoff::advanceDeltas(FstSearchLeafLatticeBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int ScoreAllowBackoff_updateNodeInSequence;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  BOOL v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  unsigned int v78;
  unsigned int v79;
  int64x2_t *v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t *v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  unint64_t v87;
  unint64_t v88;
  int64x2_t v89;
  int64x2_t *v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  uint64_t v94;
  int64x2_t *v95;
  int64x2_t result;
  int64x2_t v97;
  int v98;
  SearchStats *v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  char *v105;
  int *v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  __int16 v118;
  __int16 v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int v134;
  int64x2_t v135;
  int64x2_t v136;
  int v137[3];

  v8 = a2;
  v137[0] = a2;
  v135 = 0u;
  v136 = 0u;
  SnapTime::recordTime((SnapTime *)&v135, 1, 0, 0, 0);
  v106 = (int *)((char *)this + 280);
  *((_DWORD *)this + 70) = a3;
  v10 = *((_DWORD *)this + 2);
  v11 = *((_DWORD *)this + 62);
  if (v11)
  {
    v98 = a5;
    v99 = a4;
    v100 = v8;
    v109 = 0;
    LODWORD(v12) = 0;
    v13 = (uint64_t *)((char *)this + 192);
    v105 = (char *)this + 256;
    v108 = *((unsigned int *)this + 2);
    do
    {
      v14 = *((_QWORD *)this + 30);
      v15 = v12;
      v16 = *(unsigned int *)(v14 + 32 * v12 + 4);
      if (v11 <= (int)v12 + 1)
        v17 = v12 + 1;
      else
        v17 = v11;
      v101 = v12;
      while (v17 - 1 != (_DWORD)v12)
      {
        v12 = (v12 + 1);
        if (*(_DWORD *)(v14 + 32 * v12 + 4) != (_DWORD)v16)
          goto LABEL_11;
      }
      LODWORD(v12) = v17;
LABEL_11:
      v18 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v18 + 160) != (_DWORD)v16)
      {
        v19 = *(_DWORD *)(v18 + 140) <= (int)v16 || v101 >= v12;
        v102 = v16;
        v103 = v12;
        v110 = v15;
        if (!v19)
        {
          v20 = v12;
          v21 = v15;
          v116 = v12;
          do
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 70) >= 5000)
              v22 = 5000;
            else
              v22 = *((_DWORD *)this + 19) + *((_DWORD *)this + 70);
            ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(*((_QWORD *)this + 30) + 32 * v21 + 12), *(_DWORD *)(*((_QWORD *)this + 30) + 32 * v21), v22);
            v24 = *((_DWORD *)this + 70);
            if (ScoreAllowBackoff_updateNodeInSequence - v10 <= v24)
            {
              v25 = ScoreAllowBackoff_updateNodeInSequence;
              if (v24 > ScoreAllowBackoff_updateNodeInSequence)
                *v106 = ScoreAllowBackoff_updateNodeInSequence;
              v26 = *((_QWORD *)this + 30) + 32 * v21;
              v27 = *(_QWORD *)(v26 + 4);
              v28 = *(_WORD *)(v26 + 12);
              v118 = *(_WORD *)(v26 + 14);
              v29 = *(_QWORD *)(v26 + 16);
              v30 = *(unsigned __int16 *)(v26 + 28);
              v31 = *((_DWORD *)this + 50);
              v32 = v31;
              if (*(_WORD *)(v26 + 28))
              {
                v33 = *(_DWORD *)(v26 + 24);
                v34 = *v13;
                v35 = v30;
                v32 = *((_DWORD *)this + 50);
                do
                {
                  v36 = *(_WORD *)(v34 + 2 * v33);
                  if (v32 == *((_DWORD *)this + 51))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                    v32 = *((_DWORD *)this + 50);
                    v34 = *((_QWORD *)this + 24);
                  }
                  *(_WORD *)(v34 + 2 * v32++) = v36;
                  *((_DWORD *)this + 50) = v32;
                  ++v33;
                  --v35;
                }
                while (v35);
              }
              if (v32 == *((_DWORD *)this + 51))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                v32 = *((_DWORD *)this + 50);
              }
              *(_WORD *)(*((_QWORD *)this + 24) + 2 * v32) = v28;
              *((_DWORD *)this + 50) = v32 + 1;
              v37 = *((unsigned int *)this + 66);
              if (v37 == *((_DWORD *)this + 67))
              {
                DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v105, 1, 1);
                v37 = *((unsigned int *)this + 66);
              }
              v38 = *((_QWORD *)this + 32) + 32 * v37;
              *(_DWORD *)v38 = v25;
              *(_QWORD *)(v38 + 4) = v27;
              *(_WORD *)(v38 + 12) = v28;
              *(_WORD *)(v38 + 14) = v118;
              *(_QWORD *)(v38 + 16) = v29;
              *(_DWORD *)(v38 + 24) = v31;
              *(_WORD *)(v38 + 28) = v30 + 1;
              v39 = *((_DWORD *)this + 66) + 1;
              *((_DWORD *)this + 66) = v39;
              v15 = v110;
              v10 = v108;
              if (v21 == v110)
              {
                v40 = v109;
                if (HIDWORD(v108) == 2 * *((_DWORD *)this + 4))
                  v40 = v39;
                ++HIDWORD(v108);
                v109 = v40;
              }
              v16 = v102;
              LODWORD(v12) = v103;
              v20 = v116;
            }
            ++v21;
          }
          while (v21 != v20);
        }
        v41 = v12;
        v42 = v16;
        do
        {
          v43 = *((_QWORD *)this + 5);
          v44 = *(_QWORD *)(v43 + 152);
          v45 = *(_DWORD *)(v44 + 4 * v42);
          v46 = *(_DWORD *)(v43 + 140);
          v113 = *(_DWORD *)(v44 + 4 * (v42 + 1));
          v104 = v42;
          if (v46 <= v113)
          {
            if (*((_BYTE *)this + 404))
              v66 = v46 <= (int)v16;
            else
              v66 = 0;
            if (v66)
            {
              v67 = (v45 & 0xFFFFF) <= 0xFFFF3 ? v45 & 0xFFFFF : v45 & 0xFFFFF | 0xF00000;
              if (v67 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v132);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v67, (DgnString *)&v132, v68, v69, v70, v71, v72);
                v77 = &unk_209A6C820;
                if (v132.i32[2])
                  v77 = (void *)v132.i64[0];
                xprintf("Seed from state %d score %d trace %d, %s\n", v73, v74, v75, v76, v16, *(unsigned int *)(*((_QWORD *)this + 30) + 32 * v15), *(unsigned int *)(*((_QWORD *)this + 30) + 32 * v15 + 8), v77);
                MiniFst::seed((uint64_t)this + 288, *(_DWORD *)(*((_QWORD *)this + 30) + 32 * v15), *(_DWORD *)(*((_QWORD *)this + 30) + 32 * v15 + 20), *(_DWORD *)(*((_QWORD *)this + 30) + 32 * v15 + 8), v113);
                DgnString::~DgnString((DgnString *)&v132);
              }
            }
          }
          else
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 70) >= 5000)
              v47 = 5000;
            else
              v47 = *((_DWORD *)this + 19) + *((_DWORD *)this + 70);
            v111 = (v45 >> 20) & 0x3FF;
            v112 = *(_DWORD *)(v44 + 4 * v42);
            v48 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)v112, *(_DWORD *)(*((_QWORD *)this + 30) + 32 * v15) + ((v112 >> 20) & 0x3FF), v47);
            if (v101 < v12)
            {
              v49 = v48 - *(_DWORD *)(*((_QWORD *)this + 30) + 32 * v15);
              v50 = v15;
              v107 = v49;
              do
              {
                v51 = *((_QWORD *)this + 30) + 32 * v50;
                v52 = *(_DWORD *)v51 + v49;
                v53 = *((_DWORD *)this + 70);
                if (v52 - v10 <= v53)
                {
                  v54 = v41;
                  if (v53 > v52)
                    *v106 = v52;
                  v119 = *(_WORD *)(v51 + 14);
                  v114 = *(_DWORD *)(v51 + 16);
                  v115 = *(_DWORD *)(v51 + 8);
                  v117 = *(_DWORD *)(v51 + 20);
                  v55 = *(unsigned __int16 *)(v51 + 28);
                  v56 = *((_DWORD *)this + 50);
                  v57 = v56;
                  if (*(_WORD *)(v51 + 28))
                  {
                    v58 = *(_DWORD *)(v51 + 24);
                    v59 = *v13;
                    v60 = v55;
                    v57 = *((_DWORD *)this + 50);
                    do
                    {
                      v61 = *(_WORD *)(v59 + 2 * v58);
                      if (v57 == *((_DWORD *)this + 51))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                        v57 = *((_DWORD *)this + 50);
                        v59 = *((_QWORD *)this + 24);
                      }
                      *(_WORD *)(v59 + 2 * v57++) = v61;
                      *((_DWORD *)this + 50) = v57;
                      ++v58;
                      --v60;
                    }
                    while (v60);
                  }
                  if (v57 == *((_DWORD *)this + 51))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                    v57 = *((_DWORD *)this + 50);
                  }
                  v45 = v112;
                  *(_WORD *)(*((_QWORD *)this + 24) + 2 * v57) = v112;
                  *((_DWORD *)this + 50) = v57 + 1;
                  v62 = *((unsigned int *)this + 66);
                  v41 = v54;
                  if (v62 == *((_DWORD *)this + 67))
                  {
                    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v105, 1, 1);
                    v62 = *((unsigned int *)this + 66);
                  }
                  v63 = *((_QWORD *)this + 32) + 32 * v62;
                  *(_DWORD *)v63 = v52;
                  *(_DWORD *)(v63 + 4) = v113;
                  *(_DWORD *)(v63 + 8) = v115;
                  *(_WORD *)(v63 + 12) = v112;
                  *(_WORD *)(v63 + 14) = v119;
                  *(_DWORD *)(v63 + 16) = v114 + v111;
                  *(_DWORD *)(v63 + 20) = v117;
                  *(_DWORD *)(v63 + 24) = v56;
                  *(_WORD *)(v63 + 28) = v55 + 1;
                  v64 = *((_DWORD *)this + 66) + 1;
                  *((_DWORD *)this + 66) = v64;
                  v15 = v110;
                  v10 = v108;
                  if (v50 == v110)
                  {
                    v65 = v109;
                    if (HIDWORD(v108) == 2 * *((_DWORD *)this + 4))
                      v65 = v64;
                    ++HIDWORD(v108);
                    v109 = v65;
                  }
                  v49 = v107;
                }
                ++v50;
              }
              while (v50 != v41);
            }
          }
          v42 = v104 + 2;
          v16 = v102;
          LODWORD(v12) = v103;
        }
        while ((v45 & 0x80000000) == 0);
        v11 = *((_DWORD *)this + 62);
      }
    }
    while (v12 < v11);
    a3 = *v106;
    v8 = v100;
    a4 = v99;
    a5 = v98;
    v79 = HIDWORD(v108);
    v78 = v109;
  }
  else
  {
    v79 = 0;
    v78 = 0;
  }
  v134 = a3 + v10;
  if (*((_BYTE *)this + 404))
    MiniFst::updateFrame((char *)this + 288, v106, v10, v8);
  v132 = 0u;
  v133 = 0u;
  SnapTime::recordTime((SnapTime *)&v132, 1, 0, 0, 0);
  v132 = vsubq_s64(v132, v135);
  v133 = vsubq_s64(v133, v136);
  v80 = (int64x2_t *)*((_QWORD *)this + 13);
  v81 = vaddq_s64(v80[1], v133);
  *v80 = vaddq_s64(*v80, v132);
  v80[1] = v81;
  v130 = 0u;
  v131 = 0u;
  SnapTime::recordTime((SnapTime *)&v130, 1, 0, 0, 0);
  if (v79 > 2 * *((_DWORD *)this + 4))
    FstSearchLeafLatticeBackoff::applyCutoffOnEmitting((uint64_t)this, v78, &v134);
  v128 = 0u;
  v129 = 0u;
  SnapTime::recordTime((SnapTime *)&v128, 1, 0, 0, 0);
  v82 = vsubq_s64(v128, v130);
  v83 = (int64x2_t *)*((_QWORD *)this + 13);
  v84 = v83[3];
  v85 = vaddq_s64(v83[2], v82);
  v128 = v82;
  v129 = vsubq_s64(v129, v131);
  v86 = vaddq_s64(v84, v129);
  v83[2] = v85;
  v83[3] = v86;
  v126 = 0u;
  v127 = 0u;
  SnapTime::recordTime((SnapTime *)&v126, 1, 0, 0, 0);
  FstSearchLeafLatticeBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v87 = *((unsigned int *)this + 6);
  if ((_DWORD)v87)
  {
    v88 = *((unsigned int *)this + 62);
    if (v87 < v88)
      mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(*((_QWORD *)this + 30), v87, v88);
  }
  v124 = 0u;
  v125 = 0u;
  SnapTime::recordTime((SnapTime *)&v124, 1, 0, 0, 0);
  v89 = vsubq_s64(v124, v126);
  v90 = (int64x2_t *)*((_QWORD *)this + 13);
  v91 = v90[5];
  v92 = vaddq_s64(v90[4], v89);
  v124 = v89;
  v125 = vsubq_s64(v125, v127);
  v93 = vaddq_s64(v91, v125);
  v90[4] = v92;
  v90[5] = v93;
  v122 = 0u;
  v123 = 0u;
  SnapTime::recordTime((SnapTime *)&v122, 1, 0, 0, 0);
  *((_DWORD *)this + 66) = 0;
  v94 = *((unsigned int *)this + 62);
  *((_DWORD *)this + 38) = v94;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v94;
    if (*((_DWORD *)a4 + 2) > v94)
      LODWORD(v94) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v94;
  }
  if (*((_BYTE *)this + 404))
    FstSearchLeafLatticeBackoff::seedFromMiniFst((uint64_t)this, v137);
  if (a5)
    FstSearchLeafLatticeBackoff::propagateNulls((uint64_t)this, v134, v8, a4);
  *((_DWORD *)this + 68) = v8;
  v120 = 0u;
  v121 = 0u;
  SnapTime::recordTime((SnapTime *)&v120, 1, 0, 0, 0);
  v95 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v95[6], vsubq_s64(v120, v122));
  v97 = vaddq_s64(v95[7], vsubq_s64(v121, v123));
  v95[6] = result;
  v95[7] = v97;
  return result;
}

void sub_20983DD1C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLeafLatticeBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(unsigned int *)(this + 264);
  if (v4 > a2)
  {
    v6 = this;
    v7 = (_QWORD *)(this + 256);
    v8 = a2;
    this = mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(*(_QWORD *)(this + 256), a2, v4);
    v9 = *(_DWORD *)(*v7 + 32 * a2);
    if (*a3 > v9)
      *a3 = v9;
    v10 = *(_DWORD *)(v6 + 268);
    if (a2 > v10)
      this = DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v7, a2 - v10, 0);
    v11 = *(unsigned int *)(v6 + 264);
    if (v11 < a2)
    {
      v12 = v8 - v11;
      v13 = 32 * v11;
      do
      {
        v14 = *v7 + v13;
        *(_QWORD *)v14 = 0xFFFFFFFF00000000;
        *(_DWORD *)(v14 + 8) = -1;
        *(_WORD *)(v14 + 12) = -2;
        *(_QWORD *)(v14 + 16) = 0;
        *(_QWORD *)(v14 + 22) = 0;
        v13 += 32;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 264) = a2;
  }
  return this;
}

uint64_t FstSearchLeafLatticeBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int i;
  int v10;
  int *v11;
  int v12;
  int v13;
  _OWORD *v14;
  __int128 v15;

  v1 = this;
  v2 = *(unsigned int *)(this + 264);
  if ((_DWORD)v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 256), v2, 32);
    v3 = *(_DWORD *)(v1 + 264);
    *(_DWORD *)(v1 + 248) = 0;
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0;
      do
      {
        v7 = *(_QWORD *)(v1 + 256);
        if (v5 && (v8 = v7 + 32 * v5, *(_DWORD *)(v8 + 4) == *(_DWORD *)(v8 - 28)))
        {
          if (v4 >= *(_DWORD *)(v1 + 20) + v6)
            goto LABEL_16;
          i = v6;
          if (v6 < v4)
          {
            v10 = *(_DWORD *)(v7 + 32 * v5 + 20);
            v11 = (int *)(*(_QWORD *)(v1 + 240) + 32 * v6 + 20);
            for (i = v6; v4 != i; ++i)
            {
              v12 = *v11;
              v11 += 8;
              if (v12 == v10)
                break;
            }
          }
          if (i != v4)
            goto LABEL_16;
          v13 = *(_DWORD *)(v1 + 252);
        }
        else
        {
          v8 = v7 + 32 * v5;
          v13 = *(_DWORD *)(v1 + 252);
          v6 = v4;
        }
        if (v4 == v13)
        {
          this = DgnArray<PrefilterResultFrame>::reallocElts(v1 + 240, 1, 1);
          v4 = *(_DWORD *)(v1 + 248);
        }
        v14 = (_OWORD *)(*(_QWORD *)(v1 + 240) + 32 * v4);
        v15 = *(_OWORD *)(v8 + 16);
        *v14 = *(_OWORD *)v8;
        v14[1] = v15;
        v4 = *(_DWORD *)(v1 + 248) + 1;
        *(_DWORD *)(v1 + 248) = v4;
LABEL_16:
        ++v5;
      }
      while (v5 < *(unsigned int *)(v1 + 264));
    }
  }
  else
  {
    *(_DWORD *)(this + 248) = 0;
  }
  return this;
}

uint64_t mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  if (a3 >= 2)
  {
    v3 = 0;
    do
    {
      v4 = (_DWORD *)(result + 32 * v3);
      v5 = 0;
      if ((result & 7) != 0)
      {
        v6 = &v4[8 * (a3 >> 1)];
        do
        {
          v7 = *((_BYTE *)v4 + v5);
          *((_BYTE *)v4 + v5) = *((_BYTE *)v6 + v5);
          *((_BYTE *)v6 + v5++) = v7;
        }
        while (v5 != 32);
      }
      else
      {
        v8 = result + 32 * (v3 + (a3 >> 1));
        do
        {
          v9 = *(_QWORD *)((char *)v4 + v5);
          *(_QWORD *)((char *)v4 + v5) = *(_QWORD *)(v8 + v5);
          *(_QWORD *)(v8 + v5) = v9;
          v5 += 8;
        }
        while (v5 != 32);
      }
      v10 = (_DWORD *)(result + 32 * (v3 + a3) - 32);
      v11 = (_DWORD *)(result + 32 * v3);
      do
      {
        v12 = v11 + 8;
        while (1)
        {
          v11 = v12;
          if (v12 >= v10)
            break;
          v12 += 8;
          if (*v11 > *v4)
          {
            v13 = (char *)v11;
            while (*v10 >= *v4)
            {
              v10 -= 8;
              if (v11 >= v10)
                goto LABEL_22;
            }
            v14 = 0;
            if ((result & 7) != 0)
            {
              do
              {
                v15 = *v13;
                *v13++ = *((_BYTE *)v10 + v14);
                *((_BYTE *)v10 + v14++) = v15;
              }
              while (v14 != 32);
            }
            else
            {
              do
              {
                v16 = *(_QWORD *)v13;
                *(_QWORD *)v13 = *(_QWORD *)((char *)v10 + v14);
                v13 += 8;
                *(_QWORD *)((char *)v10 + v14) = v16;
                v14 += 8;
              }
              while (v14 != 32);
            }
            v10 -= 8;
            break;
          }
        }
LABEL_22:
        ;
      }
      while (v11 < v10);
      if (*v11 > *v4)
        v11 -= 8;
      v17 = (char *)v11 - (char *)v4;
      if (v11 > v4)
      {
        v18 = 0;
        if ((result & 7) != 0)
        {
          do
          {
            v19 = *((_BYTE *)v11 + v18);
            *((_BYTE *)v11 + v18) = *((_BYTE *)v4 + v18);
            *((_BYTE *)v4 + v18++) = v19;
          }
          while (v18 != 32);
        }
        else
        {
          do
          {
            v20 = *(_QWORD *)((char *)v11 + v18);
            *(_QWORD *)((char *)v11 + v18) = *(_QWORD *)((char *)v4 + v18);
            *(_QWORD *)((char *)v4 + v18) = v20;
            v18 += 8;
          }
          while (v18 != 32);
        }
      }
      v21 = v17 >> 5;
      if (v17 >> 5 <= a2)
      {
        if (v17 >> 5 >= a2)
          return result;
        v22 = v21 + 1;
        v3 += v22;
        a2 -= v22;
        v21 = a3 - v22;
      }
      a3 = v21;
    }
    while (v21 > 1);
  }
  return result;
}

uint64_t FstSearchLeafLatticeBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (*(_BYTE *)(this + 404))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 312);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v46 = this + 176;
      v5 = (_QWORD *)(this + 160);
      v39 = this + 240;
      do
      {
        v6 = (int *)(*(_QWORD *)(v2 + 304) + 36 * v4);
        v7 = v6[4];
        v43 = *v6;
        v44 = v6[5];
        v8 = v6[6];
        v45 = v6[7];
        v9 = v6[2];
        v47 = 0;
        v48 = 0;
        v41 = v8;
        v42 = v7;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          v10 = 0;
          v11 = 0;
          do
          {
            if (v11 == HIDWORD(v48))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v47, 1, 1);
              v11 = v48;
              v10 = v47;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            v12 = v48;
            v11 = v48 + 1;
            LODWORD(v48) = v48 + 1;
            v9 = *(_DWORD *)(*(_QWORD *)(v2 + 288) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            v14 = v12 + 1;
            v15 = 4 * v12;
            do
            {
              v16 = *(_DWORD *)(v47 + v15);
              v17 = *(_QWORD *)(v2 + 288);
              v18 = (int *)(v17 + 36 * v16);
              v19 = *v18;
              v20 = *((_QWORD *)v18 + 2);
              v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<CWIDAC>::reallocElts(v46, 1, 1);
                v21 = *(_DWORD *)(v2 + 184);
                v17 = *(_QWORD *)(v2 + 288);
              }
              v22 = *(_QWORD *)(v2 + 176) + 24 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)v22 = v19;
              *(_QWORD *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = 0;
              *(_WORD *)(v22 + 20) = 0;
              v23 = *(_QWORD *)(v17 + 36 * v16 + 28);
              v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                v24 = *(unsigned int *)(v2 + 168);
              }
              v25 = *(_QWORD *)(v2 + 160);
              v26 = v25 + 16 * v24;
              *(_QWORD *)v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<CWIDAC>::reallocElts(v46, 1, 1);
          v27 = *(_DWORD *)(v2 + 184);
        }
        v28 = *(_QWORD *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        v29 = v28 + 24 * v27;
        *(_DWORD *)v29 = v43;
        *(_DWORD *)(v29 + 4) = v42;
        *(_DWORD *)(v29 + 8) = v44;
        *(_DWORD *)(v29 + 12) = v13;
        *(_DWORD *)(v29 + 16) = 0;
        *(_WORD *)(v29 + 20) = 0;
        if (v45 == 16777213)
        {
          v45 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v13) == 16777209)
          {
            v27 = *(_DWORD *)(*v5 + 16 * v13 + 8);
            v45 = 16777209;
          }
        }
        v30 = *a2;
        v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          v31 = *(unsigned int *)(v2 + 168);
        }
        v32 = *(_QWORD *)(v2 + 160);
        v33 = (int *)(v32 + 16 * v31);
        *v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        v35 = *(unsigned int *)(v2 + 248);
        if (v35 == *(_DWORD *)(v2 + 252))
        {
          DgnArray<PrefilterResultFrame>::reallocElts(v39, 1, 1);
          v35 = *(unsigned int *)(v2 + 248);
        }
        v36 = *(_QWORD *)(v2 + 240) + 32 * v35;
        *(_DWORD *)v36 = v43;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v42;
        *(_QWORD *)(v36 + 20) = v44;
        *(_WORD *)(v36 + 28) = 0;
        ++*(_DWORD *)(v2 + 248);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 312);
        v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38)
          v37 = v38;
        else
          v37 = v37;
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_20983E460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeBackoff::propagateNulls(uint64_t this, int a2, int a3, SearchStats *a4)
{
  int v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  __int16 v28;
  int v29;
  int v30;
  __int16 v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  __int16 v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  __int16 v50;
  int *v51;
  int v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int *v66;
  int v67;
  __int128 v68;
  _OWORD *v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  SearchStats *v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v81;
  __int16 v82;
  unsigned int v83;
  int v84;
  _QWORD *v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;

  v4 = *(_DWORD *)(this + 168);
  v5 = (uint64_t *)(this + 240);
  LODWORD(v6) = *(_DWORD *)(this + 248);
  v87 = this;
  if ((_DWORD)v6)
  {
    v74 = *(_DWORD *)(this + 168);
    v75 = a4;
    LODWORD(v7) = 0;
    v85 = (_QWORD *)(this + 160);
    v81 = this + 176;
    v90 = this + 240;
    v89 = a2;
    do
    {
      v8 = v7;
      v9 = *(unsigned int *)(*v5 + 32 * v7 + 4);
      if (v6 <= (int)v7 + 1)
        v10 = v7 + 1;
      else
        v10 = v6;
      v79 = v7;
      while (v10 - 1 != (_DWORD)v7)
      {
        v7 = (v7 + 1);
        if (*(_DWORD *)(*v5 + 32 * v7 + 4) != (_DWORD)v9)
          goto LABEL_11;
      }
      LODWORD(v7) = v10;
LABEL_11:
      v11 = *(_QWORD *)(this + 40);
      if (*(_DWORD *)(v11 + 160) != (_DWORD)v9
        && (*(_DWORD *)(v11 + 140) <= (int)v9 || (*(_DWORD *)(*(_QWORD *)(v11 + 152) + 4 * v9) & 0x40000000) != 0))
      {
        v93 = 32 * v8;
        v77 = v9;
        v78 = v7;
        v76 = v7 - v79;
        v12 = v9;
        do
        {
          v13 = *(_QWORD *)(this + 40);
          v14 = *(_QWORD *)(v13 + 152);
          v83 = v12;
          v88 = *(_DWORD *)(v14 + 4 * v12);
          v15 = *(_DWORD *)(v13 + 140);
          v92 = *(_DWORD *)(v14 + 4 * (v12 + 1));
          if (v15 <= v92)
          {
            v16 = (v88 & 0xFFFFF) <= 0xFFFF3 ? v88 & 0xFFFFF : v88 & 0xFFFFF | 0xF00000;
            v17 = v16 != 16777210 && v15 <= v77;
            if (!v17 && v78 > v79)
            {
              v19 = 0;
              v20 = (v88 >> 20) & 0x3FF;
              v84 = v16 + 1;
              v21 = v76;
              v91 = v16;
              do
              {
                v22 = *v5;
                v23 = *v5 + v93;
                v24 = *(_DWORD *)(v23 + v19) + v20;
                if (v24 > a2)
                  break;
                v25 = v23 + v19;
                v26 = *(_DWORD *)(v25 + 8);
                v27 = *(_WORD *)(v25 + 12);
                v28 = *(_WORD *)(v25 + 14);
                v29 = *(_DWORD *)(v25 + 20);
                v30 = *(_DWORD *)(v25 + 24);
                v31 = *(_WORD *)(v25 + 28);
                v32 = *(_DWORD *)(v25 + 16) + v20;
                if (v16 == 16777210)
                {
                  v41 = *(unsigned int *)(this + 248);
                  if (v41 == *(_DWORD *)(this + 252))
                  {
                    v42 = (uint64_t)v5;
                    v43 = v30;
                    v44 = v28;
                    v45 = v32;
                    v46 = v27;
                    DgnArray<PrefilterResultFrame>::reallocElts(v42, 1, 1);
                    a2 = v89;
                    v27 = v46;
                    v32 = v45;
                    v28 = v44;
                    v30 = v43;
                    v5 = (uint64_t *)v90;
                    v20 = (v88 >> 20) & 0x3FF;
                    v16 = v91;
                    this = v87;
                    v41 = *(unsigned int *)(v87 + 248);
                    v22 = *(_QWORD *)(v87 + 240);
                  }
                  v47 = v22 + 32 * v41;
                  *(_DWORD *)v47 = v24;
                  *(_DWORD *)(v47 + 4) = v92;
                  *(_DWORD *)(v47 + 8) = v26;
                  *(_WORD *)(v47 + 12) = v27;
                  *(_WORD *)(v47 + 14) = v28;
                  *(_DWORD *)(v47 + 16) = v32;
                  *(_DWORD *)(v47 + 20) = v29;
                  *(_DWORD *)(v47 + 24) = v30;
                  *(_WORD *)(v47 + 28) = v31;
                  ++*(_DWORD *)(this + 248);
                }
                else
                {
                  if (v16 == 16777214)
                    v33 = *(_DWORD *)(v25 + 16) + v20;
                  else
                    v33 = 0;
                  v86 = *(_DWORD *)(v25 + 16) + v20;
                  if (v16 == 16777214)
                    v34 = 0;
                  else
                    v34 = *(_DWORD *)(v25 + 16) + v20;
                  v35 = *(_DWORD *)(this + 184);
                  if (v35 == *(_DWORD *)(this + 188))
                  {
                    v36 = *(_DWORD *)(v25 + 24);
                    v82 = *(_WORD *)(v25 + 14);
                    v37 = *(_WORD *)(v25 + 12);
                    DgnArray<CWIDAC>::reallocElts(v81, 1, 1);
                    v27 = v37;
                    v28 = v82;
                    v30 = v36;
                    v20 = (v88 >> 20) & 0x3FF;
                    v16 = v91;
                    this = v87;
                    v35 = *(_DWORD *)(v87 + 184);
                  }
                  v38 = v84 + 2 * v29;
                  v39 = *(_QWORD *)(this + 176) + 24 * v35;
                  *(_DWORD *)(this + 184) = v35 + 1;
                  *(_DWORD *)v39 = v24 - v33;
                  *(_DWORD *)(v39 + 4) = v34;
                  *(_DWORD *)(v39 + 8) = v38;
                  *(_DWORD *)(v39 + 12) = v26;
                  *(_DWORD *)(v39 + 16) = v30;
                  *(_WORD *)(v39 + 20) = v31;
                  v40 = *(_DWORD *)(this + 168);
                  if (v19)
                  {
                    v5 = (uint64_t *)v90;
                    a2 = v89;
                  }
                  else
                  {
                    v5 = (uint64_t *)v90;
                    if (v40 == *(_DWORD *)(this + 172))
                    {
                      v48 = v30;
                      v49 = v28;
                      v50 = v27;
                      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v85, 1, 1);
                      v27 = v50;
                      v28 = v49;
                      v30 = v48;
                      v20 = (v88 >> 20) & 0x3FF;
                      v16 = v91;
                      this = v87;
                      v40 = *(_DWORD *)(v87 + 168);
                    }
                    v51 = (int *)(*(_QWORD *)(this + 160) + 16 * v40);
                    *v51 = v16;
                    v51[1] = a3;
                    v51[2] = v35;
                    v51[3] = 0;
                    v52 = *(_DWORD *)(this + 168);
                    *(_DWORD *)(this + 168) = v52 + 1;
                    v53 = *(unsigned int *)(this + 248);
                    if (v53 == *(_DWORD *)(this + 252))
                    {
                      v54 = v30;
                      v55 = v28;
                      v56 = v27;
                      DgnArray<PrefilterResultFrame>::reallocElts(v90, 1, 1);
                      v27 = v56;
                      v28 = v55;
                      v30 = v54;
                      v20 = (v88 >> 20) & 0x3FF;
                      v16 = v91;
                      this = v87;
                      v53 = *(unsigned int *)(v87 + 248);
                    }
                    v57 = *(_QWORD *)(this + 240) + 32 * v53;
                    *(_DWORD *)v57 = v24;
                    *(_DWORD *)(v57 + 4) = v92;
                    *(_DWORD *)(v57 + 8) = v52;
                    *(_WORD *)(v57 + 12) = v27;
                    *(_WORD *)(v57 + 14) = v28;
                    *(_DWORD *)(v57 + 16) = v86;
                    *(_DWORD *)(v57 + 20) = v38;
                    *(_DWORD *)(v57 + 24) = v30;
                    *(_WORD *)(v57 + 28) = 0;
                    ++*(_DWORD *)(this + 248);
                    v40 = *(_DWORD *)(this + 168);
                    a2 = v89;
                  }
                  v58 = *v85 + 16 * (v40 - 1);
                  ++*(_DWORD *)(v58 + 12);
                }
                v19 += 32;
                --v21;
              }
              while (v21);
            }
          }
          v12 = v83 + 2;
        }
        while ((v88 & 0x80000000) == 0);
        LODWORD(v6) = *(_DWORD *)(this + 248);
        LODWORD(v7) = v78;
      }
    }
    while (v7 < v6);
    v59 = *(unsigned int *)(this + 152);
    if (v6 > v59)
    {
      mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*(_QWORD *)(this + 240) + 32 * v59), (v6 - v59), 32);
      this = v87;
      v59 = *(unsigned int *)(v87 + 152);
      LODWORD(v6) = *(_DWORD *)(v87 + 248);
    }
    if (v59 < v6)
    {
      v60 = v59;
      v61 = v59;
      do
      {
        v62 = *v5;
        v63 = *v5 + 32 * v60;
        v64 = v59;
        if (*(_DWORD *)(v63 + 4) != *(_DWORD *)(*v5 + 32 * (v60 - 1) + 4))
          goto LABEL_65;
        if ((v59 - v61) < *(_DWORD *)(this + 20))
        {
          v65 = v61;
          if (v59 > v61)
          {
            v66 = (int *)(v62 + 32 * v61 + 20);
            v65 = v61;
            while (1)
            {
              v67 = *v66;
              v66 += 8;
              if (v67 == *(_DWORD *)(v62 + 32 * v60 + 20))
                break;
              if ((_DWORD)v59 == ++v65)
              {
                v64 = v61;
                goto LABEL_65;
              }
            }
          }
          v64 = v61;
          if (v65 == (_DWORD)v59)
          {
LABEL_65:
            v68 = *(_OWORD *)v63;
            v69 = (_OWORD *)(v62 + 32 * v59);
            *(_OWORD *)((char *)v69 + 14) = *(_OWORD *)(v63 + 14);
            *v69 = v68;
            v59 = (v59 + 1);
            v61 = v64;
          }
        }
        ++v60;
        v6 = *(unsigned int *)(this + 248);
      }
      while (v60 < v6);
    }
    a4 = v75;
    v4 = v74;
    if (v75)
      goto LABEL_68;
  }
  else
  {
    LODWORD(v59) = *(_DWORD *)(this + 152);
    if (a4)
LABEL_68:
      *((_DWORD *)a4 + 1) += *(_DWORD *)(this + 168) - v4;
  }
  v70 = *(_DWORD *)(this + 252);
  if (v59 > v70)
  {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v5, v59 - v70, 0);
    this = v87;
    LODWORD(v6) = *(_DWORD *)(v87 + 248);
  }
  if (v6 < v59)
  {
    v71 = v59 - (unint64_t)v6;
    v72 = 32 * v6;
    do
    {
      v73 = *v5 + v72;
      *(_QWORD *)v73 = 0xFFFFFFFF00000000;
      *(_DWORD *)(v73 + 8) = -1;
      *(_WORD *)(v73 + 12) = -2;
      *(_QWORD *)(v73 + 16) = 0;
      *(_QWORD *)(v73 + 22) = 0;
      v72 += 32;
      --v71;
    }
    while (v71);
  }
  *(_DWORD *)(this + 248) = v59;
  return this;
}

uint64_t FstSearchLeafLatticeBackoff::collectTraces(FstSearchLeafLatticeBackoff *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  __int16 v42;
  unsigned int v43;
  unint64_t v44;
  _OWORD *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _WORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t *v58;
  _DWORD *v59;
  uint64_t v60;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;

  v2 = *((unsigned int *)this + 42);
  v66 = 0;
  v65 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v65 = v3;
    v66 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v66);
  }
  v5 = *((unsigned int *)this + 62);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v65;
    v8 = (unsigned int *)(*((_QWORD *)this + 30) + 8);
    do
    {
      v10 = *v8;
      v8 += 8;
      v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        v5 = *((unsigned int *)this + 62);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v11) = *((_DWORD *)this + 42);
  if (!(_DWORD)v11)
  {
    v63 = 0;
    v64 = 0;
LABEL_54:
    v25 = 0;
    *((_DWORD *)this + 42) = 0;
    goto LABEL_55;
  }
  v12 = 0;
  v13 = (uint64_t *)((char *)this + 160);
  v14 = v65;
  v15 = (uint64_t *)((char *)this + 176);
  do
  {
    v11 = (v11 - 1);
    if ((v12 & 1) != 0)
    {
      v12 = 1;
    }
    else if (*(_DWORD *)(*v13 + 16 * v11) == 16777213)
    {
      v12 = 1;
      *((_DWORD *)v14 + v11) = 1;
    }
    else
    {
      v12 = 0;
    }
    if (*((_DWORD *)v14 + v11))
    {
      v16 = *v13 + 16 * v11;
      v17 = *(_DWORD *)(v16 + 12);
      if (v17 >= 1)
      {
        v18 = *(_DWORD *)(v16 + 8);
        v19 = v17 + v18;
        v20 = *v15;
        do
        {
          v21 = *(unsigned int *)(v20 + 24 * v18 + 12);
          if ((_DWORD)v21 != -1)
            *((_DWORD *)v14 + v21) = 1;
          ++v18;
        }
        while ((int)v18 < v19);
      }
    }
  }
  while ((_DWORD)v11);
  v22 = *((_DWORD *)this + 42);
  v63 = 0;
  v64 = 0;
  if (!v22)
    goto LABEL_54;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  do
  {
    if (*((_DWORD *)v65 + v23))
    {
      v26 = *v13;
      v62 = v24;
      if (v23 != v24)
      {
        *(_OWORD *)(v26 + 16 * v24) = *(_OWORD *)(v26 + 16 * v23);
        v26 = *v13;
      }
      *(_DWORD *)(v26 + 16 * v24 + 8) = v25;
      v27 = v26 + 16 * v23;
      v28 = *(unsigned int *)(v27 + 8);
      v29 = (*(_DWORD *)(v27 + 12) + v28);
      if (v28 < v29)
      {
        v30 = *v15;
        do
        {
          v31 = v25;
          if (v28 != v25)
          {
            v32 = (__int128 *)(v30 + 24 * v28);
            v33 = v30 + 24 * v25;
            v34 = *v32;
            *(_QWORD *)(v33 + 14) = *(_QWORD *)((char *)v32 + 14);
            *(_OWORD *)v33 = v34;
            v30 = *v15;
          }
          v35 = v30 + 24 * v25;
          v38 = *(_DWORD *)(v35 + 12);
          v36 = (_DWORD *)(v35 + 12);
          v37 = v38;
          if (v38 != -1)
            *v36 = *((_DWORD *)v65 + v37);
          v39 = v64;
          if (*(_WORD *)(v30 + 24 * v31 + 20))
          {
            v40 = 0;
            v41 = v64;
            do
            {
              v42 = *(_WORD *)(*((_QWORD *)this + 24) + 2 * (v40 + *(_DWORD *)(v30 + 24 * v31 + 16)));
              if (v41 == HIDWORD(v64))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
                v41 = v64;
                v30 = *v15;
              }
              *(_WORD *)(v63 + 2 * v41++) = v42;
              LODWORD(v64) = v41;
              ++v40;
            }
            while (v40 < *(unsigned __int16 *)(v30 + 24 * v31 + 20));
          }
          *(_DWORD *)(v30 + 24 * v31 + 16) = v39;
          v25 = v31 + 1;
          ++v28;
        }
        while (v28 != v29);
      }
      *((_DWORD *)v65 + v23) = v62;
      v24 = v62 + 1;
      v22 = *((_DWORD *)this + 42);
      v13 = (uint64_t *)((char *)this + 160);
    }
    ++v23;
  }
  while (v23 < v22);
  v43 = *((_DWORD *)this + 43);
  if (v24 > v43)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v13, v24 - v43, 0);
    v22 = *((_DWORD *)this + 42);
  }
  if (v22 < v24)
  {
    v44 = v24 - (unint64_t)v22;
    v45 = (_OWORD *)(*v13 + 16 * v22);
    do
    {
      *v45++ = xmmword_209A6C7D0;
      --v44;
    }
    while (v44);
  }
  *((_DWORD *)this + 42) = v24;
  v46 = *((_DWORD *)this + 47);
  if (v25 > v46)
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 176, v25 - v46, 0);
  v47 = *((unsigned int *)this + 46);
  if (v47 < v25)
  {
    v48 = v25 - v47;
    v49 = (_WORD *)(*v15 + 24 * v47 + 20);
    do
    {
      *(_OWORD *)(v49 - 10) = xmmword_209A6C7C0;
      *((_DWORD *)v49 - 1) = 0;
      *v49 = 0;
      v49 += 12;
      --v48;
    }
    while (v48);
  }
LABEL_55:
  *((_DWORD *)this + 46) = v25;
  v50 = *((unsigned int *)this + 62);
  if ((_DWORD)v50)
  {
    v51 = 0;
    v52 = v64;
    v53 = *((_QWORD *)this + 30);
    do
    {
      if (*(_WORD *)(v53 + 32 * v51 + 28))
      {
        v54 = 0;
        LODWORD(v55) = v52;
        do
        {
          v56 = *(_WORD *)(*((_QWORD *)this + 24) + 2 * (v54 + *(_DWORD *)(v53 + 32 * v51 + 24)));
          if ((_DWORD)v55 == HIDWORD(v64))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
            LODWORD(v55) = v64;
            v53 = *((_QWORD *)this + 30);
          }
          *(_WORD *)(v63 + 2 * v55) = v56;
          v55 = (v55 + 1);
          LODWORD(v64) = v55;
          ++v54;
        }
        while (v54 < *(unsigned __int16 *)(v53 + 32 * v51 + 28));
        v50 = *((unsigned int *)this + 62);
      }
      else
      {
        v55 = v52;
      }
      *(_DWORD *)(v53 + 32 * v51++ + 24) = v52;
      v52 = v55;
    }
    while (v51 < v50);
  }
  else
  {
    LODWORD(v55) = v64;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 192, &v63, 0, v55);
  v57 = *((unsigned int *)this + 62);
  if ((_DWORD)v57)
  {
    v58 = v65;
    v59 = (_DWORD *)(*((_QWORD *)this + 30) + 8);
    do
    {
      v60 = *v59;
      if ((_DWORD)v60 != -1)
        *v59 = *((_DWORD *)v58 + v60);
      v59 += 8;
      --v57;
    }
    while (v57);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v63);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v65);
}

void sub_20983EED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafLatticeBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLeafLatticeBackoff::advanceDeltas((FstSearchLeafLatticeBackoff *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLeafLatticeBackoff::collectTraces((FstSearchLeafLatticeBackoff *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafLatticeBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  this[62] = 0;
  return this;
}

double FstSearchLeafLatticeBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLeafLatticeBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafLatticeBackoff::beginTopRecPassSyncRecog(FstSearchLeafLatticeBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 288, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 100) = result;
    *((_BYTE *)this + 404) = 1;
  }
  return result;
}

uint64_t FstSearchLeafLatticeBackoff::endTopRecPassSyncRecog(FstSearchLeafLatticeBackoff *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 70) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLeafLatticeBackoff::printSize(FstSearchLeafLatticeBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  int v126;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126)
    v15 = v125;
  else
    v15 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A6C820, a3, &unk_209A6C820, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A6C820);
  v20 = (a3 + 1);
  v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126)
    v26 = v125;
  else
    v26 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126)
    v31 = v125;
  else
    v31 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126)
    v36 = v125;
  else
    v36 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v36, 4, 4, 0);
  v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126)
    v41 = v125;
  else
    v41 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v42 = 16;
  v43 = *((unsigned int *)this + 42);
  v44 = 16 * v43;
  if ((int)v43 <= 0)
    v44 = 0;
  v45 = v44 + v42;
  v46 = v44 + v42 + 16 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126)
    v51 = v125;
  else
    v51 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 16;
  v53 = *((_DWORD *)this + 46);
  v54 = 22 * v53;
  if (v53 <= 0)
    v54 = 0;
  v55 = v54 + v52;
  v56 = v54 + v52 + 22 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126)
    v61 = v125;
  else
    v61 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v61, v56, v55, 0);
  v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v62 = 12;
  else
    v62 = 16;
  v63 = *((unsigned int *)this + 50);
  v64 = *((_DWORD *)this + 51);
  if (v64 >= v63)
  {
    v65 = 0;
    if ((int)v63 > 0)
      v62 = (v62 | 2) + 2 * (v63 - 1);
    v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    v65 = 2 * v63;
    v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126)
    v71 = v125;
  else
    v71 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_209A6C820, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v72 = 16;
  v73 = *((unsigned int *)this + 62);
  v74 = 28 * v73;
  if ((int)v73 <= 0)
    v74 = 0;
  v75 = v74 + v72;
  v76 = v74 + v72 + 28 * (*((_DWORD *)this + 63) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126)
    v81 = v125;
  else
    v81 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_209A6C820, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v82 = 16;
  v83 = *((unsigned int *)this + 66);
  v84 = 28 * v83;
  if ((int)v83 <= 0)
    v84 = 0;
  v85 = v84 + v82;
  v86 = v84 + v82 + 28 * (*((_DWORD *)this + 67) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126)
    v91 = v125;
  else
    v91 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_209A6C820, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126)
    v96 = v125;
  else
    v96 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_209A6C820, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126)
    v101 = v125;
  else
    v101 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_209A6C820, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126)
    v106 = v125;
  else
    v106 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_209A6C820, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v107 = sizeObject((uint64_t)this + 288, 0);
  v108 = sizeObject((uint64_t)this + 288, 1);
  v109 = sizeObject((uint64_t)this + 288, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126)
    v114 = v125;
  else
    v114 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_209A6C820, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  v123 = 0;
  v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126)
    v119 = v125;
  else
    v119 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_209A6C820, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_20983F8BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeBackoff::getBestTrace(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if ((a4 & 1) != 0)
    v4 = 0;
  else
    v4 = *(unsigned int *)(a1 + 152);
  v5 = *(unsigned int *)(a1 + 248);
  if (v4 >= v5)
    goto LABEL_21;
  v6 = 32 * v4;
  v7 = 1879048192;
  v8 = 0xFFFFFFFFLL;
  do
  {
    v9 = *(_QWORD *)(a1 + 240);
    if (!a4 || (v10 = *(unsigned int *)(v9 + v6 + 8), (_DWORD)v10 == -1))
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4))
        goto LABEL_19;
      v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2)
      *(_BYTE *)(*a2 + v10) = 1;
    if (a3)
      *(_BYTE *)(*a3 + v10) = 1;
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8))
        + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 4));
    if (v7 > v11)
      v8 = v10;
    if (v7 >= v11)
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8))
         + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 4));
    v5 = *(unsigned int *)(a1 + 248);
LABEL_19:
    ++v4;
    v6 += 32;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    v12 = *(unsigned int *)(a1 + 168);
    v8 = 0xFFFFFFFFLL;
    while (v12)
    {
      --v12;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v12) == 16777213)
      {
        if (a2)
          *(_BYTE *)(*a2 + v12) = 1;
        v8 = v12;
        if (a3)
          *(_BYTE *)(*a3 + v12) = 1;
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLeafLatticeBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLeafLatticeBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 24 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

unint64_t FstSearchLeafLatticeBackoff::createLatticeNodes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t result;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int Node;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int *v43;
  int v44;
  int v45;
  uint64_t **v47;
  uint64_t v48;
  int v49;
  uint64_t v50;

  v8 = a2;
  v9 = a1;
  v10 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v10)
    v11 = *((_DWORD *)a2 + 2) == 0;
  else
    v11 = 0;
  if (v11)
  {
    *a2 = MemChunkAlloc(4 * v10, 0);
    *((_DWORD *)v8 + 2) = v10;
  }
  result = Lattice<WordLatticeLC>::createNode(a4);
  v13 = result;
  v14 = *(_DWORD *)(a3 + 8);
  if (v14 == *(_DWORD *)(a3 + 12))
  {
    result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    v14 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  v15 = *(_DWORD *)(v9 + 168);
  v17 = a6;
  v16 = a7;
  if (v15)
  {
    result = 2;
    v18 = -1;
    v47 = v8;
    v48 = a3;
    v50 = v9;
    do
    {
      --v15;
      v19 = *v8;
      *((_DWORD *)*v8 + v15) = -1;
      if (*(_BYTE *)(*v17 + v15))
      {
        v20 = v15;
        v21 = *(_QWORD *)(v9 + 160);
        v22 = *(unsigned int *)(*(_QWORD *)(v9 + 88) + 4 * *(unsigned int *)(v21 + 16 * v15 + 4));
        if (*(_BYTE *)(*v16 + v15))
        {
          if (*(_BYTE *)(*v17 + v15) != 1 || v18 == -1)
          {
            Node = Lattice<WordLatticeLC>::createNode(a4);
            *((_DWORD *)*v8 + v15) = *(_DWORD *)(a3 + 8);
            v25 = *(unsigned int *)(a3 + 8);
            if (v25 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              v25 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v25) = Node;
            v26 = *(_DWORD *)(a3 + 8);
            *(_DWORD *)(a3 + 8) = v26 + 1;
            v17 = a6;
            v16 = a7;
            if (*(_BYTE *)(*a6 + v15) == 1)
              v18 = v26;
            v21 = *(_QWORD *)(v9 + 160);
            result = 2;
          }
          else
          {
            *((_DWORD *)v19 + v15) = v18;
          }
        }
        v27 = (unsigned int *)(v21 + 16 * v15);
        if ((int)v27[3] >= 1)
        {
          v49 = v18;
          v28 = *v27;
          v29 = v27[2];
          do
          {
            v30 = *(_QWORD *)(v9 + 176);
            v31 = v29;
            v32 = (_DWORD *)(v30 + 24 * v29);
            v33 = v32[3];
            if ((v32[3] & 0x80000000) != 0)
            {
              *v32 += v22;
            }
            else
            {
              if ((_DWORD)v28 == 16777209)
              {
                v34 = *a5 + 16 * v33;
                v36 = (_DWORD *)(v34 + 8);
                v35 = *(unsigned int *)(v34 + 8);
                v37 = *(_QWORD *)(v9 + 176);
                if (v35 == *(_DWORD *)(v34 + 12))
                {
                  v38 = v20;
                  v39 = v22;
                  v40 = v28;
                  DgnPrimArray<unsigned int>::reallocElts(v34, 1, 1);
                  v28 = v40;
                  v22 = v39;
                  v20 = v38;
                  v9 = v50;
                  v17 = a6;
                  result = 2;
                  v16 = a7;
                  v35 = *v36;
                  v21 = *(_QWORD *)(v50 + 160);
                  v37 = *(_QWORD *)(v50 + 176);
                }
                *(_DWORD *)(*(_QWORD *)v34 + 4 * v35) = v15;
                ++*v36;
                v33 = v32[3];
              }
              else
              {
                *(_BYTE *)(*v16 + v33) = 1;
                v37 = v30;
              }
              v41 = v21 + 16 * v33;
              v42 = *(_DWORD *)(*(_QWORD *)(v9 + 88) + 4 * *(unsigned int *)(v41 + 4));
              v43 = (int *)(v37 + 24 * *(unsigned int *)(v41 + 8));
              v44 = v22 + *v32 - v42;
              v45 = *v43;
              LODWORD(v43) = v43[1];
              *v32 = v44 - v45;
              *(_DWORD *)(v30 + 24 * v31 + 4) -= (_DWORD)v43;
              *(_BYTE *)(*v17 + v33) = 2;
              v21 = *(_QWORD *)(v9 + 160);
            }
            v29 = v31 + 1;
          }
          while ((int)(v31 + 1) < *(_DWORD *)(v21 + 16 * v20 + 12) + *(_DWORD *)(v21 + 16 * v20 + 8));
          v8 = v47;
          a3 = v48;
          v18 = v49;
        }
      }
    }
    while (v15);
  }
  return result;
}

uint64_t FstSearchLeafLatticeBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, unsigned __int8 a5)
{
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafLatticeBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  v22 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v22)
  {
    v9 = 0;
    v10 = v28;
    do
    {
      if (*(_BYTE *)(*a3 + v9))
      {
        v11 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v11 + 16 * v9) != 16777209)
        {
          v12 = v11 + 16 * v9;
          if (*(int *)(v12 + 12) >= 1)
          {
            v13 = *(_DWORD *)(v12 + 8);
            do
            {
              v14 = *(_QWORD *)(a1 + 176) + 24 * v13;
              v15 = *(unsigned int *)(v14 + 12);
              v25 = v13;
              if ((_DWORD)v15 == -1)
                v16 = 0;
              else
                v16 = v10 - *((_DWORD *)v29 + v15);
              v17 = *(unsigned int *)(v27 + 4 * v16);
              if (*(_BYTE *)(*a4 + v9))
                FstSearchLeafLatticeBackoff::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, 0xFFFFFFFFLL, v17, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v9))), a2, (uint64_t)v8, a5);
              v18 = v26[0];
              if (*(_DWORD *)(v26[0] + 16 * v9 + 8))
              {
                v19 = 0;
                do
                {
                  v20 = *(unsigned int *)(*(_QWORD *)(v18 + 16 * v9) + 4 * v19);
                  FstSearchLeafLatticeBackoff::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, v20, v17, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v20))), a2, (uint64_t)v8, a5);
                  ++v19;
                  v18 = v26[0];
                }
                while (v19 < *(unsigned int *)(v26[0] + 16 * v9 + 8));
              }
              v13 = v25 + 1;
            }
            while ((int)(v25 + 1) < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v9 + 12)
                                   + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v9 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v22);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_209840080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafLatticeBackoff::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v12;
  unsigned int v13;
  _DWORD *SilenceToken;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  ArcGraph *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _QWORD v34[2];
  _QWORD v35[2];
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __int128 v45;
  int v46;
  unint64_t v47;
  int v48;
  int v49;
  __int128 v50;
  _DWORD v51[2];
  __int128 v52;

  v12 = a5;
  v13 = a4;
  if ((a4 & 0x80000000) != 0)
    SilenceToken = 0;
  else
    SilenceToken = (_DWORD *)FstSearchLeafLatticeBackoff::getSilenceToken((FstSearchLeafLatticeBackoff *)this, a4, a2);
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v51);
  v18 = a3[1];
  if (SilenceToken)
  {
    v18 += SilenceToken[1];
    v19 = *SilenceToken + *a3;
  }
  else
  {
    v19 = *a3;
  }
  if (v51[0] >> 25 == 126)
  {
    v20 = 0;
    v21 = v18;
  }
  else
  {
    v20 = *((_DWORD *)this + 34);
    v21 = v18 - v20;
  }
  if ((v13 & 0x80000000) != 0)
  {
    v22 = 0;
  }
  else
  {
    v22 = *((_DWORD *)this + 35);
    v21 -= v22;
  }
  v23 = v19 - v18;
  v24 = a3[3];
  v25 = this[20];
  if ((_DWORD)v24 == -1)
  {
    v27 = 0;
    if (a9)
      goto LABEL_19;
  }
  else
  {
    v26 = *((_DWORD *)v25 + 4 * v24 + 1);
    if (a9)
    {
      if (v26 >= 1)
        --v26;
      v27 = (v26 >> 1) + 1;
LABEL_19:
      v28 = *((_DWORD *)v25 + 4 * a2 + 1);
      if (v28 >= 1)
        --v28;
      v29 = (v28 >> 1) + 1;
      v30 = v29 - v27;
      if ((v13 & 0x80000000) == 0)
      {
        v31 = *((_DWORD *)v25 + 4 * v13 + 1);
        if (v31 >= 1)
          --v31;
        v32 = v31 >> 1;
        goto LABEL_28;
      }
      goto LABEL_29;
    }
    v27 = v26 + 1;
  }
  v29 = *((_DWORD *)v25 + 4 * a2 + 1) + 1;
  v30 = v29 - v27;
  if ((v13 & 0x80000000) == 0)
  {
    v32 = *((_DWORD *)v25 + 4 * v13 + 1);
LABEL_28:
    v33 = v32 - v29 + 1;
    goto LABEL_30;
  }
LABEL_29:
  v33 = 0;
LABEL_30:
  v36 = v27;
  v37 = v30;
  v38 = v33;
  v39 = v21;
  v40 = 0;
  v41 = v20;
  v42 = v23;
  v43 = 0;
  v44 = v22;
  v45 = xmmword_209A6C7F0;
  v46 = 0;
  v47 = -1;
  v35[0] = &off_24C2149F8;
  v35[1] = 0xBFF0000000000000;
  v48 = v51[0];
  v49 = v51[1];
  v50 = v52;
  v34[0] = 0;
  v34[1] = 0;
  FstSearchLeafLatticeBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v34, (uint64_t)a3, v27, a9);
  if (SilenceToken)
    FstSearchLeafLatticeBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v34, (uint64_t)SilenceToken, v29, a9);
  v47 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v34, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v12, a6, (WordLatticeLC *)v35);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v35);
}

void sub_209840314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&a11);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeBackoff::getSilenceToken(FstSearchLeafLatticeBackoff *this, unsigned int a2, int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v3 = *((_QWORD *)this + 20) + 16 * a2;
  v4 = *(_DWORD *)(v3 + 12);
  if (v4 < 1)
    return 0;
  v5 = *(_DWORD *)(v3 + 8);
  v6 = v4 + v5;
  v7 = *((_QWORD *)this + 22);
  do
  {
    if (*(_DWORD *)(v7 + 24 * v5 + 12) == a3)
      result = v7 + 24 * v5;
    else
      result = 0;
    ++v5;
  }
  while ((int)v5 < v6 && !result);
  return result;
}

unint64_t FstSearchLeafLatticeBackoff::buildLinkSegmentation(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  unsigned int v6;
  unint64_t v10;
  unsigned int v11;
  int v12;
  __int16 v13;
  unsigned __int16 v14;
  int v15;

  if (a5)
    v5 = 2;
  else
    v5 = 1;
  v6 = *(unsigned __int16 *)(a3 + 20);
  if (*(_WORD *)(a3 + 20))
  {
    v10 = result;
    v11 = 0;
    v12 = 0;
    v13 = *(_WORD *)(*(_QWORD *)(result + 56) + 136);
    v14 = -1;
    do
    {
      v15 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 192) + 2 * (v11 + *(_DWORD *)(a3 + 16)));
      if (v15 != v14)
      {
        if (v12)
        {
          result = FstSearchLeafLatticeBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
          a4 += v12;
          v6 = *(unsigned __int16 *)(a3 + 20);
          v14 = v15;
          v12 = 0;
        }
        else
        {
          v14 = *(_WORD *)(*(_QWORD *)(v10 + 192) + 2 * (v11 + *(_DWORD *)(a3 + 16)));
        }
      }
      ++v12;
      v11 += v5;
    }
    while (v11 < v6);
    if (v12)
      return FstSearchLeafLatticeBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
  }
  return result;
}

unint64_t FstSearchLeafLatticeBackoff::addLinkSegment(unint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, __int16 a6)
{
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;

  v11 = result;
  v12 = *(_DWORD *)(a2 + 8);
  if (v12 == *(_DWORD *)(a2 + 12))
  {
    result = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(a2, 1, 1);
    v12 = *(_DWORD *)(a2 + 8);
  }
  v13 = *(_QWORD *)a2 + 28 * v12;
  *(_QWORD *)v13 = -1;
  *(_DWORD *)(v13 + 8) = 0xFFFF;
  *(_DWORD *)(v13 + 20) = -16;
  LODWORD(v13) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v13 + 1;
  v14 = *(_QWORD *)a2 + 28 * v13;
  *(_WORD *)(v14 + 16) = a3;
  *(_DWORD *)(v14 + 20) = a4;
  *(_DWORD *)(v14 + 24) = a5;
  *(_DWORD *)(v14 + 12) = *(_DWORD *)(*(_QWORD *)(v11 + 208) + 4 * a3);
  v15 = *(_WORD *)(*(_QWORD *)(v11 + 224) + 2 * a3);
  *(_WORD *)v14 = a6;
  *(_WORD *)(v14 + 2) = a6;
  *(_WORD *)(v14 + 4) = v15;
  *(_WORD *)(v14 + 6) = a6;
  *(_WORD *)(v14 + 8) = a6;
  *(_WORD *)(v14 + 10) = 0;
  return result;
}

uint64_t FstSearchLeafLatticeBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 404))
    return MiniFst::beginTopFstSyncRecog(this + 288);
  return this;
}

uint64_t FstSearchLeafLatticeBackoff::endTopRecSyncRecog(FstSearchLeafLatticeBackoff *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafLatticeBackoff::getBestExitScore(FstSearchLeafLatticeBackoff *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  *((_DWORD *)this + 69) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 62);
  if (v1 >= v2)
    goto LABEL_19;
  v4 = 0;
  v5 = 0;
  v6 = 32 * v1;
  do
  {
    v7 = *((_QWORD *)this + 30) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 68))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          v5 = v22;
          v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        v2 = *((unsigned int *)this + 62);
      }
    }
    ++v1;
    v6 += 32;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 20);
    v11 = 1879048192;
    do
    {
      v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        v14 = *(_DWORD *)(v12 + 8);
        v15 = v13 + v14;
        v16 = *((_QWORD *)this + 22);
        do
        {
          v17 = v14;
          v18 = *(_DWORD *)(v16 + 24 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 69) = *(_DWORD *)(v16 + 24 * v17 + 12);
            v11 = v18;
          }
          v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v19 = 20000;
  else
    v19 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_2098406F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLeafLatticeBackoff *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 62);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 30);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 8;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLeafLatticeBackoff::seedTheory(FstSearchLeafLatticeBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 176, 1, 1);
      v11 = *((_DWORD *)this + 46);
    }
    v12 = *((_QWORD *)this + 22) + 24 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_209A6C810;
    *(_WORD *)(v12 + 20) = 0;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)v12 = a2;
    v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      v13 = *((_DWORD *)this + 42);
    }
    v14 = (_DWORD *)(*((_QWORD *)this + 20) + 16 * v13);
    *v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v15 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v16 = *((_DWORD *)this + 62);
  if (v16 == *((_DWORD *)this + 63))
  {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 240, 1, 1);
    v16 = *((_DWORD *)this + 62);
  }
  v17 = *((_QWORD *)this + 30) + 32 * v16;
  *(_DWORD *)v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 22) = 0;
  LODWORD(v17) = *((_DWORD *)this + 62) + 1;
  *((_DWORD *)this + 62) = v17;
  *((_DWORD *)this + 38) = v17;
  return FstSearchLeafLatticeBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLeafLatticeBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 276);
  if ((_DWORD)v8 != -1)
  {
    v9 = (_QWORD *)result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(_QWORD *)(result + 176) + 24 * v10[2] + 12); (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = v9[5];
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = v9[20];
      v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = v9[20];
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v9[22] + 24 * *(unsigned int *)(v20 + 16 * v8 + 8));
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(v9[20] + 16 * v16);
      i = *(unsigned int *)(v9[22] + 24 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLeafLatticeBackoff::checkSearchParametersValidityForArcGraph(FstSearchLeafLatticeBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLeafLatticeBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _DWORD v28[2];
  __int128 v29;

  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    v9 = a4;
    LODWORD(v11) = 0;
    v12 = a2;
    v13 = a2;
    do
    {
      v14 = (_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v13);
      if (*v14 == 16777209)
        v11 = v11;
      else
        v11 = (v11 + 1);
      v13 = *(unsigned int *)(*(_QWORD *)(a1 + 176) + 24 * v14[2] + 12);
    }
    while ((_DWORD)v13 != -1);
    v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15)
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      v17 = v11 - v16;
      v18 = *(_QWORD *)a3 + 32 * v16;
      do
      {
        *(_QWORD *)v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_209A593D0;
        *(_QWORD *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if ((_DWORD)v11)
    {
      v19 = *(_QWORD *)(a1 + 160);
      v20 = -16;
      do
      {
        v21 = (unsigned int *)(v19 + 16 * v12);
        v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            v23 = v22 - 1;
            if (v22 < 1)
              v23 = v22;
            v20 = (v23 >> 1) + 1;
          }
          else
          {
            v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            v24 = v22 - 1;
            if (v22 < 1)
              v24 = v21[1];
            v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16)
            v25 = v22 + 1;
          else
            v25 = v20;
          v26 = v28[1];
          v11 = (v11 - 1);
          v27 = *(_QWORD *)a3 + 32 * v11;
          *(_DWORD *)v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          v19 = *(_QWORD *)(a1 + 160);
          v20 = -16;
        }
        v12 = *(unsigned int *)(*(_QWORD *)(a1 + 176) + 24 * *(unsigned int *)(v19 + 16 * v12 + 8) + 12);
      }
      while ((_DWORD)v12 != -1);
    }
  }
}

uint64_t FstSearchLeafLatticeBackoff::makePartialResult(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  _QWORD v25[2];
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLeafLatticeBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v24 = BestTrace;
  FstSearchLeafLatticeBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v26 = v17;
      v27 = v19 - v17;
      v28 = v20 - v19;
      v29 = 0u;
      v30 = 0u;
      v31 = 0;
      v32 = 1879048192;
      v33 = 0;
      v34 = -1;
      v25[0] = &off_24C2149F8;
      v25[1] = 0xBFF0000000000000;
      v35 = *v18;
      v36 = v18[1];
      v37 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v25);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v25);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = a1[20] + 16 * v24;
  return (*(_DWORD *)(a1[22] + 24 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_20984101C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLeafLattice::maybeGeneratePelMaps(FstSearchLeafLattice *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 224, (uint64_t)this + 208);
}

int64x2_t FstSearchLeafLattice::advanceDeltas(FstSearchLeafLattice *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int ScoreNoBackoff;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  BOOL v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  unsigned int v76;
  unsigned int v77;
  int64x2_t *v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t *v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  unint64_t v85;
  unint64_t v86;
  int64x2_t v87;
  int64x2_t *v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  uint64_t v92;
  int64x2_t *v93;
  int64x2_t result;
  int64x2_t v95;
  int v96;
  SearchStats *v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  char *v103;
  int *v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  int v115;
  __int16 v116;
  __int16 v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int v132;
  int64x2_t v133;
  int64x2_t v134;
  int v135[3];

  v8 = a2;
  v135[0] = a2;
  v133 = 0u;
  v134 = 0u;
  SnapTime::recordTime((SnapTime *)&v133, 1, 0, 0, 0);
  v104 = (int *)((char *)this + 280);
  *((_DWORD *)this + 70) = a3;
  v10 = *((_DWORD *)this + 2);
  v11 = *((_DWORD *)this + 62);
  if (v11)
  {
    v96 = a5;
    v97 = a4;
    v98 = v8;
    v109 = 0;
    LODWORD(v12) = 0;
    v13 = (uint64_t *)((char *)this + 192);
    v103 = (char *)this + 256;
    v108 = *((unsigned int *)this + 2);
    do
    {
      v14 = *((_QWORD *)this + 30);
      v110 = v12;
      v15 = *(unsigned int *)(v14 + 32 * v12 + 4);
      if (v11 <= (int)v12 + 1)
        v16 = v12 + 1;
      else
        v16 = v11;
      v99 = v12;
      while (v16 - 1 != (_DWORD)v12)
      {
        v12 = (v12 + 1);
        if (*(_DWORD *)(v14 + 32 * v12 + 4) != (_DWORD)v15)
          goto LABEL_11;
      }
      LODWORD(v12) = v16;
LABEL_11:
      v17 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v17 + 160) != (_DWORD)v15)
      {
        v18 = *(_DWORD *)(v17 + 140) <= (int)v15 || v99 >= v12;
        v100 = v15;
        v101 = v12;
        if (!v18)
        {
          v19 = v12;
          v20 = v110;
          v114 = v12;
          do
          {
            v21 = *((_QWORD *)this + 30) + 32 * v20;
            v22 = *(_DWORD *)v21;
            v23 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v21 + 12)) + v22;
            v24 = *((_DWORD *)this + 70);
            if (v23 - v10 <= v24)
            {
              if (v24 > v23)
                *v104 = v23;
              v25 = *((_QWORD *)this + 30) + 32 * v20;
              v26 = *(_QWORD *)(v25 + 4);
              v27 = *(_WORD *)(v25 + 12);
              v116 = *(_WORD *)(v25 + 14);
              v28 = *(_QWORD *)(v25 + 16);
              v29 = *(unsigned __int16 *)(v25 + 28);
              v30 = *((_DWORD *)this + 50);
              v31 = v30;
              if (*(_WORD *)(v25 + 28))
              {
                v32 = *(_DWORD *)(v25 + 24);
                v33 = *v13;
                v34 = v29;
                v31 = *((_DWORD *)this + 50);
                do
                {
                  v35 = *(_WORD *)(v33 + 2 * v32);
                  if (v31 == *((_DWORD *)this + 51))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                    v31 = *((_DWORD *)this + 50);
                    v33 = *((_QWORD *)this + 24);
                  }
                  *(_WORD *)(v33 + 2 * v31++) = v35;
                  *((_DWORD *)this + 50) = v31;
                  ++v32;
                  --v34;
                }
                while (v34);
              }
              if (v31 == *((_DWORD *)this + 51))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                v31 = *((_DWORD *)this + 50);
              }
              *(_WORD *)(*((_QWORD *)this + 24) + 2 * v31) = v27;
              *((_DWORD *)this + 50) = v31 + 1;
              v36 = *((unsigned int *)this + 66);
              if (v36 == *((_DWORD *)this + 67))
              {
                DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v103, 1, 1);
                v36 = *((unsigned int *)this + 66);
              }
              v37 = *((_QWORD *)this + 32) + 32 * v36;
              *(_DWORD *)v37 = v23;
              *(_QWORD *)(v37 + 4) = v26;
              *(_WORD *)(v37 + 12) = v27;
              *(_WORD *)(v37 + 14) = v116;
              *(_QWORD *)(v37 + 16) = v28;
              *(_DWORD *)(v37 + 24) = v30;
              *(_WORD *)(v37 + 28) = v29 + 1;
              v38 = *((_DWORD *)this + 66) + 1;
              *((_DWORD *)this + 66) = v38;
              v10 = v108;
              if (v20 == v110)
              {
                v39 = v109;
                if (HIDWORD(v108) == 2 * *((_DWORD *)this + 4))
                  v39 = v38;
                ++HIDWORD(v108);
                v109 = v39;
              }
              v15 = v100;
              LODWORD(v12) = v101;
              v19 = v114;
            }
            ++v20;
          }
          while (v20 != v19);
        }
        v40 = v12;
        v41 = v15;
        v105 = v12;
        do
        {
          v42 = *((_QWORD *)this + 5);
          v43 = *(_QWORD *)(v42 + 152);
          v44 = *(_DWORD *)(v43 + 4 * v41);
          v45 = *(_DWORD *)(v42 + 140);
          v111 = *(_DWORD *)(v43 + 4 * (v41 + 1));
          v112 = v44;
          v102 = v41;
          if (v45 <= v111)
          {
            if (*((_BYTE *)this + 404))
              v64 = v45 <= (int)v15;
            else
              v64 = 0;
            if (v64)
            {
              v65 = (v44 & 0xFFFFF) <= 0xFFFF3 ? v44 & 0xFFFFF : v44 & 0xFFFFF | 0xF00000;
              if (v65 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v130);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v65, (DgnString *)&v130, v66, v67, v68, v69, v70);
                v75 = &unk_209A6C820;
                if (v130.i32[2])
                  v75 = (void *)v130.i64[0];
                xprintf("Seed from state %d score %d trace %d, %s\n", v71, v72, v73, v74, v15, *(unsigned int *)(*((_QWORD *)this + 30) + 32 * v110), *(unsigned int *)(*((_QWORD *)this + 30) + 32 * v110 + 8), v75);
                MiniFst::seed((uint64_t)this + 288, *(_DWORD *)(*((_QWORD *)this + 30) + 32 * v110), *(_DWORD *)(*((_QWORD *)this + 30) + 32 * v110 + 20), *(_DWORD *)(*((_QWORD *)this + 30) + 32 * v110 + 8), v111);
                DgnString::~DgnString((DgnString *)&v130);
              }
            }
          }
          else
          {
            ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)v44);
            if (v99 < v12)
            {
              v47 = ScoreNoBackoff + ((v44 >> 20) & 0x3FF);
              v48 = v110;
              v106 = (v44 >> 20) & 0x3FF;
              v107 = v47;
              do
              {
                v49 = *((_QWORD *)this + 30) + 32 * v48;
                v50 = v47 + *(_DWORD *)v49;
                v51 = *((_DWORD *)this + 70);
                if (v50 - v10 <= v51)
                {
                  if (v51 > v50)
                    *v104 = v50;
                  v117 = *(_WORD *)(v49 + 14);
                  v52 = *(_DWORD *)(v49 + 16);
                  v113 = *(_DWORD *)(v49 + 8);
                  v115 = *(_DWORD *)(v49 + 20);
                  v53 = *(unsigned __int16 *)(v49 + 28);
                  v54 = *((_DWORD *)this + 50);
                  v55 = v54;
                  if (*(_WORD *)(v49 + 28))
                  {
                    v56 = *(_DWORD *)(v49 + 24);
                    v57 = *v13;
                    v58 = v53;
                    v55 = *((_DWORD *)this + 50);
                    do
                    {
                      v59 = *(_WORD *)(v57 + 2 * v56);
                      if (v55 == *((_DWORD *)this + 51))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                        v55 = *((_DWORD *)this + 50);
                        v57 = *((_QWORD *)this + 24);
                      }
                      *(_WORD *)(v57 + 2 * v55++) = v59;
                      *((_DWORD *)this + 50) = v55;
                      ++v56;
                      --v58;
                    }
                    while (v58);
                  }
                  if (v55 == *((_DWORD *)this + 51))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                    v55 = *((_DWORD *)this + 50);
                  }
                  *(_WORD *)(*((_QWORD *)this + 24) + 2 * v55) = v112;
                  *((_DWORD *)this + 50) = v55 + 1;
                  v60 = *((unsigned int *)this + 66);
                  if (v60 == *((_DWORD *)this + 67))
                  {
                    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v103, 1, 1);
                    v60 = *((unsigned int *)this + 66);
                  }
                  v61 = *((_QWORD *)this + 32) + 32 * v60;
                  *(_DWORD *)v61 = v50;
                  *(_DWORD *)(v61 + 4) = v111;
                  *(_DWORD *)(v61 + 8) = v113;
                  *(_WORD *)(v61 + 12) = v112;
                  *(_WORD *)(v61 + 14) = v117;
                  *(_DWORD *)(v61 + 16) = v52 + v106;
                  *(_DWORD *)(v61 + 20) = v115;
                  *(_DWORD *)(v61 + 24) = v54;
                  *(_WORD *)(v61 + 28) = v53 + 1;
                  v62 = *((_DWORD *)this + 66) + 1;
                  *((_DWORD *)this + 66) = v62;
                  v10 = v108;
                  if (v48 == v110)
                  {
                    v63 = v109;
                    if (HIDWORD(v108) == 2 * *((_DWORD *)this + 4))
                      v63 = v62;
                    ++HIDWORD(v108);
                    v109 = v63;
                  }
                  v40 = v105;
                  v47 = v107;
                }
                ++v48;
              }
              while (v48 != v40);
            }
          }
          v41 = v102 + 2;
          v15 = v100;
          LODWORD(v12) = v101;
        }
        while ((v112 & 0x80000000) == 0);
        v11 = *((_DWORD *)this + 62);
      }
    }
    while (v12 < v11);
    a3 = *v104;
    v8 = v98;
    a4 = v97;
    a5 = v96;
    v77 = HIDWORD(v108);
    v76 = v109;
  }
  else
  {
    v77 = 0;
    v76 = 0;
  }
  v132 = a3 + v10;
  if (*((_BYTE *)this + 404))
    MiniFst::updateFrame((char *)this + 288, v104, v10, v8);
  v130 = 0u;
  v131 = 0u;
  SnapTime::recordTime((SnapTime *)&v130, 1, 0, 0, 0);
  v130 = vsubq_s64(v130, v133);
  v131 = vsubq_s64(v131, v134);
  v78 = (int64x2_t *)*((_QWORD *)this + 13);
  v79 = vaddq_s64(v78[1], v131);
  *v78 = vaddq_s64(*v78, v130);
  v78[1] = v79;
  v128 = 0u;
  v129 = 0u;
  SnapTime::recordTime((SnapTime *)&v128, 1, 0, 0, 0);
  if (v77 > 2 * *((_DWORD *)this + 4))
    FstSearchLeafLatticeBackoff::applyCutoffOnEmitting((uint64_t)this, v76, &v132);
  v126 = 0u;
  v127 = 0u;
  SnapTime::recordTime((SnapTime *)&v126, 1, 0, 0, 0);
  v80 = vsubq_s64(v126, v128);
  v81 = (int64x2_t *)*((_QWORD *)this + 13);
  v82 = v81[3];
  v83 = vaddq_s64(v81[2], v80);
  v126 = v80;
  v127 = vsubq_s64(v127, v129);
  v84 = vaddq_s64(v82, v127);
  v81[2] = v83;
  v81[3] = v84;
  v124 = 0u;
  v125 = 0u;
  SnapTime::recordTime((SnapTime *)&v124, 1, 0, 0, 0);
  FstSearchLeafLatticeBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v85 = *((unsigned int *)this + 6);
  if ((_DWORD)v85)
  {
    v86 = *((unsigned int *)this + 62);
    if (v85 < v86)
      mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(*((_QWORD *)this + 30), v85, v86);
  }
  v122 = 0u;
  v123 = 0u;
  SnapTime::recordTime((SnapTime *)&v122, 1, 0, 0, 0);
  v87 = vsubq_s64(v122, v124);
  v88 = (int64x2_t *)*((_QWORD *)this + 13);
  v89 = v88[5];
  v90 = vaddq_s64(v88[4], v87);
  v122 = v87;
  v123 = vsubq_s64(v123, v125);
  v91 = vaddq_s64(v89, v123);
  v88[4] = v90;
  v88[5] = v91;
  v120 = 0u;
  v121 = 0u;
  SnapTime::recordTime((SnapTime *)&v120, 1, 0, 0, 0);
  *((_DWORD *)this + 66) = 0;
  v92 = *((unsigned int *)this + 62);
  *((_DWORD *)this + 38) = v92;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v92;
    if (*((_DWORD *)a4 + 2) > v92)
      LODWORD(v92) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v92;
  }
  if (*((_BYTE *)this + 404))
    FstSearchLeafLattice::seedFromMiniFst((uint64_t)this, v135);
  if (a5)
    FstSearchLeafLatticeBackoff::propagateNulls((uint64_t)this, v132, v8, a4);
  *((_DWORD *)this + 68) = v8;
  v118 = 0u;
  v119 = 0u;
  SnapTime::recordTime((SnapTime *)&v118, 1, 0, 0, 0);
  v93 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v93[6], vsubq_s64(v118, v120));
  v95 = vaddq_s64(v93[7], vsubq_s64(v119, v121));
  v93[6] = result;
  v93[7] = v95;
  return result;
}

void sub_20984183C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLeafLattice::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (*(_BYTE *)(this + 404))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 312);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v46 = this + 176;
      v5 = (_QWORD *)(this + 160);
      v39 = this + 240;
      do
      {
        v6 = (int *)(*(_QWORD *)(v2 + 304) + 36 * v4);
        v7 = v6[4];
        v43 = *v6;
        v44 = v6[5];
        v8 = v6[6];
        v45 = v6[7];
        v9 = v6[2];
        v47 = 0;
        v48 = 0;
        v41 = v8;
        v42 = v7;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          v10 = 0;
          v11 = 0;
          do
          {
            if (v11 == HIDWORD(v48))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v47, 1, 1);
              v11 = v48;
              v10 = v47;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            v12 = v48;
            v11 = v48 + 1;
            LODWORD(v48) = v48 + 1;
            v9 = *(_DWORD *)(*(_QWORD *)(v2 + 288) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            v14 = v12 + 1;
            v15 = 4 * v12;
            do
            {
              v16 = *(_DWORD *)(v47 + v15);
              v17 = *(_QWORD *)(v2 + 288);
              v18 = (int *)(v17 + 36 * v16);
              v19 = *v18;
              v20 = *((_QWORD *)v18 + 2);
              v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<CWIDAC>::reallocElts(v46, 1, 1);
                v21 = *(_DWORD *)(v2 + 184);
                v17 = *(_QWORD *)(v2 + 288);
              }
              v22 = *(_QWORD *)(v2 + 176) + 24 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)v22 = v19;
              *(_QWORD *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = 0;
              *(_WORD *)(v22 + 20) = 0;
              v23 = *(_QWORD *)(v17 + 36 * v16 + 28);
              v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                v24 = *(unsigned int *)(v2 + 168);
              }
              v25 = *(_QWORD *)(v2 + 160);
              v26 = v25 + 16 * v24;
              *(_QWORD *)v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<CWIDAC>::reallocElts(v46, 1, 1);
          v27 = *(_DWORD *)(v2 + 184);
        }
        v28 = *(_QWORD *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        v29 = v28 + 24 * v27;
        *(_DWORD *)v29 = v43;
        *(_DWORD *)(v29 + 4) = v42;
        *(_DWORD *)(v29 + 8) = v44;
        *(_DWORD *)(v29 + 12) = v13;
        *(_DWORD *)(v29 + 16) = 0;
        *(_WORD *)(v29 + 20) = 0;
        if (v45 == 16777213)
        {
          v45 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v13) == 16777209)
          {
            v27 = *(_DWORD *)(*v5 + 16 * v13 + 8);
            v45 = 16777209;
          }
        }
        v30 = *a2;
        v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          v31 = *(unsigned int *)(v2 + 168);
        }
        v32 = *(_QWORD *)(v2 + 160);
        v33 = (int *)(v32 + 16 * v31);
        *v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        v35 = *(unsigned int *)(v2 + 248);
        if (v35 == *(_DWORD *)(v2 + 252))
        {
          DgnArray<PrefilterResultFrame>::reallocElts(v39, 1, 1);
          v35 = *(unsigned int *)(v2 + 248);
        }
        v36 = *(_QWORD *)(v2 + 240) + 32 * v35;
        *(_DWORD *)v36 = v43;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v42;
        *(_QWORD *)(v36 + 20) = v44;
        *(_WORD *)(v36 + 28) = 0;
        ++*(_DWORD *)(v2 + 248);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 312);
        v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38)
          v37 = v38;
        else
          v37 = v37;
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_209841BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLattice::collectTraces(FstSearchLeafLattice *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  __int16 v42;
  unsigned int v43;
  unint64_t v44;
  _OWORD *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _WORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t *v58;
  _DWORD *v59;
  uint64_t v60;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;

  v2 = *((unsigned int *)this + 42);
  v66 = 0;
  v65 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v65 = v3;
    v66 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v66);
  }
  v5 = *((unsigned int *)this + 62);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = v65;
    v8 = (unsigned int *)(*((_QWORD *)this + 30) + 8);
    do
    {
      v10 = *v8;
      v8 += 8;
      v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        v5 = *((unsigned int *)this + 62);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v11) = *((_DWORD *)this + 42);
  if (!(_DWORD)v11)
  {
    v63 = 0;
    v64 = 0;
LABEL_54:
    v25 = 0;
    *((_DWORD *)this + 42) = 0;
    goto LABEL_55;
  }
  v12 = 0;
  v13 = (uint64_t *)((char *)this + 160);
  v14 = v65;
  v15 = (uint64_t *)((char *)this + 176);
  do
  {
    v11 = (v11 - 1);
    if ((v12 & 1) != 0)
    {
      v12 = 1;
    }
    else if (*(_DWORD *)(*v13 + 16 * v11) == 16777213)
    {
      v12 = 1;
      *((_DWORD *)v14 + v11) = 1;
    }
    else
    {
      v12 = 0;
    }
    if (*((_DWORD *)v14 + v11))
    {
      v16 = *v13 + 16 * v11;
      v17 = *(_DWORD *)(v16 + 12);
      if (v17 >= 1)
      {
        v18 = *(_DWORD *)(v16 + 8);
        v19 = v17 + v18;
        v20 = *v15;
        do
        {
          v21 = *(unsigned int *)(v20 + 24 * v18 + 12);
          if ((_DWORD)v21 != -1)
            *((_DWORD *)v14 + v21) = 1;
          ++v18;
        }
        while ((int)v18 < v19);
      }
    }
  }
  while ((_DWORD)v11);
  v22 = *((_DWORD *)this + 42);
  v63 = 0;
  v64 = 0;
  if (!v22)
    goto LABEL_54;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  do
  {
    if (*((_DWORD *)v65 + v23))
    {
      v26 = *v13;
      v62 = v24;
      if (v23 != v24)
      {
        *(_OWORD *)(v26 + 16 * v24) = *(_OWORD *)(v26 + 16 * v23);
        v26 = *v13;
      }
      *(_DWORD *)(v26 + 16 * v24 + 8) = v25;
      v27 = v26 + 16 * v23;
      v28 = *(unsigned int *)(v27 + 8);
      v29 = (*(_DWORD *)(v27 + 12) + v28);
      if (v28 < v29)
      {
        v30 = *v15;
        do
        {
          v31 = v25;
          if (v28 != v25)
          {
            v32 = (__int128 *)(v30 + 24 * v28);
            v33 = v30 + 24 * v25;
            v34 = *v32;
            *(_QWORD *)(v33 + 14) = *(_QWORD *)((char *)v32 + 14);
            *(_OWORD *)v33 = v34;
            v30 = *v15;
          }
          v35 = v30 + 24 * v25;
          v38 = *(_DWORD *)(v35 + 12);
          v36 = (_DWORD *)(v35 + 12);
          v37 = v38;
          if (v38 != -1)
            *v36 = *((_DWORD *)v65 + v37);
          v39 = v64;
          if (*(_WORD *)(v30 + 24 * v31 + 20))
          {
            v40 = 0;
            v41 = v64;
            do
            {
              v42 = *(_WORD *)(*((_QWORD *)this + 24) + 2 * (v40 + *(_DWORD *)(v30 + 24 * v31 + 16)));
              if (v41 == HIDWORD(v64))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
                v41 = v64;
                v30 = *v15;
              }
              *(_WORD *)(v63 + 2 * v41++) = v42;
              LODWORD(v64) = v41;
              ++v40;
            }
            while (v40 < *(unsigned __int16 *)(v30 + 24 * v31 + 20));
          }
          *(_DWORD *)(v30 + 24 * v31 + 16) = v39;
          v25 = v31 + 1;
          ++v28;
        }
        while (v28 != v29);
      }
      *((_DWORD *)v65 + v23) = v62;
      v24 = v62 + 1;
      v22 = *((_DWORD *)this + 42);
      v13 = (uint64_t *)((char *)this + 160);
    }
    ++v23;
  }
  while (v23 < v22);
  v43 = *((_DWORD *)this + 43);
  if (v24 > v43)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v13, v24 - v43, 0);
    v22 = *((_DWORD *)this + 42);
  }
  if (v22 < v24)
  {
    v44 = v24 - (unint64_t)v22;
    v45 = (_OWORD *)(*v13 + 16 * v22);
    do
    {
      *v45++ = xmmword_209A6C7D0;
      --v44;
    }
    while (v44);
  }
  *((_DWORD *)this + 42) = v24;
  v46 = *((_DWORD *)this + 47);
  if (v25 > v46)
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 176, v25 - v46, 0);
  v47 = *((unsigned int *)this + 46);
  if (v47 < v25)
  {
    v48 = v25 - v47;
    v49 = (_WORD *)(*v15 + 24 * v47 + 20);
    do
    {
      *(_OWORD *)(v49 - 10) = xmmword_209A6C7C0;
      *((_DWORD *)v49 - 1) = 0;
      *v49 = 0;
      v49 += 12;
      --v48;
    }
    while (v48);
  }
LABEL_55:
  *((_DWORD *)this + 46) = v25;
  v50 = *((unsigned int *)this + 62);
  if ((_DWORD)v50)
  {
    v51 = 0;
    v52 = v64;
    v53 = *((_QWORD *)this + 30);
    do
    {
      if (*(_WORD *)(v53 + 32 * v51 + 28))
      {
        v54 = 0;
        LODWORD(v55) = v52;
        do
        {
          v56 = *(_WORD *)(*((_QWORD *)this + 24) + 2 * (v54 + *(_DWORD *)(v53 + 32 * v51 + 24)));
          if ((_DWORD)v55 == HIDWORD(v64))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
            LODWORD(v55) = v64;
            v53 = *((_QWORD *)this + 30);
          }
          *(_WORD *)(v63 + 2 * v55) = v56;
          v55 = (v55 + 1);
          LODWORD(v64) = v55;
          ++v54;
        }
        while (v54 < *(unsigned __int16 *)(v53 + 32 * v51 + 28));
        v50 = *((unsigned int *)this + 62);
      }
      else
      {
        v55 = v52;
      }
      *(_DWORD *)(v53 + 32 * v51++ + 24) = v52;
      v52 = v55;
    }
    while (v51 < v50);
  }
  else
  {
    LODWORD(v55) = v64;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 192, &v63, 0, v55);
  v57 = *((unsigned int *)this + 62);
  if ((_DWORD)v57)
  {
    v58 = v65;
    v59 = (_DWORD *)(*((_QWORD *)this + 30) + 8);
    do
    {
      v60 = *v59;
      if ((_DWORD)v60 != -1)
        *v59 = *((_DWORD *)v58 + v60);
      v59 += 8;
      --v57;
    }
    while (v57);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v63);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v65);
}

void sub_209842078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafLattice::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLeafLattice::advanceDeltas((FstSearchLeafLattice *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLeafLattice::collectTraces((FstSearchLeafLattice *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafLattice::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  this[62] = 0;
  return this;
}

double FstSearchLeafLattice::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLeafLattice::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafLattice::beginTopRecPassSyncRecog(FstSearchLeafLattice *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 288, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 100) = result;
    *((_BYTE *)this + 404) = 1;
  }
  return result;
}

uint64_t FstSearchLeafLattice::endTopRecPassSyncRecog(FstSearchLeafLattice *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 70) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLeafLattice::printSize(FstSearchLeafLattice *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  int v126;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126)
    v15 = v125;
  else
    v15 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_209A6C820, a3, &unk_209A6C820, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v16, v17, v18, v19, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_209A6C820);
  v20 = (a3 + 1);
  v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126)
    v26 = v125;
  else
    v26 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126)
    v31 = v125;
  else
    v31 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126)
    v36 = v125;
  else
    v36 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v36, 4, 4, 0);
  v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126)
    v41 = v125;
  else
    v41 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v42 = 16;
  v43 = *((unsigned int *)this + 42);
  v44 = 16 * v43;
  if ((int)v43 <= 0)
    v44 = 0;
  v45 = v44 + v42;
  v46 = v44 + v42 + 16 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126)
    v51 = v125;
  else
    v51 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v52 = 16;
  v53 = *((_DWORD *)this + 46);
  v54 = 22 * v53;
  if (v53 <= 0)
    v54 = 0;
  v55 = v54 + v52;
  v56 = v54 + v52 + 22 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126)
    v61 = v125;
  else
    v61 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v61, v56, v55, 0);
  v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
    v62 = 12;
  else
    v62 = 16;
  v63 = *((unsigned int *)this + 50);
  v64 = *((_DWORD *)this + 51);
  if (v64 >= v63)
  {
    v65 = 0;
    if ((int)v63 > 0)
      v62 = (v62 | 2) + 2 * (v63 - 1);
    v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    v65 = 2 * v63;
    v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126)
    v71 = v125;
  else
    v71 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_209A6C820, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v72 = 16;
  v73 = *((unsigned int *)this + 62);
  v74 = 28 * v73;
  if ((int)v73 <= 0)
    v74 = 0;
  v75 = v74 + v72;
  v76 = v74 + v72 + 28 * (*((_DWORD *)this + 63) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126)
    v81 = v125;
  else
    v81 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_209A6C820, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v82 = 16;
  v83 = *((unsigned int *)this + 66);
  v84 = 28 * v83;
  if ((int)v83 <= 0)
    v84 = 0;
  v85 = v84 + v82;
  v86 = v84 + v82 + 28 * (*((_DWORD *)this + 67) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126)
    v91 = v125;
  else
    v91 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_209A6C820, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126)
    v96 = v125;
  else
    v96 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_209A6C820, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126)
    v101 = v125;
  else
    v101 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_209A6C820, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126)
    v106 = v125;
  else
    v106 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_209A6C820, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  v107 = sizeObject((uint64_t)this + 288, 0);
  v108 = sizeObject((uint64_t)this + 288, 1);
  v109 = sizeObject((uint64_t)this + 288, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126)
    v114 = v125;
  else
    v114 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_209A6C820, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  v123 = 0;
  v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126)
    v119 = v125;
  else
    v119 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_209A6C820, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_209842A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLeafLattice::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLeafLatticeBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 24 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchLeafLattice::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, unsigned __int8 a5)
{
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafLatticeBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  v22 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v22)
  {
    v9 = 0;
    v10 = v28;
    do
    {
      if (*(_BYTE *)(*a3 + v9))
      {
        v11 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v11 + 16 * v9) != 16777209)
        {
          v12 = v11 + 16 * v9;
          if (*(int *)(v12 + 12) >= 1)
          {
            v13 = *(_DWORD *)(v12 + 8);
            do
            {
              v14 = *(_QWORD *)(a1 + 176) + 24 * v13;
              v15 = *(unsigned int *)(v14 + 12);
              v25 = v13;
              if ((_DWORD)v15 == -1)
                v16 = 0;
              else
                v16 = v10 - *((_DWORD *)v29 + v15);
              v17 = *(unsigned int *)(v27 + 4 * v16);
              if (*(_BYTE *)(*a4 + v9))
                FstSearchLeafLattice::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, 0xFFFFFFFFLL, v17, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v9))), a2, (uint64_t)v8, a5);
              v18 = v26[0];
              if (*(_DWORD *)(v26[0] + 16 * v9 + 8))
              {
                v19 = 0;
                do
                {
                  v20 = *(unsigned int *)(*(_QWORD *)(v18 + 16 * v9) + 4 * v19);
                  FstSearchLeafLattice::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, v20, v17, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v20))), a2, (uint64_t)v8, a5);
                  ++v19;
                  v18 = v26[0];
                }
                while (v19 < *(unsigned int *)(v26[0] + 16 * v9 + 8));
              }
              v13 = v25 + 1;
            }
            while ((int)(v25 + 1) < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v9 + 12)
                                   + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v9 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v22);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_209842DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafLattice::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v12;
  unsigned int v13;
  _DWORD *SilenceToken;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  ArcGraph *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _QWORD v34[2];
  _QWORD v35[2];
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __int128 v45;
  int v46;
  unint64_t v47;
  int v48;
  int v49;
  __int128 v50;
  _DWORD v51[2];
  __int128 v52;

  v12 = a5;
  v13 = a4;
  if ((a4 & 0x80000000) != 0)
    SilenceToken = 0;
  else
    SilenceToken = (_DWORD *)FstSearchLeafLatticeBackoff::getSilenceToken((FstSearchLeafLatticeBackoff *)this, a4, a2);
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v51);
  v18 = a3[1];
  if (SilenceToken)
  {
    v18 += SilenceToken[1];
    v19 = *SilenceToken + *a3;
  }
  else
  {
    v19 = *a3;
  }
  if (v51[0] >> 25 == 126)
  {
    v20 = 0;
    v21 = v18;
  }
  else
  {
    v20 = *((_DWORD *)this + 34);
    v21 = v18 - v20;
  }
  if ((v13 & 0x80000000) != 0)
  {
    v22 = 0;
  }
  else
  {
    v22 = *((_DWORD *)this + 35);
    v21 -= v22;
  }
  v23 = v19 - v18;
  v24 = a3[3];
  v25 = this[20];
  if ((_DWORD)v24 == -1)
  {
    v27 = 0;
    if (a9)
      goto LABEL_19;
  }
  else
  {
    v26 = *((_DWORD *)v25 + 4 * v24 + 1);
    if (a9)
    {
      if (v26 >= 1)
        --v26;
      v27 = (v26 >> 1) + 1;
LABEL_19:
      v28 = *((_DWORD *)v25 + 4 * a2 + 1);
      if (v28 >= 1)
        --v28;
      v29 = (v28 >> 1) + 1;
      v30 = v29 - v27;
      if ((v13 & 0x80000000) == 0)
      {
        v31 = *((_DWORD *)v25 + 4 * v13 + 1);
        if (v31 >= 1)
          --v31;
        v32 = v31 >> 1;
        goto LABEL_28;
      }
      goto LABEL_29;
    }
    v27 = v26 + 1;
  }
  v29 = *((_DWORD *)v25 + 4 * a2 + 1) + 1;
  v30 = v29 - v27;
  if ((v13 & 0x80000000) == 0)
  {
    v32 = *((_DWORD *)v25 + 4 * v13 + 1);
LABEL_28:
    v33 = v32 - v29 + 1;
    goto LABEL_30;
  }
LABEL_29:
  v33 = 0;
LABEL_30:
  v36 = v27;
  v37 = v30;
  v38 = v33;
  v39 = v21;
  v40 = 0;
  v41 = v20;
  v42 = v23;
  v43 = 0;
  v44 = v22;
  v45 = xmmword_209A6C7F0;
  v46 = 0;
  v47 = -1;
  v35[0] = &off_24C2149F8;
  v35[1] = 0xBFF0000000000000;
  v48 = v51[0];
  v49 = v51[1];
  v50 = v52;
  v34[0] = 0;
  v34[1] = 0;
  FstSearchLeafLatticeBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v34, (uint64_t)a3, v27, a9);
  if (SilenceToken)
    FstSearchLeafLatticeBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v34, (uint64_t)SilenceToken, v29, a9);
  v47 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v34, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v12, a6, (WordLatticeLC *)v35);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v35);
}

void sub_209843080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a9);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&a11);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLattice::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 404))
    return MiniFst::beginTopFstSyncRecog(this + 288);
  return this;
}

uint64_t FstSearchLeafLattice::endTopRecSyncRecog(FstSearchLeafLattice *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafLattice::getBestExitScore(FstSearchLeafLattice *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  *((_DWORD *)this + 69) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 62);
  if (v1 >= v2)
    goto LABEL_19;
  v4 = 0;
  v5 = 0;
  v6 = 32 * v1;
  do
  {
    v7 = *((_QWORD *)this + 30) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 68))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          v5 = v22;
          v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        v2 = *((unsigned int *)this + 62);
      }
    }
    ++v1;
    v6 += 32;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 20);
    v11 = 1879048192;
    do
    {
      v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        v14 = *(_DWORD *)(v12 + 8);
        v15 = v13 + v14;
        v16 = *((_QWORD *)this + 22);
        do
        {
          v17 = v14;
          v18 = *(_DWORD *)(v16 + 24 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 69) = *(_DWORD *)(v16 + 24 * v17 + 12);
            v11 = v18;
          }
          v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v19 = 20000;
  else
    v19 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_209843238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLattice::getBestScoreMaybeUpdateFstNode(FstSearchLeafLattice *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 62);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 30);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 8;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLeafLattice::seedTheory(FstSearchLeafLattice *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 176, 1, 1);
      v11 = *((_DWORD *)this + 46);
    }
    v12 = *((_QWORD *)this + 22) + 24 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_209A6C810;
    *(_WORD *)(v12 + 20) = 0;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)v12 = a2;
    v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      v13 = *((_DWORD *)this + 42);
    }
    v14 = (_DWORD *)(*((_QWORD *)this + 20) + 16 * v13);
    *v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v15 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v16 = *((_DWORD *)this + 62);
  if (v16 == *((_DWORD *)this + 63))
  {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 240, 1, 1);
    v16 = *((_DWORD *)this + 62);
  }
  v17 = *((_QWORD *)this + 30) + 32 * v16;
  *(_DWORD *)v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 22) = 0;
  LODWORD(v17) = *((_DWORD *)this + 62) + 1;
  *((_DWORD *)this + 62) = v17;
  *((_DWORD *)this + 38) = v17;
  return FstSearchLeafLatticeBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLeafLattice::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 276);
  if ((_DWORD)v8 != -1)
  {
    v9 = (_QWORD *)result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(_QWORD *)(result + 176) + 24 * v10[2] + 12); (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = v9[5];
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = v9[20];
      v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = v9[20];
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v9[22] + 24 * *(unsigned int *)(v20 + 16 * v8 + 8));
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(v9[20] + 16 * v16);
      i = *(unsigned int *)(v9[22] + 24 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLeafLattice::checkSearchParametersValidityForArcGraph(FstSearchLeafLattice *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLeafLattice::makePartialResult(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  _QWORD v25[2];
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLeafLatticeBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v24 = BestTrace;
  FstSearchLeafLatticeBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v26 = v17;
      v27 = v19 - v17;
      v28 = v20 - v19;
      v29 = 0u;
      v30 = 0u;
      v31 = 0;
      v32 = 1879048192;
      v33 = 0;
      v34 = -1;
      v25[0] = &off_24C2149F8;
      v25[1] = 0xBFF0000000000000;
      v35 = *v18;
      v36 = v18[1];
      v37 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v25);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v25);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = a1[20] + 16 * v24;
  return (*(_DWORD *)(a1[22] + 24 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_2098439B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDurationBackoff::maybeInitDurModel(FstSearchLatticeDurationBackoff *this, const PicMgr *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1)
    v6 = 56;
  else
    v6 = 72;
  v7 = v16;
  v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!(_DWORD)v7)
      goto LABEL_13;
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  v9 = 0;
  v10 = v15;
  v11 = *((_QWORD *)this + 24);
  do
  {
    if (!(_WORD)v9 || (v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF))
      v13 = 0;
    else
      v13 = *(_WORD *)(*(_QWORD *)((char *)a2 + v6) + 2 * v12);
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_209843AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLatticeDurationBackoff::advanceDeltas(FstSearchLatticeDurationBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v18;
  int v19;
  int v20;
  int ScoreAllowBackoff_updateNodeInSequence;
  uint64_t v22;
  __int16 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  __int16 v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  int64x2_t *v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t *v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  unint64_t v89;
  unint64_t v90;
  int64x2_t v91;
  int64x2_t *v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  uint64_t v96;
  int64x2_t *v97;
  int64x2_t result;
  int64x2_t v99;
  MiniFst *v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  char *v112;
  int v113;
  int *v114;
  unsigned int v115;
  unsigned int v116;
  __int16 v117;
  int v118;
  int v119;
  unsigned int v120;
  int v121;
  int v122;
  FstSearchLatticeDurationBackoff *v123;
  int v124;
  uint64_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int v140;
  int64x2_t v141;
  int64x2_t v142;
  int v143[3];

  v143[0] = a2;
  v141 = 0u;
  v142 = 0u;
  SnapTime::recordTime((SnapTime *)&v141, 1, 0, 0, 0);
  v114 = (int *)((char *)this + 256);
  *((_DWORD *)this + 64) = a3;
  v7 = *((_DWORD *)this + 2);
  v8 = *((_DWORD *)this + 56);
  if (v8)
  {
    v115 = 0;
    v116 = 0;
    v9 = 0;
    v104 = *((_DWORD *)this + 53);
    v112 = (char *)this + 232;
    v106 = *((unsigned __int8 *)this + 208);
    v103 = (FstSearchLatticeDurationBackoff *)((char *)this + 264);
    v123 = this;
    v121 = *((_DWORD *)this + 2);
    do
    {
      v10 = v9;
      v125 = 32 * v9;
      v11 = *((_QWORD *)this + 27) + v125;
      v110 = *(unsigned int *)(v11 + 4);
      if (v8 <= v9 + 1)
        ++v9;
      else
        v9 = v8;
      v109 = v9 - 1;
      v12 = (int *)(v11 + 36);
      v13 = 1;
      while (v10 + v13 < (unint64_t)v8)
      {
        v14 = *v12;
        v12 += 8;
        ++v13;
        if (v14 != (_DWORD)v110)
        {
          v109 = v10 + v13 - 2;
          v9 = v10 + v13 - 1;
          break;
        }
      }
      v15 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v15 + 160) != (_DWORD)v110)
      {
        v16 = v109;
        if (*(_DWORD *)(v15 + 140) > (int)v110 && v10 <= v109)
        {
          v18 = 0;
          v19 = v109 - v10 + 1;
          do
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 64) >= 5000)
              v20 = 5000;
            else
              v20 = *((_DWORD *)this + 19) + *((_DWORD *)this + 64);
            ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(*((_QWORD *)this + 27) + v125 + v18 + 12), *(_DWORD *)(*((_QWORD *)this + 27) + v125 + v18), v20);
            v22 = *((_QWORD *)this + 27) + v125 + v18;
            v23 = *(_WORD *)(v22 + 12);
            v24 = *(_DWORD *)(v22 + 24);
            v25 = v106;
            if (v24 >= 1)
              v25 = v106 - v24;
            v26 = v25 & ((v24 - v106) >> 31);
            if (*(_WORD *)(v22 + 12))
              v27 = v24 - v106;
            else
              v27 = *(_DWORD *)(v22 + 24);
            if (*(_WORD *)(v22 + 12))
              v28 = v26 + *(_DWORD *)(v22 + 28);
            else
              v28 = *(_DWORD *)(v22 + 28);
            if (*(_WORD *)(v22 + 12))
              v29 = v26;
            else
              v29 = 0;
            v30 = v29 + ScoreAllowBackoff_updateNodeInSequence;
            if (v29 + ScoreAllowBackoff_updateNodeInSequence - v7 <= *v114)
            {
              v31 = *(_QWORD *)(v22 + 4);
              v32 = *(_WORD *)(v22 + 14);
              v33 = *(_QWORD *)(v22 + 16);
              if (*v114 > v30)
                *v114 = v30;
              v34 = *((unsigned int *)v123 + 60);
              if (v34 == *((_DWORD *)v123 + 61))
              {
                DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v112, 1, 1);
                v34 = *((unsigned int *)v123 + 60);
              }
              v35 = *((_QWORD *)v123 + 29) + 32 * v34;
              *(_DWORD *)v35 = v30;
              *(_QWORD *)(v35 + 4) = v31;
              *(_WORD *)(v35 + 12) = v23;
              *(_WORD *)(v35 + 14) = v32;
              *(_QWORD *)(v35 + 16) = v33;
              *(_DWORD *)(v35 + 24) = v27;
              *(_DWORD *)(v35 + 28) = v28;
              v36 = *((_DWORD *)v123 + 60) + 1;
              *((_DWORD *)v123 + 60) = v36;
              this = v123;
              if (!v18)
              {
                v37 = v115;
                if (v116 == 2 * *((_DWORD *)v123 + 4))
                  v37 = v36;
                v115 = v37;
                ++v116;
              }
              v7 = v121;
            }
            else
            {
              this = v123;
            }
            v16 = v109;
            v18 += 32;
            --v19;
          }
          while (v19);
        }
        v105 = v16 - v10 + 1;
        v38 = v110;
        v107 = v10;
        v108 = v9;
        do
        {
          v39 = *((_QWORD *)this + 5);
          v40 = *(_QWORD *)(v39 + 152);
          v41 = *(_DWORD *)(v40 + 4 * v38);
          v42 = *(_DWORD *)(v39 + 140);
          v124 = *(_DWORD *)(v40 + 4 * (v38 + 1));
          v111 = v38;
          if (v42 <= v124)
          {
            if (*((_BYTE *)this + 380))
              v70 = v42 <= (int)v110;
            else
              v70 = 0;
            if (v70)
            {
              v71 = (v41 & 0xFFFFF) <= 0xFFFF3 ? v41 & 0xFFFFF : v41 & 0xFFFFF | 0xF00000;
              if (v71 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v138);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v71, (DgnString *)&v138, v72, v73, v74, v75, v76);
                v81 = &unk_209A6C820;
                if (v138.i32[2])
                  v81 = (void *)v138.i64[0];
                xprintf("Seed from state %d score %d trace %d, %s\n", v77, v78, v79, v80, v110, *(unsigned int *)(*((_QWORD *)this + 27) + 32 * v10), *(unsigned int *)(*((_QWORD *)this + 27) + 32 * v10 + 8), v81);
                MiniFst::seed((uint64_t)v103, *(_DWORD *)(*((_QWORD *)this + 27) + 32 * v10), *(_DWORD *)(*((_QWORD *)this + 27) + 32 * v10 + 20), *(_DWORD *)(*((_QWORD *)this + 27) + 32 * v10 + 8), v124);
                DgnString::~DgnString((DgnString *)&v138);
              }
            }
          }
          else
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 64) >= 5000)
              v43 = 5000;
            else
              v43 = *((_DWORD *)this + 19) + *((_DWORD *)this + 64);
            v122 = (v41 >> 20) & 0x3FF;
            v44 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v40 + 4 * v38), *(_DWORD *)(*((_QWORD *)this + 27) + 32 * v10) + ((*(_DWORD *)(v40 + 4 * v38) >> 20) & 0x3FFu), v43);
            if (v10 <= v109)
            {
              v45 = 0;
              v46 = (v44 - *(_DWORD *)(*((_QWORD *)this + 27) + 32 * v10));
              v47 = (unsigned __int16)v41;
              v48 = v105;
              if ((_WORD)v41)
                v49 = v104;
              else
                v49 = 0;
              v120 = v41;
              v113 = v49;
              do
              {
                v50 = *((_QWORD *)this + 27) + v125 + v45;
                v51 = v46 + *(_DWORD *)v50;
                if ((_DWORD)v47)
                  v53 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * v47);
                else
                  v53 = 0;
                if ((_DWORD)v47)
                {
                  v52 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * v47);
                  v54 = v52 & (v52 >> 31);
                }
                else
                {
                  v54 = 0;
                }
                v55 = (*(_DWORD *)(v50 + 24) & ~(*(int *)(v50 + 24) >> 31)) - v54 + v49;
                v56 = v51 + v55;
                v57 = v51 + v55 - v7;
                v58 = *((_DWORD *)this + 64);
                if (v57 <= v58)
                {
                  v59 = *(_DWORD *)(v50 + 8);
                  v60 = *(_WORD *)(v50 + 14);
                  v61 = *(_DWORD *)(v50 + 16);
                  v62 = *(_DWORD *)(v50 + 20);
                  v63 = *(_DWORD *)(v50 + 28);
                  if (v58 > v56)
                    *v114 = v56;
                  this = v123;
                  v64 = *((unsigned int *)v123 + 60);
                  if (v64 == *((_DWORD *)v123 + 61))
                  {
                    v118 = v61;
                    v119 = v59;
                    v65 = v46;
                    v66 = v47;
                    v117 = v60;
                    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v112, 1, 1);
                    v61 = v118;
                    v59 = v119;
                    v60 = v117;
                    v49 = v113;
                    v47 = v66;
                    v46 = v65;
                    v64 = *((unsigned int *)v123 + 60);
                  }
                  v67 = *((_QWORD *)v123 + 29) + 32 * v64;
                  *(_DWORD *)v67 = v56;
                  *(_DWORD *)(v67 + 4) = v124;
                  *(_DWORD *)(v67 + 8) = v59;
                  v41 = v120;
                  *(_WORD *)(v67 + 12) = v120;
                  *(_WORD *)(v67 + 14) = v60;
                  *(_DWORD *)(v67 + 16) = v61 + v122;
                  *(_DWORD *)(v67 + 20) = v62;
                  *(_DWORD *)(v67 + 24) = v53;
                  *(_DWORD *)(v67 + 28) = v55 + v63;
                  v68 = *((_DWORD *)v123 + 60) + 1;
                  *((_DWORD *)v123 + 60) = v68;
                  if (!v45)
                  {
                    v69 = v115;
                    if (v116 == 2 * *((_DWORD *)v123 + 4))
                      v69 = v68;
                    v115 = v69;
                    ++v116;
                  }
                  v7 = v121;
                }
                v45 += 32;
                --v48;
              }
              while (v48);
            }
          }
          v38 = v111 + 2;
          v10 = v107;
          v9 = v108;
        }
        while ((v41 & 0x80000000) == 0);
        v8 = *((_DWORD *)this + 56);
      }
    }
    while (v9 < v8);
    a3 = *v114;
  }
  else
  {
    v115 = 0;
    v116 = 0;
  }
  v140 = a3 + v7;
  if (*((_BYTE *)this + 380))
    MiniFst::updateFrame((char *)this + 264, v114, v7, a2);
  v138 = 0u;
  v139 = 0u;
  SnapTime::recordTime((SnapTime *)&v138, 1, 0, 0, 0);
  v138 = vsubq_s64(v138, v141);
  v139 = vsubq_s64(v139, v142);
  v82 = (int64x2_t *)*((_QWORD *)this + 13);
  v83 = vaddq_s64(v82[1], v139);
  *v82 = vaddq_s64(*v82, v138);
  v82[1] = v83;
  v136 = 0u;
  v137 = 0u;
  SnapTime::recordTime((SnapTime *)&v136, 1, 0, 0, 0);
  if (v116 > 2 * *((_DWORD *)this + 4))
    FstSearchLatticeDurationBackoff::applyCutoffOnEmitting((uint64_t)this, v115, &v140);
  v134 = 0u;
  v135 = 0u;
  SnapTime::recordTime((SnapTime *)&v134, 1, 0, 0, 0);
  v84 = vsubq_s64(v134, v136);
  v85 = (int64x2_t *)*((_QWORD *)this + 13);
  v86 = v85[3];
  v87 = vaddq_s64(v85[2], v84);
  v134 = v84;
  v135 = vsubq_s64(v135, v137);
  v88 = vaddq_s64(v86, v135);
  v85[2] = v87;
  v85[3] = v88;
  v132 = 0u;
  v133 = 0u;
  SnapTime::recordTime((SnapTime *)&v132, 1, 0, 0, 0);
  FstSearchLatticeDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v89 = *((unsigned int *)this + 6);
  if ((_DWORD)v89)
  {
    v90 = *((unsigned int *)this + 56);
    if (v89 < v90)
      mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(*((_QWORD *)this + 27), v89, v90);
  }
  v130 = 0u;
  v131 = 0u;
  SnapTime::recordTime((SnapTime *)&v130, 1, 0, 0, 0);
  v91 = vsubq_s64(v130, v132);
  v92 = (int64x2_t *)*((_QWORD *)this + 13);
  v93 = v92[5];
  v94 = vaddq_s64(v92[4], v91);
  v130 = v91;
  v131 = vsubq_s64(v131, v133);
  v95 = vaddq_s64(v93, v131);
  v92[4] = v94;
  v92[5] = v95;
  v128 = 0u;
  v129 = 0u;
  SnapTime::recordTime((SnapTime *)&v128, 1, 0, 0, 0);
  *((_DWORD *)this + 60) = 0;
  v96 = *((unsigned int *)this + 56);
  *((_DWORD *)this + 38) = v96;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v96;
    if (*((_DWORD *)a4 + 2) > v96)
      LODWORD(v96) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v96;
  }
  if (*((_BYTE *)this + 380))
    FstSearchLatticeDurationBackoff::seedFromMiniFst((uint64_t)this, v143);
  if (a5)
    FstSearchLatticeDurationBackoff::propagateNulls((uint64_t)this, v140, a2, a4);
  *((_DWORD *)this + 62) = a2;
  v126 = 0u;
  v127 = 0u;
  SnapTime::recordTime((SnapTime *)&v126, 1, 0, 0, 0);
  v97 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v97[6], vsubq_s64(v126, v128));
  v99 = vaddq_s64(v97[7], vsubq_s64(v127, v129));
  v97[6] = result;
  v97[7] = v99;
  return result;
}

void sub_209844280(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLatticeDurationBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(unsigned int *)(this + 240);
  if (v4 > a2)
  {
    v6 = this;
    v7 = (_QWORD *)(this + 232);
    v8 = a2;
    this = mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(*(_QWORD *)(this + 232), a2, v4);
    v9 = *(_DWORD *)(*v7 + 32 * a2);
    if (*a3 > v9)
      *a3 = v9;
    v10 = *(_DWORD *)(v6 + 244);
    if (a2 > v10)
      this = DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v7, a2 - v10, 0);
    v11 = *(unsigned int *)(v6 + 240);
    if (v11 < a2)
    {
      v12 = v8 - v11;
      v13 = 32 * v11;
      do
      {
        v14 = *v7 + v13;
        *(_QWORD *)v14 = 0xFFFFFFFF00000000;
        *(_DWORD *)(v14 + 8) = -1;
        *(_WORD *)(v14 + 12) = -2;
        *(_QWORD *)(v14 + 16) = 0;
        *(_QWORD *)(v14 + 24) = 0;
        v13 += 32;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 240) = a2;
  }
  return this;
}

uint64_t FstSearchLatticeDurationBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int i;
  int v10;
  int *v11;
  int v12;
  int v13;
  _OWORD *v14;
  __int128 v15;

  v1 = this;
  v2 = *(unsigned int *)(this + 240);
  if ((_DWORD)v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 232), v2, 32);
    v3 = *(_DWORD *)(v1 + 240);
    *(_DWORD *)(v1 + 224) = 0;
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0;
      do
      {
        v7 = *(_QWORD *)(v1 + 232);
        if (v5 && (v8 = v7 + 32 * v5, *(_DWORD *)(v8 + 4) == *(_DWORD *)(v8 - 28)))
        {
          if (v4 >= *(_DWORD *)(v1 + 20) + v6)
            goto LABEL_16;
          i = v6;
          if (v6 < v4)
          {
            v10 = *(_DWORD *)(v7 + 32 * v5 + 20);
            v11 = (int *)(*(_QWORD *)(v1 + 216) + 32 * v6 + 20);
            for (i = v6; v4 != i; ++i)
            {
              v12 = *v11;
              v11 += 8;
              if (v12 == v10)
                break;
            }
          }
          if (i != v4)
            goto LABEL_16;
          v13 = *(_DWORD *)(v1 + 228);
        }
        else
        {
          v8 = v7 + 32 * v5;
          v13 = *(_DWORD *)(v1 + 228);
          v6 = v4;
        }
        if (v4 == v13)
        {
          this = DgnArray<PrefilterResultFrame>::reallocElts(v1 + 216, 1, 1);
          v4 = *(_DWORD *)(v1 + 224);
        }
        v14 = (_OWORD *)(*(_QWORD *)(v1 + 216) + 32 * v4);
        v15 = *(_OWORD *)(v8 + 16);
        *v14 = *(_OWORD *)v8;
        v14[1] = v15;
        v4 = *(_DWORD *)(v1 + 224) + 1;
        *(_DWORD *)(v1 + 224) = v4;
LABEL_16:
        ++v5;
      }
      while (v5 < *(unsigned int *)(v1 + 240));
    }
  }
  else
  {
    *(_DWORD *)(this + 224) = 0;
  }
  return this;
}

uint64_t FstSearchLatticeDurationBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (*(_BYTE *)(this + 380))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 288);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v46 = this + 176;
      v5 = (_QWORD *)(this + 160);
      v39 = this + 216;
      do
      {
        v6 = (int *)(*(_QWORD *)(v2 + 280) + 36 * v4);
        v7 = v6[4];
        v43 = *v6;
        v44 = v6[5];
        v8 = v6[6];
        v45 = v6[7];
        v9 = v6[2];
        v47 = 0;
        v48 = 0;
        v41 = v8;
        v42 = v7;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          v10 = 0;
          v11 = 0;
          do
          {
            if (v11 == HIDWORD(v48))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v47, 1, 1);
              v11 = v48;
              v10 = v47;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            v12 = v48;
            v11 = v48 + 1;
            LODWORD(v48) = v48 + 1;
            v9 = *(_DWORD *)(*(_QWORD *)(v2 + 264) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            v14 = v12 + 1;
            v15 = 4 * v12;
            do
            {
              v16 = *(_DWORD *)(v47 + v15);
              v17 = *(_QWORD *)(v2 + 264);
              v18 = (int *)(v17 + 36 * v16);
              v19 = *v18;
              v20 = *((_QWORD *)v18 + 2);
              v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
                v21 = *(_DWORD *)(v2 + 184);
                v17 = *(_QWORD *)(v2 + 264);
              }
              v22 = *(_QWORD *)(v2 + 176) + 20 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)v22 = v19;
              *(_QWORD *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = 0;
              v23 = *(_QWORD *)(v17 + 36 * v16 + 28);
              v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                v24 = *(unsigned int *)(v2 + 168);
              }
              v25 = *(_QWORD *)(v2 + 160);
              v26 = v25 + 16 * v24;
              *(_QWORD *)v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
          v27 = *(_DWORD *)(v2 + 184);
        }
        v28 = *(_QWORD *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        v29 = (_DWORD *)(v28 + 20 * v27);
        *v29 = v43;
        v29[1] = v42;
        v29[2] = v44;
        v29[3] = v13;
        v29[4] = 0;
        if (v45 == 16777213)
        {
          v45 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v13) == 16777209)
          {
            v27 = *(_DWORD *)(*v5 + 16 * v13 + 8);
            v45 = 16777209;
          }
        }
        v30 = *a2;
        v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          v31 = *(unsigned int *)(v2 + 168);
        }
        v32 = *(_QWORD *)(v2 + 160);
        v33 = (int *)(v32 + 16 * v31);
        *v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        v35 = *(unsigned int *)(v2 + 224);
        if (v35 == *(_DWORD *)(v2 + 228))
        {
          DgnArray<PrefilterResultFrame>::reallocElts(v39, 1, 1);
          v35 = *(unsigned int *)(v2 + 224);
        }
        v36 = *(_QWORD *)(v2 + 216) + 32 * v35;
        *(_DWORD *)v36 = v43;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v42;
        *(_DWORD *)(v36 + 20) = v44;
        *(_QWORD *)(v36 + 24) = 0;
        ++*(_DWORD *)(v2 + 224);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 288);
        v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38)
          v37 = v38;
        else
          v37 = v37;
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_209844818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDurationBackoff::propagateNulls(uint64_t this, int a2, int a3, SearchStats *a4)
{
  int v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  __int16 v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  __int16 v35;
  int v36;
  int v37;
  _DWORD *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  __int16 v43;
  __int16 v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  __int16 v48;
  int v49;
  int *v50;
  int v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int *v65;
  int v66;
  __int128 v67;
  _OWORD *v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  SearchStats *v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;

  v4 = *(_DWORD *)(this + 168);
  v5 = (_QWORD *)(this + 216);
  LODWORD(v6) = *(_DWORD *)(this + 224);
  v86 = this;
  if ((_DWORD)v6)
  {
    v73 = *(_DWORD *)(this + 168);
    v74 = a4;
    LODWORD(v7) = 0;
    v85 = (_QWORD *)(this + 160);
    v80 = this + 176;
    v82 = this + 216;
    v88 = a2;
    do
    {
      v8 = v7;
      v9 = *(unsigned int *)(*v5 + 32 * v7 + 4);
      if (v6 <= (int)v7 + 1)
        v10 = v7 + 1;
      else
        v10 = v6;
      v78 = v7;
      while (v10 - 1 != (_DWORD)v7)
      {
        v7 = (v7 + 1);
        if (*(_DWORD *)(*v5 + 32 * v7 + 4) != (_DWORD)v9)
          goto LABEL_11;
      }
      LODWORD(v7) = v10;
LABEL_11:
      v11 = *(_QWORD *)(this + 40);
      if (*(_DWORD *)(v11 + 160) != (_DWORD)v9
        && (*(_DWORD *)(v11 + 140) <= (int)v9 || (*(_DWORD *)(*(_QWORD *)(v11 + 152) + 4 * v9) & 0x40000000) != 0))
      {
        v91 = 32 * v8;
        v76 = v9;
        v77 = v7;
        v75 = v7 - v78;
        v12 = v9;
        do
        {
          v13 = *(_QWORD *)(this + 40);
          v14 = *(_QWORD *)(v13 + 152);
          v83 = v12;
          v87 = *(_DWORD *)(v14 + 4 * v12);
          v15 = *(_DWORD *)(v13 + 140);
          v90 = *(_DWORD *)(v14 + 4 * (v12 + 1));
          if (v15 <= v90)
          {
            v16 = (v87 & 0xFFFFF) <= 0xFFFF3 ? v87 & 0xFFFFF : v87 & 0xFFFFF | 0xF00000;
            v17 = v16 != 16777210 && v15 <= v76;
            if (!v17 && v77 > v78)
            {
              v19 = 0;
              v20 = (v87 >> 20) & 0x3FF;
              v84 = v16 + 1;
              v21 = v75;
              v89 = v16;
              do
              {
                v22 = *v5;
                v23 = *v5 + v91;
                v24 = *(_DWORD *)(v23 + v19) + v20;
                if (v24 > a2)
                  break;
                v25 = v23 + v19;
                v26 = *(_DWORD *)(v25 + 8);
                v27 = *(_WORD *)(v25 + 12);
                v28 = *(_WORD *)(v25 + 14);
                v29 = *(_DWORD *)(v25 + 20);
                v30 = *(_DWORD *)(v25 + 28);
                v31 = *(_DWORD *)(v25 + 16) + v20;
                if (v16 == 16777210)
                {
                  v40 = *(unsigned int *)(this + 224);
                  if (v40 == *(_DWORD *)(this + 228))
                  {
                    v41 = (uint64_t)v5;
                    v42 = v5;
                    v43 = v28;
                    v44 = v27;
                    v45 = v31;
                    DgnArray<PrefilterResultFrame>::reallocElts(v41, 1, 1);
                    a2 = v88;
                    v31 = v45;
                    v27 = v44;
                    v28 = v43;
                    v5 = v42;
                    v20 = (v87 >> 20) & 0x3FF;
                    v16 = v89;
                    this = v86;
                    v40 = *(unsigned int *)(v86 + 224);
                    v22 = *(_QWORD *)(v86 + 216);
                  }
                  v46 = v22 + 32 * v40;
                  *(_DWORD *)v46 = v24;
                  *(_DWORD *)(v46 + 4) = v90;
                  *(_DWORD *)(v46 + 8) = v26;
                  *(_WORD *)(v46 + 12) = v27;
                  *(_WORD *)(v46 + 14) = v28;
                  *(_DWORD *)(v46 + 16) = v31;
                  *(_DWORD *)(v46 + 20) = v29;
                  *(_DWORD *)(v46 + 24) = 0;
                  *(_DWORD *)(v46 + 28) = v30;
                  ++*(_DWORD *)(this + 224);
                }
                else
                {
                  if (v16 == 16777214)
                    v32 = *(_DWORD *)(v25 + 16) + v20;
                  else
                    v32 = 0;
                  if (v16 == 16777214)
                    v33 = 0;
                  else
                    v33 = *(_DWORD *)(v25 + 16) + v20;
                  v34 = *(_DWORD *)(this + 184);
                  if (v34 == *(_DWORD *)(this + 188))
                  {
                    v35 = *(_WORD *)(v25 + 14);
                    v81 = *(_WORD *)(v25 + 12);
                    v36 = *(_DWORD *)(v25 + 16) + v20;
                    DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v80, 1, 1);
                    v31 = v36;
                    v27 = v81;
                    v28 = v35;
                    v20 = (v87 >> 20) & 0x3FF;
                    v16 = v89;
                    this = v86;
                    v34 = *(_DWORD *)(v86 + 184);
                  }
                  v37 = v84 + 2 * v29;
                  v38 = (_DWORD *)(*(_QWORD *)(this + 176) + 20 * v34);
                  *(_DWORD *)(this + 184) = v34 + 1;
                  *v38 = v24 - v32;
                  v38[1] = v33;
                  v38[2] = v37;
                  v38[3] = v26;
                  v38[4] = v30;
                  v39 = *(_DWORD *)(this + 168);
                  if (v19)
                  {
                    v5 = (_QWORD *)v82;
                    a2 = v88;
                  }
                  else
                  {
                    v5 = (_QWORD *)v82;
                    if (v39 == *(_DWORD *)(this + 172))
                    {
                      v47 = v28;
                      v48 = v27;
                      v49 = v31;
                      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v85, 1, 1);
                      v31 = v49;
                      v27 = v48;
                      v28 = v47;
                      v20 = (v87 >> 20) & 0x3FF;
                      v16 = v89;
                      this = v86;
                      v39 = *(_DWORD *)(v86 + 168);
                    }
                    v50 = (int *)(*(_QWORD *)(this + 160) + 16 * v39);
                    *v50 = v16;
                    v50[1] = a3;
                    v50[2] = v34;
                    v50[3] = 0;
                    v51 = *(_DWORD *)(this + 168);
                    *(_DWORD *)(this + 168) = v51 + 1;
                    v52 = *(unsigned int *)(this + 224);
                    if (v52 == *(_DWORD *)(this + 228))
                    {
                      v53 = v28;
                      v54 = v27;
                      v55 = v31;
                      DgnArray<PrefilterResultFrame>::reallocElts(v82, 1, 1);
                      v31 = v55;
                      v27 = v54;
                      v28 = v53;
                      v20 = (v87 >> 20) & 0x3FF;
                      v16 = v89;
                      this = v86;
                      v52 = *(unsigned int *)(v86 + 224);
                    }
                    v56 = *(_QWORD *)(this + 216) + 32 * v52;
                    *(_DWORD *)v56 = v24;
                    *(_DWORD *)(v56 + 4) = v90;
                    *(_DWORD *)(v56 + 8) = v51;
                    *(_WORD *)(v56 + 12) = v27;
                    *(_WORD *)(v56 + 14) = v28;
                    *(_DWORD *)(v56 + 16) = v31;
                    *(_DWORD *)(v56 + 20) = v37;
                    *(_QWORD *)(v56 + 24) = 0;
                    ++*(_DWORD *)(this + 224);
                    v39 = *(_DWORD *)(this + 168);
                    a2 = v88;
                  }
                  v57 = *v85 + 16 * (v39 - 1);
                  ++*(_DWORD *)(v57 + 12);
                }
                v19 += 32;
                --v21;
              }
              while (v21);
            }
          }
          v12 = v83 + 2;
        }
        while ((v87 & 0x80000000) == 0);
        LODWORD(v6) = *(_DWORD *)(this + 224);
        LODWORD(v7) = v77;
      }
    }
    while (v7 < v6);
    v58 = *(unsigned int *)(this + 152);
    if (v6 > v58)
    {
      mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*(_QWORD *)(this + 216) + 32 * v58), (v6 - v58), 32);
      this = v86;
      v58 = *(unsigned int *)(v86 + 152);
      LODWORD(v6) = *(_DWORD *)(v86 + 224);
    }
    if (v58 < v6)
    {
      v59 = v58;
      v60 = v58;
      do
      {
        v61 = *v5;
        v62 = *v5 + 32 * v59;
        v63 = v58;
        if (*(_DWORD *)(v62 + 4) != *(_DWORD *)(*v5 + 32 * (v59 - 1) + 4))
          goto LABEL_65;
        if ((v58 - v60) < *(_DWORD *)(this + 20))
        {
          v64 = v60;
          if (v58 > v60)
          {
            v65 = (int *)(v61 + 32 * v60 + 20);
            v64 = v60;
            while (1)
            {
              v66 = *v65;
              v65 += 8;
              if (v66 == *(_DWORD *)(v61 + 32 * v59 + 20))
                break;
              if ((_DWORD)v58 == ++v64)
              {
                v63 = v60;
                goto LABEL_65;
              }
            }
          }
          v63 = v60;
          if (v64 == (_DWORD)v58)
          {
LABEL_65:
            v67 = *(_OWORD *)(v62 + 16);
            v68 = (_OWORD *)(v61 + 32 * v58);
            *v68 = *(_OWORD *)v62;
            v68[1] = v67;
            v58 = (v58 + 1);
            v60 = v63;
          }
        }
        ++v59;
        v6 = *(unsigned int *)(this + 224);
      }
      while (v59 < v6);
    }
    a4 = v74;
    v4 = v73;
    if (v74)
      goto LABEL_68;
  }
  else
  {
    LODWORD(v58) = *(_DWORD *)(this + 152);
    if (a4)
LABEL_68:
      *((_DWORD *)a4 + 1) += *(_DWORD *)(this + 168) - v4;
  }
  v69 = *(_DWORD *)(this + 228);
  if (v58 > v69)
  {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v5, v58 - v69, 0);
    this = v86;
    LODWORD(v6) = *(_DWORD *)(v86 + 224);
  }
  if (v6 < v58)
  {
    v70 = v58 - (unint64_t)v6;
    v71 = 32 * v6;
    do
    {
      v72 = *v5 + v71;
      *(_QWORD *)v72 = 0xFFFFFFFF00000000;
      *(_DWORD *)(v72 + 8) = -1;
      *(_WORD *)(v72 + 12) = -2;
      *(_QWORD *)(v72 + 16) = 0;
      *(_QWORD *)(v72 + 24) = 0;
      v71 += 32;
      --v70;
    }
    while (v70);
  }
  *(_DWORD *)(this + 224) = v58;
  return this;
}

uint64_t FstSearchLatticeDurationBackoff::collectTraces(FstSearchLatticeDurationBackoff *this)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  _OWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t *v49;
  int v50;

  v2 = *((unsigned int *)this + 42);
  v50 = 0;
  v49 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v49 = v3;
    v50 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = *((unsigned int *)this + 56);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unsigned int *)(*((_QWORD *)this + 27) + 8);
    do
    {
      v9 = *v7;
      v7 += 8;
      v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        v5 = *((unsigned int *)this + 56);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v10) = *((_DWORD *)this + 42);
  if (!(_DWORD)v10)
    goto LABEL_50;
  v11 = 0;
  v12 = (uint64_t *)((char *)this + 160);
  v13 = (uint64_t *)((char *)this + 176);
  do
  {
    v10 = (v10 - 1);
    if ((v11 & 1) != 0)
    {
      v11 = 1;
    }
    else if (*(_DWORD *)(*v12 + 16 * v10) == 16777213)
    {
      v11 = 1;
      *((_DWORD *)v3 + v10) = 1;
    }
    else
    {
      v11 = 0;
    }
    if (*((_DWORD *)v3 + v10))
    {
      v14 = *v12 + 16 * v10;
      v15 = *(_DWORD *)(v14 + 12);
      if (v15 >= 1)
      {
        v16 = *(_DWORD *)(v14 + 8);
        v17 = v15 + v16;
        v18 = *v13;
        do
        {
          v19 = *(unsigned int *)(v18 + 20 * v16 + 12);
          if ((_DWORD)v19 != -1)
            *((_DWORD *)v3 + v19) = 1;
          ++v16;
        }
        while ((int)v16 < v17);
      }
    }
  }
  while ((_DWORD)v10);
  v20 = *((_DWORD *)this + 42);
  if (v20)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    do
    {
      if (*((_DWORD *)v3 + v21))
      {
        v24 = *v12;
        if (v21 != v22)
        {
          *(_OWORD *)(v24 + 16 * v22) = *(_OWORD *)(v24 + 16 * v21);
          v24 = *v12;
        }
        *(_DWORD *)(v24 + 16 * v22 + 8) = v23;
        v25 = v24 + 16 * v21;
        v26 = *(unsigned int *)(v25 + 8);
        v27 = (*(_DWORD *)(v25 + 12) + v26);
        if (v26 < v27)
        {
          v28 = *v13;
          v29 = 20 * v26;
          do
          {
            if (v26 != v23)
            {
              v30 = (__int128 *)(v28 + v29);
              v31 = v28 + 20 * v23;
              v32 = *v30;
              *(_DWORD *)(v31 + 16) = *((_DWORD *)v30 + 4);
              *(_OWORD *)v31 = v32;
              v28 = *v13;
            }
            v33 = v28 + 20 * v23;
            v36 = *(_DWORD *)(v33 + 12);
            v34 = (_DWORD *)(v33 + 12);
            v35 = v36;
            if (v36 != -1)
              *v34 = *((_DWORD *)v3 + v35);
            ++v23;
            ++v26;
            v29 += 20;
          }
          while (v27 != v26);
        }
        *((_DWORD *)v3 + v21) = v22++;
        v20 = *((_DWORD *)this + 42);
      }
      ++v21;
    }
    while (v21 < v20);
    v37 = *((_DWORD *)this + 43);
    if (v22 > v37)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, v22 - v37, 0);
      v20 = *((_DWORD *)this + 42);
    }
    if (v20 < v22)
    {
      v38 = v22 - (unint64_t)v20;
      v39 = (_OWORD *)(*v12 + 16 * v20);
      do
      {
        *v39++ = xmmword_209A6C7D0;
        --v38;
      }
      while (v38);
    }
    *((_DWORD *)this + 42) = v22;
    v40 = *((_DWORD *)this + 47);
    if (v23 > v40)
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 176, v23 - v40, 0);
    v41 = *((unsigned int *)this + 46);
    if (v41 < v23)
    {
      v42 = v23 - v41;
      v43 = (_DWORD *)(*v13 + 20 * v41 + 16);
      do
      {
        *((_OWORD *)v43 - 1) = xmmword_209A6C7C0;
        *v43 = 0;
        v43 += 5;
        --v42;
      }
      while (v42);
    }
  }
  else
  {
LABEL_50:
    v23 = 0;
    *((_DWORD *)this + 42) = 0;
  }
  *((_DWORD *)this + 46) = v23;
  v44 = *((unsigned int *)this + 56);
  if ((_DWORD)v44)
  {
    v45 = v49;
    v46 = (_DWORD *)(*((_QWORD *)this + 27) + 8);
    do
    {
      v47 = *v46;
      if ((_DWORD)v47 != -1)
        *v46 = *((_DWORD *)v45 + v47);
      v46 += 8;
      --v44;
    }
    while (v44);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v49);
}

void sub_2098450EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLatticeDurationBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLatticeDurationBackoff::advanceDeltas((FstSearchLatticeDurationBackoff *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLatticeDurationBackoff::collectTraces((FstSearchLatticeDurationBackoff *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLatticeDurationBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  return this;
}

double FstSearchLatticeDurationBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLatticeDurationBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLatticeDurationBackoff::beginTopRecPassSyncRecog(FstSearchLatticeDurationBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 264, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 94) = result;
    *((_BYTE *)this + 380) = 1;
  }
  return result;
}

uint64_t FstSearchLatticeDurationBackoff::endTopRecPassSyncRecog(FstSearchLatticeDurationBackoff *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 64) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLatticeDurationBackoff::printSize(FstSearchLatticeDurationBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 16 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 16 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 20 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 20 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((unsigned int *)this + 56);
  v65 = 30 * v64;
  if ((int)v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 30 * (*((_DWORD *)this + 57) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((unsigned int *)this + 60);
  v75 = 30 * v74;
  if ((int)v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 30 * (*((_DWORD *)this + 61) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 264, 0);
  v99 = sizeObject((uint64_t)this + 264, 1);
  v100 = sizeObject((uint64_t)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_209845A08(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDurationBackoff::getBestTrace(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if ((a4 & 1) != 0)
    v4 = 0;
  else
    v4 = *(unsigned int *)(a1 + 152);
  v5 = *(unsigned int *)(a1 + 224);
  if (v4 >= v5)
    goto LABEL_21;
  v6 = 32 * v4;
  v7 = 1879048192;
  v8 = 0xFFFFFFFFLL;
  do
  {
    v9 = *(_QWORD *)(a1 + 216);
    if (!a4 || (v10 = *(unsigned int *)(v9 + v6 + 8), (_DWORD)v10 == -1))
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4))
        goto LABEL_19;
      v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2)
      *(_BYTE *)(*a2 + v10) = 1;
    if (a3)
      *(_BYTE *)(*a3 + v10) = 1;
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8))
        + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 4));
    if (v7 > v11)
      v8 = v10;
    if (v7 >= v11)
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8))
         + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 4));
    v5 = *(unsigned int *)(a1 + 224);
LABEL_19:
    ++v4;
    v6 += 32;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    v12 = *(unsigned int *)(a1 + 168);
    v8 = 0xFFFFFFFFLL;
    while (v12)
    {
      --v12;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v12) == 16777213)
      {
        if (a2)
          *(_BYTE *)(*a2 + v12) = 1;
        v8 = v12;
        if (a3)
          *(_BYTE *)(*a3 + v12) = 1;
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLatticeDurationBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLatticeDurationBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchLatticeDurationBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, char a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v27, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLatticeHashBackoff::createLatticeNodes(a1, &v30, (uint64_t)&v28, (uint64_t)a2, v27, a3, a4);
  v23 = (uint64_t)v8;
  v24 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v24)
  {
    v10 = 0;
    v11 = v29;
    do
    {
      if (*(_BYTE *)(*a3 + v10))
      {
        v12 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v12 + 16 * v10) != 16777209)
        {
          v13 = v12 + 16 * v10;
          if (*(int *)(v13 + 12) >= 1)
          {
            v14 = *(_DWORD *)(v13 + 8);
            do
            {
              v15 = *(_QWORD *)(a1 + 176) + 20 * v14;
              v16 = *(unsigned int *)(v15 + 12);
              if ((_DWORD)v16 == -1)
                v17 = 0;
              else
                v17 = v11 - *((_DWORD *)v30 + v16);
              v18 = *(unsigned int *)(v28 + 4 * v17);
              if (*(_BYTE *)(*a4 + v10))
                FstSearchLatticeDurationBackoff::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v10))), a2, v9, a5);
              v19 = v27[0];
              if (*(_DWORD *)(v27[0] + 16 * v10 + 8))
              {
                v20 = 0;
                do
                {
                  v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v10) + 4 * v20);
                  FstSearchLatticeDurationBackoff::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v21))), a2, v9, a5);
                  ++v20;
                  v19 = v27[0];
                }
                while (v20 < *(unsigned int *)(v27[0] + 16 * v10 + 8));
              }
              ++v14;
            }
            while (v14 < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 12)
                        + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v30);
}

void sub_209845EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLatticeDurationBackoff::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  _DWORD *SilenceToken;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  ArcGraph *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _QWORD v34[2];
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  __int128 v49;
  _DWORD v50[2];
  __int128 v51;

  v11 = a5;
  v12 = a4;
  if ((a4 & 0x80000000) != 0)
    SilenceToken = 0;
  else
    SilenceToken = (_DWORD *)FstSearchLatticeHashBackoff::getSilenceToken((FstSearchLatticeHashBackoff *)this, a4, a2);
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v50);
  v17 = a3[1];
  if (SilenceToken)
  {
    v17 += SilenceToken[1];
    v18 = *SilenceToken + *a3;
  }
  else
  {
    v18 = *a3;
  }
  if (v50[0] >> 25 == 126)
  {
    v19 = 0;
    v20 = v17;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_9:
      v21 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v19 = *((_DWORD *)this + 34);
    v20 = v17 - v19;
    if ((v12 & 0x80000000) != 0)
      goto LABEL_9;
  }
  v21 = *((_DWORD *)this + 35);
  v20 -= v21;
LABEL_12:
  v22 = a3[4];
  if (SilenceToken)
    v22 += SilenceToken[4];
  v23 = v18 - v17 - v22;
  v24 = a3[3];
  v25 = this[20];
  if ((_DWORD)v24 == -1)
  {
    v27 = 0;
    if (a9)
      goto LABEL_20;
  }
  else
  {
    v26 = *((_DWORD *)v25 + 4 * v24 + 1);
    if (a9)
    {
      if (v26 >= 1)
        --v26;
      v27 = (v26 >> 1) + 1;
LABEL_20:
      v28 = *((_DWORD *)v25 + 4 * a2 + 1);
      if (v28 >= 1)
        --v28;
      v29 = v28 >> 1;
      v30 = (v28 >> 1) - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v31 = *((_DWORD *)v25 + 4 * v12 + 1);
        if (v31 >= 1)
          --v31;
        v32 = v31 >> 1;
        goto LABEL_29;
      }
LABEL_30:
      v33 = 0;
      goto LABEL_31;
    }
    v27 = v26 + 1;
  }
  v29 = *((_DWORD *)v25 + 4 * a2 + 1);
  v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_30;
  v32 = *((_DWORD *)v25 + 4 * v12 + 1);
LABEL_29:
  v33 = v32 - v29;
LABEL_31:
  v35 = v27;
  v36 = v30;
  v37 = v33;
  v38 = v20;
  v39 = 0;
  v40 = v19;
  v41 = v23;
  v42 = v22;
  v43 = v21;
  v44 = xmmword_209A6C7F0;
  v45 = 0;
  v46 = -1;
  v34[0] = &off_24C2149F8;
  v34[1] = 0xBFF0000000000000;
  v47 = v50[0];
  v48 = v50[1];
  v49 = v51;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_2098460F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDurationBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 380))
    return MiniFst::beginTopFstSyncRecog(this + 264);
  return this;
}

uint64_t FstSearchLatticeDurationBackoff::endTopRecSyncRecog(FstSearchLatticeDurationBackoff *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLatticeDurationBackoff::getBestExitScore(FstSearchLatticeDurationBackoff *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  *((_DWORD *)this + 63) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 56);
  if (v1 >= v2)
    goto LABEL_19;
  v4 = 0;
  v5 = 0;
  v6 = 32 * v1;
  do
  {
    v7 = *((_QWORD *)this + 27) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 62))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          v5 = v22;
          v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        v2 = *((unsigned int *)this + 56);
      }
    }
    ++v1;
    v6 += 32;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 20);
    v11 = 1879048192;
    do
    {
      v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        v14 = *(_DWORD *)(v12 + 8);
        v15 = v13 + v14;
        v16 = *((_QWORD *)this + 22);
        do
        {
          v17 = v14;
          v18 = *(_DWORD *)(v16 + 20 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 63) = *(_DWORD *)(v16 + 20 * v17 + 12);
            v11 = v18;
          }
          v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v19 = 20000;
  else
    v19 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_2098462A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDurationBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLatticeDurationBackoff *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 56);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 27);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 8;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLatticeDurationBackoff::seedTheory(FstSearchLatticeDurationBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 176, 1, 1);
      v11 = *((_DWORD *)this + 46);
    }
    v12 = *((_QWORD *)this + 22) + 20 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_209A6C810;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)v12 = a2;
    v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      v13 = *((_DWORD *)this + 42);
    }
    v14 = (_DWORD *)(*((_QWORD *)this + 20) + 16 * v13);
    *v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v15 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v16 = *((_DWORD *)this + 56);
  if (v16 == *((_DWORD *)this + 57))
  {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 216, 1, 1);
    v16 = *((_DWORD *)this + 56);
  }
  v17 = *((_QWORD *)this + 27) + 32 * v16;
  *(_DWORD *)v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  LODWORD(v17) = *((_DWORD *)this + 56) + 1;
  *((_DWORD *)this + 56) = v17;
  *((_DWORD *)this + 38) = v17;
  return FstSearchLatticeDurationBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLatticeDurationBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 252);
  if ((_DWORD)v8 != -1)
  {
    v9 = (_QWORD *)result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(_QWORD *)(result + 176) + 20 * v10[2] + 12); (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = v9[5];
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = v9[20];
      v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = v9[20];
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v9[22] + 20 * *(unsigned int *)(v20 + 16 * v8 + 8));
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(v9[20] + 16 * v16);
      i = *(unsigned int *)(v9[22] + 20 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLatticeDurationBackoff::checkSearchParametersValidityForArcGraph(FstSearchLatticeDurationBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLatticeDurationBackoff::makePartialResult(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  _QWORD v25[2];
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLatticeDurationBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v24 = BestTrace;
  FstSearchLatticeHashBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v26 = v17;
      v27 = v19 - v17;
      v28 = v20 - v19;
      v29 = 0u;
      v30 = 0u;
      v31 = 0;
      v32 = 1879048192;
      v33 = 0;
      v34 = -1;
      v25[0] = &off_24C2149F8;
      v25[1] = 0xBFF0000000000000;
      v35 = *v18;
      v36 = v18[1];
      v37 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v25);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v25);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = a1[20] + 16 * v24;
  return (*(_DWORD *)(a1[22] + 20 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_209846A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDuration::maybeInitDurModel(FstSearchLatticeDuration *this, const PicMgr *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1)
    v6 = 56;
  else
    v6 = 72;
  v7 = v16;
  v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!(_DWORD)v7)
      goto LABEL_13;
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  v9 = 0;
  v10 = v15;
  v11 = *((_QWORD *)this + 24);
  do
  {
    if (!(_WORD)v9 || (v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF))
      v13 = 0;
    else
      v13 = *(_WORD *)(*(_QWORD *)((char *)a2 + v6) + 2 * v12);
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_209846B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLatticeDuration::advanceDeltas(FstSearchLatticeDuration *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int ScoreNoBackoff;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  __int16 v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  int64x2_t *v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t *v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  unint64_t v92;
  unint64_t v93;
  int64x2_t v94;
  int64x2_t *v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  uint64_t v99;
  int64x2_t *v100;
  int64x2_t result;
  int64x2_t v102;
  MiniFst *v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  char *v114;
  uint64_t v115;
  int *v116;
  unint64_t v117;
  int v118;
  int v119;
  __int16 v120;
  int v121;
  unsigned int v122;
  int v123;
  FstSearchLatticeDuration *v124;
  int v125;
  uint64_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int v141;
  int64x2_t v142;
  int64x2_t v143;
  int v144[3];

  v144[0] = a2;
  v142 = 0u;
  v143 = 0u;
  SnapTime::recordTime((SnapTime *)&v142, 1, 0, 0, 0);
  v116 = (int *)((char *)this + 256);
  *((_DWORD *)this + 64) = a3;
  v7 = *((_DWORD *)this + 2);
  v8 = *((_DWORD *)this + 56);
  if (v8)
  {
    v117 = 0;
    v9 = 0;
    v107 = *((_DWORD *)this + 53);
    v108 = *((unsigned __int8 *)this + 208);
    v114 = (char *)this + 232;
    v106 = (FstSearchLatticeDuration *)((char *)this + 264);
    v124 = this;
    v123 = *((_DWORD *)this + 2);
    do
    {
      v10 = v9;
      v126 = 32 * v9;
      v11 = *((_QWORD *)this + 27) + v126;
      v12 = *(unsigned int *)(v11 + 4);
      if (v8 <= v9 + 1)
        ++v9;
      else
        v9 = v8;
      v13 = v9 - 1;
      v14 = (int *)(v11 + 36);
      v15 = 1;
      while (v10 + v15 < (unint64_t)v8)
      {
        v16 = *v14;
        v14 += 8;
        ++v15;
        if (v16 != (_DWORD)v12)
        {
          v13 = v10 + v15 - 2;
          v9 = v10 + v15 - 1;
          break;
        }
      }
      v17 = *((_QWORD *)this + 5);
      if (*(_DWORD *)(v17 + 160) != (_DWORD)v12)
      {
        v110 = v12;
        v18 = *(_DWORD *)(v17 + 140) <= (int)v12 || v10 > v13;
        v112 = v10;
        v109 = v13;
        if (!v18)
        {
          v19 = 0;
          v20 = v13 - v10 + 1;
          do
          {
            v21 = *((_QWORD *)this + 27) + v126 + v19;
            v22 = *(_DWORD *)v21;
            v23 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v21 + 12)) + v22;
            v24 = *((_QWORD *)this + 27) + v126 + v19;
            v25 = *(_WORD *)(v24 + 12);
            v26 = *(_DWORD *)(v24 + 24);
            v27 = v108;
            if (v26 >= 1)
              v27 = v108 - v26;
            v28 = v27 & ((v26 - v108) >> 31);
            if (*(_WORD *)(v24 + 12))
              v29 = v26 - v108;
            else
              v29 = *(_DWORD *)(v24 + 24);
            if (*(_WORD *)(v24 + 12))
              v30 = v28 + *(_DWORD *)(v24 + 28);
            else
              v30 = *(_DWORD *)(v24 + 28);
            if (*(_WORD *)(v24 + 12))
              v31 = v28;
            else
              v31 = 0;
            v32 = v23 + v31;
            if (v23 + v31 - v7 <= *v116)
            {
              v33 = *(_QWORD *)(v24 + 4);
              v34 = *(_WORD *)(v24 + 14);
              v35 = *(_QWORD *)(v24 + 16);
              if (*v116 > v32)
                *v116 = v32;
              this = v124;
              v36 = *((unsigned int *)v124 + 60);
              if (v36 == *((_DWORD *)v124 + 61))
              {
                DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v114, 1, 1);
                v36 = *((unsigned int *)v124 + 60);
              }
              v37 = *((_QWORD *)v124 + 29) + 32 * v36;
              *(_DWORD *)v37 = v32;
              *(_QWORD *)(v37 + 4) = v33;
              *(_WORD *)(v37 + 12) = v25;
              *(_WORD *)(v37 + 14) = v34;
              *(_QWORD *)(v37 + 16) = v35;
              *(_DWORD *)(v37 + 24) = v29;
              *(_DWORD *)(v37 + 28) = v30;
              v38 = *((_DWORD *)v124 + 60) + 1;
              *((_DWORD *)v124 + 60) = v38;
              if (!v19)
              {
                v39 = v117;
                if (HIDWORD(v117) == 2 * *((_DWORD *)v124 + 4))
                  v39 = v38;
                v117 = __PAIR64__(HIDWORD(v117), v39) + 0x100000000;
              }
              v7 = v123;
            }
            else
            {
              this = v124;
            }
            v19 += 32;
            --v20;
          }
          while (v20);
        }
        v40 = v112;
        v41 = v110;
        v111 = v9;
        do
        {
          v42 = *((_QWORD *)this + 5);
          v43 = *(_QWORD *)(v42 + 152);
          v44 = *(_DWORD *)(v43 + 4 * v41);
          v45 = *(_DWORD *)(v42 + 140);
          v125 = *(_DWORD *)(v43 + 4 * (v41 + 1));
          v113 = v41;
          if (v45 <= v125)
          {
            if (*((_BYTE *)this + 380))
              v73 = v45 <= (int)v110;
            else
              v73 = 0;
            if (v73)
            {
              v74 = (v44 & 0xFFFFF) <= 0xFFFF3 ? v44 & 0xFFFFF : v44 & 0xFFFFF | 0xF00000;
              if (v74 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v139);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v74, (DgnString *)&v139, v75, v76, v77, v78, v79);
                v84 = &unk_209A6C820;
                if (v139.i32[2])
                  v84 = (void *)v139.i64[0];
                xprintf("Seed from state %d score %d trace %d, %s\n", v80, v81, v82, v83, v110, *(unsigned int *)(*((_QWORD *)this + 27) + 32 * v112), *(unsigned int *)(*((_QWORD *)this + 27) + 32 * v112 + 8), v84);
                MiniFst::seed((uint64_t)v106, *(_DWORD *)(*((_QWORD *)this + 27) + 32 * v112), *(_DWORD *)(*((_QWORD *)this + 27) + 32 * v112 + 20), *(_DWORD *)(*((_QWORD *)this + 27) + 32 * v112 + 8), v125);
                DgnString::~DgnString((DgnString *)&v139);
              }
            }
          }
          else
          {
            ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v43 + 4 * v41));
            if (v40 <= v109)
            {
              v47 = 0;
              v48 = (v44 >> 20) & 0x3FF;
              v49 = ScoreNoBackoff + v48;
              v50 = (unsigned __int16)v44;
              v51 = v109 - v112 + 1;
              if ((_WORD)v44)
                v52 = v107;
              else
                v52 = 0;
              v122 = v44;
              v115 = (unsigned __int16)v44;
              do
              {
                v53 = *((_QWORD *)this + 27) + v126 + v47;
                v54 = v49 + *(_DWORD *)v53;
                if ((_DWORD)v50)
                  v56 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * v50);
                else
                  v56 = 0;
                if ((_DWORD)v50)
                {
                  v55 = *(__int16 *)(*((_QWORD *)this + 24) + 2 * v50);
                  v57 = v55 & (v55 >> 31);
                }
                else
                {
                  v57 = 0;
                }
                v58 = (*(_DWORD *)(v53 + 24) & ~(*(int *)(v53 + 24) >> 31)) - v57 + v52;
                v59 = v54 + v58;
                v60 = v54 + v58 - v7;
                v61 = *((_DWORD *)this + 64);
                if (v60 <= v61)
                {
                  v62 = *(_DWORD *)(v53 + 8);
                  v63 = *(_WORD *)(v53 + 14);
                  v64 = *(_DWORD *)(v53 + 16);
                  v65 = *(_DWORD *)(v53 + 20);
                  v66 = *(_DWORD *)(v53 + 28);
                  if (v61 > v59)
                    *v116 = v59;
                  this = v124;
                  v67 = *((unsigned int *)v124 + 60);
                  if (v67 == *((_DWORD *)v124 + 61))
                  {
                    v119 = v62;
                    v120 = v63;
                    v68 = v48;
                    v69 = v52;
                    v121 = v65;
                    v118 = v64;
                    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v114, 1, 1);
                    v64 = v118;
                    v62 = v119;
                    v63 = v120;
                    v65 = v121;
                    v52 = v69;
                    v50 = v115;
                    v48 = v68;
                    v67 = *((unsigned int *)v124 + 60);
                  }
                  v70 = *((_QWORD *)v124 + 29) + 32 * v67;
                  *(_DWORD *)v70 = v59;
                  *(_DWORD *)(v70 + 4) = v125;
                  *(_DWORD *)(v70 + 8) = v62;
                  v44 = v122;
                  *(_WORD *)(v70 + 12) = v122;
                  *(_WORD *)(v70 + 14) = v63;
                  *(_DWORD *)(v70 + 16) = v64 + v48;
                  *(_DWORD *)(v70 + 20) = v65;
                  *(_DWORD *)(v70 + 24) = v56;
                  *(_DWORD *)(v70 + 28) = v58 + v66;
                  v71 = *((_DWORD *)v124 + 60) + 1;
                  *((_DWORD *)v124 + 60) = v71;
                  if (!v47)
                  {
                    v72 = v117;
                    if (HIDWORD(v117) == 2 * *((_DWORD *)v124 + 4))
                      v72 = v71;
                    v117 = __PAIR64__(HIDWORD(v117), v72) + 0x100000000;
                  }
                  v7 = v123;
                }
                v47 += 32;
                --v51;
              }
              while (v51);
            }
          }
          v41 = v113 + 2;
          v9 = v111;
          v40 = v112;
        }
        while ((v44 & 0x80000000) == 0);
        v8 = *((_DWORD *)this + 56);
      }
    }
    while (v9 < v8);
    a3 = *v116;
  }
  else
  {
    v117 = 0;
  }
  v141 = a3 + v7;
  if (*((_BYTE *)this + 380))
    MiniFst::updateFrame((char *)this + 264, v116, v7, a2);
  v139 = 0u;
  v140 = 0u;
  SnapTime::recordTime((SnapTime *)&v139, 1, 0, 0, 0);
  v139 = vsubq_s64(v139, v142);
  v140 = vsubq_s64(v140, v143);
  v85 = (int64x2_t *)*((_QWORD *)this + 13);
  v86 = vaddq_s64(v85[1], v140);
  *v85 = vaddq_s64(*v85, v139);
  v85[1] = v86;
  v137 = 0u;
  v138 = 0u;
  SnapTime::recordTime((SnapTime *)&v137, 1, 0, 0, 0);
  if (HIDWORD(v117) > 2 * *((_DWORD *)this + 4))
    FstSearchLatticeDurationBackoff::applyCutoffOnEmitting((uint64_t)this, v117, &v141);
  v135 = 0u;
  v136 = 0u;
  SnapTime::recordTime((SnapTime *)&v135, 1, 0, 0, 0);
  v87 = vsubq_s64(v135, v137);
  v88 = (int64x2_t *)*((_QWORD *)this + 13);
  v89 = v88[3];
  v90 = vaddq_s64(v88[2], v87);
  v135 = v87;
  v136 = vsubq_s64(v136, v138);
  v91 = vaddq_s64(v89, v136);
  v88[2] = v90;
  v88[3] = v91;
  v133 = 0u;
  v134 = 0u;
  SnapTime::recordTime((SnapTime *)&v133, 1, 0, 0, 0);
  FstSearchLatticeDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v92 = *((unsigned int *)this + 6);
  if ((_DWORD)v92)
  {
    v93 = *((unsigned int *)this + 56);
    if (v92 < v93)
      mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(*((_QWORD *)this + 27), v92, v93);
  }
  v131 = 0u;
  v132 = 0u;
  SnapTime::recordTime((SnapTime *)&v131, 1, 0, 0, 0);
  v94 = vsubq_s64(v131, v133);
  v95 = (int64x2_t *)*((_QWORD *)this + 13);
  v96 = v95[5];
  v97 = vaddq_s64(v95[4], v94);
  v131 = v94;
  v132 = vsubq_s64(v132, v134);
  v98 = vaddq_s64(v96, v132);
  v95[4] = v97;
  v95[5] = v98;
  v129 = 0u;
  v130 = 0u;
  SnapTime::recordTime((SnapTime *)&v129, 1, 0, 0, 0);
  *((_DWORD *)this + 60) = 0;
  v99 = *((unsigned int *)this + 56);
  *((_DWORD *)this + 38) = v99;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v99;
    if (*((_DWORD *)a4 + 2) > v99)
      LODWORD(v99) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v99;
  }
  if (*((_BYTE *)this + 380))
    FstSearchLatticeDuration::seedFromMiniFst((uint64_t)this, v144);
  if (a5)
    FstSearchLatticeDurationBackoff::propagateNulls((uint64_t)this, v141, a2, a4);
  *((_DWORD *)this + 62) = a2;
  v127 = 0u;
  v128 = 0u;
  SnapTime::recordTime((SnapTime *)&v127, 1, 0, 0, 0);
  v100 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v100[6], vsubq_s64(v127, v129));
  v102 = vaddq_s64(v100[7], vsubq_s64(v128, v130));
  v100[6] = result;
  v100[7] = v102;
  return result;
}

void sub_209847298(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLatticeDuration::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (*(_BYTE *)(this + 380))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 288);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v46 = this + 176;
      v5 = (_QWORD *)(this + 160);
      v39 = this + 216;
      do
      {
        v6 = (int *)(*(_QWORD *)(v2 + 280) + 36 * v4);
        v7 = v6[4];
        v43 = *v6;
        v44 = v6[5];
        v8 = v6[6];
        v45 = v6[7];
        v9 = v6[2];
        v47 = 0;
        v48 = 0;
        v41 = v8;
        v42 = v7;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          v10 = 0;
          v11 = 0;
          do
          {
            if (v11 == HIDWORD(v48))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v47, 1, 1);
              v11 = v48;
              v10 = v47;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            v12 = v48;
            v11 = v48 + 1;
            LODWORD(v48) = v48 + 1;
            v9 = *(_DWORD *)(*(_QWORD *)(v2 + 264) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            v14 = v12 + 1;
            v15 = 4 * v12;
            do
            {
              v16 = *(_DWORD *)(v47 + v15);
              v17 = *(_QWORD *)(v2 + 264);
              v18 = (int *)(v17 + 36 * v16);
              v19 = *v18;
              v20 = *((_QWORD *)v18 + 2);
              v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
                v21 = *(_DWORD *)(v2 + 184);
                v17 = *(_QWORD *)(v2 + 264);
              }
              v22 = *(_QWORD *)(v2 + 176) + 20 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)v22 = v19;
              *(_QWORD *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = 0;
              v23 = *(_QWORD *)(v17 + 36 * v16 + 28);
              v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                v24 = *(unsigned int *)(v2 + 168);
              }
              v25 = *(_QWORD *)(v2 + 160);
              v26 = v25 + 16 * v24;
              *(_QWORD *)v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
          v27 = *(_DWORD *)(v2 + 184);
        }
        v28 = *(_QWORD *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        v29 = (_DWORD *)(v28 + 20 * v27);
        *v29 = v43;
        v29[1] = v42;
        v29[2] = v44;
        v29[3] = v13;
        v29[4] = 0;
        if (v45 == 16777213)
        {
          v45 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v13) == 16777209)
          {
            v27 = *(_DWORD *)(*v5 + 16 * v13 + 8);
            v45 = 16777209;
          }
        }
        v30 = *a2;
        v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          v31 = *(unsigned int *)(v2 + 168);
        }
        v32 = *(_QWORD *)(v2 + 160);
        v33 = (int *)(v32 + 16 * v31);
        *v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        v35 = *(unsigned int *)(v2 + 224);
        if (v35 == *(_DWORD *)(v2 + 228))
        {
          DgnArray<PrefilterResultFrame>::reallocElts(v39, 1, 1);
          v35 = *(unsigned int *)(v2 + 224);
        }
        v36 = *(_QWORD *)(v2 + 216) + 32 * v35;
        *(_DWORD *)v36 = v43;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v42;
        *(_DWORD *)(v36 + 20) = v44;
        *(_QWORD *)(v36 + 24) = 0;
        ++*(_DWORD *)(v2 + 224);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 288);
        v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38)
          v37 = v38;
        else
          v37 = v37;
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_209847620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDuration::collectTraces(FstSearchLatticeDuration *this)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  _OWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t *v49;
  int v50;

  v2 = *((unsigned int *)this + 42);
  v50 = 0;
  v49 = 0;
  if ((_DWORD)v2)
  {
    v3 = MemChunkAlloc(4 * v2, 0);
    v4 = 0;
    v49 = v3;
    v50 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    v3 = 0;
  }
  v5 = *((unsigned int *)this + 56);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unsigned int *)(*((_QWORD *)this + 27) + 8);
    do
    {
      v9 = *v7;
      v7 += 8;
      v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        v5 = *((unsigned int *)this + 56);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v10) = *((_DWORD *)this + 42);
  if (!(_DWORD)v10)
    goto LABEL_50;
  v11 = 0;
  v12 = (uint64_t *)((char *)this + 160);
  v13 = (uint64_t *)((char *)this + 176);
  do
  {
    v10 = (v10 - 1);
    if ((v11 & 1) != 0)
    {
      v11 = 1;
    }
    else if (*(_DWORD *)(*v12 + 16 * v10) == 16777213)
    {
      v11 = 1;
      *((_DWORD *)v3 + v10) = 1;
    }
    else
    {
      v11 = 0;
    }
    if (*((_DWORD *)v3 + v10))
    {
      v14 = *v12 + 16 * v10;
      v15 = *(_DWORD *)(v14 + 12);
      if (v15 >= 1)
      {
        v16 = *(_DWORD *)(v14 + 8);
        v17 = v15 + v16;
        v18 = *v13;
        do
        {
          v19 = *(unsigned int *)(v18 + 20 * v16 + 12);
          if ((_DWORD)v19 != -1)
            *((_DWORD *)v3 + v19) = 1;
          ++v16;
        }
        while ((int)v16 < v17);
      }
    }
  }
  while ((_DWORD)v10);
  v20 = *((_DWORD *)this + 42);
  if (v20)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    do
    {
      if (*((_DWORD *)v3 + v21))
      {
        v24 = *v12;
        if (v21 != v22)
        {
          *(_OWORD *)(v24 + 16 * v22) = *(_OWORD *)(v24 + 16 * v21);
          v24 = *v12;
        }
        *(_DWORD *)(v24 + 16 * v22 + 8) = v23;
        v25 = v24 + 16 * v21;
        v26 = *(unsigned int *)(v25 + 8);
        v27 = (*(_DWORD *)(v25 + 12) + v26);
        if (v26 < v27)
        {
          v28 = *v13;
          v29 = 20 * v26;
          do
          {
            if (v26 != v23)
            {
              v30 = (__int128 *)(v28 + v29);
              v31 = v28 + 20 * v23;
              v32 = *v30;
              *(_DWORD *)(v31 + 16) = *((_DWORD *)v30 + 4);
              *(_OWORD *)v31 = v32;
              v28 = *v13;
            }
            v33 = v28 + 20 * v23;
            v36 = *(_DWORD *)(v33 + 12);
            v34 = (_DWORD *)(v33 + 12);
            v35 = v36;
            if (v36 != -1)
              *v34 = *((_DWORD *)v3 + v35);
            ++v23;
            ++v26;
            v29 += 20;
          }
          while (v27 != v26);
        }
        *((_DWORD *)v3 + v21) = v22++;
        v20 = *((_DWORD *)this + 42);
      }
      ++v21;
    }
    while (v21 < v20);
    v37 = *((_DWORD *)this + 43);
    if (v22 > v37)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, v22 - v37, 0);
      v20 = *((_DWORD *)this + 42);
    }
    if (v20 < v22)
    {
      v38 = v22 - (unint64_t)v20;
      v39 = (_OWORD *)(*v12 + 16 * v20);
      do
      {
        *v39++ = xmmword_209A6C7D0;
        --v38;
      }
      while (v38);
    }
    *((_DWORD *)this + 42) = v22;
    v40 = *((_DWORD *)this + 47);
    if (v23 > v40)
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 176, v23 - v40, 0);
    v41 = *((unsigned int *)this + 46);
    if (v41 < v23)
    {
      v42 = v23 - v41;
      v43 = (_DWORD *)(*v13 + 20 * v41 + 16);
      do
      {
        *((_OWORD *)v43 - 1) = xmmword_209A6C7C0;
        *v43 = 0;
        v43 += 5;
        --v42;
      }
      while (v42);
    }
  }
  else
  {
LABEL_50:
    v23 = 0;
    *((_DWORD *)this + 42) = 0;
  }
  *((_DWORD *)this + 46) = v23;
  v44 = *((unsigned int *)this + 56);
  if ((_DWORD)v44)
  {
    v45 = v49;
    v46 = (_DWORD *)(*((_QWORD *)this + 27) + 8);
    do
    {
      v47 = *v46;
      if ((_DWORD)v47 != -1)
        *v46 = *((_DWORD *)v45 + v47);
      v46 += 8;
      --v44;
    }
    while (v44);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v49);
}

void sub_209847954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLatticeDuration::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t result;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;

  FstSearchLatticeDuration::advanceDeltas((FstSearchLatticeDuration *)this, a2, a3, a4, a5);
  v13 = 0u;
  v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7))
        FstSearchLatticeDuration::collectTraces((FstSearchLatticeDuration *)this);
    }
  }
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v8 = this[13];
  result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLatticeDuration::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  return this;
}

double FstSearchLatticeDuration::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLatticeDuration::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLatticeDuration::beginTopRecPassSyncRecog(FstSearchLatticeDuration *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 264, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 94) = result;
    *((_BYTE *)this + 380) = 1;
  }
  return result;
}

uint64_t FstSearchLatticeDuration::endTopRecPassSyncRecog(FstSearchLatticeDuration *this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = (int64x2_t *)*((_QWORD *)this + 13);
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 64) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLatticeDuration::printSize(FstSearchLatticeDuration *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 16 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 16 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 20 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 20 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((unsigned int *)this + 56);
  v65 = 30 * v64;
  if ((int)v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 30 * (*((_DWORD *)this + 57) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((unsigned int *)this + 60);
  v75 = 30 * v74;
  if ((int)v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 30 * (*((_DWORD *)this + 61) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 264, 0);
  v99 = sizeObject((uint64_t)this + 264, 1);
  v100 = sizeObject((uint64_t)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_209848270(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLatticeDuration::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int BestTrace;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v8)
    v9 = *(_DWORD *)(a3 + 8) == 0;
  else
    v9 = 0;
  if (v9)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if ((_DWORD)v8)
    v10 = *(_DWORD *)(a2 + 8) == 0;
  else
    v10 = 0;
  if (v10)
  {
    *(_QWORD *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    v11 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)a2 + v11) = 0;
      *(_BYTE *)(*(_QWORD *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if ((_DWORD)v8)
    goto LABEL_14;
LABEL_16:
  BestTrace = FstSearchLatticeDurationBackoff::getBestTrace(a1, (_QWORD *)a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
    return 0;
  v13 = *(_QWORD *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 20 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return (_DWORD)v13 != 1879048192;
}

uint64_t FstSearchLatticeDuration::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, char a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v27, *(unsigned int *)(a1 + 168));
  v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLatticeHashBackoff::createLatticeNodes(a1, &v30, (uint64_t)&v28, (uint64_t)a2, v27, a3, a4);
  v23 = (uint64_t)v8;
  v24 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v24)
  {
    v10 = 0;
    v11 = v29;
    do
    {
      if (*(_BYTE *)(*a3 + v10))
      {
        v12 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v12 + 16 * v10) != 16777209)
        {
          v13 = v12 + 16 * v10;
          if (*(int *)(v13 + 12) >= 1)
          {
            v14 = *(_DWORD *)(v13 + 8);
            do
            {
              v15 = *(_QWORD *)(a1 + 176) + 20 * v14;
              v16 = *(unsigned int *)(v15 + 12);
              if ((_DWORD)v16 == -1)
                v17 = 0;
              else
                v17 = v11 - *((_DWORD *)v30 + v16);
              v18 = *(unsigned int *)(v28 + 4 * v17);
              if (*(_BYTE *)(*a4 + v10))
                FstSearchLatticeDuration::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v10))), a2, v9, a5);
              v19 = v27[0];
              if (*(_DWORD *)(v27[0] + 16 * v10 + 8))
              {
                v20 = 0;
                do
                {
                  v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v10) + 4 * v20);
                  FstSearchLatticeDuration::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v21))), a2, v9, a5);
                  ++v20;
                  v19 = v27[0];
                }
                while (v20 < *(unsigned int *)(v27[0] + 16 * v10 + 8));
              }
              ++v14;
            }
            while (v14 < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 12)
                        + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v30);
}

void sub_2098485E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLatticeDuration::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  _DWORD *SilenceToken;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  ArcGraph *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _QWORD v34[2];
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  __int128 v49;
  _DWORD v50[2];
  __int128 v51;

  v11 = a5;
  v12 = a4;
  if ((a4 & 0x80000000) != 0)
    SilenceToken = 0;
  else
    SilenceToken = (_DWORD *)FstSearchLatticeHashBackoff::getSilenceToken((FstSearchLatticeHashBackoff *)this, a4, a2);
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v50);
  v17 = a3[1];
  if (SilenceToken)
  {
    v17 += SilenceToken[1];
    v18 = *SilenceToken + *a3;
  }
  else
  {
    v18 = *a3;
  }
  if (v50[0] >> 25 == 126)
  {
    v19 = 0;
    v20 = v17;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_9:
      v21 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v19 = *((_DWORD *)this + 34);
    v20 = v17 - v19;
    if ((v12 & 0x80000000) != 0)
      goto LABEL_9;
  }
  v21 = *((_DWORD *)this + 35);
  v20 -= v21;
LABEL_12:
  v22 = a3[4];
  if (SilenceToken)
    v22 += SilenceToken[4];
  v23 = v18 - v17 - v22;
  v24 = a3[3];
  v25 = this[20];
  if ((_DWORD)v24 == -1)
  {
    v27 = 0;
    if (a9)
      goto LABEL_20;
  }
  else
  {
    v26 = *((_DWORD *)v25 + 4 * v24 + 1);
    if (a9)
    {
      if (v26 >= 1)
        --v26;
      v27 = (v26 >> 1) + 1;
LABEL_20:
      v28 = *((_DWORD *)v25 + 4 * a2 + 1);
      if (v28 >= 1)
        --v28;
      v29 = v28 >> 1;
      v30 = (v28 >> 1) - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v31 = *((_DWORD *)v25 + 4 * v12 + 1);
        if (v31 >= 1)
          --v31;
        v32 = v31 >> 1;
        goto LABEL_29;
      }
LABEL_30:
      v33 = 0;
      goto LABEL_31;
    }
    v27 = v26 + 1;
  }
  v29 = *((_DWORD *)v25 + 4 * a2 + 1);
  v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_30;
  v32 = *((_DWORD *)v25 + 4 * v12 + 1);
LABEL_29:
  v33 = v32 - v29;
LABEL_31:
  v35 = v27;
  v36 = v30;
  v37 = v33;
  v38 = v20;
  v39 = 0;
  v40 = v19;
  v41 = v23;
  v42 = v22;
  v43 = v21;
  v44 = xmmword_209A6C7F0;
  v45 = 0;
  v46 = -1;
  v34[0] = &off_24C2149F8;
  v34[1] = 0xBFF0000000000000;
  v47 = v50[0];
  v48 = v50[1];
  v49 = v51;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_20984882C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDuration::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 380))
    return MiniFst::beginTopFstSyncRecog(this + 264);
  return this;
}

uint64_t FstSearchLatticeDuration::endTopRecSyncRecog(FstSearchLatticeDuration *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLatticeDuration::getBestExitScore(FstSearchLatticeDuration *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  *((_DWORD *)this + 63) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 56);
  if (v1 >= v2)
    goto LABEL_19;
  v4 = 0;
  v5 = 0;
  v6 = 32 * v1;
  do
  {
    v7 = *((_QWORD *)this + 27) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 62))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          v5 = v22;
          v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        v2 = *((unsigned int *)this + 56);
      }
    }
    ++v1;
    v6 += 32;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = 0;
    v10 = *((_QWORD *)this + 20);
    v11 = 1879048192;
    do
    {
      v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        v14 = *(_DWORD *)(v12 + 8);
        v15 = v13 + v14;
        v16 = *((_QWORD *)this + 22);
        do
        {
          v17 = v14;
          v18 = *(_DWORD *)(v16 + 20 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 63) = *(_DWORD *)(v16 + 20 * v17 + 12);
            v11 = v18;
          }
          v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v19 = 20000;
  else
    v19 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_2098489D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDuration::getBestScoreMaybeUpdateFstNode(FstSearchLatticeDuration *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 56);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 27);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 8;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLatticeDuration::seedTheory(FstSearchLatticeDuration *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 176, 1, 1);
      v11 = *((_DWORD *)this + 46);
    }
    v12 = *((_QWORD *)this + 22) + 20 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_209A6C810;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)v12 = a2;
    v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      v13 = *((_DWORD *)this + 42);
    }
    v14 = (_DWORD *)(*((_QWORD *)this + 20) + 16 * v13);
    *v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v15 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v16 = *((_DWORD *)this + 56);
  if (v16 == *((_DWORD *)this + 57))
  {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 216, 1, 1);
    v16 = *((_DWORD *)this + 56);
  }
  v17 = *((_QWORD *)this + 27) + 32 * v16;
  *(_DWORD *)v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  LODWORD(v17) = *((_DWORD *)this + 56) + 1;
  *((_DWORD *)this + 56) = v17;
  *((_DWORD *)this + 38) = v17;
  return FstSearchLatticeDurationBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLatticeDuration::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 252);
  if ((_DWORD)v8 != -1)
  {
    v9 = (_QWORD *)result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(_QWORD *)(result + 176) + 20 * v10[2] + 12); (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = v9[5];
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = v9[20];
      v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = v9[20];
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v9[22] + 20 * *(unsigned int *)(v20 + 16 * v8 + 8));
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(v9[20] + 16 * v16);
      i = *(unsigned int *)(v9[22] + 20 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLatticeDuration::checkSearchParametersValidityForArcGraph(FstSearchLatticeDuration *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLatticeDuration::makePartialResult(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  _QWORD v25[2];
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLatticeDurationBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v24 = BestTrace;
  FstSearchLatticeHashBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v26 = v17;
      v27 = v19 - v17;
      v28 = v20 - v19;
      v29 = 0u;
      v30 = 0u;
      v31 = 0;
      v32 = 1879048192;
      v33 = 0;
      v34 = -1;
      v25[0] = &off_24C2149F8;
      v25[1] = 0xBFF0000000000000;
      v35 = *v18;
      v36 = v18[1];
      v37 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v25);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v25);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = a1[20] + 16 * v24;
  return (*(_DWORD *)(a1[22] + 20 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_209849150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLateLatticeBackoff::advanceDeltas(FstSearchLateLatticeBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int ScoreAllowBackoff_updateNodeInSequence;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  _DWORD *v41;
  int v42;
  __int16 v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int64x2_t *v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t *v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  unint64_t v69;
  unint64_t v70;
  int64x2_t v71;
  int64x2_t *v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  uint64_t v76;
  int64x2_t *v77;
  int64x2_t result;
  int64x2_t v79;
  int v80;
  SearchStats *v81;
  int v82;
  char *v83;
  int *v84;
  int v85;
  int v86;
  __int16 v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int v105;
  int64x2_t v106;
  int64x2_t v107;
  int v108[3];

  v8 = a2;
  v108[0] = a2;
  v106 = 0u;
  v107 = 0u;
  SnapTime::recordTime((SnapTime *)&v106, 1, 0, 0, 0);
  *((_DWORD *)this + 58) = a3;
  v88 = *((_DWORD *)this + 2);
  v84 = (int *)((char *)this + 232);
  v10 = *((unsigned int *)this + 50);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v90 = 0;
    v12 = 0;
    v83 = (char *)this + 208;
    do
    {
      v13 = *((_QWORD *)this + 24);
      v14 = *((_QWORD *)this + 5);
      v15 = 24 * v12 + 20;
      while (1)
      {
        v16 = *(unsigned int *)(v13 + v15 - 16);
        if (*(_DWORD *)(v14 + 160) != (_DWORD)v16)
          break;
        ++v12;
        v15 += 24;
        if (v12 >= v10)
          goto LABEL_48;
      }
      v82 = v8;
      v81 = a4;
      v80 = a5;
      if (*(_DWORD *)(v14 + 140) > (int)v16
        && (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000
          ? (v17 = 5000)
          : (v17 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58)),
            ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v13 + v15 - 8), *(_DWORD *)(v13 + v15 - 20), v17), v19 = *((_DWORD *)this + 58), ScoreAllowBackoff_updateNodeInSequence - v88 <= v19))
      {
        v20 = ScoreAllowBackoff_updateNodeInSequence;
        if (v19 > ScoreAllowBackoff_updateNodeInSequence)
          *v84 = ScoreAllowBackoff_updateNodeInSequence;
        v21 = *((_QWORD *)this + 24) + v15;
        v22 = *(_QWORD *)(v21 - 16);
        v23 = *(_WORD *)(v21 - 8);
        v24 = *(_WORD *)(v21 - 6);
        v25 = *(_QWORD *)(v21 - 4);
        v26 = *((unsigned int *)this + 54);
        if (v26 == *((_DWORD *)this + 55))
        {
          DgnArray<CWIDAC>::reallocElts((uint64_t)v83, 1, 1);
          LODWORD(v26) = *((_DWORD *)this + 54);
        }
        v27 = *((_QWORD *)this + 26) + 24 * v26;
        *(_DWORD *)v27 = v20;
        *(_QWORD *)(v27 + 4) = v22;
        *(_WORD *)(v27 + 12) = v23;
        *(_WORD *)(v27 + 14) = v24;
        *(_QWORD *)(v27 + 16) = v25;
        v28 = *((_DWORD *)this + 54);
        *((_DWORD *)this + 54) = v28 + 1;
        if (v90 == 2 * *((_DWORD *)this + 4))
          v11 = v28 + 1;
        v89 = v11;
        ++v90;
      }
      else
      {
        v89 = v11;
      }
      v29 = v16;
      v30 = v88;
      do
      {
        v31 = *((_QWORD *)this + 5);
        v32 = *(_QWORD *)(v31 + 152);
        v33 = *(_DWORD *)(v32 + 4 * v29);
        v34 = *(_DWORD *)(v32 + 4 * (v29 + 1));
        v35 = *(_DWORD *)(v31 + 140);
        if (v35 <= v34)
        {
          if (v35 <= (int)v16 && *((_BYTE *)this + 356) != 0)
          {
            v51 = (v33 & 0xFFFFF) <= 0xFFFF3 ? v33 & 0xFFFFF : v33 & 0xFFFFF | 0xF00000;
            if (v51 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v103);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v51, (DgnString *)&v103, v52, v53, v54, v55, v56);
              v61 = &unk_209A6C820;
              if (v103.i32[2])
                v61 = (void *)v103.i64[0];
              xprintf("Seed from state %d score %d trace %d, %s\n", v57, v58, v59, v60, v16, *(unsigned int *)(*((_QWORD *)this + 24) + v15 - 20), *(unsigned int *)(*((_QWORD *)this + 24) + v15 - 12), v61);
              MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((_QWORD *)this + 24) + v15 - 20), *(_DWORD *)(*((_QWORD *)this + 24) + v15), *(_DWORD *)(*((_QWORD *)this + 24) + v15 - 12), v34);
              DgnString::~DgnString((DgnString *)&v103);
            }
          }
        }
        else
        {
          v36 = (v33 >> 20) & 0x3FF;
          if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000)
            v37 = 5000;
          else
            v37 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
          v38 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v32 + 4 * v29), *(_DWORD *)(*((_QWORD *)this + 24) + v15 - 20) + v36, v37);
          v39 = *((_DWORD *)this + 58);
          if (v38 - v30 <= v39)
          {
            v40 = v38;
            if (v39 > v38)
              *v84 = v38;
            v41 = (_DWORD *)(*((_QWORD *)this + 24) + v15);
            v42 = *(v41 - 3);
            v43 = *((_WORD *)v41 - 3);
            v45 = *(v41 - 1);
            v44 = *v41;
            v46 = *((unsigned int *)this + 54);
            if (v46 == *((_DWORD *)this + 55))
            {
              v86 = v44;
              v87 = v43;
              v85 = v42;
              DgnArray<CWIDAC>::reallocElts((uint64_t)v83, 1, 1);
              v42 = v85;
              v44 = v86;
              v43 = v87;
              LODWORD(v46) = *((_DWORD *)this + 54);
            }
            v47 = *((_QWORD *)this + 26) + 24 * v46;
            *(_DWORD *)v47 = v40;
            *(_DWORD *)(v47 + 4) = v34;
            *(_DWORD *)(v47 + 8) = v42;
            *(_WORD *)(v47 + 12) = v33;
            *(_WORD *)(v47 + 14) = v43;
            *(_DWORD *)(v47 + 16) = v45 + v36;
            *(_DWORD *)(v47 + 20) = v44;
            v48 = *((_DWORD *)this + 54);
            *((_DWORD *)this + 54) = v48 + 1;
            v30 = v88;
            v49 = v89;
            if (v90 == 2 * *((_DWORD *)this + 4))
              v49 = v48 + 1;
            v89 = v49;
            ++v90;
          }
        }
        v29 += 2;
      }
      while ((v33 & 0x80000000) == 0);
      v12 = (v12 + 1);
      v10 = *((unsigned int *)this + 50);
      v8 = v82;
      a4 = v81;
      a5 = v80;
      v11 = v89;
    }
    while (v12 < v10);
  }
  else
  {
    v90 = 0;
    v11 = 0;
  }
LABEL_48:
  v105 = *((_DWORD *)this + 58) + v88;
  if (*((_BYTE *)this + 356))
    MiniFst::updateFrame((char *)this + 240, v84, v88, v8);
  v103 = 0u;
  v104 = 0u;
  SnapTime::recordTime((SnapTime *)&v103, 1, 0, 0, 0);
  v103 = vsubq_s64(v103, v106);
  v104 = vsubq_s64(v104, v107);
  v62 = (int64x2_t *)*((_QWORD *)this + 13);
  v63 = vaddq_s64(v62[1], v104);
  *v62 = vaddq_s64(*v62, v103);
  v62[1] = v63;
  v101 = 0u;
  v102 = 0u;
  SnapTime::recordTime((SnapTime *)&v101, 1, 0, 0, 0);
  if (v90 > 2 * *((_DWORD *)this + 4))
    FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v105);
  v99 = 0u;
  v100 = 0u;
  SnapTime::recordTime((SnapTime *)&v99, 1, 0, 0, 0);
  v64 = vsubq_s64(v99, v101);
  v65 = (int64x2_t *)*((_QWORD *)this + 13);
  v66 = v65[3];
  v67 = vaddq_s64(v65[2], v64);
  v99 = v64;
  v100 = vsubq_s64(v100, v102);
  v68 = vaddq_s64(v66, v100);
  v65[2] = v67;
  v65[3] = v68;
  v97 = 0u;
  v98 = 0u;
  SnapTime::recordTime((SnapTime *)&v97, 1, 0, 0, 0);
  FstSearchLateLatticeBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v69 = *((unsigned int *)this + 6);
  if ((_DWORD)v69)
  {
    v70 = *((unsigned int *)this + 50);
    if (v69 < v70)
      mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(*((_QWORD *)this + 24), v69, v70);
  }
  v95 = 0u;
  v96 = 0u;
  SnapTime::recordTime((SnapTime *)&v95, 1, 0, 0, 0);
  v71 = vsubq_s64(v95, v97);
  v72 = (int64x2_t *)*((_QWORD *)this + 13);
  v73 = v72[5];
  v74 = vaddq_s64(v72[4], v71);
  v95 = v71;
  v96 = vsubq_s64(v96, v98);
  v75 = vaddq_s64(v73, v96);
  v72[4] = v74;
  v72[5] = v75;
  v93 = 0u;
  v94 = 0u;
  SnapTime::recordTime((SnapTime *)&v93, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  v76 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v76;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v76;
    if (*((_DWORD *)a4 + 2) > v76)
      LODWORD(v76) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v76;
  }
  if (*((_BYTE *)this + 356))
    FstSearchLateLatticeBackoff::seedFromMiniFst((uint64_t)this, v108);
  if (a5)
    FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, v105, v8, a4);
  *((_DWORD *)this + 56) = v8;
  v91 = 0u;
  v92 = 0u;
  SnapTime::recordTime((SnapTime *)&v91, 1, 0, 0, 0);
  v77 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v77[6], vsubq_s64(v91, v93));
  v79 = vaddq_s64(v77[7], vsubq_s64(v92, v94));
  v77[6] = result;
  v77[7] = v79;
  return result;
}

void sub_20984979C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t FstSearchLateLatticeBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v1 = this;
  v2 = *(unsigned int *)(this + 216);
  if ((_DWORD)v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 208), v2, 24);
    v3 = *(unsigned int *)(v1 + 216);
    *(_DWORD *)(v1 + 200) = 0;
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      for (i = 0; i < v3; ++i)
      {
        v7 = *(_QWORD *)(v1 + 208);
        if (!v4 || *(_DWORD *)(v7 + v4 + 4) != *(_DWORD *)(v7 + v4 - 20))
        {
          if (v5 == *(_DWORD *)(v1 + 204))
          {
            this = DgnArray<CWIDAC>::reallocElts(v1 + 192, 1, 1);
            v5 = *(_DWORD *)(v1 + 200);
          }
          v8 = *(_QWORD *)(v1 + 192) + 24 * v5;
          v9 = *(_OWORD *)(v7 + v4);
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(v7 + v4 + 16);
          *(_OWORD *)v8 = v9;
          v5 = *(_DWORD *)(v1 + 200) + 1;
          *(_DWORD *)(v1 + 200) = v5;
          v3 = *(unsigned int *)(v1 + 216);
        }
        v4 += 24;
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 200) = 0;
  }
  return this;
}

uint64_t FstSearchLateLatticeBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[2];

  if (*(_BYTE *)(this + 356))
  {
    v2 = this;
    v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20))
      v3 = *(_DWORD *)(this + 20);
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      v22 = this + 192;
      v23 = (_QWORD *)(this + 160);
      do
      {
        v6 = (int *)(*(_QWORD *)(v2 + 256) + v4);
        v7 = *v6;
        v9 = v6[4];
        v8 = v6[5];
        v10 = v6[6];
        v11 = v6[7];
        v12 = v6[2];
        v25[0] = 0;
        v25[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        v13 = -2 - v12;
        if (v11 == 16777213)
        {
          v11 = 16777209;
          if (*(_DWORD *)(*v23 + 36 * v13) == 16777209)
            v13 = *(_DWORD *)(*(_QWORD *)(v2 + 176) + 16 * *(unsigned int *)(*v23 + 36 * v13 + 8) + 12);
        }
        v14 = *a2;
        v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v23, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        v16 = *(_QWORD *)(v2 + 160);
        v17 = v16 + 36 * v15;
        *(_DWORD *)v17 = v11;
        *(_DWORD *)(v17 + 4) = v14;
        *(_QWORD *)(v17 + 8) = 0xFFFFFFFFLL;
        *(_DWORD *)(v17 + 16) = v7;
        *(_DWORD *)(v17 + 20) = v13;
        *(_DWORD *)(v17 + 24) = v9;
        *(_DWORD *)(v17 + 28) = v8;
        *(_WORD *)(v17 + 32) = -2;
        v18 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v18 + 1;
        *(_DWORD *)(v16 + 36 * v18 + 12) = 1;
        v19 = *(unsigned int *)(v2 + 200);
        if (v19 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<CWIDAC>::reallocElts(v22, 1, 1);
          LODWORD(v19) = *(_DWORD *)(v2 + 200);
        }
        v20 = *(_QWORD *)(v2 + 192) + 24 * v19;
        *(_DWORD *)v20 = v7;
        *(_DWORD *)(v20 + 4) = v10;
        *(_DWORD *)(v20 + 8) = v18;
        *(_WORD *)(v20 + 12) = -2;
        *(_DWORD *)(v20 + 16) = v9;
        *(_DWORD *)(v20 + 20) = v8;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
        ++v5;
        v21 = *(_DWORD *)(v2 + 264);
        if (v21 >= *(_DWORD *)(v2 + 20))
          v21 = *(_DWORD *)(v2 + 20);
        v4 += 36;
      }
      while (v5 < v21);
    }
  }
  return this;
}

void sub_209849A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLateLatticeBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  int64x2_t *v6;
  int64x2_t result;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;

  FstSearchLateLatticeBackoff::advanceDeltas((FstSearchLateLatticeBackoff *)this, a2, a3, a4, a5);
  v11 = 0u;
  v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  v9 = 0u;
  v10 = 0u;
  SnapTime::recordTime((SnapTime *)&v9, 1, 0, 0, 0);
  v6 = this[13];
  result = vaddq_s64(v6[14], vsubq_s64(v9, v11));
  v8 = vaddq_s64(v6[15], vsubq_s64(v10, v12));
  v6[14] = result;
  v6[15] = v8;
  return result;
}

_DWORD *FstSearchLateLatticeBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  return this;
}

double FstSearchLateLatticeBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  double result;

  if (a3 >= 20000)
    a3 = 20000;
  *(_QWORD *)&result = FstSearchLateLatticeBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLateLatticeBackoff::beginTopRecPassSyncRecog(FstSearchLateLatticeBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result;

  result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    result = ArcGraph::findBackoffState(*((_QWORD *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((_BYTE *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLateLatticeBackoff::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v2;
  int64x2_t *v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLateLatticeHashBackoff::generateTraceTokensFromTraces((FstSearchLateLatticeHashBackoff *)this);
  FstSearchLateLatticeBackoff::generateTraceTokensForLateLattice((FstSearchLateLatticeBackoff *)this);
  v8 = 0u;
  v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  v2 = vsubq_s64(v8, v10);
  v3 = this[13];
  v4 = v3[13];
  v5 = vaddq_s64(v3[12], v2);
  v8 = v2;
  v9 = vsubq_s64(v9, v11);
  v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

uint64_t FstSearchLateLatticeBackoff::generateTraceTokensForLateLattice(FstSearchLateLatticeBackoff *this)
{
  FstSearchLateLatticeBackoff *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int32 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _OWORD *v34;
  ArcGraph **v35;
  int v36;
  int v37;
  _BOOL4 v38;
  BOOL v39;
  _BOOL4 isLexPelPhnMatch;
  uint64_t v41;
  uint64_t v42;
  int32x2_t *v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  _OWORD *v62;
  void *v63;
  int v64;
  unsigned int v65;
  void *v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  _WORD *v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  __int128 *v91;
  uint64_t v92;
  char *v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  void *v100;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t *v105;
  int v106;
  int v107;
  int32x2_t *v108;
  int32x2_t *v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  void *v115;
  unsigned int v116;
  unsigned int v117;
  void *v118;
  unsigned int v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  __int16 v123;
  __int16 v124;
  int v125;
  _QWORD v126[2];
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  _QWORD v131[2];
  uint64_t v132;
  int v133;
  void *v134;

  v1 = this;
  v131[1] = 0;
  v132 = 0;
  v133 = 0;
  v131[0] = 0;
  FstSearchLateLatticeHashBackoff::getTraceTimeBoundaries((uint64_t)this, &v132, (uint64_t)v131);
  v129 = 0;
  v130 = 0;
  v127 = 0;
  v128 = 0;
  v126[0] = 0;
  v126[1] = 0;
  v125 = 1879048192;
  v2 = (*(uint64_t (**)(FstSearchLateLatticeBackoff *, uint64_t *, uint64_t *, int *, _QWORD *))(*(_QWORD *)v1 + 80))(v1, &v129, &v127, &v125, v126);
  v9 = *((_DWORD *)v1 + 7);
  v10 = *((_DWORD *)v1 + 2);
  v122 = -1;
  v124 = 256;
  v123 = *((_WORD *)v1 + 34);
  if (v2)
  {
    v120 = 0;
    v121 = 0;
    v11 = (uint64_t *)((char *)v1 + 160);
    v12 = *((unsigned int *)v1 + 42);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v105 = (uint64_t *)((char *)v1 + 160);
      v102 = v10;
      v103 = v9;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            --v12;
            v14 = *v11;
            if (*(_BYTE *)(v129 + v12))
              break;
            *(_DWORD *)(v14 + 36 * v12 + 8) = -1;
            if (!(_DWORD)v12)
              goto LABEL_77;
          }
          v15 = (unsigned int *)(v14 + 36 * v12);
          v16 = *v15;
          v17 = *((_QWORD *)v1 + 6);
          if (*(_DWORD *)(v17 + 388) > v16 && *(_BYTE *)(*(_QWORD *)(v17 + 104) + v16))
            v18 = *(_WORD *)(*(_QWORD *)(v17 + 72) + 2 * *(unsigned int *)(*(_QWORD *)(v17 + 48) + 4 * v16));
          else
            v18 = 0;
          v19 = *((_QWORD *)v1 + 11);
          v20 = *(_DWORD *)(v19 + 4 * v15[1]);
          v22 = v15[2];
          v21 = v15 + 2;
          v23 = *((_QWORD *)v1 + 22);
          v24 = *((_DWORD *)v1 + 3);
          v25 = *(_DWORD *)(v126[0] + 4 * v12);
          HIWORD(v122) = v18;
          v109 = (int32x2_t *)(v23 + 16 * v22);
          v26 = v109[1].u32[1];
          if ((v26 & 0x80000000) == 0)
            break;
          *v21 = v13;
          if (v13 == HIDWORD(v121))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
            v13 = v121;
          }
          *((_OWORD *)v120 + v13) = *(_OWORD *)v109->i8;
          v13 = v121 + 1;
          LODWORD(v121) = v121 + 1;
          *(_DWORD *)(*v11 + 36 * v12 + 12) = 1;
          if (!(_DWORD)v12)
            goto LABEL_77;
        }
        v110 = v12;
        v113 = v109[1].u32[1];
        v27 = v14 + 36 * v26;
        v28 = *(unsigned int *)(v27 + 4);
        v29 = (_DWORD)v28 ? *(unsigned int *)(v132 + 4 * (v28 - 1)) : 0;
        v114 = v24 + v125 - v25;
        v108 = (int32x2_t *)(v23 + 16 * *(unsigned int *)(v27 + 8));
        v107 = v20 + v109->i32[0] - *(_DWORD *)(v19 + 4 * v28) - v108->i32[0];
        v106 = v108->i32[0] - *(_DWORD *)(v131[0] + 4 * v28);
        v30 = v13;
        if (v29 < *(unsigned int *)(v132 + 4 * v28))
          break;
LABEL_42:
        if (v13 >= v30)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 150, (uint64_t)"fst/fstsrch", 2, (uint64_t)"%s", v7, v8, (char)&unk_209A6C820);
          v30 = v121;
        }
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>((char *)v120 + 16 * v13, v30 - v13, 16);
        v45 = v13 + 1;
        v46 = v121;
        if (v45 < v121)
        {
          v47 = 16 * (v13 + 1);
          v48 = v13;
          do
          {
            if (*(_DWORD *)((char *)v120 + v47 + 8) != *((_DWORD *)v120 + 4 * v48 + 2))
            {
              *((_OWORD *)v120 + ++v48) = *(_OWORD *)((char *)v120 + v47);
              v46 = v121;
            }
            ++v45;
            v47 += 16;
          }
          while (v45 < v46);
          LODWORD(v45) = v48 + 1;
        }
        v49 = (char *)v120;
        if (HIDWORD(v121) < v45)
        {
          v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v45, 16 * v46, 16 * v46, 1) >> 4;
          v49 = (char *)v118;
          v120 = v118;
          v46 = v121;
        }
        if (v46 < v45)
        {
          v50 = v45 - (unint64_t)v46;
          v51 = &v49[16 * v46];
          do
          {
            *(_OWORD *)v51 = xmmword_209A6C7C0;
            v51 += 16;
            --v50;
          }
          while (v50);
        }
        LODWORD(v121) = v45;
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(&v49[16 * v13], v45 - v13, 16);
        v52 = 16 * v13;
        v53 = v114;
        if (*(_DWORD *)((char *)v120 + v52) + v10 < v114)
          v53 = *((_DWORD *)v120 + 4 * v13) + v10;
        v54 = v121;
        v55 = *((_DWORD *)v1 + 5) + v13;
        if (v121 < v55)
          v55 = v121;
        v56 = *((_QWORD *)v1 + 20);
        *(_DWORD *)(v56 + 36 * v110 + 8) = v13;
        if (v13 >= v55)
        {
          v60 = v13;
        }
        else
        {
          while (*(_DWORD *)((char *)v120 + v52) <= v53)
          {
            v57 = *(unsigned int *)((char *)v120 + v52 + 12);
            if ((v57 & 0x80000000) == 0)
            {
              *(_BYTE *)(v129 + v57) = 1;
              v58 = (_DWORD)v57 == (_DWORD)v113 ? 0 : v106 + v9;
              v59 = v58 + v107 + *(_DWORD *)(v126[0] + 4 * v110);
              if (*(_DWORD *)(v126[0] + 4 * v57) > v59)
                *(_DWORD *)(v126[0] + 4 * v57) = v59;
            }
            ++v13;
            v52 += 16;
            if (v55 == v13)
            {
              v13 = v55;
              break;
            }
          }
          v56 = *v11;
          v60 = *(_DWORD *)(*v11 + 36 * v110 + 8);
          v54 = v121;
        }
        *(_DWORD *)(v56 + 36 * v110 + 12) = v13 - v60;
        if (HIDWORD(v121) < v13)
        {
          v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v13, 16 * v54, 16 * v54, 1) >> 4;
          v120 = v118;
          v54 = v121;
        }
        if (v54 < v13)
        {
          v61 = v13 - (unint64_t)v54;
          v62 = (char *)v120 + 16 * v54;
          do
          {
            *v62++ = xmmword_209A6C7C0;
            --v61;
          }
          while (v61);
        }
        LODWORD(v121) = v13;
        if (!v110)
        {
LABEL_77:
          v63 = v120;
          v64 = HIDWORD(v121);
          v65 = *((_DWORD *)v1 + 42);
          goto LABEL_79;
        }
      }
      v104 = v12;
      v112 = v106 + v9;
      v111 = v20 + v109->i32[0] - v108->i32[0];
      v31 = 36 * v29;
      while (1)
      {
        if (v113 == v29)
          v32 = 0;
        else
          v32 = v112;
        v33 = *((_QWORD *)v1 + 20);
        v34 = (_OWORD *)(*((_QWORD *)v1 + 22) + 16 * *(unsigned int *)(v33 + v31 + 8));
        if ((int)(v111 + v32 + *(_DWORD *)v34) <= v114)
        {
          v35 = (ArcGraph **)v1;
          v36 = *(_DWORD *)(v33 + 36 * v110);
          v37 = *(_DWORD *)(v33 + v31);
          v38 = v37 != 16777209
             && ArcGraph::lexToCWID(v35[5], *(_DWORD *)(v33 + v31), v3, v4, v5, v6, v7, v8) >> 25 != 126;
          if (v36 == 16777209)
          {
            v1 = (FstSearchLateLatticeBackoff *)v35;
            if (v38)
              goto LABEL_35;
          }
          else
          {
            v39 = v36 == 16777214 || v37 == 16777213;
            v1 = (FstSearchLateLatticeBackoff *)v35;
            if (!v39)
            {
LABEL_35:
              isLexPelPhnMatch = FstSearchLateLatticeHashBackoff::isLexPelPhnMatch((uint64_t)v1, v29, (uint64_t)&v122);
              v1 = (FstSearchLateLatticeBackoff *)v35;
              if (isLexPelPhnMatch)
              {
                v41 = v121;
                if (v121 == (unint64_t)HIDWORD(v121))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
                  v41 = v121;
                  v1 = (FstSearchLateLatticeBackoff *)v35;
                }
                *((_OWORD *)v120 + v41) = *v34;
                v42 = v121;
                LODWORD(v121) = v121 + 1;
                v43 = (int32x2_t *)((char *)v120 + 16 * v42);
                v43[1].i32[1] = v29;
                *v43 = vadd_s32(vsub_s32(vadd_s32(*v109, vdup_n_s32(v32)), *v108), *v43);
                v44 = *(_DWORD *)(*v105 + 36 * v110);
                if (v44 != 16777209)
                  v43[1].i32[0] = v44 + 2 * v43[1].i32[0] + 1;
              }
            }
          }
        }
        ++v29;
        v31 += 36;
        if (v29 >= *(unsigned int *)(v132 + 4 * v28))
        {
          v30 = v121;
          v12 = v104;
          v11 = v105;
          v10 = v102;
          v9 = v103;
          goto LABEL_42;
        }
      }
    }
    v65 = 0;
    v13 = 0;
    v64 = 0;
    v63 = 0;
LABEL_79:
    v66 = (void *)*((_QWORD *)v1 + 22);
    *((_QWORD *)v1 + 22) = v63;
    v120 = v66;
    v67 = *((_DWORD *)v1 + 47);
    *((_DWORD *)v1 + 46) = v13;
    *((_DWORD *)v1 + 47) = v64;
    LODWORD(v121) = 0;
    HIDWORD(v121) = v67;
    v119 = 0;
    v118 = 0;
    if (v65)
    {
      v68 = MemChunkAlloc(4 * v65, 0);
      v118 = v68;
      v119 = v65;
      if (*((_DWORD *)v1 + 42))
      {
        v69 = 0;
        v70 = 0;
        v65 = 0;
        do
        {
          v71 = (__int128 *)(*v11 + v69);
          if (*((_DWORD *)v71 + 2) == -1)
          {
            *((_DWORD *)v68 + v70) = -1;
          }
          else
          {
            if (v70 != v65)
            {
              v72 = *v11 + 36 * v65;
              v73 = *v71;
              v74 = v71[1];
              *(_WORD *)(v72 + 32) = *((_WORD *)v71 + 16);
              *(_OWORD *)v72 = v73;
              *(_OWORD *)(v72 + 16) = v74;
            }
            *((_DWORD *)v68 + v70) = v65++;
          }
          ++v70;
          v75 = *((unsigned int *)v1 + 42);
          v69 += 36;
        }
        while (v70 < v75);
        v76 = *((_DWORD *)v1 + 43);
        if (v65 > v76)
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v11, v65 - v76, 0);
          LODWORD(v75) = *((_DWORD *)v1 + 42);
        }
        if (v75 < v65)
        {
          v77 = v65 - (unint64_t)v75;
          v78 = (_WORD *)(*v11 + 36 * v75 + 32);
          do
          {
            *((_OWORD *)v78 - 2) = xmmword_209A6C7D0;
            *((_OWORD *)v78 - 1) = xmmword_209A6C7E0;
            *v78 = -2;
            v78 += 18;
            --v77;
          }
          while (v77);
        }
      }
      else
      {
        v65 = 0;
      }
    }
    *((_DWORD *)v1 + 42) = v65;
    v79 = *((unsigned int *)v1 + 46);
    if ((_DWORD)v79)
    {
      v80 = v118;
      v81 = (_DWORD *)(*((_QWORD *)v1 + 22) + 12);
      do
      {
        v82 = *v81;
        if ((v82 & 0x80000000) == 0)
          *v81 = v80[v82];
        v81 += 4;
        --v79;
      }
      while (v79);
    }
    DgnArray<FstSearchLateLatticeHashBackoffActiveToken>::DgnArray(&v115, *((unsigned int *)v1 + 50));
    v83 = *((unsigned int *)v1 + 50);
    if ((_DWORD)v83)
    {
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v87 = v118;
      v88 = v115;
      do
      {
        v89 = *((unsigned int *)v1 + 38);
        if (v86 < v89 && v85 == v89)
          *((_DWORD *)v1 + 38) = v86;
        v91 = (__int128 *)(*((_QWORD *)v1 + 24) + v84);
        v92 = *((unsigned int *)v91 + 2);
        if ((_DWORD)v92 == -1 || v87[v92] != -1)
        {
          v93 = (char *)&v88[6 * v86];
          v94 = *v91;
          *((_QWORD *)v93 + 2) = *((_QWORD *)v91 + 2);
          *(_OWORD *)v93 = v94;
          v95 = *(unsigned int *)(*((_QWORD *)v1 + 24) + v84 + 8);
          if ((_DWORD)v95 != -1)
            LODWORD(v95) = v87[v95];
          v88[6 * v86++ + 2] = v95;
          v83 = *((unsigned int *)v1 + 50);
        }
        ++v85;
        v84 += 24;
      }
      while (v85 < v83);
    }
    else
    {
      v86 = 0;
    }
    if (v86 < *((_DWORD *)v1 + 38))
      *((_DWORD *)v1 + 38) = v86;
    LODWORD(v96) = v117;
    v97 = (char *)v115;
    if (v117 < v86)
    {
      v134 = 0;
      v96 = realloc_array(v115, &v134, 24 * v86, 24 * v116, 24 * v116, 1) / 0x18;
      v97 = (char *)v134;
    }
    if (v116 < v86)
    {
      v98 = v86 - (unint64_t)v116;
      v99 = &v97[24 * v116 + 16];
      do
      {
        *((_QWORD *)v99 - 2) = 0xFFFFFFFF00000000;
        *((_DWORD *)v99 - 2) = -1;
        *((_WORD *)v99 - 2) = -2;
        *(_QWORD *)v99 = 0;
        v99 += 24;
        --v98;
      }
      while (v98);
    }
    v100 = (void *)*((_QWORD *)v1 + 24);
    *((_QWORD *)v1 + 24) = v97;
    v115 = v100;
    LODWORD(v100) = *((_DWORD *)v1 + 51);
    *((_DWORD *)v1 + 50) = v86;
    *((_DWORD *)v1 + 51) = v96;
    v116 = 0;
    v117 = v100;
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v115);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v118);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v120);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v126);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v127);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v129);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v131);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v132);
}

void sub_20984A618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a25);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 160);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 128);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 112);
  _Unwind_Resume(a1);
}

void FstSearchLateLatticeBackoff::printSize(FstSearchLateLatticeBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  int v117;

  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117)
    v16 = v116;
  else
    v16 = &unk_209A6C820;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_209A6C820, a3, &unk_209A6C820, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if ((_DWORD)a2 != -1)
    xlprintf("%d ", v17, v18, v19, v20, a2);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_209A6C820);
  v21 = (a3 + 1);
  v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117)
    v27 = v116;
  else
    v27 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117)
    v32 = v116;
  else
    v32 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117)
    v37 = v116;
  else
    v37 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117)
    v42 = v116;
  else
    v42 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_209A6C820, (34 - a3), (34 - a3), v42, 4, 4, 0);
  v111 = a2;
  v112 = a6;
  v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v43 = 16;
  v44 = *((unsigned int *)this + 42);
  v45 = 24 * v44;
  if ((int)v44 <= 0)
    v45 = 0;
  v46 = v45 + v43;
  v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117)
    v52 = v116;
  else
    v52 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_209A6C820, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v53 = 16;
  v54 = *((unsigned int *)this + 46);
  v55 = 16 * v54;
  if ((int)v54 <= 0)
    v55 = 0;
  v56 = v55 + v53;
  v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117)
    v62 = v116;
  else
    v62 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_209A6C820, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v63 = 16;
  v64 = *((_DWORD *)this + 50);
  v65 = 22 * v64;
  if (v64 <= 0)
    v65 = 0;
  v66 = v65 + v63;
  v67 = v65 + v63 + 22 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117)
    v72 = v116;
  else
    v72 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_209A6C820, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
    v73 = 16;
  v74 = *((_DWORD *)this + 54);
  v75 = 22 * v74;
  if (v74 <= 0)
    v75 = 0;
  v76 = v75 + v73;
  v77 = v75 + v73 + 22 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117)
    v82 = v116;
  else
    v82 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_209A6C820, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117)
    v87 = v116;
  else
    v87 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_209A6C820, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117)
    v92 = v116;
  else
    v92 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_209A6C820, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117)
    v97 = v116;
  else
    v97 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_209A6C820, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  v98 = sizeObject((uint64_t)this + 240, 0);
  v99 = sizeObject((uint64_t)this + 240, 1);
  v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117)
    v105 = v116;
  else
    v105 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_209A6C820, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  v114 = 0;
  v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117)
    v110 = v116;
  else
    v110 = &unk_209A6C820;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_209A6C820, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_20984ADE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLateLatticeBackoff::findBestPath(uint64_t a1, uint64_t **a2, uint64_t a3, int *a4, uint64_t a5)
{
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  unsigned int BestTrace;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;

  v10 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v10)
    v11 = *(_DWORD *)(a3 + 8) == 0;
  else
    v11 = 0;
  if (v11)
  {
    *(_QWORD *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v10;
  }
  if ((_DWORD)v10)
    v12 = *((_DWORD *)a2 + 2) == 0;
  else
    v12 = 0;
  if (v12)
  {
    *a2 = MemChunkAlloc(v10, 0);
    *((_DWORD *)a2 + 2) = v10;
  }
  else if (!(_DWORD)v10)
  {
    goto LABEL_16;
  }
  v13 = 0;
  do
  {
    *((_BYTE *)*a2 + v13) = 0;
    *(_BYTE *)(*(_QWORD *)a3 + v13++) = 0;
  }
  while (v10 != v13);
LABEL_16:
  BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, a2, (_QWORD *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
  {
    v20 = 1879048192;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 160);
    v16 = v15 + 36 * BestTrace;
    v18 = *(_DWORD *)(v16 + 4);
    v17 = (int *)(v16 + 4);
    v19 = v17[3] + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v18);
    *a4 = v19;
    v20 = 1879048192;
    if (v19 != 1879048192)
    {
      v21 = *(_DWORD *)(a1 + 168);
      if (v21)
      {
        v22 = v21 - 1;
        v23 = 1879048192;
        v24 = *v17;
        do
        {
          v25 = v22;
          if (*(_DWORD *)(v15 + 36 * v22 + 4) == v24
            && *(_DWORD *)(v15 + 36 * v22) == 16777213
            && !*((_BYTE *)*a2 + v22))
          {
            *((_BYTE *)*a2 + v22) = 2;
            *(_BYTE *)(*(_QWORD *)a3 + v22) = 1;
            v15 = *(_QWORD *)(a1 + 160);
            if (v23 >= *(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                      + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4)))
              v23 = *(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                  + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4));
          }
          --v22;
        }
        while (v25);
        v19 = *a4;
        v26 = *(_DWORD *)(a1 + 168);
      }
      else
      {
        v26 = 0;
        v23 = 1879048192;
      }
      v27 = *(_DWORD *)(a1 + 28);
      v28 = __OFSUB__(v19, v23);
      v29 = v19 - v23;
      if ((v29 < 0) ^ v28 | (v29 == 0))
        v30 = 0;
      else
        v30 = v29;
      v31 = *(_DWORD *)(a5 + 12);
      v32 = v26;
      if (v26 > v31)
      {
        DgnPrimArray<unsigned int>::reallocElts(a5, v26 - v31, 0);
        v32 = *(_DWORD *)(a1 + 168);
      }
      *(_DWORD *)(a5 + 8) = v26;
      v20 = *a4;
      if (v32)
      {
        v33 = 0;
        v34 = 0;
        v35 = v20 - (v30 + v27) + *(_DWORD *)(a1 + 12);
        do
        {
          v36 = *a2;
          v37 = *((unsigned __int8 *)*a2 + v34);
          if (v37 == 2)
          {
            v38 = *(_QWORD *)a5;
            if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + v33 + 8))
               + *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 160) + v33 + 4)) <= v35)
            {
              *(_DWORD *)(v38 + 4 * v34) = v30 + v27;
              *((_BYTE *)v36 + v34) = 1;
            }
            else
            {
              *(_DWORD *)(v38 + 4 * v34) = 1879048192;
              *((_BYTE *)v36 + v34) = 0;
            }
          }
          else if (v37 == 1)
          {
            *(_DWORD *)(*(_QWORD *)a5 + 4 * v34) = 0;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a5 + 4 * v34) = 1879048192;
          }
          ++v34;
          v33 += 36;
        }
        while (v34 < *(unsigned int *)(a1 + 168));
        v20 = *a4;
      }
    }
  }
  return v20 != 1879048192;
}

uint64_t FstSearchLateLatticeBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchLateLatticeHashBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  v23 = (uint64_t)v9;
  v24 = *(unsigned int *)(a1 + 168);
  if ((_DWORD)v24)
  {
    v11 = 0;
    v12 = v28;
    do
    {
      if (*(_BYTE *)(*a3 + v11))
      {
        v13 = *(_QWORD *)(a1 + 160);
        if (*(_DWORD *)(v13 + 36 * v11) != 16777209 && *(int *)(v13 + 36 * v11 + 12) >= 1)
        {
          v14 = *(_DWORD *)(v13 + 36 * v11 + 8);
          do
          {
            v15 = *(_QWORD *)(a1 + 176) + 16 * v14;
            v16 = *(unsigned int *)(v15 + 12);
            if ((_DWORD)v16 == -1)
              v17 = 0;
            else
              v17 = v12 - *((_DWORD *)v29 + v16);
            v18 = *(unsigned int *)(v27 + 4 * v17);
            if (*(_BYTE *)(*a4 + v11))
              FstSearchLateLatticeBackoff::createLatticeLink(a1, v11, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v11))), a2, v10, a5);
            v19 = v26[0];
            if (*(_DWORD *)(v26[0] + 16 * v11 + 8))
            {
              v20 = 0;
              do
              {
                v21 = *(unsigned int *)(*(_QWORD *)(v19 + 16 * v11) + 4 * v20);
                FstSearchLateLatticeBackoff::createLatticeLink(a1, v11, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v21))), a2, v10, a5);
                ++v20;
                v19 = v26[0];
              }
              while (v20 < *(unsigned int *)(v26[0] + 16 * v11 + 8));
            }
            ++v14;
          }
          while (v14 < *(_DWORD *)(*(_QWORD *)(a1 + 160) + 36 * v11 + 12)
                      + *(_DWORD *)(*(_QWORD *)(a1 + 160) + 36 * v11 + 8));
        }
      }
      ++v11;
    }
    while (v11 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_20984B30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLateLatticeBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _QWORD v39[2];
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  __int128 v54;
  _DWORD v55[2];
  __int128 v56;

  v11 = a5;
  v12 = a4;
  v16 = *(_QWORD *)(a1 + 160);
  if ((a4 & 0x80000000) != 0 || (v17 = v16 + 36 * a4, v18 = *(_DWORD *)(v17 + 12), v18 < 1))
  {
    v22 = 0;
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 8);
    v20 = v18 + v19;
    do
    {
      v21 = *(_QWORD *)(a1 + 176);
      if (*(_DWORD *)(v21 + 16 * v19 + 12) == a2)
        v22 = (_DWORD *)(v21 + 16 * v19);
      else
        v22 = 0;
      ++v19;
    }
    while ((int)v19 < v20 && !v22);
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 36 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v55);
  v23 = a3[1];
  if (v22)
  {
    v23 += v22[1];
    v24 = *v22 + *a3;
  }
  else
  {
    v24 = *a3;
  }
  if (v55[0] >> 25 == 126)
  {
    v25 = 0;
    v26 = v23;
  }
  else
  {
    v25 = *(_DWORD *)(a1 + 136);
    v26 = v23 - v25;
  }
  if ((v12 & 0x80000000) != 0)
  {
    v27 = 0;
  }
  else
  {
    v27 = *(_DWORD *)(a1 + 140);
    v26 -= v27;
  }
  v28 = v24 - v23;
  v29 = a3[3];
  v30 = *(_QWORD *)(a1 + 160);
  if (v29 == -1)
  {
    v32 = 0;
    if (a9)
      goto LABEL_26;
  }
  else
  {
    v31 = *(_DWORD *)(v30 + 36 * v29 + 4);
    if (a9)
    {
      if (v31 >= 1)
        --v31;
      v32 = (v31 >> 1) + 1;
LABEL_26:
      v33 = *(_DWORD *)(v30 + 36 * a2 + 4);
      if (v33 >= 1)
        --v33;
      v34 = v33 >> 1;
      v35 = (v33 >> 1) - v32 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        v36 = *(_DWORD *)(v30 + 36 * v12 + 4);
        if (v36 >= 1)
          --v36;
        v37 = v36 >> 1;
        goto LABEL_35;
      }
LABEL_36:
      v38 = 0;
      goto LABEL_37;
    }
    v32 = v31 + 1;
  }
  v34 = *(_DWORD *)(v30 + 36 * a2 + 4);
  v35 = v34 - v32 + 1;
  if ((v12 & 0x80000000) != 0)
    goto LABEL_36;
  v37 = *(_DWORD *)(v30 + 36 * v12 + 4);
LABEL_35:
  v38 = v37 - v34;
LABEL_37:
  v40 = v32;
  v41 = v35;
  v42 = v38;
  v43 = v26;
  v44 = 0;
  v45 = v25;
  v46 = v28;
  v47 = 0;
  v48 = v27;
  v49 = xmmword_209A6C7F0;
  v50 = 0;
  v51 = -1;
  v39[0] = &off_24C2149F8;
  v39[1] = 0xBFF0000000000000;
  v52 = v55[0];
  v53 = v55[1];
  v54 = v56;
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v39);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v39);
}

void sub_20984B57C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLatticeBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(_QWORD *)(this + 112) = a2;
  if (*(_BYTE *)(this + 356))
    return MiniFst::beginTopFstSyncRecog(this + 240);
  return this;
}

uint64_t FstSearchLateLatticeBackoff::endTopRecSyncRecog(FstSearchLateLatticeBackoff *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLateLatticeBackoff::getBestExitScore(FstSearchLateLatticeBackoff *this)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  *((_DWORD *)this + 57) = -1;
  v1 = *((unsigned int *)this + 38);
  v2 = *((unsigned int *)this + 50);
  if (v1 >= v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  v6 = 24 * v1;
  do
  {
    v7 = *((_QWORD *)this + 24) + v6;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((_QWORD *)this + 20) + 36 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 24;
  }
  while (v1 < v2);
  if (v5)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = v5;
    v11 = 1879048192;
    do
    {
      v13 = *v4++;
      v12 = v13;
      v14 = *(_DWORD *)(v9 + 36 * v13 + 16);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 36 * v12 + 20);
        v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    v11 = 1879048192;
  }
  if (v11 >= 20000)
    v15 = 20000;
  else
    v15 = v11;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_20984B704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLatticeBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLateLatticeBackoff *this, Node *a2)
{
  uint64_t v2;
  int *v3;
  __int16 v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = *((unsigned int *)this + 50);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 24);
    v4 = -1;
    v5 = 1879048192;
    v6 = v3;
    do
    {
      v8 = *v6;
      v6 += 6;
      v7 = v8;
      if (v5 > v8)
      {
        v4 = *((_WORD *)v3 + 6);
        v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000)
        v9 = 20000;
      else
        v9 = v5;
    }
  }
  else
  {
    v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLateLatticeBackoff::seedTheory(FstSearchLateLatticeBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  int v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if (a4 == -2)
  {
    v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
      v11 = *((_DWORD *)this + 42);
    }
    v12 = *((_QWORD *)this + 20) + 36 * v11;
    *(_DWORD *)v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_QWORD *)(v12 + 8) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 16) = a2;
    *(_QWORD *)(v12 + 20) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 28) = 0;
    *(_WORD *)(v12 + 32) = -2;
    v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  v13 = *(_DWORD *)(*((_QWORD *)this + 5) + 144);
  v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 192, 1, 1);
    v14 = *((_DWORD *)this + 50);
  }
  v15 = *((_QWORD *)this + 24) + 24 * v14;
  *(_DWORD *)v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_QWORD *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;
  return FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLateLatticeBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v8 = *(unsigned int *)(result + 228);
  if ((_DWORD)v8 != -1)
  {
    v9 = result;
    v10 = (unsigned int *)(*(_QWORD *)(result + 160) + 36 * v8);
    for (i = v10[5]; (_DWORD)i != -1; v8 = v16)
    {
      v16 = i;
      result = *(_QWORD *)(v9 + 40);
      if (*v10 == 16777209)
      {
        v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v17 = result;
      }
      v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      v20 = *(_QWORD *)(v9 + 160);
      v21 = *(_DWORD *)(v20 + 36 * v8 + 4);
      v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        v22 = *(unsigned int *)(a3 + 8);
        v20 = *(_QWORD *)(v9 + 160);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      v23 = *(_DWORD *)(v20 + 36 * v8 + 16);
      v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      v10 = (unsigned int *)(*(_QWORD *)(v9 + 160) + 36 * v16);
      i = v10[5];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLateLatticeBackoff::checkSearchParametersValidityForArcGraph(FstSearchLateLatticeBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v8 + 178))
  {
    v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(_QWORD *)(**(_QWORD **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((_QWORD *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if ((a2 & 1) != 0)
      {
        if (!*(_BYTE *)(v8 + 203))
          return;
      }
      else if (*(_BYTE *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(_BYTE *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLateLatticeBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int BestTrace;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  __int128 v38;

  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(_QWORD *)a2 + v9))(*(_QWORD *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1)
    return 1879048192;
  v25 = a1;
  v24 = BestTrace;
  FstSearchLateLatticeHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  if (*(_DWORD *)(a3 + 8))
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (int *)(*(_QWORD *)a3 + v15);
      v19 = v18[6];
      v20 = v18[7];
      v27 = v17;
      v28 = v19 - v17;
      v29 = v20 - v19;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v33 = 1879048192;
      v34 = 0;
      v35 = -1;
      v26[0] = &off_24C2149F8;
      v26[1] = 0xBFF0000000000000;
      v36 = *v18;
      v37 = v18[1];
      v38 = *(_OWORD *)(v18 + 2);
      v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(_QWORD *)a2 + 112 * v21), (const WordLatticeLC *)v26);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v26);
      ++v16;
      v15 += 32;
      v17 = v20;
    }
    while (v16 < *(unsigned int *)(a3 + 8));
  }
  v22 = *(_QWORD *)(v25 + 160) + 36 * v24;
  return (*(_DWORD *)(v22 + 16) + *(_DWORD *)(*(_QWORD *)(v25 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_20984BE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLateLattice::advanceDeltas(FstSearchLateLattice *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int ScoreNoBackoff;
  uint64_t v36;
  int v37;
  int v38;
  _DWORD *v39;
  int v40;
  __int16 v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int64x2_t *v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t *v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  unint64_t v67;
  unint64_t v68;
  int64x2_t v69;
  int64x2_t *v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  uint64_t v74;
  int64x2_t *v75;
  int64x2_t result;
  int64x2_t v77;
  SearchStats *v78;
  int v79;
  FstSearchLateLattice *v81;
  MiniFst *v82;
  char *v83;
  int *v84;
  int v85;
  __int16 v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int v104;
  int64x2_t v105;
  int64x2_t v106;
  int v107[3];

  v7 = a2;
  v107[0] = a2;
  v105 = 0u;
  v106 = 0u;
  SnapTime::recordTime((SnapTime *)&v105, 1, 0, 0, 0);
  *((_DWORD *)this + 58) = a3;
  v89 = *((_DWORD *)this + 2);
  v84 = (int *)((char *)this + 232);
  v9 = *((unsigned int *)this + 50);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v88 = 0;
    v11 = 0;
    v82 = (FstSearchLateLattice *)((char *)this + 240);
    v83 = (char *)this + 208;
    do
    {
      v12 = *((_QWORD *)this + 24);
      v13 = *((_QWORD *)this + 5);
      v14 = 24 * v11 + 20;
      while (1)
      {
        v15 = *(unsigned int *)(v12 + v14 - 16);
        if (*(_DWORD *)(v13 + 160) != (_DWORD)v15)
          break;
        ++v11;
        v14 += 24;
        if (v11 >= v9)
          goto LABEL_44;
      }
      v79 = v7;
      v78 = a4;
      if (*(_DWORD *)(v13 + 140) > (int)v15)
      {
        v16 = v10;
        v17 = *(_DWORD *)(v12 + v14 - 20);
        v18 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v12 + v14 - 8))
            + v17;
        v19 = *((_DWORD *)this + 58);
        if (v18 - v89 <= v19)
        {
          if (v19 > v18)
            *v84 = v18;
          v20 = *((_QWORD *)this + 24) + v14;
          v21 = *(_QWORD *)(v20 - 16);
          v22 = *(_WORD *)(v20 - 8);
          v23 = *(_WORD *)(v20 - 6);
          v24 = *(_QWORD *)(v20 - 4);
          v25 = *((unsigned int *)this + 54);
          if (v25 == *((_DWORD *)this + 55))
          {
            DgnArray<CWIDAC>::reallocElts((uint64_t)v83, 1, 1);
            LODWORD(v25) = *((_DWORD *)this + 54);
          }
          v26 = *((_QWORD *)this + 26) + 24 * v25;
          *(_DWORD *)v26 = v18;
          *(_QWORD *)(v26 + 4) = v21;
          *(_WORD *)(v26 + 12) = v22;
          *(_WORD *)(v26 + 14) = v23;
          *(_QWORD *)(v26 + 16) = v24;
          v27 = *((_DWORD *)this + 54);
          *((_DWORD *)this + 54) = v27 + 1;
          if (v88 == 2 * *((_DWORD *)this + 4))
            v10 = (v27 + 1);
          else
            v10 = v16;
          ++v88;
        }
        else
        {
          v10 = v16;
        }
      }
      v28 = v15;
      v81 = this;
      do
      {
        v29 = *((_QWORD *)this + 5);
        v30 = *(_QWORD *)(v29 + 152);
        v31 = *(_DWORD *)(v30 + 4 * v28);
        v32 = *(_DWORD *)(v30 + 4 * (v28 + 1));
        v33 = *(_DWORD *)(v29 + 140);
        if (v33 <= v32)
        {
          if (v33 <= (int)v15 && *((_BYTE *)this + 356) != 0)
          {
            v49 = (v31 & 0xFFFFF) <= 0xFFFF3 ? v31 & 0xFFFFF : v31 & 0xFFFFF | 0xF00000;
            if (v49 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v102);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v49, (DgnString *)&v102, v50, v51, v52, v53, v54);
              v59 = &unk_209A6C820;
              if (v102.i32[2])
                v59 = (void *)v102.i64[0];
              xprintf("Seed from state %d score %d trace %d, %s\n", v55, v56, v57, v58, v15, *(unsigned int *)(*((_QWORD *)this + 24) + v14 - 20), *(unsigned int *)(*((_QWORD *)this + 24) + v14 - 12), v59);
              MiniFst::seed((uint64_t)v82, *(_DWORD *)(*((_QWORD *)this + 24) + v14 - 20), *(_DWORD *)(*((_QWORD *)this + 24) + v14), *(_DWORD *)(*((_QWORD *)this + 24) + v14 - 12), v32);
              DgnString::~DgnString((DgnString *)&v102);
            }
          }
        }
        else
        {
          v34 = (v31 >> 20) & 0x3FF;
          ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v30 + 4 * v28));
          v36 = *((_QWORD *)this + 24);
          v37 = ScoreNoBackoff + v34 + *(_DWORD *)(v36 + v14 - 20);
          v38 = *((_DWORD *)this + 58);
          if (v37 - v89 <= v38)
          {
            v87 = v10;
            if (v38 > v37)
              *v84 = v37;
            v39 = (_DWORD *)(v36 + v14);
            v40 = *(v39 - 3);
            v41 = *((_WORD *)v39 - 3);
            v43 = *(v39 - 1);
            v42 = *v39;
            v44 = *((unsigned int *)this + 54);
            if (v44 == *((_DWORD *)this + 55))
            {
              v85 = v40;
              v86 = v41;
              v45 = v42;
              DgnArray<CWIDAC>::reallocElts((uint64_t)v83, 1, 1);
              v40 = v85;
              v41 = v86;
              v42 = v45;
              this = v81;
              LODWORD(v44) = *((_DWORD *)v81 + 54);
            }
            v46 = *((_QWORD *)this + 26) + 24 * v44;
            *(_DWORD *)v46 = v37;
            *(_DWORD *)(v46 + 4) = v32;
            *(_DWORD *)(v46 + 8) = v40;
            *(_WORD *)(v46 + 12) = v31;
            *(_WORD *)(v46 + 14) = v41;
            *(_DWORD *)(v46 + 16) = v43 + v34;
            *(_DWORD *)(v46 + 20) = v42;
            v47 = *((_DWORD *)this + 54);
            *((_DWORD *)this + 54) = v47 + 1;
            if (v88 == 2 * *((_DWORD *)this + 4))
              v10 = (v47 + 1);
            else
              v10 = v87;
            ++v88;
          }
        }
        v28 += 2;
      }
      while ((v31 & 0x80000000) == 0);
      v11 = (v11 + 1);
      v9 = *((unsigned int *)this + 50);
      v7 = v79;
      a4 = v78;
    }
    while (v11 < v9);
  }
  else
  {
    v88 = 0;
    LODWORD(v10) = 0;
  }
LABEL_44:
  v104 = *((_DWORD *)this + 58) + v89;
  if (*((_BYTE *)this + 356))
    MiniFst::updateFrame((char *)this + 240, v84, v89, v7);
  v102 = 0u;
  v103 = 0u;
  SnapTime::recordTime((SnapTime *)&v102, 1, 0, 0, 0);
  v102 = vsubq_s64(v102, v105);
  v103 = vsubq_s64(v103, v106);
  v60 = (int64x2_t *)*((_QWORD *)this + 13);
  v61 = vaddq_s64(v60[1], v103);
  *v60 = vaddq_s64(*v60, v102);
  v60[1] = v61;
  v100 = 0u;
  v101 = 0u;
  SnapTime::recordTime((SnapTime *)&v100, 1, 0, 0, 0);
  if (v88 > 2 * *((_DWORD *)this + 4))
    FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, v10, &v104);
  v98 = 0u;
  v99 = 0u;
  SnapTime::recordTime((SnapTime *)&v98, 1, 0, 0, 0);
  v62 = vsubq_s64(v98, v100);
  v63 = (int64x2_t *)*((_QWORD *)this + 13);
  v64 = v63[3];
  v65 = vaddq_s64(v63[2], v62);
  v98 = v62;
  v99 = vsubq_s64(v99, v101);
  v66 = vaddq_s64(v64, v99);
  v63[2] = v65;
  v63[3] = v66;
  v96 = 0u;
  v97 = 0u;
  SnapTime::recordTime((SnapTime *)&v96, 1, 0, 0, 0);
  FstSearchLateLatticeBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  v67 = *((unsigned int *)this + 6);
  if ((_DWORD)v67)
  {
    v68 = *((unsigned int *)this + 50);
    if (v67 < v68)
      mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(*((_QWORD *)this + 24), v67, v68);
  }
  v94 = 0u;
  v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  v69 = vsubq_s64(v94, v96);
  v70 = (int64x2_t *)*((_QWORD *)this + 13);
  v71 = v70[5];
  v72 = vaddq_s64(v70[4], v69);
  v94 = v69;
  v95 = vsubq_s64(v95, v97);
  v73 = vaddq_s64(v71, v95);
  v70[4] = v72;
  v70[5] = v73;
  v92 = 0u;
  v93 = 0u;
  SnapTime::recordTime((SnapTime *)&v92, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  v74 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v74;
  if (a4)
  {
    *((_QWORD *)a4 + 2) += v74;
    if (*((_DWORD *)a4 + 2) > v74)
      LODWORD(v74) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = v74;
  }
  if (*((_BYTE *)this + 356))
    FstSearchLateLattice::seedFromMiniFst((uint64_t)this, v107);
  if (a5)
    FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, v104, v7, a4);
  *((_DWORD *)this + 56) = v7;
  v90 = 0u;
  v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  v75 = (int64x2_t *)*((_QWORD *)this + 13);
  result = vaddq_s64(v75[6], vsubq_s64(v90, v92));
  v77 = vaddq_s64(v75[7], vsubq_s64(v91, v93));
  v75[6] = result;
  v75[7] = v77;
  return result;
}

