@implementation BrowserController

- (double)catalogViewControllerPopoverWidth:(id)a3
{
  id WeakRetained;
  double v5;
  double v6;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "browserControllerCatalogViewPopoverWidth:", self);
  v6 = v5;

  return v6;
}

- (double)catalogViewControllerPopoverMaxHeight:(id)a3
{
  return 1.79769313e308;
}

- (void)_updateTabOverviewBarPlacement
{
  uint64_t ShouldUseCompactAppearanceForSize;
  uint64_t shouldShowTabGroup;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 280), "view");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "bounds");
    ShouldUseCompactAppearanceForSize = SFTabOverviewShouldUseCompactAppearanceForSize();

    shouldShowTabGroup = -[BrowserController _shouldShowTabGroupSwitcher](a1);
    objc_msgSend(*(id *)(a1 + 904), "tabOverview");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = 2;
    if (!(_DWORD)shouldShowTabGroup)
      v5 = 0;
    if ((_DWORD)ShouldUseCompactAppearanceForSize)
      v6 = 1;
    else
      v6 = v5;
    v9 = v4;
    objc_msgSend(v4, "setBarPlacement:", v6);
    objc_msgSend(v9, "setTargetItemLiftsFromGrid:", ShouldUseCompactAppearanceForSize);
    if (SFTabGroupSwitcherEnabled())
    {
      objc_msgSend(*(id *)(a1 + 904), "tabViewContainerView");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setShowsTabGroupSwitcherToolbar:", shouldShowTabGroup);

    }
  }
}

- (id)barManager:(id)a3 visibleBarItemsForLayout:(int64_t)a4 availableItems:(id)a5
{
  id v7;
  id v8;
  void *v9;

  v7 = a5;
  if (-[BrowserRootViewController toolbarPlacement](self->_rootViewController, "toolbarPlacement") != 1)
    goto LABEL_5;
  if (a4 == 1)
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", &unk_1E9D62008);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (a4)
  {
LABEL_5:
    v8 = v7;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "set");
    v8 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_6:
  v9 = v8;

  return v9;
}

- (void)browserViewControllerDidLayOutSubviews:(id)a3
{
  char v4;
  int shouldShowBookmarks;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  int v13;
  __int128 v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  __int128 v19;
  __int128 v20;

  if (-[UIScrollView isDragging](self->_scrollView, "isDragging", a3)
    || -[UIScrollView isDecelerating](self->_scrollView, "isDecelerating"))
  {
    v4 = 1;
  }
  else
  {
    shouldShowBookmarks = -[BrowserController _shouldShowBookmarksBar]((id *)&self->super.super.super.isa);
    -[BrowserController _setShowBookmarksBar:]((uint64_t)self, shouldShowBookmarks);
    v4 = 0;
  }
  -[BrowserController _contentContainerViewFrameDidChange]((uint64_t)self);
  if ((v4 & 1) == 0 && self->_interactivelyChangingObscuredInsets)
  {
    -[UIScrollView contentOffset](self->_scrollView, "contentOffset");
    v7 = v6;
    v9 = v8;
    -[UIScrollView contentInset](self->_scrollView, "contentInset");
    if (v9 <= -v10)
      v11 = -v10;
    else
      v11 = v9;
    -[UIScrollView setContentOffset:](self->_scrollView, "setContentOffset:", v7, v11);
  }
  -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "popoverIsShowing");

  if (v13)
  {
    v14 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    v19 = *MEMORY[0x1E0C9D628];
    v20 = v14;
    -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 0;
    -[BrowserController catalogViewController:willRepositionPopoverToRect:inView:](self, "catalogViewController:willRepositionPopoverToRect:inView:", v15, &v19, &v18);
    v16 = v18;
    objc_msgSend(v15, "popoverPresentationController");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setSourceView:", v16);
    objc_msgSend(v17, "setSourceRect:", v19, v20);

  }
}

- (id)_catalogViewController
{
  id v1;
  id WeakRetained;

  v1 = a1;
  if (a1)
  {
    WeakRetained = objc_loadWeakRetained(a1 + 48);
    objc_msgSend(WeakRetained, "browserControllerCatalogViewController:", v1);
    v1 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v1;
}

- (void)_contentContainerViewFrameDidChange
{
  id WeakRetained;

  if (a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 384));
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(WeakRetained, "browserControllerContentContainerViewFrameDidChange:", a1);

  }
}

- (uint64_t)_shouldShowBookmarksBar
{
  uint64_t v1;
  void *v2;
  double v3;
  double v4;
  int IsPad;
  int v6;

  v1 = (uint64_t)a1;
  if (a1)
  {
    -[BrowserController contentContainerView](a1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bounds");
    v4 = v3;
    IsPad = _SFDeviceIsPad();
    if (v4 > *MEMORY[0x1E0D4F2B8])
      v6 = IsPad;
    else
      v6 = 0;
    if (v6 == 1)
      v1 = -[BrowserController _prefersShowingBookmarksBar](v1);
    else
      v1 = 0;

  }
  return v1;
}

- (id)contentContainerView
{
  id *v1;
  id WeakRetained;

  v1 = a1;
  if (a1)
  {
    WeakRetained = objc_loadWeakRetained(a1 + 48);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(WeakRetained, "browserControllerContentContainerView:", v1);
    else
      objc_msgSend(v1[35], "contentContainerView");
    v1 = (id *)objc_claimAutoreleasedReturnValue();

  }
  return v1;
}

- (void)_setShowBookmarksBar:(uint64_t)a1
{
  void *v4;
  void *v5;
  BookmarksBarView *v6;
  BookmarksBarView *v7;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 280), "bookmarksBar");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if ((((v4 == 0) ^ a2) & 1) != 0)
    {

    }
    else if (a2)
    {
      v6 = [BookmarksBarView alloc];
      v7 = -[BookmarksBarView initWithFrame:](v6, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));

      -[BookmarksBarView setDelegate:](v7, "setDelegate:", a1);
      -[BookmarksBarView setLinkPreviewProvider:](v7, "setLinkPreviewProvider:", a1);
      -[BookmarksBarView setNavigationIntentHandler:](v7, "setNavigationIntentHandler:", a1);
      -[BookmarksBarView setBrowserController:](v7, "setBrowserController:", a1);
      -[BookmarksBarView setButtonStyle:](v7, "setButtonStyle:", -[BrowserController _bookmarksBarLabelButtonDisplayStyle](a1));
      objc_msgSend(*(id *)(a1 + 280), "setBookmarksBar:");

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 280), "setBookmarksBar:", 0);

    }
  }
}

- (id)continuousReadingViewControllerForBrowserViewController:(id)a3
{
  return self->_continuousReadingViewController;
}

- (BOOL)_shouldUseNarrowLayout
{
  void *v2;
  char IsCompactSizeClass;

  -[BrowserRootViewController view](self->_rootViewController, "view");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "bounds");
  IsCompactSizeClass = _SFWidthIsCompactSizeClass();

  return IsCompactSizeClass;
}

- (BOOL)isShowingFavorites
{
  return self->_favoritesState != 0;
}

- (uint64_t)_shouldShowTabGroupSwitcher
{
  uint64_t ShouldUseCompactAppearanceForSize;
  void *v3;

  if (!a1 || !SFTabGroupSwitcherEnabled() || (_SFDeviceIsPad() & 1) != 0)
    return 0;
  objc_msgSend(*(id *)(a1 + 280), "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bounds");
  ShouldUseCompactAppearanceForSize = SFTabOverviewShouldUseCompactAppearanceForSize();

  return ShouldUseCompactAppearanceForSize;
}

- (void)_observeInitializedWebKitFeatures
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  void *v9;
  BOOL v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "safari_standardUserDefaultsWithOptimizedKeyValueObserving");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v2, "safari_resetWebKitExperimentalFeaturesIfNeeded:", 0);
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    objc_msgSend(MEMORY[0x1E0CEF5F0], "_features");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v13 != v5)
            objc_enumerationMutation(v3);
          v7 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i);
          if ((objc_msgSend(MEMORY[0x1E0C99EA0], "safari_shouldObserveWebKitFeature:", v7) & 1) != 0)
          {
            objc_msgSend(MEMORY[0x1E0C99EA0], "safari_keyForWebKitFeature:", v7);
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            if ((v11 & 1) == 0)
            {
              objc_msgSend(v2, "objectForKey:", v8);
              v9 = (void *)objc_claimAutoreleasedReturnValue();
              v10 = v9 == 0;

              if (!v10)
                objc_msgSend(*(id *)(a1 + 816), "_setEnabled:forFeature:", objc_msgSend(v2, "BOOLForKey:", v8), v7);
            }
            objc_msgSend(v2, "addObserver:forKeyPath:options:context:", a1, v8, 1, webFeatureObserverContext);

          }
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v4);
    }

  }
}

- (TabController)tabController
{
  return self->_tabController;
}

- (void)browserViewController:(id)a3 didUpdateBannerTheme:(id)a4
{
  -[ContinuousReadingViewController setBannerTheme:animated:](self->_continuousReadingViewController, "setBannerTheme:animated:", a4, 1);
}

- (double)browserViewController:(id)a3 adjustedTopObscuredInsetForBanners:(double)a4
{
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  void *v14;
  void *v15;
  _SFWebView *webView;
  double MaxY;
  double v18;
  double v19;
  void *v20;
  void *v21;
  _SFWebView *v22;
  double v23;
  double v24;
  double v25;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;

  if (!-[ContinuousReadingViewController isCommittingToContinuousDocument](self->_continuousReadingViewController, "isCommittingToContinuousDocument", a3))
  {
    -[_SFWebView bounds](self->_webView, "bounds");
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v13 = v12;
    -[BrowserController _topContinuousReadingBanner]((id *)&self->super.super.super.isa);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
    {
      webView = self->_webView;
      objc_msgSend(v14, "bounds");
      -[_SFWebView convertRect:fromView:](webView, "convertRect:fromView:", v15);
      MaxY = CGRectGetMaxY(v27);
      v28.origin.x = v7;
      v28.origin.y = v9;
      v28.size.width = v11;
      v28.size.height = v13;
      v18 = MaxY - CGRectGetMinY(v28);
      if (v18 <= a4)
        v19 = a4;
      else
        v19 = v18;
      a4 = v19;
    }
    -[BannerController topBanners](self->_bannerController, "topBanners");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "lastObject");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21)
    {
      v22 = self->_webView;
      objc_msgSend(v21, "bounds");
      -[_SFWebView convertRect:fromView:](v22, "convertRect:fromView:", v21);
      v23 = CGRectGetMaxY(v29);
      v30.origin.x = v7;
      v30.origin.y = v9;
      v30.size.width = v11;
      v30.size.height = v13;
      v24 = v23 - CGRectGetMinY(v30);
      if (v24 <= a4)
        v25 = a4;
      else
        v25 = v24;
      a4 = v25;
    }
    if (-[BrowserController _obscuredInsetsIncludeRefreshControl]((uint64_t)self))
      a4 = a4 + -[BrowserController _refreshControlHeight]((uint64_t)self);

  }
  return a4;
}

- (uint64_t)_obscuredInsetsIncludeRefreshControl
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 338) || !objc_msgSend(*(id *)(result + 304), "_isVerticalBouncing"))
      return 1;
    else
      return objc_msgSend(*(id *)(v1 + 304), "isDragging") ^ 1;
  }
  return result;
}

- (BannerController)bannerController
{
  return self->_bannerController;
}

- (id)_topContinuousReadingBanner
{
  if (a1)
  {
    objc_msgSend(a1[11], "topBannerView");
    a1 = (id *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

- (double)additionalContentHeightForBanners
{
  void *v1;
  double Height;
  CGRect v4;

  if (!a1)
    return 0.0;
  objc_msgSend(*(id *)(a1 + 88), "topBannerView");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "bounds");
  Height = CGRectGetHeight(v4);

  return Height;
}

- (BOOL)interfaceFillsScreen
{
  char v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  if (-[ContinuousReadingViewController isScrollingToNextContinuousDocument](self->_continuousReadingViewController, "isScrollingToNextContinuousDocument")|| -[BrowserRootViewController keepBarsMinimized](self->_rootViewController, "keepBarsMinimized"))
  {
    return 0;
  }
  if (-[BrowserRootViewController usingLoweredBar](self->_rootViewController, "usingLoweredBar"))
  {
    -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "capsuleCollectionView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "minimizationStyle");

    if (v6 == 1)
    {
      -[_SFPageFormatMenuController viewController](self->_pageFormatMenuController, "viewController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "presentingViewController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v8)
        return 1;
    }
  }
  if (-[BrowserController fullScreenInPortrait](self, "fullScreenInPortrait")
    || -[BrowserController _isVerticallyConstrained]((uint64_t)self))
  {
    return 1;
  }
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v9, "isShowingReader");

  return v3;
}

- (BOOL)fullScreenInPortrait
{
  return self->_fullScreenInPortrait;
}

- (BOOL)_isVerticallyConstrained
{
  void *v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  objc_msgSend(*(id *)(a1 + 280), "traitCollection");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "verticalSizeClass") == 1;

  return v2;
}

- (BOOL)isShowingInOneThirdMode
{
  id WeakRetained;
  BOOL v4;
  CGRect v6;

  if (!_SFDeviceIsPad())
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)&self->_scene);
  if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_msgSend(WeakRetained, "_enhancedWindowingEnabled") & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    -[BrowserRootViewController contentFrameInPageView](self->_rootViewController, "contentFrameInPageView");
    v4 = CGRectGetWidth(v6) <= 375.0;
  }

  return v4;
}

- (UIWindowScene)scene
{
  return (UIWindowScene *)objc_loadWeakRetained((id *)&self->_scene);
}

- (double)browserViewController:(id)a3 adjustedBottomObscuredInset:(double)a4
{
  uint64_t v6;
  void *v7;
  BOOL v8;
  double MaxY;
  _SFWebView *webView;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  CGRect v24;
  CGRect v25;

  -[ContinuousReadingViewController previewView](self->_continuousReadingViewController, "previewView", a3);
  v6 = objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = (void *)v6;
    v8 = -[ContinuousReadingViewController isCommittingToContinuousDocument](self->_continuousReadingViewController, "isCommittingToContinuousDocument");

    if (!v8)
    {
      -[_SFWebView bounds](self->_webView, "bounds");
      MaxY = CGRectGetMaxY(v24);
      webView = self->_webView;
      -[ContinuousReadingViewController previewView](self->_continuousReadingViewController, "previewView");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "bounds");
      v13 = v12;
      v15 = v14;
      v17 = v16;
      v19 = v18;
      -[ContinuousReadingViewController previewView](self->_continuousReadingViewController, "previewView");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[_SFWebView convertRect:fromView:](webView, "convertRect:fromView:", v20, v13, v15, v17, v19);
      v21 = MaxY - CGRectGetMinY(v25);

      if (v21 >= a4)
        return v21;
      else
        return a4;
    }
  }
  return a4;
}

- (double)browserViewController:(id)a3 adjustedBottomContentInset:(double)a4
{
  void *v5;
  double v6;
  double v7;

  -[ContinuousReadingViewController previewView](self->_continuousReadingViewController, "previewView", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "rubberBandingHeight");
  v7 = v6 + a4;

  return v7;
}

- (int64_t)overrideBarTintStyleForUnifiedBar
{
  void *v3;
  uint64_t v4;
  int64_t v5;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  if (!-[BrowserController isShowingFavorites](self, "isShowingFavorites"))
    return 0;
  if (-[BrowserController favoritesAreShowingInPopover](self, "favoritesAreShowingInPopover"))
    return 0;
  -[BrowserController tabBarManager](self, "tabBarManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "displayMode");

  if (v4 == 2)
    return 0;
  objc_msgSend(MEMORY[0x1E0D8ACA0], "defaultManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "image");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    -[BrowserController configuration](self, "configuration");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "barTintStyle");

    if (objc_msgSend(v7, "appearanceIfImageExists:", 1) == 2)
      v10 = _SFDarkTintStyleForStyle();
    else
      v10 = _SFLightTintStyleForStyle();
    v5 = v10;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t __61__BrowserController_catalogViewControllerDidScroll_animated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "updateUnifiedBarChromelessScrollDistance");
}

- (void)_updateUnifiedBarBackgroundVisibility
{
  uint64_t v2;
  unint64_t v3;
  id v4;
  id v5;

  if (a1)
  {
    if ((objc_msgSend(MEMORY[0x1E0D8AD68], "isLockdownModeEnabledForSafari") & 1) != 0
      || !objc_msgSend(a1, "isShowingFavorites")
      || (objc_msgSend(a1, "favoritesAreShowingInPopover") & 1) != 0)
    {
      v2 = 0;
    }
    else
    {
      objc_msgSend(a1, "tabBarManager");
      v5 = (id)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(v5, "displayMode");

      v2 = 2 * (v3 < 2);
    }
    objc_msgSend(a1[35], "unifiedBar");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setBackgroundVisibility:", v2);

  }
}

- (void)_updateButtonsAnimatingTabBar:(uint64_t)a1
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;

  if (a1)
  {
    LODWORD(v2) = a2;
    objc_msgSend(*(id *)(a1 + 904), "tabThumbnailCollectionView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "presentationState");

    if (v5)
      v2 = 0;
    else
      v2 = v2;
    objc_msgSend(*(id *)(a1 + 904), "updateTabViewsAnimatingTabBar:", v2);
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(a1 + 808);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __51__BrowserController__updateButtonsAnimatingTabBar___block_invoke;
    v9[3] = &unk_1E9CF3358;
    v10 = v6;
    v11 = a1;
    v8 = v6;
    objc_msgSend(v7, "performCoalescedUpdatesAnimated:updates:", v2, v9);

  }
}

- (UIPinchGestureRecognizer)tabViewPinchRecognizer
{
  return self->_tabViewPinchRecognizer;
}

- (TabCollectionViewProviding)tabCollectionViewProvider
{
  return self->_tabCollectionViewProvider;
}

- (void)updateTabViewPinchRecognizer
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "updateTabViewPinchRecognizerForBrowserController:", self);

}

- (BOOL)isInDefaultProfile
{
  void *v2;
  char v3;

  -[BrowserController activeProfileIdentifier](self, "activeProfileIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0D89E20]);

  return v3;
}

- (WBProfile)effectiveProfile
{
  WBTabGroupManager *tabGroupManager;
  void *v3;
  void *v4;

  tabGroupManager = self->_tabGroupManager;
  -[BrowserController effectiveProfileIdentifier](self, "effectiveProfileIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[WBTabGroupManager profileWithIdentifier:](tabGroupManager, "profileWithIdentifier:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (WBProfile *)v4;
}

- (WBProfile)activeProfile
{
  WBTabGroupManager *tabGroupManager;
  void *v3;
  void *v4;

  tabGroupManager = self->_tabGroupManager;
  -[BrowserController activeProfileIdentifier](self, "activeProfileIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[WBTabGroupManager profileWithIdentifier:](tabGroupManager, "profileWithIdentifier:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (WBProfile *)v4;
}

- (NSString)effectiveProfileIdentifier
{
  if (self->_privateBrowsingEnabled)
    return (NSString *)(id)*MEMORY[0x1E0D89E20];
  -[BrowserController activeProfileIdentifier](self, "activeProfileIdentifier");
  return (NSString *)(id)objc_claimAutoreleasedReturnValue();
}

- (NSString)activeProfileIdentifier
{
  return (NSString *)-[WBProfileWindow activeProfileIdentifier](self->_profileWindow, "activeProfileIdentifier");
}

- (BOOL)isPrivateBrowsingEnabled
{
  return self->_privateBrowsingEnabled;
}

- (UserActivityController)userActivityController
{
  return self->_userActivityController;
}

- (TabGroupProvider)tabGroupProvider
{
  return (TabGroupProvider *)self->_tabController;
}

- (NSString)activeLibraryType
{
  void *v2;
  void *v3;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "libraryType");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSString *)v3;
}

- (TabBarManager)tabBarManager
{
  id WeakRetained;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "browserControllerTabBarManager:", self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (TabBarManager *)v4;
}

- (id)nextResponder
{
  id WeakRetained;
  BrowserRootViewController *v4;
  BrowserRootViewController *v5;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(WeakRetained, "browserControllerNextResponder:", self);
    v4 = (BrowserRootViewController *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = self->_rootViewController;
  }
  v5 = v4;

  return v5;
}

- (BrowserRootViewController)rootViewController
{
  return self->_rootViewController;
}

- (BOOL)browserViewControllerShouldFreezeWebViewUpdatesForSizeTransition:(id)a3
{
  return self->_freezeWebViewUpdatesForSizeTransition;
}

- (BOOL)favoritesAreShowingInPopover
{
  if (-[BrowserController favoritesAreEmbedded](self, "favoritesAreEmbedded"))
    return 0;
  else
    return !-[BrowserController _shouldUseNarrowLayout](self, "_shouldUseNarrowLayout");
}

- (BOOL)favoritesAreEmbedded
{
  return (unint64_t)(self->_favoritesState - 3) < 3;
}

- (void)updateShowingTabBarAnimated:(BOOL)a3
{
  unint64_t shouldShowTab;

  shouldShowTab = -[BrowserController _shouldShowTabBar](self);
  -[BrowserController _setShowingTabBar:animated:]((id *)&self->super.super.super.isa, shouldShowTab, a3);
}

- (unint64_t)_shouldShowTabBar
{
  unint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = (unint64_t)a1;
  if (a1)
  {
    if (a1[685]
      || (objc_msgSend(a1, "tabBarManager"),
          v2 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v2, "standaloneTabBar"),
          v3 = (void *)objc_claimAutoreleasedReturnValue(),
          v3,
          v2,
          v3))
    {
      objc_msgSend(*(id *)(v1 + 344), "currentTabs");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v1 = (unint64_t)objc_msgSend(v4, "count") > 1 || objc_msgSend(*(id *)(v1 + 112), "count") != 0;

    }
    else
    {
      return 0;
    }
  }
  return v1;
}

- (void)_setShowingTabBar:(char)a3 animated:
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(id *);
  void *v17;
  id *v18;
  id v19;
  id v20;
  id v21;

  if (a1)
  {
    if (objc_msgSend(a1[35], "isShowingTabBar") != (_DWORD)a2)
    {
      objc_msgSend(a1[35], "willToggleTabBar");
      objc_msgSend(a1[35], "tabBar");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController _catalogViewController](a1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "view");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v8, "layoutIfNeeded");
      objc_msgSend(a1[35], "navigationBar");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "layoutIfNeeded");
      objc_msgSend(a1[35], "setShowingTabBar:", a2);
      objc_msgSend(v6, "setHidesTitles:", a2 ^ 1);
      objc_msgSend(a1[112], "layoutIfNeeded");
      v10 = MEMORY[0x1E0DC3F10];
      v14 = MEMORY[0x1E0C809B0];
      v15 = 3221225472;
      v16 = __48__BrowserController__setShowingTabBar_animated___block_invoke;
      v17 = &unk_1E9CF32B8;
      v18 = a1;
      v11 = v6;
      v19 = v11;
      v12 = v9;
      v20 = v12;
      v13 = v8;
      v21 = v13;
      +[UIView safari_animate:withDuration:animations:](0.25, v10, a3, &v14);
      objc_msgSend(a1[35], "didToggleTabBar", v14, v15, v16, v17, v18);

    }
  }
}

- (BOOL)favoritesFieldShouldBeExpanded
{
  return -[BrowserController favoritesFieldShouldBeExpandedForFavoritesState:](self, "favoritesFieldShouldBeExpandedForFavoritesState:", self->_favoritesState);
}

- (BOOL)favoritesFieldShouldBeExpandedForFavoritesState:(int64_t)a3
{
  return ((unint64_t)a3 < 6) & (0x2Eu >> a3);
}

- (int64_t)browserViewController:(id)a3 toolbarPlacementForViewSize:(CGSize)a4
{
  double height;
  double width;
  int64_t result;
  int IsPad;

  height = a4.height;
  width = a4.width;
  if (_SFDeviceIsPad() && width >= 506.0)
    return 0;
  IsPad = _SFDeviceIsPad();
  result = 0;
  if (((width > height) & ~IsPad) == 0)
  {
    if (self)
      return _SFWidthIsCompactSizeClass();
  }
  return result;
}

- (void)catalogViewControllerDidScroll:(id)a3 animated:(BOOL)a4
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __61__BrowserController_catalogViewControllerDidScroll_animated___block_invoke;
  v4[3] = &unk_1E9CF31B0;
  v4[4] = self;
  objc_msgSend(MEMORY[0x1E0DC3F10], "sf_animate:usingDefaultTimingWithOptions:animations:completion:", a4, 50331648, v4, 0);
}

void __56__BrowserController__setNeedsSnapshotUpdateForActiveTab__block_invoke(uint64_t a1)
{
  char v2;
  uint64_t v3;
  id v4;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 169) = 0;
  if (objc_msgSend(*(id *)(a1 + 32), "shouldSnapshotActiveTab"))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "activeTabDocument");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v4, "isBlank");
    v3 = *(_QWORD *)(a1 + 32);
    if ((v2 & 1) != 0 || !*(_BYTE *)(v3 + 170))
    {
      *(_BYTE *)(v3 + 170) = 0;
      objc_msgSend(v4, "setNeedsNewTabSnapshot");
    }

  }
}

- (BOOL)shouldSnapshotActiveTab
{
  BrowserController *v2;
  id WeakRetained;

  v2 = self;
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  LOBYTE(v2) = objc_msgSend(WeakRetained, "browserControllerShouldUpdateSnapshotForActiveTab:", v2);

  return (char)v2;
}

- (UIViewController)viewControllerToPresentFrom
{
  id WeakRetained;
  BrowserRootViewController *v4;
  BrowserRootViewController *v5;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(WeakRetained, "viewControllerToPresentFromForBrowserController:", self);
    v4 = (BrowserRootViewController *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = self->_rootViewController;
  }
  v5 = v4;

  return (UIViewController *)v5;
}

- (TabDocument)tabDocumentPlayingPIPVideo
{
  return self->_tabDocumentPlayingPIPVideo;
}

- (BOOL)tabDocumentIsBackgroundPreloading:(id)a3
{
  TabDocument *v4;
  BOOL v5;

  v4 = (TabDocument *)a3;
  v5 = self->_speculativeLoadDocument == v4
    || -[BrowserController isContinuousReadingDocument:](self, "isContinuousReadingDocument:", v4);

  return v5;
}

- (BOOL)isContinuousReadingDocument:(id)a3
{
  TabDocument *v4;
  BOOL v5;

  v4 = (TabDocument *)a3;
  if (v4)
    v5 = self->_previousContinuousItemDocument == v4 || self->_nextContinuousItemDocument == v4;
  else
    v5 = 0;

  return v5;
}

- (BOOL)isSuspendedOrSuspending
{
  return self->_suspendedOrSuspending;
}

- (void)_initSubviews
{
  ContinuousReadingViewController *v3;
  ContinuousReadingViewController *continuousReadingViewController;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  -[BrowserRootViewController safari_updateApplicationBackgroundStyle](self->_rootViewController, "safari_updateApplicationBackgroundStyle");
  -[BrowserRootViewController contentContainerView](self->_rootViewController, "contentContainerView");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setNextResponder:parentFocusEnvironment:", self, self);
  v3 = objc_alloc_init(ContinuousReadingViewController);
  continuousReadingViewController = self->_continuousReadingViewController;
  self->_continuousReadingViewController = v3;

  -[ContinuousReadingViewController setDelegate:](self->_continuousReadingViewController, "setDelegate:", self);
  -[ContinuousReadingViewController view](self->_continuousReadingViewController, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setClipsToBounds:", 0);
  -[BrowserRootViewController documentAndTopBarsContainerView](self->_rootViewController, "documentAndTopBarsContainerView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!-[BrowserController _shouldUseNarrowLayout](self, "_shouldUseNarrowLayout"))
  {
    objc_msgSend(v6, "bounds");
    objc_msgSend(v5, "setFrame:");
  }
  objc_msgSend(v6, "addSubview:", v5);
  -[BrowserRootViewController dynamicBarAnimator](self->_rootViewController, "dynamicBarAnimator");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setDelegate:", self);

  -[BrowserController _updateDisableBarHiding]((uint64_t)self);
  -[BrowserController updateDynamicBarGeometry](self, "updateDynamicBarGeometry");
  self->_usesNarrowLayout = -[BrowserController _shouldUseNarrowLayout](self, "_shouldUseNarrowLayout");
  -[BrowserController updateUsesTabBar]((uint64_t)self);
  -[BrowserController _updateUnifiedBar]((id *)&self->super.super.super.isa);
  -[BrowserController _updateUsesNarrowLayout]((uint64_t)self);
  -[BrowserController _contentContainerViewFrameDidChange]((uint64_t)self);
  -[BrowserController _updateContinuousReadingViewControllerFrame]((id *)&self->super.super.super.isa);
  -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, 0);
  -[BrowserRootViewController updateUsesLockdownStatusBar](self->_rootViewController, "updateUsesLockdownStatusBar");
  -[BrowserRootViewController updateWebViewSizeAttributes](self->_rootViewController, "updateWebViewSizeAttributes");

}

- (_SFBrowserConfiguration)configuration
{
  _SFBrowserConfiguration *cachedConfiguration;
  _SFBrowserConfiguration *v4;
  _SFBrowserConfiguration *v5;

  cachedConfiguration = self->_cachedConfiguration;
  if (!cachedConfiguration)
  {
    v4 = (_SFBrowserConfiguration *)objc_msgSend(objc_alloc(MEMORY[0x1E0CD5668]), "initWithPrivateBrowsingEnabled:traitEnvironment:controlledByAutomation:", self->_privateBrowsingEnabled, self->_rootViewController, self->_controlledByAutomation);
    v5 = self->_cachedConfiguration;
    self->_cachedConfiguration = v4;

    cachedConfiguration = self->_cachedConfiguration;
  }
  return cachedConfiguration;
}

- (void)scrollViewDidScroll:(id)a3
{
  id WeakRetained;
  void *v5;
  _BOOL4 v6;
  _BOOL4 v7;
  void *v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double MaxY;
  void *v26;
  void *v27;
  double v28;
  id v29;
  CGRect v30;
  CGRect v31;

  v29 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if (!self->_isPerformingRootViewControllerSizeTransition)
    -[BrowserController updateDynamicBarGeometry](self, "updateDynamicBarGeometry");
  -[BannerController crashBanner](self->_bannerController, "crashBanner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[UIScrollView isDragging](self->_scrollView, "isDragging");
  if (v5)
    v7 = v6;
  else
    v7 = 0;
  if (v7)
  {
    -[BrowserRootViewController documentAndTopBarsContainerView](self->_rootViewController, "documentAndTopBarsContainerView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "bounds");
    objc_msgSend(v5, "convertRect:toView:", v8);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;
    -[BrowserRootViewController navigationBarFrameInCoordinateSpace:](self->_rootViewController, "navigationBarFrameInCoordinateSpace:", v8);
    v18 = v17;
    v20 = v19;
    v22 = v21;
    v24 = v23;
    v30.origin.x = v10;
    v30.origin.y = v12;
    v30.size.width = v14;
    v30.size.height = v16;
    MaxY = CGRectGetMaxY(v30);
    v31.origin.x = v18;
    v31.origin.y = v20;
    v31.size.width = v22;
    v31.size.height = v24;
    if (MaxY <= CGRectGetMinY(v31))
      -[BrowserController setShowingCrashBanner:animated:](self, "setShowingCrashBanner:animated:", 0, 0);

  }
  if (self->_scrollViewIsDragging)
  {
    if (self->_shouldShowBarsAfterDraggingDownward)
    {
      if (-[BrowserRootViewController toolbarPlacement](self->_rootViewController, "toolbarPlacement") == 1
        && objc_msgSend(v29, "_sf_isScrolledToOrPastBottom")
        && !-[BrowserController _isInContinuousMode]((uint64_t)self))
      {
        -[BrowserController showBars](self, "showBars");
      }
      self->_shouldShowBarsAfterDraggingDownward = 0;
    }
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "webViewDidScroll");

  }
  if (!-[BrowserRootViewController isInteractivelyMinimizingBars](self->_rootViewController, "isInteractivelyMinimizingBars")&& !self->_isUpdatingBarAnimatorDragOffset)
  {
    self->_isUpdatingBarAnimatorDragOffset = 1;
    -[BrowserRootViewController currentBarAnimator](self->_rootViewController, "currentBarAnimator");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "contentOffset");
    objc_msgSend(v27, "updateDraggingWithOffset:", v28);

    self->_isUpdatingBarAnimatorDragOffset = 0;
  }
  -[BrowserController _updateCurrentPageBannerViewIfNeeded]((id *)&self->super.super.super.isa);
  -[BrowserController _updateAppInfoOverlayFrame]((uint64_t)self);
  if (objc_msgSend(WeakRetained, "browserControllerShouldUpdateWebViewGeometryOnScroll:", self))
    -[BrowserController updateExposedScrollViewRect](self, "updateExposedScrollViewRect");
  objc_msgSend(WeakRetained, "browserController:scrollViewDidScroll:", self, v29);
  -[BrowserController updateScrollToTopView](self, "updateScrollToTopView");
  if (-[BrowserController _isInContinuousMode]((uint64_t)self))
  {
    -[BrowserController updateContinuousPreviewViewFrame](self, "updateContinuousPreviewViewFrame");
    -[BrowserController _updateCurrentPageBannerView]((id *)&self->super.super.super.isa);
  }
  objc_msgSend(WeakRetained, "updateTabViewPinchRecognizerForBrowserController:", self);
  -[ContinuousReadingViewController innerScrollViewDidScroll:](self->_continuousReadingViewController, "innerScrollViewDidScroll:", v29);
  -[BrowserController _updateRefreshControlHeight]((uint64_t)self);

}

- (void)updateDynamicBarGeometry
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;
  uint64_t v9;

  if (!-[BrowserRootViewController usingLoweredBar](self->_rootViewController, "usingLoweredBar"))
  {
    -[BrowserRootViewController navigationBarDesiredHeight](self->_rootViewController, "navigationBarDesiredHeight");
    v4 = v3;
    -[BrowserRootViewController dynamicBarAnimator](self->_rootViewController, "dynamicBarAnimator");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __45__BrowserController_updateDynamicBarGeometry__block_invoke;
    v7[3] = &unk_1E9CF33D0;
    v7[4] = self;
    v8 = v5;
    v9 = v4;
    v6 = v5;
    objc_msgSend(v6, "performBatchUpdates:", v7);

  }
}

- (double)_refreshControlHeight
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  CGRect v9;

  if (!a1)
    return 0.0;
  objc_msgSend(*(id *)(a1 + 280), "refreshControl");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 304), "contentOffset");
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 304), "adjustedContentInset");
    v6 = -v4 - v5;
    if (objc_msgSend(v2, "isRefreshing"))
    {
      objc_msgSend(v2, "bounds");
      v6 = v6 + CGRectGetHeight(v9);
    }
    v7 = fmax(v6, 0.0);
  }
  else
  {
    v7 = 0.0;
  }

  return v7;
}

- (void)updateScrollToTopView
{
  void *v3;
  uint64_t v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_scene);
  objc_msgSend(WeakRetained, "statusBarManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (((objc_msgSend(v3, "isStatusBarHidden") & 1) != 0 || self->_scrollingStatusBar)
    && -[BrowserController _canScrollToTopInView:]((uint64_t)self, self->_scrollView))
  {
    v4 = -[BrowserController isShowingFavorites](self, "isShowingFavorites") ^ 1;
  }
  else
  {
    v4 = 0;
  }
  -[BrowserRootViewController setNeedsScrollToTopView:](self->_rootViewController, "setNeedsScrollToTopView:", v4);

}

- (void)updateExposedScrollViewRect
{
  if ((-[_SFWebView _isInFullscreen](self->_webView, "_isInFullscreen") & 1) == 0)
  {
    -[BrowserController updateWebViewObscuredInsets]((uint64_t)self);
    -[ContinuousReadingViewController updateContinuousPreviewViewSizeAttributes](self->_continuousReadingViewController, "updateContinuousPreviewViewSizeAttributes");
  }
}

- (void)updateWebViewObscuredInsets
{
  void *v2;
  id v3;

  if (a1 && (objc_msgSend(*(id *)(a1 + 896), "_isInFullscreen") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "view");
    v3 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "setWebViewGeometryNeedsUpdate");
    if (*(_BYTE *)(a1 + 122) || *(_BYTE *)(a1 + 168))
      objc_msgSend(v3, "layoutIfNeeded");

  }
}

- (void)_updateRefreshControlHeight
{
  char v2;
  double refreshed;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 338)
      || !objc_msgSend(*(id *)(a1 + 304), "_isVerticalBouncing")
      || (v2 = objc_msgSend(*(id *)(a1 + 304), "isDragging"), refreshed = 0.0, (v2 & 1) == 0))
    {
      refreshed = -[BrowserController _refreshControlHeight](a1);
    }
    if (refreshed != *(double *)(a1 + 136))
    {
      *(double *)(a1 + 136) = refreshed;
      -[BrowserController updateWebViewObscuredInsets](a1);
    }
  }
}

- (BOOL)_isInContinuousMode
{
  void *v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  objc_msgSend(*(id *)(a1 + 88), "currentItem");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1 != 0;

  return v2;
}

- (void)_updateCurrentPageBannerViewIfNeeded
{
  void *v2;

  if (a1)
  {
    objc_msgSend(a1[11], "currentItem");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    if (v2)
      -[BrowserController _updateCurrentPageBannerView](a1);
  }
}

- (void)browserViewControllerDidChangeBarInsets:(id)a3
{
  id WeakRetained;

  -[BrowserController _updateCurrentPageBannerViewIfNeeded]((id *)&self->super.super.super.isa);
  -[BrowserController updateExposedScrollViewRect](self, "updateExposedScrollViewRect");
  -[BrowserRootViewController layOutTopBars](self->_rootViewController, "layOutTopBars");
  -[BrowserRootViewController updateWebViewSizeAttributes](self->_rootViewController, "updateWebViewSizeAttributes");
  -[BrowserController updateScrollToTopView](self, "updateScrollToTopView");
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "browserControllerLayOutCatalogView:", self);

  -[BrowserController _updateDigitalHealthViewFrame]((id *)&self->super.super.super.isa);
  -[BrowserController updateContinuousPreviewViewFrame](self, "updateContinuousPreviewViewFrame");
  -[BrowserController _updateAppInfoOverlayFrame]((uint64_t)self);
}

- (void)updateContinuousPreviewViewFrame
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  BrowserRootViewController *rootViewController;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;

  -[ContinuousReadingViewController previewView](self->_continuousReadingViewController, "previewView");
  v22 = (id)objc_claimAutoreleasedReturnValue();
  if (v22)
  {
    -[UIScrollView bounds](self->_scrollView, "bounds");
    v4 = v3;
    v6 = v5;
    v8 = v7;
    rootViewController = self->_rootViewController;
    -[UIScrollView bounds](self->_scrollView, "bounds");
    -[BrowserRootViewController sidebarObscuredInsetsForRect:inCoordinateSpace:](rootViewController, "sidebarObscuredInsetsForRect:inCoordinateSpace:", self->_scrollView);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v17 = v16;
    -[UIScrollView contentSize](self->_scrollView, "contentSize");
    v19 = v18;
    -[UIScrollView bounds](self->_scrollView, "bounds");
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    objc_msgSend(v22, "setFrame:", v4 + v13, v21, v6 - (v13 + v17), v8 - (v11 + v15));
  }

}

- (void)_updateUnifiedBar
{
  uint64_t v2;
  void *v3;

  if (a1)
  {
    if (objc_msgSend(a1[35], "usingUnifiedBar"))
    {
      v2 = objc_msgSend(a1, "tabBarDisplayMode");
      objc_msgSend(a1, "tabBarManager");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "setDisplayMode:", v2);

    }
    -[BrowserController _updateUnifiedBarBackgroundVisibility](a1);
  }
}

- (BOOL)isShowingReader
{
  void *v2;
  char v3;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isShowingReader");

  return v3;
}

- (void)reloadSidebarAnimated:(BOOL)a3
{
  _BOOL8 v3;
  id v5;
  id WeakRetained;

  v3 = a3;
  -[LibraryController sidebarViewController](self->_libraryController, "sidebarViewController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setNeedsReloadSectionControllersAnimated:", v3);

  WeakRetained = objc_loadWeakRetained((id *)&self->_tabGroupPickerViewController);
  objc_msgSend(WeakRetained, "setNeedsReloadData");

}

- (_SFBarManager)barManager
{
  return self->_barManager;
}

- (void)updateTabGroupHeading
{
  id v2;

  -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateTabGroupHeading");

}

- (void)updateTabGroupButtonsVisibility
{
  char v3;
  _BOOL8 v4;
  _BOOL4 v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _SFBarManager *barManager;
  _BOOL8 v10;
  void *v11;
  void *v12;
  id v13;
  id v14;

  +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v13, "isTabGroupButtonEnabled");

  if ((v3 & 1) != 0)
  {
    v4 = -[BrowserRootViewController isShowingSidebar](self->_rootViewController, "isShowingSidebar");
    v5 = !v4 || -[BrowserRootViewController sidebarStyle](self->_rootViewController, "sidebarStyle") != 0;
    -[BrowserRootViewController view](self->_rootViewController, "view");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v14, "_sf_hasLandscapeAspectRatio");
    v7 = (-[TabController isPrivateBrowsingEnabled](self->_tabController, "isPrivateBrowsingEnabled") & v6) == 1
      && -[BrowserController tabBarDisplayMode](self, "tabBarDisplayMode") != 2;
    v8 = -[TabController canRenameActiveTabGroup](self->_tabController, "canRenameActiveTabGroup")
      || v7
      || -[BrowserController canShowProfileInNavigationBar](self, "canShowProfileInNavigationBar");
    -[_SFBarManager setBarItem:hidden:](self->_barManager, "setBarItem:hidden:", 2, !v5 || !v8);
    barManager = self->_barManager;
    v10 = !v5 && -[BrowserRootViewController toolbarPlacement](self->_rootViewController, "toolbarPlacement") == 0;
    -[_SFBarManager setBarItem:hidden:](barManager, "setBarItem:hidden:", 3, v10);
    -[TabCollectionViewProviding tabOverview](self->_tabCollectionViewProvider, "tabOverview");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "toolbar");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v12, "setBarButton:hidden:", 0, v4);
    objc_msgSend(v12, "setBarButton:enabled:", 0, v4 ^ 1);

  }
}

- (LibraryController)libraryController
{
  return self->_libraryController;
}

- (void)_updatePrivateBrowsingAvailability:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  void *v7;
  _BOOL4 firedExtensionOpenEventForPrivateWindow;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v3 = a3;
  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "toolbar");
  v13 = (id)objc_claimAutoreleasedReturnValue();

  -[TabController tabGroupsMenuForTabGroupButton:](self->_tabController, "tabGroupsMenuForTabGroupButton:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setMenu:forBarButton:", v6, 0);

  objc_msgSend(v13, "setBarButton:enabled:", 0, 1);
  if (self->_privateBrowsingAvailable != v3)
  {
    self->_privateBrowsingAvailable = v3;
    -[TabController privateBrowsingAvailabilityDidChange](self->_tabController, "privateBrowsingAvailabilityDidChange");
    if (self->_privateBrowsingAvailable)
    {
      +[LaunchStateController sharedController](LaunchStateController, "sharedController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v7, "hasCompletedLaunch") & 1) == 0)
      {

        if (v3)
        {
LABEL_11:
          -[BrowserController reloadSidebarAnimated:](self, "reloadSidebarAnimated:", 1);
          -[BrowserRootViewController tabSwitcherViewController](self->_rootViewController, "tabSwitcherViewController");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          -[TabController activeTabGroup](self->_tabController, "activeTabGroup");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "setNeedsScrollToTabGroup:", v12);

          goto LABEL_12;
        }
LABEL_9:
        if (self->_privateBrowsingEnabled)
          -[TabController selectLocalTabGroup](self->_tabController, "selectLocalTabGroup");
        goto LABEL_11;
      }
      firedExtensionOpenEventForPrivateWindow = self->_firedExtensionOpenEventForPrivateWindow;

      if (!firedExtensionOpenEventForPrivateWindow)
      {
        +[Application sharedApplication](Application, "sharedApplication");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "defaultWebExtensionsController");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "didOpenWindow:", self->_privateExtensionWindow);

        self->_firedExtensionOpenEventForPrivateWindow = 1;
      }
    }
    if (v3)
      goto LABEL_11;
    goto LABEL_9;
  }
LABEL_12:

}

- (void)_updateSceneTitle
{
  id WeakRetained;
  void *v3;
  id v4;
  _QWORD v5[5];

  if (a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 864));
    if (WeakRetained)
    {
      v4 = WeakRetained;
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 3221225472;
      v5[2] = __38__BrowserController__updateSceneTitle__block_invoke;
      v5[3] = &unk_1E9CF3C08;
      v5[4] = a1;
      __38__BrowserController__updateSceneTitle__block_invoke((uint64_t)v5);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setTitle:", v3);

      WeakRetained = v4;
    }

  }
}

id __38__BrowserController__updateSceneTitle__block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 695))
  {
    objc_msgSend(*(id *)(v1 + 344), "activeTabDocument");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "URL");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "safari_highLevelDomain");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (!v6)
    {
      objc_msgSend(v4, "title");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v7, "safari_stringByAddingSoftBreaksBeforePeriods");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v6)

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "currentTabs");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "count");

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "activeTabGroup");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "activeProfile");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "title");
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(void **)(v14 + 624);
    *(_QWORD *)(v14 + 624) = v13;

    v16 = v10 - 1;
    if (objc_msgSend(*(id *)(a1 + 32), "hasMultipleProfiles") && (objc_msgSend(v11, "isNamed") & 1) == 0)
    {
      if (v10 == 1)
      {
        v30 = (void *)MEMORY[0x1E0CB3940];
        _WBSLocalizedString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "localizedStringWithFormat:", v17, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 624), v8);
        v26 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (v10 == 2)
        {
          v25 = (void *)MEMORY[0x1E0CB3940];
          _WBSLocalizedString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "localizedStringWithFormat:", v17, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 624), v8);
        }
        else
        {
          v31 = (void *)MEMORY[0x1E0CB3940];
          _WBSLocalizedString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "localizedStringWithFormat:", v17, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 624), v8, v16);
        }
        v26 = objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      if (objc_msgSend(v11, "isNamed"))
      {
        objc_msgSend(v11, "displayTitle");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = *(_QWORD *)(a1 + 32);
        v19 = *(void **)(v18 + 624);
        *(_QWORD *)(v18 + 624) = 0;

        if (v10 == 1)
        {
          v29 = (void *)MEMORY[0x1E0CB3940];
          _WBSLocalizedString();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "localizedStringWithFormat:", v21, v17, v8);
          v22 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v20 = (void *)MEMORY[0x1E0CB3940];
          _WBSLocalizedString();
          if (v10 == 2)
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "localizedStringWithFormat:", v21, v17, v8);
          }
          else
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "localizedStringWithFormat:", v21, v17, v8, v16);
          }
          v22 = objc_claimAutoreleasedReturnValue();
        }
        v2 = (id)v22;

        goto LABEL_29;
      }
      v23 = *(_QWORD *)(a1 + 32);
      v24 = *(void **)(v23 + 624);
      *(_QWORD *)(v23 + 624) = 0;

      if (v10 == 2)
      {
        v27 = (void *)MEMORY[0x1E0CB3940];
        _WBSLocalizedString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "localizedStringWithFormat:", v17, v8);
        v26 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (v10 == 1)
        {
          v2 = v8;
LABEL_30:

          return v2;
        }
        v28 = (void *)MEMORY[0x1E0CB3940];
        _WBSLocalizedString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "localizedStringWithFormat:", v17, v8, v10 - 1);
        v26 = objc_claimAutoreleasedReturnValue();
      }
    }
    v2 = (id)v26;
LABEL_29:

    goto LABEL_30;
  }
  _WBSLocalizedString();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  return v2;
}

- (void)loadBackgroundImageIfNeededForIdentifier:(id)a3
{
  void *v3;
  void *v4;
  id v5;

  v5 = a3;
  objc_msgSend(MEMORY[0x1E0D8ACA0], "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isCorrectBackgroundImageLoadedForIdentifier:", v5) & 1) == 0)
    objc_msgSend(v3, "loadImageFromDiskForIdentifier:", v5);
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "postNotificationName:object:", *MEMORY[0x1E0D8B5C8], v3);

}

- (void)clearCachedTabCompletionData
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  +[Application sharedApplication](Application, "sharedApplication");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "clearCachedTabCompletionData");

  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  -[BrowserController browserWindowController](self, "browserWindowController", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "browserControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v5);
        -[BrowserController _catalogViewController](*(id **)(*((_QWORD *)&v10 + 1) + 8 * v8));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "clearCachedTabCompletionData");

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

}

- (BrowserWindowController)browserWindowController
{
  return (BrowserWindowController *)objc_loadWeakRetained((id *)&self->_browserWindowController);
}

- (WBSCloudTabDeviceProvider)cloudTabStore
{
  return -[TabController profileCloudTabStore](self->_tabController, "profileCloudTabStore");
}

- (BOOL)canShowProfileInTabOverviewToolbar
{
  _BOOL4 v3;

  v3 = -[BrowserController hasMultipleProfiles](self, "hasMultipleProfiles");
  if (v3)
  {
    if ((-[BrowserController _shouldShowTabGroupSwitcher]((uint64_t)self) & 1) != 0)
      LOBYTE(v3) = 1;
    else
      LOBYTE(v3) = !-[BrowserController isPrivateBrowsingEnabled](self, "isPrivateBrowsingEnabled");
  }
  return v3;
}

- (BOOL)canShowProfileInNavigationBar
{
  _BOOL4 v3;

  v3 = -[BrowserController hasMultipleProfiles](self, "hasMultipleProfiles");
  if (v3)
    LOBYTE(v3) = !-[BrowserController isPrivateBrowsingEnabled](self, "isPrivateBrowsingEnabled");
  return v3;
}

- (BOOL)hasMultipleProfiles
{
  void *v3;
  BOOL v4;

  if (!objc_msgSend(MEMORY[0x1E0D89BE8], "isSafariProfilesEnabled"))
    return 0;
  -[WBTabGroupManager profiles](self->_tabGroupManager, "profiles");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (unint64_t)objc_msgSend(v3, "count") > 1;

  return v4;
}

- (BOOL)canShowSidebar
{
  return (unint64_t)(-[BrowserController _bookmarksPresentationStyle](self, "_bookmarksPresentationStyle") - 1) < 2;
}

- (int64_t)bookmarksPresentationStyleForViewOfSize:(CGSize)a3
{
  int64_t result;

  result = 0;
  if (a3.width > *MEMORY[0x1E0D4F2B8] && a3.height >= 441.0)
  {
    if (a3.width <= 1366.0)
    {
      if (a3.width / a3.height <= 1.3)
        return 1;
      else
        return 2;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

- (int64_t)_bookmarksPresentationStyle
{
  return -[SidebarUIProxy bookmarksPresentationStyle](self->_sidebarUIProxy, "bookmarksPresentationStyle");
}

- (void)setNeedsSnapshotUpdateForActiveTabIfTabIsBlank
{
  BOOL v2;

  v2 = self->_needsSnapshotUpdateForBlankTabs || !self->_needsSnapshotUpdateForActiveTab;
  self->_needsSnapshotUpdateForBlankTabs = v2;
  -[BrowserController _setNeedsSnapshotUpdateForActiveTab]((uint64_t)self);
}

- (void)_setNeedsSnapshotUpdateForActiveTab
{
  _QWORD block[5];

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 169))
    {
      *(_BYTE *)(a1 + 169) = 1;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __56__BrowserController__setNeedsSnapshotUpdateForActiveTab__block_invoke;
      block[3] = &unk_1E9CF31B0;
      block[4] = a1;
      dispatch_async(MEMORY[0x1E0C80D38], block);
    }
  }
}

void __76__BrowserController_updatePrivateBrowsingAvailabilityWithCompletionHandler___block_invoke_2(uint64_t a1)
{
  id WeakRetained;
  unsigned __int8 *v3;
  uint64_t v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (unsigned __int8 *)(a1 + 48);
    objc_msgSend(WeakRetained, "_updatePrivateBrowsingAvailability:", *(unsigned __int8 *)(a1 + 48));
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      goto LABEL_7;
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v3 = (unsigned __int8 *)(a1 + 48);
LABEL_6:
    (*(void (**)(uint64_t, _QWORD))(v4 + 16))(v4, *v3);
  }
LABEL_7:

}

- (id)makeTabOverview
{
  id WeakRetained;
  TabOverview *v4;
  TabOverview *v5;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(WeakRetained, "createTabOverviewForBrowserController:", self);
    v4 = (TabOverview *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = -[TabOverview initWithFrame:]([TabOverview alloc], "initWithFrame:", 0.0, 0.0, 100.0, 100.0);
  }
  v5 = v4;

  return v5;
}

- (id)catalogViewControllerStartPageVisualStyleProvider:(id)a3
{
  id WeakRetained;
  void *v5;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(WeakRetained, "browserControllerStartPageVisualStyleProvider:", self);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (BOOL)isControlledByAutomation
{
  return self->_controlledByAutomation;
}

- (WBTabGroupManager)tabGroupManager
{
  return self->_tabGroupManager;
}

- (LoadProgressObserver)loadProgressObserver
{
  return (LoadProgressObserver *)self->_spinnerController;
}

- (WKPreferences)wkPreferences
{
  return self->_wkPreferences;
}

- (void)dynamicBarAnimatorOutputsDidChange:(id)a3
{
  -[BrowserRootViewController dynamicBarAnimatorOutputsDidChange:](self->_rootViewController, "dynamicBarAnimatorOutputsDidChange:", a3);
}

- (void)browserViewController:(id)a3 didCreateToolbar:(id)a4
{
  -[_SFBarManager registerToolbar:withLayout:persona:](self->_barManager, "registerToolbar:withLayout:persona:", a4, 2, 0);
}

- (void)catalogViewControllerDidAppear:(id)a3
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserControllerStartPageUpdatePolicyDidChange:", self);

}

- (void)sceneDidBecomeActive:(id)a3
{
  id WeakRetained;
  id v5;

  v5 = a3;
  self->_suspendedOrSuspending = 0;
  if (!self->_canPerformPostLaunchActions)
  {
    self->_canPerformPostLaunchActions = 1;
    WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(WeakRetained, "browserControllerStartPageUpdatePolicyDidChange:", self);

  }
  -[BrowserController didBecomeActive](self, "didBecomeActive");

}

- (void)sceneWillEnterForeground:(id)a3
{
  id v4;
  id WeakRetained;

  -[BrowserController willEnterForeground](self, "willEnterForeground", a3);
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateUserActivity");

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "browserControllerDidEndObfuscating:", self);

}

- (void)willEnterForeground
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  self->_backgrounded = 0;
  -[BrowserController _restoreDigitalHealthFunctionalityAfterAppTransition]((id *)&self->super.super.super.isa);
  +[MediaCaptureStatusBarManager sharedManager](MediaCaptureStatusBarManager, "sharedManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "browserControllerWillEnterForeground:", self);

  -[TabController updateFocusProfileEnteringForeground](self->_tabController, "updateFocusProfileEnteringForeground");
  -[TabController updateFocusedTabGroupEnteringForeground](self->_tabController, "updateFocusedTabGroupEnteringForeground");
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  +[Application sharedApplication](Application, "sharedApplication", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "allWebExtensionsControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * v8);
        -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "setViewControllerToPresentDialogsFrom:", v10);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

}

- (BOOL)tabDocumentCanBecomeCurrentUserActivity:(id)a3
{
  id v4;
  int v5;

  v4 = a3;
  if (-[BrowserController sf_inResponderChain](self, "sf_inResponderChain")
    && (objc_msgSend(v4, "isControlledByAutomation") & 1) == 0)
  {
    v5 = objc_msgSend(v4, "isPrivateBrowsingEnabled") ^ 1;
  }
  else
  {
    LOBYTE(v5) = 0;
  }

  return v5;
}

void __51__BrowserController__updateButtonsAnimatingTabBar___block_invoke(uint64_t a1)
{
  void *v1;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;

  objc_msgSend(*(id *)(a1 + 32), "webExtensionsController");
  v17 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "extensions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 808), "setBarItem:enabled:", 0, objc_msgSend(*(id *)(a1 + 32), "canGoBack"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 808), "setBarItem:enabled:", 1, objc_msgSend(*(id *)(a1 + 32), "canGoForward"));
  v5 = *(void **)(*(_QWORD *)(a1 + 40) + 808);
  objc_msgSend(*(id *)(a1 + 32), "urlForSharing");
  v18 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setBarItem:enabled:", 5, (v18 | v4) != 0);

  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(void **)(v6 + 808);
  objc_msgSend(v7, "setBarItem:enabled:", 6, -[BrowserController _shareButtonEnabled](v6));
  v8 = *(void **)(*(_QWORD *)(a1 + 40) + 808);
  objc_msgSend(MEMORY[0x1E0D4EED8], "sharedManager");
  v19 = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v19, "availability");
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "URL");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_msgSend(*(id *)(a1 + 32), "navigationBarItem");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v1, "showsSearchIndicator");
      v11 = 1;
    }
    else
    {
      v11 = 0;
      v10 = 1;
    }
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  objc_msgSend(v8, "setBarItem:enabled:", 4, v10);
  if (v11)

  if (v9)
  v12 = *(void **)(*(_QWORD *)(a1 + 40) + 808);
  objc_msgSend(*(id *)(a1 + 32), "navigationBarItem");
  v20 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setBarItem:selected:", 5, objc_msgSend(v20, "menuButtonSelected"));

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 808), "setContentMode:", -[BrowserController _currentBarContentMode](*(_QWORD *)(a1 + 40)));
  v13 = *(void **)(a1 + 40);
  if (v13)
  {
    if ((objc_msgSend(*(id *)(a1 + 40), "favoritesFieldShouldBeExpanded") & 1) != 0)
      v14 = 2;
    else
      v14 = objc_msgSend(v13, "isShowingStartPage");
  }
  else
  {
    v14 = 0;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 808), "setState:", v14);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 344), "activeTabDocument");
  v21 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "navigationBarItem");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "overlayConfiguration");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 808), "setAllBarItemsAreDisabled:", v16 != 0);

}

- (BOOL)isShowingStartPage
{
  void *v3;
  char v4;
  BOOL v5;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[BrowserController _isStartPageOverriddenByExtensionInTabDocument:]((uint64_t)self, v3))
  {
    if (!objc_msgSend(v3, "isBlank"))
    {
      v5 = 0;
      goto LABEL_7;
    }
    v4 = objc_msgSend(v3, "isShowingStartPageOverriddenByExtension");
  }
  else
  {
    v4 = objc_msgSend(v3, "isBlank");
  }
  v5 = v4;
LABEL_7:

  return v5;
}

- (uint64_t)_isStartPageOverriddenByExtensionInTabDocument:(uint64_t)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  uint64_t v9;

  v3 = a2;
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "webExtensionsController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "isPrivateBrowsingEnabled")
      && (objc_msgSend(v5, "tabOverridePreferencesManager"),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          v7 = objc_msgSend(v6, "shouldNewTabPageOverriddenByAnEnabledExtensionApplyInPrivateBrowsingWithUserDefaults:", v4), v6, (v7 & 1) == 0))
    {
      v9 = 0;
    }
    else
    {
      objc_msgSend(v5, "tabOverridePreferencesManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isNewTabPageOverriddenByAnEnabledExtensionInUserDefaults:", v4);

      objc_msgSend(v4, "setBool:forKey:", v9 ^ 1, *MEMORY[0x1E0D4F1C0]);
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (uint64_t)_shareButtonEnabled
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v2, "isBlank"))
    {
      +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v3, "areSharedTabGroupsEnabled"))
      {
        objc_msgSend(*(id *)(v1 + 344), "activeTabGroup");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v1 = objc_msgSend(v4, "isNamed");

      }
      else
      {
        v1 = 0;
      }
    }
    else
    {
      objc_msgSend(v2, "urlForSharing");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v1 = v3 != 0;
    }

  }
  return v1;
}

- (uint64_t)_currentBarContentMode
{
  unsigned __int8 *v1;
  void *v2;
  int v3;
  int IsPad;
  BOOL v5;
  uint64_t v6;

  if (result)
  {
    v1 = (unsigned __int8 *)result;
    objc_msgSend(MEMORY[0x1E0C99EA0], "safari_browserDefaults");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "BOOLForKey:", *MEMORY[0x1E0D4F128]);

    IsPad = _SFDeviceIsPad();
    if (v3)
    {
      if ((IsPad & 1) != 0)
        return v1[684];
      v5 = objc_msgSend(v1, "usesNarrowLayout") == 0;
      v6 = 2;
    }
    else
    {
      if (!IsPad)
        return 6;
      v5 = v1[684] == 0;
      v6 = 4;
    }
    if (v5)
      return v6;
    else
      return v6 + 1;
  }
  return result;
}

- (BOOL)usesNarrowLayout
{
  return self->_usesNarrowLayout;
}

- (BOOL)shouldIncreaseTopSpacingForStartPageController:(id)a3
{
  id WeakRetained;
  char v5;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v5 = objc_msgSend(WeakRetained, "browserControllerShouldIncreaseTopPaddingForStartPage:", self);
  else
    v5 = 0;

  return v5;
}

- (BOOL)canPerformPostLaunchActions
{
  return self->_canPerformPostLaunchActions;
}

- (BOOL)catalogViewControllerShouldUsePopoverForCompletions:(id)a3
{
  void *v3;
  void *v4;
  BOOL v5;

  -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "traitCollection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "horizontalSizeClass") != 1;

  return v5;
}

- (void)barManager:(id)a3 willRegisterBarWithToken:(id)a4
{
  id v5;
  UserNavigationDropInteraction *v6;
  UserNavigationDropInteraction *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[4];
  id v22;
  id location;
  _BYTE v24[128];
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v5 = a4;
  objc_initWeak(&location, self);
  v6 = [UserNavigationDropInteraction alloc];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __57__BrowserController_barManager_willRegisterBarWithToken___block_invoke;
  v21[3] = &unk_1E9CF3D18;
  objc_copyWeak(&v22, &location);
  v7 = -[UserNavigationDropInteraction initWithOpensNewTab:tabOrder:navigationHandler:](v6, "initWithOpensNewTab:tabOrder:navigationHandler:", 1, 0, v21);
  v25[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_destroyWeak(&v22);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v5, "UIBarButtonItemForItem:", 3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setSpringLoaded:", 1);

    objc_msgSend(v5, "UIBarButtonItemForItem:", 7);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "_setInteractions:", v8);
LABEL_11:

    goto LABEL_12;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v5, "viewForBarItem:", 3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setSpringLoaded:", 1);

    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v10 = v8;
    v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v24, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v18;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v18 != v13)
            objc_enumerationMutation(v10);
          v15 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v14);
          objc_msgSend(v5, "viewForBarItem:", 7, (_QWORD)v17);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "addInteraction:", v15);

          ++v14;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v24, 16);
      }
      while (v12);
    }
    goto LABEL_11;
  }
LABEL_12:

  objc_destroyWeak(&location);
}

uint64_t __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

- (BrowserController)initWithUUID:(id)a3 sceneID:(id)a4 browserWindowController:(id)a5 tabGroupManager:(id)a6 controlledByAutomation:(BOOL)a7
{
  id v13;
  id v14;
  BrowserController *v15;
  BannerController *v16;
  BannerController *bannerController;
  StatusBarSpinnerController *v18;
  StatusBarSpinnerController *spinnerController;
  UserActivityController *v20;
  UserActivityController *userActivityController;
  ApplicationShortcutController *v22;
  ApplicationShortcutController *shortcutController;
  WKPreferences *v24;
  WKPreferences *wkPreferences;
  void *v26;
  void *v27;
  void *v28;
  double v29;
  double v30;
  void *v31;
  double v32;
  double v33;
  BrowserRootViewController *v34;
  BrowserRootViewController *rootViewController;
  void *v36;
  void *v37;
  TabController *v38;
  TabController *tabController;
  uint64_t v40;
  TabCollectionViewProviding *tabCollectionViewProvider;
  void *v42;
  void *v43;
  void *v44;
  _SFBarManager *v45;
  _SFBarManager *barManager;
  void *v47;
  _SFBarManager *v48;
  void *v49;
  void *v50;
  _SFBarManager *v51;
  void *v52;
  void *v53;
  _SFBarManager *v54;
  void *v55;
  _SFBarManager *v56;
  void *v57;
  void *v58;
  _SFBarManager *v59;
  void *v60;
  _SFBarManager *v61;
  void *v62;
  void *v63;
  LibraryConfiguration *v64;
  void *v65;
  void *v66;
  LibraryController *v67;
  LibraryController *libraryController;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  NSMutableArray *queuedToastViewControllers;
  uint64_t v76;
  NSMapTable *cachedParticipantLists;
  void *v78;
  void *v79;
  id v80;
  void *v81;
  void *v82;
  WebExtensionWindow *v83;
  WebExtensionWindow *normalExtensionWindow;
  WebExtensionWindow *v85;
  WebExtensionWindow *privateExtensionWindow;
  id v87;
  uint64_t v88;
  WKWebpagePreferences *defaultWebpagePreferences;
  BrowserController *v90;
  id v92;
  id v93;
  id v94;
  void *v95;
  id obj;
  _QWORD v97[4];
  id v98;
  id v99;
  id v100;
  id from;
  id v102;
  _QWORD v103[4];
  id v104;
  _QWORD v105[4];
  id v106;
  _QWORD v107[4];
  id v108;
  id location;
  objc_super v110;

  v13 = a3;
  v14 = a4;
  obj = a5;
  v94 = a6;
  v110.receiver = self;
  v110.super_class = (Class)BrowserController;
  v15 = -[BrowserController init](&v110, sel_init);
  if (v15)
  {
    objc_initWeak(&location, v15);
    objc_storeWeak((id *)&v15->_browserWindowController, obj);
    objc_storeStrong((id *)&v15->_UUID, a3);
    v15->_controlledByAutomation = a7;
    v92 = v14;
    v93 = v13;
    objc_msgSend(obj, "uiDelegateForBrowserController:", v15);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak((id *)&v15->_uiDelegate, v95);
    v16 = objc_alloc_init(BannerController);
    bannerController = v15->_bannerController;
    v15->_bannerController = v16;

    v18 = objc_alloc_init(StatusBarSpinnerController);
    spinnerController = v15->_spinnerController;
    v15->_spinnerController = v18;

    v20 = -[UserActivityController initWithBrowserController:]([UserActivityController alloc], "initWithBrowserController:", v15);
    userActivityController = v15->_userActivityController;
    v15->_userActivityController = v20;

    v22 = objc_alloc_init(ApplicationShortcutController);
    shortcutController = v15->_shortcutController;
    v15->_shortcutController = v22;

    -[ApplicationShortcutController setBrowserController:](v15->_shortcutController, "setBrowserController:", v15);
    v15->_suspendedOrSuspending = 1;
    objc_storeStrong((id *)&v15->_sceneID, a4);
    v24 = (WKPreferences *)objc_alloc_init(MEMORY[0x1E0CEF5F0]);
    wkPreferences = v15->_wkPreferences;
    v15->_wkPreferences = v24;

    -[WKPreferences _setTelephoneNumberDetectionIsEnabled:](v15->_wkPreferences, "_setTelephoneNumberDetectionIsEnabled:", 1);
    -[WKPreferences _setShouldSuppressKeyboardInputDuringProvisionalNavigation:](v15->_wkPreferences, "_setShouldSuppressKeyboardInputDuringProvisionalNavigation:", 1);
    -[WKPreferences _setDiagnosticLoggingEnabled:](v15->_wkPreferences, "_setDiagnosticLoggingEnabled:", 1);
    -[WKPreferences _setShouldAllowUserInstalledFonts:](v15->_wkPreferences, "_setShouldAllowUserInstalledFonts:", 0);
    -[WKPreferences _setShouldIgnoreMetaViewport:](v15->_wkPreferences, "_setShouldIgnoreMetaViewport:", _SFDeviceSupportsDesktopSitesByDefault());
    -[WKPreferences setShouldPrintBackgrounds:](v15->_wkPreferences, "setShouldPrintBackgrounds:", 1);
    -[WKPreferences sf_applySafariStorageBlockingPolicy](v15->_wkPreferences, "sf_applySafariStorageBlockingPolicy");
    -[BrowserController updateSpeculativeLoadingPreferences](v15, "updateSpeculativeLoadingPreferences");
    objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[WKPreferences _setNeedsSiteSpecificQuirks:](v15->_wkPreferences, "_setNeedsSiteSpecificQuirks:", objc_msgSend(v26, "BOOLForKey:", *MEMORY[0x1E0D4F6A0]));

    -[WKPreferences _setMediaDevicesEnabled:](v15->_wkPreferences, "_setMediaDevicesEnabled:", 1);
    objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[WKPreferences _setMediaSourceEnabled:](v15->_wkPreferences, "_setMediaSourceEnabled:", objc_msgSend(v27, "BOOLForKey:", *MEMORY[0x1E0D4F580]));

    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "doubleForKey:", *MEMORY[0x1E0D4F568]);
      v30 = v29;

      if (v30 != 0.0)
        -[WKPreferences _setManagedMediaSourceLowThreshold:](v15->_wkPreferences, "_setManagedMediaSourceLowThreshold:", v30);
      objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "doubleForKey:", *MEMORY[0x1E0D4F560]);
      v33 = v32;

      if (v33 != 0.0)
        -[WKPreferences _setManagedMediaSourceHighThreshold:](v15->_wkPreferences, "_setManagedMediaSourceHighThreshold:", v33);
    }
    -[WKPreferences setElementFullscreenEnabled:](v15->_wkPreferences, "setElementFullscreenEnabled:", _SFDeviceSupportsWebKitFullscreenAPI());
    if ((objc_opt_respondsToSelector() & 1) != 0)
      -[WKPreferences _setTextExtractionEnabled:](v15->_wkPreferences, "_setTextExtractionEnabled:", objc_msgSend(MEMORY[0x1E0D89BE8], "isWebKitTextExtractionEnabled"));
    -[BrowserController _updateMediaCaptureConfiguration]((uint64_t)v15);
    v15->_canFocusNavigationBarURL = 1;
    v34 = -[BrowserRootViewController initWithBrowserController:]([BrowserRootViewController alloc], "initWithBrowserController:", v15);
    rootViewController = v15->_rootViewController;
    v15->_rootViewController = v34;

    -[BrowserRootViewController setDelegate:](v15->_rootViewController, "setDelegate:", v15);
    objc_msgSend(v95, "browserController:delegateForBannerController:", v15, v15->_bannerController);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[BannerController setDelegate:](v15->_bannerController, "setDelegate:", v36);

    objc_msgSend(v95, "sidebarUIProxyForBrowserController:", v15);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController _setSidebarUIProxy:]((uint64_t)v15, v37);

    objc_storeStrong((id *)&v15->_tabGroupManager, a6);
    v38 = -[TabController initWithBrowserController:]([TabController alloc], "initWithBrowserController:", v15);
    tabController = v15->_tabController;
    v15->_tabController = v38;

    -[TabController tabCollectionViewProvider](v15->_tabController, "tabCollectionViewProvider");
    v40 = objc_claimAutoreleasedReturnValue();
    tabCollectionViewProvider = v15->_tabCollectionViewProvider;
    v15->_tabCollectionViewProvider = (TabCollectionViewProviding *)v40;

    -[TabCollectionViewProviding setSnapshotsEnabled:](v15->_tabCollectionViewProvider, "setSnapshotsEnabled:", 0);
    -[TabController addDocumentObserver:](v15->_tabController, "addDocumentObserver:", v15);
    objc_msgSend(MEMORY[0x1E0D4EF30], "settings");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController UUID](v15, "UUID");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    -[TabController setPrivateBrowsingEnabled:](v15->_tabController, "setPrivateBrowsingEnabled:", objc_msgSend(v42, "privateBrowsingEnabledForWindowWithUUID:", v43));

    objc_msgSend(obj, "pinnedTabsManager");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    -[TabController setPinnedTabsManager:](v15->_tabController, "setPinnedTabsManager:", v44);

    v45 = (_SFBarManager *)objc_alloc_init(MEMORY[0x1E0CD5658]);
    barManager = v15->_barManager;
    v15->_barManager = v45;

    -[_SFBarManager setDelegate:](v15->_barManager, "setDelegate:", v15);
    objc_msgSend(MEMORY[0x1E0CD56A8], "sharedManager");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "totalProgress");
    -[_SFBarManager setDownloadsItemProgress:](v15->_barManager, "setDownloadsItemProgress:");

    v48 = v15->_barManager;
    v49 = (void *)MEMORY[0x1E0DC39D0];
    v107[0] = MEMORY[0x1E0C809B0];
    v107[1] = 3221225472;
    v107[2] = __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke;
    v107[3] = &unk_1E9CF39F0;
    objc_copyWeak(&v108, &location);
    objc_msgSend(v49, "safari_menuWithTitle:image:identifier:options:uncachedChildrenProvider:", &stru_1E9CFDBB0, 0, 0, 8, v107);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    -[_SFBarManager setBarItem:menu:](v48, "setBarItem:menu:", 0, v50);

    v51 = v15->_barManager;
    v52 = (void *)MEMORY[0x1E0DC39D0];
    v105[0] = MEMORY[0x1E0C809B0];
    v105[1] = 3221225472;
    v105[2] = __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_2;
    v105[3] = &unk_1E9CF39F0;
    objc_copyWeak(&v106, &location);
    objc_msgSend(v52, "safari_menuWithTitle:image:identifier:options:uncachedChildrenProvider:", &stru_1E9CFDBB0, 0, 0, 8, v105);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    -[_SFBarManager setBarItem:menu:](v51, "setBarItem:menu:", 1, v53);

    v54 = v15->_barManager;
    objc_msgSend(MEMORY[0x1E0DC39D0], "sf_bookmarkMenu");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    -[_SFBarManager setBarItem:menu:](v54, "setBarItem:menu:", 3, v55);

    v56 = v15->_barManager;
    v57 = (void *)MEMORY[0x1E0DC39D0];
    v103[0] = MEMORY[0x1E0C809B0];
    v103[1] = 3221225472;
    v103[2] = __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_3;
    v103[3] = &unk_1E9CF39F0;
    objc_copyWeak(&v104, &location);
    objc_msgSend(v57, "safari_menuWithTitle:uncachedChildrenProvider:", CFSTR("Debug (Internal Only)"), v103);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    -[_SFBarManager setBarItem:menu:](v56, "setBarItem:menu:", 6, v58);

    -[BrowserController _updateAddTabMenuProvider](v15);
    -[BrowserController _updateBookmarksMenuProvider]((uint64_t)v15);
    v59 = v15->_barManager;
    -[TabController tabExposeMenu](v15->_tabController, "tabExposeMenu");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    -[_SFBarManager setBarItem:menu:](v59, "setBarItem:menu:", 8, v60);

    v61 = v15->_barManager;
    -[TabController tabGroupsMenuForTabGroupButton:](v15->_tabController, "tabGroupsMenuForTabGroupButton:", 1);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    -[_SFBarManager setBarItem:menu:](v61, "setBarItem:menu:", 2, v62);

    -[_SFBarManager setBarItem:hidden:](v15->_barManager, "setBarItem:hidden:", 11, 1);
    -[BrowserController tabBarManager](v15, "tabBarManager");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "addObserver:", v15);
    -[TabCollectionViewProviding setTabBarManager:](v15->_tabCollectionViewProvider, "setTabBarManager:", v63);
    v64 = objc_alloc_init(LibraryConfiguration);
    -[LibraryConfiguration setNavigationIntentHandler:](v64, "setNavigationIntentHandler:", v15);
    -[LibraryConfiguration setLinkPreviewProvider:](v64, "setLinkPreviewProvider:", v15);
    -[LibraryConfiguration setTabGroupProvider:](v64, "setTabGroupProvider:", v15->_tabController);
    -[LibraryConfiguration setDownloadOpenHandler:](v64, "setDownloadOpenHandler:", v15);
    -[LibraryConfiguration setLibraryItemOpenHandler:](v64, "setLibraryItemOpenHandler:", v15);
    -[LibraryConfiguration setBookmarksNavigationControllerDelegate:](v64, "setBookmarksNavigationControllerDelegate:", v15);
    objc_msgSend(obj, "pinnedTabsManager");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    -[LibraryConfiguration setPinnedTabsManager:](v64, "setPinnedTabsManager:", v65);

    -[TabCollectionViewProviding iconPool](v15->_tabCollectionViewProvider, "iconPool");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    -[LibraryConfiguration setTabIconPool:](v64, "setTabIconPool:", v66);

    v67 = -[LibraryController initWithConfiguration:]([LibraryController alloc], "initWithConfiguration:", v64);
    libraryController = v15->_libraryController;
    v15->_libraryController = v67;

    -[LibraryController setSidebarUIProxy:](v15->_libraryController, "setSidebarUIProxy:", v15->_sidebarUIProxy);
    -[BrowserController _updateConfiguration]((uint64_t)v15);
    objc_msgSend(MEMORY[0x1E0CB35B0], "defaultCenter");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v69, "addObserver:selector:name:object:", v15, sel__perSitePreferencesDidChange_, *MEMORY[0x1E0D4F638], 0);

    objc_msgSend(MEMORY[0x1E0CB35B0], "defaultCenter");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v70, "addObserver:selector:name:object:", v15, sel__perSitePreferencesDidChangeRemotely_, *MEMORY[0x1E0D8B3A0], 0);

    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v71, "addObserver:selector:name:object:", v15, sel__contentBlockersPerSitePreferenceDidChange_, *MEMORY[0x1E0D8B288], 0);
    objc_msgSend(v71, "addObserver:selector:name:object:", v15, sel__automaticPasswordInputViewNotification_, *MEMORY[0x1E0CD5848], 0);
    objc_msgSend(v71, "addObserver:selector:name:object:", v15, sel__automaticPasswordInputViewAutoFillContextProviderRequiredNotification_, *MEMORY[0x1E0CD5840], 0);
    objc_msgSend(v71, "addObserver:selector:name:object:", v15, sel__defaultSearchEngineDidChange_, *MEMORY[0x1E0CD5928], 0);
    objc_msgSend(v71, "addObserver:selector:name:object:", v15, sel__trialABGroupIdentifierDidChange_, *MEMORY[0x1E0D89FD0], 0);
    objc_msgSend(v71, "addObserver:selector:name:object:", v15, sel__didDismissManageExtensionsViewController_, *MEMORY[0x1E0D4F188], 0);
    objc_msgSend(v71, "addObserver:selector:name:object:", v15, sel__perSiteLockdownModePreferenceDidChange_, *MEMORY[0x1E0D8B290], 0);
    objc_msgSend(v71, "addObserver:selector:name:object:", v15, sel__voiceSearchAvailabilityDidChange_, *MEMORY[0x1E0D4F360], 0);
    objc_msgSend(v71, "addObserver:selector:name:object:", v15, sel__profileWallpaperDidChange_, *MEMORY[0x1E0D8B2D0], 0);
    objc_msgSend(MEMORY[0x1E0CB35B0], "defaultCenter");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v72, "addObserver:selector:name:object:", v15, sel__backgroundImageFileModifiedRemotely_, *MEMORY[0x1E0DCCBB8], 0);

    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v73, "addObserver:selector:name:object:", v15, sel__backgroundImageNeedsCloudKitUpdate_, *MEMORY[0x1E0D8B5E0], 0);

    objc_msgSend(v71, "addObserver:selector:name:object:", v15, sel__beganSharingTabGroup_, *MEMORY[0x1E0D4F290], 0);
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v74 = objc_claimAutoreleasedReturnValue();
    queuedToastViewControllers = v15->_queuedToastViewControllers;
    v15->_queuedToastViewControllers = (NSMutableArray *)v74;

    objc_msgSend(MEMORY[0x1E0CB3748], "weakToStrongObjectsMapTable");
    v76 = objc_claimAutoreleasedReturnValue();
    cachedParticipantLists = v15->_cachedParticipantLists;
    v15->_cachedParticipantLists = (NSMapTable *)v76;

    +[Application sharedApplication](Application, "sharedApplication");
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v71, "addObserver:selector:name:object:", v15, sel__lockedPrivateBrowsingStateDidChange, CFSTR("lockedPrivateBrowsingStateDidChangeNotification"), v78);

    objc_initWeak(&v102, v15->_barManager);
    objc_initWeak(&from, v15->_rootViewController);
    objc_msgSend(MEMORY[0x1E0CD56A8], "sharedManager");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    v97[0] = MEMORY[0x1E0C809B0];
    v97[1] = 3221225472;
    v97[2] = __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_15;
    v97[3] = &unk_1E9CF3B90;
    v80 = v79;
    v98 = v80;
    objc_copyWeak(&v99, &from);
    objc_copyWeak(&v100, &v102);
    objc_msgSend(v80, "getDownloadsWithCompletionHandler:", v97);
    -[BrowserController updateJavaScriptPreferences](v15, "updateJavaScriptPreferences");
    -[BrowserController _updateMediaCaptureConfiguration]((uint64_t)v15);
    -[BrowserController _observeInitializedWebKitFeatures]((uint64_t)v15);
    -[BrowserController updateApplePayPreferences](v15, "updateApplePayPreferences");
    if (v15->_controlledByAutomation)
    {
      +[Application sharedApplication](Application, "sharedApplication");
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v81, "automationController");
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "updatePreferencesForAutomation:", v15->_wkPreferences);

    }
    v15->_suppressWebExtensionEvents = 1;
    v83 = -[WebExtensionWindow initWithBrowserController:isPrivateWindow:]([WebExtensionWindow alloc], "initWithBrowserController:isPrivateWindow:", v15, 0);
    normalExtensionWindow = v15->_normalExtensionWindow;
    v15->_normalExtensionWindow = v83;

    v85 = -[WebExtensionWindow initWithBrowserController:isPrivateWindow:]([WebExtensionWindow alloc], "initWithBrowserController:isPrivateWindow:", v15, 1);
    privateExtensionWindow = v15->_privateExtensionWindow;
    v15->_privateExtensionWindow = v85;

    -[SFBrowserController setProxy:](v15, "setProxy:", v15);
    if (objc_msgSend(MEMORY[0x1E0D89BE8], "isInternalInstall"))
    {
      objc_msgSend(v71, "safari_addObserver:selector:forUserDefaultKey:", v15, sel__debugAutoFillConsoleLoggingEnabledPreferenceDidChange_, *MEMORY[0x1E0D8AF90]);
      -[BrowserController _debugAutoFillConsoleLoggingEnabledPreferenceDidChange:](v15, "_debugAutoFillConsoleLoggingEnabledPreferenceDidChange:", 0);
    }
    v87 = objc_alloc_init(MEMORY[0x1E0CEF638]);
    objc_msgSend(v87, "defaultWebpagePreferences");
    v88 = objc_claimAutoreleasedReturnValue();
    defaultWebpagePreferences = v15->_defaultWebpagePreferences;
    v15->_defaultWebpagePreferences = (WKWebpagePreferences *)v88;

    -[WKWebpagePreferences addObserver:forKeyPath:options:context:](v15->_defaultWebpagePreferences, "addObserver:forKeyPath:options:context:", v15, *MEMORY[0x1E0D8B148], 4, lockdownModeObserverContext);
    v90 = v15;
    objc_destroyWeak(&v100);
    objc_destroyWeak(&v99);

    objc_destroyWeak(&from);
    objc_destroyWeak(&v102);

    objc_destroyWeak(&v104);
    objc_destroyWeak(&v106);
    objc_destroyWeak(&v108);

    objc_destroyWeak(&location);
    v14 = v92;
    v13 = v93;
  }

  return v15;
}

- (void)updateSpeculativeLoadingPreferences
{
  void *v3;
  id v4;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v4, "BOOLForKey:", CFSTR("SpeculativeLoading")))
  {
    self->_isSpeculativeLoadingEnabled = 0;
LABEL_5:
    -[BrowserController clearSpeculativeLoadDocument](self, "clearSpeculativeLoadDocument");
    goto LABEL_6;
  }
  -[BrowserController configuration](self, "configuration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  self->_isSpeculativeLoadingEnabled = objc_msgSend(v3, "allowsSpeculativeLoading");

  if (!self->_isSpeculativeLoadingEnabled)
    goto LABEL_5;
LABEL_6:

}

- (void)_updateMediaCaptureConfiguration
{
  id v2;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 816), "_setMockCaptureDevicesEnabled:", objc_msgSend(v2, "BOOLForKey:", *MEMORY[0x1E0D4F4C0]));
    objc_msgSend(*(id *)(a1 + 816), "_setMediaCaptureRequiresSecureConnection:", objc_msgSend(v2, "BOOLForKey:", *MEMORY[0x1E0D4F390]) ^ 1);
    objc_msgSend(*(id *)(a1 + 816), "_setEnumeratingAllNetworkInterfacesEnabled:", objc_msgSend(v2, "BOOLForKey:", *MEMORY[0x1E0D4F4B0]));
    objc_msgSend(*(id *)(a1 + 816), "_setICECandidateFilteringEnabled:", objc_msgSend(v2, "BOOLForKey:", *MEMORY[0x1E0D4F498]) ^ 1);

  }
}

- (NSUUID)UUID
{
  return self->_UUID;
}

- (void)_updateAddTabMenuProvider
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id (*v7)(uint64_t);
  void *v8;
  id v9;
  id location;

  if (val)
  {
    objc_initWeak(&location, val);
    v2 = (void *)*((_QWORD *)val + 101);
    v3 = (void *)MEMORY[0x1E0DC39D0];
    v5 = MEMORY[0x1E0C809B0];
    v6 = 3221225472;
    v7 = __46__BrowserController__updateAddTabMenuProvider__block_invoke;
    v8 = &unk_1E9CF39F0;
    objc_copyWeak(&v9, &location);
    objc_msgSend(v3, "safari_menuWithUncachedChildrenProvider:", &v5);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setBarItem:menu:", 7, v4, v5, v6, v7, v8);

    objc_destroyWeak(&v9);
    objc_destroyWeak(&location);
  }
}

- (void)_debugAutoFillConsoleLoggingEnabledPreferenceDidChange:(id)a3
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __CFString *v13;
  uint64_t v14;
  void *v15;
  id v16;

  v16 = a3;
  if ((objc_msgSend(MEMORY[0x1E0D89BE8], "isInternalInstall") & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E9CFDBB0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/Safari/iOS/MobileSafari/BrowserController.mm");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "lastPathComponent");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v8, "length");
    if (v12)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", %@"), v8);
      v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v13 = &stru_1E9CFDBB0;
    }
    objc_msgSend(v9, "stringWithFormat:", CFSTR("ASSERTION FAILURE: \"%s\" in %s, %@:%d%@"), "WBSFeatureAvailability.isInternalInstall", "-[BrowserController _debugAutoFillConsoleLoggingEnabledPreferenceDidChange:]", v11, 15155, v13);
    v14 = objc_claimAutoreleasedReturnValue();
    if (v12)

    objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    NSLog((NSString *)CFSTR("%@\n%@"), v14, v15);

    abort();
  }
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *MEMORY[0x1E0D8AF90];
  v5 = objc_msgSend(v3, "BOOLForKey:", *MEMORY[0x1E0D8AF90]);

  +[Application sharedApplication](Application, "sharedApplication");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forInjectedBundleParameter:", v7, v4);

}

void __76__BrowserController_updatePrivateBrowsingAvailabilityWithCompletionHandler___block_invoke(uint64_t a1, char a2)
{
  _QWORD block[4];
  id v5;
  id v6;
  char v7;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __76__BrowserController_updatePrivateBrowsingAvailabilityWithCompletionHandler___block_invoke_2;
  block[3] = &unk_1E9CF3380;
  objc_copyWeak(&v6, (id *)(a1 + 40));
  v5 = *(id *)(a1 + 32);
  v7 = a2;
  dispatch_async(MEMORY[0x1E0C80D38], block);

  objc_destroyWeak(&v6);
}

- (BrowserController)initWithWindowState:(id)a3 browserWindowController:(id)a4 tabGroupManager:(id)a5 controlledByAutomation:(BOOL)a6
{
  _BOOL8 v6;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  BrowserController *v18;
  void *v19;
  void *v20;
  BrowserController *v21;

  v6 = a6;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = objc_alloc(MEMORY[0x1E0CB3A28]);
  objc_msgSend(v11, "uuid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v14, "initWithUUIDString:", v15);
  objc_msgSend(v11, "sceneID");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[BrowserController initWithUUID:sceneID:browserWindowController:tabGroupManager:controlledByAutomation:](self, "initWithUUID:sceneID:browserWindowController:tabGroupManager:controlledByAutomation:", v16, v17, v12, v13, v6);

  if (v18)
  {
    objc_storeStrong((id *)&v18->_windowState, a3);
    -[TabController setWindowState:](v18->_tabController, "setWindowState:", v11);
    -[BrowserController createProfileWindow]((uint64_t)v18);
    if (!-[BrowserController isInDefaultProfile](v18, "isInDefaultProfile"))
    {
      -[TabController pinnedTabsManager](v18->_tabController, "pinnedTabsManager");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController activeProfileIdentifier](v18, "activeProfileIdentifier");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "willSelectProfileWithIdentifier:", v20);

    }
    -[BrowserController _prepareExtensionsForEffectiveProfile](v18);
    -[BrowserController _readSavedState]((uint64_t)v18);
    -[BrowserController updateCollaborationButton](v18, "updateCollaborationButton");
    v21 = v18;
  }

  return v18;
}

- (BrowserController)initWithWindowState:(id)a3 browserWindowController:(id)a4 tabGroupManager:(id)a5
{
  return -[BrowserController initWithWindowState:browserWindowController:tabGroupManager:controlledByAutomation:](self, "initWithWindowState:browserWindowController:tabGroupManager:controlledByAutomation:", a3, a4, a5, 0);
}

- (void)createProfileWindow
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id WeakRetained;

  if (a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 704));
    v2 = objc_alloc(MEMORY[0x1E0DCCB48]);
    objc_msgSend((id)a1, "windowState");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(a1 + 752);
    objc_msgSend(WeakRetained, "frontmostProfileIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v2, "initWithWindowState:tabGroupManager:preferredProfileIdentifier:", v3, v4, v5);
    v7 = *(void **)(a1 + 248);
    *(_QWORD *)(a1 + 248) = v6;

    objc_msgSend(*(id *)(a1 + 248), "setCanSwitchProfiles:", 1);
    objc_msgSend(*(id *)(a1 + 248), "setDelegate:", a1);
    objc_msgSend(*(id *)(a1 + 344), "unnamedTabGroupDisplayTitleProvider");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 248), "setUnnamedTabGroupDisplayTitleProvider:", v8);

    objc_msgSend(WeakRetained, "setFrontmostProfileIdentifier:", 0);
  }
}

- (void)_prepareExtensionsForEffectiveProfile
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  if (a1)
  {
    objc_msgSend(a1, "effectiveProfile");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    +[Application sharedApplication](Application, "sharedApplication");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifierForExtensions");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "webExtensionsControllerForProfileServerID:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D4EBE8], "sharedProvider");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setWebExtensionsController:", v3);

    +[Application sharedApplication](Application, "sharedApplication");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "loadExtensionsInProfileIfNecessary:", v6);

  }
}

- (WBTabGroup)unnamedTabGroup
{
  return (WBTabGroup *)-[WBProfileWindow unnamedTabGroupForActiveProfile](self->_profileWindow, "unnamedTabGroupForActiveProfile");
}

- (void)updateTabOverviewButton
{
  uint64_t v3;
  _BOOL4 v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;

  -[BrowserRootViewController capsuleCollectionViewLayout](self->_rootViewController, "capsuleCollectionViewLayout");
  v3 = objc_claimAutoreleasedReturnValue();
  if (v3
    && (v9 = (id)v3, v4 = -[TabController hasUnreadTab](self->_tabController, "hasUnreadTab"), v9, v4))
  {
    objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("square.on.square.badge"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      v7 = v5;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0DC3870], "sf_imageNamed:", CFSTR("square.on.square.badge"));
      v7 = (id)objc_claimAutoreleasedReturnValue();
    }
    v10 = v7;

    v8 = (uint64_t)v10;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("square.on.square"));
    v8 = objc_claimAutoreleasedReturnValue();
  }
  v11 = (id)v8;
  -[_SFBarManager setImage:forBarItem:](self->_barManager, "setImage:forBarItem:", v8, 8);

}

- (void)observeValueForKeyPath:(id)a3 ofObject:(id)a4 change:(id)a5 context:(void *)a6
{
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  BrowserController *v12;
  void *v13;

  v8 = a3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __68__BrowserController_observeValueForKeyPath_ofObject_change_context___block_invoke;
  block[3] = &unk_1E9CF33D0;
  v12 = self;
  v13 = a6;
  v11 = v8;
  v9 = v8;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

- (void)browserViewControllerDidChangeToolbarPlacement:(id)a3
{
  -[_SFBarManager visibleBarItemsNeedUpdate](self->_barManager, "visibleBarItemsNeedUpdate", a3);
  -[BrowserController _updateTabGroupBanner]((id *)&self->super.super.super.isa);
  -[BrowserController updateTabOverviewButton](self, "updateTabOverviewButton");
}

- (void)_readSavedState
{
  id v2;

  if (a1)
  {
    +[Application sharedApplication](Application, "sharedApplication");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v2, "isRunningPPT") && !objc_msgSend(v2, "shouldRestoreStateForPPT"))
      objc_msgSend(*(id *)(a1 + 344), "openInitialBlankTabDocumentIfNeeded");
    else
      *(_BYTE *)(a1 + 97) = objc_msgSend(*(id *)(a1 + 344), "readState");

  }
}

- (void)setUpWithURL:(id)a3 launchOptions:(id)a4
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  int v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  _QWORD v36[5];
  _QWORD v37[5];

  v34 = a3;
  v33 = a4;
  objc_msgSend(MEMORY[0x1E0D4EF30], "settings");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController UUID](self, "UUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "privateBrowsingEnabledForWindowWithUUID:", v7);

  -[BrowserController _initSubviews](self, "_initSubviews");
  -[BrowserController setPrivateBrowsingEnabled:](self, "setPrivateBrowsingEnabled:", v8);
  -[BrowserRootViewController navigationBar](self->_rootViewController, "navigationBar");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _updateCurrentPageBannerViewIfNeeded]((id *)&self->super.super.super.isa);
  -[BrowserRootViewController view](self->_rootViewController, "view");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "safeAreaInsets");
  objc_msgSend(v32, "setContentUnderStatusBarHeight:");

  -[TabController openInitialBlankTabDocumentIfNeeded](self->_tabController, "openInitialBlankTabDocumentIfNeeded");
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "navigationBarItem");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "setItem:", v10);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addObserver:selector:name:object:", self, sel__keyboardWillShow_, *MEMORY[0x1E0DC4FE8], 0);
  objc_msgSend(v11, "addObserver:selector:name:object:", self, sel__keyboardWillHide_, *MEMORY[0x1E0DC4FE0], 0);
  objc_msgSend(v11, "addObserver:selector:name:object:", self, sel__didChangePowerState, *MEMORY[0x1E0CB3048], 0);
  objc_msgSend(v11, "addObserver:selector:name:object:", self, sel__bookmarksDidReload_, *MEMORY[0x1E0DCCC00], 0);
  objc_msgSend(v11, "addObserver:selector:name:object:", self, sel__bookmarksDidReload_, CFSTR("bookmarkCollectionHasBecomeAvailableNotification"), 0);
  objc_msgSend(v11, "addObserver:selector:name:object:", self, sel__perSiteAutomaticReaderActivationPreferenceDidChange_, *MEMORY[0x1E0D8B280], 0);
  objc_msgSend(v11, "addObserver:selector:name:object:", self, sel__perSitePageZoomPreferenceDidChange_, *MEMORY[0x1E0D8B1C8], 0);
  objc_msgSend(v11, "addObserver:selector:name:object:", self, sel__downloadsDidChange_, *MEMORY[0x1E0CD58B8], 0);
  objc_msgSend(v11, "addObserver:selector:name:object:", self, sel__downloadsTotalProgressDidChange_, *MEMORY[0x1E0CD58B0], 0);
  objc_msgSend(v11, "addObserver:selector:name:object:", self, sel__downloadManagerDidFinishLastDownload_, *MEMORY[0x1E0CD58A0], 0);
  objc_msgSend(v11, "addObserver:selector:name:object:", self, sel__hasUnviewedDownloadsDidChange_, *MEMORY[0x1E0CD58A8], 0);
  +[Application sharedApplication](Application, "sharedApplication");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isRunningPPT");

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "BOOLForKey:", CFSTR("disableFavoritesGridForPurpleTests"));

  +[Application sharedApplication](Application, "sharedApplication");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "shouldRestoreStateForPPT");

  if (((v13 ^ 1 | v15 | v17) & 1) == 0)
  {
    -[BrowserController updateFavoritesForNewDocument](self, "updateFavoritesForNewDocument");
LABEL_8:
    if (!(_DWORD)v8)
      goto LABEL_21;
    goto LABEL_9;
  }
  if ((v13 ^ 1 | v17) != 1)
    goto LABEL_8;
  v31 = v34;
  if (self->_didRestoreState)
  {
    objc_msgSend(v35, "_backForwardList");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "currentItem");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "goToBackForwardListItem:", v19);

  }
  if (self->_usesTabBar)
  {
    -[TabCollectionViewProviding updateTabBarAnimated:](self->_tabCollectionViewProvider, "updateTabBarAnimated:", 0);
  }
  else if (self->_didRestoreState)
  {
    -[TabCollectionViewProviding updateTabViewsAnimatingTabBar:](self->_tabCollectionViewProvider, "updateTabViewsAnimatingTabBar:", 0);
  }
  objc_msgSend(v33, "safari_dictionaryForKey:", *MEMORY[0x1E0DC47D8]);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "safari_stringForKey:", *MEMORY[0x1E0DC47E0]);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "isEqualToString:", *MEMORY[0x1E0CB3418]);

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v26;
  if (v25)
    objc_msgSend(v26, "setPreparingForNewUserActivity:", 1);
  -[BrowserController updateFavoritesForNewDocument](self, "updateFavoritesForNewDocument");
  if (v25)
    objc_msgSend(v27, "setPreparingForNewUserActivity:", 0);
  if (!v31)
  {
    objc_msgSend(MEMORY[0x1E0D4EF30], "settings");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController UUID](self, "UUID");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend(v28, "isShowingTabViewForWindowWithUUID:", v29);

    if (v30)
    {
      -[TabCollectionViewProviding setSnapshotsEnabled:](self->_tabCollectionViewProvider, "setSnapshotsEnabled:", 1);
      v37[0] = MEMORY[0x1E0C809B0];
      v37[1] = 3221225472;
      v37[2] = __48__BrowserController_setUpWithURL_launchOptions___block_invoke;
      v37[3] = &unk_1E9CF31B0;
      v37[4] = self;
      objc_msgSend(MEMORY[0x1E0DC3F10], "performWithoutAnimation:", v37);
    }
  }

  if ((_DWORD)v8)
  {
LABEL_9:
    +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = __48__BrowserController_setUpWithURL_launchOptions___block_invoke_2;
    v36[3] = &unk_1E9CF3578;
    v36[4] = self;
    objc_msgSend(v20, "determineIfPrivateBrowsingIsAvailableWithCompletionHandler:", v36);

    +[Application sharedApplication](Application, "sharedApplication");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "isPrivateBrowsingLocked");

    if (v22)
      -[BrowserRootViewController showLockedPrivateBrowsingView](self->_rootViewController, "showLockedPrivateBrowsingView");
  }
LABEL_21:
  objc_msgSend(MEMORY[0x1E0CD5778], "registerReaderCustomProtocols");

}

- (void)updateFavoritesForNewDocument
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _BOOL8 v8;
  id v9;

  if (!-[TabController updatingTabGroupTabs](self->_tabController, "updatingTabGroupTabs"))
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "libraryType");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setLibraryType:", v4);

    if (-[BrowserController isControlledByAutomation](self, "isControlledByAutomation"))
    {
      -[BrowserController setFavoritesState:](self, "setFavoritesState:", 0);
    }
    else
    {
      if (objc_msgSend(v9, "isBlank") && (objc_msgSend(v9, "isPreparingForNewUserActivity") & 1) == 0)
      {
        objc_msgSend(v3, "resetFavorites");
        if ((-[BrowserController _wantsURLFieldAutoFocus](self) & 1) != 0
          || -[BrowserController isFavoritesFieldFocused](self, "isFavoritesFieldFocused"))
        {
          v5 = 3;
        }
        else
        {
          v5 = 4;
        }
        if (-[BrowserController _isStartPageOverriddenByExtensionInTabDocument:]((uint64_t)self, v9))
        {
          objc_msgSend(v9, "libraryType");
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          if (v6)
          {

          }
          else if (objc_msgSend(v9, "isShowingStartPageOverriddenByExtension"))
          {
            v5 = 0;
          }
        }
        -[BrowserController tabBarManager](self, "tabBarManager");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "displayMode") == 1;

        -[BrowserController setFavoritesState:animated:](self, "setFavoritesState:animated:", v5, v8);
      }
      else
      {
        -[BrowserController setFavoritesState:](self, "setFavoritesState:", 0);
      }
      if (!self->_isMakingFirstActiveTabDocumentActive)
        -[BrowserController _showOrHideSidebarInLandscapeIfNecessary](self);
    }

  }
}

- (void)setPrivateBrowsingEnabled:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  void *v7;
  void *cachedCatalogViewController;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v3 = a3;
  -[TabController activeTabGroup](self->_tabController, "activeTabGroup");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v5;
  if (v3)
  {
    if ((objc_msgSend(v5, "isPrivateBrowsing") & 1) == 0)
      -[TabController selectPrivateTabGroup](self->_tabController, "selectPrivateTabGroup");
  }
  else if (objc_msgSend(v5, "isPrivateBrowsing"))
  {
    -[TabController selectLocalTabGroup](self->_tabController, "selectLocalTabGroup");
  }
  if (self->_privateBrowsingEnabled != v3)
  {
    -[BrowserController writePrivateBrowsingEnabled:](self, "writePrivateBrowsingEnabled:", v3);
    self->_privateBrowsingEnabled = v3;
    -[BrowserController _updateConfiguration]((uint64_t)self);
    -[BrowserController _updateAddTabMenuProvider](self);
    +[Application sharedApplication](Application, "sharedApplication");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_SFBrowserSavedState setSecureDeleteEnabled:](self->_savedState, "setSecureDeleteEnabled:", objc_msgSend(v6, "usesPrivateBrowsingModeInAnyWindow"));
    -[TabController setPrivateBrowsingEnabled:](self->_tabController, "setPrivateBrowsingEnabled:", v3);
    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "didSetPrivateBrowsingEnabled:", v3);

    -[BrowserController _updateSceneTitle]((uint64_t)self);
    -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
    cachedCatalogViewController = (void *)objc_claimAutoreleasedReturnValue();
    v9 = cachedCatalogViewController;
    if (!cachedCatalogViewController)
      cachedCatalogViewController = self->_cachedCatalogViewController;
    objc_msgSend(cachedCatalogViewController, "didTogglePrivateBrowsing");

    -[BrowserController _prepareExtensionsForEffectiveProfile](self);
    if (!self->_suppressWebExtensionEvents)
    {
      -[BrowserController effectiveProfileIdentifier](self, "effectiveProfileIdentifier");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "webExtensionsControllerForProfileServerID:", v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      -[BrowserController activeWebExtensionWindow](self, "activeWebExtensionWindow");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "didActivateWindow:", v12);

    }
    -[BrowserRootViewController bookmarksBar](self->_rootViewController, "bookmarksBar");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setNeedsReloadData");

    -[BrowserRootViewController unifiedField](self->_rootViewController, "unifiedField");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "clearUserTypedText");

  }
}

- (void)setFavoritesState:(int64_t)a3 animated:(BOOL)a4 completionHandler:(id)a5
{
  -[BrowserController setFavoritesState:forVoiceSearch:animated:completionHandler:](self, "setFavoritesState:forVoiceSearch:animated:completionHandler:", a3, 0, a4, a5);
}

- (void)setFavoritesState:(int64_t)a3 animated:(BOOL)a4
{
  -[BrowserController setFavoritesState:animated:completionHandler:](self, "setFavoritesState:animated:completionHandler:", a3, a4, 0);
}

- (uint64_t)_wantsURLFieldAutoFocus
{
  if (a1
    && objc_msgSend(a1, "canAutoFocusURLField")
    && objc_msgSend(MEMORY[0x1E0DC3938], "isInHardwareKeyboardMode"))
  {
    return _SFDeviceIsPad();
  }
  else
  {
    return 0;
  }
}

- (uint64_t)_updateLibraryTypeForNewDocument
{
  void *v1;
  void *v2;
  void *v3;

  if (result)
  {
    v1 = (void *)result;
    result = objc_msgSend(*(id *)(result + 344), "updatingTabGroupTabs");
    if ((result & 1) == 0)
    {
      objc_msgSend(v1, "activeLibraryType");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController _catalogViewController]((id *)v1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "setLibraryType:", v2);

      return objc_msgSend(v1, "updateUnifiedBarVisibility");
    }
  }
  return result;
}

- (void)_showOrHideSidebarInLandscapeIfNecessary
{
  void *v1;
  _QWORD v2[5];

  if (result)
  {
    v1 = result;
    result = (void *)objc_msgSend(result, "_bookmarksPresentationStyle");
    if (result == (void *)2)
    {
      v2[0] = MEMORY[0x1E0C809B0];
      v2[1] = 3221225472;
      v2[2] = __61__BrowserController__showOrHideSidebarInLandscapeIfNecessary__block_invoke;
      v2[3] = &unk_1E9CF31B0;
      v2[4] = v1;
      return (void *)objc_msgSend(MEMORY[0x1E0DC3F10], "performWithoutAnimation:", v2);
    }
  }
  return result;
}

- (void)tabControllerDocumentCountDidChange:(id)a3
{
  _BOOL4 v4;

  v4 = -[BrowserController _animationsAreEnabled]((uint64_t)self);
  -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, v4);
  -[BrowserController _updateSceneTitle]((uint64_t)self);
}

- (BOOL)_animationsAreEnabled
{
  id WeakRetained;
  int v2;
  int v3;
  _BOOL8 v4;

  if (!a1)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 864));
  v2 = objc_msgSend(MEMORY[0x1E0DC3F10], "areAnimationsEnabled");
  if (WeakRetained)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3 == 1 && objc_msgSend(WeakRetained, "activationState") == 0;

  return v4;
}

- (WBWindowState)windowState
{
  return self->_windowState;
}

- (id)webExtensionWindowWithID:(double)a3
{
  WebExtensionWindow **p_normalExtensionWindow;
  double v6;
  WebExtensionWindow *v7;
  double v8;

  p_normalExtensionWindow = &self->_normalExtensionWindow;
  -[WebExtensionWindow idForWebExtensions](self->_normalExtensionWindow, "idForWebExtensions");
  if (v6 == a3
    || -[BrowserController isPrivateBrowsingAvailable](self, "isPrivateBrowsingAvailable")
    && (p_normalExtensionWindow = &self->_privateExtensionWindow,
        -[WebExtensionWindow idForWebExtensions](self->_privateExtensionWindow, "idForWebExtensions"),
        v8 == a3))
  {
    v7 = *p_normalExtensionWindow;
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

- (WKProcessPool)processPool
{
  void *v3;
  void *v4;
  void *v5;

  +[Application sharedApplication](Application, "sharedApplication");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController effectiveProfileIdentifier](self, "effectiveProfileIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "processPoolForProfileIdentifier:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return (WKProcessPool *)v5;
}

- (void)_defaultSearchEngineDidChange:(id)a3
{
  void *v4;
  id v5;

  +[Application sharedApplication](Application, "sharedApplication", a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[BrowserController activeSearchEngine](self, "activeSearchEngine");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setObject:forInjectedBundleParameter:", v4, *MEMORY[0x1E0D8B770]);

}

- (_SFSearchEngineInfo)activeSearchEngine
{
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0CD57A0], "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "defaultSearchEngineForPrivateBrowsing:", self->_privateBrowsingEnabled);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (_SFSearchEngineInfo *)v4;
}

+ (WKProcessPool)newProcessPool
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  WKProcessPool *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  WKProcessPool *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_alloc_init(MEMORY[0x1E0CEF6C0]);
  objc_msgSend(MEMORY[0x1E0CB34D0], "safari_safariInjectedBundleURL");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setInjectedBundleURL:", v5);

  v19[0] = *MEMORY[0x1E0CD58F8];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setCachePartitionedURLSchemes:", v6);

  objc_msgSend(v4, "setShouldCaptureAudioInUIProcess:", objc_msgSend(v3, "BOOLForKey:", *MEMORY[0x1E0D4F660]));
  objc_msgSend(v4, "setPrewarmsProcessesAutomatically:", 1);
  objc_msgSend(v4, "setUsesWebProcessCache:", 1);
  objc_msgSend(v4, "setJITEnabled:", objc_msgSend(v3, "BOOLForKey:", *MEMORY[0x1E0D8AFA0]) ^ 1);
  v7 = (WKProcessPool *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEF5F8]), "_initWithConfiguration:", v4);
  objc_msgSend(MEMORY[0x1E0CD56A0], "sharedDownloadDispatcher");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[WKProcessPool _setDownloadDelegate:](v7, "_setDownloadDelegate:", v8);

  objc_msgSend(MEMORY[0x1E0DCCB88], "sharedWebFilterSettings");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isWebFilterEnabled");

  if (v10)
  {
    objc_msgSend(MEMORY[0x1E0CD57A0], "sharedInstance");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "engines");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[WKProcessPool _setObject:forBundleParameter:](v7, "_setObject:forBundleParameter:", v12, *MEMORY[0x1E0D8B778]);

  }
  if (objc_msgSend((id)*MEMORY[0x1E0DC4730], "launchedToTest"))
    -[WKProcessPool _setObject:forBundleParameter:](v7, "_setObject:forBundleParameter:", MEMORY[0x1E0C9AAB0], CFSTR("launchedToTest"));
  SafariShared::ReaderAvailabilityController::configureProcessPool((SafariShared::ReaderAvailabilityController *)v7, v13);
  objc_msgSend(v3, "stringForKey:", CFSTR("JavaScriptConsoleOutputPath"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v14, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (v15)
    {
      objc_msgSend(v15, "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:", 0, 0, 0, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[WKProcessPool _setObject:forBundleParameter:](v7, "_setObject:forBundleParameter:", v17, CFSTR("JavaScriptConsoleOutputURLBookmarkData"));

    }
  }
  else
  {
    v16 = 0;
  }
  -[WKProcessPool _setObject:forBundleParameter:](v7, "_setObject:forBundleParameter:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D4F380]);
  +[BrowserController _sendABGroupIdentifierToProcessPool:]((uint64_t)a1, v7);

  return v7;
}

+ (void)_sendABGroupIdentifierToProcessPool:(uint64_t)a1
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  objc_opt_self();
  if (objc_msgSend(MEMORY[0x1E0D89BE8], "defaultSearchEngineMatchesExperiment"))
  {
    v2 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(MEMORY[0x1E0D8AD60], "shared");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "numberWithUnsignedInteger:", objc_msgSend(v3, "trialABGroupIdentifier"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_setObject:forBundleParameter:", v4, *MEMORY[0x1E0D8B760]);

  }
}

- (void)updateJavaScriptPreferences
{
  id v3;

  objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[WKPreferences setJavaScriptEnabled:](self->_wkPreferences, "setJavaScriptEnabled:", objc_msgSend(v3, "_sf_javaScriptEnabled"));
  -[WKPreferences setJavaScriptCanOpenWindowsAutomatically:](self->_wkPreferences, "setJavaScriptCanOpenWindowsAutomatically:", objc_msgSend(v3, "_sf_javaScriptCanOpenWindowsAutomatically"));

}

- (void)setFavoritesState:(int64_t)a3 forVoiceSearch:(BOOL)a4 animated:(BOOL)a5 completionHandler:(id)a6
{
  _BOOL4 v6;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  int v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  int v26;
  CatalogViewController *cachedCatalogViewController;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  NSObject *v40;
  id v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  NSObject *v54;
  void *v55;
  int v56;
  NSObject *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id *v63;
  void *v64;
  int v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  dispatch_time_t v71;
  _BOOL4 v72;
  uint64_t v73;
  _BOOL4 v74;
  void *v75;
  void *v76;
  dispatch_block_t v77;
  id v78;
  void *v79;
  int v80;
  NSObject *group;
  void *v82;
  _BOOL4 v83;
  _BOOL4 v84;
  id WeakRetained;
  void *v86;
  void *v87;
  _BOOL4 v88;
  _BOOL4 v89;
  int v90;
  _BOOL4 v91;
  _QWORD block[5];
  id v93;
  id v94;
  NSObject *v95;
  BOOL v96;
  BOOL v97;
  char v98;
  _QWORD v99[4];
  NSObject *v100;
  NSObject *v101;
  BOOL v102;
  _QWORD v103[4];
  NSObject *v104;
  _QWORD v105[4];
  NSObject *v106;
  _QWORD v107[4];
  NSObject *v108;
  _QWORD v109[4];
  NSObject *v110;
  id v111;
  int64_t v112;
  char v113;
  _QWORD v114[4];
  id v115;
  _QWORD v116[4];
  id v117;
  _QWORD v118[4];
  id v119;
  BrowserController *v120;
  NSObject *v121;
  id v122;
  id v123;
  id v124;
  char v125;
  _QWORD v126[4];
  NSObject *v127;
  _QWORD aBlock[4];
  id v129;

  v6 = a5;
  v83 = a4;
  v9 = a6;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke;
  aBlock[3] = &unk_1E9CF34B0;
  v10 = v9;
  v129 = v10;
  v11 = _Block_copy(aBlock);
  v12 = v11;
  if (self->_favoritesState == a3)
  {
    (*((void (**)(void *))v11 + 2))(v11);
    goto LABEL_88;
  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  v77 = v12;
  v78 = v10;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:willChangeToFavoritesState:", self, a3);
  v13 = objc_loadWeakRetained((id *)&self->_scene);
  v91 = 0;
  v79 = v13;
  if (v6 && v13)
    v91 = objc_msgSend(v13, "activationState") == 0;
  v14 = -[BrowserController browserViewControllerShouldTemporarilyHideBottomToolbar:](self, "browserViewControllerShouldTemporarilyHideBottomToolbar:", self->_rootViewController);
  v80 = -[BrowserController isShowingFavorites](self, "isShowingFavorites");
  v72 = -[BrowserController isFavoritesFieldFocused](self, "isFavoritesFieldFocused");
  v74 = -[BrowserController favoritesFieldShouldBeExpanded](self, "favoritesFieldShouldBeExpanded");
  self->_favoritesState = a3;
  v15 = -[BrowserController browserViewControllerShouldTemporarilyHideBottomToolbar:](self, "browserViewControllerShouldTemporarilyHideBottomToolbar:", self->_rootViewController);
  v90 = -[BrowserController isShowingFavorites](self, "isShowingFavorites");
  v88 = -[BrowserController isFavoritesFieldFocused](self, "isFavoritesFieldFocused");
  v89 = -[BrowserController favoritesFieldShouldBeExpanded](self, "favoritesFieldShouldBeExpanded");
  if ((unint64_t)a3 < 6)
    self->_wantsUnifiedFieldFocused = 0x1000100uLL >> (8 * a3);
  group = dispatch_group_create();
  if (v14 != v15)
  {
    -[BrowserRootViewController view](self->_rootViewController, "view");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setNeedsLayout");

  }
  if (!v89)
    -[BrowserController clearSpeculativeLoadDocument](self, "clearSpeculativeLoadDocument");
  if (v88)
  {
    dispatch_group_enter(group);
    v126[0] = MEMORY[0x1E0C809B0];
    v126[1] = 3221225472;
    v126[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_2;
    v126[3] = &unk_1E9CF31B0;
    v127 = group;
    -[BrowserController _dismissTransientUIAnimated:dismissalOptions:completionHandler:]((uint64_t)self, v91, 1, v126);

  }
  -[BrowserController _topNavigationBar]((id *)&self->super.super.super.isa);
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "view");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "popoverPresentationController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "dismissing");

  v20 = -[BrowserController _shouldUseNarrowLayout](self, "_shouldUseNarrowLayout");
  v84 = -[BrowserController favoritesAreShowingInPopover](self, "favoritesAreShowingInPopover");
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v76 = v21;
  objc_msgSend(v21, "sfScribbleControllerIfLoaded");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "isScribbling");

  if (v23)
  {
    objc_msgSend(v21, "sfScribbleControllerIfLoaded");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "endScribblingAndSaveChanges:", 0);

  }
  if (((a3 != 4) & v90) != 0)
    v25 = v21;
  else
    v25 = 0;
  -[BrowserController _setProgressSuppressingDocument:]((uint64_t)self, v25);
  if (v80 != v90)
  {
    if (v17)
      v26 = v84 ^ objc_msgSend(v17, "usesPopoverStyleForFavorites");
    else
      v26 = 1;
    if ((v90 & v26) == 1)
    {
      if (-[CatalogViewController usesPopoverStyleForFavorites](self->_cachedCatalogViewController, "usesPopoverStyleForFavorites")|| v84)
      {
        cachedCatalogViewController = self->_cachedCatalogViewController;
        self->_cachedCatalogViewController = 0;

      }
      -[BrowserController createCatalogViewControllerIfNeeded](self, "createCatalogViewControllerIfNeeded");
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v28, "setUsesPopoverStyleForFavorites:", v84);
      objc_msgSend(WeakRetained, "browserController:setCatalogViewController:", self, v28);
      objc_msgSend(v28, "view");
      v29 = objc_claimAutoreleasedReturnValue();

      v87 = (void *)v29;
      v17 = v28;
    }
    if (v90)
    {
      objc_msgSend(v17, "resetFavorites");
      objc_msgSend(v17, "startPageController");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "updatePrivacyReportIfEnabled");

      objc_msgSend(v17, "setNavigationBar:", v86);
      -[BrowserController _updateCurrentPageBannerViewIfNeeded]((id *)&self->super.super.super.isa);
      if (!v84)
      {
        -[BrowserRootViewController documentAndTopBarsContainerView](self->_rootViewController, "documentAndTopBarsContainerView");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "addSubview:", v87);

      }
      objc_msgSend(WeakRetained, "browserControllerLayOutCatalogView:", self);
      -[SearchStateCache cachedCompletionListForTabDocument:](self->_searchStateCache, "cachedCompletionListForTabDocument:", v21);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = v32;
      if (v32)
      {
        objc_msgSend(v32, "setDelegate:", v17);
        objc_msgSend(v33, "restoreCachedCompletions");
        objc_msgSend(v17, "setShowingCompletions:", 1);
        objc_msgSend(v17, "setCompletionList:", v33);
      }

      objc_msgSend(v87, "setAlpha:", (double)!v91);
    }
    else
    {
      objc_msgSend(v17, "setHasScheduledCompletionListDismissal:", 1);
      if (((v20 | v19) & 1) == 0)
        objc_msgSend(v17, "stopCompleting");
      dispatch_group_enter(group);
      v34 = MEMORY[0x1E0C809B0];
      v118[0] = MEMORY[0x1E0C809B0];
      v118[1] = 3221225472;
      v118[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_3;
      v118[3] = &unk_1E9CF34D8;
      v125 = v19;
      v119 = v17;
      v120 = self;
      v121 = group;
      v35 = v87;
      v122 = v35;
      v123 = v86;
      v124 = WeakRetained;
      v36 = _Block_copy(v118);
      v37 = v36;
      if (v91)
      {
        v38 = (void *)MEMORY[0x1E0DC3F10];
        v116[0] = v34;
        v116[1] = 3221225472;
        v116[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_4;
        v116[3] = &unk_1E9CF31B0;
        v117 = v35;
        v114[0] = v34;
        v114[1] = 3221225472;
        v114[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_5;
        v114[3] = &unk_1E9CF3500;
        v115 = v37;
        objc_msgSend(v38, "animateWithDuration:delay:options:animations:completion:", 5, v116, v114, 0.3, 0.0);

      }
      else
      {
        (*((void (**)(void *))v36 + 2))(v36);
      }

    }
    -[BrowserRootViewController updateThemeColorIfNeededAnimated:](self->_rootViewController, "updateThemeColorIfNeededAnimated:", v91);
    if ((v91 & v90 & 1) == 0)
      -[BrowserController _updateUnifiedBarBackgroundVisibility]((id *)&self->super.super.super.isa);
  }
  v39 = (void *)MEMORY[0x1E0DC3F10];
  v109[0] = MEMORY[0x1E0C809B0];
  v109[1] = 3221225472;
  v109[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_6;
  v109[3] = &unk_1E9CF3528;
  v112 = a3;
  v113 = v19;
  v40 = group;
  v110 = v40;
  v41 = v17;
  v111 = v41;
  objc_msgSend(v39, "performWithoutAnimation:", v109);
  -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  if (v42)
  {
    dispatch_group_enter(v40);
    if (v89)
      v43 = 2;
    else
      v43 = 0;
    v107[0] = MEMORY[0x1E0C809B0];
    v107[1] = 3221225472;
    v107[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_9;
    v107[3] = &unk_1E9CF31B0;
    v108 = v40;
    objc_msgSend(v42, "transitionToState:animated:completionHandler:", v43, v91, v107);

  }
  if (v88 && -[BrowserController _animationsAreEnabled]((uint64_t)self))
    objc_msgSend(v87, "layoutIfNeeded");
  objc_msgSend(v86, "textField");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "unifiedField");
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  if (v46)
  {
    v47 = v46;

    objc_msgSend(v41, "setTextField:", v47);
    v44 = v47;
  }
  v82 = v44;

  -[BrowserController tabBarManager](self, "tabBarManager");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = objc_msgSend(v48, "displayMode");
  objc_msgSend(v48, "itemArrangement");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "activeItem");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "unifiedTabBarItem");
  v53 = (void *)objc_claimAutoreleasedReturnValue();

  if (v49 && ((v74 ^ v89 ^ 1) & 1) == 0 && v51 == v53)
  {
    dispatch_group_enter(v40);
    v105[0] = MEMORY[0x1E0C809B0];
    v105[1] = 3221225472;
    v105[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_10;
    v105[3] = &unk_1E9CF31B0;
    v106 = v40;
    objc_msgSend(v48, "setActiveItemIsExpanded:animated:completionHandler:", v89, v91, v105);
    v54 = v106;
    v55 = v76;
LABEL_72:

    goto LABEL_73;
  }
  if (v49)
    v56 = 0;
  else
    v56 = v74 ^ v89;
  v55 = v76;
  if (v56 == 1)
  {
    -[BrowserRootViewController navigationBar](self->_rootViewController, "navigationBar");
    v57 = objc_claimAutoreleasedReturnValue();
    v54 = v57;
    if (v91)
    {
      -[NSObject item](v57, "item");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "textWhenExpanded");
      v59 = (void *)objc_claimAutoreleasedReturnValue();

      if (v89)
      {
        v60 = objc_msgSend(v59, "length");
        v61 = 0;
      }
      else
      {
        objc_msgSend(v82, "text");
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        v65 = objc_msgSend(v64, "isEqualToString:", v59);

        if (v65)
        {
          objc_msgSend(v82, "selectedTextRange");
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v82, "beginningOfDocument");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v75, "start");
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          v73 = objc_msgSend(v82, "offsetFromPosition:toPosition:", v66, v67);

          objc_msgSend(v82, "beginningOfDocument");
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v75, "end");
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          v70 = objc_msgSend(v82, "offsetFromPosition:toPosition:", v68, v69);

          v60 = v70 - v73;
          v61 = v73;

        }
        else
        {
          v60 = 0;
          v61 = 0x7FFFFFFFFFFFFFFFLL;
        }
      }

      if (!v54)
        goto LABEL_72;
      dispatch_group_enter(v40);
      v103[0] = MEMORY[0x1E0C809B0];
      v103[1] = 3221225472;
      v103[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_11;
      v103[3] = &unk_1E9CF31B0;
      v104 = v40;
      -[NSObject setExpanded:textFieldSelectionRange:completionHandler:](v54, "setExpanded:textFieldSelectionRange:completionHandler:", v89, v61, v60, v103);
      v63 = (id *)&v104;
    }
    else
    {
      if (!v57)
        goto LABEL_72;
      dispatch_group_enter(v40);
      v62 = (void *)MEMORY[0x1E0DC3F10];
      v99[0] = MEMORY[0x1E0C809B0];
      v99[1] = 3221225472;
      v99[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_12;
      v99[3] = &unk_1E9CF3550;
      v100 = v54;
      v102 = v89;
      v101 = v40;
      objc_msgSend(v62, "performWithoutAnimation:", v99);
      v63 = (id *)&v100;

    }
    goto LABEL_72;
  }
LABEL_73:
  if (v84 || !v91 || (v80 | v90 ^ 1) == 1 && (v72 || !v88))
  {
    if (v83)
    {
      objc_msgSend(v41, "toggleVoiceSearch");
    }
    else if (v88)
    {
      objc_msgSend(v82, "becomeFirstResponder");
    }
    else
    {
      objc_msgSend(v82, "resignFirstResponder");
    }
  }
  else
  {
    dispatch_group_enter(v40);
    v71 = dispatch_time(0, 10000000);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_14;
    block[3] = &unk_1E9CF35A0;
    v96 = v72;
    block[4] = self;
    v97 = v83;
    v93 = v82;
    v98 = v80;
    v94 = v87;
    v95 = v40;
    dispatch_after(v71, MEMORY[0x1E0C80D38], block);

  }
  -[BrowserController updateDynamicBarGeometry](self, "updateDynamicBarGeometry");
  -[BrowserController updateScrollToTopView](self, "updateScrollToTopView");
  -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, v91);
  if (-[BrowserRootViewController usingUnifiedBar](self->_rootViewController, "usingUnifiedBar")
    && self->_usesNarrowLayout)
  {
    -[_SFBarManager performCoalescedUpdatesNowAnimated:](self->_barManager, "performCoalescedUpdatesNowAnimated:", v91);
  }
  if ((v90 & 1) == 0)
    objc_msgSend(v55, "presentNextDialogIfNeeded");
  dispatch_group_notify(v40, MEMORY[0x1E0C80D38], v77);

  v12 = v77;
  v10 = v78;
LABEL_88:

}

- (BOOL)isFavoritesFieldFocused
{
  return ((self->_favoritesState - 1) & 0xFFFFFFFFFFFFFFFDLL) == 0;
}

- (BOOL)browserViewControllerShouldTemporarilyHideBottomToolbar:(id)a3
{
  id v4;
  uint64_t v5;
  _BOOL4 contentBorrowedForTab;
  unint64_t favoritesState;
  BOOL v9;
  uint64_t v10;

  -[TabCollectionViewProviding tabOverview](self->_tabCollectionViewProvider, "tabOverview", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "presentationState") == 1)
  {

  }
  else
  {
    v5 = objc_msgSend(v4, "presentationState");

    if (v5 != 2)
    {

      goto LABEL_7;
    }
  }
  contentBorrowedForTab = self->_contentBorrowedForTab;

  if (!contentBorrowedForTab)
    return 1;
LABEL_7:
  favoritesState = self->_favoritesState;
  v9 = favoritesState > 5;
  v10 = (1 << favoritesState) & 0x2E;
  if (v9 || v10 == 0)
    return 0;
  else
    return objc_msgSend(MEMORY[0x1E0DC3938], "isInHardwareKeyboardMode") ^ 1;
}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_9(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

- (void)switchFromTabDocument:(id)a3 toTabDocument:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  double v21;
  double v22;
  void *v23;

  v6 = a3;
  v7 = a4;
  if (!v7)
  {
    v8 = WBS_LOG_CHANNEL_PREFIXTabView();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      -[BrowserController switchFromTabDocument:toTabDocument:].cold.1();
  }
  if (v6 == v7)
  {
    -[BrowserController updateInterface](self, "updateInterface");
  }
  else
  {
    objc_msgSend(v6, "updateUserActivity");
    if ((objc_msgSend(v6, "isShowingReader") & 1) != 0 || objc_msgSend(v6, "shouldRestoreReader"))
      -[BrowserController hideReaderForTabDocument:animated:deactivationMode:](self, "hideReaderForTabDocument:animated:deactivationMode:", v6, 0, 2);
    -[UIScrollView _stopScrollingAndZoomingAnimations](self->_scrollView, "_stopScrollingAndZoomingAnimations");
    -[UIScrollView contentOffset](self->_scrollView, "contentOffset");
    objc_msgSend(v6, "setScrollPoint:");
    -[BrowserController setWebViewFromTabDocument:](self, v7);
    if (objc_msgSend(v7, "shouldShowReaderOnActivate"))
      -[BrowserController setShowingReader:animated:](self, "setShowingReader:animated:", 1, 0);
    -[BrowserController updateInterface](self, "updateInterface");
    objc_msgSend(v6, "appBanner");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController _setShowingAppBanner:isShowing:]((uint64_t)self, v9, 0);

    objc_msgSend(v7, "appBanner");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController _setShowingAppBanner:isShowing:]((uint64_t)self, v10, 1);

    objc_msgSend(v6, "privateBrowsingPrivacyProtectionsBanner");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController _setShowingPrivateBrowsingPrivacyProtectionsBanner:isShowing:]((uint64_t)self, v11, 0);

    objc_msgSend(v7, "privateBrowsingPrivacyProtectionsBanner");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController _setShowingPrivateBrowsingPrivacyProtectionsBanner:isShowing:]((uint64_t)self, v12, 1);

    objc_msgSend(v7, "navigationBarItem");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserRootViewController navigationBar](self->_rootViewController, "navigationBar");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setItem:", v13);

    -[BrowserRootViewController view](self->_rootViewController, "view");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setNeedsLayout");

    -[BrowserController _updateCurrentPageBannerViewIfNeeded]((id *)&self->super.super.super.isa);
    if (v6)
      -[BrowserController updateFavoritesForNewDocument](self, "updateFavoritesForNewDocument");
    -[BrowserController _updateLibraryTypeForNewDocument]((uint64_t)self);
    objc_msgSend(v7, "dialogController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "presentNextDialogIfNeeded");

    if (v7)
    {
      -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
      v17 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v17, "presentationState") == 1)
      {

      }
      else
      {
        v18 = objc_msgSend(v17, "presentationState");

        if (v18 != 2)
        {
          objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", v7);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          -[BrowserController _updateDigitalHealthOverlayForTabDocuments:](self, v19);

          -[BrowserController _presentPendingViewControllerForActiveTab]((id *)&self->super.super.super.isa);
        }
      }
    }
    -[BrowserRootViewController setNeedsUpdateOfScreenEdgesDeferringSystemGestures](self->_rootViewController, "setNeedsUpdateOfScreenEdgesDeferringSystemGestures");
    -[BrowserController _updateSceneTitle]((uint64_t)self);
    objc_msgSend(MEMORY[0x1E0CD56A8], "sharedManager");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "totalProgress");
    v22 = v21;
    objc_msgSend(v7, "unifiedTabBarItem");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setDownloadProgress:", v22);

    -[BrowserController _updateUnifiedBarBackgroundVisibility]((id *)&self->super.super.super.isa);
    -[BrowserRootViewController updateThemeColorIfNeededAnimated:](self->_rootViewController, "updateThemeColorIfNeededAnimated:", 0);
  }

}

- (void)_setShowingAppBanner:(int)a3 isShowing:
{
  id v5;
  id v6;

  v6 = a2;
  if (a1)
  {
    -[BrowserController _updateNavigationBarSeparator](a1);
    if (v6)
    {
      if ((-[BrowserController _setShowingOverlayForBanner:showing:](a1, v6, a3) & 1) == 0)
      {
        if (a3)
          v5 = v6;
        else
          v5 = 0;
        objc_msgSend(*(id *)(a1 + 744), "setAppBanner:animated:", v5, 0);
      }
    }
  }

}

- (void)_updateNavigationBarSeparator
{
  id v2;

  if (a1)
  {
    -[BrowserController _visibleAppBanner](a1);
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 280), "setUsesFaintTopSeparator:", v2 != 0);

  }
}

- (id)_visibleAppBanner
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "appBanner");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "overlayProvider");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "isAvailable"))
      v4 = 0;
    else
      v4 = v2;
    v5 = v4;

  }
  else
  {
    v5 = 0;
  }
  return v5;
}

- (void)_updateAppInfoOverlayFrame
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appBanner");
    v19 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v19, "overlayProvider");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "overlayViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "view");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      objc_msgSend(*(id *)(a1 + 304), "bounds");
      v7 = v6;
      v9 = v8;
      v11 = v10;
      v13 = v12;
      v14 = *(void **)(a1 + 280);
      objc_msgSend(*(id *)(a1 + 896), "bounds");
      objc_msgSend(v14, "obscuredInsetsWithComponents:forRect:inCoordinateSpace:", 10, *(_QWORD *)(a1 + 896));
      objc_msgSend(v5, "setFrame:", v7 + v18, v9 + v15, v11 - (v18 + v16), v13 - (v15 + v17));
    }

  }
}

- (void)_setShowingPrivateBrowsingPrivacyProtectionsBanner:(int)a3 isShowing:
{
  id v5;
  id v6;

  v6 = a2;
  if (a1)
  {
    -[BrowserController _updateNavigationBarSeparator](a1);
    if (v6)
    {
      if (a3)
        v5 = v6;
      else
        v5 = 0;
      objc_msgSend(*(id *)(a1 + 744), "setPrivateBrowsingPrivacyProtectionsBanner:animated:", v5, 0);
    }
  }

}

- (void)setWebViewFromTabDocument:(_QWORD *)a1
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  if (a1)
  {
    v5 = v3;
    objc_msgSend(v3, "webView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4 != (void *)a1[112])
    {
      objc_msgSend(a1, "setShowingCrashBanner:animated:", 0, 0);
      -[BrowserController setWebView:]((uint64_t)a1, v4);
    }

    v3 = v5;
  }

}

- (void)setShowingCrashBanner:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL4 v5;
  void *v7;
  void *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  id v12;
  void *v13;

  v4 = a4;
  v5 = a3;
  -[BannerController crashBanner](self->_bannerController, "crashBanner");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
    v9 = 0;
  else
    v9 = !v5;
  if (!v9)
  {
    v10 = !v7 || !v5;
    v13 = v7;
    if (v10 || (v11 = objc_msgSend(v7, "messageType"), v8 = v13, v11))
    {
      if (v5)
        v12 = objc_alloc_init(MEMORY[0x1E0D4EC48]);
      else
        v12 = 0;
      -[BrowserController showCrashBanner:animated:](self, "showCrashBanner:animated:", v12, v4);

      v8 = v13;
    }
  }

}

- (void)updateUnifiedBarVisibility
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserControllerShouldUpdateUnifiedBarVisibility:", self);

}

- (void)updateInterface
{
  _BOOL4 v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  if (-[BrowserRootViewController isViewLoaded](self->_rootViewController, "isViewLoaded"))
  {
    -[BrowserController _updateCurrentPageBannerView]((id *)&self->super.super.super.isa);
    -[BrowserController _updateCurrentContinuousReadingItem]((id *)&self->super.super.super.isa);
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "updateTabTitle");
    v3 = -[BrowserController _animationsAreEnabled]((uint64_t)self);
    -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, v3);
    -[BrowserController _updateCurrentPageBannerViewIfNeeded]((id *)&self->super.super.super.isa);
    -[BrowserController _updateAppInfoOverlayFrame]((uint64_t)self);
    -[BrowserRootViewController safari_updateApplicationBackgroundStyle](self->_rootViewController, "safari_updateApplicationBackgroundStyle");
    objc_msgSend(v7, "navigationBarItem");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserRootViewController tabBarManager](self->_rootViewController, "tabBarManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "lockdownStatusBar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setNavigationBarItem:", v4);

  }
}

- (id)createCatalogViewControllerIfNeeded
{
  CatalogViewController **p_cachedCatalogViewController;
  CatalogViewController *cachedCatalogViewController;
  CatalogViewController *v5;

  p_cachedCatalogViewController = &self->_cachedCatalogViewController;
  cachedCatalogViewController = self->_cachedCatalogViewController;
  if (cachedCatalogViewController)
  {
    -[CatalogViewController startPageUpdatePolicyDidChange](cachedCatalogViewController, "startPageUpdatePolicyDidChange");
    v5 = *p_cachedCatalogViewController;
  }
  else
  {
    v5 = -[CatalogViewController initWithDelegate:browserController:]([CatalogViewController alloc], "initWithDelegate:browserController:", self, self);
    -[CatalogViewController setLoadProgressObserver:](v5, "setLoadProgressObserver:", self->_spinnerController);
    objc_storeStrong((id *)p_cachedCatalogViewController, v5);
  }
  return v5;
}

- (void)clearSpeculativeLoadDocument
{
  TabDocument *speculativeLoadDocument;
  NSString *speculativeLoadURL;

  -[BrowserController cancelSpeculativeLoad](self, "cancelSpeculativeLoad");
  -[BrowserController _closeSpeculativelyLoadedDocument:]((uint64_t)self, self->_speculativeLoadDocument);
  speculativeLoadDocument = self->_speculativeLoadDocument;
  self->_speculativeLoadDocument = 0;

  speculativeLoadURL = self->_speculativeLoadURL;
  self->_speculativeLoadURL = 0;

  objc_storeWeak((id *)&self->_backForwardListItemNeedingSnapshot, 0);
}

- (void)cancelSpeculativeLoad
{
  NSObject *v3;
  NSString *speculativeLoadURL;
  NSString *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  NSString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (self->_speculativeLoadURL)
  {
    v3 = WBS_LOG_CHANNEL_PREFIXPageLoading();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      speculativeLoadURL = self->_speculativeLoadURL;
      v6 = 141558275;
      v7 = 1752392040;
      v8 = 2117;
      v9 = speculativeLoadURL;
      _os_log_impl(&dword_1D7CA3000, v3, OS_LOG_TYPE_INFO, "Cancelling speculative load: %{sensitive, mask.hash}@", (uint8_t *)&v6, 0x16u);
    }
    -[BrowserController _cancelSpeculativeLoadForDocument:]((uint64_t)self, self->_speculativeLoadDocument);
    -[TabDocument endSuppressingProgressAnimation](self->_speculativeLoadDocument, "endSuppressingProgressAnimation");
    v5 = self->_speculativeLoadURL;
    self->_speculativeLoadURL = 0;

  }
}

- (void)_updateCurrentPageBannerView
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  ContinuousReadingPreviewView *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;

  if (a1)
  {
    objc_msgSend(a1[11], "previousItemPreviewView");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[11], "currentItem");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = a1[11];
    if (v2)
    {
      objc_msgSend(v3, "topBannerView");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "continuousReadingItem");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "isEqual:", v2);

      if ((v6 & 1) == 0)
      {
        objc_msgSend(a1, "previousContinuousItemDocument");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "clearDocumentForContinuousReading:", v7);

        v8 = -[ContinuousReadingPreviewView initWithContinuousReadingItem:previewingNextDocument:]([ContinuousReadingPreviewView alloc], "initWithContinuousReadingItem:previewingNextDocument:", v2, 0);
        objc_msgSend(a1[11], "setPreviousItemPreviewView:", v8);

        -[BrowserController _preparePreviousContinuousDocumentIfNeeded](a1);
      }
      objc_msgSend(a1[11], "previousItemPreviewView");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "superview");
      v10 = (id)objc_claimAutoreleasedReturnValue();
      v11 = a1[38];

      if (v10 != v11)
        objc_msgSend(a1[38], "addSubview:", v9);
      objc_msgSend(v9, "setFrame:", -[BrowserController _frameForCurrentPageBannerView]((uint64_t)a1));

    }
    else
    {
      objc_msgSend(v3, "setPreviousItemPreviewView:", 0);
    }
    objc_msgSend(a1[11], "previousItemPreviewView");
    v12 = (id)objc_claimAutoreleasedReturnValue();

    if (v13 != v12)
    {
      objc_msgSend(a1[35], "updateWebViewSizeAttributes");
      objc_msgSend(a1[11], "updateOuterScrollView");
    }

  }
}

- (id)_topNavigationBar
{
  id v1;
  id WeakRetained;

  v1 = a1;
  if (a1)
  {
    WeakRetained = objc_loadWeakRetained(a1 + 48);
    objc_msgSend(WeakRetained, "browserControllerNavigationBar:", v1);
    v1 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v1;
}

- (void)_setProgressSuppressingDocument:(uint64_t)a1
{
  id v4;
  id v5;

  v5 = a2;
  if (a1)
  {
    v4 = *(id *)(a1 + 256);
    if (v4 != v5)
    {
      objc_msgSend(v4, "endSuppressingProgressAnimation");
      objc_storeStrong((id *)(a1 + 256), a2);
      objc_msgSend(*(id *)(a1 + 256), "beginSuppressingProgressAnimation");
    }
  }

}

- (void)_presentPendingViewControllerForActiveTab
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_4_1(v1, v2, 5.8381e-34);
  OUTLINED_FUNCTION_0_2(&dword_1D7CA3000, v3, v4, "Trying to present pending view controller when it is already presented by: %{public}@", v5);

  OUTLINED_FUNCTION_3_0();
}

- (void)_closeSpeculativelyLoadedDocument:(uint64_t)a1
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    v4 = WBS_LOG_CHANNEL_PREFIXPageLoading();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 448);
      v6 = 141558275;
      v7 = 1752392040;
      v8 = 2117;
      v9 = v5;
      _os_log_impl(&dword_1D7CA3000, v4, OS_LOG_TYPE_INFO, "Closing speculative load TabDocument: %{sensitive, mask.hash}@", (uint8_t *)&v6, 0x16u);
    }
    objc_msgSend(v3, "setClosed:", 1);
    objc_msgSend(v3, "willClose");
  }

}

- (void)_updateUsesNarrowLayout
{
  uint64_t v2;
  void *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[5];
  id v11;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 280), "view");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setNeedsLayout");

    -[BrowserController contentContainerView]((id *)a1);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!*(_QWORD *)(a1 + 792))
    {
      v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0DC3AE8]), "initWithTarget:action:", a1, sel__tabViewPinch_);
      v3 = *(void **)(a1 + 792);
      *(_QWORD *)(a1 + 792) = v2;

      objc_msgSend(*(id *)(a1 + 792), "setDelegate:", a1);
      objc_msgSend(*(id *)(a1 + 792), "_setEndsOnSingleTouch:", 1);
      objc_msgSend(v9, "addGestureRecognizer:", *(_QWORD *)(a1 + 792));
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 384));
      objc_msgSend(WeakRetained, "updateTabViewPinchRecognizerForBrowserController:", a1);

    }
    objc_msgSend(*(id *)(a1 + 280), "navigationBar");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x1E0DC3F10];
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __44__BrowserController__updateUsesNarrowLayout__block_invoke;
    v10[3] = &unk_1E9CF3358;
    v10[4] = a1;
    v7 = v5;
    v11 = v7;
    objc_msgSend(v6, "performWithoutAnimation:", v10);
    objc_msgSend(v7, "setUsesNarrowLayout:", *(unsigned __int8 *)(a1 + 684));

  }
}

void __56__BrowserController__showDefaultBrowserSheetIfNecessary__block_invoke(uint64_t a1)
{
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && -[BrowserController shouldShowDefaultBrowserSheet]((uint64_t)WeakRetained))
    objc_msgSend(WeakRetained[35], "showDefaultBrowserSheet");

}

- (SFSiriLinkCoordinator)siriLinkCoordinator
{
  SFSiriLinkCoordinator *siriLinkCoordinator;
  SFSiriLinkCoordinator *v4;
  SFSiriLinkCoordinator *v5;

  siriLinkCoordinator = self->_siriLinkCoordinator;
  if (!siriLinkCoordinator)
  {
    v4 = (SFSiriLinkCoordinator *)objc_alloc_init(MEMORY[0x1E0D4ED48]);
    v5 = self->_siriLinkCoordinator;
    self->_siriLinkCoordinator = v4;

    -[SFSiriLinkCoordinator setActionPerformer:](self->_siriLinkCoordinator, "setActionPerformer:", self);
    siriLinkCoordinator = self->_siriLinkCoordinator;
  }
  return siriLinkCoordinator;
}

- (void)_restoreDigitalHealthFunctionalityAfterAppTransition
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  if (a1)
  {
    objc_msgSend(a1[104], "startObserving");
    objc_msgSend(a1[43], "activeTabDocument");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_msgSend(a1, "updatePrivateBrowsingAvailabilityWithCompletionHandler:", 0);
      if (objc_msgSend(v5, "shouldObscureForDigitalHealth"))
        -[BrowserController _showDigitalHealthOverlayForTabDocument:withPolicy:animated:]((uint64_t)a1, v5, objc_msgSend(v5, "policy"), 1);
      objc_msgSend(a1[43], "updateUsageTrackingInformationIfNecessary");
      v2 = (void *)MEMORY[0x1E0C99E60];
      objc_msgSend(a1[43], "activeTabDocument");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setWithObject:", v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController _updateDigitalHealthOverlayForTabDocuments:](a1, v4);

    }
  }
}

- (void)updatePrivateBrowsingAvailabilityWithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __76__BrowserController_updatePrivateBrowsingAvailabilityWithCompletionHandler___block_invoke;
  v7[3] = &unk_1E9CF33A8;
  objc_copyWeak(&v9, &location);
  v6 = v4;
  v8 = v6;
  objc_msgSend(v5, "determineIfPrivateBrowsingIsAvailableWithCompletionHandler:", v7);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);

}

- (void)_updateDigitalHealthOverlayForTabDocuments:(_QWORD *)a1
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  void *v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id location;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v20 = a2;
  if (a1 && objc_msgSend(v20, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    v29 = 0u;
    v5 = v20;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v30 != v7)
            objc_enumerationMutation(v5);
          v9 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
          objc_msgSend(v9, "URL", v20);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "safari_canonicalURL");
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          if (v11)
          {
            objc_msgSend(v3, "addObject:", v11);
            objc_msgSend(v4, "addObject:", v9);
          }

        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
      }
      while (v6);
    }

    objc_msgSend(MEMORY[0x1E0CB3868], "weakObjectsPointerArray");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v13 = v4;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v26;
      do
      {
        for (j = 0; j != v14; ++j)
        {
          if (*(_QWORD *)v26 != v15)
            objc_enumerationMutation(v13);
          objc_msgSend(v12, "addPointer:", *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * j), v20);
        }
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
      }
      while (v14);
    }

    objc_initWeak(&location, a1);
    v17 = (void *)a1[104];
    objc_msgSend(v3, "allObjects");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __64__BrowserController__updateDigitalHealthOverlayForTabDocuments___block_invoke;
    v21[3] = &unk_1E9CF41F0;
    objc_copyWeak(&v23, &location);
    v19 = v12;
    v22 = v19;
    objc_msgSend(v17, "getOverlayStateForURLs:withCompletionHandler:", v18, v21);

    objc_destroyWeak(&v23);
    objc_destroyWeak(&location);

  }
}

- (BOOL)shouldShowWhatsNewInPrivateBrowsingSheet
{
  return 0;
}

- (uint64_t)_updateDisableBarHiding
{
  _BYTE *v1;
  void *v2;
  void *v3;

  if (result)
  {
    v1 = (_BYTE *)result;
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v1[682] = objc_msgSend(v2, "integerForKey:", CFSTR("DebugBarCollapsingBehavior")) == 1;

    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v1[408] = objc_msgSend(v3, "integerForKey:", CFSTR("DebugBarCollapsingBehavior")) == 2;

    return objc_msgSend(v1, "updateDynamicBarGeometry");
  }
  return result;
}

- (uint64_t)shouldShowDefaultBrowserSheet
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  if (!a1)
    return 0;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  SFDefaultBrowserSelectionStateKey();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v1, "integerForKey:", v2);

  if (v3 || !objc_msgSend(MEMORY[0x1E0CD56B8], "isBrowserSelectionSheetEligible"))
    return 0;
  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isOnDeviceAppInstallationAllowed");

  return v5;
}

- (uint64_t)_dismissTransientUIAnimated:(uint64_t)a3 dismissalOptions:(void *)a4 completionHandler:
{
  id v7;
  _BOOL4 v8;
  void *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void (**v20)(_QWORD);
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  NSObject *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  char isKindOfClass;
  void *v37;
  void *v38;
  id v39;
  NSObject *group;
  _QWORD block[5];
  id v42;
  uint64_t v43;
  _QWORD v44[4];
  NSObject *v45;
  _QWORD v46[4];
  NSObject *v47;
  _QWORD aBlock[5];
  NSObject *v49;
  _QWORD v50[4];
  NSObject *v51;
  _QWORD v52[4];
  NSObject *v53;

  v39 = a4;
  if (!a1)
  {
    v33 = 0;
    v34 = v39;
    goto LABEL_48;
  }
  group = dispatch_group_create();
  objc_msgSend(*(id *)(a1 + 904), "tabThumbnailCollectionView");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "presentationState") == 1 || objc_msgSend(v7, "presentationState") == 2;

  if ((a3 & 2) == 0)
    objc_msgSend(v7, "dismissAnimated:", a2);
  objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "hideFindOnPage");

  v11 = objc_msgSend((id)a1, "favoritesAreEmbedded");
  v12 = objc_msgSend((id)a1, "favoritesFieldShouldBeExpanded");
  LODWORD(v13) = v10 | v8;
  if ((a3 & 1) == 0)
  {
    v14 = v12;
    if (v11 ^ 1 | v12)
    {
      if (v11)
        v15 = 4;
      else
        v15 = 0;
      dispatch_group_enter(group);
      v52[0] = MEMORY[0x1E0C809B0];
      v52[1] = 3221225472;
      v52[2] = __84__BrowserController__dismissTransientUIAnimated_dismissalOptions_completionHandler___block_invoke;
      v52[3] = &unk_1E9CF31B0;
      v16 = group;
      v53 = v16;
      objc_msgSend((id)a1, "setFavoritesState:animated:completionHandler:", v15, a2, v52);
      objc_msgSend(*(id *)(a1 + 456), "setFavoritesState:", 0);
      LODWORD(v13) = v13 | v14;
      if (((v11 | v13) & 1) == 0)
      {
        objc_msgSend(*(id *)(a1 + 280), "capsuleViewController");
        v13 = objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          dispatch_group_enter(v16);
          objc_msgSend(*(id *)(a1 + 280), "capsuleViewController");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v50[0] = MEMORY[0x1E0C809B0];
          v50[1] = 3221225472;
          v50[2] = __84__BrowserController__dismissTransientUIAnimated_dismissalOptions_completionHandler___block_invoke_2;
          v50[3] = &unk_1E9CF31B0;
          v51 = v16;
          LOBYTE(v13) = objc_msgSend(v17, "transitionToState:animated:completionHandler:", 0, a2, v50);

        }
      }

    }
  }
  -[BrowserController _catalogViewController]((id *)a1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "dismissUniversalSearchFirstTimeExperienceViewControllerIfNeeded");

  if (!*(_BYTE *)(a1 + 578)
    && objc_msgSend(*(id *)(a1 + 728), "isShowingSidebar")
    && objc_msgSend((id)a1, "_bookmarksPresentationStyle") == 1)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __84__BrowserController__dismissTransientUIAnimated_dismissalOptions_completionHandler___block_invoke_3;
    aBlock[3] = &unk_1E9CF3358;
    aBlock[4] = a1;
    v19 = group;
    v49 = v19;
    v20 = (void (**)(_QWORD))_Block_copy(aBlock);
    dispatch_group_enter(v19);
    if ((_DWORD)a2)
      v20[2](v20);
    else
      objc_msgSend(MEMORY[0x1E0DC3F10], "performWithoutAnimation:", v20);

    LOBYTE(v13) = 1;
  }
  objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "dialogController");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v22, "presentedDialog");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23;
  if (v23 && objc_msgSend(v23, "presentationStyle") == 1)
  {
    objc_msgSend(v22, "cancelPresentedDialogIfNeeded");
LABEL_27:
    v25 = 1;
    goto LABEL_29;
  }
  if ((v13 & 1) != 0)
    goto LABEL_27;
  v25 = objc_msgSend((id)a1, "isPresentingModalBookmarksController");
LABEL_29:
  dispatch_group_enter(group);
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 3221225472;
  v46[2] = __84__BrowserController__dismissTransientUIAnimated_dismissalOptions_completionHandler___block_invoke_4;
  v46[3] = &unk_1E9CF31B0;
  v26 = group;
  v47 = v26;
  -[BrowserController _setPresentingModalBookmarksController:exclusively:importHandler:withCollection:bookmarkUUIDString:animated:completion:]((id *)a1, 0, 0, 0, 0, 0, a2, v46);
  objc_msgSend((id)a1, "viewControllerToPresentFrom");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "presentedViewController");
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v28)
    goto LABEL_44;
  if ((a3 & 4) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      goto LABEL_44;
  }
  if ((objc_msgSend(v28, "isBeingDismissed") & 1) != 0)
    goto LABEL_44;
  v29 = v28;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0
        && (!NSClassFromString((NSString *)CFSTR("OBWelcomeController")) || (objc_opt_isKindOfClass() & 1) == 0))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          -[NSObject viewControllers](v29, "viewControllers");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "firstObject");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) != 0)
            goto LABEL_44;
        }
        else
        {

        }
        dispatch_group_enter(v26);
        -[NSObject presentingViewController](v29, "presentingViewController");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v44[0] = MEMORY[0x1E0C809B0];
        v44[1] = 3221225472;
        v44[2] = __84__BrowserController__dismissTransientUIAnimated_dismissalOptions_completionHandler___block_invoke_5;
        v44[3] = &unk_1E9CF31B0;
        v45 = v26;
        objc_msgSend(v30, "dismissViewControllerAnimated:completion:", a2, v44);

        v25 = 1;
        v29 = v45;
      }
    }
  }

LABEL_44:
  objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "printController");
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  if ((v25 & 1) != 0)
    v33 = 1;
  else
    v33 = objc_msgSend(v32, "isDisplayingPrintUI");
  objc_msgSend(v32, "dismissPrintInteractionControllerAnimated:", 1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __84__BrowserController__dismissTransientUIAnimated_dismissalOptions_completionHandler___block_invoke_6;
  block[3] = &unk_1E9CF3CC8;
  block[4] = a1;
  v43 = a3;
  v34 = v39;
  v42 = v39;
  dispatch_group_notify(v26, MEMORY[0x1E0C80D38], block);

LABEL_48:
  return v33;
}

- (BOOL)isPresentingModalBookmarksController
{
  void *v2;
  BOOL v3;

  -[BookmarksNavigationController presentingViewController](self->_modalBookmarksController, "presentingViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (void)showBars
{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "capsuleCollectionView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "selectedItemIsMinimized");

  if (v4)
    objc_msgSend(v8, "transitionToState:animated:completionHandler:", 0, 1, 0);
  -[BrowserController tabBarManager](self, "tabBarManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "inlineTabBar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "revealActiveItemIfNeeded");

  -[BrowserRootViewController dynamicBarAnimator](self->_rootViewController, "dynamicBarAnimator");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "attemptTransitionToState:animated:", 1, 1);

}

- (void)_setPresentingModalBookmarksController:(int)a3 exclusively:(void *)a4 importHandler:(void *)a5 withCollection:(void *)a6 bookmarkUUIDString:(uint64_t)a7 animated:(void *)a8 completion:
{
  id v15;
  id v16;
  id v17;
  void (**v18)(_QWORD);
  id v19;
  BookmarksNavigationController *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  void (**v28)(_QWORD);
  char v29;

  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a8;
  if (a1)
  {
    if (objc_msgSend(a1, "isPresentingModalBookmarksController") == a2
      || objc_msgSend(a1[35], "isShowingDefaultBrowserSheet"))
    {
      if (v18)
        v18[2](v18);
    }
    else
    {
      v19 = a1[20];
      if (a2)
      {
        if (!v19)
        {
          v20 = -[BrowserController _newModalBookmarksControllerWithCollection:showsOnlyActiveCollection:]((uint64_t)a1, v16, v15 != 0);
          v21 = a1[20];
          a1[20] = v20;

        }
        if (v15)
          a3 = 1;
        if (a3 == 1 && v16)
        {
          objc_msgSend(a1[20], "setCurrentCollection:", v16);
        }
        else if (v16)
        {
          objc_msgSend(a1, "setCurrentBookmarksCollection:", v16);
        }
        objc_msgSend(a1[20], "setRootBookmarkUUIDString:", v17);
        objc_msgSend(a1[20], "setImportHandler:", v15);
        objc_msgSend(a1[20], "setPrefersHalfHeightSheetPresentationWithLoweredBar:", a3 ^ 1u);
        objc_msgSend(a1[20], "presentationController");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "setDelegate:", a1);

        -[BrowserController _presentModalViewController:fromBarItem:animated:completion:](a1, a1[20], 3, a7, v18);
      }
      else
      {
        v22 = v19;
        v23 = a1[20];
        a1[20] = 0;

        if ((objc_msgSend(v22, "isBeingDismissed") & 1) == 0)
        {
          objc_msgSend(v22, "presentedViewController");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          if (v24)
          {
            v26[0] = MEMORY[0x1E0C809B0];
            v26[1] = 3221225472;
            v26[2] = __140__BrowserController__setPresentingModalBookmarksController_exclusively_importHandler_withCollection_bookmarkUUIDString_animated_completion___block_invoke;
            v26[3] = &unk_1E9CF3CF0;
            v27 = v22;
            v29 = a7;
            v28 = v18;
            objc_msgSend(v24, "dismissViewControllerAnimated:completion:", 0, v26);

          }
          else
          {
            objc_msgSend(v22, "dismissViewControllerAnimated:completion:", a7, v18);
          }

        }
      }
    }
  }

}

void __84__BrowserController__dismissTransientUIAnimated_dismissalOptions_completionHandler___block_invoke_4(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __84__BrowserController__dismissTransientUIAnimated_dismissalOptions_completionHandler___block_invoke_5(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

- (void)tabDocumentDidChangeSafeAreaInsets:(id)a3
{
  -[BrowserRootViewController updateWebViewSizeAttributes](self->_rootViewController, "updateWebViewSizeAttributes", a3);
}

void __34__BrowserController_adoptSceneID___block_invoke(uint64_t a1, char a2)
{
  NSObject *v3;
  uint64_t v4;

  if ((a2 & 1) == 0)
  {
    v3 = WBS_LOG_CHANNEL_PREFIXTabs();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      __34__BrowserController_adoptSceneID___block_invoke_cold_1(a1, v3, v4);
  }
}

void __34__BrowserController_adoptSceneID___block_invoke_cold_1(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138543362;
  v5 = v3;
  OUTLINED_FUNCTION_2(&dword_1D7CA3000, a2, a3, "Failed to save window state for scene ID: %{public}@", (uint8_t *)&v4);
  OUTLINED_FUNCTION_10();
}

- (void)scene:(id)a3 willConnectToSession:(id)a4 options:(id)a5
{
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void (**intentSceneConfigurationCompletion)(id, id);
  id v15;
  void *v16;
  _BOOL4 v17;
  void *v18;
  UserActivityController *userActivityController;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  char v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  BOOL v45;
  NSObject *v46;
  void *v47;
  TabController *tabController;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  NSObject *v63;
  TabDocument *v64;
  void *v65;
  TabController *v66;
  void *v67;
  NSObject *v68;
  NSObject *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  id WeakRetained;
  id v79;
  _QWORD v80[5];
  id v81;
  _QWORD block[5];
  void *v83;
  uint8_t buf[4];
  void *v85;
  __int16 v86;
  void *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v76 = a3;
  v79 = a4;
  v8 = a5;
  v9 = (id)WBS_LOG_CHANNEL_PREFIXTabs();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v79, "persistentIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController UUID](self, "UUID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v85 = v10;
    v86 = 2114;
    v87 = v11;
    _os_log_impl(&dword_1D7CA3000, v9, OS_LOG_TYPE_DEFAULT, "Connecting to scene session with sceneID = %{public}@, uuid = %{public}@", buf, 0x16u);

  }
  v12 = v76;
  objc_msgSend(v12, "setDelegate:", self);
  objc_msgSend(v12, "screenshotService");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setDelegate:", self);

  objc_msgSend(v12, "setActivityItemsConfigurationSource:", self);
  objc_storeWeak((id *)&self->_scene, v12);
  intentSceneConfigurationCompletion = (void (**)(id, id))self->_intentSceneConfigurationCompletion;
  if (intentSceneConfigurationCompletion)
  {
    intentSceneConfigurationCompletion[2](intentSceneConfigurationCompletion, v12);
    v15 = self->_intentSceneConfigurationCompletion;
    self->_intentSceneConfigurationCompletion = 0;

  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "browserController:willConnectToScene:session:options:", self, v12, v79, v8);
  if (!self->_didConnectToScene)
  {
    -[BrowserController setUpWithURL:launchOptions:](self, "setUpWithURL:launchOptions:", 0, 0);
    self->_didConnectToScene = 1;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:didConnectToScene:session:options:", self, v12, v79, v8);
  -[WBWindowState setNewlyCreated:](self->_windowState, "setNewlyCreated:", 0);
  v77 = objc_loadWeakRetained((id *)&self->_browserWindowController);
  if (!v8)
  {
    v16 = 0;
LABEL_14:
    v17 = 0;
    goto LABEL_16;
  }
  objc_msgSend(MEMORY[0x1E0CA5920], "_sf_windowCreationActivityFromSceneConnectionOptions:", v8);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
  {
    if (objc_msgSend(v77, "modeForNewWindowUserActivity:", v16) == 1)
      -[BrowserController setPrivateBrowsingEnabled:](self, "setPrivateBrowsingEnabled:", 1);
    goto LABEL_14;
  }
  objc_msgSend(v8, "userActivities");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "anyObject");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  userActivityController = self->_userActivityController;
  objc_msgSend(v16, "activityType");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[UserActivityController willContinueUserActivityWithType:](userActivityController, "willContinueUserActivityWithType:", v20);

LABEL_16:
  objc_msgSend(v8, "shortcutItem");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (v21)
  {
    v22 = (id)WBS_LOG_CHANNEL_PREFIXTabs();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v21, "type");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v85 = v23;
      _os_log_impl(&dword_1D7CA3000, v22, OS_LOG_TYPE_DEFAULT, "Handling session connection as shortcutItem of type: %{public}@", buf, 0xCu);

    }
    -[BrowserController windowScene:performActionForShortcutItem:completionHandler:](self, "windowScene:performActionForShortcutItem:completionHandler:", v12, v21, &__block_literal_global_824);
    goto LABEL_42;
  }
  if (!v17)
  {
    objc_msgSend(v16, "_sf_windowCreationNavigationIntent");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (v26
      || (-[BrowserController _openURLNavigationIntentForSceneConnectionOptions:]((uint64_t)self, v8),
          (v26 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      v27 = (id)WBS_LOG_CHANNEL_PREFIXTabs();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v26, "privacyPreservingDescription");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v85 = v28;
        _os_log_impl(&dword_1D7CA3000, v27, OS_LOG_TYPE_DEFAULT, "Handling session connection as navigationIntent: %{public}@", buf, 0xCu);

      }
      if (objc_msgSend(v26, "policy") == 4)
      {
        -[BrowserController browserWindowController](self, "browserWindowController");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "sourceWindowUUID");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "browserControllerWithUUID:", v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "activeProfileIdentifier");
        v32 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v32, "length"))
          -[TabController setActiveProfileIdentifier:](self->_tabController, "setActiveProfileIdentifier:", v32);

      }
      if (objc_msgSend(v26, "type") == 7)
      {
        objc_msgSend(v26, "URL");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "safari_composedIdentifierAndProfileIdentifierInSafariWebExtensionURL");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "second");
        v35 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v35, "length"))
          -[TabController setActiveProfileIdentifier:](self->_tabController, "setActiveProfileIdentifier:", v35);

      }
      if (!-[BrowserController shouldStayInFocusedTabGroupForExternalLinks](self, "shouldStayInFocusedTabGroupForExternalLinks"))-[TabController switchOutOfSyncedTabGroup](self->_tabController, "switchOutOfSyncedTabGroup");
      objc_msgSend(v8, "URLContexts");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = -[BrowserController handleOpenURLContextsForReadingListWidget:](self, v36);

      if ((v37 & 1) == 0)
        -[BrowserController handleNavigationIntent:completion:](self, "handleNavigationIntent:completion:", v26, 0);
      objc_msgSend(v16, "_sf_invalidateWindowCreationData");
      goto LABEL_41;
    }
    objc_msgSend(v16, "_sf_windowCreationTabUUID");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    if (v43)
    {

    }
    else
    {
      objc_msgSend(v16, "_sf_windowCreationTabGroupUUID");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = v44 == 0;

      if (v45)
      {
        objc_msgSend(v16, "_sf_windowCreationRecentlyClosedTabUUID");
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        if (v61)
        {
          -[_SFBrowserSavedState tabStateDataForUUID:](self->_savedState, "tabStateDataForUUID:", v61);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          if (v62)
          {
            v63 = WBS_LOG_CHANNEL_PREFIXTabs();
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D7CA3000, v63, OS_LOG_TYPE_DEFAULT, "Handling session connection as window creation from recently closed tab", buf, 2u);
            }
            -[_SFBrowserSavedState loadSessionStateDataAndRemoveRecentlyClosedTab:](self->_savedState, "loadSessionStateDataAndRemoveRecentlyClosedTab:", v62);
            v64 = -[TabDocument initWithTabStateData:hibernated:browserController:]([TabDocument alloc], "initWithTabStateData:hibernated:browserController:", v62, 0, self);
            -[TabController replaceBlankActiveTabWithTab:](self->_tabController, "replaceBlankActiveTabWithTab:", v64);

          }
          else
          {
            v69 = WBS_LOG_CHANNEL_PREFIXTabs();
            if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
              -[BrowserController scene:willConnectToSession:options:].cold.1();
          }

        }
        else
        {
          v68 = WBS_LOG_CHANNEL_PREFIXTabs();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D7CA3000, v68, OS_LOG_TYPE_INFO, "Not handling session connection as a navigation", buf, 2u);
          }
        }
        goto LABEL_82;
      }
    }
    v46 = WBS_LOG_CHANNEL_PREFIXTabs();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D7CA3000, v46, OS_LOG_TYPE_DEFAULT, "Handling session connection as window creation from tab", buf, 2u);
    }
    objc_msgSend(v16, "_sf_windowCreationTabUUID");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v73 = v47;
    if (v47)
    {
      tabController = self->_tabController;
      objc_msgSend(v47, "UUIDString");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      -[TabController wbTabWithUUID:](tabController, "wbTabWithUUID:", v49);
      v50 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v50 = 0;
    }
    v72 = v50;
    objc_msgSend(v16, "_sf_windowCreationTabGroupUUID");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v75, "UUIDString");
    v51 = objc_claimAutoreleasedReturnValue();
    if (v51)
    {
      v52 = (void *)v51;
    }
    else
    {
      objc_msgSend(v50, "tabGroupUUID");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v52)
      {
        if (!v73)
        {
          v52 = 0;
          v74 = 0;
          -[TabController setActiveProfileIdentifier:](self->_tabController, "setActiveProfileIdentifier:", 0);
LABEL_60:
          if (v75)
          {
            v55 = WBS_LOG_CHANNEL_PREFIXTabs();
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543362;
              v85 = v75;
              _os_log_impl(&dword_1D7CA3000, v55, OS_LOG_TYPE_DEFAULT, "Connecting a scene session with explicit tab group: %{public}@", buf, 0xCu);
            }
            if (v73)
            {
              -[BrowserController tabController](self, "tabController");
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v56, "switchToTabWithUUID:inTabGroupWithUUID:", v73, v75);
LABEL_80:

              goto LABEL_81;
            }
            objc_msgSend(v75, "UUIDString");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            -[BrowserController tabController](self, "tabController");
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v60, "setActiveTabGroupUUID:", v56);
LABEL_79:

            goto LABEL_80;
          }
          if (!v73)
          {
LABEL_81:

            v61 = v73;
LABEL_82:

            v26 = 0;
LABEL_41:

            goto LABEL_42;
          }
          objc_msgSend(v16, "_sf_windowCreationSourceBrowserControllerUUID");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v77, "browserControllerWithUUID:", v57);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v58, "tabController");
          v56 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v56, "tabWithUUID:", v73);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          v60 = v59;
          if (v59)
          {
            v71 = v59;
            -[BrowserController setPrivateBrowsingEnabled:](self, "setPrivateBrowsingEnabled:", objc_msgSend(v59, "isPrivateBrowsingEnabled"));
            -[TabController replaceBlankActiveTabWithTab:](self->_tabController, "replaceBlankActiveTabWithTab:", v71);
          }
          else
          {
            if (!v72)
              goto LABEL_79;
            v71 = 0;
            -[BrowserController setPrivateBrowsingEnabled:](self, "setPrivateBrowsingEnabled:", objc_msgSend(v72, "isPrivateBrowsing"));
            v66 = self->_tabController;
            v83 = v72;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v83, 1);
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            -[TabController activeTabGroup](self->_tabController, "activeTabGroup");
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            -[TabController moveWBTabs:toTabGroup:](v66, "moveWBTabs:toTabGroup:", v70, v67);

            -[TabController removeSingleBlankTabFromActiveTabGroup](self->_tabController, "removeSingleBlankTabFromActiveTabGroup");
          }
          v60 = v71;
          goto LABEL_79;
        }
        -[TabController pinnedTabsManager](self->_tabController, "pinnedTabsManager");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v73, "UUIDString");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v53, "containerForTabWithUUID:", v54);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v65, "activeProfileIdentifier");
        v74 = (void *)objc_claimAutoreleasedReturnValue();

        v52 = 0;
LABEL_59:

        -[TabController setActiveProfileIdentifier:](self->_tabController, "setActiveProfileIdentifier:", v74);
        goto LABEL_60;
      }
    }
    -[TabController tabGroupManager](self->_tabController, "tabGroupManager");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "tabGroupWithUUID:", v52);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "profileIdentifier");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_59;
  }
  v24 = (id)WBS_LOG_CHANNEL_PREFIXTabs();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v16, "activityType");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v85 = v25;
    _os_log_impl(&dword_1D7CA3000, v24, OS_LOG_TYPE_DEFAULT, "Handling session connection as generic NSUserActivity of type: %{public}@", buf, 0xCu);

  }
  -[BrowserController scene:continueUserActivity:](self, "scene:continueUserActivity:", v12, v16);
LABEL_42:

  -[BrowserController _updateSceneTitle]((uint64_t)self);
  v38 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __56__BrowserController_scene_willConnectToSession_options___block_invoke_825;
  block[3] = &unk_1E9CF31B0;
  block[4] = self;
  if (-[BrowserController scene:willConnectToSession:options:]::onceToken != -1)
    dispatch_once(&-[BrowserController scene:willConnectToSession:options:]::onceToken, block);
  +[LaunchStateController sharedController](LaunchStateController, "sharedController");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v80[0] = v38;
  v80[1] = 3221225472;
  v80[2] = __56__BrowserController_scene_willConnectToSession_options___block_invoke_826;
  v80[3] = &unk_1E9CF3358;
  v80[4] = self;
  v40 = v79;
  v81 = v40;
  objc_msgSend(v39, "doAfterUIBecomesActive:", v80);

  objc_msgSend(v8, "cloudKitShareMetadata");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  if (v41)
    -[BrowserController windowScene:userDidAcceptCloudKitShareWithMetadata:](self, "windowScene:userDidAcceptCloudKitShareWithMetadata:", v12, v41);

  objc_msgSend(MEMORY[0x1E0DCCB80], "sharedProxy");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "addSyncObserver:", self);

  -[WBTabGroupManager addTabGroupObserver:](self->_tabGroupManager, "addTabGroupObserver:", self);
}

- (BOOL)canBecomeFirstResponder
{
  int isWindowLockedForPrivate;
  id v4;
  uint64_t v5;
  _SFWebView *webView;
  int v7;

  isWindowLockedForPrivate = -[BrowserController _isWindowLockedForPrivateBrowsing]((uint64_t)self);
  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "presentationState") == 1)
  {

LABEL_6:
    LOBYTE(v7) = 1;
    goto LABEL_7;
  }
  v5 = objc_msgSend(v4, "presentationState");

  if (v5 == 2)
    goto LABEL_6;
  webView = self->_webView;
  if (!webView)
    goto LABEL_6;
  v7 = -[_SFWebView canBecomeFirstResponder](webView, "canBecomeFirstResponder") | isWindowLockedForPrivate;
LABEL_7:

  return v7;
}

- (uint64_t)_isWindowLockedForPrivateBrowsing
{
  void *v1;
  uint64_t v2;

  if (!a1 || !*(_BYTE *)(a1 + 695))
    return 0;
  +[Application sharedApplication](Application, "sharedApplication");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isPrivateBrowsingLocked");

  return v2;
}

- (BOOL)isPrivateBrowsingAvailable
{
  return self->_privateBrowsingAvailable;
}

- (void)_updateTabGroupBanner
{
  void *v2;
  char v3;
  void *v4;
  void *v5;
  char v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  void *v17;
  id v18;
  id location;

  if (a1)
  {
    +[LaunchStateController sharedController](LaunchStateController, "sharedController");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "hasCompletedLaunch");

    if ((v3 & 1) != 0)
    {
      objc_msgSend(a1[43], "activeTabGroup");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[35], "capsuleCollectionViewLayout");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (v5 && (v6 = objc_msgSend(v4, "isNamed"), v5, (v6 & 1) != 0))
      {
        objc_msgSend(a1[93], "tabGroupBanner");
        v7 = (id)objc_claimAutoreleasedReturnValue();
        if (!v7)
        {
          v7 = objc_alloc_init(MEMORY[0x1E0D4ED98]);
          objc_msgSend(a1[93], "setTabGroupBanner:animated:");
        }
        objc_msgSend(v7, "setTabGroup:", v4);
        objc_initWeak(&location, a1);
        v8 = (void *)MEMORY[0x1E0DC3428];
        v9 = *MEMORY[0x1E0D4F2A0];
        v14 = MEMORY[0x1E0C809B0];
        v15 = 3221225472;
        v16 = __42__BrowserController__updateTabGroupBanner__block_invoke;
        v17 = &unk_1E9CF3330;
        objc_copyWeak(&v18, &location);
        objc_msgSend(v8, "actionWithTitle:image:identifier:handler:", &stru_1E9CFDBB0, 0, v9, &v14);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setTabGroupTapAction:", v10, v14, v15, v16, v17);

        +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v9) = objc_msgSend(v11, "areSharedTabGroupsEnabled");

        if ((v9 & 1) != 0)
        {
          objc_msgSend(v7, "collaborationButton");
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v12)
          {
            v13 = (void *)objc_msgSend(a1, "newCollaborationButton");
            objc_msgSend(v7, "setCollaborationButton:", v13);

          }
        }
        objc_destroyWeak(&v18);
        objc_destroyWeak(&location);

      }
      else
      {
        objc_msgSend(a1[93], "setTabGroupBanner:animated:", 0, 0);
      }

    }
  }
}

- (void)updateCollaborationButton
{
  void *v3;
  char v4;
  void *v5;
  WBTabGroupManager *tabGroupManager;
  _QWORD v7[5];
  id v8;

  +[LaunchStateController sharedController](LaunchStateController, "sharedController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hasCompletedLaunch");

  if ((v4 & 1) != 0)
  {
    -[TabController activeTabGroupOrTabGroupVisibleInSwitcher](self->_tabController, "activeTabGroupOrTabGroupVisibleInSwitcher");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v5, "isSyncable") & 1) != 0)
    {
      tabGroupManager = self->_tabGroupManager;
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __46__BrowserController_updateCollaborationButton__block_invoke;
      v7[3] = &unk_1E9CF3C58;
      v7[4] = self;
      v8 = v5;
      -[WBTabGroupManager shareRecordForTabGroup:completionHandler:](tabGroupManager, "shareRecordForTabGroup:completionHandler:", v8, v7);

    }
    else
    {
      -[_SFBarManager setBarItem:hidden:](self->_barManager, "setBarItem:hidden:", 16, 1);
    }

  }
}

- (int64_t)updatePolicyForStartPageController:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  int64_t v7;
  CatalogViewController *v8;
  CatalogViewController *cachedCatalogViewController;
  CatalogViewController *v10;

  +[LaunchStateController sharedController](LaunchStateController, "sharedController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "hasCompletedLaunch"))
  {

  }
  else
  {
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "presentationState");

    if (v6)
      return 0;
  }
  -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
  v8 = (CatalogViewController *)objc_claimAutoreleasedReturnValue();
  cachedCatalogViewController = v8;
  if (!v8)
    cachedCatalogViewController = self->_cachedCatalogViewController;
  v10 = cachedCatalogViewController;

  if (-[BrowserController favoritesAreShowingInPopover](self, "favoritesAreShowingInPopover")
    || -[CatalogViewController startPageDidAppearAtLeastOnce](v10, "startPageDidAppearAtLeastOnce"))
  {
    v7 = 2;
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

- (BOOL)usesTabBar
{
  return self->_usesTabBar;
}

- (void)adoptSceneID:(id)a3
{
  id v4;
  void *v5;
  WBTabGroupManager *tabGroupManager;
  WBWindowState *windowState;
  id v8;
  NSString *v9;
  NSString *sceneID;
  _SFBrowserSavedState *savedState;
  void *v12;
  _QWORD v13[4];
  id v14;

  v4 = a3;
  v5 = (void *)objc_msgSend(v4, "copy");
  -[WBWindowState setSceneID:](self->_windowState, "setSceneID:", v5);

  tabGroupManager = self->_tabGroupManager;
  windowState = self->_windowState;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __34__BrowserController_adoptSceneID___block_invoke;
  v13[3] = &unk_1E9CF3578;
  v8 = v4;
  v14 = v8;
  -[WBTabGroupManager saveWindowState:completionHandler:](tabGroupManager, "saveWindowState:completionHandler:", windowState, v13);
  v9 = (NSString *)objc_msgSend(v8, "copy");
  sceneID = self->_sceneID;
  self->_sceneID = v9;

  savedState = self->_savedState;
  -[BrowserController windowStateData](self, "windowStateData");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[_SFBrowserSavedState updateSceneID:](savedState, "updateSceneID:", v12);

}

- (_SFBrowserWindowStateData)windowStateData
{
  id v3;
  void *v4;
  void *v5;

  v3 = objc_alloc(MEMORY[0x1E0D4EF38]);
  -[NSUUID UUIDString](self->_UUID, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initWithUUIDString:sceneID:", v4, self->_sceneID);

  return (_SFBrowserWindowStateData *)v5;
}

- (WBSWebExtensionWindow)activeWebExtensionWindow
{
  int *v2;

  if (self->_privateBrowsingEnabled && self->_privateBrowsingAvailable)
    v2 = &OBJC_IVAR___BrowserController__privateExtensionWindow;
  else
    v2 = &OBJC_IVAR___BrowserController__normalExtensionWindow;
  return (WBSWebExtensionWindow *)*(id *)((char *)&self->super.super.super.isa + *v2);
}

- (void)_showDefaultBrowserSheetIfNecessary
{
  void *v1;
  _QWORD v2[4];
  id v3;
  id location;

  if (val)
  {
    objc_initWeak(&location, val);
    v1 = (void *)*MEMORY[0x1E0DC4730];
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __56__BrowserController__showDefaultBrowserSheetIfNecessary__block_invoke;
    v2[3] = &unk_1E9CF39C8;
    objc_copyWeak(&v3, &location);
    objc_msgSend(v1, "_performBlockAfterCATransactionCommits:", v2);
    objc_destroyWeak(&v3);
    objc_destroyWeak(&location);
  }
}

- (id)_openURLNavigationIntentForSceneConnectionOptions:(uint64_t)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    objc_msgSend(v3, "URLContexts");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "count"))
    {
      objc_msgSend(MEMORY[0x1E0D4EF70], "builderWithModifierFlags:", 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "allObjects");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "navigationIntentWithOpenURLContexts:", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (void)setWebView:(uint64_t)a1
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  BOOL v8;
  void *v9;
  void *v10;
  void *v11;
  id WeakRetained;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void (**v20)(_QWORD);
  void *v21;
  void *v22;
  _QWORD aBlock[5];
  id v24;
  BOOL v25;

  v4 = a2;
  v5 = v4;
  if (a1 && *(id *)(a1 + 896) != v4)
  {
    objc_msgSend(v4, "_beginPinningInputViews");
    objc_msgSend(*(id *)(a1 + 896), "_endAnimatedResize");
    objc_msgSend(*(id *)(a1 + 744), "crashBanner");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_msgSend(*(id *)(a1 + 744), "crashBanner");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "messageType") == 0;

    }
    else
    {
      v8 = 0;
    }

    objc_msgSend((id)a1, "setShowingCrashBanner:animated:", 0, 0);
    if (*(_BYTE *)(a1 + 122))
      objc_msgSend(*(id *)(a1 + 896), "_endInteractiveObscuredInsetsChange");
    objc_msgSend(*(id *)(a1 + 896), "scrollView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setDelegate:", 0);

    +[TabDocument tabDocumentForWKWebView:](TabDocument, "tabDocumentForWKWebView:", *(_QWORD *)(a1 + 896));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(a1 + 896), a2);
    +[TabDocument tabDocumentForWKWebView:](TabDocument, "tabDocumentForWKWebView:", v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 384));
    if (v10 != v11)
    {
      objc_msgSend(v10, "view");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "removeFromSuperview");
      objc_msgSend(v13, "setGeometryProvider:", 0);
      objc_msgSend(v11, "view");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "browserController:tabDocumentViewGeometryProviderForTabDocumentView:", a1, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setGeometryProvider:", v15);

      objc_msgSend(WeakRetained, "browserController:updateViewForActiveTabDocument:", a1, v11);
      objc_msgSend(*(id *)(a1 + 280), "updateUnifiedBarChromelessScrollDistance");

    }
    if (!*(_BYTE *)(a1 + 577) && objc_msgSend((id)a1, "sf_inResponderChain"))
    {
      objc_msgSend(*(id *)(a1 + 904), "tabThumbnailCollectionView");
      v16 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v16, "presentationState") == 1)
      {

      }
      else
      {
        v17 = objc_msgSend(v16, "presentationState");

        if (v17 != 2)
          objc_msgSend((id)a1, "updateFirstResponderOrFocus");
      }
    }
    objc_msgSend(*(id *)(a1 + 88), "setCurrentWebView:", *(_QWORD *)(a1 + 896));
    objc_msgSend(*(id *)(a1 + 896), "scrollView");
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = *(void **)(a1 + 304);
    *(_QWORD *)(a1 + 304) = v18;

    objc_msgSend(*(id *)(a1 + 280), "setWebView:", v5);
    -[BrowserController _resetCapsuleMinimizationStyleIfNeeded](a1);
    objc_msgSend(*(id *)(a1 + 304), "_setIndicatorInsetAdjustmentBehavior:", 2);
    objc_msgSend(*(id *)(a1 + 304), "setClipsToBounds:", 0);
    objc_msgSend(*(id *)(a1 + 304), "setDelegate:", a1);
    if (*(_BYTE *)(a1 + 122))
      objc_msgSend(*(id *)(a1 + 896), "_beginInteractiveObscuredInsetsChange");
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __32__BrowserController_setWebView___block_invoke;
    aBlock[3] = &unk_1E9CF3550;
    aBlock[4] = a1;
    v25 = v8;
    v24 = v5;
    v20 = (void (**)(_QWORD))_Block_copy(aBlock);
    if ((objc_msgSend(*(id *)(a1 + 88), "isCommittingToContinuousDocument") & 1) != 0
      || (v21 = *(void **)(a1 + 896),
          objc_msgSend(*(id *)(a1 + 200), "webView"),
          v22 = (void *)objc_claimAutoreleasedReturnValue(),
          v22,
          v21 == v22))
    {
      v20[2](v20);
      objc_msgSend((id)a1, "updateExposedScrollViewRect");
      -[BrowserController _updateContinuousReadingViewControllerFrame]((id *)a1);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 896), "_resizeWhileHidingContentWithUpdates:", v20);
    }

  }
}

- (void)_didChangeToFirstResponder:(id)a3
{
  id v4;
  TabController *tabController;
  void *v6;
  objc_super v7;

  v4 = a3;
  v7.receiver = self;
  v7.super_class = (Class)BrowserController;
  -[BrowserController _didChangeToFirstResponder:](&v7, sel__didChangeToFirstResponder_, v4);
  tabController = self->_tabController;
  -[TabController activeTabDocument](tabController, "activeTabDocument");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabController saveTabDocumentUserActivitySoon:](tabController, "saveTabDocumentUserActivitySoon:", v6);

}

void __64__BrowserController__updateDigitalHealthOverlayForTabDocuments___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  _QWORD block[4];
  id v5;
  id v6;
  id v7;

  v3 = a2;
  if (v3)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __64__BrowserController__updateDigitalHealthOverlayForTabDocuments___block_invoke_2;
    block[3] = &unk_1E9CF41C8;
    objc_copyWeak(&v7, (id *)(a1 + 40));
    v5 = v3;
    v6 = *(id *)(a1 + 32);
    dispatch_async(MEMORY[0x1E0C80D38], block);

    objc_destroyWeak(&v7);
  }

}

void __44__BrowserController__updateUsesNarrowLayout__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, void *);
  void *v20;
  id v21;
  id location;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "tabThumbnailCollectionView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "BOOLForKey:", *MEMORY[0x1E0D4F150]);

  if (SFEnhancedTabOverviewEnabled() | v4)
    v5 = 2;
  else
    v5 = 1;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "setTabThumbnailCollectionViewStyle:", v5);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "tabOverview");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setPresentedTabLayout:", 0);

  -[BrowserController _updateTabOverviewBarPlacement](*(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "tabThumbnailCollectionView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2 != v7 && (objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v7, "addPresentationObserver:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "tabThumbnailCollectionView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "setTabThumbnailCollectionView:", v8);
  objc_msgSend(*(id *)(a1 + 32), "updateShowingTabBarAnimated:", 0);
  objc_msgSend(*(id *)(a1 + 40), "setUnifiedFieldShowsProgressView:", 1);
  objc_msgSend(*(id *)(a1 + 32), "updatePrivateBrowsingAvailabilityWithCompletionHandler:", 0);
  if (v2 != v8)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "tabDragDropController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (+[TabDragDropInteractionController canDelegateDragDropForTabCollectionView:](TabDragDropInteractionController, "canDelegateDragDropForTabCollectionView:", v8))
    {
      objc_msgSend(v8, "view");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3780]), "initWithDelegate:", v9);
      objc_msgSend(v10, "addInteraction:", v11);

      v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3750]), "initWithDelegate:", v9);
      objc_msgSend(v12, "setEnabled:", 1);
      objc_msgSend(v10, "addInteraction:", v12);
      +[TabCollectionViewSpringLoadingBehavior addSpringLoadedInteractionToTabView:](TabCollectionViewSpringLoadingBehavior, "addSpringLoadedInteractionToTabView:", v8);
      v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC36C0]), "initWithDelegate:", v9);
      objc_msgSend(v10, "addInteraction:", v13);

    }
    objc_initWeak(&location, *(id *)(a1 + 32));
    v14 = (void *)MEMORY[0x1E0DC3428];
    v17 = MEMORY[0x1E0C809B0];
    v18 = 3221225472;
    v19 = __44__BrowserController__updateUsesNarrowLayout__block_invoke_2;
    v20 = &unk_1E9CF3330;
    objc_copyWeak(&v21, &location);
    objc_msgSend(v14, "actionWithHandler:", &v17);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "toolbar", v17, v18, v19, v20);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "addPrimaryAction:forBarButton:", v15, 0);

    objc_destroyWeak(&v21);
    objc_destroyWeak(&location);

  }
}

- (void)tabController:(id)a3 didSwitchFromTabDocument:(id)a4 toTabDocument:(id)a5
{
  void *v5;
  id v9;
  id v10;
  void *v11;
  void *v12;
  BOOL v13;
  int v14;
  _BOOL8 v15;
  id WeakRetained;
  void *v17;
  void *v18;
  id v19;
  _BOOL4 v20;
  void *v21;
  id v22;
  _BOOL8 v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  BOOL v30;
  id v31;

  v31 = a3;
  v9 = a4;
  v10 = a5;
  if (v9 != v10)
  {
    if (!self->_isMakingFocusedTabDocumentActive)
    {
      -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = (void *)objc_msgSend(v11, "presentationState");

      if (!v12)
      {
        v13 = -[TabController updatingTabGroupTabs](self->_tabController, "updatingTabGroupTabs");
        if (v13)
        {
          v14 = 0;
          v15 = 1;
        }
        else
        {
          objc_msgSend(v9, "libraryType");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (v12)
          {
            v14 = 0;
            v15 = 1;
          }
          else
          {
            objc_msgSend(v10, "libraryType");
            v5 = (void *)objc_claimAutoreleasedReturnValue();
            v12 = 0;
            v15 = v5 != 0;
            v14 = 1;
          }
        }
        -[BrowserController dismissTransientUIAnimated:](self, "dismissTransientUIAnimated:", v15);
        if (v14)

        if (!v13)
        if (!-[BrowserRootViewController isShowingPrivateBrowsingExplanationSheet](self->_rootViewController, "isShowingPrivateBrowsingExplanationSheet")&& !-[BrowserRootViewController isShowingDefaultBrowserSheet](self->_rootViewController, "isShowingDefaultBrowserSheet"))
        {
          -[BrowserRootViewController dismissViewControllerAnimated:completion:](self->_rootViewController, "dismissViewControllerAnimated:completion:", 1, 0);
        }
        -[BrowserController showBars](self, "showBars");
      }
    }
    objc_msgSend(v9, "hideFindOnPage");
    if ((objc_msgSend(v10, "shouldObscureForDigitalHealth") & 1) != 0)
      -[BrowserController _showDigitalHealthOverlayForTabDocument:withPolicy:animated:]((uint64_t)self, v10, objc_msgSend(v10, "policy"), 0);
    else
      -[BrowserController _hideDigitalHealthOverlayForTabDocument:]((id *)&self->super.super.super.isa, v10);
    WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
    objc_msgSend(WeakRetained, "browserControllerMakeKey:", self);

  }
  -[BrowserController switchFromTabDocument:toTabDocument:](self, "switchFromTabDocument:toTabDocument:", v9, v10);
  objc_msgSend(v10, "updateTabTitle");
  objc_msgSend(v10, "updateTabIcon");
  if (v9 != v10)
  {
    -[BrowserRootViewController tabBar](self->_rootViewController, "tabBar");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "tabBarItem");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v19 = (id)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "presentationState") == 1 || objc_msgSend(v19, "presentationState") == 2;

    objc_msgSend(v17, "scrollToItem:animated:", v18, !v20);
    -[BrowserController tabBarManager](self, "tabBarManager");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v22 = (id)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "presentationState") != 1 && objc_msgSend(v22, "presentationState") != 2;

    objc_msgSend(v21, "scrollToActiveItemAnimated:", v23);
    -[BrowserController tabBarManager](self, "tabBarManager");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "minimizedProgressView");
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "navigationBarItem");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "fluidProgressController");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "unregisterObserver:", v25);

    objc_msgSend(v10, "navigationBarItem");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "fluidProgressController");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "registerObserver:", v25);

  }
  v30 = (-[SidebarUIProxy isShowingSidebar](self->_sidebarUIProxy, "isShowingSidebar") & 1) == 0
     && -[BrowserController isShowingStartPage](self, "isShowingStartPage");
  self->_allowsAutoDismissSidebar = v30;
  -[BrowserController updatePresenceForActiveUser](self, "updatePresenceForActiveUser");
  -[BrowserController dismissAutoFillInternalFeedbackToastImmediately:](self, "dismissAutoFillInternalFeedbackToastImmediately:", 1);

}

- (void)updateUsesTabBar
{
  int shouldUseTab;
  int v3;
  TabBar *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  TabBar *v9;

  if (a1)
  {
    if (objc_msgSend(*(id *)(a1 + 280), "isViewLoaded"))
    {
      objc_msgSend(*(id *)(a1 + 280), "updateSuppressesStandaloneTabBar");
      shouldUseTab = -[BrowserController _shouldUseTabBar]((void *)a1);
      if (*(unsigned __int8 *)(a1 + 685) != shouldUseTab)
      {
        v3 = shouldUseTab;
        *(_BYTE *)(a1 + 685) = shouldUseTab;
        if (shouldUseTab)
          v4 = objc_alloc_init(TabBar);
        else
          v4 = 0;
        v9 = v4;
        objc_msgSend(*(id *)(a1 + 280), "setTabBar:");
        objc_msgSend(*(id *)(a1 + 904), "setTabBar:", v9);
        objc_msgSend((id)a1, "updateShowingTabBarAnimated:", 0);
        if (v3)
        {
          objc_msgSend(*(id *)(a1 + 904), "tabDragDropController");
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3780]), "initWithDelegate:", v5);
          -[TabBar addInteraction:](v9, "addInteraction:", v6);

          v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3750]), "initWithDelegate:", v5);
          objc_msgSend(v7, "setEnabled:", 1);
          -[TabBar addInteraction:](v9, "addInteraction:", v7);

          v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC36C0]), "initWithDelegate:", v5);
          -[TabBar addInteraction:](v9, "addInteraction:", v8);

        }
      }
    }
  }
}

- (SidebarUIProxy)sidebarUIProxy
{
  return self->_sidebarUIProxy;
}

- (id)makeSidebarButton
{
  void *v2;
  void *v3;

  -[BrowserController sidebarAction](self, "sidebarAction");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[BarButton sidebarButtonWithPrimaryAction:](BarButton, "sidebarButtonWithPrimaryAction:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (UIAction)sidebarAction
{
  void *v2;
  void *v3;
  _QWORD v5[4];
  id v6;
  id location;

  objc_initWeak(&location, self);
  v2 = (void *)MEMORY[0x1E0DC3428];
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __34__BrowserController_sidebarAction__block_invoke;
  v5[3] = &unk_1E9CF3330;
  objc_copyWeak(&v6, &location);
  objc_msgSend(v2, "actionWithHandler:", v5);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
  return (UIAction *)v3;
}

- (BOOL)dismissTransientUIAnimated:(BOOL)a3
{
  return -[BrowserController _dismissTransientUIAnimated:dismissalOptions:completionHandler:]((uint64_t)self, a3, 0, 0);
}

- (void)dismissAutoFillInternalFeedbackToastImmediately:(BOOL)a3
{
  _BOOL4 v3;
  id WeakRetained;

  v3 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_activeAutoFillInternalFeedbackToastController);
  if (WeakRetained)
  {
    if (v3)
    {
      -[BrowserController _cancelPendingAutoFillInternalFeedbackToastDismissal]((uint64_t)self);
      -[BrowserController _dismissAutoFillInternalFeedbackToast:]((id *)&self->super.super.super.isa, WeakRetained);
    }
    else
    {
      -[BrowserController resetPendingAutoFillInternalFeedbackToastDismissalTimer](self, "resetPendingAutoFillInternalFeedbackToastDismissalTimer");
    }
  }

}

- (void)didBecomeActive
{
  double v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int *v10;
  void *v11;
  void *v12;
  id v13;

  -[TabCollectionViewProviding setSnapshotsEnabled:](self->_tabCollectionViewProvider, "setSnapshotsEnabled:", 1);
  -[TabCollectionViewProviding setPostponedSnapshotInvalidationCondition:](self->_tabCollectionViewProvider, "setPostponedSnapshotInvalidationCondition:", 0);
  -[UIScrollView flashScrollIndicators](self->_scrollView, "flashScrollIndicators");
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  -[NSDate timeIntervalSinceNow](self->_resignActiveDate, "timeIntervalSinceNow");
  if (v3 < -480.0)
  {
    -[BrowserController showBars](self, "showBars");
    -[BrowserRootViewController tabBar](self->_rootViewController, "tabBar");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "tabBarItem");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "scrollToItem:animated:", v5, 0);

    objc_msgSend(v13, "stopAdvertisingProactiveActivityContent");
  }
  -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "resume");

  -[BrowserController _restoreDigitalHealthFunctionalityAfterAppTransition]((id *)&self->super.super.super.isa);
  objc_msgSend(v13, "appBanner");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _setShowingAppBanner:isShowing:]((uint64_t)self, v7, 1);

  if (!self->_suppressWebExtensionEvents)
  {
    objc_msgSend(v13, "webExtensionsController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (self->_privateBrowsingEnabled)
      v10 = &OBJC_IVAR___BrowserController__privateExtensionWindow;
    else
      v10 = &OBJC_IVAR___BrowserController__normalExtensionWindow;
    objc_msgSend(v8, "didActivateWindow:", *(Class *)((char *)&self->super.super.super.isa + *v10));

  }
  -[BrowserController updatePresenceForActiveUser](self, "updatePresenceForActiveUser");
  objc_msgSend(MEMORY[0x1E0C99EA0], "safari_browserDefaults");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController activeProfileIdentifier](self, "activeProfileIdentifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setObject:forKey:", v12, *MEMORY[0x1E0D4F170]);

  setPrimaryWindowEntityFromBrowserController(self);
}

- (void)updatePresenceForActiveUser
{
  WBTabGroupManager *tabGroupManager;
  void *v3;
  void *v4;
  id v5;

  tabGroupManager = self->_tabGroupManager;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[WBTabGroupManager movePresenceForParticipantToTabWithUUID:](tabGroupManager, "movePresenceForParticipantToTabWithUUID:", v4);

}

- (BOOL)catalogViewControllerShouldRequestNetworkedSuggestions:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  char v9;

  v4 = a3;
  if (self->_canPerformPostLaunchActions
    && (-[BrowserController configuration](self, "configuration"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "allowsNetworkedSearchSuggestions"),
        v5,
        (v6 & 1) != 0))
  {
    objc_msgSend(MEMORY[0x1E0DCCB88], "sharedWebFilterSettings");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isWebFilterEnabled");

    v9 = v8 ^ 1;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (BOOL)canAutoFocusURLField
{
  BOOL v3;
  void *v5;

  if (-[BrowserRootViewController isShowingPrivateBrowsingExplanationSheet](self->_rootViewController, "isShowingPrivateBrowsingExplanationSheet")|| -[BrowserController isPrivateBrowsingEnabled](self, "isPrivateBrowsingEnabled")&& -[BrowserController shouldShowWhatsNewInPrivateBrowsingSheet](self, "shouldShowWhatsNewInPrivateBrowsingSheet")|| -[BrowserController isPrivateBrowsingEnabled](self, "isPrivateBrowsingEnabled")&& -[BrowserController shouldShowTurnOnLockedPrivateBrowsingSheet](self, "shouldShowTurnOnLockedPrivateBrowsingSheet")|| -[BrowserRootViewController isShowingDefaultBrowserSheet](self->_rootViewController, "isShowingDefaultBrowserSheet")|| (-[BrowserController shouldShowDefaultBrowserSheet]((uint64_t)self) & 1) != 0)
  {
    return 0;
  }
  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v5, "presentationState") == 0;

  return v3;
}

- (uint64_t)_updateConfiguration
{
  id *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (result)
  {
    v1 = (id *)result;
    v2 = *(void **)(result + 56);
    *(_QWORD *)(result + 56) = 0;

    objc_msgSend(v1, "configuration");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "allowsKeyboardCorrectionLearning");
    objc_msgSend(MEMORY[0x1E0DC3938], "activeKeyboard");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setCorrectionLearningAllowed:", v4);

    objc_msgSend(v1, "configuration");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1[35], "setConfiguration:", v6);

    return objc_msgSend(v1, "updateSpeculativeLoadingPreferences");
  }
  return result;
}

- (uint64_t)_shouldUseTabBar
{
  void *v2;
  uint64_t v3;
  char IsPad;
  void *v5;
  double v6;
  double v7;
  uint64_t v8;

  if (!a1)
    return 0;
  objc_msgSend(MEMORY[0x1E0D4EC80], "sharedFeatureManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v2, "showRectangularTabsInSeparateBar"))
    goto LABEL_8;
  v3 = objc_msgSend(a1, "tabBarDisplayMode");

  if (v3 != 2)
    return 0;
  IsPad = _SFDeviceIsPad();
  if ((IsPad & 1) != 0
    || (objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"),
        v2 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v2, "BOOLForKey:", *MEMORY[0x1E0D4F6C0])))
  {
    objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "bounds");
    v8 = isScreenSizeCurrentlyBigEnoughForTabBar(v6, v7);

    if ((IsPad & 1) != 0)
      return v8;
    goto LABEL_9;
  }
LABEL_8:
  v8 = 0;
LABEL_9:

  return v8;
}

- (int64_t)tabBarDisplayMode
{
  void *v2;
  int v3;

  objc_msgSend(MEMORY[0x1E0C99EA0], "safari_browserDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLForKey:", *MEMORY[0x1E0D4F128]);

  if (v3)
    return 2;
  else
    return 1;
}

- (void)_setSidebarUIProxy:(uint64_t)a1
{
  id v4;

  v4 = a2;
  if (a1)
  {
    objc_storeStrong((id *)(a1 + 728), a2);
    objc_msgSend(*(id *)(a1 + 728), "setSidebarUIProxyDelegate:", a1);
  }

}

- (void)updateApplePayPreferences
{
  id v3;

  objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[WKPreferences _setApplePayCapabilityDisclosureAllowed:](self->_wkPreferences, "_setApplePayCapabilityDisclosureAllowed:", objc_msgSend(v3, "BOOLForKey:", *MEMORY[0x1E0D4F398]));

}

- (void)_updateBookmarksMenuProvider
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;

  if (a1)
  {
    if ((_SFDeviceIsPad() & 1) != 0)
    {
      objc_msgSend((id)a1, "tabBarManager");
      v5 = (id)objc_claimAutoreleasedReturnValue();
      v2 = objc_msgSend(v5, "displayMode");

      v3 = *(void **)(a1 + 808);
      if (v2)
      {
        objc_msgSend(*(id *)(a1 + 344), "tabGroupsMenuForTabGroupButton:", 0);
        v4 = objc_claimAutoreleasedReturnValue();
LABEL_7:
        v6 = (id)v4;
        objc_msgSend(v3, "setBarItem:menu:", 3, v4);

        return;
      }
    }
    else
    {
      v3 = *(void **)(a1 + 808);
    }
    objc_msgSend(MEMORY[0x1E0DC39D0], "sf_bookmarkMenu");
    v4 = objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
}

- (id)_updateContinuousReadingViewControllerFrame
{
  id *v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;

  if (result)
  {
    v1 = result;
    -[BrowserController tabContentContainerView](result);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bounds");
    v4 = v3;
    v6 = v5;

    objc_msgSend(v1[35], "contentContainerViewFrameForBrowserSize:", v4, v6);
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v14 = v13;
    objc_msgSend(v1[11], "view");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setFrame:", v8, v10, v12, v14);

    objc_msgSend(v1[11], "updateOuterScrollView");
    return (id *)objc_msgSend(v1, "updateContinuousPreviewViewFrame");
  }
  return result;
}

- (id)tabContentContainerView
{
  id *v1;
  id WeakRetained;

  v1 = a1;
  if (a1)
  {
    WeakRetained = objc_loadWeakRetained(a1 + 48);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(WeakRetained, "browserControllerTabContentContainerView:", v1);
    else
      objc_msgSend(v1[35], "contentContainerView");
    v1 = (id *)objc_claimAutoreleasedReturnValue();

  }
  return v1;
}

- (void)_prepareTabDocumentForNextContinuousItemIfNeeded
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  if (a1 && !a1[22])
  {
    objc_msgSend(a1, "continuousReadingController");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "nextReadingListItem");
    v13 = (id)objc_claimAutoreleasedReturnValue();

    v3 = v13;
    if (v13)
    {
      objc_msgSend(v13, "URL");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (v4)
      {
        -[BrowserController _cachedDocumentForContinuousReadingItem:](a1, v13);
        v5 = objc_claimAutoreleasedReturnValue();
        v6 = a1[22];
        a1[22] = (id)v5;

        v7 = a1[22];
        if (!v7)
        {
          v8 = -[TabDocument initForBackgroundLoadingWithBrowserController:relatedWebView:webViewToCloneSessionStorageFrom:]([TabDocument alloc], "initForBackgroundLoadingWithBrowserController:relatedWebView:webViewToCloneSessionStorageFrom:", a1, 0, 0);
          v9 = a1[22];
          a1[22] = v8;

          v7 = a1[22];
        }
        objc_msgSend(v7, "beginSuppressingProgressAnimation");
        objc_msgSend(a1[22], "setAllowsRemoteInspection:", 0);
        if (objc_msgSend(a1, "readerShouldBeShownIfPossible")
          && (objc_msgSend(a1[22], "readerWebView"), (v10 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
        {
          objc_msgSend(a1[22], "readerWebView");
          v11 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          objc_msgSend(a1[22], "webView");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
        }
        objc_msgSend(a1[11], "didCreateWebViewForNextDocument:", v11);
        if ((objc_msgSend(a1[22], "suppressWebExtensionEvents") & 1) == 0)
        {
          objc_msgSend(a1[22], "webExtensionsController");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "didOpenTab:", a1[22]);

        }
      }

      v3 = v13;
    }

  }
}

- (void)_updateCurrentContinuousReadingItem
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  ContinuousReadingPreviewView *v10;
  id v11;

  if (a1)
  {
    objc_msgSend(a1[43], "activeTabDocument");
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "continuousReadingController");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v11, "isShowingContinuous"))
    {
      objc_msgSend(v2, "currentReadingListItem");
      v3 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "nextReadingListItem");
      v4 = (void *)v3;
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    -[BrowserController setCurrentContinuousReadingItem:](a1, v4);
    objc_msgSend(a1[11], "previewView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "continuousReadingItem");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isEqual:", v5);

    if ((v8 & 1) == 0)
    {
      objc_msgSend(a1, "nextContinuousItemDocument");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "clearDocumentForContinuousReading:", v9);

      if (v5)
        v10 = -[ContinuousReadingPreviewView initWithContinuousReadingItem:previewingNextDocument:]([ContinuousReadingPreviewView alloc], "initWithContinuousReadingItem:previewingNextDocument:", v5, 1);
      else
        v10 = 0;
      -[BrowserController _setContinuousReadingPreviewView:](a1, v10);
      -[BrowserController _prepareTabDocumentForNextContinuousItemIfNeeded](a1);

    }
  }
}

- (ContinuousReadingController)continuousReadingController
{
  ContinuousReadingController *continuousReadingController;
  ContinuousReadingController *v4;
  ContinuousReadingController *v5;

  continuousReadingController = self->_continuousReadingController;
  if (!continuousReadingController)
  {
    v4 = -[ContinuousReadingController initWithTabController:]([ContinuousReadingController alloc], "initWithTabController:", self->_tabController);
    v5 = self->_continuousReadingController;
    self->_continuousReadingController = v4;

    continuousReadingController = self->_continuousReadingController;
  }
  return continuousReadingController;
}

- (void)setCurrentContinuousReadingItem:(id *)a1
{
  id v3;
  void *v4;
  char v5;
  id v6;

  v6 = a2;
  if (a1)
  {
    objc_msgSend(a1[11], "currentItem");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    if (v3 == v6)
    {

    }
    else
    {
      objc_msgSend(a1[11], "currentItem");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "isEqual:", v6);

      if ((v5 & 1) == 0)
      {
        objc_msgSend(a1[11], "setCurrentItem:", v6);
        -[BrowserController _updateCurrentPageBannerView](a1);
        objc_msgSend(a1, "didChangeContinuousReadingItemInActiveDocument");
      }
    }
  }

}

- (TabDocument)nextContinuousItemDocument
{
  return self->_nextContinuousItemDocument;
}

- (void)clearDocumentForContinuousReading:(id)a3
{
  TabDocument *v4;

  v4 = (TabDocument *)a3;
  if (-[BrowserController isContinuousReadingDocument:](self, "isContinuousReadingDocument:"))
  {
    if (self->_previousContinuousItemDocument == v4)
    {
      -[BrowserController _clearPreviousContinuousItemDocument]((uint64_t)self);
    }
    else if (self->_nextContinuousItemDocument == v4)
    {
      -[BrowserController _clearNextContinuousItemDocument]((uint64_t)self);
    }
  }

}

- (void)_setContinuousReadingPreviewView:(id *)a1
{
  id v3;
  id v4;

  v4 = a2;
  if (a1)
  {
    objc_msgSend(a1[11], "previewView");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    if (v3 != v4)
    {
      objc_msgSend(v3, "removeFromSuperview");
      objc_msgSend(a1[11], "setPreviewView:", v4);
      objc_msgSend(v4, "setAutoresizingMask:", 10);
      objc_msgSend(a1, "updateContinuousPreviewViewFrame");
      objc_msgSend(a1[38], "addSubview:", v4);
      objc_msgSend(a1[35], "updateWebViewSizeAttributes");
    }

  }
}

void __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_15(id *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id WeakRetained;
  id v6;

  objc_msgSend(a1[4], "downloads");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v4, "count");

  if (v2)
  {
    WeakRetained = objc_loadWeakRetained(a1 + 5);
    objc_msgSend(WeakRetained, "loadViewIfNeeded");
    objc_msgSend(WeakRetained, "navigationBar");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setHasToolbar:", 1);

  }
  v6 = objc_loadWeakRetained(a1 + 6);
  objc_msgSend(v6, "setBarItem:hidden:", 11, v2 == 0);

}

- (void)_hideDigitalHealthOverlayForTabDocument:(id *)a1
{
  id v3;
  char v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a2;
  if (a1)
  {
    v8 = v3;
    v4 = -[BrowserController _isTabDocumentFrontMostForDigitalHealth:]((uint64_t)a1, v3);
    v3 = v8;
    if ((v4 & 1) != 0)
    {
      -[BrowserController _screenTimeOverlayViewControllerForTabDocument:](a1, v8);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v5;
      if (v5)
      {
        objc_msgSend(v5, "willMoveToParentViewController:", 0);
        objc_msgSend(v6, "view");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "removeFromSuperview");

        objc_msgSend(v6, "removeFromParentViewController");
        if ((objc_msgSend(a1[43], "hasTabsThatShouldBeObscuredForDigitalHealth") & 1) == 0)
        {

          v6 = 0;
        }
        objc_msgSend(v8, "removeMediaSuspensionReason:", 1);
      }

      v3 = v8;
    }
  }

}

- (id)_screenTimeOverlayViewControllerForTabDocument:(id *)a1
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  if (a1)
  {
    -[BrowserController _screenTimeHostingViewControllerForTabDocument:](a1, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "screenTimeOverlayViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)_updateDigitalHealthViewFrame
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  int shouldShowTab;
  double v11;
  void *v12;
  void *v13;
  id v14;

  if (a1)
  {
    objc_msgSend(a1[35], "screenTimeOverlayViewController");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      v2 = -[BrowserController _frameForScreenTimeOverlayViewControllerView](a1);
      v4 = v3;
      v6 = v5;
      v8 = v7;
      objc_msgSend(v14, "view");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setFrame:", v2, v4, v6, v8);

      shouldShowTab = -[BrowserController _shouldShowTabBar](a1);
      v11 = 0.0;
      if (shouldShowTab)
        +[TabBar defaultHeight](TabBar, "defaultHeight", 0.0);
      objc_msgSend(v14, "setAdditionalVerticalSafeAreaMargin:", v11);
      objc_msgSend(a1[35], "capsuleViewController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "capsuleCollectionView");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "obscuredInsets");
      objc_msgSend(v14, "setAdditionalSafeAreaInsets:");

    }
  }
}

- (id)_screenTimeHostingViewControllerForTabDocument:(id *)a1
{
  id v3;
  void *v4;
  id *v5;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (a1[25] == v3)
    {
      objc_msgSend(v3, "linkPreviewViewController");
      v5 = (id *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = (id *)a1[35];
    }
    a1 = v5;
  }

  return a1;
}

- (uint64_t)_isTabDocumentFrontMostForDigitalHealth:(uint64_t)a1
{
  id v3;
  void *v4;
  id v5;
  void *v6;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(id *)(a1 + 200);
    if (v5)
    {
      a1 = v5 == v3;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      a1 = v6 == v4;

    }
  }

  return a1;
}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_6(uint64_t a1)
{
  uint64_t v2;
  id *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  _QWORD v8[4];
  id v9;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2 == 5)
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_8;
    v6[3] = &unk_1E9CF31B0;
    v3 = &v7;
    v5 = *(void **)(a1 + 40);
    v7 = *(id *)(a1 + 32);
    objc_msgSend(v5, "setShowingCompletions:completionHandler:", 1, v6);
    goto LABEL_6;
  }
  if (v2 == 4 && !*(_BYTE *)(a1 + 56))
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_7;
    v8[3] = &unk_1E9CF31B0;
    v3 = &v9;
    v4 = *(void **)(a1 + 40);
    v9 = *(id *)(a1 + 32);
    objc_msgSend(v4, "setShowingCompletions:completionHandler:", 0, v8);
LABEL_6:

  }
}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_7(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

- (void)dynamicBarAnimatorStateDidChange:(id)a3
{
  id v4;

  v4 = a3;
  if (-[BrowserRootViewController keepBarsMinimized](self->_rootViewController, "keepBarsMinimized")
    && objc_msgSend(v4, "state") == 1
    && !-[BrowserRootViewController isPerformingSizeTransition](self->_rootViewController, "isPerformingSizeTransition"))
  {
    -[BrowserRootViewController setKeepBarsMinimized:](self->_rootViewController, "setKeepBarsMinimized:", 0);
    -[BrowserRootViewController updateWebViewSizeAttributes](self->_rootViewController, "updateWebViewSizeAttributes");
  }

}

- (void)browserViewController:(id)a3 traitCollectionDidChange:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString *v15;
  void *v16;
  NSString *v17;
  BOOL v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = objc_msgSend(v7, "userInterfaceStyle");
  objc_msgSend(v6, "traitCollection");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "userInterfaceStyle");

  if (v8 != v10)
  {
    -[TabCollectionViewProviding setSnapshotInvalidationIsPostponed:](self->_tabCollectionViewProvider, "setSnapshotInvalidationIsPostponed:", 1);
    -[BrowserController _updateConfiguration]((uint64_t)self);
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    -[TabController normalAndPrivateTabs](self->_tabController, "normalAndPrivateTabs", 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v21;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v21 != v13)
            objc_enumerationMutation(v11);
          objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v14++), "updateUsesDarkTheme");
        }
        while (v12 != v14);
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v12);
    }

    -[TabCollectionViewProviding flushPendingSnapshotsWithCompletion:](self->_tabCollectionViewProvider, "flushPendingSnapshotsWithCompletion:", &__block_literal_global_716);
    -[TabCollectionViewProviding setSnapshotInvalidationIsPostponed:](self->_tabCollectionViewProvider, "setSnapshotInvalidationIsPostponed:", 0);
  }
  objc_msgSend(v7, "preferredContentSizeCategory");
  v15 = (NSString *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "traitCollection");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "preferredContentSizeCategory");
  v17 = (NSString *)objc_claimAutoreleasedReturnValue();
  v18 = UIContentSizeCategoryCompareToCategory(v15, v17) == NSOrderedSame;

  if (!v18)
  {
    -[BrowserController _visibleAppBanner]((uint64_t)self);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "invalidateBannerLayout");
    objc_msgSend(v19, "contentSizeCategoryDidChange");
    -[BrowserController _updateAppInfoOverlayFrame]((uint64_t)self);

  }
}

uint64_t __32__BrowserController_setWebView___block_invoke(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "view");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setNeedsLayout");

  -[BrowserController _contentContainerViewFrameDidChange](*(_QWORD *)(a1 + 32));
  if (*(_BYTE *)(a1 + 48))
    objc_msgSend(*(id *)(a1 + 32), "setShowingCrashBanner:animated:", 1, 0);
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 384));
  objc_msgSend(WeakRetained, "updateTabViewPinchRecognizerForBrowserController:", *(_QWORD *)(a1 + 32));

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "view");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "layoutIfNeeded");

  return objc_msgSend(*(id *)(a1 + 40), "_endPinningInputViews");
}

- (void)dealloc
{
  TabController *tabController;
  TabCollectionViewProviding *tabCollectionViewProvider;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSTimer *lastTimerForDelayingSpeculativelyPreloadingTopHit;
  objc_super v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  -[TabController clearBrowserController](self->_tabController, "clearBrowserController");
  tabController = self->_tabController;
  self->_tabController = 0;

  tabCollectionViewProvider = self->_tabCollectionViewProvider;
  self->_tabCollectionViewProvider = 0;

  -[_SFBarManager cancelCoalescedUpdates](self->_barManager, "cancelCoalescedUpdates");
  objc_msgSend(MEMORY[0x1E0CB35B0], "defaultCenter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeObserver:", self);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeObserver:", self);

  -[WKWebpagePreferences removeObserver:forKeyPath:](self->_defaultWebpagePreferences, "removeObserver:forKeyPath:", self, *MEMORY[0x1E0D8B148]);
  objc_msgSend(MEMORY[0x1E0C99EA0], "safari_standardUserDefaultsWithOptimizedKeyValueObserving");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  observableWebKitFeaturesByDefaultsKey();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v15;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v8);
        objc_msgSend(v7, "removeObserver:forKeyPath:", self, *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v11++));
      }
      while (v9 != v11);
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v9);
  }

  -[NSTimer invalidate](self->_lastTimerForDelayingSpeculativelyPreloadingTopHit, "invalidate");
  lastTimerForDelayingSpeculativelyPreloadingTopHit = self->_lastTimerForDelayingSpeculativelyPreloadingTopHit;
  self->_lastTimerForDelayingSpeculativelyPreloadingTopHit = 0;

  v13.receiver = self;
  v13.super_class = (Class)BrowserController;
  -[BrowserController dealloc](&v13, sel_dealloc);
}

- (void)restoreInterfaceAfterElementFullscreen
{
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;

  if (!self->_isPerformingRootViewControllerSizeTransition)
  {
    self->_isRestoringInterfaceAfterElementFullscreen = 1;
    -[BrowserRootViewController view](self->_rootViewController, "view");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "frame");
    v5 = v4;
    v7 = v6;

    -[BrowserController rootViewControllerViewWillTransitionToSize:](self, "rootViewControllerViewWillTransitionToSize:", v5, v7);
    -[BrowserController rootViewControllerViewTransitionFromSize:includingSidebar:animated:](self, "rootViewControllerViewTransitionFromSize:includingSidebar:animated:", 1, 0, v5, v7);
    -[BrowserController rootViewControllerViewDidTransitionFromSize:animated:](self, "rootViewControllerViewDidTransitionFromSize:animated:", 0, v5, v7);
    self->_isRestoringInterfaceAfterElementFullscreen = 0;
  }
}

- (void)statusBarHeightChanged
{
  self->_statusBarHeightChangedWhilePerformingRootViewControllerSizeTransition = self->_isPerformingRootViewControllerSizeTransition;
  if (!self->_isPerformingRootViewControllerSizeTransition)
    -[BrowserController updateViewsAfterStatusBarChange]((id *)&self->super.super.super.isa);
  -[BrowserController updateScrollToTopView](self, "updateScrollToTopView");
}

- (void)updateViewsAfterStatusBarChange
{
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  id WeakRetained;
  void *v29;
  void *v30;
  id v31;

  if (a1)
  {
    objc_msgSend(a1[35], "viewIfLoaded");
    v31 = (id)objc_claimAutoreleasedReturnValue();
    if (v31)
    {
      v2 = a1[38];
      objc_msgSend(v2, "bounds");
      objc_msgSend(v2, "convertRect:toView:", 0);
      v4 = v3;
      v6 = v5;
      v8 = v7;
      v10 = v9;
      objc_msgSend(v31, "setNeedsLayout");
      objc_msgSend(v31, "layoutIfNeeded");
      -[BrowserController _contentContainerViewFrameDidChange]((uint64_t)a1);
      if ((objc_msgSend(a1[112], "_isInFullscreen") & 1) == 0)
      {
        objc_msgSend(a1[38], "bounds");
        v12 = v11;
        v14 = v13;
        v16 = v15;
        v18 = v17;
        objc_msgSend(a1[38], "convertRect:fromView:", 0, v4, v6, v8, v10);
        v20 = v19;
        v22 = v21;
        objc_msgSend(a1[38], "contentInset");
        v25 = -v24;
        if (-(v20 - v12 * 2.0) >= -v24)
          v25 = -(v20 - v12 * 2.0);
        v26 = -v23;
        if (-(v22 - v14 * 2.0) >= -v23)
          v26 = -(v22 - v14 * 2.0);
        objc_msgSend(a1[38], "setBounds:", v25, v26, v16, v18);
      }
      -[BrowserController _updateContinuousReadingViewControllerFrame](a1);
      -[BrowserController _updateCurrentPageBannerViewIfNeeded](a1);
      objc_msgSend(a1, "updateExposedScrollViewRect");
      -[BrowserController _updateAppInfoOverlayFrame]((uint64_t)a1);
      objc_msgSend(a1[35], "navigationBar");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "layoutIfNeeded");

      WeakRetained = objc_loadWeakRetained(a1 + 48);
      objc_msgSend(WeakRetained, "browserControllerLayOutCatalogView:", a1);

      -[BrowserController _catalogViewController](a1);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "view");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "layoutIfNeeded");

    }
  }
}

- (BOOL)_canScrollToTopInView:(uint64_t)a1
{
  id v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  _BOOL8 v9;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    objc_msgSend(v3, "contentOffset");
    v6 = v5;
    objc_msgSend(v4, "contentInset");
    if (v6 > -v7)
    {
      v9 = 1;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 280), "dynamicBarAnimator");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "state") == 0;

    }
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (void)willResignActive
{
  NSDate *v3;
  NSDate *resignActiveDate;
  id WeakRetained;

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v3 = (NSDate *)objc_claimAutoreleasedReturnValue();
  resignActiveDate = self->_resignActiveDate;
  self->_resignActiveDate = v3;

  -[WBTabGroupManager movePresenceForParticipantToTabWithUUID:](self->_tabGroupManager, "movePresenceForParticipantToTabWithUUID:", 0);
  WeakRetained = objc_loadWeakRetained((id *)&self->_browserWindowController);
  objc_msgSend(WeakRetained, "saveBrowserState");

}

- (void)didEnterBackground
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  TabCollectionViewProviding *tabCollectionViewProvider;
  void *v7;
  _QWORD v8[5];
  id v9;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  id location;

  objc_initWeak(&location, self);
  self->_backgrounded = 1;
  v3 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __39__BrowserController_didEnterBackground__block_invoke;
  v15[3] = &unk_1E9CF31B0;
  v15[4] = self;
  objc_msgSend(MEMORY[0x1E0DC3F10], "safari_performWithoutRetargetingAnimations:", v15);
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = *MEMORY[0x1E0DC4878];
  v4 = (void *)*MEMORY[0x1E0DC4730];
  v10[0] = v3;
  v10[1] = 3221225472;
  v10[2] = __39__BrowserController_didEnterBackground__block_invoke_2;
  v10[3] = &unk_1E9CF31D8;
  v10[4] = &v11;
  v5 = objc_msgSend(v4, "beginBackgroundTaskWithName:expirationHandler:", CFSTR("com.apple.mobilesafari.FlushTabSnapshots"), v10);
  v12[3] = v5;
  tabCollectionViewProvider = self->_tabCollectionViewProvider;
  v8[0] = v3;
  v8[1] = 3221225472;
  v8[2] = __39__BrowserController_didEnterBackground__block_invoke_42;
  v8[3] = &unk_1E9CF3200;
  objc_copyWeak(&v9, &location);
  v8[4] = &v11;
  -[TabCollectionViewProviding flushPendingSnapshotsWithCompletion:](tabCollectionViewProvider, "flushPendingSnapshotsWithCompletion:", v8);
  -[TabController closeTabsAutomaticallyIfNecessary](self->_tabController, "closeTabsAutomaticallyIfNecessary");
  -[TabController deactivateAllUsageTrackingInformationIfNecessary](self->_tabController, "deactivateAllUsageTrackingInformationIfNecessary");
  if (!self->_tabDocumentPlayingPIPVideo)
    -[WBSDigitalHealthManager stopObservingWithCompletionHandler:](self->_digitalHealthManager, "stopObservingWithCompletionHandler:", 0);
  +[MediaCaptureStatusBarManager sharedManager](MediaCaptureStatusBarManager, "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "browserControllerDidEnterBackground:", self);

  objc_destroyWeak(&v9);
  _Block_object_dispose(&v11, 8);
  objc_destroyWeak(&location);
}

uint64_t __39__BrowserController_didEnterBackground__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "switchToTabGroupVisibleInSwitcherIfNeeded");
}

uint64_t __39__BrowserController_didEnterBackground__block_invoke_2(uint64_t a1)
{
  NSObject *v2;

  v2 = WBS_LOG_CHANNEL_PREFIXTabSnapshots();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    __39__BrowserController_didEnterBackground__block_invoke_2_cold_1();
  return objc_msgSend((id)*MEMORY[0x1E0DC4730], "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

uint64_t __39__BrowserController_didEnterBackground__block_invoke_42(uint64_t a1, int a2)
{
  id *WeakRetained;

  if (a2)
  {
    WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
    -[BrowserController _flushPendingSnapshotsDidComplete](WeakRetained);

  }
  return objc_msgSend((id)*MEMORY[0x1E0DC4730], "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

- (void)_flushPendingSnapshotsDidComplete
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  id v5[2];
  id location;

  if (val)
  {
    objc_initWeak(&location, val);
    if (*((_BYTE *)val + 694))
    {
      objc_msgSend(val[35], "traitCollection");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = (void *)objc_msgSend(v2, "userInterfaceStyle");

      v4[0] = MEMORY[0x1E0C809B0];
      v4[1] = 3221225472;
      v4[2] = __54__BrowserController__flushPendingSnapshotsDidComplete__block_invoke;
      v4[3] = &unk_1E9CF3228;
      objc_copyWeak(v5, &location);
      v5[1] = v3;
      objc_msgSend(val[113], "setPostponedSnapshotInvalidationCondition:", v4);
      objc_msgSend(val[113], "setSnapshotsEnabled:", 0);
      objc_destroyWeak(v5);
    }
    objc_destroyWeak(&location);
  }
}

BOOL __54__BrowserController__flushPendingSnapshotsDidComplete__block_invoke(uint64_t a1)
{
  id *WeakRetained;
  id *v3;
  void *v4;
  _BOOL8 v5;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[35], "traitCollection");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "userInterfaceStyle") != *(_QWORD *)(a1 + 40);

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)invalidateSourceApplication
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  -[TabController allTabDocuments](self->_tabController, "allTabDocuments", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "invalidateSourceApplication");
      }
      while (v3 != v5);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

- (BOOL)isAnyPageLoaded
{
  void *v2;
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;

  -[TabController windowState](self->_tabController, "windowState");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localTabGroup");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "tabs");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "safari_containsObjectPassingTest:", &__block_literal_global_9) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    objc_msgSend(v2, "privateTabGroup");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "tabs");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v7, "safari_containsObjectPassingTest:", &__block_literal_global_9);

  }
  return v5;
}

BOOL __36__BrowserController_isAnyPageLoaded__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a2, "url");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (void)_showDigitalHealthOverlayForTabDocument:(uint64_t)a3 withPolicy:(uint64_t)a4 animated:
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;

  v15 = a2;
  if (a1)
  {
    objc_msgSend(v15, "addMediaSuspensionReason:", 1);
    if (!*(_BYTE *)(a1 + 686))
    {
      objc_msgSend(*(id *)(a1 + 904), "tabThumbnailCollectionView");
      v7 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v7, "presentationState") == 1)
      {
        v8 = (uint64_t)v7;
      }
      else
      {
        v9 = objc_msgSend(v7, "presentationState");

        if (v9 == 2)
          goto LABEL_8;
        v10 = -[BrowserController _isTabDocumentFrontMostForDigitalHealth:](a1, v15);

        if ((v10 & 1) == 0)
          goto LABEL_9;
        objc_msgSend(v15, "URL");
        v8 = objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
LABEL_6:
          v7 = (id)v8;
LABEL_8:

          goto LABEL_9;
        }
        objc_msgSend((id)a1, "showBars");
        objc_msgSend(*(id *)(a1 + 896), "firstResponder");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "resignFirstResponder");

        -[BrowserController _screenTimeHostingViewControllerForTabDocument:]((id *)a1, v15);
        v7 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "screenTimeOverlayViewController");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v12)
        {
          v13 = objc_alloc_init(MEMORY[0x1E0D4ED30]);
          objc_msgSend(v7, "setScreenTimeOverlayViewController:", v13);
          v12 = v13;
          objc_msgSend(v13, "setDelegate:", a1);
        }
        -[BrowserController _updateDigitalHealthViewFrame]((id *)a1);
        objc_msgSend(v12, "showBlockingViewControllerForURL:withPolicy:animated:", v8, a3, a4);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "setAssociatedBlockingViewController:", v14);
        if (v14)
          -[BrowserController _insertScreenTimeLockoutShieldIntoContentViewForTab:animated:]((id *)a1, v15, a4);
        objc_msgSend(v15, "dismissSiriReaderMediaSessionImmediately:", 0);

      }
      goto LABEL_6;
    }
  }
LABEL_9:

}

- (void)loadURL:(id)a3
{
  void *v4;
  id v5;
  id v6;

  v6 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (id)objc_msgSend(v4, "loadURL:userDriven:", v6, 0);

}

- (BOOL)showDemoModeFeatureDisabledAlert
{
  int v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[5];

  v3 = objc_msgSend(MEMORY[0x1E0DC3470], "isRunningInStoreDemoMode");
  if (v3 && !self->_showingDemoModeAlert)
  {
    self->_showingDemoModeAlert = 1;
    v4 = (void *)MEMORY[0x1E0DC3450];
    _WBSLocalizedString();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "alertControllerWithTitle:message:preferredStyle:", v5, 0, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = (void *)MEMORY[0x1E0DC3448];
    _WBSLocalizedString();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __53__BrowserController_showDemoModeFeatureDisabledAlert__block_invoke;
    v12[3] = &unk_1E9CF3290;
    v12[4] = self;
    objc_msgSend(v7, "actionWithTitle:style:handler:", v8, 1, v12);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addAction:", v9);

    -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "presentViewController:animated:completion:", v6, 1, 0);

  }
  return v3;
}

uint64_t __53__BrowserController_showDemoModeFeatureDisabledAlert__block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 339) = 0;
  return result;
}

- (_SFPageFormatMenuController)pageFormatMenuController
{
  _SFPageFormatMenuController *pageFormatMenuController;
  _SFPageFormatMenuController *v4;
  _SFPageFormatMenuController *v5;

  pageFormatMenuController = self->_pageFormatMenuController;
  if (!pageFormatMenuController)
  {
    v4 = (_SFPageFormatMenuController *)objc_msgSend(objc_alloc(MEMORY[0x1E0CD5728]), "initWithBrowserContentController:", self);
    v5 = self->_pageFormatMenuController;
    self->_pageFormatMenuController = v4;

    pageFormatMenuController = self->_pageFormatMenuController;
  }
  return pageFormatMenuController;
}

uint64_t __48__BrowserController__setShowingTabBar_animated___block_invoke(id *a1)
{
  void *v2;

  objc_msgSend(a1[4], "updateDynamicBarGeometry");
  objc_msgSend(*((id *)a1[4] + 35), "view");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "layoutIfNeeded");

  -[BrowserController _contentContainerViewFrameDidChange]((uint64_t)a1[4]);
  -[BrowserController _updateCurrentPageBannerViewIfNeeded]((id *)a1[4]);
  objc_msgSend(a1[5], "layoutBelowIfNeeded");
  objc_msgSend(a1[6], "layoutSubviews");
  objc_msgSend(a1[7], "setNeedsLayout");
  return objc_msgSend(a1[7], "layoutBelowIfNeeded");
}

- (void)showCrashBanner:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v4 = a4;
  v10 = a3;
  -[BannerController crashBanner](self->_bannerController, "crashBanner");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v10 != 0) == (v6 == 0) || (v7 = objc_msgSend(v10, "messageType"), v7 != objc_msgSend(v6, "messageType")))
  {
    _SFBackdropGroupNameForOwner();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setBackdropGroupName:", v8);

    objc_msgSend(v10, "closeButton");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "addTarget:action:forControlEvents:", self, sel__hideCrashBanner, 64);

    -[BannerController setCrashBanner:animated:](self->_bannerController, "setCrashBanner:animated:", v10, v4);
  }

}

- (void)_hideCrashBanner
{
  -[BrowserController setShowingCrashBanner:animated:](self, "setShowingCrashBanner:animated:", 0, 1);
}

- (uint64_t)_shouldShowBackgroundViewForTabDocument:(uint64_t)a1
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = v3;
  if (a1)
    a1 = objc_msgSend(v3, "isPDFDocument") ^ 1;

  return a1;
}

- (BOOL)canHideBars
{
  void *v2;
  char v3;

  -[BrowserRootViewController dynamicBarAnimator](self->_rootViewController, "dynamicBarAnimator");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "canTransitionToState:", 0);

  return v3;
}

- (void)setUsesNarrowLayout:(BOOL)a3
{
  if (((!self->_usesNarrowLayout ^ a3) & 1) == 0)
  {
    self->_usesNarrowLayout = a3;
    -[BrowserController _updateUsesNarrowLayout]((uint64_t)self);
  }
}

- (uint64_t)_shouldHideCatalogViewControllerForSizeChange
{
  _QWORD *v1;
  unint64_t v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (a1)
  {
    v2 = a1[100];
    if (v2 <= 5)
    {
      if (((1 << v2) & 0x19) != 0)
      {
        -[BrowserController _catalogViewController]((id *)a1);
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v3, "isShowingCompletions") & 1) != 0)
        {
          LOBYTE(v1) = 1;
        }
        else
        {
          objc_msgSend((id)v1[35], "unifiedField");
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v1) = objc_msgSend(v4, "isFirstResponder");

        }
      }
      else
      {
        LOBYTE(v1) = *((_BYTE *)a1 + 489) != 0;
      }
    }
  }
  return v1 & 1;
}

- (void)_downloadsTotalProgressDidChange:(id)a3
{
  double v4;
  double v5;
  void *v6;
  id v7;
  id v8;

  objc_msgSend(MEMORY[0x1E0CD56A8], "sharedManager", a3);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "totalProgress");
  v5 = v4;

  -[_SFBarManager setDownloadsItemProgress:](self->_barManager, "setDownloadsItemProgress:", v5);
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "unifiedTabBarItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setDownloadProgress:animated:", 1, v5);

}

- (void)_downloadManagerDidFinishLastDownload:(id)a3
{
  void *v4;
  _QWORD v5[5];

  -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "capsuleIsMinimized"))
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __59__BrowserController__downloadManagerDidFinishLastDownload___block_invoke;
    v5[3] = &unk_1E9CF31B0;
    v5[4] = self;
    objc_msgSend(v4, "transitionToState:animated:completionHandler:", 0, 1, v5);
  }
  else
  {
    -[_SFBarManager pulseDownloadsItem](self->_barManager, "pulseDownloadsItem");
  }

}

uint64_t __59__BrowserController__downloadManagerDidFinishLastDownload___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 808), "pulseDownloadsItem");
}

- (void)_hasUnviewedDownloadsDidChange:(id)a3
{
  void *v4;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateMenuButtonShowsBadge");

  -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, 0);
}

- (uint64_t)_shouldShowSidebarForSizeChange
{
  uint64_t v1;
  void *v2;
  double v3;
  double v4;

  v1 = a1;
  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 280), "view");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bounds");
    v1 = -[BrowserController _shouldShowSidebarForSizeChangeToSize:](v1, v3, v4);

  }
  return v1;
}

- (uint64_t)_shouldShowSidebarForSizeChangeToSize:(double)a3
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  if (result)
  {
    v5 = result;
    objc_msgSend(*(id *)(result + 904), "tabThumbnailCollectionView");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "presentationState") == 1)
    {

      return 0;
    }
    v7 = objc_msgSend(v6, "presentationState");

    if (v7 == 2)
      return 0;
    v8 = objc_msgSend((id)v5, "bookmarksPresentationStyleForViewOfSize:", a2, a3);
    if ((objc_msgSend(*(id *)(v5 + 728), "isShowingSidebar") & 1) != 0)
    {
      if (v8)
      {
        if (*(_QWORD *)(v5 + 480) == v8)
          return 1;
        if (v8 == 2)
          return -[BrowserController shouldShowSidebarInLandscape]((void *)v5);
      }
      return 0;
    }
    if (a2 <= a3)
      return 0;
    LODWORD(result) = -[BrowserController shouldShowSidebarInLandscape]((void *)v5);
    if (v8 == 2)
      return result;
    else
      return 0;
  }
  return result;
}

- (uint64_t)shouldShowSidebarInLandscape
{
  uint64_t v1;
  void *v2;

  if (!a1 || (objc_msgSend(a1, "usesNarrowLayout") & 1) != 0)
    return 0;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v2, "BOOLForKey:", CFSTR("ShowSidebar"));

  return v1;
}

- (uint64_t)_shouldShowBarsForSizeChange
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  objc_msgSend(a1, "viewControllerToPresentFrom", 0, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "presentedViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "childViewControllers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v3);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v4 = 1;
          goto LABEL_12;
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_12:

  return v4;
}

- (uint64_t)_shouldHideBarsForSizeChange
{
  uint64_t isVertically;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGFloat v22;
  double v23;
  double v24;
  CGFloat v25;
  double v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;
  CGRect v34;

  isVertically = (uint64_t)a1;
  v33 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend(a1, "viewControllerToPresentFrom");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "presentedViewController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "popoverPresentationController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "sourceView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      objc_msgSend(*(id *)(isVertically + 280), "bars", 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      if (v7)
      {
        v8 = *(_QWORD *)v29;
LABEL_5:
        v9 = 0;
        while (1)
        {
          if (*(_QWORD *)v29 != v8)
            objc_enumerationMutation(v6);
          if ((objc_msgSend(v5, "isDescendantOfView:", *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * v9)) & 1) != 0)
            goto LABEL_19;
          if (v7 == ++v9)
          {
            v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
            if (v7)
              goto LABEL_5;
            break;
          }
        }
      }

    }
    objc_msgSend(*(id *)(isVertically + 344), "activeTabDocument");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v5, "isBlank") & 1) != 0
      || (objc_msgSend(v5, "hasQuickLookContent") & 1) != 0
      || (objc_msgSend(v5, "shouldObscureForDigitalHealth") & 1) != 0)
    {
      isVertically = 0;
LABEL_21:

      return isVertically;
    }
    objc_msgSend(v5, "webView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "scrollView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v6, "isScrollEnabled") & 1) != 0)
    {
      objc_msgSend(v6, "contentSize");
      v12 = v11;
      objc_msgSend(v6, "bounds");
      v14 = v13;
      v16 = v15;
      v18 = v17;
      v20 = v19;
      objc_msgSend(v6, "contentInset");
      v22 = v16 + v21;
      v25 = v18 - (v23 + v24);
      v34.size.height = v20 - (v21 + v26);
      v34.origin.x = v14 + v23;
      v34.origin.y = v22;
      v34.size.width = v25;
      if (v12 > CGRectGetHeight(v34) && *(_QWORD *)(isVertically + 472) != 1)
      {
        isVertically = -[BrowserController _isVerticallyConstrained](isVertically);
        goto LABEL_20;
      }
    }
LABEL_19:
    isVertically = 0;
LABEL_20:

    goto LABEL_21;
  }
  return isVertically;
}

- (void)_rootViewControllerViewTransitionFromSize:(uint64_t)a1 includingSidebar:(int)a2 animated:(uint64_t)a3
{
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  CatalogViewControllerState *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  char isKindOfClass;
  void *v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  id WeakRetained;

  if (a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 384));
    objc_msgSend(*(id *)(a1 + 280), "view");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "frame");
    v8 = v7;
    v10 = v9;

    if (objc_msgSend((id)a1, "isPresentingModalBookmarksController")
      && objc_msgSend((id)a1, "bookmarksPresentationStyleForViewOfSize:", v8, v10)
      && (objc_msgSend(*(id *)(a1 + 160), "importHandler"),
          v11 = (void *)objc_claimAutoreleasedReturnValue(),
          v11,
          !v11))
    {
      objc_msgSend((id)a1, "setPresentingModalBookmarksController:withExclusiveCollection:bookmarkUUIDString:animated:", 0, 0, 0, a3);
    }
    else if (-[BrowserController _shouldHideCatalogViewControllerForSizeChange]((_QWORD *)a1))
    {
      v12 = objc_alloc_init(CatalogViewControllerState);
      v13 = *(void **)(a1 + 456);
      *(_QWORD *)(a1 + 456) = v12;

      objc_msgSend(*(id *)(a1 + 456), "setFavoritesState:", *(_QWORD *)(a1 + 800));
      -[BrowserController _catalogViewController]((id *)a1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "beginTransitionToNewSizeClassWithState:", *(_QWORD *)(a1 + 456));
      if (objc_msgSend((id)a1, "favoritesAreEmbedded"))
      {
        objc_msgSend(v14, "dismissCompletionsForSizeClassTransition");
      }
      else
      {
        objc_msgSend((id)a1, "setFavoritesState:", 0);
        objc_msgSend(WeakRetained, "browserController:setCatalogViewController:", a1, 0);
      }

    }
    if ((_SFDeviceIsPad() & 1) == 0)
      objc_msgSend(*(id *)(a1 + 184), "dismissMenu");
    v15 = objc_loadWeakRetained((id *)(a1 + 368));
    objc_msgSend(v15, "navigationController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "presentationController");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) != 0)
      objc_msgSend(v15, "dismissViewControllerAnimated:completion:", 1, 0);
    objc_msgSend(*(id *)(a1 + 280), "view");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "layoutIfNeeded");

    objc_msgSend((id)a1, "setUsesNarrowLayout:", objc_msgSend((id)a1, "_shouldUseNarrowLayout"));
    v20 = *MEMORY[0x1E0C9D538];
    v21 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v22 = *(void **)(a1 + 280);
    -[BrowserController tabContentContainerView]((id *)a1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "bounds");
    objc_msgSend(v22, "contentContainerViewFrameForBrowserSize:", v24, v25);
    v27 = v26;
    v29 = v28;

    v30 = *(void **)(a1 + 280);
    objc_msgSend(v30, "contentContainerView");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "sidebarObscuredInsetsForRect:inCoordinateSpace:", v31, v20, v21, v27, v29);
    v33 = v32;
    v35 = v34;
    v37 = v36;
    v39 = v38;

    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "view");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "setFrame:", v20 + v35, v21 + v33, v27 - (v35 + v39), v29 - (v33 + v37));

    if (a2)
      objc_msgSend(*(id *)(a1 + 728), "setShowingSidebar:completion:", -[BrowserController _shouldShowSidebarForSizeChange](a1), 0);
    objc_msgSend((id)a1, "updateContinuousPreviewViewFrame");
    objc_msgSend((id)a1, "updateDynamicBarGeometry");
    if (-[BrowserController _shouldShowBarsForSizeChange]((void *)a1))
    {
      objc_msgSend((id)a1, "showBars");
    }
    else if (-[BrowserController _shouldHideBarsForSizeChange]((void *)a1))
    {
      -[BrowserController hideBarsForRotation](a1);
    }
    -[BrowserController _updateCurrentPageBannerViewIfNeeded]((id *)a1);
    -[BrowserController _updateContinuousReadingViewControllerFrame]((id *)a1);
    objc_msgSend((id)a1, "updateExposedScrollViewRect");
    objc_msgSend(*(id *)(a1 + 280), "updateWebViewSizeAttributes");
    v42 = *(unsigned __int8 *)(a1 + 685);
    -[BrowserController updateUsesTabBar](a1);
    -[BrowserController _updateUnifiedBar]((id *)a1);
    -[BrowserController _updateTabOverviewBarPlacement](a1);
    objc_msgSend((id)a1, "updateCollaborationButton");
    objc_msgSend(WeakRetained, "browserControllerLayOutCatalogView:", a1);
    -[BrowserController _catalogViewController]((id *)a1);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "updatePreferredContentSize");
    objc_msgSend(v43, "didUpdateObscuredInsetsForSizeTransition");
    objc_msgSend(v43, "view");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "layoutIfNeeded");

    -[BrowserController _topNavigationBar]((id *)a1);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    if (v45)
      objc_msgSend(v43, "setNavigationBar:", v45);

    objc_msgSend(v43, "updateStartPageTopSpacing");
    -[BrowserController _updateButtonsAnimatingTabBar:](a1, v42 != 0);
    objc_msgSend(*(id *)(a1 + 280), "view");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "layoutMargins");
    v48 = v47;
    v50 = v49;
    v52 = v51;
    v54 = v53;
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "appBanner");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v56, "setLayoutMargins:", v48, v50, v52, v54);

    -[BrowserController _updateAppInfoOverlayFrame](a1);
    objc_msgSend((id)a1, "updateScrollToTopView");
    objc_msgSend(*(id *)(a1 + 280), "tabBar");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "tabBarItem");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "scrollToItem:animated:", v59, 0);

    if ((objc_msgSend((id)a1, "_shouldUseNarrowLayout") & 1) == 0)
    {
      if (objc_msgSend((id)a1, "isShowingReader"))
        -[BrowserController _contentContainerViewFrameDidChange](a1);
    }
    -[BrowserController _updateDigitalHealthViewFrame]((id *)a1);
    objc_msgSend(*(id *)(a1 + 280), "contentContainerView");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "layoutIfNeeded");

    -[BrowserController updateWebViewObscuredInsets](a1);
  }
}

- (void)hideBarsForRotation
{
  id v1;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 280), "dynamicBarAnimator");
    v1 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "setMinimumTopBarHeight:", -1.79769313e308);
    objc_msgSend(v1, "attemptTransitionToState:animated:", 0, 0);

  }
}

- (void)rootViewControllerViewWillTransitionToSize:(CGSize)a3
{
  double height;
  double width;
  int v6;
  double v7;
  BOOL v8;
  double v9;
  NSString *queryStringWhilePerformingRootViewControllerSizeTransition;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  id objb;
  id obj;
  id obja;

  height = a3.height;
  width = a3.width;
  self->_freezeWebViewUpdatesForSizeTransition = 1;
  v6 = -[BrowserController _shouldShowBookmarksBarForViewSize:]((uint64_t)self, a3.width);
  -[BrowserController _setShowBookmarksBar:]((uint64_t)self, v6);
  self->_isPerformingRootViewControllerSizeTransition = 1;
  -[BrowserRootViewController traitCollection](self->_rootViewController, "traitCollection");
  objb = (id)objc_claimAutoreleasedReturnValue();
  self->_rootViewControllerVerticalSizeClassBeforeSizeTransition = objc_msgSend(objb, "verticalSizeClass");

  self->_bookmarksPresentationStyleBeforeSizeTransition = -[BrowserController _bookmarksPresentationStyle](self, "_bookmarksPresentationStyle");
  -[BrowserRootViewController view](self->_rootViewController, "view");
  obj = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(obj, "bounds");
  v8 = width != v7;
  if (height != v9)
    v8 = 1;
  self->_rootViewWillChangeDimensions = v8;

  queryStringWhilePerformingRootViewControllerSizeTransition = self->_queryStringWhilePerformingRootViewControllerSizeTransition;
  self->_queryStringWhilePerformingRootViewControllerSizeTransition = 0;

  -[BrowserRootViewController catalogViewController](self->_rootViewController, "catalogViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "queryString");
  obja = (id)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(obja, "length") && self->_rootViewWillChangeDimensions)
    objc_storeStrong((id *)&self->_queryStringWhilePerformingRootViewControllerSizeTransition, obja);
  -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "willUpdateObscuredInsetsForSizeTransition");

  -[BrowserRootViewController contentContainerView](self->_rootViewController, "contentContainerView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "layoutIfNeeded");

  -[BrowserRootViewController view](self->_rootViewController, "view");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "bounds");
  v16 = v15;
  v18 = v17;

  if (width != v16 || height != v18)
  {
    -[TabCollectionViewProviding tabOverview](self->_tabCollectionViewProvider, "tabOverview");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "endAnimation");

  }
}

- (uint64_t)_shouldShowBookmarksBarForViewSize:(uint64_t)a1
{
  if (a1 && _SFDeviceIsPad() && a2 > *MEMORY[0x1E0D4F2B8])
    return -[BrowserController _prefersShowingBookmarksBar](a1);
  else
    return 0;
}

- (void)rootViewControllerViewTransitionFromSize:(CGSize)a3 includingSidebar:(BOOL)a4 animated:(BOOL)a5
{
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[5];
  CGSize v13;
  BOOL v14;
  BOOL v15;

  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __88__BrowserController_rootViewControllerViewTransitionFromSize_includingSidebar_animated___block_invoke;
  v12[3] = &unk_1E9CF32E0;
  v12[4] = self;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v6 = _Block_copy(v12);
  -[BrowserRootViewController view](self->_rootViewController, "view");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "window");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
    goto LABEL_4;
  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "presentationState") == 1)
  {

LABEL_4:
    goto LABEL_5;
  }
  v11 = objc_msgSend(v9, "presentationState");

  if (v11 != 2)
  {
    self->_isTrackingWebViewAnimatedResize = 1;
    -[BrowserController webView](self, "webView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "_beginAnimatedResizeWithUpdates:", v6);
    goto LABEL_6;
  }
LABEL_5:
  -[BrowserController webView](self, "webView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "_resizeWhileHidingContentWithUpdates:", v6);
LABEL_6:

}

void __88__BrowserController_rootViewControllerViewTransitionFromSize_includingSidebar_animated___block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 120) = 0;
  -[BrowserController _rootViewControllerViewTransitionFromSize:includingSidebar:animated:](*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 120) = 1;
}

- (void)rootViewControllerViewDidTransitionFromSize:(CGSize)a3 animated:(BOOL)a4
{
  void *v5;
  CatalogViewControllerState *catalogViewControllerStateForSizeChange;
  CatalogViewControllerState *v7;
  NSString *queryStringWhilePerformingRootViewControllerSizeTransition;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  if (self->_isTrackingWebViewAnimatedResize)
  {
    self->_isTrackingWebViewAnimatedResize = 0;
    -[BrowserController webView](self, "webView", a4, a3.width, a3.height);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_endAnimatedResize");

  }
  self->_isPerformingRootViewControllerSizeTransition = 0;
  if (self->_statusBarHeightChangedWhilePerformingRootViewControllerSizeTransition)
  {
    -[BrowserController updateViewsAfterStatusBarChange]((id *)&self->super.super.super.isa);
    self->_statusBarHeightChangedWhilePerformingRootViewControllerSizeTransition = 0;
  }
  -[BrowserController _contentContainerViewFrameDidChange]((uint64_t)self);
  -[BrowserController _updateDigitalHealthViewFrame]((id *)&self->super.super.super.isa);
  -[BrowserController _updateCurrentPageBannerViewIfNeeded]((id *)&self->super.super.super.isa);
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "appBanner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "invalidateBannerLayout");

  -[BrowserController _updateAppInfoOverlayFrame]((uint64_t)self);
  -[BrowserRootViewController layOutTopBars](self->_rootViewController, "layOutTopBars");
  -[BrowserController _updateTabGroupBanner]((id *)&self->super.super.super.isa);
  -[BrowserController updateTabOverviewButton](self, "updateTabOverviewButton");
  -[BrowserRootViewController updateWebViewSizeAttributes](self->_rootViewController, "updateWebViewSizeAttributes");
  self->_freezeWebViewUpdatesForSizeTransition = 0;
  catalogViewControllerStateForSizeChange = self->_catalogViewControllerStateForSizeChange;
  if (catalogViewControllerStateForSizeChange)
  {
    -[BrowserController setFavoritesState:](self, "setFavoritesState:", -[CatalogViewControllerState favoritesState](catalogViewControllerStateForSizeChange, "favoritesState"));
    -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "endTransitionToNewSizeClassWithState:", self->_catalogViewControllerStateForSizeChange);
    v7 = self->_catalogViewControllerStateForSizeChange;
    self->_catalogViewControllerStateForSizeChange = 0;

  }
  if (-[BrowserController favoritesFieldShouldBeExpanded](self, "favoritesFieldShouldBeExpanded"))
  {
    if (self->_queryStringWhilePerformingRootViewControllerSizeTransition)
    {
      -[BrowserRootViewController unifiedField](self->_rootViewController, "unifiedField");
      v12 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setText:", self->_queryStringWhilePerformingRootViewControllerSizeTransition);

      queryStringWhilePerformingRootViewControllerSizeTransition = self->_queryStringWhilePerformingRootViewControllerSizeTransition;
      self->_queryStringWhilePerformingRootViewControllerSizeTransition = 0;

    }
    -[BrowserRootViewController unifiedField](self->_rootViewController, "unifiedField");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "becomeFirstResponder");

  }
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "webViewDidChangeSize");

}

- (CGSize)windowSize
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  CGSize result;

  -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bounds");
  v5 = v4;
  v7 = v6;

  v8 = v5;
  v9 = v7;
  result.height = v9;
  result.width = v8;
  return result;
}

- (TabHoverPreview)tabHoverPreview
{
  id WeakRetained;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "browserControllerTabHoverPreview:", self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (TabHoverPreview *)v4;
}

- (void)animateLinkImage:(CGImage *)a3 fromRect:(CGRect)a4 inView:(id)a5 toBarItem:(int64_t)a6
{
  double height;
  double width;
  double y;
  double x;
  id WeakRetained;
  id v14;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v14 = a5;
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:animateLinkImage:fromRect:inView:toBarItem:", self, a3, v14, a6, x, y, width, height);

}

- (id)_popoverSourceInfoForBarItem:(id *)a1
{
  id *v3;
  void *v4;
  __objc2_class **v5;

  if (a1)
  {
    v3 = a1;
    objc_msgSend(a1[113], "tabThumbnailCollectionView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "presentationState"))
    {

      if ((unint64_t)(a2 - 7) < 2)
      {
        v5 = off_1E9CEEF80;
LABEL_7:
        a1 = (id *)objc_msgSend(objc_alloc(*v5), "initWithBrowserController:barItem:", v3, a2);
        return a1;
      }
    }
    else
    {

    }
    v5 = off_1E9CEE510;
    goto LABEL_7;
  }
  return a1;
}

- (id)_formatMenuButtonPopoverSourceInfo
{
  id v1;
  void *v2;
  _QWORD v4[4];
  id v5;
  id location;

  if (!val)
    return 0;
  objc_initWeak(&location, val);
  v1 = objc_alloc(MEMORY[0x1E0D4EBD0]);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __55__BrowserController__formatMenuButtonPopoverSourceInfo__block_invoke;
  v4[3] = &unk_1E9CF3308;
  objc_copyWeak(&v5, &location);
  v2 = (void *)objc_msgSend(v1, "initWithSourceInfoProvider:", v4);
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
  return v2;
}

id __55__BrowserController__formatMenuButtonPopoverSourceInfo__block_invoke(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  void *v3;
  void *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[35], "primaryNavigationBar");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "formatMenuButtonPopoverSourceInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void __44__BrowserController__updateUsesNarrowLayout__block_invoke_2(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v6, "sender");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (id)objc_msgSend(WeakRetained, "showTabGroupPicker:", v4);

}

void __45__BrowserController_updateDynamicBarGeometry__block_invoke(uint64_t a1)
{
  void *v1;
  void *v3;
  double v4;
  double v5;
  void *v6;
  int v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  id *v16;
  uint64_t v17;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 864));
  objc_msgSend(WeakRetained, "statusBarManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "defaultStatusBarHeightInOrientation:", objc_msgSend(WeakRetained, "interfaceOrientation"));
  v5 = v4;

  objc_msgSend(*(id *)(a1 + 40), "setTopBarHeight:forState:", 1, *(double *)(a1 + 48));
  v6 = *(void **)(a1 + 40);
  v7 = objc_msgSend(*(id *)(a1 + 32), "interfaceFillsScreen");
  v8 = *(void **)(*(_QWORD *)(a1 + 32) + 280);
  if (v7)
  {
    objc_msgSend(v8, "view");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "safeAreaInsets");
    if (v9 <= v5)
      v10 = v5;
    else
      v10 = v9;
    v11 = -v10;
  }
  else
  {
    objc_msgSend(v8, "navigationBarSquishedHeight");
  }
  objc_msgSend(v6, "setTopBarHeight:forState:", 0, v11);
  if (v7)

  objc_msgSend(*(id *)(a1 + 40), "setBottomBarOffset:forState:", 1, 0.0);
  v12 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "maximumHeightObscuredByBottomToolbar");
  v14 = v13;
  _SFOnePixel();
  objc_msgSend(v12, "setBottomBarOffset:forState:", 0, v14 + v15);
  v16 = *(id **)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v16[35], "offsetForDynamicBarAnimator");
  objc_msgSend(v16, "dynamicBarAnimator:minimumTopBarHeightForOffset:", v17);
  objc_msgSend(*(id *)(a1 + 40), "setMinimumTopBarHeight:");

}

- (double)dynamicBarAnimator:(id)a3 minimumTopBarHeightForOffset:(double)a4
{
  double v6;
  double v7;
  double v8;

  -[BrowserRootViewController navigationBarDesiredHeight](self->_rootViewController, "navigationBarDesiredHeight", a3);
  v7 = v6;
  if (-[BrowserRootViewController toolbarPlacement](self->_rootViewController, "toolbarPlacement") != 1
    && !-[BrowserController isShowingFavorites](self, "isShowingFavorites")
    && !self->_disableBarHiding)
  {
    if (-[BrowserRootViewController keepBarsMinimized](self->_rootViewController, "keepBarsMinimized"))
    {
      return -9999.0;
    }
    else
    {
      -[UIScrollView contentInset](self->_scrollView, "contentInset");
      return v7 - v8 - a4;
    }
  }
  return v7;
}

- (BOOL)dynamicBarAnimator:(id)a3 canTransitionToState:(int64_t)a4 byDraggingWithOffset:(double)a5
{
  char v5;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double MaxY;
  double v15;
  CGRect v17;

  v9 = a3;
  if (a4 == 1)
  {
    v5 = !-[BrowserRootViewController keepBarsMinimized](self->_rootViewController, "keepBarsMinimized");
  }
  else if (!a4)
  {
    if (-[BrowserRootViewController isInteractivelyMinimizingBars](self->_rootViewController, "isInteractivelyMinimizingBars"))
    {
      v5 = 1;
    }
    else
    {
      -[UIScrollView contentSize](self->_scrollView, "contentSize");
      v11 = v10;
      -[UIScrollView contentInset](self->_scrollView, "contentInset");
      v13 = v12;
      -[UIScrollView bounds](self->_scrollView, "bounds");
      MaxY = CGRectGetMaxY(v17);
      -[BrowserRootViewController maximumHeightObscuredByBottomToolbar](self->_rootViewController, "maximumHeightObscuredByBottomToolbar");
      v5 = v11 + v13 - MaxY - a5 > v15;
    }
  }

  return v5 & 1;
}

- (BOOL)gestureRecognizer:(id)a3 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a4
{
  id v6;
  char v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;

  v6 = a4;
  if (self->_tabViewPinchRecognizer == a3)
  {
    -[UIScrollView panGestureRecognizer](self->_scrollView, "panGestureRecognizer");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (v8 == v6)
    {
      v7 = 1;
      v10 = v6;
    }
    else
    {
      -[UIScrollView pinchGestureRecognizer](self->_scrollView, "pinchGestureRecognizer");
      v9 = (id)objc_claimAutoreleasedReturnValue();

      if (v9 == v6)
      {
        v7 = 1;
        goto LABEL_10;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        goto LABEL_2;
      objc_msgSend(v6, "view");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "view");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v10, "isDescendantOfView:", v12);

    }
    goto LABEL_10;
  }
LABEL_2:
  v7 = 0;
LABEL_10:

  return v7;
}

- (void)updateSearchEngineIfNeeded
{
  if ((-[BrowserController updateSearchEngineIfNeeded]::didInit & 1) == 0)
    -[BrowserController updateSearchEngineIfNeeded]::didInit = 1;
}

- (void)_ABGroupIdentifierDidChange:(id)a3
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  +[Application sharedApplication](Application, "sharedApplication", a3, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "allProcessPools");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v4);
        +[BrowserController _sendABGroupIdentifierToProcessPool:]((uint64_t)BrowserController, *(void **)(*((_QWORD *)&v8 + 1) + 8 * v7++));
      }
      while (v5 != v7);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }

}

+ (void)_sendABTestingEnabledStateToProcessPool:(uint64_t)a1
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = a2;
  objc_opt_self();
  v2 = objc_msgSend(MEMORY[0x1E0D89BE8], "defaultSearchEngineMatchesExperiment");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_setObject:forBundleParameter:", v3, *MEMORY[0x1E0D8B768]);

}

- (void)_trialABGroupIdentifierDidChange:(id)a3
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  +[Application sharedApplication](Application, "sharedApplication", a3, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "allProcessPools");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        +[BrowserController _sendABGroupIdentifierToProcessPool:]((uint64_t)BrowserController, v8);
        +[BrowserController _sendABTestingEnabledStateToProcessPool:]((uint64_t)BrowserController, v8);
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

}

- (void)_tabViewPinch:(id)a3
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "handleTabViewPinchForBrowserController:", self);

}

- (void)handleTabViewPinch
{
  UIPinchGestureRecognizer *v3;
  double v4;
  double v5;
  double v6;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  NSObject *v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  _BOOL4 v17;
  id v18;
  uint64_t v19;
  id v20;
  _BOOL4 v21;
  void *v22;
  void *v23;
  int v24;
  double v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  UIPinchGestureRecognizer *v29;
  uint64_t v30;
  CGPoint v31;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = self->_tabViewPinchRecognizer;
  -[UIPinchGestureRecognizer scale](v3, "scale");
  v5 = v4;
  v6 = fabs(v4);
  if (v6 < 0.0001 || v6 == INFINITY)
  {
    -[UIPinchGestureRecognizer locationInView:](v3, "locationInView:", 0);
    v9 = v8;
    v11 = v10;
    v12 = (id)WBS_LOG_CHANNEL_PREFIXUserInteraction();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      v31.x = v9;
      v31.y = v11;
      NSStringFromCGPoint(v31);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 134218498;
      v25 = v5;
      v26 = 2112;
      v27 = v23;
      v28 = 2112;
      v29 = v3;
      _os_log_fault_impl(&dword_1D7CA3000, v12, OS_LOG_TYPE_FAULT, "Unexpected scale in _tabViewPinch: scale=%f; locationInWindow=%@; gesture=%@",
        (uint8_t *)&v24,
        0x20u);

    }
  }
  v13 = 99.0;
  if (v5 <= 99.0)
    v13 = v5;
  if (v13 >= 0.0001)
    v14 = v13;
  else
    v14 = 0.0001;
  -[TabCollectionViewProviding tabOverview](self->_tabCollectionViewProvider, "tabOverview");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v14 >= 1.0)
  {
    v18 = v15;
    v17 = objc_msgSend(v18, "presentationState") == 1 || objc_msgSend(v18, "presentationState") == 2;

  }
  else
  {
    v17 = 1;
  }
  v19 = -[UIPinchGestureRecognizer state](v3, "state");
  if ((unint64_t)(v19 - 1) < 2)
  {
    if (v17)
    {
      if (!self->_tabViewPinchActive)
      {
        -[UIPinchGestureRecognizer locationInView:](v3, "locationInView:", v16);
        objc_msgSend(v16, "beginInteractivePresentationWithOffset:scale:");
        self->_tabViewPinchActive = 1;
        goto LABEL_35;
      }
    }
    else if (!self->_tabViewPinchActive)
    {
      goto LABEL_35;
    }
    -[UIPinchGestureRecognizer locationInView:](v3, "locationInView:", v16);
    objc_msgSend(v16, "updateInteractivePresentationWithOffset:scale:");
    goto LABEL_35;
  }
  if (v19 == 3)
  {
    if (self->_tabViewPinchActive)
    {
      objc_msgSend(v16, "endInteractivePresentation");
      self->_tabViewPinchActive = 0;
      v20 = v16;
      if (objc_msgSend(v20, "presentationState") == 1)
      {

      }
      else
      {
        v21 = objc_msgSend(v20, "presentationState") == 2;

        if (!v21)
          goto LABEL_35;
      }
      objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "didEnterTabViewWithMethod:", 1);

    }
  }
  else if (v19 == 4 && self->_tabViewPinchActive)
  {
    objc_msgSend(v16, "cancelInteractivePresentation");
    self->_tabViewPinchActive = 0;
  }
LABEL_35:

}

- (void)_updateScrollOffsetForReplacementWebView:(id *)a1
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  CGRect v7;
  CGRect v8;

  v6 = a2;
  if (a1)
  {
    objc_msgSend(a1[35], "dynamicBarAnimator");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "attemptTransitionToState:animated:", 1, 0);

    -[BrowserController tabContentContainerView](a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[35], "navigationBarFrameInCoordinateSpace:", v4);
    CGRectGetMaxY(v7);
    objc_msgSend(v4, "frame");
    CGRectGetMinY(v8);
    objc_msgSend(v6, "scrollView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "contentOffset");
    objc_msgSend(v5, "setContentOffset:");

  }
}

- (UIEdgeInsets)finalObscuredInsetsForScrollView:(id)a3 withVelocity:(CGPoint)a4 targetContentOffset:(CGPoint *)a5
{
  double y;
  double x;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  UIEdgeInsets result;

  y = a4.y;
  x = a4.x;
  v9 = a3;
  -[BrowserController scrollViewWillEndDragging:withVelocity:targetContentOffset:](self, "scrollViewWillEndDragging:withVelocity:targetContentOffset:", v9, a5, x, y);
  -[BrowserRootViewController obscuredScrollViewInsetsConsideringTargetState:insetsDueToSafeArea:](self->_rootViewController, "obscuredScrollViewInsetsConsideringTargetState:insetsDueToSafeArea:", 1, 0);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;

  v18 = v11;
  v19 = v13;
  v20 = v15;
  v21 = v17;
  result.right = v21;
  result.bottom = v20;
  result.left = v19;
  result.top = v18;
  return result;
}

- (uint64_t)_notFocusedEmbeddedState
{
  void *v1;
  uint64_t v2;

  if (!a1)
    return 0;
  -[BrowserController _catalogViewController](a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "isShowingCompletions"))
    v2 = 5;
  else
    v2 = 4;

  return v2;
}

- (void)setFavoritesAreEmbedded:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL4 v5;
  uint64_t v7;

  v4 = a4;
  v5 = a3;
  if (-[BrowserController favoritesAreEmbedded](self, "favoritesAreEmbedded") != a3)
  {
    if (-[BrowserController isFavoritesFieldFocused](self, "isFavoritesFieldFocused"))
    {
      if (v5)
        v7 = 3;
      else
        v7 = 1;
    }
    else if (v5)
    {
      v7 = -[BrowserController _notFocusedEmbeddedState]((id *)&self->super.super.super.isa);
    }
    else
    {
      v7 = 0;
    }
    -[BrowserController setFavoritesState:animated:](self, "setFavoritesState:animated:", v7, v4);
  }
}

- (void)setFavoritesFieldFocused:(BOOL)a3 animated:(BOOL)a4
{
  -[BrowserController setFavoritesFieldFocused:forVoiceSearch:animated:completionHandler:](self, "setFavoritesFieldFocused:forVoiceSearch:animated:completionHandler:", a3, 0, a4, 0);
}

- (void)setFavoritesFieldFocused:(BOOL)a3 forVoiceSearch:(BOOL)a4 animated:(BOOL)a5 completionHandler:(id)a6
{
  _BOOL8 v6;
  _BOOL8 v7;
  _BOOL4 v8;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void (**v15)(void);

  v6 = a5;
  v7 = a4;
  v8 = a3;
  v15 = (void (**)(void))a6;
  if (-[BrowserController isFavoritesFieldFocused](self, "isFavoritesFieldFocused") == v8)
  {
    if (v15)
      v15[2]();
  }
  else
  {
    if (-[BrowserController favoritesAreEmbedded](self, "favoritesAreEmbedded"))
    {
      if (v8)
        v10 = 3;
      else
        v10 = -[BrowserController _notFocusedEmbeddedState]((id *)&self->super.super.super.isa);
    }
    else if (v8)
    {
      v10 = 1;
    }
    else
    {
      v10 = 2;
    }
    -[BrowserController setFavoritesState:forVoiceSearch:animated:completionHandler:](self, "setFavoritesState:forVoiceSearch:animated:completionHandler:", v10, v7, v6, v15);
    +[Application sharedApplication](Application, "sharedApplication");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (((objc_msgSend(v11, "isRunningPPT") | !v8) & 1) != 0
      || v7
      || +[UniversalSearchFirstTimeExperienceViewController hasShownParsecFirstTimeUserExperience](UniversalSearchFirstTimeExperienceViewController, "hasShownParsecFirstTimeUserExperience"))
    {
      goto LABEL_16;
    }
    +[WBSParsecDSession sharedPARSession](UniversalSearchSession, "sharedPARSession");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "bag");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "isEnabled");

    if (v14)
    {
      -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "showUniversalSearchFirstTimeExperienceIfNotShowing");
LABEL_16:

    }
  }

}

- (void)cancelFavorites
{
  -[BrowserController cancelFavoritesAnimated:](self, "cancelFavoritesAnimated:", 1);
}

- (void)cancelFavoritesAnimated:(BOOL)a3
{
  _BOOL8 v3;
  BrowserController *v5;
  uint64_t v6;

  v3 = a3;
  if (-[BrowserController favoritesAreEmbedded](self, "favoritesAreEmbedded"))
  {
    if (-[BrowserController favoritesState](self, "favoritesState") == 3 && self->_shouldKeepKeyboardFocused)
    {
      v5 = self;
      v6 = 3;
    }
    else
    {
      v5 = self;
      v6 = 4;
    }
  }
  else
  {
    v5 = self;
    v6 = 0;
  }
  -[BrowserController setFavoritesState:animated:](v5, "setFavoritesState:animated:", v6, v3);
}

- (void)_bookmarksDidReload:(id)a3
{
  if (!self->_favoritesState)
    -[BrowserController updateFavoritesForNewDocument](self, "updateFavoritesForNewDocument", a3);
}

- (void)tabGroupManager:(id)a3 didUpdateTabGroupWithUUID:(id)a4
{
  void *v5;
  char v6;
  id v7;

  v7 = a4;
  -[TabController activeTabGroupUUID](self->_tabController, "activeTabGroupUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = WBSIsEqual();

  if ((v6 & 1) != 0)
    -[BrowserController _updateTabGroupBanner]((id *)&self->super.super.super.isa);

}

- (void)participants:(id)a3 didJoinSharedTabGroupWithUUID:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  char v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v19 = a3;
  v6 = a4;
  -[TabController activeTabGroup](self->_tabController, "activeTabGroup");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "isEqual:", v8);

  if ((v9 & 1) != 0)
  {
    v10 = objc_alloc(MEMORY[0x1E0D4EC90]);
    objc_msgSend(v19, "anyObject");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "safari_contact");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v10, "initWithContact:", v12);

    v14 = (void *)MEMORY[0x1E0CB3940];
    _WBSLocalizedString();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "title");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stringWithFormat:", v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setMessageText:", v17);

    v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4EE58]), "initWithContentViewController:", v13);
    objc_msgSend(v18, "setDelegate:", self);
    -[BrowserController _presentToastViewControllerQueuingIfNecessary:]((uint64_t)self, v18);

  }
}

- (void)_presentToastViewControllerQueuingIfNecessary:(uint64_t)a1
{
  id v3;

  v3 = a2;
  if (a1)
  {
    if (*(_QWORD *)(a1 + 552))
      objc_msgSend(*(id *)(a1 + 560), "addObject:", v3);
    else
      -[BrowserController _actuallyPresentToastViewController:](a1, v3);
  }

}

- (void)participants:(id)a3 didLeaveSharedTabGroupWithUUID:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  char v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v19 = a3;
  v6 = a4;
  -[TabController activeTabGroup](self->_tabController, "activeTabGroup");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "isEqual:", v8);

  if ((v9 & 1) != 0)
  {
    v10 = objc_alloc(MEMORY[0x1E0D4EC90]);
    objc_msgSend(v19, "anyObject");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "safari_contact");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v10, "initWithContact:", v12);

    v14 = (void *)MEMORY[0x1E0CB3940];
    _WBSLocalizedString();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "title");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stringWithFormat:", v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setMessageText:", v17);

    v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4EE58]), "initWithContentViewController:", v13);
    objc_msgSend(v18, "setDelegate:", self);
    -[BrowserController _presentToastViewControllerQueuingIfNecessary:]((uint64_t)self, v18);

  }
}

- (void)tabGroupManager:(id)a3 didUpadateActiveParticipants:(id)a4 inTabGroupWithUUID:(id)a5
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = a5;
  if (-[NSMapTable count](self->_cachedParticipantLists, "count"))
  {
    -[TabController activeTabGroup](self->_tabController, "activeTabGroup");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v8, "isEqual:", v10);

    if ((v11 & 1) != 0)
    {
      objc_msgSend(v7, "allObjects");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "safari_mapAndFilterObjectsUsingBlock:", &__block_literal_global_107);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      -[NSMapTable objectEnumerator](self->_cachedParticipantLists, "objectEnumerator");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
      if (v15)
      {
        v16 = *(_QWORD *)v32;
        do
        {
          v17 = 0;
          do
          {
            if (*(_QWORD *)v32 != v16)
              objc_enumerationMutation(v14);
            objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * v17++), "setContacts:", v13);
          }
          while (v15 != v17);
          v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
        }
        while (v15);
      }

      -[_SFBarManager collaborationButton](self->_barManager, "collaborationButton");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController _updateParticipantsListForCollaborationButton:contacts:]((id *)&self->super.super.super.isa, v18, v13);

      -[TabController tabOverviewCollaborationButton](self->_tabController, "tabOverviewCollaborationButton");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController _updateParticipantsListForCollaborationButton:contacts:]((id *)&self->super.super.super.isa, v19, v13);

      -[BannerController tabGroupBanner](self->_bannerController, "tabGroupBanner");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "collaborationButton");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController _updateParticipantsListForCollaborationButton:contacts:]((id *)&self->super.super.super.isa, v21, v13);

      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      -[TabController cachedTabSwitcherShareConfigurationForTabGroup:](self->_tabController, "cachedTabSwitcherShareConfigurationForTabGroup:", v9, 0);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "allCollaborationButtons");
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
      if (v24)
      {
        v25 = *(_QWORD *)v28;
        do
        {
          v26 = 0;
          do
          {
            if (*(_QWORD *)v28 != v25)
              objc_enumerationMutation(v23);
            -[BrowserController _updateParticipantsListForCollaborationButton:contacts:]((id *)&self->super.super.super.isa, *(void **)(*((_QWORD *)&v27 + 1) + 8 * v26++), v13);
          }
          while (v24 != v26);
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
        }
        while (v24);
      }

    }
  }

}

id __85__BrowserController_tabGroupManager_didUpadateActiveParticipants_inTabGroupWithUUID___block_invoke(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "safari_contact");
  return (id)objc_claimAutoreleasedReturnValue();
}

- (void)_updateParticipantsListForCollaborationButton:(void *)a3 contacts:
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if (a1)
  {
    -[BrowserController _participantsListForCollaborationView:](a1, v7);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setDetailViewListContent:", v6);
    objc_msgSend(v6, "setContacts:", v5);

  }
}

- (void)_actuallyPresentToastViewController:(uint64_t)a1
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD v25[5];
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (a1)
  {
    objc_storeStrong((id *)(a1 + 552), a2);
    objc_msgSend(*(id *)(a1 + 280), "addToastViewController:", v4);
    objc_msgSend(v4, "view");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "layoutIfNeeded");

    v6 = objc_msgSend(*(id *)(a1 + 280), "usingUnifiedBar");
    v7 = *(void **)(a1 + 280);
    if (v6)
    {
      objc_msgSend(v7, "unifiedBar");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "bottomAnchor");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "centerXAnchor");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!objc_msgSend(v7, "usingLoweredBar"))
      {
        v9 = 0;
        v10 = 0;
        goto LABEL_9;
      }
      objc_msgSend(*(id *)(a1 + 280), "view");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "safeAreaLayoutGuide");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v8, "centerXAnchor");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 280), "capsuleCollectionViewLayout");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "integerValue");

      if (v13 == 2)
      {
        objc_msgSend(*(id *)(a1 + 280), "topBackdrop");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "bottomAnchor");
        v9 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        objc_msgSend(v8, "topAnchor");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
      }
    }

LABEL_9:
    objc_msgSend(v4, "view");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "topAnchor");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "constraintEqualToAnchor:constant:", v9, -[BrowserController _offsetToPositionToastViewControllerOffscreen:](a1, v4));
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = *(void **)(a1 + 568);
    *(_QWORD *)(a1 + 568) = v17;

    v19 = (void *)MEMORY[0x1E0CB3718];
    v26[0] = *(_QWORD *)(a1 + 568);
    objc_msgSend(v4, "view");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "centerXAnchor");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "constraintEqualToAnchor:", v10);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v26[1] = v22;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 2);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "activateConstraints:", v23);

    objc_msgSend(*(id *)(a1 + 280), "view");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "layoutIfNeeded");

    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __57__BrowserController__actuallyPresentToastViewController___block_invoke;
    v25[3] = &unk_1E9CF31B0;
    v25[4] = a1;
    objc_msgSend(MEMORY[0x1E0DC3F10], "_animateUsingSpringWithDampingRatio:response:tracking:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:animations:completion:", 1, v25, 0, 0.9, 0.6, 0.0, 0.0, 0.0, 0.99);

  }
}

- (double)_offsetToPositionToastViewControllerOffscreen:(uint64_t)a1
{
  id v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  int v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    objc_msgSend(v3, "view");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "frame");
    v7 = v6;

    objc_msgSend(*(id *)(a1 + 280), "capsuleCollectionViewLayout");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "integerValue");

    v10 = *(void **)(a1 + 280);
    if (v9 == 1)
    {
      objc_msgSend(v10, "view");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "safeAreaInsets");
      v13 = -v12;

    }
    else
    {
      v14 = objc_msgSend(v10, "usingUnifiedBar");
      v15 = *(void **)(a1 + 280);
      if (v14)
        objc_msgSend(v15, "unifiedBar");
      else
        objc_msgSend(v15, "topBackdrop");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "frame");
      v18 = v17;
      v20 = v19;

      v13 = -v20 - v18;
    }
    v21 = v13 - v7;
  }
  else
  {
    v21 = 0.0;
  }

  return v21;
}

void __57__BrowserController__actuallyPresentToastViewController___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 568), "setConstant:", 12.0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "view");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "layoutIfNeeded");

}

- (void)didAddTabWithUUID:(id)a3 title:(id)a4 inSharedTabGroupWithUUID:(id)a5 byParticipantWithRecordID:(id)a6
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a4;
  v9 = a5;
  v10 = a6;
  v11 = (void *)MEMORY[0x1E0CB3940];
  _WBSLocalizedString();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringWithFormat:", v12, v14);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _presentAttributedSharedTabNoticeWithMessage:forParticipantWithRecordID:inSharedTabGroupWithUUID:]((uint64_t)self, v13, v10, v9);

}

- (void)_presentAttributedSharedTabNoticeWithMessage:(void *)a3 forParticipantWithRecordID:(void *)a4 inSharedTabGroupWithUUID:
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint64_t v18;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 344), "activeTabGroup");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v9, "isEqual:", v11);

    if ((v12 & 1) != 0)
    {
      v13 = *(void **)(a1 + 752);
      objc_msgSend(*(id *)(a1 + 344), "activeTabGroup");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __118__BrowserController__presentAttributedSharedTabNoticeWithMessage_forParticipantWithRecordID_inSharedTabGroupWithUUID___block_invoke;
      v15[3] = &unk_1E9CF3460;
      v16 = v8;
      v17 = v7;
      v18 = a1;
      objc_msgSend(v13, "shareRecordForTabGroup:completionHandler:", v14, v15);

    }
  }

}

- (void)didNavigateInTabWithUUID:(id)a3 title:(id)a4 inSharedTabGroupWithUUID:(id)a5 byParticipantWithRecordID:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  v20 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "uuid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "UUIDString");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "isEqualToString:", v20);

  if (v16)
  {
    v17 = (void *)MEMORY[0x1E0CB3940];
    _WBSLocalizedString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "stringWithFormat:", v18, v10);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController _presentAttributedSharedTabNoticeWithMessage:forParticipantWithRecordID:inSharedTabGroupWithUUID:]((uint64_t)self, v19, v12, v11);

  }
}

- (void)didRemoveTabWithUUID:(id)a3 title:(id)a4 inSharedTabGroupWithUUID:(id)a5 byParticipantWithRecordID:(id)a6
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a4;
  v9 = a5;
  v10 = a6;
  v11 = (void *)MEMORY[0x1E0CB3940];
  _WBSLocalizedString();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringWithFormat:", v12, v14);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _presentAttributedSharedTabNoticeWithMessage:forParticipantWithRecordID:inSharedTabGroupWithUUID:]((uint64_t)self, v13, v10, v9);

}

- (void)didChangeScopedFavoritesInSharedTabGroupWithUUID:(id)a3 byParticipantWithRecordID:(id)a4
{
  id v6;
  void *v7;
  id v8;

  v8 = a3;
  v6 = a4;
  _WBSLocalizedString();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _presentAttributedSharedTabNoticeWithMessage:forParticipantWithRecordID:inSharedTabGroupWithUUID:]((uint64_t)self, v7, v6, v8);

}

- (void)didChangeBackgroundImageInSharedTabGroupWithUUID:(id)a3 byParticipantWithRecordID:(id)a4
{
  id v6;
  void *v7;
  id v8;

  v8 = a3;
  v6 = a4;
  _WBSLocalizedString();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _presentAttributedSharedTabNoticeWithMessage:forParticipantWithRecordID:inSharedTabGroupWithUUID:]((uint64_t)self, v7, v6, v8);

}

void __118__BrowserController__presentAttributedSharedTabNoticeWithMessage_forParticipantWithRecordID_inSharedTabGroupWithUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __118__BrowserController__presentAttributedSharedTabNoticeWithMessage_forParticipantWithRecordID_inSharedTabGroupWithUUID___block_invoke_2;
  v7[3] = &unk_1E9CF32B8;
  v8 = v3;
  v9 = *(id *)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v10 = v4;
  v11 = v5;
  v6 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], v7);

}

void __118__BrowserController__presentAttributedSharedTabNoticeWithMessage_forParticipantWithRecordID_inSharedTabGroupWithUUID___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  char v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  objc_msgSend(*(id *)(a1 + 32), "participants");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __118__BrowserController__presentAttributedSharedTabNoticeWithMessage_forParticipantWithRecordID_inSharedTabGroupWithUUID___block_invoke_3;
  v10[3] = &unk_1E9CF3438;
  v11 = *(id *)(a1 + 40);
  objc_msgSend(v2, "safari_firstObjectPassingTest:", v10);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "currentUserParticipant");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v3, "isEqual:", v4);

    if ((v5 & 1) == 0)
    {
      v6 = objc_alloc(MEMORY[0x1E0D4EC90]);
      objc_msgSend(v3, "safari_contact");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = (void *)objc_msgSend(v6, "initWithContact:", v7);

      objc_msgSend(v8, "setMessageText:", *(_QWORD *)(a1 + 48));
      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4EE58]), "initWithContentViewController:", v8);
      objc_msgSend(v9, "setDelegate:", *(_QWORD *)(a1 + 56));
      -[BrowserController _presentToastViewControllerQueuingIfNecessary:](*(_QWORD *)(a1 + 56), v9);

    }
  }

}

uint64_t __118__BrowserController__presentAttributedSharedTabNoticeWithMessage_forParticipantWithRecordID_inSharedTabGroupWithUUID___block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "userIdentity");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "userRecordID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEqual:", *(_QWORD *)(a1 + 32));

  return v5;
}

- (void)dismissToastViewController:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;
  _QWORD v10[5];
  id v11;

  v4 = a3;
  v5 = MEMORY[0x1E0C809B0];
  v6 = (void *)MEMORY[0x1E0DC3F10];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __48__BrowserController_dismissToastViewController___block_invoke;
  v10[3] = &unk_1E9CF3358;
  v10[4] = self;
  v11 = v4;
  v8[0] = v5;
  v8[1] = 3221225472;
  v8[2] = __48__BrowserController_dismissToastViewController___block_invoke_2;
  v8[3] = &unk_1E9CF3488;
  v8[4] = self;
  v9 = v11;
  v7 = v11;
  objc_msgSend(v6, "_animateUsingSpringWithDampingRatio:response:tracking:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:animations:completion:", 1, v10, v8, 0.9, 0.6, 0.0, 0.0, 0.0, 0.99);

}

void __48__BrowserController_dismissToastViewController___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 568), "setConstant:", -[BrowserController _offsetToPositionToastViewControllerOffscreen:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 40)));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "view");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "layoutIfNeeded");

}

void __48__BrowserController_dismissToastViewController___block_invoke_2(uint64_t a1)
{
  dispatch_time_t v2;
  uint64_t v3;
  void *v4;
  _QWORD block[5];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "removeToastViewController:", *(_QWORD *)(a1 + 40));
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 560), "count"))
  {
    v2 = dispatch_time(0, 500000000);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __48__BrowserController_dismissToastViewController___block_invoke_3;
    block[3] = &unk_1E9CF31B0;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_after(v2, MEMORY[0x1E0C80D38], block);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 552);
    *(_QWORD *)(v3 + 552) = 0;

  }
}

void __48__BrowserController_dismissToastViewController___block_invoke_3(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 560), "firstObject");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 560), "removeObjectAtIndex:", 0);
  -[BrowserController _actuallyPresentToastViewController:](*(_QWORD *)(a1 + 32), v2);

}

- (id)itemTitleForCloudSharingController:(id)a3
{
  void *v3;
  void *v4;

  -[TabController activeTabGroup](self->_tabController, "activeTabGroup", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "title");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)cloudSharingController:(id)a3 failedToSaveShareWithError:(id)a4
{
  id v4;
  NSObject *v5;

  v4 = a4;
  v5 = (id)WBS_LOG_CHANNEL_PREFIXTabs();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(v4, "safari_privacyPreservingDescription");
    objc_claimAutoreleasedReturnValue();
    -[BrowserController cloudSharingController:failedToSaveShareWithError:].cold.1();
  }

}

- (void)cloudSharingControllerDidStopSharing:(id)a3
{
  -[BrowserRootViewController dismissViewControllerAnimated:completion:](self->_rootViewController, "dismissViewControllerAnimated:completion:", 1, 0);
}

- (void)setFavoritesState:(int64_t)a3
{
  -[BrowserController setFavoritesState:animated:](self, "setFavoritesState:animated:", a3, 0);
}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_2(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 80))
    objc_msgSend(*(id *)(a1 + 32), "stopCompleting");
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 40) + 800))
  {
    objc_msgSend(*(id *)(a1 + 56), "removeFromSuperview");
    objc_msgSend(*(id *)(a1 + 32), "setNavigationBar:", 0);
    objc_msgSend(*(id *)(a1 + 64), "resignFirstResponder");
    -[BrowserController _catalogViewController](*(id **)(a1 + 40));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = *(void **)(a1 + 32);

    if (v2 == v3)
    {
      objc_msgSend(*(id *)(a1 + 72), "browserController:setCatalogViewController:", *(_QWORD *)(a1 + 40), 0);
      -[BrowserController _updateCurrentPageBannerViewIfNeeded](*(id **)(a1 + 40));
      v4 = *(_QWORD *)(a1 + 40);
      v5 = (void *)MEMORY[0x1E0C99E60];
      objc_msgSend(*(id *)(v4 + 344), "activeTabDocument");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setWithObjects:", v6, 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController _updateDigitalHealthOverlayForTabDocuments:]((_QWORD *)v4, v7);

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

uint64_t __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_5(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_8(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_10(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_11(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_12(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[4];
  id v4;

  v1 = *(unsigned __int8 *)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_13;
  v3[3] = &unk_1E9CF31B0;
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "setExpanded:completionHandler:", v1, v3);

}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_13(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_14(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  _QWORD v8[5];
  _QWORD v9[4];
  id v10;
  _QWORD v11[4];
  id v12;

  if (!*(_BYTE *)(a1 + 64) && objc_msgSend(*(id *)(a1 + 32), "isFavoritesFieldFocused"))
  {
    if (*(_BYTE *)(a1 + 65))
    {
      -[BrowserController _catalogViewController](*(id **)(a1 + 32));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "toggleVoiceSearch");

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "becomeFirstResponder");
    }
  }
  if (!*(_BYTE *)(a1 + 66) && objc_msgSend(*(id *)(a1 + 32), "isShowingFavorites"))
  {
    objc_msgSend(*(id *)(a1 + 48), "layoutBelowIfNeeded");
    objc_msgSend(*(id *)(a1 + 48), "setAlpha:", 0.0);
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
    v3 = MEMORY[0x1E0C809B0];
    v4 = (void *)MEMORY[0x1E0DC3F10];
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_15;
    v11[3] = &unk_1E9CF31B0;
    v12 = *(id *)(a1 + 48);
    v9[0] = v3;
    v9[1] = 3221225472;
    v9[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_16;
    v9[3] = &unk_1E9CF3578;
    v10 = *(id *)(a1 + 56);
    objc_msgSend(v4, "animateWithDuration:delay:options:animations:completion:", 327682, v11, v9, 0.2, 0.0);
    if ((objc_msgSend(*(id *)(a1 + 32), "favoritesAreShowingInPopover") & 1) == 0)
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
      v5 = (void *)MEMORY[0x1E0DC3F10];
      v8[0] = v3;
      v8[1] = 3221225472;
      v8[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_17;
      v8[3] = &unk_1E9CF31B0;
      v8[4] = *(_QWORD *)(a1 + 32);
      v6[0] = v3;
      v6[1] = 3221225472;
      v6[2] = __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_18;
      v6[3] = &unk_1E9CF3578;
      v7 = *(id *)(a1 + 56);
      objc_msgSend(v5, "animateWithDuration:delay:options:animations:completion:", 327680, v8, v6, 0.2, 0.1);

    }
    if (UIAccessibilityIsReduceMotionEnabled())
    {
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

      return;
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_15(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_16(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_17(uint64_t a1)
{
  -[BrowserController _updateUnifiedBarBackgroundVisibility](*(id **)(a1 + 32));
}

void __81__BrowserController_setFavoritesState_forVoiceSearch_animated_completionHandler___block_invoke_18(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

- (void)unifiedTabBarActiveTabWasTapped
{
  -[BrowserController _focusNavigationBarWithCompletionHandler:](self, 0);
}

- (void)_focusNavigationBarWithCompletionHandler:(_BYTE *)a1
{
  id v3;

  v3 = a2;
  if (a1)
    -[BrowserController _focusNavigationBarForVoiceSearch:completionHandler:](a1, 0, v3);

}

- (void)toggleVoiceSearch
{
  void *v3;
  uint64_t v4;
  char v5;
  id v6;
  id v7;
  id v8;

  if (-[BrowserController isFavoritesFieldFocused](self, "isFavoritesFieldFocused")
    || (-[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController"),
        v6 = (id)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v6, "capsuleCollectionView"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "selectedItemState"),
        v3,
        v6,
        v4 == 2))
  {
    -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "toggleVoiceSearch");
LABEL_4:

    return;
  }
  objc_msgSend(MEMORY[0x1E0D4EED8], "sharedManager");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v8, "presentDictationDiscoveryAlertIfNeeded");

  if ((v5 & 1) == 0)
  {
    if (-[BrowserRootViewController usingLoweredBar](self->_rootViewController, "usingLoweredBar"))
    {
      -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
      v7 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "transitionToState:options:animated:completionHandler:", 2, 1, 1, 0);
      goto LABEL_4;
    }
    -[BrowserController _focusNavigationBarForVoiceSearch:completionHandler:](self, 1, 0);
  }
}

- (void)_focusNavigationBarForVoiceSearch:(void *)a3 completionHandler:
{
  void (**v5)(_QWORD);
  void *v6;
  _QWORD v7[4];
  void (**v8)(_QWORD);

  v5 = a3;
  v6 = v5;
  if (a1)
  {
    if (a1[691])
    {
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __73__BrowserController__focusNavigationBarForVoiceSearch_completionHandler___block_invoke;
      v7[3] = &unk_1E9CF34B0;
      v8 = v5;
      objc_msgSend(a1, "setFavoritesFieldFocused:forVoiceSearch:animated:completionHandler:", 1, a2, 1, v7);

    }
    else if (v5)
    {
      v5[2](v5);
    }
  }

}

- (void)_voiceSearchAvailabilityDidChange:(id)a3
{
  -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, 1);
}

- (void)prepareForTabDocumentWebViewFullscreenMayReturnToInline:(id)a3
{
  id v4;
  id v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  BrowserController *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  BrowserController *v18;
  id v19;

  v4 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5 == v4)
  {
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v10 = (BrowserController *)objc_claimAutoreleasedReturnValue();
    -[BrowserController dismissAnimated:](v10, "dismissAnimated:", 1);
LABEL_13:

    goto LABEL_14;
  }
  -[TabController currentTabs](self->_tabController, "currentTabs");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "containsObject:", v4);

  if ((v7 & 1) != 0)
  {
LABEL_6:
    v10 = self;
    v11 = v4;
    -[TabCollectionViewProviding tabThumbnailCollectionView](v10->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v12, "presentationState") == 1)
    {

    }
    else
    {
      v13 = objc_msgSend(v12, "presentationState");

      if (v13 != 2)
      {
        v15 = (void *)MEMORY[0x1E0DC3F10];
        -[BrowserRootViewController view](v10->_rootViewController, "view");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 3321888768;
        v17[2] = __77__BrowserController_prepareForTabDocumentWebViewFullscreenMayReturnToInline___block_invoke;
        v17[3] = &__block_descriptor_48_ea8_32c89_ZTSZ77__BrowserController_prepareForTabDocumentWebViewFullscreenMayReturnToInline__E3__0_e5_v8__0l;
        v18 = v10;
        v19 = v11;
        objc_msgSend(v15, "transitionWithView:duration:options:animations:completion:", v16, 5242880, v17, 0, 0.2);

        goto LABEL_12;
      }
    }
    -[TabController setActiveTabDocument:animated:](self->_tabController, "setActiveTabDocument:animated:", v11, 1);
    -[TabCollectionViewProviding tabThumbnailCollectionView](v10->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "dismissAnimated:", 1);

LABEL_12:
    goto LABEL_13;
  }
  if (!objc_msgSend(v4, "isPrivateBrowsingEnabled")
    || (+[Application sharedApplication](Application, "sharedApplication"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v9 = objc_msgSend(v8, "isPrivateBrowsingLocked"),
        v8,
        (v9 & 1) == 0))
  {
    -[BrowserController togglePrivateBrowsingEnabled](self, "togglePrivateBrowsingEnabled");
    goto LABEL_6;
  }
LABEL_14:

}

void __77__BrowserController_prepareForTabDocumentWebViewFullscreenMayReturnToInline___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "setActiveTabDocument:animated:", *(_QWORD *)(a1 + 40), 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "tabThumbnailCollectionView");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dismissAnimated:", 0);

}

- (void)_didChangePowerState
{
  void *v3;
  char v4;
  _QWORD block[5];

  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isLowPowerModeEnabled");

  if ((v4 & 1) != 0)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __41__BrowserController__didChangePowerState__block_invoke;
    block[3] = &unk_1E9CF31B0;
    block[4] = self;
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
}

void __41__BrowserController__didChangePowerState__block_invoke(uint64_t a1)
{
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 880), "isLoading"))
    objc_msgSend(*(id *)(a1 + 32), "clearSpeculativeLoadDocument");
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "isLoading"))
    -[BrowserController _clearPreviousContinuousItemDocument](*(_QWORD *)(a1 + 32));
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "isLoading"))
    -[BrowserController _clearNextContinuousItemDocument](*(_QWORD *)(a1 + 32));
}

- (void)_clearPreviousContinuousItemDocument
{
  void *v2;
  void *v3;
  id v4;

  if (a1)
  {
    v2 = *(void **)(a1 + 224);
    if (v2)
    {
      -[BrowserController _cancelSpeculativeLoadForDocument:](a1, v2);
      objc_msgSend(*(id *)(a1 + 88), "previousItemPreviewView");
      v4 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "replaceContentViewWithItsSnapshot");
      objc_msgSend(v4, "setContentView:", 0);
      objc_msgSend(v4, "setPrefetchingDisabled:", 1);
      -[BrowserController _closeSpeculativelyLoadedDocument:](a1, *(void **)(a1 + 224));
      v3 = *(void **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = 0;

    }
  }
}

- (void)_clearNextContinuousItemDocument
{
  void *v2;
  void *v3;
  id v4;

  if (a1)
  {
    v2 = *(void **)(a1 + 176);
    if (v2)
    {
      -[BrowserController _cancelSpeculativeLoadForDocument:](a1, v2);
      objc_msgSend(*(id *)(a1 + 88), "previewView");
      v4 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "replaceContentViewWithItsSnapshot");
      objc_msgSend(v4, "setContentView:", 0);
      objc_msgSend(v4, "setPrefetchingDisabled:", 1);
      -[BrowserController _closeSpeculativelyLoadedDocument:](a1, *(void **)(a1 + 176));
      v3 = *(void **)(a1 + 176);
      *(_QWORD *)(a1 + 176) = 0;

    }
  }
}

- (void)_completionItem:(void *)a3 wasAcceptedForString:
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v6 = v9;
      if (objc_msgSend(v6, "matchLocation") != 9)
      {
        +[History sharedHistory](History, "sharedHistory");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "originalURLString");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "addAutocompleteTrigger:forURLString:", v5, v8);

      }
    }
  }

}

- (void)catalogViewController:(id)a3 didSelectSearch:(id)a4
{
  id v5;

  v5 = a4;
  -[BrowserController clearSpeculativeLoadDocument](self, "clearSpeculativeLoadDocument");
  -[BrowserController clearContinuousItemDocuments](self, "clearContinuousItemDocuments");
  -[BrowserController _doSearch:](self, v5);
  -[BrowserController setFavoritesState:animated:](self, "setFavoritesState:animated:", 0, 1);

}

- (void)_doSearch:(void *)a1
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0D4EF70], "builder");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "navigationIntentWithSearchText:", v5);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "setProvenance:", 1);
    objc_msgSend(a1, "dispatchNavigationIntent:", v4);

  }
}

- (int64_t)idOfParsecQueryOriginatingFromSearchSuggestion
{
  SearchStateCache *searchStateCache;
  void *v3;
  int64_t v4;

  searchStateCache = self->_searchStateCache;
  if (!searchStateCache)
    return 0;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[SearchStateCache idOfParsecQueryOriginatingFromSearchSuggestionInTabDocument:](searchStateCache, "idOfParsecQueryOriginatingFromSearchSuggestionInTabDocument:", v3);

  return v4;
}

- (void)clearParsecQueryOriginatingFromSearchSuggestion
{
  SearchStateCache *searchStateCache;
  id v3;

  searchStateCache = self->_searchStateCache;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[SearchStateCache clearParsecQueryOriginatingFromSearchSuggestionInTabDocument:](searchStateCache, "clearParsecQueryOriginatingFromSearchSuggestionInTabDocument:");

}

- (void)removeCachedSearchStateForActiveTabDocument
{
  SearchStateCache *searchStateCache;
  id v3;

  searchStateCache = self->_searchStateCache;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[SearchStateCache removeCachedSearchStateForTabDocument:](searchStateCache, "removeCachedSearchStateForTabDocument:");

}

- (void)catalogViewControllerDidSelectFindOnPage:(id)a3
{
  void *v4;

  self->_shouldFillStringForFind = 0;
  -[BrowserController setFavoritesState:animated:](self, "setFavoritesState:animated:", 0, 1);
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "showFindOnPage");

  -[BrowserController clearSpeculativeLoadDocument](self, "clearSpeculativeLoadDocument");
  -[BrowserController clearContinuousItemDocuments](self, "clearContinuousItemDocuments");
}

- (void)catalogViewController:(id)a3 didSelectAddress:(id)a4
{
  id v5;

  v5 = a4;
  -[BrowserController _loadAddressAsSpeculativeLoadIfNeeded:](self, v5);
  -[BrowserController setFavoritesState:animated:](self, "setFavoritesState:animated:", 0, 1);

}

- (void)_loadAddressAsSpeculativeLoadIfNeeded:(_QWORD *)a1
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a2;
  v8 = v3;
  if (a1)
  {
    if ((objc_msgSend(v3, "_web_isUserVisibleURL") & 1) == 0)
    {
      objc_msgSend(v8, "safari_bestURLForUserTypedString");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "safari_userVisibleString");
      v5 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v5;
    }
    objc_msgSend(MEMORY[0x1E0D4EF70], "builder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "navigationIntentWithText:", v8);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "setProvenance:", 1);
    -[BrowserController _loadIntentAsSpeculativeLoadIfNeeded:](a1, v7);

  }
}

- (void)catalogViewController:(id)a3 loadURL:(id)a4 inExternalApplication:(BOOL)a5 forImageAttribution:(BOOL)a6
{
  _BOOL4 v6;
  _BOOL4 v7;
  void *v9;
  id v10;

  v6 = a6;
  v7 = a5;
  v10 = a4;
  -[BrowserController _loadURL:inExternalApplication:forImageAttribution:]((uint64_t)self, v10, v7, v6);
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0D8AC30], "sharedRecorder");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "didActualizeImpressionForURL:provenance:", v10, 1);

  }
}

- (void)_loadURL:(int)a3 inExternalApplication:(int)a4 forImageAttribution:
{
  id WeakRetained;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  if (a1)
  {
    if (a3)
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 864));
      objc_msgSend(WeakRetained, "openURL:options:completionHandler:", v10, 0, 0);
      v8 = WeakRetained;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0D4EF70], "builder");
      if (a4)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "navigationIntentWithImageAttributionURL:", v10);
      }
      else
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "navigationIntentWithURL:", v10);
      }
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v8, "setProvenance:", 1);
      -[BrowserController _loadIntentAsSpeculativeLoadIfNeeded:]((_QWORD *)a1, v8);
      objc_msgSend((id)a1, "setFavoritesState:animated:", 0, 1);
    }

  }
}

- (void)_loadIntentAsSpeculativeLoadIfNeeded:(_QWORD *)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (objc_msgSend(v3, "policy"))
    {
LABEL_3:
      objc_msgSend(a1, "clearSpeculativeLoadDocument");
      objc_msgSend(a1, "dispatchNavigationIntent:", v4);
      goto LABEL_9;
    }
    objc_msgSend(v4, "URL");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "safari_userVisibleString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[BrowserController _commitSpeculativeLoadForURL:]((uint64_t)a1, v6);

    if (v7)
    {
      objc_msgSend(MEMORY[0x1E0D8AC30], "sharedRecorder");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "URL");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "didActualizeImpressionForURL:provenance:", v9, objc_msgSend(v4, "provenance"));
    }
    else
    {
      objc_msgSend(v4, "text");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = -[BrowserController _commitSpeculativeLoadForURL:]((uint64_t)a1, v10);

      if (!v11)
      {
        v14 = (id)WBS_LOG_CHANNEL_PREFIXTabs();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          v15 = a1[56];
          v16 = a1[110];
          objc_msgSend(v4, "URL");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "safari_userVisibleString");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "text");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = 138740739;
          v21 = v15;
          v22 = 2117;
          v23 = v16;
          v24 = 2117;
          v25 = v18;
          v26 = 2117;
          v27 = v19;
          _os_log_impl(&dword_1D7CA3000, v14, OS_LOG_TYPE_INFO, "Cached speculative load URL %{sensitive}@ or document %{sensitive}@ doesn't match either expectation %{sensitive}@ or %{sensitive}@", (uint8_t *)&v20, 0x2Au);

        }
        goto LABEL_3;
      }
      objc_msgSend(MEMORY[0x1E0D8AC30], "sharedRecorder");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = (void *)MEMORY[0x1E0C99E98];
      objc_msgSend(v4, "text");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "URLWithString:", v9);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "didActualizeImpressionForURL:provenance:", v13, objc_msgSend(v4, "provenance"));

    }
  }
LABEL_9:

}

- (void)catalogViewController:(id)a3 willRepositionPopoverToRect:(CGRect *)a4 inView:(id *)a5
{
  void *v7;
  void *v8;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__3;
  v15 = __Block_byref_object_dispose__3;
  v16 = 0;
  -[BrowserController _topNavigationBar]((id *)&self->super.super.super.isa);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "URLOutlinePopoverSourceInfo");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  WeakRetained = objc_loadWeakRetained((id *)&self->_scene);
  _SFContextInfoWithComment();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  _SFPopoverSourceInfoUnwrap();

  *a5 = objc_retainAutorelease((id)v12[5]);
  _Block_object_dispose(&v11, 8);

}

void __78__BrowserController_catalogViewController_willRepositionPopoverToRect_inView___block_invoke(uint64_t *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11;
  double v12;
  double *v13;
  uint64_t v14;
  void *v15;

  v11 = a2;
  v12 = -[BrowserController _popoverPresentationVerticalOffset](a1[4]);
  v13 = (double *)a1[6];
  *v13 = a3;
  v13[1] = a4 + v12;
  v13[2] = a5;
  v13[3] = a6;
  v14 = *(_QWORD *)(a1[5] + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v11;

}

- (double)_popoverPresentationVerticalOffset
{
  id WeakRetained;
  void *v2;
  double v3;

  if (!a1)
    return 0.0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 864));
  objc_msgSend(WeakRetained, "statusBarManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "isStatusBarHidden"))
    v3 = 7.0;
  else
    v3 = 10.0;

  return v3;
}

- (void)catalogViewController:(id)a3 mightSelectCompletionItem:(id)a4 forString:(id)a5
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  NSTimer *v12;
  NSTimer *lastTimerForDelayingSpeculativelyPreloadingTopHit;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id location;

  v7 = a4;
  v8 = a5;
  if ((objc_opt_respondsToSelector() & 1) != 0
    && objc_msgSend(v7, "shouldPrefetchWithMatchLength:", objc_msgSend(v8, "length")))
  {
    objc_msgSend(v7, "userVisibleURLString");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9 = 0;
  }
  objc_initWeak(&location, self);
  v10 = (void *)MEMORY[0x1E0C99E88];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __79__BrowserController_catalogViewController_mightSelectCompletionItem_forString___block_invoke;
  v15[3] = &unk_1E9CF36A0;
  objc_copyWeak(&v17, &location);
  v11 = v9;
  v16 = v11;
  objc_msgSend(v10, "timerWithTimeInterval:repeats:block:", 0, v15, 0.2);
  v12 = (NSTimer *)objc_claimAutoreleasedReturnValue();
  lastTimerForDelayingSpeculativelyPreloadingTopHit = self->_lastTimerForDelayingSpeculativelyPreloadingTopHit;
  self->_lastTimerForDelayingSpeculativelyPreloadingTopHit = v12;

  objc_msgSend(MEMORY[0x1E0C99E58], "mainRunLoop");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addTimer:forMode:", self->_lastTimerForDelayingSpeculativelyPreloadingTopHit, *MEMORY[0x1E0C99860]);

  objc_destroyWeak(&v17);
  objc_destroyWeak(&location);

}

void __79__BrowserController_catalogViewController_mightSelectCompletionItem_forString___block_invoke(uint64_t a1, void *a2)
{
  _QWORD *WeakRetained;
  _QWORD *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained && (id)WeakRetained[76] == v6)
  {
    -[BrowserController _updateSpeculativeLoadURL:]((uint64_t)WeakRetained, *(void **)(a1 + 32));
    v5 = (void *)v4[76];
    v4[76] = 0;

  }
}

- (void)_updateSpeculativeLoadURL:(uint64_t)a1
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  BOOL v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  id v39;
  void *v40;
  uint8_t buf[4];
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    if (*(_BYTE *)(a1 + 440))
    {
      objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "isLowPowerModeEnabled");

      if ((v5 & 1) == 0 && (objc_msgSend(*(id *)(a1 + 448), "isEqualToString:", v3) & 1) == 0)
      {
        objc_msgSend((id)a1, "tabController");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "activeTabDocument");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "webView");
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v8 || (objc_msgSend(v8, "_isBeingInspected") & 1) == 0)
        {
          objc_msgSend((id)a1, "cancelSpeculativeLoad");
          v9 = objc_msgSend(v3, "copy");
          v10 = *(void **)(a1 + 448);
          *(_QWORD *)(a1 + 448) = v9;

          if (*(_QWORD *)(a1 + 448))
          {
            objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v11, "safari_isHTTPFamilyURL") & 1) != 0)
            {
              v12 = v8;
              v13 = *(void **)(a1 + 880);
              if (v13)
              {
                objc_msgSend(v13, "URL");
                v14 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v14, "host");
                v15 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v15, "safari_highLevelDomainFromHost");
                v16 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend(v11, "host");
                v17 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v17, "safari_highLevelDomainFromHost");
                v18 = (void *)objc_claimAutoreleasedReturnValue();

                v40 = v12;
                if (v18)
                {
                  v40 = v12;
                  if (!objc_msgSend(v18, "caseInsensitiveCompare:", v16))
                  {
                    v19 = WBS_LOG_CHANNEL_PREFIXPageLoading();
                    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_1D7CA3000, v19, OS_LOG_TYPE_INFO, "Using the related web view off the speculative load TabDocument", buf, 2u);
                    }
                    objc_msgSend(*(id *)(a1 + 880), "webView");
                    v40 = (void *)objc_claimAutoreleasedReturnValue();

                  }
                }

                v20 = *(void **)(a1 + 880);
              }
              else
              {
                v20 = 0;
                v40 = v12;
              }
              v22 = v20;
              v23 = -[TabDocument initForBackgroundLoadingWithBrowserController:relatedWebView:webViewToCloneSessionStorageFrom:]([TabDocument alloc], "initForBackgroundLoadingWithBrowserController:relatedWebView:webViewToCloneSessionStorageFrom:", a1, v40, v12);
              v24 = *(void **)(a1 + 880);
              *(_QWORD *)(a1 + 880) = v23;

              objc_msgSend(*(id *)(a1 + 880), "setShouldKeepIgnoredSiriSuggestedSitesOnLoad:", 1);
              objc_msgSend(*(id *)(a1 + 280), "unifiedField");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v25, "text");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              v27 = v26 == 0;

              if (!v27)
              {
                objc_msgSend(v25, "text");
                v28 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(*(id *)(a1 + 880), "personalizationData");
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v29, "setSearchQuery:", v28);

                objc_msgSend(*(id *)(a1 + 880), "personalizationData");
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v30, "setPosition:", 0);

              }
              objc_msgSend(*(id *)(a1 + 880), "webView");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend((id)a1, "updateInsetsForBackgroundWebView:", v31);

              objc_msgSend(*(id *)(a1 + 880), "setAllowsRemoteInspection:", 0);
              objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v32, "sessionState");
              v33 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(*(id *)(a1 + 880), "restoreSessionState:andNavigate:", v33, 0);
              objc_msgSend(*(id *)(a1 + 880), "_backForwardList");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "currentItem");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_storeWeak((id *)(a1 + 40), v35);

              googleSearchEngine();
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v36, "urlAttributingToSafariIfValidSearchURL:", v11);
              v37 = objc_claimAutoreleasedReturnValue();

              v11 = (void *)v37;
              v38 = WBS_LOG_CHANNEL_PREFIXPageLoading();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 141558275;
                v42 = 1752392040;
                v43 = 2117;
                v44 = v37;
                _os_log_impl(&dword_1D7CA3000, v38, OS_LOG_TYPE_INFO, "Speculatively load URL: %{sensitive, mask.hash}@", buf, 0x16u);
              }
              v39 = (id)objc_msgSend(*(id *)(a1 + 880), "loadURL:userDriven:", v37, 1);
              objc_msgSend(*(id *)(a1 + 880), "beginSuppressingProgressAnimation");
              if (v22)
                -[BrowserController _closeSpeculativelyLoadedDocument:](a1, v22);

            }
            else
            {
              v21 = *(void **)(a1 + 448);
              *(_QWORD *)(a1 + 448) = 0;

            }
          }
        }

      }
    }
  }

}

- (void)catalogViewController:(id)a3 completionItem:(id)a4 wasAcceptedForString:(id)a5
{
  id v8;
  id v9;
  SearchStateCache *v10;
  SearchStateCache *searchStateCache;
  SearchStateCache *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a3;
  v8 = a4;
  v9 = a5;
  if (!self->_searchStateCache)
  {
    v10 = objc_alloc_init(SearchStateCache);
    searchStateCache = self->_searchStateCache;
    self->_searchStateCache = v10;

  }
  if ((unint64_t)objc_msgSend(v9, "length") >= 2
    && (objc_opt_respondsToSelector() & 1) != 0
    && objc_msgSend(v8, "restoresSearchState"))
  {
    v12 = self->_searchStateCache;
    objc_msgSend(v15, "completionList");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[SearchStateCache cacheAcceptanceOfCompletionItem:withCompletionList:forTabDocument:](v12, "cacheAcceptanceOfCompletionItem:withCompletionList:forTabDocument:", v8, v13, v14);

  }
  else
  {
    -[BrowserController removeCachedSearchStateForActiveTabDocument](self, "removeCachedSearchStateForActiveTabDocument");
  }
  -[BrowserController _completionItem:wasAcceptedForString:]((uint64_t)self, v8, v9);

}

- (void)catalogViewController:(id)a3 cacheSearchQueryID:(int64_t)a4
{
  SearchStateCache *searchStateCache;
  SearchStateCache *v7;
  SearchStateCache *v8;
  void *v9;
  id v10;

  v10 = a3;
  searchStateCache = self->_searchStateCache;
  if (!searchStateCache)
  {
    v7 = objc_alloc_init(SearchStateCache);
    v8 = self->_searchStateCache;
    self->_searchStateCache = v7;

    searchStateCache = self->_searchStateCache;
  }
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[SearchStateCache cacheSearchQueryID:forTab:](searchStateCache, "cacheSearchQueryID:forTab:", a4, v9);

}

- (void)catalogViewControllerDidBeginEditing:(id)a3
{
  -[BrowserController setFavoritesFieldFocused:animated:](self, "setFavoritesFieldFocused:animated:", 1, 1);
}

- (void)catalogViewControllerDidEndEditing:(id)a3
{
  -[BrowserController setFavoritesFieldFocused:animated:](self, "setFavoritesFieldFocused:animated:", 0, 1);
}

- (void)catalogViewControllerPopoverWillDismiss:(id)a3 dismissalReason:(int64_t)a4
{
  id WeakRetained;
  id v7;

  v7 = a3;
  -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, 1);
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:catalogViewController:willDismissPopoverWithReason:", self, v7, a4);
  if ((unint64_t)a4 >= 2)
    -[BrowserController cancelFavorites](self, "cancelFavorites");

}

- (void)catalogViewController:(id)a3 presentViewControllerWithinPopover:(id)a4 completionHandler:(id)a5
{
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  BOOL v15;
  NSObject *v16;
  void *v17;
  CGSize v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  void (**v23)(_QWORD);
  NSObject *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  id WeakRetained;
  id v31;
  id v32;
  id v33;
  _QWORD v34[4];
  NSObject *v35;
  _QWORD aBlock[4];
  id v37;
  id v38;
  CGRect v39;
  _BYTE v40[16];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v33 = a3;
  v8 = a4;
  v32 = a5;
  -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "presentedViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (id)WBS_LOG_CHANNEL_PREFIXUserInteraction();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "presentedViewController");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController catalogViewController:presentViewControllerWithinPopover:completionHandler:].cold.4(v13, (uint64_t)v40, (uint64_t)v11, v12);
    }

  }
  objc_msgSend(v8, "presentingViewController");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14 == 0;

  if (!v15)
  {
    v16 = (id)WBS_LOG_CHANNEL_PREFIXUserInteraction();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v8, "presentingViewController");
      objc_claimAutoreleasedReturnValue();
      -[BrowserController catalogViewController:presentViewControllerWithinPopover:completionHandler:].cold.3();
    }

  }
  objc_msgSend(v8, "popoverPresentationController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setPermittedArrowDirections:", 1);
  v18 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v39.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v39.size = v18;
  v38 = 0;
  -[BrowserController catalogViewController:willRepositionPopoverToRect:inView:](self, "catalogViewController:willRepositionPopoverToRect:inView:", v33, &v39, &v38);
  v19 = v38;
  v20 = dispatch_group_create();
  v21 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __96__BrowserController_catalogViewController_presentViewControllerWithinPopover_completionHandler___block_invoke;
  aBlock[3] = &unk_1E9CF34B0;
  v22 = v32;
  v37 = v22;
  v23 = (void (**)(_QWORD))_Block_copy(aBlock);
  if (!v19)
  {
    v25 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
      -[BrowserController catalogViewController:presentViewControllerWithinPopover:completionHandler:].cold.1();
    goto LABEL_15;
  }
  if (CGRectIsNull(v39))
  {
    v24 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      -[BrowserController catalogViewController:presentViewControllerWithinPopover:completionHandler:].cold.2();
LABEL_15:
    v23[2](v23);
    goto LABEL_19;
  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:catalogViewController:willPresentViewControllerWithinPopover:", self, v33, v8);
  objc_msgSend(v17, "setSourceRect:", *(_OWORD *)&v39.origin, *(_OWORD *)&v39.size, WeakRetained);
  objc_msgSend(v17, "setSourceView:", v19);
  -[BrowserController _topNavigationBar]((id *)&self->super.super.super.isa);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "popoverPassthroughViews");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setPassthroughViews:", v27);

  dispatch_group_enter(v20);
  -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v34[0] = v21;
  v34[1] = 3221225472;
  v34[2] = __96__BrowserController_catalogViewController_presentViewControllerWithinPopover_completionHandler___block_invoke_152;
  v34[3] = &unk_1E9CF31B0;
  v29 = v20;
  v35 = v29;
  objc_msgSend(v28, "presentViewController:animated:completion:", v8, 0, v34);

  objc_msgSend(v17, "_setShouldHideArrow:", 1);
  objc_msgSend(v17, "_setIgnoresKeyboardNotifications:", 1);
  -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, 1);
  dispatch_group_notify(v29, MEMORY[0x1E0C80D38], v23);

LABEL_19:
}

uint64_t __96__BrowserController_catalogViewController_presentViewControllerWithinPopover_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __96__BrowserController_catalogViewController_presentViewControllerWithinPopover_completionHandler___block_invoke_152(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

- (void)catalogViewController:(id)a3 focusNextKeyView:(BOOL)a4
{
  _BOOL8 v4;
  void *v6;
  void *v7;
  _QWORD v8[5];

  v4 = a4;
  if (-[BrowserController favoritesAreShowingInPopover](self, "favoritesAreShowingInPopover", a3))
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "frontWebView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __60__BrowserController_catalogViewController_focusNextKeyView___block_invoke;
    v8[3] = &unk_1E9CF3578;
    v8[4] = self;
    objc_msgSend(v7, "_becomeFirstResponderWithSelectionMovingForward:completionHandler:", v4, v8);

  }
}

uint64_t __60__BrowserController_catalogViewController_focusNextKeyView___block_invoke(uint64_t result, int a2)
{
  if (a2)
    return objc_msgSend(*(id *)(result + 32), "cancelFavoritesAnimated:", 0);
  return result;
}

- (void)catalogViewControllerMakeWindowKey:(id)a3
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "browserControllerMakeKey:", self);

}

- (BOOL)catalogViewControllerShouldSuppressPopover:(id)a3
{
  id v3;
  BOOL v4;

  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "presentationState") == 1 || objc_msgSend(v3, "presentationState") == 2;

  return v4;
}

- (void)catalogViewController:(id)a3 didPasteText:(id)a4
{
  void *v5;
  void *v6;
  id v7;

  v7 = a4;
  objc_msgSend(MEMORY[0x1E0D4EF70], "builder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "navigationIntentWithText:", v7);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController dispatchNavigationIntent:](self, "dispatchNavigationIntent:", v6);

}

- (void)dismissCatalogViewController:(id)a3
{
  id v4;

  if (-[BrowserController favoritesAreShowingInPopover](self, "favoritesAreShowingInPopover", a3))
  {
    -[BrowserRootViewController unifiedField](self->_rootViewController, "unifiedField");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "resignFirstResponder");

  }
  else
  {
    -[BrowserController cancelFavorites](self, "cancelFavorites");
  }
}

- (BOOL)catalogViewControllerUnifiedFieldCanBecomeFirstResponder:(id)a3
{
  if (self->_contentBorrowedForTab)
    return -[BrowserController _wantsURLFieldAutoFocus](self) ^ 1;
  else
    return 1;
}

- (void)catalogViewControllerWillUnfocusUnifiedField:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController", a3);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "isShowingSystemStartPage") & 1) != 0)
  {
    objc_msgSend(v9, "unifiedField");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "text");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "length");

    if (!v7)
      goto LABEL_6;
  }
  else
  {

  }
  objc_msgSend(v9, "capsuleCollectionView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setSuppressesSelectedItemUnfocus:", 1);

LABEL_6:
}

- (BOOL)catalogViewControllerPresentingInPortraitAspectRatio:(id)a3
{
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;

  -[BrowserRootViewController view](self->_rootViewController, "view", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bounds");
  v5 = v4;
  v7 = v6;

  return v5 <= v7;
}

- (void)catalogViewController:(id)a3 willPresentDetailViewController:(id)a4
{
  id WeakRetained;
  id v6;

  v6 = a4;
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:willPresentAutocompletionDetailViewController:", self, v6);

}

- (void)catalogViewController:(id)a3 willPresentCustomizationViewController:(id)a4
{
  id WeakRetained;
  id v6;

  v6 = a4;
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:willPresentStartPageCustomizationViewController:", self, v6);

}

- (void)catalogViewController:(id)a3 didFinishVoiceSearchWithNavigation:(BOOL)a4
{
  _BOOL8 v4;
  id WeakRetained;

  v4 = a4;
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:didFinishVoiceSearchWithNavigation:", self, v4);

}

- (void)beginTrackingDropSessionForTabBarVisibility:(id)a3
{
  id v4;
  NSMutableSet *dropSessionsForTabBarVisibility;
  NSMutableSet *v6;
  NSMutableSet *v7;
  id WeakRetained;
  id v9;

  v4 = a3;
  dropSessionsForTabBarVisibility = self->_dropSessionsForTabBarVisibility;
  v9 = v4;
  if (dropSessionsForTabBarVisibility)
  {
    -[NSMutableSet addObject:](dropSessionsForTabBarVisibility, "addObject:", v4);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "setWithObject:", v4);
    v6 = (NSMutableSet *)objc_claimAutoreleasedReturnValue();
    v7 = self->_dropSessionsForTabBarVisibility;
    self->_dropSessionsForTabBarVisibility = v6;

  }
  -[BrowserController updateShowingTabBarAnimated:](self, "updateShowingTabBarAnimated:", objc_msgSend(MEMORY[0x1E0DC3F10], "areAnimationsEnabled"));
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:tabBarExpansionViewDidBeginTrackingDropSession:", self, v9);

}

- (void)endTrackingDropSessionForTabBarVisibility:(id)a3
{
  id WeakRetained;
  id v5;

  v5 = a3;
  -[NSMutableSet removeObject:](self->_dropSessionsForTabBarVisibility, "removeObject:");
  -[BrowserController updateShowingTabBarAnimated:](self, "updateShowingTabBarAnimated:", objc_msgSend(MEMORY[0x1E0DC3F10], "areAnimationsEnabled"));
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:tabBarExpansionViewDidEndTrackingDropSession:", self, v5);

}

- (void)tabDocumentWillBeginDragSession:(id)a3
{
  id WeakRetained;
  id v5;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:tabDocumentWillBeginDragSession:", self, v5);

}

- (void)tabDocumentWillEndDragSession:(id)a3
{
  id WeakRetained;
  id v5;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:tabDocumentWillEndDragSession:", self, v5);

}

void __68__BrowserController_observeValueForKeyPath_ofObject_change_context___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2 == lockdownModeObserverContext)
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", *MEMORY[0x1E0D8B148]) & 1) != 0)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 280), "updateUsesLockdownStatusBar");
      objc_msgSend(*(id *)(a1 + 40), "updateDynamicBarGeometry");
      return;
    }
    v2 = *(_QWORD *)(a1 + 48);
  }
  if (v2 == webFeatureObserverContext)
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    observableWebKitFeaturesByDefaultsKey();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32));
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "objectForKey:", *(_QWORD *)(a1 + 32));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
      v6 = objc_msgSend(v8, "BOOLForKey:", *(_QWORD *)(a1 + 32));
    else
      v6 = objc_msgSend(v4, "defaultValue");
    v7 = v6;

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 816), "_setEnabled:forFeature:", v7, v4);
  }
}

- (int64_t)analyticsLayoutProvenance
{
  int IsPad;
  BrowserRootViewController *rootViewController;
  void *v5;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  int v11;

  IsPad = _SFDeviceIsPad();
  rootViewController = self->_rootViewController;
  if (IsPad)
  {
    -[BrowserRootViewController capsuleViewController](rootViewController, "capsuleViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      return 3;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99EA0], "safari_browserDefaults");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "BOOLForKey:", *MEMORY[0x1E0D4F128]);

      if (v11)
        return 2;
      else
        return 1;
    }
  }
  else if (-[BrowserRootViewController usingLoweredBar](rootViewController, "usingLoweredBar"))
  {
    -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "capsuleCollectionView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "layoutStyle");

    if (v9 == 1)
      return 5;
    else
      return 4;
  }
  else
  {
    return 2;
  }
}

- (void)_addInteractionsForTabBar:(uint64_t)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v3 = a2;
  if (a1 && v3)
  {
    v9 = v3;
    objc_msgSend(*(id *)(a1 + 904), "tabDragDropController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3750]), "initWithDelegate:", v4);
    objc_msgSend(v9, "addInteraction:", v5);

    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3780]), "initWithDelegate:", v4);
    objc_msgSend(v9, "addInteraction:", v6);

    v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0DC36C0]), "initWithDelegate:", v4);
    v8 = *(void **)(a1 + 360);
    *(_QWORD *)(a1 + 360) = v7;

    objc_msgSend(v9, "addInteraction:", *(_QWORD *)(a1 + 360));
    +[TabCollectionViewSpringLoadingBehavior addSpringLoadedInteractionToTabView:](TabCollectionViewSpringLoadingBehavior, "addSpringLoadedInteractionToTabView:", v9);

    v3 = v9;
  }

}

- (BookmarksNavigationController)bookmarksNavigationController
{
  BookmarksNavigationController *v3;
  BookmarksNavigationController *modalBookmarksController;

  v3 = -[BrowserController _bookmarksPresentationStyle](self, "_bookmarksPresentationStyle");
  if ((unint64_t)&v3[-1]._tableSeparatorInset.right + 7 >= 2)
  {
    if (!v3)
    {
      if (-[BrowserController isPresentingModalBookmarksController](self, "isPresentingModalBookmarksController")
        && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        modalBookmarksController = self->_modalBookmarksController;
      }
      else
      {
        modalBookmarksController = 0;
      }
      v3 = modalBookmarksController;
    }
  }
  else if (-[SidebarUIProxy isShowingSidebar](self->_sidebarUIProxy, "isShowingSidebar"))
  {
    -[BrowserController _sidebarViewController]((uint64_t)self);
    v3 = (BookmarksNavigationController *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

- (id)_sidebarViewController
{
  void *v1;
  void *v2;
  id v3;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 280), "sidebarViewController");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "contentViewController");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v3 = v2;
    else
      v3 = 0;

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

- (void)_reloadProfileSwitcherIfNeeded
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD v7[5];

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 872), "sidebarViewController");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "profilesInSwitcherMenu");
    v6 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 344), "profiles");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v6, "count");
    if (v4 == objc_msgSend(v3, "count"))
    {
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __51__BrowserController__reloadProfileSwitcherIfNeeded__block_invoke;
      v7[3] = &unk_1E9CF36C8;
      v7[4] = a1;
      objc_msgSend(v6, "safari_enumerateZippedValuesWithArray:withBlock:", v3, v7);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 872), "sidebarViewController");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setNeedsReloadForProfileSwitcher");

    }
  }
}

void __51__BrowserController__reloadProfileSwitcherIfNeeded__block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, _BYTE *a5)
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  id v15;

  v15 = a2;
  v8 = a3;
  objc_msgSend(v15, "title");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "title");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v9, "isEqualToString:", v10) & 1) != 0)
  {
    objc_msgSend(v15, "symbolImageName");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "symbolImageName");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v11, "isEqualToString:", v12);

    if ((v13 & 1) != 0)
      goto LABEL_6;
  }
  else
  {

  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 872), "sidebarViewController");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setNeedsReloadForProfileSwitcher");

  *a5 = 1;
LABEL_6:

}

- (void)_profileWallpaperDidChange:(id)a3
{
  void *v4;
  WBTabGroupManager *tabGroupManager;
  id v6;
  _QWORD v7[5];
  id v8;

  objc_msgSend(MEMORY[0x1E0D8ACA0], "defaultManager", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  tabGroupManager = self->_tabGroupManager;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __48__BrowserController__profileWallpaperDidChange___block_invoke;
  v7[3] = &unk_1E9CF3358;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  -[WBTabGroupManager reloadTabGroupsFromDatabaseWithCompletionHandler:](tabGroupManager, "reloadTabGroupsFromDatabaseWithCompletionHandler:", v7);

}

void __48__BrowserController__profileWallpaperDidChange___block_invoke(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 752), "profiles");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __48__BrowserController__profileWallpaperDidChange___block_invoke_2;
  v3[3] = &unk_1E9CF36F0;
  v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v3);

}

void __48__BrowserController__profileWallpaperDidChange___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  __CFString *v4;
  id v5;

  v5 = a2;
  objc_msgSend(v5, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0D89E20]) & 1) != 0)
  {
    v4 = &stru_1E9CFDBB0;
  }
  else
  {
    objc_msgSend(v5, "identifier");
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  objc_msgSend(*(id *)(a1 + 32), "loadImageFromDiskForIdentifier:", v4);
}

- (void)scrollSidebarToTopAnimated:(BOOL)a3
{
  _BOOL8 v3;
  id v4;

  v3 = a3;
  -[LibraryController sidebarViewController](self->_libraryController, "sidebarViewController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "scrollToTopAnimated:", v3);

}

- (void)sidebarTrailingButtonWasTapped
{
  -[TabController createNewTabGroup](self->_tabController, "createNewTabGroup");
}

void __34__BrowserController_sidebarAction__block_invoke(uint64_t a1)
{
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "barManager:didReceiveTapForBarItem:", WeakRetained[101], 3);

}

- (id)_navigationControllerForTabGroupPicker
{
  id *v1;
  TabGroupPickerViewController *v2;

  v1 = a1;
  if (a1)
  {
    v2 = -[TabGroupPickerViewController initWithTabGroupProvider:]([TabGroupPickerViewController alloc], "initWithTabGroupProvider:", a1[43]);
    objc_storeWeak(v1 + 46, v2);
    v1 = (id *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3A40]), "initWithRootViewController:", v2);

  }
  return v1;
}

- (void)hideTabGroupPicker
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_tabGroupPickerViewController);
  objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 1, 0);

}

- (id)showTabGroupPicker:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  void *v26;
  double v27;
  double v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id WeakRetained;
  _QWORD v36[5];
  _QWORD v37[2];
  _QWORD v38[2];
  void *v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[BrowserController _navigationControllerForTabGroupPicker]((id *)&self->super.super.super.isa);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  WeakRetained = objc_loadWeakRetained((id *)&self->_tabGroupPickerViewController);
  if (!-[BrowserController usesNarrowLayout](self, "usesNarrowLayout"))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v6 = v4;
      objc_msgSend(v6, "superview");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v7)
      {

        goto LABEL_20;
      }
      objc_msgSend(v5, "setModalPresentationStyle:", 7);
      objc_msgSend(v5, "popoverPresentationController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setSourceView:", v7);
      objc_msgSend(v6, "frame");
      objc_msgSend(v8, "setSourceRect:");
      objc_msgSend(v8, "setPermittedArrowDirections:", 3);

    }
  }
  objc_msgSend(v5, "presentationController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = v9;
    if (-[BrowserController hasMultipleProfiles](self, "hasMultipleProfiles"))
    {
      v11 = objc_alloc_init(MEMORY[0x1E0DC3638]);
      objc_msgSend(v11, "defaultContentConfiguration");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setContentConfiguration:", v12);

      objc_msgSend(v11, "systemLayoutSizeFittingSize:", *MEMORY[0x1E0DC4FF8], *(double *)(MEMORY[0x1E0DC4FF8] + 8));
      v14 = v13;
      -[BrowserController tabGroupProvider](self, "tabGroupProvider");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "tabGroups");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "count");

      -[BrowserController tabGroupProvider](self, "tabGroupProvider");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "moveLocalTabsToNewGroupTitle");
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      v20 = -0.0;
      if (v19)
        v20 = v14;
      v21 = (double)(unint64_t)(v17 - 1) * v14 + 54.0 + (v14 + 24.0) * 3.0 + 48.0 + v20;
      v36[0] = MEMORY[0x1E0C809B0];
      v36[1] = 3221225472;
      v36[2] = __40__BrowserController_showTabGroupPicker___block_invoke;
      v36[3] = &__block_descriptor_40_e16_d16__0__UIView_8l;
      *(double *)&v36[4] = v21;
      objc_msgSend(MEMORY[0x1E0DC4330], "_detentWithContainerViewBlock:", v36);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserRootViewController view](self->_rootViewController, "view");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "bounds");
      v25 = v24;

      -[BrowserRootViewController view](self->_rootViewController, "view");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "bounds");
      v28 = v27;

      if (v21 >= v25 * 0.5)
      {
        if (v21 <= v28 * 0.935)
        {
          v38[0] = v22;
          objc_msgSend(MEMORY[0x1E0DC4330], "_largeDetent");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v38[1] = v29;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v38, 2);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0DC4330], "_largeDetent");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = v29;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v39, 1);
        }
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "_setDetents:", v30);
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0DC4330], "_mediumDetent");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v40[0] = v29;
        objc_msgSend(MEMORY[0x1E0DC4330], "_largeDetent");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v40[1] = v30;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v40, 2);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "_setDetents:", v31);

      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0DC4330], "_mediumDetent");
      v11 = (id)objc_claimAutoreleasedReturnValue();
      v37[0] = v11;
      objc_msgSend(MEMORY[0x1E0DC4330], "_largeDetent");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v37[1] = v22;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v37, 2);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "_setDetents:", v29);
    }

  }
  objc_msgSend(v5, "view");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "layoutIfNeeded");

  -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "presentViewController:animated:completion:", v5, 1, 0);

LABEL_20:
  return WeakRetained;
}

double __40__BrowserController_showTabGroupPicker___block_invoke(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

void __48__BrowserController_setUpWithURL_launchOptions___block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "tabThumbnailCollectionView");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "presentAnimated:", 0);

}

void __48__BrowserController_setUpWithURL_launchOptions___block_invoke_2(uint64_t a1, char a2)
{
  _QWORD block[5];

  if ((a2 & 1) == 0)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __48__BrowserController_setUpWithURL_launchOptions___block_invoke_3;
    block[3] = &unk_1E9CF31B0;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
}

uint64_t __48__BrowserController_setUpWithURL_launchOptions___block_invoke_3(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "togglePrivateBrowsingEnabled");
}

- (void)userDefaultsDidChangeValueForKey:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F690]))
  {
    -[BrowserController fraudWarningsToggled](self, "fraudWarningsToggled");
    goto LABEL_12;
  }
  if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4EFB8]))
  {
    -[BrowserController toggleAlwaysShowBookmarksBarMessageReceived](self, "toggleAlwaysShowBookmarksBarMessageReceived");
    goto LABEL_12;
  }
  if (objc_msgSend(v4, "isEqualToString:", CFSTR("SpeculativeLoading")))
  {
    -[BrowserController updateSpeculativeLoadingPreferences](self, "updateSpeculativeLoadingPreferences");
    goto LABEL_12;
  }
  if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F6C0]))
  {
    -[BrowserController updateUsesTabBar]((uint64_t)self);
    goto LABEL_12;
  }
  if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F530]) & 1) != 0
    || objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F528]))
  {
    -[BrowserController updateJavaScriptPreferences](self, "updateJavaScriptPreferences");
    goto LABEL_12;
  }
  if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0DD9958]))
  {
    -[BrowserController setCookiePolicyMessageReceived](self, "setCookiePolicyMessageReceived");
    goto LABEL_12;
  }
  if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F398]))
  {
    -[BrowserController updateApplePayPreferences](self, "updateApplePayPreferences");
    goto LABEL_12;
  }
  if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F330]) & 1) != 0
    || (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F350]) & 1) != 0
    || (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F340]) & 1) != 0
    || (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F328]) & 1) != 0
    || (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F348]) & 1) != 0
    || (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F338]) & 1) != 0
    || (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F320]) & 1) != 0
    || (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F310]) & 1) != 0
    || objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F318]))
  {
    -[BrowserController tabBarManager](self, "tabBarManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "inlineTabBar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "updateLayout");

    objc_msgSend(v5, "standaloneTabBar");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "updateLayout");
LABEL_27:

LABEL_28:
    goto LABEL_12;
  }
  if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F118]))
  {
    -[BrowserRootViewController updateThemeColorIfNeededAnimated:](self->_rootViewController, "updateThemeColorIfNeededAnimated:", 0);
    goto LABEL_12;
  }
  if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F180]))
  {
    -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "capsuleCollectionView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "updateVerticalSwipeThreshold");
    goto LABEL_27;
  }
  if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F178]))
  {
    -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "updateAdditionalBottomObscuredInset");

    -[BrowserRootViewController view](self->_rootViewController, "view");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setNeedsLayout");
    goto LABEL_28;
  }
  if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F1C8]))
  {
    v9 = (id)WBS_LOG_CHANNEL_PREFIXLayout();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      stringForCurrentCapsuleLayoutPreference();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v10;
      _os_log_impl(&dword_1D7CA3000, v9, OS_LOG_TYPE_DEFAULT, "Changing Capsule Layout to: %{public}@", (uint8_t *)&v15, 0xCu);

    }
    -[BrowserRootViewController updateCapsuleLayoutStyle](self->_rootViewController, "updateCapsuleLayoutStyle");
  }
  else if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F128]))
  {
    v11 = (id)WBS_LOG_CHANNEL_PREFIXLayout();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      stringForCurrentTabBarLayoutPreference();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v12;
      _os_log_impl(&dword_1D7CA3000, v11, OS_LOG_TYPE_DEFAULT, "Changing Tab Bar Layout to: %{public}@", (uint8_t *)&v15, 0xCu);

    }
    -[BrowserController updateUsesTabBar]((uint64_t)self);
    -[BrowserController _updateUnifiedBar]((id *)&self->super.super.super.isa);
    -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, 0);
    -[BrowserRootViewController updateThemeColorIfNeededAnimated:](self->_rootViewController, "updateThemeColorIfNeededAnimated:", 0);
    -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "updateStartPageTopSpacing");

  }
  else
  {
    if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F1F0]))
    {
      -[BrowserRootViewController updateUsesWebpageStatusBar](self->_rootViewController, "updateUsesWebpageStatusBar");
      goto LABEL_12;
    }
    if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4F1B8]))
    {
      objc_msgSend(MEMORY[0x1E0D4EBE8], "sharedProvider");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "clearCachedMenuForPersona:", 0);
      goto LABEL_28;
    }
    if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D4EFD8]))
    {
      v14 = -[BrowserController _bookmarksBarLabelButtonDisplayStyle]((uint64_t)self);
      -[BrowserRootViewController bookmarksBar](self->_rootViewController, "bookmarksBar");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setButtonStyle:", v14);
      goto LABEL_28;
    }
    if (objc_msgSend(v4, "isEqualToString:", CFSTR("DebugBarCollapsingBehavior")))
      -[BrowserController _updateDisableBarHiding]((uint64_t)self);
  }
LABEL_12:

}

- (uint64_t)_bookmarksBarLabelButtonDisplayStyle
{
  void *v1;
  void *v2;
  uint64_t v3;

  if (!a1)
    return 0;
  objc_msgSend(MEMORY[0x1E0C99EA0], "safari_browserDefaults");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0D4EFD8]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (int)objc_msgSend(v2, "intValue");

  return v3;
}

- (void)carrierBundledChanged
{
  BookmarkImporter *v2;
  void *v3;
  BookmarkImporter *v4;

  v2 = [BookmarkImporter alloc];
  objc_msgSend(MEMORY[0x1E0DCCBA0], "mainBookmarkCollection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[BookmarkImporter initWithBookmarkCollection:](v2, "initWithBookmarkCollection:", v3);

  -[BookmarkImporter importBuiltinBookmarks](v4, "importBuiltinBookmarks");
}

- (void)didFocusTabGroup:(id)a3
{
  void *v4;
  char v5;
  char v6;
  id WeakRetained;
  void *v8;
  id v9;

  v9 = a3;
  +[Application sharedApplication](Application, "sharedApplication");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "isPrivateBrowsing") && objc_msgSend(v4, "isPrivateBrowsingLocked"))
  {
    -[BrowserController _showLockedPrivateBrowsingViewIfNecessaryWithAuthentication:]((id *)&self->super.super.super.isa, !-[BrowserController shouldShowWhatsNewInPrivateBrowsingSheet](self, "shouldShowWhatsNewInPrivateBrowsingSheet"));
  }
  else
  {
    v5 = objc_msgSend(v9, "isPrivateBrowsing");
    if (self)
      v6 = v5;
    else
      v6 = 1;
    if ((v6 & 1) == 0
      && -[BrowserRootViewController isShowingLockedPrivateBrowsingView](self->_rootViewController, "isShowingLockedPrivateBrowsingView"))
    {
      -[BrowserRootViewController hideLockedPrivateBrowsingView](self->_rootViewController, "hideLockedPrivateBrowsingView");
    }
  }
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "updateTabViewPinchRecognizerForBrowserController:", self);

  objc_msgSend(v4, "updateShouldLockPrivateBrowsingWithTimerIfNecessary");
  if (objc_msgSend(v9, "isPrivateBrowsing"))
    -[BrowserController _showPrivateBrowsingExplanationSheetIfNecessary](self);
  -[LibraryController sidebarViewController](self->_libraryController, "sidebarViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "updateSelectionByIgnoringExistingSelection:", 1);

}

- (void)_showLockedPrivateBrowsingViewIfNecessaryWithAuthentication:(id *)a1
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, void *);
  void *v10;
  id v11;
  id location;

  if (a1)
  {
    if ((objc_msgSend(a1[35], "isShowingLockedPrivateBrowsingView") & 1) == 0)
    {
      objc_msgSend(a1[35], "showLockedPrivateBrowsingView");
      objc_initWeak(&location, a1);
      v4 = (void *)MEMORY[0x1E0DC3428];
      v7 = MEMORY[0x1E0C809B0];
      v8 = 3221225472;
      v9 = __81__BrowserController__showLockedPrivateBrowsingViewIfNecessaryWithAuthentication___block_invoke;
      v10 = &unk_1E9CF3330;
      objc_copyWeak(&v11, &location);
      objc_msgSend(v4, "actionWithHandler:", &v7);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[35], "lockedPrivateBrowsingView", v7, v8, v9, v10);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setTabGroupPickerAction:", v5);

      objc_destroyWeak(&v11);
      objc_destroyWeak(&location);
    }
    if (a2)
      objc_msgSend(a1, "authenticateToUnlockPrivateBrowsing");
  }
}

- (void)_showPrivateBrowsingExplanationSheetIfNecessary
{
  void *v1;
  _QWORD v2[4];
  id v3;
  id location;

  if (val)
  {
    objc_initWeak(&location, val);
    v1 = (void *)*MEMORY[0x1E0DC4730];
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __68__BrowserController__showPrivateBrowsingExplanationSheetIfNecessary__block_invoke;
    v2[3] = &unk_1E9CF39C8;
    objc_copyWeak(&v3, &location);
    objc_msgSend(v1, "_performBlockAfterCATransactionCommits:", v2);
    objc_destroyWeak(&v3);
    objc_destroyWeak(&location);
  }
}

- (void)togglePrivateBrowsingEnabled
{
  -[BrowserController setPrivateBrowsingEnabled:](self, "setPrivateBrowsingEnabled:", -[BrowserController isPrivateBrowsingEnabled](self, "isPrivateBrowsingEnabled") ^ 1);
}

- (void)writePrivateBrowsingEnabled:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  id v6;

  v3 = a3;
  objc_msgSend(MEMORY[0x1E0D4EF30], "settings");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[BrowserController UUID](self, "UUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setPrivateBrowsingEnabled:forWindowWithUUID:", v3, v5);

}

- (BOOL)activeWindowIsForeground
{
  id WeakRetained;
  void *v3;
  BOOL v4;

  WeakRetained = objc_loadWeakRetained((id *)&self->_scene);
  v3 = WeakRetained;
  if (WeakRetained)
    v4 = (unint64_t)objc_msgSend(WeakRetained, "activationState") < 2;
  else
    v4 = 0;

  return v4;
}

- (void)_lockedPrivateBrowsingStateDidChange
{
  void *v3;
  int v4;
  void *v5;
  id WeakRetained;
  void *v7;
  void *v8;

  +[Application sharedApplication](Application, "sharedApplication");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isPrivateBrowsingLocked");

  -[TabController updateLockedBrowsingState](self->_tabController, "updateLockedBrowsingState");
  -[LibraryController sidebarViewController](self->_libraryController, "sidebarViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setNeedsReloadSectionControllersAnimated:", 0);

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "updateTabViewPinchRecognizerForBrowserController:", self);

  -[BrowserRootViewController tabSwitcherViewController](self->_rootViewController, "tabSwitcherViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setNeedsApplyContentAnimated:", v4 ^ 1u);

  if (v4)
  {
    -[BrowserRootViewController tabSwitcherViewController](self->_rootViewController, "tabSwitcherViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "applyContentIfNeeded");

  }
  if (self->_privateBrowsingEnabled)
  {
    -[BrowserRootViewController updateUsesWebpageStatusBar](self->_rootViewController, "updateUsesWebpageStatusBar");
    if (v4)
    {
      -[BrowserController dismissTransientUIAnimated:options:](self, "dismissTransientUIAnimated:options:", 0, 2);
      -[_SFWebView resignFirstResponder](self->_webView, "resignFirstResponder");
      -[BrowserController _showLockedPrivateBrowsingViewIfNecessaryWithAuthentication:]((id *)&self->super.super.super.isa, 0);
    }
    else
    {
      if (-[BrowserRootViewController isShowingLockedPrivateBrowsingView](self->_rootViewController, "isShowingLockedPrivateBrowsingView"))
      {
        -[BrowserRootViewController hideLockedPrivateBrowsingView](self->_rootViewController, "hideLockedPrivateBrowsingView");
      }
      -[BrowserController becomeFirstResponder](self, "becomeFirstResponder");
    }
  }
}

void __81__BrowserController__showLockedPrivateBrowsingViewIfNecessaryWithAuthentication___block_invoke(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v6, "sender");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (id)objc_msgSend(WeakRetained, "showTabGroupPicker:", v4);

}

- (void)authenticateToUnlockPrivateBrowsing
{
  id v2;

  +[Application sharedApplication](Application, "sharedApplication");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "authenticateToUnlockPrivateBrowsingWithCompletionHandler:", 0);

}

- (BOOL)isShowingPrivateTabs
{
  void *v2;
  char v3;

  -[TabController activeTabGroupOrTabGroupVisibleInSwitcher](self->_tabController, "activeTabGroupOrTabGroupVisibleInSwitcher");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isPrivateBrowsing");

  return v3;
}

- (void)cloudTabsEnabledDidChange
{
  void *WeakRetained;
  int v4;

  WeakRetained = objc_loadWeakRetained((id *)&self->_browserWindowController);
  if ((objc_msgSend(WeakRetained, "cloudTabsEnabled") & 1) != 0)
    goto LABEL_4;
  v4 = -[BrowserController _isShowingCollectionInSidebar:]((id *)&self->super.super.super.isa, CFSTR("CloudTabsCollection"));

  if (v4)
  {
    -[TabController activeTabGroupUUID](self->_tabController, "activeTabGroupUUID");
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    -[TabController setActiveTabGroupUUID:](self->_tabController, "setActiveTabGroupUUID:", WeakRetained);
LABEL_4:

  }
  -[BrowserController reloadSidebarAnimated:](self, "reloadSidebarAnimated:", 1);
}

- (uint64_t)_isShowingCollectionInSidebar:(id *)a1
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  if (a1
    && ((objc_msgSend(a1, "isPresentingModalBookmarksController") & 1) != 0
     || (objc_msgSend(a1[91], "isShowingSidebar") & 1) != 0))
  {
    objc_msgSend(a1[109], "currentCollection");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isEqualToString:", v3);

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (BOOL)_isScrolledToThresholdForContinuousPrefetching
{
  uint64_t v1;
  double MaxY;
  double v3;
  double v4;
  double v5;
  CGRect v6;

  if (result)
  {
    v1 = result;
    objc_msgSend(*(id *)(result + 304), "bounds");
    MaxY = CGRectGetMaxY(v6);
    objc_msgSend(*(id *)(v1 + 304), "contentSize");
    v4 = v3;
    objc_msgSend(*(id *)(v1 + 304), "contentInset");
    return MaxY / (v4 + v5) >= 0.75;
  }
  return result;
}

- (void)scrollViewWillBeginDragging:(id)a3
{
  void *v4;
  double v5;
  int v6;
  BOOL v7;
  BOOL v8;
  void *v9;
  id v10;

  v10 = a3;
  self->_scrollViewIsDragging = 1;
  -[BrowserRootViewController currentBarAnimator](self->_rootViewController, "currentBarAnimator");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "contentOffset");
  objc_msgSend(v4, "beginDraggingWithOffset:", v5);

  v6 = objc_msgSend(v10, "_sf_isScrolledToOrPastBottom");
  self->_shouldShowBarsAfterDraggingDownward = v6;
  if (v6)
  {
    v7 = -[BrowserRootViewController keepBarsMinimized](self->_rootViewController, "keepBarsMinimized");
    self->_shouldShowBarsAfterDraggingDownward = !v7;
    if (v7)
      v8 = 0;
    else
      v8 = !-[BrowserRootViewController usingLoweredBar](self->_rootViewController, "usingLoweredBar");
  }
  else
  {
    v8 = 0;
    self->_shouldShowBarsAfterDraggingDownward = 0;
  }
  self->_shouldShowBarsAfterDraggingDownward = v8;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "userDidManipulateVisibleRegion");

  -[ContinuousReadingViewController setSuppressingAutoScroll:](self->_continuousReadingViewController, "setSuppressingAutoScroll:", 0);
}

- (void)didCompleteScrolling
{
  id v3;
  id v4;

  self->_obscuredInsetsIncludeRefreshControlDuringBounce = 0;
  if (-[BrowserController _isInContinuousMode]((uint64_t)self)
    && -[BrowserController _isScrolledToThresholdForContinuousPrefetching]((_BOOL8)self))
  {
    -[BrowserController prefetchNextContinuousItemIfNeeded]((id *)&self->super.super.super.isa);
  }
  -[ContinuousReadingViewController setSuppressingAutoScroll:](self->_continuousReadingViewController, "setSuppressingAutoScroll:", 1);
  -[BrowserRootViewController currentBarAnimator](self->_rootViewController, "currentBarAnimator");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "endScrolling");

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "webViewDidScroll");

}

- (void)prefetchNextContinuousItemIfNeeded
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;

  if (a1)
  {
    objc_msgSend(a1[11], "currentItem");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_msgSend(a1[11], "previewView");
      v2 = (void *)objc_claimAutoreleasedReturnValue();

      if (v2)
      {
        objc_msgSend(a1[11], "previewView");
        v7 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "contentView");
        v3 = (void *)objc_claimAutoreleasedReturnValue();

        if (v3)
        {
          -[BrowserController loadNextContinuousDocumentIfNeeded](a1);
        }
        else
        {
          objc_msgSend(a1, "nextContinuousItemDocument");
          v8 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "clearDocumentForContinuousReading:");

          objc_msgSend(a1, "continuousReadingController");
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "nextReadingListItem");
          v9 = (id)objc_claimAutoreleasedReturnValue();

          if (v9)
          {
            -[BrowserController _tabDocumentForNextContinuousItem](a1);
            v5 = (void *)objc_claimAutoreleasedReturnValue();
            -[BrowserController _setContinuousReadingContentViewFromTabDocument:useReaderView:](a1, v5, 0);

            -[BrowserController loadNextContinuousDocumentIfNeeded](a1);
          }

        }
      }
    }
  }
}

- (void)pressesEnded:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  objc_super v8;

  v6 = a3;
  v7 = a4;
  v8.receiver = self;
  v8.super_class = (Class)BrowserController;
  -[BrowserController pressesEnded:withEvent:](&v8, sel_pressesEnded_withEvent_, v6, v7);
  -[BrowserController _deactivateTabViewIfNeededForEvent:]((uint64_t)self, v7);

}

- (void)_deactivateTabViewIfNeededForEvent:(uint64_t)a1
{
  id v3;

  v3 = a2;
  if (a1 && (objc_msgSend(v3, "modifierFlags") & *(_DWORD *)(a1 + 144) & 0x140000) == 0)
    objc_msgSend(*(id *)(a1 + 904), "setTabViewDefersActivation:", 0);

}

- (void)pressesCancelled:(id)a3 withEvent:(id)a4
{
  id v6;
  id v7;
  objc_super v8;

  v6 = a3;
  v7 = a4;
  v8.receiver = self;
  v8.super_class = (Class)BrowserController;
  -[BrowserController pressesCancelled:withEvent:](&v8, sel_pressesCancelled_withEvent_, v6, v7);
  -[BrowserController _deactivateTabViewIfNeededForEvent:]((uint64_t)self, v7);

}

- (void)scrollViewWillEndDragging:(id)a3 withVelocity:(CGPoint)a4 targetContentOffset:(CGPoint *)a5
{
  double y;
  id v7;

  if (self->_scrollViewIsDragging)
  {
    y = a4.y;
    self->_scrollViewIsDragging = 0;
    -[BrowserRootViewController currentBarAnimator](self->_rootViewController, "currentBarAnimator", a3, a4.x);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "endDraggingWithTargetOffset:velocity:", a5->y, y * 1000.0);

  }
}

- (void)scrollViewDidEndDragging:(id)a3 willDecelerate:(BOOL)a4
{
  BOOL v5;

  if (a4)
  {
    v5 = -[BrowserController _refreshControlHeight]((uint64_t)self) != 0.0;
  }
  else
  {
    -[BrowserController didCompleteScrolling](self, "didCompleteScrolling", a3);
    v5 = 0;
  }
  self->_obscuredInsetsIncludeRefreshControlDuringBounce = v5;
}

- (BOOL)scrollViewShouldScrollToTop:(id)a3
{
  UIScrollView *v4;
  UIScrollView *scrollView;
  UIScrollView *v6;
  BOOL v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;

  v4 = (UIScrollView *)a3;
  scrollView = self->_scrollView;
  if (scrollView == v4)
  {
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "presentationState");

    if (v12)
    {
LABEL_18:
      v7 = 0;
      goto LABEL_19;
    }
    scrollView = self->_scrollView;
  }
  if (scrollView == v4)
  {
    -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
      goto LABEL_18;
  }
  if (-[SidebarUIProxy isShowingSidebar](self->_sidebarUIProxy, "isShowingSidebar")
    && -[BrowserController _bookmarksPresentationStyle](self, "_bookmarksPresentationStyle") == 1)
  {
    -[_SFWebView scrollView](self->_webView, "scrollView");
    v6 = (UIScrollView *)objc_claimAutoreleasedReturnValue();
    v7 = v6 != v4;
  }
  else
  {
    -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
    v6 = (UIScrollView *)objc_claimAutoreleasedReturnValue();
    -[UIScrollView capsuleCollectionView](v6, "capsuleCollectionView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[BrowserRootViewController usingLoweredBar](self->_rootViewController, "usingLoweredBar")
      && objc_msgSend(v8, "selectedItemIsMinimized")
      && (-[UIScrollView transitionToState:animated:completionHandler:](v6, "transitionToState:animated:completionHandler:", 0, 1, 0), objc_msgSend(v8, "layoutStyle") != 1))
    {
      v7 = 0;
    }
    else
    {
      -[BrowserRootViewController dynamicBarAnimator](self->_rootViewController, "dynamicBarAnimator");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (-[BrowserRootViewController usingLoweredBar](self->_rootViewController, "usingLoweredBar")
        || objc_msgSend(v9, "state"))
      {
        -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "setSuppressingProgressAnimationForNavigationGesture:", 0);

        v7 = 1;
      }
      else
      {
        -[BrowserController showBars](self, "showBars");
        v7 = 0;
      }

    }
  }

LABEL_19:
  return v7;
}

- (void)scrollViewWillBeginZooming:(id)a3 withView:(id)a4
{
  double v5;
  id v6;

  v6 = a3;
  -[BrowserController updatePullToRefreshIsEnabled](self, "updatePullToRefreshIsEnabled");
  -[ContinuousReadingViewController setSuppressingAutoScroll:](self->_continuousReadingViewController, "setSuppressingAutoScroll:", 1);
  +[Application postTestNotificationName:object:](Application, "postTestNotificationName:object:", CFSTR("ScrollViewWillBeginZoomingNotification"), self);
  objc_msgSend(v6, "zoomScale");
  self->_scrollViewStartZoomScale = v5;

}

- (void)scrollViewDidEndZooming:(id)a3 withView:(id)a4 atScale:(double)a5
{
  id v7;

  -[BrowserController updatePullToRefreshIsEnabled](self, "updatePullToRefreshIsEnabled", a3, a4);
  -[ContinuousReadingViewController setSuppressingAutoScroll:](self->_continuousReadingViewController, "setSuppressingAutoScroll:", 0);
  +[Application postTestNotificationName:object:](Application, "postTestNotificationName:object:", CFSTR("ScrollViewDidEndZoomingNotification"), self);
  if (self->_scrollViewStartZoomScale < a5)
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "webViewDidIncreaseZoom");

  }
}

- (void)goBack
{
  -[BrowserController _goBackAllowingNewTabToSpawnIfNeeded:]((id *)&self->super.super.super.isa, 0);
}

- (void)_goBackAllowingNewTabToSpawnIfNeeded:(id *)a1
{
  void *v4;

  if (a1)
  {
    objc_msgSend(a1, "dismissTransientUIAnimated:", 1);
    objc_msgSend(a1[43], "activeTabDocument");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "goBackAllowingNewTabToSpawnIfNeeded:", a2);

    -[BrowserController _presentReaderTriggeredAppReviewPromptIfNeeded]((uint64_t)a1);
  }
}

- (void)_presentReaderTriggeredAppReviewPromptIfNeeded
{
  double v2;
  double v3;
  double v4;
  id v5;

  if (a1)
  {
    if (objc_msgSend((id)a1, "isShowingReader"))
    {
      objc_msgSend((id)a1, "appReviewPromptManager");
      v5 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 304), "contentOffset");
      v3 = v2;
      objc_msgSend(*(id *)(a1 + 304), "contentSize");
      objc_msgSend(v5, "didDismissReaderWithScrollPercentage:dateReaderOpened:", *(_QWORD *)(a1 + 584), v3 / v4);

    }
  }
}

- (void)goForward
{
  -[BrowserController _goForwardAllowingNewTabToSpawnIfNeeded:]((id *)&self->super.super.super.isa, 0);
}

- (void)_goForwardAllowingNewTabToSpawnIfNeeded:(id *)a1
{
  id v4;

  if (a1)
  {
    objc_msgSend(a1, "dismissTransientUIAnimated:", 1);
    objc_msgSend(a1[43], "activeTabDocument");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "goForwardAllowingNewTabToSpawnIfNeeded:", a2);

  }
}

- (uint64_t)_commitSpeculativeLoadForURL:(uint64_t)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a2;
  if (a1)
  {
    googleSearchEngine();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "urlAttributingToSafariIfValidSearchURL:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "absoluteString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 880), "URLString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v5) = objc_msgSend(v8, "isEqualToString:", v7);

    if ((objc_msgSend(*(id *)(a1 + 448), "isEqualToString:", v3) | v5) == 1
      && *(_QWORD *)(a1 + 448))
    {
      -[BrowserController _commitToSpeculativeLoad](a1);
      a1 = 1;
    }
    else
    {
      a1 = 0;
    }

  }
  return a1;
}

- (void)_commitToSpeculativeLoad
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 880), "url");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    -[BrowserController _recordIgnoredSiriSuggestedSitesWithURL:](a1, v10);

    if (!*(_BYTE *)(a1 + 695))
    {
      objc_msgSend(MEMORY[0x1E0D8A9B8], "sharedController");
      v11 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 880), "url");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "host");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)a1, "activeProfileIdentifier");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "removeIgnoredSiriSuggestedSitesWithURLHost:inProfile:", v3, v4);

    }
    v12 = *(id *)(a1 + 880);
    v5 = *(void **)(a1 + 880);
    *(_QWORD *)(a1 + 880) = 0;

    v6 = *(void **)(a1 + 448);
    *(_QWORD *)(a1 + 448) = 0;

    v7 = *(void **)(a1 + 344);
    objc_msgSend(v12, "URL");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v7) = objc_msgSend(v7, "trySwitchingToPinnedTabOnNavigationToURL:", v8);

    if ((_DWORD)v7)
    {
      -[BrowserController _cancelSpeculativeLoadForDocument:](a1, v12);
    }
    else if ((-[BrowserController _spawnNewTabFromPinnedTabIfNeededForSpeculativeDocument:](a1, v12) & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController _commitToSpeculativeLoadForDocument:]((id *)a1, v12);
      objc_msgSend(v9, "willClose");

    }
  }
}

- (void)setProgressEnabled:(BOOL)a3
{
  -[StatusBarSpinnerController setEnabled:](self->_spinnerController, "setEnabled:", a3);
}

- (float)zoomScale
{
  double v2;

  -[UIScrollView zoomScale](self->_scrollView, "zoomScale");
  return v2;
}

- (void)setZoomScale:(float)a3
{
  -[UIScrollView setZoomScale:](self->_scrollView, "setZoomScale:", a3);
}

- (void)didReceiveMemoryWarning
{
  -[BrowserController clearReaderViews](self, "clearReaderViews");
  -[BrowserController clearSpeculativeLoadDocument](self, "clearSpeculativeLoadDocument");
}

- (void)clearReaderViews
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  -[TabController allTabDocuments](self->_tabController, "allTabDocuments", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v6, "isShowingReader"))
        {
          objc_msgSend(v6, "readerContext");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v7, "isLoadingNextPage"))
            objc_msgSend(v7, "stopLoadingNextPage");

        }
        else
        {
          objc_msgSend(v6, "clearReaderView");
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }

}

- (void)_cancelSpeculativeLoadForDocument:(uint64_t)a1
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  if (a1)
  {
    v5 = v3;
    objc_msgSend(v3, "stopLoading");
    objc_msgSend(v5, "clearBackForwardList");
    objc_msgSend(v5, "setAppBanner:", 0);
    +[History sharedHistory](History, "sharedHistory");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "cancelDeferredUpdates");

    v3 = v5;
  }

}

- (void)_recordIgnoredSiriSuggestedSitesWithURL:(uint64_t)a1
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if (a1 && !*(_BYTE *)(a1 + 695))
  {
    -[BrowserController _catalogViewController]((id *)a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "completionList");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "recordIgnoredSiriSuggestedSitesWithURL:", v5);

  }
}

- (uint64_t)_spawnNewTabFromPinnedTabIfNeededForSpeculativeDocument:(uint64_t)a1
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v3 = a2;
  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "URL");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v4, "shouldSpawnNewTabOnNavigationFromPinnedTabWithDestinationURL:", v5);

    if ((v6 & 1) != 0)
    {
      objc_msgSend(v3, "setUpBackClosesSpawnedTabWithParent:", v4);
      objc_msgSend(v3, "updateAncestryWithParentTab:", v4);
      objc_msgSend(v3, "setAllowsRemoteInspection:", 1);
      objc_msgSend(v3, "setSuppressWebExtensionEvents:", 0);
      objc_msgSend(*(id *)(a1 + 344), "insertNewTabDocument:forcingOrderAfterTabDocument:inBackground:animated:", v3, v4, 0, 1);
      objc_msgSend(v4, "history");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "commitDeferredUpdates");

    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)_commitToSpeculativeLoadForDocument:(id *)a1
{
  id v3;
  void *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v3 = a2;
  if (a1)
  {
    v11 = v3;
    objc_msgSend(v3, "setAllowsRemoteInspection:", 1);
    objc_msgSend(a1[43], "activeTabDocument");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained(a1 + 5);
    if (WeakRetained)
    {
      objc_msgSend(v4, "webView");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "_saveBackForwardSnapshotForItem:", WeakRetained);

      objc_storeWeak(a1 + 5, 0);
    }
    objc_msgSend(v4, "libraryType");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      v8 = a1[43];
      objc_msgSend(v4, "libraryType");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "openTab:navigatedFromLibraryType:", v11, v9);

    }
    else
    {
      -[BrowserController _replaceActiveDocument:withSpeculativeDocument:]((uint64_t)a1, v4, v11);
    }
    objc_msgSend(a1, "updateDynamicBarGeometry");
    objc_msgSend(a1[106], "tabDocumentPendingUserActivityPayload");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10 == v4)
      objc_msgSend(a1[106], "setTabDocumentPendingUserActivityPayload:", 0);

    v3 = v11;
  }

}

- (void)_replaceActiveDocument:(void *)a3 withSpeculativeDocument:
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (a1)
  {
    objc_msgSend((id)a1, "setFavoritesState:animated:", 0, 1);
    objc_msgSend(*(id *)(a1 + 344), "replaceTabDocument:withTabDocument:committingSpeculativeLoad:", v8, v5, 1);
    objc_msgSend(*(id *)(a1 + 280), "navigationBar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setNeedsLayout");
    objc_msgSend(v6, "layoutIfNeeded");
    objc_msgSend(v8, "hideFindOnPage");
    if (*(id *)(a1 + 200) != v5)
    {
      objc_msgSend(v5, "endSuppressingProgressAnimation");
      objc_msgSend(v5, "animateProgressForCompletedDocument");
    }
    -[BrowserController _updateButtonsAnimatingTabBar:](a1, 1);
    objc_msgSend(v8, "history");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "commitDeferredUpdates");

  }
}

- (void)setCookiePolicyMessageReceived
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (self)
    -[WKPreferences sf_applySafariStorageBlockingPolicy](self->_wkPreferences, "sf_applySafariStorageBlockingPolicy");
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(MEMORY[0x1E0CEF650], "safari_allPersistentDataStores", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v12 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        objc_msgSend(v6, "httpCookieStore");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "sf_applySafariCookieStoragePolicy");

        objc_msgSend(MEMORY[0x1E0C92C08], "sharedHTTPCookieStorage");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "_setResourceLoadStatisticsEnabled:", objc_msgSend(v8, "webui_trackerProtectionEnabled"));

      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v3);
  }

  objc_msgSend(MEMORY[0x1E0CEF650], "nonPersistentDataStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C92C08], "sharedHTTPCookieStorage");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "_setResourceLoadStatisticsEnabled:", objc_msgSend(v10, "webui_trackerProtectionEnabled"));

}

- (void)toggleAlwaysShowBookmarksBarMessageReceived
{
  int shouldShowBookmarks;
  id v4;

  shouldShowBookmarks = -[BrowserController _shouldShowBookmarksBar]((id *)&self->super.super.super.isa);
  -[BrowserRootViewController bookmarksBar](self->_rootViewController, "bookmarksBar");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (((shouldShowBookmarks ^ (v4 == 0)) & 1) == 0)
  {
    -[BrowserController _setShowBookmarksBar:]((uint64_t)self, shouldShowBookmarks);
    -[BrowserController _contentContainerViewFrameDidChange]((uint64_t)self);
    -[BrowserController _updateCurrentPageBannerViewIfNeeded]((id *)&self->super.super.super.isa);
    -[BrowserController updateDynamicBarGeometry](self, "updateDynamicBarGeometry");
  }

}

- (uint64_t)_prefersShowingBookmarksBar
{
  void *v1;
  uint64_t v2;

  if (!a1)
    return 0;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLForKey:", *MEMORY[0x1E0D4EFB8]);

  return v2;
}

- (id)_titleForToggleFavoritesBarKeyCommand
{
  if (a1)
  {
    -[BrowserController _prefersShowingBookmarksBar]((uint64_t)a1);
    _WBSLocalizedString();
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

- (void)setCurrentBookmarksCollection:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  if (_SFDeviceIsPad()
    && (-[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v4,
        !v4))
  {
    -[LibraryController setCurrentCollection:](self->_libraryController, "setCurrentCollection:", v6);
  }
  else
  {
    -[BrowserController _bookmarksNavigationController](self);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setCurrentCollection:", v6);

  }
}

- (id)_bookmarksNavigationController
{
  uint64_t v1;
  uint64_t v2;

  if (a1)
  {
    v1 = (uint64_t)a1;
    v2 = objc_msgSend(a1, "_bookmarksPresentationStyle");
    if ((unint64_t)(v2 - 1) >= 2)
    {
      if (!v2)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          return *(id *)(v1 + 160);
      }
      a1 = 0;
    }
    else
    {
      -[BrowserController _sidebarViewController](v1);
      a1 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  return a1;
}

- (NSString)currentBookmarksCollection
{
  void *v3;
  void *v4;
  void *v5;

  if (_SFDeviceIsPad()
    && (-[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v3,
        !v3))
  {
    -[LibraryController currentCollection](self->_libraryController, "currentCollection");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[BrowserController _bookmarksNavigationController](self);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "currentCollection");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return (NSString *)v5;
}

- (id)_titleForToggleBookmarksKeyCommand
{
  void *v1;
  void *v2;

  if (a1)
  {
    objc_msgSend(a1, "currentBookmarksCollection");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "isEqualToString:", CFSTR("BookmarksCollection"));
    _WBSLocalizedString();
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

- (id)_titleForToggleReadingListKeyCommand
{
  void *v1;
  void *v2;

  if (a1)
  {
    objc_msgSend(a1, "currentBookmarksCollection");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "isEqualToString:", CFSTR("ReadingListCollection"));
    _WBSLocalizedString();
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

- (id)_titleForToggleHistoryKeyCommand
{
  void *v1;
  void *v2;

  if (a1)
  {
    objc_msgSend(a1, "currentBookmarksCollection");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "isEqualToString:", CFSTR("HistoryCollection"));
    _WBSLocalizedString();
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

- (id)_titleForToggleSharedWithYouKeyCommand
{
  if (a1)
  {
    -[BrowserController _isShowingCollectionInSidebar:](a1, CFSTR("SharedWithYouCollection"));
    _WBSLocalizedString();
    a1 = (id *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

- (id)_titleForToggleCloudTabsKeyCommand
{
  if (a1)
  {
    -[BrowserController _isShowingCollectionInSidebar:](a1, CFSTR("CloudTabsCollection"));
    _WBSLocalizedString();
    a1 = (id *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

- (id)_titleForToggleWebpageStatusBar
{
  void *v1;
  void *v2;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 280), "statusBarView");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    _WBSLocalizedString();
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

- (void)setScrollViewZoomEnabled:(BOOL)a3
{
  -[UIScrollView setZoomEnabled:](self->_scrollView, "setZoomEnabled:", a3);
}

- (void)_downloadsDidChange:(id)a3
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  objc_msgSend(a3, "object");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "downloads");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");

  if (v5)
  {
    -[BrowserRootViewController navigationBar](self->_rootViewController, "navigationBar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setHasToolbar:", 1);

  }
  -[_SFBarManager setBarItem:hidden:](self->_barManager, "setBarItem:hidden:", 11, v5 == 0);

}

- (void)_backgroundImageFileModifiedRemotely:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  objc_msgSend(v8, "userInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0DCCBC0]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v8, "userInfo");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0DCCBD0]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D8ACA0], "defaultManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
      objc_msgSend(v7, "reloadProfileSpecificBackgroundImageFromDisk:", v4);
    else
      objc_msgSend(v7, "reloadTabGroupSpecificBackgroundImageFromDisk:", v4);

  }
}

- (void)_backgroundImageNeedsCloudKitUpdate:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  TabController *tabController;
  id v9;

  v9 = a3;
  objc_msgSend(v9, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D8B5D8]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5 && objc_msgSend(v5, "length"))
  {
    objc_msgSend(v9, "userInfo");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0D8B2D8]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    tabController = self->_tabController;
    if (v7)
      -[TabController updateBackgroundImageForProfile:](tabController, "updateBackgroundImageForProfile:", v5);
    else
      -[TabController updateBackgroundImageForTabGroup:](tabController, "updateBackgroundImageForTabGroup:", v5);
  }

}

- (void)setShowingReader:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  id v7;

  v4 = a4;
  v5 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  -[BrowserController setShowingReader:animated:forTabDocument:](self, "setShowingReader:animated:forTabDocument:", v5, v4);

}

- (void)setShowingReader:(BOOL)a3 animated:(BOOL)a4 forTabDocument:(id)a5
{
  _BOOL8 v5;
  id v8;
  void *v9;
  id v10;
  void *dateReaderOpened;
  void *v12;
  uint64_t v13;
  double v14;
  id v15;
  NSDate *v16;
  void *v17;
  void *v18;
  id v19;

  v5 = a4;
  v8 = a5;
  v19 = v8;
  if (a3)
  {
    objc_msgSend(v8, "prepareToUseReader");
    objc_msgSend(v19, "readerContext");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "isReaderAvailable"))
    {

      v10 = v19;
    }
    else
    {
      -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
      v15 = (id)objc_claimAutoreleasedReturnValue();

      v10 = v19;
      if (v15 == v19)
      {
        -[BrowserRootViewController navigationBar](self->_rootViewController, "navigationBar");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "item");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setShowsReaderButton:", 0);

        goto LABEL_8;
      }
    }
    -[BrowserController showReaderForTabDocument:animated:](self, "showReaderForTabDocument:animated:", v10, v5);
    objc_msgSend(MEMORY[0x1E0C99D68], "now");
    v16 = (NSDate *)objc_claimAutoreleasedReturnValue();
    dateReaderOpened = self->_dateReaderOpened;
    self->_dateReaderOpened = v16;
  }
  else
  {
    -[BrowserController hideReaderForTabDocument:animated:deactivationMode:](self, "hideReaderForTabDocument:animated:deactivationMode:", v8, v5, 1);
    -[BrowserController appReviewPromptManager](self, "appReviewPromptManager");
    dateReaderOpened = (void *)objc_claimAutoreleasedReturnValue();
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "readerViewTopScrollOffset");
    -[UIScrollView contentSize](self->_scrollView, "contentSize");
    objc_msgSend(dateReaderOpened, "didDismissReaderWithScrollPercentage:dateReaderOpened:", self->_dateReaderOpened, (double)v13 / v14);

  }
  objc_msgSend(v19, "updateAccessibilityIdentifier");
LABEL_8:

}

- (void)_readerButtonTapped
{
  int v2;
  char v3;
  id v4;

  if (a1)
  {
    v2 = objc_msgSend(a1, "isShowingReader");
    v3 = v2;
    objc_msgSend(a1, "setShowingReader:animated:", v2 ^ 1u, 1);
    if ((v3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
      v4 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "didActivateReaderWithTrigger:", 0);

    }
  }
}

- (void)_readerVisibilityDidChange
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  char v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id *v18;

  if (a1)
  {
    -[BrowserController _contentContainerViewFrameDidChange]((uint64_t)a1);
    objc_msgSend(a1, "updateInterface");
    objc_msgSend(a1[35], "updateThemeColorIfNeededAnimated:", 1);
    objc_msgSend(a1, "updatePullToRefreshIsEnabled");
    objc_msgSend(a1[23], "viewController");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (void *)0x1E0D89000;
    if (objc_msgSend(MEMORY[0x1E0D89BE8], "isBrowsingAssistantEnabled"))
      objc_msgSend(v2, "readerVisibilityDidChange");
    else
      objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, 0);
    objc_msgSend(a1[43], "activeTabDocument");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "assistantController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v4, "isShowingReader") & 1) == 0)
      goto LABEL_20;
    if ((objc_msgSend(v5, "isSummaryAvailable") & 1) == 0
      && objc_msgSend(MEMORY[0x1E0D89BE8], "isOnDeviceSummarizationEnabled"))
    {
      objc_msgSend(v4, "readerContext");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "readerTextForSummarization");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "length");

      if (v7)
      {
        -[BrowserController _showSummarizeButtonIfNeeded]((uint64_t)a1);
      }
      else
      {
        objc_msgSend(v4, "readerWebView");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 3221225472;
        v16[2] = __47__BrowserController__readerVisibilityDidChange__block_invoke;
        v16[3] = &unk_1E9CF3738;
        v17 = v3;
        v18 = a1;
        objc_msgSend(v8, "_getContentsAsStringWithCompletionHandler:", v16);

      }
    }
    if (!objc_msgSend(v4, "allowsBrowsingAssistant"))
      goto LABEL_20;
    v9 = objc_msgSend(v5, "isSummaryAvailable");
    if ((v9 & 1) != 0
      || (objc_msgSend(v5, "result"),
          v3 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v3, "tableOfContentsAvailable")))
    {
      v10 = objc_msgSend(MEMORY[0x1E0D8A7F8], "userConsentState");
      if ((v9 & 1) == 0)

      if (v10 != 1)
        goto LABEL_20;
      objc_msgSend(v4, "assistantController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "url");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __47__BrowserController__readerVisibilityDidChange__block_invoke_258;
      v13[3] = &unk_1E9CF3760;
      v14 = v4;
      v15 = v5;
      objc_msgSend(v11, "fetchAssistantContentFromPegasusForURL:withCompletionHandler:", v12, v13);

      v3 = v14;
    }

LABEL_20:
  }
}

- (void)_showSummarizeButtonIfNeeded
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "readerContext");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "readerTextForSummarization");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "safari_bestLanguageTag");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("en"));

    if ((v5 & 1) != 0)
    {
      if (objc_msgSend(v1, "isShowingReader"))
      {
        v6 = (void *)MEMORY[0x1E0D4ECE8];
        v7[0] = MEMORY[0x1E0C809B0];
        v7[1] = 3221225472;
        v7[2] = __49__BrowserController__showSummarizeButtonIfNeeded__block_invoke;
        v7[3] = &unk_1E9CF3578;
        v8 = v1;
        objc_msgSend(v6, "checkSummarizationAvailabilityWithCompletionHandler:", v7);

      }
    }

  }
}

void __47__BrowserController__readerVisibilityDidChange__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = WBS_LOG_CHANNEL_PREFIXBrowsingAssistant();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      __47__BrowserController__readerVisibilityDidChange__block_invoke_cold_1();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setReaderTextForSummarization:", v5);
    -[BrowserController _showSummarizeButtonIfNeeded](*(_QWORD *)(a1 + 40));
  }

}

void __47__BrowserController__readerVisibilityDidChange__block_invoke_258(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  objc_msgSend(*(id *)(a1 + 32), "readerContext");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "summary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  _WBSLocalizedString();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _WBSLocalizedString();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "URLString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByReplacingOccurrencesOfString:withString:", CFSTR("https://"), CFSTR("safari-reader://"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "tableOfContentsTitles");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "tableOfContentsPaths");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "tableOfContentsTrailingTexts");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setArticleSummary:withSummaryHeader:tableOfContentsHeader:readerURLString:titles:paths:trailingText:", v2, v3, v4, v6, v7, v8, v9);

}

void __49__BrowserController__showSummarizeButtonIfNeeded__block_invoke(uint64_t a1, int a2)
{
  _QWORD block[4];
  id v3;

  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __49__BrowserController__showSummarizeButtonIfNeeded__block_invoke_2;
    block[3] = &unk_1E9CF31B0;
    v3 = *(id *)(a1 + 32);
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
}

void __49__BrowserController__showSummarizeButtonIfNeeded__block_invoke_2(uint64_t a1)
{
  void *v1;
  void *v2;
  NSObject *v3;
  uint8_t v4[16];

  objc_msgSend(*(id *)(a1 + 32), "readerContext");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _WBSLocalizedString();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setOnDeviceSummaryButtonWithTitle:", v2);

  v3 = WBS_LOG_CHANNEL_PREFIXBrowsingAssistant();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1D7CA3000, v3, OS_LOG_TYPE_INFO, "Safari displayed summarize button", v4, 2u);
  }
}

- (void)showReaderForTabDocument:(id)a3 animated:(BOOL)a4
{
  -[BrowserController _setReaderVisible:forTabDocument:deactivationMode:animated:]((id *)&self->super.super.super.isa, 1, a3, 0, a4);
}

- (void)_setReaderVisible:(void *)a3 forTabDocument:(uint64_t)a4 deactivationMode:(char)a5 animated:
{
  id v9;
  id v10;
  void *v11;
  double v12;
  id WeakRetained;
  double v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  _QWORD aBlock[4];
  id v21;
  id v22;
  id v23;
  char v24;
  char v25;
  id location;

  v9 = a3;
  if (!a1)
    goto LABEL_17;
  objc_msgSend(a1[43], "activeTabDocument");
  v10 = (id)objc_claimAutoreleasedReturnValue();

  if (v10 == v9)
    objc_msgSend(v9, "hideFindOnPage");
  if ((_DWORD)a2)
  {
    objc_msgSend(v9, "createBrowserReaderViewIfNeeded");
    if (v10 == v9)
    {
      objc_msgSend(a1[38], "contentOffset");
      objc_msgSend(v9, "setScrollPoint:");
    }
    goto LABEL_8;
  }
  objc_msgSend(v9, "readerContext");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "deactivateReaderNow:", a4);

  objc_msgSend(a1, "verticalScrollOffsetForReaderViewInTabDocument:", v9);
  objc_msgSend(v9, "setReaderViewTopScrollOffset:", (uint64_t)v12);
  if (a4 != 2)
LABEL_8:
    objc_msgSend(v9, "setShowingReader:", a2);
  objc_msgSend(a1, "document:willMakeReaderVisible:", v9, a2);
  WeakRetained = objc_loadWeakRetained(a1 + 48);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:didChangeReaderVisibilityForTabDocument:", a1, v9);
  if (v10 == v9)
  {
    objc_initWeak(&location, a1);
    if ((_DWORD)a2 && (objc_msgSend(a1[11], "isCommittingToContinuousDocument") & 1) == 0)
    {
      objc_msgSend(a1[38], "contentOffset");
      objc_msgSend(a1[38], "setContentOffset:", v14, (double)objc_msgSend(v9, "readerViewTopScrollOffset"));
    }
    objc_msgSend(a1[112], "window");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setUserInteractionEnabled:", 0);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __80__BrowserController__setReaderVisible_forTabDocument_deactivationMode_animated___block_invoke;
    aBlock[3] = &unk_1E9CF37A8;
    v16 = v15;
    v21 = v16;
    v17 = v9;
    v22 = v17;
    v24 = a2;
    v25 = a5;
    objc_copyWeak(&v23, &location);
    v18 = _Block_copy(aBlock);
    objc_msgSend(v17, "readerContext");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setUpReaderWebViewIfNeededAndPerformBlock:", v18);

    objc_destroyWeak(&v23);
    objc_destroyWeak(&location);
  }

LABEL_17:
}

- (void)hideReaderForTabDocument:(id)a3 animated:(BOOL)a4 deactivationMode:(unint64_t)a5
{
  id v8;

  v8 = a3;
  -[BrowserController _setReaderVisible:forTabDocument:deactivationMode:animated:]((id *)&self->super.super.super.isa, 0, v8, a5, a4);
  -[BrowserController updatePullToRefreshIsEnabled](self, "updatePullToRefreshIsEnabled");

}

- (double)verticalScrollOffsetForReaderViewInTabDocument:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  uint64_t v8;

  v3 = a3;
  if (objc_msgSend(v3, "isShowingReader"))
  {
    objc_msgSend(v3, "readerWebView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "scrollView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "contentOffset");
    v7 = v6;

  }
  else
  {
    if (objc_msgSend(v3, "shouldRestoreReader"))
      v8 = objc_msgSend(v3, "readerViewTopScrollOffset");
    else
      v8 = 0;
    v7 = (double)v8;
  }

  return v7;
}

void __80__BrowserController__setReaderVisible_forTabDocument_deactivationMode_animated___block_invoke(uint64_t a1)
{
  id *WeakRetained;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "setUserInteractionEnabled:", 1);
  objc_msgSend(*(id *)(a1 + 40), "view");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setShowingReader:animated:completion:", *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), &__block_literal_global_275);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  -[BrowserController _readerVisibilityDidChange](WeakRetained);

}

- (void)setReaderShouldBeShownIfPossible:(BOOL)a3
{
  void *v4;
  int v5;
  void *v6;
  id v7;

  if (self->_readerShouldBeShownIfPossible != a3)
  {
    self->_readerShouldBeShownIfPossible = a3;
    if (-[BrowserController _isInContinuousMode]((uint64_t)self))
    {
      -[BrowserController nextContinuousItemDocument](self, "nextContinuousItemDocument");
      v7 = (id)objc_claimAutoreleasedReturnValue();
      -[BrowserController previousContinuousItemDocument](self, "previousContinuousItemDocument");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (self->_readerShouldBeShownIfPossible)
      {
        if (objc_msgSend(v7, "isReaderAvailable"))
        {
          objc_msgSend(v7, "createBrowserReaderViewIfNeeded");
          v5 = 1;
          v6 = v7;
LABEL_10:
          -[BrowserController _setContinuousReadingContentViewFromTabDocument:useReaderView:]((id *)&self->super.super.super.isa, v6, v5);

          return;
        }
        if (objc_msgSend(v4, "isReaderAvailable"))
        {
          objc_msgSend(v4, "createBrowserReaderViewIfNeeded");
          v5 = 1;
          v6 = v4;
          goto LABEL_10;
        }
      }
      -[BrowserController _setContinuousReadingContentViewFromTabDocument:useReaderView:]((id *)&self->super.super.super.isa, v7, 0);
      v5 = 0;
      v6 = v4;
      goto LABEL_10;
    }
  }
}

- (void)_setContinuousReadingContentViewFromTabDocument:(int)a3 useReaderView:
{
  void *v5;
  id v6;

  v6 = a2;
  if (a1)
  {
    if (a3)
      objc_msgSend(v6, "readerWebView");
    else
      objc_msgSend(v6, "webView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (a1[28] == v6)
    {
      objc_msgSend(a1[11], "didCreateWebViewForPreviousDocument:", v5);
    }
    else if (a1[22] == v6)
    {
      objc_msgSend(a1[11], "didCreateWebViewForNextDocument:", v5);
    }

  }
}

- (void)_perSiteAutomaticReaderActivationPreferenceDidChange:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v4 = a3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __74__BrowserController__perSiteAutomaticReaderActivationPreferenceDidChange___block_invoke;
  v6[3] = &unk_1E9CF3358;
  v6[4] = self;
  v7 = v4;
  v5 = v4;
  dispatch_async(MEMORY[0x1E0C80D38], v6);

}

void __74__BrowserController__perSiteAutomaticReaderActivationPreferenceDidChange___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "activeTabDocument");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v9, "isReaderAvailable") & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 40), "userInfo");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "safari_stringForKey:", *MEMORY[0x1E0D8B018]);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "activeTabDocument");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "URLForPerSitePreferences");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "safari_userVisibleHostWithoutWWWSubdomain");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v6, "isEqualToString:", v3) & 1) != 0)
    {
      v7 = objc_msgSend(v2, "safari_BOOLForKey:", *MEMORY[0x1E0D8B780]);
      if ((_DWORD)v7 != objc_msgSend(*(id *)(a1 + 32), "isShowingReader"))
      {
        objc_msgSend(*(id *)(a1 + 32), "setShowingReader:animated:", v7, 1);
        if ((_DWORD)v7)
        {
          objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "didActivateReaderWithTrigger:", 1);

        }
      }
    }

  }
}

- (void)_perSitePageZoomPreferenceDidChange:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  BrowserController *v8;

  v4 = a3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __57__BrowserController__perSitePageZoomPreferenceDidChange___block_invoke;
  v6[3] = &unk_1E9CF3358;
  v7 = v4;
  v8 = self;
  v5 = v4;
  dispatch_async(MEMORY[0x1E0C80D38], v6);

}

void __57__BrowserController__perSitePageZoomPreferenceDidChange___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  id v11;

  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 344), "activeTabDocument");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "object");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "pageZoomPreferenceManagerForTabDocument:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3 == v4)
  {
    objc_msgSend(v11, "safari_stringForKey:", *MEMORY[0x1E0D8B010]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "URLForPerSitePreferences");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "safari_userVisibleHostWithoutWWWSubdomain");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v7, "isEqualToString:", v5) & 1) != 0)
    {
      objc_msgSend(v11, "safari_numberForKey:", *MEMORY[0x1E0D8B1C0]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "doubleValue");
      v10 = v9;

      objc_msgSend(v2, "setPageZoomFactor:", v10);
      -[BrowserController _reloadPresentedPreferencesListViewController](*(void **)(a1 + 40));
    }

  }
}

- (void)_reloadPresentedPreferencesListViewController
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  if (a1)
  {
    objc_msgSend(a1, "viewControllerToPresentFrom");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "presentedViewController");
    v4 = (id)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v4, "viewControllers");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "firstObject");
      v3 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        objc_msgSend(v3, "reloadPreferences");

    }
  }
}

- (BOOL)addReadingListBookmarkForCurrentTab
{
  void *v3;
  char v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isBlank") & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    -[BrowserController _sidebarViewController]((uint64_t)self);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "topReadingListViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = objc_msgSend(v3, "hasDoneReaderDetection");
    objc_msgSend(MEMORY[0x1E0DCCBA0], "mainBookmarkCollection");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "titleForNewBookmark");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "cachedCanonicalURLOrURLForSharing");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[WebBookmarkCollection saveReadingListBookmarkWithTitle:address:previewText:thumbnailURL:siteName:tabDocument:didFetchPage:updateController:savedBookmarkID:shouldFetchMetadata:](v8, v9, v10, 0, 0, 0, v3, v7, v6, 0, 1u);

  }
  return v4;
}

- (void)showReadingListAutomaticArchiveAlertIfNeededWithCompletion:(id)a3
{
  void *v4;
  void (**v5)(void);

  v5 = (void (**)(void))a3;
  if ((-[BrowserController _shouldShowNewReadingListBehaviorAlert]((uint64_t)self) & 1) != 0)
  {
    v4 = -[BrowserController _newReadingListBehaviorAlertControllerWithCompletion:](self, v5);
    -[BrowserController presentModalViewController:completion:](self, "presentModalViewController:completion:", v4, &__block_literal_global_276);

  }
  else if (v5)
  {
    v5[2]();
  }

}

- (uint64_t)_shouldShowNewReadingListBehaviorAlert
{
  void *v1;
  uint64_t v2;

  if (!a1)
    return 0;
  objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "BOOLForKey:", CFSTR("HasShownAutomaticReadingListArchivingAlert")) & 1) == 0)
  {
    if (!objc_msgSend(v1, "_sf_shouldAutomaticallyDownloadReadingListItems"))
    {
      v2 = 1;
      goto LABEL_7;
    }
    objc_msgSend(v1, "setBool:forKey:", 1, CFSTR("HasShownAutomaticReadingListArchivingAlert"));
  }
  v2 = 0;
LABEL_7:

  return v2;
}

- (void)_newReadingListBehaviorAlertControllerWithCompletion:(void *)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;

  v3 = a2;
  if (a1)
  {
    v4 = (void *)MEMORY[0x1E0DC3450];
    _WBSLocalizedString();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "alertControllerWithTitle:message:preferredStyle:", 0, v5, 1);
    a1 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = (void *)MEMORY[0x1E0DC3448];
    _WBSLocalizedString();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = MEMORY[0x1E0C809B0];
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __74__BrowserController__newReadingListBehaviorAlertControllerWithCompletion___block_invoke;
    v20[3] = &unk_1E9CF37F0;
    v9 = v3;
    v21 = v9;
    objc_msgSend(v6, "actionWithTitle:style:handler:", v7, 0, v20);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v11 = (void *)MEMORY[0x1E0DC3448];
    _WBSLocalizedString();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v8;
    v16 = 3221225472;
    v17 = __74__BrowserController__newReadingListBehaviorAlertControllerWithCompletion___block_invoke_2;
    v18 = &unk_1E9CF37F0;
    v19 = v9;
    objc_msgSend(v11, "actionWithTitle:style:handler:", v12, 1, &v15);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(a1, "addAction:", v10, v15, v16, v17, v18);
    objc_msgSend(a1, "addAction:", v13);

  }
  return a1;
}

void __80__BrowserController_showReadingListAutomaticArchiveAlertIfNeededWithCompletion___block_invoke()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setBool:forKey:", 1, CFSTR("HasShownAutomaticReadingListArchivingAlert"));

}

uint64_t __74__BrowserController__newReadingListBehaviorAlertControllerWithCompletion___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t result;

  objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_sf_setShouldAutomaticallyDownloadReadingListItems:", 1);

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t __74__BrowserController__newReadingListBehaviorAlertControllerWithCompletion___block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

- (void)setNeedsSnapshotUpdateForActiveTab
{
  self->_needsSnapshotUpdateForBlankTabs = 0;
  -[BrowserController _setNeedsSnapshotUpdateForActiveTab]((uint64_t)self);
}

- (void)snapshotTabDocument:(id)a3 size:(CGSize)a4 topBackdropHeight:(double)a5 options:(unint64_t)a6 completion:(id)a7
{
  double height;
  double width;
  id v13;
  void (**v14)(id, _QWORD);
  id WeakRetained;
  void *v16;
  void *v17;
  TabSnapshotGenerator *v18;
  void *v19;
  TabSnapshotRequest *v20;
  void *v21;
  TabSnapshotRequest *v22;
  NSObject *v23;

  height = a4.height;
  width = a4.width;
  v13 = a3;
  v14 = (void (**)(id, _QWORD))a7;
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  v16 = WeakRetained;
  if (!v13)
  {
    v23 = WBS_LOG_CHANNEL_PREFIXTabSnapshots();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      -[BrowserController snapshotTabDocument:size:topBackdropHeight:options:completion:].cold.1();
    goto LABEL_15;
  }
  objc_msgSend(WeakRetained, "browserController:tabSnapshotContentProviderForTabDocument:", self, v13);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v17)
  {
LABEL_15:
    v14[2](v14, 0);
    goto LABEL_16;
  }
  v18 = objc_alloc_init(TabSnapshotGenerator);
  objc_msgSend(v16, "tabSnapshotGeneratorDelegateForBrowserController:", self);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabSnapshotGenerator setDelegate:](v18, "setDelegate:", v19);

  if (!objc_msgSend(v13, "isActive")
    || (objc_opt_respondsToSelector() & 1) != 0
    && objc_msgSend(v17, "checkAndResetIfNextSnapshotRequiresScreenUpdates"))
  {
    a6 |= 0x20uLL;
  }
  if (objc_msgSend(v13, "isShowingSystemStartPage")
    && -[BrowserRootViewController usingLoweredBar](self->_rootViewController, "usingLoweredBar"))
  {
    a6 |= 0x40uLL;
  }
  if (objc_msgSend(v13, "isShowingSystemStartPage"))
    a6 |= 0x20uLL;
  v20 = [TabSnapshotRequest alloc];
  objc_msgSend(v13, "uuid");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = -[TabSnapshotRequest initWithSize:topBackdropHeight:options:identifier:](v20, "initWithSize:topBackdropHeight:options:identifier:", a6, v21, width, height, a5);

  -[TabSnapshotGenerator snapshotWithRequest:contentProvider:completion:](v18, "snapshotWithRequest:contentProvider:completion:", v22, v17, v14);
LABEL_16:

}

- (BOOL)avoidSnapshotOfActiveTabIfPossible
{
  void *v2;
  char v3;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isBlank");

  return v3;
}

- (void)_cancelContentScrollGestures
{
  id v2;

  if (a1)
  {
    objc_msgSend((id)*MEMORY[0x1E0DC4730], "_cancelGestureRecognizersForView:", *(_QWORD *)(a1 + 304));
    -[BrowserController _catalogViewController]((id *)a1);
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "cancelFavoritesGestures");

  }
}

- (void)tabCollectionViewWillPresent:(id)a3
{
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    -[BrowserController createCatalogViewControllerIfNeeded](self, "createCatalogViewControllerIfNeeded");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "browserController:setCatalogViewController:", self, v6);

  }
  -[_SFWebView firstResponder](self->_webView, "firstResponder");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "resignFirstResponder");

  objc_msgSend(MEMORY[0x1E0D4EF30], "settings");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController UUID](self, "UUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setIsShowingTabView:forWindowWithUUID:", 1, v9);

  -[BrowserRootViewController tabCollectionViewWillPresent:](self->_rootViewController, "tabCollectionViewWillPresent:", v11);
  objc_msgSend(WeakRetained, "updateTabViewPinchRecognizerForBrowserController:", self);
  -[BrowserController _cancelContentScrollGestures]((uint64_t)self);
  objc_msgSend(WeakRetained, "browserControllerMakeKey:", self);
  +[MediaCaptureStatusBarManager sharedManager](MediaCaptureStatusBarManager, "sharedManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "browserControllerWillEnterTabView:", self);

  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserControllerStartPageUpdatePolicyDidChange:", self);

}

- (void)tabCollectionViewWillDismiss:(id)a3
{
  void *v4;
  void *v5;
  id WeakRetained;
  id v7;

  v7 = a3;
  objc_msgSend(MEMORY[0x1E0D4EF30], "settings");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController UUID](self, "UUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setIsShowingTabView:forWindowWithUUID:", 0, v5);

  -[BrowserRootViewController tabCollectionViewWillDismiss:](self->_rootViewController, "tabCollectionViewWillDismiss:", v7);
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "updateTabViewPinchRecognizerForBrowserController:", self);
  -[UIScrollView flashScrollIndicators](self->_scrollView, "flashScrollIndicators");
  objc_msgSend(WeakRetained, "browserControllerMakeKey:", self);

}

- (void)tabCollectionViewDidDismiss:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id WeakRetained;
  id v9;

  v9 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[BrowserController _wantsURLFieldAutoFocus](self) && objc_msgSend(v4, "isBlank"))
  {
    objc_msgSend(v4, "URL");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {

    }
    else
    {
      objc_msgSend(v4, "libraryType");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v6)
        -[BrowserController setFavoritesFieldFocused:animated:](self, "setFavoritesFieldFocused:animated:", 1, 1);
    }
  }
  -[BrowserController _updateDigitalHealthOverlayAfterExitingTabSwitcher]((id *)&self->super.super.super.isa);
  -[BrowserRootViewController tabCollectionViewDidDismiss:](self->_rootViewController, "tabCollectionViewDidDismiss:", v9);
  if ((-[BrowserController sf_inResponderChain](self, "sf_inResponderChain") & 1) == 0)
    -[BrowserController becomeFirstResponder](self, "becomeFirstResponder");
  objc_msgSend(v4, "presentNextDialogIfNeeded");
  -[BrowserController _presentPendingViewControllerForActiveTab]((id *)&self->super.super.super.isa);
  +[MediaCaptureStatusBarManager sharedManager](MediaCaptureStatusBarManager, "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "browserControllerWillExitTabView:", self);

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if (!-[BrowserController isShowingFavorites](self, "isShowingFavorites"))
    objc_msgSend(WeakRetained, "browserController:setCatalogViewController:", self, 0);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserControllerStartPageUpdatePolicyDidChange:", self);
  -[BrowserController _checkWebViewVisibilityAfterExitingTabView]((id *)&self->super.super.super.isa);

}

- (void)_updateDigitalHealthOverlayAfterExitingTabSwitcher
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  if (a1)
  {
    if (objc_msgSend(a1, "isShowingFavorites"))
    {
      objc_msgSend(a1[43], "tabDocumentBeingActivated");
      v5 = (id)objc_claimAutoreleasedReturnValue();
      -[BrowserController _hideDigitalHealthOverlayForTabDocument:](a1, v5);
    }
    else
    {
      v2 = (void *)MEMORY[0x1E0C99E60];
      objc_msgSend(a1[43], "activeTabDocument");
      v5 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[43], "tabDocumentBeingActivated");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setWithObjects:", v5, v3, 0);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController _updateDigitalHealthOverlayForTabDocuments:](a1, v4);

    }
  }
}

- (void)_checkWebViewVisibilityAfterExitingTabView
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_1(&dword_1D7CA3000, v0, v1, "Active web view does not match Reader state after exiting tab view", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

- (void)didCancelDismissingTabOverview
{
  void *v3;
  void *v4;
  BrowserRootViewController *rootViewController;
  void *v6;
  id WeakRetained;

  objc_msgSend(MEMORY[0x1E0D4EF30], "settings");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController UUID](self, "UUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setIsShowingTabView:forWindowWithUUID:", 1, v4);

  rootViewController = self->_rootViewController;
  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserRootViewController tabCollectionViewDidCancelDismissal:](rootViewController, "tabCollectionViewDidCancelDismissal:", v6);

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "updateTabViewPinchRecognizerForBrowserController:", self);

  -[BrowserController _cancelContentScrollGestures]((uint64_t)self);
}

- (id)borrowContentViewControllerForTab:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v4 = a3;
  self->_contentBorrowedForTab = 1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    -[_SFWebView _exitFullScreenImmediately](self->_webView, "_exitFullScreenImmediately");
  -[BrowserRootViewController navigationBar](self->_rootViewController, "navigationBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setBackdropGroupDisabled:", 1);

  -[BrowserRootViewController setDocumentSafeAreaInsetsFrozen:](self->_rootViewController, "setDocumentSafeAreaInsetsFrozen:", 1);
  if (objc_msgSend(v4, "shouldObscureForDigitalHealth"))
    -[BrowserController _insertScreenTimeLockoutShieldIntoContentViewForTab:animated:]((id *)&self->super.super.super.isa, v4, 1);
  -[BrowserRootViewController documentAndTopBarsContainerView](self->_rootViewController, "documentAndTopBarsContainerView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setHidden:", 0);
  -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "capsuleCollectionView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(v8, "lockdownStatusBar");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9 && objc_msgSend(v8, "layoutStyle") == 2)
    {
      objc_msgSend(v9, "bounds");
      objc_msgSend(v6, "convertRect:fromView:", v9);
      objc_msgSend(v9, "setFrame:");
      objc_msgSend(v6, "addSubview:", v9);
    }
    objc_msgSend(v8, "minimizedProgressView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "bounds");
    objc_msgSend(v6, "convertRect:toView:", v10);
    objc_msgSend(v10, "setFrame:");
    objc_msgSend(v6, "addSubview:", v10);

  }
  objc_msgSend(v6, "setUserInteractionEnabled:", 0);
  objc_msgSend(v6, "setUserInteractionEnabled:", 1);
  -[BrowserRootViewController documentAndTopBarsContainerViewController](self->_rootViewController, "documentAndTopBarsContainerViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (void)_insertScreenTimeLockoutShieldIntoContentViewForTab:(uint64_t)a3 animated:
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;

  v5 = a2;
  if (a1)
  {
    v11 = v5;
    -[BrowserController _screenTimeHostingViewControllerForTabDocument:](a1, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "screenTimeOverlayViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "URL");
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
    if (v7 && v8)
    {
      v10 = (id)objc_msgSend(v7, "showBlockingViewControllerForURL:withPolicy:animated:", v8, objc_msgSend(v11, "policy"), a3);
      objc_msgSend(v6, "displayHostedScreenTimeView");
    }

    v5 = v11;
  }

}

- (id)borrowContentViewForTab:(id)a3 withTopBackdropView:(id *)a4 ofHeight:(double)a5
{
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  BrowserRootViewController *rootViewController;
  void *v20;
  double MaxY;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;

  v7 = a3;
  -[BrowserRootViewController topBar](self->_rootViewController, "topBar");
  v30 = (id)objc_claimAutoreleasedReturnValue();
  -[BrowserController tabContentContainerView]((id *)&self->super.super.super.isa);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "view");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_alloc_init(MEMORY[0x1E0DC3F10]);
  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setUserInteractionEnabled:", objc_msgSend(v11, "presentationState") == 3);

  objc_msgSend(v8, "tintColor");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setTintColor:", v12);

  objc_msgSend(v9, "frame");
  v14 = v13;
  v16 = v15;
  v18 = v17;
  rootViewController = self->_rootViewController;
  -[BrowserRootViewController view](rootViewController, "view");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserRootViewController navigationBarFrameInCoordinateSpace:](rootViewController, "navigationBarFrameInCoordinateSpace:", v20);
  MaxY = CGRectGetMaxY(v31);

  objc_msgSend(v10, "setBounds:", v14, MaxY, v16, v18);
  if (-[TabCollectionViewProviding tabThumbnailCollectionViewStyle](self->_tabCollectionViewProvider, "tabThumbnailCollectionViewStyle") == 1)
  {
    objc_msgSend(v10, "layer");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setAnchorPoint:", 0.5, 0.0);

    objc_msgSend(v8, "bounds");
    objc_msgSend(v10, "setCenter:", CGRectGetMidX(v32), 0.0);
  }
  -[BrowserRootViewController setClipperView:](self->_rootViewController, "setClipperView:", v10);
  -[BrowserRootViewController view](self->_rootViewController, "view");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "addSubview:", v10);

  if (-[BrowserController _shouldShowBackgroundViewForTabDocument:]((uint64_t)self, v7))
  {
    objc_msgSend(v9, "bounds");
    objc_msgSend(v9, "convertRect:toView:", v10);
    v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3F10]), "initWithFrame:", v14, CGRectGetMaxY(v33), v16, 100000.0);
    objc_msgSend(MEMORY[0x1E0DC3658], "systemBackgroundColor");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "setBackgroundColor:", v25);

    objc_msgSend(v10, "addSubview:", v24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "sf_defaultWebContentBackgroundColor");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setBackgroundColor:", v24);
  }

  if (a4)
    *a4 = objc_retainAutorelease(v30);
  -[BrowserController borrowContentViewControllerForTab:](self, "borrowContentViewControllerForTab:", v7);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "view");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "addSubview:", v27);

  -[BrowserRootViewController bottomToolbar](self->_rootViewController, "bottomToolbar");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[BrowserRootViewController toolbarPlacement](self->_rootViewController, "toolbarPlacement") == 1 && v28)
  {
    objc_msgSend(v28, "_setSafeAreaInsetsFrozen:", 1);
    objc_msgSend(v10, "addSubview:", v28);
  }

  return v10;
}

- (void)reinsertBorrowedContentViewForTab:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _BOOL4 v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD v30[3];
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  self->_contentBorrowedForTab = 0;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    -[_SFWebView _exitFullScreenImmediately](self->_webView, "_exitFullScreenImmediately");
  -[BrowserRootViewController navigationBar](self->_rootViewController, "navigationBar");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setBackdropGroupDisabled:", 0);

  -[BrowserRootViewController setDocumentSafeAreaInsetsFrozen:](self->_rootViewController, "setDocumentSafeAreaInsetsFrozen:", 0);
  -[BrowserRootViewController documentAndTopBarsContainerView](self->_rootViewController, "documentAndTopBarsContainerView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 904;
  v26 = v5;
  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = v7;
  objc_msgSend(v5, "setHidden:", objc_msgSend(v7, "presentationState") != 0);
  v8 = -[BrowserRootViewController isShowingSidebar](self->_rootViewController, "isShowingSidebar");
  -[BrowserRootViewController bottomToolbar](self->_rootViewController, "bottomToolbar");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = v9;
  objc_msgSend(v9, "_setSafeAreaInsetsFrozen:", 0);
  if ((SFEnhancedTabOverviewEnabled() & 1) != 0 || !SFTabGroupSwitcherEnabled())
  {
    objc_msgSend(v7, "view");
    v10 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[TabCollectionViewProviding tabViewContainerView](self->_tabCollectionViewProvider, "tabViewContainerView");
    v10 = objc_claimAutoreleasedReturnValue();
  }
  v11 = (void *)v10;
  -[BrowserRootViewController documentAndTopBarsContainerViewController](self->_rootViewController, "documentAndTopBarsContainerViewController");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v11;
  objc_msgSend(v29, "parentViewController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserRootViewController contentContainerViewController](self->_rootViewController, "contentContainerViewController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12 != v13)
  {
    -[BrowserRootViewController contentContainerViewController](self->_rootViewController, "contentContainerViewController");
    v6 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v6, "addChildViewController:", v29);

  }
  objc_msgSend(v11, "superview");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
    v15 = v11;
  else
    v15 = 0;
  v30[0] = v15;
  v30[1] = v5;
  v30[2] = v9;
  if (v8)
  {
    -[BrowserRootViewController sidebarContentDimmingView](self->_rootViewController, "sidebarContentDimmingView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v5;
    -[BrowserRootViewController sidebarViewController](self->_rootViewController, "sidebarViewController");
    v6 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v6, "view");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v16 = 0;
    v31 = 0;
  }
  v32 = v16;
  +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v17, "isFloatingSidebarButtonEnabled"))
  {
    -[BrowserRootViewController floatingSidebarButton](self->_rootViewController, "floatingSidebarButton");
    v33 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v33 = 0;
  }

  if (v8)
  {

  }
  -[BrowserRootViewController contentContainerView](self->_rootViewController, "contentContainerView");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "_sf_setOrderedSubviews:count:", v30, 6);

  if (v12 != v13)
  {
    -[BrowserRootViewController contentContainerViewController](self->_rootViewController, "contentContainerViewController");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "didMoveToParentViewController:", v19);

  }
  -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "capsuleCollectionView");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "reattachControls");

  -[BrowserRootViewController view](self->_rootViewController, "view");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setNeedsLayout");

  -[BrowserController updateExposedScrollViewRect](self, "updateExposedScrollViewRect");
  if (self->_wantsUnifiedFieldFocused && -[BrowserController _wantsURLFieldAutoFocus](self))
  {
    -[BrowserRootViewController primaryNavigationBar](self->_rootViewController, "primaryNavigationBar");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "textField");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "becomeFirstResponder");

  }
}

- (void)_navigationGestureDidBegin
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  if (a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 384));
    objc_msgSend(WeakRetained, "browserControllerWillBeginNavigationGesture:", a1);

    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "freezeForNavigationGesture");

    objc_msgSend(*(id *)(a1 + 280), "dynamicBarAnimator");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(a1 + 416) = objc_msgSend(v4, "state");

    *(_BYTE *)(a1 + 377) = 1;
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "appBanner");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "overlayProvider");
    v7 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "webViewBackforwardGestureNavigationWillBegin");
  }
}

- (void)_navigationGestureWillEndWithNavigationToBackForwardListItem:(uint64_t)a1
{
  void *v3;
  int v4;
  void *v5;
  id v6;

  v6 = a2;
  if (a1)
  {
    -[BrowserController _presentReaderTriggeredAppReviewPromptIfNeeded](a1);
    if (v6)
    {
      objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "mustShowBarsForBackForwardListItem:", v6);

      if (v4)
        objc_msgSend((id)a1, "showBars");
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 280), "dynamicBarAnimator");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "attemptTransitionToState:animated:", *(_QWORD *)(a1 + 416), 1);

    }
  }

}

- (void)_navigationGestureDidEndWithNavigation:(uint64_t)a1
{
  void *v4;
  void *v5;
  void *v6;
  id WeakRetained;
  id v8;

  if (a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 384));
    objc_msgSend(WeakRetained, "browserControllerDidEndNavigationGesture:", a1);

    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "appBanner");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "overlayProvider");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "webViewBackforwardGestureNavigationDidEnd");
    if ((_DWORD)a2)
    {
      objc_msgSend(v8, "appBanner");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6)
        objc_msgSend((id)a1, "removeAppBannerFromTabDocument:animated:", v8, 0);
    }
    objc_msgSend(v8, "unfreezeAfterNavigationGesture:", a2);
    *(_BYTE *)(a1 + 377) = 0;

  }
}

- (void)updatePullToRefreshIsEnabled
{
  _BOOL8 v3;

  v3 = !-[BrowserController isShowingReader](self, "isShowingReader")
    && !-[BrowserController _isInContinuousMode]((uint64_t)self)
    && !-[UIScrollView isZooming](self->_scrollView, "isZooming")
    && -[_SFWebView fullscreenState](self->_webView, "fullscreenState") == 0;
  -[BrowserRootViewController setPullToRefreshIsEnabled:](self->_rootViewController, "setPullToRefreshIsEnabled:", v3);
}

- (void)clearContinuousItemDocuments
{
  -[BrowserController _clearNextContinuousItemDocument]((uint64_t)self);
  -[BrowserController _clearPreviousContinuousItemDocument]((uint64_t)self);
}

- (void)didChangeContinuousReadingItemInActiveDocument
{
  void *v3;
  id v4;

  -[BrowserController _sidebarViewController]((uint64_t)self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "topReadingListViewController");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "updateAndScrollToCurrentSelectedItemIfNeeded:", 1);
  -[BrowserController updatePullToRefreshIsEnabled](self, "updatePullToRefreshIsEnabled");

}

- (void)updateFirstResponderOrFocus
{
  void *v3;
  uint64_t isWindowLockedForPrivate;
  id v5;
  uint64_t v6;
  char v7;
  id WeakRetained;
  id v9;

  WeakRetained = objc_loadWeakRetained((id *)&self->_scene);
  objc_msgSend(WeakRetained, "focusSystem");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[BrowserRootViewController setNeedsFocusUpdate](self->_rootViewController, "setNeedsFocusUpdate");
    return;
  }
  isWindowLockedForPrivate = -[BrowserController _isWindowLockedForPrivateBrowsing]((uint64_t)self);
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  if (!self->_webView)
    goto LABEL_8;
  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "presentationState") == 1)
  {

LABEL_7:
    goto LABEL_8;
  }
  v6 = objc_msgSend(v5, "presentationState");

  if (v6 == 2)
    goto LABEL_7;
  v7 = objc_msgSend(v9, "isShowingSystemStartPage") | isWindowLockedForPrivate;

  if ((v7 & 1) == 0)
  {
    -[_SFWebView becomeFirstResponder](self->_webView, "becomeFirstResponder");
    goto LABEL_9;
  }
LABEL_8:
  -[BrowserController becomeFirstResponder](self, "becomeFirstResponder");
LABEL_9:

}

- (id)undoManager
{
  void *v2;
  objc_super v4;

  if (self->_overridesUndoManagerForClosedTabs)
  {
    -[TabController undoManager](self->_tabController, "undoManager");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4.receiver = self;
    v4.super_class = (Class)BrowserController;
    -[BrowserController undoManager](&v4, sel_undoManager);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

- (NSArray)preferredFocusEnvironments
{
  id WeakRetained;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "browserControllerPreferredFocusEnvironments:", self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v4;
}

- (UIFocusEnvironment)parentFocusEnvironment
{
  id WeakRetained;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "browserControllerParentFocusEnvironment:", self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (UIFocusEnvironment *)v4;
}

- (UIFocusItemContainer)focusItemContainer
{
  id WeakRetained;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "browserControllerFocusItemContainer:", self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (UIFocusItemContainer *)v4;
}

- (void)setNeedsFocusUpdate
{
  id v3;

  objc_msgSend(MEMORY[0x1E0DC37E0], "focusSystemForEnvironment:", self);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "requestFocusUpdateToEnvironment:", self);

}

- (void)updateFocusIfNeeded
{
  id v2;

  objc_msgSend(MEMORY[0x1E0DC37E0], "focusSystemForEnvironment:", self);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateFocusIfNeeded");

}

- (BOOL)shouldUpdateFocusInContext:(id)a3
{
  return 1;
}

- (void)setActiveProfileIdentifier:(id)a3
{
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char isKindOfClass;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v19 = a3;
  -[BrowserController activeProfileIdentifier](self, "activeProfileIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEqualToString:", v19);

  if ((v5 & 1) == 0)
  {
    -[BrowserController clearContinuousItemDocuments](self, "clearContinuousItemDocuments");
    -[BrowserController clearSpeculativeLoadDocument](self, "clearSpeculativeLoadDocument");
    -[BrowserController activeProfile](self, "activeProfile");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    -[TabController willSelectProfileWithIdentifier:](self->_tabController, "willSelectProfileWithIdentifier:", v19);
    -[WBProfileWindow setActiveProfileIdentifier:](self->_profileWindow, "setActiveProfileIdentifier:", v19);
    -[TabController didSelectProfileWithIdentifier:previousProfileIdentifier:](self->_tabController, "didSelectProfileWithIdentifier:previousProfileIdentifier:", v19, v7);
    -[LibraryController sidebarViewController](self->_libraryController, "sidebarViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setNeedsReloadForProfileSwitcher");

    -[LibraryController sidebarViewController](self->_libraryController, "sidebarViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "presentedItemController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) != 0)
    {
      -[LibraryController sidebarViewController](self->_libraryController, "sidebarViewController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "navigationController");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (id)objc_msgSend(v13, "popToRootViewControllerAnimated:", 0);

    }
    -[BrowserRootViewController bookmarksBar](self->_rootViewController, "bookmarksBar");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setNeedsReloadData");

    -[BrowserController _prepareExtensionsForEffectiveProfile](self);
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "postNotificationName:object:", CFSTR("ProfileDidChange"), self);

    objc_msgSend(MEMORY[0x1E0C99EA0], "safari_browserDefaults");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController activeProfileIdentifier](self, "activeProfileIdentifier");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setObject:forKey:", v18, *MEMORY[0x1E0D4F170]);

  }
}

- (id)existingUnnamedTabGroupForProfileWithIdentifier:(id)a3
{
  -[WBProfileWindow existingUnnamedTabGroupForProfileWithIdentifier:](self->_profileWindow, "existingUnnamedTabGroupForProfileWithIdentifier:", a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (void)willSelectTabGroupWithUUID:(id)a3
{
  -[WBProfileWindow setActiveTabGroupUUID:](self->_profileWindow, "setActiveTabGroupUUID:", a3);
}

- (void)tabGroupManager:(id)a3 didUpdateProfileWithIdentifier:(id)a4 difference:(id)a5
{
  id v7;
  void *v8;
  char v9;
  void *v10;
  int v11;
  NSString *profileTitleInScene;
  void *v13;
  void *v14;
  NSString *v15;
  int v16;
  char v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  id v25;

  v25 = a4;
  v7 = a5;
  -[BrowserController activeProfileIdentifier](self, "activeProfileIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqualToString:", v25);

  if ((v9 & 1) == 0)
    goto LABEL_23;
  if (-[BrowserController hasMultipleProfiles](self, "hasMultipleProfiles"))
  {
    -[TabController activeTabGroup](self->_tabController, "activeTabGroup");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isNamed") ^ 1;

  }
  else
  {
    v11 = 0;
  }
  profileTitleInScene = self->_profileTitleInScene;
  -[BrowserController activeProfile](self, "activeProfile");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "title");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[NSString isEqualToString:](profileTitleInScene, "isEqualToString:", v14)
    && ((v15 = self->_profileTitleInScene) == 0 ? (v16 = 1) : (v16 = v11), v16 == 1))
  {
    if (v15)
      v17 = 0;
    else
      v17 = v11;

    if ((v17 & 1) == 0)
      goto LABEL_17;
  }
  else
  {

  }
  -[BrowserController _updateSceneTitle]((uint64_t)self);
LABEL_17:
  if ((objc_msgSend(v7, "result") & 3) != 0 || !objc_msgSend(v7, "result"))
    -[TabController updateSelectedTabGroupName](self->_tabController, "updateSelectedTabGroupName");
  -[BrowserController activeProfile](self, "activeProfile");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "customFavoritesFolderServerID");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserRootViewController bookmarksBar](self->_rootViewController, "bookmarksBar");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "currentRootBookmark");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "serverID");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = WBSIsEqual();

  if ((v23 & 1) == 0 && (objc_msgSend(v7, "result") & 4) != 0)
  {
    -[BrowserRootViewController bookmarksBar](self->_rootViewController, "bookmarksBar");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "setNeedsReloadData");

  }
LABEL_23:

}

- (uint64_t)_currentlyEditingText
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  if (!a1)
    return 0;
  objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "webView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "sf_inResponderChain"))
  {
    v3 = objc_msgSend(v1, "hasFormControlInteraction");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0DC3958], "activeInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "inputDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v5 != 0;

  }
  return v3;
}

- (BOOL)canPerformAction:(SEL)a3 withSender:(id)a4
{
  id v6;
  int isWindowLockedForPrivate;
  void *v8;
  char v9;
  id v10;
  _BOOL4 v11;
  int v12;
  TabController *tabController;
  void *v14;
  int v15;
  void *v16;
  int v17;
  void *v18;
  double v19;
  double v20;
  char IsPad;
  char v22;
  char isReaderModeFormatMenuItem;
  char v24;
  int CanSearch;
  void *v27;
  BOOL v28;
  char *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  int v38;
  int v39;
  TabController *v40;
  void *v41;
  char v42;
  char v43;
  int v44;
  int v45;
  char canSave;
  void *v47;
  uint64_t v48;
  char v49;
  char v50;
  void *v51;
  char v52;
  uint64_t v53;
  char v54;
  id v55;
  void *v56;
  unint64_t v57;
  BOOL v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  BOOL v63;
  char v64;
  void *v65;
  unint64_t v66;
  int v67;
  objc_super v68;

  v6 = a4;
  isWindowLockedForPrivate = -[BrowserController _isWindowLockedForPrivateBrowsing]((uint64_t)self);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0D4EBE8], "sharedProvider");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v8, "commandConflictsWithTextEditing:", v6) & 1) != 0)
    {
      v9 = -[BrowserController _currentlyEditingText]((uint64_t)self);

      if ((v9 & 1) != 0)
        goto LABEL_34;
    }
    else
    {

    }
  }
  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "presentationState") == 1 || objc_msgSend(v10, "presentationState") == 2;

  if (sel_focusAddressFieldKeyPressed == a3 || sel_focusAddressFieldAlternativeKeyPressed == a3)
  {
    if (!v11)
    {
LABEL_35:
      -[BrowserController activeLibraryType](self, "activeLibraryType");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (v16)
        LOBYTE(v15) = 0;
      else
        LOBYTE(v15) = isWindowLockedForPrivate ^ 1;
      goto LABEL_38;
    }
    goto LABEL_34;
  }
  if (sel_toggleBookmarksKeyPressed == a3 || sel_editBookmarksKeyPressed == a3)
  {
    LOBYTE(v17) = v11 | isWindowLockedForPrivate;
    goto LABEL_40;
  }
  if (sel_toggleShowingFavoritesBarKeyPressed == a3)
  {
    if (!v11)
    {
      -[BrowserController contentContainerView]((id *)&self->super.super.super.isa);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "bounds");
      v20 = v19;
      IsPad = _SFDeviceIsPad();
      if (v20 > *MEMORY[0x1E0D4F2B8])
        v22 = IsPad;
      else
        v22 = 0;
      LOBYTE(v15) = v22 & (isWindowLockedForPrivate ^ 1);
      goto LABEL_59;
    }
    goto LABEL_34;
  }
  if (sel_reloadKeyPressed == a3 || sel_reloadFromOriginKeyPressed == a3 || sel_takeFindStringKeyPressed == a3)
  {
    isReaderModeFormatMenuItem = -[BrowserController _showingTabDocumentWithURL]((uint64_t)self);
    goto LABEL_47;
  }
  if (sel_printKeyPressed == a3)
  {
    if (v11)
      goto LABEL_34;
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = -[BrowserController _canPrintForTabDocument:]((uint64_t)self, v18);
LABEL_58:
    LOBYTE(v15) = v24 & (isWindowLockedForPrivate ^ 1);
    goto LABEL_59;
  }
  if (sel_find_ == a3)
  {
    if (!-[BrowserController canFindOnPage](self, "canFindOnPage"))
    {
      CanSearch = -[BrowserController _tabViewCanSearchTabs]((uint64_t)self);
      goto LABEL_52;
    }
LABEL_53:
    LOBYTE(v15) = isWindowLockedForPrivate ^ 1;
    goto LABEL_60;
  }
  if (sel_navigateBackKeyPressed == a3)
  {
    if (v11)
      goto LABEL_34;
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v18, "canGoBack");
    goto LABEL_58;
  }
  if (sel_navigateForwardKeyPressed == a3)
  {
    if (v11)
      goto LABEL_34;
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v18, "canGoForward");
    goto LABEL_58;
  }
  if (sel_toggleReaderKeyPressed == a3)
  {
    isReaderModeFormatMenuItem = -[BrowserController _isReaderModeFormatMenuItemAvailable]((uint64_t)self);
    goto LABEL_47;
  }
  if (sel_closeActiveTab_ == a3)
  {
    isReaderModeFormatMenuItem = -[TabController canCloseTab](self->_tabController, "canCloseTab");
    goto LABEL_47;
  }
  if (sel_closeOtherTabsKeyPressed == a3)
  {
    isReaderModeFormatMenuItem = -[TabController canCloseOtherTabs](self->_tabController, "canCloseOtherTabs");
    goto LABEL_47;
  }
  if (sel_nextTabKeyPressed_ != a3 && sel_previousTabKeyPressed_ != a3 && sel_switchToTabKeyPressed_ != a3)
  {
    if (sel_addToBookmarks_ == a3)
    {
      isReaderModeFormatMenuItem = -[BrowserController canAddToBookmarks](self, "canAddToBookmarks");
    }
    else
    {
      if (sel_addToReadingList_ != a3)
      {
        if (sel_previousReadingListItemKeyPressed == a3)
        {
          if (v11 || !-[BrowserController _isInContinuousMode]((uint64_t)self))
            goto LABEL_34;
          -[BrowserController continuousReadingController](self, "continuousReadingController");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "previousReadingListItem");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          if (sel_nextReadingListItemKeyPressed != a3)
          {
            v12 = -[_SFBarManager isBarItemEnabled:](self->_barManager, "isBarItemEnabled:", 7);
            v67 = isWindowLockedForPrivate ^ 1;
            if (SFEnhancedTabOverviewEnabled())
            {
              tabController = self->_tabController;
              -[TabController activeTabGroupOrTabGroupVisibleInSwitcher](tabController, "activeTabGroupOrTabGroupVisibleInSwitcher");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              v15 = -[TabController canAddNewTabInTabGroup:](tabController, "canAddNewTabInTabGroup:", v14) & v67;

            }
            else
            {
              v15 = v12 & (isWindowLockedForPrivate ^ 1);
            }
            if (sel_reopenLastClosedTabPressed == a3)
            {
              if (!v15)
                goto LABEL_60;
              if (-[BrowserController isPrivateBrowsingEnabled](self, "isPrivateBrowsingEnabled"))
                goto LABEL_34;
              -[BrowserController _lastClosedTabStateData](self);
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              LOBYTE(v15) = v16 != 0;
LABEL_38:

              goto LABEL_60;
            }
            if (sel_openNewTab_ != a3)
            {
              if (sel_newTabAlternativeKeyPressed == a3)
                goto LABEL_60;
              v28 = !v11;
              if (sel_openNewPrivateTab_ == a3)
              {
                if (-[BrowserController isPrivateBrowsingAvailable](self, "isPrivateBrowsingAvailable")
                  && -[TabController canAddNewTabForPrivateBrowsing:](self->_tabController, "canAddNewTabForPrivateBrowsing:", 1))
                {
                  objc_opt_class();
                  LOBYTE(v15) = (objc_opt_isKindOfClass() | v28) & v67;
                  goto LABEL_60;
                }
                goto LABEL_34;
              }
              v29 = (char *)a3;
              if (sel_toggleTabViewKeyPressed != a3)
              {
                +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                v31 = v30;
                if (sel_newTabGroupKeyPressed == v29
                  || sel_previousTabGroupKeyPressed == v29
                  || sel_nextTabGroupKeyPressed == v29)
                {
                  LOBYTE(v67) = objc_msgSend(v30, "isCustomTabGroupsEnabled");
                  goto LABEL_147;
                }
                if (sel_closeTabGroupKeyPressed == v29 || sel_renameTabGroupKeyPressed == v29)
                {
                  v39 = SFEnhancedTabOverviewEnabled();
                  v40 = self->_tabController;
                  if (!v39)
                  {
                    canSave = -[TabController canRenameActiveTabGroup](v40, "canRenameActiveTabGroup");
                    goto LABEL_142;
                  }
                  -[TabController activeTabGroupOrTabGroupVisibleInSwitcher](v40, "activeTabGroupOrTabGroupVisibleInSwitcher");
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  v42 = objc_msgSend(v41, "isNamed");
                }
                else
                {
                  if (sel_emptySelectorForOpenInNewTabModifierLinkTap == v29
                    || sel_emptySelectorForOpenInNewTabOppositePreferenceModifierLinkTap == v29)
                  {
                    LOBYTE(v45) = v28 & v15;
                    goto LABEL_146;
                  }
                  if (sel_emptySelectorForAddLinkToReadingListModifierLinkTap != v29)
                  {
                    if (sel_emptySelectorForDownloadModifierLinkTap == v29)
                      goto LABEL_145;
                    if (sel_showBookmarksCollectionKeyPressed == v29)
                    {
                      +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
                      v41 = (void *)objc_claimAutoreleasedReturnValue();
                      v42 = objc_msgSend(v41, "isBookmarksAvailable");
                    }
                    else
                    {
                      if (sel_showReadingListCollectionKeyPressed != v29)
                      {
                        if (sel_showHistoryCollectionKeyPressed != v29
                          && sel_showHistoryCollectionAlternativeKeyPressed != v29)
                        {
                          if (sel_showSharedWithYouCollectionKeyPressed != v29)
                          {
                            if (sel_showCloudTabsCollectionKeyPressed == v29)
                            {
                              +[CloudTabStore sharedCloudTabStore](CloudTabStore, "sharedCloudTabStore");
                              v41 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v41, "syncedCloudTabDevices");
                              v47 = (void *)objc_claimAutoreleasedReturnValue();
                              v48 = objc_msgSend(v47, "count");
                              goto LABEL_155;
                            }
                            if (sel_toggleShowWebpageStatusBar != v29)
                            {
                              if (sel_emailCurrentPage == v29)
                              {
                                if (CPCanSendMail())
                                  v50 = v11;
                                else
                                  v50 = 1;
                                if ((v50 & 1) != 0)
                                  goto LABEL_144;
                                goto LABEL_164;
                              }
                              if (sel_increaseSize_ == v29
                                || sel_decreaseSize_ == v29
                                || sel_resetPageZoomLevelAndFontSize == v29)
                              {
                                if (v11)
                                  goto LABEL_144;
                                -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
                                v41 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(v41, "URL");
                                v51 = (void *)objc_claimAutoreleasedReturnValue();
                                goto LABEL_167;
                              }
                              if (sel_toggleDownloadsKeyPressed != v29)
                              {
                                if (sel_saveKeyPressed != v29 && sel_saveWebpageAlternativeKeyPressed != v29)
                                {
                                  if (sel_autoFillFormKeyPressed != v29)
                                  {
                                    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
                                    v32 = (void *)objc_claimAutoreleasedReturnValue();
                                    objc_msgSend(v32, "searchController");
                                    v33 = (void *)objc_claimAutoreleasedReturnValue();
                                    objc_msgSend(v33, "searchTerm");
                                    v34 = (void *)objc_claimAutoreleasedReturnValue();
                                    v35 = objc_msgSend(v34, "length");

                                    if (sel_closeAllTabsMatchingSearch_ == v29)
                                    {
                                      if (!v35)
                                        goto LABEL_144;
                                      -[TabController tabsMatchingSearchTerm](self->_tabController, "tabsMatchingSearchTerm");
                                      v41 = (void *)objc_claimAutoreleasedReturnValue();
                                      v53 = objc_msgSend(v41, "count");
                                      LOBYTE(v44) = v67;
                                      if (!v53)
                                        LOBYTE(v44) = 0;
LABEL_138:
                                      LOBYTE(v67) = v44;
LABEL_139:

                                      goto LABEL_147;
                                    }
                                    v36 = -[TabController numberOfTabsForCloseAllAction](self->_tabController, "numberOfTabsForCloseAllAction");
                                    if (sel_closeAllTabs_ == v29)
                                    {
                                      if (!v35)
                                      {
                                        if (v36)
                                          v54 = v11;
                                        else
                                          v54 = 0;
                                        if (v36 > 1)
                                          v54 = 1;
                                        LOBYTE(v67) = v54 & v67;
                                        goto LABEL_147;
                                      }
                                      goto LABEL_144;
                                    }
                                    if (sel_addAllTabsToBookmarks_ == v29)
                                    {
                                      +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
                                      v55 = (id)objc_claimAutoreleasedReturnValue();
                                      if (!objc_msgSend(v55, "isBookmarksAvailable"))
                                      {
                                        LOBYTE(v67) = 0;
                                        goto LABEL_195;
                                      }
                                      -[BrowserController _nonBlankCurrentTabs]((uint64_t)self);
                                      v56 = (void *)objc_claimAutoreleasedReturnValue();
                                      v57 = objc_msgSend(v56, "count");
                                      v58 = v67;
                                      if (v57 <= 1)
                                        v58 = 0;
LABEL_190:
                                      LOBYTE(v67) = v58;

LABEL_195:
                                      goto LABEL_147;
                                    }
                                    objc_msgSend(MEMORY[0x1E0DC3470], "sharedApplication");
                                    v37 = (void *)objc_claimAutoreleasedReturnValue();
                                    v38 = objc_msgSend(v37, "supportsMultipleScenes");

                                    if (sel_openNewWindow_ == v29)
                                      goto LABEL_191;
                                    if (sel_openNewPrivateWindow_ == v29)
                                    {
                                      if (v38)
                                      {
                                        if (-[BrowserController isPrivateBrowsingAvailable](self, "isPrivateBrowsingAvailable"))
                                        {
                                          if (self->_privateBrowsingEnabled)
                                            goto LABEL_147;
                                          objc_opt_class();
                                          if ((objc_opt_isKindOfClass() & 1) != 0)
                                            goto LABEL_147;
                                        }
                                      }
                                      goto LABEL_144;
                                    }
                                    if (sel_mergeAllWindows_ == v29)
                                    {
                                      if (v38)
                                      {
                                        objc_msgSend(MEMORY[0x1E0DC3470], "sharedApplication");
                                        v59 = (void *)objc_claimAutoreleasedReturnValue();
                                        objc_msgSend(v59, "openSessions");
                                        v60 = (void *)objc_claimAutoreleasedReturnValue();
                                        if ((unint64_t)objc_msgSend(v60, "count") < 2)
                                        {
                                          LOBYTE(v67) = 0;
                                        }
                                        else
                                        {
                                          -[BrowserController browserWindowController](self, "browserWindowController");
                                          v61 = (void *)objc_claimAutoreleasedReturnValue();
                                          objc_msgSend(v61, "browserControllers");
                                          v62 = (void *)objc_claimAutoreleasedReturnValue();
                                          v63 = (unint64_t)objc_msgSend(v62, "count") > 1 && v35 == 0;
                                          v64 = v67;
                                          if (!v63)
                                            v64 = 0;
                                          LOBYTE(v67) = v64;

                                        }
                                        goto LABEL_147;
                                      }
                                      goto LABEL_144;
                                    }
                                    if (sel_share_ != v29)
                                    {
                                      if (sel_pasteAndGo_ != v29 && sel_pasteAndSearch_ != v29)
                                      {
                                        if (sel_performWebExtensionCommandForKeyCommand_ == v29)
                                        {
LABEL_147:

                                          LOBYTE(v15) = v67;
                                          goto LABEL_60;
                                        }
                                        if (sel_switchToProfileKeyPressed_ != v29)
                                        {
                                          if (sel_openNewWindowInFrontmostProfile_ != v29)
                                          {
                                            if (sel_scribbleDoneKeyPressed != v29)
                                            {
                                              v68.receiver = self;
                                              v68.super_class = (Class)BrowserController;
                                              LOBYTE(v67) = -[BrowserController canPerformAction:withSender:](&v68, sel_canPerformAction_withSender_, v29, v6);
                                              goto LABEL_147;
                                            }
                                            -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
                                            v41 = (void *)objc_claimAutoreleasedReturnValue();
                                            objc_msgSend(v41, "sfScribbleControllerIfLoaded");
                                            v47 = (void *)objc_claimAutoreleasedReturnValue();
                                            LOBYTE(v67) = objc_msgSend(v47, "isScribbling");
                                            goto LABEL_158;
                                          }
LABEL_191:
                                          if (v38)
                                          {
                                            if (self->_privateBrowsingEnabled)
                                            {
                                              objc_opt_class();
                                              LOBYTE(v67) = objc_opt_isKindOfClass();
                                              goto LABEL_147;
                                            }
                                            LOBYTE(v45) = 1;
                                            goto LABEL_146;
                                          }
LABEL_144:
                                          LOBYTE(v67) = 0;
                                          goto LABEL_147;
                                        }
                                        if (!-[BrowserController hasMultipleProfiles](self, "hasMultipleProfiles"))
                                          goto LABEL_144;
                                        objc_opt_class();
                                        if ((objc_opt_isKindOfClass() & 1) == 0)
                                          goto LABEL_144;
                                        v55 = v6;
                                        objc_msgSend(v55, "propertyList");
                                        v65 = (void *)objc_claimAutoreleasedReturnValue();
                                        v66 = objc_msgSend(v65, "integerValue");

                                        -[TabController profiles](self->_tabController, "profiles");
                                        v56 = (void *)objc_claimAutoreleasedReturnValue();
                                        v58 = v66 < objc_msgSend(v56, "count");
                                        goto LABEL_190;
                                      }
                                      objc_opt_class();
                                      if ((objc_opt_isKindOfClass() & 1) == 0)
                                        goto LABEL_144;
                                      objc_msgSend(MEMORY[0x1E0DC3AC0], "generalPasteboard");
                                      v41 = (void *)objc_claimAutoreleasedReturnValue();
                                      v42 = objc_msgSend(v41, "safari_canPasteAndNavigate");
                                      goto LABEL_136;
                                    }
                                    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
                                    v41 = (void *)objc_claimAutoreleasedReturnValue();
                                    objc_msgSend(v41, "urlForSharing");
                                    v51 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_167:
                                    v52 = v67;
                                    if (!v51)
                                      v52 = 0;
                                    LOBYTE(v67) = v52;

                                    goto LABEL_139;
                                  }
                                  if (v11)
                                    goto LABEL_144;
LABEL_164:
                                  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
                                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                                  v44 = (objc_msgSend(v41, "isBlank") | isWindowLockedForPrivate) ^ 1;
                                  goto LABEL_138;
                                }
                                if (v11)
                                  goto LABEL_144;
                                canSave = -[BrowserController _canSaveWebpage]((uint64_t)self);
                                goto LABEL_142;
                              }
                              if (v11)
                                goto LABEL_144;
                              objc_msgSend(MEMORY[0x1E0CD56A8], "sharedManager");
                              v41 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v41, "downloads");
                              v47 = (void *)objc_claimAutoreleasedReturnValue();
                              v48 = objc_msgSend(v47, "count");
LABEL_155:
                              v49 = v67;
                              if (!v48)
                                v49 = 0;
                              LOBYTE(v67) = v49;
LABEL_158:

                              goto LABEL_139;
                            }
                            canSave = objc_msgSend(MEMORY[0x1E0D4EC80], "supportsWebpageStatusBar");
LABEL_142:
                            LOBYTE(v45) = canSave & v67;
                            goto LABEL_146;
                          }
                          if (v11)
                            goto LABEL_144;
                          v45 = (-[BrowserController isPresentingModalBookmarksController](self, "isPresentingModalBookmarksController") | isWindowLockedForPrivate) ^ 1;
LABEL_146:
                          LOBYTE(v67) = v45;
                          goto LABEL_147;
                        }
LABEL_145:
                        LOBYTE(v45) = v28 & v67;
                        goto LABEL_146;
                      }
                      +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
                      v41 = (void *)objc_claimAutoreleasedReturnValue();
                      v42 = objc_msgSend(v41, "isReadingListAvailable");
                    }
                    v43 = (v11 | isWindowLockedForPrivate) ^ 1;
                    goto LABEL_137;
                  }
                  if (v11)
                    goto LABEL_144;
                  +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  v42 = objc_msgSend(v41, "isReadingListAvailable");
                }
LABEL_136:
                v43 = v67;
LABEL_137:
                LOBYTE(v44) = v42 & v43;
                goto LABEL_138;
              }
              goto LABEL_35;
            }
            if (!v15)
              goto LABEL_60;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              LOBYTE(v15) = 1;
              goto LABEL_60;
            }
            v17 = -[BrowserController isPrivateBrowsingEnabled](self, "isPrivateBrowsingEnabled") || v11;
LABEL_40:
            LOBYTE(v15) = v17 ^ 1;
            goto LABEL_60;
          }
          if (v11 || !-[BrowserController _isInContinuousMode]((uint64_t)self))
            goto LABEL_34;
          -[BrowserController continuousReadingController](self, "continuousReadingController");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "nextReadingListItem");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
        }
        if (v27)
          LOBYTE(v15) = isWindowLockedForPrivate ^ 1;
        else
          LOBYTE(v15) = 0;

LABEL_59:
        goto LABEL_60;
      }
      isReaderModeFormatMenuItem = -[BrowserController canAddToReadingList](self, "canAddToReadingList");
    }
LABEL_47:
    LOBYTE(v15) = isReaderModeFormatMenuItem & (isWindowLockedForPrivate ^ 1);
    goto LABEL_60;
  }
  if (!v11)
    goto LABEL_53;
  CanSearch = -[TabCollectionViewProviding tabViewDefersActivation](self->_tabCollectionViewProvider, "tabViewDefersActivation");
LABEL_52:
  if (CanSearch)
    goto LABEL_53;
LABEL_34:
  LOBYTE(v15) = 0;
LABEL_60:

  return v15 & 1;
}

- (BOOL)_showingTabDocumentWithURL
{
  id v2;
  _BOOL8 v3;
  void *v4;
  uint64_t v5;
  void *v6;

  if (!a1)
    return 0;
  objc_msgSend(*(id *)(a1 + 904), "tabThumbnailCollectionView");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "presentationState") == 1)
  {
    v3 = 0;
    v4 = v2;
LABEL_7:

    goto LABEL_8;
  }
  v5 = objc_msgSend(v2, "presentationState");

  if (v5 != 2)
  {
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "URL");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v6 != 0;

    goto LABEL_7;
  }
  v3 = 0;
LABEL_8:

  return v3;
}

- (uint64_t)_canPrintForTabDocument:(uint64_t)a1
{
  id v3;
  int isWindowLockedForPrivate;
  void *v5;
  uint64_t v6;

  v3 = a2;
  if (a1)
  {
    isWindowLockedForPrivate = -[BrowserController _isWindowLockedForPrivateBrowsing](a1);
    objc_msgSend(v3, "URL");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
      v6 = (objc_msgSend(v3, "shouldObscureForDigitalHealth") | isWindowLockedForPrivate) ^ 1;
    else
      v6 = 0;

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (BOOL)_tabViewCanSearchTabs
{
  id v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  objc_msgSend(*(id *)(a1 + 904), "tabThumbnailCollectionView");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "presentationState") == 1 || objc_msgSend(v1, "presentationState") == 2;

  return v2;
}

- (uint64_t)_isReaderModeFormatMenuItemAvailable
{
  int isWindowLockedForPrivate;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  if (!a1)
    return 0;
  isWindowLockedForPrivate = -[BrowserController _isWindowLockedForPrivateBrowsing](a1);
  objc_msgSend(*(id *)(a1 + 904), "tabThumbnailCollectionView");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "presentationState") == 1)
  {
    v4 = 0;
    v5 = v3;
LABEL_7:

    goto LABEL_8;
  }
  v6 = objc_msgSend(v3, "presentationState");

  if (v6 != 2)
  {
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v5, "canShowPageFormatMenu") & (isWindowLockedForPrivate ^ 1);
    goto LABEL_7;
  }
  v4 = 0;
LABEL_8:

  return v4;
}

- (id)_lastClosedTabStateData
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0D4EF28], "sharedBrowserSavedState");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "tabController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "activeProfile");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "recentlyClosedTabsForProfileWithIdentifier:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "firstObject");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

- (uint64_t)_canSaveWebpage
{
  uint64_t v2;
  void *v4;

  if (!a1 || *(_QWORD *)(a1 + 296) || (-[BrowserController _isWindowLockedForPrivateBrowsing](a1) & 1) != 0)
    return 0;
  objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "shouldObscureForDigitalHealth") & 1) != 0)
    v2 = 0;
  else
    v2 = objc_msgSend(v4, "isBlank") ^ 1;

  return v2;
}

- (id)_nonBlankCurrentTabs
{
  void *v1;
  void *v2;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 344), "currentTabs");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "safari_filterObjectsUsingBlock:", &__block_literal_global_762);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

- (void)performWebExtensionCommandForKeyCommand:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "webExtensionsController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "performCommandForKeyCommand:", v6);

  }
}

- (BOOL)canAddToBookmarks
{
  int isWindowLockedForPrivate;
  void *v4;
  id v5;
  int v6;
  void *v7;
  uint64_t v8;

  isWindowLockedForPrivate = -[BrowserController _isWindowLockedForPrivateBrowsing]((uint64_t)self);
  +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isBookmarksAvailable"))
  {
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "presentationState") == 1)
    {
      LOBYTE(v6) = 0;
      v7 = v5;
    }
    else
    {
      v8 = objc_msgSend(v5, "presentationState");

      if (v8 == 2)
      {
        LOBYTE(v6) = 0;
LABEL_9:

        goto LABEL_10;
      }
      -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = (objc_msgSend(v7, "isBlank") | isWindowLockedForPrivate) ^ 1;
    }

    goto LABEL_9;
  }
  LOBYTE(v6) = 0;
LABEL_10:

  return v6;
}

- (BOOL)canAddToReadingList
{
  int isWindowLockedForPrivate;
  void *v4;
  id v5;
  int v6;
  void *v7;
  uint64_t v8;

  isWindowLockedForPrivate = -[BrowserController _isWindowLockedForPrivateBrowsing]((uint64_t)self);
  +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isReadingListAvailable"))
  {
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "presentationState") == 1)
    {
      LOBYTE(v6) = 0;
      v7 = v5;
    }
    else
    {
      v8 = objc_msgSend(v5, "presentationState");

      if (v8 == 2)
      {
        LOBYTE(v6) = 0;
LABEL_9:

        goto LABEL_10;
      }
      -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = (objc_msgSend(v7, "isBlank") | isWindowLockedForPrivate) ^ 1;
    }

    goto LABEL_9;
  }
  LOBYTE(v6) = 0;
LABEL_10:

  return v6;
}

- (void)validateCommand:(id)a3
{
  void *v3;
  void *v4;
  id v6;
  char *v7;
  NSString *v8;
  _BOOL4 v9;
  void *v10;
  void *WeakRetained;
  void *v12;
  NSString *v13;
  uint64_t v14;
  NSString *v15;
  NSString *v16;
  void *v17;
  NSString *v18;
  void *v19;
  void *v20;
  void *v21;
  NSString *v22;
  void *v23;
  void *v24;
  void *v25;
  objc_super v26;

  v6 = a3;
  v26.receiver = self;
  v26.super_class = (Class)BrowserController;
  -[BrowserController validateCommand:](&v26, sel_validateCommand_, v6);
  v7 = (char *)objc_msgSend(v6, "action");
  if (v7 == sel_closeAllTabsMatchingSearch_)
  {
    -[BrowserController _closeAllTabsMatchingSearchLabel]((uint64_t)self);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setTitle:", WeakRetained);
LABEL_54:

    goto LABEL_55;
  }
  if (v7 == sel_closeAllTabs_)
  {
    -[BrowserController _closeAllTabsLabel]((uint64_t)self);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setTitle:", WeakRetained);
    goto LABEL_54;
  }
  if (v7 == sel_addAllTabsToBookmarks_)
  {
    -[BrowserController _addAllTabsToBookmarksLabel]((uint64_t)self);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setTitle:", WeakRetained);
    goto LABEL_54;
  }
  if (v7 == sel_find_)
  {
    -[BrowserController _findCommandTitle](self);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", WeakRetained);
    goto LABEL_54;
  }
  if (v7 == sel_saveKeyPressed)
  {
    _WBSLocalizedString();
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", WeakRetained);
    goto LABEL_54;
  }
  if (v7 == sel_toggleBookmarksKeyPressed)
  {
    if (-[SidebarUIProxy isShowingSidebar](self->_sidebarUIProxy, "isShowingSidebar"))
      WBSLocalizedStringWithValue((NSString *)CFSTR("Hide Sidebar"), v13);
    else
      WBSLocalizedStringWithValue((NSString *)CFSTR("Show Sidebar"), v13);
    goto LABEL_32;
  }
  if (v7 == sel_toggleShowingFavoritesBarKeyPressed)
  {
    -[BrowserController _titleForToggleFavoritesBarKeyCommand](self);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", WeakRetained);
    goto LABEL_54;
  }
  if (v7 == sel_toggleReaderKeyPressed)
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(WeakRetained, "isShowingReader"))
      WBSLocalizedStringWithValue((NSString *)CFSTR("Hide Reader"), v15);
    else
      WBSLocalizedStringWithValue((NSString *)CFSTR("Show Reader"), v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", v17);

    goto LABEL_54;
  }
  if (v7 == sel_toggleTabViewKeyPressed)
  {
    if (-[TabCollectionViewProviding isShowingTabView](self->_tabCollectionViewProvider, "isShowingTabView"))WBSLocalizedStringWithValue((NSString *)CFSTR("Hide Tab Overview"), v16);
    else
      WBSLocalizedStringWithValue((NSString *)CFSTR("Show Tab Overview"), v16);
LABEL_32:
    v14 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", v14);
    WeakRetained = (void *)v14;
    goto LABEL_54;
  }
  if (v7 == sel_emptySelectorForOpenInNewTabModifierLinkTap)
  {
    -[BrowserController _discoverabilityTitleForCommandTapModifierFollowingUserPreference:]((uint64_t)self, 1);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", WeakRetained);
    goto LABEL_54;
  }
  if (v7 == sel_emptySelectorForOpenInNewTabOppositePreferenceModifierLinkTap)
  {
    -[BrowserController _discoverabilityTitleForCommandTapModifierFollowingUserPreference:]((uint64_t)self, 0);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", WeakRetained);
    goto LABEL_54;
  }
  if (v7 == sel_showBookmarksCollectionKeyPressed)
  {
    -[BrowserController _titleForToggleBookmarksKeyCommand](self);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", WeakRetained);
    goto LABEL_54;
  }
  if (v7 == sel_showReadingListCollectionKeyPressed)
  {
    -[BrowserController _titleForToggleReadingListKeyCommand](self);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", WeakRetained);
    goto LABEL_54;
  }
  if (v7 == sel_showHistoryCollectionKeyPressed)
  {
    -[BrowserController _titleForToggleHistoryKeyCommand](self);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", WeakRetained);
    goto LABEL_54;
  }
  if (v7 == sel_showSharedWithYouCollectionKeyPressed)
  {
    -[BrowserController _titleForToggleSharedWithYouKeyCommand]((id *)&self->super.super.super.isa);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", WeakRetained);
    goto LABEL_54;
  }
  if (v7 == sel_showCloudTabsCollectionKeyPressed)
  {
    -[BrowserController _titleForToggleCloudTabsKeyCommand]((id *)&self->super.super.super.isa);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", WeakRetained);
    goto LABEL_54;
  }
  if (v7 == sel_toggleShowWebpageStatusBar)
  {
    -[BrowserController _titleForToggleWebpageStatusBar]((uint64_t)self);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", WeakRetained);
    goto LABEL_54;
  }
  if (v7 == sel_toggleDownloadsKeyPressed)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_downloadsViewController);
    objc_msgSend(WeakRetained, "presentingViewController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
      WBSLocalizedStringWithValue((NSString *)CFSTR("Hide Downloads"), v18);
    else
      WBSLocalizedStringWithValue((NSString *)CFSTR("Show Downloads"), v18);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", v25);

    goto LABEL_53;
  }
  if (v7 == sel_switchToProfileKeyPressed_)
  {
    -[TabController profiles](self->_tabController, "profiles");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "propertyList");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "objectAtIndexedSubscript:", objc_msgSend(v20, "integerValue"));
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();

    v21 = (void *)MEMORY[0x1E0CB3940];
    WBSLocalizedStringWithValue((NSString *)CFSTR("Show %@ Profile"), v22);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "title");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "localizedStringWithFormat:", v3, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDiscoverabilityTitle:", v24);

LABEL_53:
    goto LABEL_54;
  }
  if (v7 == sel_openNewWindowInFrontmostProfile_)
  {
    v9 = -[BrowserController hasMultipleProfiles](self, "hasMultipleProfiles");
    if (v9)
    {
      v10 = (void *)MEMORY[0x1E0CB3940];
      WBSLocalizedStringWithValue((NSString *)CFSTR("New %@ Window"), v8);
      WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
      -[TabController activeProfile](self->_tabController, "activeProfile");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "title");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "localizedStringWithFormat:", WeakRetained, v4);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      WBSLocalizedStringWithValue((NSString *)CFSTR("New Window"), v8);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      WeakRetained = v12;
    }
    objc_msgSend(v6, "setDiscoverabilityTitle:", v12);
    if (!v9)
      goto LABEL_54;

    goto LABEL_53;
  }
LABEL_55:

}

- (id)_closeAllTabsMatchingSearchLabel
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 904), "tabThumbnailCollectionView");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "searchController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "searchTerm");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 344), "tabsMatchingSearchTerm");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "count");

    if (v6 == 1)
    {
      v7 = (void *)MEMORY[0x1E0CB3940];
      _WBSLocalizedString();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "stringWithFormat:", v8, v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = (void *)MEMORY[0x1E0CB37F0];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v6);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "localizedStringFromNumber:numberStyle:", v11, 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      v12 = (void *)MEMORY[0x1E0CB3940];
      _WBSLocalizedString();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "stringWithFormat:", v13, v8, v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v9 = 0;
  }
  return v9;
}

- (id)_closeAllTabsLabel
{
  unint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v1 = objc_msgSend(*(id *)(a1 + 344), "numberOfTabsForCloseAllAction");
    if (v1 <= 1 || (v2 = v1, v1 == 2))
    {
      _WBSLocalizedString();
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v4 = (void *)MEMORY[0x1E0CB3940];
      _WBSLocalizedString();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "localizedStringWithFormat:", v5, v2);
      v3 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

- (id)_addAllTabsToBookmarksLabel
{
  void *v1;
  unint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    -[BrowserController _nonBlankCurrentTabs](a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "count");

    if (v2 > 1)
    {
      v4 = (void *)MEMORY[0x1E0CB3940];
      _WBSLocalizedString();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "localizedStringWithFormat:", v5, v2);
      v3 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      _WBSLocalizedString();
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

- (id)_findCommandTitle
{
  if (a1)
  {
    -[BrowserController _showingTabDocumentWithURL]((uint64_t)a1);
    _WBSLocalizedString();
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

- (id)_discoverabilityTitleForCommandTapModifierFollowingUserPreference:(uint64_t)a1
{
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "BOOLForKey:", *MEMORY[0x1E0D4F5A8]);

    _WBSLocalizedString();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    _WBSLocalizedString();
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v6;
    if (v4)
      v8 = (void *)v6;
    else
      v8 = v5;
    if (v4)
      v9 = v5;
    else
      v9 = (void *)v6;
    if (!a2)
      v8 = v9;
    v10 = v8;

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

- (void)switchToTabKeyPressed:(id)a3
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  v4 = -[BrowserController _tabIndexForKeyCommand:]((uint64_t)self, a3);
  if (v4 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = v4;
    -[TabController currentTabs](self->_tabController, "currentTabs");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectAtIndexedSubscript:", v5);
    v8 = (id)objc_claimAutoreleasedReturnValue();

    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v7 = (id)objc_claimAutoreleasedReturnValue();

    if (v8 != v7)
      -[TabController setActiveTab:animated:deferActivation:](self->_tabController, "setActiveTab:animated:deferActivation:", v8, 1, 1);

  }
}

- (uint64_t)_tabIndexForKeyCommand:(uint64_t)a1
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    objc_msgSend(v3, "input");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "integerValue");

    objc_msgSend(*(id *)(a1 + 344), "currentTabs");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "count");
    v9 = v6 - 1;

    v10 = v8 - 1;
    if (v9 < v8 && v9 != 8)
      v10 = v9;
    if (v10 >= v8)
      a1 = 0x7FFFFFFFFFFFFFFFLL;
    else
      a1 = v10;
  }

  return a1;
}

- (void)switchToProfileKeyPressed:(id)a3
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  TabController *tabController;
  void *v10;
  id v11;
  id v12;

  objc_msgSend(a3, "input");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v11, "integerValue");

  -[TabController profiles](self->_tabController, "profiles");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectAtIndexedSubscript:", v4);
  v12 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabController activeProfile](self->_tabController, "activeProfile");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "isEqual:", v7);

  if ((v8 & 1) == 0)
  {
    tabController = self->_tabController;
    objc_msgSend(v12, "identifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[TabController setActiveProfileIdentifier:](tabController, "setActiveProfileIdentifier:", v10);

  }
}

- (void)showBookmarksCollectionKeyPressed
{
  -[BrowserController _switchToCollectionOrToggleSidebar:]((id *)&self->super.super.super.isa, CFSTR("BookmarksCollection"));
}

- (void)_switchToCollectionOrToggleSidebar:(id *)a1
{
  id v3;

  v3 = a2;
  if (a1)
    -[BrowserController _switchToCollectionOrToggleSidebar:completion:](a1, v3, 0);

}

- (void)showReadingListCollectionKeyPressed
{
  -[BrowserController _switchToCollectionOrToggleSidebar:]((id *)&self->super.super.super.isa, CFSTR("ReadingListCollection"));
}

- (void)showHistoryCollectionKeyPressed
{
  -[BrowserController _switchToCollectionOrToggleSidebar:]((id *)&self->super.super.super.isa, CFSTR("HistoryCollection"));
}

- (void)showHistoryCollectionAlternativeKeyPressed
{
  -[BrowserController _switchToCollectionOrToggleSidebar:]((id *)&self->super.super.super.isa, CFSTR("HistoryCollection"));
}

- (void)showSharedWithYouCollectionKeyPressed
{
  -[BrowserController _toggleVisibilityOfStartPageCollection:]((uint64_t)self, CFSTR("SharedWithYouCollection"));
}

- (void)_toggleVisibilityOfStartPageCollection:(uint64_t)a1
{
  void *v3;
  void *v4;
  int v5;
  id v6;
  id v7;

  v7 = a2;
  if (a1)
  {
    v3 = *(void **)(a1 + 344);
    if (*(_BYTE *)(a1 + 695))
      objc_msgSend(v3, "selectPrivateTabGroup");
    else
      objc_msgSend(v3, "selectLocalTabGroup");
    objc_msgSend((id)a1, "currentBookmarksCollection");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = WBSIsEqual();

    if (v5)
      v6 = 0;
    else
      v6 = v7;
    objc_msgSend((id)a1, "setCurrentBookmarksCollection:", v6);
  }

}

- (void)showCloudTabsCollectionKeyPressed
{
  -[BrowserController _toggleVisibilityOfStartPageCollection:]((uint64_t)self, CFSTR("CloudTabsCollection"));
}

- (void)_switchToCollectionOrToggleSidebar:(void *)a3 completion:
{
  void (**v5)(id, uint64_t);
  void *v6;
  char v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (a1)
  {
    if (((objc_msgSend(a1, "isPresentingModalBookmarksController") & 1) != 0
       || objc_msgSend(a1[91], "isShowingSidebar"))
      && (objc_msgSend(a1, "currentBookmarksCollection"),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          v7 = objc_msgSend(v6, "isEqualToString:", v8),
          v6,
          (v7 & 1) == 0))
    {
      objc_msgSend(a1, "setCurrentBookmarksCollection:", v8);
      if (v5)
        v5[2](v5, 1);
    }
    else
    {
      -[BrowserController toggleBookmarksPresentationWithCollection:completion:]((uint64_t)a1, v8, v5);
    }
  }

}

- (void)toggleBookmarksPresentationWithCollection:(void *)a3 completion:
{
  id v5;
  void (**v6)(id, uint64_t);
  char v7;
  uint64_t v8;
  void *v9;
  int v10;
  NSObject *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  uint64_t v16;
  void (**v17)(_QWORD);
  void *v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  void (**v22)(id, uint64_t);
  _QWORD aBlock[4];
  id v24;
  id v25;
  uint8_t buf[4];
  __CFString *v27;
  __int16 v28;
  __CFString *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (a1)
  {
    if ((objc_msgSend(*(id *)(a1 + 728), "isShowingSidebar") & 1) != 0)
      v7 = 1;
    else
      v7 = objc_msgSend((id)a1, "isPresentingModalBookmarksController");
    v8 = objc_msgSend((id)a1, "_bookmarksPresentationStyle");
    if ((v7 & 1) != 0)
    {
      v9 = 0;
    }
    else
    {
      v10 = *(unsigned __int8 *)(a1 + 376);
      *(_BYTE *)(a1 + 376) = 1;
      v11 = WBS_LOG_CHANNEL_PREFIXSignposts();
      if (os_signpost_enabled(v11))
      {
        v12 = CFSTR("modal");
        if (v8 == 1)
          v12 = CFSTR("overlay");
        if (v8 == 2)
          v12 = CFSTR("embedded");
        v13 = v12;
        v14 = CFSTR("NO");
        if (!v10)
          v14 = CFSTR("YES");
        v15 = v14;
        *(_DWORD *)buf = 138412546;
        v27 = v13;
        v28 = 2112;
        v29 = v15;
        _os_signpost_emit_with_name_impl(&dword_1D7CA3000, v11, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "ShowBookmarks", "presentationStyle=%@; firstPresentation=%@",
          buf,
          0x16u);

      }
      v9 = &__block_literal_global_747;
    }
    -[UIResponder safari_becomeFirstResponderIfNeeded](a1);
    if ((unint64_t)(v8 - 1) >= 2)
    {
      if (!v8)
      {
        -[BrowserController _setPresentingModalBookmarksController:exclusively:importHandler:withCollection:bookmarkUUIDString:animated:completion:]((id *)a1, objc_msgSend((id)a1, "isPresentingModalBookmarksController") ^ 1, 0, 0, v5, 0, 1, v9);
        if (v6)
          v6[2](v6, 1);
      }
    }
    else
    {
      objc_initWeak((id *)buf, (id)a1);
      v16 = MEMORY[0x1E0C809B0];
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __74__BrowserController_toggleBookmarksPresentationWithCollection_completion___block_invoke_748;
      aBlock[3] = &unk_1E9CF3D60;
      objc_copyWeak(&v25, (id *)buf);
      v24 = v5;
      v17 = (void (**)(_QWORD))_Block_copy(aBlock);
      v18 = *(void **)(a1 + 728);
      v19 = objc_msgSend(v18, "isShowingSidebar") ^ 1;
      v20[0] = v16;
      v20[1] = 3221225472;
      v20[2] = __74__BrowserController_toggleBookmarksPresentationWithCollection_completion___block_invoke_2;
      v20[3] = &unk_1E9CF3D88;
      v21 = v9;
      v22 = v6;
      objc_msgSend(v18, "setShowingSidebar:completion:", v19, v20);
      v17[2](v17);

      objc_destroyWeak(&v25);
      objc_destroyWeak((id *)buf);
    }
  }

}

- (void)addToBookmarks:(id)a3
{
  id v4;
  NSObject *v5;
  char v6;
  __CFString *v7;
  char isKindOfClass;
  int v9;
  const __CFString *v10;
  __int16 v11;
  __CFString *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (id)WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_opt_respondsToSelector();
    if ((v6 & 1) != 0)
    {
      objc_msgSend(v4, "sf_commandSource");
      v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = CFSTR("Unknown");
    }
    v9 = 138543618;
    v10 = CFSTR("Add to Bookmarks");
    v11 = 2114;
    v12 = v7;
    _os_log_impl(&dword_1D7CA3000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ via %{public}@", (uint8_t *)&v9, 0x16u);
    if ((v6 & 1) != 0)

  }
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  -[BrowserController _addBookmarkForCurrentTabKeyPressed:]((id *)&self->super.super.super.isa, isKindOfClass & 1);

}

- (void)_addBookmarkForCurrentTabKeyPressed:(id *)a1
{
  void *v4;
  id v5;

  if (a1)
  {
    objc_msgSend(a1[43], "activeTabDocument");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "titleForNewBookmark");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController _addBookmarkForCurrentTabKeyPressed:title:](a1, a2, v4);

  }
}

- (void)focusAddressFieldKeyPressed
{
  void *v3;
  id v4;

  if (-[BrowserController isFavoritesFieldFocused](self, "isFavoritesFieldFocused"))
  {
    -[BrowserController _topNavigationBar]((id *)&self->super.super.super.isa);
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "textField");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "selectAll:", 0);

  }
  else
  {
    -[BrowserController setFavoritesFieldFocused:animated:](self, "setFavoritesFieldFocused:animated:", 1, 1);
  }
}

- (void)toggleShowingFavoritesBarKeyPressed
{
  id v3;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setBool:forKey:", -[BrowserController _prefersShowingBookmarksBar]((uint64_t)self) ^ 1, *MEMORY[0x1E0D4EFB8]);

}

- (void)toggleTabView
{
  uint64_t v3;
  void *v4;
  id v5;

  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "presentationState") == 1)
  {

  }
  else
  {
    v3 = objc_msgSend(v5, "presentationState");

    if (v3 != 2)
    {
      -[BrowserController cancelFavoritesAnimated:](self, "cancelFavoritesAnimated:", 0);
      -[BrowserController becomeFirstResponder](self, "becomeFirstResponder");
      objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "didEnterTabViewWithMethod:", 2);

      objc_msgSend(v5, "presentAnimated:", 1);
      goto LABEL_6;
    }
  }
  objc_msgSend(v5, "dismissAnimated:", 1);
LABEL_6:

}

- (void)showTabView
{
  -[BrowserController barManager:didReceiveTapForBarItem:](self, "barManager:didReceiveTapForBarItem:", self->_barManager, 8);
}

- (void)addToReadingList:(id)a3
{
  id v4;
  NSObject *v5;
  char v6;
  __CFString *v7;
  id v8;
  _QWORD v9[5];
  id v10;
  uint8_t buf[4];
  const __CFString *v12;
  __int16 v13;
  __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (id)WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_opt_respondsToSelector();
    if ((v6 & 1) != 0)
    {
      objc_msgSend(v4, "sf_commandSource");
      v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = CFSTR("Unknown");
    }
    *(_DWORD *)buf = 138543618;
    v12 = CFSTR("Add to Reading List");
    v13 = 2114;
    v14 = v7;
    _os_log_impl(&dword_1D7CA3000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ via %{public}@", buf, 0x16u);
    if ((v6 & 1) != 0)

  }
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __38__BrowserController_addToReadingList___block_invoke;
  v9[3] = &unk_1E9CF3358;
  v9[4] = self;
  v8 = v4;
  v10 = v8;
  -[BrowserController showReadingListAutomaticArchiveAlertIfNeededWithCompletion:](self, "showReadingListAutomaticArchiveAlertIfNeededWithCompletion:", v9);

}

void __38__BrowserController_addToReadingList___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id WeakRetained;

  if (objc_msgSend(*(id *)(a1 + 32), "addReadingListBookmarkForCurrentTab"))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v2 = 2;
    else
      v2 = 3;
    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "didAddReadingListItemWithMethod:", v2);

  }
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 384));
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 32);
    objc_msgSend(*(id *)(v3 + 896), "bounds");
    UIRectGetCenter();
    objc_msgSend(WeakRetained, "browserController:animateSafariIconLinkFromPoint:inView:", v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 896));
  }

}

- (void)nextReadingListItemKeyPressed
{
  void *v3;
  void *v4;

  -[BrowserController continuousReadingController](self, "continuousReadingController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "nextReadingListItem");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    -[ContinuousReadingViewController loadNextItem](self->_continuousReadingViewController, "loadNextItem");
}

- (void)previousReadingListItemKeyPressed
{
  void *v3;
  void *v4;

  -[BrowserController continuousReadingController](self, "continuousReadingController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "previousReadingListItem");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    -[ContinuousReadingViewController loadPreviousItem](self->_continuousReadingViewController, "loadPreviousItem");
}

- (void)_pressedNewTabKeySwitchingToPrivateBrowsingIfNeeded:(char)a3 positionOptions:(char)a4 isKeyboardShortcut:
{
  uint64_t v8;
  void (**v9)(_QWORD);
  int v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[4];
  void (**v17)(_QWORD);
  _QWORD aBlock[5];
  char v19;

  if (a1)
  {
    objc_msgSend((id)a1, "cancelFavoritesAnimated:", 0);
    v8 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __108__BrowserController__pressedNewTabKeySwitchingToPrivateBrowsingIfNeeded_positionOptions_isKeyboardShortcut___block_invoke;
    aBlock[3] = &unk_1E9CF3818;
    v19 = a4;
    aBlock[4] = a1;
    v9 = (void (**)(_QWORD))_Block_copy(aBlock);
    if (a2)
    {
      v10 = *(unsigned __int8 *)(a1 + 695);
      objc_msgSend(*(id *)(a1 + 344), "selectPrivateTabGroup");
      if (!v10)
      {
        objc_msgSend(*(id *)(a1 + 344), "privateActiveTabDocument");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "isBlank");

        if (v12)
        {
          v9[2](v9);
LABEL_9:

          return;
        }
      }
      v13 = 2;
    }
    else
    {
      v13 = 0;
    }
    v14 = v13 | a3 & 0xC;
    v15 = *(void **)(a1 + 344);
    v16[0] = v8;
    v16[1] = 3221225472;
    v16[2] = __108__BrowserController__pressedNewTabKeySwitchingToPrivateBrowsingIfNeeded_positionOptions_isKeyboardShortcut___block_invoke_2;
    v16[3] = &unk_1E9CF3500;
    v17 = v9;
    objc_msgSend(v15, "openNewTabWithOptions:completionHandler:", v14, v16);

    goto LABEL_9;
  }
}

uint64_t __108__BrowserController__pressedNewTabKeySwitchingToPrivateBrowsingIfNeeded_positionOptions_isKeyboardShortcut___block_invoke(uint64_t a1)
{
  int v2;
  void *v3;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "didOpenNewBlankTabWithTrigger:tabCollectionViewType:", v2 == 0, objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "visibleTabCollectionViewType"));

  result = -[BrowserController _wantsURLFieldAutoFocus](*(void **)(a1 + 32));
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "setFavoritesFieldFocused:animated:", 1, 0);
  return result;
}

uint64_t __108__BrowserController__pressedNewTabKeySwitchingToPrivateBrowsingIfNeeded_positionOptions_isKeyboardShortcut___block_invoke_2(uint64_t result, int a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

- (void)openNewTab:(id)a3
{
  id v4;
  NSObject *v5;
  char v6;
  __CFString *v7;
  char isKindOfClass;
  char v9;
  int v10;
  const __CFString *v11;
  __int16 v12;
  __CFString *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[TabController switchToTabGroupVisibleInSwitcherIfNeeded](self->_tabController, "switchToTabGroupVisibleInSwitcherIfNeeded");
  v5 = (id)WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_opt_respondsToSelector();
    if ((v6 & 1) != 0)
    {
      objc_msgSend(v4, "sf_commandSource");
      v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = CFSTR("Unknown");
    }
    v10 = 138543618;
    v11 = CFSTR("Open new tab");
    v12 = 2114;
    v13 = v7;
    _os_log_impl(&dword_1D7CA3000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ via %{public}@", (uint8_t *)&v10, 0x16u);
    if ((v6 & 1) != 0)

  }
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((v4 == 0) | isKindOfClass & 1)
    v9 = 4;
  else
    v9 = 8;
  -[BrowserController _pressedNewTabKeySwitchingToPrivateBrowsingIfNeeded:positionOptions:isKeyboardShortcut:]((uint64_t)self, 0, v9, isKindOfClass & 1);

}

- (void)newTabAlternativeKeyPressed
{
  NSObject *v3;
  uint8_t v4[16];

  v3 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1D7CA3000, v3, OS_LOG_TYPE_DEFAULT, "Open new tab via alternate keyboard shortcut", v4, 2u);
  }
  -[BrowserController _pressedNewTabKeySwitchingToPrivateBrowsingIfNeeded:positionOptions:isKeyboardShortcut:]((uint64_t)self, 0, 4, 1);
}

- (void)openNewPrivateTab:(id)a3
{
  id v4;
  NSObject *v5;
  char v6;
  __CFString *v7;
  char isKindOfClass;
  int v9;
  const __CFString *v10;
  __int16 v11;
  __CFString *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (id)WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = objc_opt_respondsToSelector();
    if ((v6 & 1) != 0)
    {
      objc_msgSend(v4, "sf_commandSource");
      v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = CFSTR("Unknown");
    }
    v9 = 138543618;
    v10 = CFSTR("Open new Private tab");
    v11 = 2114;
    v12 = v7;
    _os_log_impl(&dword_1D7CA3000, v5, OS_LOG_TYPE_INFO, "%{public}@ via %{public}@", (uint8_t *)&v9, 0x16u);
    if ((v6 & 1) != 0)

  }
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (self)
    -[BrowserController _pressedNewTabKeySwitchingToPrivateBrowsingIfNeeded:positionOptions:isKeyboardShortcut:]((uint64_t)self, 1, 4, isKindOfClass & 1);

}

- (void)newTabGroupKeyPressed
{
  NSObject *v3;
  TabController *tabController;
  _QWORD v5[5];
  uint8_t buf[16];

  v3 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D7CA3000, v3, OS_LOG_TYPE_DEFAULT, "Create new Empty Tab Group via keyboard shortcut", buf, 2u);
  }
  tabController = self->_tabController;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __42__BrowserController_newTabGroupKeyPressed__block_invoke;
  v5[3] = &unk_1E9CF3840;
  v5[4] = self;
  -[TabController createTabGroupFromExistingTabs:completionHandler:](tabController, "createTabGroupFromExistingTabs:completionHandler:", 0, v5);
}

void __42__BrowserController_newTabGroupKeyPressed__block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "didCreateTabGroupFromLocation:prepopulatedWithTabs:", 8, 0);

    if (SFEnhancedTabOverviewEnabled())
    {
      if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "isShowingTabView"))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "tabSwitcherViewController");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "setNeedsApplyContentAnimated:", 1);

        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "tabSwitcherViewController");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "setNeedsScrollToTabGroup:", v6);

      }
    }
  }

}

- (void)closeTabGroupKeyPressed
{
  NSObject *v3;
  TabController *tabController;
  void *v5;
  uint8_t v6[16];

  v3 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1D7CA3000, v3, OS_LOG_TYPE_DEFAULT, "Closing Tab Group via keyboard shortcut", v6, 2u);
  }
  tabController = self->_tabController;
  -[TabController activeTabGroupOrTabGroupVisibleInSwitcher](tabController, "activeTabGroupOrTabGroupVisibleInSwitcher");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabController closeTabGroup:](tabController, "closeTabGroup:", v5);

}

- (void)renameTabGroupKeyPressed
{
  NSObject *v3;
  void *v4;
  TabController *tabController;
  uint8_t v6[16];

  v3 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1D7CA3000, v3, OS_LOG_TYPE_DEFAULT, "Renaming Tab Group via keyboard shortcut", v6, 2u);
  }
  if (SFEnhancedTabOverviewEnabled()
    && -[TabCollectionViewProviding isShowingTabView](self->_tabCollectionViewProvider, "isShowingTabView"))
  {
    -[TabCollectionViewProviding tabSwitcherViewController](self->_tabCollectionViewProvider, "tabSwitcherViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "beginRenamingVisibleTabGroup");
  }
  else
  {
    tabController = self->_tabController;
    -[TabController activeTabGroup](tabController, "activeTabGroup");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[TabController renameTabGroup:](tabController, "renameTabGroup:", v4);
  }

}

- (void)previousTabGroupKeyPressed
{
  NSObject *v3;
  void *v4;
  void *v5;
  uint8_t v6[16];

  v3 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1D7CA3000, v3, OS_LOG_TYPE_DEFAULT, "Switching to previous Tab Group via keyboard shortcut", v6, 2u);
  }
  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "didSwitchToTabGroupFromLocation:", 8);

  if (SFEnhancedTabOverviewEnabled()
    && -[TabCollectionViewProviding isShowingTabView](self->_tabCollectionViewProvider, "isShowingTabView"))
  {
    -[TabCollectionViewProviding tabSwitcherViewController](self->_tabCollectionViewProvider, "tabSwitcherViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "scrollToPreviousTabGroup");

  }
  else
  {
    -[TabController selectPreviousTabGroup](self->_tabController, "selectPreviousTabGroup");
  }
}

- (void)nextTabGroupKeyPressed
{
  NSObject *v3;
  void *v4;
  void *v5;
  uint8_t v6[16];

  v3 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1D7CA3000, v3, OS_LOG_TYPE_DEFAULT, "Switching to next Tab Group via keyboard shortcut", v6, 2u);
  }
  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "didSwitchToTabGroupFromLocation:", 8);

  if (SFEnhancedTabOverviewEnabled()
    && -[TabCollectionViewProviding isShowingTabView](self->_tabCollectionViewProvider, "isShowingTabView"))
  {
    -[TabCollectionViewProviding tabSwitcherViewController](self->_tabCollectionViewProvider, "tabSwitcherViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "scrollToNextTabGroup");

  }
  else
  {
    -[TabController selectNextTabGroup](self->_tabController, "selectNextTabGroup");
  }
}

- (void)newTabWithAlternativeOrderingKeyPressed
{
  NSObject *v3;
  uint8_t v4[16];

  v3 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1D7CA3000, v3, OS_LOG_TYPE_DEFAULT, "Open new tab with alternative ordering keyboard shortcut", v4, 2u);
  }
  -[BrowserController _pressedNewTabKeySwitchingToPrivateBrowsingIfNeeded:positionOptions:isKeyboardShortcut:]((uint64_t)self, 0, 0, 1);
}

- (void)_searchTabs
{
  int v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  if (a1)
  {
    v2 = SFEnhancedTabOverviewEnabled();
    v3 = *(void **)(a1 + 904);
    if (v2)
    {
      objc_msgSend(v3, "tabSwitcherViewController");
      v6 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "beginSearching");
    }
    else
    {
      objc_msgSend(v3, "tabOverview");
      v7 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v7, "presentationState") == 1)
      {

      }
      else
      {
        v4 = objc_msgSend(v7, "presentationState");

        if (v4 != 2)
          return;
      }
      objc_msgSend(*(id *)(a1 + 904), "tabOverview");
      v6 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "searchController");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "beginSearching");

    }
  }
}

- (void)_logTabClosingWithEventSender:(uint64_t)a3 tabClosingAction:(uint64_t)a4 numberOfTabsClosed:
{
  char isKindOfClass;
  id v8;

  v8 = a2;
  if (a1)
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    -[BrowserController _logTabClosingWithKeyboardShortcut:tabClosingAction:numberOfTabsClosed:](a1, isKindOfClass & 1, a3, a4);
  }

}

- (void)_logTabClosingWithKeyboardShortcut:(uint64_t)a3 tabClosingAction:(uint64_t)a4 numberOfTabsClosed:
{
  uint64_t v7;
  uint64_t v8;
  id v9;

  if (a1)
  {
    v7 = objc_msgSend(*(id *)(a1 + 904), "visibleTabCollectionViewType");
    if (a2)
      v8 = 1;
    else
      v8 = 2;
    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "didCloseTabWithTrigger:tabClosingAction:numberOfTabsClosed:tabCollectionViewType:", v8, a3, a4, v7);

  }
}

- (void)closeActiveTab:(id)a3
{
  id v4;
  NSObject *v5;
  char v6;
  __CFString *v7;
  void *v8;
  BOOL v9;
  int v10;
  const __CFString *v11;
  __int16 v12;
  __CFString *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (id)WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_opt_respondsToSelector();
    if ((v6 & 1) != 0)
    {
      objc_msgSend(v4, "sf_commandSource");
      v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = CFSTR("Unknown");
    }
    v10 = 138543618;
    v11 = CFSTR("Close tab");
    v12 = 2114;
    v13 = v7;
    _os_log_impl(&dword_1D7CA3000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ via %{public}@", (uint8_t *)&v10, 0x16u);
    if ((v6 & 1) != 0)

  }
  -[BrowserController _logTabClosingWithEventSender:tabClosingAction:numberOfTabsClosed:]((uint64_t)self, v4, 1, 1);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v8, "isPinned") & 1) != 0)
    {
      v9 = -[TabController selectFirstUnpinnedTab](self->_tabController, "selectFirstUnpinnedTab");

      if (v9)
        goto LABEL_13;
    }
    else
    {

    }
  }
  -[TabController closeTab](self->_tabController, "closeTab");
LABEL_13:

}

- (void)closeOtherTabsKeyPressed
{
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v3 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1D7CA3000, v3, OS_LOG_TYPE_DEFAULT, "Close Other Tabs via keyboard", v5, 2u);
  }
  -[BrowserController showBars](self, "showBars");
  -[TabController currentTabs](self->_tabController, "currentTabs");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _logTabClosingWithKeyboardShortcut:tabClosingAction:numberOfTabsClosed:]((uint64_t)self, 1, 2, objc_msgSend(v4, "count") - 1);

  -[TabController closeOtherTabs](self->_tabController, "closeOtherTabs");
}

- (void)_switchTabsByRelativeIndex:(void *)a3 withKeyCommand:
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a3;
  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 344), "currentTabs");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "count");
    objc_msgSend(*(id *)(a1 + 344), "tabBeingActivated");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v5, "indexOfObject:", v7);

    if (v8 + a2 >= v6)
      v9 = 0;
    else
      v9 = v8 + a2;
    if (v8 + a2 >= 0)
      v10 = v9;
    else
      v10 = v6 - 1;
    if (v10 != v8)
    {
      *(_QWORD *)(a1 + 144) = objc_msgSend(v13, "modifierFlags");
      v11 = *(void **)(a1 + 344);
      objc_msgSend(v5, "objectAtIndexedSubscript:", v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setActiveTab:animated:deferActivation:", v12, 1, 1);

    }
  }

}

- (void)nextTabKeyPressed:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v5;
  else
    v4 = 0;
  -[BrowserController _switchTabsByRelativeIndex:withKeyCommand:]((uint64_t)self, 1, v4);

}

- (void)previousTabKeyPressed:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v5;
  else
    v4 = 0;
  -[BrowserController _switchTabsByRelativeIndex:withKeyCommand:]((uint64_t)self, -1, v4);

}

- (void)reopenLastClosedTabPressed
{
  void *v3;
  TabDocument *v4;
  TabController *tabController;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  -[TabController switchToTabGroupVisibleInSwitcherIfNeeded](self->_tabController, "switchToTabGroupVisibleInSwitcherIfNeeded");
  -[BrowserController _lastClosedTabStateData](self);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D4EF28], "sharedBrowserSavedState");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "loadSessionStateDataAndRemoveRecentlyClosedTab:", v9);

  v4 = -[TabDocument initWithTabStateData:hibernated:browserController:]([TabDocument alloc], "initWithTabStateData:hibernated:browserController:", v9, 0, self);
  tabController = self->_tabController;
  -[TabController activeTabDocument](tabController, "activeTabDocument");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabController insertTab:afterTab:inBackground:animated:](tabController, "insertTab:afterTab:inBackground:animated:", v4, v6, 0, 1);

  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "didOpenNewTabWithURLWithTrigger:tabCollectionViewType:", 4, -[TabCollectionViewProviding visibleTabCollectionViewType](self->_tabCollectionViewProvider, "visibleTabCollectionViewType"));

  -[TabController undoManager](self->_tabController, "undoManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "removeAllActions");

}

- (void)toggleDownloadsKeyPressed
{
  NSObject *v3;
  uint8_t v4[16];

  v3 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1D7CA3000, v3, OS_LOG_TYPE_DEFAULT, "Open downloads via keyboard shortcut", v4, 2u);
  }
  -[BrowserController presentDownloadsViewController](self, "presentDownloadsViewController");
}

- (void)reloadKeyPressed
{
  id v3;

  -[BrowserController dismissTransientUIAnimated:](self, "dismissTransientUIAnimated:", 1);
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reloadUserInitiated");

}

- (void)reloadFromOriginKeyPressed
{
  id v3;

  -[BrowserController dismissTransientUIAnimated:](self, "dismissTransientUIAnimated:", 1);
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reloadFromOriginUserInitiated");

}

- (void)find:(id)a3
{
  void *v4;
  id v5;
  id v6;

  if (-[BrowserController _showingTabDocumentWithURL]((uint64_t)self))
  {
    -[BrowserController tabController](self, "tabController");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "activeTabDocument");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "showFindOnPage");

    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "didFindOnPageWithTrigger:", 0);

  }
  else
  {
    -[BrowserController _searchTabs]((uint64_t)self);
  }
}

- (void)takeFindStringKeyPressed
{
  void *v2;
  id v3;

  self->_shouldFillStringForFind = 1;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "activeWebView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_takeFindStringFromSelection:", 0);

}

- (void)cancelKeyPressed
{
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  int v7;
  void *v8;
  id v9;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "sfScribbleControllerIfLoaded");
  v9 = (id)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend(v9, "isScribbling"))
  {
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "presentationState") == 1)
    {

    }
    else
    {
      v5 = objc_msgSend(v4, "presentationState");

      if (v5 != 2)
      {
        if (-[BrowserController isShowingFavorites](self, "isShowingFavorites"))
        {
          -[BrowserController cancelFavorites](self, "cancelFavorites");
          goto LABEL_15;
        }
        if (-[BrowserController isShowingReader](self, "isShowingReader"))
        {
          -[BrowserController setShowingReader:animated:](self, "setShowingReader:animated:", 0, 1);
          goto LABEL_15;
        }
        if (-[BrowserController dismissTransientUIAnimated:](self, "dismissTransientUIAnimated:", 1))
          goto LABEL_15;
        -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "stopLoadingUserInitiated");
        goto LABEL_8;
      }
    }
    objc_msgSend(v4, "searchController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isSearching");

    if (!v7)
    {
      objc_msgSend(v4, "dismissAnimated:", 1);
      goto LABEL_15;
    }
    objc_msgSend(v4, "searchController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "endSearching");
LABEL_8:

LABEL_15:
    goto LABEL_16;
  }
  objc_msgSend(v9, "endScribblingAndSaveChanges:", 0);
LABEL_16:

}

- (void)emailCurrentPage
{
  -[BrowserController _emailCurrentPageWithPreferredContentType:]((uint64_t)self, *MEMORY[0x1E0CD58E0]);
}

- (void)_emailCurrentPageWithPreferredContentType:(uint64_t)a1
{
  void *v4;
  _QWORD v5[6];

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __63__BrowserController__emailCurrentPageWithPreferredContentType___block_invoke;
    v5[3] = &unk_1E9CF3890;
    v5[4] = a1;
    v5[5] = a2;
    objc_msgSend(v4, "fetchCanonicalURLWithCompletionHandler:", v5);

  }
}

void __63__BrowserController__emailCurrentPageWithPreferredContentType___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[5];

  v3 = a2;
  -[BrowserController _mailContentProvider](*(_QWORD **)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __63__BrowserController__emailCurrentPageWithPreferredContentType___block_invoke_2;
  v6[3] = &unk_1E9CF3868;
  v5 = *(_QWORD *)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v4, "getMailComposeViewControllerWithMailToURL:contentURL:preferredContentType:completionHandler:", 0, v3, v5, v6);

}

- (_QWORD)_mailContentProvider
{
  _QWORD *v1;
  void *v2;
  id v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = (void *)a1[8];
    if (!v2)
    {
      v3 = objc_alloc_init(MEMORY[0x1E0CD5708]);
      v4 = (void *)v1[8];
      v1[8] = v3;

      objc_msgSend((id)v1[8], "setDataSource:", v1);
      v2 = (void *)v1[8];
    }
    a1 = v2;
  }
  return a1;
}

void __63__BrowserController__emailCurrentPageWithPreferredContentType___block_invoke_2(uint64_t a1, void *a2)
{
  -[BrowserController _presentModalViewController:](*(id **)(a1 + 32), a2);
}

- (void)_presentModalViewController:(id *)a1
{
  id v3;

  v3 = a2;
  if (a1)
    -[BrowserController _presentModalViewController:fromBarItem:animated:completion:](a1, v3, *MEMORY[0x1E0D4F3D8], 1, 0);

}

- (void)increaseSize:(id)a3
{
  NSObject *v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  v4 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1D7CA3000, v4, OS_LOG_TYPE_DEFAULT, "Zoom In via keyboard shortcut", v7, 2u);
  }
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isShowingReader"))
  {
    objc_msgSend(v5, "readerContext");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "canIncreaseReaderTextSize"))
      objc_msgSend(v6, "increaseReaderTextSize");

  }
  else
  {
    objc_msgSend(v5, "increasePageZoomSetting");
  }

}

- (void)decreaseSize:(id)a3
{
  NSObject *v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  v4 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1D7CA3000, v4, OS_LOG_TYPE_DEFAULT, "Zoom Out via keyboard shortcut", v7, 2u);
  }
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isShowingReader"))
  {
    objc_msgSend(v5, "readerContext");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "canDecreaseReaderTextSize"))
      objc_msgSend(v6, "decreaseReaderTextSize");

  }
  else
  {
    objc_msgSend(v5, "decreasePageZoomSetting");
  }

}

- (void)resetPageZoomLevelAndFontSize
{
  NSObject *v3;
  void *v4;
  void *v5;
  uint8_t v6[16];

  v3 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1D7CA3000, v3, OS_LOG_TYPE_DEFAULT, "Reset Zoom via keyboard shortcut", v6, 2u);
  }
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isShowingReader"))
  {
    objc_msgSend(v4, "readerContext");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "resetReaderTextSize");

  }
  else
  {
    objc_msgSend(v4, "resetPageZoomSetting");
  }

}

- (void)_presentSaveWebpageViewController
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  if (a1)
  {
    if (-[BrowserController _canSaveWebpage](a1))
    {
      objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      +[ActionPanel createActivityItemProviderCollectionForTabDocument:](ActionPanel, "createActivityItemProviderCollectionForTabDocument:", v2);
      v5 = (id)objc_claimAutoreleasedReturnValue();

      v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0CD5798]), "initWithActivityItemProviderCollection:", v5);
      v4 = *(void **)(a1 + 296);
      *(_QWORD *)(a1 + 296) = v3;

      objc_msgSend(*(id *)(a1 + 296), "setDelegate:", a1);
      objc_msgSend(*(id *)(a1 + 296), "start");

    }
  }
}

- (void)autoFillFormKeyPressed
{
  id v2;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "performPageLevelAutoFill");

}

- (void)closeAllTabsMatchingSearch:(id)a3
{
  void *v4;
  TabController *tabController;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[5];
  id v12;

  v10 = a3;
  -[TabController tabsMatchingSearchTerm](self->_tabController, "tabsMatchingSearchTerm");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _logTabClosingWithEventSender:tabClosingAction:numberOfTabsClosed:]((uint64_t)self, v10, 4, objc_msgSend(v4, "count"));
  tabController = self->_tabController;
  _WBSLocalizedString();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __48__BrowserController_closeAllTabsMatchingSearch___block_invoke;
  v11[3] = &unk_1E9CF3358;
  v11[4] = self;
  v7 = v4;
  v12 = v7;
  -[TabController registerUndoWithName:actions:](tabController, "registerUndoWithName:actions:", v6, v11);

  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "searchController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "endSearching");

}

uint64_t __48__BrowserController_closeAllTabsMatchingSearch___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "closeTabs:", *(_QWORD *)(a1 + 40));
}

- (void)closeAllTabs:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  id v17;
  BrowserController *v18;

  v4 = a3;
  v5 = (void *)MEMORY[0x1E0DC3450];
  -[BrowserController _closeAllTabsLabel]((uint64_t)self);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = MEMORY[0x1E0C809B0];
  v14 = 3221225472;
  v15 = __34__BrowserController_closeAllTabs___block_invoke;
  v16 = &unk_1E9CF3358;
  v7 = v4;
  v17 = v7;
  v18 = self;
  objc_msgSend(v5, "safari_closeAllTabsConfirmationWithCloseAllLabel:closeHandler:", v6, &v13);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  -[BrowserController tabBarManager](self, "tabBarManager", v13, v14, v15, v16);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "displayMode") == 1)
  {
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "presentationState");

    if (v11)
      v12 = 8;
    else
      v12 = 7;
  }
  else
  {

    v12 = 8;
  }
  -[BrowserController _presentModalViewController:fromBarItem:completion:](self, "_presentModalViewController:fromBarItem:completion:", v8, v12, 0);

}

uint64_t __34__BrowserController_closeAllTabs___block_invoke(uint64_t a1)
{
  NSObject *v2;
  char v3;
  __CFString *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  int v9;
  const __CFString *v10;
  __int16 v11;
  __CFString *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (id)WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_opt_respondsToSelector();
    if ((v3 & 1) != 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "sf_commandSource");
      v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v4 = CFSTR("Unknown");
    }
    v9 = 138543618;
    v10 = CFSTR("Close all tab");
    v11 = 2114;
    v12 = v4;
    _os_log_impl(&dword_1D7CA3000, v2, OS_LOG_TYPE_DEFAULT, "%{public}@ via %{public}@", (uint8_t *)&v9, 0x16u);
    if ((v3 & 1) != 0)

  }
  v6 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(v5 + 344), "currentTabs");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _logTabClosingWithEventSender:tabClosingAction:numberOfTabsClosed:](v5, v6, 3, objc_msgSend(v7, "count"));

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 344), "closeAllOpenTabsAnimated:", 1);
}

- (void)addAllTabsToBookmarks:(id)a3
{
  id v4;
  NSObject *v5;
  char v6;
  __CFString *v7;
  int v8;
  const __CFString *v9;
  __int16 v10;
  __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (id)WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_opt_respondsToSelector();
    if ((v6 & 1) != 0)
    {
      objc_msgSend(v4, "sf_commandSource");
      v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = CFSTR("Unknown");
    }
    v8 = 138543618;
    v9 = CFSTR("Add all to bookmarks");
    v10 = 2114;
    v11 = v7;
    _os_log_impl(&dword_1D7CA3000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@ via %{public}@", (uint8_t *)&v8, 0x16u);
    if ((v6 & 1) != 0)

  }
  -[BrowserController addBookmarkFolderForCurrentTabs](self, "addBookmarkFolderForCurrentTabs");

}

- (void)openNewWindow:(id)a3
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_browserWindowController);
  objc_msgSend(WeakRetained, "openNewWindowWithPrivateBrowsingEnabled:fromWindow:", 0, self);

}

- (void)openNewWindowInFrontmostProfile:(id)a3
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_browserWindowController);
  objc_msgSend(WeakRetained, "openNewWindowInFrontmostProfileWithPrivateBrowsingEnabled:fromWindow:", 0, self);

}

- (void)openNewPrivateWindow:(id)a3
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_browserWindowController);
  objc_msgSend(WeakRetained, "openNewWindowWithPrivateBrowsingEnabled:fromWindow:", 1, self);

}

- (void)mergeAllWindows:(id)a3
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_browserWindowController);
  objc_msgSend(WeakRetained, "mergeAllWindowsIntoWindow:", self);

}

- (void)_presentActivityViewController
{
  if (a1)
  {
    -[BrowserController _prepareToPresentActivityViewController](a1);
    *(_BYTE *)(a1 + 121) = 1;
    -[BrowserController _presentActionPanelIfReady](a1);
  }
}

- (void)_pasteAndNavigate
{
  void *v1;
  _QWORD v2[4];
  id v3;
  id location;

  if (val)
  {
    objc_initWeak(&location, val);
    objc_msgSend(MEMORY[0x1E0DC3AC0], "generalPasteboard");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __38__BrowserController__pasteAndNavigate__block_invoke;
    v2[3] = &unk_1E9CF38B8;
    objc_copyWeak(&v3, &location);
    objc_msgSend(v1, "safari_bestStringForPastingIntoURLFieldCompletionHandler:", v2);

    objc_destroyWeak(&v3);
    objc_destroyWeak(&location);
  }
}

void __38__BrowserController__pasteAndNavigate__block_invoke(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(MEMORY[0x1E0D4EF70], "builder");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "navigationIntentWithText:", v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "dispatchNavigationIntent:", v5);

}

- (void)scribbleDoneKeyPressed
{
  void *v2;
  id v3;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "sfScribbleControllerIfLoaded");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "endScribblingAndSaveChanges:", 1);

}

- (void)_keyboardWillShow:(id)a3
{
  void *v4;
  int v5;
  void *v6;
  id v7;

  objc_msgSend(a3, "userInfo");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (_SFDeviceIsPad())
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isShowingFindOnPage");

    if (v5)
      -[UIScrollView _adjustForAutomaticKeyboardInfo:animated:lastAdjustment:](self->_scrollView, "_adjustForAutomaticKeyboardInfo:animated:lastAdjustment:", v7, 1, &self->_lastAdjustmentForKeyboard);
  }
  -[BrowserController firstResponder](self, "firstResponder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v6, "isDescendantOfView:", self->_webView))
    -[BrowserController setOverridesUndoManagerForClosedTabs:](self, "setOverridesUndoManagerForClosedTabs:", 0);
  if (!self->_isPerformingRootViewControllerSizeTransition)
    -[BrowserRootViewController updateWebViewSizeAttributes](self->_rootViewController, "updateWebViewSizeAttributes");

}

- (void)_keyboardWillHide:(id)a3
{
  void *v4;
  void *v5;
  id WeakRetained;
  id v7;

  v7 = a3;
  objc_msgSend(v7, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserRootViewController updateWebViewSizeAttributes](self->_rootViewController, "updateWebViewSizeAttributes");
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isShowingFindOnPage"))
    -[UIScrollView _adjustForAutomaticKeyboardInfo:animated:lastAdjustment:](self->_scrollView, "_adjustForAutomaticKeyboardInfo:animated:lastAdjustment:", v4, 1, &self->_lastAdjustmentForKeyboard);
  objc_msgSend(v5, "keyboardWillHide:", v7);
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "browserControllerLayOutCatalogView:", self);

}

- (_SFBrowserDocument)activeDocument
{
  return (_SFBrowserDocument *)-[TabController activeTabDocument](self->_tabController, "activeTabDocument");
}

- (WBSWebExtensionTab)activeTabForExtensions
{
  return (WBSWebExtensionTab *)-[TabController activeTabDocument](self->_tabController, "activeTabDocument");
}

- (BOOL)hasDedicatedExtensionsButton
{
  int IsPad;

  IsPad = _SFDeviceIsPad();
  if (IsPad)
  {
    IsPad = -[BrowserRootViewController usingUnifiedBar](self->_rootViewController, "usingUnifiedBar");
    if (IsPad)
      LOBYTE(IsPad) = -[BrowserController tabBarDisplayMode](self, "tabBarDisplayMode") != 1;
  }
  return IsPad;
}

- (void)clearBadgeOnPageFormatMenu
{
  void *v2;
  void *v3;
  id v4;

  -[BrowserController tabController](self, "tabController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "activeTabDocument");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "webExtensionsController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "didViewToolbarItemBadgesInTab:", v4);

}

- (void)toggleShowingReaderForUserAction
{
  _BOOL4 v3;
  BOOL v4;
  id v5;

  -[BrowserController cancelFavorites](self, "cancelFavorites");
  v3 = -[BrowserController isShowingReader](self, "isShowingReader");
  v4 = v3;
  -[BrowserController setShowingReader:animated:](self, "setShowingReader:animated:", !v3, 1);
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "didActivateReaderWithTrigger:", 0);

  }
}

- (void)setKeepBarsMinimized:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;

  v3 = a3;
  if (-[BrowserRootViewController keepBarsMinimized](self->_rootViewController, "keepBarsMinimized") != a3)
  {
    -[BrowserRootViewController setKeepBarsMinimized:](self->_rootViewController, "setKeepBarsMinimized:", v3);
    if (v3)
    {
      -[BrowserRootViewController dynamicBarAnimator](self->_rootViewController, "dynamicBarAnimator");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController updateDynamicBarGeometry](self, "updateDynamicBarGeometry");
      objc_msgSend(v5, "attemptTransitionToState:animated:", 0, 1);
      -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "transitionToState:animated:completionHandler:", 1, 1, 0);

    }
    -[BrowserRootViewController updateAccessibilityIdentifier](self->_rootViewController, "updateAccessibilityIdentifier");
  }
}

- (BOOL)keepBarsMinimized
{
  return -[BrowserRootViewController keepBarsMinimized](self->_rootViewController, "keepBarsMinimized");
}

- (BOOL)hasUnviewedDownloads
{
  void *v2;
  char v3;

  objc_msgSend(MEMORY[0x1E0CD56A8], "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "hasUnviewedDownloads");

  return v3;
}

- (unint64_t)downloadsCount
{
  void *v2;
  void *v3;
  unint64_t v4;

  objc_msgSend(MEMORY[0x1E0CD56A8], "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "downloads");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  return v4;
}

- (_SFPerSitePreferencesVendor)perSitePreferencesVendor
{
  id WeakRetained;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_browserWindowController);
  objc_msgSend(WeakRetained, "perSitePreferencesVendor");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (_SFPerSitePreferencesVendor *)v3;
}

- (_SFPageZoomPreferenceManager)pageZoomManager
{
  void *v3;
  void *v4;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController pageZoomPreferenceManagerForTabDocument:](self, "pageZoomPreferenceManagerForTabDocument:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (_SFPageZoomPreferenceManager *)v4;
}

- (BOOL)supportsPrivacyReport
{
  return 1;
}

- (BOOL)supportsSiriReadThis
{
  return 1;
}

- (BOOL)hasDedicatedMediaStateButton
{
  int IsPad;

  IsPad = _SFDeviceIsPad();
  if (IsPad)
    LOBYTE(IsPad) = -[BrowserRootViewController usingUnifiedBar](self->_rootViewController, "usingUnifiedBar");
  return IsPad;
}

- (BOOL)hasDedicatedDownloadsToolbarItem
{
  void *v2;
  void *v3;
  int IsPad;
  int v5;
  int v6;

  -[BrowserController tabBarManager](self, "tabBarManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "inlineTabBar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  IsPad = _SFDeviceIsPad();
  if (v3)
    v5 = IsPad;
  else
    v5 = 0;
  if (v5 == 1)
    v6 = objc_msgSend(v3, "usesMoreMenu") ^ 1;
  else
    LOBYTE(v6) = 0;

  return v6;
}

- (void)willPresentBrowsingAssistantInSheet
{
  void *v2;
  id v3;

  -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "capsuleCollectionView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setForceHidden:", 1);
  objc_msgSend(v2, "setMinimizationStyle:", 1);
  objc_msgSend(v2, "setAlwaysShowTopBackdrop:", 1);
  objc_msgSend(v3, "transitionToState:animated:completionHandler:", 1, 1, 0);

}

- (void)willDismissBrowsingAssistantInSheet
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D8A7C0], "sharedManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "assistantController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "webpageIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "donateBrowsingAssistantVisualComponentPresentationEndedWithWebPageID:componentType:componentIdentifier:hideReason:", v5, 1, &unk_1E9D61FD8, 0);

  if ((-[_SFPageFormatMenuController stepperIsInTransitionView](self->_pageFormatMenuController, "stepperIsInTransitionView") & 1) == 0)-[BrowserController _unhideCapsuleFromPageMenu]((id *)&self->super.super.super.isa);
}

- (void)_unhideCapsuleFromPageMenu
{
  void *v2;
  void *v3;
  id v4;

  if (a1)
  {
    objc_msgSend(a1[35], "capsuleViewController");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "capsuleCollectionView");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setForceHidden:", 0);
    objc_msgSend(a1[43], "activeTabDocument");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setMinimizationStyle:", objc_msgSend(v3, "isShowingReader"));

    if (objc_msgSend(a1, "keepBarsMinimized"))
    {
      objc_msgSend(v4, "transitionToState:animated:completionHandler:", 0, 0, 0);
      objc_msgSend(v2, "setAlwaysShowTopBackdrop:", 0);
      objc_msgSend(v4, "transitionToState:animated:completionHandler:", 1, 1, 0);
      objc_msgSend(a1, "setKeepBarsMinimized:", 1);
    }
    else
    {
      objc_msgSend(v4, "transitionToState:animated:completionHandler:", 0, 1, 0);
      objc_msgSend(v2, "setAlwaysShowTopBackdrop:", 0);
    }

  }
}

- (void)unhideCapsuleFromPageMenuIfNeeded
{
  if (self->_stepperMovedToRootView)
  {
    self->_stepperMovedToRootView = 0;
    -[BrowserController _unhideCapsuleFromPageMenu]((id *)&self->super.super.super.isa);
  }
}

- (void)takeOwnershipOfStepperContainer:(id)a3
{
  -[BrowserRootViewController takeOwnershipOfStepperContainer:](self->_rootViewController, "takeOwnershipOfStepperContainer:", a3);
  self->_stepperMovedToRootView = 1;
}

- (void)addToFavorites
{
  void *v3;
  id v4;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "titleForNewBookmark");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _addBookmarkForCurrentTabKeyPressed:title:addToFavorites:]((id *)&self->super.super.super.isa, 0, v3, 1);

}

- (void)_addBookmarkForCurrentTabKeyPressed:(void *)a3 title:(int)a4 addToFavorites:
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[4];
  char v20;

  v7 = a3;
  if (a1)
  {
    v8 = objc_alloc(MEMORY[0x1E0CD57C0]);
    objc_msgSend(MEMORY[0x1E0DCCBA0], "mainBookmarkCollection");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (a4)
      v10 = objc_msgSend(v8, "initForAddingToFavoritesInCollection:", v9);
    else
      v10 = objc_msgSend(v8, "initWithCollection:", v9);
    v11 = (void *)v10;

    objc_msgSend(v11, "setSyntheticBookmarkProvider:", a1[43]);
    if ((objc_msgSend(v11, "prepareForPresentationForAddingBookmark:", 1) & 1) != 0)
    {
      objc_msgSend(a1[43], "activeTabDocument");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "cachedCanonicalURLOrURLForSharing");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "absoluteString");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (id)objc_msgSend(v11, "addBookmarkWithTitle:address:parentBookmark:", v7, v14, 0);

      objc_msgSend(v11, "setBookmarkNavDelegate:", a1);
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __78__BrowserController__addBookmarkForCurrentTabKeyPressed_title_addToFavorites___block_invoke;
      v19[3] = &__block_descriptor_33_e5_v8__0l;
      v20 = a2;
      objc_msgSend(v11, "setAddBookmarkAnalyticsHandler:", v19);
      objc_msgSend(a1, "_presentModalViewController:fromBarItem:completion:", v11, *MEMORY[0x1E0D4F3D8], 0);
    }
    else
    {

      v16 = (void *)MEMORY[0x1E0D4EBD8];
      objc_msgSend(a1, "viewControllerToPresentFrom");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "showLockedDatabaseAlertForAction:fromViewController:", 1, v17);

      objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "didPreventBookmarkActionWithBookmarkType:actionType:", 0, 0);

      v11 = 0;
    }

  }
}

- (BOOL)canAddToQuickNote
{
  void *v3;
  void *v4;
  void *v5;
  char v6;

  +[Application sharedApplication](Application, "sharedApplication");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "systemNoteTakingController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "isNoteTakingSupportedWithPrivateBrowsing:", objc_msgSend(v5, "isPrivateBrowsingEnabled"));

  return v6;
}

- (void)addToQuickNote
{
  id v2;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addAppHighlightCreatingLink:", 1);

}

- (BOOL)canPrintCurrentTab
{
  BrowserController *v2;
  void *v3;

  v2 = self;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[BrowserController _canPrintForTabDocument:]((uint64_t)v2, v3);

  return (char)v2;
}

- (BOOL)canMoveToTabGroup
{
  void *v2;
  void *v3;
  int v4;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "isCustomTabGroupsEnabled")
    && (objc_msgSend(v2, "isPrivateBrowsingEnabled") & 1) == 0)
  {
    v4 = objc_msgSend(v2, "isPinned") ^ 1;
  }
  else
  {
    LOBYTE(v4) = 0;
  }

  return v4;
}

- (id)moveMenuOnPageMenuWithDismissHandler:(id)a3
{
  -[TabController moveMenuOnPageMenuWithDismissHandler:](self->_tabController, "moveMenuOnPageMenuWithDismissHandler:", a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (BOOL)canTogglePinningTab
{
  TabController *tabController;
  void *v3;
  void *v4;

  tabController = self->_tabController;
  -[TabController activeTabDocument](tabController, "activeTabDocument");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "wbTab");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(tabController) = -[TabController isTabPinnable:](tabController, "isTabPinnable:", v4);

  return (char)tabController;
}

- (BOOL)currentTabIsPinned
{
  void *v2;
  char v3;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isPinned");

  return v3;
}

- (void)togglePinningCurrentTab
{
  id v3;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[TabController setTab:isPinned:](self->_tabController, "setTab:isPinned:", v3, objc_msgSend(v3, "isPinned") ^ 1);

}

- (void)presentPrintControllerForCurrentTab
{
  id v3;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[BrowserController presentPrintControllerForTabDocument:frame:initiatedByWebContent:](self, "presentPrintControllerForTabDocument:frame:initiatedByWebContent:");

}

- (void)reportScribbleFeedbackForSelectedRowIndex:(int64_t)a3
{
  int64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;

  if ((unint64_t)a3 >= 3)
    v4 = 3;
  else
    v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v31 = (id)objc_claimAutoreleasedReturnValue();
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "committedURL");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "absoluteString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setObject:forKeyedSubscript:", v7, *MEMORY[0x1E0D8B4C0]);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setObject:forKeyedSubscript:", v8, *MEMORY[0x1E0D8B4A8]);

  objc_msgSend(MEMORY[0x1E0D89BD0], "currentDevice");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "deviceClass");

  if (v10 == 3)
    v11 = CFSTR("iPad");
  else
    v11 = CFSTR("iPhone");
  objc_msgSend(v31, "setObject:forKeyedSubscript:", v11, *MEMORY[0x1E0D8B4A0]);
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "webView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "bounds");
  v15 = v14;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setObject:forKeyedSubscript:", v17, *MEMORY[0x1E0D8B4D0]);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v15);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setObject:forKeyedSubscript:", v18, *MEMORY[0x1E0D8B4C8]);

  v19 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v13, "scrollView");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "zoomScale");
  objc_msgSend(v19, "numberWithDouble:");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setObject:forKeyedSubscript:", v21, *MEMORY[0x1E0D8B4E0]);

  v22 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v13, "_viewScale");
  objc_msgSend(v22, "numberWithDouble:");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setObject:forKeyedSubscript:", v23, *MEMORY[0x1E0D8B4D8]);

  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "safari_operatingSystemVersionString");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setObject:forKeyedSubscript:", v25, *MEMORY[0x1E0D8B4B0]);

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "safari_normalizedVersion");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setObject:forKeyedSubscript:", v27, *MEMORY[0x1E0D8B4B8]);

  +[Application sharedApplication](Application, "sharedApplication");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "scribbleFeedbackSyncEngine");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = (void *)objc_msgSend(v31, "copy");
  objc_msgSend(v29, "syncScribbleFeedbackUp:withCompletion:", v30, &__block_literal_global_538);

}

- (void)collectDiagnosticsForAutoFillWithCompletionHandler:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "autoFillController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "collectDiagnosticsForAutoFillWithCompletionHandler:", v6);

}

- (void)presentAutoFillInternalFeedbackToastWithDiagnosticsDataWithoutPageContents:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4EBB8]), "initWithDiagnosticsData:", v6);
  objc_msgSend(v4, "setDelegate:", self);
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4EE58]), "initWithContentViewController:", v4);
  objc_msgSend(v5, "setDelegate:", self);
  objc_msgSend(v5, "setDismissalMode:", 1);
  objc_storeWeak((id *)&self->_activeAutoFillInternalFeedbackToastController, v5);
  -[BrowserController _presentToastViewControllerQueuingIfNecessary:]((uint64_t)self, v5);
  -[BrowserController _scheduleAutoFillInternalFeedbackToastDismissal]((uint64_t)self);

}

- (void)_scheduleAutoFillInternalFeedbackToastDismissal
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id location;

  if (a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 648));
    if (WeakRetained)
    {
      objc_initWeak(&location, (id)a1);
      v3 = (void *)MEMORY[0x1E0C99E88];
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = __68__BrowserController__scheduleAutoFillInternalFeedbackToastDismissal__block_invoke;
      v6[3] = &unk_1E9CF36A0;
      objc_copyWeak(&v8, &location);
      v7 = WeakRetained;
      objc_msgSend(v3, "scheduledTimerWithTimeInterval:repeats:block:", 0, v6, 10.0);
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = *(void **)(a1 + 640);
      *(_QWORD *)(a1 + 640) = v4;

      objc_destroyWeak(&v8);
      objc_destroyWeak(&location);
    }

  }
}

- (void)_cancelPendingAutoFillInternalFeedbackToastDismissal
{
  void *v2;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 640), "invalidate");
    v2 = *(void **)(a1 + 640);
    *(_QWORD *)(a1 + 640) = 0;

  }
}

- (void)_dismissAutoFillInternalFeedbackToast:(id *)a1
{
  id WeakRetained;
  id v4;

  v4 = a2;
  if (a1)
  {
    WeakRetained = objc_loadWeakRetained(a1 + 81);

    if (WeakRetained == v4)
    {
      objc_storeWeak(a1 + 81, 0);
      if (a1[69] == v4)
        objc_msgSend(a1, "dismissToastViewController:", v4);
      else
        objc_msgSend(a1[70], "removeObject:", v4);
    }
  }

}

- (void)resetPendingAutoFillInternalFeedbackToastDismissalTimer
{
  if (-[NSTimer isValid](self->_activeAutoFillInternalFeedbackToastDismissalTimer, "isValid"))
  {
    -[BrowserController _cancelPendingAutoFillInternalFeedbackToastDismissal]((uint64_t)self);
    -[BrowserController _scheduleAutoFillInternalFeedbackToastDismissal]((uint64_t)self);
  }
}

void __68__BrowserController__scheduleAutoFillInternalFeedbackToastDismissal__block_invoke(uint64_t a1)
{
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  -[BrowserController _dismissAutoFillInternalFeedbackToast:](WeakRetained, *(void **)(a1 + 32));

}

- (void)autoFillInternalFeedbackActivityNotice:(id)a3 shouldPresentFeedbackForm:(BOOL)a4
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD v11[5];

  v6 = a3;
  -[BrowserController dismissToastViewController:](self, "dismissToastViewController:", self->_currentlyPresentedToastViewController);
  if (a4)
  {
    objc_msgSend(v6, "diagnosticsData");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_alloc(MEMORY[0x1E0CD5640]);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __86__BrowserController_autoFillInternalFeedbackActivityNotice_shouldPresentFeedbackForm___block_invoke;
    v11[3] = &unk_1E9CF3900;
    v11[4] = self;
    v9 = (void *)objc_msgSend(v8, "initWithDiagnosticsData:reportHandler:", v7, v11);
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3A40]), "initWithRootViewController:", v9);
    objc_msgSend(v10, "setModalPresentationStyle:", 1);
    -[BrowserController presentModalViewController:completion:](self, "presentModalViewController:completion:", v10, 0);

  }
}

void __86__BrowserController_autoFillInternalFeedbackActivityNotice_shouldPresentFeedbackForm___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "activeDocument");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "activeWebView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "windowScene");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "openURL:options:completionHandler:", v7, 0, 0);

}

- (void)navigationBarMetricsDidChange:(id)a3
{
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;

  if (!self->_isPerformingRootViewControllerSizeTransition)
  {
    -[BrowserRootViewController view](self->_rootViewController, "view", a3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "frame");
    v6 = v5;
    v8 = v7;

    -[BrowserController rootViewControllerViewWillTransitionToSize:](self, "rootViewControllerViewWillTransitionToSize:", v6, v8);
    -[BrowserController updateDynamicBarGeometry](self, "updateDynamicBarGeometry");
    -[BrowserController rootViewControllerViewTransitionFromSize:includingSidebar:animated:](self, "rootViewControllerViewTransitionFromSize:includingSidebar:animated:", 0, 0, v6, v8);
    -[BrowserController rootViewControllerViewDidTransitionFromSize:animated:](self, "rootViewControllerViewDidTransitionFromSize:animated:", 0, v6, v8);
  }
}

- (void)compressedNavigationBarWasTapped:(id)a3
{
  if (-[BrowserController scrollViewShouldScrollToTop:](self, "scrollViewShouldScrollToTop:", self->_scrollView))
    -[UIScrollView _scrollToTopIfPossible:](self->_scrollView, "_scrollToTopIfPossible:", 1);
}

- (void)navigationBarURLWasTapped:(id)a3 completionHandler:(id)a4
{
  -[BrowserController _focusNavigationBarWithCompletionHandler:](self, a4);
}

uint64_t __73__BrowserController__focusNavigationBarForVoiceSearch_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

- (void)navigationBarReaderButtonWasTapped:(id)a3
{
  id v4;

  -[BrowserController _readerButtonTapped](self);
  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "reportIOSToolbarButtonUsage:withLayout:", 25, -[BrowserController analyticsLayoutProvenance](self, "analyticsLayoutProvenance"));

}

- (void)navigationBarTranslateButtonWasTapped:(id)a3
{
  id v4;

  -[BrowserController _formatMenuButtonPopoverSourceInfo](self);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[BrowserController navigationBarTranslateButtonWasTappedWithSourceInfo:](self, "navigationBarTranslateButtonWasTappedWithSourceInfo:");

}

- (void)navigationBarTranslateButtonWasTappedWithSourceInfo:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "translationContext");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "availableTargetLocaleIdentifiers");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "count");
  if (v7)
  {
    if (v7 == 1)
    {
      objc_msgSend(v6, "objectAtIndexedSubscript:", 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "requestTranslatingWebpageToLocale:completionHandler:", v8, 0);
    }
    else
    {
      v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CD57D8]), "initWithTranslationContext:", v5);
      if (v11)
        objc_msgSend(v8, "configurePopoverWithSourceInfo:", v11);
      -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "presentViewController:animated:completion:", v8, 1, 0);

    }
  }
  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "reportIOSToolbarButtonUsage:withLayout:", 27, -[BrowserController analyticsLayoutProvenance](self, "analyticsLayoutProvenance"));

}

- (void)navigationBarFormatMenuButtonStartedInteraction:(id)a3
{
  void *v3;
  id v4;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "readerContext");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "checkReaderAvailability");

}

- (void)navigationBarCancelButtonWasTapped:(id)a3
{
  id v4;
  id v5;

  -[BrowserController removeCachedSearchStateForActiveTabDocument](self, "removeCachedSearchStateForActiveTabDocument", a3);
  -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "reportUnifiedFieldSearchDidCancel");

  -[BrowserController cancelFavorites](self, "cancelFavorites");
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hideFindOnPage");

}

- (void)navigationBarReloadButtonWasTapped:(id)a3
{
  id v4;
  id v5;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "reloadUserInitiated");

  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "reportIOSToolbarButtonUsage:withLayout:", 22, -[BrowserController analyticsLayoutProvenance](self, "analyticsLayoutProvenance"));

}

- (void)navigationBarMinimizationChanged
{
  -[BrowserRootViewController updateThemeColorIfNeededAnimated:](self->_rootViewController, "updateThemeColorIfNeededAnimated:", 1);
}

- (void)navigationBarStopLoadingButtonWasTapped:(id)a3
{
  id v4;
  id v5;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stopLoadingUserInitiated");

  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "reportIOSToolbarButtonUsage:withLayout:", 23, -[BrowserController analyticsLayoutProvenance](self, "analyticsLayoutProvenance"));

}

- (void)navigationBarMediaStateMuteButtonWasTapped:(id)a3 forItem:(id)a4
{
  BOOL v5;
  void *v6;
  TabController *tabController;
  void *v8;
  void *v9;
  id v10;

  v10 = a4;
  objc_opt_class();
  v5 = (objc_opt_isKindOfClass() & 1) == 0;
  v6 = v10;
  if (v5)
    v6 = 0;
  tabController = self->_tabController;
  objc_msgSend(v6, "UUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabController tabDocumentWithUUID:](tabController, "tabDocumentWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "toggleMediaStateMuted");
}

- (void)navigationBarFormatMenuButtonWasTapped:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[5];

  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "didToggleMagicMenuSBA");

  -[BrowserController pageFormatMenuController](self, "pageFormatMenuController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "viewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "presentingViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "reportIOSToolbarButtonUsage:withLayout:", 35, -[BrowserController analyticsLayoutProvenance](self, "analyticsLayoutProvenance"));

  }
  -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _formatMenuButtonPopoverSourceInfo](self);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v5, "presentMenuFromViewController:withSourceInfo:", v9, v10);

  if ((v11 & 1) != 0)
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "assistantController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "result");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "remoteContentAvailableForFetching");

    if (v15)
    {
      objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "didClickSparkleSBA");

      objc_msgSend(MEMORY[0x1E0D8A7C0], "sharedManager");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "assistantController");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "webpageIdentifier");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "donateBrowsingAssistantUserInteractionDetectedWithWebPageID:componentType:componentIdentifier:summaryText:tableOfContentsArrayLength:", v19, 0, &unk_1E9D61FF0, 0, 0);

    }
    objc_msgSend(v12, "assistantController");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "url");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __60__BrowserController_navigationBarFormatMenuButtonWasTapped___block_invoke;
    v22[3] = &unk_1E9CF3578;
    v22[4] = self;
    objc_msgSend(v20, "updateAssistantContentForURL:completionHandler:", v21, v22);

  }
}

uint64_t __60__BrowserController_navigationBarFormatMenuButtonWasTapped___block_invoke(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = result;
    objc_msgSend(*(id *)(*(_QWORD *)(result + 32) + 184), "updateReaderCardWithSummaryIfNeeded");
    return objc_msgSend(*(id *)(*(_QWORD *)(v2 + 32) + 184), "reloadBrowsingAssistantIfNeeded");
  }
  return result;
}

- (void)tabDocument:(id)a3 didReceiveAssistantContentOptions:(unint64_t)a4
{
  char v4;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;

  v4 = a4;
  v6 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v7 = (id)objc_claimAutoreleasedReturnValue();

  if ((v4 & 0x1F) != 0 && v7 == v6)
  {
    -[_SFPageFormatMenuController viewController](self->_pageFormatMenuController, "viewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v8, "isBeingPresented") & 1) == 0)
    {
      objc_msgSend(v8, "presentingViewController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (v9)
      {

      }
      else if ((objc_msgSend(v6, "isShowingReader") & 1) == 0)
      {
LABEL_8:

        goto LABEL_9;
      }
    }
    objc_msgSend(v6, "assistantController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "url");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __67__BrowserController_tabDocument_didReceiveAssistantContentOptions___block_invoke;
    v13[3] = &unk_1E9CF3928;
    v13[4] = self;
    v14 = v6;
    v12 = v10;
    v15 = v12;
    objc_msgSend(v12, "updateAssistantContentForURL:completionHandler:", v11, v13);

    goto LABEL_8;
  }
LABEL_9:

}

void __67__BrowserController_tabDocument_didReceiveAssistantContentOptions___block_invoke(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  if (a2)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "reloadBrowsingAssistantIfNeeded");
    if (objc_msgSend(*(id *)(a1 + 40), "isShowingReader"))
    {
      objc_msgSend(*(id *)(a1 + 40), "readerContext");
      v11 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "summary");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      _WBSLocalizedString();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      _WBSLocalizedString();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "URLString");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "stringByReplacingOccurrencesOfString:withString:", CFSTR("https://"), CFSTR("safari-reader://"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "tableOfContentsTitles");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "tableOfContentsPaths");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "tableOfContentsTrailingTexts");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setArticleSummary:withSummaryHeader:tableOfContentsHeader:readerURLString:titles:paths:trailingText:", v3, v4, v5, v7, v8, v9, v10);

    }
  }
}

- (void)handleSearchResult:(id)a3
{
  id v4;

  objc_msgSend(a3, "_sf_punchoutURL");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[BrowserController _loadURL:inExternalApplication:forImageAttribution:]((uint64_t)self, v4, 0, 0);

}

- (void)navigationBarFormatMenuButtonBecameUnavailable:(id)a3
{
  id v3;

  -[_SFPageFormatMenuController viewController](self->_pageFormatMenuController, "viewController", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dismissViewControllerAnimated:completion:", 1, 0);

}

- (id)navigationBarURLForSharing:(id)a3
{
  void *v3;
  void *v4;
  void *v5;

  -[BrowserController tabController](self, "tabController", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "urlForSharing");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (void)navigationBar:(id)a3 didFinishShowingAvailabilityLabelOfType:(int64_t)a4
{
  void *v5;
  id v6;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument", a3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "navigationBarItem");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setDidFinishShowingAvailabilityLabel:ofType:", 1, a4);

}

- (void)navigationBar:(id)a3 multipleExtensionsButtonTapped:(id)a4
{
  id v6;
  void *v7;
  int v8;
  id v9;

  v9 = a3;
  v6 = a4;
  if (-[BrowserController tabBarDisplayMode](self, "tabBarDisplayMode") == 2
    || (-[TabController activeTabDocument](self->_tabController, "activeTabDocument"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v8 = objc_msgSend(v7, "isBlank"),
        v7,
        v8))
  {
    -[BrowserController webExtensionsButtonTapped:](self, "webExtensionsButtonTapped:", v6);
  }
  else
  {
    -[BrowserController navigationBarFormatMenuButtonWasTapped:](self, "navigationBarFormatMenuButtonWasTapped:", v9);
  }

}

- (void)webExtensionsButtonTapped:(id)a3
{
  id v4;
  ActionPanel *v5;
  void *v6;
  void *v7;
  ActionPanel *v8;
  ActionPanel *extensionActionPanel;
  void *v10;
  ActionPanel *v11;
  void *v12;
  _QWORD v13[5];

  v4 = a3;
  -[ActionPanel _cancel](self->_extensionActionPanel, "_cancel");
  v5 = [ActionPanel alloc];
  -[BrowserController tabController](self, "tabController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "activeTabDocument");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[ActionPanel initWithTabDocument:activityDelegate:menuStyle:](v5, "initWithTabDocument:activityDelegate:menuStyle:", v7, self, 1);
  extensionActionPanel = self->_extensionActionPanel;
  self->_extensionActionPanel = v8;

  -[_SFActivityViewController setDelegate:](self->_extensionActionPanel, "setDelegate:", self);
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4EFA0]), "initWithView:", v4);
  -[BrowserController setCanFocusNavigationBarURL:](self, "setCanFocusNavigationBarURL:", 0);
  v11 = self->_extensionActionPanel;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __47__BrowserController_webExtensionsButtonTapped___block_invoke;
  v13[3] = &unk_1E9CF31B0;
  v13[4] = self;
  -[BrowserController _presentModalViewController:fromPopoverSource:useAdaptivePresentationInCompact:animated:completion:](self, v11, v10, 1, 1, v13);
  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "reportIOSToolbarButtonUsage:withLayout:", 34, -[BrowserController analyticsLayoutProvenance](self, "analyticsLayoutProvenance"));

}

void __47__BrowserController_webExtensionsButtonTapped___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "setCanFocusNavigationBarURL:", 1);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 528);
  *(_QWORD *)(v2 + 528) = 0;

}

- (void)_presentModalViewController:(void *)a3 fromPopoverSource:(uint64_t)a4 useAdaptivePresentationInCompact:(uint64_t)a5 animated:(void *)a6 completion:
{
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;

  v11 = a2;
  v12 = a3;
  v13 = a6;
  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v11, "setProvenance:", objc_msgSend(v12, "provenance"));
    v14 = objc_msgSend(v11, "modalPresentationStyle");
    if (v12 && -[BrowserController _shouldPresentViewControllerUsingAdaptivePopover:]((uint64_t)a1, v11))
    {
      objc_msgSend(v11, "setModalPresentationStyle:", 7);
      v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CD5750]), "initWithSourceInfo:", v12);
      objc_msgSend(v15, "setPopoverUsesAdaptivePresentationInCompact:", a4);
      objc_msgSend(v11, "popoverPresentationController");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "attachToPopoverPresentationController:", v16);

    }
    else if (objc_msgSend(v11, "modalPresentationStyle") == 7)
    {
      objc_msgSend(v11, "setModalPresentationStyle:", 0);
    }
    else if ((unint64_t)(v14 - 1) <= 1)
    {
      -[BrowserController _setSheetPresentationIfNeededForController:]((uint64_t)a1, v11);
    }
    objc_msgSend(v11, "presentingViewController");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      v18 = (id)WBS_LOG_CHANNEL_PREFIXUserInteraction();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v11, "presentingViewController");
        objc_claimAutoreleasedReturnValue();
        -[BrowserController _presentModalViewController:fromPopoverSource:useAdaptivePresentationInCompact:animated:completion:].cold.1();
      }

    }
    objc_msgSend(a1, "viewControllerToPresentFrom");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "_sf_viewControllerToPresentFrom");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "presentViewController:animated:completion:", v11, a5, v13);

  }
}

- (void)navigationBar:(id)a3 extensionButtonTapped:(id)a4 extension:(id)a5
{
  id v7;
  void *v8;
  id v9;

  v9 = a4;
  v7 = a5;
  -[BrowserController webExtensionButtonTapped:extension:](self, "webExtensionButtonTapped:extension:", v9, v7);
  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "reportIOSToolbarButtonUsage:withLayout:", 20, -[BrowserController analyticsLayoutProvenance](self, "analyticsLayoutProvenance"));

}

- (void)webExtensionButtonTapped:(id)a3 extension:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  v6 = a4;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4EFA0]), "initWithView:", v11);
  objc_msgSend(v6, "toolbarItem");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController activeTabForExtensions](self, "activeTabForExtensions");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "performActionForTab:parentViewController:popoverSourceInfo:", v9, v10, v7);

}

- (void)showPopupForWebExtension:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  -[BrowserController tabController](self, "tabController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "activeTabDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "toolbarItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "unifiedTabBarItem");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "bestButtonForExtensionPopoverSource:", v11);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4EFA0]), "initWithView:", v8);
  -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "showPopupForTab:parentViewController:popoverSourceInfo:", v5, v10, v9);

}

- (void)showWebExtensionBanner:(id)a3
{
  -[BannerController setWebExtensionBanner:animated:](self->_bannerController, "setWebExtensionBanner:animated:", a3, 0);
}

- (void)webExtensionWasRemotelyEnabled:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id from;
  id location;

  v4 = a3;
  -[BannerController remotelyEnabledExtensionBanner](self->_bannerController, "remotelyEnabledExtensionBanner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "addExtension:", v4);
  }
  else
  {
    objc_initWeak(&location, self);
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4EEF0]), "initWithExtension:", v4);
    objc_initWeak(&from, self->_bannerController);
    v7 = MEMORY[0x1E0C809B0];
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __52__BrowserController_webExtensionWasRemotelyEnabled___block_invoke;
    v11[3] = &unk_1E9CF3950;
    objc_copyWeak(&v12, &from);
    objc_msgSend(v6, "setDismissButtonHandler:", v11);
    v8[0] = v7;
    v8[1] = 3221225472;
    v8[2] = __52__BrowserController_webExtensionWasRemotelyEnabled___block_invoke_2;
    v8[3] = &unk_1E9CF3978;
    objc_copyWeak(&v9, &location);
    objc_copyWeak(&v10, &from);
    objc_msgSend(v6, "setOpenActionHandler:", v8);
    -[BannerController setRemotelyEnabledExtensionBanner:animated:](self->_bannerController, "setRemotelyEnabledExtensionBanner:animated:", v6, 0);
    objc_destroyWeak(&v10);
    objc_destroyWeak(&v9);
    objc_destroyWeak(&v12);
    objc_destroyWeak(&from);
    objc_destroyWeak(&location);
  }

}

void __52__BrowserController_webExtensionWasRemotelyEnabled___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "setRemotelyEnabledExtensionBanner:animated:", 0, 0);

}

void __52__BrowserController_webExtensionWasRemotelyEnabled___block_invoke_2(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id *v11;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v11 = WeakRetained;
    v3 = objc_loadWeakRetained((id *)(a1 + 40));
    v4 = v3;
    if (v3)
    {
      objc_msgSend(v3, "setRemotelyEnabledExtensionBanner:animated:", 0, 0);
      v5 = objc_loadWeakRetained(v11 + 48);
      objc_msgSend(v5, "viewControllerToPresentFromForBrowserController:", v11);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      v7 = (void *)MEMORY[0x1E0D4ECC8];
      objc_msgSend(v11, "tabController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "activeTabDocument");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "createManageExtensionsNavigationControllerFromPageFormatMenu:activeDocument:", 0, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v6, "presentViewController:animated:completion:", v10, 1, 0);
    }

    WeakRetained = v11;
  }

}

- (void)showExtensionPermissionBannerForExtensions:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id location;

  v4 = a3;
  objc_msgSend(MEMORY[0x1E0CD57A0], "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "defaultSearchEngineForPrivateBrowsing:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "searchURLForUserTypedString:", CFSTR("a"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "host");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "safari_highLevelDomainFromHost");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4EF00]), "initWithExtensions:grantedHost:", v4, v9);
  objc_initWeak(&location, self->_bannerController);
  v11 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __64__BrowserController_showExtensionPermissionBannerForExtensions___block_invoke;
  v19[3] = &unk_1E9CF3950;
  objc_copyWeak(&v20, &location);
  objc_msgSend(v10, "setAllowButtonHandler:", v19);
  v13 = v11;
  v14 = 3221225472;
  v15 = __64__BrowserController_showExtensionPermissionBannerForExtensions___block_invoke_2;
  v16 = &unk_1E9CF39A0;
  objc_copyWeak(&v18, &location);
  v12 = v4;
  v17 = v12;
  objc_msgSend(v10, "setResetExtensionPermissionsHandler:", &v13);
  -[BannerController setWebExtensionPermissionGrantedBanner:animated:](self->_bannerController, "setWebExtensionPermissionGrantedBanner:animated:", v10, 0, v13, v14, v15, v16);

  objc_destroyWeak(&v18);
  objc_destroyWeak(&v20);
  objc_destroyWeak(&location);

}

void __64__BrowserController_showExtensionPermissionBannerForExtensions___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setWebExtensionPermissionGrantedBanner:animated:", 0, 0);

}

void __64__BrowserController_showExtensionPermissionBannerForExtensions___block_invoke_2(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id obj;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v15 = WeakRetained;
    objc_msgSend(WeakRetained, "setWebExtensionPermissionGrantedBanner:animated:", 0, 0);
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    +[Application sharedApplication](Application, "sharedApplication");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "allWebExtensionsControllers");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    obj = v3;
    v19 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    if (v19)
    {
      v17 = *(_QWORD *)v27;
      do
      {
        v20 = 0;
        do
        {
          if (*(_QWORD *)v27 != v17)
            objc_enumerationMutation(obj);
          v4 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v20);
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          v21 = *(id *)(a1 + 32);
          v5 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
          if (v5)
          {
            v6 = *(_QWORD *)v23;
            do
            {
              v7 = 0;
              do
              {
                if (*(_QWORD *)v23 != v6)
                  objc_enumerationMutation(v21);
                objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * v7), "extension");
                v8 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v4, "webExtensionForExtension:", v8);
                v9 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend(MEMORY[0x1E0C99E60], "set");
                v10 = (void *)objc_claimAutoreleasedReturnValue();
                v11 = (void *)MEMORY[0x1E0C99E60];
                objc_msgSend(v9, "grantedPermissionOrigins");
                v12 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v12, "allKeys");
                v13 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v11, "setWithArray:", v13);
                v14 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v9, "removeGrantedPermissions:origins:exactPatternMatchesOnly:", v10, v14, 1);

                ++v7;
              }
              while (v5 != v7);
              v5 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
            }
            while (v5);
          }

          ++v20;
        }
        while (v20 != v19);
        v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      }
      while (v19);
    }

    WeakRetained = v15;
  }

}

- (void)showPrivateBrowsingPrivacyProtectionsBanner:(id)a3
{
  -[BannerController setPrivateBrowsingPrivacyProtectionsBanner:animated:](self->_bannerController, "setPrivateBrowsingPrivacyProtectionsBanner:animated:", a3, 1);
}

void __68__BrowserController__showPrivateBrowsingExplanationSheetIfNecessary__block_invoke(uint64_t a1)
{
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (objc_msgSend(WeakRetained, "shouldShowWhatsNewInPrivateBrowsingSheet"))
    {
      objc_msgSend(WeakRetained[35], "showWhatsNewInPrivateBrowsingSheet");
    }
    else if (objc_msgSend(WeakRetained, "shouldShowTurnOnLockedPrivateBrowsingSheet"))
    {
      objc_msgSend(WeakRetained[35], "showTurnOnLockedPrivateBrowsingSheet");
    }
  }

}

- (BOOL)shouldShowTurnOnLockedPrivateBrowsingSheet
{
  void *v2;
  int v3;

  objc_msgSend(MEMORY[0x1E0C99EA0], "safari_browserDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(MEMORY[0x1E0D89BE8], "isLockedPrivateBrowsingEnabled")
    && objc_msgSend(v2, "BOOLForKey:", *MEMORY[0x1E0D8B210])
    && objc_msgSend(v2, "BOOLForKey:", *MEMORY[0x1E0D8AEA0])
    && (objc_msgSend(v2, "BOOLForKey:", *MEMORY[0x1E0D8B2C8]) & 1) == 0)
  {
    v3 = objc_msgSend(v2, "BOOLForKey:", *MEMORY[0x1E0D8AFE0]) ^ 1;
  }
  else
  {
    LOBYTE(v3) = 0;
  }

  return v3;
}

- (void)resetWhatsNewInPrivateBrowsingStartPageModule
{
  id v2;

  -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "resetPrivateBrowsingExplanation");

}

- (id)itemProviderForNavigationBar:(id)a3
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)MEMORY[0x1E0CB36C8];
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "safari_itemProviderForTabDocument:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (int64_t)dataOwnerForNavigationBar:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int64_t v8;

  -[BrowserController tabController](self, "tabController", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v4, "hasQuickLookContent") & 1) != 0)
  {
    objc_msgSend(v4, "quickLookDocument");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "sourceURL");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "isURLManaged:", v7))
      v8 = 2;
    else
      v8 = 3;

  }
  else
  {
    v8 = 3;
  }

  return v8;
}

- (id)currentContentUUIDForNavigationBar:(id)a3
{
  void *v3;
  void *v4;
  void *v5;

  -[BrowserController tabController](self, "tabController", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (void)navigationBar:(id)a3 didProduceNavigationIntent:(id)a4
{
  -[BrowserController dispatchNavigationIntent:](self, "dispatchNavigationIntent:", a4);
}

- (void)navigationBar:(id)a3 didCreateLeadingToolbar:(id)a4 trailingToolbar:(id)a5
{
  id v7;
  id v8;

  v8 = a4;
  v7 = a5;
  -[_SFBarManager registerToolbar:withLayout:persona:](self->_barManager, "registerToolbar:withLayout:persona:", v8, 0, 0);
  -[_SFBarManager registerToolbar:withLayout:persona:](self->_barManager, "registerToolbar:withLayout:persona:", v7, 1, 0);

}

- (void)navigationBarDidLayoutSubviews:(id)a3
{
  -[BrowserRootViewController _setNeedsUpdateOfMultitaskingDragExclusionRects](self->_rootViewController, "_setNeedsUpdateOfMultitaskingDragExclusionRects", a3);
}

- (void)_updateSidebarStickinessAfterUserAction
{
  id v2;

  if (a1)
  {
    if (objc_msgSend(a1, "_bookmarksPresentationStyle") == 2)
    {
      objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
      v2 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setBool:forKey:", objc_msgSend(a1[91], "isShowingSidebar"), CFSTR("ShowSidebar"));

    }
  }
}

uint64_t __61__BrowserController__showOrHideSidebarInLandscapeIfNecessary__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 728), "setShowingSidebar:completion:", -[BrowserController shouldShowSidebarInLandscape](*(void **)(a1 + 32)), 0);
}

- (void)_perSitePreferencesDidChange:(id)a3
{
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  if ((objc_msgSend(v7, "_sf_perSitePreferenceNotificationWasSentFromAnotherProcess") & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_browserWindowController);
    objc_msgSend(WeakRetained, "perSitePreferencesVendor");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "sharedUserMediaPermissionController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "reloadPreferences");

    -[BrowserController _reloadPresentedPreferencesListViewController](self);
  }

}

- (void)_contentBlockersPerSitePreferenceDidChange:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  BrowserController *v8;

  v4 = a3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __64__BrowserController__contentBlockersPerSitePreferenceDidChange___block_invoke;
  v6[3] = &unk_1E9CF3358;
  v7 = v4;
  v8 = self;
  v5 = v4;
  dispatch_async(MEMORY[0x1E0C80D38], v6);

}

void __64__BrowserController__contentBlockersPerSitePreferenceDidChange___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "safari_stringForKey:", *MEMORY[0x1E0D8B000]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 344), "allTabDocuments", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(v8, "URL");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "safari_userVisibleHostWithoutWWWSubdomain");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isEqualToString:", v3);

        if (v11)
          objc_msgSend(v8, "reload");
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

}

- (void)_perSiteLockdownModePreferenceDidChange:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  BrowserController *v8;

  v4 = a3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __61__BrowserController__perSiteLockdownModePreferenceDidChange___block_invoke;
  v6[3] = &unk_1E9CF3358;
  v7 = v4;
  v8 = self;
  v5 = v4;
  dispatch_async(MEMORY[0x1E0C80D38], v6);

}

void __61__BrowserController__perSiteLockdownModePreferenceDidChange___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "safari_stringForKey:", *MEMORY[0x1E0D8B008]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 344), "allTabDocuments", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(v8, "URL");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "safari_userVisibleHostWithoutWWWSubdomain");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isEqualToString:", v3);

        if (v11)
          objc_msgSend(v8, "reload");
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

}

- (BOOL)isShowingCompletionDetail
{
  void *v2;
  char v3;

  -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isShowingCompletionDetail");

  return v3;
}

- (void)prepareToNavigateInTabDocument:(id)a3
{
  void *v4;
  id v5;
  id v6;

  v6 = a3;
  -[BrowserController tabController](self, "tabController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "activeTabDocument");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5 == v6)
    -[BrowserController dismissTransientUIAnimated:](self, "dismissTransientUIAnimated:", 1);

}

- (void)configureMenuAndAdoptButton:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  -[BrowserController pageFormatMenuController](self, "pageFormatMenuController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "configureMenuAndAdoptButton:", v5);

}

- (BrowserController)initWithStateData:(id)a3 browserWindowController:(id)a4 savedState:(id)a5 controlledByAutomation:(BOOL)a6
{
  _BOOL8 v6;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  BrowserController *v15;
  BrowserController *v16;

  v6 = a6;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  objc_msgSend(v10, "UUID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sceneID");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[BrowserController initWithUUID:sceneID:browserWindowController:tabGroupManager:controlledByAutomation:](self, "initWithUUID:sceneID:browserWindowController:tabGroupManager:controlledByAutomation:", v13, v14, v11, 0, v6);

  if (v15)
  {
    objc_storeStrong((id *)&v15->_savedState, a5);
    -[BrowserController _readSavedState]((uint64_t)v15);
    v16 = v15;
  }

  return v15;
}

id __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  void *v3;
  void *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[43], "activeTabDocument");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "backListMenuWithLimit:", 30);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v4;
}

id __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_2(uint64_t a1)
{
  id *WeakRetained;
  id *v2;
  void *v3;
  void *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[43], "activeTabDocument");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "forwardListMenuWithLimit:", 30);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_3(uint64_t a1)
{
  id *v1;
  id *WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  char v20;
  __CFString *v21;
  const __CFString *v22;
  __CFString *v23;
  void *v24;
  char v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  char v34;
  __CFString *v35;
  const __CFString *v36;
  __CFString *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  _QWORD v58[4];
  id v59;
  _QWORD v60[4];
  id v61;
  char v62;
  _QWORD v63[4];
  id *v64;
  id v65;
  char v66;
  _QWORD v67[4];
  id *v68;
  _QWORD v69[4];
  id v70;
  id *v71;
  void *v72;
  void *v73;
  _QWORD v74[6];

  v74[4] = *MEMORY[0x1E0C80C00];
  v1 = (id *)(a1 + 32);
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && (SFDebugMenuEnabled() & 1) != 0)
  {
    objc_msgSend(WeakRetained[43], "activeTabDocument");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)MEMORY[0x1E0DC3428];
    objc_msgSend(v3, "frontWebView");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_sf_debugKillWebProcessActionForWebView:", v55);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v74[0] = v54;
    v5 = (void *)MEMORY[0x1E0DC3428];
    objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("safari"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v69[0] = MEMORY[0x1E0C809B0];
    v69[1] = 3221225472;
    v69[2] = __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_4;
    v69[3] = &unk_1E9CF3A18;
    v57 = v3;
    v70 = v57;
    v7 = WeakRetained;
    v71 = v7;
    objc_msgSend(v5, "actionWithTitle:image:identifier:handler:", CFSTR("View in SFSafariViewController"), v6, 0, v69);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v74[1] = v8;
    v9 = (void *)MEMORY[0x1E0DC3428];
    objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("sparkles.square.filled.on.square"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "actionWithTitle:image:identifier:handler:", CFSTR("Start Automation Session"), v10, 0, &__block_literal_global_583);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v74[2] = v11;
    v12 = (void *)MEMORY[0x1E0DC3428];
    objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("lifepreserver"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v67[0] = MEMORY[0x1E0C809B0];
    v67[1] = 3221225472;
    v67[2] = __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_6;
    v67[3] = &unk_1E9CF3A60;
    v14 = v7;
    v68 = v14;
    objc_msgSend(v12, "actionWithTitle:image:identifier:handler:", CFSTR("Show Crash Banner"), v13, 0, v67);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v74[3] = v15;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v74, 4);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = (void *)objc_msgSend(v16, "mutableCopy");

    objc_msgSend(v57, "appBanner");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v17)
    {
      v19 = objc_msgSend(v17, "isPinnedToTop");
      v20 = v19;
      v21 = CFSTR("Pin App Banner");
      if (v19)
      {
        v21 = CFSTR("Unpin App Banner");
        v22 = CFSTR("pin.slash");
      }
      else
      {
        v22 = CFSTR("pin");
      }
      v23 = v21;
      objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", v22);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = v20 ^ 1;
      v26 = (void *)MEMORY[0x1E0DC3428];
      v63[0] = MEMORY[0x1E0C809B0];
      v63[1] = 3221225472;
      v63[2] = __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_7;
      v63[3] = &unk_1E9CF3A88;
      v64 = v14;
      v66 = v25;
      v65 = v57;
      objc_msgSend(v26, "actionWithTitle:image:identifier:handler:", v23, v24, 0, v63);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "addObject:", v27);

    }
    v28 = v14[94];
    objc_msgSend(WeakRetained[43], "activeTabGroup");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "shareRecordForTabGroup:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v28) = v30 == 0;

    if ((v28 & 1) == 0)
    {
      v31 = (void *)MEMORY[0x1E0DC39D0];
      objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("person.crop.circle.badge.checkmark"));
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v57, "isUnread");
      v34 = v33;
      v35 = CFSTR("Mark Unread");
      if (v33)
      {
        v35 = CFSTR("Mark Read");
        v36 = CFSTR("envelope.badge");
      }
      else
      {
        v36 = CFSTR("envelope.open");
      }
      v37 = v35;
      objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", v36);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = (void *)MEMORY[0x1E0DC3428];
      v60[0] = MEMORY[0x1E0C809B0];
      v60[1] = 3221225472;
      v60[2] = __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_8;
      v60[3] = &unk_1E9CF3AB0;
      v61 = v57;
      v62 = v34;
      objc_msgSend(v39, "actionWithTitle:image:identifier:handler:", v37, v38, 0, v60);
      v40 = (void *)objc_claimAutoreleasedReturnValue();

      v73 = v40;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v73, 1);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "menuWithTitle:image:identifier:options:children:", CFSTR("Shared Tab Group"), v32, 0, 0, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "addObject:", v42);

      if (objc_msgSend(v14[94], "enableSharedTabGroupsFastSyncPresence"))
      {
        v43 = (void *)MEMORY[0x1E0DC39D0];
        objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("person.crop.circle.badge.checkmark"));
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = (void *)MEMORY[0x1E0DC36F8];
        v58[0] = MEMORY[0x1E0C809B0];
        v58[1] = 3221225472;
        v58[2] = __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_9;
        v58[3] = &unk_1E9CF3B48;
        objc_copyWeak(&v59, v1);
        objc_msgSend(v45, "elementWithUncachedProvider:", v58);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v72 = v46;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v72, 1);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "menuWithTitle:image:identifier:options:children:", CFSTR("FastSync Presence"), v44, 0, 0, v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v48, "setSubtitle:", CFSTR("Enabled"));
        objc_msgSend(v56, "addObject:", v48);

        objc_destroyWeak(&v59);
      }
      else
      {
        v50 = (void *)MEMORY[0x1E0DC3428];
        objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("person.crop.circle.badge.xmark"));
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "actionWithTitle:image:identifier:handler:", CFSTR("FastSync Presence"), v51, 0, &__block_literal_global_635);
        v52 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v52, "setSubtitle:", CFSTR("Disabled"));
        objc_msgSend(v52, "setAttributes:", 1);
        objc_msgSend(v56, "addObject:", v52);

      }
    }
    v49 = (void *)objc_msgSend(v56, "copy");

  }
  else
  {
    v49 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v49;
}

void __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_4(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;

  v2 = objc_alloc(MEMORY[0x1E0CD5600]);
  objc_msgSend(*(id *)(a1 + 32), "URL");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (id)objc_msgSend(v2, "initWithURL:", v3);

  objc_msgSend(*(id *)(a1 + 40), "_presentModalViewController:fromBarItem:completion:", v4, *MEMORY[0x1E0D4F3D8], 0);
}

void __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_5()
{
  void *v0;
  id v1;

  +[Application sharedApplication](Application, "sharedApplication");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "automationController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "createAutomationSessionWithIdentifier:", CFSTR("InternalActionSession"));

}

uint64_t __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_6(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setShowingCrashBanner:animated:", 1, 1);
}

uint64_t __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_7(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAppBannerPinnedToTop:forTabDocument:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

uint64_t __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setUnread:", *(_BYTE *)(a1 + 40) == 0);
}

void __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_9(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)*((_QWORD *)WeakRetained + 94);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_10;
    v7[3] = &unk_1E9CF3B20;
    v8 = v3;
    objc_msgSend(v6, "getCurrentConnectionStateWithCompletionHandler:", v7);

  }
  else
  {
    (*((void (**)(id, _QWORD))v3 + 2))(v3, MEMORY[0x1E0C9AA60]);
  }

}

void __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_10(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  objc_msgSend(v3, "allKeys");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "sortedArrayUsingSelector:", sel_compare_);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_11;
  v8[3] = &unk_1E9CF3AF8;
  v7 = v3;
  v9 = v7;
  objc_msgSend(v5, "safari_mapAndFilterObjectsUsingBlock:", v8);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

id __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_11(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  _QWORD v16[4];
  id v17;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "integerValue");

  if (objc_msgSend(v3, "length"))
  {
    v6 = v3;
    if (v5 == -1)
    {
      objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("person.crop.circle.badge.questionmark"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = CFSTR("Not Connected");
    }
    else if (v5 == -2)
    {
      objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("person.crop.circle.badge.xmark"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = CFSTR("Paused");
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("person.crop.circle.badge.checkmark"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%zd connections"), v5);
      v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    v12 = (void *)MEMORY[0x1E0DC3428];
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_13;
    v16[3] = &unk_1E9CF3A60;
    v13 = v6;
    v17 = v13;
    objc_msgSend(v12, "actionWithTitle:image:identifier:handler:", v13, v7, 0, v16);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setSubtitle:", v8);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0DC3428], "actionWithTitle:image:identifier:handler:", CFSTR("Personal"), 0, 0, &__block_literal_global_617);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setAttributes:", 1);
    if (v5 == -1)
    {
      objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("person.crop.circle.badge.questionmark"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setImage:", v14);

      objc_msgSend(v9, "setSubtitle:", CFSTR("Not Connected"));
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("person.crop.circle.badge.checkmark"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setImage:", v10);

      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%zu connections"), v5);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setSubtitle:", v11);

    }
    v8 = &stru_1E9CFDBB0;
  }

  return v9;
}

void __105__BrowserController_initWithUUID_sceneID_browserWindowController_tabGroupManager_controlledByAutomation___block_invoke_13(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0DC3AC0], "generalPasteboard");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setString:", v1);

}

- (void)closeWindow
{
  id *v2;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  NSString *v10;
  void *v11;
  _QWORD v12[4];
  NSString *v13;

  WeakRetained = objc_loadWeakRetained((id *)&self->_scene);
  objc_msgSend(WeakRetained, "session");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0DC3470], "sharedApplication");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "openSessions");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3321888768;
    v12[2] = __32__BrowserController_closeWindow__block_invoke;
    v12[3] = &__block_descriptor_40_ea8_32c45_ZTSKZ32__BrowserController_closeWindow_E3__1_e24_B16__0__UISceneSession_8l;
    v10 = self->_sceneID;
    v13 = v10;
    objc_msgSend(v9, "safari_anyObjectPassingTest:", v12);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    v2 = (id *)&v13;

  }
  objc_msgSend(MEMORY[0x1E0DC3470], "sharedApplication");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "requestSceneSessionDestruction:options:errorHandler:", v7, 0, &__block_literal_global_680);

  if (!v6)
}

uint64_t __32__BrowserController_closeWindow__block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "persistentIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

void __32__BrowserController_closeWindow__block_invoke_678(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  v3 = (id)WBS_LOG_CHANNEL_PREFIXTabs();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(v2, "safari_privacyPreservingDescription");
    objc_claimAutoreleasedReturnValue();
    __32__BrowserController_closeWindow__block_invoke_678_cold_1();
  }

}

- (void)attachToScene:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  objc_msgSend(v5, "session");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController scene:willConnectToSession:options:](self, "scene:willConnectToSession:options:", v5, v4, 0);

}

- (id)detachFromScene
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_scene);
  -[BrowserController sceneDidDisconnect:](self, "sceneDidDisconnect:", WeakRetained);
  return WeakRetained;
}

- (_QWORD)_sceneSession
{
  _QWORD *v1;
  id WeakRetained;
  void *v3;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v1 = a1;
  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (!*((_QWORD *)a1 + 40))
      return 0;
    WeakRetained = objc_loadWeakRetained((id *)a1 + 108);
    v3 = WeakRetained;
    if (WeakRetained)
    {
      objc_msgSend(WeakRetained, "session");
      v1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0DC3470], "sharedApplication");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "openSessions");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v7 = v6;
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v8)
      {
        v9 = *(_QWORD *)v15;
        while (2)
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v15 != v9)
              objc_enumerationMutation(v7);
            v11 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
            v12 = (void *)v1[40];
            objc_msgSend(v11, "persistentIdentifier", (_QWORD)v14);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            LOBYTE(v12) = objc_msgSend(v12, "isEqualToString:", v13);

            if ((v12 & 1) != 0)
            {
              v1 = v11;
              goto LABEL_16;
            }
          }
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
          if (v8)
            continue;
          break;
        }
      }
      v1 = 0;
LABEL_16:

    }
  }
  return v1;
}

- (void)_resetCapsuleMinimizationStyleIfNeeded
{
  void *v2;
  void *v3;
  id v4;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 280), "capsuleViewController");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "capsuleCollectionView");
    v4 = (id)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v4, "alwaysShowTopBackdrop") & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setMinimizationStyle:", objc_msgSend(v3, "isShowingReader"));

    }
  }
}

- (void)updateInsetsForBackgroundWebView:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "applyGeometryToWebView:", v6);

}

- (void)dynamicBarAnimatorWillEnterSteadyState:(id)a3
{
  void *v4;
  void (**animationPendingDynamicBarAnimatorSteadyState)(void);
  id v6;

  -[_SFWebView _endInteractiveObscuredInsetsChange](self->_webView, "_endInteractiveObscuredInsetsChange", a3);
  self->_interactivelyChangingObscuredInsets = 0;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "webViewDidChangeSize");

  animationPendingDynamicBarAnimatorSteadyState = (void (**)(void))self->_animationPendingDynamicBarAnimatorSteadyState;
  if (animationPendingDynamicBarAnimatorSteadyState)
  {
    animationPendingDynamicBarAnimatorSteadyState[2]();
    v6 = self->_animationPendingDynamicBarAnimatorSteadyState;
    self->_animationPendingDynamicBarAnimatorSteadyState = 0;

  }
}

- (void)dynamicBarAnimatorWillLeaveSteadyState:(id)a3
{
  -[_SFWebView _beginInteractiveObscuredInsetsChange](self->_webView, "_beginInteractiveObscuredInsetsChange", a3);
  self->_interactivelyChangingObscuredInsets = 1;
}

- (void)document:(id)a3 willMakeReaderVisible:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v4 = a4;
  v13 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  v7 = v13;
  if (v6 == v13)
  {
    if (v4)
      objc_msgSend(v13, "readerWebView");
    else
      objc_msgSend(v13, "webView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController setWebView:]((uint64_t)self, v8);
    if (!v4 && !-[BrowserRootViewController keepBarsMinimized](self->_rootViewController, "keepBarsMinimized"))
    {
      -[BrowserRootViewController dynamicBarAnimator](self->_rootViewController, "dynamicBarAnimator");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "attemptTransitionToState:animated:", 1, 0);

    }
    -[ContinuousReadingViewController previewView](self->_continuousReadingViewController, "previewView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "removeFromSuperview");
    -[UIScrollView addSubview:](self->_scrollView, "addSubview:", v10);
    -[ContinuousReadingViewController previousItemPreviewView](self->_continuousReadingViewController, "previousItemPreviewView");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "removeFromSuperview");
    -[UIScrollView addSubview:](self->_scrollView, "addSubview:", v11);
    -[BrowserController _visibleAppBanner]((uint64_t)self);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "removeFromSuperview");
    -[BrowserController _setShowingAppBanner:isShowing:]((uint64_t)self, v12, 1);

    v7 = v13;
  }

}

- (BOOL)shouldDeferHistoryUpdatesForWKWebView:(id)a3
{
  id v4;
  id v5;
  id v6;
  BOOL v7;

  v4 = a3;
  -[TabDocument webView](self->_speculativeLoadDocument, "webView");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5 == v4)
  {
    v7 = 1;
  }
  else
  {
    -[TabDocument webView](self->_previewDocument, "webView");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    v7 = v6 == v4;

  }
  return v7;
}

- (double)_verticalOffsetForContinuousReadingBanner
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t i;
  double v12;
  void *v13;
  void *v14;
  double MaxY;
  double v16;
  void *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  void *v23;
  double v24;
  double v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];
  uint64_t v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0.0;
  objc_msgSend(*(id *)(a1 + 88), "topBannerView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "frame");
    v5 = v4;
    objc_msgSend(*(id *)(a1 + 744), "topBannersSeparableFromStatusBar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "count"))
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v7 = v6;
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
      if (v8)
      {
        v9 = *(_QWORD *)v32;
        v10 = 0.0;
        do
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v32 != v9)
              objc_enumerationMutation(v7);
            objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * i), "bounds");
            v10 = v10 + CGRectGetHeight(v38);
          }
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
        }
        while (v8);
      }
      else
      {
        v10 = 0.0;
      }

      v12 = -v10 - v5;
    }
    else
    {
      v13 = *(void **)(a1 + 280);
      objc_msgSend(v13, "documentAndTopBarsContainerView");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "navigationBarFrameInCoordinateSpace:", v14);
      MaxY = CGRectGetMaxY(v39);

      v16 = -[BrowserController additionalContentHeightForBanners](a1);
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      objc_msgSend(*(id *)(a1 + 744), "topBannersAnchoredToStatusBar", 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
      v19 = MaxY + v16;
      if (v18)
      {
        v20 = *(_QWORD *)v28;
        do
        {
          for (j = 0; j != v18; ++j)
          {
            if (*(_QWORD *)v28 != v20)
              objc_enumerationMutation(v17);
            objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * j), "bounds");
            v19 = v19 + CGRectGetHeight(v40);
          }
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
        }
        while (v18);
      }

      v22 = *(void **)(a1 + 304);
      objc_msgSend(*(id *)(a1 + 280), "documentAndTopBarsContainerView");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "convertPoint:fromView:", v23, 0.0, v19);
      v25 = v24;

      if (v25 >= 0.0 || (objc_msgSend(*(id *)(a1 + 88), "isUserInteractingWithContainer") & 1) != 0)
        v12 = -v5;
      else
        v12 = v25 - v5;
    }

  }
  else
  {
    v12 = 0.0;
  }

  return v12;
}

- (uint64_t)_setShowingOverlayForBanner:(int)a3 showing:
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v5 = a2;
  v6 = v5;
  if (a1)
  {
    objc_msgSend(v5, "overlayProvider");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isAvailable");
    if ((v8 & 1) != 0)
    {
      if (a3)
      {
        objc_msgSend(v7, "overlayViewController");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "view");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v10, "superview");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = *(void **)(a1 + 304);

        if (v11 != v12)
        {
          objc_msgSend(*(id *)(a1 + 280), "hostViewControllerForOverlay");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "setDelegate:", a1);
          objc_msgSend(v7, "showOverlayInScrollView:viewController:", *(_QWORD *)(a1 + 304), v13);
          -[BrowserController _updateAppInfoOverlayFrame](a1);

        }
      }
      else
      {
        objc_msgSend(v7, "hideOverlayAnimated:", 0);
      }
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (BOOL)isShowingAppInfoOverlay
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  UIScrollView *v8;
  BOOL v9;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appBanner");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "overlayProvider");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "isAvailable") & 1) != 0)
  {
    objc_msgSend(v5, "overlayViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "view");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v7, "superview");
      v8 = (UIScrollView *)objc_claimAutoreleasedReturnValue();
      v9 = v8 == self->_scrollView;

    }
    else
    {
      v9 = 0;
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void __42__BrowserController__updateTabGroupBanner__block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "showTabView");

}

void __46__BrowserController_updateCollaborationButton__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD block[5];
  id v7;
  id v8;

  v3 = a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __46__BrowserController_updateCollaborationButton__block_invoke_2;
  block[3] = &unk_1E9CF3C30;
  v4 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v3;
  v5 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

void __46__BrowserController_updateCollaborationButton__block_invoke_2(uint64_t a1)
{
  char v2;
  int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "activeTabGroupOrTabGroupVisibleInSwitcher");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v2 = WBSIsEqual();

  if ((v2 & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 48))
    {
      +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(v9, "areSharedTabGroupsEnabled");

      v4 = v3 ^ 1u;
    }
    else
    {
      v4 = 1;
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 808), "setBarItem:hidden:", 16, v4);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 808), "collaborationButton");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      v10 = (id)objc_msgSend(*(id *)(a1 + 32), "newCollaborationButtonWithActiveTabGroup:existingShare:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 808), "setCollaborationButton:");

    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 744), "tabGroupBanner");
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "collaborationButton");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
    {
      v7 = (void *)objc_msgSend(*(id *)(a1 + 32), "newCollaborationButtonWithActiveTabGroup:existingShare:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      objc_msgSend(v11, "setCollaborationButton:", v7);

    }
  }
}

- (void)_beganSharingTabGroup:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  BrowserController *v9;

  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __43__BrowserController__beganSharingTabGroup___block_invoke;
  v7[3] = &unk_1E9CF3358;
  v8 = v5;
  v9 = self;
  v6 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], v7);

}

void __43__BrowserController__beganSharingTabGroup___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 344), "activeTabGroup");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = objc_msgSend(v2, "isEqualToString:", v4);

  if ((v2 & 1) != 0)
    objc_msgSend(*(id *)(a1 + 40), "updateCollaborationButton");
}

- (void)shareDidUpdateForTabGroupWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  WBTabGroupManager *tabGroupManager;
  _QWORD v9[5];

  v4 = a3;
  -[TabController clearCachedTabSwitcherShareConfigurationForTabGroupWithUUID:](self->_tabController, "clearCachedTabSwitcherShareConfigurationForTabGroupWithUUID:", v4);
  -[TabController activeTabGroup](self->_tabController, "activeTabGroup");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqualToString:", v4);

  if ((v7 & 1) != 0)
  {
    tabGroupManager = self->_tabGroupManager;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __55__BrowserController_shareDidUpdateForTabGroupWithUUID___block_invoke;
    v9[3] = &unk_1E9CF31B0;
    v9[4] = self;
    -[WBTabGroupManager reloadTabGroupsFromDatabaseWithCompletionHandler:](tabGroupManager, "reloadTabGroupsFromDatabaseWithCompletionHandler:", v9);
  }

}

uint64_t __55__BrowserController_shareDidUpdateForTabGroupWithUUID___block_invoke(uint64_t a1)
{
  -[BrowserController _updateTabGroupBanner](*(id **)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 32), "updateTabOverviewButton");
  return objc_msgSend(*(id *)(a1 + 32), "updateCollaborationButton");
}

- (id)linkPreviewViewControllerForNavigationIntent:(id)a3
{
  void *v4;
  void *v5;

  objc_msgSend(a3, "URL");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController linkPreviewViewControllerForURL:](self, "linkPreviewViewControllerForURL:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)linkPreviewViewControllerForURL:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "previewViewControllerForURL:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)commitLinkPreviewViewController:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "commitPreviewViewController:", v5);

}

- (void)linkPreviewProviderWillDismissPreview
{
  id v2;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "willDismissLinkPreviewViewController");

}

- (void)browserViewController:(id)a3 didCreateNavigationBar:(id)a4
{
  void *v5;
  void *v6;
  id v7;

  v7 = a4;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "navigationBarItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setItem:", v6);

}

- (void)browserViewController:(id)a3 didCreateUnifiedBar:(id)a4
{
  -[_SFBarManager registerUnifiedBar:withPersona:](self->_barManager, "registerUnifiedBar:withPersona:", a4, 0);
}

- (int64_t)browserViewController:(id)a3 sidebarStyleForViewSize:(CGSize)a4
{
  double height;
  double width;
  id v7;
  int64_t v8;
  int64_t v9;

  height = a4.height;
  width = a4.width;
  v7 = a3;
  v8 = -[BrowserController bookmarksPresentationStyleForViewOfSize:](self, "bookmarksPresentationStyleForViewOfSize:", width, height);
  if (v8)
    v9 = v8 != 2;
  else
    v9 = objc_msgSend(v7, "sidebarStyle");

  return v9;
}

- (void)browserViewController:(id)a3 didChangeShowingSidebar:(BOOL)a4
{
  -[_SFBarManager setBarItem:selected:](self->_barManager, "setBarItem:selected:", 3, a4);
  -[BrowserController updateTabGroupButtonsVisibility](self, "updateTabGroupButtonsVisibility");
}

- (void)browserViewController:(id)a3 didChangeSidebarStyle:(int64_t)a4
{
  -[LibraryController browserViewControllerDidChangeSidebarStyle](self->_libraryController, "browserViewControllerDidChangeSidebarStyle", a3, a4);
  -[BrowserController updateTabGroupButtonsVisibility](self, "updateTabGroupButtonsVisibility");
}

- (id)sidebarContentViewControllerForSidebarUIProxy:(id)a3
{
  LibraryViewController *v4;
  void *v5;

  v4 = objc_alloc_init(LibraryViewController);
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3A40]), "initWithRootViewController:", v4);
  -[LibraryController setSidebarViewController:](self->_libraryController, "setSidebarViewController:", v4);

  return v5;
}

- (void)addBookmarkNavController:(id)a3 didFinishWithResult:(BOOL)a4 bookmark:(id)a5
{
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _SFWebView *webView;
  void *v18;
  _QWORD v19[4];
  id v20;

  v8 = a3;
  v9 = a5;
  objc_msgSend(v8, "presentingViewController");
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (v10)
    v12 = (void *)v10;
  else
    v12 = v8;
  v13 = v12;

  objc_msgSend(v13, "dismissViewControllerAnimated:completion:", 1, 0);
  if (a4)
  {
    objc_msgSend(v8, "addBookmarkAnalyticsHandler");
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = (void *)v14;
    if (v14)
      (*(void (**)(uint64_t))(v14 + 16))(v14);
    v16 = (void *)MEMORY[0x1E0D8AA08];
    webView = self->_webView;
    objc_msgSend(MEMORY[0x1E0D4EF88], "sharedSiteMetadataManager");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __75__BrowserController_addBookmarkNavController_didFinishWithResult_bookmark___block_invoke;
    v19[3] = &unk_1E9CF3CA0;
    v20 = v9;
    objc_msgSend(v16, "saveLeadImageFromWebView:toLeadImageCacheRegisteredWithMetadataManager:completionHandler:", webView, v18, v19);

  }
}

void __75__BrowserController_addBookmarkNavController_didFinishWithResult_bookmark___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD v9[4];
  NSObject *v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __75__BrowserController_addBookmarkNavController_didFinishWithResult_bookmark___block_invoke_724;
    v9[3] = &unk_1E9CF3358;
    v10 = *(id *)(a1 + 32);
    v11 = v5;
    dispatch_async(MEMORY[0x1E0C80D38], v9);

    v8 = v10;
  }
  else
  {
    if (!v6)
      goto LABEL_4;
    v8 = (id)WBS_LOG_CHANNEL_PREFIXSiriIntelligence();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v7, "safari_privacyPreservingDescription");
      objc_claimAutoreleasedReturnValue();
      __75__BrowserController_addBookmarkNavController_didFinishWithResult_bookmark___block_invoke_cold_1();
    }
  }

LABEL_4:
}

void __75__BrowserController_addBookmarkNavController_didFinishWithResult_bookmark___block_invoke_724(uint64_t a1)
{
  id v2;

  objc_msgSend(MEMORY[0x1E0DCCBA0], "mainBookmarkCollection");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  -[WebBookmarkCollection updateBookmark:withLeadImageURL:](v2, *(void **)(a1 + 32), *(void **)(a1 + 40));

}

- (BOOL)addBookmarkNavControllerCanSaveBookmarkChanges:(id)a3
{
  return !-[BrowserController showDemoModeFeatureDisabledAlert](self, "showDemoModeFeatureDisabledAlert", a3);
}

- (void)presentationControllerDidDismiss:(id)a3
{
  BookmarksNavigationController *v4;
  BookmarksNavigationController *modalBookmarksController;
  BookmarksNavigationController *v6;

  objc_msgSend(a3, "presentedViewController");
  v4 = (BookmarksNavigationController *)objc_claimAutoreleasedReturnValue();
  modalBookmarksController = self->_modalBookmarksController;

  if (v4 == modalBookmarksController)
  {
    v6 = self->_modalBookmarksController;
    self->_modalBookmarksController = 0;

  }
}

- (WBSAppReviewPromptManager)appReviewPromptManager
{
  WBSAppReviewPromptManager *appReviewPromptManager;
  void *v4;
  void *v5;
  WBSAppReviewPromptManager *v6;
  WBSAppReviewPromptManager *v7;

  appReviewPromptManager = self->_appReviewPromptManager;
  if (!appReviewPromptManager)
  {
    +[Application sharedApplication](Application, "sharedApplication");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "webExtensionsControllerForProfileServerID:", *MEMORY[0x1E0D89E20]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = (WBSAppReviewPromptManager *)objc_msgSend(objc_alloc(MEMORY[0x1E0D8A768]), "initWithPresenter:extensionsController:", self, v5);
    v7 = self->_appReviewPromptManager;
    self->_appReviewPromptManager = v6;

    appReviewPromptManager = self->_appReviewPromptManager;
  }
  return appReviewPromptManager;
}

- (void)presentPromptForAppReviewPromptManager:(id)a3
{
  id WeakRetained;
  id v5;

  +[AppStoreReviewController sharedController](AppStoreReviewController, "sharedController", a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  WeakRetained = objc_loadWeakRetained((id *)&self->_scene);
  objc_msgSend(v5, "showAppReviewPromptInSceneIfNeeded:", WeakRetained);

}

- (void)dismissCompletionDetail
{
  void *v3;

  -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dismissCompletionDetailWindowAndResumeEditingIfNeeded:completionHandler:", 0, 0);

  -[BrowserController setFavoritesState:](self, "setFavoritesState:", 0);
}

- (void)completionDetailViewControllerDidDismiss:(id)a3
{
  id v3;

  -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dismissCompletionDetailWindowAndResumeEditingIfNeeded:completionHandler:", 1, 0);

}

- (void)didCloseBrowserWindow
{
  TabController *tabController;
  TabCollectionViewProviding *tabCollectionViewProvider;

  -[WBProfileWindow willClose](self->_profileWindow, "willClose");
  -[BrowserController setWebView:]((uint64_t)self, 0);
  -[TabController clearBrowserController](self->_tabController, "clearBrowserController");
  tabController = self->_tabController;
  self->_tabController = 0;

  tabCollectionViewProvider = self->_tabCollectionViewProvider;
  self->_tabCollectionViewProvider = 0;

  -[_SFBarManager cancelCoalescedUpdates](self->_barManager, "cancelCoalescedUpdates");
}

- (void)fraudWarningsToggled
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id obj;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "synchronize");
  v3 = objc_msgSend(v17, "_sf_warnAboutFraudulentWebsites");
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  -[BrowserController browserWindowController](self, "browserWindowController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "browserControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  obj = v5;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v6)
  {
    v19 = *(_QWORD *)v25;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v25 != v19)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * v7);
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        objc_msgSend(v8, "tabController");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "allTabDocuments");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
        if (v11)
        {
          v12 = *(_QWORD *)v21;
          do
          {
            v13 = 0;
            do
            {
              if (*(_QWORD *)v21 != v12)
                objc_enumerationMutation(v10);
              objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v13), "webView");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "configuration");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v15, "preferences");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "_setSafeBrowsingEnabled:", v3);

              ++v13;
            }
            while (v11 != v13);
            v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
          }
          while (v11);
        }

        ++v7;
      }
      while (v7 != v6);
      v5 = obj;
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    }
    while (v6);
  }

}

- (BOOL)dismissTransientUIAnimated:(BOOL)a3 options:(unint64_t)a4
{
  return -[BrowserController _dismissTransientUIAnimated:dismissalOptions:completionHandler:]((uint64_t)self, a3, a4, 0);
}

void __84__BrowserController__dismissTransientUIAnimated_dismissalOptions_completionHandler___block_invoke(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __84__BrowserController__dismissTransientUIAnimated_dismissalOptions_completionHandler___block_invoke_2(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __84__BrowserController__dismissTransientUIAnimated_dismissalOptions_completionHandler___block_invoke_3(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 728), "setShowingSidebar:completion:", 0, 0);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void __84__BrowserController__dismissTransientUIAnimated_dismissalOptions_completionHandler___block_invoke_6(_QWORD *a1)
{
  uint64_t v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 384));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:didDismissTransientUIWithOptions:", a1[4], a1[6]);
  v2 = a1[5];
  if (v2)
    (*(void (**)(void))(v2 + 16))();

}

- (void)dismissPageFormatMenu
{
  -[_SFPageFormatMenuController dismissMenu](self->_pageFormatMenuController, "dismissMenu");
}

- (void)presentModalViewController:(id)a3 fromPopoverSource:(id)a4
{
  -[BrowserController _presentModalViewController:fromPopoverSource:useAdaptivePresentationInCompact:animated:completion:](self, a3, a4, 1, 1, 0);
}

- (void)_presentModalViewController:(uint64_t)a3 fromBarItem:(uint64_t)a4 animated:(void *)a5 completion:
{
  id v9;
  void *v10;
  id v11;

  v11 = a2;
  v9 = a5;
  if (a1)
  {
    if (*MEMORY[0x1E0D4F3D8] == a3 || a3 == 11 && !objc_msgSend(a1, "hasDedicatedDownloadsToolbarItem"))
    {
      v10 = 0;
    }
    else
    {
      -[BrowserController _popoverSourceInfoForBarItem:](a1, a3);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
    -[BrowserController _presentModalViewController:fromPopoverSource:useAdaptivePresentationInCompact:animated:completion:](a1, v11, v10, a3 != 11, a4, v9);

  }
}

- (void)presentModalViewController:(id)a3 completion:(id)a4
{
  -[BrowserController _presentModalViewController:fromBarItem:animated:completion:]((id *)&self->super.super.super.isa, a3, *MEMORY[0x1E0D4F3D8], 1, a4);
}

- (void)_presentModalViewController:(id)a3 fromBarItem:(int64_t)a4 completion:(id)a5
{
  -[BrowserController _presentModalViewController:fromBarItem:animated:completion:]((id *)&self->super.super.super.isa, a3, a4, 1, a5);
}

- (uint64_t)_shouldPresentViewControllerUsingAdaptivePopover:(uint64_t)IsPad
{
  id v3;
  void *v4;
  void *v5;
  char isKindOfClass;

  v3 = a2;
  if (IsPad)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      IsPad = _SFDeviceIsPad();
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        goto LABEL_8;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v3, "viewControllers");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "firstObject");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0)
          goto LABEL_8;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        || (_SFDeviceIsPad() & 1) == 0 && (objc_msgSend(v3, "_sf_isPKAddPassesViewController") & 1) != 0)
      {
LABEL_8:
        IsPad = 0;
      }
      else
      {
        IsPad = objc_msgSend(v3, "_sf_isMFMailComposeViewController") ^ 1;
      }
    }
  }

  return IsPad;
}

- (void)_setSheetPresentationIfNeededForController:(uint64_t)a1
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    if ((_SFDeviceIsPad() & 1) == 0 && (SFDeviceIsAlwaysReachable() & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 280), "capsuleCollectionViewLayout");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = WBSIsEqual();

      if ((v5 & 1) != 0)
      {
        if (objc_msgSend(v3, "safari_prefersHalfHeightSheetPresentationWithLoweredBar"))
        {
          objc_msgSend(v3, "presentationController");
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v7 = v6;
            objc_msgSend(MEMORY[0x1E0DC3C78], "mediumDetent");
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            v11[0] = v8;
            objc_msgSend(MEMORY[0x1E0DC3C78], "largeDetent");
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v11[1] = v9;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 2);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "setDetents:", v10);

          }
        }
      }
    }
  }

}

- (void)setPresentingModalBookmarksController:(BOOL)a3 withExclusiveCollection:(id)a4 bookmarkUUIDString:(id)a5 animated:(BOOL)a6
{
  -[BrowserController _setPresentingModalBookmarksController:exclusively:importHandler:withCollection:bookmarkUUIDString:animated:completion:]((id *)&self->super.super.super.isa, a3, a4 != 0, 0, a4, a5, a6, 0);
}

- (BookmarksNavigationController)_newModalBookmarksControllerWithCollection:(uint64_t)a3 showsOnlyActiveCollection:
{
  id v5;
  BookmarksNavigationController *v6;

  v5 = a2;
  if (a1)
  {
    v6 = -[BookmarksNavigationController initWithBookmarksDelegate:linkPreviewProvider:collection:showsOnlyActiveCollection:]([BookmarksNavigationController alloc], "initWithBookmarksDelegate:linkPreviewProvider:collection:showsOnlyActiveCollection:", a1, a1, v5, a3);
    -[BookmarksNavigationController setNavigationIntentHandler:](v6, "setNavigationIntentHandler:", a1);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t __140__BrowserController__setPresentingModalBookmarksController_exclusively_importHandler_withCollection_bookmarkUUIDString_animated_completion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

- (void)showBookmarksPanelWithNonAnimatedTransition
{
  int64_t v3;

  v3 = -[BrowserController _bookmarksPresentationStyle](self, "_bookmarksPresentationStyle");
  if ((unint64_t)(v3 - 1) >= 2)
  {
    if (!v3)
      -[BrowserController setPresentingModalBookmarksController:withExclusiveCollection:bookmarkUUIDString:animated:](self, "setPresentingModalBookmarksController:withExclusiveCollection:bookmarkUUIDString:animated:", 1, 0, 0, 0);
  }
  else
  {
    -[SidebarUIProxy setShowingSidebar:completion:](self->_sidebarUIProxy, "setShowingSidebar:completion:", 1, 0);
  }
}

- (void)makeSpaceForTabWithPrivateBrowsing:(BOOL)a3 resultHandler:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void (**v8)(id, uint64_t);

  v4 = a3;
  v8 = (void (**)(id, uint64_t))a4;
  if (-[TabController canAddNewTabForPrivateBrowsing:](self->_tabController, "canAddNewTabForPrivateBrowsing:", v4))
  {
    v8[2](v8, 1);
  }
  else
  {
    v6 = -[TabLimitCleanupWizard initForPrivateBrowsing:withBrowserController:resultHandler:]([TabLimitCleanupWizard alloc], "initForPrivateBrowsing:withBrowserController:resultHandler:", v4, self, v8);
    objc_msgSend(v6, "makeViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController _presentModalViewController:fromBarItem:completion:](self, "_presentModalViewController:fromBarItem:completion:", v7, 7, 0);

  }
}

- (void)barManager:(id)a3 didReceiveTapForBarItem:(int64_t)a4
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  TabController *tabController;
  void *v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  _QWORD v25[5];
  uint8_t buf[16];

  -[BrowserController tabBarManager](self, "tabBarManager", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setActiveItemIsExpanded:animated:completionHandler:", 0, objc_msgSend(v6, "displayMode") != 2, 0);
  if (a4 != 12)
  {
    if (a4 == 13)
      v7 = 6;
    else
      v7 = 2;
    -[BrowserController _dismissTransientUIAnimated:dismissalOptions:completionHandler:]((uint64_t)self, 0, v7, 0);
  }
  -[BrowserRootViewController primaryNavigationBar](self->_rootViewController, "primaryNavigationBar");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  switch(a4)
  {
    case 0:
      -[BrowserController _goBackAllowingNewTabToSpawnIfNeeded:]((id *)&self->super.super.super.isa, 1);
      v14 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D7CA3000, v14, OS_LOG_TYPE_DEFAULT, "Tap back button from the toolbar", buf, 2u);
      }
      objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "reportIOSToolbarButtonUsage:withLayout:", 0, -[BrowserController analyticsLayoutProvenance](self, "analyticsLayoutProvenance"));
      goto LABEL_40;
    case 1:
      -[BrowserController _goForwardAllowingNewTabToSpawnIfNeeded:]((id *)&self->super.super.super.isa, 1);
      v16 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D7CA3000, v16, OS_LOG_TYPE_DEFAULT, "Tap forward button from the toolbar", buf, 2u);
      }
      objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "reportIOSToolbarButtonUsage:withLayout:", 1, -[BrowserController analyticsLayoutProvenance](self, "analyticsLayoutProvenance"));
      goto LABEL_40;
    case 2:
      -[BrowserController toggleBookmarksPresentation](self, "toggleBookmarksPresentation");
      v17 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D7CA3000, v17, OS_LOG_TYPE_DEFAULT, "Tap tab group button from the toolbar", buf, 2u);
      }
      goto LABEL_41;
    case 3:
      -[BrowserController toggleBookmarksPresentation](self, "toggleBookmarksPresentation");
      v18 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D7CA3000, v18, OS_LOG_TYPE_DEFAULT, "Tap bookmarks button from the toolbar", buf, 2u);
      }
      objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "reportIOSToolbarButtonUsage:withLayout:", 33, -[BrowserController analyticsLayoutProvenance](self, "analyticsLayoutProvenance"));
      goto LABEL_40;
    case 4:
      -[BrowserController toggleVoiceSearch](self, "toggleVoiceSearch");
      goto LABEL_41;
    case 5:
    case 6:
      -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v9, "isBlank"))
        goto LABEL_35;
      +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v10, "areSharedTabGroupsEnabled") & 1) != 0)
      {
        -[TabController activeTabGroup](self->_tabController, "activeTabGroup");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "isSyncable");

        if (v12)
        {
          -[TabController tabGroupShareSheetForCurrentTabGroup](self->_tabController, "tabGroupShareSheetForCurrentTabGroup");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          -[BrowserController _presentModalViewController:fromBarItem:completion:](self, "_presentModalViewController:fromBarItem:completion:", v13, a4, 0);

          goto LABEL_37;
        }
      }
      else
      {

LABEL_35:
      }
      -[BrowserController _presentActivityViewController]((uint64_t)self);
LABEL_37:
      v24 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D7CA3000, v24, OS_LOG_TYPE_DEFAULT, "Tap actions button from the toolbar", buf, 2u);
      }
      objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "reportIOSToolbarButtonUsage:withLayout:", 3, -[BrowserController analyticsLayoutProvenance](self, "analyticsLayoutProvenance"));
LABEL_40:

LABEL_41:
      return;
    case 7:
      tabController = self->_tabController;
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = __56__BrowserController_barManager_didReceiveTapForBarItem___block_invoke;
      v25[3] = &unk_1E9CF3578;
      v25[4] = self;
      -[TabController openNewTabWithOptions:completionHandler:](tabController, "openNewTabWithOptions:completionHandler:", 0, v25);
      goto LABEL_41;
    case 8:
      -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "presentAnimated:", 1);

      v21 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D7CA3000, v21, OS_LOG_TYPE_DEFAULT, "Tap tab expose button from the toolbar", buf, 2u);
      }
      objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "didEnterTabViewWithMethod:", 0);

      objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "reportIOSToolbarButtonUsage:withLayout:", 8, -[BrowserController analyticsLayoutProvenance](self, "analyticsLayoutProvenance"));
      goto LABEL_40;
    case 11:
      v23 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D7CA3000, v23, OS_LOG_TYPE_DEFAULT, "Tap downloads button from the toolbar", buf, 2u);
      }
      -[BrowserController presentDownloadsViewController](self, "presentDownloadsViewController");
      objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "reportIOSToolbarButtonUsage:withLayout:", 21, -[BrowserController analyticsLayoutProvenance](self, "analyticsLayoutProvenance"));
      goto LABEL_40;
    case 12:
      -[BrowserController navigationBarCancelButtonWasTapped:](self, "navigationBarCancelButtonWasTapped:", 0);
      goto LABEL_41;
    case 13:
      -[BrowserController navigationBarFormatMenuButtonWasTapped:](self, "navigationBarFormatMenuButtonWasTapped:", v8);
      goto LABEL_41;
    case 14:
      -[BrowserController navigationBarStopLoadingButtonWasTapped:](self, "navigationBarStopLoadingButtonWasTapped:", v8);
      goto LABEL_41;
    case 15:
      -[BrowserController navigationBarReloadButtonWasTapped:](self, "navigationBarReloadButtonWasTapped:", v8);
      goto LABEL_41;
    default:
      goto LABEL_41;
  }
}

void __56__BrowserController_barManager_didReceiveTapForBarItem___block_invoke(uint64_t a1, int a2)
{
  NSObject *v3;
  void *v4;
  void *v5;
  uint8_t v6[16];

  if (a2)
  {
    v3 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1D7CA3000, v3, OS_LOG_TYPE_DEFAULT, "Tap new tab button from the toolbar", v6, 2u);
    }
    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "didOpenNewBlankTabWithTrigger:tabCollectionViewType:", 2, objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "visibleTabCollectionViewType"));

    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "reportIOSToolbarButtonUsage:withLayout:", 4, objc_msgSend(*(id *)(a1 + 32), "analyticsLayoutProvenance"));

  }
}

- (BOOL)barManager:(id)a3 canHandleLongPressForBarItem:(int64_t)a4
{
  return ((a4 - 5) & 0xFFFFFFFFFFFFFFF7) == 0;
}

- (void)barManager:(id)a3 didReceiveTouchDownForBarItem:(int64_t)a4
{
  void *v4;
  id v5;

  if ((a4 | 8) == 0xD)
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument", a3);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "readerContext");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "checkReaderAvailability");

  }
}

- (void)barManager:(id)a3 didReceiveLongPressForBarItem:(int64_t)a4
{
  void *v6;
  id v7;

  -[BrowserController _dismissTransientUIAnimated:dismissalOptions:completionHandler:]((uint64_t)self, 0, 4 * (a4 == 13), 0);
  if (a4 == 13)
  {
    -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "selectedItemNavigationBar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController navigationBarReaderButtonWasTapped:](self, "navigationBarReaderButtonWasTapped:", v6);

  }
  else if (a4 == 5)
  {
    -[BrowserController _readerButtonTapped](self);
  }
}

void __57__BrowserController_barManager_willRegisterBarWithToken___block_invoke(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "dispatchNavigationIntent:", v3);

}

- (void)_didDismissManageExtensionsViewController:(id)a3
{
  _SFPageFormatMenuController *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  id v9;

  objc_msgSend(a3, "object");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "presentingPageFormatMenu");
  v4 = (_SFPageFormatMenuController *)objc_claimAutoreleasedReturnValue();
  +[Application sharedApplication](Application, "sharedApplication");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isPrivateBrowsingLocked"))
  {
    -[_SFPageFormatMenuController browserContentController](v4, "browserContentController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "activeDocument");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isPrivateBrowsingEnabled");

  }
  else
  {
    v8 = 0;
  }

  if ((v8 & 1) == 0 && v4 && v4 == self->_pageFormatMenuController)
    -[BrowserController barManager:didReceiveTapForBarItem:](self, "barManager:didReceiveTapForBarItem:", self->_barManager, 13);

}

id __46__BrowserController__updateAddTabMenuProvider__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (_SFDeviceIsPad())
    {
      objc_msgSend(WeakRetained, "tabBarManager");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "displayMode");

      if (v4 == 1)
      {
        objc_msgSend(MEMORY[0x1E0DC39D0], "sf_tabMenu");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObject:", v5);

      }
    }
    if (!*((_BYTE *)WeakRetained + 695))
    {
      v6 = (void *)*((_QWORD *)WeakRetained + 43);
      objc_msgSend(WeakRetained, "tabController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "activeTabGroupUUID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "recentlyClosedTabsMenuForTabGroupWithUUID:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v9);

    }
  }
  else
  {
    v2 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v2;
}

void __74__BrowserController_toggleBookmarksPresentationWithCollection_completion___block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = WBS_LOG_CHANNEL_PREFIXSignposts();
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D7CA3000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "ShowBookmarks", " enableTelemetry=YES ", v1, 2u);
  }
}

void __74__BrowserController_toggleBookmarksPresentationWithCollection_completion___block_invoke_748(uint64_t a1)
{
  void *v2;
  char v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      objc_msgSend(WeakRetained, "currentBookmarksCollection");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(v2, "isEqualToString:", *(_QWORD *)(a1 + 32));

      if ((v3 & 1) == 0)
        objc_msgSend(WeakRetained, "setCurrentBookmarksCollection:", *(_QWORD *)(a1 + 32));
    }
    -[BrowserController _updateSidebarStickinessAfterUserAction]((id *)WeakRetained);
  }

}

uint64_t __74__BrowserController_toggleBookmarksPresentationWithCollection_completion___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(void))(v4 + 16))();
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

- (void)toggleBookmarksPresentation
{
  -[BrowserController toggleBookmarksPresentationWithCollection:completion:]((uint64_t)self, 0, 0);
}

- (void)editBookmarksKeyPressed
{
  int64_t v3;
  void (**v4)(void *, uint64_t);
  _QWORD aBlock[5];

  v3 = -[BrowserController _bookmarksPresentationStyle](self, "_bookmarksPresentationStyle");
  if ((unint64_t)(v3 - 1) >= 2)
  {
    if (!v3)
    {
      if (-[BrowserController isPresentingModalBookmarksController](self, "isPresentingModalBookmarksController"))
        -[BrowserController setCurrentBookmarksCollection:](self, "setCurrentBookmarksCollection:", CFSTR("BookmarksCollection"));
      else
        -[BrowserController toggleBookmarksPresentationWithCollection:completion:]((uint64_t)self, CFSTR("BookmarksCollection"), 0);
      -[BookmarksNavigationController toggleEditBookmarks](self->_modalBookmarksController, "toggleEditBookmarks");
    }
  }
  else
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __44__BrowserController_editBookmarksKeyPressed__block_invoke;
    aBlock[3] = &unk_1E9CF3578;
    aBlock[4] = self;
    v4 = (void (**)(void *, uint64_t))_Block_copy(aBlock);
    if (-[SidebarUIProxy isShowingSidebar](self->_sidebarUIProxy, "isShowingSidebar"))
    {
      -[BrowserController setCurrentBookmarksCollection:](self, "setCurrentBookmarksCollection:", CFSTR("BookmarksCollection"));
      v4[2](v4, 1);
    }
    else
    {
      -[BrowserController toggleBookmarksPresentationWithCollection:completion:]((uint64_t)self, CFSTR("BookmarksCollection"), v4);
    }

  }
}

void __44__BrowserController_editBookmarksKeyPressed__block_invoke(uint64_t a1, int a2)
{
  void *v2;
  id v3;

  if (a2)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 872), "sidebarViewController");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "presentedItemController");
    v3 = (id)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend(v3, "toggleEditBookmarks");

  }
}

- (void)_prepareToPresentActivityViewController
{
  void *v2;
  void *v3;
  ActionPanel *v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id from;
  id location;

  if (a1)
  {
    objc_msgSend((id)a1, "tabController");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "activeTabDocument");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    *(_BYTE *)(a1 + 123) = 0;
    *(_BYTE *)(a1 + 121) = 0;
    objc_msgSend(*(id *)(a1 + 232), "_cancel");
    v4 = -[ActionPanel initWithTabDocument:activityDelegate:menuStyle:]([ActionPanel alloc], "initWithTabDocument:activityDelegate:menuStyle:", v3, a1, 0);
    v5 = *(void **)(a1 + 232);
    *(_QWORD *)(a1 + 232) = v4;

    objc_msgSend(*(id *)(a1 + 232), "setDelegate:", a1);
    objc_initWeak(&location, *(id *)(a1 + 232));
    objc_initWeak(&from, (id)a1);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __60__BrowserController__prepareToPresentActivityViewController__block_invoke;
    v6[3] = &unk_1E9CF3DB0;
    objc_copyWeak(&v7, &from);
    objc_copyWeak(&v8, &location);
    objc_msgSend(v3, "fetchCanonicalURLWithCompletionHandler:", v6);
    objc_destroyWeak(&v8);
    objc_destroyWeak(&v7);
    objc_destroyWeak(&from);
    objc_destroyWeak(&location);

  }
}

void __60__BrowserController__prepareToPresentActivityViewController__block_invoke(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = objc_loadWeakRetained((id *)(a1 + 40));
    v5 = v4;
    if (v4 && v4 == WeakRetained[29])
    {
      objc_msgSend(v4, "setSharingURL:", v6);
      *((_BYTE *)WeakRetained + 123) = 1;
      -[BrowserController _presentActionPanelIfReady]((uint64_t)WeakRetained);
    }

  }
}

- (void)_presentActionPanelIfReady
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];

  if (a1 && *(_QWORD *)(a1 + 232) && *(_BYTE *)(a1 + 123))
  {
    if (*(_BYTE *)(a1 + 121))
    {
      objc_msgSend((id)a1, "tabController");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "activeTabDocument");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "hideFindOnPage");

      objc_msgSend((id)a1, "setCanFocusNavigationBarURL:", 0);
      v4 = *(_QWORD *)(a1 + 232);
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = __47__BrowserController__presentActionPanelIfReady__block_invoke;
      v9[3] = &unk_1E9CF31B0;
      v9[4] = a1;
      objc_msgSend((id)a1, "_presentModalViewController:fromBarItem:completion:", v4, 6, v9);
      objc_storeWeak((id *)(a1 + 192), *(id *)(a1 + 232));
      v5 = *(void **)(a1 + 232);
      *(_QWORD *)(a1 + 232) = 0;

      *(_BYTE *)(a1 + 123) = 0;
      *(_BYTE *)(a1 + 121) = 0;
      objc_msgSend((id)a1, "tabController");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "activeTabDocument");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v7, "webExtensionsController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "didViewToolbarItemBadgesInTab:", v7);

    }
  }
}

uint64_t __47__BrowserController__presentActionPanelIfReady__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setCanFocusNavigationBarURL:", 1);
}

- (UIActivityItemsConfigurationReading)activityItemsConfiguration
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  -[TabController activeTabGroupOrTabGroupVisibleInSwitcher](self->_tabController, "activeTabGroupOrTabGroupVisibleInSwitcher");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isNamed") & 1) != 0)
  {
    -[TabController shareRecordForActiveTabGroupIfIsShared](self->_tabController, "shareRecordForActiveTabGroupIfIsShared");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_alloc(MEMORY[0x1E0D4ED90]);
    -[BrowserController tabGroupManager](self, "tabGroupManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[TabController iconForSharingActiveTabGroup](self->_tabController, "iconForSharingActiveTabGroup");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v5, "initWithTabGroup:inTabGroupManager:existingShare:icon:", v3, v6, v4, v7);

  }
  else
  {
    v8 = 0;
  }

  return (UIActivityItemsConfigurationReading *)v8;
}

- (id)newCollaborationButton
{
  void *v3;
  void *v4;
  id v5;

  -[TabController activeTabGroupOrTabGroupVisibleInSwitcher](self->_tabController, "activeTabGroupOrTabGroupVisibleInSwitcher");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabController shareRecordForActiveTabGroupIfIsShared](self->_tabController, "shareRecordForActiveTabGroupIfIsShared");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[BrowserController newCollaborationButtonWithActiveTabGroup:existingShare:](self, "newCollaborationButtonWithActiveTabGroup:existingShare:", v3, v4);

  return v5;
}

- (id)newCollaborationButtonWithActiveTabGroup:(id)a3 existingShare:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  objc_class *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  _QWORD v22[5];
  id v23;
  _QWORD v24[5];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a3;
  v7 = a4;
  if (v7)
  {
    -[BrowserController tabGroupManager](self, "tabGroupManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_alloc(MEMORY[0x1E0D4ED90]);
    -[TabController iconForSharingTabGroup:](self->_tabController, "iconForSharingTabGroup:", v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend(v9, "initWithTabGroup:inTabGroupManager:existingShare:icon:", v6, v8, v7, v10);

    v25 = 0;
    v26 = &v25;
    v27 = 0x2050000000;
    v12 = (void *)get_SWCollaborationButtonViewClass(void)::softClass;
    v28 = get_SWCollaborationButtonViewClass(void)::softClass;
    v13 = MEMORY[0x1E0C809B0];
    if (!get_SWCollaborationButtonViewClass(void)::softClass)
    {
      v24[0] = MEMORY[0x1E0C809B0];
      v24[1] = 3221225472;
      v24[2] = ___ZL34get_SWCollaborationButtonViewClassv_block_invoke;
      v24[3] = &unk_1E9CF31D8;
      v24[4] = &v25;
      ___ZL34get_SWCollaborationButtonViewClassv_block_invoke((uint64_t)v24);
      v12 = (void *)v26[3];
    }
    v14 = objc_retainAutorelease(v12);
    _Block_object_dispose(&v25, 8);
    v15 = [v14 alloc];
    objc_msgSend(v11, "itemProvider");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (void *)objc_msgSend(v15, "initWithItemProvider:", v16);

    -[BrowserController _updateParticipantsListForCollaborationButton:contacts:]((id *)&self->super.super.super.isa, v17, MEMORY[0x1E0C9AA60]);
    v22[0] = v13;
    v22[1] = 3221225472;
    v22[2] = __76__BrowserController_newCollaborationButtonWithActiveTabGroup_existingShare___block_invoke;
    v22[3] = &unk_1E9CF3DF8;
    v22[4] = self;
    v18 = v17;
    v23 = v18;
    objc_msgSend(v8, "getActiveParticipantsInTabGroup:completionHandler:", v6, v22);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v18, "setShowManageButton:", 0);
    v19 = v23;
    v20 = v18;

  }
  else
  {
    v20 = 0;
  }

  return v20;
}

void __76__BrowserController_newCollaborationButtonWithActiveTabGroup_existingShare___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  objc_msgSend(a2, "allObjects");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "safari_mapAndFilterObjectsUsingBlock:", &__block_literal_global_751);
  v4 = (id)objc_claimAutoreleasedReturnValue();

  -[BrowserController _updateParticipantsListForCollaborationButton:contacts:](*(id **)(a1 + 32), *(void **)(a1 + 40), v4);
}

id __76__BrowserController_newCollaborationButtonWithActiveTabGroup_existingShare___block_invoke_2(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "safari_contact");
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)_participantsListForCollaborationView:(id *)a1
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD v13[4];
  id v14;
  id from;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id location;

  v3 = a2;
  v4 = v3;
  v5 = 0;
  if (a1 && v3)
  {
    objc_msgSend(a1[68], "objectForKey:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v5 = v6;
    }
    else
    {
      objc_msgSend(a1[43], "activeTabGroup");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_alloc(MEMORY[0x1E0D4ECA8]);
      v9 = (void *)objc_msgSend(v8, "initWithContacts:", MEMORY[0x1E0C9AA60]);
      objc_msgSend(a1[68], "setObject:forKey:", v9, v4);
      objc_initWeak(&location, a1);
      v10 = MEMORY[0x1E0C809B0];
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __59__BrowserController__participantsListForCollaborationView___block_invoke;
      v21[3] = &unk_1E9CF3E20;
      objc_copyWeak(&v22, &location);
      objc_msgSend(v9, "setInfoViewControllerHandler:", v21);
      v18[0] = v10;
      v18[1] = 3221225472;
      v18[2] = __59__BrowserController__participantsListForCollaborationView___block_invoke_2;
      v18[3] = &unk_1E9CF3E70;
      objc_copyWeak(&v20, &location);
      v11 = v7;
      v19 = v11;
      objc_msgSend(v9, "setRowTapHandler:", v18);
      v16[0] = v10;
      v16[1] = 3221225472;
      v16[2] = __59__BrowserController__participantsListForCollaborationView___block_invoke_4;
      v16[3] = &unk_1E9CF39C8;
      objc_copyWeak(&v17, &location);
      objc_msgSend(v9, "setManageHandler:", v16);
      objc_initWeak(&from, v4);
      v13[0] = v10;
      v13[1] = 3221225472;
      v13[2] = __59__BrowserController__participantsListForCollaborationView___block_invoke_5;
      v13[3] = &unk_1E9CF3E98;
      objc_copyWeak(&v14, &from);
      objc_msgSend(v9, "setResizeHandler:", v13);
      objc_msgSend(v9, "setPreservesSuperviewLayoutMargins:", 1);
      v5 = v9;
      objc_destroyWeak(&v14);
      objc_destroyWeak(&from);
      objc_destroyWeak(&v17);

      objc_destroyWeak(&v20);
      objc_destroyWeak(&v22);
      objc_destroyWeak(&location);

    }
  }

  return v5;
}

void __59__BrowserController__participantsListForCollaborationView___block_invoke(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;

  v5 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    -[BrowserController _presentModalViewController:](WeakRetained, v5);

}

void __59__BrowserController__participantsListForCollaborationView___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    objc_msgSend(v3, "safari_shareParticipantIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)WeakRetained[94];
    v7 = *(_QWORD *)(a1 + 32);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __59__BrowserController__participantsListForCollaborationView___block_invoke_3;
    v8[3] = &unk_1E9CF3E48;
    objc_copyWeak(&v10, (id *)(a1 + 40));
    v9 = *(id *)(a1 + 32);
    objc_msgSend(v6, "getPresenceTabUUIDForParticipantIdentifier:inTabGroup:completionHandler:", v5, v7, v8);

    objc_destroyWeak(&v10);
  }

}

void __59__BrowserController__participantsListForCollaborationView___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  id *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a2;
  if (v3)
  {
    v10 = v3;
    WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
    v5 = WeakRetained;
    if (WeakRetained)
    {
      v6 = WeakRetained[43];
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setActiveTabGroupUUID:", v7);

      v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v10);
      objc_msgSend(v6, "tabWithUUID:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setActiveTab:", v9);

    }
    v3 = v10;
  }

}

void __59__BrowserController__participantsListForCollaborationView___block_invoke_4(uint64_t a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v1 = objc_alloc(MEMORY[0x1E0DC35A0]);
    objc_msgSend(WeakRetained[43], "shareRecordForActiveTabGroup");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C94C28], "safari_cloudTabsContainer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)objc_msgSend(v1, "initWithShare:container:", v2, v3);

    objc_msgSend(v4, "setDelegate:", WeakRetained);
    objc_msgSend(v4, "setModalPresentationStyle:", 2);
    -[BrowserController _presentModalViewController:](WeakRetained, v4);

  }
}

void __59__BrowserController__participantsListForCollaborationView___block_invoke_5(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "setDetailViewListContent:", v5);

}

- (void)clearParticipantsList
{
  id v3;

  -[NSMapTable removeAllObjects](self->_cachedParticipantLists, "removeAllObjects");
  -[_SFBarManager setCollaborationButton:](self->_barManager, "setCollaborationButton:", 0);
  -[BannerController tabGroupBanner](self->_bannerController, "tabGroupBanner");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCollaborationButton:", 0);

}

uint64_t __41__BrowserController__nonBlankCurrentTabs__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isBlank") ^ 1;
}

- (void)presentAutomaticTabClosingAlertController
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[5];

  v3 = (void *)MEMORY[0x1E0DC3450];
  _WBSLocalizedString();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _WBSLocalizedString();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserRootViewController traitCollection](self->_rootViewController, "traitCollection");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "alertControllerWithTitle:message:preferredStyle:", v4, v5, objc_msgSend(v6, "horizontalSizeClass") != 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "view");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setAccessibilityIdentifier:", CFSTR("AutomaticallyCloseTabsSheet"));

  v9 = 0;
  v10 = MEMORY[0x1E0C809B0];
  do
  {
    v11 = (void *)MEMORY[0x1E0DC3448];
    WBSAutomaticTabClosingIntervalPromptTitle();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = v10;
    v17[1] = 3221225472;
    v17[2] = __62__BrowserController_presentAutomaticTabClosingAlertController__block_invoke;
    v17[3] = &__block_descriptor_40_e23_v16__0__UIAlertAction_8l;
    v17[4] = v9;
    objc_msgSend(v11, "actionWithTitle:style:handler:", v12, v9 == 0, v17);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    WBSAutomaticTabClosingIntervalSettingsTitle();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_1E9CFDBB0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setAccessibilityIdentifier:", v15);

    objc_msgSend(v7, "addAction:", v13);
    ++v9;
  }
  while (v9 != 4);
  -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "presentViewController:animated:completion:", v7, 1, 0);

}

void __62__BrowserController_presentAutomaticTabClosingAlertController__block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WBSAutomaticTabClosingIntervalAnalyticsTitle();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setAccessibilityIdentifier:", v3);

  objc_msgSend(MEMORY[0x1E0D8A7A8], "setAutomaticTabClosingInterval:", *(_QWORD *)(a1 + 32));
  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  WBSAutomaticTabClosingIntervalAnalyticsTitle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "didChooseIntervalFromAutomaticTabClosingFirstTimeExperiencePrompt:", v5);

}

- (void)addBookmarkForCurrentTab
{
  -[BrowserController _addBookmarkForCurrentTabKeyPressed:]((id *)&self->super.super.super.isa, 0);
}

- (void)_addBookmarkForCurrentTabKeyPressed:(void *)a3 title:
{
  id v5;

  v5 = a3;
  if (a1)
    -[BrowserController _addBookmarkForCurrentTabKeyPressed:title:addToFavorites:](a1, a2, v5, 0);

}

void __78__BrowserController__addBookmarkForCurrentTabKeyPressed_title_addToFavorites___block_invoke(uint64_t a1)
{
  int v1;
  void *v2;
  id v3;

  v1 = *(unsigned __int8 *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v1)
    objc_msgSend(v2, "didAddBookmarkWithMethod:", 1);
  else
    objc_msgSend(v2, "didAddBookmarkFromToolbarMenuWithItemType:", 0);

}

- (void)addBookmarkFolderForCurrentTabs
{
  id v3;

  -[TabController currentTabs](self->_tabController, "currentTabs");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[BrowserController addBookmarkFolderForTabs:](self, "addBookmarkFolderForTabs:");

}

- (void)addBookmarkFolderForTabs:(id)a3
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  TabController *tabController;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id obj;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v25 = a3;
  objc_msgSend(MEMORY[0x1E0DCCBA0], "mainBookmarkCollection");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  obj = v25;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v30 != v5)
          objc_enumerationMutation(obj);
        v7 = *(id *)(*((_QWORD *)&v29 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          tabController = self->_tabController;
          v9 = objc_alloc(MEMORY[0x1E0CB3A28]);
          objc_msgSend(v7, "uuid");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = (void *)objc_msgSend(v9, "initWithUUIDString:", v10);
          -[TabController tabWithUUID:](tabController, "tabWithUUID:", v11);
          v12 = objc_claimAutoreleasedReturnValue();
          v13 = (void *)v12;
          if (v12)
            v14 = (void *)v12;
          else
            v14 = v7;
          v15 = v14;

          v7 = v15;
        }
        if ((objc_msgSend(v7, "isBlank") & 1) == 0)
        {
          v16 = objc_alloc(MEMORY[0x1E0DCCB98]);
          objc_msgSend(v7, "titleForNewBookmark");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "addressForNewBookmark");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "configuration");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = (void *)objc_msgSend(v16, "initWithTitle:address:collectionType:", v17, v18, objc_msgSend(v19, "collectionType"));

          objc_msgSend(v26, "addObject:", v20);
        }

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v4);
  }

  v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CD57C0]), "initWithFolderOfBookmarks:inCollection:", v26, v27);
  objc_msgSend(v21, "setSyntheticBookmarkProvider:", self->_tabController);
  if ((objc_msgSend(v21, "prepareForPresentationForAddingBookmark:", 1) & 1) != 0)
  {
    objc_msgSend(v21, "setBookmarkNavDelegate:", self);
    objc_msgSend(v21, "setAddBookmarkAnalyticsHandler:", &__block_literal_global_778);
    -[BrowserController _presentModalViewController:fromBarItem:completion:](self, "_presentModalViewController:fromBarItem:completion:", v21, *MEMORY[0x1E0D4F3D8], 0);
  }
  else
  {

    v22 = (void *)MEMORY[0x1E0D4EBD8];
    -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "showLockedDatabaseAlertForAction:fromViewController:", 1, v23);

    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "didPreventBookmarkActionWithBookmarkType:actionType:", 0, 0);

    v21 = 0;
  }

}

void __46__BrowserController_addBookmarkFolderForTabs___block_invoke()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "didAddBookmarkFromToolbarMenuWithItemType:", 1);

}

- (void)presentDownloadsViewController
{
  DownloadsViewController **p_downloadsViewController;
  DownloadsViewController *WeakRetained;
  DownloadsViewController *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;
  _QWORD v11[5];

  p_downloadsViewController = &self->_downloadsViewController;
  WeakRetained = (DownloadsViewController *)objc_loadWeakRetained((id *)&self->_downloadsViewController);
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __51__BrowserController_presentDownloadsViewController__block_invoke;
    v11[3] = &unk_1E9CF31B0;
    v11[4] = self;
    -[DownloadsViewController dismissViewControllerAnimated:completion:](WeakRetained, "dismissViewControllerAnimated:completion:", 1, v11);
  }
  else
  {
    v5 = objc_alloc_init(DownloadsViewController);
    -[DownloadsViewController setDownloadOpenHandler:](v5, "setDownloadOpenHandler:", self);
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3A40]), "initWithRootViewController:", v5);
    -[BrowserController tabBarManager](self, "tabBarManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "inlineTabBar");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "usesMoreMenu");

    if (v9)
      v10 = 5;
    else
      v10 = 11;
    -[BrowserController _presentModalViewController:fromBarItem:completion:](self, "_presentModalViewController:fromBarItem:completion:", v6, v10, 0);
    objc_storeWeak((id *)p_downloadsViewController, v5);

  }
}

id __51__BrowserController_presentDownloadsViewController__block_invoke(uint64_t a1)
{
  return objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 104), 0);
}

- (void)presentPrintControllerForTabDocument:(id)a3 frame:(id)a4 initiatedByWebContent:(BOOL)a5
{
  _BOOL8 v5;
  id v8;
  void *v9;
  TabDocument *v10;

  v5 = a5;
  v10 = (TabDocument *)a3;
  v8 = a4;
  if (self->_speculativeLoadDocument == v10)
  {
    -[BrowserController clearSpeculativeLoadDocument](self, "clearSpeculativeLoadDocument");
  }
  else if (-[BrowserController isContinuousReadingDocument:](self, "isContinuousReadingDocument:"))
  {
    -[BrowserController clearDocumentForContinuousReading:](self, "clearDocumentForContinuousReading:", v10);
  }
  else if (-[BrowserController _canPrintForTabDocument:]((uint64_t)self, v10)
         && -[BrowserController _canUpdateInterfaceWithTabDocument:]((uint64_t)self, v10)
         && !-[TabDocument isShowingFindOnPage](v10, "isShowingFindOnPage")
         && objc_msgSend(MEMORY[0x1E0CEA8D0], "isPrintingAvailable"))
  {
    -[TabDocument printController](v10, "printController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "printFrame:initiatedByWebContent:completion:", v8, v5, &__block_literal_global_782);

  }
}

- (uint64_t)_canUpdateInterfaceWithTabDocument:(uint64_t)a1
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  id v6;

  v3 = a2;
  if (a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 864));
    v5 = objc_msgSend(WeakRetained, "activationState");

    if (v5)
    {
      a1 = 0;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
      v6 = (id)objc_claimAutoreleasedReturnValue();
      a1 = v6 == v3;

    }
  }

  return a1;
}

void __86__BrowserController_presentPrintControllerForTabDocument_frame_initiatedByWebContent___block_invoke(uint64_t a1, uint64_t a2)
{
  id v2;

  if (!a2)
  {
    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "didPrintPage");

  }
}

- (void)dispatchNavigationIntent:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setSourceTabUUID:", v5);

  -[BrowserController UUID](self, "UUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setSourceWindowUUID:", v6);

  +[Application sharedApplication](Application, "sharedApplication");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handleNavigationIntent:completion:", v8, 0);

}

- (void)handleNavigationIntent:(id)a3 completion:(id)a4
{
  NSObject *v6;
  id WeakRetained;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  NSNumber *v24;
  NSNumber *layoutToRestoreAfterOpeningNewTabs;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  TabDocumentDropHandler *v34;
  TabController *tabController;
  void *v36;
  void *v37;
  uint64_t v38;
  id v39;
  _BOOL8 v40;
  TabDocumentDropHandler *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  int v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  NSObject *v71;
  void *v72;
  void *v73;
  unsigned int v74;
  void *v75;
  NSObject *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  id v84;
  unsigned int v85;
  void *v86;
  id v87;
  id v88;
  id v89;
  void *v90;
  void *v91;
  id v92;
  void (**v93)(void);
  void *v94;
  id v95;
  _QWORD v96[7];
  id v97;
  uint64_t *v98;
  _QWORD v99[6];
  _QWORD v100[5];
  id v101;
  id v102;
  id v103;
  uint64_t *v104;
  _QWORD v105[5];
  id v106;
  id v107;
  id v108;
  id v109;
  uint64_t *v110;
  _QWORD v111[5];
  id v112;
  id v113;
  _QWORD *v114;
  _QWORD v115[4];
  id v116;
  id v117;
  BrowserController *v118;
  id v119;
  _QWORD *v120;
  _QWORD aBlock[4];
  id v122;
  id v123;
  _QWORD *v124;
  _QWORD v125[3];
  char v126;
  uint64_t v127;
  id *v128;
  uint64_t v129;
  uint64_t (*v130)(uint64_t, uint64_t);
  void (*v131)(uint64_t);
  id v132;
  uint8_t buf[4];
  void *v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v95 = a3;
  v92 = a4;
  v6 = (id)WBS_LOG_CHANNEL_PREFIXPageLoading();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(v95, "privacyPreservingDescription");
    objc_claimAutoreleasedReturnValue();
    -[BrowserController handleNavigationIntent:completion:].cold.1();
  }

  if (objc_msgSend(v95, "policy") == 2)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(WeakRetained, "browserControllerWillCreateBackgroundTab:", self);

  }
  if (objc_msgSend(v95, "provenance") == 1)
  {
    if (objc_msgSend(v95, "type") == 5)
    {
      v8 = 0;
    }
    else if (objc_msgSend(v95, "type") != 4
           || (objc_msgSend(v95, "text"),
               v9 = (void *)objc_claimAutoreleasedReturnValue(),
               v10 = WBSUnifiedFieldInputTypeForString(),
               v9,
               v8 = 0,
               v10)
           && v10 != 3)
    {
      objc_msgSend(v95, "URL");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v11;
      if (v11)
      {
        v8 = v11;
      }
      else
      {
        objc_msgSend(v95, "text");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "safari_bestURLForUserTypedString");
        v8 = (id)objc_claimAutoreleasedReturnValue();

      }
    }
    -[BrowserController _recordIgnoredSiriSuggestedSitesWithURL:]((uint64_t)self, v8);

  }
  if (self->_allowsAutoDismissSidebar
    && objc_msgSend(v95, "shouldDismissSidebarOnLoad")
    && -[SidebarUIProxy isShowingSidebar](self->_sidebarUIProxy, "isShowingSidebar")
    && -[BrowserController isShowingStartPage](self, "isShowingStartPage"))
  {
    -[BrowserController toggleBookmarksPresentationWithCollection:completion:]((uint64_t)self, 0, 0);
  }
  self->_allowsAutoDismissSidebar = 0;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (objc_msgSend(v14, "isPinned"))
  {
    -[TabController singleUnpinnedBlankTab](self->_tabController, "singleUnpinnedBlankTab");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v127 = 0;
  v128 = (id *)&v127;
  v129 = 0x3032000000;
  v130 = __Block_byref_object_copy__3;
  v131 = __Block_byref_object_dispose__3;
  v132 = 0;
  v125[0] = 0;
  v125[1] = v125;
  v125[2] = 0x2020000000;
  v126 = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __55__BrowserController_handleNavigationIntent_completion___block_invoke;
  aBlock[3] = &unk_1E9CF3F80;
  v17 = v15;
  v122 = v17;
  v124 = v125;
  v18 = v14;
  v123 = v18;
  v115[0] = v16;
  v115[1] = 3221225472;
  v115[2] = __55__BrowserController_handleNavigationIntent_completion___block_invoke_2;
  v115[3] = &unk_1E9CF3FA8;
  v19 = _Block_copy(aBlock);
  v119 = v19;
  v20 = v95;
  v116 = v20;
  v120 = v125;
  v21 = v17;
  v117 = v21;
  v118 = self;
  v90 = _Block_copy(v115);
  v111[0] = v16;
  v111[1] = 3221225472;
  v111[2] = __55__BrowserController_handleNavigationIntent_completion___block_invoke_3;
  v111[3] = &unk_1E9CF3FD0;
  v111[4] = self;
  v89 = v19;
  v113 = v89;
  v88 = v21;
  v112 = v88;
  v114 = v125;
  v91 = _Block_copy(v111);
  -[TabCollectionViewProviding tabOverview](self->_tabCollectionViewProvider, "tabOverview");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v22;
  v86 = v22;
  if (v22 && !self->_layoutToRestoreAfterOpeningNewTabs)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v22, "presentedTabLayout"));
    v24 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    layoutToRestoreAfterOpeningNewTabs = self->_layoutToRestoreAfterOpeningNewTabs;
    self->_layoutToRestoreAfterOpeningNewTabs = v24;

    v23 = v86;
  }
  v105[0] = v16;
  v105[1] = 3221225472;
  v105[2] = __55__BrowserController_handleNavigationIntent_completion___block_invoke_4;
  v105[3] = &unk_1E9CF4048;
  v109 = v92;
  v110 = &v127;
  v87 = v109;
  v105[4] = self;
  v26 = v20;
  v106 = v26;
  v27 = v23;
  v107 = v27;
  v28 = v18;
  v108 = v28;
  v94 = _Block_copy(v105);
  v100[0] = v16;
  v100[1] = 3221225472;
  v100[2] = __55__BrowserController_handleNavigationIntent_completion___block_invoke_8;
  v100[3] = &unk_1E9CF4098;
  v100[4] = self;
  v29 = v26;
  v101 = v29;
  v30 = v91;
  v102 = v30;
  v31 = v90;
  v103 = v31;
  v104 = &v127;
  v93 = (void (**)(void))_Block_copy(v100);
  if (objc_msgSend(v29, "type") != 7)
    goto LABEL_34;
  if (!objc_msgSend(v29, "externalURLSourceApplicationIsSpotlight")
    || (-[TabController tabDocumentForSpotlightSearch](self->_tabController, "tabDocumentForSpotlightSearch"),
        (v32 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    tabController = self->_tabController;
    objc_msgSend(v29, "URL");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[TabController tabDocumentForURL:forceUnhibernate:](tabController, "tabDocumentForURL:forceUnhibernate:", v36, 1);
    v34 = (TabDocumentDropHandler *)objc_claimAutoreleasedReturnValue();

    if (v34)
    {
      objc_storeStrong(v128 + 5, v34);
      -[TabDocumentDropHandler unhibernate](v34, "unhibernate");
      -[TabDocumentDropHandler handleNavigationIntent:completion:](v34, "handleNavigationIntent:completion:", v29, v94);
      goto LABEL_45;
    }
LABEL_34:
    if (objc_msgSend(v29, "type") == 3)
    {
      objc_msgSend(v29, "recentlyClosedTabStateData");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, _QWORD, void *))v30 + 2))(v30, 0, v37);
      v38 = objc_claimAutoreleasedReturnValue();
      v39 = v128[5];
      v128[5] = (id)v38;

      v40 = v128[5] != 0;
    }
    else
    {
      if (objc_msgSend(v29, "type") != 9)
      {
        switch(objc_msgSend(v29, "policy"))
        {
          case 0:
            -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
            v34 = (TabDocumentDropHandler *)objc_claimAutoreleasedReturnValue();
            objc_storeStrong(v128 + 5, v34);
            -[TabDocumentDropHandler setNextLoadComesFromSearchPage:](v34, "setNextLoadComesFromSearchPage:", -[TabDocumentDropHandler isSearchPage](v34, "isSearchPage"));
            objc_msgSend(v29, "bookmark");
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v55, "localAttributes");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v56)
              goto LABEL_52;
            objc_msgSend(v29, "bookmark");
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            v58 = objc_msgSend(v57, "isReadingListItem");

            if (v58)
            {
              objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v55, "safari_incrementNumberForKey:", *MEMORY[0x1E0D8B198]);
LABEL_52:

            }
            -[TabDocumentDropHandler handleNavigationIntent:completion:](v34, "handleNavigationIntent:completion:", v29, v94);
            goto LABEL_45;
          case 1:
          case 2:
          case 3:
          case 4:
            (*((void (**)(id, _QWORD))v31 + 2))(v31, 0);
            v83 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v29, "shouldRelateToSourceTab"))
            {
              -[BrowserController browserWindowController](self, "browserWindowController");
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "sourceWindowUUID");
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v46, "browserControllerWithUUID:", v47);
              v82 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v82, "tabController");
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "sourceTabUUID");
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v48, "tabDocumentWithUUID:", v49);
              v81 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v81, "trackerInfo");
              v79 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v79, "queryParameterFilteringDataQueue");
              v80 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v83, "trackerInfo");
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v50, "queryParameterFilteringDataQueue");
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v80, "transferPendingDataToQueue:", v51);

            }
            -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v83, "setNextLoadComesFromSearchPage:", objc_msgSend(v52, "isSearchPage"));

            v96[0] = v16;
            v96[1] = 3221225472;
            v96[2] = __55__BrowserController_handleNavigationIntent_completion___block_invoke_11;
            v96[3] = &unk_1E9CF40C0;
            v45 = v96;
            v53 = v29;
            v96[4] = v53;
            v98 = &v127;
            v34 = v83;
            v96[5] = v34;
            v96[6] = self;
            v97 = v94;
            -[TabDocumentDropHandler handleNavigationIntent:completion:](v34, "handleNavigationIntent:completion:", v53, v96);

            goto LABEL_43;
          case 5:
            objc_msgSend(v29, "URL");
            v34 = (TabDocumentDropHandler *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "text");
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            v60 = v59;
            if (v59)
            {
              v84 = v59;
            }
            else
            {
              -[TabDocumentDropHandler safari_userVisibleString](v34, "safari_userVisibleString");
              v84 = (id)objc_claimAutoreleasedReturnValue();
            }

            if (v34)
            {
              objc_msgSend(MEMORY[0x1E0DCCBA0], "mainBookmarkCollection");
              v73 = (void *)objc_claimAutoreleasedReturnValue();
              v74 = -[WebBookmarkCollection saveReadingListBookmarkWithTitle:address:](v73, v84, v34);

              if (v74)
              {
                objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
                v75 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v75, "didAddReadingListItemWithMethod:", 5);

              }
              -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
              v76 = objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "sourceElementInfo");
              v77 = (void *)objc_claimAutoreleasedReturnValue();
              -[NSObject animateElement:toBarItem:](v76, "animateElement:toBarItem:", v77, 3);

            }
            else
            {
              v76 = (id)WBS_LOG_CHANNEL_PREFIXPageLoading();
              if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
              {
                objc_msgSend(v29, "privacyPreservingDescription");
                v78 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543362;
                v134 = v78;
                _os_log_impl(&dword_1D7CA3000, v76, OS_LOG_TYPE_INFO, "Unable to add intent to reading list because there's no URL: %{public}@", buf, 0xCu);

              }
            }

            (*((void (**)(void *, BOOL))v94 + 2))(v94, v34 != 0);
            v54 = v84;
            goto LABEL_44;
          case 6:
            objc_msgSend(v29, "URL");
            v34 = (TabDocumentDropHandler *)objc_claimAutoreleasedReturnValue();
            if (v34)
            {
              -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              v85 = objc_msgSend(v61, "isSearchPage");
              -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
              v62 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v62, "setNextLoadComesFromSearchPage:", v85);

              -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "sourceElementInfo");
              v64 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v63, "animateElementToDownloadsBarItemSoon:", v64);

              objc_msgSend(MEMORY[0x1E0CD56A0], "sharedDownloadDispatcher");
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
              v66 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v66, "webView");
              v67 = (void *)objc_claimAutoreleasedReturnValue();
              v68 = v65;
              objc_msgSend(v65, "startDownloadFromWebView:URL:", v67, v34);
              v69 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(MEMORY[0x1E0CD56A8], "sharedManager");
              v70 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v69, "setDelegate:", v70);

              v54 = v69;
              objc_msgSend(v69, "setExplicitlySaved:", 1);
              (*((void (**)(void *, uint64_t))v94 + 2))(v94, 1);
              goto LABEL_44;
            }
            v71 = (id)WBS_LOG_CHANNEL_PREFIXPageLoading();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v29, "privacyPreservingDescription");
              v72 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v134 = v72;
              _os_log_impl(&dword_1D7CA3000, v71, OS_LOG_TYPE_INFO, "Unable to download intent because there's no URL: %{public}@", buf, 0xCu);

            }
            (*((void (**)(void *, _QWORD))v94 + 2))(v94, 0);
            break;
          default:
            goto LABEL_48;
        }
        goto LABEL_45;
      }
      if ((objc_msgSend(v29, "shouldPromptBeforeHandling") & 1) != 0)
      {
        v41 = [TabDocumentDropHandler alloc];
        -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = -[TabDocumentDropHandler initWithAlertPresentationViewController:](v41, "initWithAlertPresentationViewController:", v42);

        objc_msgSend(v29, "navigationIntents");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = objc_msgSend(v43, "count");
        v99[0] = v16;
        v99[1] = 3221225472;
        v99[2] = __55__BrowserController_handleNavigationIntent_completion___block_invoke_10;
        v99[3] = &unk_1E9CF3D88;
        v45 = v99;
        v99[4] = v93;
        v99[5] = v94;
        -[TabDocumentDropHandler promptIfNeededToConfirmNumberOfNavigationIntents:withCompletionHandler:](v34, "promptIfNeededToConfirmNumberOfNavigationIntents:withCompletionHandler:", v44, v99);

LABEL_43:
        v54 = (void *)v45[4];
LABEL_44:

        goto LABEL_45;
      }
      v93[2]();
      v40 = 1;
    }
    (*((void (**)(void *, _BOOL8))v94 + 2))(v94, v40);
    goto LABEL_48;
  }
  v33 = v128[5];
  v128[5] = v32;
  v34 = v32;

  -[TabDocumentDropHandler handleNavigationIntent:completion:](v34, "handleNavigationIntent:completion:", v29, v94);
LABEL_45:

LABEL_48:
  _Block_object_dispose(v125, 8);
  _Block_object_dispose(&v127, 8);

}

uint64_t __55__BrowserController_handleNavigationIntent_completion___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "isBlank");
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      return 0;
    }
    else if (objc_msgSend(*(id *)(a1 + 40), "isPinned"))
    {
      return objc_msgSend(*(id *)(a1 + 32), "isEqual:", *(_QWORD *)(a1 + 40)) ^ 1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

TabDocument *__55__BrowserController_handleNavigationIntent_completion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  TabDocument *v4;
  uint64_t v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;

  v3 = a2;
  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 56) + 16))()
    && objc_msgSend(*(id *)(a1 + 32), "canUseExistingBlankTab"))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
    objc_msgSend(*(id *)(a1 + 40), "unhibernate");
    v4 = (TabDocument *)*(id *)(a1 + 40);
  }
  else
  {
    v4 = -[TabDocument initWithBrowserController:]([TabDocument alloc], "initWithBrowserController:", *(_QWORD *)(a1 + 48));
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_BYTE *)(v5 + 72);
    *(_BYTE *)(v5 + 72) = 0;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 344), "activeTabDocument");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "view");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[TabDocument webView](v4, "webView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "applyGeometryToWebView:", v9);

    *(_BYTE *)(*(_QWORD *)(a1 + 48) + 72) = v6;
    if (objc_msgSend(*(id *)(a1 + 32), "shouldRelateToSourceTab"))
    {
      v10 = *(void **)(*(_QWORD *)(a1 + 48) + 344);
      objc_msgSend(*(id *)(a1 + 32), "sourceTabUUID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "tabDocumentWithUUID:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      -[TabDocument setParentTabDocumentForBackClosesSpawnedTab:](v4, "setParentTabDocumentForBackClosesSpawnedTab:", v12);
      -[TabDocument updateAncestryWithParentTab:](v4, "updateAncestryWithParentTab:", v12);

    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 344), "insertNewTabDocument:forcingOrderAfterTabDocument:inBackground:animated:", v4, v3, 1, objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 904), "hasTabBar"));
    v13 = objc_msgSend(*(id *)(a1 + 32), "type");
    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "didOpenNewTabWithURLWithTrigger:isExternalLink:tabCollectionViewType:", 2, v13 == 7, objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 904), "visibleTabCollectionViewType"));

  }
  return v4;
}

TabDocument *__55__BrowserController_handleNavigationIntent_completion___block_invoke_3(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  TabDocument *v7;
  int v8;
  void *v9;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1[4] + 784), "loadSessionStateDataAndRemoveRecentlyClosedTab:", v6);
  v7 = -[TabDocument initWithTabStateData:hibernated:browserController:]([TabDocument alloc], "initWithTabStateData:hibernated:browserController:", v6, 0, a1[4]);
  v8 = (*(uint64_t (**)(void))(a1[6] + 16))();
  v9 = *(void **)(a1[4] + 344);
  if (v8)
  {
    objc_msgSend(v9, "replaceTabDocument:withTabDocument:", a1[5], v7);
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
  }
  else
  {
    objc_msgSend(v9, "insertNewTabDocument:forcingOrderAfterTabDocument:inBackground:animated:", v7, v5, 1, 0);
  }

  return v7;
}

void __55__BrowserController_handleNavigationIntent_completion___block_invoke_4(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _BOOL8 v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  char v24;
  _QWORD v25[5];
  id v26;
  uint64_t v27;
  BOOL v28;
  char v29;

  if ((a2 & 1) != 0)
  {
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "activeTabDocument");
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v6 = *(void **)(v5 + 40);
      *(_QWORD *)(v5 + 40) = v4;

    }
    v7 = -[BrowserController _animationsAreEnabled](*(_QWORD *)(a1 + 32));
    if (objc_msgSend(*(id *)(a1 + 40), "shouldOrderToForeground"))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "activeTabDocument");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);

      if (v8 != v9)
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "setActiveTabDocument:animated:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), v7);
    }
    objc_msgSend(*(id *)(a1 + 32), "showBars");
    v10 = *(void **)(*(_QWORD *)(a1 + 32) + 152);
    if (v10)
    {
      objc_msgSend(*(id *)(a1 + 48), "setPresentedTabLayout:", objc_msgSend(v10, "integerValue"));
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(void **)(v11 + 152);
      *(_QWORD *)(v11 + 152) = 0;

    }
    v13 = objc_msgSend(*(id *)(a1 + 56), "isBlank");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 904), "tabThumbnailCollectionView");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "itemToActivate");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
      v16 = v13 | 2;
    else
      v16 = v13;
    if ((-[BrowserController _isWindowLockedForPrivateBrowsing](*(_QWORD *)(a1 + 32)) & 1) != 0)
    {
      +[Application sharedApplication](Application, "sharedApplication");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = __55__BrowserController_handleNavigationIntent_completion___block_invoke_5;
      v25[3] = &unk_1E9CF4020;
      v18 = *(_QWORD *)(a1 + 32);
      v28 = v7;
      v25[4] = v18;
      v27 = v16;
      v26 = *(id *)(a1 + 64);
      v29 = a2;
      objc_msgSend(v17, "authenticateToUnlockPrivateBrowsingWithCompletionHandler:", v25);

      v19 = v26;
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 32);
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __55__BrowserController_handleNavigationIntent_completion___block_invoke_7;
      v22[3] = &unk_1E9CF3FF8;
      v23 = *(id *)(a1 + 64);
      v24 = a2;
      -[BrowserController _dismissTransientUIAnimated:dismissalOptions:completionHandler:](v21, v7, v16, v22);
      v19 = v23;
    }

  }
  else
  {
    v20 = *(_QWORD *)(a1 + 64);
    if (v20)
      (*(void (**)(uint64_t, _QWORD))(v20 + 16))(v20, 0);
  }
}

void __55__BrowserController_handleNavigationIntent_completion___block_invoke_5(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  char v9;

  if (a2)
  {
    v3 = *(unsigned __int8 *)(a1 + 56);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __55__BrowserController_handleNavigationIntent_completion___block_invoke_6;
    v7[3] = &unk_1E9CF3FF8;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 48);
    v8 = *(id *)(a1 + 40);
    v9 = *(_BYTE *)(a1 + 57);
    -[BrowserController _dismissTransientUIAnimated:dismissalOptions:completionHandler:](v4, v3, v5, v7);

  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
      (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, *(unsigned __int8 *)(a1 + 57));
  }
}

uint64_t __55__BrowserController_handleNavigationIntent_completion___block_invoke_6(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a1 + 40));
  return result;
}

uint64_t __55__BrowserController_handleNavigationIntent_completion___block_invoke_7(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a1 + 40));
  return result;
}

void __55__BrowserController_handleNavigationIntent_completion___block_invoke_8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  uint64_t v10;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 344);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[2] = __55__BrowserController_handleNavigationIntent_completion___block_invoke_9;
  v6[3] = &unk_1E9CF4070;
  v6[1] = 3221225472;
  v7 = v2;
  v8 = *(id *)(a1 + 48);
  v4 = *(id *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v9 = v4;
  v10 = v5;
  objc_msgSend(v3, "performBatchUpdatesWithBlock:", v6);

}

void __55__BrowserController_handleNavigationIntent_completion___block_invoke_9(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "navigationIntents", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)v16;
    do
    {
      v6 = 0;
      v7 = v4;
      do
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v6);
        if (objc_msgSend(v8, "type") == 3)
        {
          v9 = *(_QWORD *)(a1 + 40);
          objc_msgSend(v8, "recentlyClosedTabStateData");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(uint64_t, void *, void *))(v9 + 16))(v9, v7, v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "handleNavigationIntent:completion:", v8, 0);
        }
        v4 = v11;

        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v14 = *(_QWORD *)(v12 + 40);
        v13 = (id *)(v12 + 40);
        if (!v14)
          objc_storeStrong(v13, v11);

        ++v6;
        v7 = v4;
      }
      while (v3 != v6);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v3);

  }
}

uint64_t __55__BrowserController_handleNavigationIntent_completion___block_invoke_10(uint64_t a1, int a2)
{
  if (a2)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t __55__BrowserController_handleNavigationIntent_completion___block_invoke_11(uint64_t a1, int a2)
{
  int v3;
  char v4;
  void *v5;
  void *v6;
  void *v7;

  if (a2)
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "shouldOrderToForeground");
    v4 = v3;
    if (v3)
    {
      v5 = *(void **)(a1 + 40);
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 344), "activeTabDocument");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v5);
    if ((v4 & 1) != 0)
    {
      objc_msgSend(*(id *)(a1 + 40), "setPerformingFirstLoadAfterOpenInBackground:", 0);
    }
    else
    {

      objc_msgSend(*(id *)(a1 + 40), "setPerformingFirstLoadAfterOpenInBackground:", 1);
      if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 904), "hasTabBar") & 1) == 0)
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 344), "activeTabDocument");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "sourceElementInfo");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "animateElement:toBarItem:", v7, 8);

      }
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

- (void)bookmarksNavigationControllerDidPressDoneButton:(id)a3
{
  -[BrowserController setPresentingModalBookmarksController:withExclusiveCollection:bookmarkUUIDString:animated:](self, "setPresentingModalBookmarksController:withExclusiveCollection:bookmarkUUIDString:animated:", 0, 0, 0, 1);
}

- (void)bookmarksNavigationControllerReloadDidFail:(id)a3
{
  id v3;

  v3 = (id)objc_msgSend(a3, "popToRootViewControllerAnimated:", 1);
}

- (void)bookmarksBarView:(id)a3 bookmarksNavigationControllerViewDidAppear:(id)a4
{
  -[BrowserController bookmarksNavigationControllerViewDidAppear:](self, "bookmarksNavigationControllerViewDidAppear:", a4);
}

- (void)bookmarksBarView:(id)a3 bookmarksNavigationControllerViewDidDisappear:(id)a4
{
  -[BrowserController bookmarksNavigationControllerViewDidDisappear:](self, "bookmarksNavigationControllerViewDidDisappear:", a4);
}

- (id)bookmarksNavigationControllerCurrentContinuousReadingItem:(id)a3
{
  void *v3;
  void *v4;

  -[BrowserController continuousReadingController](self, "continuousReadingController", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "currentReadingListItem");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)bookmarksNavigationController:(id)a3 updateReadingListUnreadFilterShowingAllBookmarks:(BOOL)a4
{
  _BOOL4 v4;
  id v5;

  v4 = a4;
  -[BrowserController continuousReadingController](self, "continuousReadingController", a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setUnreadReadingListItemsOnly:", !v4);

}

- (void)bookmarksNavigationControllerViewDidAppear:(id)a3
{
  id v4;

  +[Application sharedApplication](Application, "sharedApplication", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isRunningShowBookmarksTest"))
  {
    if (objc_msgSend(v4, "didStartBookmarksTest"))
      -[BrowserController performSelector:withObject:afterDelay:](self, "performSelector:withObject:afterDelay:", sel_toggleBookmarksPresentation, 0, 0.0);
    else
      objc_msgSend(v4, "startBookmarksTest");
  }

}

- (void)bookmarksNavigationControllerViewDidDisappear:(id)a3
{
  id v3;

  +[Application sharedApplication](Application, "sharedApplication", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "isRunningShowBookmarksTest"))
  {
    if (objc_msgSend(v3, "didStartBookmarksTest"))
      objc_msgSend(v3, "performSelector:withObject:afterDelay:", sel_finishedBookmarksTest, 0, 0.0);
    else
      objc_msgSend(v3, "startBookmarksTest");
  }

}

- (void)bookmarksNavigationController:(id)a3 setBookmark:(id)a4 asRead:(BOOL)a5
{
  -[BrowserController markReadingListBookmark:asRead:postNotification:](self, "markReadingListBookmark:asRead:postNotification:", a4, a5, 0);
}

- (void)bookmarksNavigationControllerContentDidBecomeDirty:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  objc_msgSend(v6, "viewIfLoaded");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    -[BrowserController setNeedsSnapshotUpdateForActiveTabIfTabIsBlank](self, "setNeedsSnapshotUpdateForActiveTabIfTabIsBlank");

}

- (void)updatePopoverPositionAfterSizeTransition
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "presentedViewController");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "popoverPresentationController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(v4, "updatePopoverPosition");

}

- (int64_t)browserPersonaForActivityViewController:(id)a3
{
  return 0;
}

- (void)actionPanelAddTabDocumentToReadingList:(id)a3 activityDidFinish:(id)a4
{
  id v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v5 = a4;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __78__BrowserController_actionPanelAddTabDocumentToReadingList_activityDidFinish___block_invoke;
  v7[3] = &unk_1E9CF40E8;
  v7[4] = self;
  v8 = v5;
  v6 = v5;
  -[BrowserController showReadingListAutomaticArchiveAlertIfNeededWithCompletion:](self, "showReadingListAutomaticArchiveAlertIfNeededWithCompletion:", v7);

}

void __78__BrowserController_actionPanelAddTabDocumentToReadingList_activityDidFinish___block_invoke(uint64_t a1)
{
  int v2;
  id v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "addReadingListBookmarkForCurrentTab");
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "didAddReadingListItemWithMethod:", 4);

  }
}

- (void)actionPanel:(id)a3 prepareForMailActivityWithMailController:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a3;
  v8 = a4;
  v9 = a5;
  -[BrowserController _mailContentProvider](self);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setRestrictAddingPDFContent:", 1);
  objc_msgSend(v14, "customizationController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "selectedContentType");
  v12 = _SFPreferredMailContentTypeForActivityContentType();

  objc_msgSend(v14, "sharingURL");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "prepareMailComposeViewController:withMailToURL:contentURL:preferredContentType:completionHandler:", v8, 0, v13, v12, v9);

  objc_msgSend(v10, "setRestrictAddingPDFContent:", 0);
}

- (id)downloadsViewControllerForActionPanel:(id)a3
{
  DownloadsViewController *v4;

  v4 = objc_alloc_init(DownloadsViewController);
  -[DownloadsViewController setDownloadOpenHandler:](v4, "setDownloadOpenHandler:", self);
  objc_storeWeak((id *)&self->_downloadsViewController, v4);
  return v4;
}

- (id)addBookmarkActivityTabGroupProvider
{
  return self->_tabController;
}

- (BOOL)addBookmarkActivityCanSaveBookmarkChanges:(id)a3
{
  return !-[BrowserController showDemoModeFeatureDisabledAlert](self, "showDemoModeFeatureDisabledAlert", a3);
}

- (void)addBookmarkActivityFailedToAcquireBookmarkLock:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  v4 = (void *)MEMORY[0x1E0D4EBD8];
  -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "showLockedDatabaseAlertForAction:fromViewController:", 1, v5);

  objc_opt_class();
  LOBYTE(v4) = objc_opt_isKindOfClass();
  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "didPreventBookmarkActionWithBookmarkType:actionType:", (v4 & 1) == 0, 0);

}

- (id)readerControllerForMailContentProvider:(id)a3
{
  void *v3;
  void *v4;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "readerContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (BOOL)readerViewIsVisibleForMailContentProvider:(id)a3
{
  void *v3;
  char v4;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isShowingReader");

  return v4;
}

- (id)webViewForMailContentProvider:(id)a3
{
  void *v3;
  void *v4;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isBlank") & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    if (objc_msgSend(v3, "isShowingReader"))
      objc_msgSend(v3, "readerWebView");
    else
      objc_msgSend(v3, "webView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v4;
}

- (id)printControllerForContentProvider:(id)a3
{
  void *v3;
  void *v4;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isBlank") & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(v3, "printController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v4;
}

- (void)tabDocumentDidUpdateShowingContinuous:(id)a3
{
  id v4;
  id v5;

  v5 = a3;
  if (-[BrowserController _canUpdateInterfaceWithTabDocument:]((uint64_t)self, v5))
    -[BrowserController updateInterface](self, "updateInterface");
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  if (v4 == v5)
    -[BrowserController didChangeContinuousReadingItemInActiveDocument](self, "didChangeContinuousReadingItemInActiveDocument");

}

- (void)tabDocumentDidStartLoading:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id WeakRetained;
  id v10;

  v10 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  v5 = v10;
  if (v4 == v10)
  {
    -[BrowserRootViewController navigationBar](self->_rootViewController, "navigationBar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "clearEphemeralUI");

    -[BrowserController updateInterface](self, "updateInterface");
    if (objc_msgSend(v10, "isBlank"))
    {
      -[BrowserController tabBarManager](self, "tabBarManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "inlineTabBar");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "updateCloseButtonVisibility");

    }
    WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(WeakRetained, "browserController:tabDocumentDidStartLoading:", self, v10);

    v5 = v10;
  }

}

- (void)willStartLoadFromUserTap:(id)a3
{
  id v4;
  id v5;

  v5 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  if (v4 == v5 && !-[BrowserRootViewController keepBarsMinimized](self->_rootViewController, "keepBarsMinimized"))
    -[BrowserController showBars](self, "showBars");

}

- (BOOL)tabDocumentCanDownloadFile:(id)a3
{
  TabDocument *v4;
  _BOOL4 v5;

  v4 = (TabDocument *)a3;
  if (self->_speculativeLoadDocument == v4)
  {
    -[BrowserController cancelSpeculativeLoad](self, "cancelSpeculativeLoad");
  }
  else
  {
    if (!-[BrowserController isContinuousReadingDocument:](self, "isContinuousReadingDocument:", v4))
    {
      v5 = !-[TabDocument isControlledByAutomation](v4, "isControlledByAutomation");
      goto LABEL_7;
    }
    -[BrowserController clearDocumentForContinuousReading:](self, "clearDocumentForContinuousReading:", v4);
  }
  LOBYTE(v5) = 0;
LABEL_7:

  return v5;
}

- (BOOL)tabDocument:(id)a3 canShowDownload:(id)a4
{
  id v5;
  id v6;
  BOOL v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v5 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6 == v5)
  {
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "presentationState") == 1)
    {
      v7 = 0;
      v9 = v8;
    }
    else
    {
      v10 = objc_msgSend(v8, "presentationState");

      if (v10 == 2)
      {
        v7 = 0;
LABEL_9:

        goto LABEL_10;
      }
      -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "presentedViewController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = v11 == 0;

    }
    goto LABEL_9;
  }
  v7 = 0;
LABEL_10:

  return v7;
}

- (BOOL)tabDocumentCanRedirectToExternalApplication:(id)a3
{
  TabDocument *v4;
  char v5;
  TabDocument *v6;
  TabDocument *speculativeLoadDocument;

  v4 = (TabDocument *)a3;
  if (-[TabDocument isControlledByAutomation](v4, "isControlledByAutomation"))
  {
    v5 = 0;
  }
  else
  {
    -[TabController tabBeingActivated](self->_tabController, "tabBeingActivated");
    v6 = (TabDocument *)objc_claimAutoreleasedReturnValue();
    if (v6 == v4)
    {
      speculativeLoadDocument = self->_speculativeLoadDocument;

      if (speculativeLoadDocument != v4)
      {
        v5 = 1;
        goto LABEL_8;
      }
    }
    else
    {

    }
    v5 = -[TabDocument isPerformingRedirectAfterOpenInBackground](v4, "isPerformingRedirectAfterOpenInBackground");
  }
LABEL_8:

  return v5;
}

- (void)tabDocumentDidCancelRedirectToExternalApplication:(id)a3
{
  if (self->_speculativeLoadDocument == a3)
    -[BrowserController cancelSpeculativeLoad](self, "cancelSpeculativeLoad");
}

- (void)tabDocument:(id)a3 didFinishLoadingWithError:(BOOL)a4
{
  void *v6;
  char v7;
  TabDocument *v8;
  TabDocument *v9;

  v9 = (TabDocument *)a3;
  +[WBReusableTabManager sharedManager](ReusableTabManager, "sharedManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isTabSuspended:", v9);

  if ((v7 & 1) == 0)
  {
    if (!a4
      && !-[BrowserController isContinuousReadingDocument:](self, "isContinuousReadingDocument:", v9)
      && self->_speculativeLoadDocument != v9
      && self->_previewDocument != v9)
    {
      -[TabController updateWBTabWithTab:notify:persist:](self->_tabController, "updateWBTabWithTab:notify:persist:", v9, 1, 1);
    }
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v8 = (TabDocument *)objc_claimAutoreleasedReturnValue();

    if (v8 == v9)
    {
      -[BrowserRootViewController stopRefreshing](self->_rootViewController, "stopRefreshing");
      -[BrowserController updateInterface](self, "updateInterface");
      -[BrowserController _sendPDFRepresentationForScreenshotWithTabDocument:](self, v9);
    }
  }

}

- (void)_sendPDFRepresentationForScreenshotWithTabDocument:(_QWORD *)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  NSObject *v23;
  void *v24;
  _QWORD v25[4];
  id v26[6];
  uint8_t v27[16];
  uint8_t buf[4];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (a1[6])
    {
      objc_msgSend(v3, "webView");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "scrollView");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "visibleBounds");
      v8 = v7;
      v10 = v9;
      v12 = v11;
      objc_msgSend(v6, "zoomScale");
      v14 = v13;
      objc_msgSend(v6, "contentSize");
      v16 = v15;
      objc_msgSend(v6, "contentOffset");
      v18 = v16 / v14 - (*(double *)&v12 + v17 / v14);
      if (objc_msgSend(v5, "_isDisplayingPDF"))
      {
        objc_msgSend(v5, "_dataForDisplayedPDF");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = (id)WBS_LOG_CHANNEL_PREFIXPrinting();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v29 = objc_msgSend(v19, "length");
          _os_log_impl(&dword_1D7CA3000, v20, OS_LOG_TYPE_DEFAULT, "Webpage was already displaying a PDF, using existing PDF data of length %zu", buf, 0xCu);
        }

        (*(void (**)(double, double, double, double))(a1[6] + 16))(*(double *)&v8, v18, *(double *)&v10, *(double *)&v12);
        v21 = (void *)a1[6];
        a1[6] = 0;

      }
      else
      {
        objc_initWeak((id *)buf, a1);
        v23 = WBS_LOG_CHANNEL_PREFIXPrinting();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v27 = 0;
          _os_log_impl(&dword_1D7CA3000, v23, OS_LOG_TYPE_INFO, "Generating Screenshot PDF for Markup", v27, 2u);
        }
        objc_msgSend(v4, "printController");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 3221225472;
        v25[2] = __72__BrowserController__sendPDFRepresentationForScreenshotWithTabDocument___block_invoke;
        v25[3] = &unk_1E9CF42E8;
        objc_copyWeak(v26, (id *)buf);
        v26[1] = (id)1;
        v26[2] = v8;
        v26[3] = *(id *)&v18;
        v26[4] = v10;
        v26[5] = v12;
        objc_msgSend(v24, "getPDFDataForUsage:withCompletion:", 2, v25);

        objc_destroyWeak(v26);
        objc_destroyWeak((id *)buf);
      }

    }
    else
    {
      v22 = WBS_LOG_CHANNEL_PREFIXPrinting();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D7CA3000, v22, OS_LOG_TYPE_INFO, "Not sending PDF representation of screenshot because we no longer have a pending request block", buf, 2u);
      }
    }
  }

}

- (void)tabDocumentDidCommitNavigation:(id)a3
{
  id v4;
  NSObject *v5;
  id blockRequestingScreenshotPDFData;
  uint8_t v7[16];

  v4 = a3;
  if (self->_blockRequestingScreenshotPDFData)
  {
    v5 = WBS_LOG_CHANNEL_PREFIXPrinting();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1D7CA3000, v5, OS_LOG_TYPE_DEFAULT, "A tab committed a navigation before we could generate a screenshot PDF; calling and clearing completionHandler without a PDF",
        v7,
        2u);
    }
    (*((void (**)(double, double, double, double))self->_blockRequestingScreenshotPDFData + 2))(*MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
    blockRequestingScreenshotPDFData = self->_blockRequestingScreenshotPDFData;
    self->_blockRequestingScreenshotPDFData = 0;

  }
  -[TabController updateWBTabWithTab:notify:persist:](self->_tabController, "updateWBTabWithTab:notify:persist:", v4, 0, 0);

}

- (void)webViewDidFirstVisuallyNonEmptyLayoutForTabDocument:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  objc_msgSend(v5, "updateUsageTrackingInformationIfNecessaryGivenDocumentIsCurrent:", 1);
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _updateDigitalHealthOverlayForTabDocuments:](self, v4);

}

- (void)tabDocumentDidUpdateTitle:(id)a3
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[5];

  v8 = a3;
  if (-[BrowserController _canUpdateInterfaceWithTabDocument:]((uint64_t)self, v8))
  {
    -[BrowserController tabBarManager](self, "tabBarManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "displayMode");

    if (v5 == 2)
    {
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __47__BrowserController_tabDocumentDidUpdateTitle___block_invoke;
      v10[3] = &unk_1E9CF31B0;
      v10[4] = self;
      objc_msgSend(MEMORY[0x1E0DC3F10], "performWithoutAnimation:", v10);
    }
    else
    {
      -[BrowserController updateInterface](self, "updateInterface");
    }
  }
  -[TabController updateWBTabWithTab:notify:persist:](self->_tabController, "updateWBTabWithTab:notify:persist:", v8, 1, 0, v8);
  -[BrowserRootViewController tabSwitcherViewController](self->_rootViewController, "tabSwitcherViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setNeedsApplyContentAnimated:", 0);

  objc_msgSend(v9, "indexTabToCoreSpotlight");
  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "reportTabUpdatedWithUpdateType:", 1);

}

uint64_t __47__BrowserController_tabDocumentDidUpdateTitle___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateInterface");
}

- (void)tabDocumentDidUpdateURL:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  -[BrowserController _updateSceneTitle]((uint64_t)self);
  -[BrowserController clearCachedTabCompletionData](self, "clearCachedTabCompletionData");
  -[TabController updateWBTabWithTab:notify:persist:](self->_tabController, "updateWBTabWithTab:notify:persist:", v5, 1, 0);
  objc_msgSend(v5, "indexTabToCoreSpotlight");
  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "reportTabUpdatedWithUpdateType:", 2);

}

- (void)tabDocumentDidUpdateBackForward:(id)a3
{
  id v4;

  v4 = a3;
  if (-[BrowserController _canUpdateInterfaceWithTabDocument:]((uint64_t)self, v4))
  {
    -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, 1);
    -[BrowserRootViewController setNeedsUpdateOfScreenEdgesDeferringSystemGestures](self->_rootViewController, "setNeedsUpdateOfScreenEdgesDeferringSystemGestures");
  }

}

- (void)tabDocumentFluidProgressRocketAnimationDidComplete:(id)a3
{
  id v4;

  v4 = a3;
  if (-[BrowserController _canUpdateInterfaceWithTabDocument:]((uint64_t)self, v4))
    -[BrowserController prefetchNextContinuousItemIfNeeded]((id *)&self->super.super.super.isa);

}

- (BOOL)tabDocumentShouldHandleAuthentication:(id)a3
{
  TabDocument *v4;
  NSObject *v5;
  BOOL v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char isKindOfClass;
  id v13;
  uint64_t v14;
  void *v16;
  int v17;
  int v18;
  TabDocument *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (TabDocument *)a3;
  if (self->_speculativeLoadDocument == v4)
  {
    -[BrowserController cancelSpeculativeLoad](self, "cancelSpeculativeLoad");
    v5 = WBS_LOG_CHANNEL_PREFIXPageLoading();
    v6 = 0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 134217984;
      v19 = v4;
      v7 = "TabDocument %p: returning NO for tabDocumentShouldHandleAuthentication because speculative load.";
      goto LABEL_20;
    }
  }
  else if (-[BrowserController isContinuousReadingDocument:](self, "isContinuousReadingDocument:", v4))
  {
    -[BrowserController clearDocumentForContinuousReading:](self, "clearDocumentForContinuousReading:", v4);
    v5 = WBS_LOG_CHANNEL_PREFIXPageLoading();
    v6 = 0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 134217984;
      v19 = v4;
      v7 = "TabDocument %p: returning NO for tabDocumentShouldHandleAuthentication because reader.";
LABEL_20:
      _os_log_impl(&dword_1D7CA3000, v5, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v18, 0xCu);
      v6 = 0;
    }
  }
  else if (-[BrowserController isControlledByAutomation](self, "isControlledByAutomation"))
  {
    v5 = WBS_LOG_CHANNEL_PREFIXPageLoading();
    v6 = 0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 134217984;
      v19 = v4;
      v7 = "TabDocument %p: returning NO for tabDocumentShouldHandleAuthentication because isControlledByAutomation.";
      goto LABEL_20;
    }
  }
  else
  {
    -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "presentedViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9
      && NSClassFromString((NSString *)CFSTR("OBWelcomeController"))
      && (-[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom"),
          v10 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v10, "presentedViewController"),
          v11 = (void *)objc_claimAutoreleasedReturnValue(),
          isKindOfClass = objc_opt_isKindOfClass(),
          v11,
          v10,
          (isKindOfClass & 1) != 0))
    {
      v5 = WBS_LOG_CHANNEL_PREFIXPageLoading();
      v6 = 0;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v18 = 134217984;
        v19 = v4;
        v7 = "TabDocument %p: returning NO for tabDocumentShouldHandleAuthentication because presentedViewController.";
        goto LABEL_20;
      }
    }
    else
    {
      -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
      v13 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v13, "presentationState") == 1)
      {

      }
      else
      {
        v14 = objc_msgSend(v13, "presentationState");

        if (v14 != 2)
        {
          if (!-[TabDocument isPrivateBrowsingEnabled](v4, "isPrivateBrowsingEnabled")
            || (+[Application sharedApplication](Application, "sharedApplication"),
                v16 = (void *)objc_claimAutoreleasedReturnValue(),
                v17 = objc_msgSend(v16, "isPrivateBrowsingLocked"),
                v16,
                !v17))
          {
            v6 = 1;
            goto LABEL_21;
          }
          v5 = WBS_LOG_CHANNEL_PREFIXPageLoading();
          v6 = 0;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          {
            v18 = 134217984;
            v19 = v4;
            v7 = "TabDocument %p: returning NO for tabDocumentShouldHandleAuthentication because locked private browsing.";
            goto LABEL_20;
          }
          goto LABEL_21;
        }
      }
      v5 = WBS_LOG_CHANNEL_PREFIXPageLoading();
      v6 = 0;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v18 = 134217984;
        v19 = v4;
        v7 = "TabDocument %p: returning NO for tabDocumentShouldHandleAuthentication because tabThumbnailCollectionView.";
        goto LABEL_20;
      }
    }
  }
LABEL_21:

  return v6;
}

- (BOOL)tabDocumentShouldHandleCertificateError:(id)a3
{
  TabDocument *v4;
  TabDocument *v5;
  _BOOL4 v6;

  v4 = (TabDocument *)a3;
  v5 = v4;
  if (!gRunningPurpleTest)
  {
    if (self->_speculativeLoadDocument == v4)
    {
      -[BrowserController cancelSpeculativeLoad](self, "cancelSpeculativeLoad");
    }
    else
    {
      if (!-[BrowserController isContinuousReadingDocument:](self, "isContinuousReadingDocument:", v4))
      {
        v6 = !-[BrowserController isControlledByAutomation](self, "isControlledByAutomation");
        goto LABEL_8;
      }
      -[BrowserController clearDocumentForContinuousReading:](self, "clearDocumentForContinuousReading:", v5);
    }
  }
  LOBYTE(v6) = 0;
LABEL_8:

  return v6;
}

- (BOOL)tabDocumentCanShowJavaScriptAlertConfirmOrTextInput:(id)a3
{
  TabDocument *v4;
  TabDocument *v5;
  BOOL v6;

  v4 = (TabDocument *)a3;
  v5 = v4;
  if (!gRunningPurpleTest)
  {
    if (self->_speculativeLoadDocument == v4)
    {
      -[BrowserController cancelSpeculativeLoad](self, "cancelSpeculativeLoad");
    }
    else
    {
      if (!-[BrowserController isContinuousReadingDocument:](self, "isContinuousReadingDocument:", v4))
      {
        v6 = 1;
        goto LABEL_3;
      }
      -[BrowserController clearDocumentForContinuousReading:](self, "clearDocumentForContinuousReading:", v5);
    }
  }
  v6 = 0;
LABEL_3:

  return v6;
}

- (void)tabDocumentDidAddAlert:(id)a3
{
  TabDocument *v4;
  TabDocument *v5;

  v4 = (TabDocument *)a3;
  v5 = v4;
  if (self->_speculativeLoadDocument == v4)
  {
    -[BrowserController cancelSpeculativeLoad](self, "cancelSpeculativeLoad");
  }
  else if (-[BrowserController isContinuousReadingDocument:](self, "isContinuousReadingDocument:", v4))
  {
    -[BrowserController clearDocumentForContinuousReading:](self, "clearDocumentForContinuousReading:", v5);
  }

}

- (void)tabDocument:(id)a3 didDetectReaderAvailability:(BOOL)a4
{
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  if (-[BrowserController _canUpdateInterfaceWithTabDocument:]((uint64_t)self, v8))
    -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, 1);
  if (a4)
  {
    if (-[BrowserController isContinuousReadingDocument:](self, "isContinuousReadingDocument:", v8)
      && -[BrowserController readerShouldBeShownIfPossible](self, "readerShouldBeShownIfPossible"))
    {
      objc_msgSend(v8, "createBrowserReaderViewIfNeeded");
      -[BrowserController _setContinuousReadingContentViewFromTabDocument:useReaderView:]((id *)&self->super.super.super.isa, v8, 1);
    }
  }
  else
  {
    objc_msgSend(v8, "contextController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "URL");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "contextForPageURL:content:contentType:metadata:isPrivate:isReaderAvailable:withCompletionHandler:", v7, 0, 0, 0, objc_msgSend(v8, "isPrivateBrowsingEnabled"), 0, 0);

  }
}

- (void)tabDocumentDidChangeMediaState:(id)a3 needsUpdateGlobalAudioState:(BOOL)a4
{
  id WeakRetained;
  id v6;

  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browserController:tabDocumentDidChangeMediaState:", self, v6);
  if (-[BrowserController _canUpdateInterfaceWithTabDocument:]((uint64_t)self, v6))
    -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, 0);

}

- (void)tabDocumentDidUpdateTabCollectionItem:(id)a3
{
  id v3;

  -[BrowserRootViewController tabSwitcherViewController](self->_rootViewController, "tabSwitcherViewController", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setNeedsApplyContentAnimated:", 1);

}

- (void)tabDocumentDidUpdateIsScribbling:(id)a3
{
  id v4;

  v4 = a3;
  if (-[BrowserController _canUpdateInterfaceWithTabDocument:]((uint64_t)self, v4))
    -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, 1);

}

- (void)tabDocument:(id)a3 didExtractArticleText:(id)a4 withMetadata:(id)a5
{
  id v8;
  id v9;
  void *v10;
  id v11;

  v11 = a3;
  v8 = a4;
  v9 = a5;
  -[BrowserController _requestQueryResultsOnTabDocument:forText:contentType:pageMetadata:](self, v11, v8, 1, v9);
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", v11);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _updateDigitalHealthOverlayForTabDocuments:](self, v10);

}

- (void)_requestQueryResultsOnTabDocument:(void *)a3 forText:(uint64_t)a4 contentType:(void *)a5 pageMetadata:
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  id v17;
  id location;

  v9 = a2;
  v10 = a3;
  v11 = a5;
  if (a1)
  {
    objc_msgSend(v9, "contextController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "invalidateCachedResults");
    objc_initWeak(&location, a1);
    objc_msgSend(v9, "URL");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v9, "isPrivateBrowsingEnabled");
    v15 = objc_msgSend(v9, "isReaderAvailable");
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __88__BrowserController__requestQueryResultsOnTabDocument_forText_contentType_pageMetadata___block_invoke;
    v16[3] = &unk_1E9CF4110;
    objc_copyWeak(&v17, &location);
    objc_msgSend(v12, "contextForPageURL:content:contentType:metadata:isPrivate:isReaderAvailable:withCompletionHandler:", v13, v10, a4, v11, v14, v15, v16);

    objc_destroyWeak(&v17);
    objc_destroyWeak(&location);

  }
}

- (void)filteredArticleTextDidBecomeReadyInTabDocument:(id)a3
{
  -[BrowserController _extractTextFromReaderWebViewOfTab:]((uint64_t)self, a3);
}

- (void)_extractTextFromReaderWebViewOfTab:(uint64_t)a1
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    objc_msgSend(v3, "readerWebView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __56__BrowserController__extractTextFromReaderWebViewOfTab___block_invoke;
    v6[3] = &unk_1E9CF3738;
    v6[4] = a1;
    v7 = v4;
    objc_msgSend(v5, "_getContentsAsStringWithCompletionHandler:", v6);

  }
}

void __56__BrowserController__extractTextFromReaderWebViewOfTab___block_invoke(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  int *v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    -[BrowserController _stringByRemovingContentBetweenZeroWidthSpacesForText:](*(_QWORD *)(a1 + 32), v5);
    v7 = objc_claimAutoreleasedReturnValue();
    if (-[NSObject length](v7, "length"))
      v8 = v7;
    else
      v8 = v5;
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 768), v8);
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isEqualToString:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 592));

    if (v11)
    {
      -[BrowserController _siriReadThisVocalInvocation](*(id **)(a1 + 32));
      v12 = &OBJC_IVAR___BrowserController__tabUUIDStringForSiriReadThisVocalInvocation;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "UUIDString");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "isEqualToString:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 600));

      if (!v15)
        goto LABEL_13;
      -[BrowserController _siriReadThisMenuInvocation](*(id **)(a1 + 32));
      v12 = &OBJC_IVAR___BrowserController__tabUUIDStringForSiriReadThisMenuInvocation;
    }
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *v12;
    v18 = *(void **)(v16 + v17);
    *(_QWORD *)(v16 + v17) = 0;

    goto LABEL_13;
  }
  v7 = (id)WBS_LOG_CHANNEL_PREFIXSiriReadThis();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(v6, "safari_privacyPreservingDescription");
    objc_claimAutoreleasedReturnValue();
    __56__BrowserController__extractTextFromReaderWebViewOfTab___block_invoke_cold_1();
  }
LABEL_13:

}

- (id)_stringByRemovingContentBetweenZeroWidthSpacesForText:(uint64_t)a1
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v9[5];

  v9[4] = *(id *)MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    v9[0] = 0;
    objc_msgSend(MEMORY[0x1E0CB38E8], "regularExpressionWithPattern:options:error:", CFSTR("\\u200B.*?\\u200B"), 8, v9);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v9[0];
    if (v5)
    {
      v6 = (id)WBS_LOG_CHANNEL_PREFIXSiriReadThis();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v5, "safari_privacyPreservingDescription");
        objc_claimAutoreleasedReturnValue();
        -[BrowserController _stringByRemovingContentBetweenZeroWidthSpacesForText:].cold.1();
      }

      v7 = 0;
    }
    else
    {
      objc_msgSend(v4, "stringByReplacingMatchesInString:options:range:withTemplate:", v3, 0, 0, objc_msgSend(v3, "length"), &stru_1E9CFDBB0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (void)_siriReadThisVocalInvocation
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *This;
  id v22;
  void *v23;
  _QWORD aBlock[4];
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  __int128 *p_buf;
  id v31;
  id location;
  __int128 buf;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  objc_msgSend(a1[43], "activeTabDocument");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "readerContext");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D4ED58], "sharedVoiceUtilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "activeSiriReaderSessionIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0D4ED58], "sharedVoiceUtilities");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "activeSiriReaderSessionURL");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "readerURL");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = WBSIsEqual();

    if ((v8 & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0D4ED58], "sharedVoiceUtilities");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "activeSiriReaderSessionIdentifier");
      v10 = objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    }
  }
  else
  {

  }
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "UUIDString");
  v10 = objc_claimAutoreleasedReturnValue();
LABEL_7:
  v11 = (void *)v10;

  v22 = objc_alloc_init((Class)getSiriReaderConnectionClass());
  v12 = objc_msgSend(a1, "siriReaderPlaybackStateForActiveTab");
  objc_msgSend(v2, "webView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "title");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12 <= 3 && v12 != 1)
  {
    objc_msgSend(MEMORY[0x1E0D4ED50], "sharedPlaybackController");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setDelegate:", a1);

    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v34 = 0x3032000000;
    v35 = __Block_byref_object_copy__3;
    v36 = __Block_byref_object_dispose__3;
    v37 = 0;
    v16 = objc_alloc_init(MEMORY[0x1E0CC11E0]);
    objc_initWeak(&location, a1);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __49__BrowserController__siriReadThisVocalInvocation__block_invoke;
    aBlock[3] = &unk_1E9CF4388;
    objc_copyWeak(&v31, &location);
    p_buf = &buf;
    v25 = v22;
    v26 = v14;
    v17 = v11;
    v27 = v17;
    v28 = v23;
    v29 = v2;
    v18 = _Block_copy(aBlock);
    objc_msgSend(v13, "URL");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "startFetchingMetadataForURL:completionHandler:", v19, v18);

    objc_msgSend(a1[43], "activeTabDocument");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setLastSiriReaderSessionIdentifier:", v17);

    objc_destroyWeak(&v31);
    objc_destroyWeak(&location);

    _Block_object_dispose(&buf, 8);
  }
  This = WBS_LOG_CHANNEL_PREFIXSiriReadThis();
  if (os_log_type_enabled(This, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v11;
    _os_log_impl(&dword_1D7CA3000, This, OS_LOG_TYPE_INFO, "Data identifier: %@", (uint8_t *)&buf, 0xCu);
  }

}

- (void)_siriReadThisMenuInvocation
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_4_1(v1, v2, 5.7779e-34);
  OUTLINED_FUNCTION_10_0(&dword_1D7CA3000, v3, v4, "Current URL: %@ ", v5);

  OUTLINED_FUNCTION_3_0();
}

void __88__BrowserController__requestQueryResultsOnTabDocument_forText_contentType_pageMetadata___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __88__BrowserController__requestQueryResultsOnTabDocument_forText_contentType_pageMetadata___block_invoke_2;
  v5[3] = &unk_1E9CF3D60;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  v6 = v3;
  v4 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], v5);

  objc_destroyWeak(&v7);
}

void __88__BrowserController__requestQueryResultsOnTabDocument_forText_contentType_pageMetadata___block_invoke_2(uint64_t a1)
{
  id *WeakRetained;
  void *v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    -[BrowserController _catalogViewController](WeakRetained);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "updateQuerySuggestionsFromResponse:", *(_QWORD *)(a1 + 32));

    WeakRetained = v4;
  }

}

- (void)tabDocument:(id)a3 didCreateNewTabDocument:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  v6 = a4;
  objc_msgSend(v6, "updateAncestryWithParentTab:", v11);
  -[TabController insertNewTabDocumentWithDefaultOrdering:inBackground:animated:](self->_tabController, "insertNewTabDocumentWithDefaultOrdering:inBackground:animated:", v6, 0, 1);
  objc_msgSend(v11, "trackerInfo");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "queryParameterFilteringDataQueue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "trackerInfo");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "queryParameterFilteringDataQueue");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "transferPendingDataToQueue:", v10);

}

- (void)tabDocumentShouldCloseAndSwitchToParentTab:(id)a3
{
  id v4;
  TabController *tabController;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  tabController = self->_tabController;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __64__BrowserController_tabDocumentShouldCloseAndSwitchToParentTab___block_invoke;
  v7[3] = &unk_1E9CF3358;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  -[TabController performBatchUpdatesWithBlock:](tabController, "performBatchUpdatesWithBlock:", v7);

}

void __64__BrowserController_tabDocumentShouldCloseAndSwitchToParentTab___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 344);
  objc_msgSend(*(id *)(a1 + 40), "parentTabDocumentForBackClosesSpawnedTab");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setActiveTabDocument:animated:", v3, 0);

  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 344);
  v6[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "closeTabs:animated:allowAddingToRecentlyClosedTabs:showAutoCloseTabsAlert:", v5, 1, 0, 0);

}

- (unint64_t)popUpPolicyForTabDocument:(id)a3
{
  TabDocument *v4;
  void *v5;
  char v6;
  unint64_t v7;

  v4 = (TabDocument *)a3;
  +[Application sharedApplication](Application, "sharedApplication");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isRunningCanvasTest");

  if ((v6 & 1) != 0)
  {
    v7 = 1;
  }
  else if (self->_speculativeLoadDocument == v4)
  {
    -[BrowserController cancelSpeculativeLoad](self, "cancelSpeculativeLoad");
    v7 = 2;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (void)_invalidatePreviewDocumentCloseTimer
{
  void *v2;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 208), "invalidate");
    v2 = *(void **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = 0;

  }
}

- (void)_closePreviewDocumentTimerFired:(id)a3
{
  id v4;

  v4 = a3;
  if (!self->_previewDocument
    || !-[TabController createTabGroupAlertIsPresented](self->_tabController, "createTabGroupAlertIsPresented"))
  {
    -[BrowserController closePreviewDocument](self, "closePreviewDocument");
  }

}

- (void)closePreviewDocument
{
  TabDocument *previewDocument;
  void *v4;
  void *v5;
  TabDocument *v6;
  void *v7;
  void *v8;

  previewDocument = self->_previewDocument;
  if (previewDocument)
  {
    -[TabDocument webView](previewDocument, "webView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "window");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      -[TabDocument willClose](self->_previewDocument, "willClose");
      v6 = self->_previewDocument;
      self->_previewDocument = 0;

      objc_storeWeak((id *)&self->_backForwardListItemNeedingSnapshot, 0);
      +[History sharedHistory](History, "sharedHistory");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "cancelDeferredUpdates");

      if (-[NSTimer isValid](self->_previewDocumentCloseTimer, "isValid"))
      {
        -[NSTimer userInfo](self->_previewDocumentCloseTimer, "userInfo");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "updateUsageTrackingInformationAfterLinkPreviewDismissal");

      }
      -[BrowserController _invalidatePreviewDocumentCloseTimer]((uint64_t)self);
    }
  }
}

- (void)tabDocument:(id)a3 didCreatePreviewDocument:(id)a4
{
  id v6;
  TabDocument *v7;
  id *p_previewDocument;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  int v13;
  TabDocument *v14;
  __int16 v15;
  id v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (TabDocument *)a4;
  p_previewDocument = (id *)&self->_previewDocument;
  if (self->_previewDocument != v7)
  {
    v9 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *p_previewDocument;
      v13 = 138740483;
      v14 = v7;
      v15 = 2117;
      v16 = v6;
      v17 = 2117;
      v18 = v10;
      _os_log_impl(&dword_1D7CA3000, v9, OS_LOG_TYPE_DEFAULT, "Creating link preview %{sensitive}@ from source tab %{sensitive}@. Previous link preview: %{sensitive}@", (uint8_t *)&v13, 0x20u);
    }
    if (*p_previewDocument)
    {
      objc_msgSend(*p_previewDocument, "willClose");
      -[BrowserController _invalidatePreviewDocumentCloseTimer]((uint64_t)self);
    }
    objc_storeStrong((id *)&self->_previewDocument, a4);
    objc_msgSend(*p_previewDocument, "_backForwardList");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "currentItem");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak((id *)&self->_backForwardListItemNeedingSnapshot, v12);

  }
}

- (void)tabDocumentCommitPreviewedDocument:(id)a3
{
  id v4;
  NSObject *v5;
  TabDocument *previewDocument;
  void *v7;
  void *v8;
  TabDocument *v9;
  TabController *tabController;
  void *v11;
  NSObject *v12;
  TabDocument *v13;
  void *v14;
  void *v15;
  int v16;
  TabDocument *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    previewDocument = self->_previewDocument;
    v16 = 134218240;
    v17 = previewDocument;
    v18 = 2048;
    v19 = v4;
    _os_log_impl(&dword_1D7CA3000, v5, OS_LOG_TYPE_DEFAULT, "Committing link preview %p to load in source tab %p", (uint8_t *)&v16, 0x16u);
  }
  -[BrowserController tabController](self, "tabController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "activeTabDocument");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = self->_previewDocument;
  if (v9)
  {
    tabController = self->_tabController;
    -[TabDocument URL](v9, "URL");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(tabController) = -[TabController trySwitchingToPinnedTabOnNavigationToURL:](tabController, "trySwitchingToPinnedTabOnNavigationToURL:", v11);

    if ((_DWORD)tabController)
    {
      -[BrowserController closePreviewDocument](self, "closePreviewDocument");
    }
    else
    {
      if ((-[BrowserController _spawnNewTabFromPinnedTabIfNeededForSpeculativeDocument:]((uint64_t)self, self->_previewDocument) & 1) == 0)
      {
        -[BrowserController _commitToSpeculativeLoadForDocument:]((id *)&self->super.super.super.isa, self->_previewDocument);
        objc_msgSend(v8, "willClose");
      }
      v13 = self->_previewDocument;
      self->_previewDocument = 0;

      -[BrowserController _invalidatePreviewDocumentCloseTimer]((uint64_t)self);
      objc_msgSend(v4, "history");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "commitDeferredUpdates");

      -[BrowserController webView](self, "webView");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController _updateScrollOffsetForReplacementWebView:]((id *)&self->super.super.super.isa, v15);

    }
  }
  else
  {
    v12 = WBS_LOG_CHANNEL_PREFIXTabs();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      -[BrowserController tabDocumentCommitPreviewedDocument:].cold.1();
  }

}

- (void)tabDocumentCommitPreviewedDocumentAsNewTab:(id)a3 inBackground:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  TabDocument *v7;
  NSObject *v8;
  id WeakRetained;
  TabDocument *previewDocument;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  int v17;
  TabDocument *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v4 = a4;
  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = self->_previewDocument;
  v8 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v17 = 134218240;
    v18 = v7;
    v19 = 2048;
    v20 = v6;
    _os_log_impl(&dword_1D7CA3000, v8, OS_LOG_TYPE_DEFAULT, "Committing link preview %p in new tab from source tab %p", (uint8_t *)&v17, 0x16u);
  }
  if (v7)
  {
    if (v4)
    {
      WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(WeakRetained, "browserControllerWillCreateBackgroundTab:", self);

    }
    previewDocument = self->_previewDocument;
    self->_previewDocument = 0;

    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[TabDocument updateAncestryWithParentTab:](v7, "updateAncestryWithParentTab:", v11);

    -[TabController insertNewTabDocumentWithDefaultOrdering:inBackground:animated:](self->_tabController, "insertNewTabDocumentWithDefaultOrdering:inBackground:animated:", v7, v4, 1);
    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "didOpenNewTabWithURLWithTrigger:tabCollectionViewType:", 1, -[TabCollectionViewProviding visibleTabCollectionViewType](self->_tabCollectionViewProvider, "visibleTabCollectionViewType"));

    if (v4)
    {
      -[TabDocument webView](v7, "webView");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController updateInsetsForBackgroundWebView:](self, "updateInsetsForBackgroundWebView:", v13);

    }
    objc_msgSend(v6, "history");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "commitDeferredUpdates");

    -[TabDocument webView](v7, "webView");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController _updateScrollOffsetForReplacementWebView:]((id *)&self->super.super.super.isa, v15);

  }
  else
  {
    v16 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      -[BrowserController tabDocumentCommitPreviewedDocumentAsNewTab:inBackground:].cold.1(v4, (uint64_t)v6, v16);
  }

}

- (void)tabDocumentDidDimissPreviewedDocument:(id)a3
{
  id v4;
  NSObject *v5;
  TabDocument *previewDocument;
  NSTimer *v7;
  NSTimer *previewDocumentCloseTimer;
  int v9;
  TabDocument *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    previewDocument = self->_previewDocument;
    v9 = 134218240;
    v10 = previewDocument;
    v11 = 2048;
    v12 = v4;
    _os_log_impl(&dword_1D7CA3000, v5, OS_LOG_TYPE_DEFAULT, "Dismissing link preview %p from source tab %p", (uint8_t *)&v9, 0x16u);
  }
  -[BrowserController _invalidatePreviewDocumentCloseTimer]((uint64_t)self);
  objc_msgSend(MEMORY[0x1E0C99E88], "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", self, sel__closePreviewDocumentTimerFired_, v4, 0, 0.0);
  v7 = (NSTimer *)objc_claimAutoreleasedReturnValue();
  previewDocumentCloseTimer = self->_previewDocumentCloseTimer;
  self->_previewDocumentCloseTimer = v7;

}

- (void)tabDocumentWillDisableLinkPreview
{
  TabDocument *previewDocument;

  -[TabDocument willClose](self->_previewDocument, "willClose");
  previewDocument = self->_previewDocument;
  self->_previewDocument = 0;

}

- (BOOL)tabDocumentCanDisplayModalUI:(id)a3
{
  id v4;
  void *v5;
  char v6;
  _BOOL4 v7;
  id v8;
  id v9;
  uint64_t v10;

  v4 = a3;
  if (!objc_msgSend(v4, "isPrivateBrowsingEnabled")
    || (+[Application sharedApplication](Application, "sharedApplication"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "isPrivateBrowsingLocked"),
        v5,
        (v6 & 1) == 0))
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (v8 != v4)
    {
      LOBYTE(v7) = 0;
LABEL_12:

      goto LABEL_13;
    }
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "presentationState") == 1)
    {

    }
    else
    {
      v10 = objc_msgSend(v9, "presentationState");

      if (v10 != 2)
      {
        v7 = !-[BrowserController isShowingFavorites](self, "isShowingFavorites");
        goto LABEL_11;
      }
    }
    LOBYTE(v7) = 0;
LABEL_11:

    goto LABEL_12;
  }
  LOBYTE(v7) = 0;
LABEL_13:

  return v7;
}

- (BOOL)tabDocumentCanBeginInputSessionForStreamlinedLogin:(id)a3
{
  id v4;
  id v5;
  int v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v11;

  v4 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (v5 == v4)
  {
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "presentationState") == 1)
    {
      LOBYTE(v6) = 0;
      v8 = v7;
    }
    else
    {
      v9 = objc_msgSend(v7, "presentationState");

      if (v9 == 2 || -[BrowserController isShowingFavorites](self, "isShowingFavorites"))
      {
        LOBYTE(v6) = 0;
        goto LABEL_9;
      }
      -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "presentedViewController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (v11)
        LOBYTE(v6) = 0;
      else
        v6 = objc_msgSend(v4, "shouldObscureForDigitalHealth") ^ 1;

    }
LABEL_9:

    goto LABEL_10;
  }
  LOBYTE(v6) = 0;
LABEL_10:

  return v6;
}

- (void)tabController:(id)a3 didSwitchFromTabGroup:(id)a4
{
  -[BrowserController _updateTabGroupBanner]((id *)&self->super.super.super.isa);
  -[BrowserController updateTabOverviewButton](self, "updateTabOverviewButton");
  -[BrowserController clearParticipantsList](self, "clearParticipantsList");
  -[BrowserController updateCollaborationButton](self, "updateCollaborationButton");
  -[BrowserController dismissAutoFillInternalFeedbackToastImmediately:](self, "dismissAutoFillInternalFeedbackToastImmediately:", 1);
}

- (void)tabDocumentShouldBecomeActive:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  _BOOL4 v9;
  uint64_t v10;
  int v12;
  id v13;

  v13 = a3;
  if (objc_msgSend((id)*MEMORY[0x1E0DC4730], "supportsMultipleScenes"))
  {
    v4 = objc_alloc_init(MEMORY[0x1E0DC3BD0]);
    objc_msgSend(v4, "setPreserveLayout:", 1);
    objc_msgSend(MEMORY[0x1E0DC3470], "sharedApplication");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController _sceneSession](self);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "requestSceneSessionActivation:userActivity:options:errorHandler:", v6, 0, v4, &__block_literal_global_808);

  }
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v7 = (id)objc_claimAutoreleasedReturnValue();

  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "presentationState") == 1)
  {

    v9 = 1;
  }
  else
  {
    v10 = objc_msgSend(v8, "presentationState");
    v9 = v10 == 2;

    if (v7 == v13 && v10 != 2)
      goto LABEL_16;
  }
  v12 = objc_msgSend(v13, "isPrivateBrowsingEnabled");
  if (v12 != -[BrowserController isPrivateBrowsingEnabled](self, "isPrivateBrowsingEnabled"))
    -[BrowserController togglePrivateBrowsingEnabled](self, "togglePrivateBrowsingEnabled");
  if (v7 != v13)
    -[TabController setActiveTabDocument:](self->_tabController, "setActiveTabDocument:", v13);
  if (v9)
    objc_msgSend(v8, "dismissAnimated:", 0);
LABEL_16:

}

void __51__BrowserController_tabDocumentShouldBecomeActive___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  v3 = (id)WBS_LOG_CHANNEL_PREFIXMediaCapture();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(v2, "safari_privacyPreservingDescription");
    objc_claimAutoreleasedReturnValue();
    __51__BrowserController_tabDocumentShouldBecomeActive___block_invoke_cold_1();
  }

}

- (id)loadURLInNewTab:(id)a3 inBackground:(BOOL)a4
{
  -[BrowserController loadURLInNewTab:inBackground:animated:](self, "loadURLInNewTab:inBackground:animated:", a3, a4, 1);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)loadURLInNewTab:(id)a3 inBackground:(BOOL)a4 animated:(BOOL)a5
{
  -[BrowserController loadURLInNewTab:title:UUID:inBackground:animated:restoringCloudTab:](self, "loadURLInNewTab:title:UUID:inBackground:animated:restoringCloudTab:", a3, 0, 0, a4, a5, 0);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)loadURLInNewTab:(id)a3 title:(id)a4 UUID:(id)a5 inBackground:(BOOL)a6 animated:(BOOL)a7 restoringCloudTab:(BOOL)a8
{
  _BOOL8 v9;
  _BOOL8 v10;
  id v14;
  void *v15;
  TabDocument *v16;
  TabDocument *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v29;
  id v30;

  v9 = a7;
  v10 = a6;
  v14 = a3;
  v30 = a4;
  v29 = a5;
  if (!-[TabController updatingTabGroupTabs](self->_tabController, "updatingTabGroupTabs"))
    -[BrowserController dismissTransientUIAnimated:](self, "dismissTransientUIAnimated:", v9);
  if (a8)
  {
    v15 = 0;
    v16 = -[TabDocument initWithTitle:URL:UUID:privateBrowsingEnabled:hibernated:bookmark:browserController:]([TabDocument alloc], "initWithTitle:URL:UUID:privateBrowsingEnabled:hibernated:bookmark:browserController:", v30, v14, v29, -[BrowserController isPrivateBrowsingEnabled](self, "isPrivateBrowsingEnabled"), 1, 0, self);
  }
  else
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = -[TabDocument initWithBrowserController:]([TabDocument alloc], "initWithBrowserController:", self);
  }
  v17 = v16;
  -[TabDocument updateAncestryWithParentTab:](v16, "updateAncestryWithParentTab:", v15);
  -[TabDocument setParentTabDocumentForBackClosesSpawnedTab:](v17, "setParentTabDocumentForBackClosesSpawnedTab:", v15);
  -[TabController insertNewTabDocumentWithDefaultOrdering:inBackground:animated:](self->_tabController, "insertNewTabDocumentWithDefaultOrdering:inBackground:animated:", v17, v10, v9);
  v18 = -[TabDocument supportsAdvancedPrivacyProtectionsForURL:](v17, "supportsAdvancedPrivacyProtectionsForURL:", v14);
  -[TabDocument reloadOptionsController](v17, "reloadOptionsController");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setSupportsAdvancedPrivacyProtections:", v18);

  objc_msgSend(v15, "trackerInfo");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "queryParameterFilteringDataQueue");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabDocument trackerInfo](v17, "trackerInfo");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "queryParameterFilteringDataQueue");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "transferPendingDataToQueue:", v23);

  objc_msgSend(v15, "reloadOptionsController");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v23) = objc_msgSend(v24, "loadedUsingDesktopUserAgent");

  if ((_DWORD)v23)
  {
    -[TabDocument reloadOptionsController](v17, "reloadOptionsController");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "requestDesktopSiteWithURL:", v14);

  }
  else
  {
    v26 = -[TabDocument loadURL:userDriven:](v17, "loadURL:userDriven:", v14, 1);
  }
  -[TabDocument setTabReuseURL:](v17, "setTabReuseURL:", v14);
  -[TabDocument setWasOpenedFromLink:](v17, "setWasOpenedFromLink:", v9 && ~v10);
  if (-[TabCollectionViewProviding hasTabBar](self->_tabCollectionViewProvider, "hasTabBar"))
  {
    -[BrowserController showBars](self, "showBars");
    -[TabCollectionViewProviding updateTabBarAnimated:](self->_tabCollectionViewProvider, "updateTabBarAnimated:", 1);
  }
  if (v10)
  {
    -[TabDocument webView](v17, "webView");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController updateInsetsForBackgroundWebView:](self, "updateInsetsForBackgroundWebView:", v27);

  }
  return v17;
}

- (void)loadCloudTabsForDeviceRestoration:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  WBTabGroupManager *tabGroupManager;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (id)WBS_LOG_CHANNEL_PREFIXCloudTabs();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v19 = objc_msgSend(v4, "count");
    _os_log_impl(&dword_1D7CA3000, v5, OS_LOG_TYPE_DEFAULT, "Loading %zu CloudTabs for device restoration", buf, 0xCu);
  }

  -[BrowserController _dismissTransientUIAnimated:dismissalOptions:completionHandler:]((uint64_t)self, 1, 3, 0);
  -[WBTabGroupManager deviceIdentifier](self->_tabGroupManager, "deviceIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __55__BrowserController_loadCloudTabsForDeviceRestoration___block_invoke;
  v16[3] = &unk_1E9CF4158;
  v8 = v6;
  v17 = v8;
  objc_msgSend(v4, "safari_mapObjectsUsingBlock:", v16);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  tabGroupManager = self->_tabGroupManager;
  -[WBWindowState localTabGroup](self->_windowState, "localTabGroup");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v7;
  v14[1] = 3221225472;
  v14[2] = __55__BrowserController_loadCloudTabsForDeviceRestoration___block_invoke_2;
  v14[3] = &unk_1E9CF4180;
  v13 = v9;
  v15 = v13;
  -[WBTabGroupManager updateTabsInTabGroupWithUUID:persist:usingBlock:](tabGroupManager, "updateTabsInTabGroupWithUUID:persist:usingBlock:", v12, 1, v14);

}

id __55__BrowserController_loadCloudTabsForDeviceRestoration___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = objc_alloc(MEMORY[0x1E0DCCB30]);
  objc_msgSend(v3, "title");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "url");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v4, "initWithTitle:url:deviceIdentifier:", v5, v6, *(_QWORD *)(a1 + 32));

  return v7;
}

uint64_t __55__BrowserController_loadCloudTabsForDeviceRestoration___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "appendTabs:", *(_QWORD *)(a1 + 32));
}

- (void)tabDocumentDidCompleteCheckForAppBanner:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  if (-[BrowserController _canUpdateInterfaceWithTabDocument:]((uint64_t)self, v6))
  {
    objc_msgSend(v6, "appBanner");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      objc_msgSend(v6, "appBanner");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController _setShowingAppBanner:isShowing:]((uint64_t)self, v5, 1);

    }
  }

}

- (BOOL)tabDocumentShouldDeferAppBannerRemoval:(id)a3
{
  void *v3;
  char v4;

  -[BrowserRootViewController refreshControl](self->_rootViewController, "refreshControl", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isRefreshing");

  return v4;
}

- (void)removeAppBannerFromTabDocument:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  void *v6;
  id v7;

  v4 = a4;
  v7 = a3;
  objc_msgSend(v7, "appBanner");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setAppBanner:", 0);
  objc_msgSend(v7, "setAppBannerRemovalWasDeferred:", 0);
  if ((-[BrowserController _setShowingOverlayForBanner:showing:]((uint64_t)self, v6, 0) & 1) == 0)
    -[BannerController setAppBanner:animated:](self->_bannerController, "setAppBanner:animated:", 0, v4);

}

- (void)setAppBannerPinnedToTop:(BOOL)a3 forTabDocument:(id)a4
{
  int v4;
  id v6;
  void *v7;
  int v8;
  void *v9;
  double v10;
  dispatch_time_t v11;
  id v12;
  _QWORD block[4];
  id v14;
  BrowserController *v15;
  char v16;

  v4 = a3;
  v6 = a4;
  objc_msgSend(v6, "appBanner");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isPinnedToTop");

  if (v8 != v4)
  {
    objc_msgSend(v6, "appBanner");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
      objc_msgSend((id)objc_opt_class(), "pinAnimationDelay");
    else
      objc_msgSend((id)objc_opt_class(), "unpinAnimationDelay");
    v11 = dispatch_time(0, (uint64_t)(v10 * 1000000000.0));
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __60__BrowserController_setAppBannerPinnedToTop_forTabDocument___block_invoke;
    block[3] = &unk_1E9CF3550;
    v16 = v4;
    v14 = v9;
    v15 = self;
    v12 = v9;
    dispatch_after(v11, MEMORY[0x1E0C80D38], block);

  }
}

void __60__BrowserController_setAppBannerPinnedToTop_forTabDocument___block_invoke(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  id v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  char v10;

  v2 = (void *)MEMORY[0x1E0DC3F10];
  objc_msgSend((id)objc_opt_class(), "unpinAnimationDuration");
  v4 = v3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __60__BrowserController_setAppBannerPinnedToTop_forTabDocument___block_invoke_2;
  v7[3] = &unk_1E9CF3550;
  v5 = *(id *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = v5;
  v9 = v6;
  objc_msgSend(v2, "animateWithDuration:delay:options:animations:completion:", 4, v7, 0, v4, 0.0);

}

void __60__BrowserController_setAppBannerPinnedToTop_forTabDocument___block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setPinnedToTop:", *(unsigned __int8 *)(a1 + 48));
  -[BrowserController _updateAppInfoOverlayFrame](*(_QWORD *)(a1 + 40));
  -[BrowserController _updateNavigationBarSeparator](*(_QWORD *)(a1 + 40));
}

- (void)tabDocumentWillEndNavigationGesture:(id)a3 withNavigationToBackForwardListItem:(id)a4
{
  -[BrowserController _navigationGestureWillEndWithNavigationToBackForwardListItem:]((uint64_t)self, a4);
}

- (void)tabDocumentDidEndNavigationGesture:(id)a3 withNavigationToBackForwardListItem:(id)a4
{
  -[BrowserController _navigationGestureDidEndWithNavigation:]((uint64_t)self, a4 != 0);
}

- (void)tabDocumentWillShowInlineDialog:(id)a3
{
  id v4;
  id v5;

  v5 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  if (v4 == v5)
  {
    -[BrowserController setFavoritesAreEmbedded:animated:](self, "setFavoritesAreEmbedded:animated:", 0, 1);
    -[BrowserController showBars](self, "showBars");
  }

}

- (void)tabDocumentWillDismissInlineDialog:(id)a3
{
  id v4;
  id v5;

  v5 = a3;
  if (objc_msgSend(v5, "isShowingSystemStartPage"))
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v4 = (id)objc_claimAutoreleasedReturnValue();

    if (v4 == v5)
      -[BrowserController setFavoritesAreEmbedded:animated:](self, "setFavoritesAreEmbedded:animated:", 1, 1);
  }

}

- (void)tabDocument:(id)a3 didClearLibraryType:(id)a4
{
  id v6;
  void *v7;
  id v8;

  v8 = a3;
  v6 = a4;
  -[LibraryController sidebarViewController](self->_libraryController, "sidebarViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setPresentedItemController:", 0);

  -[TabController openTab:navigatedFromLibraryType:](self->_tabController, "openTab:navigatedFromLibraryType:", v8, v6);
}

- (void)tabDocument:(id)a3 presentViewControllerAnimated:(id)a4
{
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  id v10;
  id v11;
  _BOOL4 v12;
  NSMapTable *viewControllersPendingPresentation;
  void *v14;
  _BOOL4 v15;
  NSMapTable *v16;
  NSMapTable *v17;
  id WeakRetained;
  _BOOL4 v19;
  void *v20;
  _QWORD v21[5];
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "presentingViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = (id)WBS_LOG_CHANNEL_PREFIXUserInteraction();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v7, "presentingViewController");
      objc_claimAutoreleasedReturnValue();
      -[BrowserController tabDocument:presentViewControllerAnimated:].cold.1();
    }

  }
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  if (v10 != v6)
    goto LABEL_10;
  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v11, "presentationState") == 1)
  {

LABEL_9:
    v10 = v6;
LABEL_10:

    goto LABEL_11;
  }
  v12 = objc_msgSend(v11, "presentationState") == 2;

  if (v12)
    goto LABEL_9;
  WeakRetained = objc_loadWeakRetained((id *)&self->_viewControllerToDismissWhileBeingPresented);
  v19 = WeakRetained == 0;

  if (v19)
  {
    -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __63__BrowserController_tabDocument_presentViewControllerAnimated___block_invoke;
    v21[3] = &unk_1E9CF3358;
    v21[4] = self;
    v22 = v7;
    objc_msgSend(v20, "presentViewController:animated:completion:", v22, 1, v21);

    goto LABEL_16;
  }
LABEL_11:
  viewControllersPendingPresentation = self->_viewControllersPendingPresentation;
  if (!viewControllersPendingPresentation)
  {
    objc_msgSend(MEMORY[0x1E0CB3748], "weakToStrongObjectsMapTable");
    v16 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
    v17 = self->_viewControllersPendingPresentation;
    self->_viewControllersPendingPresentation = v16;

LABEL_15:
    -[NSMapTable setObject:forKey:](self->_viewControllersPendingPresentation, "setObject:forKey:", v7, v6);
    goto LABEL_16;
  }
  -[NSMapTable objectForKey:](viewControllersPendingPresentation, "objectForKey:", v6);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14 == 0;

  if (v15)
    goto LABEL_15;
LABEL_16:

}

void __63__BrowserController_tabDocument_presentViewControllerAnimated___block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 400));
  v3 = *(id *)(a1 + 40);

  if (WeakRetained == v3)
  {
    objc_msgSend(*(id *)(a1 + 40), "dismissViewControllerAnimated:completion:", 1, 0);
    objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 400), 0);
    -[BrowserController _presentPendingViewControllerForActiveTab](*(id **)(a1 + 32));
  }
}

- (void)tabDocument:(id)a3 dismissViewControllerAnimated:(id)a4
{
  id v6;
  id v7;
  void *v8;
  int v9;
  id v10;

  v10 = a3;
  v6 = a4;
  -[NSMapTable objectForKey:](self->_viewControllersPendingPresentation, "objectForKey:", v10);
  v7 = (id)objc_claimAutoreleasedReturnValue();

  if (v7 == v6)
  {
    -[NSMapTable removeObjectForKey:](self->_viewControllersPendingPresentation, "removeObjectForKey:", v10);
  }
  else
  {
    objc_msgSend(v6, "presentingViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8 && (v9 = objc_msgSend(v6, "isBeingPresented"), v8, !v9))
      objc_msgSend(v6, "dismissViewControllerAnimated:completion:", 1, 0);
    else
      objc_storeWeak((id *)&self->_viewControllerToDismissWhileBeingPresented, v6);
  }

}

- (BOOL)tabDocumentCanCloseWindow:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  BOOL v9;

  v4 = a3;
  -[TabController currentTabs](self->_tabController, "currentTabs");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "containsObject:", v4);

  if ((v6 & 1) != 0)
  {
    -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "presentedViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8 == 0;

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (void)closeTabDocument:(id)a3 animated:(BOOL)a4
{
  -[TabController closeTab:animated:](self->_tabController, "closeTab:animated:", a3, a4);
}

- (void)tabDocumentDidChangeSafeAreaShouldAffectObscuredInsets:(id)a3
{
  BOOL needsImmediateLayoutForWebViewObscuredInsetsUpdate;

  -[BrowserRootViewController updateWebViewSizeAttributes](self->_rootViewController, "updateWebViewSizeAttributes", a3);
  -[BrowserController updateExposedScrollViewRect](self, "updateExposedScrollViewRect");
  needsImmediateLayoutForWebViewObscuredInsetsUpdate = self->_needsImmediateLayoutForWebViewObscuredInsetsUpdate;
  self->_needsImmediateLayoutForWebViewObscuredInsetsUpdate = 1;
  -[BrowserController updateWebViewObscuredInsets]((uint64_t)self);
  self->_needsImmediateLayoutForWebViewObscuredInsetsUpdate = needsImmediateLayoutForWebViewObscuredInsetsUpdate;
}

- (id)pageZoomPreferenceManagerForTabDocument:(id)a3
{
  id v4;
  id WeakRetained;
  void *v6;
  void *v7;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_browserWindowController);
  if ((objc_msgSend(v4, "isPrivateBrowsingEnabled") & 1) != 0)
  {
    objc_msgSend(WeakRetained, "privateBrowsingPageZoomManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(WeakRetained, "perSitePreferencesVendor");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "pageZoomPreferenceManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

- (void)tabDocumentDidUpdateThemeColor:(id)a3
{
  -[BrowserRootViewController updateThemeColorIfNeededAnimated:](self->_rootViewController, "updateThemeColorIfNeededAnimated:", 0);
}

- (void)tabDocumentDidChangeCanStopLoadingState:(id)a3
{
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)&self->_presentedActivityViewController);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(WeakRetained, "updateReloadActivity");
  -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateVisibleContextMenu");

}

- (BOOL)tabDocumentShouldFillStringForFind:(id)a3
{
  id v4;
  _QWORD v6[5];

  v4 = objc_alloc_init(MEMORY[0x1E0D89D00]);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __56__BrowserController_tabDocumentShouldFillStringForFind___block_invoke;
  v6[3] = &unk_1E9CF31B0;
  v6[4] = self;
  objc_msgSend(v4, "setHandler:", v6);
  LOBYTE(self) = self->_shouldFillStringForFind;

  return (char)self;
}

uint64_t __56__BrowserController_tabDocumentShouldFillStringForFind___block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 337) = 0;
  return result;
}

- (BOOL)tabDocumentCanFindNextOrPrevious:(id)a3
{
  void *v3;
  BOOL v4;

  if (!-[BrowserController _showingTabDocumentWithURL]((uint64_t)self))
    return 0;
  objc_msgSend(MEMORY[0x1E0CEF630], "_stringForFind");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "length") != 0;

  return v4;
}

- (int64_t)orderIndexForTab:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  TabController *tabController;
  void *v14;
  int64_t v15;
  void *v17;
  void *v18;

  v4 = a3;
  objc_msgSend(v4, "wbTab");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "tabGroupUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    -[TabController activeTabGroupUUID](self->_tabController, "activeTabGroupUUID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (WBSIsEqual())
    {

    }
    else
    {
      -[TabController windowState](self->_tabController, "windowState");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "privateTabGroup");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = WBSIsEqual();

      if (!v11)
      {
        -[WBTabGroupManager tabGroupWithUUID:](self->_tabGroupManager, "tabGroupWithUUID:", v6);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "tabs");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "wbTab");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v17, "indexOfObject:", v18);

        goto LABEL_9;
      }
    }
  }
  v12 = objc_msgSend(v4, "isPrivateBrowsingEnabled");
  tabController = self->_tabController;
  if (v12)
    -[TabController privateTabs](tabController, "privateTabs");
  else
    -[TabController normalTabs](tabController, "normalTabs");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "indexOfObject:", v4);
LABEL_9:

  return v15;
}

- (void)_updateCurrentPageBannerViewBeforeContinuousTransition
{
  id v1;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 88), "topBannerView");
    v1 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "removeFromSuperview");

  }
}

- (id)_cachedDocumentForContinuousReadingItem:(void *)a1
{
  id v3;
  void *v4;
  void *v5;
  int v6;
  id v7;

  v3 = a2;
  if (a1)
  {
    objc_msgSend(a1, "cachedDocumentOnContinuousTransition");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "readingListBookmark");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "identifier");
    if (v6 == objc_msgSend(v4, "readingListBookmarkID"))
    {
      objc_msgSend(v4, "webView");
      v7 = (id)objc_claimAutoreleasedReturnValue();

      if (v7)
        v7 = v4;
    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (id)_tabDocumentForNextContinuousItem
{
  id *v1;

  if (a1)
  {
    v1 = a1;
    -[BrowserController _prepareTabDocumentForNextContinuousItemIfNeeded](a1);
    a1 = (id *)v1[22];
  }
  return a1;
}

- (void)_startLoadDocument:(void *)a3 continuousReadingItem:
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  v6 = v5;
  if (a1)
  {
    objc_msgSend(v5, "URL");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "readingListBookmark");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "tabController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "activeTabDocument");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "sessionState");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v12, "restoreSessionState:andNavigate:", v11, 0);
    objc_msgSend(v12, "loadURLForContinuousReadingList:fromBookmark:", v7, v8);

  }
}

- (void)loadNextContinuousDocumentIfNeeded
{
  uint64_t v2;
  void *v3;
  char v4;
  char v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  if (a1)
  {
    if ((objc_msgSend(a1[22], "isLoading") & 1) == 0 && (objc_msgSend(a1[22], "didFinishDocumentLoad") & 1) == 0)
    {
      -[BrowserController _prepareTabDocumentForNextContinuousItemIfNeeded](a1);
      objc_msgSend(a1[11], "previewView");
      v2 = objc_claimAutoreleasedReturnValue();
      if (!v2
        || (v8 = (id)v2,
            objc_msgSend(a1[11], "previewView"),
            v3 = (void *)objc_claimAutoreleasedReturnValue(),
            v4 = objc_msgSend(v3, "isPrefetchingDisabled"),
            v3,
            v8,
            (v4 & 1) == 0))
      {
        if ((objc_msgSend(a1[11], "isCommittingToContinuousDocument") & 1) != 0
          || (objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"),
              v9 = (id)objc_claimAutoreleasedReturnValue(),
              v5 = objc_msgSend(v9, "isLowPowerModeEnabled"),
              v9,
              (v5 & 1) == 0))
        {
          v6 = a1[22];
          objc_msgSend(a1, "continuousReadingController");
          v10 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "nextReadingListItem");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          -[BrowserController _startLoadDocument:continuousReadingItem:](a1, v6, v7);

        }
      }
    }
  }
}

- (void)_commitToTabDocumentForNextContinuousItem
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CFA9A8], "sharedNetworkObserver");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v4, "isNetworkReachable");

    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "didOpenReadingListItemWithReachableNetwork:isContinuousTransition:", v2, 1);

    -[BrowserController _tabDocumentForNextContinuousItem](a1);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[11], "previewView");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setPrefetchingDisabled:", 0);

    -[BrowserController loadNextContinuousDocumentIfNeeded](a1);
    objc_msgSend(a1, "setNextContinuousItemDocument:", 0);
    objc_msgSend(v6, "setWantsReaderWhenActivated:", objc_msgSend(a1, "readerShouldBeShownIfPossible"));
    -[BrowserController _commitToSpeculativeLoadForDocument:](a1, v6);
    objc_msgSend(v6, "setWantsReaderWhenActivated:", 0);

  }
}

- (void)_commitToTabDocumentForPreviousContinuousItem
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CFA9A8], "sharedNetworkObserver");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v3, "isNetworkReachable");

    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "didOpenReadingListItemWithReachableNetwork:isContinuousTransition:", v2, 1);

    objc_msgSend(a1[11], "previousItemPreviewView");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setPrefetchingDisabled:", 0);

    -[BrowserController _loadPreviousContinuousDocumentIfNeeded](a1);
    objc_msgSend(a1, "previousContinuousItemDocument");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setPreviousContinuousItemDocument:", 0);
    objc_msgSend(v6, "setWantsReaderWhenActivated:", objc_msgSend(a1, "readerShouldBeShownIfPossible"));
    -[BrowserController _commitToSpeculativeLoadForDocument:](a1, v6);
    objc_msgSend(v6, "setWantsReaderWhenActivated:", 0);

  }
}

- (void)_loadPreviousContinuousDocumentIfNeeded
{
  void *v2;
  void *v3;
  char v4;
  void *v5;
  char v6;
  id v7;

  if (a1)
  {
    objc_msgSend(a1, "continuousReadingController");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "previousReadingListItem");
    v7 = (id)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      if ((objc_msgSend(a1[28], "isLoading") & 1) == 0 && (objc_msgSend(a1[28], "didFinishDocumentLoad") & 1) == 0)
      {
        -[BrowserController _preparePreviousContinuousDocumentIfNeeded](a1);
        objc_msgSend(a1[11], "previousItemPreviewView");
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        v4 = objc_msgSend(v3, "isPrefetchingDisabled");

        if ((v4 & 1) == 0)
        {
          if ((objc_msgSend(a1[11], "isCommittingToContinuousDocument") & 1) != 0
            || (objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"),
                v5 = (void *)objc_claimAutoreleasedReturnValue(),
                v6 = objc_msgSend(v5, "isLowPowerModeEnabled"),
                v5,
                (v6 & 1) == 0))
          {
            -[BrowserController _startLoadDocument:continuousReadingItem:](a1, a1[28], v7);
          }
        }
      }
    }

  }
}

- (double)_frameForCurrentPageBannerView
{
  double v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  double v8;
  CGRect v10;

  if (!a1)
    return 0.0;
  objc_msgSend(*(id *)(a1 + 304), "bounds");
  v3 = v2;
  v4 = *(void **)(a1 + 280);
  objc_msgSend(*(id *)(a1 + 304), "bounds");
  objc_msgSend(v4, "sidebarObscuredInsetsForRect:inCoordinateSpace:", *(_QWORD *)(a1 + 304));
  v6 = v5;
  objc_msgSend(*(id *)(a1 + 88), "topBannerView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "bounds");
  CGRectGetHeight(v10);
  v8 = v3 + v6;

  -[BrowserController _verticalOffsetForContinuousReadingBanner](a1);
  return v8;
}

- (void)_preparePreviousContinuousDocumentIfNeeded
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  if (a1)
  {
    objc_msgSend(a1, "continuousReadingController");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "previousReadingListItem");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v3 = v12;
    if (v12 && !a1[28])
    {
      -[BrowserController _cachedDocumentForContinuousReadingItem:](a1, v12);
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = a1[28];
      a1[28] = (id)v4;

      v6 = a1[28];
      if (!v6)
      {
        v7 = -[TabDocument initForBackgroundLoadingWithBrowserController:relatedWebView:webViewToCloneSessionStorageFrom:]([TabDocument alloc], "initForBackgroundLoadingWithBrowserController:relatedWebView:webViewToCloneSessionStorageFrom:", a1, 0, 0);
        v8 = a1[28];
        a1[28] = v7;

        v6 = a1[28];
      }
      objc_msgSend(v6, "beginSuppressingProgressAnimation");
      objc_msgSend(a1[28], "setAllowsRemoteInspection:", 0);
      if (objc_msgSend(a1, "readerShouldBeShownIfPossible")
        && (objc_msgSend(a1[28], "readerWebView"), (v9 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
      {
        objc_msgSend(a1[28], "readerWebView");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        objc_msgSend(a1[28], "webView");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(a1[11], "didCreateWebViewForPreviousDocument:", v10);
      if ((objc_msgSend(a1[28], "suppressWebExtensionEvents") & 1) == 0)
      {
        objc_msgSend(a1[28], "webExtensionsController");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "didOpenTab:", a1[28]);

      }
      v3 = v12;
    }

  }
}

- (void)markReadingListBookmark:(id)a3 asRead:(BOOL)a4 postNotification:(BOOL)a5
{
  _BOOL4 v5;
  _BOOL4 v6;
  void *v7;
  id v8;

  v5 = a5;
  v6 = a4;
  v8 = a3;
  objc_msgSend(MEMORY[0x1E0DCCBA0], "mainBookmarkCollection");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[WebBookmarkCollection markReadingListBookmark:asRead:postNotification:](v7, v8, v6, v5);

}

- (void)continuousReadingViewController:(id)a3 scrollViewDidScroll:(id)a4
{
  id v6;
  double v7;
  double v8;
  double v9;
  id v10;

  v10 = a3;
  v6 = a4;
  objc_msgSend(v6, "contentOffset");
  v8 = v7;
  objc_msgSend(v10, "scrollOffsetYForCurrentDocument");
  if (v8 >= v9)
    -[BrowserController prefetchNextContinuousItemIfNeeded]((id *)&self->super.super.super.isa);
  else
    -[BrowserController _loadPreviousContinuousDocumentIfNeeded]((id *)&self->super.super.super.isa);

}

- (void)continuousReadingViewControllerWillCommitToLoadNextItem:(id)a3
{
  void *v4;
  void *v5;
  double v6;

  -[BrowserController _updateCurrentPageBannerViewBeforeContinuousTransition]((uint64_t)self);
  -[BrowserController tabController](self, "tabController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "activeTabDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController setCachedDocumentOnContinuousTransition:](self, "setCachedDocumentOnContinuousTransition:", v5);

  -[TabDocument estimatedProgress](self->_nextContinuousItemDocument, "estimatedProgress");
  if (v6 == 1.0)
    -[StatusBarSpinnerController setEnabled:](self->_spinnerController, "setEnabled:", 0);
  -[BrowserController _commitToTabDocumentForNextContinuousItem]((id *)&self->super.super.super.isa);
  -[StatusBarSpinnerController setEnabled:](self->_spinnerController, "setEnabled:", 1);
}

- (void)continuousReadingViewControllerCommitToLoadPreviousItem:(id)a3
{
  void *v4;
  void *v5;

  -[BrowserController _updateCurrentPageBannerViewBeforeContinuousTransition]((uint64_t)self);
  -[BrowserController tabController](self, "tabController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "activeTabDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController setCachedDocumentOnContinuousTransition:](self, "setCachedDocumentOnContinuousTransition:", v5);

  -[BrowserController _commitToTabDocumentForPreviousContinuousItem]((id *)&self->super.super.super.isa);
}

- (void)continuousReadingViewController:(id)a3 didCommitToLoadItem:(id)a4
{
  void *v5;
  id v6;

  v6 = a4;
  -[BrowserController _updateCurrentPageBannerView]((id *)&self->super.super.super.isa);
  -[BrowserController setCachedDocumentOnContinuousTransition:](self, "setCachedDocumentOnContinuousTransition:", 0);
  objc_msgSend(v6, "readingListBookmark");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController markReadingListBookmark:asRead:postNotification:](self, "markReadingListBookmark:asRead:postNotification:", v5, 1, 1);

}

- (double)continuousReadingViewControllerNextWebViewLandingOffset:(id)a3 includeBottomBar:(BOOL)a4
{
  _BOOL4 v4;
  void *v6;
  double MaxY;
  double v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  v4 = a4;
  -[BrowserController updateDynamicBarGeometry](self, "updateDynamicBarGeometry", a3);
  -[BrowserController tabContentContainerView]((id *)&self->super.super.super.isa);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserRootViewController navigationBarFrameInCoordinateSpace:](self->_rootViewController, "navigationBarFrameInCoordinateSpace:", v6);
  MaxY = CGRectGetMaxY(v18);
  objc_msgSend(v6, "frame");
  v8 = MaxY + CGRectGetMinY(v19);
  if (v4)
  {
    -[BrowserRootViewController bottomToolbarFrameInCoordinateSpace:includeKeyboard:](self->_rootViewController, "bottomToolbarFrameInCoordinateSpace:includeKeyboard:", v6, 1);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;
    objc_msgSend(v6, "bounds");
    v22.origin.x = v10;
    v22.origin.y = v12;
    v22.size.width = v14;
    v22.size.height = v16;
    v21 = CGRectIntersection(v20, v22);
    v8 = v8 + v21.size.height;
  }

  return v8;
}

- (void)_automaticPasswordInputViewNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a3;
  v4 = objc_alloc(MEMORY[0x1E0CB3A28]);
  objc_msgSend(v14, "userInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", *MEMORY[0x1E0CD5850]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v4, "initWithUUIDString:", v6);

  objc_msgSend(v14, "userInfo");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "safari_numberForKey:", *MEMORY[0x1E0CD5860]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = objc_msgSend(v9, "integerValue");
    if (v10)
    {
      if (v10 == 1)
      {
        -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "userDeclinedAutomaticStrongPasswordForCurrentDomainOnTabWithUUID:", v7);

        -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "removeAutomaticPasswordButton");
LABEL_7:

      }
    }
    else if (objc_msgSend(MEMORY[0x1E0D89BE8], "isPasswordManagerAppEnabledAndInstalled"))
    {
      -[TabController tabDocumentWithUUID:](self->_tabController, "tabDocumentWithUUID:", v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "autoFillController");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "fillCurrentAutomaticStrongPasswordInCurrentFrameBlurringAfterSubstitution:completionHandler:", 0, &__block_literal_global_816);

      goto LABEL_7;
    }
  }

}

- (void)_automaticPasswordInputViewAutoFillContextProviderRequiredNotification:(id)a3
{
  TabController *tabController;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a3;
  tabController = self->_tabController;
  v5 = objc_alloc(MEMORY[0x1E0CB3A28]);
  objc_msgSend(v12, "userInfo");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKey:", *MEMORY[0x1E0CD5850]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v5, "initWithUUIDString:", v7);
  -[TabController tabDocumentWithUUID:](tabController, "tabDocumentWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "userInfo");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKey:", *MEMORY[0x1E0CD5858]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "setAutoFillContextProvider:", v9);
}

- (void)policyDidChangeForDigitalHealthManager:(id)a3
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __60__BrowserController_policyDidChangeForDigitalHealthManager___block_invoke;
  block[3] = &unk_1E9CF31B0;
  block[4] = self;
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

void __60__BrowserController_policyDidChangeForDigitalHealthManager___block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "allTabDocuments");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD **)(a1 + 32);
  v5 = (id)v2;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _updateDigitalHealthOverlayForTabDocuments:](v3, v4);

}

void __64__BrowserController__updateDigitalHealthOverlayForTabDocuments___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "allObjects");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController _toggleDigitalHealthOverlayGivenOverlayStates:forTabDocuments:](WeakRetained, v2, v3);

}

- (void)_toggleDigitalHealthOverlayGivenOverlayStates:(void *)a3 forTabDocuments:
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id obj;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = v6;
    obj = v6;
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v19;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v19 != v8)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v9);
          objc_msgSend(v10, "URL", v16);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "safari_canonicalURL");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "objectForKeyedSubscript:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "integerValue");

          objc_msgSend(v10, "setPolicy:", v14);
          if ((unint64_t)(v14 - 1) >= 5)
          {
            if (!v14 && (objc_msgSend(a1, "tabDocumentIsBackgroundPreloading:", v10) & 1) == 0)
              -[BrowserController _fullyRemoveDigitalHealthTreatmentForTabDocumentIfNecessary:](a1, v10);
          }
          else
          {
            -[BrowserController _showDigitalHealthOverlayForTabDocument:withPolicy:animated:]((uint64_t)a1, v10, v14, 1);
          }
          ++v9;
        }
        while (v7 != v9);
        v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        v7 = v15;
      }
      while (v15);
    }

    v6 = v16;
  }

}

- (void)_fullyRemoveDigitalHealthTreatmentForTabDocumentIfNecessary:(id *)a1
{
  id v3;
  void *v4;
  _QWORD v5[5];
  id v6;

  v3 = a2;
  if (a1)
  {
    -[BrowserController _screenTimeOverlayViewControllerForTabDocument:](a1, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if ((-[BrowserController _isTabDocumentFrontMostForDigitalHealth:]((uint64_t)a1, v3) & 1) != 0)
    {
      objc_msgSend(v3, "setPolicy:", 0);
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 3221225472;
      v5[2] = __81__BrowserController__fullyRemoveDigitalHealthTreatmentForTabDocumentIfNecessary___block_invoke;
      v5[3] = &unk_1E9CF3358;
      v5[4] = a1;
      v6 = v3;
      objc_msgSend(v4, "hideBlockingViewControllerWithCompletionHandler:", v5);

    }
  }

}

void __81__BrowserController__fullyRemoveDigitalHealthTreatmentForTabDocumentIfNecessary___block_invoke(uint64_t a1)
{
  -[BrowserController _hideDigitalHealthOverlayForTabDocument:](*(id **)(a1 + 32), *(void **)(a1 + 40));
}

- (double)_frameForScreenTimeOverlayViewControllerView
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;

  if (!a1)
    return 0.0;
  objc_msgSend(a1[35], "documentAndTopBarsContainerView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "bounds");
  v4 = v3;
  objc_msgSend(a1[35], "obscuredInsetsForRect:inCoordinateSpace:", v2);
  objc_msgSend(a1, "_shouldUseNarrowLayout");
  UIEdgeInsetsReplace();
  v6 = v4 + v5;

  return v6;
}

- (void)tabDocument:(id)a3 didChangePIPState:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  TabDocument *v7;
  TabDocument *tabDocumentPlayingPIPVideo;
  void *v9;
  id v10;

  v4 = a4;
  v6 = a3;
  v10 = v6;
  if (v4)
    v7 = (TabDocument *)v6;
  else
    v7 = 0;
  tabDocumentPlayingPIPVideo = self->_tabDocumentPlayingPIPVideo;
  self->_tabDocumentPlayingPIPVideo = v7;

  +[Application sharedApplication](Application, "sharedApplication");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "updateShouldLockPrivateBrowsingWithTimerIfNecessary");

}

- (void)switchToTabWithUUID:(id)a3 inWindowWithUUID:(id)a4 forTabGroupWithUUID:(id)a5
{
  id v8;
  id v9;
  void *v10;
  BrowserController *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  BrowserController *v22;
  void *v23;
  id v24;

  v24 = a3;
  v8 = a4;
  v9 = a5;
  -[BrowserController browserWindowController](self, "browserWindowController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "browserControllerWithUUID:", v8);
  v11 = (BrowserController *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    -[BrowserController tabController](v11, "tabController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "tabWithUUID:", v24);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      -[BrowserController tabController](v11, "tabController");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "currentTabs");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "indexOfObjectIdenticalTo:", v13);

      if (v16 != 0x7FFFFFFFFFFFFFFFLL)
      {
        -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "browserController");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[BrowserController _requestActivationOfBrowserController:](self, v18);

        -[BrowserController tabController](v11, "tabController");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "setActiveTab:animated:", v13, 0);

        -[BrowserController dismissTransientUIAnimated:](v11, "dismissTransientUIAnimated:", 1);
        if (objc_msgSend(v17, "isBlank")
          && (-[TabController currentTabs](self->_tabController, "currentTabs"),
              v20 = (void *)objc_claimAutoreleasedReturnValue(),
              v21 = objc_msgSend(v20, "count"),
              v20,
              v21 >= 2))
        {
          -[TabController closeTab:animated:](self->_tabController, "closeTab:animated:", v17, 0);
        }
        else if (v11 != self)
        {
          -[BrowserController cancelFavorites](self, "cancelFavorites");
        }

      }
    }
    else if (v9
           && !-[TabController switchToTabWithUUID:inTabGroupWithUUID:](self->_tabController, "switchToTabWithUUID:inTabGroupWithUUID:", v24, v9))
    {
      -[TabController browserControllerContainingLocalTabGroupUUID:](self->_tabController, "browserControllerContainingLocalTabGroupUUID:", v9);
      v22 = (BrowserController *)objc_claimAutoreleasedReturnValue();

      if (v22)
      {
        -[BrowserController _requestActivationOfBrowserController:](self, v22);
        -[BrowserController tabController](v22, "tabController");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "switchToTabWithUUID:inTabGroupWithUUID:", v24, v9);

        v11 = v22;
        -[BrowserController cancelFavorites](self, "cancelFavorites");
      }
      else
      {
        v11 = 0;
      }
    }

  }
}

- (void)_requestActivationOfBrowserController:(void *)a1
{
  id *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id WeakRetained;
  id *v10;

  v3 = a2;
  if (a1)
  {
    v10 = v3;
    -[BrowserController _sceneSession](v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController _sceneSession](a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5 != v4)
    {
      v6 = objc_alloc_init(MEMORY[0x1E0DC3BD0]);
      objc_msgSend(v5, "scene");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setRequestingScene:", v7);

      objc_msgSend(v6, "setPreserveLayout:", 1);
      objc_msgSend(MEMORY[0x1E0DC3470], "sharedApplication");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "requestSceneSessionActivation:userActivity:options:errorHandler:", v4, 0, v6, &__block_literal_global_819);

    }
    -[UIResponder safari_becomeFirstResponderIfNeeded]((uint64_t)v10);
    WeakRetained = objc_loadWeakRetained(v10 + 48);
    objc_msgSend(WeakRetained, "browserControllerMakeKey:", v10);

    v3 = v10;
  }

}

void __59__BrowserController__requestActivationOfBrowserController___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  v3 = (id)WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(v2, "safari_privacyPreservingDescription");
    objc_claimAutoreleasedReturnValue();
    __51__BrowserController_tabDocumentShouldBecomeActive___block_invoke_cold_1();
  }

}

- (void)screenTimeOverlayViewController:(id)a3 didFinishDismissingBlockingViewController:(id)a4
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  id v11;
  _BOOL4 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[TabController allTabDocuments](self->_tabController, "allTabDocuments", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if ((objc_msgSend(v10, "shouldObscureForDigitalHealth") & 1) != 0)
        {
          objc_msgSend(v10, "associatedBlockingViewController");
          v11 = (id)objc_claimAutoreleasedReturnValue();
          v12 = v11 == v5;

          if (v12)
            -[BrowserController _fullyRemoveDigitalHealthTreatmentForTabDocumentIfNecessary:]((id *)&self->super.super.super.isa, v10);
        }
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v7);
  }

}

- (uint64_t)handleOpenURLContextsForReadingListWidget:(void *)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;

  v3 = a2;
  v4 = v3;
  if (a1 && objc_msgSend(v3, "count") == 1)
  {
    objc_msgSend(v4, "anyObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "URL");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = objc_msgSend(v6, "safari_isReadingListURL");
    if ((_DWORD)v7)
    {
      objc_msgSend(v6, "safari_readingListItemUUIDString");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8)
      {
        objc_msgSend(a1, "openBookmarkWithUUIDString:", v8);
      }
      else
      {
        objc_msgSend(a1, "currentBookmarksCollection");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("ReadingListCollection"));

        if ((v10 & 1) == 0)
          -[BrowserController _switchToCollectionOrToggleSidebar:]((id *)a1, CFSTR("ReadingListCollection"));
      }

    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void __56__BrowserController_scene_willConnectToSession_options___block_invoke_825(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  uint8_t v3[16];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "activeTabDocument");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "isBlank"))
  {
    v2 = WBS_LOG_CHANNEL_PREFIXSignposts();
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)v3 = 0;
      _os_signpost_emit_with_name_impl(&dword_1D7CA3000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LaunchToFirstLoad", "beganLoad=NO enableTelemetry=YES ", v3, 2u);
    }
  }
  else
  {
    objc_msgSend(v1, "setNeedsSendTelemetryForProvisionalLoad");
  }

}

void __56__BrowserController_scene_willConnectToSession_options___block_invoke_826(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  _BYTE *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  _BYTE *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;

  v2 = objc_alloc_init(MEMORY[0x1E0D8A8C0]);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 832);
  *(_QWORD *)(v3 + 832) = v2;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 832), "setDelegate:");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 832), "startObserving");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "activeTabDocument");
  v24 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "unifiedField");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isFirstResponder");
  v7 = *(_BYTE **)(a1 + 32);
  if (v6)
  {
    v7[577] = 1;
  }
  else
  {
    objc_msgSend(v7, "viewControllerToPresentFrom");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "presentedViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 577) = v9 != 0;

  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 578) = 1;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "makeActiveTabDocumentActive");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 578) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 577) = 0;
  -[BrowserController setWebViewFromTabDocument:](*(_QWORD **)(a1 + 32), v24);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 692) = 0;
  objc_msgSend(v24, "webExtensionsController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "didOpenWindow:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 504));
  v11 = objc_msgSend(*(id *)(a1 + 32), "isPrivateBrowsingAvailable");
  v12 = *(_BYTE **)(a1 + 32);
  if (v11 && !v12[520])
  {
    +[Application sharedApplication](Application, "sharedApplication");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "defaultWebExtensionsController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "didOpenWindow:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 512));

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 520) = 1;
    v12 = *(_BYTE **)(a1 + 32);
  }
  objc_msgSend(v12, "activeWebExtensionWindow");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "didActivateWindow:", v15);

  objc_msgSend(v10, "tabIDToTabPositionForTabsInTransit");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "count");

  if (v17)
  {
    v18 = (void *)MEMORY[0x1E0D8ADC8];
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v24);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "tabIDToTabPositionDictionaryForTabs:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "fireAppropriateTabMovementEventForTabState:", v20);

  }
  objc_msgSend(v10, "findExtensions");
  -[BrowserController _updateTabGroupBanner](*(id **)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 32), "updateCollaborationButton");
  -[BrowserController _showDefaultBrowserSheetIfNecessary](*(id *)(a1 + 32));
  if (objc_msgSend(*(id *)(a1 + 32), "isPrivateBrowsingEnabled"))
    -[BrowserController _showPrivateBrowsingExplanationSheetIfNecessary](*(id *)(a1 + 32));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "view");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "persistentIdentifier");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "safari_annotateWithWindowEntityIdentifier:", v22);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 280), "tabSwitcherViewController");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "didCompleteLaunch");

}

- (void)windowScene:(id)a3 userDidAcceptCloudKitShareWithMetadata:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  v6 = a4;
  objc_msgSend(v6, "safari_setOriginatingWindowScene:", v10);
  -[BrowserController tabGroupManager](self, "tabGroupManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "acceptTabGroupShareWithMetadata:handler:", v6, self);

  -[BrowserController tabController](self, "tabController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "share");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "attemptToSelectTabGroupFromShare:", v9);

}

- (void)tabGroupManager:(id)a3 didBeginAcceptingTabGroupShareWithMetadata:(id)a4
{
  -[BrowserController _postUserDidAcceptCloudKitShareActivityNoticeWithMetadata:]((uint64_t)self, a4);
}

- (void)_postUserDidAcceptCloudKitShareActivityNoticeWithMetadata:(uint64_t)a1
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v23 = a2;
  if (a1)
  {
    v22 = a1;
    objc_msgSend(*(id *)(a1 + 344), "allTabGroups");
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v3 = (id)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v25;
      while (2)
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v25 != v5)
            objc_enumerationMutation(v3);
          v7 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
          if (objc_msgSend(v7, "isShared"))
          {
            objc_msgSend(v23, "share");
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "recordID");
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v9, "recordName");
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "bookmark");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "serverID");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v13 = WBSIsEqual();

            if ((v13 & 1) != 0)
            {
              v17 = v3;
              goto LABEL_13;
            }
          }
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
        if (v4)
          continue;
        break;
      }
    }

    v14 = objc_alloc(MEMORY[0x1E0D4EC90]);
    objc_msgSend(v23, "share");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E0C94A80]);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (void *)objc_msgSend(v14, "initWithTitleText:", v16);

    v18 = (void *)MEMORY[0x1E0CB3940];
    _WBSLocalizedString();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "stringWithFormat:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setMessageText:", v20);

    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4EE58]), "initWithContentViewController:", v17);
    objc_msgSend(v21, "setDelegate:", v22);
    -[BrowserController _presentToastViewControllerQueuingIfNecessary:](v22, v21);

LABEL_13:
  }

}

- (void)tabGroupManager:(id)a3 didFinishAcceptingTabGroupShareWithMetadata:(id)a4 result:(int64_t)a5
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  TabController *tabController;
  void *v13;
  id v14;

  v14 = a3;
  v8 = a4;
  switch(a5)
  {
    case 3:
      -[BrowserController _presentSharedTabGroupsUnsupportedError](self);
      break;
    case 2:
      -[BrowserController tabGroupManager](self, "tabGroupManager");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "share");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "tabGroupMatchingShare:", v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      tabController = self->_tabController;
      objc_msgSend(v11, "uuid");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[TabController displayAlreadyAcceptedSharedTabGroupWithUUID:](tabController, "displayAlreadyAcceptedSharedTabGroupWithUUID:", v13);

      break;
    case 1:
      -[BrowserController _presentSharedTabGroupsPendingAcceptanceError](self);
      break;
  }

}

- (void)_presentSharedTabGroupsPendingAcceptanceError
{
  id v2;

  if (a1)
  {
    _WBSLocalizedString();
    v2 = (id)objc_claimAutoreleasedReturnValue();
    -[BrowserController _presentSharedTabGroupErrorWithTitle:message:](a1, v2, 0);

  }
}

- (void)_presentSharedTabGroupsUnsupportedError
{
  id v2;

  if (a1)
  {
    _WBSLocalizedString();
    v2 = (id)objc_claimAutoreleasedReturnValue();
    -[BrowserController _presentSharedTabGroupErrorWithTitle:message:](a1, v2, 0);

  }
}

- (void)_presentSharedTabGroupErrorWithTitle:(void *)a3 message:
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0DC3450], "alertControllerWithTitle:message:preferredStyle:", v11, v5, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)MEMORY[0x1E0DC3448];
    _WBSLocalizedString();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "actionWithTitle:style:handler:", v8, 1, &__block_literal_global_830);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addAction:", v9);

    objc_msgSend(a1, "viewControllerToPresentFrom");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "presentViewController:animated:completion:", v6, 1, 0);

  }
}

- (void)tabGroupManager:(id)a3 selectProfileIdentifierForShareMetadata:(id)a4 completionHandler:(id)a5
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;

  v7 = a4;
  v8 = a5;
  objc_msgSend(v7, "safari_originatingWindowScene");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "share");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKeyedSubscript:", *MEMORY[0x1E0C94A80]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = (void *)MEMORY[0x1E0D4EB98];
  -[BrowserController tabGroupManager](self, "tabGroupManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __95__BrowserController_tabGroupManager_selectProfileIdentifierForShareMetadata_completionHandler___block_invoke;
  v15[3] = &unk_1E9CF4298;
  v14 = v8;
  v16 = v14;
  objc_msgSend(v12, "presentDialogInScene:forSharedTabGroupWithTitle:tabGroupManager:completionHandler:", v9, v11, v13, v15);

}

uint64_t __95__BrowserController_tabGroupManager_selectProfileIdentifierForShareMetadata_completionHandler___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (void)sceneDidDisconnect:(id)a3
{
  void *v4;
  id WeakRetained;
  void *v6;
  WBSDigitalHealthManager *digitalHealthManager;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  BrowserController *v12;
  BrowserController *v13;
  id v14;

  v14 = a3;
  objc_msgSend(MEMORY[0x1E0DCCB80], "sharedProxy");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeSyncObserver:", self);

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "browserController:didDisconnectFromScene:", self, v14);

  objc_msgSend(v14, "setDelegate:", 0);
  objc_msgSend(v14, "screenshotService");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setDelegate:", 0);

  objc_storeWeak((id *)&self->_scene, 0);
  digitalHealthManager = self->_digitalHealthManager;
  self->_digitalHealthManager = 0;

  +[Application sharedApplication](Application, "sharedApplication");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "updateShouldLockPrivateBrowsingWithTimerIfNecessary");

  +[Application sharedApplication](Application, "sharedApplication");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "proxy");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "currentScene");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "delegate");
  v12 = (BrowserController *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v13 = v12;
  else
    v13 = 0;
  setPrimaryWindowEntityFromBrowserController(v13);

}

- (void)sceneWillResignActive:(id)a3
{
  self->_suspendedOrSuspending = 1;
  -[BrowserController willResignActive](self, "willResignActive", a3);
}

- (void)sceneDidEnterBackground:(id)a3
{
  id WeakRetained;

  -[BrowserController didEnterBackground](self, "didEnterBackground", a3);
  if (-[BrowserController isPrivateBrowsingEnabled](self, "isPrivateBrowsingEnabled"))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
    objc_msgSend(WeakRetained, "browserControllerWillBeginObfuscating:", self);

  }
}

- (void)windowScene:(id)a3 didUpdateCoordinateSpace:(id)a4 interfaceOrientation:(int64_t)a5 traitCollection:(id)a6
{
  id WeakRetained;
  uint64_t v9;

  WeakRetained = objc_loadWeakRetained((id *)&self->_scene);
  v9 = objc_msgSend(WeakRetained, "interfaceOrientation");

  if (v9 != a5)
    -[_SFBarManager setDownloadsItemNeedsLayout](self->_barManager, "setDownloadsItemNeedsLayout");
}

- (void)scene:(id)a3 openURLContexts:(id)a4
{
  id v5;
  BrowserController *v6;
  id v7;
  void *v8;
  void *v9;
  BrowserController *v10;
  id v11;
  uint64_t aBlock;
  uint64_t v13;
  void (*v14)(uint64_t);
  void *v15;
  BrowserController *v16;
  id v17;

  v5 = a4;
  v6 = self;
  v10 = v6;
  v7 = v5;
  v11 = v7;
  if (v6->_suspendedOrSuspending)
  {
    v8 = (void *)MEMORY[0x1E0DC3F10];
    aBlock = MEMORY[0x1E0C809B0];
    v13 = 3321888768;
    v14 = ___ZZ43__BrowserController_scene_openURLContexts__ENK3__2cvU13block_pointerFvvEEv_block_invoke;
    v15 = &__block_descriptor_48_ea8_32c56_ZTSKZ43__BrowserController_scene_openURLContexts__E3__2_e5_v8__0l;
    v16 = v6;
    v17 = v7;
    v9 = _Block_copy(&aBlock);

    objc_msgSend(v8, "performWithoutAnimation:", v9, v10, v11, aBlock, v13, v14, v15);
  }
  else
  {
    -[BrowserController scene:openURLContexts:]::$_2::operator()((id *)&v10);
  }

}

- (void)scene:openURLContexts:
{
  void *v2;
  void *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  int v24;
  int v25;
  id v26;
  id v27;

  if ((-[BrowserController handleOpenURLContextsForReadingListWidget:](*a1, a1[1]) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D4EF70], "builderWithModifierFlags:", 0);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[1], "allObjects");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "navigationIntentWithOpenURLContexts:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v3, "type") == 7)
    {
      WeakRetained = objc_loadWeakRetained((id *)*a1 + 88);
      objc_msgSend(WeakRetained, "perSitePreferencesVendor");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "profilePreferenceManager");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v3, "URL");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "safari_userVisibleHostWithoutWWWSubdomain");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "identifierForProfilePreferenceForDomain:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      v10 = *a1;
      if (v9)
      {
        objc_msgSend(v10, "setActiveProfileIdentifier:", v9);
      }
      else
      {
        objc_msgSend(v10, "tabController");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "updateFocusProfileEnteringForeground");

      }
    }
    v12 = (void *)*((_QWORD *)*a1 + 43);
    objc_msgSend(v3, "URL");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "tabForURL:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
      v15 = 1;
    else
      v15 = objc_msgSend(*a1, "shouldStayInFocusedTabGroupForExternalLinks");
    if (objc_msgSend(v3, "type") != 7
      || (objc_msgSend(v3, "externalURLSourceApplicationIsSpotlight") | v15 ^ 1) == 1)
    {
      objc_msgSend(*((id *)*a1 + 43), "switchOutOfSyncedTabGroup");
    }
    +[Application sharedApplication](Application, "sharedApplication");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "defaultWebExtensionsController");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "URL");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "safari_composedIdentifierAndProfileIdentifierInSafariWebExtensionURL");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v19, "second");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v20, "length"))
    {
      v21 = *((unsigned __int8 *)*a1 + 695);
      objc_msgSend(*((id *)*a1 + 43), "setActiveProfileIdentifier:", v20);
      if (v21
        && objc_msgSend(*a1, "isInDefaultProfile")
        && (objc_msgSend(v19, "first"),
            v22 = (void *)objc_claimAutoreleasedReturnValue(),
            objc_msgSend(v17, "webExtensionForComposedIdentifier:", v22),
            v23 = (void *)objc_claimAutoreleasedReturnValue(),
            v24 = objc_msgSend(v23, "allowedInPrivateBrowsing"),
            v23,
            v22,
            v24))
      {
        objc_msgSend(*((id *)*a1 + 43), "selectPrivateTabGroup");
      }
      else
      {
        objc_msgSend(*((id *)*a1 + 43), "selectLocalTabGroup");
      }
    }
    v25 = objc_msgSend(v27, "prefersOpenInNewWindow");
    v26 = *a1;
    if (v25)
      objc_msgSend(v26, "dispatchNavigationIntent:", v3);
    else
      objc_msgSend(v26, "handleNavigationIntent:completion:", v3, 0);

  }
}

- (BOOL)shouldStayInFocusedTabGroupForExternalLinks
{
  void *v3;
  void *v4;
  int v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  uint8_t v12[16];

  +[Application sharedApplication](Application, "sharedApplication");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0D89EB0]);

  if (objc_msgSend(v3, "needsFocusedTabGroupUpdate"))
  {
    if (v5)
    {
      -[TabController updateFocusedTabGroupEnteringForeground](self->_tabController, "updateFocusedTabGroupEnteringForeground");
    }
    else
    {
      v6 = WBS_LOG_CHANNEL_PREFIXSiriLink();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_1D7CA3000, v6, OS_LOG_TYPE_DEFAULT, "Overriding Focus to open external links in default tab group", v12, 2u);
      }
      objc_msgSend(v3, "setNeedsFocusedTabGroupUpdate:", 0);
    }
  }
  -[TabController activeTabGroup](self->_tabController, "activeTabGroup");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "focusedTabGroupUUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v8, "isEqualToString:", v9);

  return v5 & v10;
}

- (void)scene:(id)a3 willContinueUserActivityWithType:(id)a4
{
  -[UserActivityController willContinueUserActivityWithType:](self->_userActivityController, "willContinueUserActivityWithType:", a4);
}

- (void)scene:(id)a3 continueUserActivity:(id)a4
{
  -[UserActivityController continueUserActivity:](self->_userActivityController, "continueUserActivity:", a4);
}

- (void)scene:(id)a3 didFailToContinueUserActivityWithType:(id)a4 error:(id)a5
{
  -[UserActivityController didFailToContinueUserActivityWithType:error:](self->_userActivityController, "didFailToContinueUserActivityWithType:error:", a4, a5);
}

- (void)windowScene:(id)a3 performActionForShortcutItem:(id)a4 completionHandler:(id)a5
{
  id v7;
  BrowserController *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  ApplicationShortcutController *shortcutController;
  void *v14;
  uint64_t v15;
  uint64_t aBlock;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  BrowserController *v20;
  id v21;
  id v22;

  v7 = a4;
  v8 = self;
  v9 = v7;
  v10 = _Block_copy(a5);
  if (v8->_suspendedOrSuspending)
  {
    v11 = (void *)MEMORY[0x1E0DC3F10];
    aBlock = MEMORY[0x1E0C809B0];
    v17 = 3321888768;
    v18 = ___ZZ80__BrowserController_windowScene_performActionForShortcutItem_completionHandler__ENK3__3cvU13block_pointerFvvEEv_block_invoke;
    v19 = &__block_descriptor_56_ea8_32c93_ZTSKZ80__BrowserController_windowScene_performActionForShortcutItem_completionHandler__E3__3_e5_v8__0l;
    v20 = v8;
    v21 = v9;
    v22 = _Block_copy(v10);
    v12 = _Block_copy(&aBlock);

    objc_msgSend(v11, "performWithoutAnimation:", v12, v8, v9, v10, aBlock, v17, v18, v19);
  }
  else
  {
    shortcutController = v8->_shortcutController;
    objc_msgSend(v9, "type", v8, v9, v10);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[ApplicationShortcutController handleShortcutItemWithType:](shortcutController, "handleShortcutItemWithType:", v14);

    (*((void (**)(void *, uint64_t))v10 + 2))(v10, v15);
  }

}

- (id)windowScene:(id *)a1 performActionForShortcutItem:completionHandler:
{

  return a1;
}

- (void)screenshotService:(id)a3 generatePDFRepresentationWithCompletion:(id)a4
{
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  id v18;
  void *v19;
  id blockRequestingScreenshotPDFData;
  void *v21;
  id v22;
  NSObject *v23;
  NSObject *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  uint8_t buf[16];

  v5 = a4;
  v6 = WBS_LOG_CHANNEL_PREFIXPrinting();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D7CA3000, v6, OS_LOG_TYPE_DEFAULT, "User took a screenshot, will attempt to generate a PDF representation", buf, 2u);
  }
  -[BrowserController tabController](self, "tabController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "activeTabDocument");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v8, "isBlank") & 1) != 0)
    goto LABEL_9;
  -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "presentedViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
    goto LABEL_8;
  objc_msgSend(v8, "dialogController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "presentedDialog");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 || (objc_msgSend(v8, "shouldObscureForDigitalHealth") & 1) != 0)
  {

LABEL_8:
LABEL_9:
    v12 = WBS_LOG_CHANNEL_PREFIXPrinting();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
LABEL_12:
      (*((void (**)(id, _QWORD, _QWORD, double, double, double, double))v5 + 2))(v5, 0, 0, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
      goto LABEL_13;
    }
    *(_WORD *)buf = 0;
    v13 = "Not returning a webpage PDF representation because Safari isn't showing a webpage right now";
LABEL_11:
    _os_log_impl(&dword_1D7CA3000, v12, OS_LOG_TYPE_DEFAULT, v13, buf, 2u);
    goto LABEL_12;
  }
  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "presentationState");

  if (v15)
    goto LABEL_9;
  if (-[BrowserController _isWindowLockedForPrivateBrowsing]((uint64_t)self))
  {
    v12 = WBS_LOG_CHANNEL_PREFIXPrinting();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    *(_WORD *)buf = 0;
    v13 = "Not returning a webpage PDF representation because Private Browsing is locked";
    goto LABEL_11;
  }
  if (self->_blockRequestingScreenshotPDFData)
  {
    v16 = WBS_LOG_CHANNEL_PREFIXPrinting();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D7CA3000, v16, OS_LOG_TYPE_INFO, "There's an existing pending screenshot PDF request; will use the in-progress PDF generation for the original and new requests",
        buf,
        2u);
    }
    v17 = _Block_copy(self->_blockRequestingScreenshotPDFData);
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __79__BrowserController_screenshotService_generatePDFRepresentationWithCompletion___block_invoke;
    v25[3] = &unk_1E9CF42C0;
    v26 = v17;
    v27 = v5;
    v18 = v17;
    v19 = _Block_copy(v25);
    blockRequestingScreenshotPDFData = self->_blockRequestingScreenshotPDFData;
    self->_blockRequestingScreenshotPDFData = v19;

  }
  else
  {
    v21 = _Block_copy(v5);
    v22 = self->_blockRequestingScreenshotPDFData;
    self->_blockRequestingScreenshotPDFData = v21;

    if ((objc_msgSend(v8, "isLoading") & 1) != 0)
    {
      v23 = WBS_LOG_CHANNEL_PREFIXPrinting();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D7CA3000, v23, OS_LOG_TYPE_DEFAULT, "User took a screenshot while the page was loading; will process request when pageload finishes",
          buf,
          2u);
      }
    }
    else
    {
      v24 = WBS_LOG_CHANNEL_PREFIXPrinting();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D7CA3000, v24, OS_LOG_TYPE_DEFAULT, "User took a screenshot and the page is done loading; generating a PDF now",
          buf,
          2u);
      }
      -[BrowserController _sendPDFRepresentationForScreenshotWithTabDocument:](self, v8);
    }
  }
LABEL_13:

}

void __79__BrowserController_screenshotService_generatePDFRepresentationWithCompletion___block_invoke(uint64_t a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11;

  v11 = a2;
  (*(void (**)(double, double, double, double))(*(_QWORD *)(a1 + 32) + 16))(a3, a4, a5, a6);
  (*(void (**)(double, double, double, double))(*(_QWORD *)(a1 + 40) + 16))(a3, a4, a5, a6);

}

void __72__BrowserController__sendPDFRepresentationForScreenshotWithTabDocument___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *WeakRetained;
  _QWORD *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained && WeakRetained[6])
  {
    v6 = (id)WBS_LOG_CHANNEL_PREFIXPrinting();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 134217984;
      v10 = objc_msgSend(v3, "length");
      _os_log_impl(&dword_1D7CA3000, v6, OS_LOG_TYPE_DEFAULT, "Got PDF data from WebKit of length %zu; calling completionHandler",
        (uint8_t *)&v9,
        0xCu);
    }

    (*(void (**)(double, double, double, double))(v5[6] + 16))(*(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
    v7 = (void *)v5[6];
    v5[6] = 0;

  }
  else
  {
    v8 = WBS_LOG_CHANNEL_PREFIXPrinting();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 138543362;
      v10 = (uint64_t)v5;
      _os_log_impl(&dword_1D7CA3000, v8, OS_LOG_TYPE_DEFAULT, "Finished generating PDF but pending request block has been cleared on %{public}@; not calling completionHandler",
        (uint8_t *)&v9,
        0xCu);
    }
  }

}

- (void)openDownload:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  if (objc_msgSend(v6, "fileType") == 2)
  {
    -[BrowserController _openDownload:]((uint64_t)self, v6);
  }
  else
  {
    -[BrowserController tabController](self, "tabController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "activeTabDocument");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "showDownload:", v6);

  }
}

- (void)_openDownload:(uint64_t)a1
{
  id v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;

  v3 = a2;
  if (a1)
  {
    v10 = v3;
    objc_msgSend(v3, "completedFileURL");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uti");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (_SFTypeIsExtractableArchive())
    {
      v6 = objc_msgSend(v10, "canReveal");

      if (v6)
      {
        objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "mimeType");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "uti");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "didRevealDownloadWithMIMEType:uti:result:", v8, v9, 1);

        objc_msgSend(v10, "reveal");
LABEL_7:

        v3 = v10;
        goto LABEL_8;
      }
    }
    else
    {

    }
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __35__BrowserController__openDownload___block_invoke;
    v11[3] = &unk_1E9CF3C30;
    v12 = v10;
    v13 = v4;
    v14 = a1;
    objc_msgSend(v13, "safari_accessingSecurityScopedResource:", v11);

    goto LABEL_7;
  }
LABEL_8:

}

void __35__BrowserController__openDownload___block_invoke(uint64_t a1)
{
  _BOOL8 v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;
  BOOL v11;

  v2 = objc_msgSend(*(id *)(a1 + 32), "dataOwner") == 2;
  objc_msgSend(MEMORY[0x1E0CA5878], "defaultWorkspace");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __35__BrowserController__openDownload___block_invoke_2;
  v7[3] = &unk_1E9CF4338;
  v4 = *(_QWORD *)(a1 + 40);
  v8 = *(id *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v9 = v5;
  v10 = v6;
  v11 = v2;
  objc_msgSend(v3, "_sf_tryOpeningURLInDefaultApp:isContentManaged:completionHandler:", v4, v2, v7);

}

void __35__BrowserController__openDownload___block_invoke_2(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;
  uint64_t v11;
  char v12;

  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "mimeType");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uti");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "didRevealDownloadWithMIMEType:uti:result:", v3, v4, 2);

  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __35__BrowserController__openDownload___block_invoke_3;
    block[3] = &unk_1E9CF4310;
    v9 = *(id *)(a1 + 40);
    v5 = *(id *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 48);
    v10 = v5;
    v11 = v6;
    v12 = *(_BYTE *)(a1 + 56);
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
}

void __35__BrowserController__openDownload___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;
  id v8;
  char v9;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __35__BrowserController__openDownload___block_invoke_4;
  v5[3] = &unk_1E9CF4310;
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = v3;
  v7 = v4;
  v8 = *(id *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 56);
  objc_msgSend(v2, "safari_accessingSecurityScopedResource:", v5);

}

void __35__BrowserController__openDownload___block_invoke_4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "mimeType");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uti");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "didRevealDownloadWithMIMEType:uti:result:", v3, v4, 3);

  -[BrowserController _previewDownloadInQuickLook:url:isContentManaged:](*(id **)(a1 + 40), *(void **)(a1 + 32), *(void **)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

- (void)_previewDownloadInQuickLook:(void *)a3 url:(uint64_t)a4 isContentManaged:
{
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  objc_class *v12;
  id v13;
  void *v14;
  void *v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  if (a1)
  {
    WeakRetained = objc_loadWeakRetained(a1 + 48);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(WeakRetained, "browserController:overrideDownloadQuickLookPreview:isContentManaged:", a1, v8, a4);
    }
    else
    {
      objc_storeStrong(a1 + 27, a2);
      v17 = 0;
      v18 = &v17;
      v19 = 0x2050000000;
      v11 = (void *)getQLPreviewControllerClass(void)::softClass;
      v20 = getQLPreviewControllerClass(void)::softClass;
      if (!getQLPreviewControllerClass(void)::softClass)
      {
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 3221225472;
        v16[2] = ___ZL27getQLPreviewControllerClassv_block_invoke;
        v16[3] = &unk_1E9CF31D8;
        v16[4] = &v17;
        ___ZL27getQLPreviewControllerClassv_block_invoke((uint64_t)v16);
        v11 = (void *)v18[3];
      }
      v12 = objc_retainAutorelease(v11);
      _Block_object_dispose(&v17, 8);
      v13 = [v12 alloc];
      v21[0] = v9;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)objc_msgSend(v13, "initWithPreviewItems:", v14);

      objc_msgSend(v15, "setDelegate:", a1);
      objc_msgSend(v15, "setModalPresentationStyle:", 0);
      objc_msgSend(v15, "setIsContentManaged:", a4);
      -[BrowserController _presentModalViewController:](a1, v15);

    }
  }

}

- (void)previewControllerDidDismiss:(id)a3
{
  _SFDownload *previewedDownload;

  previewedDownload = self->_previewedDownload;
  self->_previewedDownload = 0;

}

- (BOOL)previewController:(id)a3 shouldOpenURL:(id)a4 forPreviewItem:(id)a5
{
  id v6;
  id v7;
  _QWORD v9[5];
  id v10;

  v6 = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __68__BrowserController_previewController_shouldOpenURL_forPreviewItem___block_invoke;
  v9[3] = &unk_1E9CF3358;
  v9[4] = self;
  v10 = v6;
  v7 = v6;
  dispatch_async(MEMORY[0x1E0C80D38], v9);

  return 0;
}

void __68__BrowserController_previewController_shouldOpenURL_forPreviewItem___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  objc_msgSend(*(id *)(a1 + 32), "viewControllerToPresentFrom");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __68__BrowserController_previewController_shouldOpenURL_forPreviewItem___block_invoke_2;
  v5[3] = &unk_1E9CF3358;
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, v5);

}

void __68__BrowserController_previewController_shouldOpenURL_forPreviewItem___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "safari_originalDataAsString");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D4EF70], "builder");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "tabController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setPrefersOpenInNewTab:", objc_msgSend(v4, "isBlank") ^ 1);

  objc_msgSend(v2, "setPreferredTabOrder:", 1);
  v5 = *(void **)(a1 + 40);
  objc_msgSend(v2, "navigationIntentWithText:", v7);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dispatchNavigationIntent:", v6);

}

- (id)previewController:(id)a3 transitionViewForPreviewItem:(id)a4
{
  id WeakRetained;
  void *v6;

  WeakRetained = objc_loadWeakRetained((id *)&self->_downloadsViewController);
  objc_msgSend(WeakRetained, "quickLookTransitionViewForDownload:", self->_previewedDownload);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (int64_t)previewController:(id)a3 editingModeForPreviewItem:(id)a4
{
  return 1;
}

- (BOOL)activityViewControllerSupportsDownloads:(id)a3
{
  return 1;
}

- (void)saveToFilesOperation:(id)a3 didFinishWithSuccess:(BOOL)a4
{
  _SFSaveToFilesOperation *saveToFilesOperation;

  saveToFilesOperation = self->_saveToFilesOperation;
  self->_saveToFilesOperation = 0;

}

- (void)saveToFilesOperation:(id)a3 presentViewController:(id)a4
{
  void *v5;
  id v6;

  v6 = a4;
  -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "presentViewController:animated:completion:", v6, 1, 0);

}

- (BOOL)saveToFilesOperationSupportsDownloads:(id)a3
{
  return 1;
}

- (void)beginIgnoringUserInteraction:(id)a3
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  NSMutableSet *reasonsForIgnoringUserInteraction;
  NSMutableSet *v8;
  NSMutableSet *v9;
  id WeakRetained;
  int v11;
  BrowserController *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134218242;
    v12 = self;
    v13 = 2114;
    v14 = v4;
    _os_log_impl(&dword_1D7CA3000, v5, OS_LOG_TYPE_DEFAULT, "Begin ignoring interaction for <BrowserController: %p>: %{public}@", (uint8_t *)&v11, 0x16u);
  }
  v6 = -[NSMutableSet count](self->_reasonsForIgnoringUserInteraction, "count");
  reasonsForIgnoringUserInteraction = self->_reasonsForIgnoringUserInteraction;
  if (reasonsForIgnoringUserInteraction)
  {
    -[NSMutableSet addObject:](reasonsForIgnoringUserInteraction, "addObject:", v4);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "setWithObject:", v4);
    v8 = (NSMutableSet *)objc_claimAutoreleasedReturnValue();
    v9 = self->_reasonsForIgnoringUserInteraction;
    self->_reasonsForIgnoringUserInteraction = v8;

  }
  if (!v6)
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
    objc_msgSend(WeakRetained, "browserControllerDidBeginIgnoringUserInteraction:", self);

  }
}

- (void)endIgnoringUserInteraction:(id)a3
{
  id v4;
  NSObject *v5;
  id WeakRetained;
  int v7;
  BrowserController *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = WBS_LOG_CHANNEL_PREFIXUserInteraction();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 134218242;
    v8 = self;
    v9 = 2114;
    v10 = v4;
    _os_log_impl(&dword_1D7CA3000, v5, OS_LOG_TYPE_DEFAULT, "End ignoring interaction for <BrowserController: %p>: %{public}@", (uint8_t *)&v7, 0x16u);
  }
  -[NSMutableSet removeObject:](self->_reasonsForIgnoringUserInteraction, "removeObject:", v4);
  if (!-[NSMutableSet count](self->_reasonsForIgnoringUserInteraction, "count"))
  {
    WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
    objc_msgSend(WeakRetained, "browserControllerDidEndIgnoringUserInteraction:", self);

  }
}

- (void)editBookmark:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  v4 = objc_alloc(MEMORY[0x1E0CD57C0]);
  objc_msgSend(MEMORY[0x1E0DCCBA0], "mainBookmarkCollection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v4, "initWithBookmark:inCollection:", v10, v5);

  objc_msgSend(v6, "setSyntheticBookmarkProvider:", self->_tabController);
  if (objc_msgSend(v6, "prepareForPresentationForAddingBookmark:", 0))
  {
    objc_msgSend(v6, "setBookmarkNavDelegate:", self);
    -[BrowserController _presentModalViewController:]((id *)&self->super.super.super.isa, v6);
  }
  else
  {
    v7 = (void *)MEMORY[0x1E0D4EBD8];
    -[BrowserController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "showLockedDatabaseAlertForAction:fromViewController:", 0, v8);

    objc_msgSend(MEMORY[0x1E0D89B98], "sharedLogger");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "didPreventBookmarkActionWithBookmarkType:actionType:", 1, 2);

  }
}

- (BOOL)getContextForCurrentPageWithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  BOOL v8;
  BOOL v9;

  v4 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "contextController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "URL");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
    v8 = v6 == 0;
  else
    v8 = 1;
  v9 = !v8;
  if (!v8)
    objc_msgSend(v6, "cachedResponseForURL:completionHandler:", v7, v4);

  return v9;
}

- (void)presentPrivacyReport
{
  void *v3;
  void *v4;
  id v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];

  if ((objc_msgSend(MEMORY[0x1E0CD55C0], "trackingPreventionEnabled") & 1) != 0
    || (v12[0] = MEMORY[0x1E0C809B0],
        v12[1] = 3221225472,
        v12[2] = __41__BrowserController_presentPrivacyReport__block_invoke,
        v12[3] = &unk_1E9CF3578,
        v12[4] = self,
        objc_msgSend(MEMORY[0x1E0CD55E0], "onboardingViewControllerWithCompletionHandler:", v12),
        (v3 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_alloc(MEMORY[0x1E0CD55E8]);
    v6 = objc_msgSend(v3, "isBlank");
    if ((v6 & 1) != 0)
    {
      v7 = 0;
    }
    else
    {
      objc_msgSend(v3, "webView");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v4 = (void *)objc_msgSend(v5, "initWithWebView:", v7);
    if ((v6 & 1) == 0)

    objc_msgSend(v4, "setWebsiteDetailShouldSeparateBlockedTrackers:", objc_msgSend(v3, "privacyReportShouldSeparateBlockedTrackers"));
    -[WBTabGroupManager allProfileIdentifiers](self->_tabGroupManager, "allProfileIdentifiers");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setProfileIdentifiers:", v8);

    +[Application sharedApplication](Application, "sharedApplication");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "historiesForProfiles");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setHistories:", v10);

    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3A40]), "initWithRootViewController:", v4);
    objc_msgSend(v11, "setModalPresentationStyle:", 1);
    -[BrowserController _presentModalViewController:]((id *)&self->super.super.super.isa, v11);

  }
  else
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3A40]), "initWithRootViewController:", v3);
    objc_msgSend(v4, "setModalPresentationStyle:", 2);
    -[BrowserController _presentModalViewController:]((id *)&self->super.super.super.isa, v4);
  }

}

void __41__BrowserController_presentPrivacyReport__block_invoke(uint64_t a1, int a2)
{
  void *v4;
  id v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "viewControllerToPresentFrom");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, 0);

  if (a2)
  {
    -[BrowserController _catalogViewController](*(id **)(a1 + 32));
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "startPageController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "updatePrivacyReportIfEnabled");

  }
}

- (void)presentBookmarkPickerWithImportHandler:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __60__BrowserController_presentBookmarkPickerWithImportHandler___block_invoke;
  v6[3] = &unk_1E9CF4360;
  objc_copyWeak(&v8, &location);
  v7 = v4;
  v5 = v4;
  -[BrowserController _setPresentingModalBookmarksController:exclusively:importHandler:withCollection:bookmarkUUIDString:animated:completion:]((id *)&self->super.super.super.isa, 1, 0, v6, CFSTR("BookmarksCollection"), 0, 1, 0);

  objc_destroyWeak(&v8);
  objc_destroyWeak(&location);
}

void __60__BrowserController_presentBookmarkPickerWithImportHandler___block_invoke(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    objc_msgSend(WeakRetained, "bookmarksNavigationControllerDidPressDoneButton:", 0);
  }

}

- (void)presentCloudTabsPickerWithPrimaryDeviceUUID:(id)a3
{
  CloudTabsViewController *v4;
  void *v5;
  void *v6;
  CloudTabsViewController *v7;
  void *v8;
  id v9;

  v9 = a3;
  v4 = [CloudTabsViewController alloc];
  -[BrowserController cloudTabStore](self, "cloudTabStore");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController activeProfileIdentifier](self, "activeProfileIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CloudTabsViewController initWithDeviceProvider:primaryDeviceUUID:profileIdentifier:](v4, "initWithDeviceProvider:primaryDeviceUUID:profileIdentifier:", v5, v9, v6);

  -[CloudTabsViewController setDelegate:](v7, "setDelegate:", self);
  -[CloudTabsViewController setLinkPreviewProvider:](v7, "setLinkPreviewProvider:", self);
  -[CloudTabsViewController setNavigationIntentHandler:](v7, "setNavigationIntentHandler:", self);
  -[CloudTabsViewController setTabGroupProvider:](v7, "setTabGroupProvider:", self->_tabController);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3A40]), "initWithRootViewController:", v7);
  objc_msgSend(v8, "setModalPresentationStyle:", 2);
  -[BrowserController _presentModalViewController:]((id *)&self->super.super.super.isa, v8);

}

- (void)toggleShowWebpageStatusBar
{
  void *v3;
  uint64_t v4;
  int v5;
  char v6;
  void *v7;
  id v8;

  objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *MEMORY[0x1E0D4F1F0];
  v8 = v3;
  v5 = objc_msgSend(v3, "BOOLForKey:", *MEMORY[0x1E0D4F1F0]);
  v6 = v5;
  objc_msgSend(v8, "setBool:forKey:", v5 ^ 1u, v4);
  if ((v6 & 1) == 0)
  {
    -[BrowserRootViewController updateUsesWebpageStatusBar](self->_rootViewController, "updateUsesWebpageStatusBar");
    -[BrowserRootViewController statusBarView](self->_rootViewController, "statusBarView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "displayStatusBarIsEnabledMessage");

  }
}

- (BOOL)tabItem:(id)a3 matchesSearchText:(id)a4
{
  return -[TabCollectionViewProviding tabItem:matchesSearchText:](self->_tabCollectionViewProvider, "tabItem:matchesSearchText:", a3, a4);
}

- (BOOL)cloudTabsViewController:(id)a3 tabItem:(id)a4 matchesSearchText:(id)a5
{
  return -[TabCollectionViewProviding tabItem:matchesSearchText:](self->_tabCollectionViewProvider, "tabItem:matchesSearchText:", a4, a5);
}

- (BOOL)catalogPopoverIsShowing
{
  void *v2;
  char v3;

  -[BrowserController _catalogViewController]((id *)&self->super.super.super.isa);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "popoverIsShowing");

  return v3;
}

- (CGRect)webExtensionWindowGeometry
{
  id WeakRetained;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGRect result;

  WeakRetained = objc_loadWeakRetained((id *)&self->_uiDelegate);
  objc_msgSend(WeakRetained, "browserControllerWindowFrame:", self);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  v12 = v5;
  v13 = v7;
  v14 = v9;
  v15 = v11;
  result.size.height = v15;
  result.size.width = v14;
  result.origin.y = v13;
  result.origin.x = v12;
  return result;
}

- (CGSize)webExtensionTabSize
{
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CGSize result;

  -[BrowserController tabContentContainerView]((id *)&self->super.super.super.isa);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bounds");
  v5 = v4;
  v7 = v6;

  -[BrowserRootViewController contentContainerViewFrameForBrowserSize:](self->_rootViewController, "contentContainerViewFrameForBrowserSize:", v5, v7);
  v9 = v8;
  v11 = v10;
  result.height = v11;
  result.width = v9;
  return result;
}

- (BOOL)activeWebExtensionWindowIsFocused
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)&self->_scene);
  if (objc_msgSend(WeakRetained, "activationState"))
    v3 = 0;
  else
    v3 = objc_msgSend(WeakRetained, "_isKeyWindowScene");

  return v3;
}

- (NSArray)webExtensionWindows
{
  WebExtensionWindow *privateExtensionWindow;
  void *v4;
  WebExtensionWindow *normalExtensionWindow;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  if (-[BrowserController isPrivateBrowsingAvailable](self, "isPrivateBrowsingAvailable"))
  {
    privateExtensionWindow = self->_privateExtensionWindow;
    v7[0] = self->_normalExtensionWindow;
    v7[1] = privateExtensionWindow;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    normalExtensionWindow = self->_normalExtensionWindow;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &normalExtensionWindow, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return (NSArray *)v4;
}

- (NSArray)tabDocumentsForActiveTabThatCanReceiveMessages
{
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "safari_addObjectUnlessNil:", v4);

  objc_msgSend(v3, "safari_addObjectUnlessNil:", self->_previewDocument);
  objc_msgSend(v3, "safari_addObjectUnlessNil:", self->_previousContinuousItemDocument);
  objc_msgSend(v3, "safari_addObjectUnlessNil:", self->_nextContinuousItemDocument);
  return (NSArray *)v3;
}

- (id)webExtensionWindowForTab:(id)a3
{
  id v4;
  int *v5;
  id v6;

  v4 = a3;
  if ((objc_msgSend(v4, "isPrivateBrowsingEnabled") & 1) != 0)
  {
    if (!-[BrowserController isPrivateBrowsingAvailable](self, "isPrivateBrowsingAvailable"))
    {
      v6 = 0;
      goto LABEL_7;
    }
    v5 = &OBJC_IVAR___BrowserController__privateExtensionWindow;
  }
  else
  {
    v5 = &OBJC_IVAR___BrowserController__normalExtensionWindow;
  }
  v6 = *(id *)((char *)&self->super.super.super.isa + *v5);
LABEL_7:

  return v6;
}

- (void)validateExtensionToolbarItemsInWindow:(id)a3
{
  int v4;
  void *v5;
  id v6;

  v6 = a3;
  v4 = objc_msgSend(v6, "isPrivateWindow");
  if (v4 == -[BrowserController isPrivateBrowsingEnabled](self, "isPrivateBrowsingEnabled"))
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "validateExtensionToolbarItems");

    -[BrowserController _updateButtonsAnimatingTabBar:]((uint64_t)self, 1);
  }

}

- (void)overlayDidHide:(id)a3
{
  id v4;

  -[BrowserController _visibleAppBanner]((uint64_t)self);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setInitiallyBehindNavigationBar:", 1);
  -[BrowserController _setShowingAppBanner:isShowing:]((uint64_t)self, v4, 1);
  objc_msgSend(v4, "setInitiallyBehindNavigationBar:", 0);

}

- (void)openLibrary:(id)a3
{
  -[TabController openLibraryForType:](self->_tabController, "openLibraryForType:", a3);
}

- (void)tabBarManager:(id)a3 didCreateTabBar:(id)a4
{
  id v6;
  id v7;
  id v8;

  v8 = a3;
  v6 = a4;
  objc_msgSend(v6, "setNavigationIntentHandler:", self);
  objc_msgSend(v8, "inlineTabBar");
  v7 = (id)objc_claimAutoreleasedReturnValue();

  if (v7 == v6)
    objc_msgSend(v6, "setAccessibilityIdentifier:", CFSTR("UnifiedTabBar"));
  -[BrowserController _addInteractionsForTabBar:]((uint64_t)self, v6);
  if (objc_msgSend(v6, "isStandalone"))
    objc_msgSend(v6, "setContentHidden:", -[BrowserRootViewController isShowingTabBar](self->_rootViewController, "isShowingTabBar") ^ 1);

}

- (void)tabBarManagerDidUpdateDisplayMode:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  -[BrowserRootViewController updateTabHoverPreview](self->_rootViewController, "updateTabHoverPreview");
  -[BrowserController _updateBookmarksMenuProvider]((uint64_t)self);
  -[BrowserController updateShowingTabBarAnimated:](self, "updateShowingTabBarAnimated:", 0);
  if (objc_msgSend(v5, "displayMode"))
    -[BrowserController updateDynamicBarGeometry](self, "updateDynamicBarGeometry");
  else
    -[UIContextMenuInteraction dismissMenu](self->_unifiedTabBarContextMenuInteraction, "dismissMenu");
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "validateExtensionToolbarItems");

}

- (BOOL)_isTabBarShown
{
  void *v1;
  void *v2;
  _BOOL8 v3;
  void *v4;

  if (!a1)
    return 0;
  objc_msgSend(*(id *)(a1 + 280), "unifiedBar");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 && (objc_msgSend(v1, "isHidden") & 1) == 0)
  {
    objc_msgSend(v2, "window");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v4 != 0;

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

- (BOOL)shouldReportUnifiedTabBarAnalytics
{
  _BOOL4 isTabBar;

  isTabBar = -[BrowserController _isTabBarShown]((uint64_t)self);
  if (isTabBar)
    LOBYTE(isTabBar) = -[BrowserController tabBarDisplayMode](self, "tabBarDisplayMode") != 0;
  return isTabBar;
}

- (int64_t)unifiedTabBarLayoutStyle
{
  return -[BrowserController tabBarDisplayMode](self, "tabBarDisplayMode") == 2;
}

- (unint64_t)numberOfTabsInCurrentTabBar
{
  void *v2;
  void *v3;
  void *v4;
  unint64_t v5;

  -[BrowserController tabBarManager](self, "tabBarManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "itemArrangement");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "items");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");

  return v5;
}

- (BOOL)tabBarIsCurrentlyScrollable
{
  void *v2;
  void *v3;
  char v4;

  -[BrowserController tabBarManager](self, "tabBarManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "effectiveTabBar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_opt_respondsToSelector() & 1) != 0)
    v4 = objc_msgSend(v3, "isCurrentlyScrollable");
  else
    v4 = 0;

  return v4;
}

- (BOOL)tabsShowOnlyIcons
{
  return 0;
}

- (BOOL)backgroundColorInTabBarEnabled
{
  void *v2;
  char v3;

  objc_msgSend(MEMORY[0x1E0C99EA0], "_sf_safariDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLForKey:", *MEMORY[0x1E0D4F118]) ^ 1;

  return v3;
}

- (void)createNewBookmarkWithTitle:(id)a3
{
  void *v3;
  id v5;
  void *v6;
  id v7;

  v5 = a3;
  v7 = v5;
  if (!v5)
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "titleForNewBookmark");
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  -[BrowserController _addBookmarkForCurrentTabKeyPressed:title:]((id *)&self->super.super.super.isa, 0, v5);
  v6 = v7;
  if (!v7)
  {

    v6 = 0;
  }

}

- (void)createReadingListItem
{
  -[BrowserController addToReadingList:](self, "addToReadingList:", 0);
}

- (void)openBookmarkWithUUIDString:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  objc_msgSend(MEMORY[0x1E0DCCBA0], "mainBookmarkCollection");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bookmarkWithUUID:", v8);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0D4EF70], "builder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setPrefersOpenInNewTab:", 1);
    objc_msgSend(v6, "setPreferredTabOrder:", 1);
    objc_msgSend(v6, "navigationIntentWithBookmark:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[BrowserController dispatchNavigationIntent:](self, "dispatchNavigationIntent:", v7);

  }
}

- (void)openBookmarkWithUUIDString:(id)a3 inTabWithUUID:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;

  v6 = a3;
  -[TabController tabWithUUID:](self->_tabController, "tabWithUUID:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0DCCBA0], "mainBookmarkCollection");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "bookmarkWithUUID:", v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      -[TabController setActiveTab:animated:](self->_tabController, "setActiveTab:animated:", v7, 1);
      -[BrowserController dismissTransientUIAnimated:](self, "dismissTransientUIAnimated:", 1);
      objc_msgSend(MEMORY[0x1E0D4EF70], "builder");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setPreferredTabOrder:", 1);
      objc_msgSend(v10, "navigationIntentWithBookmark:", v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[BrowserController dispatchNavigationIntent:](self, "dispatchNavigationIntent:", v11);

    }
    else
    {
      v13 = WBS_LOG_CHANNEL_PREFIXSiriLink();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        -[BrowserController openBookmarkWithUUIDString:inTabWithUUID:].cold.2();
    }

  }
  else
  {
    v12 = WBS_LOG_CHANNEL_PREFIXSiriLink();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      -[BrowserController openBookmarkWithUUIDString:inTabWithUUID:].cold.1();
  }

}

- (void)setReaderModeEnabled:(BOOL)a3
{
  -[BrowserController setShowingReader:animated:](self, "setShowingReader:animated:", a3, 1);
}

- (void)performSearchUsingQuery:(id)a3
{
  void *v4;
  TabDocument *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isBlank"))
  {
    objc_msgSend(v4, "unhibernate");
  }
  else
  {
    v5 = -[TabDocument initWithBrowserController:]([TabDocument alloc], "initWithBrowserController:", self);
    -[TabDocument setIsBlank:](v5, "setIsBlank:", 1);
    -[TabController insertNewTabDocument:forcingOrderAfterTabDocument:inBackground:animated:](self->_tabController, "insertNewTabDocument:forcingOrderAfterTabDocument:inBackground:animated:", v5, 0, 0, objc_msgSend(MEMORY[0x1E0DC3F10], "areAnimationsEnabled"));

  }
  if (!-[BrowserController isFavoritesFieldFocused](self, "isFavoritesFieldFocused"))
  {
    if (-[BrowserRootViewController usingLoweredBar](self->_rootViewController, "usingLoweredBar"))
    {
      -[BrowserRootViewController capsuleViewController](self->_rootViewController, "capsuleViewController");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "transitionToState:options:animated:completionHandler:", 2, 0, 1, 0);

    }
    else
    {
      -[BrowserController _focusNavigationBarWithCompletionHandler:](self, 0);
    }
  }
  -[BrowserRootViewController unifiedField](self->_rootViewController, "unifiedField");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setPerformingExternalSearch:", 1);
  -[BrowserRootViewController catalogViewController](self->_rootViewController, "catalogViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setQueryString:", v9);

  objc_msgSend(v7, "endExternalSearch");
  objc_msgSend(v7, "setPerformingExternalSearch:", 0);

}

- (void)performTabSearchUsingQuery:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = a3;
  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "presentationState") == 1)
  {

  }
  else
  {
    v5 = objc_msgSend(v4, "presentationState");

    if (v5 != 2)
      objc_msgSend(v4, "presentAnimated:", 0);
  }
  if (SFEnhancedTabOverviewEnabled())
  {
    -[TabCollectionViewProviding tabSwitcherViewController](self->_tabCollectionViewProvider, "tabSwitcherViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "beginSearchingWithSearchString:", v7);

  }
}

- (void)findString:(id)a3 onTabWithUUID:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  v6 = a4;
  -[TabController tabWithUUID:](self->_tabController, "tabWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7 && -[BrowserController canFindOnTabWithUUID:](self, "canFindOnTabWithUUID:", v6))
  {
    -[TabController setActiveTab:animated:](self->_tabController, "setActiveTab:animated:", v7, 1);
    -[BrowserController dismissTransientUIAnimated:](self, "dismissTransientUIAnimated:", 1);
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "findInteraction");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setSearchText:", v10);

    objc_msgSend(v8, "showFindOnPage");
  }

}

- (id)activeTabUUIDString
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 344), "activeTabDocument");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "uuid");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "UUIDString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

- (BOOL)canReadThis
{
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  BOOL v7;
  NSObject *This;
  uint8_t v10[16];
  uint8_t buf[16];

  if ((-[BrowserController _isWindowLockedForPrivateBrowsing]((uint64_t)self) & 1) != 0)
    return 0;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isReaderAvailable") & 1) == 0)
  {

LABEL_7:
    This = WBS_LOG_CHANNEL_PREFIXSiriReadThis();
    if (os_log_type_enabled(This, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1D7CA3000, This, OS_LOG_TYPE_INFO, "Safari Reader is not available for the currently active tab.", v10, 2u);
    }
    return 0;
  }
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "mediaSuspensionReasons");

  if (v5)
    goto LABEL_7;
  v6 = WBS_LOG_CHANNEL_PREFIXSiriReadThis();
  v7 = 1;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D7CA3000, v6, OS_LOG_TYPE_INFO, "Safari Reader is available for the currently active tab.", buf, 2u);
  }
  return v7;
}

- (BOOL)canReadActiveLanguage
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  int v14;
  void *v15;
  void *v16;
  NSObject *This;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE buf[24];
  __CFString *v28;
  _QWORD v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  -[BrowserController activeDocument](self, "activeDocument");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "translationContext");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "lastDeterminedWebpageLanguage");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v23 = 0;
  v24 = &v23;
  v25 = 0x2050000000;
  v5 = (void *)getAFPreferencesClass(void)::softClass;
  v26 = getAFPreferencesClass(void)::softClass;
  if (!getAFPreferencesClass(void)::softClass)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL21getAFPreferencesClassv_block_invoke;
    v28 = (__CFString *)&unk_1E9CF31D8;
    v29[0] = &v23;
    ___ZL21getAFPreferencesClassv_block_invoke((uint64_t)buf);
    v5 = (void *)v24[3];
  }
  v6 = objc_retainAutorelease(v5);
  _Block_object_dispose(&v23, 8);
  objc_msgSend((id)objc_opt_class(), "sharedPreferences", v23);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "outputVoice");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)MEMORY[0x1E0C99DC8];
  objc_msgSend(v8, "languageCode");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "localeWithLocaleIdentifier:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "languageCode");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isEqualToString:", v4);

  if ((v13 & 1) != 0)
  {
    v14 = 1;
  }
  else if (v8)
  {
    v14 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D4ED58], "sharedVoiceUtilities");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "downloadedSiriVoiceLanguages");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v16, "containsObject:", v4);

  }
  This = WBS_LOG_CHANNEL_PREFIXSiriReadThis();
  if (os_log_type_enabled(This, OS_LOG_TYPE_INFO))
  {
    if (v13)
      v18 = CFSTR("YES");
    else
      v18 = CFSTR("NO");
    v19 = v18;
    if (v14)
      v20 = CFSTR("YES");
    else
      v20 = CFSTR("NO");
    v21 = v20;
    *(_DWORD *)buf = 138544130;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v4;
    *(_WORD *)&buf[22] = 2114;
    v28 = v19;
    LOWORD(v29[0]) = 2114;
    *(_QWORD *)((char *)v29 + 2) = v21;
    _os_log_impl(&dword_1D7CA3000, This, OS_LOG_TYPE_INFO, "Completed analysis: voice = %{public}@; determinedLanguage: %{public}@; voiceLanguageMatchesTextLanguage = %{publi"
      "c}@; canRead = %{public}@",
      buf,
      0x2Au);

  }
  return v14;
}

- (void)siriReadThisVocalInvocation
{
  NSString *extractedArticleText;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  NSString *v10;
  NSString *tabUUIDStringForSiriReadThisVocalInvocation;
  id v12;
  id v13;
  id v14;

  objc_msgSend(MEMORY[0x1E0D4ED50], "sharedPlaybackController");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setupNowPlayingListenerIfNeeded");

  extractedArticleText = self->_extractedArticleText;
  if (!extractedArticleText)
    goto LABEL_5;
  if (!-[NSString length](extractedArticleText, "length"))
    goto LABEL_5;
  objc_msgSend(MEMORY[0x1E0D4ED58], "sharedVoiceUtilities");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "activeSiriReaderSessionURL");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "readerContext");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "readerURL");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v4, "safari_isEqualToURL:", v7);

  if (v8)
  {
    -[BrowserController _siriReadThisVocalInvocation]((id *)&self->super.super.super.isa);
  }
  else
  {
LABEL_5:
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "readerWebView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      -[BrowserController _extractTextFromReaderWebViewOfTab:]((uint64_t)self, v14);
      -[BrowserController _siriReadThisVocalInvocation]((id *)&self->super.super.super.isa);
    }
    else
    {
      objc_msgSend(v14, "createBrowserReaderViewIfNeeded");
      -[BrowserController activeTabUUIDString]((uint64_t)self);
      v10 = (NSString *)objc_claimAutoreleasedReturnValue();
      tabUUIDStringForSiriReadThisVocalInvocation = self->_tabUUIDStringForSiriReadThisVocalInvocation;
      self->_tabUUIDStringForSiriReadThisVocalInvocation = v10;

    }
  }
}

void __49__BrowserController__siriReadThisVocalInvocation__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *WeakRetained;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  NSObject *This;
  void *v19;
  uint8_t v20[8];
  _QWORD block[4];
  id v22;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    objc_msgSend(v3, "image");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "platformImage");
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    v9 = *(void **)(a1 + 32);
    v10 = *(void **)(a1 + 40);
    v11 = WeakRetained[96];
    v12 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v10, "safari_bestLanguageTag");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "readText:textBody:textIdentifier:textLocale:textLeadingImage:activationSource:", v10, v11, v12, v13, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), 1);

    objc_msgSend(*(id *)(a1 + 56), "readerURL");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D4ED58], "sharedVoiceUtilities");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setActiveSiriReaderSessionURL:", v14);

    v16 = *(_QWORD *)(a1 + 48);
    objc_msgSend(MEMORY[0x1E0D4ED58], "sharedVoiceUtilities");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setActiveSiriReaderSessionIdentifier:", v16);

    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __49__BrowserController__siriReadThisVocalInvocation__block_invoke_2;
    block[3] = &unk_1E9CF31B0;
    v22 = *(id *)(a1 + 64);
    dispatch_async(MEMORY[0x1E0C80D38], block);
    This = WBS_LOG_CHANNEL_PREFIXSiriReadThis();
    if (os_log_type_enabled(This, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1D7CA3000, This, OS_LOG_TYPE_DEFAULT, "Safari requested starting playback", v20, 2u);
    }
    objc_msgSend(MEMORY[0x1E0D4ED50], "sharedPlaybackController");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setCurrentPlaybackState:", 1);

  }
}

void __49__BrowserController__siriReadThisVocalInvocation__block_invoke_2(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "navigationBarItem");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setShowsSiriReaderPlayingIcon:", 1);

}

- (void)siriReadThisMenuInvocation
{
  NSString *extractedArticleText;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  NSString *v10;
  NSString *tabUUIDStringForSiriReadThisMenuInvocation;
  id v12;
  id v13;
  id v14;

  objc_msgSend(MEMORY[0x1E0D4ED50], "sharedPlaybackController");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setupNowPlayingListenerIfNeeded");

  extractedArticleText = self->_extractedArticleText;
  if (!extractedArticleText)
    goto LABEL_5;
  if (!-[NSString length](extractedArticleText, "length"))
    goto LABEL_5;
  objc_msgSend(MEMORY[0x1E0D4ED58], "sharedVoiceUtilities");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "activeSiriReaderSessionURL");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "readerContext");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "readerURL");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v4, "safari_isEqualToURL:", v7);

  if (v8)
  {
    -[BrowserController _siriReadThisMenuInvocation]((id *)&self->super.super.super.isa);
  }
  else
  {
LABEL_5:
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "readerWebView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      -[BrowserController _extractTextFromReaderWebViewOfTab:]((uint64_t)self, v14);
      -[BrowserController _siriReadThisMenuInvocation]((id *)&self->super.super.super.isa);
    }
    else
    {
      objc_msgSend(v14, "createBrowserReaderViewIfNeeded");
      -[BrowserController activeTabUUIDString]((uint64_t)self);
      v10 = (NSString *)objc_claimAutoreleasedReturnValue();
      tabUUIDStringForSiriReadThisMenuInvocation = self->_tabUUIDStringForSiriReadThisMenuInvocation;
      self->_tabUUIDStringForSiriReadThisMenuInvocation = v10;

    }
  }
}

void __48__BrowserController__siriReadThisMenuInvocation__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *WeakRetained;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  NSObject *This;
  void *v19;
  uint8_t v20[8];
  _QWORD block[4];
  id v22;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    objc_msgSend(v3, "image");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "platformImage");
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    v9 = *(void **)(a1 + 32);
    v10 = *(void **)(a1 + 40);
    v11 = WeakRetained[96];
    v12 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v10, "safari_bestLanguageTag");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "readText:textBody:textIdentifier:textLocale:textLeadingImage:activationSource:", v10, v11, v12, v13, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), 2);

    objc_msgSend(*(id *)(a1 + 56), "readerURL");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D4ED58], "sharedVoiceUtilities");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setActiveSiriReaderSessionURL:", v14);

    v16 = *(_QWORD *)(a1 + 48);
    objc_msgSend(MEMORY[0x1E0D4ED58], "sharedVoiceUtilities");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setActiveSiriReaderSessionIdentifier:", v16);

    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __48__BrowserController__siriReadThisMenuInvocation__block_invoke_2;
    block[3] = &unk_1E9CF31B0;
    v22 = *(id *)(a1 + 64);
    dispatch_async(MEMORY[0x1E0C80D38], block);
    This = WBS_LOG_CHANNEL_PREFIXSiriReadThis();
    if (os_log_type_enabled(This, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1D7CA3000, This, OS_LOG_TYPE_DEFAULT, "Safari requested starting playback", v20, 2u);
    }
    objc_msgSend(MEMORY[0x1E0D4ED50], "sharedPlaybackController");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setCurrentPlaybackState:", 1);

  }
}

void __48__BrowserController__siriReadThisMenuInvocation__block_invoke_2(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "navigationBarItem");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setShowsSiriReaderPlayingIcon:", 1);

}

- (BOOL)shouldShowListeningControls
{
  void *v2;
  void *v3;
  char v4;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "navigationBarItem");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "shouldShowListeningControls");

  return v4;
}

- (void)setShouldShowListeningControls:(BOOL)a3
{
  _BOOL8 v3;
  void *v4;
  id v5;

  v3 = a3;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "navigationBarItem");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setShouldShowListeningControls:", v3);

}

- (int64_t)siriReaderPlaybackStateForActiveTab
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  int64_t v14;
  void *v15;
  void *v16;
  char v17;
  char v18;

  objc_msgSend(MEMORY[0x1E0D4ED58], "sharedVoiceUtilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "activeSiriReaderSessionIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D4ED58], "sharedVoiceUtilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "activeSiriReaderSessionURL");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "readerContext");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "readerURL");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(self) = WBSIsEqual();

  if ((self & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0D4ED50], "sharedPlaybackController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "nowPlayingContentIdentifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "isEqualToString:", v4);

    if ((v12 & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0D4ED50], "sharedPlaybackController");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "currentPlaybackState");

      objc_msgSend(MEMORY[0x1E0D4ED50], "sharedPlaybackController");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "nowPlayingContentIdentifier");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "isEqualToString:", v4);
      if (v14 == 3)
        v18 = v17;
      else
        v18 = 0;

      if ((v18 & 1) != 0)
      {
        v14 = 1;
      }
      else if (v14 != 2 && v14 != 1 && v14 != 3)
      {
        v14 = 0;
      }
    }
    else
    {
      v14 = 3;
    }
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

- (void)createNewTabWithCompletionHandler:(id)a3
{
  id v4;
  TabController *tabController;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[TabController switchToTabGroupVisibleInSwitcherIfNeeded](self->_tabController, "switchToTabGroupVisibleInSwitcherIfNeeded");
  tabController = self->_tabController;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __55__BrowserController_createNewTabWithCompletionHandler___block_invoke;
  v7[3] = &unk_1E9CF43B0;
  v6 = v4;
  v7[4] = self;
  v8 = v6;
  -[TabController openNewTabWithOptions:completionHandler:](tabController, "openNewTabWithOptions:completionHandler:", 1, v7);

}

void __55__BrowserController_createNewTabWithCompletionHandler___block_invoke(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "activeTabDocument");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "uuid");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  if (a2)
  {

  }
}

- (void)createNewTabWithURL:(id)a3 isPrivate:(BOOL)a4 completionHandler:(id)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  TabController *tabController;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD v14[5];
  id v15;
  id v16;

  v6 = a4;
  v8 = a3;
  v9 = a5;
  -[TabController switchToTabGroupVisibleInSwitcherIfNeeded](self->_tabController, "switchToTabGroupVisibleInSwitcherIfNeeded");
  tabController = self->_tabController;
  if (v6)
    v11 = 2;
  else
    v11 = 1;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __69__BrowserController_createNewTabWithURL_isPrivate_completionHandler___block_invoke;
  v14[3] = &unk_1E9CF43D8;
  v12 = v9;
  v16 = v12;
  v14[4] = self;
  v13 = v8;
  v15 = v13;
  -[TabController openNewTabWithOptions:completionHandler:](tabController, "openNewTabWithOptions:completionHandler:", v11, v14);

}

void __69__BrowserController_createNewTabWithURL_isPrivate_completionHandler___block_invoke(_QWORD *a1, char a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  if ((a2 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 344), "activeTabDocument");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    v3 = (id)objc_msgSend(v6, "loadURL:userDriven:", a1[5], 0);
    v4 = a1[6];
    objc_msgSend(v6, "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

  }
  else
  {
    (*(void (**)(void))(a1[6] + 16))();
  }
}

- (void)openTabWithUUID:(id)a3
{
  void *v4;
  void *v5;
  NSObject *v6;

  -[TabController tabWithUUID:](self->_tabController, "tabWithUUID:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[TabController setActiveTab:animated:](self->_tabController, "setActiveTab:animated:", v4, 1);
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "dismissAnimated:", 1);

  }
  else
  {
    v6 = WBS_LOG_CHANNEL_PREFIXSiriLink();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      -[BrowserController openBookmarkWithUUIDString:inTabWithUUID:].cold.1();
  }

}

- (void)closeTabWithUUID:(id)a3
{
  void *v4;
  NSObject *v5;

  -[TabController tabWithUUID:](self->_tabController, "tabWithUUID:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[TabController closeTab:animated:](self->_tabController, "closeTab:animated:", v4, 1);
  }
  else
  {
    v5 = WBS_LOG_CHANNEL_PREFIXSiriLink();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      -[BrowserController closeTabWithUUID:].cold.1();
  }

}

- (void)createNewPrivateTab
{
  -[BrowserController openNewPrivateTab:](self, "openNewPrivateTab:", 0);
}

- (id)createNewTabGroupWithTitle:(id)a3
{
  void *v4;
  void *v5;

  -[TabController addNewTabGroupWithTitle:fromExistingTabs:](self->_tabController, "addNewTabGroupWithTitle:fromExistingTabs:", a3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[BrowserController scrollSidebarToTopAnimated:](self, "scrollSidebarToTopAnimated:", 1);
  objc_msgSend(v4, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (void)openTabGroupOfKind:(int64_t)a3 uuidString:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;

  v6 = a4;
  v9 = v6;
  if ((unint64_t)(a3 - 2) < 2)
  {
    -[WBTabGroupManager tabGroupWithUUID:](self->_tabGroupManager, "tabGroupWithUUID:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "profileIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[TabController setActiveProfileIdentifier:](self->_tabController, "setActiveProfileIdentifier:", v8);

    -[TabController setActiveTabGroupUUID:](self->_tabController, "setActiveTabGroupUUID:", v9);
  }
  else if (a3 == 1)
  {
    -[TabController selectPrivateTabGroup](self->_tabController, "selectPrivateTabGroup");
  }
  else if (!a3)
  {
    -[TabController selectLocalTabGroup](self->_tabController, "selectLocalTabGroup");
  }

}

- (void)setView:(unint64_t)a3 visible:(BOOL)a4
{
  __CFString **v6;

  if (-[BrowserController isViewVisible:](self, "isViewVisible:") != a4
    && -[BrowserController canToggleVisibilityForView:](self, "canToggleVisibilityForView:", a3))
  {
    switch(a3)
    {
      case 0uLL:
        v6 = kCollectionTypeBookmarks;
        goto LABEL_8;
      case 1uLL:
        v6 = kCollectionTypeHistory;
        goto LABEL_8;
      case 2uLL:
        v6 = kCollectionTypeReadingList;
LABEL_8:
        -[BrowserController _switchToCollectionOrToggleSidebar:]((id *)&self->super.super.super.isa, *v6);
        break;
      case 3uLL:
        -[BrowserController _toggleVisibilityOfStartPageCollection:]((uint64_t)self, CFSTR("SharedWithYouCollection"));
        break;
      case 4uLL:
        -[BrowserController toggleBookmarksPresentation](self, "toggleBookmarksPresentation");
        break;
      case 6uLL:
        -[BrowserController toggleTabView](self, "toggleTabView");
        break;
      default:
        return;
    }
  }
}

- (void)openStartPage
{
  void *v3;
  id v4;
  uint64_t v5;
  id v6;

  -[TabController currentTabs](self->_tabController, "currentTabs");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "lastObject");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v6, "isBlank"))
  {
    -[TabController setActiveTab:](self->_tabController, "setActiveTab:", v6);
    -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "presentationState") == 1)
    {

    }
    else
    {
      v5 = objc_msgSend(v4, "presentationState");

      if (v5 != 2)
      {
LABEL_7:

        goto LABEL_8;
      }
    }
    objc_msgSend(v4, "dismissAnimated:", 1);
    goto LABEL_7;
  }
  -[BrowserController openNewTab:](self, "openNewTab:", 0);
LABEL_8:

}

- (void)closeStartPage
{
  if (-[BrowserController activeTabIsBlank](self, "activeTabIsBlank"))
  {
    if (-[TabController canCloseTab](self->_tabController, "canCloseTab"))
      -[BrowserController closeActiveTab:](self, "closeActiveTab:", 0);
  }
}

- (void)navigateContinuousReadingListToDirection:(unint64_t)a3
{
  if (-[BrowserController canNavigateContinuousReadingListInDirection:](self, "canNavigateContinuousReadingListInDirection:"))
  {
    if (a3 == 1)
    {
      -[ContinuousReadingViewController loadNextItem](self->_continuousReadingViewController, "loadNextItem");
    }
    else if (!a3)
    {
      -[ContinuousReadingViewController loadPreviousItem](self->_continuousReadingViewController, "loadPreviousItem");
    }
  }
}

- (void)openClearHistoryViewControllerFor:(id)a3
{
  SafariClearBrowsingDataController *v4;
  void *v5;
  id v6;

  v6 = a3;
  v4 = objc_alloc_init(SafariClearBrowsingDataController);
  objc_storeStrong((id *)&self->_clearBrowsingDataController, v4);
  -[BrowserController _switchToCollectionOrToggleSidebar:]((id *)&self->super.super.super.isa, CFSTR("HistoryCollection"));
  -[BrowserController rootViewController](self, "rootViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[SafariClearBrowsingDataController showClearHistoryMenuFromViewController:profileIdentifier:](v4, "showClearHistoryMenuFromViewController:profileIdentifier:", v5, v6);

}

- (BOOL)isReaderAvailable
{
  void *v3;
  char v4;

  if (!-[BrowserController _isReaderModeFormatMenuItemAvailable]((uint64_t)self))
    return 0;
  -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isReaderAvailable");

  return v4;
}

- (BOOL)canCreateNewTab
{
  return -[_SFBarManager isBarItemEnabled:](self->_barManager, "isBarItemEnabled:", 7);
}

- (BOOL)canCloseTab
{
  return -[TabController canCloseTab](self->_tabController, "canCloseTab");
}

- (BOOL)canCreateNewPrivateTab
{
  return -[TabController canAddNewTabForPrivateBrowsing:](self->_tabController, "canAddNewTabForPrivateBrowsing:", 1);
}

- (BOOL)canFindOnTabWithUUID:(id)a3
{
  void *v4;
  BOOL v5;
  void *v6;

  -[TabController tabWithUUID:](self->_tabController, "tabWithUUID:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[BrowserController _isWindowLockedForPrivateBrowsing]((uint64_t)self)
    && (objc_msgSend(v4, "isPrivateBrowsingEnabled") & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    objc_msgSend(v4, "url");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v6 != 0;

  }
  return v5;
}

- (BOOL)areCustomTabGroupsEnabled
{
  void *v2;
  char v3;

  +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCustomTabGroupsEnabled");

  return v3;
}

- (BOOL)canToggleVisibilityForView:(unint64_t)a3
{
  void *v5;
  char v6;
  BOOL privateBrowsingAvailable;
  void *v8;

  +[FeatureManager sharedFeatureManager](FeatureManager, "sharedFeatureManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[BrowserController canShowSidebar](self, "canShowSidebar");
  privateBrowsingAvailable = 1;
  switch(a3)
  {
    case 0uLL:
      v6 = objc_msgSend(v5, "isBookmarksAvailable");
      goto LABEL_4;
    case 2uLL:
      v6 = objc_msgSend(v5, "isReadingListAvailable");
      goto LABEL_4;
    case 3uLL:
    case 4uLL:
LABEL_4:
      privateBrowsingAvailable = v6;
      break;
    case 5uLL:
      privateBrowsingAvailable = 0;
      break;
    case 6uLL:
      -[BrowserController activeLibraryType](self, "activeLibraryType");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      privateBrowsingAvailable = v8 == 0;

      break;
    case 8uLL:
      privateBrowsingAvailable = self->_privateBrowsingAvailable;
      break;
    default:
      break;
  }

  return privateBrowsingAvailable;
}

- (BOOL)isViewVisible:(unint64_t)a3
{
  BOOL v3;
  void *v4;
  char v5;

  v3 = 0;
  switch(a3)
  {
    case 0uLL:
      -[BrowserController currentBookmarksCollection](self, "currentBookmarksCollection");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("BookmarksCollection"));
      goto LABEL_9;
    case 1uLL:
      -[BrowserController currentBookmarksCollection](self, "currentBookmarksCollection");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("HistoryCollection"));
      goto LABEL_9;
    case 2uLL:
      -[BrowserController currentBookmarksCollection](self, "currentBookmarksCollection");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("ReadingListCollection"));
      goto LABEL_9;
    case 3uLL:
      -[LibraryController currentCollection](self->_libraryController, "currentCollection");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("SharedWithYouCollection"));
      goto LABEL_9;
    case 4uLL:
      return -[SidebarUIProxy isShowingSidebar](self->_sidebarUIProxy, "isShowingSidebar");
    case 6uLL:
      return -[TabCollectionViewProviding isShowingTabView](self->_tabCollectionViewProvider, "isShowingTabView");
    case 7uLL:
      -[TabController activeTabGroup](self->_tabController, "activeTabGroup");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "isLocal");
      goto LABEL_9;
    case 8uLL:
      -[TabController activeTabGroup](self->_tabController, "activeTabGroup");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "isPrivateBrowsing");
LABEL_9:
      v3 = v5;

      break;
    default:
      return v3;
  }
  return v3;
}

- (BOOL)activeTabIsBlank
{
  void *v3;
  char v4;
  void *v5;

  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "presentationState"))
  {
    v4 = 0;
  }
  else
  {
    -[TabController activeTabDocument](self->_tabController, "activeTabDocument");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v5, "isBlank");

  }
  return v4;
}

- (BOOL)canCloseActiveTab
{
  return -[TabController canCloseTab](self->_tabController, "canCloseTab");
}

- (BOOL)isShowingContinuousReadingList
{
  id v3;
  uint64_t v4;
  BOOL v5;

  -[TabCollectionViewProviding tabThumbnailCollectionView](self->_tabCollectionViewProvider, "tabThumbnailCollectionView");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "presentationState") == 1)
  {

  }
  else
  {
    v4 = objc_msgSend(v3, "presentationState");

    if (v4 != 2)
    {
      v5 = -[BrowserController _isInContinuousMode]((uint64_t)self);
      goto LABEL_6;
    }
  }
  v5 = 0;
LABEL_6:

  return v5;
}

- (BOOL)canNavigateContinuousReadingListInDirection:(unint64_t)a3
{
  void *v4;
  void *v5;
  void *v6;

  -[BrowserController continuousReadingController](self, "continuousReadingController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (a3)
    objc_msgSend(v4, "nextReadingListItem");
  else
    objc_msgSend(v4, "previousReadingListItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6 != 0;
}

- (void)prepareIntentInteractionWithCompletionHandler:(id)a3
{
  void *v4;
  int v5;
  void (**v6)(void);

  v6 = (void (**)(void))a3;
  +[LaunchStateController sharedController](LaunchStateController, "sharedController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hasCompletedLaunch");

  if (v5)
    v6[2]();
  else
    -[BrowserRootViewController setIntentInteractionCompletion:](self->_rootViewController, "setIntentInteractionCompletion:", v6);

}

- (void)playbackStateDidChangeForSiriReaderPlaybackController:(id)a3
{
  void *v4;
  _QWORD v5[5];

  objc_msgSend(MEMORY[0x1E0D4ED50], "sharedPlaybackController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __75__BrowserController_playbackStateDidChangeForSiriReaderPlaybackController___block_invoke;
  v5[3] = &unk_1E9CF4400;
  v5[4] = self;
  objc_msgSend(v4, "updateContentIdentifierOnQueue:completion:", MEMORY[0x1E0C80D38], v5);

}

void __75__BrowserController_playbackStateDidChangeForSiriReaderPlaybackController___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  objc_msgSend(MEMORY[0x1E0D4ED50], "sharedPlaybackController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setNowPlayingContentIdentifier:", v5);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 344), "activeTabDocument");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateShowsSiriReaderPlayingIcon");

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 184), "updateShouldShowListeningControls:", v5 != 0);
}

- (void)playbackContentIdentifierDidChangeForSiriReaderPlaybackController:(id)a3
{
  id v3;

  -[TabController activeTabDocument](self->_tabController, "activeTabDocument", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "updateShowsSiriReaderPlayingIcon");

}

- (void)profileWindow:(id)a3 selectProfile:(id)a4
{
  void *v5;
  void *v6;
  id v7;

  v7 = a4;
  objc_msgSend(v7, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[TabController setActiveProfileIdentifier:](self->_tabController, "setActiveProfileIdentifier:", v5);

  -[BrowserRootViewController bookmarksBar](self->_rootViewController, "bookmarksBar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setNeedsReloadData");

}

- (void)profileWindow:(id)a3 selectTabGroup:(id)a4
{
  id v5;

  objc_msgSend(a4, "uuid", a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[TabController setActiveTabGroupUUID:](self->_tabController, "setActiveTabGroupUUID:");

}

- (UniversalSearchSession)universalSearchSession
{
  UniversalSearchSession *universalSearchSession;
  UniversalSearchSession *v4;
  void *v5;
  UniversalSearchSession *v6;
  UniversalSearchSession *v7;

  universalSearchSession = self->_universalSearchSession;
  if (!universalSearchSession)
  {
    v4 = [UniversalSearchSession alloc];
    +[WBSParsecDSession sharedPARSession](UniversalSearchSession, "sharedPARSession");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[WBSParsecDSession initWithParsecdSession:skipAutoFillDataUpdates:](v4, "initWithParsecdSession:skipAutoFillDataUpdates:", v5, 0);
    v7 = self->_universalSearchSession;
    self->_universalSearchSession = v6;

    universalSearchSession = self->_universalSearchSession;
  }
  return universalSearchSession;
}

- (NSUUID)appIntentRequestIdentifier
{
  return self->_appIntentRequestIdentifier;
}

- (void)setAppIntentRequestIdentifier:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 696);
}

- (BOOL)isReaderViewStale
{
  return self->_readerViewStale;
}

- (void)setReaderViewStale:(BOOL)a3
{
  self->_readerViewStale = a3;
}

- (BOOL)readerShouldBeShownIfPossible
{
  return self->_readerShouldBeShownIfPossible;
}

- (TabDocument)previousContinuousItemDocument
{
  return self->_previousContinuousItemDocument;
}

- (void)setPreviousContinuousItemDocument:(id)a3
{
  objc_storeStrong((id *)&self->_previousContinuousItemDocument, a3);
}

- (void)setNextContinuousItemDocument:(id)a3
{
  objc_storeStrong((id *)&self->_nextContinuousItemDocument, a3);
}

- (TabDocument)cachedDocumentOnContinuousTransition
{
  return self->_cachedDocumentOnContinuousTransition;
}

- (void)setCachedDocumentOnContinuousTransition:(id)a3
{
  objc_storeStrong((id *)&self->_cachedDocumentOnContinuousTransition, a3);
}

- (void)setAppReviewPromptManager:(id)a3
{
  objc_storeStrong((id *)&self->_appReviewPromptManager, a3);
}

- (NSString)extractedArticleText
{
  return self->_extractedArticleText;
}

- (id)animationPendingDynamicBarAnimatorSteadyState
{
  return self->_animationPendingDynamicBarAnimatorSteadyState;
}

- (void)setAnimationPendingDynamicBarAnimatorSteadyState:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 776);
}

- (_SFBrowserSavedState)savedState
{
  return self->_savedState;
}

- (BOOL)tabViewPinchActive
{
  return self->_tabViewPinchActive;
}

- (BOOL)wantsUnifiedFieldFocused
{
  return self->_wantsUnifiedFieldFocused;
}

- (void)setWantsUnifiedFieldFocused:(BOOL)a3
{
  self->_wantsUnifiedFieldFocused = a3;
}

- (BOOL)shouldKeepKeyboardFocused
{
  return self->_shouldKeepKeyboardFocused;
}

- (void)setShouldKeepKeyboardFocused:(BOOL)a3
{
  self->_shouldKeepKeyboardFocused = a3;
}

- (int64_t)favoritesState
{
  return self->_favoritesState;
}

- (BOOL)canFocusNavigationBarURL
{
  return self->_canFocusNavigationBarURL;
}

- (void)setCanFocusNavigationBarURL:(BOOL)a3
{
  self->_canFocusNavigationBarURL = a3;
}

- (UITextRange)textRangeToRestoreAfterCompletionDetailIsDismissed
{
  return self->_textRangeToRestoreAfterCompletionDetailIsDismissed;
}

- (void)setTextRangeToRestoreAfterCompletionDetailIsDismissed:(id)a3
{
  objc_storeStrong((id *)&self->_textRangeToRestoreAfterCompletionDetailIsDismissed, a3);
}

- (_SFActivityViewController)presentedActivityViewController
{
  return (_SFActivityViewController *)objc_loadWeakRetained((id *)&self->_presentedActivityViewController);
}

- (WBSDigitalHealthManager)digitalHealthManager
{
  return self->_digitalHealthManager;
}

- (void)setTabDocumentPlayingPIPVideo:(id)a3
{
  objc_storeStrong((id *)&self->_tabDocumentPlayingPIPVideo, a3);
}

- (ApplicationShortcutController)shortcutController
{
  return self->_shortcutController;
}

- (BOOL)suppressWebExtensionEvents
{
  return self->_suppressWebExtensionEvents;
}

- (void)setSuppressWebExtensionEvents:(BOOL)a3
{
  self->_suppressWebExtensionEvents = a3;
}

- (BOOL)overridesUndoManagerForClosedTabs
{
  return self->_overridesUndoManagerForClosedTabs;
}

- (void)setOverridesUndoManagerForClosedTabs:(BOOL)a3
{
  self->_overridesUndoManagerForClosedTabs = a3;
}

- (TabDocument)speculativeLoadDocument
{
  return self->_speculativeLoadDocument;
}

- (BOOL)isBackgrounded
{
  return self->_backgrounded;
}

- (void)setBackgrounded:(BOOL)a3
{
  self->_backgrounded = a3;
}

- (id)intentSceneConfigurationCompletion
{
  return self->_intentSceneConfigurationCompletion;
}

- (void)setIntentSceneConfigurationCompletion:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 888);
}

- (_SFWebView)webView
{
  return self->_webView;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_tabCollectionViewProvider, 0);
  objc_storeStrong((id *)&self->_webView, 0);
  objc_storeStrong(&self->_intentSceneConfigurationCompletion, 0);
  objc_storeStrong((id *)&self->_speculativeLoadDocument, 0);
  objc_storeStrong((id *)&self->_libraryController, 0);
  objc_destroyWeak((id *)&self->_scene);
  objc_storeStrong((id *)&self->_shortcutController, 0);
  objc_storeStrong((id *)&self->_userActivityController, 0);
  objc_storeStrong((id *)&self->_tabDocumentPlayingPIPVideo, 0);
  objc_storeStrong((id *)&self->_digitalHealthManager, 0);
  objc_storeStrong((id *)&self->_textRangeToRestoreAfterCompletionDetailIsDismissed, 0);
  objc_storeStrong((id *)&self->_wkPreferences, 0);
  objc_storeStrong((id *)&self->_barManager, 0);
  objc_storeStrong((id *)&self->_tabViewPinchRecognizer, 0);
  objc_storeStrong((id *)&self->_savedState, 0);
  objc_storeStrong(&self->_animationPendingDynamicBarAnimatorSteadyState, 0);
  objc_storeStrong((id *)&self->_extractedArticleText, 0);
  objc_storeStrong((id *)&self->_appReviewPromptManager, 0);
  objc_storeStrong((id *)&self->_tabGroupManager, 0);
  objc_storeStrong((id *)&self->_bannerController, 0);
  objc_storeStrong((id *)&self->_cachedDocumentOnContinuousTransition, 0);
  objc_storeStrong((id *)&self->_sidebarUIProxy, 0);
  objc_storeStrong((id *)&self->_windowState, 0);
  objc_storeStrong((id *)&self->_UUID, 0);
  objc_destroyWeak((id *)&self->_browserWindowController);
  objc_storeStrong((id *)&self->_appIntentRequestIdentifier, 0);
  objc_storeStrong((id *)&self->_clearBrowsingDataController, 0);
  objc_storeStrong((id *)&self->_siriLinkCoordinator, 0);
  objc_destroyWeak((id *)&self->_activeAutoFillInternalFeedbackToastController);
  objc_storeStrong((id *)&self->_activeAutoFillInternalFeedbackToastDismissalTimer, 0);
  objc_storeStrong((id *)&self->_profileTitleInScene, 0);
  objc_storeStrong((id *)&self->_universalSearchSession, 0);
  objc_storeStrong((id *)&self->_lastTimerForDelayingSpeculativelyPreloadingTopHit, 0);
  objc_storeStrong((id *)&self->_tabUUIDStringForSiriReadThisMenuInvocation, 0);
  objc_storeStrong((id *)&self->_tabUUIDStringForSiriReadThisVocalInvocation, 0);
  objc_storeStrong((id *)&self->_dateReaderOpened, 0);
  objc_storeStrong((id *)&self->_activityNoticeTopConstraint, 0);
  objc_storeStrong((id *)&self->_queuedToastViewControllers, 0);
  objc_storeStrong((id *)&self->_currentlyPresentedToastViewController, 0);
  objc_storeStrong((id *)&self->_cachedParticipantLists, 0);
  objc_storeStrong((id *)&self->_defaultWebpagePreferences, 0);
  objc_storeStrong((id *)&self->_extensionActionPanel, 0);
  objc_storeStrong((id *)&self->_privateExtensionWindow, 0);
  objc_storeStrong((id *)&self->_normalExtensionWindow, 0);
  objc_storeStrong((id *)&self->_queryStringWhilePerformingRootViewControllerSizeTransition, 0);
  objc_storeStrong((id *)&self->_catalogViewControllerStateForSizeChange, 0);
  objc_storeStrong((id *)&self->_speculativeLoadURL, 0);
  objc_storeStrong((id *)&self->_spinnerController, 0);
  objc_destroyWeak((id *)&self->_viewControllerToDismissWhileBeingPresented);
  objc_storeStrong((id *)&self->_viewControllersPendingPresentation, 0);
  objc_destroyWeak((id *)&self->_uiDelegate);
  objc_destroyWeak((id *)&self->_tabGroupPickerViewController);
  objc_storeStrong((id *)&self->_unifiedTabBarContextMenuInteraction, 0);
  objc_storeStrong((id *)&self->_tabDragDropController, 0);
  objc_storeStrong((id *)&self->_tabController, 0);
  objc_storeStrong((id *)&self->_scrollingStatusBar, 0);
  objc_storeStrong((id *)&self->_sceneID, 0);
  objc_storeStrong((id *)&self->_searchStateCache, 0);
  objc_storeStrong((id *)&self->_scrollView, 0);
  objc_storeStrong((id *)&self->_saveToFilesOperation, 0);
  objc_storeStrong((id *)&self->_cachedCatalogViewController, 0);
  objc_storeStrong((id *)&self->_rootViewController, 0);
  objc_storeStrong((id *)&self->_resignActiveDate, 0);
  objc_storeStrong((id *)&self->_reasonsForIgnoringUserInteraction, 0);
  objc_storeStrong((id *)&self->_progressSuppressingDocument, 0);
  objc_storeStrong((id *)&self->_profileWindow, 0);
  objc_storeStrong((id *)&self->_prewarmedActionPanel, 0);
  objc_storeStrong((id *)&self->_previousContinuousItemDocument, 0);
  objc_storeStrong((id *)&self->_previewedDownload, 0);
  objc_storeStrong((id *)&self->_previewDocumentCloseTimer, 0);
  objc_storeStrong((id *)&self->_previewDocument, 0);
  objc_destroyWeak((id *)&self->_presentedActivityViewController);
  objc_storeStrong((id *)&self->_pageFormatMenuController, 0);
  objc_storeStrong((id *)&self->_nextContinuousItemDocument, 0);
  objc_storeStrong((id *)&self->_modalBookmarksController, 0);
  objc_storeStrong((id *)&self->_layoutToRestoreAfterOpeningNewTabs, 0);
  objc_storeStrong((id *)&self->_dropSessionsForTabBarVisibility, 0);
  objc_destroyWeak((id *)&self->_downloadsViewController);
  objc_storeStrong((id *)&self->_continuousReadingViewController, 0);
  objc_storeStrong((id *)&self->_continuousReadingController, 0);
  objc_storeStrong((id *)&self->_cachedMailContentProvider, 0);
  objc_storeStrong((id *)&self->_cachedConfiguration, 0);
  objc_storeStrong(&self->_blockRequestingScreenshotPDFData, 0);
  objc_destroyWeak((id *)&self->_backForwardListItemNeedingSnapshot);
}

void __39__BrowserController_didEnterBackground__block_invoke_2_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_1(&dword_1D7CA3000, v0, v1, "Background task expired while waiting for tab snapshots to save", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

- (void)cloudSharingController:failedToSaveShareWithError:.cold.1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_4_1(v1, v2, 5.7779e-34);
  OUTLINED_FUNCTION_0_2(&dword_1D7CA3000, v3, v4, "Failed to save shared tab group: %@", v5);

  OUTLINED_FUNCTION_3_0();
}

- (void)catalogViewController:presentViewControllerWithinPopover:completionHandler:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_0(&dword_1D7CA3000, v0, v1, "Failed to obtain source view for catalog view controller", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

- (void)catalogViewController:presentViewControllerWithinPopover:completionHandler:.cold.2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_0(&dword_1D7CA3000, v0, v1, "Failed to obtain source rect from catalog view controller", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

- (void)catalogViewController:presentViewControllerWithinPopover:completionHandler:.cold.3()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_4_1(v1, v2, 5.8381e-34);
  OUTLINED_FUNCTION_0_2(&dword_1D7CA3000, v3, v4, "Trying to present catalog popover when it is already presented by: %{public}@", v5);

  OUTLINED_FUNCTION_3_0();
}

- (void)catalogViewController:(uint64_t)a3 presentViewControllerWithinPopover:(void *)a4 completionHandler:.cold.4(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6;
  os_log_t v7;
  uint8_t *v8;

  OUTLINED_FUNCTION_4_1((uint64_t)a1, a2, 5.8381e-34);
  OUTLINED_FUNCTION_0_2(&dword_1D7CA3000, v6, v7, "Trying to present catalog popover when we already have a view controller being presented: %{public}@", v8);

  OUTLINED_FUNCTION_3_0();
}

void __47__BrowserController__readerVisibilityDidChange__block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_2(&dword_1D7CA3000, v0, v1, "Safari couldn't extract text to be summarized with error:%@", v2);
  OUTLINED_FUNCTION_10();
}

- (void)snapshotTabDocument:size:topBackdropHeight:options:completion:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_1(&dword_1D7CA3000, v0, v1, "TabDocument should not be nil when requesting a snapshot provider.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

- (void)_presentModalViewController:fromPopoverSource:useAdaptivePresentationInCompact:animated:completion:.cold.1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_4_1(v1, v2, 5.8381e-34);
  OUTLINED_FUNCTION_0_2(&dword_1D7CA3000, v3, v4, "Trying to present view controller from bar item when it is already presented by: %{public}@", v5);

  OUTLINED_FUNCTION_3_0();
}

void __32__BrowserController_closeWindow__block_invoke_678_cold_1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_4_1(v1, v2, 5.8381e-34);
  OUTLINED_FUNCTION_0_2(&dword_1D7CA3000, v3, v4, "Failed to destroy scene: %{public}@", v5);

  OUTLINED_FUNCTION_3_0();
}

void __75__BrowserController_addBookmarkNavController_didFinishWithResult_bookmark___block_invoke_cold_1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_4_1(v1, v2, 5.8381e-34);
  OUTLINED_FUNCTION_0_2(&dword_1D7CA3000, v3, v4, "Could not save lead image for bookmark from keyboard shortcut in with error: %{public}@", v5);

  OUTLINED_FUNCTION_3_0();
}

- (void)handleNavigationIntent:completion:.cold.1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_4_1(v1, v2, 5.8381e-34);
  OUTLINED_FUNCTION_10_0(&dword_1D7CA3000, v3, v4, "Navigate to %{public}@", v5);

  OUTLINED_FUNCTION_3_0();
}

void __56__BrowserController__extractTextFromReaderWebViewOfTab___block_invoke_cold_1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_4_1(v1, v2, 5.8381e-34);
  OUTLINED_FUNCTION_0_2(&dword_1D7CA3000, v3, v4, "Error extracting contents of webpage as a string: %{public}@; page will not be donated to sirireaderd",
    v5);

  OUTLINED_FUNCTION_3_0();
}

- (void)_stringByRemovingContentBetweenZeroWidthSpacesForText:.cold.1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_4_1(v1, v2, 5.8381e-34);
  OUTLINED_FUNCTION_0_2(&dword_1D7CA3000, v3, v4, "Error removing unwanted summary or table of contents text: %{public}@", v5);

  OUTLINED_FUNCTION_3_0();
}

- (void)tabDocumentCommitPreviewedDocument:.cold.1()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  _os_log_fault_impl(&dword_1D7CA3000, v0, OS_LOG_TYPE_FAULT, "Preview document to speculatively commit to is nil, old document to replace is %{private}@", v1, 0xCu);
  OUTLINED_FUNCTION_10();
}

- (void)tabDocumentCommitPreviewedDocumentAsNewTab:(os_log_t)log inBackground:.cold.1(char a1, uint64_t a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3[0] = 67109379;
  v3[1] = a1 & 1;
  v4 = 2117;
  v5 = a2;
  _os_log_fault_impl(&dword_1D7CA3000, log, OS_LOG_TYPE_FAULT, "Trying to open webpage link in new tab, but the cached _previewDocument is nil; opening in background: %i; Source ta"
    "b: %{sensitive}@",
    (uint8_t *)v3,
    0x12u);
  OUTLINED_FUNCTION_10();
}

- (void)switchFromTabDocument:toTabDocument:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_0(&dword_1D7CA3000, v0, v1, "Switched to a nil active document", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

void __51__BrowserController_tabDocumentShouldBecomeActive___block_invoke_cold_1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_4_1(v1, v2, 5.8381e-34);
  OUTLINED_FUNCTION_0_2(&dword_1D7CA3000, v3, v4, "Unable to open session: %{public}@", v5);

  OUTLINED_FUNCTION_3_0();
}

- (void)tabDocument:presentViewControllerAnimated:.cold.1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_4_1(v1, v2, 5.8381e-34);
  OUTLINED_FUNCTION_0_2(&dword_1D7CA3000, v3, v4, "Trying to present view controller for tab document when it is already presented by: %{public}@", v5);

  OUTLINED_FUNCTION_3_0();
}

- (void)scene:willConnectToSession:options:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_2(&dword_1D7CA3000, v0, v1, "Unable to handle session connection to recently closed tab: can't find tab data for UUID: %{public}@", v2);
  OUTLINED_FUNCTION_10();
}

- (void)openBookmarkWithUUIDString:inTabWithUUID:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_1(&dword_1D7CA3000, v0, v1, "Opening tab in wrong window", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

- (void)openBookmarkWithUUIDString:inTabWithUUID:.cold.2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_2(&dword_1D7CA3000, v0, v1, "Can't find bookmark %{public}@", v2);
  OUTLINED_FUNCTION_10();
}

- (void)closeTabWithUUID:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_1(&dword_1D7CA3000, v0, v1, "Closing tab in wrong window", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

@end
