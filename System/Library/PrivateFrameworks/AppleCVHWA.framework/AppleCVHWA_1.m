void sub_20E7E12D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void **v33;
  uint64_t v34;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;

  v36 = *v33;
  if (*v33)
  {
    *(_QWORD *)(a29 + 144 * a30 + 128) = v36;
    operator delete(v36);
  }
  v37 = *(std::__shared_weak_count **)(a29 + 144 * a30 + 96);
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(std::__shared_weak_count **)(a29 + 144 * a30 + 80);
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  sub_20E7B81B8(v34 - 144);
  sub_20E7B80F0(&a33);
  sub_20E7858BC(v34 - 192);
  _Unwind_Resume(a1);
}

void sub_20E7E1444(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  free(v1);
  __cxa_rethrow();
}

void sub_20E7E1458(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E7E1488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  uint64_t v49;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;

  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  v51 = a45;
  if (a45)
  {
    p_shared_owners = (unint64_t *)&a45->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = a43;
  if (a43)
  {
    v55 = (unint64_t *)&a43->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  sub_20E7858BC((uint64_t)&a31);
  sub_20E7858BC(v49 - 192);
  _Unwind_Resume(a1);
}

void sub_20E7E1524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v37;

  sub_20E7858BC(v35 - 104);
  v37 = *a30;
  if (*a30)
  {
    *(_QWORD *)(v33 - 16) = v37;
    operator delete(v37);
  }
  sub_20E7ABA04(a27);
  if (v33 != a11)
  {
    do
    {
      (**(void (***)(uint64_t))(a11 + v34))(a11 + v34);
      v34 += 144;
    }
    while (v34);
  }
  sub_20E7B81B8(v35 - 144);
  sub_20E7B80F0(&a33);
  sub_20E7858BC(v35 - 192);
  _Unwind_Resume(a1);
}

void sub_20E7E15A0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

void sub_20E7E15C4(uint64_t a1)
{
  free(*(void **)(a1 + 24));
}

uint64_t sub_20E7E15CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio16image_processing17ScaleSpacePyramidItE23MakevImage_BufferSharedEPvEUlPtE_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidItE23MakevImage_BufferSharedEPvEUlPtE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio16image_processing17ScaleSpacePyramidItE23MakevImage_BufferSharedEPvEUlPtE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidItE23MakevImage_BufferSharedEPvEUlPtE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E7E163C(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t *a9)
{
  uint64_t v9;
  char v10;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a8)
    v9 = a3;
  else
    v9 = 0;
  if (a7 + a6 * a3 + v9 > a4)
    sub_20E80ABB8();
  v10 = a8;
  v17 = a8;
  v18 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v19 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v18;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = a7;
  v23 = *a9;
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a9 + 8);
  *(_QWORD *)(a1 + 104) = v23;
  v24 = v17 | (4 * a6);
  *(_QWORD *)(a1 + 56) = v24 + a7;
  *(_QWORD *)(a1 + 64) = v24;
  v25 = (*(_QWORD *)(a1 + 128) - v22) >> 3;
  if (a5 > v25)
  {
    sub_20E7A3248((void **)(a1 + 120), a5 - v25);
LABEL_15:
    v26 = 0;
    v27 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v27++) = *(_QWORD *)(a1 + 72) + v26;
      v26 += 4 * a4;
    }
    while (a5 != v27);
    return;
  }
  if (a5 < v25)
    *(_QWORD *)(a1 + 128) = v22 + 8 * a5;
  if (a5)
    goto LABEL_15;
}

void sub_20E7E1788(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E7E17AC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x212BC47A4);
  return result;
}

uint64_t sub_20E7E17CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3vio8cv_types12ArrayDeleterIjEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIjEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3vio8cv_types12ArrayDeleterIjEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIjEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E7E183C(_WORD *a1, unsigned int *a2, int a3, unsigned __int16 *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int16x8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x8_t *v31;
  int32x4_t v32;
  unsigned int *v33;
  int32x4_t v34;
  unsigned int *v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t result;

  v4 = *a2;
  v5 = a2[1];
  v7 = a2[4];
  v6 = a2[5];
  v8 = *a4;
  v10 = a2[2];
  v9 = a2[3];
  v11 = a4[1];
  v12 = a4[2];
  v13 = a4[3];
  v14 = a4[4];
  *a1 = ((v9 + *a2) * v11 + (v7 + *a2) * v8 + (v10 + *a2) * v12 + (v5 + *a2) * v13 + *a2 * v14 + 512) >> 10;
  a1[1] = ((v9 + v4) * v12 + (v7 + v4) * v11 + (v10 + v4) * v13 + v5 * v14 + (v6 + v4) * v8 + 512) >> 10;
  v15 = a2[7];
  v16 = a2[6] + v4;
  a1[2] = ((v5 + v9) * v13 + (v7 + v4) * v12 + v10 * v14 + (v6 + v4) * v11 + v16 * v8 + 512) >> 10;
  v17 = (int16x8_t *)(a1 + 4);
  a1[3] = (v9 * v14 + (v10 + v7) * v13 + (v6 + v5) * v12 + v16 * v11 + (v15 + v4) * v8 + 512) >> 10;
  v18 = (a3 - 4);
  if (v18 >= 5)
  {
    v19 = v18 - 4;
    if ((unint64_t)(v18 - 4) >= 8)
    {
      v20 = 4;
      if ((~(a3 - 9) & 0xFFFFFFF8) != 0 && (a3 - 9) <= 0xFFFFFFF8)
      {
        v21 = 0;
        v22 = v19 & 0xFFFFFFFFFFFFFFF8;
        v20 = v19 & 0xFFFFFFFFFFFFFFF8 | 4;
        v23 = vdupq_n_s32(v7);
        v24 = vdupq_n_s32(v9);
        v25 = (int8x16_t)vdupq_n_s32(v10);
        v26 = (int8x16_t)vdupq_n_s32(v5);
        v27 = (int8x16_t)vdupq_n_s32(v4);
        v28 = vdupq_n_s32(v8);
        v29 = vdupq_n_s32(v11);
        v30 = vdupq_n_s32(v12);
        v31 = (int16x8_t *)((char *)v17 + 2 * (v19 & 0xFFFFFFFFFFFFFFF8));
        v32 = vdupq_n_s32(v13);
        v33 = a2 + 5;
        v34 = vdupq_n_s32(v14);
        do
        {
          v35 = &a2[v21 & 0xFFFFFFF8];
          v36 = vuzp2q_s32(vuzp2q_s32(v24, v23), v24);
          v37 = (int32x4_t)vextq_s8(v25, (int8x16_t)v36, 0xCuLL);
          v38 = (int32x4_t)vextq_s8(v26, (int8x16_t)v37, 0xCuLL);
          v39 = (int32x4_t)vextq_s8(v27, (int8x16_t)v38, 0xCuLL);
          v27 = *(int8x16_t *)v33;
          v40 = (int32x4_t)vextq_s8((int8x16_t)v23, *(int8x16_t *)v33, 0xCuLL);
          v23 = *((int32x4_t *)v33 + 1);
          v41 = (int32x4_t)vextq_s8(*(int8x16_t *)v33, (int8x16_t)v23, 0xCuLL);
          v36.i64[1] = *(_QWORD *)v33;
          v42 = (int32x4_t)vextq_s8(*(int8x16_t *)v33, (int8x16_t)v23, 8uLL);
          v43 = (int32x4_t)vextq_s8(*(int8x16_t *)v33, (int8x16_t)v23, 4uLL);
          v37.i32[3] = *(_OWORD *)v33;
          *v17++ = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(*(int32x4_t *)(v35 + 7), v38), v29), vaddq_s32(*(int32x4_t *)&a2[(v21 + 8) & 0xFFFFFFF8], v39), v28), vaddq_s32(*(int32x4_t *)(v35 + 6), v37), v30), vaddq_s32(*(int32x4_t *)v33, v36), v32), v40, v34), 0xAuLL), vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(
                             vmulq_s32(vaddq_s32(*(int32x4_t *)(v35 + 11), *(int32x4_t *)v33), v29),
                             vaddq_s32(*(int32x4_t *)&a2[((v21 + 8) & 0xFFFFFFF8) + 4], v40),
                             v28),
                           vaddq_s32(*(int32x4_t *)(v35 + 10), v43),
                           v30),
                         vaddq_s32(v23, v42),
                         v32),
                       v41,
                       v34),
                     0xAuLL);
          v33 += 8;
          v21 += 8;
          v24 = v41;
          v25 = (int8x16_t)v42;
          v26 = (int8x16_t)v43;
        }
        while (v22 != v21);
        if (v19 == v22)
          goto LABEL_13;
        v7 = v23.u32[3];
        v9 = v23.u32[2];
        v10 = v23.u32[1];
        v5 = v23.i32[0];
        v17 = v31;
        v4 = v27.u32[3];
      }
    }
    else
    {
      v20 = 4;
    }
    v31 = v17;
    do
    {
      v44 = a2[(v20 + 4)] + v4;
      v45 = a2[(v20 + 3)] + v5;
      v4 = v5;
      v5 = v10;
      v10 = v9;
      v9 = v7;
      v7 = a2[v20 + 1];
      v31->i16[0] = (v45 * v11 + v44 * v8 + (a2[(v20 + 2)] + v5) * v12 + (v7 + v10) * v13 + v9 * v14 + 512) >> 10;
      v31 = (int16x8_t *)((char *)v31 + 2);
      ++v20;
    }
    while (v18 != v20);
LABEL_13:
    v7 = a2[v18];
    v17 = v31;
    goto LABEL_14;
  }
  LODWORD(v18) = 4;
LABEL_14:
  v46 = a2[(v18 + 3)];
  v47 = v46 + a2[(v18 - 4)];
  v48 = a2[(v18 - 3)] + v46;
  v49 = a2[(v18 - 2)];
  v50 = a2[(v18 + 2)];
  v51 = a2[(v18 - 1)];
  v52 = a2[(v18 + 1)];
  v17->i16[0] = (v48 * v11 + v47 * v8 + (v50 + v49) * v12 + (v52 + v51) * v13 + v7 * v14 + 512) >> 10;
  v17->i16[1] = ((v49 + v46) * v11 + v48 * v8 + (v51 + v46) * v12 + v52 * v14 + (v7 + v50) * v13 + 512) >> 10;
  v53 = v7 + v46;
  v54 = v52 + v46;
  result = v50 * v14;
  v17->i16[2] = ((_DWORD)result + (v49 + v46) * v8 + (v51 + v46) * v11 + v54 * v13 + v53 * v12 + 512) >> 10;
  v17->i16[3] = ((v50 + v46) * v13 + v46 * v14 + (v51 + v46) * v8 + v54 * v12 + v53 * v11 + 512) >> 10;
  return result;
}

uint64_t sub_20E7E1BE0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  if (a6 && a3)
  {
    for (i = 0; i != a6; ++i)
    {
      v7 = 0;
      v8 = 2 * a3;
      do
      {
        v9 = *(unsigned __int16 *)(result + 2 * v7);
        if (v9 >= 0xFF01)
          sub_20E80C0DC();
        *(_BYTE *)(a2 + v7++) = (unsigned __int16)(v9 + 128) >> 8;
        v8 -= 2;
      }
      while (v8);
      a2 += a5;
      result += 2 * a4;
    }
  }
  return result;
}

BOOL sub_20E7E1C4C(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  if (a1[4] != 1 || a1[3] != 2)
    return 0;
  v2 = *a1;
  if (*a1 < 0xA0)
    return 0;
  v3 = a1[1];
  if (v3 < 0xA0)
    return 0;
  v4 = v3 > 0x140 && v2 > 0x140;
  v5 = a1[2];
  if (!v4 && v5 != 4)
    return 0;
  return v2 < 0x141 || v3 < 0x141 || v5 == 5;
}

uint64_t sub_20E7E1CAC(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  if (!a1)
    return 2;
  v2 = operator new(0x2C8uLL, MEMORY[0x24BEDB6B8]);
  if (!v2)
    return 3;
  v3 = v2;
  sub_20E7E2744((uint64_t)v2);
  result = 0;
  *a1 = v3;
  return result;
}

void sub_20E7E1D10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC47BC](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7E1D2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    sub_20E7EA6F8(a1 + 360);
    sub_20E7938D0(a1 + 336, *(_QWORD **)(a1 + 344));
    if (*(char *)(a1 + 63) < 0)
    {
      operator delete(*(void **)(a1 + 40));
      v2 = *(_QWORD *)a1;
      *(_QWORD *)a1 = 0;
      if (!v2)
        goto LABEL_5;
    }
    else
    {
      v2 = *(_QWORD *)a1;
      *(_QWORD *)a1 = 0;
      if (!v2)
      {
LABEL_5:
        MEMORY[0x212BC47D4](a1, 0x10B2C403B92AAD9);
        return 0;
      }
    }
    v3 = sub_20E7E2940(v2);
    MEMORY[0x212BC47D4](v3, 0x10B2C40FE7A4E93);
    goto LABEL_5;
  }
  return 2;
}

uint64_t sub_20E7E1DC8(uint64_t a1, int *a2)
{
  uint64x2_t v4;
  int v5;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v28;
  _BYTE v29[25];
  std::string __p;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  float v46;

  if (!a1)
    return 4;
  v4 = *(uint64x2_t *)(a2 + 2);
  v5 = *a2;
  v6 = 1.0;
  if (!*a2)
    goto LABEL_5;
  if (v5 != 3)
  {
    if (v5 != 2)
      goto LABEL_19;
LABEL_5:
    if (v4.i64[0] > 0x280uLL || v4.i64[1] > 0x2000uLL)
    {
      v7 = vcvtq_f64_u64(v4);
      v8 = vdivq_f64((float64x2_t)xmmword_20E80F270, v7);
      if (v8.f64[1] >= v8.f64[0])
        v6 = v8.f64[0];
      else
        v6 = v8.f64[1];
      v9 = (int8x16_t)vcvtq_u64_f64(vrndaq_f64(vmulq_n_f64(v7, v6)));
      v10 = (int8x16_t)xmmword_20E80F280;
LABEL_18:
      v4 = (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v10, (uint64x2_t)v9), v9, v10);
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  if (v4.i64[0] > 0x1000uLL || v4.i64[1] > 0x2000uLL)
  {
    v12 = vcvtq_f64_u64(v4);
    v13 = vdivq_f64((float64x2_t)xmmword_20E80F250, v12);
    if (v13.f64[1] >= v13.f64[0])
      v6 = v13.f64[0];
    else
      v6 = v13.f64[1];
    v9 = (int8x16_t)vcvtq_u64_f64(vrndaq_f64(vmulq_n_f64(v12, v6)));
    v10 = (int8x16_t)xmmword_20E80F260;
    goto LABEL_18;
  }
LABEL_19:
  v14 = v4.i64[0];
  if (v4.i64[0] <= 0x9FuLL)
    sub_20E80C134();
  v15 = v4.i64[1];
  if (v4.i64[1] <= 0x9FuLL)
    sub_20E80C108();
  *(_OWORD *)v29 = *(_OWORD *)a2;
  *(_OWORD *)&v29[9] = *(_OWORD *)((char *)a2 + 9);
  if (*((char *)a2 + 55) < 0)
  {
    v28 = v6;
    sub_20E7A8C78(&__p, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    v6 = v28;
  }
  else
  {
    __p = *(std::string *)(a2 + 8);
  }
  v16 = *(_OWORD *)(a2 + 70);
  v44 = *(_OWORD *)(a2 + 66);
  v45 = v16;
  v43 = *(_OWORD *)(a2 + 62);
  v46 = *((float *)a2 + 74);
  v39 = *(_OWORD *)(a2 + 46);
  v40 = *(_OWORD *)(a2 + 50);
  v41 = *(_OWORD *)(a2 + 54);
  v42 = *(_OWORD *)(a2 + 58);
  v35 = *(_OWORD *)(a2 + 30);
  v36 = *(_OWORD *)(a2 + 34);
  v37 = *(_OWORD *)(a2 + 38);
  v38 = *(_OWORD *)(a2 + 42);
  v31 = *(_OWORD *)(a2 + 14);
  v32 = *(_OWORD *)(a2 + 18);
  v33 = *(_OWORD *)(a2 + 22);
  v34 = *(_OWORD *)(a2 + 26);
  *(_QWORD *)&v29[8] = v14;
  *(_QWORD *)&v29[16] = v15;
  DWORD1(v42) = (float)(v46 * (float)((float)(v46 * (float)v14) * (float)v14));
  *(double *)(a1 + 312) = v6;
  if ((sub_20E7E7494((uint64_t)v29) & 1) != 0)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v29;
    *(_OWORD *)(a1 + 17) = *(_OWORD *)&v29[9];
    std::string::operator=((std::string *)(a1 + 40), &__p);
    v17 = v44;
    *(_OWORD *)(a1 + 256) = v43;
    *(_OWORD *)(a1 + 272) = v17;
    *(_OWORD *)(a1 + 288) = v45;
    *(float *)(a1 + 304) = v46;
    v18 = v40;
    *(_OWORD *)(a1 + 192) = v39;
    *(_OWORD *)(a1 + 208) = v18;
    v19 = v42;
    *(_OWORD *)(a1 + 224) = v41;
    *(_OWORD *)(a1 + 240) = v19;
    v20 = v36;
    *(_OWORD *)(a1 + 128) = v35;
    *(_OWORD *)(a1 + 144) = v20;
    v21 = v38;
    *(_OWORD *)(a1 + 160) = v37;
    *(_OWORD *)(a1 + 176) = v21;
    v22 = v32;
    *(_OWORD *)(a1 + 64) = v31;
    *(_OWORD *)(a1 + 80) = v22;
    v23 = v34;
    *(_OWORD *)(a1 + 96) = v33;
    *(_OWORD *)(a1 + 112) = v23;
    v24 = operator new();
    sub_20E7E63B0(v24, v29);
    v25 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v24;
    if (v25)
    {
      v26 = sub_20E7E2940(v25);
      MEMORY[0x212BC47D4](v26, 0x10B2C40FE7A4E93);
    }
    v11 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_30;
  }
  else
  {
    v11 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_30:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_20E7E20C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  MEMORY[0x212BC47D4](v20, 0x10B2C40FE7A4E93);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E7E2108(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20E7E2940(v2);
    MEMORY[0x212BC47D4](v3, 0x10B2C40FE7A4E93);
  }
  return a1;
}

void sub_20E7E214C(size_t width@<X2>, size_t height@<X3>, VTPixelTransferSessionRef *a3@<X0>, __CVBuffer *a4@<X1>, _BYTE *a5@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[10];
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  void *__p;
  void *v24;
  _QWORD v25[9];
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  CVPixelBufferCreate(0, width, height, 0x4C303038u, 0, &pixelBufferOut);
  if (a4 && pixelBufferOut)
  {
    if (!sub_20E7F8A78(a3, a4, pixelBufferOut))
      sub_20E80C160();
    sub_20E7F8B60(v25, pixelBufferOut, 1);
    sub_20E7E2A34((uint64_t)v20, v25);
    CVPixelBufferRelease(pixelBufferOut);
    sub_20E7E288C((uint64_t)a5, (uint64_t)v20);
    a5[144] = 1;
    v20[0] = &off_24C9A8A80;
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
    v8 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = v21;
    if (v21)
    {
      v12 = (unint64_t *)&v21->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v27;
    if (v27)
    {
      v15 = (unint64_t *)&v27->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v26;
    if (v26)
    {
      v18 = (unint64_t *)&v26->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    *a5 = 0;
    a5[144] = 0;
  }
}

void sub_20E7E2328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20E7ABA04((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20E7E233C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20E7B9978(&a10);
  sub_20E7ABA04((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7E2358(uint64_t a1, __CVBuffer **a2)
{
  VTPixelTransferSessionRef *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int8x16_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  VTPixelTransferSessionRef *v20;
  VTPixelTransferSessionRef v21;
  int v23;
  _QWORD v24[10];
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  void *__p;
  void *v28;
  char v29;
  VTPixelTransferSessionRef *v30;

  if (!a1)
    return 4;
  v4 = (VTPixelTransferSessionRef *)operator new();
  sub_20E7F8A74();
  v30 = v4;
  sub_20E7E214C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v4, *a2, v24);
  if (!v29)
  {
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KPAndDescriptorGeneratorInterface.cpp", 178, "src && \"Error while downsampling the input image\"", (void (*)(void *))sub_20E803DA4);
    abort();
  }
  ++*(_QWORD *)(a1 + 320);
  sub_20E7E65C4(*(_QWORD *)a1, (uint64_t)v24, 0, a1 + 360, v5, v6, v7, v8, v9, v10, v11, v12);
  if (!*(_BYTE *)(a1 + 12))
  {
    v23 = *(_DWORD *)(a1 + 8);
    if (v23 == 3)
    {
      sub_20E7EBD38(a1 + 360, (int *)(a1 + 328), *(unsigned __int8 *)(a1 + 232), *(_QWORD *)(a1 + 80));
    }
    else if (v23 == 2)
    {
      sub_20E7EAA54(a1 + 360, (uint64_t **)(a1 + 336), *(_BYTE *)(a1 + 232), *(_QWORD *)(a1 + 80));
    }
    else
    {
      if (v23)
      {
        v13 = 1;
        if (v29)
          goto LABEL_5;
        goto LABEL_17;
      }
      sub_20E7EA98C(a1 + 360, *(unsigned __int8 *)(a1 + 96));
    }
  }
  v13 = 0;
  if (v29)
  {
LABEL_5:
    v24[0] = &off_24C9A8A80;
    if (__p)
    {
      v28 = __p;
      operator delete(__p);
    }
    v14 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v25;
    if (v25)
    {
      v18 = (unint64_t *)&v25->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
LABEL_17:
  v20 = v30;
  v30 = 0;
  if (v20)
  {
    v21 = *v20;
    *v20 = 0;
    if (v21)
      ((void (*)(VTPixelTransferSessionRef))v20[1])(v21);
    MEMORY[0x212BC47D4](v20, 0xA0C40AFF93C70);
  }
  return v13;
}

void sub_20E7E257C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E7E2694((uint64_t **)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_20E7E2590(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC47D4](v1, 0xA0C40AFF93C70);
  _Unwind_Resume(a1);
}

void sub_20E7E25B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E7E25D0((uint64_t)&a9);
  sub_20E7E2694((uint64_t **)(v9 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_20E7E25D0(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (!*(_BYTE *)(a1 + 144))
    return a1;
  *(_QWORD *)a1 = &off_24C9A8A80;
  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v6)
    return a1;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t **sub_20E7E2694(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      ((void (*)(void))v2[1])();
    MEMORY[0x212BC47D4](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t sub_20E7E26F0(uint64_t a1)
{
  unint64_t v1;

  if (!*(_BYTE *)(a1 + 12))
    return (*(_QWORD *)(a1 + 496) - *(_QWORD *)(a1 + 488)) >> 3;
  v1 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 2);
  if (v1 < 2)
    return 0;
  else
    return (v1 - 1);
}

uint64_t sub_20E7E2744(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 2;
  *(_BYTE *)(a1 + 12) = 0;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x280uLL);
  *(_BYTE *)(a1 + 32) = 0;
  strcpy((char *)(a1 + 40), "/tmp/");
  *(_WORD *)(a1 + 63) = 261;
  *(_QWORD *)(a1 + 68) = 0x90000002DLL;
  *(_QWORD *)(a1 + 80) = 5000;
  *(_BYTE *)(a1 + 88) = 1;
  *(_DWORD *)(a1 + 92) = 1061997773;
  *(_BYTE *)(a1 + 96) = 0;
  *(int64x2_t *)(a1 + 104) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a1 + 120) = 5;
  *(_WORD *)(a1 + 128) = 256;
  *(_WORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 236) = xmmword_20E80DE00;
  *(_OWORD *)(a1 + 252) = xmmword_20E80DE10;
  *(_QWORD *)(a1 + 300) = 0x3E4CCCCD00004000;
  *(_OWORD *)(a1 + 268) = xmmword_20E80F290;
  *(_OWORD *)(a1 + 284) = unk_20E80F2A0;
  *(_QWORD *)(a1 + 312) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  *(_QWORD *)(a1 + 344) = 0;
  sub_20E7EA5D8(a1 + 360);
  return a1;
}

void sub_20E7E2858(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;

  v4 = v2;
  sub_20E7938D0(v4, *(_QWORD **)(v1 + 344));
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  sub_20E7E2108((uint64_t *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7E288C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  *(_QWORD *)a1 = &off_24C9A8A80;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v3 = (_QWORD *)(a2 + 32);
  sub_20E7B9B6C(a1, (__int128 *)(a2 + 72), *(_QWORD *)(a2 + 32), v3[1], v3[2], *(v3 - 2), *(v3 - 1), *((unsigned __int8 *)v3 - 24), v3 + 9);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return a1;
}

void sub_20E7E291C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 128) = v4;
    operator delete(v4);
  }
  sub_20E80C18C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7E2940(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *(void **)(a1 + 864);
  if (v2)
  {
    *(_QWORD *)(a1 + 872) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 736);
  if (v3)
  {
    *(_QWORD *)(a1 + 744) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 712);
  if (v4)
  {
    *(_QWORD *)(a1 + 720) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 688);
  if (v5)
  {
    *(_QWORD *)(a1 + 696) = v5;
    operator delete(v5);
  }
  sub_20E7E29EC(a1 + 648, *(_QWORD **)(a1 + 656));
  sub_20E7A0B04(a1 + 456);
  v6 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v6)
    (*(void (**)(void))(a1 + 312))();
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_20E7E29EC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20E7E29EC(a1, *a2);
    sub_20E7E29EC(a1, a2[1]);
    sub_20E7A0B04((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

uint64_t sub_20E7E2A34(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24C9A8A80;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v3 = a2[9];
  *(_QWORD *)&v10 = a2[8];
  *((_QWORD *)&v10 + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20E7B9B6C(a1, &v10, a2[3], a2[4], a2[5], a2[1], a2[2], *(unsigned __int8 *)a2, a2 + 12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (!*((_QWORD *)&v10 + 1))
    return a1;
  v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20E7E2B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void *v8;
  va_list va;

  va_start(va, a3);
  v6 = v5;
  sub_20E7858BC((uint64_t)va);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v3 + 128) = v8;
    operator delete(v8);
  }
  sub_20E7ABA04(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7E2B60(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  int *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;

  *(_QWORD *)a1 = &off_24C9A8F88;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = 0;
  v4 = (int *)(a1 + 16);
  *(_OWORD *)(a1 + 24) = xmmword_20E80F2E8;
  *(_OWORD *)(a1 + 40) = unk_20E80F2F8;
  *(_OWORD *)(a1 + 56) = xmmword_20E80F308;
  *(_OWORD *)(a1 + 72) = unk_20E80F318;
  *(_OWORD *)(a1 + 88) = xmmword_20E80F328;
  *(_OWORD *)(a1 + 104) = unk_20E80F338;
  *(_OWORD *)(a1 + 120) = xmmword_20E80F348;
  *(_OWORD *)(a1 + 136) = unk_20E80F358;
  *(_QWORD *)(a1 + 152) = 1;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  *(_OWORD *)(a1 + 48) = a2[2];
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 16) = v5;
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[7];
  *(_OWORD *)(a1 + 112) = a2[6];
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  v11 = a2[8];
  v12 = a2[9];
  v13 = a2[11];
  *(_OWORD *)(a1 + 176) = a2[10];
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  v14 = a2[12];
  v15 = a2[13];
  v16 = a2[14];
  *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 208) = v14;
  if ((__int128 *)(a1 + 16) != a2)
    sub_20E7E3654((_QWORD *)(a1 + 264), *((char **)a2 + 31), *((char **)a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 32) - *((_QWORD *)a2 + 31)) >> 3));
  v17 = operator new();
  sub_20E7E37CC(v17, (__int128 *)(a1 + 24), (__int128 *)(a1 + 88), *v4);
  v18 = (_QWORD *)*v3;
  *v3 = v17;
  if (v18)
    sub_20E7CEBA0((uint64_t)v3, v18);
  return a1;
}

void sub_20E7E2CBC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void *v5;
  _QWORD *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 272) = v5;
    operator delete(v5);
    v6 = (_QWORD *)*v1;
    *v1 = 0;
    if (!v6)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = (_QWORD *)*v1;
    *v1 = 0;
    if (!v6)
      goto LABEL_3;
  }
  sub_20E7CEBA0((uint64_t)v1, v6);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7E2D2C(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, _DWORD *a7)
{
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  signed int v15;
  int32x4_t *v16;

  if (a2 < 1 || a3 < 1)
    return 0;
  v7 = a4;
  v10 = *(_QWORD *)(a6 + 48);
  v8 = (uint64_t *)(a6 + 48);
  v9 = v10;
  v11 = v10 + 144 * a4;
  if (*(_DWORD *)(v11 + 32) - 1 <= a2 || *(_DWORD *)(v11 + 48) - 1 <= a3)
    return 0;
  v15 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(v9 + 144 * a4 + 120) + 8 * a3) + 2 * a2);
  sub_20E7E3FF0(a2, a3, a4, v8, a7);
  if (a7[13] != v15)
    sub_20E80C220();
  v16 = (int32x4_t *)&a7[18 * (v7 & 1)];
  if (a5)
    return sub_20E7E3CBC(v15, v16);
  else
    return sub_20E7E3C88(v15, v16);
}

int32x2_t sub_20E7E2E08(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, int a5, char a6, uint64_t a7)
{
  int32x2_t result;
  int v14;
  int v15;
  int v16;
  int v17;
  int32x2_t v18;
  int v19;
  float64x2_t v20;
  int32x2_t v21;
  _BYTE v22[36];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  sub_20E7E479C(a2, (uint64_t)v22, &v21);
  if (sub_20E7E3E38((uint64_t)v22, (uint64_t *)&v21, (uint64_t)&v20))
  {
    v14 = a5 >> 1;
    if (sub_20E7E3F2C(&v20, &v21, a5 >> 1, (int32x2_t *)&v17))
    {
      v15 = a2[13];
      *(_BYTE *)(a7 + 27) = 0;
      *(_WORD *)(a7 + 25) = 0;
      *(_OWORD *)(a7 + 44) = 0u;
      *(_OWORD *)(a7 + 60) = 0u;
      *(_OWORD *)(a7 + 76) = 0u;
      *(_OWORD *)(a7 + 92) = 0u;
      *(_OWORD *)(a7 + 108) = 0u;
      *(_DWORD *)(a7 + 124) = 0;
      v16 = v19 + v15;
      if (v16 < 0)
        v16 = -v16;
      *(_DWORD *)a7 = v17 + (a3 << (v14 + 6));
      result = vadd_s32(v18, (int32x2_t)vshl_u32((uint32x2_t)__PAIR64__(a5, a4), (uint32x2_t)((v14 + 6) | 0x400000000)));
      *(int32x2_t *)(a7 + 4) = result;
      *(_QWORD *)(a7 + 12) = 0;
      *(_DWORD *)(a7 + 20) = a5 - 1;
      *(_BYTE *)(a7 + 24) = a6;
      *(_DWORD *)(a7 + 28) = v16;
      *(_DWORD *)(a7 + 32) = 0;
      *(_DWORD *)(a7 + 36) = a3;
      *(_DWORD *)(a7 + 40) = a4;
    }
  }
  return result;
}

void sub_20E7E2F44(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int32x2_t v6;
  uint32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  int v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint32x2_t v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int32x2_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  __int32 v59;
  BOOL v60;
  uint64_t v62;
  int v63;
  int v64;
  signed int v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  char v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  unint64_t v78;
  _QWORD *v80;
  unint64_t v81;
  uint32x2_t v82;
  int32x4_t *v83;
  int32x2_t v85;
  int v86;
  uint64_t v87;
  int v88;
  char v89;
  __int16 v90;
  char v91;
  int v92;
  int v93;
  uint32x2_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int v100;
  __int16 v101;
  char v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  _DWORD v109[13];
  int v110;
  int32x2_t v111;
  int v112;
  int v113;
  float64x2_t v114;
  int32x2_t v115;
  _BYTE v116[36];
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = (uint64_t *)(a2 + 48);
  v11 = *(uint64_t **)(a1 + 8);
  v11[17] = 0;
  v11[18] = 0;
  v12 = v11[1];
  if (v12 <= 1)
    v12 = 1;
  v11[19] = v12 - 1;
  v13 = (void *)v11[20];
  v14 = v11[21] - (_QWORD)v13;
  if (v14 >= 1)
    bzero(v13, 8 * (((unint64_t)v14 >> 3) - ((unint64_t)v14 > 7)) + 8);
  v11[23] = 0;
  v11[24] = 0;
  v15 = *v11;
  if (*v11)
  {
    v16 = v11[25];
    if (v15 == 1)
    {
      v17 = 0;
LABEL_11:
      v21 = v15 - v17;
      v22 = (_QWORD *)(v16 + 24 * v17 + 8);
      do
      {
        *v22 = *(v22 - 1);
        v22 += 3;
        --v21;
      }
      while (v21);
      goto LABEL_13;
    }
    v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v18 = (uint64_t *)(v16 + 24);
    v19 = v15 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v20 = *v18;
      *(v18 - 2) = *(v18 - 3);
      v18[1] = v20;
      v18 += 6;
      v19 -= 2;
    }
    while (v19);
    if (v15 != v17)
      goto LABEL_11;
  }
LABEL_13:
  v23 = (void *)v11[28];
  v24 = v11[29] - (_QWORD)v23;
  if (v24 >= 1)
    bzero(v23, 8 * (((unint64_t)v24 >> 3) - ((unint64_t)v24 > 7)) + 8);
  if ((uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) > 0)
    bzero(*(void **)a6, 4 * (((*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2) - (*(_QWORD *)(a6 + 8) - *(_QWORD *)a6 > 3uLL)) + 4);
  v25 = *(void **)(a6 + 24);
  v26 = *(_QWORD *)(a6 + 32) - (_QWORD)v25;
  if (v26 >= 1)
    bzero(v25, 4 * (((unint64_t)v26 >> 2) - ((unint64_t)v26 > 3)) + 4);
  v27 = *(void **)(a6 + 48);
  v28 = *(_QWORD *)(a6 + 56) - (_QWORD)v27;
  if (v28 >= 1)
    bzero(v27, 4 * (((unint64_t)v28 >> 2) - ((unint64_t)v28 > 3)) + 4);
  v29 = *(void **)(a6 + 72);
  v30 = *(_QWORD *)(a6 + 80) - (_QWORD)v29;
  if (v30 >= 1)
    bzero(v29, 4 * (((unint64_t)v30 >> 2) - ((unint64_t)v30 > 3)) + 4);
  v31 = v9 - v8;
  v32 = *(void **)(a6 + 96);
  v33 = *(_QWORD *)(a6 + 104) - (_QWORD)v32;
  if (v33 >= 1)
    bzero(v32, 4 * (((unint64_t)v33 >> 2) - ((unint64_t)v33 > 3)) + 4);
  v34 = v31 >> 4;
  v35 = *(void **)(a6 + 120);
  v36 = *(_QWORD *)(a6 + 128) - (_QWORD)v35;
  if (v36 >= 1)
    bzero(v35, 4 * (((unint64_t)v36 >> 2) - ((unint64_t)v36 > 3)) + 4);
  v37 = 954437177 * v34;
  v38 = *(void **)(a6 + 144);
  v39 = *(_QWORD *)(a6 + 152) - (_QWORD)v38;
  if (v39 >= 1)
    bzero(v38, 4 * (((unint64_t)v39 >> 2) - ((unint64_t)v39 > 3)) + 4);
  v40 = *(void **)(a6 + 168);
  v41 = *(_QWORD *)(a6 + 176) - (_QWORD)v40;
  if (v41 >= 1)
    bzero(v40, 4 * (((unint64_t)v41 >> 2) - ((unint64_t)v41 > 3)) + 4);
  if (v37 > 2)
  {
    v75 = (v37 - 1);
    v42 = 1;
    while (1)
    {
      v43 = v42 - 1;
      v44 = (_QWORD *)(*a3 + 24 * (v42 - 1));
      v45 = v44[1] - *v44;
      if (v45)
        break;
LABEL_33:
      if (++v42 == v75)
        return;
    }
    v46 = 0;
    v78 = *(_QWORD *)(a5 + 8 * v43);
    v47 = v45 / 20;
    v83 = (int32x4_t *)&v109[18 * (v42 & 1)];
    v80 = (_QWORD *)(a6 + 24 * v43);
    v81 = v42 - 1;
    v48 = (uint32x2_t)vdup_n_s32((v42 >> 1) + 6);
    if (v47 <= 1)
      v49 = 1;
    else
      v49 = v47;
    while (1)
    {
      v52 = *v44 + v46;
      v53 = *(unsigned int *)(v52 + 8);
      if (v42 != v53)
        sub_20E80C24C();
      v54 = vshl_s32(*(int32x2_t *)(*v44 + v46), vneg_s32(vdup_n_s32((int)v53 >> 1)));
      if (v54.i32[0] < 1)
        goto LABEL_40;
      v55 = v54.i32[1];
      v56 = *v10 + 144 * v42;
      v57 = *(_DWORD *)(v56 + 48);
      v58 = *(_DWORD *)(v56 + 32) - 1;
      v59 = v57 - 1;
      v60 = v54.i32[1] < 1 || v58 <= v54.i32[0];
      if (v60 || v59 <= v54.i32[1])
        goto LABEL_40;
      v62 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 200);
      v63 = *(unsigned __int8 *)(v52 + 12);
      v64 = *(_DWORD *)(v52 + 16);
      v82 = (uint32x2_t)v54;
      v65 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(*v10 + 144 * v42 + 120) + 8 * v54.i32[1]) + 2 * v54.i32[0]);
      sub_20E7E3FF0(v54.i32[0], v54.i32[1], v42, v10, v109);
      if (v110 != v65)
        sub_20E80C220();
      if (v63)
      {
        if ((sub_20E7E3CBC(v65, v83) & 1) != 0)
          goto LABEL_55;
      }
      else if (sub_20E7E3C88(v65, v83))
      {
LABEL_55:
        if (v64 >= 0)
          v66 = v64;
        else
          v66 = -v64;
        v67 = v66 >> 5;
        if (v66 >> 5 >= 0x3F)
          v67 = 63;
        v68 = *(_DWORD *)(*v80 + 4 * v67);
        if (v68 <= 0xFFE)
          *(_DWORD *)(*v80 + 4 * v67) = v68 + 1;
        if (*(_QWORD *)(a4 + 8 * v81) <= v66
          && v78 > (uint64_t)(*(_QWORD *)(v62 + 24 * v81 + 8) - *(_QWORD *)(v62 + 24 * v81)) >> 7)
        {
          sub_20E7E479C(v109, (uint64_t)v116, &v115);
          if (sub_20E7E3E38((uint64_t)v116, (uint64_t *)&v115, (uint64_t)&v114))
          {
            v50 = sub_20E7E3F2C(&v114, &v115, v42 >> 1, &v111);
            if (v50)
            {
              v101 = 0;
              v102 = 0;
              v103 = 0u;
              v104 = 0u;
              v105 = 0u;
              v106 = 0u;
              v107 = 0u;
              v108 = 0;
              v69 = v113 + v110;
              v6 = vadd_s32(v111, (int32x2_t)vshl_u32(v82, v48));
              if (v113 + v110 < 0)
                v69 = -v69;
              v73 = v69;
              v74 = v112 + 16 * v42;
              v71 = v63;
              v72 = v42 - 1;
              v7 = v82;
            }
          }
          else
          {
            v50 = 0;
          }
          v51 = *(_QWORD **)(a1 + 8);
          v85 = v6;
          v86 = v74;
          v87 = 0;
          v88 = v72;
          v89 = v71;
          v90 = v101;
          v91 = v102;
          v92 = v73;
          v93 = 0;
          v94 = v7;
          v97 = v105;
          v98 = v106;
          v99 = v107;
          v100 = v108;
          v95 = v103;
          v96 = v104;
          sub_20E7CE580(v51, &v85, v81, v55, v50);
        }
      }
LABEL_40:
      v46 += 20;
      if (!--v49)
        goto LABEL_33;
    }
  }
}

_QWORD *sub_20E7E35A4(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;

  *a1 = &off_24C9A8F88;
  v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[1];
  a1[1] = 0;
  if (v3)
    sub_20E7CEBA0((uint64_t)(a1 + 1), v3);
  return a1;
}

void sub_20E7E35F4(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;

  *a1 = &off_24C9A8F88;
  v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[1];
  a1[1] = 0;
  if (v3)
    sub_20E7CEBA0((uint64_t)(a1 + 1), v3);
  JUMPOUT(0x212BC47D4);
}

_QWORD *sub_20E7E3654(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_23;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666)
LABEL_23:
      sub_20E78D874();
    v13 = 5 * v12;
    result = operator new(40 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

uint64_t sub_20E7E37CC(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;

  *(_QWORD *)a1 = 8;
  *(_OWORD *)(a1 + 200) = 0u;
  v5 = a1 + 200;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  *(_OWORD *)(a1 + 56) = a2[3];
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  *(_OWORD *)(a1 + 120) = a3[3];
  *(_OWORD *)(a1 + 104) = v11;
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  v12 = a4 - 2;
  *(_QWORD *)a1 = a4 - 2;
  v13 = *(_QWORD *)a2;
  v14 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 <= v14)
    v13 = *((_QWORD *)a2 + 1);
  v15 = 8 * (*(_QWORD *)a2 < v14);
  v16 = *((_QWORD *)a2 + 2);
  v17 = *((_QWORD *)a2 + 3);
  v18 = v13 >= v16;
  if (v13 <= v16)
    v13 = *((_QWORD *)a2 + 2);
  if (!v18)
    v15 = 16;
  v19 = v13 >= v17;
  if (v13 <= v17)
    v13 = *((_QWORD *)a2 + 3);
  if (!v19)
    v15 = 24;
  v20 = *((_QWORD *)a2 + 4);
  v21 = *((_QWORD *)a2 + 5);
  v22 = v13 >= v20;
  if (v13 <= v20)
    v13 = *((_QWORD *)a2 + 4);
  if (!v22)
    v15 = 32;
  v23 = v13 >= v21;
  if (v13 <= v21)
    v13 = *((_QWORD *)a2 + 5);
  if (!v23)
    v15 = 40;
  v24 = *((_QWORD *)a2 + 6);
  v25 = v13 >= v24;
  if (v13 <= v24)
    v13 = *((_QWORD *)a2 + 6);
  if (!v25)
    v15 = 48;
  v26 = a1 + 224;
  v18 = v13 >= *((_QWORD *)a2 + 7);
  v27 = 56;
  if (v18)
    v27 = v15;
  v28 = *(_QWORD *)((char *)a2 + v27);
  v41 = 0;
  if (v28)
  {
    sub_20E7E3A20(a1 + 160, v28, &v41);
    v12 = *(_QWORD *)a1;
    v30 = *(_QWORD *)(a1 + 200);
    v29 = *(_QWORD *)(a1 + 208);
  }
  else
  {
    v30 = 0;
    v29 = 0;
  }
  v31 = *(_QWORD *)(a1 + 8);
  if (v31 <= 1)
    v31 = 1;
  *(_QWORD *)(a1 + 152) = v31 - 1;
  v32 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v30) >> 3);
  if (v12 <= v32)
  {
    if (v12 < v32)
    {
      v33 = v30 + 24 * v12;
      if (v29 != v33)
      {
        v34 = v29;
        do
        {
          v36 = *(void **)(v34 - 24);
          v34 -= 24;
          v35 = v36;
          if (v36)
          {
            *(_QWORD *)(v29 - 16) = v35;
            operator delete(v35);
          }
          v29 = v34;
        }
        while (v34 != v33);
      }
      *(_QWORD *)(a1 + 208) = v33;
    }
  }
  else
  {
    sub_20E7C1E68(v5, v12 - v32);
  }
  v37 = *(_QWORD *)a1;
  v41 = 0;
  v38 = *(_QWORD *)(a1 + 224);
  v39 = (*(_QWORD *)(a1 + 232) - v38) >> 3;
  if (v37 <= v39)
  {
    if (v37 < v39)
      *(_QWORD *)(a1 + 232) = v38 + 8 * v37;
  }
  else
  {
    sub_20E7E3A20(v26, v37 - v39, &v41);
  }
  return a1;
}

void sub_20E7E39CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 232) = v6;
    operator delete(v6);
    sub_20E791F00(v3);
    v7 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    sub_20E791F00(v3);
    v7 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 168) = v7;
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_20E7E3A20(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = vdupq_lane_s64(*a3, 0);
      v19 = (int64x2_t *)(v7 + 16);
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(uint64_t **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + a2;
    if (v12 >> 61)
      sub_20E78D874();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20E78D888();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v11];
    v22 = (uint64_t *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (uint64_t *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vdupq_lane_s64(*a3, 0);
    v27 = (int64x2_t *)&v15[8 * v11 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 8;
      if (v29 < 0x58)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[8 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_QWORD *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
}

uint64_t sub_20E7E3C88(signed int a1, int32x4_t *a2)
{
  int32x4_t v2;

  v2 = vdupq_n_s32(a1);
  *(int8x8_t *)v2.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vcgeq_s32(*a2, v2), (int16x8_t)vcgeq_s32(a2[1], v2)));
  v2.i8[0] = vmaxv_u8(*(uint8x8_t *)v2.i8);
  return (a2[2].i32[0] < a1) & ~v2.i32[0];
}

uint64_t sub_20E7E3CBC(signed int a1, int32x4_t *a2)
{
  int32x4_t v2;

  v2 = vdupq_n_s32(a1);
  *(int8x8_t *)v2.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vcgeq_s32(v2, *a2), (int16x8_t)vcgeq_s32(v2, a2[1])));
  v2.i8[0] = vmaxv_u8(*(uint8x8_t *)v2.i8);
  return (a2[2].i32[0] > a1) & ~v2.i32[0];
}

BOOL sub_20E7E3CF0(_DWORD *a1, _DWORD *a2, double *a3)
{
  int v3;
  int v5;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  int v18;
  int v19;
  double v20;
  double v21;

  v3 = a1[3] * *a1;
  if (v3 + 0x40000000 < 0)
    sub_20E80C2A0((uint64_t)a1, (uint64_t)a2);
  v5 = a1[2] * a1[1];
  if (v5 + 0x40000000 < 0)
    sub_20E80C278((uint64_t)a1, (uint64_t)a2);
  if (v3 != v5)
  {
    v8 = sub_20E7F9714(16, (double)(v3 - v5));
    sub_20E7F9760(v8);
    v12 = a1[3] * *a2;
    if (v12 + 0x40000000 < 0)
      sub_20E80C2A0(v9, v10);
    v13 = a2[1] * a1[1];
    if (v13 + 0x40000000 < 0)
      sub_20E80C278(v9, v10);
    v14 = v11;
    v17 = sub_20E7F9714(16, (double)(v12 - v13));
    v18 = a2[1] * *a1;
    if (v18 + 0x40000000 < 0)
      sub_20E80C2A0(v15, v16);
    v19 = a1[2] * *a2;
    if (v19 + 0x40000000 < 0)
      sub_20E80C278(v15, v16);
    v20 = v17;
    v21 = sub_20E7F9714(16, (double)(v18 - v19));
    *a3 = sub_20E7F9714(16, v14 * v20);
    a3[1] = sub_20E7F9714(16, v14 * v21);
  }
  return v3 != v5;
}

BOOL sub_20E7E3E38(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int128 v6;
  _BOOL8 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v13[3];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)(a1 + 32))
    return 0;
  *(_QWORD *)&v6 = *(_QWORD *)a1;
  *((_QWORD *)&v6 + 1) = *(_QWORD *)(a1 + 12);
  v15 = v6;
  v14 = *a2;
  v7 = sub_20E7E3CF0(&v15, &v14, v13);
  if (v7)
  {
    *(_OWORD *)a3 = *(_OWORD *)v13;
    v8 = sub_20E7F9714(16, (double)*(int *)(a1 + 32));
    sub_20E7F9760(v8);
    v10 = v9;
    v11 = sub_20E7F9714(16, (double)*((int *)a2 + 2));
    *(double *)(a3 + 16) = sub_20E7F9714(16, v10 * v11);
  }
  return v7;
}

uint64_t sub_20E7E3F2C(float64x2_t *a1, _DWORD *a2, char a3, int32x2_t *a4)
{
  int32x2_t v4;
  int32x2_t v5;
  int v6;
  int v7;

  v4 = vmin_s32(vmax_s32(vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(*a1, (double)(1 << (a3 + 4)))))), (int32x2_t)0x700000007), (int32x2_t)0x700000007);
  v5 = vcge_s32(vdup_n_s32(64 << a3), vabs_s32(v4));
  if ((v5.i8[0] & v5.i8[4] & 1) != 0)
  {
    v6 = llround(a1[1].f64[0] * 4.0);
    if (v6 <= -15)
      v6 = -15;
    if (v6 >= 15)
      v6 = 15;
    v7 = 32 - (a2[1] * (v4.i32[1] >> a3) + 4 * a2[2] * v6 + *a2 * (v4.i32[0] >> a3));
    *a4 = v4;
    a4[1].i32[0] = v6;
    a4[1].i32[1] = v7 >> 6;
  }
  return v5.i8[0] & v5.i8[4] & 1;
}

uint64_t sub_20E7E3FF0(int a1, int a2, int a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t result;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  _DWORD *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;

  v5 = *a4;
  v6 = *a4 + 144 * a3;
  v7 = *(_QWORD *)(v6 - 72);
  v8 = *(_QWORD *)(v6 + 72);
  v9 = *(_QWORD *)(v6 + 216);
  v10 = *(_DWORD *)(v6 + 40);
  v11 = a1 - 1;
  v12 = a2 - 1;
  if ((a3 & 1) != 0)
  {
    v58 = (_DWORD *)(v5 + 144 * (a3 + 1));
    v59 = v58[10];
    v60 = v58[8] - 1;
    v61 = v58[12] - 1;
    v62 = v12 * v10;
    v63 = v12 >> 1;
    if (v61 < v12 >> 1)
      v63 = v61;
    if (v61 >= v63 + 1)
      v64 = v63 + 1;
    else
      v64 = v61;
    v65 = v9 + 2 * v63 * v59;
    v66 = v9 + 2 * v64 * v59;
    v67 = v10 * a2;
    v68 = a2 >> 1;
    if (v61 < a2 >> 1)
      v68 = v61;
    if (v61 >= v68 + 1)
      v69 = v68 + 1;
    else
      v69 = v61;
    v70 = v68 * v59;
    v71 = v69 * v59;
    v72 = a2 + 1;
    if (v61 >= (a2 + 1) >> 1)
      v73 = (a2 + 1) >> 1;
    else
      v73 = v61;
    if (v61 >= v73 + 1)
      v74 = v73 + 1;
    else
      v74 = v61;
    v75 = v11 >> 1;
    if (v60 < v11 >> 1)
      v75 = v60;
    if (v60 >= v75 + 1)
      v76 = v75 + 1;
    else
      v76 = v60;
    v77 = 2 * (v62 + v11);
    v78 = *(__int16 *)(v7 + v77);
    v79 = *(__int16 *)(v8 + v77);
    v80 = v11 & 1;
    *a5 = v78;
    a5[9] = v79;
    if ((v12 & v11 & 1) != 0)
    {
      v81 = (*(__int16 *)(v65 + 2 * v75)
           + *(__int16 *)(v65 + 2 * v76)
           + *(__int16 *)(v66 + 2 * v75)
           + *(__int16 *)(v66 + 2 * v76)
           + 2) >> 2;
      goto LABEL_46;
    }
    if ((v11 & 1) == 0 || (v12 & 1) != 0)
    {
      v81 = *(__int16 *)(v65 + 2 * v75);
      if ((v11 & 1) != 0 || (v12 & 1) == 0)
      {
LABEL_46:
        v83 = v73 * v59;
        v84 = v74 * v59;
        v85 = v9 + 2 * v70;
        v86 = v9 + 2 * v71;
        v87 = v72 * v10;
        v88 = 2 * (v67 + v11);
        v89 = *(__int16 *)(v7 + v88);
        a5[18] = v81;
        a5[3] = v89;
        a5[12] = *(__int16 *)(v8 + v88);
        if ((v80 & a2) != 0)
        {
          v90 = (*(__int16 *)(v85 + 2 * v75)
               + *(__int16 *)(v85 + 2 * v76)
               + *(__int16 *)(v86 + 2 * v75)
               + *(__int16 *)(v86 + 2 * v76)
               + 2) >> 2;
          goto LABEL_55;
        }
        if ((v11 & 1) == 0 || (a2 & 1) != 0)
        {
          v90 = *(__int16 *)(v85 + 2 * v75);
          if ((v11 & 1) != 0 || (a2 & 1) == 0)
          {
LABEL_55:
            v92 = v9 + 2 * v83;
            v93 = v9 + 2 * v84;
            v94 = 2 * (v87 + v11);
            v95 = *(__int16 *)(v7 + v94);
            a5[21] = v90;
            a5[6] = v95;
            a5[15] = *(__int16 *)(v8 + v94);
            if ((v72 & v80) != 0)
            {
              v96 = (*(__int16 *)(v92 + 2 * v75)
                   + *(__int16 *)(v92 + 2 * v76)
                   + *(__int16 *)(v93 + 2 * v75)
                   + *(__int16 *)(v93 + 2 * v76)
                   + 2) >> 2;
              goto LABEL_64;
            }
            if (!v80 || (v72 & 1) != 0)
            {
              v96 = *(__int16 *)(v92 + 2 * v75);
              if (v80 || (v72 & 1) == 0)
              {
LABEL_64:
                a5[24] = v96;
                v98 = a1 >> 1;
                if (v60 < a1 >> 1)
                  v98 = v60;
                if (v60 >= v98 + 1)
                  v99 = v98 + 1;
                else
                  v99 = v60;
                v100 = 2 * (v62 + a1);
                v101 = *(__int16 *)(v7 + v100);
                v102 = *(__int16 *)(v8 + v100);
                v103 = a1 & 1;
                a5[1] = v101;
                a5[10] = v102;
                if ((v12 & a1 & 1) != 0)
                {
                  v104 = (*(__int16 *)(v65 + 2 * v98)
                        + *(__int16 *)(v65 + 2 * v99)
                        + *(__int16 *)(v66 + 2 * v98)
                        + *(__int16 *)(v66 + 2 * v99)
                        + 2) >> 2;
                  goto LABEL_78;
                }
                if ((a1 & 1) == 0 || (v12 & 1) != 0)
                {
                  v104 = *(__int16 *)(v65 + 2 * v98);
                  if ((a1 & 1) != 0 || (v12 & 1) == 0)
                  {
LABEL_78:
                    v106 = 2 * (v67 + a1);
                    v107 = *(__int16 *)(v7 + v106);
                    a5[19] = v104;
                    a5[4] = v107;
                    a5[13] = *(__int16 *)(v8 + v106);
                    if ((v103 & a2) != 0)
                    {
                      v108 = (*(__int16 *)(v85 + 2 * v98)
                            + *(__int16 *)(v85 + 2 * v99)
                            + *(__int16 *)(v86 + 2 * v98)
                            + *(__int16 *)(v86 + 2 * v99)
                            + 2) >> 2;
                      goto LABEL_87;
                    }
                    if ((a1 & 1) == 0 || (a2 & 1) != 0)
                    {
                      v108 = *(__int16 *)(v85 + 2 * v98);
                      if ((a1 & 1) != 0 || (a2 & 1) == 0)
                      {
LABEL_87:
                        v110 = 2 * (v87 + a1);
                        v111 = *(__int16 *)(v7 + v110);
                        a5[22] = v108;
                        a5[7] = v111;
                        a5[16] = *(__int16 *)(v8 + v110);
                        if ((v72 & v103) != 0)
                        {
                          v112 = (*(__int16 *)(v92 + 2 * v98)
                                + *(__int16 *)(v92 + 2 * v99)
                                + *(__int16 *)(v93 + 2 * v98)
                                + *(__int16 *)(v93 + 2 * v99)
                                + 2) >> 2;
                          goto LABEL_96;
                        }
                        if ((a1 & 1) == 0 || (v72 & 1) != 0)
                        {
                          v112 = *(__int16 *)(v92 + 2 * v98);
                          if ((a1 & 1) != 0 || (v72 & 1) == 0)
                          {
LABEL_96:
                            a5[25] = v112;
                            v114 = a1 + 1;
                            v115 = (a1 + 1) >> 1;
                            if (v60 < v115)
                              v115 = v60;
                            if (v60 >= v115 + 1)
                              v116 = v115 + 1;
                            else
                              v116 = v60;
                            v117 = v115;
                            result = v116;
                            v118 = 2 * (v62 + v114);
                            v119 = *(__int16 *)(v7 + v118);
                            v120 = *(__int16 *)(v8 + v118);
                            v121 = v114 & 1;
                            a5[2] = v119;
                            a5[11] = v120;
                            if ((v12 & v114 & 1) != 0)
                            {
                              v122 = (*(__int16 *)(v65 + 2 * v117)
                                    + *(__int16 *)(v65 + 2 * result)
                                    + *(__int16 *)(v66 + 2 * v117)
                                    + *(__int16 *)(v66 + 2 * result)
                                    + 2) >> 2;
                              goto LABEL_110;
                            }
                            v123 = v12 & 1;
                            if ((v114 & 1) == 0 || (v12 & 1) != 0)
                            {
                              v122 = *(__int16 *)(v65 + 2 * v117);
                              if ((v114 & 1) != 0 || !v123)
                              {
LABEL_110:
                                v125 = 2 * (v67 + v114);
                                v126 = *(__int16 *)(v7 + v125);
                                a5[20] = v122;
                                a5[5] = v126;
                                a5[14] = *(__int16 *)(v8 + v125);
                                if ((v121 & a2) != 0)
                                {
                                  v127 = (*(__int16 *)(v85 + 2 * v117)
                                        + *(__int16 *)(v85 + 2 * result)
                                        + *(__int16 *)(v86 + 2 * v117)
                                        + *(__int16 *)(v86 + 2 * result)
                                        + 2) >> 2;
                                  goto LABEL_119;
                                }
                                if ((v114 & 1) == 0 || (a2 & 1) != 0)
                                {
                                  v127 = *(__int16 *)(v85 + 2 * v117);
                                  if ((v114 & 1) != 0 || (a2 & 1) == 0)
                                  {
LABEL_119:
                                    v129 = 2 * (v87 + v114);
                                    v130 = *(__int16 *)(v7 + v129);
                                    a5[23] = v127;
                                    a5[8] = v130;
                                    a5[17] = *(__int16 *)(v8 + v129);
                                    if ((v72 & v121) != 0)
                                    {
                                      v57 = (*(__int16 *)(v92 + 2 * v117)
                                           + *(__int16 *)(v92 + 2 * result)
                                           + *(__int16 *)(v93 + 2 * v117)
                                           + *(__int16 *)(v93 + 2 * result)
                                           + 2) >> 2;
                                      goto LABEL_128;
                                    }
                                    if ((v114 & 1) == 0 || (v72 & 1) != 0)
                                    {
                                      v57 = *(__int16 *)(v92 + 2 * v117);
                                      if ((v114 & 1) != 0 || (v72 & 1) == 0)
                                        goto LABEL_128;
                                      v131 = *(__int16 *)(v93 + 2 * v117);
                                    }
                                    else
                                    {
                                      v57 = *(__int16 *)(v92 + 2 * v117);
                                      v131 = *(__int16 *)(v92 + 2 * result);
                                    }
                                    v57 = (v57 + v131 + 1) >> 1;
                                    goto LABEL_128;
                                  }
                                  v128 = *(__int16 *)(v86 + 2 * v117);
                                }
                                else
                                {
                                  v127 = *(__int16 *)(v85 + 2 * v117);
                                  v128 = *(__int16 *)(v85 + 2 * result);
                                }
                                v127 = (v127 + v128 + 1) >> 1;
                                goto LABEL_119;
                              }
                              v124 = *(__int16 *)(v66 + 2 * v117);
                            }
                            else
                            {
                              v122 = *(__int16 *)(v65 + 2 * v117);
                              v124 = *(__int16 *)(v65 + 2 * result);
                            }
                            v122 = (v122 + v124 + 1) >> 1;
                            goto LABEL_110;
                          }
                          v113 = v112 + *(__int16 *)(v93 + 2 * v98);
                        }
                        else
                        {
                          v113 = *(__int16 *)(v92 + 2 * v98) + *(__int16 *)(v92 + 2 * v99);
                        }
                        v112 = (v113 + 1) >> 1;
                        goto LABEL_96;
                      }
                      v109 = *(__int16 *)(v86 + 2 * v98);
                    }
                    else
                    {
                      v108 = *(__int16 *)(v85 + 2 * v98);
                      v109 = *(__int16 *)(v85 + 2 * v99);
                    }
                    v108 = (v108 + v109 + 1) >> 1;
                    goto LABEL_87;
                  }
                  v105 = *(__int16 *)(v66 + 2 * v98);
                }
                else
                {
                  v104 = *(__int16 *)(v65 + 2 * v98);
                  v105 = *(__int16 *)(v65 + 2 * v99);
                }
                v104 = (v104 + v105 + 1) >> 1;
                goto LABEL_78;
              }
              v97 = *(__int16 *)(v93 + 2 * v75);
            }
            else
            {
              v96 = *(__int16 *)(v92 + 2 * v75);
              v97 = *(__int16 *)(v92 + 2 * v76);
            }
            v96 = (v96 + v97 + 1) >> 1;
            goto LABEL_64;
          }
          v91 = v90 + *(__int16 *)(v86 + 2 * v75);
        }
        else
        {
          v91 = *(__int16 *)(v85 + 2 * v75) + *(__int16 *)(v85 + 2 * v76);
        }
        v90 = (v91 + 1) >> 1;
        goto LABEL_55;
      }
      v82 = *(__int16 *)(v66 + 2 * v75);
    }
    else
    {
      v81 = *(__int16 *)(v65 + 2 * v75);
      v82 = *(__int16 *)(v65 + 2 * v76);
    }
    v81 = (v81 + v82 + 1) >> 1;
    goto LABEL_46;
  }
  v13 = (_QWORD *)(v5 + 144 * (a3 - 1));
  v14 = v13[5];
  v15 = v13[4] - 1;
  v16 = v13[6] - 1;
  v17 = 2 * v12;
  if (v16 < v17)
    v17 = v16;
  v18 = v17 * v14;
  if (v15 >= 2 * v11)
    v19 = 2 * v11;
  else
    v19 = v15;
  v20 = *(__int16 *)(v7 + 2 * (v18 + v19));
  v21 = v12 * v10;
  v22 = 2 * (v21 + v11);
  v23 = *(__int16 *)(v8 + v22);
  v24 = *(__int16 *)(v9 + v22);
  v25 = 2 * a2;
  if (v16 < v25)
    v25 = v16;
  v26 = v25 * v14;
  v27 = *(__int16 *)(v7 + 2 * (v26 + v19));
  v28 = v10 * a2;
  v29 = 2 * (v10 * a2 + v11);
  v30 = *(__int16 *)(v8 + v29);
  v31 = *(__int16 *)(v9 + v29);
  v32 = a2 + 1;
  if (v16 >= 2 * v32)
    v16 = 2 * v32;
  v33 = v16 * v14;
  v34 = *(__int16 *)(v7 + 2 * (v33 + v19));
  v35 = v32 * v10;
  v36 = 2 * (v35 + v11);
  v37 = *(__int16 *)(v8 + v36);
  v38 = *(__int16 *)(v9 + v36);
  v39 = 2 * a1;
  if (v15 < v39)
    v39 = v15;
  v40 = *(__int16 *)(v7 + 2 * (v18 + v39));
  *a5 = v20;
  a5[1] = v40;
  v41 = 2 * (v21 + a1);
  v42 = *(__int16 *)(v8 + v41);
  LODWORD(v41) = *(__int16 *)(v9 + v41);
  a5[18] = v24;
  a5[19] = v41;
  v43 = *(__int16 *)(v7 + 2 * (v26 + v39));
  v44 = 2 * (v28 + a1);
  v45 = *(__int16 *)(v8 + v44);
  v46 = *(__int16 *)(v7 + 2 * (v33 + v39));
  a5[12] = v30;
  a5[13] = v45;
  v47 = 2 * (v35 + a1);
  v48 = *(__int16 *)(v9 + v47);
  a5[6] = v34;
  a5[7] = v46;
  a5[24] = v38;
  a5[25] = v48;
  result = (a1 + 1);
  if (v15 >= 2 * (int)result)
    v15 = 2 * (int)result;
  v50 = *(__int16 *)(v9 + v44);
  v51 = *(__int16 *)(v8 + v47);
  a5[2] = *(__int16 *)(v7 + 2 * (v18 + v15));
  a5[3] = v27;
  v52 = 2 * (v21 + (int)result);
  v53 = *(__int16 *)(v8 + v52);
  a5[10] = v42;
  a5[11] = v53;
  a5[20] = *(__int16 *)(v9 + v52);
  a5[21] = v31;
  LODWORD(v52) = *(__int16 *)(v7 + 2 * (v26 + v15));
  a5[4] = v43;
  a5[5] = v52;
  v54 = 2 * (v28 + (int)result);
  a5[14] = *(__int16 *)(v8 + v54);
  a5[15] = v37;
  LODWORD(v54) = *(__int16 *)(v9 + v54);
  a5[22] = v50;
  a5[23] = v54;
  a5[8] = *(__int16 *)(v7 + 2 * (v33 + v15));
  a5[9] = v23;
  v55 = 2 * (v35 + (int)result);
  v56 = *(__int16 *)(v8 + v55);
  a5[16] = v51;
  a5[17] = v56;
  v57 = *(__int16 *)(v9 + v55);
LABEL_128:
  a5[26] = v57;
  return result;
}

double sub_20E7E479C(_DWORD *a1, uint64_t a2, int32x2_t *a3)
{
  __int32 *v3;
  int v4;
  int v5;
  int v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int8x16_t v10;

  a3->i32[0] = (a1[14] - a1[12] + 1) >> 1;
  a3->i32[1] = (a1[16] - a1[10] + 1) >> 1;
  a3[1].i32[0] = (a1[22] - a1[4] + 1) >> 1;
  *(_DWORD *)a2 = (a1[14] + a1[12] - 2 * a1[13] + 2) >> 2;
  *(_DWORD *)(a2 + 16) = (a1[16] + a1[10] - 2 * a1[13] + 2) >> 2;
  *(_DWORD *)(a2 + 32) = (a1[4] + a1[22] - 2 * a1[13] + 2) >> 2;
  v3 = (__int32 *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = (a1[9] + a1[17] - (a1[11] + a1[15]) + 8) >> 4;
  *(_DWORD *)(a2 + 24) = (a1[3] + a1[23] - (a1[5] + a1[21]) + 8) >> 4;
  *(_DWORD *)(a2 + 20) = (a1[1] + a1[25] - (a1[7] + a1[19]) + 8) >> 4;
  *a3 = vneg_s32(vmin_s32(vmax_s32(*a3, (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL));
  v4 = a3[1].i32[0];
  if (v4 <= -32768)
    v4 = -32768;
  if (v4 >= 0x7FFF)
    v4 = 0x7FFF;
  a3[1].i32[0] = -v4;
  v5 = *(_DWORD *)a2;
  if (*(int *)a2 <= -32768)
    v5 = -32768;
  if (v5 >= 0x7FFF)
    v5 = 0x7FFF;
  *(_DWORD *)a2 = v5;
  v6 = *(_DWORD *)(a2 + 32);
  if (v6 <= -32768)
    v6 = -32768;
  if (v6 >= 0x7FFF)
    v6 = 0x7FFF;
  v7.i32[0] = *(_DWORD *)(a2 + 24);
  v7.i32[1] = *v3;
  v7.i64[1] = *(_QWORD *)(a2 + 16);
  v8.i64[0] = 0x7F0000007FLL;
  v8.i64[1] = 0x7F0000007FLL;
  v9 = vmaxq_s32(v7, v8);
  v7.i64[0] = 0x7F0000007FLL;
  v7.i64[1] = 0x7F0000007FLL;
  v10 = (int8x16_t)vminq_s32(v9, v7);
  *v3 = v10.i32[1];
  *(_DWORD *)(a2 + 32) = v6;
  *(int8x16_t *)(a2 + 8) = v10;
  v10.i32[1] = vextq_s8(v10, v10, 8uLL).i32[1];
  *(_QWORD *)(a2 + 24) = v10.i64[0];
  return *(double *)v10.i64;
}

void sub_20E7E4964(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 49, a3, a4);
}

void sub_20E7E496C(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 48, a3, a4);
}

uint64_t sub_20E7E4974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  void **v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  uint32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t *v27;
  uint64_t **v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 *v55;
  _OWORD *v56;
  float v57[3];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  int32x2_t v63;
  _QWORD v64[2];
  int v65;
  _BYTE v66[24];
  __int16 v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[25];
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  void *__p;
  void *v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  char v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  int v98;
  void *v99;
  void *v100;
  uint64_t v101;
  int64x2_t v102;
  _OWORD v103[2];
  int v104;
  char v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  int64x2_t v119;
  _BYTE v120[26];

  *(_DWORD *)a1 = 2;
  *(_BYTE *)(a1 + 4) = 0;
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0x280uLL);
  *(_BYTE *)(a1 + 24) = 0;
  strcpy((char *)(a1 + 32), "/tmp/");
  *(_WORD *)(a1 + 55) = 261;
  *(_QWORD *)(a1 + 60) = 0x90000002DLL;
  *(_QWORD *)(a1 + 72) = 5000;
  *(_BYTE *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 84) = 1061997773;
  *(_BYTE *)(a1 + 88) = 0;
  *(int64x2_t *)(a1 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a1 + 112) = 5;
  *(_WORD *)(a1 + 120) = 256;
  *(_WORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 228) = xmmword_20E80DE00;
  *(_OWORD *)(a1 + 244) = xmmword_20E80DE10;
  v4 = a1 + 260;
  *(_QWORD *)(a1 + 292) = 0x3E4CCCCD00004000;
  *(_OWORD *)(a1 + 260) = xmmword_20E80F4F8;
  *(_OWORD *)(a1 + 276) = unk_20E80F508;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = sub_20E7E6D1C;
  *(_QWORD *)(a1 + 320) = 5;
  v5 = a1 + 456;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_QWORD *)(a1 + 648) = a1 + 656;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = xmmword_20E80F3C0;
  v6 = (__int128 *)(a1 + 688);
  v55 = (__int128 *)(a1 + 736);
  v56 = (_OWORD *)(a1 + 712);
  v7 = (void **)(a1 + 864);
  *(_QWORD *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 745) = 0u;
  v8 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)a1 = v8;
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  v9 = *(_OWORD *)(a2 + 56);
  v10 = *(_OWORD *)(a2 + 72);
  v11 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v11;
  *(_OWORD *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 72) = v10;
  v12 = *(_OWORD *)(a2 + 120);
  v13 = *(_OWORD *)(a2 + 136);
  v14 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v14;
  *(_OWORD *)(a1 + 120) = v12;
  *(_OWORD *)(a1 + 136) = v13;
  v15 = *(_OWORD *)(a2 + 184);
  v16 = *(_OWORD *)(a2 + 200);
  v17 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v17;
  *(_OWORD *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 200) = v16;
  v18 = *(_OWORD *)(a2 + 248);
  v19 = *(_OWORD *)(a2 + 264);
  v20 = *(_OWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 264) = v19;
  *(_OWORD *)(a1 + 280) = v20;
  *(_OWORD *)(a1 + 248) = v18;
  if (!sub_20E7E7530(a2))
  {
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 71, "IsKeyPointAndDescriptorGeneratorConfigValid(config) && \"Invalid configuration\"", (void (*)(void *))sub_20E803DA4);
    abort();
  }
  if (*(_QWORD *)(a1 + 680) >= 0x141uLL)
  {
    v23 = 4;
    if (*(_QWORD *)(a1 + 16) >= 0x141uLL)
      v23 = 5;
  }
  else
  {
    v23 = 4;
  }
  *(_QWORD *)(a1 + 320) = v23;
  sub_20E7E5524(a1, v21, v22);
  v24 = operator new();
  *(_QWORD *)(v24 + 32) = 0;
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  v25 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v24;
  if (v25)
    (*(void (**)(uint64_t))(a1 + 312))(v25);
  *(_QWORD *)(a1 + 312) = sub_20E7E6D1C;
  *(_WORD *)&v120[24] = 256;
  v26 = *(_QWORD *)(a1 + 16);
  v119.i64[0] = *(_QWORD *)(a1 + 680);
  v119.i64[1] = v26;
  *(_QWORD *)v120 = *(_QWORD *)(a1 + 320);
  *(_OWORD *)&v120[8] = xmmword_20E80F3D0;
  v27 = (int64x2_t *)operator new();
  sub_20E7DC4AC(v27, &v119);
  v28 = *(uint64_t ***)(a1 + 304);
  v29 = *v28;
  *v28 = (uint64_t *)v27;
  if (v29)
  {
    v30 = sub_20E7E6F7C(v29);
    MEMORY[0x212BC47D4](v30, 0x10B0C40401BBC4ELL);
  }
  v107 = xmmword_20E80F520;
  v108 = unk_20E80F530;
  v109 = xmmword_20E80F540;
  v110 = unk_20E80F550;
  v111 = xmmword_20E80F560;
  v112 = unk_20E80F570;
  v113 = xmmword_20E80F580;
  v114 = unk_20E80F590;
  v116 = 0u;
  v117 = 0u;
  v118 = 0u;
  v102 = v119;
  v103[0] = *(_OWORD *)v120;
  *(_OWORD *)((char *)v103 + 10) = *(_OWORD *)&v120[10];
  v104 = 2097168;
  v105 = *(_BYTE *)(a1 + 56);
  v106 = *(_QWORD *)(a1 + 60);
  v115 = *(_QWORD *)(a1 + 672);
  if (&v116 != v6)
    sub_20E7E3654(&v116, *(char **)(a1 + 688), *(char **)(a1 + 696), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 696) - *(_QWORD *)(a1 + 688)) >> 3));
  if ((__int128 *)((char *)&v117 + 8) != v56)
    sub_20E7E3654((_QWORD *)&v117 + 1, *(char **)(a1 + 712), *(char **)(a1 + 720), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712)) >> 3));
  v31 = operator new();
  sub_20E7F5028(v31, &v102);
  v32 = *(_QWORD *)(a1 + 304);
  v33 = *(_QWORD **)(v32 + 8);
  *(_QWORD *)(v32 + 8) = v31;
  if (v33)
  {
    v34 = sub_20E7E71B8(v33);
    MEMORY[0x212BC47D4](v34, 0x1020C40EB8A5903);
  }
  v81 = xmmword_20E80F5A0;
  v82 = unk_20E80F5B0;
  v83 = xmmword_20E80F5C0;
  v84 = unk_20E80F5D0;
  v85 = xmmword_20E80F5E0;
  v86 = unk_20E80F5F0;
  v87 = xmmword_20E80F600;
  v88 = unk_20E80F610;
  v35 = *(_OWORD *)(a1 + 780);
  v91 = *(_OWORD *)(a1 + 764);
  v92 = v35;
  v36 = *(_OWORD *)(a1 + 820);
  v94 = *(_OWORD *)(a1 + 804);
  v80 = 2 * *(_DWORD *)(a1 + 320);
  v89 = *(_QWORD *)(a1 + 672);
  v90 = *(_BYTE *)(a1 + 120);
  v101 = 0;
  v99 = 0;
  v100 = 0;
  v93 = *(_QWORD *)(a1 + 796);
  v95 = v36;
  v96 = *(_QWORD *)(a1 + 836);
  if (&v99 != v7)
    sub_20E7E3654(&v99, *(char **)(a1 + 864), *(char **)(a1 + 872), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 872) - *(_QWORD *)(a1 + 864)) >> 3));
  v98 = *(_DWORD *)(a1 + 860);
  v97 = *(_OWORD *)(a1 + 844);
  if ((*(_DWORD *)a1 | 2) == 2)
  {
    v37 = operator new();
    sub_20E7E2D28(v37, (__int128 *)&v80);
  }
  else
  {
    v37 = operator new();
    sub_20E7CCCE8(v37, (__int128 *)&v80);
  }
  v38 = *(_QWORD *)(a1 + 304);
  v39 = *(_QWORD *)(v38 + 16);
  *(_QWORD *)(v38 + 16) = v37;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  *(_OWORD *)v66 = xmmword_20E80F3E0;
  *(_QWORD *)&v66[16] = 16;
  v67 = 0;
  v78 = 0;
  v79 = 0;
  __p = 0;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  memset(v73, 0, sizeof(v73));
  v40 = *(_QWORD *)(a1 + 16);
  v64[0] = *(_QWORD *)(a1 + 680);
  v64[1] = v40;
  v65 = 2 * *(_DWORD *)(a1 + 320);
  v68 = *(_QWORD *)(a1 + 672);
  v69 = *(_QWORD *)(a1 + 72);
  if (&v70 != v55)
    sub_20E7E7298(&v70, *(char **)(a1 + 736), *(char **)(a1 + 744), (uint64_t)(*(_QWORD *)(a1 + 744) - *(_QWORD *)(a1 + 736)) >> 2);
  if ((__int128 *)((char *)&v71 + 8) != v6)
    sub_20E7E3654((_QWORD *)&v71 + 1, *(char **)(a1 + 688), *(char **)(a1 + 696), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 696) - *(_QWORD *)(a1 + 688)) >> 3));
  if (v73 != (_BYTE *)v56)
    sub_20E7E3654(v73, *(char **)(a1 + 712), *(char **)(a1 + 720), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 720) - *(_QWORD *)(a1 + 712)) >> 3));
  v73[24] = *(_BYTE *)(a1 + 120);
  v41 = *(_OWORD *)(a1 + 820);
  v74 = *(_OWORD *)(a1 + 804);
  v75 = v41;
  v76 = *(_QWORD *)(a1 + 836);
  if (&__p != v7)
    sub_20E7E3654(&__p, *(char **)(a1 + 864), *(char **)(a1 + 872), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 872) - *(_QWORD *)(a1 + 864)) >> 3));
  v67 = *(_WORD *)(a1 + 224);
  *(_QWORD *)v66 = *(unsigned int *)(a1 + 228);
  v42 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)&v43 = v42;
  *((_QWORD *)&v43 + 1) = HIDWORD(v42);
  *(_OWORD *)&v66[8] = v43;
  if ((*(_DWORD *)a1 | 2) == 2)
  {
    v44 = operator new();
    sub_20E7EF46C(v44, (uint64_t)v64);
  }
  else
  {
    v44 = operator new();
    sub_20E7D2720(v44, (uint64_t)v64);
  }
  v45 = *(_QWORD *)(a1 + 304);
  v46 = *(_QWORD *)(v45 + 24);
  *(_QWORD *)(v45 + 24) = v44;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  if (*(_BYTE *)(a1 + 225))
  {
    v58 = *(_OWORD *)(a1 + 232);
    v63 = vmovn_s64(*(int64x2_t *)(a1 + 8));
    v47 = *(_OWORD *)(v4 + 16);
    v59 = *(_OWORD *)v4;
    v48 = *(float *)(a1 + 248);
    v57[0] = *(float *)(a1 + 228);
    v57[1] = v48;
    v57[2] = *(float *)(a1 + 256);
    v62 = 0;
    v60 = v47;
    v61 = *(_DWORD *)(v4 + 32);
    if (*(_DWORD *)a1 == 3)
    {
      v49 = operator new();
      sub_20E7D19E8(v49, v57);
    }
    else
    {
      if (*(_DWORD *)a1 != 2)
      {
        *(_BYTE *)(a1 + 225) = 0;
        goto LABEL_44;
      }
      v49 = operator new();
      sub_20E7E88B4(v49, v57);
    }
    v50 = *(_QWORD *)(a1 + 304);
    v51 = *(_QWORD *)(v50 + 32);
    *(_QWORD *)(v50 + 32) = v49;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
LABEL_44:
  v52 = *(unsigned int *)(a1 + 60);
  *(_QWORD *)(a1 + 392) = v52;
  *(_QWORD *)(a1 + 400) = v52;
  *(_QWORD *)(a1 + 408) = v52;
  *(_QWORD *)(a1 + 416) = v52;
  *(_QWORD *)(a1 + 424) = v52;
  *(_QWORD *)(a1 + 432) = v52;
  *(_QWORD *)(a1 + 440) = v52;
  *(_QWORD *)(a1 + 448) = v52;
  v53 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 328) = v53;
  *(_QWORD *)(a1 + 336) = v53;
  *(_QWORD *)(a1 + 344) = v53;
  *(_QWORD *)(a1 + 352) = v53;
  *(_QWORD *)(a1 + 360) = v53;
  *(_QWORD *)(a1 + 368) = v53;
  *(_QWORD *)(a1 + 376) = v53;
  *(_QWORD *)(a1 + 384) = v53;
  if (*(_BYTE *)(a1 + 80))
    sub_20E7E75AC(v53, v65, (_QWORD *)(a1 + 328));
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a1 + 456);
  v57[0] = 0.0;
  sub_20E7C205C(v5, 0x40uLL, v57);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 480);
  v57[0] = 0.0;
  sub_20E7C205C(a1 + 480, 0x40uLL, v57);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a1 + 504);
  v57[0] = 0.0;
  sub_20E7C205C(a1 + 504, 0x40uLL, v57);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 528);
  v57[0] = 0.0;
  sub_20E7C205C(a1 + 528, 0x40uLL, v57);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a1 + 552);
  v57[0] = 0.0;
  sub_20E7C205C(a1 + 552, 0x40uLL, v57);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 576);
  v57[0] = 0.0;
  sub_20E7C205C(a1 + 576, 0x40uLL, v57);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a1 + 600);
  v57[0] = 0.0;
  sub_20E7C205C(a1 + 600, 0x40uLL, v57);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a1 + 624);
  v57[0] = 0.0;
  sub_20E7C205C(a1 + 624, 0x40uLL, v57);
  if (__p)
  {
    v78 = __p;
    operator delete(__p);
  }
  if (*(_QWORD *)v73)
  {
    *(_QWORD *)&v73[8] = *(_QWORD *)v73;
    operator delete(*(void **)v73);
  }
  if (*((_QWORD *)&v71 + 1))
  {
    *(_QWORD *)&v72 = *((_QWORD *)&v71 + 1);
    operator delete(*((void **)&v71 + 1));
  }
  if ((_QWORD)v70)
  {
    *((_QWORD *)&v70 + 1) = v70;
    operator delete((void *)v70);
  }
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
  if (*((_QWORD *)&v117 + 1))
  {
    *(_QWORD *)&v118 = *((_QWORD *)&v117 + 1);
    operator delete(*((void **)&v117 + 1));
  }
  if ((_QWORD)v116)
  {
    *((_QWORD *)&v116 + 1) = v116;
    operator delete((void *)v116);
  }
  return a1;
}

void sub_20E7E5328(_Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  va_list va;

  va_start(va, a14);
  MEMORY[0x212BC47D4](v17, 0x10A1C400185FAF4);
  sub_20E7E6310(va);
  v21 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v21;
    operator delete(v21);
  }
  sub_20E7E6370(&STACK[0x250]);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v14 + 872) = v22;
    operator delete(v22);
    v23 = *a3;
    if (!*a3)
    {
LABEL_5:
      v24 = v14 + 648;
      v25 = *a4;
      if (!*a4)
        goto LABEL_6;
      goto LABEL_15;
    }
  }
  else
  {
    v23 = *a3;
    if (!*a3)
      goto LABEL_5;
  }
  *(_QWORD *)(v14 + 744) = v23;
  operator delete(v23);
  v24 = v14 + 648;
  v25 = *a4;
  if (!*a4)
  {
LABEL_6:
    v26 = *v18;
    if (!*v18)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_15:
  *(_QWORD *)(v14 + 720) = v25;
  operator delete(v25);
  v26 = *v18;
  if (!*v18)
  {
LABEL_8:
    sub_20E7E29EC(v24, *(_QWORD **)(v14 + 656));
    sub_20E7A0B04(v16);
    v27 = *(_QWORD *)(v14 + 304);
    *(_QWORD *)(v14 + 304) = 0;
    if (v27)
      (*(void (**)(void))(v14 + 312))();
    if (*(char *)(v14 + 55) < 0)
      operator delete(*v15);
    _Unwind_Resume(a1);
  }
LABEL_7:
  *(_QWORD *)(v14 + 696) = v26;
  operator delete(v26);
  goto LABEL_8;
}

void sub_20E7E5524(uint64_t a1, double a2, uint32x4_t a3)
{
  _OWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _DWORD *v18;
  char *v19;
  int64_t v20;
  void **v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  signed int v31;
  _DWORD *v32;
  _DWORD *v33;
  int *v34;
  int *v35;
  int *v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _DWORD *v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  signed __int32 *v83;
  unint64_t v84;
  __int128 *v85;
  signed __int32 v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint32x4_t v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _OWORD *v113;
  __int128 *v114;
  uint64_t v115;
  __int128 v116;
  int v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _DWORD *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD *v131;
  __int128 *v132;
  uint64_t v133;
  __int128 v134;
  int v135;
  _DWORD *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _BYTE *v143;
  _DWORD *v144;
  char *v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  _OWORD *v150;
  char *v151;
  uint64_t v152;
  __int128 v153;
  int v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  unsigned int v164[17];
  unsigned int v165[17];
  __int128 v166;
  __int128 v167;
  _QWORD v168[76];
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  double v172[76];
  _QWORD v173[80];
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  int v180;

  v4 = (_OWORD *)(a1 + 764);
  v5 = v173;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 <= 0x280)
  {
    *(_QWORD *)(a1 + 672) = 1;
    *(_QWORD *)(a1 + 680) = v6;
    v7 = *(char **)(a1 + 744);
    v8 = *(_QWORD *)(a1 + 752);
    if ((unint64_t)v7 < v8)
    {
      *(_DWORD *)v7 = 0;
      v9 = (uint64_t)(v7 + 4);
LABEL_82:
      *(_QWORD *)(a1 + 744) = v9;
      v81 = *(_QWORD *)(a1 + 688);
      v82 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 696) - v81) >> 3);
      if (*(_QWORD *)(a1 + 696) == v81)
      {
        sub_20E7D5644((char **)(a1 + 688), 1 - v82);
      }
      else if (v82 >= 2)
      {
        *(_QWORD *)(a1 + 696) = v81 + 40;
      }
      v83 = *(signed __int32 **)(a1 + 712);
      v84 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 720) - (_QWORD)v83) >> 3);
      if (*(signed __int32 **)(a1 + 720) == v83)
      {
        sub_20E7D5644((char **)(a1 + 712), 1 - v84);
        v83 = *(signed __int32 **)(a1 + 712);
      }
      else if (v84 >= 2)
      {
        *(_QWORD *)(a1 + 720) = v83 + 10;
      }
      v85 = *(__int128 **)(a1 + 688);
      *((_QWORD *)v85 + 4) = 0;
      *v85 = 0u;
      v85[1] = 0u;
      v86 = *(_DWORD *)(a1 + 8);
      *v83 = v86;
      v87 = *(_DWORD *)(a1 + 16);
      v88 = v86 + 2;
      if (v86 >= -1)
        v88 = v86 + 1;
      v89 = v88 >> 1;
      v83[1] = v87;
      v83[2] = v89;
      v90 = v87 + 2;
      if (v87 >= -1)
        v90 = v87 + 1;
      v91 = v90 >> 1;
      if (v89 >= -1)
        v92 = v89 + 1;
      else
        v92 = v89 + 2;
      v93 = v92 >> 1;
      v83[3] = v91;
      v83[4] = v93;
      if (v91 >= -1)
        v94 = v91 + 1;
      else
        v94 = v91 + 2;
      v95 = v94 >> 1;
      if (v93 >= -1)
        v96 = v93 + 1;
      else
        v96 = v93 + 2;
      v97 = v96 >> 1;
      v83[5] = v95;
      v83[6] = v97;
      if (v95 >= -1)
        v98 = v95 + 1;
      else
        v98 = v95 + 2;
      v99 = v98 >> 1;
      if (v97 >= -1)
        v100 = v97 + 1;
      else
        v100 = v97 + 2;
      v83[7] = v99;
      v83[8] = v100 >> 1;
      v101 = v99 + 2;
      if (v99 >= -1)
        v101 = v99 + 1;
      v83[9] = v101 >> 1;
      v102 = *(unsigned __int8 *)(a1 + 120);
      *(_BYTE *)(a1 + 760) = v102;
      if (v102)
      {
        bzero(v165, 0x824uLL);
        v164[0] = 1;
        v169 = *(_QWORD *)v83;
        v166 = *v85;
        v170 = *(_OWORD *)(v83 + 2);
        v167 = v85[1];
        v171 = *((_QWORD *)v83 + 3);
        v168[0] = *((_QWORD *)v85 + 4);
        v172[0] = *((double *)v83 + 4);
        sub_20E7E797C(0x280u, v86, v87, 1, v164, v172[0], v103);
        v104 = *(_QWORD **)(a1 + 864);
        v105 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 872) - (_QWORD)v104) >> 3);
        if (*(_QWORD **)(a1 + 872) == v104)
        {
          sub_20E7D5644((char **)(a1 + 864), 1 - v105);
          v104 = *(_QWORD **)(a1 + 864);
        }
        else if (v105 >= 2)
        {
          *(_QWORD *)(a1 + 872) = v104 + 5;
        }
        *(_DWORD *)(a1 + 844) = v179;
        *v104 = v173[0];
        *v4 = v174;
        *(_DWORD *)(a1 + 848) = DWORD1(v179);
        v104[1] = v173[1];
        v4[3] = v177;
        *(_DWORD *)(a1 + 852) = DWORD2(v179);
        v104[2] = v173[2];
        v4[1] = v175;
        *(_DWORD *)(a1 + 856) = HIDWORD(v179);
        v104[3] = v173[3];
        v4[2] = v176;
        v4[4] = v178;
        *(_DWORD *)(a1 + 860) = v180;
        v104[4] = v173[4];
      }
      return;
    }
    v12 = *(char **)(a1 + 736);
    v13 = (v7 - v12) >> 2;
    v14 = v13 + 1;
    if (!((unint64_t)(v13 + 1) >> 62))
    {
      v15 = v8 - (_QWORD)v12;
      if (v15 >> 1 > v14)
        v14 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (!v16)
      {
        v17 = 0;
        v18 = (_DWORD *)(4 * v13);
        v19 = 0;
        *(_DWORD *)(4 * v13) = 0;
        v9 = 4 * v13 + 4;
        v20 = v7 - v12;
        if (v7 == v12)
          goto LABEL_80;
        goto LABEL_74;
      }
      if (!(v16 >> 62))
      {
        v17 = operator new(4 * v16);
        v18 = &v17[4 * v13];
        v19 = &v17[4 * v16];
        *v18 = 0;
        v9 = (uint64_t)(v18 + 1);
        v20 = v7 - v12;
        if (v7 == v12)
        {
LABEL_80:
          *(_QWORD *)(a1 + 736) = v18;
          *(_QWORD *)(a1 + 744) = v9;
          *(_QWORD *)(a1 + 752) = v19;
          if (v12)
            operator delete(v12);
          goto LABEL_82;
        }
LABEL_74:
        v72 = v20 - 4;
        if (v72 < 0x2C)
          goto LABEL_206;
        if ((unint64_t)(v12 - v17) < 0x20)
          goto LABEL_206;
        v73 = (v72 >> 2) + 1;
        v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
        v75 = &v7[-v74];
        v18 = (_DWORD *)((char *)v18 - v74);
        v76 = &v17[4 * v13 - 16];
        v77 = v7 - 16;
        v78 = v73 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v79 = *(_OWORD *)v77;
          *(v76 - 1) = *((_OWORD *)v77 - 1);
          *v76 = v79;
          v76 -= 2;
          v77 -= 32;
          v78 -= 8;
        }
        while (v78);
        v7 = v75;
        if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_206:
          do
          {
            v80 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *--v18 = v80;
          }
          while (v7 != v12);
        }
        goto LABEL_80;
      }
LABEL_202:
      sub_20E78D888();
    }
LABEL_203:
    sub_20E78D874();
  }
  *(_QWORD *)(a1 + 680) = 640;
  if (*(_BYTE *)(a1 + 120))
  {
    v10 = *(_BYTE *)(a1 + 121) == 0;
    v11 = *(_QWORD *)(a1 + 16);
    if (v6 != 1056)
    {
LABEL_22:
      sub_20E7E797C(0x280u, v6, v11, *(unsigned __int8 *)(a1 + 120) != 0, v164, a2, a3);
      v25 = v164[0];
      *(_QWORD *)(a1 + 672) = v164[0];
      if (!*(_BYTE *)(a1 + 121))
      {
        v26 = *(_QWORD *)(a1 + 320);
        if (v26)
        {
          v27 = 0;
          v28 = 0;
          v29 = *(_DWORD *)(a1 + 16);
          do
          {
            if (v28)
            {
              if (v29 >= -1)
                v30 = v29 + 1;
              else
                v30 = v29 + 2;
              v29 = v30 >> 1;
            }
            v31 = 0x280u >> v28;
            v32 = (_DWORD *)(a1 + 4 * v27);
            v33 = (_DWORD *)&v176 + 2 * v27 + 2;
            *v33 = v32[31];
            v33[1] = v32[36];
            v34 = v33 + 1;
            v35 = (int *)&v174 + 2 * v27;
            *v35 = v32[41];
            v35[1] = v32[46];
            v36 = v35 + 1;
            v37 = v32[51];
            *((_DWORD *)&v179 + v27) = v37;
            v38 = *((_DWORD *)&v176 + 2 * v27 + 2);
            v39 = v38 < 2 || v38 > v31;
            if (v39)
              sub_20E80C2C8();
            v40 = *v34;
            if (v40 < 2 || v40 > dword_20E80F4E4[v27])
              sub_20E80C2F4();
            v41 = *v35;
            v42 = *v35 - 1;
            if (v41 < 1 || v41 > dword_20E80F4D0[v27])
              sub_20E80C320();
            v43 = *v36;
            if ((v43 - 1) >= 0x100)
              sub_20E80C428();
            if (v41 * v38 < v31)
              sub_20E80C34C();
            if (v42 * v38 >= v31)
              sub_20E80C3FC();
            if (v43 * v40 < v29)
              sub_20E80C378();
            if ((v43 - 1) * v40 >= v29)
              sub_20E80C3D0();
            if (v37 >= 4)
              sub_20E80C3A4();
            v27 = ++v28;
          }
          while (v26 > v28);
        }
      }
      *(_BYTE *)(a1 + 760) = *(_BYTE *)(a1 + 120);
      v44 = *(_QWORD *)(a1 + 736);
      v45 = (*(_QWORD *)(a1 + 744) - v44) >> 2;
      if (v25 <= v45)
      {
        if (v25 < v45)
          *(_QWORD *)(a1 + 744) = v44 + 4 * v25;
      }
      else
      {
        sub_20E78F7D4(a1 + 736, v25 - v45);
        v25 = *(_QWORD *)(a1 + 672);
      }
      v55 = *(_QWORD *)(a1 + 688);
      v56 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 696) - v55) >> 3);
      if (v25 <= v56)
      {
        if (v25 < v56)
          *(_QWORD *)(a1 + 696) = v55 + 40 * v25;
      }
      else
      {
        sub_20E7D5644((char **)(a1 + 688), v25 - v56);
        v25 = *(_QWORD *)(a1 + 672);
      }
      v57 = *(_QWORD *)(a1 + 712);
      v58 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 720) - v57) >> 3);
      if (v25 <= v58)
      {
        if (v25 < v58)
          *(_QWORD *)(a1 + 720) = v57 + 40 * v25;
      }
      else
      {
        sub_20E7D5644((char **)(a1 + 712), v25 - v58);
        v25 = *(_QWORD *)(a1 + 672);
      }
      if (v25)
      {
        v59 = 0;
        v60 = 0;
        v61 = *(_QWORD *)(a1 + 736);
        v62 = *(_QWORD *)(a1 + 688);
        v63 = *(_QWORD *)(a1 + 712);
        do
        {
          *(_DWORD *)(v61 + 4 * v60) = v164[v60 + 1];
          v64 = v63 + v59 * 8;
          *(_QWORD *)v64 = *(uint64_t *)((char *)&v169 + v59 * 8);
          v65 = v62 + v59 * 8;
          *(_OWORD *)v65 = *(__int128 *)((char *)&v166 + v59 * 8);
          *(_OWORD *)(v64 + 8) = *(__int128 *)((char *)&v170 + v59 * 8);
          *(_OWORD *)(v65 + 16) = *(_OWORD *)&v168[v59 - 2];
          *(_QWORD *)(v64 + 24) = *(uint64_t *)&v172[v59 - 1];
          *(_QWORD *)(v65 + 32) = v168[v59];
          v66 = &v172[v59];
          ++v60;
          v59 += 5;
          *(double *)(v64 + 32) = *v66;
        }
        while (v25 > v60);
      }
      if (*(_BYTE *)(a1 + 760))
      {
        v67 = v175;
        *v4 = v174;
        v4[1] = v67;
        v68 = v177;
        v4[2] = v176;
        v4[3] = v68;
        v69 = v179;
        v4[4] = v178;
        v4[5] = v69;
        *(_DWORD *)(a1 + 860) = v180;
        v70 = *(_QWORD *)(a1 + 864);
        v71 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 872) - v70) >> 3);
        if (v25 <= v71)
        {
          if (v25 < v71)
            *(_QWORD *)(a1 + 872) = v70 + 40 * v25;
        }
        else
        {
          sub_20E7D5644((char **)(a1 + 864), v25 - v71);
        }
        v106 = *(_QWORD *)(a1 + 672);
        if (v106)
        {
          v107 = (_QWORD *)(*(_QWORD *)(a1 + 864) + 32);
          v108 = 1;
          do
          {
            *((_OWORD *)v107 - 2) = *(_OWORD *)v5;
            *((_OWORD *)v107 - 1) = *((_OWORD *)v5 + 1);
            *v107 = v5[4];
            v107 += 5;
            v39 = v106 > v108++;
            v5 += 5;
          }
          while (v39);
        }
      }
      return;
    }
  }
  else
  {
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 16);
    if (v6 != 1056)
      goto LABEL_22;
  }
  if (v10 || v11 != 756)
    goto LABEL_22;
  *(_QWORD *)(a1 + 672) = 3;
  v21 = (void **)(a1 + 736);
  v22 = *(char **)(a1 + 744);
  v23 = *(char **)(a1 + 752);
  if (v22 < v23)
  {
    *(_DWORD *)v22 = 0;
    v24 = v22 + 4;
    goto LABEL_132;
  }
  v46 = *v21;
  v47 = v22 - (_BYTE *)*v21;
  v48 = v47 >> 2;
  v49 = (v47 >> 2) + 1;
  if (v49 >> 62)
    goto LABEL_203;
  v50 = v23 - v46;
  if (v50 >> 1 > v49)
    v49 = v50 >> 1;
  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
    v51 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v51 = v49;
  if (v51)
  {
    if (v51 >> 62)
      goto LABEL_202;
    v52 = operator new(4 * v51);
    v53 = &v52[4 * v48];
    v23 = &v52[4 * v51];
    *v53 = 0;
    v24 = (char *)(v53 + 1);
    v54 = v22 - v46;
    if (v22 == v46)
      goto LABEL_130;
    goto LABEL_124;
  }
  v52 = 0;
  v53 = (_DWORD *)(4 * v48);
  v23 = 0;
  *(_DWORD *)(4 * v48) = 0;
  v24 = (char *)(4 * v48 + 4);
  v54 = v22 - v46;
  if (v22 != v46)
  {
LABEL_124:
    v109 = v54 - 4;
    if (v109 < 0x2C)
      goto LABEL_207;
    if ((unint64_t)(v22 - v52 - v47) < 0x20)
      goto LABEL_207;
    v110 = (v109 >> 2) + 1;
    v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
    v112 = &v22[-v111];
    v53 = (_DWORD *)((char *)v53 - v111);
    v113 = &v52[4 * v48 - 16];
    v114 = (__int128 *)(v22 - 16);
    v115 = v110 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v116 = *v114;
      *(v113 - 1) = *(v114 - 1);
      *v113 = v116;
      v113 -= 2;
      v114 -= 2;
      v115 -= 8;
    }
    while (v115);
    v22 = v112;
    if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_207:
      do
      {
        v117 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *--v53 = v117;
      }
      while (v22 != v46);
    }
  }
LABEL_130:
  *(_QWORD *)(a1 + 736) = v53;
  *(_QWORD *)(a1 + 744) = v24;
  *(_QWORD *)(a1 + 752) = v23;
  if (v46)
  {
    operator delete(v46);
    v23 = *(char **)(a1 + 752);
  }
LABEL_132:
  *(_QWORD *)(a1 + 744) = v24;
  if (v24 < v23)
  {
    *(_DWORD *)v24 = 208;
    v118 = v24 + 4;
    goto LABEL_155;
  }
  v119 = (char *)*v21;
  v120 = v24 - (_BYTE *)*v21;
  v121 = v120 >> 2;
  v122 = (v120 >> 2) + 1;
  if (v122 >> 62)
    goto LABEL_203;
  v123 = v23 - v119;
  if (v123 >> 1 > v122)
    v122 = v123 >> 1;
  if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
    v124 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v124 = v122;
  if (v124)
  {
    if (v124 >> 62)
      goto LABEL_202;
    v125 = operator new(4 * v124);
  }
  else
  {
    v125 = 0;
  }
  v126 = &v125[4 * v121];
  v23 = &v125[4 * v124];
  *v126 = 208;
  v118 = (char *)(v126 + 1);
  if (v24 != v119)
  {
    v127 = v24 - v119 - 4;
    if (v127 < 0x2C)
    {
      v128 = v24;
      goto LABEL_152;
    }
    if ((unint64_t)(v24 - v125 - v120) < 0x20)
    {
      v128 = v24;
      do
      {
LABEL_152:
        v135 = *((_DWORD *)v128 - 1);
        v128 -= 4;
        *--v126 = v135;
      }
      while (v128 != v119);
      goto LABEL_153;
    }
    v129 = (v127 >> 2) + 1;
    v130 = 4 * (v129 & 0x7FFFFFFFFFFFFFF8);
    v128 = &v24[-v130];
    v126 = (_DWORD *)((char *)v126 - v130);
    v131 = &v125[4 * v121 - 16];
    v132 = (__int128 *)(v24 - 16);
    v133 = v129 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v134 = *v132;
      *(v131 - 1) = *(v132 - 1);
      *v131 = v134;
      v131 -= 2;
      v132 -= 2;
      v133 -= 8;
    }
    while (v133);
    if (v129 != (v129 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_152;
  }
LABEL_153:
  *(_QWORD *)(a1 + 736) = v126;
  *(_QWORD *)(a1 + 744) = v118;
  *(_QWORD *)(a1 + 752) = v23;
  if (v119)
  {
    operator delete(v119);
    v23 = *(char **)(a1 + 752);
  }
LABEL_155:
  *(_QWORD *)(a1 + 744) = v118;
  if (v118 >= v23)
  {
    v137 = (char *)*v21;
    v138 = v118 - (_BYTE *)*v21;
    v139 = v138 >> 2;
    v140 = (v138 >> 2) + 1;
    if (v140 >> 62)
      goto LABEL_203;
    v141 = v23 - v137;
    if (v141 >> 1 > v140)
      v140 = v141 >> 1;
    if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
      v142 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v142 = v140;
    if (v142)
    {
      if (v142 >> 62)
        goto LABEL_202;
      v143 = operator new(4 * v142);
    }
    else
    {
      v143 = 0;
    }
    v144 = &v143[4 * v139];
    v145 = &v143[4 * v142];
    *v144 = 416;
    v136 = v144 + 1;
    if (v118 == v137)
      goto LABEL_176;
    v146 = v118 - v137 - 4;
    if (v146 >= 0x2C)
    {
      if ((unint64_t)(v118 - v143 - v138) >= 0x20)
      {
        v148 = (v146 >> 2) + 1;
        v149 = 4 * (v148 & 0x7FFFFFFFFFFFFFF8);
        v147 = &v118[-v149];
        v144 = (_DWORD *)((char *)v144 - v149);
        v150 = &v143[4 * v139 - 16];
        v151 = v118 - 16;
        v152 = v148 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v153 = *(_OWORD *)v151;
          *(v150 - 1) = *((_OWORD *)v151 - 1);
          *v150 = v153;
          v150 -= 2;
          v151 -= 32;
          v152 -= 8;
        }
        while (v152);
        if (v148 == (v148 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_176:
          *(_QWORD *)(a1 + 736) = v144;
          *(_QWORD *)(a1 + 744) = v136;
          *(_QWORD *)(a1 + 752) = v145;
          if (v137)
            operator delete(v137);
          goto LABEL_178;
        }
      }
      else
      {
        v147 = v118;
      }
    }
    else
    {
      v147 = v118;
    }
    do
    {
      v154 = *((_DWORD *)v147 - 1);
      v147 -= 4;
      *--v144 = v154;
    }
    while (v147 != v137);
    goto LABEL_176;
  }
  *(_DWORD *)v118 = 416;
  v136 = v118 + 4;
LABEL_178:
  *(_QWORD *)(a1 + 744) = v136;
  v155 = *(_QWORD *)(a1 + 672);
  v156 = *(_QWORD *)(a1 + 688);
  v157 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 696) - v156) >> 3);
  if (v155 <= v157)
  {
    if (v155 < v157)
      *(_QWORD *)(a1 + 696) = v156 + 40 * v155;
  }
  else
  {
    sub_20E7D5644((char **)(a1 + 688), v155 - v157);
    v155 = *(_QWORD *)(a1 + 672);
  }
  v158 = *(_QWORD *)(a1 + 712);
  v159 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 720) - v158) >> 3);
  if (v155 <= v159)
  {
    if (v155 < v159)
      *(_QWORD *)(a1 + 720) = v158 + 40 * v155;
  }
  else
  {
    sub_20E7D5644((char **)(a1 + 712), v155 - v159);
    v158 = *(_QWORD *)(a1 + 712);
  }
  v160 = *(_QWORD *)(a1 + 688);
  *(_QWORD *)(v160 + 32) = 0;
  *(_OWORD *)v160 = 0u;
  *(_OWORD *)(v160 + 16) = 0u;
  *(_OWORD *)v158 = xmmword_20E80F3F0;
  *(_OWORD *)(v158 + 16) = xmmword_20E80F400;
  *(_OWORD *)(v160 + 40) = xmmword_20E80F410;
  *(_OWORD *)(v160 + 56) = xmmword_20E80F420;
  *(_QWORD *)(v160 + 72) = 12;
  *(_OWORD *)(v158 + 32) = xmmword_20E80F430;
  *(_OWORD *)(v158 + 48) = xmmword_20E80F440;
  *(_OWORD *)(v158 + 64) = xmmword_20E80F450;
  *(_OWORD *)(v160 + 80) = xmmword_20E80F460;
  *(_OWORD *)(v160 + 96) = xmmword_20E80F470;
  *(_QWORD *)(v160 + 112) = 13;
  *(_OWORD *)(v158 + 80) = xmmword_20E80F3F0;
  *(_OWORD *)(v158 + 96) = xmmword_20E80F400;
  *(_QWORD *)(v158 + 112) = 0x320000001BLL;
  if (*(_BYTE *)(a1 + 120))
  {
    *(_BYTE *)(a1 + 760) = 1;
    v161 = *(_QWORD *)(a1 + 672);
    v162 = *(_QWORD **)(a1 + 864);
    v163 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 872) - (_QWORD)v162) >> 3);
    if (v161 <= v163)
    {
      if (v161 < v163)
        *(_QWORD *)(a1 + 872) = &v162[5 * v161];
    }
    else
    {
      sub_20E7D5644((char **)(a1 + 864), v161 - v163);
      v162 = *(_QWORD **)(a1 + 864);
    }
    *v162 = 0;
    v162[5] = 214;
    v162[10] = 216;
    *(_DWORD *)(a1 + 844) = 0;
    *v4 = xmmword_20E80F480;
    v162[1] = 0;
    v162[6] = 106;
    v162[11] = 108;
    *(_DWORD *)(a1 + 848) = 0;
    v4[3] = xmmword_20E80F490;
    v162[2] = 0;
    v162[7] = 52;
    v162[12] = 54;
    *(_DWORD *)(a1 + 852) = 0;
    v4[1] = xmmword_20E80F4A0;
    v162[3] = 0;
    v162[8] = 25;
    v162[13] = 27;
    *(_DWORD *)(a1 + 856) = 2;
    v4[2] = xmmword_20E80F4B0;
    v4[4] = xmmword_20E80F4C0;
    v162[4] = 0;
    v162[9] = 12;
    v162[14] = 13;
    *(_DWORD *)(a1 + 860) = 2;
  }
}

_QWORD *sub_20E7E6310(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_20E7E6370(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20E7E63B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  unsigned int *v17;
  uint64_t **v18;
  char *v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  const void **v25;
  uint64_t result;
  char *v27;
  char *v28;

  sub_20E7DEFB8(**(unint64_t ***)(a1 + 304), a2, a6, a7, a8, a9, a10, a11, a12, a13);
  sub_20E7F62D8(*(unsigned __int16 **)(*(_QWORD *)(a1 + 304) + 8), *(_QWORD **)(**(_QWORD **)(a1 + 304) + 56), a4);
  v17 = *(unsigned int **)(a1 + 656);
  if (!v17)
  {
    v18 = (uint64_t **)(a1 + 656);
    v19 = (char *)(a1 + 656);
    goto LABEL_13;
  }
  do
  {
    while (1)
    {
      v19 = (char *)v17;
      v20 = v17[8];
      if (v20 > a3)
        goto LABEL_3;
      if (v20 != (_DWORD)a3)
        break;
      v21 = *((_DWORD *)v19 + 9);
      if (v21 <= HIDWORD(a3))
      {
        if (v21 >= HIDWORD(a3))
          goto LABEL_16;
        goto LABEL_10;
      }
LABEL_3:
      v17 = *(unsigned int **)v19;
      v18 = (uint64_t **)v19;
      if (!*(_QWORD *)v19)
        goto LABEL_13;
    }
    if (v20 >= a3)
      goto LABEL_16;
LABEL_10:
    v17 = (unsigned int *)*((_QWORD *)v19 + 1);
  }
  while (v17);
  v18 = (uint64_t **)(v19 + 8);
LABEL_13:
  v22 = v19;
  v19 = (char *)operator new(0xE8uLL);
  *((_QWORD *)v19 + 4) = a3;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  *(_OWORD *)(v19 + 168) = 0u;
  *(_OWORD *)(v19 + 184) = 0u;
  *(_OWORD *)(v19 + 200) = 0u;
  *(_OWORD *)(v19 + 216) = 0u;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = v22;
  *v18 = (uint64_t *)v19;
  v23 = (uint64_t *)v19;
  v24 = **(_QWORD **)(a1 + 648);
  if (v24)
  {
    *(_QWORD *)(a1 + 648) = v24;
    v23 = *v18;
  }
  sub_20E793910(*(uint64_t **)(a1 + 656), v23);
  ++*(_QWORD *)(a1 + 664);
LABEL_16:
  v25 = (const void **)(v19 + 40);
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, const void **, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 304) + 16)
                                                                                            + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 16), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 8) + 248), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 8) + 256) + 200, a1 + 392, a1 + 328, v25, a4);
  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 304)
                                                                                              + 24)
                                                                                + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 16) + 8) + 200, *(_QWORD *)(**(_QWORD **)(a1 + 304) + 48), a5, a4);
  if (*(_BYTE *)(a1 + 24))
  {
    if ((*(_DWORD *)a1 | 2) == 2)
    {
      v27 = (char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v27 = *(char **)v27;
      result = sub_20E7D5EA8(**(_QWORD **)(a1 + 304), *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 304) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 304) + 24), v25, v27);
      if ((result & 1) == 0)
        sub_20E80C480();
    }
    else
    {
      v28 = (char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v28 = *(char **)v28;
      result = sub_20E7DA510(**(_QWORD **)(a1 + 304), *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 304) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 304) + 24), v25, v28);
      if ((result & 1) == 0)
        sub_20E80C454();
    }
  }
  return result;
}

void sub_20E7E65C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  unint64_t v16;
  unsigned int **v17;
  unsigned int *v18;
  uint64_t *v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  char **v23;
  char *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t **v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int8x16_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unsigned int *v48;
  char *v49;
  unsigned int v50;
  unsigned int v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64x2_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t (**v61)();
  char v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[2];
  char v68;
  void *__p;
  void *v70;
  uint64_t v71;

  v16 = HIDWORD(a3);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(a4 + 80);
  *(_QWORD *)(a4 + 136) = *(_QWORD *)(a4 + 128);
  *(_QWORD *)(a4 + 112) = *(_QWORD *)(a4 + 104);
  *(_QWORD *)(a4 + 40) = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(a4 + 64) = *(_QWORD *)(a4 + 56);
  v17 = (unsigned int **)(a1 + 656);
  v18 = *(unsigned int **)(a1 + 656);
  if (v18)
  {
    v19 = *(uint64_t **)(a1 + 656);
    while (1)
    {
      v21 = *((_DWORD *)v19 + 8);
      if (v21 <= a3)
      {
        if (v21 != (_DWORD)a3)
        {
          v20 = v21 >= a3;
LABEL_3:
          if (v20)
            goto LABEL_27;
          ++v19;
          goto LABEL_5;
        }
        v22 = *((_DWORD *)v19 + 9);
        v20 = v22 >= HIDWORD(a3);
        if (v22 <= HIDWORD(a3))
          goto LABEL_3;
      }
LABEL_5:
      v19 = (uint64_t *)*v19;
      if (!v19)
      {
        v23 = (char **)(a1 + 456);
        while (1)
        {
          v24 = (char *)v18;
          v25 = v18[8];
          if (v25 > a3)
            goto LABEL_12;
          if (v25 != (_DWORD)a3)
          {
            if (v25 >= a3)
              goto LABEL_26;
            goto LABEL_19;
          }
          v26 = *((_DWORD *)v24 + 9);
          if (v26 > HIDWORD(a3))
          {
LABEL_12:
            v18 = *(unsigned int **)v24;
            if (!*(_QWORD *)v24)
            {
              v27 = (uint64_t **)v24;
              goto LABEL_23;
            }
          }
          else
          {
            if (v26 >= HIDWORD(a3))
              goto LABEL_26;
LABEL_19:
            v18 = (unsigned int *)*((_QWORD *)v24 + 1);
            if (!v18)
            {
              v27 = (uint64_t **)(v24 + 8);
              goto LABEL_23;
            }
          }
        }
      }
    }
  }
  v23 = (char **)(a1 + 456);
  v27 = (uint64_t **)(a1 + 656);
  v24 = (char *)(a1 + 656);
LABEL_23:
  v28 = v24;
  v24 = (char *)operator new(0xE8uLL);
  *((_QWORD *)v24 + 4) = a3;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_OWORD *)(v24 + 56) = 0u;
  *(_OWORD *)(v24 + 72) = 0u;
  *(_OWORD *)(v24 + 88) = 0u;
  *(_OWORD *)(v24 + 104) = 0u;
  *(_OWORD *)(v24 + 120) = 0u;
  *(_OWORD *)(v24 + 136) = 0u;
  *(_OWORD *)(v24 + 152) = 0u;
  *(_OWORD *)(v24 + 168) = 0u;
  *(_OWORD *)(v24 + 184) = 0u;
  *(_OWORD *)(v24 + 200) = 0u;
  *(_OWORD *)(v24 + 216) = 0u;
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = v28;
  *v27 = (uint64_t *)v24;
  v29 = (uint64_t *)v24;
  v30 = **(_QWORD **)(a1 + 648);
  if (v30)
  {
    *(_QWORD *)(a1 + 648) = v30;
    v29 = *v27;
  }
  sub_20E793910(*(uint64_t **)(a1 + 656), v29);
  ++*(_QWORD *)(a1 + 664);
LABEL_26:
  sub_20E7E6AE8((char **)v24 + 5, v23);
LABEL_27:
  if (*(_QWORD *)(a1 + 672) == 1)
  {
    sub_20E7E63B4(a1, a2, a3, 0, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  else
  {
    v61 = &off_24C9A8A80;
    v62 = 0;
    v68 = 0;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    memset(v67, 0, 25);
    v70 = 0;
    v71 = 0;
    __p = 0;
    sub_20E7E6BB8(&v61, *(_QWORD *)(a1 + 680), *(_QWORD *)(a1 + 680), *(_QWORD *)(a1 + 16), 1, 0, 0);
    if (*(_QWORD *)(a1 + 672))
    {
      v39 = 0;
      v40 = 0;
      do
      {
        if (*(_QWORD *)(a1 + 16))
        {
          v41 = 0;
          do
          {
            memcpy(*((void **)__p + v41), (const void *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v41)+ *(unsigned int *)(*(_QWORD *)(a1 + 736) + 4 * v39)), *(_QWORD *)(a1 + 680));
            ++v41;
          }
          while (v41 < *(_QWORD *)(a1 + 16));
        }
        sub_20E7E63B4(a1, (uint64_t)&v61, a3, v40, a4, v31, v32, v33, v34, v35, v36, v37, v38);
        v39 = (v40 + 1);
        v40 = v39;
      }
      while (*(_QWORD *)(a1 + 672) > v39);
    }
    v61 = &off_24C9A8A80;
    if (__p)
    {
      v70 = __p;
      operator delete(__p);
    }
    v42 = *(std::__shared_weak_count **)&v67[1];
    if (*(_QWORD *)&v67[1])
    {
      v43 = (unint64_t *)(*(_QWORD *)&v67[1] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = *(std::__shared_weak_count **)&v67[0];
    if (*(_QWORD *)&v67[0])
    {
      v46 = (unint64_t *)(*(_QWORD *)&v67[0] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 80))
    goto LABEL_63;
  v48 = *v17;
  v49 = (char *)v17;
  if (!*v17)
    goto LABEL_59;
  do
  {
    while (1)
    {
      v49 = (char *)v48;
      v50 = v48[8];
      if (v50 > a3)
        goto LABEL_50;
      if (v50 != (_DWORD)a3)
        break;
      v51 = *((_DWORD *)v49 + 9);
      if (v51 <= v16)
      {
        if (v51 >= v16)
          goto LABEL_62;
        goto LABEL_57;
      }
LABEL_50:
      v48 = *(unsigned int **)v49;
      v17 = (unsigned int **)v49;
      if (!*(_QWORD *)v49)
        goto LABEL_59;
    }
    if (v50 >= a3)
      goto LABEL_62;
LABEL_57:
    v48 = (unsigned int *)*((_QWORD *)v49 + 1);
  }
  while (v48);
  v17 = (unsigned int **)(v49 + 8);
LABEL_59:
  v52 = v49;
  v49 = (char *)operator new(0xE8uLL);
  *((_QWORD *)v49 + 4) = a3;
  *(_OWORD *)(v49 + 40) = 0u;
  *(_OWORD *)(v49 + 56) = 0u;
  *(_OWORD *)(v49 + 72) = 0u;
  *(_OWORD *)(v49 + 88) = 0u;
  *(_OWORD *)(v49 + 104) = 0u;
  *(_OWORD *)(v49 + 120) = 0u;
  *(_OWORD *)(v49 + 136) = 0u;
  *(_OWORD *)(v49 + 152) = 0u;
  *(_OWORD *)(v49 + 168) = 0u;
  *(_OWORD *)(v49 + 184) = 0u;
  *(_OWORD *)(v49 + 200) = 0u;
  *(_OWORD *)(v49 + 216) = 0u;
  *(_QWORD *)v49 = 0;
  *((_QWORD *)v49 + 1) = 0;
  *((_QWORD *)v49 + 2) = v52;
  *v17 = (unsigned int *)v49;
  v53 = (uint64_t *)v49;
  v54 = **(_QWORD **)(a1 + 648);
  if (v54)
  {
    *(_QWORD *)(a1 + 648) = v54;
    v53 = (uint64_t *)*v17;
  }
  sub_20E793910(*(uint64_t **)(a1 + 656), v53);
  ++*(_QWORD *)(a1 + 664);
LABEL_62:
  sub_20E7E7700(a1 + 328, (uint64_t)(v49 + 40), 2 * *(_QWORD *)(a1 + 320), *(_DWORD *)(a1 + 60), a1 + 392, *(float *)(a1 + 84));
LABEL_63:
  if (*(_BYTE *)(a1 + 224))
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 304) + 24) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 24), a4);
    if (*(_BYTE *)(a1 + 225))
    {
      v55 = *(_QWORD *)(a4 + 208);
      if (v55 == *(_QWORD *)(a4 + 200))
      {
        v58 = vdupq_n_s64(v55);
      }
      else
      {
        v56 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 32);
        *(_DWORD *)(v56 + 544) = *(_DWORD *)a4;
        sub_20E7E88B8(v56, a4 + 200, (uint64_t *)(a4 + 176));
        v57 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 32);
        if (a4 + 224 != v57 + 520)
        {
          sub_20E7E6DE4((_QWORD *)(a4 + 224), *(char **)(v57 + 520), *(char **)(v57 + 528), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v57 + 528) - *(_QWORD *)(v57 + 520)) >> 2));
          v57 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 32);
        }
        *(_DWORD *)a4 = *(_DWORD *)(v57 + 544);
        v58 = *(int64x2_t *)(a4 + 200);
      }
      v59 = *(_OWORD *)(a4 + 176);
      *(int64x2_t *)(a4 + 176) = v58;
      *(_OWORD *)(a4 + 200) = v59;
      v60 = *(_QWORD *)(a4 + 192);
      *(_QWORD *)(a4 + 192) = *(_QWORD *)(a4 + 216);
      *(_QWORD *)(a4 + 216) = v60;
    }
  }
}

void sub_20E7E6AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E7B9978(&a9);
  _Unwind_Resume(a1);
}

void sub_20E7E6AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E7B9978(&a9);
  _Unwind_Resume(a1);
}

char **sub_20E7E6AE8(char **a1, char **a2)
{
  if (a1 != a2)
  {
    sub_20E7E7298(a1, *a2, a2[1], (a2[1] - *a2) >> 2);
    sub_20E7E7298(a1 + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 2);
    sub_20E7E7298(a1 + 6, a2[6], a2[7], (a2[7] - a2[6]) >> 2);
    sub_20E7E7298(a1 + 9, a2[9], a2[10], (a2[10] - a2[9]) >> 2);
    sub_20E7E7298(a1 + 12, a2[12], a2[13], (a2[13] - a2[12]) >> 2);
    sub_20E7E7298(a1 + 15, a2[15], a2[16], (a2[16] - a2[15]) >> 2);
    sub_20E7E7298(a1 + 18, a2[18], a2[19], (a2[19] - a2[18]) >> 2);
    sub_20E7E7298(a1 + 21, a2[21], a2[22], (a2[22] - a2[21]) >> 2);
  }
  return a1;
}

void sub_20E7E6BB8(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;

  a1[4] = a2;
  a1[5] = a3;
  a1[6] = a4;
  a1[2] = a5;
  v14 = operator new[]();
  *(_QWORD *)&v21 = v14;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24C9A8FC0;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v14;
  *((_QWORD *)&v21 + 1) = v15;
  LOBYTE(v19) = 0;
  v20 = 0;
  sub_20E7B9B6C((uint64_t)a1, &v21, a2, a3, a4, a5, a6, a7, &v19);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20E7E6CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E7858BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7E6CE4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x212BC47A4](v1, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_20E7E6D08(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20E7E6D1C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 32);
    *(_QWORD *)(v1 + 32) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 24) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(_QWORD **)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (v5)
    {
      v6 = sub_20E7E71B8(v5);
      MEMORY[0x212BC47D4](v6, 0x1020C40EB8A5903);
    }
    v7 = *(_QWORD **)v1;
    *(_QWORD *)v1 = 0;
    if (v7)
    {
      v8 = sub_20E7E6F7C(v7);
      MEMORY[0x212BC47D4](v8, 0x10B0C40401BBC4ELL);
    }
    JUMPOUT(0x212BC47D4);
  }
  return result;
}

_QWORD *sub_20E7E6DE4(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *result) >> 2) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x4EC4EC4EC4EC4ECLL)
      goto LABEL_23;
    v10 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x276276276276276 ? 0x4EC4EC4EC4EC4ECLL : v11;
    if (v12 > 0x4EC4EC4EC4EC4ECLL)
LABEL_23:
      sub_20E78D874();
    v13 = 52 * v12;
    result = operator new(52 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0x4EC4EC4EC4EC4EC5 * ((v16 - v9) >> 2) >= a4)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_20E7E6F7C(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void *v13;
  void (***v14)(_QWORD);
  void (***v15)(_QWORD);
  void (**v16)(_QWORD);
  BOOL v17;
  _QWORD *v18;
  void *v19;
  void (***v20)(_QWORD);
  void (***v21)(_QWORD);
  void *v22;
  void (***v23)(_QWORD);
  void (***v24)(_QWORD);
  void (**v25)(_QWORD);
  _QWORD *v26;
  void *v27;
  void (***v28)(_QWORD);
  void (***v29)(_QWORD);
  void *v30;
  void (***v31)(_QWORD);
  void (***v32)(_QWORD);
  void (**v33)(_QWORD);

  a1[9] = &off_24C9A8E68;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[21];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[19];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[19];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (_QWORD *)a1[8];
  a1[8] = 0;
  if (v9)
  {
    v10 = (void *)v9[9];
    if (v10)
    {
      v9[10] = v10;
      operator delete(v10);
    }
    v11 = (void (***)(_QWORD))v9[6];
    if (v11)
    {
      v12 = (void (***)(_QWORD))v9[7];
      v13 = (void *)v9[6];
      if (v12 != v11)
      {
        v14 = v12 - 18;
        v15 = v12 - 18;
        do
        {
          v16 = *v15;
          v15 -= 18;
          (*v16)(v14);
          v17 = v14 == v11;
          v14 = v15;
        }
        while (!v17);
        v13 = (void *)v9[6];
      }
      v9[7] = v11;
      operator delete(v13);
    }
    MEMORY[0x212BC47D4](v9, 0x1020C4024B85F43);
  }
  v18 = (_QWORD *)a1[7];
  a1[7] = 0;
  if (v18)
  {
    v19 = (void *)v18[9];
    if (v19)
    {
      v18[10] = v19;
      operator delete(v19);
    }
    v20 = (void (***)(_QWORD))v18[6];
    if (v20)
    {
      v21 = (void (***)(_QWORD))v18[7];
      v22 = (void *)v18[6];
      if (v21 != v20)
      {
        v23 = v21 - 18;
        v24 = v21 - 18;
        do
        {
          v25 = *v24;
          v24 -= 18;
          (*v25)(v23);
          v17 = v23 == v20;
          v23 = v24;
        }
        while (!v17);
        v22 = (void *)v18[6];
      }
      v18[7] = v20;
      operator delete(v22);
    }
    MEMORY[0x212BC47D4](v18, 0x1020C4024B85F43);
  }
  v26 = (_QWORD *)a1[6];
  a1[6] = 0;
  if (v26)
  {
    v27 = (void *)v26[9];
    if (v27)
    {
      v26[10] = v27;
      operator delete(v27);
    }
    v28 = (void (***)(_QWORD))v26[6];
    if (v28)
    {
      v29 = (void (***)(_QWORD))v26[7];
      v30 = (void *)v26[6];
      if (v29 != v28)
      {
        v31 = v29 - 18;
        v32 = v29 - 18;
        do
        {
          v33 = *v32;
          v32 -= 18;
          (*v33)(v31);
          v17 = v31 == v28;
          v31 = v32;
        }
        while (!v17);
        v30 = (void *)v26[6];
      }
      v26[7] = v28;
      operator delete(v30);
    }
    MEMORY[0x212BC47D4](v26, 0x1020C4024B85F43);
  }
  return a1;
}

_QWORD *sub_20E7E71B8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;
  void *v12;
  void *v13;

  v2 = (_QWORD *)a1[32];
  a1[32] = 0;
  if (v2)
    sub_20E7CEBA0((uint64_t)(a1 + 32), v2);
  v3 = (_QWORD *)a1[31];
  a1[31] = 0;
  if (v3)
  {
    v4 = (void *)v3[9];
    if (v4)
    {
      v3[10] = v4;
      operator delete(v4);
    }
    v5 = (void (***)(_QWORD))v3[6];
    if (v5)
    {
      v6 = (void (***)(_QWORD))v3[7];
      v7 = (void *)v3[6];
      if (v6 != v5)
      {
        v8 = v6 - 18;
        v9 = v6 - 18;
        do
        {
          v10 = *v9;
          v9 -= 18;
          (*v10)(v8);
          v11 = v8 == v5;
          v8 = v9;
        }
        while (!v11);
        v7 = (void *)v3[6];
      }
      v3[7] = v5;
      operator delete(v7);
    }
    MEMORY[0x212BC47D4](v3, 0x1020C4024B85F43);
  }
  v12 = (void *)a1[28];
  if (v12)
  {
    a1[29] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[25];
  if (v13)
  {
    a1[26] = v13;
    operator delete(v13);
  }
  return a1;
}

_QWORD *sub_20E7E7298(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_20E78D874();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20E7E73E0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E7E7404(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x212BC47A4);
  return result;
}

uint64_t sub_20E7E7424(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3vio8cv_types12ArrayDeleterIhEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIhEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3vio8cv_types12ArrayDeleterIhEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIhEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E7E7494(uint64_t a1)
{
  _BOOL4 v1;
  int v2;
  BOOL v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  int v8;
  float v9;
  unsigned int v10;

  v1 = (*(_DWORD *)a1 | 2) == 2 && *(_BYTE *)(a1 + 120) != 0;
  if (*(_BYTE *)(a1 + 224))
    v2 = v1;
  else
    v2 = 1;
  if (*(_BYTE *)(a1 + 225))
    v1 = v2;
  if (*(_DWORD *)a1)
    v3 = 1;
  else
    v3 = *(_BYTE *)(a1 + 224) == 0;
  v4 = !v3 || v1;
  if (*(_BYTE *)(a1 + 224))
  {
    v5 = *(_DWORD *)(a1 + 240);
    if (*(_DWORD *)(a1 + 244) <= 0x100u)
    {
      v6 = v5 >= 0x4000;
      v7 = v5 == 0x4000;
    }
    else
    {
      v6 = 1;
      v7 = 0;
    }
    v8 = !v7 && v6;
    v9 = *(float *)(a1 + 296);
    if (v9 < 0.0)
      v8 = 1;
    if (v9 > 1.0)
      v8 = 1;
    if (*(_DWORD *)(a1 + 232) > 0x200u)
      v8 = 1;
    v4 |= v8;
  }
  v10 = v4 ^ 1;
  if (*(_DWORD *)(a1 + 64) < 0x40u)
    return v10;
  else
    return 0;
}

BOOL sub_20E7E7530(uint64_t a1)
{
  unint64_t v1;
  unint64_t v3;
  BOOL v4;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 < 0xA0)
    return 0;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 < 0xA0)
    return 0;
  if ((*(_DWORD *)a1 | 2) == 2)
  {
    if (v1 > 0x280)
      return 0;
  }
  else if (v1 > 0x1000)
  {
    return 0;
  }
  if (v3 > 0x2000)
    return 0;
  if (*(_BYTE *)(a1 + 225))
    v4 = *(_BYTE *)(a1 + 224) == 0;
  else
    v4 = 0;
  return !v4;
}

float sub_20E7E75AC(unint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int8x16_t *v10;
  unint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  float result;
  _QWORD v16[3];
  _OWORD v17[2];
  uint64_t v18;

  memset(v16, 0, sizeof(v16));
  v17[0] = xmmword_20E80F6B0;
  v17[1] = xmmword_20E80F6C0;
  v18 = 10;
  if (a2 <= 2)
    sub_20E80C4D8();
  if (a2 - 2 >= 9)
    sub_20E80C4AC();
  v6 = a2 - 3;
  a3[7] = 0;
  *(_OWORD *)(a3 + 5) = 0u;
  *(_OWORD *)(a3 + 3) = 0u;
  if (a2 - 3 >= 3)
  {
    memcpy(a3 + 3, v17, 8 * a2 - 40);
    v7 = a2 - 5;
    if (a2 - 5 < 4)
      goto LABEL_14;
    v6 -= v7 & 0xFFFFFFFFFFFFFFFCLL;
    v8 = 0uLL;
    v9 = (int64x2_t)a1;
    v10 = (int8x16_t *)&v16[a2 - 6];
    v11 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v13 = *v10;
      v12 = v10[1];
      v10 -= 2;
      v9 = vsubq_s64(v9, (int64x2_t)vextq_s8(v12, v12, 8uLL));
      v8 = vsubq_s64(v8, (int64x2_t)vextq_s8(v13, v13, 8uLL));
      v11 -= 4;
    }
    while (v11);
    a1 = vaddvq_s64(vaddq_s64(v8, v9));
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_14:
      do
        a1 -= v16[v6--];
      while (v6 > 2);
    }
  }
  v14 = (unint64_t)(float)((float)a1 * 0.21);
  a3[2] = v14;
  result = (float)a1 * 0.25;
  *a3 = a1 - (v14 + (unint64_t)result);
  a3[1] = (unint64_t)result;
  return result;
}

void sub_20E7E7700(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, float a6)
{
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v6 = a3 - 2;
  if (a3 <= 2)
    sub_20E80C55C();
  if (v6 > 8)
    sub_20E80C530();
  v8 = 0;
  v9 = a4 >> 5;
  v10 = a4;
  do
  {
    v11 = *(_QWORD *)(a1 + 8 * v8);
    v12 = *(_QWORD *)(a2 + 24 * v8 + 8);
    v13 = *(const void **)(a2 + 24 * v8);
    v14 = v12 - (_QWORD)v13;
    if (v12 - (uint64_t)v13 < 0)
      sub_20E78D874();
    v15 = v14 >> 2;
    v16 = (char *)operator new(v12 - (_QWORD)v13);
    memcpy(v16, v13, v14);
    v17 = &v16[(v14 & 0xFFFFFFFFFFFFFFFCLL) - 4];
    if (v17 != v16)
    {
      v18 = *(_DWORD *)v17;
      v19 = 4 * v15;
      v20 = v16 - 8;
      do
      {
        v18 += *(_DWORD *)&v20[v19];
        *(_DWORD *)&v20[v19] = v18;
        v19 -= 4;
      }
      while (v19 != 4);
    }
    v21 = (unint64_t)(float)((float)v11 * a6);
    if (v15 <= v9)
      v22 = v15 - 1;
    else
      v22 = v9;
    v23 = v10;
    if (*(unsigned int *)&v16[4 * v22] >= v21)
    {
      v24 = 32 * (v22 + 1);
      if (v22 + 1 >= v15)
      {
LABEL_17:
        v23 = v24 - 32 * v21 / *(unsigned int *)v17;
      }
      else
      {
        v25 = &v16[4 * v22 + 4];
        v26 = ~v22 + v15;
        while (1)
        {
          v27 = *(unsigned int *)v25;
          v28 = v21 - v27;
          if (v21 > v27)
            break;
          v24 += 32;
          v25 += 4;
          if (!--v26)
          {
            v24 = 8 * v14;
            goto LABEL_17;
          }
        }
        v29 = (*((_DWORD *)v25 - 1) - v27);
        if (v24 - 32 * v28 / v29 <= v10)
          v23 = v10;
        else
          v23 = v24 - 32 * v28 / v29;
      }
    }
    *(_QWORD *)(a5 + 8 * v8) = v23;
    operator delete(v16);
    if (*(_QWORD *)(a5 + 8 * v8) < v10)
      sub_20E80C504();
    ++v8;
  }
  while (v8 != v6);
}

void sub_20E7E78DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7E78F8(unsigned int a1, unsigned int a2)
{
  if (a1 - 160 >= 0xF61)
    sub_20E80C5B4();
  if (a2 - 160 >= 0x1F61)
    sub_20E80C588();
  if (a2 > 0x140 && a1 > 0x140)
    return 5;
  else
    return 4;
}

uint64_t sub_20E7E7940(unsigned int a1, unsigned int a2)
{
  if (a1 > 0x2000)
    sub_20E80C60C();
  if (a2 >= 5)
    sub_20E80C5E0();
  return (a1 + (1 << a2) - 1) >> a2;
}

void sub_20E7E797C(unsigned __int32 a1, unsigned __int32 a2, int a3, int a4, unsigned int *a5, double a6, uint32x4_t a7)
{
  unsigned int *v7;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t *v22;
  int32x4_t v23;
  int32x4_t v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t *v38;
  unint64_t v39;
  int32x4_t v40;
  int v41;
  int *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  BOOL v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  signed int v75;
  int v76;
  unsigned int *v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint32x4_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  __int32 *v99;
  uint64_t v100;
  int32x2_t v101;
  int32x2_t v102;
  int32x2_t v103;
  unsigned int *v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  __int32 *v110;
  uint64_t v111;
  int32x2_t v112;
  int32x2_t v113;
  int32x2_t v114;
  uint64_t v115;
  unsigned int *v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  __int32 *v121;
  uint64_t v122;
  int32x2_t v123;
  int32x2_t v124;
  int32x2_t v125;
  uint64_t v126;
  unsigned int *v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  __int32 *v132;
  uint64_t v133;
  int32x2_t v134;
  int32x2_t v135;
  int32x2_t v136;
  uint64_t v137;
  unsigned int *v138;
  int v139;
  int v140;
  uint64_t v141;
  int v142;
  __int32 *v143;
  uint64_t v144;
  int32x2_t v145;
  int32x2_t v146;
  int32x2_t v147;
  uint64_t v148;
  unsigned int *v149;
  int v150;
  int v151;
  int8x16_t v152;
  int v153;
  float v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  BOOL v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;

  v7 = a5;
  v12 = a2 - a1;
  if (a2 <= a1)
  {
    if (*a5 != 1)
      sub_20E80C664();
    if (!a4)
      return;
LABEL_83:
    v7[497] = 32;
    v7[507] = 20;
    v7[499] = 16;
    v7[509] = 20;
    v7[501] = 8;
    v7[511] = 20;
    v7[503] = 4;
    v7[513] = 20;
    v95 = (uint32x4_t)xmmword_20E80F6F0;
    *(_OWORD *)(v7 + 517) = xmmword_20E80F6F0;
    v7[505] = 4;
    v7[515] = 10;
    v7[521] = 2;
    v96 = *v7;
    if (v96 < 2)
      goto LABEL_139;
    if (v96 >= 4)
    {
      v97 = v96 & 0xFFFFFFFC;
      v95 = 0uLL;
      v99 = (__int32 *)(v7 + 207);
      v100 = v97;
      a7 = 0uLL;
      do
      {
        v101.i32[0] = *(v99 - 30);
        v101.i32[1] = *(v99 - 20);
        v102.i32[0] = *(v99 - 10);
        v102.i32[1] = *v99;
        *(int32x2_t *)v95.i8 = vmax_s32(v101, *(int32x2_t *)v95.i8);
        *(int32x2_t *)a7.i8 = vmax_s32(v102, *(int32x2_t *)a7.i8);
        v99 += 40;
        v100 -= 4;
      }
      while (v100);
      v103 = vmax_s32(*(int32x2_t *)v95.i8, *(int32x2_t *)a7.i8);
      *(int32x2_t *)v95.i8 = vpmax_s32(v103, v103);
      v98 = v95.i32[0];
      if (v97 == v96)
        goto LABEL_93;
    }
    else
    {
      v97 = 0;
      v98 = 0;
    }
    v104 = &v7[10 * v97 + 177];
    v105 = v96 - v97;
    do
    {
      v107 = *v104;
      v104 += 10;
      v106 = v107;
      if (v107 > v98)
        v98 = v106;
      --v105;
    }
    while (v105);
LABEL_93:
    if (v98 > 0)
      v7[497] = (v98 + 19) / 20;
    if (v96 >= 4)
    {
      v108 = v96 & 0xFFFFFFFC;
      v95 = 0uLL;
      v110 = (__int32 *)(v7 + 209);
      v111 = v108;
      a7 = 0uLL;
      do
      {
        v112.i32[0] = *(v110 - 30);
        v112.i32[1] = *(v110 - 20);
        v113.i32[0] = *(v110 - 10);
        v113.i32[1] = *v110;
        *(int32x2_t *)v95.i8 = vmax_s32(v112, *(int32x2_t *)v95.i8);
        *(int32x2_t *)a7.i8 = vmax_s32(v113, *(int32x2_t *)a7.i8);
        v110 += 40;
        v111 -= 4;
      }
      while (v111);
      v114 = vmax_s32(*(int32x2_t *)v95.i8, *(int32x2_t *)a7.i8);
      *(int32x2_t *)v95.i8 = vpmax_s32(v114, v114);
      v109 = v95.i32[0];
      if (v108 == v96)
        goto LABEL_104;
    }
    else
    {
      v108 = 0;
      v109 = 0;
    }
    v115 = v96 - v108;
    v116 = &v7[10 * v108 + 179];
    do
    {
      v118 = *v116;
      v116 += 10;
      v117 = v118;
      if (v118 > v109)
        v109 = v117;
      --v115;
    }
    while (v115);
LABEL_104:
    if (v109 >= 1)
      v7[499] = (v109 + 19) / 20;
    if (v96 >= 4)
    {
      v119 = v96 & 0xFFFFFFFC;
      v95 = 0uLL;
      v121 = (__int32 *)(v7 + 211);
      v122 = v119;
      a7 = 0uLL;
      do
      {
        v123.i32[0] = *(v121 - 30);
        v123.i32[1] = *(v121 - 20);
        v124.i32[0] = *(v121 - 10);
        v124.i32[1] = *v121;
        *(int32x2_t *)v95.i8 = vmax_s32(v123, *(int32x2_t *)v95.i8);
        *(int32x2_t *)a7.i8 = vmax_s32(v124, *(int32x2_t *)a7.i8);
        v121 += 40;
        v122 -= 4;
      }
      while (v122);
      v125 = vmax_s32(*(int32x2_t *)v95.i8, *(int32x2_t *)a7.i8);
      *(int32x2_t *)v95.i8 = vpmax_s32(v125, v125);
      v120 = v95.i32[0];
      if (v119 == v96)
        goto LABEL_115;
    }
    else
    {
      v119 = 0;
      v120 = 0;
    }
    v126 = v96 - v119;
    v127 = &v7[10 * v119 + 181];
    do
    {
      v129 = *v127;
      v127 += 10;
      v128 = v129;
      if (v129 > v120)
        v120 = v128;
      --v126;
    }
    while (v126);
LABEL_115:
    if (v120 >= 1)
      v7[501] = (v120 + 19) / 20;
    if (v96 >= 4)
    {
      v130 = v96 & 0xFFFFFFFC;
      v95 = 0uLL;
      v132 = (__int32 *)(v7 + 213);
      v133 = v130;
      a7 = 0uLL;
      do
      {
        v134.i32[0] = *(v132 - 30);
        v134.i32[1] = *(v132 - 20);
        v135.i32[0] = *(v132 - 10);
        v135.i32[1] = *v132;
        *(int32x2_t *)v95.i8 = vmax_s32(v134, *(int32x2_t *)v95.i8);
        *(int32x2_t *)a7.i8 = vmax_s32(v135, *(int32x2_t *)a7.i8);
        v132 += 40;
        v133 -= 4;
      }
      while (v133);
      v136 = vmax_s32(*(int32x2_t *)v95.i8, *(int32x2_t *)a7.i8);
      *(int32x2_t *)v95.i8 = vpmax_s32(v136, v136);
      v131 = v95.i32[0];
      if (v130 == v96)
        goto LABEL_126;
    }
    else
    {
      v130 = 0;
      v131 = 0;
    }
    v137 = v96 - v130;
    v138 = &v7[10 * v130 + 183];
    do
    {
      v140 = *v138;
      v138 += 10;
      v139 = v140;
      if (v140 > v131)
        v131 = v139;
      --v137;
    }
    while (v137);
LABEL_126:
    if (v131 >= 1)
      v7[503] = (v131 + 19) / 20;
    if (v96 >= 4)
    {
      v141 = v96 & 0xFFFFFFFC;
      v95 = 0uLL;
      v143 = (__int32 *)(v7 + 215);
      v144 = v141;
      a7 = 0uLL;
      do
      {
        v145.i32[0] = *(v143 - 30);
        v145.i32[1] = *(v143 - 20);
        v146.i32[0] = *(v143 - 10);
        v146.i32[1] = *v143;
        *(int32x2_t *)v95.i8 = vmax_s32(v145, *(int32x2_t *)v95.i8);
        *(int32x2_t *)a7.i8 = vmax_s32(v146, *(int32x2_t *)a7.i8);
        v143 += 40;
        v144 -= 4;
      }
      while (v144);
      v147 = vmax_s32(*(int32x2_t *)v95.i8, *(int32x2_t *)a7.i8);
      *(int32x2_t *)v95.i8 = vpmax_s32(v147, v147);
      v142 = v95.i32[0];
      if (v141 == v96)
      {
LABEL_137:
        if (v142 >= 1)
          v7[505] = (v142 + 9) / 10;
LABEL_139:
        v95.i32[0] = a1;
        a7.i32[0] = a2;
        v152 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32(a7, v95), 0), (int8x16_t)xmmword_20E80F710, (int8x16_t)xmmword_20E80F700);
        if (a2 <= a1)
          v153 = 7;
        else
          v153 = 21;
        v154 = (float)a3 / 640.0;
        v155 = a3 + 255;
        if (a3 < -255)
          v155 = a3 + 510;
        v156 = v7[507];
        v157 = v155 >> 8;
        if (v154 < 1.0)
          v156 = (int)(float)(v154 * (float)v156);
        if (v157 <= v156)
          v157 = v156;
        if (v157 <= 2)
          v158 = 2;
        else
          v158 = v157;
        v159 = v152.i32[0];
        if (v158 >= v152.i32[0])
          v158 = v152.i32[0];
        v7[508] = 0;
        while (a3 % v159)
        {
          v160 = v159-- <= v158;
          if (v160)
          {
            v7[508] = v158;
            v7[498] = (a3 + v158 - 1) / v158;
            goto LABEL_159;
          }
        }
        v7[508] = v159;
        v7[498] = a3 / v159;
LABEL_159:
        v161 = a3 + 2;
        if (a3 >= -1)
          v161 = a3 + 1;
        v162 = v161 >> 1;
        v163 = v162 + 255;
        if (v162 < -255)
          v163 = v162 + 510;
        v164 = v163 >> 8;
        v165 = v7[509];
        if (v154 < 1.0)
          v165 = (int)(float)(v154 * (float)v165);
        if (v164 <= v165)
          v164 = v165;
        if (v164 <= 2)
          v164 = 2;
        v166 = v152.i32[1];
        if (v164 >= v152.i32[1])
          v164 = v152.i32[1];
        v7[510] = 0;
        while (v162 % v166)
        {
          v160 = v166-- <= v164;
          if (v160)
          {
            v7[510] = v164;
            v7[500] = (v162 + v164 - 1) / v164;
            goto LABEL_177;
          }
        }
        v7[510] = v166;
        v7[500] = v162 / v166;
LABEL_177:
        if (v162 >= -1)
          v167 = v162 + 1;
        else
          v167 = v162 + 2;
        v168 = v167 >> 1;
        v169 = v168 + 255;
        if (v168 < -255)
          v169 = v168 + 510;
        v170 = v169 >> 8;
        v171 = v7[511];
        if (v154 < 1.0)
          v171 = (int)(float)(v154 * (float)v171);
        if (v170 <= v171)
          v170 = v171;
        if (v170 <= 2)
          v170 = 2;
        v172 = v152.i32[2];
        if (v170 >= v152.i32[2])
          v170 = v152.i32[2];
        v7[512] = 0;
        while (v168 % v172)
        {
          v160 = v172-- <= v170;
          if (v160)
          {
            v7[512] = v170;
            v7[502] = (v168 + v170 - 1) / v170;
            goto LABEL_196;
          }
        }
        v7[512] = v172;
        v7[502] = v168 / v172;
LABEL_196:
        if (v168 >= -1)
          v173 = v168 + 1;
        else
          v173 = v168 + 2;
        v174 = v173 >> 1;
        v175 = v174 + 255;
        if (v174 < -255)
          v175 = v174 + 510;
        v176 = v175 >> 8;
        v177 = v7[513];
        if (v154 < 1.0)
          v177 = (int)(float)(v154 * (float)v177);
        if (v176 <= v177)
          v176 = v177;
        if (v176 <= 2)
          v176 = 2;
        v178 = v152.i32[3];
        if (v176 >= v152.i32[3])
          v176 = v152.i32[3];
        v7[514] = 0;
        while (v174 % v178)
        {
          v160 = v178-- <= v176;
          if (v160)
          {
            v7[514] = v176;
            v7[504] = (v174 + v176 - 1) / v176;
            goto LABEL_215;
          }
        }
        v7[514] = v178;
        v7[504] = v174 / v178;
LABEL_215:
        if (v174 >= -1)
          v179 = v174 + 1;
        else
          v179 = v174 + 2;
        v180 = v179 >> 1;
        v181 = v180 + 255;
        if (v180 < -255)
          v181 = v180 + 510;
        v182 = v7[515];
        v183 = v181 >> 8;
        if (v154 < 1.0)
          v182 = (int)(float)(v154 * (float)v182);
        if (v183 <= v182)
          v183 = v182;
        if (v183 <= 2)
          v183 = 2;
        if (v183 >= v153)
          v183 = v153;
        v7[516] = 0;
        while (v180 % v153)
        {
          v160 = v153-- <= v183;
          if (v160)
          {
            v7[516] = v183;
            v7[506] = (v180 + v183 - 1) / v183;
            goto LABEL_234;
          }
        }
        v7[516] = v153;
        v7[506] = v180 / v153;
LABEL_234:
        if ((_DWORD)v96)
        {
          do
          {
            v184 = v7[17];
            *(_QWORD *)(v7 + 337) = v184;
            if (v184 >= -1)
              v185 = v184 + 1;
            else
              v185 = v184 + 2;
            v186 = v185 >> 1;
            *(_QWORD *)(v7 + 339) = v186;
            if (v186 >= -1)
              v187 = v186 + 1;
            else
              v187 = v186 + 2;
            v188 = v187 >> 1;
            *(_QWORD *)(v7 + 341) = v188;
            if (v188 >= -1)
              v189 = v188 + 1;
            else
              v189 = v188 + 2;
            v190 = v189 >> 1;
            *(_QWORD *)(v7 + 343) = v190;
            if (v190 >= -1)
              v191 = v190 + 1;
            else
              v191 = v190 + 2;
            *(_QWORD *)(v7 + 345) = (v191 >> 1);
            v7 += 10;
            --v96;
          }
          while (v96);
        }
        return;
      }
    }
    else
    {
      v141 = 0;
      v142 = 0;
    }
    v148 = v96 - v141;
    v149 = &v7[10 * v141 + 185];
    do
    {
      v151 = *v149;
      v149 += 10;
      v150 = v151;
      if (v151 > v142)
        v142 = v150;
      --v148;
    }
    while (v148);
    goto LABEL_137;
  }
  bzero(a5, 0x828uLL);
  v13 = (float)(ceilf((float)v12 / (float)(a1 - 160)) + 1.0);
  if (v13 >= 0x11)
    sub_20E80C638();
  *v7 = v13;
  v14 = (v13 - 1);
  v15 = ceilf((float)((float)(v13 * a1 - a2) / (float)v14) * 0.5);
  v16 = (float)(v15 + v15);
  v17 = a1 - v16;
  v7[1] = 0;
  v7[v14 + 1] = v12;
  if (v14 >= 2)
  {
    if (v14 < 9)
    {
      v18 = 1;
LABEL_12:
      v26 = &v7[v18 + 1];
      v27 = v17 * v18;
      v28 = v14 - v18;
      do
      {
        *v26++ = v27;
        v27 += v17;
        --v28;
      }
      while (v28);
      goto LABEL_14;
    }
    v19 = (v14 - 1) & 0xFFFFFFFFFFFFFFF8;
    v18 = v19 | 1;
    v20 = vdupq_n_s32(v17);
    v21 = (int32x4_t)xmmword_20E80F6D0;
    v22 = (int32x4_t *)(v7 + 6);
    v23.i64[0] = 0x400000004;
    v23.i64[1] = 0x400000004;
    v24.i64[0] = 0x800000008;
    v24.i64[1] = 0x800000008;
    v25 = v19;
    do
    {
      v22[-1] = vmulq_s32(v20, v21);
      *v22 = vmulq_s32(v20, vaddq_s32(v21, v23));
      v21 = vaddq_s32(v21, v24);
      v22 += 2;
      v25 -= 8;
    }
    while (v25);
    if (v14 - 1 != v19)
      goto LABEL_12;
  }
LABEL_14:
  v29 = operator new(4 * (v13 + 1));
  bzero(v29, 4 * (v13 + 1));
  *v29 = 0;
  v29[1] = ((a2 - v17 * ((_DWORD)v13 - 2)) >> 1) + 1;
  v29[v13] = a2;
  if (v13 < 3)
    goto LABEL_22;
  v30 = v17 + 1;
  v31 = v29[1];
  v32 = v13 - 2;
  if ((unint64_t)(v13 - 2) < 8)
  {
    v33 = 2;
    v34 = v29[1];
LABEL_20:
    v41 = v34 + a1 - v16 + 1;
    v42 = &v29[v33];
    v43 = v13 - v33;
    do
    {
      *v42++ = v41;
      v41 += v30;
      --v43;
    }
    while (v43);
    goto LABEL_22;
  }
  v34 = v31 + v30 * (v32 & 0xFFFFFFF8);
  v33 = v32 & 0xFFFFFFFFFFFFFFF8 | 2;
  v35 = vdupq_n_s32(v30);
  v36 = vmlaq_s32(vdupq_n_s32(v31), v35, (int32x4_t)xmmword_20E80F6E0);
  v37 = vdupq_n_s32(4 * v30);
  v38 = (int32x4_t *)(v29 + 6);
  v39 = v32 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v40 = vaddq_s32(v36, v37);
    v38[-1] = vaddq_s32(v35, v36);
    *v38 = vaddq_s32(v35, v40);
    v36 = vaddq_s32(v40, v37);
    v38 += 2;
    v39 -= 8;
  }
  while (v39);
  if (v32 != (v32 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_20;
LABEL_22:
  if ((_DWORD)v13)
  {
    v44 = *v29;
    v45 = v7[1];
    v46 = __OFSUB__(*v29, v45);
    v47 = *v29 - v45;
    if (v47 < 0 != v46)
    {
      v74 = "active_region_x[i] >= static_cast<int32_t>(config.kp_offset_x[i])";
      v192 = 214;
      goto LABEL_251;
    }
    v7[17] = v47;
    v7[18] = 0;
    v48 = v29[1];
    v49 = v48 - v44;
    v7[177] = v49;
    v7[178] = a3;
    if (v47 >= -1)
      v50 = v47 + 1;
    else
      v50 = v47 + 2;
    v51 = v50 >> 1;
    *(_QWORD *)(v7 + 19) = (v50 >> 1);
    v52 = v49 + 2;
    if (v49 >= -1)
      v52 = v49 + 1;
    v53 = v52 >> 1;
    v7[179] = v52 >> 1;
    v54 = a3 + 2;
    if (a3 >= -1)
      v54 = a3 + 1;
    v55 = v54 >> 1;
    v7[180] = v55;
    if (v51 >= -1)
      v56 = v51 + 1;
    else
      v56 = v51 + 2;
    v57 = v56 >> 1;
    *(_QWORD *)(v7 + 21) = v57;
    if (v53 >= -1)
      v58 = v53 + 1;
    else
      v58 = v53 + 2;
    v59 = v58 >> 1;
    v7[181] = v58 >> 1;
    v60 = v55 + 2;
    if (v55 >= -1)
      v60 = v55 + 1;
    v61 = v60 >> 1;
    v7[182] = v61;
    if (v57 >= -1)
      v62 = v57 + 1;
    else
      v62 = v57 + 2;
    v63 = v62 >> 1;
    *(_QWORD *)(v7 + 23) = (v62 >> 1);
    v64 = v59 + 2;
    if (v59 >= -1)
      v64 = v59 + 1;
    v65 = v64 >> 1;
    v7[183] = v64 >> 1;
    v66 = v61 + 2;
    if (v61 >= -1)
      v66 = v61 + 1;
    v67 = v66 >> 1;
    v7[184] = v67;
    if (v63 >= -1)
      v68 = v63 + 1;
    else
      v68 = v63 + 2;
    v7[25] = v68 >> 1;
    v7[26] = 0;
    if (v65 >= -1)
      v69 = v65 + 1;
    else
      v69 = v65 + 2;
    v7[185] = v69 >> 1;
    v70 = v67 + 2;
    if (v67 >= -1)
      v70 = v67 + 1;
    v71 = v70 >> 1;
    v7[186] = v71;
    if ((_DWORD)v13 != 1)
    {
      v72 = 0;
      v73 = 0;
      v74 = "active_region_x[i] >= static_cast<int32_t>(config.kp_offset_x[i])";
      while (1)
      {
        v75 = v7[v73 + 2];
        v76 = v48 - v75;
        if (v48 < v75)
        {
          v192 = 214;
          goto LABEL_251;
        }
        v77 = &v7[v72];
        v7[v72 + 27] = v76;
        if (v76 <= 0x4F)
          break;
        v78 = v29[v73 + 2];
        v79 = v73 + 1;
        v80 = v78 - v48;
        v77[187] = v80;
        v77[188] = a3;
        v81 = v76 + 2;
        if (v76 >= -1)
          v81 = v76 + 1;
        v82 = v81 >> 1;
        v77[28] = 0;
        v77[29] = v82;
        if (v80 >= -1)
          v83 = v80 + 1;
        else
          v83 = v80 + 2;
        v84 = v83 >> 1;
        v77[189] = v84;
        v77[190] = v55;
        if (v82 >= -1)
          v85 = v82 + 1;
        else
          v85 = v82 + 2;
        v86 = v85 >> 1;
        v77[30] = 0;
        v77[31] = v86;
        if (v84 >= -1)
          v87 = v84 + 1;
        else
          v87 = v84 + 2;
        v88 = v87 >> 1;
        v77[191] = v88;
        v77[192] = v61;
        if (v86 >= -1)
          v89 = v86 + 1;
        else
          v89 = v86 + 2;
        v90 = v89 >> 1;
        v77[32] = 0;
        v77[33] = v90;
        if (v88 >= -1)
          v91 = v88 + 1;
        else
          v91 = v88 + 2;
        v92 = v91 >> 1;
        v77[193] = v92;
        v77[194] = v67;
        if (v90 >= -1)
          v93 = v90 + 1;
        else
          v93 = v90 + 2;
        v77[34] = 0;
        v77[35] = v93 >> 1;
        v77[36] = 0;
        if (v92 >= -1)
          v94 = v92 + 1;
        else
          v94 = v92 + 2;
        v77[195] = v94 >> 1;
        v77[196] = v71;
        v72 += 10;
        v73 = v79;
        v48 = v78;
        if (v13 - 1 == v79)
          goto LABEL_82;
      }
      v192 = 218;
      v74 = "i == 0 || static_cast<uint32_t>(config.active_region_start[i][0].X) >= kOverlapWidth";
LABEL_251:
      sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", v192, v74, (void (*)(void *))sub_20E803DA4);
      abort();
    }
  }
LABEL_82:
  operator delete(v29);
  if (a4)
    goto LABEL_83;
}

void sub_20E7E8608(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7E861C(_DWORD *a1)
{
  return (((a1[505] * *a1 * a1[506]) << a1[521])
                      + ((a1[503] * *a1 * a1[504]) << a1[520])
                      + ((a1[501] * *a1 * a1[502]) << a1[519])
                      + ((a1[499] * *a1 * a1[500]) << a1[518])
                      + ((a1[497] * *a1 * a1[498]) << a1[517]));
}

uint64_t sub_20E7E86AC(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9A9010;
  *(_OWORD *)(a1 + 8) = xmmword_20E80F720;
  *(_QWORD *)(a1 + 24) = 0x10000004000;
  *(_DWORD *)(a1 + 32) = 14;
  *(_DWORD *)(a1 + 68) = 0x4000;
  *(_OWORD *)(a1 + 36) = xmmword_20E80F7BC;
  *(_OWORD *)(a1 + 52) = unk_20E80F7CC;
  *(_OWORD *)(a1 + 72) = xmmword_20E80F730;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_QWORD *)(a1 + 544) = 0x1000000001;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 608) = xmmword_20E80F740;
  *(_OWORD *)(a1 + 8) = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  *(_OWORD *)(a1 + 72) = a2[4];
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 != 128 && v6 != 256 && v6 != 512)
  {
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorMatcher.cpp", 59, "IsConfigValid(config) && \"Invalid configuration\"", (void (*)(void *))sub_20E803DA4);
    abort();
  }
  v7 = (32 * *(_DWORD *)(a1 + 12));
  if ((_DWORD)v7)
  {
    sub_20E7E9F8C((char **)(a1 + 496), v7);
    v8 = *(_QWORD *)(a1 + 472);
    v9 = *(_QWORD *)(a1 + 480);
    v10 = (32 * *(_DWORD *)(a1 + 12));
  }
  else
  {
    v10 = 0;
    v8 = 0;
    v9 = 0;
  }
  v11 = 0x8E38E38E38E38E39 * ((v9 - v8) >> 2);
  if (v10 <= v11)
  {
    if (v10 < v11)
      *(_QWORD *)(a1 + 480) = v8 + 36 * v10;
  }
  else
  {
    sub_20E7EA190((void **)(a1 + 472), v10 - v11);
  }
  *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 8) >> 5;
  return a1;
}

void sub_20E7E8884(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 520);
  if (v3)
  {
    *(_QWORD *)(v1 + 528) = v3;
    operator delete(v3);
  }
  sub_20E80C690((void **)(v1 + 496), (void **)(v1 + 472), (_QWORD *)v1, (void **)(v1 + 88));
  _Unwind_Resume(a1);
}

void sub_20E7E88B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_20E7E8908(a1);
  sub_20E7E8A84(a1, a3);
  sub_20E7E8DE4();
  sub_20E7E8EF4(a1, a3);
}

uint64_t sub_20E7E8908(uint64_t result)
{
  _OWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_OWORD *)(result + 568) = 0u;
  *(_OWORD *)(result + 584) = 0u;
  *(_OWORD *)(result + 552) = 0u;
  *(_QWORD *)(result + 96) = *(_QWORD *)(result + 88);
  *(_QWORD *)(result + 120) = *(_QWORD *)(result + 112);
  *(_QWORD *)(result + 144) = *(_QWORD *)(result + 136);
  *(_QWORD *)(result + 168) = *(_QWORD *)(result + 160);
  *(_QWORD *)(result + 192) = *(_QWORD *)(result + 184);
  *(_QWORD *)(result + 216) = *(_QWORD *)(result + 208);
  *(_QWORD *)(result + 240) = *(_QWORD *)(result + 232);
  *(_QWORD *)(result + 264) = *(_QWORD *)(result + 256);
  *(_QWORD *)(result + 288) = *(_QWORD *)(result + 280);
  *(_QWORD *)(result + 312) = *(_QWORD *)(result + 304);
  *(_QWORD *)(result + 336) = *(_QWORD *)(result + 328);
  *(_QWORD *)(result + 360) = *(_QWORD *)(result + 352);
  *(_QWORD *)(result + 384) = *(_QWORD *)(result + 376);
  *(_QWORD *)(result + 408) = *(_QWORD *)(result + 400);
  *(_QWORD *)(result + 432) = *(_QWORD *)(result + 424);
  *(_QWORD *)(result + 456) = *(_QWORD *)(result + 448);
  *(_QWORD *)(result + 528) = *(_QWORD *)(result + 520);
  v1 = *(_OWORD **)(result + 496);
  v2 = *(_QWORD *)(result + 504) - (_QWORD)v1;
  *(_QWORD *)(result + 600) = 0;
  if ((uint64_t)v2 >= 1)
  {
    v3 = v2 >> 4;
    v4 = (v2 >> 4) - (v2 > 0xF) + 1;
    if (v4 < 8)
    {
      v5 = v1;
LABEL_7:
      v8 = v3 + 1;
      do
      {
        *v5++ = xmmword_20E80F750;
        --v8;
      }
      while (v8 > 1);
      goto LABEL_9;
    }
    v3 -= v4 & 0xFFFFFFFFFFFFFFF8;
    v5 = &v1[v4 & 0xFFFFFFFFFFFFFFF8];
    v6 = v1 + 4;
    v7 = v4 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      *(v6 - 2) = xmmword_20E80F750;
      *(v6 - 1) = xmmword_20E80F750;
      *(v6 - 4) = xmmword_20E80F750;
      *(v6 - 3) = xmmword_20E80F750;
      v6[2] = xmmword_20E80F750;
      v6[3] = xmmword_20E80F750;
      *v6 = xmmword_20E80F750;
      v6[1] = xmmword_20E80F750;
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
    if (v4 != (v4 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_7;
  }
LABEL_9:
  v9 = *(_QWORD *)(result + 472);
  v10 = *(_QWORD *)(result + 480) - v9;
  if (v10 >= 1)
  {
    v11 = v10 / 0x24uLL + 1;
    do
    {
      *(_QWORD *)v9 = 0xFFFFFFFFFFFFFLL;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 8) = 0;
      --v11;
      *(_BYTE *)(v9 + 32) = 0;
      v9 += 36;
    }
    while (v11 > 1);
  }
  return result;
}

uint64_t sub_20E7E8A84(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;
  int *v13;
  _OWORD *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v51;
  void **v52;
  uint64_t v53;
  char **v54;
  _QWORD *v55;
  int v56;

  if ((*(_DWORD *)(result + 12) & 0x7FFFFFF) != 0)
  {
    v2 = a2;
    v3 = 0;
    v4 = *a2;
    v48 = result;
    do
    {
      v5 = v4 + 200 * v3;
      if (*(_DWORD *)(v5 + 16) == 0x3FFF)
        break;
      v6 = 0;
      v7 = 0;
      v49 = v3;
      v53 = v3;
      v51 = (*(_DWORD *)(v5 + 12) >> 5) + 8 * *(unsigned __int8 *)(v5 + 24);
      v8 = (_QWORD *)(result + 24 * v51);
      v10 = (char *)v8[12];
      v8 += 12;
      v9 = v10;
      v52 = (void **)(v8 - 1);
      v54 = (char **)v8;
      v55 = v8 + 1;
      do
      {
        v11 = v6 + v53;
        v12 = (_OWORD *)(v4 + 200 * (v6 + v53));
        v13 = (int *)(v12 + 8);
        v14 = (_OWORD *)((char *)v12 + 132);
        v56 = v7;
        if ((unint64_t)v9 >= *v55)
        {
          v19 = (char *)*v52;
          v20 = 0x8F5C28F5C28F5C29 * ((v9 - (_BYTE *)*v52) >> 3);
          v21 = v20 + 1;
          if (v20 + 1 > 0x147AE147AE147AELL)
            sub_20E78D874();
          if (0x1EB851EB851EB852 * ((uint64_t)(*v55 - (_QWORD)v19) >> 3) > v21)
            v21 = 0x1EB851EB851EB852 * ((uint64_t)(*v55 - (_QWORD)v19) >> 3);
          if (0x8F5C28F5C28F5C29 * ((uint64_t)(*v55 - (_QWORD)v19) >> 3) >= 0xA3D70A3D70A3D7)
            v22 = 0x147AE147AE147AELL;
          else
            v22 = v21;
          if (v22 > 0x147AE147AE147AELL)
            sub_20E78D888();
          v23 = 200 * v22;
          v24 = (char *)operator new(200 * v22);
          v25 = &v24[200 * v20];
          v26 = *v13;
          v27 = *v12;
          v28 = v12[1];
          v29 = v12[3];
          *((_OWORD *)v25 + 2) = v12[2];
          *((_OWORD *)v25 + 3) = v29;
          *(_OWORD *)v25 = v27;
          *((_OWORD *)v25 + 1) = v28;
          v30 = v12[4];
          v31 = v12[5];
          v32 = v12[7];
          *((_OWORD *)v25 + 6) = v12[6];
          *((_OWORD *)v25 + 7) = v32;
          *((_OWORD *)v25 + 4) = v30;
          *((_OWORD *)v25 + 5) = v31;
          *((_DWORD *)v25 + 32) = v26;
          *((_DWORD *)v25 + 49) = v11;
          v33 = *(_OWORD *)((char *)v12 + 164);
          v34 = *(_OWORD *)((char *)v12 + 180);
          v35 = *(_OWORD *)((char *)v12 + 148);
          *(_OWORD *)(v25 + 132) = *v14;
          *(_OWORD *)(v25 + 180) = v34;
          *(_OWORD *)(v25 + 164) = v33;
          *(_OWORD *)(v25 + 148) = v35;
          if (v9 == v19)
          {
            v46 = &v24[200 * v20];
          }
          else
          {
            v36 = &v24[200 * v20];
            do
            {
              *(_OWORD *)(v36 - 200) = *(_OWORD *)(v9 - 200);
              v37 = *(_OWORD *)(v9 - 184);
              v38 = *(_OWORD *)(v9 - 168);
              v39 = *(_OWORD *)(v9 - 152);
              *(_OWORD *)(v36 - 136) = *(_OWORD *)(v9 - 136);
              *(_OWORD *)(v36 - 152) = v39;
              *(_OWORD *)(v36 - 168) = v38;
              *(_OWORD *)(v36 - 184) = v37;
              v40 = *(_OWORD *)(v9 - 120);
              v41 = *(_OWORD *)(v9 - 104);
              v42 = *(_OWORD *)(v9 - 88);
              *(_OWORD *)(v36 - 72) = *(_OWORD *)(v9 - 72);
              *(_OWORD *)(v36 - 88) = v42;
              *(_OWORD *)(v36 - 104) = v41;
              *(_OWORD *)(v36 - 120) = v40;
              v43 = *(_OWORD *)(v9 - 56);
              v44 = *(_OWORD *)(v9 - 40);
              v45 = *(_OWORD *)(v9 - 24);
              v46 = v36 - 200;
              *((_QWORD *)v36 - 1) = *((_QWORD *)v9 - 1);
              *(_OWORD *)(v36 - 24) = v45;
              *(_OWORD *)(v36 - 40) = v44;
              *(_OWORD *)(v36 - 56) = v43;
              v9 -= 200;
              v36 -= 200;
            }
            while (v9 != v19);
          }
          *v52 = v46;
          v9 = v25 + 200;
          *v54 = v25 + 200;
          *v55 = &v24[v23];
          if (v19)
            operator delete(v19);
          v2 = a2;
        }
        else
        {
          v15 = *v13;
          memmove(v9, v12, 0x80uLL);
          *((_DWORD *)v9 + 32) = v15;
          *(_OWORD *)(v9 + 132) = 0u;
          *(_OWORD *)(v9 + 148) = 0u;
          *(_OWORD *)(v9 + 164) = 0u;
          *(_OWORD *)(v9 + 180) = 0u;
          *((_DWORD *)v9 + 49) = v11;
          v16 = *v14;
          v17 = *(_OWORD *)((char *)v12 + 148);
          v18 = *(_OWORD *)((char *)v12 + 164);
          *(_OWORD *)(v9 + 180) = *(_OWORD *)((char *)v12 + 180);
          *(_OWORD *)(v9 + 164) = v18;
          *(_OWORD *)(v9 + 148) = v17;
          *(_OWORD *)(v9 + 132) = v16;
          v9 += 200;
        }
        *v54 = v9;
        v4 = *v2;
        v47 = *v2 + 200 * v11;
        v7 = v56 | (*(_DWORD *)(v47 + 16) == 0x3FFF);
        if (!(v56 & 1 | (*(_DWORD *)(v47 + 16) == 0x3FFF))
          && (*(_DWORD *)(v47 + 12) >> 5) + 8 * *(unsigned __int8 *)(v47 + 24) != v51)
        {
          sub_20E80C7E8();
        }
        ++v6;
      }
      while (v6 != 32);
      v3 = v49 + 32;
      result = v48;
    }
    while (v49 + 32 != 32 * *(_DWORD *)(v48 + 12));
  }
  else
  {
    v3 = 0;
  }
  *(_DWORD *)(result + 604) = v3;
  return result;
}

uint64_t sub_20E7E8DE4()
{
  uint64_t result;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  _DWORD v8[1601];
  int v9;

  result = MEMORY[0x24BDAC7A8]();
  v2 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFF) != 0)
  {
    v3 = v1;
    v4 = 0;
    do
    {
      if (*(_DWORD *)(*v3 + 200 * v4 + 16) == 0x3FFF)
        break;
      sub_20E7E9B08((uint64_t)v8, v3, v4);
      sub_20E7E938C(v2, v8, v9);
      if ((((_BYTE)v9 + 1) & 7) != 0)
        v5 = v9 + 1;
      else
        v5 = v9 - 7;
      sub_20E7E938C(v2, v8, v5);
      v6 = v9 - 1;
      if (v9 == 8)
        v6 = 15;
      v7 = v9 >= 1 ? v6 : 7;
      result = sub_20E7E938C(v2, v8, v7);
      v4 += 32;
    }
    while (v4 != 32 * *(_DWORD *)(v2 + 12));
  }
  else
  {
    v4 = 0;
  }
  *(_DWORD *)(v2 + 576) = v4 >> 5;
  return result;
}

void sub_20E7E8EF4(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char v25;
  char v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _DWORD **v51;
  char v52;
  int v53;
  int v54;
  int v55;
  char v56;
  int v57;
  int v58;
  _QWORD *v59;
  unint64_t v60;
  _BYTE v61[32];

  v3 = *(_DWORD *)(a1 + 12);
  if ((v3 & 0x7FFFFFF) != 0)
  {
    v4 = 0;
    v51 = (_DWORD **)(a1 + 520);
    v5 = *(_DWORD **)(a1 + 528);
    v59 = a2;
    while (1)
    {
      v7 = (int *)(*(_QWORD *)(a1 + 496) + 16 * v4);
      v8 = v7[1];
      v9 = *(_DWORD **)(a1 + 520);
      v10 = 0x4EC4EC4EC4EC4EC5 * (v5 - v9);
      if (v10 >= (*(_DWORD *)(a1 + 16) - 1) || (_DWORD)v8 == 0xFFFFF)
        goto LABEL_5;
      v12 = *(_QWORD *)(a1 + 472) + 36 * ((v8 - (*(_QWORD *)(a1 + 608) >> 4)) & 0xFFFFFFFFFFFFFFFLL);
      if (*(_QWORD *)(a1 + 616) + (4 * v4) != *(_DWORD *)(v12 + 4))
        goto LABEL_5;
      v13 = *(_DWORD *)(v12 + 24);
      if (v13 >= 0x1000)
        sub_20E80C814();
      v14 = *v7;
      v15 = *(_DWORD *)(v12 + 16);
      v16 = *(_DWORD *)(v12 + 20);
      v17 = *(_BYTE *)(v12 + 32);
      v18 = *(_DWORD *)(v12 + 28);
      v19 = *(_DWORD *)(v12 + 12);
      v20 = *a2 + 200 * v4;
      v21 = *(_DWORD *)v20;
      v22 = *(_DWORD *)(v20 + 4);
      v23 = *(_DWORD *)(v20 + 16);
      v24 = *(_DWORD *)(v20 + 32);
      v25 = *(_BYTE *)(v20 + 24);
      if (v16)
      {
        v26 = v17 & 1;
        *(_DWORD *)(*a2 + 200 * v4 + 128) = v16;
        v27 = *(_QWORD *)(a1 + 536);
        if ((unint64_t)v5 >= v27)
          goto LABEL_19;
      }
      else
      {
        v16 = *(_DWORD *)(a1 + 544);
        if ((v16 + 1) > 1)
          v28 = v16 + 1;
        else
          v28 = 1;
        *(_DWORD *)(a1 + 544) = v28;
        v26 = v17 & 1;
        *(_DWORD *)(*a2 + 200 * v4 + 128) = v16;
        v27 = *(_QWORD *)(a1 + 536);
        if ((unint64_t)v5 >= v27)
        {
LABEL_19:
          v29 = v10 + 1;
          if (v10 + 1 > 0x4EC4EC4EC4EC4ECLL)
            sub_20E78D874();
          v30 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v27 - (_QWORD)v9) >> 2);
          if (2 * v30 > v29)
            v29 = 2 * v30;
          if (v30 >= 0x276276276276276)
            v31 = 0x4EC4EC4EC4EC4ECLL;
          else
            v31 = v29;
          v60 = v31;
          if (v31)
          {
            v52 = v26;
            v53 = v19;
            v54 = v18;
            v55 = v24;
            v56 = v25;
            v57 = v21;
            v58 = v15;
            if (v31 > 0x4EC4EC4EC4EC4ECLL)
              goto LABEL_57;
            v32 = v22;
            v33 = v23;
            v34 = (char *)operator new(52 * v31);
            v23 = v33;
            v22 = v32;
            v21 = v57;
            v15 = v58;
            v24 = v55;
            v25 = v56;
            v19 = v53;
            v18 = v54;
            v26 = v52;
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[4 * (v5 - v9)];
          *(_DWORD *)v35 = v19;
          *((_DWORD *)v35 + 1) = v18;
          v35[8] = v26;
          *((_DWORD *)v35 + 3) = v15;
          *((_DWORD *)v35 + 4) = v13;
          *((_DWORD *)v35 + 5) = v21;
          *((_DWORD *)v35 + 6) = v24;
          v35[28] = v25;
          *((_DWORD *)v35 + 8) = v22;
          *((_DWORD *)v35 + 9) = v4;
          *((_DWORD *)v35 + 10) = v23;
          *((_DWORD *)v35 + 11) = v14;
          *((_DWORD *)v35 + 12) = v16;
          v36 = v35;
          if (v5 == v9)
          {
            *(_QWORD *)(a1 + 520) = v35;
            v6 = v35 + 52;
            *(_QWORD *)(a1 + 528) = v35 + 52;
            *(_QWORD *)(a1 + 536) = &v34[52 * v60];
            if (v5)
              goto LABEL_32;
          }
          else
          {
            do
            {
              v37 = *(_OWORD *)(v5 - 13);
              v38 = *(_OWORD *)(v5 - 9);
              v39 = *(_OWORD *)(v5 - 5);
              *((_DWORD *)v36 - 1) = *(v5 - 1);
              *(_OWORD *)(v36 - 20) = v39;
              *(_OWORD *)(v36 - 36) = v38;
              *(_OWORD *)(v36 - 52) = v37;
              v36 -= 52;
              v5 -= 13;
            }
            while (v5 != v9);
            v5 = *v51;
            *(_QWORD *)(a1 + 520) = v36;
            v6 = v35 + 52;
            *(_QWORD *)(a1 + 528) = v35 + 52;
            *(_QWORD *)(a1 + 536) = &v34[52 * v60];
            if (v5)
LABEL_32:
              operator delete(v5);
          }
          a2 = v59;
          goto LABEL_4;
        }
      }
      *v5 = v19;
      v5[1] = v18;
      *((_BYTE *)v5 + 8) = v26;
      v5[3] = v15;
      v5[4] = v13;
      v5[5] = v21;
      v5[6] = v24;
      *((_BYTE *)v5 + 28) = v25;
      v5[8] = v22;
      v5[9] = v4;
      v5[10] = v23;
      v5[11] = v14;
      v6 = v5 + 13;
      v5[12] = v16;
LABEL_4:
      *(_QWORD *)(a1 + 528) = v6;
      v3 = *(_DWORD *)(a1 + 12);
      v5 = v6;
LABEL_5:
      if (++v4 >= (unint64_t)(32 * v3))
        goto LABEL_37;
    }
  }
  v5 = *(_DWORD **)(a1 + 528);
LABEL_37:
  v61[8] = 0;
  *(_QWORD *)v61 = 0;
  memset(&v61[12], 0, 17);
  v40 = *(_QWORD *)(a1 + 536);
  if ((unint64_t)v5 >= v40)
  {
    v42 = *(_DWORD **)(a1 + 520);
    v43 = 0x4EC4EC4EC4EC4EC5 * (v5 - v42) + 1;
    if (v43 > 0x4EC4EC4EC4EC4ECLL)
      sub_20E78D874();
    v44 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v40 - (_QWORD)v42) >> 2);
    if (2 * v44 > v43)
      v43 = 2 * v44;
    if (v44 >= 0x276276276276276)
      v45 = 0x4EC4EC4EC4EC4ECLL;
    else
      v45 = v43;
    if (v45)
    {
      if (v45 > 0x4EC4EC4EC4EC4ECLL)
LABEL_57:
        sub_20E78D888();
      v46 = (char *)operator new(52 * v45);
    }
    else
    {
      v46 = 0;
    }
    v47 = &v46[4 * (v5 - v42)];
    *(_OWORD *)v47 = *(_OWORD *)v61;
    *((_OWORD *)v47 + 1) = *(_OWORD *)&v61[16];
    *((_OWORD *)v47 + 2) = xmmword_20E80F760;
    *((_DWORD *)v47 + 12) = 0;
    v41 = v47 + 52;
    if (v5 != v42)
    {
      do
      {
        v48 = *(_OWORD *)(v5 - 13);
        v49 = *(_OWORD *)(v5 - 9);
        v50 = *(_OWORD *)(v5 - 5);
        *((_DWORD *)v47 - 1) = *(v5 - 1);
        *(_OWORD *)(v47 - 20) = v50;
        *(_OWORD *)(v47 - 36) = v49;
        *(_OWORD *)(v47 - 52) = v48;
        v47 -= 52;
        v5 -= 13;
      }
      while (v5 != v42);
      v5 = *(_DWORD **)(a1 + 520);
    }
    *(_QWORD *)(a1 + 520) = v47;
    *(_QWORD *)(a1 + 528) = v41;
    *(_QWORD *)(a1 + 536) = &v46[52 * v45];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)v61;
    *((_OWORD *)v5 + 1) = *(_OWORD *)&v61[16];
    *((_OWORD *)v5 + 2) = xmmword_20E80F760;
    v5[12] = 0;
    v41 = v5 + 13;
  }
  *(_QWORD *)(a1 + 528) = v41;
}

uint64_t sub_20E7E938C(uint64_t result, _DWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  _BOOL4 v18;
  int v19;
  int v20;
  int v22;
  uint64_t v23;

  v3 = result + 24 * a3;
  v6 = *(_QWORD *)(v3 + 88);
  v5 = (uint64_t *)(v3 + 88);
  v4 = v6;
  if (v5[1] != v6)
  {
    v7 = (_DWORD *)result;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v4 + 200 * v8;
      if (*(_DWORD *)(v10 + 16) == 0x3FFF)
        return result;
      v23 = 0;
      result = (*(uint64_t (**)(_DWORD *, uint64_t, char *, uint64_t *))(*(_QWORD *)v7 + 16))(v7, v10, (char *)&v23 + 4, &v23);
      if (SHIDWORD(v23) > v7[20] || SHIDWORD(v23) < v7[18] || (int)v23 > v7[21] || (int)v23 < v7[19])
      {
        v11 = 0;
        ++v7[140];
      }
      else
      {
        v11 = 1;
      }
      v12 = 32;
      v13 = a2;
      while (1)
      {
        v14 = v13[4];
        if (v14 == 0x3FFF)
          break;
        v15 = (HIDWORD(v23) - (*v13 >> 6)) * (HIDWORD(v23) - (*v13 >> 6))
            + (v23 - (v13[1] >> 6)) * (v23 - (v13[1] >> 6));
        v16 = v7[6];
        v17 = v15 > v16;
        v18 = v15 <= v16;
        if (v17)
        {
          ++v7[141];
          v14 = v13[4];
        }
        v19 = v14 - *(_DWORD *)(v10 + 16);
        if (v19 < 0)
          v19 = -v19;
        if (v19 > v7[7])
        {
          v18 = 0;
          ++v7[142];
        }
        v20 = v13[3] - *(_DWORD *)(v10 + 12);
        if (v20 < 0)
          v20 = *(_DWORD *)(v10 + 12) - v13[3];
        if (v20 > 0x80)
          v20 = 256 - v20;
        if (v20 > v7[8])
        {
          ++v7[143];
LABEL_10:
          ++v7[139];
          v13 += 50;
          if (!--v12)
            break;
        }
        else
        {
          if ((v11 & v18) != 1)
            goto LABEL_10;
          ++v7[138];
          v22 = 0;
          result = (*(uint64_t (**)(_DWORD *, _DWORD *, uint64_t, int *))(*(_QWORD *)v7 + 24))(v7, v13, v10, &v22);
          v13 += 50;
          if (!--v12)
            break;
        }
      }
      v4 = *v5;
      v8 = ++v9;
    }
    while (0x8F5C28F5C28F5C29 * ((v5[1] - *v5) >> 3) > v9);
  }
  return result;
}

uint64_t sub_20E7E95C8(uint64_t result, int *a2, uint64_t a3, unsigned int *a4, int32x4_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  uint64_t v41;
  _DWORD *v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;

  v5 = *(unsigned int *)(result + 548);
  if (v5 > 0x10)
    sub_20E80BF88();
  if (!(_DWORD)v5)
  {
    *a4 = 0;
    goto LABEL_12;
  }
  if (v5 < 8)
  {
    v6 = 0;
    v7 = 0;
LABEL_15:
    v18 = v5 - v6;
    v19 = 4 * v6 + 132;
    v20 = (int *)((char *)a2 + v19);
    v21 = (int *)(a3 + v19);
    do
    {
      v23 = *v21++;
      v22 = v23;
      v24 = *v20++;
      v25 = v24 ^ v22;
      if (v25)
      {
        a5.i32[0] = v25;
        *(int8x8_t *)a5.i8 = vcnt_s8(*(int8x8_t *)a5.i8);
        a5.i16[0] = vaddlv_u8(*(uint8x8_t *)a5.i8);
        v7 += a5.i32[0];
      }
      --v18;
    }
    while (v18);
    goto LABEL_9;
  }
  v6 = v5 & 0x18;
  v8 = (int32x4_t)veorq_s8(*(int8x16_t *)(a2 + 33), *(int8x16_t *)(a3 + 132));
  v9 = (int32x4_t)veorq_s8(*(int8x16_t *)(a2 + 37), *(int8x16_t *)(a3 + 148));
  v10 = (int32x4_t)vbicq_s8((int8x16_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)v8))), (int8x16_t)vceqzq_s32(v8));
  v11 = (int32x4_t)vbicq_s8((int8x16_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)v9))), (int8x16_t)vceqzq_s32(v9));
  if ((v5 & 0xFFFFFFF8) != 8)
  {
    v12 = (int32x4_t)veorq_s8(*(int8x16_t *)(a2 + 41), *(int8x16_t *)(a3 + 164));
    v13 = (int32x4_t)veorq_s8(*(int8x16_t *)(a2 + 45), *(int8x16_t *)(a3 + 180));
    v10 = vaddq_s32(v10, (int32x4_t)vbicq_s8((int8x16_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)v12))), (int8x16_t)vceqzq_s32(v12)));
    v11 = vaddq_s32(v11, (int32x4_t)vbicq_s8((int8x16_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)v13))), (int8x16_t)vceqzq_s32(v13)));
  }
  a5 = vaddq_s32(v11, v10);
  v7 = vaddvq_s32(a5);
  if (v6 != v5)
    goto LABEL_15;
LABEL_9:
  *a4 = v7;
  if (v7 >= 0x1D8)
    sub_20E80C840();
  if (v7 > *(_DWORD *)(result + 20))
  {
    ++*(_DWORD *)(result + 584);
    return result;
  }
LABEL_12:
  ++*(_DWORD *)(result + 580);
  v14 = *a4;
  v15 = *(unsigned int *)(a3 + 196);
  v16 = *(_QWORD *)(result + 496);
  v17 = (unsigned int *)(v16 + 16 * v15);
  if (*a4 >= *v17)
  {
    if (v14 == *v17)
    {
      v26 = a2[5];
      v27 = v16 + 16 * v15;
      v28 = (unsigned int *)(v27 + 8);
      v29 = *(_DWORD *)(v27 + 8);
      if (v26 < v29)
      {
        v31 = *(_DWORD *)(v27 + 4);
        v30 = (_DWORD *)(v27 + 4);
        if (v31 == 0xFFFFF)
        {
          ++*(_DWORD *)(result + 596);
          v14 = *a4;
        }
        *v17 = v14;
        *v30 = (*(_QWORD *)(result + 608) + (unint64_t)(16 * a2[49])) >> 4;
        v29 = a2[5];
        *v28 = v29;
        *(_DWORD *)(v16 + 16 * v15 + 12) = (a2[3] >> 5) + 8 * *((unsigned __int8 *)a2 + 24);
        v26 = a2[5];
      }
      if (v26 == v29)
      {
        v32 = v16 + 16 * v15;
        if ((a2[3] >> 5) + 8 * *((unsigned __int8 *)a2 + 24) < *(_DWORD *)(v32 + 12))
        {
          *v17 = *a4;
          *(_DWORD *)(v32 + 4) = (*(_QWORD *)(result + 608) + (unint64_t)(16 * a2[49])) >> 4;
          *v28 = a2[5];
          *(_DWORD *)(v32 + 12) = (a2[3] >> 5) + 8 * *((unsigned __int8 *)a2 + 24);
        }
      }
    }
  }
  else
  {
    if (v17[1] == 0xFFFFF)
      ++*(_DWORD *)(result + 596);
    else
      ++*(_DWORD *)(result + 600);
    *v17 = *a4;
    v17[1] = (*(_QWORD *)(result + 608) + (unint64_t)(16 * a2[49])) >> 4;
    v33 = v16 + 16 * v15;
    *(_DWORD *)(v33 + 8) = a2[5];
    *(_DWORD *)(v33 + 12) = (a2[3] >> 5) + 8 * *((unsigned __int8 *)a2 + 24);
  }
  v34 = *a4;
  v35 = a2[49];
  v36 = *(_QWORD *)(result + 472);
  v37 = (unsigned int *)(v36 + 36 * v35);
  if (*a4 < *v37)
  {
    v38 = v36 + 36 * v35;
    v40 = *(_DWORD *)(v38 + 4);
    v39 = (_DWORD *)(v38 + 4);
    if (v40 == 0xFFFFF)
      ++*(_DWORD *)(result + 588);
    else
      ++*(_DWORD *)(result + 592);
    *v37 = *a4;
    *v39 = *(_DWORD *)(result + 616) + 4 * v15;
    v48 = v36 + 36 * v35;
    *(_DWORD *)(v48 + 8) = *(_DWORD *)(a3 + 20);
    v47 = *a2;
LABEL_39:
    *(_DWORD *)(v48 + 12) = v47;
    v49 = a2[32];
    *(_DWORD *)(v48 + 16) = a2[1];
    *(_DWORD *)(v48 + 20) = v49;
    *(_DWORD *)(v48 + 24) = v35;
    *(_DWORD *)(v48 + 28) = a2[8];
    *(_BYTE *)(v48 + 32) = *((_BYTE *)a2 + 24);
    return result;
  }
  if (v34 == *v37)
  {
    v41 = v36 + 36 * v35;
    v43 = *(_DWORD *)(v41 + 8);
    v42 = (_DWORD *)(v41 + 8);
    if (*(_DWORD *)(a3 + 20) < v43)
    {
      v44 = v36 + 36 * v35;
      v46 = *(_DWORD *)(v44 + 4);
      v45 = (_DWORD *)(v44 + 4);
      if (v46 == 0xFFFFF)
      {
        ++*(_DWORD *)(result + 588);
        v34 = *a4;
      }
      *v37 = v34;
      *v45 = *(_DWORD *)(result + 616) + 4 * v15;
      *v42 = *(_DWORD *)(a3 + 20);
      v47 = *a2;
      v48 = v36 + 36 * v35;
      goto LABEL_39;
    }
  }
  return result;
}

void sub_20E7E99B4(int *a1, unsigned int *a2, int *a3, _DWORD *a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;

  v6 = (unint64_t)*a2 >> 6;
  v7 = (unint64_t)a2[1] >> 6;
  v8 = a1[10] * (uint64_t)(int)v7 + a1[9] * (uint64_t)(int)v6 + a1[11];
  v9 = a1[13] * (uint64_t)(int)v7 + a1[12] * (uint64_t)(int)v6 + a1[14];
  v10 = a1[16] * (uint64_t)(int)v7 + a1[15] * (uint64_t)(int)v6 + a1[17];
  if (v10)
  {
    v11 = sub_20E7F9714(16, (double)v8);
    v12 = sub_20E7F9714(16, (double)v9);
    v13 = sub_20E7F9714(16, (double)v10);
    sub_20E7F9760(v13);
    v15 = v11 * v14;
    v16 = v12 * v14;
    v17 = (uint64_t)sub_20E7F9714(16, v15);
    v18 = (uint64_t)sub_20E7F9714(16, v16);
    if ((int)v17 >= 1023)
      v19 = 1023;
    else
      v19 = v17;
    if (v19 <= -1024)
      v19 = -1024;
  }
  else
  {
    v20 = (unint64_t)v8 >> 14;
    if ((int)v20 >= 1023)
      LODWORD(v20) = 1023;
    if ((int)v20 <= -1024)
      v19 = -1024;
    else
      v19 = v20;
    v18 = (unint64_t)v9 >> 14;
  }
  if ((int)v18 >= 1023)
    LODWORD(v18) = 1023;
  if ((int)v18 <= -1024)
    LODWORD(v18) = -1024;
  *a3 = v19;
  *a4 = v18;
}

void sub_20E7E9AE4(_QWORD *a1)
{
  sub_20E7D2014(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E7E9B08(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 16) = 0x3FFF;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 216) = 0x3FFF;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 416) = 0x3FFF;
  *(_QWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_DWORD *)(a1 + 616) = 0x3FFF;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_QWORD *)(a1 + 992) = 0;
  *(_DWORD *)(a1 + 816) = 0x3FFF;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_QWORD *)(a1 + 1192) = 0;
  *(_DWORD *)(a1 + 1016) = 0x3FFF;
  *(_QWORD *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_DWORD *)(a1 + 1216) = 0x3FFF;
  *(_QWORD *)(a1 + 1592) = 0;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_DWORD *)(a1 + 1416) = 0x3FFF;
  *(_QWORD *)(a1 + 1792) = 0;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_DWORD *)(a1 + 1616) = 0x3FFF;
  *(_QWORD *)(a1 + 1992) = 0;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_DWORD *)(a1 + 1816) = 0x3FFF;
  *(_QWORD *)(a1 + 2192) = 0;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_DWORD *)(a1 + 2016) = 0x3FFF;
  *(_QWORD *)(a1 + 2392) = 0;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_DWORD *)(a1 + 2216) = 0x3FFF;
  *(_QWORD *)(a1 + 2592) = 0;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_DWORD *)(a1 + 2416) = 0x3FFF;
  *(_QWORD *)(a1 + 2792) = 0;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_DWORD *)(a1 + 2616) = 0x3FFF;
  *(_QWORD *)(a1 + 2992) = 0;
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_OWORD *)(a1 + 2960) = 0u;
  *(_OWORD *)(a1 + 2944) = 0u;
  *(_OWORD *)(a1 + 2928) = 0u;
  *(_DWORD *)(a1 + 2816) = 0x3FFF;
  *(_QWORD *)(a1 + 3192) = 0;
  *(_OWORD *)(a1 + 3160) = 0u;
  *(_OWORD *)(a1 + 3176) = 0u;
  *(_OWORD *)(a1 + 3128) = 0u;
  *(_OWORD *)(a1 + 3144) = 0u;
  *(_DWORD *)(a1 + 3016) = 0x3FFF;
  *(_QWORD *)(a1 + 3392) = 0;
  *(_OWORD *)(a1 + 3376) = 0u;
  *(_OWORD *)(a1 + 3360) = 0u;
  *(_OWORD *)(a1 + 3344) = 0u;
  *(_OWORD *)(a1 + 3328) = 0u;
  *(_DWORD *)(a1 + 3216) = 0x3FFF;
  *(_QWORD *)(a1 + 3592) = 0;
  *(_OWORD *)(a1 + 3560) = 0u;
  *(_OWORD *)(a1 + 3576) = 0u;
  *(_OWORD *)(a1 + 3528) = 0u;
  *(_OWORD *)(a1 + 3544) = 0u;
  *(_DWORD *)(a1 + 3416) = 0x3FFF;
  *(_QWORD *)(a1 + 3792) = 0;
  *(_OWORD *)(a1 + 3776) = 0u;
  *(_OWORD *)(a1 + 3760) = 0u;
  *(_OWORD *)(a1 + 3744) = 0u;
  *(_OWORD *)(a1 + 3728) = 0u;
  *(_DWORD *)(a1 + 3616) = 0x3FFF;
  *(_QWORD *)(a1 + 3992) = 0;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_OWORD *)(a1 + 3976) = 0u;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_DWORD *)(a1 + 3816) = 0x3FFF;
  *(_QWORD *)(a1 + 4192) = 0;
  *(_OWORD *)(a1 + 4176) = 0u;
  *(_OWORD *)(a1 + 4160) = 0u;
  *(_OWORD *)(a1 + 4144) = 0u;
  *(_OWORD *)(a1 + 4128) = 0u;
  *(_DWORD *)(a1 + 4016) = 0x3FFF;
  *(_QWORD *)(a1 + 4392) = 0;
  *(_OWORD *)(a1 + 4360) = 0u;
  *(_OWORD *)(a1 + 4376) = 0u;
  *(_OWORD *)(a1 + 4328) = 0u;
  *(_OWORD *)(a1 + 4344) = 0u;
  *(_DWORD *)(a1 + 4216) = 0x3FFF;
  *(_QWORD *)(a1 + 4592) = 0;
  *(_OWORD *)(a1 + 4576) = 0u;
  *(_OWORD *)(a1 + 4560) = 0u;
  *(_OWORD *)(a1 + 4544) = 0u;
  *(_OWORD *)(a1 + 4528) = 0u;
  *(_DWORD *)(a1 + 4416) = 0x3FFF;
  *(_QWORD *)(a1 + 4792) = 0;
  *(_OWORD *)(a1 + 4760) = 0u;
  *(_OWORD *)(a1 + 4776) = 0u;
  *(_OWORD *)(a1 + 4728) = 0u;
  *(_OWORD *)(a1 + 4744) = 0u;
  *(_DWORD *)(a1 + 4616) = 0x3FFF;
  *(_QWORD *)(a1 + 4992) = 0;
  *(_OWORD *)(a1 + 4976) = 0u;
  *(_OWORD *)(a1 + 4960) = 0u;
  *(_OWORD *)(a1 + 4944) = 0u;
  *(_OWORD *)(a1 + 4928) = 0u;
  *(_DWORD *)(a1 + 4816) = 0x3FFF;
  *(_QWORD *)(a1 + 5192) = 0;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_DWORD *)(a1 + 5016) = 0x3FFF;
  *(_QWORD *)(a1 + 5392) = 0;
  *(_OWORD *)(a1 + 5376) = 0u;
  *(_OWORD *)(a1 + 5360) = 0u;
  *(_OWORD *)(a1 + 5344) = 0u;
  *(_OWORD *)(a1 + 5328) = 0u;
  *(_DWORD *)(a1 + 5216) = 0x3FFF;
  *(_QWORD *)(a1 + 5592) = 0;
  *(_OWORD *)(a1 + 5560) = 0u;
  *(_OWORD *)(a1 + 5576) = 0u;
  *(_OWORD *)(a1 + 5528) = 0u;
  *(_OWORD *)(a1 + 5544) = 0u;
  *(_DWORD *)(a1 + 5416) = 0x3FFF;
  *(_QWORD *)(a1 + 5792) = 0;
  *(_OWORD *)(a1 + 5776) = 0u;
  *(_OWORD *)(a1 + 5760) = 0u;
  *(_OWORD *)(a1 + 5744) = 0u;
  *(_OWORD *)(a1 + 5728) = 0u;
  *(_DWORD *)(a1 + 5616) = 0x3FFF;
  *(_QWORD *)(a1 + 5992) = 0;
  *(_OWORD *)(a1 + 5960) = 0u;
  *(_OWORD *)(a1 + 5976) = 0u;
  *(_OWORD *)(a1 + 5928) = 0u;
  *(_OWORD *)(a1 + 5944) = 0u;
  *(_DWORD *)(a1 + 5816) = 0x3FFF;
  *(_QWORD *)(a1 + 6192) = 0;
  *(_OWORD *)(a1 + 6176) = 0u;
  *(_OWORD *)(a1 + 6160) = 0u;
  *(_OWORD *)(a1 + 6144) = 0u;
  *(_OWORD *)(a1 + 6128) = 0u;
  *(_DWORD *)(a1 + 6016) = 0x3FFF;
  *(_QWORD *)(a1 + 6392) = 0;
  *(_OWORD *)(a1 + 6360) = 0u;
  *(_OWORD *)(a1 + 6376) = 0u;
  *(_OWORD *)(a1 + 6328) = 0u;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(_DWORD *)(a1 + 6216) = 0x3FFF;
  v6 = *a2 + 200 * a3;
  v7 = *(_DWORD *)(v6 + 128);
  v19 = *(_OWORD *)(v6 + 132);
  v21 = *(_OWORD *)(v6 + 148);
  v23 = *(_OWORD *)(v6 + 164);
  v25 = *(_OWORD *)(v6 + 180);
  memmove((void *)a1, (const void *)v6, 0x80uLL);
  *(_OWORD *)(a1 + 132) = v19;
  *(_OWORD *)(a1 + 148) = v21;
  *(_OWORD *)(a1 + 164) = v23;
  *(_DWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 180) = v25;
  *(_DWORD *)(a1 + 196) = a3;
  v8 = *(_DWORD *)(a1 + 16);
  v9 = (*(_DWORD *)(a1 + 12) >> 5) + 8 * *(unsigned __int8 *)(a1 + 24);
  *(_DWORD *)(a1 + 6404) = v9;
  v10 = v8 == 0x3FFF;
  if (v8 != 0x3FFF)
  {
    if ((*(_DWORD *)(a1 + 12) >> 5) + 8 * *(unsigned __int8 *)(a1 + 24) != v9)
LABEL_8:
      sub_20E80C86C();
    v10 = 0;
  }
  v11 = 0;
  v12 = -31;
  do
  {
    v14 = a3 + v12 + 32;
    v15 = *a2 + 200 * v14;
    v16 = *(_DWORD *)(v15 + 128);
    v20 = *(_OWORD *)(v15 + 132);
    v22 = *(_OWORD *)(v15 + 148);
    v24 = *(_OWORD *)(v15 + 164);
    v26 = *(_OWORD *)(v15 + 180);
    v17 = a1 + v11;
    memmove((void *)(a1 + v11 + 200), (const void *)v15, 0x80uLL);
    *(_DWORD *)(v17 + 328) = v16;
    *(_OWORD *)(v17 + 332) = v20;
    *(_OWORD *)(v17 + 348) = v22;
    *(_OWORD *)(v17 + 364) = v24;
    *(_OWORD *)(v17 + 380) = v26;
    *(_DWORD *)(v17 + 396) = v14;
    v10 |= *(_DWORD *)(a1 + v11 + 216) == 0x3FFF;
    if ((v10 & 1) == 0 && (*(_DWORD *)(v17 + 212) >> 5) + 8 * *(unsigned __int8 *)(v17 + 224) != *(_DWORD *)(a1 + 6404))
      goto LABEL_8;
    v11 += 200;
  }
  while (!__CFADD__(v12++, 1));
  *(_DWORD *)(a1 + 6400) = a3;
  return a1;
}

void sub_20E7E9F8C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v13 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v13 < 7)
        goto LABEL_35;
      v14 = v13 + 1;
      v6 = &v5[16 * (v14 & 0x1FFFFFFFFFFFFFF8)];
      v15 = v5 + 64;
      v16 = v14 & 0x1FFFFFFFFFFFFFF8;
      do
      {
        *(v15 - 2) = xmmword_20E80F750;
        *(v15 - 1) = xmmword_20E80F750;
        *(v15 - 4) = xmmword_20E80F750;
        *(v15 - 3) = xmmword_20E80F750;
        v15[2] = xmmword_20E80F750;
        v15[3] = xmmword_20E80F750;
        *v15 = xmmword_20E80F750;
        v15[1] = xmmword_20E80F750;
        v15 += 8;
        v16 -= 8;
      }
      while (v16);
      if (v14 != (v14 & 0x1FFFFFFFFFFFFFF8))
      {
LABEL_35:
        do
        {
          *(_OWORD *)v6 = xmmword_20E80F750;
          v6 += 16;
        }
        while (v6 != &v5[16 * a2]);
      }
      v6 = &v5[16 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + a2;
    if ((v8 + a2) >> 60)
      sub_20E78D874();
    v10 = v4 - v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_20E78D888();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v17 = &v12[16 * v8];
    v18 = &v17[16 * a2];
    v19 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    v20 = v17;
    if (v19 < 7)
      goto LABEL_36;
    v21 = v19 + 1;
    v20 = &v17[16 * (v21 & 0x1FFFFFFFFFFFFFF8)];
    v22 = v17 + 64;
    v23 = v21 & 0x1FFFFFFFFFFFFFF8;
    do
    {
      *(v22 - 2) = xmmword_20E80F750;
      *(v22 - 1) = xmmword_20E80F750;
      *(v22 - 4) = xmmword_20E80F750;
      *(v22 - 3) = xmmword_20E80F750;
      v22[2] = xmmword_20E80F750;
      v22[3] = xmmword_20E80F750;
      *v22 = xmmword_20E80F750;
      v22[1] = xmmword_20E80F750;
      v22 += 8;
      v23 -= 8;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFF8))
    {
LABEL_36:
      do
      {
        *(_OWORD *)v20 = xmmword_20E80F750;
        v20 += 16;
      }
      while (v20 != v18);
    }
    v24 = &v12[16 * v11];
    if (v5 == v7)
    {
      v26 = *a1;
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v24;
      if (v26)
LABEL_28:
        operator delete(v26);
    }
    else
    {
      do
      {
        v25 = v17 - 16;
        *((_OWORD *)v17 - 1) = *((_OWORD *)v6 - 1);
        v6 -= 16;
        v17 -= 16;
      }
      while (v6 != v7);
      v26 = *a1;
      *a1 = v25;
      a1[1] = v18;
      a1[2] = v24;
      if (v26)
        goto LABEL_28;
    }
  }
}

void sub_20E7EA190(void **a1, unint64_t a2)
{
  _DWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _DWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v4 = a1[1];
  v5 = a1[2];
  if (0x8E38E38E38E38E39 * ((v5 - (_BYTE *)v4) >> 2) >= a2)
  {
    if (a2)
    {
      v11 = &v4[9 * a2];
      v12 = 36 * a2;
      do
      {
        v4[8] = 0;
        *(_QWORD *)v4 = 0xFFFFFFFFFFFFFLL;
        *((_QWORD *)v4 + 2) = 0;
        *((_QWORD *)v4 + 3) = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_BYTE *)v4 + 32) = 0;
        v4 += 9;
        v12 -= 36;
      }
      while (v12);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0x8E38E38E38E38E39 * (((char *)v4 - (_BYTE *)*a1) >> 2);
    v7 = v6 + a2;
    if (v6 + a2 > 0x71C71C71C71C71CLL)
      sub_20E78D874();
    v8 = 0x8E38E38E38E38E39 * ((v5 - (_BYTE *)*a1) >> 2);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x38E38E38E38E38ELL)
      v9 = 0x71C71C71C71C71CLL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x71C71C71C71C71CLL)
        sub_20E78D888();
      v10 = (char *)operator new(36 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[36 * v6];
    v14 = 36 * a2;
    v15 = &v13[36 * a2];
    v16 = v13;
    do
    {
      *((_DWORD *)v16 + 8) = 0;
      *(_QWORD *)v16 = 0xFFFFFFFFFFFFFLL;
      *((_QWORD *)v16 + 2) = 0;
      *((_QWORD *)v16 + 3) = 0;
      *((_QWORD *)v16 + 1) = 0;
      v16[32] = 0;
      v16 += 36;
      v14 -= 36;
    }
    while (v14);
    v17 = &v10[36 * v9];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 36);
        v21 = *(_OWORD *)(v18 - 20);
        *(v13 - 4) = *(v18 - 4);
        *(_OWORD *)(v13 - 20) = v21;
        *(_OWORD *)(v13 - 36) = v20;
        v13 -= 36;
        v18 -= 36;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
}

uint64_t sub_20E7EA354(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = sub_20E7EC500;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  v2 = (_QWORD *)operator new();
  *v2 = 0;
  v3 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v2;
  if (v3)
    (*(void (**)(void))(a1 + 256))();
  *(_QWORD *)(a1 + 256) = sub_20E7EC500;
  return a1;
}

void sub_20E7EA434(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v8 = *(void **)(v1 + 328);
  if (v8)
  {
    *(_QWORD *)(v1 + 336) = v8;
    operator delete(v8);
    v9 = *v6;
    if (!*v6)
    {
LABEL_3:
      sub_20E7EA590(v3);
      v10 = *(_QWORD *)(v1 + 248);
      *(_QWORD *)(v1 + 248) = 0;
      if (!v10)
      {
LABEL_8:
        v12 = *(void **)(v1 + 224);
        if (v12)
        {
          *(_QWORD *)(v1 + 232) = v12;
          operator delete(v12);
          v13 = *(void **)(v1 + 200);
          if (!v13)
          {
LABEL_10:
            v14 = *(void **)(v1 + 176);
            if (!v14)
              goto LABEL_11;
            goto LABEL_20;
          }
        }
        else
        {
          v13 = *(void **)(v1 + 200);
          if (!v13)
            goto LABEL_10;
        }
        *(_QWORD *)(v1 + 208) = v13;
        operator delete(v13);
        v14 = *(void **)(v1 + 176);
        if (!v14)
        {
LABEL_11:
          v15 = *(void **)(v1 + 152);
          if (!v15)
            goto LABEL_12;
          goto LABEL_21;
        }
LABEL_20:
        *(_QWORD *)(v1 + 184) = v14;
        operator delete(v14);
        v15 = *(void **)(v1 + 152);
        if (!v15)
        {
LABEL_12:
          v16 = *(void **)(v1 + 128);
          if (!v16)
            goto LABEL_13;
          goto LABEL_22;
        }
LABEL_21:
        *(_QWORD *)(v1 + 160) = v15;
        operator delete(v15);
        v16 = *(void **)(v1 + 128);
        if (!v16)
        {
LABEL_13:
          v17 = *(void **)(v1 + 104);
          if (!v17)
            goto LABEL_14;
          goto LABEL_23;
        }
LABEL_22:
        *(_QWORD *)(v1 + 136) = v16;
        operator delete(v16);
        v17 = *(void **)(v1 + 104);
        if (!v17)
        {
LABEL_14:
          v18 = *(void **)(v1 + 80);
          if (!v18)
            goto LABEL_15;
          goto LABEL_24;
        }
LABEL_23:
        *(_QWORD *)(v1 + 112) = v17;
        operator delete(v17);
        v18 = *(void **)(v1 + 80);
        if (!v18)
        {
LABEL_15:
          v19 = *(void **)(v1 + 56);
          if (!v19)
            goto LABEL_16;
          goto LABEL_25;
        }
LABEL_24:
        *(_QWORD *)(v1 + 88) = v18;
        operator delete(v18);
        v19 = *(void **)(v1 + 56);
        if (!v19)
        {
LABEL_16:
          v20 = *v5;
          if (!*v5)
            goto LABEL_17;
          goto LABEL_26;
        }
LABEL_25:
        *(_QWORD *)(v1 + 64) = v19;
        operator delete(v19);
        v20 = *v5;
        if (!*v5)
        {
LABEL_17:
          sub_20E7938D0(v2, *v4);
          _Unwind_Resume(a1);
        }
LABEL_26:
        *(_QWORD *)(v1 + 40) = v20;
        operator delete(v20);
        sub_20E7938D0(v2, *v4);
        _Unwind_Resume(a1);
      }
LABEL_7:
      (*(void (**)(void))(v1 + 256))();
      goto LABEL_8;
    }
  }
  else
  {
    v9 = *v6;
    if (!*v6)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 312) = v9;
  operator delete(v9);
  sub_20E7EA590(v3);
  v11 = *(_QWORD *)(v1 + 248);
  *(_QWORD *)(v1 + 248) = 0;
  if (!v11)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_20E7EA590(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_20E7EA5DC(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v2 = *(void **)(a1 + 328);
  if (v2)
  {
    *(_QWORD *)(a1 + 336) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 304);
  if (v3)
  {
    *(_QWORD *)(a1 + 312) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD **)(a1 + 280);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v7)
    (*(void (**)(void))(a1 + 256))();
  v8 = *(void **)(a1 + 224);
  if (v8)
  {
    *(_QWORD *)(a1 + 232) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 200);
  if (v9)
  {
    *(_QWORD *)(a1 + 208) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 176);
  if (v10)
  {
    *(_QWORD *)(a1 + 184) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 152);
  if (v11)
  {
    *(_QWORD *)(a1 + 160) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 128);
  if (v12)
  {
    *(_QWORD *)(a1 + 136) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 104);
  if (v13)
  {
    *(_QWORD *)(a1 + 112) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 80);
  if (v14)
  {
    *(_QWORD *)(a1 + 88) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 56);
  if (v15)
  {
    *(_QWORD *)(a1 + 64) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 32);
  if (v16)
  {
    *(_QWORD *)(a1 + 40) = v16;
    operator delete(v16);
  }
  sub_20E7938D0(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_20E7EA6FC(_QWORD *a1, unint64_t **a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  void **v7;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v2 = (uint64_t)(a1[5] - a1[4]) >> 8;
  v3 = v2 + ((uint64_t)(a1[8] - a1[7]) >> 8);
  v5 = *a2;
  v4 = a2[1];
  if (v3 < v4 - *a2)
    sub_20E80C898();
  v7 = (void **)(a1 + 10);
  v8 = (char *)a1[10];
  for (a1[11] = v8; v5 != v4; v8 = v9)
  {
    v10 = *v5;
    if (*v5 > v3)
      sub_20E80C8C4();
    if (v10 >= v2)
      v11 = 7;
    else
      v11 = 4;
    v12 = a1[v11];
    if (v10 >= v2)
      v13 = v2;
    else
      v13 = 0;
    v14 = (__int128 *)(v12 + ((v10 - v13) << 8));
    v49 = v14[12];
    v50 = v14[13];
    v51 = v14[14];
    v52 = v14[15];
    v45 = v14[8];
    v46 = v14[9];
    v47 = v14[10];
    v48 = v14[11];
    v41 = v14[4];
    v42 = v14[5];
    v43 = v14[6];
    v44 = v14[7];
    v37 = *v14;
    v38 = v14[1];
    v39 = v14[2];
    v40 = v14[3];
    v15 = a1[12];
    if ((unint64_t)v8 < v15)
    {
      memmove(v8, v14, 0x100uLL);
      v9 = v8 + 256;
    }
    else
    {
      v16 = (char *)*v7;
      v17 = (v8 - (_BYTE *)*v7) >> 8;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 56)
        sub_20E78D874();
      v19 = v15 - (_QWORD)v16;
      if (v19 >> 7 > v18)
        v18 = v19 >> 7;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFF00)
        v20 = 0xFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (HIBYTE(v20))
          sub_20E78D888();
        v21 = (char *)operator new(v20 << 8);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[256 * v17];
      *((_OWORD *)v22 + 12) = v49;
      *((_OWORD *)v22 + 13) = v50;
      *((_OWORD *)v22 + 14) = v51;
      *((_OWORD *)v22 + 15) = v52;
      *((_OWORD *)v22 + 8) = v45;
      *((_OWORD *)v22 + 9) = v46;
      *((_OWORD *)v22 + 10) = v47;
      *((_OWORD *)v22 + 11) = v48;
      *((_OWORD *)v22 + 4) = v41;
      *((_OWORD *)v22 + 5) = v42;
      *((_OWORD *)v22 + 6) = v43;
      *((_OWORD *)v22 + 7) = v44;
      *(_OWORD *)v22 = v37;
      *((_OWORD *)v22 + 1) = v38;
      *((_OWORD *)v22 + 2) = v39;
      *((_OWORD *)v22 + 3) = v40;
      v23 = v22;
      if (v8 != v16)
      {
        do
        {
          v24 = *((_OWORD *)v8 - 16);
          v25 = *((_OWORD *)v8 - 15);
          v26 = *((_OWORD *)v8 - 13);
          *((_OWORD *)v23 - 14) = *((_OWORD *)v8 - 14);
          *((_OWORD *)v23 - 13) = v26;
          *((_OWORD *)v23 - 16) = v24;
          *((_OWORD *)v23 - 15) = v25;
          v27 = *((_OWORD *)v8 - 12);
          v28 = *((_OWORD *)v8 - 11);
          v29 = *((_OWORD *)v8 - 9);
          *((_OWORD *)v23 - 10) = *((_OWORD *)v8 - 10);
          *((_OWORD *)v23 - 9) = v29;
          *((_OWORD *)v23 - 12) = v27;
          *((_OWORD *)v23 - 11) = v28;
          v30 = *((_OWORD *)v8 - 8);
          v31 = *((_OWORD *)v8 - 7);
          v32 = *((_OWORD *)v8 - 5);
          *((_OWORD *)v23 - 6) = *((_OWORD *)v8 - 6);
          *((_OWORD *)v23 - 5) = v32;
          *((_OWORD *)v23 - 8) = v30;
          *((_OWORD *)v23 - 7) = v31;
          v33 = *((_OWORD *)v8 - 4);
          v34 = *((_OWORD *)v8 - 3);
          v35 = *((_OWORD *)v8 - 1);
          *((_OWORD *)v23 - 2) = *((_OWORD *)v8 - 2);
          *((_OWORD *)v23 - 1) = v35;
          *((_OWORD *)v23 - 4) = v33;
          *((_OWORD *)v23 - 3) = v34;
          v23 -= 256;
          v8 -= 256;
        }
        while (v8 != v16);
        v8 = (char *)*v7;
      }
      v36 = &v21[256 * v20];
      v9 = v22 + 256;
      a1[10] = v23;
      a1[11] = v22 + 256;
      a1[12] = v36;
      if (v8)
        operator delete(v8);
    }
    a1[11] = v9;
    ++v5;
  }
}

void sub_20E7EA98C(uint64_t a1, int a2)
{
  uint64_t v2;
  char *v3;
  const std::nothrow_t *v4;
  unint64_t v5;
  _OWORD *v6;
  BOOL v7;
  void *v8;

  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 80);
    v3 = *(char **)(a1 + 88);
    if ((uint64_t)&v3[-v2] <= 0x8000)
    {
LABEL_6:
      sub_20E7EC550(v2, v3, (uint64_t)&v3[-v2] >> 8, 0, 0);
    }
    else
    {
      v4 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      v5 = (uint64_t)&v3[-v2] >> 8;
      while (1)
      {
        v6 = operator new(v5 << 8, v4);
        if (v6)
          break;
        v7 = v5 > 1;
        v5 >>= 1;
        if (!v7)
          goto LABEL_6;
      }
      v8 = v6;
      sub_20E7EC550(v2, v3, (uint64_t)&v3[-v2] >> 8, v6, v5);
      operator delete(v8);
    }
  }
}

void sub_20E7EAA54(uint64_t a1, uint64_t **a2, char a3, unint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  const std::nothrow_t *v17;
  unint64_t v18;
  _OWORD *v19;
  BOOL v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  int v42;
  uint64_t i;
  char *v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  int *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t j;
  unint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t **v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  int8x8_t v76;
  uint8x8_t v77;
  unint64_t v78;
  uint64_t **v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  signed int v85;
  uint64_t *v86;
  uint64_t **v87;
  uint64_t **v88;
  signed int v89;
  _DWORD *v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t **v101;
  uint64_t v102;
  int *v103;
  int v104;
  int v105;
  char *v106;
  char *v107;
  uint64_t **v108;
  int v109;
  _DWORD *v110;
  uint64_t *v111;
  unsigned int v112;
  uint64_t *v113;
  uint64_t **v114;
  uint64_t **v115;
  int v116;
  _DWORD *v117;
  uint64_t *v118;
  uint64_t *v119;
  unsigned int v120;
  __int128 v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  __int128 v125;
  uint64_t *v126;
  uint64_t *v127;
  BOOL v128;
  __int128 *v129;
  uint64_t **v130;
  void *v131;
  uint64_t v132;
  char *v133;
  unint64_t v135;
  const char *v136;
  const char *v137;
  void *v138;
  unint64_t v139;
  _DWORD *__p;
  signed int v141;
  __int128 v142;
  uint64_t *v143;
  void *v144;
  char *v145;
  char *v146;
  _QWORD *v147;
  void *v148;
  uint64_t v149;

  if ((a3 & 1) == 0)
  {
    v15 = *(_QWORD *)(a1 + 80);
    v16 = *(char **)(a1 + 88);
    if ((uint64_t)&v16[-v15] <= 0x8000)
    {
LABEL_9:
      sub_20E7EC550(v15, v16, (uint64_t)&v16[-v15] >> 8, 0, 0);
    }
    else
    {
      v17 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      v18 = (uint64_t)&v16[-v15] >> 8;
      while (1)
      {
        v19 = operator new(v18 << 8, v17);
        if (v19)
          break;
        v20 = v18 > 1;
        v18 >>= 1;
        if (!v20)
          goto LABEL_9;
      }
      v131 = v19;
      sub_20E7EC550(v15, v16, (uint64_t)&v16[-v15] >> 8, v19, v18);
      operator delete(v131);
    }
    return;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40) - v6;
  v8 = v7 >> 8;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64) - v9;
  v138 = operator new(0x204uLL);
  bzero(v138, 0x204uLL);
  v11 = (v10 >> 8) + (v7 >> 8);
  v139 = v11;
  if ((v10 >> 8) + (v7 >> 8))
  {
    v12 = 2 * v11;
    v133 = (char *)operator new(2 * v11);
    bzero(v133, v12);
    v13 = (v7 >> 8);
    v14 = (int *)v138;
    if (!v13)
      goto LABEL_14;
LABEL_11:
    v21 = (_BYTE *)(v6 + 24);
    v22 = v133 + 1;
    v23 = v13;
    do
    {
      v24 = (unint64_t)*((unsigned int *)v21 - 3) >> 5;
      v25 = *v21 + (*((_DWORD *)v21 - 4) >> 4);
      *(v22 - 1) = v24;
      *v22 = v25;
      *v21 = 0;
      if ((v25 - 1) >= 8u)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointDescriptorStore.cpp", 138, "scale > 0 && scale <= kMaxNumOfScalesMinus2", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v26 = 8 * v24 + v25;
      v21 += 256;
      ++v14[v26];
      v22 += 2;
      --v23;
    }
    while (v23);
    goto LABEL_14;
  }
  v133 = 0;
  v13 = (v7 >> 8);
  v14 = (int *)v138;
  if (v13)
    goto LABEL_11;
LABEL_14:
  v27 = (v10 >> 8);
  if ((v10 >> 8))
  {
    v28 = (_BYTE *)(v9 + 24);
    v29 = &v133[2 * v13 + 1];
    do
    {
      v30 = (*((_DWORD *)v28 - 3) >> 5) + 8;
      v31 = *v28 + (*((_DWORD *)v28 - 4) >> 4);
      *(v29 - 1) = (*((_DWORD *)v28 - 3) >> 5) + 8;
      *v29 = v31;
      *v28 = 1;
      if ((v31 - 1) >= 8u)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointDescriptorStore.cpp", 154, "scale > 0 && scale <= kMaxNumOfScalesMinus2", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v32 = 8 * v30 + v31;
      ++v14[v32];
      v28 += 256;
      v29 += 2;
      --v27;
    }
    while (v27);
  }
  v147 = 0;
  v148 = 0;
  v149 = 0;
  if ((_DWORD)v139)
  {
    sub_20E791B74((uint64_t)&v147, v139);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = *(unsigned __int16 **)(a1 + 80);
    v37 = *(_QWORD *)(a1 + 32);
    v38 = v147;
    do
    {
      v39 = *v36 | (*((_DWORD *)v36 + 1) << 16) | ((unint64_t)*((unsigned __int8 *)v36 + 12) << 32) | ((unint64_t)*((unsigned __int8 *)v36 + 8) << 40) | ((unint64_t)(*((_DWORD *)v36 + 7) & 0x7FFF) << 48) | ((unint64_t)*((unsigned __int8 *)v36 + 24) << 63);
      v40 = (unsigned __int16 *)(v37 + (v34 << 8));
      if (v39 == (*v40 | (*((_DWORD *)v40 + 1) << 16) | ((unint64_t)*((unsigned __int8 *)v40 + 12) << 32) | ((unint64_t)*((unsigned __int8 *)v40 + 8) << 40) | ((unint64_t)(*((_DWORD *)v40 + 7) & 0x7FFF) << 48) | ((unint64_t)*((unsigned __int8 *)v40 + 24) << 63)))
      {
        v38[v34++] = v35;
      }
      else
      {
        v41 = (unsigned __int16 *)(*(_QWORD *)(a1 + 56) + (v33 << 8));
        if (v39 == (*v41 | (*((_DWORD *)v41 + 1) << 16) | ((unint64_t)*((unsigned __int8 *)v41 + 12) << 32) | ((unint64_t)*((unsigned __int8 *)v41 + 8) << 40) | ((unint64_t)(*((_DWORD *)v41 + 7) & 0x7FFF) << 48) | ((unint64_t)*((unsigned __int8 *)v41 + 24) << 63)))
        {
          v38[v33 + v13] = v35;
          ++v33;
        }
      }
      v36 += 128;
      ++v35;
    }
    while (v139 != v35);
  }
  v42 = *v14;
  for (i = 1; i != 129; ++i)
  {
    v42 += v14[i];
    v14[i] = v42;
  }
  v135 = a4;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  if ((_DWORD)v139)
  {
    v44 = (char *)operator new(8 * v139);
    v144 = v44;
    v146 = &v44[8 * v139];
    bzero(v44, 8 * v139);
    v145 = v146;
    v45 = operator new(8 * v139);
    bzero(v45, 8 * v139);
    v46 = 0;
    v47 = v147;
    v48 = (unsigned __int8 *)(v133 + 1);
    do
    {
      v49 = *(v48 - 1);
      v50 = *v48;
      v48 += 2;
      v51 = &v14[8 * v49 + v50];
      v52 = *(v51 - 1);
      *(v51 - 1) = v52 + 1;
      *(_QWORD *)&v44[8 * v52] = v46;
      *((_QWORD *)v45 + v47[v46++]) = v52;
    }
    while (v139 != v46);
  }
  else
  {
    v45 = 0;
  }
  __p = v45;
  sub_20E7EA6FC((_QWORD *)a1, (unint64_t **)&v144);
  v53 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 200) = v53;
  v54 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v54;
  v55 = operator new();
  sub_20E7DB6F4(v55, *(_DWORD *)a1);
  v56 = *(uint64_t **)(a1 + 248);
  v57 = *v56;
  *v56 = v55;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  *(_DWORD *)a1 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, unint64_t))(***(_QWORD ***)(a1 + 248)
                                                                                                 + 16))(**(_QWORD **)(a1 + 248), a1 + 176, v8, v10 >> 8);
  *((_QWORD *)&v142 + 1) = 0;
  v143 = 0;
  *(_QWORD *)&v142 = (char *)&v142 + 8;
  v141 = 0;
  v58 = *(_QWORD *)(a1 + 104);
  v59 = (*(_QWORD *)(a1 + 112) - v58) >> 2;
  if (v139 <= v59)
  {
    if (v139 < v59)
      *(_QWORD *)(a1 + 112) = v58 + 4 * v139;
  }
  else
  {
    sub_20E7C205C(a1 + 104, v139 - v59, (const float *)&v141);
  }
  v60 = (_QWORD *)(a1 + 264);
  if (*(_QWORD *)(a1 + 288))
  {
    v61 = *(_QWORD **)(a1 + 280);
    if (v61)
    {
      do
      {
        v62 = (_QWORD *)*v61;
        operator delete(v61);
        v61 = v62;
      }
      while (v62);
    }
    *(_QWORD *)(a1 + 280) = 0;
    v63 = *(_QWORD *)(a1 + 272);
    if (v63)
    {
      for (j = 0; j != v63; ++j)
        *(_QWORD *)(*v60 + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 288) = 0;
  }
  if ((_DWORD)v139)
  {
    v65 = 0;
    v66 = (uint64_t **)(a1 + 16);
    v136 = "/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointDescriptorStore.cpp";
    v137 = "false && \"duplicate tid is unexpected\"";
    while (1)
    {
      v141 = 0;
      v67 = *v66;
      v68 = (uint64_t **)(a1 + 16);
      v69 = (uint64_t **)(a1 + 16);
      if (*v66)
      {
        while (1)
        {
          while (1)
          {
            v69 = (uint64_t **)v67;
            v70 = v67[4];
            if (v65 >= v70)
              break;
            v67 = *v69;
            v68 = v69;
            if (!*v69)
              goto LABEL_54;
          }
          if (v70 >= v65)
            break;
          v67 = v69[1];
          if (!v67)
          {
            v68 = v69 + 1;
            goto LABEL_54;
          }
        }
        v71 = (uint64_t *)v69;
      }
      else
      {
LABEL_54:
        v71 = (uint64_t *)operator new(0x30uLL);
        v71[4] = v65;
        v71[5] = 0;
        *v71 = 0;
        v71[1] = 0;
        v71[2] = (uint64_t)v69;
        *v68 = v71;
        v72 = **(_QWORD **)(a1 + 8);
        v73 = v71;
        if (v72)
        {
          *(_QWORD *)(a1 + 8) = v72;
          v73 = *v68;
        }
        sub_20E793910(*(uint64_t **)(a1 + 16), v73);
        ++*(_QWORD *)(a1 + 24);
      }
      v74 = *(_QWORD *)(a1 + 176);
      v75 = *(unsigned int *)(v74 + 200 * v71[5] + 128);
      v141 = *(_DWORD *)(v74 + 200 * v71[5] + 128);
      v76 = *(int8x8_t *)(a1 + 272);
      if (v76)
      {
        v77 = (uint8x8_t)vcnt_s8(v76);
        v77.i16[0] = vaddlv_u8(v77);
        if (v77.u32[0] > 1uLL)
        {
          v78 = v75;
          if (*(_QWORD *)&v76 <= v75)
            v78 = v75 % *(_QWORD *)&v76;
        }
        else
        {
          v78 = (v76.i32[0] - 1) & v75;
        }
        v79 = *(uint64_t ***)(*v60 + 8 * v78);
        if (v79)
        {
          v80 = *v79;
          if (v80)
          {
            if (v77.u32[0] < 2uLL)
            {
              v81 = *(_QWORD *)&v76 - 1;
              while (1)
              {
                v83 = v80[1];
                if (v83 == v75)
                {
                  if (*((_DWORD *)v80 + 4) == (_DWORD)v75)
                    goto LABEL_141;
                }
                else if ((v83 & v81) != v78)
                {
                  goto LABEL_78;
                }
                v80 = (uint64_t *)*v80;
                if (!v80)
                  goto LABEL_78;
              }
            }
            do
            {
              v82 = v80[1];
              if (v82 == v75)
              {
                if (*((_DWORD *)v80 + 4) == (_DWORD)v75)
                {
LABEL_141:
                  v132 = 219;
                  goto LABEL_146;
                }
              }
              else
              {
                if (v82 >= *(_QWORD *)&v76)
                  v82 %= *(_QWORD *)&v76;
                if (v82 != v78)
                  break;
              }
              v80 = (uint64_t *)*v80;
            }
            while (v80);
          }
        }
      }
LABEL_78:
      if (!(_DWORD)v75)
        break;
      sub_20E7EDFD4(a1 + 264, (unsigned int *)&v141, &v141);
      v84 = __p[2 * v65];
      v85 = v141;
      v86 = (uint64_t *)*((_QWORD *)&v142 + 1);
      v87 = (uint64_t **)&v142 + 1;
LABEL_81:
      v88 = v87;
      if (v86)
      {
        while (1)
        {
          v87 = (uint64_t **)v86;
          v89 = *((_DWORD *)v86 + 7);
          if (v141 < v89)
          {
            v86 = *v87;
            goto LABEL_81;
          }
          if (v89 >= v141)
            break;
          v86 = v87[1];
          if (!v86)
          {
            v88 = v87 + 1;
            goto LABEL_86;
          }
        }
        v92 = __p[2 * v65];
        v90 = v87;
      }
      else
      {
LABEL_86:
        v90 = operator new(0x28uLL);
        v90[7] = v85;
        v90[8] = 0;
        *(_QWORD *)v90 = 0;
        *((_QWORD *)v90 + 1) = 0;
        *((_QWORD *)v90 + 2) = v87;
        *v88 = (uint64_t *)v90;
        v91 = (uint64_t *)v90;
        if (*(_QWORD *)v142)
        {
          *(_QWORD *)&v142 = *(_QWORD *)v142;
          v91 = *v88;
        }
        sub_20E793910(*((uint64_t **)&v142 + 1), v91);
        v143 = (uint64_t *)((char *)v143 + 1);
        v92 = __p[2 * v65];
      }
      v14 = (int *)v138;
      v90[8] = v84;
      v93 = *(_QWORD *)(a1 + 104);
      if (v92 >= (*(_QWORD *)(a1 + 112) - v93) >> 2)
      {
        v132 = 154;
        v136 = "/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointDescriptorStore.h";
        v137 = "idx < tids_.size() && \"Tid index is out-of-bound\"";
LABEL_146:
        sub_20E803BF4(v136, v132, v137, (void (*)(void *))sub_20E803DA4);
LABEL_147:
        abort();
      }
      *(_DWORD *)(v93 + 4 * v92) = v141;
      if (++v65 == v139)
        goto LABEL_92;
    }
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointDescriptorStore.cpp", 222, "assigned_tid != 0 && \"All TIDs are expected to be assigned by the LACC program\"", (void (*)(void *))sub_20E803DA4);
    goto LABEL_147;
  }
LABEL_92:
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a1 + 200))
  {
    v94 = *(_QWORD *)(a1 + 304);
    v95 = (*(_QWORD *)(a1 + 312) - v94) >> 2;
    if (v135 <= v95)
    {
      if (v135 < v95)
        *(_QWORD *)(a1 + 312) = v94 + 4 * v135;
    }
    else
    {
      sub_20E78F7D4(a1 + 304, v135 - v95);
    }
    v96 = *(_QWORD *)(a1 + 328);
    v97 = (*(_QWORD *)(a1 + 336) - v96) >> 2;
    if (v135 <= v97)
    {
      if (v135 < v97)
        *(_QWORD *)(a1 + 336) = v96 + 4 * v135;
    }
    else
    {
      sub_20E78F7D4(a1 + 328, v135 - v97);
    }
    sub_20E7EB710(a1 + 304, v135, flt_20E80F7E0);
    v98 = sub_20E7EB710(a1 + 328, v135, flt_20E80F7E0);
    v99 = *(_QWORD *)(a1 + 224);
    if (*(_QWORD *)(a1 + 232) - v99 != 52)
    {
      v100 = 0;
      v101 = a2 + 1;
      do
      {
        v102 = v99 + 52 * v100;
        v105 = *(_DWORD *)(v102 + 48);
        v103 = (int *)(v102 + 48);
        v104 = v105;
        v106 = (char *)*((_QWORD *)&v142 + 1);
        v107 = (char *)&v142 + 8;
LABEL_105:
        v108 = (uint64_t **)v107;
        if (v106)
        {
          while (1)
          {
            v107 = v106;
            v109 = *((_DWORD *)v106 + 7);
            if (v104 < v109)
            {
              v106 = *(char **)v107;
              goto LABEL_105;
            }
            if (v109 >= v104)
              break;
            v106 = (char *)*((_QWORD *)v107 + 1);
            if (!v106)
            {
              v108 = (uint64_t **)(v107 + 8);
              goto LABEL_110;
            }
          }
          v112 = *((_DWORD *)v107 + 8);
          v113 = *v101;
          v114 = a2 + 1;
          v115 = a2 + 1;
          if (*v101)
            goto LABEL_117;
        }
        else
        {
LABEL_110:
          v110 = operator new(0x28uLL);
          v110[7] = v104;
          v110[8] = 0;
          *(_QWORD *)v110 = 0;
          *((_QWORD *)v110 + 1) = 0;
          *((_QWORD *)v110 + 2) = v107;
          *v108 = (uint64_t *)v110;
          v111 = (uint64_t *)v110;
          if (*(_QWORD *)v142)
          {
            *(_QWORD *)&v142 = *(_QWORD *)v142;
            v111 = *v108;
          }
          v98 = sub_20E793910(*((uint64_t **)&v142 + 1), v111);
          v143 = (uint64_t *)((char *)v143 + 1);
          v104 = *v103;
          v112 = v110[8];
          v113 = *v101;
          v114 = a2 + 1;
          v115 = a2 + 1;
          if (*v101)
          {
            while (1)
            {
LABEL_117:
              while (1)
              {
                v115 = (uint64_t **)v113;
                v116 = *((_DWORD *)v113 + 7);
                if (v104 >= v116)
                  break;
                v113 = *v115;
                v114 = v115;
                if (!*v115)
                  goto LABEL_121;
              }
              if (v116 >= v104)
                break;
              v113 = v115[1];
              if (!v113)
              {
                v114 = v115 + 1;
                goto LABEL_121;
              }
            }
            v117 = v115;
            goto LABEL_125;
          }
        }
LABEL_121:
        v117 = operator new(0x28uLL);
        v117[7] = v104;
        v117[8] = 0;
        *(_QWORD *)v117 = 0;
        *((_QWORD *)v117 + 1) = 0;
        *((_QWORD *)v117 + 2) = v115;
        *v114 = (uint64_t *)v117;
        v118 = (uint64_t *)**a2;
        v119 = (uint64_t *)v117;
        if (v118)
        {
          *a2 = v118;
          v119 = *v114;
        }
        v98 = sub_20E793910(a2[1], v119);
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        v104 = *v103;
LABEL_125:
        v120 = v117[8];
        sub_20E7EB934((uint64_t)v98, (_QWORD *)(a1 + 304), (uint64_t *)(a1 + 328), v112, v120, v139, v104);
        sub_20E7EBBDC((_QWORD *)a1, v112, v120);
        ++v100;
        v99 = *(_QWORD *)(a1 + 224);
      }
      while (v100 < 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 232) - v99) >> 2) - 1);
    }
  }
  v121 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 200) = v121;
  v122 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v122;
  v124 = (uint64_t *)(a2 + 1);
  v123 = a2[1];
  v125 = v142;
  *(_QWORD *)&v142 = *a2;
  *((_QWORD *)&v142 + 1) = v123;
  *(_OWORD *)a2 = v125;
  v126 = v143;
  v143 = a2[2];
  v127 = v143;
  a2[2] = v126;
  v128 = v127 == 0;
  v129 = &v142;
  if (!v128)
    v129 = (__int128 *)(v123 + 2);
  *(_QWORD *)v129 = (char *)&v142 + 8;
  if (v126)
    v130 = (uint64_t **)(*v124 + 16);
  else
    v130 = a2;
  *v130 = v124;
  sub_20E7938D0((uint64_t)&v142, v123);
  if (__p)
    operator delete(__p);
  if (v144)
    operator delete(v144);
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  if (v133)
    operator delete(v133);
  operator delete(v14);
}

void sub_20E7EB5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,void *a22)
{
  uint64_t v22;
  void *v24;
  void *v25;
  void *v26;

  sub_20E7938D0((uint64_t)&a19, a20);
  if (a17)
  {
    operator delete(a17);
    v24 = a22;
    if (!a22)
    {
LABEL_3:
      v25 = *(void **)(v22 - 112);
      if (!v25)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v24 = a22;
    if (!a22)
      goto LABEL_3;
  }
  operator delete(v24);
  v25 = *(void **)(v22 - 112);
  if (!v25)
  {
LABEL_4:
    v26 = a9;
    if (!a9)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  *(_QWORD *)(v22 - 104) = v25;
  operator delete(v25);
  v26 = a9;
  if (!a9)
  {
LABEL_5:
    operator delete(__p);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v26);
  operator delete(__p);
  _Unwind_Resume(a1);
}

float *sub_20E7EB710(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  float *v7;
  float *result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  unint64_t v15;
  float *v16;
  unint64_t v17;
  int32x4_t v18;
  int32x4_t *v19;
  uint64_t v20;
  float32x4_t *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  float32x4_t v25;
  float32x4_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  float32x4_t *v30;
  unint64_t v31;
  uint64_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t *v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(float **)a1;
  result = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 2)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 62)
      goto LABEL_38;
    v9 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v9 = a2;
    v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL;
    v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 62)
LABEL_38:
      sub_20E78D874();
    v12 = v11;
    result = (float *)operator new(4 * v11);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v13 = &result[a2];
    v14 = *a3;
    v15 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v16 = result;
    if (v15 < 7)
      goto LABEL_41;
    v17 = v15 + 1;
    v16 = &result[v17 & 0x7FFFFFFFFFFFFFF8];
    v18 = vdupq_n_s32(LODWORD(v14));
    v19 = (int32x4_t *)(result + 4);
    v20 = v17 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
        *v16++ = v14;
      while (v16 != v13);
    }
    goto LABEL_37;
  }
  v21 = *(float32x4_t **)(a1 + 8);
  v22 = (char *)v21 - (char *)v7;
  v23 = ((char *)v21 - (char *)v7) >> 2;
  if (v23 >= a2)
    v24 = a2;
  else
    v24 = ((char *)v21 - (char *)v7) >> 2;
  if (v24)
  {
    if (v24 < 8 || v7 < a3 + 1 && &v7[v24] > a3)
      goto LABEL_42;
    result = &v7[v24 & 0xFFFFFFFFFFFFFFF8];
    v25 = vld1q_dup_f32(a3);
    v26 = (float32x4_t *)(v7 + 4);
    v27 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 8;
    }
    while (v27);
    v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFF8);
    v24 &= 7u;
    if (!v28)
    {
LABEL_42:
      do
      {
        *result++ = *a3;
        --v24;
      }
      while (v24);
    }
  }
  v10 = a2 >= v23;
  v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    v13 = &v7[a2];
LABEL_37:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v30 = (float32x4_t *)((char *)v21 + 4 * v29);
  v31 = 4 * a2 - (v22 & 0xFFFFFFFFFFFFFFFCLL) - 4;
  if (v31 < 0x4C || v21 < (float32x4_t *)(a3 + 1) && (char *)&v21->i32[1] + v31 > (char *)a3)
    goto LABEL_43;
  v32 = (v31 >> 2) + 1;
  v33 = (float32x4_t *)((char *)v21 + 4 * (v32 & 0x7FFFFFFFFFFFFFF8));
  v34 = vld1q_dup_f32(a3);
  v35 = v21 + 1;
  v36 = v32 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v35[-1] = v34;
    *v35 = v34;
    v35 += 2;
    v36 -= 8;
  }
  while (v36);
  v21 = v33;
  if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_43:
    do
    {
      v21->f32[0] = *a3;
      v21 = (float32x4_t *)((char *)v21 + 4);
    }
    while (v21 != v30);
  }
  *(_QWORD *)(a1 + 8) = v30;
  return result;
}

void sub_20E7EB934(uint64_t a1, _QWORD *a2, uint64_t *a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v17;
  uint8_t buf[4];
  unsigned int v19;
  __int16 v20;
  unsigned int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  v11 = *a3;
  v12 = *(_DWORD *)(*a3 + 4 * a5);
  if (*(_DWORD *)(*a2 + 4 * a4) != -1)
  {
    if (v12 == -1)
    {
      MEMORY[0x212BC45E8](__p, "curr idx");
      sub_20E7EC38C(a2, a6, a7, (uint64_t *)__p);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v19 = a4;
        _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "curr index: %u is duplicate", buf, 8u);
      }
      v13 = "false && \"Unexpected: curr idx is duplicate\"";
      v14 = 369;
    }
    else
    {
      MEMORY[0x212BC45E8](__p, "curr & prev idx");
      sub_20E7EC38C(a2, a6, a7, (uint64_t *)__p);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v19 = a4;
        v20 = 1024;
        v21 = a5;
        _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "duplicate indices pair: {%u, %u}", buf, 0xEu);
      }
      v13 = "false && \"Unexpected: curr & prev idx are duplicates\"";
      v14 = 364;
    }
LABEL_15:
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointDescriptorStore.cpp", v14, v13, (void (*)(void *))sub_20E803DA4);
    abort();
  }
  if (v12 != -1)
  {
    MEMORY[0x212BC45E8](__p, "prev idx");
    sub_20E7EC38C(a2, a6, a7, (uint64_t *)__p);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v19 = a5;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "prev index: %u is duplicate", buf, 8u);
    }
    v13 = "false && \"Unexpected: prev idx is duplicate\"";
    v14 = 374;
    goto LABEL_15;
  }
  *(_DWORD *)(*a2 + 4 * a4) = a5;
  *(_DWORD *)(v11 + 4 * a5) = a4;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
}

void sub_20E7EBBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E7EBBDC(_QWORD *a1, int a2, int a3)
{
  unint64_t v6;
  char *v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v7 = (char *)a1[17];
  v6 = a1[18];
  v8 = v7;
  if ((unint64_t)v7 >= v6)
  {
    v10 = (char *)a1[16];
    v11 = (v7 - v10) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20E78D874();
    v13 = v6 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
    v15 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v12;
    if (v15 >> 61)
      sub_20E78D888();
    v16 = 8 * v15;
    v17 = operator new(8 * v15);
    v18 = &v17[8 * v11];
    *v18 = a2;
    v18[1] = a3;
    v9 = v18 + 2;
    if (v7 != v10)
    {
      v19 = v7 - v10 - 8;
      if (v19 < 0x58)
        goto LABEL_23;
      if ((unint64_t)(v10 - v17) < 0x20)
        goto LABEL_23;
      v20 = (v19 >> 3) + 1;
      v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = &v7[-v21];
      v18 = (_DWORD *)((char *)v18 - v21);
      v22 = &v17[8 * v11 - 16];
      v23 = v7 - 16;
      v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 4;
      }
      while (v24);
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_23:
        do
        {
          v26 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v18 - 1) = v26;
          v18 -= 2;
        }
        while (v8 != v10);
      }
    }
    a1[16] = v18;
    a1[17] = v9;
    a1[18] = &v17[v16];
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_DWORD *)v7 = a2;
    *((_DWORD *)v7 + 1) = a3;
    v9 = v7 + 8;
  }
  a1[17] = v9;
}

void sub_20E7EBD38(uint64_t a1, int *a2, int a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int64x2_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  int64x2_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  int8x8_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  const char *v72;
  unint64_t v73;
  int *v74;
  unint64_t *__p;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t *v81;
  unint64_t *v82;
  unint64_t *v83;

  v8 = (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 8;
  v9 = (*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 8;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v79 = v8;
  v10 = (v9 + v8);
  if (!((_DWORD)v9 + (_DWORD)v8))
  {
    __p = 0;
    goto LABEL_9;
  }
  v11 = (unint64_t *)operator new(8 * v10);
  v81 = v11;
  v83 = &v11[v10];
  bzero(v11, 8 * v10);
  v82 = v83;
  __p = v11;
  if (8 * v10 - 8 < 0x18)
  {
    v12 = 0;
    v13 = v11;
    do
LABEL_8:
      *v13++ = v12++;
    while (v13 != &v11[v10]);
    goto LABEL_9;
  }
  v14 = ((8 * v10 - 8) >> 3) + 1;
  v12 = v14 & 0x3FFFFFFFFFFFFFFCLL;
  v13 = &v11[v14 & 0x3FFFFFFFFFFFFFFCLL];
  v15 = (int64x2_t)xmmword_20E80DF80;
  v16 = (int64x2_t *)(v11 + 2);
  v17 = vdupq_n_s64(2uLL);
  v18 = vdupq_n_s64(4uLL);
  v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v16[-1] = v15;
    *v16 = vaddq_s64(v15, v17);
    v15 = vaddq_s64(v15, v18);
    v16 += 2;
    v19 -= 4;
  }
  while (v19);
  if (v14 != v12)
    goto LABEL_8;
LABEL_9:
  sub_20E7EA6FC((_QWORD *)a1, &v81);
  if (a3)
  {
    v20 = (_QWORD *)(a1 + 176);
    v21 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 200) = v21;
    v22 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v22;
    v23 = (_QWORD *)operator new();
    sub_20E7DB6F4((uint64_t)v23, *(_DWORD *)a1);
    *v23 = &unk_24C9A8D20;
    v24 = *(uint64_t **)(a1 + 248);
    v25 = *v24;
    *v24 = (uint64_t)v23;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    *(_DWORD *)a1 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 248) + 16))(**(_QWORD **)(a1 + 248), a1 + 176, v79, v9);
    v26 = (_QWORD *)(a1 + 264);
    if (*(_QWORD *)(a1 + 288))
    {
      v27 = *(_QWORD **)(a1 + 280);
      if (v27)
      {
        do
        {
          v28 = (_QWORD *)*v27;
          operator delete(v27);
          v27 = v28;
        }
        while (v28);
      }
      *(_QWORD *)(a1 + 280) = 0;
      v29 = *(_QWORD *)(a1 + 272);
      if (v29)
      {
        for (i = 0; i != v29; ++i)
          *(_QWORD *)(*v26 + 8 * i) = 0;
      }
      *(_QWORD *)(a1 + 288) = 0;
    }
    v31 = *(_QWORD *)(a1 + 104);
    v32 = *(_QWORD *)(a1 + 112);
    v80 = 0;
    v33 = (v32 - v31) >> 2;
    v73 = a4;
    v74 = a2;
    if (v10 <= v33)
    {
      if (v10 < v33)
        *(_QWORD *)(a1 + 112) = v31 + 4 * v10;
    }
    else
    {
      sub_20E7C205C(a1 + 104, v10 - v33, (const float *)&v80);
    }
    v76 = v10;
    v77 = (-1030792151 * ((*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176)) >> 3) - 1) >> 5;
    if ((_DWORD)v77)
    {
      v34 = 0;
      v71 = "/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointDescriptorStore.cpp";
      v72 = "false && \"duplicate tid is unexpected\"";
      do
      {
        v35 = 0;
        v78 = v34;
        v36 = (32 * v34);
        do
        {
          v37 = *v20 + 200 * (v35 + v36);
          if (*(_DWORD *)(v37 + 16) == 0x3FFF)
            break;
          v38 = *(_DWORD *)(v37 + 32);
          v39 = *v20 + 200 * (v35 + v36);
          v42 = *(_DWORD *)(v39 + 128);
          v41 = (unsigned int *)(v39 + 128);
          v40 = v42;
          v43 = *(int8x8_t *)(a1 + 272);
          if (v43)
          {
            v44 = (uint8x8_t)vcnt_s8(v43);
            v44.i16[0] = vaddlv_u8(v44);
            if (v44.u32[0] > 1uLL)
            {
              v45 = v40;
              if (*(_QWORD *)&v43 <= v40)
                v45 = v40 % *(_QWORD *)&v43;
            }
            else
            {
              v45 = (v43.i32[0] - 1) & v40;
            }
            v46 = *(uint64_t ***)(*v26 + 8 * v45);
            if (v46)
            {
              v47 = *v46;
              if (v47)
              {
                if (v44.u32[0] < 2uLL)
                {
                  v48 = *(_QWORD *)&v43 - 1;
                  while (1)
                  {
                    v50 = v47[1];
                    if (v50 == v40)
                    {
                      if (*((_DWORD *)v47 + 4) == (_DWORD)v40)
                        goto LABEL_77;
                    }
                    else if ((v50 & v48) != v45)
                    {
                      goto LABEL_48;
                    }
                    v47 = (uint64_t *)*v47;
                    if (!v47)
                      goto LABEL_48;
                  }
                }
                do
                {
                  v49 = v47[1];
                  if (v49 == v40)
                  {
                    if (*((_DWORD *)v47 + 4) == (_DWORD)v40)
                    {
LABEL_77:
                      v70 = 298;
                      goto LABEL_79;
                    }
                  }
                  else
                  {
                    if (v49 >= *(_QWORD *)&v43)
                      v49 %= *(_QWORD *)&v43;
                    if (v49 != v45)
                      break;
                  }
                  v47 = (uint64_t *)*v47;
                }
                while (v47);
              }
            }
          }
LABEL_48:
          sub_20E7EDFD4(a1 + 264, v41, v41);
          if (*(_BYTE *)(v37 + 24))
            v51 = v79;
          else
            v51 = 0;
          v52 = (v51 + v38);
          v53 = *(_QWORD *)(a1 + 104);
          if (v52 >= (*(_QWORD *)(a1 + 112) - v53) >> 2)
          {
            v70 = 154;
            v71 = "/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointDescriptorStore.h";
            v72 = "idx < tids_.size() && \"Tid index is out-of-bound\"";
LABEL_79:
            sub_20E803BF4(v71, v70, v72, (void (*)(void *))sub_20E803DA4);
            abort();
          }
          *(_DWORD *)(v53 + 4 * v52) = *v41;
          ++v35;
        }
        while (v35 != 32);
        v34 = v78 + 1;
      }
      while (v78 + 1 != v77);
    }
    if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a1 + 200))
    {
      if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 2) >= (unint64_t)(v76 + 1))
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointDescriptorStore.cpp", 313, "bidir_matches.size() < num_descs + 1 && \"match size should not exceed keypoint size\"", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v54 = *(_QWORD *)(a1 + 304);
      v55 = (*(_QWORD *)(a1 + 312) - v54) >> 2;
      if (v73 <= v55)
      {
        if (v73 < v55)
          *(_QWORD *)(a1 + 312) = v54 + 4 * v73;
      }
      else
      {
        sub_20E78F7D4(a1 + 304, v73 - v55);
      }
      v56 = *(_QWORD *)(a1 + 328);
      v57 = (*(_QWORD *)(a1 + 336) - v56) >> 2;
      if (v73 <= v57)
      {
        if (v73 < v57)
          *(_QWORD *)(a1 + 336) = v56 + 4 * v73;
      }
      else
      {
        sub_20E78F7D4(a1 + 328, v73 - v57);
      }
      sub_20E7EB710(a1 + 304, v73, flt_20E80F7E0);
      v58 = sub_20E7EB710(a1 + 328, v73, flt_20E80F7E0);
      v59 = *(_QWORD *)(a1 + 224);
      if (*(_QWORD *)(a1 + 232) - v59 != 52)
      {
        v60 = 0;
        v61 = 0;
        do
        {
          v62 = v59 + v60;
          if (*(_BYTE *)(v62 + 28))
            v63 = v79;
          else
            v63 = 0;
          v64 = v63 + *(_DWORD *)(v62 + 24);
          v65 = *(_DWORD *)(v62 + 4);
          if (*(_BYTE *)(v62 + 8))
            v66 = *v74;
          else
            v66 = 0;
          v67 = v66 + v65;
          sub_20E7EB934((uint64_t)v58, (_QWORD *)(a1 + 304), (uint64_t *)(a1 + 328), v64, v66 + v65, v76, *(_DWORD *)(v62 + 48));
          sub_20E7EBBDC((_QWORD *)a1, v64, v67);
          ++v61;
          v59 = *(_QWORD *)(a1 + 224);
          v60 += 52;
        }
        while (v61 < 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 232) - v59) >> 2) - 1);
      }
    }
    *v74 = v79;
    v68 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 200) = v68;
    v69 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v69;
  }
  if (__p)
    operator delete(__p);
}

void sub_20E7EC33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E7EC38C(_QWORD *a1, unsigned int a2, int a3, uint64_t *a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a4 + 23) >= 0)
      v8 = a4;
    else
      v8 = (uint64_t *)*a4;
    *(_DWORD *)buf = 67109378;
    v14 = a3;
    v15 = 2080;
    v16 = v8;
    _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "TID %u, %s duplicate", buf, 0x12u);
  }
  if (a2)
  {
    v9 = 0;
    v10 = a2;
    v11 = MEMORY[0x24BDACB70];
    do
    {
      v12 = *(_DWORD *)(*a1 + 4 * v9);
      if (v12 != -1 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v14 = v9;
        v15 = 1024;
        LODWORD(v16) = v12;
        _os_log_impl(&dword_20E77A000, v11, OS_LOG_TYPE_DEFAULT, "curr to prev: %u -> %u.", buf, 0xEu);
      }
      ++v9;
    }
    while (v10 != v9);
  }
}

_QWORD *sub_20E7EC500(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    *v1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    JUMPOUT(0x212BC47D4);
  }
  return result;
}

uint64_t sub_20E7EC550(uint64_t result, char *a2, unint64_t a3, _OWORD *a4, uint64_t a5)
{
  char *v6;
  unsigned int v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unsigned int *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  _OWORD *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _OWORD *v72;
  _OWORD *v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  unsigned int v87;
  unsigned int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  unsigned int *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int16 v135;
  char v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;

  if (a3 < 2)
    return result;
  v6 = (char *)result;
  if (a3 == 2)
  {
    v8 = a2 - 256;
    v7 = *((_DWORD *)a2 - 64);
    v9 = *(a2 - 232);
    v10 = *(unsigned __int8 *)(result + 24);
    if (v9 < v10
      || v10 >= v9
      && ((v11 = *((_DWORD *)a2 - 62), v12 = *(_DWORD *)(result + 8), v11 < v12)
       || v12 >= v11
       && ((v13 = *((_DWORD *)a2 - 63), v14 = *(_DWORD *)(result + 4), v13 < v14)
        || v14 >= v13
        && (v7 < *(_DWORD *)result
         || *(_DWORD *)result >= v7
         && ((v15 = *((_DWORD *)a2 - 57), v16 = *(_DWORD *)(result + 28), v15 < v16)
          || v16 >= v15 && *((_DWORD *)a2 - 61) < *(_DWORD *)(result + 12))))))
    {
      v161 = *(_OWORD *)(result + 192);
      v163 = *(_OWORD *)(result + 208);
      v165 = *(_OWORD *)(result + 224);
      v166 = *(_OWORD *)(result + 240);
      v153 = *(_OWORD *)(result + 128);
      v155 = *(_OWORD *)(result + 144);
      v157 = *(_OWORD *)(result + 160);
      v159 = *(_OWORD *)(result + 176);
      v145 = *(_OWORD *)(result + 64);
      v147 = *(_OWORD *)(result + 80);
      v149 = *(_OWORD *)(result + 96);
      v151 = *(_OWORD *)(result + 112);
      v137 = *(_OWORD *)result;
      v139 = *(_OWORD *)(result + 16);
      v141 = *(_OWORD *)(result + 32);
      v143 = *(_OWORD *)(result + 48);
      v17 = *(_OWORD *)v8;
      v18 = *((_OWORD *)a2 - 15);
      v19 = *((_OWORD *)a2 - 13);
      *(_OWORD *)(result + 32) = *((_OWORD *)a2 - 14);
      *(_OWORD *)(result + 48) = v19;
      *(_OWORD *)result = v17;
      *(_OWORD *)(result + 16) = v18;
      v20 = *((_OWORD *)a2 - 12);
      v21 = *((_OWORD *)a2 - 11);
      v22 = *((_OWORD *)a2 - 9);
      *(_OWORD *)(result + 96) = *((_OWORD *)a2 - 10);
      *(_OWORD *)(result + 112) = v22;
      *(_OWORD *)(result + 64) = v20;
      *(_OWORD *)(result + 80) = v21;
      v23 = *((_OWORD *)a2 - 8);
      v24 = *((_OWORD *)a2 - 7);
      v25 = *((_OWORD *)a2 - 5);
      *(_OWORD *)(result + 160) = *((_OWORD *)a2 - 6);
      *(_OWORD *)(result + 176) = v25;
      *(_OWORD *)(result + 128) = v23;
      *(_OWORD *)(result + 144) = v24;
      v26 = *((_OWORD *)a2 - 4);
      v27 = *((_OWORD *)a2 - 3);
      v28 = *((_OWORD *)a2 - 1);
      *(_OWORD *)(result + 224) = *((_OWORD *)a2 - 2);
      *(_OWORD *)(result + 240) = v28;
      *(_OWORD *)(result + 192) = v26;
      *(_OWORD *)(result + 208) = v27;
      *((_OWORD *)a2 - 4) = v161;
      *((_OWORD *)a2 - 3) = v163;
      *((_OWORD *)a2 - 2) = v165;
      *((_OWORD *)a2 - 1) = v166;
      *((_OWORD *)a2 - 8) = v153;
      *((_OWORD *)a2 - 7) = v155;
      *((_OWORD *)a2 - 6) = v157;
      *((_OWORD *)a2 - 5) = v159;
      *((_OWORD *)a2 - 12) = v145;
      *((_OWORD *)a2 - 11) = v147;
      *((_OWORD *)a2 - 10) = v149;
      *((_OWORD *)a2 - 9) = v151;
      *(_OWORD *)v8 = v137;
      *((_OWORD *)a2 - 15) = v139;
      *((_OWORD *)a2 - 14) = v141;
      *((_OWORD *)a2 - 13) = v143;
    }
    return result;
  }
  if ((uint64_t)a3 > 128)
  {
    v68 = a4;
    v69 = a3 >> 1;
    v70 = result + (a3 >> 1 << 8);
    v71 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_20E7EC550(result, v70, v71, a4, a5);
      sub_20E7EC550(&v6[256 * (a3 >> 1)], a2, a3 - (a3 >> 1), v68, a5);
      return (uint64_t)sub_20E7ED3B8(v6, &v6[256 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v68, a5);
    }
    sub_20E7ECC88(result, v70, v71, a4);
    v72 = &v68[16 * v69];
    result = sub_20E7ECC88((uint64_t)&v6[256 * (a3 >> 1)], (uint64_t)a2, a3 - (a3 >> 1), v72);
    v73 = &v68[16 * a3];
    v74 = v72;
    while (1)
    {
      if (v74 == v73)
      {
        if (v68 != v72)
        {
          v107 = 0;
          do
          {
            v108 = (unsigned int *)&v6[v107 * 16];
            v109 = v68[v107];
            v110 = v68[v107 + 1];
            v111 = v68[v107 + 3];
            *((_OWORD *)v108 + 2) = v68[v107 + 2];
            *((_OWORD *)v108 + 3) = v111;
            *(_OWORD *)v108 = v109;
            *((_OWORD *)v108 + 1) = v110;
            v112 = v68[v107 + 4];
            v113 = v68[v107 + 5];
            v114 = v68[v107 + 7];
            *((_OWORD *)v108 + 6) = v68[v107 + 6];
            *((_OWORD *)v108 + 7) = v114;
            *((_OWORD *)v108 + 4) = v112;
            *((_OWORD *)v108 + 5) = v113;
            v115 = v68[v107 + 8];
            v116 = v68[v107 + 9];
            v117 = v68[v107 + 11];
            *((_OWORD *)v108 + 10) = v68[v107 + 10];
            *((_OWORD *)v108 + 11) = v117;
            *((_OWORD *)v108 + 8) = v115;
            *((_OWORD *)v108 + 9) = v116;
            v118 = v68[v107 + 12];
            v119 = v68[v107 + 13];
            v120 = v68[v107 + 15];
            *((_OWORD *)v108 + 14) = v68[v107 + 14];
            *((_OWORD *)v108 + 15) = v120;
            *((_OWORD *)v108 + 12) = v118;
            *((_OWORD *)v108 + 13) = v119;
            v107 += 16;
          }
          while (&v68[v107] != v72);
        }
        return result;
      }
      v87 = *((unsigned __int8 *)v74 + 24);
      v88 = *((unsigned __int8 *)v68 + 24);
      if (v87 < v88
        || v88 >= v87
        && ((v101 = *((_DWORD *)v74 + 2), v102 = *((_DWORD *)v68 + 2), v101 < v102)
         || v102 >= v101
         && ((v103 = *((_DWORD *)v74 + 1), v104 = *((_DWORD *)v68 + 1), v103 < v104)
          || v104 >= v103
          && (*(_DWORD *)v74 < *(_DWORD *)v68
           || *(_DWORD *)v68 >= *(_DWORD *)v74
           && ((v105 = *((_DWORD *)v74 + 7), v106 = *((_DWORD *)v68 + 7), v105 < v106)
            || v106 >= v105 && *((_DWORD *)v74 + 3) < *((_DWORD *)v68 + 3))))))
      {
        v75 = *v74;
        v76 = v74[1];
        v77 = v74[3];
        *((_OWORD *)v6 + 2) = v74[2];
        *((_OWORD *)v6 + 3) = v77;
        *(_OWORD *)v6 = v75;
        *((_OWORD *)v6 + 1) = v76;
        v78 = v74[4];
        v79 = v74[5];
        v80 = v74[7];
        *((_OWORD *)v6 + 6) = v74[6];
        *((_OWORD *)v6 + 7) = v80;
        *((_OWORD *)v6 + 4) = v78;
        *((_OWORD *)v6 + 5) = v79;
        v81 = v74[8];
        v82 = v74[9];
        v83 = v74[11];
        *((_OWORD *)v6 + 10) = v74[10];
        *((_OWORD *)v6 + 11) = v83;
        *((_OWORD *)v6 + 8) = v81;
        *((_OWORD *)v6 + 9) = v82;
        v84 = v74[12];
        v85 = v74[13];
        v86 = v74[15];
        *((_OWORD *)v6 + 14) = v74[14];
        *((_OWORD *)v6 + 15) = v86;
        *((_OWORD *)v6 + 12) = v84;
        *((_OWORD *)v6 + 13) = v85;
        v74 += 16;
        v6 += 256;
        if (v68 == v72)
          goto LABEL_74;
      }
      else
      {
        v89 = *v68;
        v90 = v68[1];
        v91 = v68[3];
        *((_OWORD *)v6 + 2) = v68[2];
        *((_OWORD *)v6 + 3) = v91;
        *(_OWORD *)v6 = v89;
        *((_OWORD *)v6 + 1) = v90;
        v92 = v68[4];
        v93 = v68[5];
        v94 = v68[7];
        *((_OWORD *)v6 + 6) = v68[6];
        *((_OWORD *)v6 + 7) = v94;
        *((_OWORD *)v6 + 4) = v92;
        *((_OWORD *)v6 + 5) = v93;
        v95 = v68[8];
        v96 = v68[9];
        v97 = v68[11];
        *((_OWORD *)v6 + 10) = v68[10];
        *((_OWORD *)v6 + 11) = v97;
        *((_OWORD *)v6 + 8) = v95;
        *((_OWORD *)v6 + 9) = v96;
        v98 = v68[12];
        v99 = v68[13];
        v100 = v68[15];
        *((_OWORD *)v6 + 14) = v68[14];
        *((_OWORD *)v6 + 15) = v100;
        *((_OWORD *)v6 + 12) = v98;
        *((_OWORD *)v6 + 13) = v99;
        v68 += 16;
        v6 += 256;
        if (v68 == v72)
        {
LABEL_74:
          if (v74 != v73)
          {
            v121 = 0;
            do
            {
              v122 = (unsigned int *)&v6[v121 * 16];
              v123 = v74[v121];
              v124 = v74[v121 + 1];
              v125 = v74[v121 + 3];
              *((_OWORD *)v122 + 2) = v74[v121 + 2];
              *((_OWORD *)v122 + 3) = v125;
              *(_OWORD *)v122 = v123;
              *((_OWORD *)v122 + 1) = v124;
              v126 = v74[v121 + 4];
              v127 = v74[v121 + 5];
              v128 = v74[v121 + 7];
              *((_OWORD *)v122 + 6) = v74[v121 + 6];
              *((_OWORD *)v122 + 7) = v128;
              *((_OWORD *)v122 + 4) = v126;
              *((_OWORD *)v122 + 5) = v127;
              v129 = v74[v121 + 8];
              v130 = v74[v121 + 9];
              v131 = v74[v121 + 11];
              *((_OWORD *)v122 + 10) = v74[v121 + 10];
              *((_OWORD *)v122 + 11) = v131;
              *((_OWORD *)v122 + 8) = v129;
              *((_OWORD *)v122 + 9) = v130;
              v132 = v74[v121 + 12];
              v133 = v74[v121 + 13];
              v134 = v74[v121 + 15];
              *((_OWORD *)v122 + 14) = v74[v121 + 14];
              *((_OWORD *)v122 + 15) = v134;
              *((_OWORD *)v122 + 12) = v132;
              *((_OWORD *)v122 + 13) = v133;
              v121 += 16;
            }
            while (&v74[v121] != v73);
          }
          return result;
        }
      }
    }
  }
  if ((char *)result == a2)
    return result;
  v30 = (unsigned int *)(result + 256);
  if ((char *)(result + 256) == a2)
    return result;
  v31 = 0;
  v32 = (unsigned int *)result;
  while (2)
  {
    v33 = v32;
    v32 = v30;
    v34 = *((unsigned __int8 *)v33 + 280);
    v35 = v33[66];
    v36 = v33[65];
    v37 = *v30;
    v38 = v33[71];
    v39 = v33[67];
    result = *((unsigned __int8 *)v33 + 24);
    if (v34 >= result)
    {
      if (result < v34)
        goto LABEL_22;
      result = v33[2];
      if (v35 >= result)
      {
        if (result < v35)
          goto LABEL_22;
        result = v33[1];
        if (v36 >= result)
        {
          if (result < v36)
            goto LABEL_22;
          result = *v33;
          if (v37 >= result)
          {
            if (result < v37)
              goto LABEL_22;
            result = v33[7];
            if (v38 >= result)
            {
              if (result < v38)
                goto LABEL_22;
              result = v33[3];
              if (v39 >= result)
                goto LABEL_22;
            }
          }
        }
      }
    }
    result = *((_QWORD *)v33 + 34);
    v135 = *(_WORD *)((char *)v33 + 281);
    v136 = *((_BYTE *)v33 + 283);
    v146 = *((_OWORD *)v33 + 22);
    v148 = *((_OWORD *)v33 + 23);
    v142 = *((_OWORD *)v33 + 20);
    v144 = *((_OWORD *)v33 + 21);
    v154 = *((_OWORD *)v33 + 26);
    v156 = *((_OWORD *)v33 + 27);
    v150 = *((_OWORD *)v33 + 24);
    v152 = *((_OWORD *)v33 + 25);
    v162 = *((_OWORD *)v33 + 30);
    v164 = *((_OWORD *)v33 + 31);
    v158 = *((_OWORD *)v33 + 28);
    v160 = *((_OWORD *)v33 + 29);
    v138 = *((_OWORD *)v33 + 18);
    v140 = *((_OWORD *)v33 + 19);
    v40 = *(_OWORD *)v33;
    v41 = *((_OWORD *)v33 + 1);
    v42 = *((_OWORD *)v33 + 3);
    *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
    *((_OWORD *)v32 + 3) = v42;
    *(_OWORD *)v32 = v40;
    *((_OWORD *)v32 + 1) = v41;
    v43 = *((_OWORD *)v33 + 4);
    v44 = *((_OWORD *)v33 + 5);
    v45 = *((_OWORD *)v33 + 7);
    *((_OWORD *)v32 + 6) = *((_OWORD *)v33 + 6);
    *((_OWORD *)v32 + 7) = v45;
    *((_OWORD *)v32 + 4) = v43;
    *((_OWORD *)v32 + 5) = v44;
    v46 = *((_OWORD *)v33 + 8);
    v47 = *((_OWORD *)v33 + 9);
    v48 = *((_OWORD *)v33 + 11);
    *((_OWORD *)v32 + 10) = *((_OWORD *)v33 + 10);
    *((_OWORD *)v32 + 11) = v48;
    *((_OWORD *)v32 + 8) = v46;
    *((_OWORD *)v32 + 9) = v47;
    v49 = *((_OWORD *)v33 + 12);
    v50 = *((_OWORD *)v33 + 13);
    v51 = *((_OWORD *)v33 + 15);
    *((_OWORD *)v32 + 14) = *((_OWORD *)v33 + 14);
    *((_OWORD *)v32 + 15) = v51;
    *((_OWORD *)v32 + 12) = v49;
    *((_OWORD *)v32 + 13) = v50;
    if (v33 == (unsigned int *)v6)
    {
LABEL_20:
      v33 = (unsigned int *)v6;
      goto LABEL_21;
    }
    v52 = v31;
    while (1)
    {
      v61 = &v6[v52];
      v62 = *(_DWORD *)&v6[v52 - 256];
      v63 = v6[v52 - 232];
      if (v34 < v63)
        goto LABEL_26;
      if (v63 < v34)
        goto LABEL_21;
      v64 = *((_DWORD *)v61 - 62);
      if (v35 < v64)
        goto LABEL_26;
      if (v64 < v35)
        goto LABEL_21;
      v65 = *((_DWORD *)v61 - 63);
      if (v36 < v65)
        goto LABEL_26;
      if (v65 < v36)
        goto LABEL_21;
      if (v37 < v62)
        goto LABEL_26;
      if (v62 < v37)
        break;
      v66 = *((_DWORD *)v61 - 57);
      if (v38 >= v66 && (v66 < v38 || v39 >= *((_DWORD *)v61 - 61)))
        goto LABEL_21;
LABEL_26:
      v33 -= 64;
      v53 = *(_OWORD *)&v6[v52 - 48];
      *((_OWORD *)v61 + 12) = *(_OWORD *)&v6[v52 - 64];
      *((_OWORD *)v61 + 13) = v53;
      v54 = *(_OWORD *)&v6[v52 - 16];
      *((_OWORD *)v61 + 14) = *(_OWORD *)&v6[v52 - 32];
      *((_OWORD *)v61 + 15) = v54;
      v55 = *(_OWORD *)&v6[v52 - 112];
      *((_OWORD *)v61 + 8) = *(_OWORD *)&v6[v52 - 128];
      *((_OWORD *)v61 + 9) = v55;
      v56 = *(_OWORD *)&v6[v52 - 80];
      *((_OWORD *)v61 + 10) = *(_OWORD *)&v6[v52 - 96];
      *((_OWORD *)v61 + 11) = v56;
      v57 = *(_OWORD *)&v6[v52 - 176];
      *((_OWORD *)v61 + 4) = *(_OWORD *)&v6[v52 - 192];
      *((_OWORD *)v61 + 5) = v57;
      v58 = *(_OWORD *)&v6[v52 - 144];
      *((_OWORD *)v61 + 6) = *(_OWORD *)&v6[v52 - 160];
      *((_OWORD *)v61 + 7) = v58;
      v59 = *(_OWORD *)&v6[v52 - 240];
      *(_OWORD *)v61 = *(_OWORD *)&v6[v52 - 256];
      *((_OWORD *)v61 + 1) = v59;
      v60 = *(_OWORD *)&v6[v52 - 208];
      *((_OWORD *)v61 + 2) = *(_OWORD *)&v6[v52 - 224];
      *((_OWORD *)v61 + 3) = v60;
      v52 -= 256;
      if (!v52)
        goto LABEL_20;
    }
    v33 = (unsigned int *)&v6[v52];
LABEL_21:
    *v33 = v37;
    v33[1] = v36;
    v33[2] = v35;
    v33[3] = v39;
    *((_QWORD *)v33 + 2) = result;
    *((_BYTE *)v33 + 24) = v34;
    *(_WORD *)((char *)v33 + 25) = v135;
    *((_BYTE *)v33 + 27) = v136;
    v33[7] = v38;
    *((_OWORD *)v33 + 4) = v142;
    *((_OWORD *)v33 + 5) = v144;
    *((_OWORD *)v33 + 8) = v150;
    *((_OWORD *)v33 + 9) = v152;
    *((_OWORD *)v33 + 12) = v158;
    *((_OWORD *)v33 + 13) = v160;
    *((_OWORD *)v33 + 14) = v162;
    *((_OWORD *)v33 + 15) = v164;
    *((_OWORD *)v33 + 10) = v154;
    *((_OWORD *)v33 + 11) = v156;
    *((_OWORD *)v33 + 6) = v146;
    *((_OWORD *)v33 + 7) = v148;
    *((_OWORD *)v33 + 2) = v138;
    *((_OWORD *)v33 + 3) = v140;
LABEL_22:
    v30 = v32 + 64;
    v31 += 256;
    if (v32 + 64 != (unsigned int *)a2)
      continue;
    return result;
  }
}

uint64_t sub_20E7ECC88(uint64_t result, uint64_t a2, unint64_t a3, _OWORD *a4)
{
  _OWORD *v4;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  __int128 *v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  _OWORD *v78;
  unsigned int v79;
  unsigned int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _OWORD *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unint64_t v171;
  _OWORD *v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unint64_t v191;
  _OWORD *v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;

  if (a3)
  {
    v4 = a4;
    v7 = result;
    if (a3 == 2)
    {
      v21 = (__int128 *)(a2 - 256);
      v20 = *(_DWORD *)(a2 - 256);
      v22 = *(unsigned __int8 *)(a2 - 232);
      v23 = *(unsigned __int8 *)(result + 24);
      if (v22 < v23
        || v23 >= v22
        && ((v185 = *(_DWORD *)(a2 - 248), v186 = *(_DWORD *)(result + 8), v185 < v186)
         || v186 >= v185
         && ((v187 = *(_DWORD *)(a2 - 252), v188 = *(_DWORD *)(result + 4), v187 < v188)
          || v188 >= v187
          && (v20 < *(_DWORD *)result
           || *(_DWORD *)result >= v20
           && ((v189 = *(_DWORD *)(a2 - 228), v190 = *(_DWORD *)(result + 28), v189 < v190)
            || v190 >= v189 && *(_DWORD *)(a2 - 244) < *(_DWORD *)(result + 12))))))
      {
        v24 = *v21;
        v25 = *(_OWORD *)(a2 - 240);
        v26 = *(_OWORD *)(a2 - 208);
        a4[2] = *(_OWORD *)(a2 - 224);
        a4[3] = v26;
        *a4 = v24;
        a4[1] = v25;
        v27 = *(_OWORD *)(a2 - 192);
        v28 = *(_OWORD *)(a2 - 176);
        v29 = *(_OWORD *)(a2 - 144);
        a4[6] = *(_OWORD *)(a2 - 160);
        a4[7] = v29;
        a4[4] = v27;
        a4[5] = v28;
        v30 = *(_OWORD *)(a2 - 128);
        v31 = *(_OWORD *)(a2 - 112);
        v32 = *(_OWORD *)(a2 - 80);
        a4[10] = *(_OWORD *)(a2 - 96);
        a4[11] = v32;
        a4[8] = v30;
        a4[9] = v31;
        v33 = *(_OWORD *)(a2 - 64);
        v34 = *(_OWORD *)(a2 - 48);
        v35 = *(_OWORD *)(a2 - 16);
        a4[14] = *(_OWORD *)(a2 - 32);
        a4[15] = v35;
        a4[12] = v33;
        a4[13] = v34;
        v36 = *(_OWORD *)result;
        v37 = *(_OWORD *)(result + 16);
        v38 = *(_OWORD *)(result + 48);
        a4[18] = *(_OWORD *)(result + 32);
        a4[19] = v38;
        a4[16] = v36;
        a4[17] = v37;
        v39 = *(_OWORD *)(result + 64);
        v40 = *(_OWORD *)(result + 80);
        v41 = *(_OWORD *)(result + 112);
        a4[22] = *(_OWORD *)(result + 96);
        a4[23] = v41;
        a4[20] = v39;
        a4[21] = v40;
        v42 = *(_OWORD *)(result + 128);
        v43 = *(_OWORD *)(result + 144);
        v44 = *(_OWORD *)(result + 176);
        a4[26] = *(_OWORD *)(result + 160);
        a4[27] = v44;
        a4[24] = v42;
        a4[25] = v43;
        v45 = *(_OWORD *)(result + 192);
        v46 = *(_OWORD *)(result + 208);
        v47 = *(_OWORD *)(result + 224);
        v48 = *(_OWORD *)(result + 240);
      }
      else
      {
        v114 = *(_OWORD *)result;
        v115 = *(_OWORD *)(result + 16);
        v116 = *(_OWORD *)(result + 48);
        a4[2] = *(_OWORD *)(result + 32);
        a4[3] = v116;
        *a4 = v114;
        a4[1] = v115;
        v117 = *(_OWORD *)(result + 64);
        v118 = *(_OWORD *)(result + 80);
        v119 = *(_OWORD *)(result + 112);
        a4[6] = *(_OWORD *)(result + 96);
        a4[7] = v119;
        a4[4] = v117;
        a4[5] = v118;
        v120 = *(_OWORD *)(result + 128);
        v121 = *(_OWORD *)(result + 144);
        v122 = *(_OWORD *)(result + 176);
        a4[10] = *(_OWORD *)(result + 160);
        a4[11] = v122;
        a4[8] = v120;
        a4[9] = v121;
        v123 = *(_OWORD *)(result + 192);
        v124 = *(_OWORD *)(result + 208);
        v125 = *(_OWORD *)(result + 240);
        a4[14] = *(_OWORD *)(result + 224);
        a4[15] = v125;
        a4[12] = v123;
        a4[13] = v124;
        v126 = *v21;
        v127 = *(_OWORD *)(a2 - 240);
        v128 = *(_OWORD *)(a2 - 208);
        a4[18] = *(_OWORD *)(a2 - 224);
        a4[19] = v128;
        a4[16] = v126;
        a4[17] = v127;
        v129 = *(_OWORD *)(a2 - 192);
        v130 = *(_OWORD *)(a2 - 176);
        v131 = *(_OWORD *)(a2 - 144);
        a4[22] = *(_OWORD *)(a2 - 160);
        a4[23] = v131;
        a4[20] = v129;
        a4[21] = v130;
        v132 = *(_OWORD *)(a2 - 128);
        v133 = *(_OWORD *)(a2 - 112);
        v134 = *(_OWORD *)(a2 - 80);
        a4[26] = *(_OWORD *)(a2 - 96);
        a4[27] = v134;
        a4[24] = v132;
        a4[25] = v133;
        v45 = *(_OWORD *)(a2 - 64);
        v46 = *(_OWORD *)(a2 - 48);
        v47 = *(_OWORD *)(a2 - 32);
        v48 = *(_OWORD *)(a2 - 16);
      }
      a4[30] = v47;
      a4[31] = v48;
      a4[28] = v45;
      a4[29] = v46;
    }
    else if (a3 == 1)
    {
      v8 = *(_OWORD *)result;
      v9 = *(_OWORD *)(result + 16);
      v10 = *(_OWORD *)(result + 48);
      a4[2] = *(_OWORD *)(result + 32);
      a4[3] = v10;
      *a4 = v8;
      a4[1] = v9;
      v11 = *(_OWORD *)(result + 64);
      v12 = *(_OWORD *)(result + 80);
      v13 = *(_OWORD *)(result + 112);
      a4[6] = *(_OWORD *)(result + 96);
      a4[7] = v13;
      a4[4] = v11;
      a4[5] = v12;
      v14 = *(_OWORD *)(result + 128);
      v15 = *(_OWORD *)(result + 144);
      v16 = *(_OWORD *)(result + 176);
      a4[10] = *(_OWORD *)(result + 160);
      a4[11] = v16;
      a4[8] = v14;
      a4[9] = v15;
      v17 = *(_OWORD *)(result + 192);
      v18 = *(_OWORD *)(result + 208);
      v19 = *(_OWORD *)(result + 240);
      a4[14] = *(_OWORD *)(result + 224);
      a4[15] = v19;
      a4[12] = v17;
      a4[13] = v18;
    }
    else if ((uint64_t)a3 > 8)
    {
      v135 = a3 >> 1;
      v136 = a3 >> 1 << 8;
      v137 = result + v136;
      sub_20E7EC550(result, result + v136, a3 >> 1, a4, a3 >> 1);
      result = sub_20E7EC550(v7 + v136, a2, a3 - v135, (char *)v4 + v136, a3 - v135);
      v138 = v7 + v136;
      while (v138 != a2)
      {
        v151 = *(unsigned __int8 *)(v138 + 24);
        v152 = *(unsigned __int8 *)(v7 + 24);
        if (v151 < v152
          || v152 >= v151
          && ((v153 = *(_DWORD *)(v138 + 8), v154 = *(_DWORD *)(v7 + 8), v153 < v154)
           || v154 >= v153
           && ((v167 = *(_DWORD *)(v138 + 4), v168 = *(_DWORD *)(v7 + 4), v167 < v168)
            || v168 >= v167
            && (*(_DWORD *)v138 < *(_DWORD *)v7
             || *(_DWORD *)v7 >= *(_DWORD *)v138
             && ((v169 = *(_DWORD *)(v138 + 28), v170 = *(_DWORD *)(v7 + 28), v169 < v170)
              || v170 >= v169 && *(_DWORD *)(v138 + 12) < *(_DWORD *)(v7 + 12))))))
        {
          v139 = *(_OWORD *)v138;
          v140 = *(_OWORD *)(v138 + 16);
          v141 = *(_OWORD *)(v138 + 48);
          v4[2] = *(_OWORD *)(v138 + 32);
          v4[3] = v141;
          *v4 = v139;
          v4[1] = v140;
          v142 = *(_OWORD *)(v138 + 64);
          v143 = *(_OWORD *)(v138 + 80);
          v144 = *(_OWORD *)(v138 + 112);
          v4[6] = *(_OWORD *)(v138 + 96);
          v4[7] = v144;
          v4[4] = v142;
          v4[5] = v143;
          v145 = *(_OWORD *)(v138 + 128);
          v146 = *(_OWORD *)(v138 + 144);
          v147 = *(_OWORD *)(v138 + 176);
          v4[10] = *(_OWORD *)(v138 + 160);
          v4[11] = v147;
          v4[8] = v145;
          v4[9] = v146;
          v148 = *(_OWORD *)(v138 + 192);
          v149 = *(_OWORD *)(v138 + 208);
          v150 = *(_OWORD *)(v138 + 240);
          v4[14] = *(_OWORD *)(v138 + 224);
          v4[15] = v150;
          v4[12] = v148;
          v4[13] = v149;
          v138 += 256;
          v4 += 16;
          if (v7 == v137)
            goto LABEL_76;
        }
        else
        {
          v155 = *(_OWORD *)v7;
          v156 = *(_OWORD *)(v7 + 16);
          v157 = *(_OWORD *)(v7 + 48);
          v4[2] = *(_OWORD *)(v7 + 32);
          v4[3] = v157;
          *v4 = v155;
          v4[1] = v156;
          v158 = *(_OWORD *)(v7 + 64);
          v159 = *(_OWORD *)(v7 + 80);
          v160 = *(_OWORD *)(v7 + 112);
          v4[6] = *(_OWORD *)(v7 + 96);
          v4[7] = v160;
          v4[4] = v158;
          v4[5] = v159;
          v161 = *(_OWORD *)(v7 + 128);
          v162 = *(_OWORD *)(v7 + 144);
          v163 = *(_OWORD *)(v7 + 176);
          v4[10] = *(_OWORD *)(v7 + 160);
          v4[11] = v163;
          v4[8] = v161;
          v4[9] = v162;
          v164 = *(_OWORD *)(v7 + 192);
          v165 = *(_OWORD *)(v7 + 208);
          v166 = *(_OWORD *)(v7 + 240);
          v4[14] = *(_OWORD *)(v7 + 224);
          v4[15] = v166;
          v4[12] = v164;
          v4[13] = v165;
          v7 += 256;
          v4 += 16;
          if (v7 == v137)
          {
LABEL_76:
            if (v138 != a2)
            {
              v191 = 0;
              do
              {
                v192 = &v4[v191 / 0x10];
                v193 = *(_OWORD *)(v138 + v191);
                v194 = *(_OWORD *)(v138 + v191 + 16);
                v195 = *(_OWORD *)(v138 + v191 + 48);
                v192[2] = *(_OWORD *)(v138 + v191 + 32);
                v192[3] = v195;
                *v192 = v193;
                v192[1] = v194;
                v196 = *(_OWORD *)(v138 + v191 + 64);
                v197 = *(_OWORD *)(v138 + v191 + 80);
                v198 = *(_OWORD *)(v138 + v191 + 112);
                v192[6] = *(_OWORD *)(v138 + v191 + 96);
                v192[7] = v198;
                v192[4] = v196;
                v192[5] = v197;
                v199 = *(_OWORD *)(v138 + v191 + 128);
                v200 = *(_OWORD *)(v138 + v191 + 144);
                v201 = *(_OWORD *)(v138 + v191 + 176);
                v192[10] = *(_OWORD *)(v138 + v191 + 160);
                v192[11] = v201;
                v192[8] = v199;
                v192[9] = v200;
                v202 = *(_OWORD *)(v138 + v191 + 192);
                v203 = *(_OWORD *)(v138 + v191 + 208);
                v204 = *(_OWORD *)(v138 + v191 + 240);
                v192[14] = *(_OWORD *)(v138 + v191 + 224);
                v192[15] = v204;
                v192[12] = v202;
                v192[13] = v203;
                v191 += 256;
              }
              while (v138 + v191 != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v137)
      {
        v171 = 0;
        do
        {
          v172 = &v4[v171 / 0x10];
          v173 = *(_OWORD *)(v7 + v171);
          v174 = *(_OWORD *)(v7 + v171 + 16);
          v175 = *(_OWORD *)(v7 + v171 + 48);
          v172[2] = *(_OWORD *)(v7 + v171 + 32);
          v172[3] = v175;
          *v172 = v173;
          v172[1] = v174;
          v176 = *(_OWORD *)(v7 + v171 + 64);
          v177 = *(_OWORD *)(v7 + v171 + 80);
          v178 = *(_OWORD *)(v7 + v171 + 112);
          v172[6] = *(_OWORD *)(v7 + v171 + 96);
          v172[7] = v178;
          v172[4] = v176;
          v172[5] = v177;
          v179 = *(_OWORD *)(v7 + v171 + 128);
          v180 = *(_OWORD *)(v7 + v171 + 144);
          v181 = *(_OWORD *)(v7 + v171 + 176);
          v172[10] = *(_OWORD *)(v7 + v171 + 160);
          v172[11] = v181;
          v172[8] = v179;
          v172[9] = v180;
          v182 = *(_OWORD *)(v7 + v171 + 192);
          v183 = *(_OWORD *)(v7 + v171 + 208);
          v184 = *(_OWORD *)(v7 + v171 + 240);
          v172[14] = *(_OWORD *)(v7 + v171 + 224);
          v172[15] = v184;
          v172[12] = v182;
          v172[13] = v183;
          v171 += 256;
        }
        while (v7 + v171 != v137);
      }
    }
    else if (result != a2)
    {
      v49 = *(_OWORD *)result;
      v50 = *(_OWORD *)(result + 16);
      v51 = *(_OWORD *)(result + 48);
      a4[2] = *(_OWORD *)(result + 32);
      a4[3] = v51;
      *a4 = v49;
      a4[1] = v50;
      v52 = *(_OWORD *)(result + 64);
      v53 = *(_OWORD *)(result + 80);
      v54 = *(_OWORD *)(result + 112);
      a4[6] = *(_OWORD *)(result + 96);
      a4[7] = v54;
      a4[4] = v52;
      a4[5] = v53;
      v55 = *(_OWORD *)(result + 128);
      v56 = *(_OWORD *)(result + 144);
      v57 = *(_OWORD *)(result + 176);
      a4[10] = *(_OWORD *)(result + 160);
      a4[11] = v57;
      a4[8] = v55;
      a4[9] = v56;
      v58 = *(_OWORD *)(result + 192);
      v59 = *(_OWORD *)(result + 208);
      v60 = *(_OWORD *)(result + 240);
      a4[14] = *(_OWORD *)(result + 224);
      a4[15] = v60;
      a4[12] = v58;
      a4[13] = v59;
      v61 = result + 256;
      if (result + 256 != a2)
      {
        v62 = 0;
        v63 = a4;
        do
        {
          v77 = v7;
          v78 = v63;
          v7 = v61;
          v63 += 16;
          v79 = *(unsigned __int8 *)(v77 + 280);
          v80 = *((unsigned __int8 *)v78 + 24);
          if (v79 < v80)
            goto LABEL_81;
          v64 = v63;
          if (v80 >= v79)
          {
            v108 = *(_DWORD *)(v77 + 264);
            v109 = *((_DWORD *)v78 + 2);
            if (v108 < v109)
              goto LABEL_81;
            v64 = v63;
            if (v109 >= v108)
            {
              v110 = *(_DWORD *)(v77 + 260);
              v111 = *((_DWORD *)v78 + 1);
              if (v110 < v111
                || (v64 = v63, v111 >= v110)
                && (*(_DWORD *)v7 < *(_DWORD *)v78
                 || (v64 = v63, *(_DWORD *)v78 >= *(_DWORD *)v7)
                 && ((v112 = *(_DWORD *)(v77 + 284), v113 = *((_DWORD *)v78 + 7), v112 < v113)
                  || (v64 = v63, v113 >= v112) && (v64 = v63, *(_DWORD *)(v77 + 268) < *((_DWORD *)v78 + 3)))))
              {
LABEL_81:
                v81 = v78[13];
                v63[12] = v78[12];
                v63[13] = v81;
                v82 = v78[15];
                v63[14] = v78[14];
                v63[15] = v82;
                v83 = v78[9];
                v63[8] = v78[8];
                v63[9] = v83;
                v84 = v78[11];
                v63[10] = v78[10];
                v63[11] = v84;
                v85 = v78[5];
                v63[4] = v78[4];
                v63[5] = v85;
                v86 = v78[7];
                v63[6] = v78[6];
                v63[7] = v86;
                v87 = v78[1];
                *v63 = *v78;
                v63[1] = v87;
                v88 = v78[3];
                v64 = a4;
                v63[2] = v78[2];
                v63[3] = v88;
                if (v78 != a4)
                {
                  v89 = v62;
                  while (1)
                  {
                    v98 = (_OWORD *)((char *)a4 + v89);
                    v99 = *(_DWORD *)((char *)a4 + v89 - 256);
                    v100 = *(unsigned __int8 *)(v77 + 280);
                    v101 = *((unsigned __int8 *)a4 + v89 - 232);
                    if (v100 >= v101)
                    {
                      if (v101 < v100)
                        goto LABEL_29;
                      v102 = *(_DWORD *)(v77 + 264);
                      v103 = *((_DWORD *)v98 - 62);
                      if (v102 >= v103)
                      {
                        if (v103 < v102)
                          goto LABEL_29;
                        v104 = *(_DWORD *)(v77 + 260);
                        v105 = *((_DWORD *)v98 - 63);
                        if (v104 >= v105)
                        {
                          if (v105 < v104)
                            goto LABEL_29;
                          if (*(_DWORD *)v7 >= v99)
                          {
                            if (v99 < *(_DWORD *)v7)
                            {
                              v64 = (_OWORD *)((char *)a4 + v89);
                              break;
                            }
                            v106 = *(_DWORD *)(v77 + 284);
                            v107 = *((_DWORD *)v98 - 57);
                            if (v106 >= v107 && (v107 < v106 || *(_DWORD *)(v77 + 268) >= *((_DWORD *)v98 - 61)))
                            {
LABEL_29:
                              v64 = v78;
                              break;
                            }
                          }
                        }
                      }
                    }
                    v78 -= 16;
                    v90 = *(_OWORD *)((char *)a4 + v89 - 48);
                    v98[12] = *(_OWORD *)((char *)a4 + v89 - 64);
                    v98[13] = v90;
                    v91 = *(_OWORD *)((char *)a4 + v89 - 16);
                    v98[14] = *(_OWORD *)((char *)a4 + v89 - 32);
                    v98[15] = v91;
                    v92 = *(_OWORD *)((char *)a4 + v89 - 112);
                    v98[8] = *(_OWORD *)((char *)a4 + v89 - 128);
                    v98[9] = v92;
                    v93 = *(_OWORD *)((char *)a4 + v89 - 80);
                    v98[10] = *(_OWORD *)((char *)a4 + v89 - 96);
                    v98[11] = v93;
                    v94 = *(_OWORD *)((char *)a4 + v89 - 176);
                    v98[4] = *(_OWORD *)((char *)a4 + v89 - 192);
                    v98[5] = v94;
                    v95 = *(_OWORD *)((char *)a4 + v89 - 144);
                    v98[6] = *(_OWORD *)((char *)a4 + v89 - 160);
                    v98[7] = v95;
                    v96 = *(_OWORD *)((char *)a4 + v89 - 240);
                    *v98 = *(_OWORD *)((char *)a4 + v89 - 256);
                    v98[1] = v96;
                    v97 = *(_OWORD *)((char *)a4 + v89 - 208);
                    v98[2] = *(_OWORD *)((char *)a4 + v89 - 224);
                    v98[3] = v97;
                    v89 -= 256;
                    if (!v89)
                    {
                      v64 = a4;
                      break;
                    }
                  }
                }
              }
            }
          }
          v65 = *(_OWORD *)v7;
          v66 = *(_OWORD *)(v7 + 16);
          v67 = *(_OWORD *)(v7 + 48);
          v64[2] = *(_OWORD *)(v7 + 32);
          v64[3] = v67;
          *v64 = v65;
          v64[1] = v66;
          v68 = *(_OWORD *)(v7 + 64);
          v69 = *(_OWORD *)(v7 + 80);
          v70 = *(_OWORD *)(v7 + 112);
          v64[6] = *(_OWORD *)(v7 + 96);
          v64[7] = v70;
          v64[4] = v68;
          v64[5] = v69;
          v71 = *(_OWORD *)(v7 + 128);
          v72 = *(_OWORD *)(v7 + 144);
          v73 = *(_OWORD *)(v7 + 176);
          v64[10] = *(_OWORD *)(v7 + 160);
          v64[11] = v73;
          v64[8] = v71;
          v64[9] = v72;
          v74 = *(_OWORD *)(v7 + 192);
          v75 = *(_OWORD *)(v7 + 208);
          v76 = *(_OWORD *)(v7 + 240);
          v64[14] = *(_OWORD *)(v7 + 224);
          v64[15] = v76;
          v64[12] = v74;
          v64[13] = v75;
          v61 = v7 + 256;
          v62 += 256;
        }
        while (v7 + 256 != a2);
      }
    }
  }
  return result;
}

char *sub_20E7ED3B8(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v7;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  char *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  char *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  char *v47;
  size_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char *v93;
  char *v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  BOOL v109;
  char v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  _OWORD *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _DWORD *v131;
  char *i;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  char *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unint64_t v156;
  _OWORD *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _DWORD *v170;
  _DWORD *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  unsigned int v184;
  unsigned int v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  char *v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  unint64_t v217;
  char *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  _DWORD *v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;

  if (a5)
  {
    v7 = a5;
    v10 = result;
    v235 = a7;
    v236 = a6;
    while (v7 > a7 && a4 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = a2[24];
      v14 = *(_DWORD *)a2;
      v13 = *((_DWORD *)a2 + 1);
      v15 = *((_DWORD *)a2 + 7);
      v16 = -a4;
      v17 = *((_DWORD *)a2 + 2);
      while (1)
      {
        v19 = &v10[v11];
        v20 = v10[v11 + 24];
        if (v12 < v20)
          break;
        if (v20 >= v12)
        {
          v21 = *((_DWORD *)v19 + 2);
          if (v17 < v21)
            break;
          if (v21 >= v17)
          {
            v22 = *((_DWORD *)v19 + 1);
            if (v13 < v22)
              break;
            if (v22 >= v13)
            {
              if (v14 < *(_DWORD *)v19)
                break;
              if (*(_DWORD *)v19 >= v14)
              {
                v23 = *((_DWORD *)v19 + 7);
                if (v15 < v23 || v23 >= v15 && *((_DWORD *)a2 + 3) < *((_DWORD *)v19 + 3))
                  break;
              }
            }
          }
        }
        v11 += 256;
        if (__CFADD__(v16++, 1))
          return result;
      }
      v24 = -v16;
      if (-v16 >= v7)
      {
        if (v16 == -1)
        {
          v204 = &v10[v11];
          v251 = *(_OWORD *)&v10[v11 + 32];
          v256 = *(_OWORD *)&v10[v11 + 48];
          v241 = *(_OWORD *)&v10[v11];
          v246 = *(_OWORD *)&v10[v11 + 16];
          v271 = *(_OWORD *)&v10[v11 + 96];
          v276 = *(_OWORD *)&v10[v11 + 112];
          v261 = *(_OWORD *)&v10[v11 + 64];
          v266 = *(_OWORD *)&v10[v11 + 80];
          v291 = *(_OWORD *)&v10[v11 + 160];
          v296 = *(_OWORD *)&v10[v11 + 176];
          v281 = *(_OWORD *)&v10[v11 + 128];
          v286 = *(_OWORD *)&v10[v11 + 144];
          v310 = *(_OWORD *)&v10[v11 + 224];
          v315 = *(_OWORD *)&v10[v11 + 240];
          v301 = *(_OWORD *)&v10[v11 + 192];
          v306 = *(_OWORD *)&v10[v11 + 208];
          v205 = *(_OWORD *)a2;
          v206 = *((_OWORD *)a2 + 1);
          v207 = *((_OWORD *)a2 + 3);
          *((_OWORD *)v204 + 2) = *((_OWORD *)a2 + 2);
          *((_OWORD *)v204 + 3) = v207;
          *(_OWORD *)v204 = v205;
          *((_OWORD *)v204 + 1) = v206;
          v208 = *((_OWORD *)a2 + 4);
          v209 = *((_OWORD *)a2 + 5);
          v210 = *((_OWORD *)a2 + 7);
          *((_OWORD *)v204 + 6) = *((_OWORD *)a2 + 6);
          *((_OWORD *)v204 + 7) = v210;
          *((_OWORD *)v204 + 4) = v208;
          *((_OWORD *)v204 + 5) = v209;
          v211 = *((_OWORD *)a2 + 8);
          v212 = *((_OWORD *)a2 + 9);
          v213 = *((_OWORD *)a2 + 11);
          *((_OWORD *)v204 + 10) = *((_OWORD *)a2 + 10);
          *((_OWORD *)v204 + 11) = v213;
          *((_OWORD *)v204 + 8) = v211;
          *((_OWORD *)v204 + 9) = v212;
          v214 = *((_OWORD *)a2 + 12);
          v215 = *((_OWORD *)a2 + 13);
          v216 = *((_OWORD *)a2 + 15);
          *((_OWORD *)v204 + 14) = *((_OWORD *)a2 + 14);
          *((_OWORD *)v204 + 15) = v216;
          *((_OWORD *)v204 + 12) = v214;
          *((_OWORD *)v204 + 13) = v215;
          *((_OWORD *)a2 + 12) = v301;
          *((_OWORD *)a2 + 13) = v306;
          *((_OWORD *)a2 + 14) = v310;
          *((_OWORD *)a2 + 15) = v315;
          *((_OWORD *)a2 + 8) = v281;
          *((_OWORD *)a2 + 9) = v286;
          *((_OWORD *)a2 + 10) = v291;
          *((_OWORD *)a2 + 11) = v296;
          *((_OWORD *)a2 + 4) = v261;
          *((_OWORD *)a2 + 5) = v266;
          *((_OWORD *)a2 + 6) = v271;
          *((_OWORD *)a2 + 7) = v276;
          *(_OWORD *)a2 = v241;
          *((_OWORD *)a2 + 1) = v246;
          *((_OWORD *)a2 + 2) = v251;
          *((_OWORD *)a2 + 3) = v256;
          return result;
        }
        if (v16 > 0)
          v24 = 1 - v16;
        v29 = v24 >> 1;
        v28 = &v10[256 * (v24 >> 1) + v11];
        if (a2 == a3)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          v52 = (a3 - a2) >> 8;
          v53 = v28[24];
          v55 = *(_DWORD *)v28;
          v54 = *((_DWORD *)v28 + 1);
          v56 = *((_DWORD *)v28 + 7);
          v57 = *((_DWORD *)v28 + 2);
          do
          {
            v58 = v52 >> 1;
            v59 = (v52 >> 1) + v26;
            v60 = &a2[256 * v59];
            v61 = v60[24];
            if (v61 < v53
              || v53 >= v61
              && ((v62 = *((_DWORD *)v60 + 2), v62 < v57)
               || v57 >= v62
               && ((v63 = *((_DWORD *)v60 + 1), v63 < v54)
                || v54 >= v63
                && (*(_DWORD *)v60 < v55
                 || v55 >= *(_DWORD *)v60
                 && ((v64 = *((_DWORD *)v60 + 7), v64 < v56) || v56 >= v64
                                                             && *((_DWORD *)v60 + 3) < *((_DWORD *)v28 + 3))))))
            {
              v26 = v59 + 1;
              v58 = v52 + ~v58;
            }
            v52 = v58;
          }
          while (v58);
        }
        v30 = v26 << 8 >> 8;
        v27 = v28;
        v31 = &a2[256 * v26];
        if (v28 != a2)
        {
LABEL_49:
          v32 = v27;
          if (v26)
          {
            v47 = v28 + 256;
            if (v28 + 256 == a2)
            {
              v248 = *((_OWORD *)v28 + 2);
              v253 = *((_OWORD *)v28 + 3);
              v238 = *(_OWORD *)v28;
              v243 = *((_OWORD *)v28 + 1);
              v268 = *((_OWORD *)v28 + 6);
              v273 = *((_OWORD *)v28 + 7);
              v258 = *((_OWORD *)v28 + 4);
              v263 = *((_OWORD *)v28 + 5);
              v288 = *((_OWORD *)v28 + 10);
              v293 = *((_OWORD *)v28 + 11);
              v278 = *((_OWORD *)v28 + 8);
              v283 = *((_OWORD *)v28 + 9);
              v308 = *((_OWORD *)v28 + 14);
              v312 = *((_OWORD *)v28 + 15);
              v298 = *((_OWORD *)v28 + 12);
              v303 = *((_OWORD *)v28 + 13);
              v65 = v31 - a2;
              v66 = a3;
              v232 = v30;
              v234 = v27;
              v67 = v29;
              memmove(v28, a2, v31 - a2);
              v29 = v67;
              v30 = v232;
              v27 = v234;
              a7 = v235;
              a6 = v236;
              a3 = v66;
              v32 = &v28[v65];
              *((_OWORD *)v32 + 2) = v248;
              *((_OWORD *)v32 + 3) = v253;
              *(_OWORD *)v32 = v238;
              *((_OWORD *)v32 + 1) = v243;
              *((_OWORD *)v32 + 6) = v268;
              *((_OWORD *)v32 + 7) = v273;
              *((_OWORD *)v32 + 4) = v258;
              *((_OWORD *)v32 + 5) = v263;
              *((_OWORD *)v32 + 10) = v288;
              *((_OWORD *)v32 + 11) = v293;
              *((_OWORD *)v32 + 8) = v278;
              *((_OWORD *)v32 + 9) = v283;
              *((_OWORD *)v32 + 14) = v308;
              *((_OWORD *)v32 + 15) = v312;
              *((_OWORD *)v32 + 12) = v298;
              *((_OWORD *)v32 + 13) = v303;
            }
            else if (v26 == 1)
            {
              v297 = *((_OWORD *)v31 - 4);
              v302 = *((_OWORD *)v31 - 3);
              v307 = *((_OWORD *)v31 - 2);
              v311 = *((_OWORD *)v31 - 1);
              v277 = *((_OWORD *)v31 - 8);
              v282 = *((_OWORD *)v31 - 7);
              v287 = *((_OWORD *)v31 - 6);
              v292 = *((_OWORD *)v31 - 5);
              v257 = *((_OWORD *)v31 - 12);
              v262 = *((_OWORD *)v31 - 11);
              v267 = *((_OWORD *)v31 - 10);
              v272 = *((_OWORD *)v31 - 9);
              v237 = *((_OWORD *)v31 - 16);
              v242 = *((_OWORD *)v31 - 15);
              v48 = v31 - 256 - v27;
              v32 = v27 + 256;
              v247 = *((_OWORD *)v31 - 14);
              v252 = *((_OWORD *)v31 - 13);
              if (v31 - 256 != v28)
              {
                v49 = v27 + 256;
                v50 = a3;
                v231 = v30;
                v233 = v27;
                v51 = v29;
                memmove(v49, v28, v48);
                v29 = v51;
                v30 = v231;
                v27 = v233;
                a7 = v235;
                a6 = v236;
                a3 = v50;
              }
              *((_OWORD *)v28 + 2) = v247;
              *((_OWORD *)v28 + 3) = v252;
              *(_OWORD *)v28 = v237;
              *((_OWORD *)v28 + 1) = v242;
              *((_OWORD *)v28 + 6) = v267;
              *((_OWORD *)v28 + 7) = v272;
              *((_OWORD *)v28 + 4) = v257;
              *((_OWORD *)v28 + 5) = v262;
              *((_OWORD *)v28 + 10) = v287;
              *((_OWORD *)v28 + 11) = v292;
              *((_OWORD *)v28 + 8) = v277;
              *((_OWORD *)v28 + 9) = v282;
              *((_OWORD *)v28 + 14) = v307;
              *((_OWORD *)v28 + 15) = v311;
              *((_OWORD *)v28 + 12) = v297;
              *((_OWORD *)v28 + 13) = v302;
            }
            else
            {
              v68 = (a2 - v27) >> 8;
              v69 = (v31 - a2) >> 8;
              if (v68 == v69)
              {
                v70 = (v26 << 8) - 256;
                v71 = a2;
                do
                {
                  v249 = *((_OWORD *)v47 - 14);
                  v254 = *((_OWORD *)v47 - 13);
                  v239 = *((_OWORD *)v47 - 16);
                  v244 = *((_OWORD *)v47 - 15);
                  v269 = *((_OWORD *)v47 - 10);
                  v274 = *((_OWORD *)v47 - 9);
                  v259 = *((_OWORD *)v47 - 12);
                  v264 = *((_OWORD *)v47 - 11);
                  v289 = *((_OWORD *)v47 - 6);
                  v294 = *((_OWORD *)v47 - 5);
                  v279 = *((_OWORD *)v47 - 8);
                  v284 = *((_OWORD *)v47 - 7);
                  v309 = *((_OWORD *)v47 - 2);
                  v313 = *((_OWORD *)v47 - 1);
                  v299 = *((_OWORD *)v47 - 4);
                  v304 = *((_OWORD *)v47 - 3);
                  v72 = *(_OWORD *)v71;
                  v73 = *((_OWORD *)v71 + 1);
                  v74 = *((_OWORD *)v71 + 3);
                  *((_OWORD *)v47 - 14) = *((_OWORD *)v71 + 2);
                  *((_OWORD *)v47 - 13) = v74;
                  *((_OWORD *)v47 - 16) = v72;
                  *((_OWORD *)v47 - 15) = v73;
                  v75 = *((_OWORD *)v71 + 4);
                  v76 = *((_OWORD *)v71 + 5);
                  v77 = *((_OWORD *)v71 + 7);
                  *((_OWORD *)v47 - 10) = *((_OWORD *)v71 + 6);
                  *((_OWORD *)v47 - 9) = v77;
                  *((_OWORD *)v47 - 12) = v75;
                  *((_OWORD *)v47 - 11) = v76;
                  v78 = *((_OWORD *)v71 + 8);
                  v79 = *((_OWORD *)v71 + 9);
                  v80 = *((_OWORD *)v71 + 11);
                  *((_OWORD *)v47 - 6) = *((_OWORD *)v71 + 10);
                  *((_OWORD *)v47 - 5) = v80;
                  *((_OWORD *)v47 - 8) = v78;
                  *((_OWORD *)v47 - 7) = v79;
                  v81 = *((_OWORD *)v71 + 12);
                  v82 = *((_OWORD *)v71 + 13);
                  v83 = *((_OWORD *)v71 + 15);
                  *((_OWORD *)v47 - 2) = *((_OWORD *)v71 + 14);
                  *((_OWORD *)v47 - 1) = v83;
                  *((_OWORD *)v47 - 4) = v81;
                  *((_OWORD *)v47 - 3) = v82;
                  *((_OWORD *)v71 + 12) = v299;
                  *((_OWORD *)v71 + 13) = v304;
                  *((_OWORD *)v71 + 14) = v309;
                  *((_OWORD *)v71 + 15) = v313;
                  *((_OWORD *)v71 + 8) = v279;
                  *((_OWORD *)v71 + 9) = v284;
                  *((_OWORD *)v71 + 10) = v289;
                  *((_OWORD *)v71 + 11) = v294;
                  *((_OWORD *)v71 + 4) = v259;
                  *((_OWORD *)v71 + 5) = v264;
                  *((_OWORD *)v71 + 6) = v269;
                  *((_OWORD *)v71 + 7) = v274;
                  *(_OWORD *)v71 = v239;
                  *((_OWORD *)v71 + 1) = v244;
                  *((_OWORD *)v71 + 2) = v249;
                  *((_OWORD *)v71 + 3) = v254;
                  if (v47 == a2)
                    break;
                  v71 += 256;
                  v47 += 256;
                  v84 = v70;
                  v70 -= 256;
                }
                while (v84);
                v32 = a2;
              }
              else
              {
                v85 = (v31 - a2) >> 8;
                v86 = (a2 - v27) >> 8;
                do
                {
                  v87 = v86;
                  v86 = v85;
                  v85 = v87 % v85;
                }
                while (v85);
                if (v86)
                {
                  v88 = &v28[256 * v86];
                  do
                  {
                    v250 = *((_OWORD *)v88 - 14);
                    v255 = *((_OWORD *)v88 - 13);
                    v240 = *((_OWORD *)v88 - 16);
                    v245 = *((_OWORD *)v88 - 15);
                    v270 = *((_OWORD *)v88 - 10);
                    v275 = *((_OWORD *)v88 - 9);
                    v260 = *((_OWORD *)v88 - 12);
                    v265 = *((_OWORD *)v88 - 11);
                    v290 = *((_OWORD *)v88 - 6);
                    v295 = *((_OWORD *)v88 - 5);
                    v280 = *((_OWORD *)v88 - 8);
                    v285 = *((_OWORD *)v88 - 7);
                    v89 = *((_OWORD *)v88 - 4);
                    v90 = *((_OWORD *)v88 - 3);
                    v91 = *((_OWORD *)v88 - 2);
                    v92 = *((_OWORD *)v88 - 1);
                    v88 -= 256;
                    v314 = v92;
                    v300 = v89;
                    v305 = v90;
                    v93 = &v88[256 * v68];
                    v94 = v88;
                    do
                    {
                      v95 = v93;
                      v96 = *(_OWORD *)v93;
                      v97 = *((_OWORD *)v93 + 1);
                      v98 = *((_OWORD *)v93 + 3);
                      *((_OWORD *)v94 + 2) = *((_OWORD *)v93 + 2);
                      *((_OWORD *)v94 + 3) = v98;
                      *(_OWORD *)v94 = v96;
                      *((_OWORD *)v94 + 1) = v97;
                      v99 = *((_OWORD *)v93 + 4);
                      v100 = *((_OWORD *)v93 + 5);
                      v101 = *((_OWORD *)v93 + 7);
                      *((_OWORD *)v94 + 6) = *((_OWORD *)v93 + 6);
                      *((_OWORD *)v94 + 7) = v101;
                      *((_OWORD *)v94 + 4) = v99;
                      *((_OWORD *)v94 + 5) = v100;
                      v102 = *((_OWORD *)v93 + 8);
                      v103 = *((_OWORD *)v93 + 9);
                      v104 = *((_OWORD *)v93 + 11);
                      *((_OWORD *)v94 + 10) = *((_OWORD *)v93 + 10);
                      *((_OWORD *)v94 + 11) = v104;
                      *((_OWORD *)v94 + 8) = v102;
                      *((_OWORD *)v94 + 9) = v103;
                      v105 = *((_OWORD *)v93 + 12);
                      v106 = *((_OWORD *)v93 + 13);
                      v107 = *((_OWORD *)v93 + 15);
                      *((_OWORD *)v94 + 14) = *((_OWORD *)v93 + 14);
                      *((_OWORD *)v94 + 15) = v107;
                      *((_OWORD *)v94 + 12) = v105;
                      *((_OWORD *)v94 + 13) = v106;
                      v108 = (v31 - v93) >> 8;
                      v93 += 256 * v68;
                      v109 = __OFSUB__(v68, v108);
                      v111 = v68 - v108;
                      v110 = (v111 < 0) ^ v109;
                      v112 = &v28[256 * v111];
                      if (!v110)
                        v93 = v112;
                      v94 = v95;
                    }
                    while (v93 != v88);
                    *((_OWORD *)v95 + 2) = v250;
                    *((_OWORD *)v95 + 3) = v255;
                    *(_OWORD *)v95 = v240;
                    *((_OWORD *)v95 + 1) = v245;
                    *((_OWORD *)v95 + 6) = v270;
                    *((_OWORD *)v95 + 7) = v275;
                    *((_OWORD *)v95 + 4) = v260;
                    *((_OWORD *)v95 + 5) = v265;
                    *((_OWORD *)v95 + 10) = v290;
                    *((_OWORD *)v95 + 11) = v295;
                    *((_OWORD *)v95 + 8) = v280;
                    *((_OWORD *)v95 + 9) = v285;
                    *((_OWORD *)v95 + 14) = v91;
                    *((_OWORD *)v95 + 15) = v314;
                    *((_OWORD *)v95 + 12) = v300;
                    *((_OWORD *)v95 + 13) = v305;
                  }
                  while (v88 != v28);
                }
                v32 = &v28[256 * v69];
              }
            }
          }
          goto LABEL_86;
        }
      }
      else
      {
        if (v7 >= 0)
          v25 = v7;
        else
          v25 = v7 + 1;
        v26 = v25 >> 1;
        if (a2 - v10 == v11)
        {
          v27 = &v10[v11];
          v28 = &v10[v11];
        }
        else
        {
          v33 = &a2[256 * v26];
          v34 = (a2 - v10 - v11) >> 8;
          v35 = v33[24];
          v37 = *(_DWORD *)v33;
          v36 = *((_DWORD *)v33 + 1);
          v38 = *((_DWORD *)v33 + 7);
          v39 = *((_DWORD *)v33 + 2);
          v40 = *((_DWORD *)v33 + 3);
          v28 = &v10[v11];
          do
          {
            v41 = v34 >> 1;
            v42 = &v28[256 * (v34 >> 1)];
            v43 = v42[24];
            if (v35 >= v43)
            {
              if (v43 < v35
                || (v44 = *((_DWORD *)v42 + 2), v39 >= v44)
                && (v44 < v39
                 || (v45 = *((_DWORD *)v42 + 1), v36 >= v45)
                 && (v45 < v36
                  || v37 >= *(_DWORD *)v42
                  && (*(_DWORD *)v42 < v37
                   || (v46 = *((_DWORD *)v42 + 7), v38 >= v46) && (v46 < v38 || v40 >= *((_DWORD *)v42 + 3))))))
              {
                v28 = v42 + 256;
                v41 = v34 + ~v41;
              }
            }
            v34 = v41;
          }
          while (v41);
          v27 = v28;
        }
        v29 = (v27 - v10 - v11) >> 8;
        v30 = v26;
        v31 = &a2[256 * v26];
        if (v28 != a2)
          goto LABEL_49;
      }
      v32 = v31;
LABEL_86:
      a4 = -v29 - v16;
      v113 = v7 - v30;
      if (v29 + v30 >= v7 - (v29 + v30) - v16)
      {
        a4 = v29;
        v116 = v30;
        result = (char *)sub_20E7ED3B8(v32, v31, a3, -v29 - v16, v7 - v30, a6, a7);
        a3 = v32;
        v7 = v116;
        v10 += v11;
        a2 = v27;
        a7 = v235;
        a6 = v236;
        if (!v116)
          return result;
      }
      else
      {
        v114 = v27;
        v115 = a3;
        result = (char *)sub_20E7ED3B8(&v10[v11], v114, v32, v29, v30, a6, a7);
        a3 = v115;
        v7 = v113;
        v10 = v32;
        a2 = v31;
        a7 = v235;
        a6 = v236;
        if (!v113)
          return result;
      }
    }
    if (a4 <= v7)
    {
      if (v10 != a2)
      {
        v156 = 0;
        do
        {
          v157 = &a6[v156 / 4];
          v158 = *(_OWORD *)&v10[v156];
          v159 = *(_OWORD *)&v10[v156 + 16];
          v160 = *(_OWORD *)&v10[v156 + 48];
          v157[2] = *(_OWORD *)&v10[v156 + 32];
          v157[3] = v160;
          *v157 = v158;
          v157[1] = v159;
          v161 = *(_OWORD *)&v10[v156 + 64];
          v162 = *(_OWORD *)&v10[v156 + 80];
          v163 = *(_OWORD *)&v10[v156 + 112];
          v157[6] = *(_OWORD *)&v10[v156 + 96];
          v157[7] = v163;
          v157[4] = v161;
          v157[5] = v162;
          v164 = *(_OWORD *)&v10[v156 + 128];
          v165 = *(_OWORD *)&v10[v156 + 144];
          v166 = *(_OWORD *)&v10[v156 + 176];
          v157[10] = *(_OWORD *)&v10[v156 + 160];
          v157[11] = v166;
          v157[8] = v164;
          v157[9] = v165;
          v167 = *(_OWORD *)&v10[v156 + 192];
          v168 = *(_OWORD *)&v10[v156 + 208];
          v169 = *(_OWORD *)&v10[v156 + 240];
          v157[14] = *(_OWORD *)&v10[v156 + 224];
          v157[15] = v169;
          v157[12] = v167;
          v157[13] = v168;
          v156 += 256;
        }
        while (&v10[v156] != a2);
        if (v156)
        {
          v170 = &a6[v156 / 4];
          v171 = a6;
          do
          {
            while (1)
            {
              if (a2 == a3)
                return (char *)memmove(v10, v171, (char *)a6 - (char *)v171 + v156);
              v184 = a2[24];
              v185 = *((unsigned __int8 *)v171 + 24);
              if (v184 < v185)
                break;
              if (v185 >= v184)
              {
                v198 = *((_DWORD *)a2 + 2);
                v199 = v171[2];
                if (v198 < v199)
                  break;
                if (v199 >= v198)
                {
                  v200 = *((_DWORD *)a2 + 1);
                  v201 = v171[1];
                  if (v200 < v201)
                    break;
                  if (v201 >= v200)
                  {
                    if (*(_DWORD *)a2 < *v171)
                      break;
                    if (*v171 >= *(_DWORD *)a2)
                    {
                      v202 = *((_DWORD *)a2 + 7);
                      v203 = v171[7];
                      if (v202 < v203 || v203 >= v202 && *((_DWORD *)a2 + 3) < v171[3])
                        break;
                    }
                  }
                }
              }
              v186 = *(_OWORD *)v171;
              v187 = *((_OWORD *)v171 + 1);
              v188 = *((_OWORD *)v171 + 3);
              *((_OWORD *)v10 + 2) = *((_OWORD *)v171 + 2);
              *((_OWORD *)v10 + 3) = v188;
              *(_OWORD *)v10 = v186;
              *((_OWORD *)v10 + 1) = v187;
              v189 = *((_OWORD *)v171 + 4);
              v190 = *((_OWORD *)v171 + 5);
              v191 = *((_OWORD *)v171 + 7);
              *((_OWORD *)v10 + 6) = *((_OWORD *)v171 + 6);
              *((_OWORD *)v10 + 7) = v191;
              *((_OWORD *)v10 + 4) = v189;
              *((_OWORD *)v10 + 5) = v190;
              v192 = *((_OWORD *)v171 + 8);
              v193 = *((_OWORD *)v171 + 9);
              v194 = *((_OWORD *)v171 + 11);
              *((_OWORD *)v10 + 10) = *((_OWORD *)v171 + 10);
              *((_OWORD *)v10 + 11) = v194;
              *((_OWORD *)v10 + 8) = v192;
              *((_OWORD *)v10 + 9) = v193;
              v195 = *((_OWORD *)v171 + 12);
              v196 = *((_OWORD *)v171 + 13);
              v197 = *((_OWORD *)v171 + 15);
              *((_OWORD *)v10 + 14) = *((_OWORD *)v171 + 14);
              *((_OWORD *)v10 + 15) = v197;
              *((_OWORD *)v10 + 12) = v195;
              *((_OWORD *)v10 + 13) = v196;
              v171 += 64;
              v10 += 256;
              if (v170 == v171)
                return result;
            }
            v172 = *(_OWORD *)a2;
            v173 = *((_OWORD *)a2 + 1);
            v174 = *((_OWORD *)a2 + 3);
            *((_OWORD *)v10 + 2) = *((_OWORD *)a2 + 2);
            *((_OWORD *)v10 + 3) = v174;
            *(_OWORD *)v10 = v172;
            *((_OWORD *)v10 + 1) = v173;
            v175 = *((_OWORD *)a2 + 4);
            v176 = *((_OWORD *)a2 + 5);
            v177 = *((_OWORD *)a2 + 7);
            *((_OWORD *)v10 + 6) = *((_OWORD *)a2 + 6);
            *((_OWORD *)v10 + 7) = v177;
            *((_OWORD *)v10 + 4) = v175;
            *((_OWORD *)v10 + 5) = v176;
            v178 = *((_OWORD *)a2 + 8);
            v179 = *((_OWORD *)a2 + 9);
            v180 = *((_OWORD *)a2 + 11);
            *((_OWORD *)v10 + 10) = *((_OWORD *)a2 + 10);
            *((_OWORD *)v10 + 11) = v180;
            *((_OWORD *)v10 + 8) = v178;
            *((_OWORD *)v10 + 9) = v179;
            v181 = *((_OWORD *)a2 + 12);
            v182 = *((_OWORD *)a2 + 13);
            v183 = *((_OWORD *)a2 + 15);
            *((_OWORD *)v10 + 14) = *((_OWORD *)a2 + 14);
            *((_OWORD *)v10 + 15) = v183;
            *((_OWORD *)v10 + 12) = v181;
            *((_OWORD *)v10 + 13) = v182;
            a2 += 256;
            v10 += 256;
          }
          while (v170 != v171);
        }
      }
    }
    else if (a3 != a2)
    {
      v117 = 0;
      do
      {
        v118 = &a6[v117 / 4];
        v119 = *(_OWORD *)&a2[v117];
        v120 = *(_OWORD *)&a2[v117 + 16];
        v121 = *(_OWORD *)&a2[v117 + 48];
        v118[2] = *(_OWORD *)&a2[v117 + 32];
        v118[3] = v121;
        *v118 = v119;
        v118[1] = v120;
        v122 = *(_OWORD *)&a2[v117 + 64];
        v123 = *(_OWORD *)&a2[v117 + 80];
        v124 = *(_OWORD *)&a2[v117 + 112];
        v118[6] = *(_OWORD *)&a2[v117 + 96];
        v118[7] = v124;
        v118[4] = v122;
        v118[5] = v123;
        v125 = *(_OWORD *)&a2[v117 + 128];
        v126 = *(_OWORD *)&a2[v117 + 144];
        v127 = *(_OWORD *)&a2[v117 + 176];
        v118[10] = *(_OWORD *)&a2[v117 + 160];
        v118[11] = v127;
        v118[8] = v125;
        v118[9] = v126;
        v128 = *(_OWORD *)&a2[v117 + 192];
        v129 = *(_OWORD *)&a2[v117 + 208];
        v130 = *(_OWORD *)&a2[v117 + 240];
        v118[14] = *(_OWORD *)&a2[v117 + 224];
        v118[15] = v130;
        v118[12] = v128;
        v118[13] = v129;
        v117 += 256;
      }
      while (&a2[v117] != a3);
      if (v117)
      {
        v131 = &a6[v117 / 4];
        for (i = a3 - 256; ; i -= 256)
        {
          if (a2 == v10)
          {
            v217 = 0;
            do
            {
              v218 = &i[v217 * 4];
              v219 = *(_OWORD *)&v131[v217 - 64];
              v220 = *(_OWORD *)&v131[v217 - 60];
              v221 = *(_OWORD *)&v131[v217 - 52];
              *((_OWORD *)v218 + 2) = *(_OWORD *)&v131[v217 - 56];
              *((_OWORD *)v218 + 3) = v221;
              *(_OWORD *)v218 = v219;
              *((_OWORD *)v218 + 1) = v220;
              v222 = *(_OWORD *)&v131[v217 - 48];
              v223 = *(_OWORD *)&v131[v217 - 44];
              v224 = *(_OWORD *)&v131[v217 - 36];
              *((_OWORD *)v218 + 6) = *(_OWORD *)&v131[v217 - 40];
              *((_OWORD *)v218 + 7) = v224;
              *((_OWORD *)v218 + 4) = v222;
              *((_OWORD *)v218 + 5) = v223;
              v225 = *(_OWORD *)&v131[v217 - 32];
              v226 = *(_OWORD *)&v131[v217 - 28];
              v227 = *(_OWORD *)&v131[v217 - 20];
              *((_OWORD *)v218 + 10) = *(_OWORD *)&v131[v217 - 24];
              *((_OWORD *)v218 + 11) = v227;
              *((_OWORD *)v218 + 8) = v225;
              *((_OWORD *)v218 + 9) = v226;
              v228 = *(_OWORD *)&v131[v217 - 16];
              v229 = *(_OWORD *)&v131[v217 - 12];
              v230 = *(_OWORD *)&v131[v217 - 4];
              *((_OWORD *)v218 + 14) = *(_OWORD *)&v131[v217 - 8];
              *((_OWORD *)v218 + 15) = v230;
              *((_OWORD *)v218 + 12) = v228;
              *((_OWORD *)v218 + 13) = v229;
              v217 -= 64;
            }
            while (&v131[v217] != a6);
            return result;
          }
          v145 = a2 - 256;
          v146 = *((_DWORD *)a2 - 64);
          v147 = *(v131 - 64);
          v148 = *((unsigned __int8 *)v131 - 232);
          v149 = *(a2 - 232);
          if (v148 >= v149)
          {
            if (v149 < v148)
              goto LABEL_102;
            v150 = *(v131 - 62);
            v151 = *((_DWORD *)a2 - 62);
            if (v150 >= v151)
            {
              if (v151 < v150)
                goto LABEL_102;
              v152 = *(v131 - 63);
              v153 = *((_DWORD *)a2 - 63);
              if (v152 >= v153)
              {
                if (v153 < v152)
                  goto LABEL_102;
                if (v147 >= v146)
                {
                  if (v146 < v147)
                    goto LABEL_102;
                  v154 = *(v131 - 57);
                  v155 = *((_DWORD *)a2 - 57);
                  if (v154 >= v155)
                    break;
                }
              }
            }
          }
          result = a2 - 256;
LABEL_98:
          v133 = *(_OWORD *)v145;
          v134 = *((_OWORD *)v145 + 1);
          v135 = *((_OWORD *)v145 + 3);
          *((_OWORD *)i + 2) = *((_OWORD *)v145 + 2);
          *((_OWORD *)i + 3) = v135;
          *(_OWORD *)i = v133;
          *((_OWORD *)i + 1) = v134;
          v136 = *((_OWORD *)v145 + 4);
          v137 = *((_OWORD *)v145 + 5);
          v138 = *((_OWORD *)v145 + 7);
          *((_OWORD *)i + 6) = *((_OWORD *)v145 + 6);
          *((_OWORD *)i + 7) = v138;
          *((_OWORD *)i + 4) = v136;
          *((_OWORD *)i + 5) = v137;
          v139 = *((_OWORD *)v145 + 8);
          v140 = *((_OWORD *)v145 + 9);
          v141 = *((_OWORD *)v145 + 11);
          *((_OWORD *)i + 10) = *((_OWORD *)v145 + 10);
          *((_OWORD *)i + 11) = v141;
          *((_OWORD *)i + 8) = v139;
          *((_OWORD *)i + 9) = v140;
          v142 = *((_OWORD *)v145 + 12);
          v143 = *((_OWORD *)v145 + 13);
          v144 = *((_OWORD *)v145 + 15);
          *((_OWORD *)i + 14) = *((_OWORD *)v145 + 14);
          *((_OWORD *)i + 15) = v144;
          *((_OWORD *)i + 12) = v142;
          *((_OWORD *)i + 13) = v143;
          a2 = result;
          if (v131 == a6)
            return result;
        }
        if (v155 >= v154)
        {
          result = a2 - 256;
          if (*(v131 - 61) < *((_DWORD *)a2 - 61))
            goto LABEL_98;
        }
LABEL_102:
        v145 = (char *)(v131 - 64);
        result = a2;
        v131 -= 64;
        goto LABEL_98;
      }
    }
  }
  return result;
}

uint64_t *sub_20E7EDFD4(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_20E7A8ACC(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20E7EE2C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7EE2D4(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int32x2_t v16;
  int64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t __y;
  long double v33;

  *(_QWORD *)a1 = &off_24C9A9050;
  *(_OWORD *)(a1 + 8) = xmmword_20E80E520;
  v4 = (_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_20E80F3E0;
  *(_QWORD *)(a1 + 48) = 16;
  *(_WORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 72) = 0xFFFFF;
  *(_OWORD *)(a1 + 80) = 0u;
  v5 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 200) = 0u;
  v6 = (_QWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 137) = 0u;
  v7 = (_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)(a1 + 488) = a1 + 496;
  *(_QWORD *)(a1 + 496) = 0;
  bzero((void *)(a1 + 1216), 0x1000uLL);
  *v4 = *(_OWORD *)a2;
  v8 = *(_OWORD *)(a2 + 16);
  v9 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  if (v4 == (_OWORD *)a2)
  {
    v13 = *(_OWORD *)(a2 + 144);
    v14 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 172);
    *(_OWORD *)(a1 + 168) = v14;
    *(_OWORD *)(a1 + 152) = v13;
  }
  else
  {
    sub_20E7E7298(v5, *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
    sub_20E7E3654((_QWORD *)(a1 + 104), *(char **)(a2 + 96), *(char **)(a2 + 104), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
    sub_20E7E3654((_QWORD *)(a1 + 128), *(char **)(a2 + 120), *(char **)(a2 + 128), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3));
    v11 = *(_OWORD *)(a2 + 144);
    v12 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 172);
    *(_OWORD *)(a1 + 168) = v12;
    *(_OWORD *)(a1 + 152) = v11;
    sub_20E7E3654(v6, *(char **)(a2 + 192), *(char **)(a2 + 200), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3));
  }
  *(_OWORD *)(a1 + 512) = xmmword_20E80FEF8;
  *(_OWORD *)(a1 + 528) = unk_20E80FF08;
  *(_OWORD *)(a1 + 544) = xmmword_20E80FF18;
  *(_OWORD *)(a1 + 560) = xmmword_20E80F7F0;
  *(_OWORD *)(a1 + 576) = xmmword_20E80F800;
  *(int64x2_t *)(a1 + 592) = vdupq_n_s64(0xBFE6A00000000000);
  *(int64x2_t *)(a1 + 608) = vdupq_n_s64(0x3FE6A00000000000uLL);
  *(_OWORD *)(a1 + 624) = xmmword_20E80F810;
  *(_OWORD *)(a1 + 640) = xmmword_20E80F820;
  *(_OWORD *)(a1 + 656) = xmmword_20E80FF28;
  *(_OWORD *)(a1 + 672) = unk_20E80FF38;
  *(_OWORD *)(a1 + 688) = xmmword_20E80FF48;
  sub_20E7EE624(a1);
  v15 = 0;
  v16 = (int32x2_t)0x100000000;
  v30 = (float64x2_t)vdupq_n_s64(0x40B0000000000000uLL);
  v31 = (float64x2_t)vdupq_n_s64(0x3FB0000000000000uLL);
  v28 = (float64x2_t)vdupq_n_s64(0x40C0000000000000uLL);
  v29 = (float64x2_t)vdupq_n_s64(0x3F30000000000000uLL);
  __asm { FMOV            V0.2D, #0.5 }
  v26 = _Q0;
  v27 = (float64x2_t)vdupq_n_s64(0x3F20000000000000uLL);
  do
  {
    v22.i64[0] = v16.i32[0];
    v22.i64[1] = v16.i32[1];
    __y = vmulq_f64(vcvtq_f64_s64(v22), v31);
    v33 = pow(1.41421356, __y.f64[1]);
    v23.f64[0] = pow(1.41421356, __y.f64[0]);
    v23.f64[1] = v33;
    v24 = (float64x2_t *)(a1 + v15);
    v24[44] = vmulq_f64(vrndmq_f64(vmlaq_f64(v26, v30, v23)), v29);
    v24[60] = vmulq_f64(vrndmq_f64(vmlaq_f64(v26, v28, v23)), v27);
    v16 = vadd_s32(v16, (int32x2_t)0x200000002);
    v15 += 16;
  }
  while (v15 != 256);
  sub_20E7EF070(v7, *(int *)(a1 + 24) - 2);
  return a1;
}

void sub_20E7EE5F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  _QWORD **v4;

  sub_20E7938D0(v2 + 488, *v4);
  sub_20E7D5084(v3);
  sub_20E7E6310(v1);
  _Unwind_Resume(a1);
}

double sub_20E7EE624(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;

  *(_QWORD *)&v1 = 0x100000001;
  *((_QWORD *)&v1 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 3440) = xmmword_20E80F8D0;
  *(_OWORD *)(a1 + 1384) = v1;
  *(_OWORD *)(a1 + 1400) = xmmword_20E80F8E0;
  *(_OWORD *)(a1 + 3456) = xmmword_20E80F8F0;
  *(_OWORD *)(a1 + 3472) = xmmword_20E80F910;
  *(_OWORD *)(a1 + 1416) = xmmword_20E80F900;
  *(_OWORD *)(a1 + 1432) = xmmword_20E80F920;
  *(_OWORD *)(a1 + 3488) = xmmword_20E80F930;
  *(_QWORD *)&v1 = 0x700000007;
  *((_QWORD *)&v1 + 1) = 0x700000007;
  *(_OWORD *)(a1 + 3504) = xmmword_20E80F940;
  *(_QWORD *)&v2 = 0x800000008;
  *((_QWORD *)&v2 + 1) = 0x800000008;
  *(_OWORD *)(a1 + 1448) = v1;
  *(_OWORD *)(a1 + 1464) = v2;
  *(_OWORD *)(a1 + 3520) = xmmword_20E80F950;
  *(_OWORD *)(a1 + 3536) = xmmword_20E80F970;
  *(_OWORD *)(a1 + 1480) = xmmword_20E80F960;
  *(_OWORD *)(a1 + 1496) = xmmword_20E80F980;
  *(_OWORD *)(a1 + 3552) = xmmword_20E80F990;
  *(_OWORD *)(a1 + 3568) = xmmword_20E80F9B0;
  *(_OWORD *)(a1 + 1512) = xmmword_20E80F9A0;
  *(_OWORD *)(a1 + 1528) = xmmword_20E80F9C0;
  *(_OWORD *)(a1 + 3584) = xmmword_20E80F9D0;
  *(_OWORD *)(a1 + 3600) = xmmword_20E80F9F0;
  *(_OWORD *)(a1 + 1544) = xmmword_20E80F9E0;
  *(_OWORD *)(a1 + 1560) = xmmword_20E80FA00;
  *(_OWORD *)(a1 + 1576) = xmmword_20E80FA10;
  *(_OWORD *)(a1 + 1592) = xmmword_20E80FA20;
  *(_OWORD *)(a1 + 3648) = xmmword_20E80FA30;
  *(_OWORD *)(a1 + 3664) = xmmword_20E80FA50;
  *(_QWORD *)&v3 = 0x1900000019;
  *((_QWORD *)&v3 + 1) = 0x1900000019;
  *(_OWORD *)(a1 + 1608) = xmmword_20E80FA40;
  *(_OWORD *)(a1 + 1624) = v3;
  *(_OWORD *)(a1 + 3680) = xmmword_20E80FA60;
  *(_OWORD *)(a1 + 3696) = xmmword_20E80FA80;
  *(_OWORD *)(a1 + 3712) = xmmword_20E80FAA0;
  *(_OWORD *)(a1 + 3728) = xmmword_20E80FAC0;
  *(_QWORD *)&v3 = 0x1F0000001FLL;
  *((_QWORD *)&v3 + 1) = 0x1F0000001FLL;
  *(_OWORD *)(a1 + 1672) = xmmword_20E80FAB0;
  *(_OWORD *)(a1 + 1688) = v3;
  *(_OWORD *)(a1 + 3744) = xmmword_20E80FAD0;
  *(_OWORD *)(a1 + 3760) = xmmword_20E80FAE0;
  *(_OWORD *)(a1 + 3776) = xmmword_20E80FB00;
  *(_OWORD *)(a1 + 1736) = xmmword_20E80FB10;
  *(_OWORD *)(a1 + 1752) = xmmword_20E80FB30;
  *(_OWORD *)(a1 + 3808) = xmmword_20E80FB40;
  *(_OWORD *)(a1 + 3824) = xmmword_20E80FB60;
  *(_OWORD *)(a1 + 1768) = xmmword_20E80FB50;
  *(_OWORD *)(a1 + 1784) = xmmword_20E80FB70;
  *(_OWORD *)(a1 + 3840) = xmmword_20E80FB80;
  *(_OWORD *)(a1 + 3856) = xmmword_20E80FBA0;
  *(_OWORD *)(a1 + 1800) = xmmword_20E80FB90;
  *(_OWORD *)(a1 + 1816) = xmmword_20E80FBB0;
  *(_OWORD *)(a1 + 3872) = xmmword_20E80FBC0;
  *(_QWORD *)&v4 = 0x200000002;
  *((_QWORD *)&v4 + 1) = 0x200000002;
  *(_OWORD *)(a1 + 3888) = xmmword_20E80FBD0;
  *(_OWORD *)(a1 + 1832) = v4;
  *(_OWORD *)(a1 + 1848) = xmmword_20E80F900;
  *(_OWORD *)(a1 + 3904) = xmmword_20E80FBA0;
  *(_OWORD *)(a1 + 3920) = xmmword_20E80FBC0;
  *(_QWORD *)&v4 = 0x400000004;
  *((_QWORD *)&v4 + 1) = 0x400000004;
  *(_OWORD *)(a1 + 1864) = xmmword_20E80FBE0;
  *(_OWORD *)(a1 + 1880) = v4;
  *(_OWORD *)(a1 + 3936) = xmmword_20E80FBD0;
  *(_OWORD *)(a1 + 3952) = xmmword_20E80FBA0;
  *(_OWORD *)(a1 + 1896) = xmmword_20E80FBF0;
  *(_OWORD *)(a1 + 1912) = xmmword_20E80FC00;
  *(_OWORD *)(a1 + 3968) = xmmword_20E80FBC0;
  *(_QWORD *)&v5 = 0x600000006;
  *((_QWORD *)&v5 + 1) = 0x600000006;
  *(_OWORD *)(a1 + 3984) = xmmword_20E80FC10;
  *(_OWORD *)(a1 + 1928) = v5;
  *(_OWORD *)(a1 + 1944) = xmmword_20E80FC20;
  *(_OWORD *)(a1 + 4000) = xmmword_20E80F990;
  *(_OWORD *)(a1 + 4016) = xmmword_20E80FC40;
  *(_OWORD *)(a1 + 1960) = xmmword_20E80FC30;
  *(_OWORD *)(a1 + 1976) = v2;
  *(_OWORD *)(a1 + 4032) = xmmword_20E80FC50;
  *(_OWORD *)(a1 + 4048) = xmmword_20E80F990;
  *(_OWORD *)(a1 + 1992) = xmmword_20E80FC60;
  *(_OWORD *)(a1 + 2008) = xmmword_20E80F960;
  *(_OWORD *)(a1 + 4064) = xmmword_20E80FC40;
  *(_QWORD *)&v6 = 0xA0000000ALL;
  *((_QWORD *)&v6 + 1) = 0xA0000000ALL;
  *(_OWORD *)(a1 + 4080) = xmmword_20E80FC50;
  *(_OWORD *)(a1 + 2024) = v6;
  *(_OWORD *)(a1 + 2040) = xmmword_20E80FC70;
  *(_OWORD *)(a1 + 4096) = xmmword_20E80F990;
  *(_OWORD *)(a1 + 4112) = xmmword_20E80FC40;
  *(_QWORD *)&v7 = 0xC0000000CLL;
  *((_QWORD *)&v7 + 1) = 0xC0000000CLL;
  *(_OWORD *)(a1 + 2056) = xmmword_20E80FC80;
  *(_OWORD *)(a1 + 2072) = v7;
  *(_OWORD *)(a1 + 4128) = xmmword_20E80FC90;
  *(_OWORD *)(a1 + 4144) = xmmword_20E80FCB0;
  *(_OWORD *)(a1 + 2088) = xmmword_20E80FCA0;
  *(_OWORD *)(a1 + 2104) = xmmword_20E80F9A0;
  *(_OWORD *)(a1 + 4160) = xmmword_20E80FCC0;
  *(_QWORD *)&v6 = 0xE0000000ELL;
  *((_QWORD *)&v6 + 1) = 0xE0000000ELL;
  *(_OWORD *)(a1 + 4176) = xmmword_20E80FCD0;
  *(_OWORD *)(a1 + 2120) = v6;
  *(_OWORD *)(a1 + 2136) = xmmword_20E80FCE0;
  *(_OWORD *)(a1 + 4192) = xmmword_20E80FCB0;
  *(_OWORD *)(a1 + 4208) = xmmword_20E80FCC0;
  *(_QWORD *)&v5 = 0x1000000010;
  *((_QWORD *)&v5 + 1) = 0x1000000010;
  *(_OWORD *)(a1 + 2152) = xmmword_20E80FCF0;
  *(_OWORD *)(a1 + 2168) = v5;
  *(_OWORD *)(a1 + 4224) = xmmword_20E80FCD0;
  *(_OWORD *)(a1 + 4240) = xmmword_20E80FCB0;
  *(_OWORD *)(a1 + 2184) = xmmword_20E80FD00;
  *(_OWORD *)(a1 + 2200) = xmmword_20E80FD10;
  *(_OWORD *)(a1 + 4256) = xmmword_20E80FCC0;
  *(_QWORD *)&v8 = 0x1200000012;
  *((_QWORD *)&v8 + 1) = 0x1200000012;
  *(_OWORD *)(a1 + 4272) = xmmword_20E80FD20;
  *(_OWORD *)(a1 + 2216) = v8;
  *(_OWORD *)(a1 + 2232) = xmmword_20E80FD30;
  *(_OWORD *)(a1 + 4288) = xmmword_20E80FD40;
  *(_QWORD *)&v2 = 0x1400000014;
  *((_QWORD *)&v2 + 1) = 0x1400000014;
  *(_OWORD *)(a1 + 2248) = xmmword_20E80FD50;
  *(_OWORD *)(a1 + 2264) = v2;
  *(_OWORD *)(a1 + 4320) = xmmword_20E80FD70;
  *(_OWORD *)(a1 + 4336) = xmmword_20E80FD40;
  *(_OWORD *)(a1 + 2280) = xmmword_20E80FD80;
  *(_OWORD *)(a1 + 2296) = xmmword_20E80FD90;
  *(_QWORD *)&v2 = 0x1600000016;
  *((_QWORD *)&v2 + 1) = 0x1600000016;
  *(_OWORD *)(a1 + 4368) = xmmword_20E80FD70;
  *(_OWORD *)(a1 + 2312) = v2;
  *(_OWORD *)(a1 + 2328) = xmmword_20E80FDA0;
  *(_OWORD *)(a1 + 4384) = xmmword_20E80FD40;
  *(_QWORD *)&v7 = 0x1800000018;
  *((_QWORD *)&v7 + 1) = 0x1800000018;
  *(_OWORD *)(a1 + 2344) = xmmword_20E80FDB0;
  *(_OWORD *)(a1 + 2360) = v7;
  *(_OWORD *)(a1 + 2376) = xmmword_20E80FDD0;
  *(_OWORD *)(a1 + 2392) = xmmword_20E80FDF0;
  *(_QWORD *)&v9 = 0x1A0000001ALL;
  *((_QWORD *)&v9 + 1) = 0x1A0000001ALL;
  *(_OWORD *)(a1 + 2408) = v9;
  *(_OWORD *)(a1 + 1640) = xmmword_20E80FA70;
  *(_OWORD *)(a1 + 1656) = xmmword_20E80FA90;
  *(_OWORD *)(a1 + 2424) = xmmword_20E80FA90;
  *(_OWORD *)(a1 + 2440) = xmmword_20E80FE20;
  *(_QWORD *)&v10 = 0x1C0000001CLL;
  *((_QWORD *)&v10 + 1) = 0x1C0000001CLL;
  *(_OWORD *)(a1 + 2456) = v10;
  *(_OWORD *)(a1 + 2472) = xmmword_20E80FE30;
  *(_OWORD *)(a1 + 2488) = xmmword_20E80FE40;
  *(_QWORD *)&v10 = 0x1E0000001ELL;
  *((_QWORD *)&v10 + 1) = 0x1E0000001ELL;
  *(_OWORD *)(a1 + 2504) = v10;
  *(_OWORD *)(a1 + 2520) = xmmword_20E80FE60;
  *(_OWORD *)(a1 + 2536) = xmmword_20E80FE70;
  *(_OWORD *)(a1 + 2568) = xmmword_20E80FEA0;
  *(_QWORD *)&v10 = 0x2000000020;
  *((_QWORD *)&v10 + 1) = 0x2000000020;
  *(_OWORD *)(a1 + 2552) = v10;
  *(_OWORD *)(a1 + 1704) = v10;
  *(_OWORD *)(a1 + 1720) = xmmword_20E80FAF0;
  *(_OWORD *)(a1 + 2584) = xmmword_20E80FAF0;
  *(_QWORD *)&v10 = 0x2200000022;
  *((_QWORD *)&v10 + 1) = 0x2200000022;
  *(_OWORD *)(a1 + 2600) = v10;
  *(_OWORD *)(a1 + 2616) = xmmword_20E80FEB0;
  *(_OWORD *)(a1 + 3616) = xmmword_20E80F870;
  *(_OWORD *)(a1 + 3632) = xmmword_20E80F870;
  *(_OWORD *)(a1 + 3792) = xmmword_20E80FB20;
  *(_OWORD *)(a1 + 4304) = xmmword_20E80FD60;
  *(_OWORD *)(a1 + 4352) = xmmword_20E80FD60;
  *(_OWORD *)(a1 + 2632) = xmmword_20E80FEC0;
  *(_QWORD *)&v10 = 0x2400000024;
  *((_QWORD *)&v10 + 1) = 0x2400000024;
  *(_OWORD *)(a1 + 2648) = v10;
  *(_DWORD *)(a1 + 2668) = 1;
  *(_DWORD *)(a1 + 2692) = 1;
  *(_DWORD *)(a1 + 2716) = 1;
  *(_DWORD *)(a1 + 2740) = 1;
  *(_DWORD *)(a1 + 2764) = 1;
  *(_DWORD *)(a1 + 2788) = 1;
  *(_DWORD *)(a1 + 2672) = 2;
  *(_DWORD *)(a1 + 2696) = 2;
  *(_DWORD *)(a1 + 2720) = 2;
  *(_DWORD *)(a1 + 2744) = 2;
  *(_DWORD *)(a1 + 2768) = 2;
  *(_DWORD *)(a1 + 2792) = 2;
  *(_DWORD *)(a1 + 2676) = 3;
  *(_DWORD *)(a1 + 2700) = 3;
  *(_DWORD *)(a1 + 2724) = 3;
  *(_DWORD *)(a1 + 2748) = 3;
  *(_DWORD *)(a1 + 2772) = 3;
  *(_DWORD *)(a1 + 2796) = 3;
  *(_DWORD *)(a1 + 2680) = 4;
  *(_DWORD *)(a1 + 2704) = 4;
  *(_DWORD *)(a1 + 2728) = 4;
  *(_DWORD *)(a1 + 2752) = 4;
  *(_DWORD *)(a1 + 2776) = 4;
  *(_DWORD *)(a1 + 2800) = 4;
  *(_DWORD *)(a1 + 2684) = 5;
  *(_DWORD *)(a1 + 2708) = 5;
  *(_DWORD *)(a1 + 2732) = 5;
  *(_DWORD *)(a1 + 2756) = 5;
  *(_DWORD *)(a1 + 2780) = 5;
  *(_DWORD *)(a1 + 2804) = 5;
  *(_DWORD *)(a1 + 2688) = 6;
  *(_DWORD *)(a1 + 2712) = 6;
  *(_DWORD *)(a1 + 2736) = 6;
  *(_DWORD *)(a1 + 2760) = 6;
  *(_DWORD *)(a1 + 2784) = 6;
  *(_DWORD *)(a1 + 2808) = 6;
  *(_DWORD *)(a1 + 2812) = 7;
  *(_DWORD *)(a1 + 2836) = 7;
  *(_DWORD *)(a1 + 2860) = 7;
  *(_DWORD *)(a1 + 2884) = 7;
  *(_DWORD *)(a1 + 2816) = 8;
  *(_DWORD *)(a1 + 2840) = 8;
  *(_DWORD *)(a1 + 2864) = 8;
  *(_DWORD *)(a1 + 2888) = 8;
  *(_DWORD *)(a1 + 2820) = 9;
  *(_DWORD *)(a1 + 2844) = 9;
  *(_DWORD *)(a1 + 2868) = 9;
  *(_DWORD *)(a1 + 2892) = 9;
  *(_DWORD *)(a1 + 2824) = 10;
  *(_DWORD *)(a1 + 2848) = 10;
  *(_DWORD *)(a1 + 2872) = 10;
  *(_DWORD *)(a1 + 2896) = 10;
  *(_DWORD *)(a1 + 2828) = 11;
  *(_DWORD *)(a1 + 2852) = 11;
  *(_DWORD *)(a1 + 2876) = 11;
  *(_DWORD *)(a1 + 2900) = 11;
  *(_DWORD *)(a1 + 2832) = 12;
  *(_DWORD *)(a1 + 2856) = 12;
  *(_DWORD *)(a1 + 2880) = 12;
  *(_DWORD *)(a1 + 2904) = 12;
  *(_DWORD *)(a1 + 4716) = 13;
  *(_DWORD *)(a1 + 4752) = 13;
  *(_DWORD *)(a1 + 2908) = 13;
  *(_DWORD *)(a1 + 2932) = 13;
  *(_DWORD *)(a1 + 2956) = 13;
  *(_DWORD *)(a1 + 2980) = 13;
  *(_DWORD *)(a1 + 4720) = 14;
  *(_DWORD *)(a1 + 4756) = 14;
  *(_DWORD *)(a1 + 2912) = 14;
  *(_DWORD *)(a1 + 2936) = 14;
  *(_DWORD *)(a1 + 2960) = 14;
  *(_DWORD *)(a1 + 2984) = 14;
  *(_DWORD *)(a1 + 4724) = 15;
  *(_DWORD *)(a1 + 4760) = 15;
  *(_DWORD *)(a1 + 2916) = 15;
  *(_DWORD *)(a1 + 2940) = 15;
  *(_DWORD *)(a1 + 2964) = 15;
  *(_DWORD *)(a1 + 2988) = 15;
  *(_DWORD *)(a1 + 4728) = 16;
  *(_DWORD *)(a1 + 4740) = 16;
  *(_DWORD *)(a1 + 2920) = 16;
  *(_DWORD *)(a1 + 2944) = 16;
  *(_DWORD *)(a1 + 2968) = 16;
  *(_DWORD *)(a1 + 2992) = 16;
  *(_DWORD *)(a1 + 4732) = 17;
  *(_DWORD *)(a1 + 4744) = 17;
  *(_DWORD *)(a1 + 2924) = 17;
  *(_DWORD *)(a1 + 2948) = 17;
  *(_DWORD *)(a1 + 2972) = 17;
  *(_DWORD *)(a1 + 2996) = 17;
  *(_DWORD *)(a1 + 4736) = 18;
  *(_DWORD *)(a1 + 4748) = 18;
  *(_DWORD *)(a1 + 2928) = 18;
  *(_DWORD *)(a1 + 2952) = 18;
  *(_DWORD *)(a1 + 2976) = 18;
  *(_DWORD *)(a1 + 3000) = 18;
  *(_DWORD *)(a1 + 4860) = 19;
  *(_DWORD *)(a1 + 4896) = 19;
  *(_DWORD *)(a1 + 3004) = 19;
  *(_DWORD *)(a1 + 3028) = 19;
  *(_DWORD *)(a1 + 4920) = 34;
  *(_DWORD *)(a1 + 4932) = 34;
  *(_DWORD *)(a1 + 5064) = 34;
  *(_DWORD *)(a1 + 5076) = 34;
  *(_DWORD *)(a1 + 4864) = 20;
  *(_DWORD *)(a1 + 4900) = 20;
  *(_DWORD *)(a1 + 3008) = 20;
  *(_DWORD *)(a1 + 3032) = 20;
  *(_DWORD *)(a1 + 4924) = 35;
  *(_DWORD *)(a1 + 4936) = 35;
  *(_DWORD *)(a1 + 5068) = 35;
  *(_DWORD *)(a1 + 5080) = 35;
  *(_DWORD *)(a1 + 4868) = 21;
  *(_DWORD *)(a1 + 4904) = 21;
  *(_DWORD *)(a1 + 3012) = 21;
  *(_DWORD *)(a1 + 3036) = 21;
  *(_DWORD *)(a1 + 2664) = 36;
  *(_DWORD *)(a1 + 4928) = 36;
  *(_DWORD *)(a1 + 4940) = 36;
  *(_DWORD *)(a1 + 5072) = 36;
  *(_DWORD *)(a1 + 5084) = 36;
  *(_DWORD *)(a1 + 4872) = 22;
  *(_DWORD *)(a1 + 4884) = 22;
  *(_DWORD *)(a1 + 3016) = 22;
  *(_DWORD *)(a1 + 3040) = 22;
  *(_DWORD *)(a1 + 4908) = 31;
  *(_DWORD *)(a1 + 4944) = 31;
  *(_DWORD *)(a1 + 5052) = 31;
  *(_DWORD *)(a1 + 5088) = 31;
  *(_DWORD *)(a1 + 4876) = 23;
  *(_DWORD *)(a1 + 4888) = 23;
  *(_DWORD *)(a1 + 3020) = 23;
  *(_DWORD *)(a1 + 3044) = 23;
  *(_DWORD *)(a1 + 4912) = 32;
  *(_DWORD *)(a1 + 4948) = 32;
  *(_DWORD *)(a1 + 5056) = 32;
  *(_DWORD *)(a1 + 5092) = 32;
  *(_DWORD *)(a1 + 4880) = 24;
  *(_DWORD *)(a1 + 4892) = 24;
  *(_DWORD *)(a1 + 3024) = 24;
  *(_DWORD *)(a1 + 3048) = 24;
  *(_DWORD *)(a1 + 4916) = 33;
  *(_DWORD *)(a1 + 4952) = 33;
  *(_DWORD *)(a1 + 5060) = 33;
  *(_DWORD *)(a1 + 5096) = 33;
  *(_DWORD *)(a1 + 4764) = 25;
  *(_DWORD *)(a1 + 4800) = 25;
  *(_DWORD *)(a1 + 4956) = 25;
  *(_DWORD *)(a1 + 4992) = 25;
  *(_DWORD *)(a1 + 3052) = 25;
  *(_DWORD *)(a1 + 3076) = 25;
  *(_DWORD *)(a1 + 4824) = 40;
  *(_DWORD *)(a1 + 4836) = 40;
  *(_DWORD *)(a1 + 5016) = 40;
  *(_DWORD *)(a1 + 5028) = 40;
  *(_DWORD *)(a1 + 5112) = 40;
  *(_DWORD *)(a1 + 5124) = 40;
  *(_DWORD *)(a1 + 4768) = 26;
  *(_DWORD *)(a1 + 4804) = 26;
  *(_DWORD *)(a1 + 4960) = 26;
  *(_DWORD *)(a1 + 4996) = 26;
  *(_DWORD *)(a1 + 3056) = 26;
  *(_DWORD *)(a1 + 3080) = 26;
  *(_DWORD *)(a1 + 4828) = 41;
  *(_DWORD *)(a1 + 4840) = 41;
  *(_DWORD *)(a1 + 5020) = 41;
  *(_DWORD *)(a1 + 5032) = 41;
  *(_DWORD *)(a1 + 5116) = 41;
  *(_DWORD *)(a1 + 5128) = 41;
  *(_DWORD *)(a1 + 4772) = 27;
  *(_DWORD *)(a1 + 4808) = 27;
  *(_DWORD *)(a1 + 4964) = 27;
  *(_DWORD *)(a1 + 5000) = 27;
  *(_DWORD *)(a1 + 3060) = 27;
  *(_DWORD *)(a1 + 3084) = 27;
  *(_DWORD *)(a1 + 4712) = 42;
  *(_DWORD *)(a1 + 4832) = 42;
  *(_DWORD *)(a1 + 4844) = 42;
  *(_DWORD *)(a1 + 5024) = 42;
  *(_DWORD *)(a1 + 5036) = 42;
  *(_DWORD *)(a1 + 5120) = 42;
  *(_DWORD *)(a1 + 5132) = 42;
  *(_DWORD *)(a1 + 4776) = 28;
  *(_DWORD *)(a1 + 4788) = 28;
  *(_DWORD *)(a1 + 4968) = 28;
  *(_DWORD *)(a1 + 4980) = 28;
  *(_DWORD *)(a1 + 3064) = 28;
  *(_DWORD *)(a1 + 3088) = 28;
  *(_DWORD *)(a1 + 4812) = 37;
  *(_DWORD *)(a1 + 4848) = 37;
  *(_DWORD *)(a1 + 5004) = 37;
  *(_DWORD *)(a1 + 5040) = 37;
  *(_DWORD *)(a1 + 5100) = 37;
  *(_DWORD *)(a1 + 5136) = 37;
  *(_DWORD *)(a1 + 4780) = 29;
  *(_DWORD *)(a1 + 4792) = 29;
  *(_DWORD *)(a1 + 4972) = 29;
  *(_DWORD *)(a1 + 4984) = 29;
  *(_DWORD *)(a1 + 3068) = 29;
  *(_DWORD *)(a1 + 3092) = 29;
  *(_DWORD *)(a1 + 4816) = 38;
  *(_DWORD *)(a1 + 4852) = 38;
  *(_DWORD *)(a1 + 5008) = 38;
  *(_DWORD *)(a1 + 5044) = 38;
  *(_DWORD *)(a1 + 5104) = 38;
  *(_DWORD *)(a1 + 5140) = 38;
  *(_DWORD *)(a1 + 4784) = 30;
  *(_DWORD *)(a1 + 4796) = 30;
  *(_DWORD *)(a1 + 4976) = 30;
  *(_DWORD *)(a1 + 4988) = 30;
  *(_DWORD *)(a1 + 3072) = 30;
  *(_DWORD *)(a1 + 3096) = 30;
  *(_DWORD *)(a1 + 4820) = 39;
  *(_DWORD *)(a1 + 4856) = 39;
  *(_DWORD *)(a1 + 5012) = 39;
  *(_DWORD *)(a1 + 5048) = 39;
  *(_DWORD *)(a1 + 5108) = 39;
  *(_DWORD *)(a1 + 5144) = 39;
  *(_OWORD *)(a1 + 3264) = xmmword_20E80F6D0;
  *(_OWORD *)(a1 + 3280) = xmmword_20E80F830;
  *(_OWORD *)(a1 + 3296) = xmmword_20E80F840;
  *(_OWORD *)(a1 + 3328) = xmmword_20E80F860;
  *(_OWORD *)(a1 + 3344) = xmmword_20E80F870;
  *(_OWORD *)(a1 + 3408) = xmmword_20E80F8B0;
  *(_OWORD *)(a1 + 3424) = xmmword_20E80F8C0;
  *(_OWORD *)(a1 + 3360) = xmmword_20E80F880;
  *(_OWORD *)(a1 + 3376) = xmmword_20E80F890;
  *(_QWORD *)(a1 + 1376) = 0;
  *(_OWORD *)(a1 + 3392) = xmmword_20E80F8A0;
  result = 0.0;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 3312) = xmmword_20E80F850;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 4400) = xmmword_20E80FD60;
  *(_OWORD *)(a1 + 4416) = xmmword_20E80FDC0;
  *(_OWORD *)(a1 + 4432) = xmmword_20E80FDE0;
  *(_OWORD *)(a1 + 4448) = xmmword_20E80FE00;
  *(_OWORD *)(a1 + 4464) = xmmword_20E80FE10;
  *(_OWORD *)(a1 + 4480) = xmmword_20E80FDE0;
  *(_OWORD *)(a1 + 4496) = xmmword_20E80FE00;
  *(_OWORD *)(a1 + 4512) = xmmword_20E80FE10;
  *(_OWORD *)(a1 + 4528) = xmmword_20E80FDE0;
  *(_OWORD *)(a1 + 4544) = xmmword_20E80FE00;
  *(_OWORD *)(a1 + 4560) = xmmword_20E80FE50;
  *(_OWORD *)(a1 + 4576) = xmmword_20E80FB20;
  *(_OWORD *)(a1 + 4592) = xmmword_20E80FE80;
  *(_OWORD *)(a1 + 4608) = xmmword_20E80FE90;
  *(_OWORD *)(a1 + 4624) = xmmword_20E80FB20;
  *(_OWORD *)(a1 + 4640) = xmmword_20E80FE80;
  *(_OWORD *)(a1 + 4656) = xmmword_20E80FE90;
  *(_OWORD *)(a1 + 4672) = xmmword_20E80FB20;
  *(_OWORD *)(a1 + 4688) = xmmword_20E80FE80;
  *(_QWORD *)(a1 + 4704) = 0x2900000028;
  return result;
}

void sub_20E7EF070(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;

  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 > v5;
  v8 = a2 - v5;
  if (v7)
  {
    sub_20E7C1E68((uint64_t)a1, v8);
  }
  else if (!v6)
  {
    v9 = *a1 + 24 * a2;
    if (v4 != v9)
    {
      v10 = a1[1];
      do
      {
        v12 = *(void **)(v10 - 24);
        v10 -= 24;
        v11 = v12;
        if (v12)
        {
          *(_QWORD *)(v4 - 16) = v11;
          operator delete(v11);
        }
        v4 = v10;
      }
      while (v10 != v9);
    }
    a1[1] = v9;
  }
  v14 = a1[3];
  v13 = a1[4];
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3);
  if (a2 <= v15)
  {
    if (a2 < v15)
    {
      v16 = v14 + 24 * a2;
      if (v13 != v16)
      {
        v17 = a1[4];
        do
        {
          v19 = *(void **)(v17 - 24);
          v17 -= 24;
          v18 = v19;
          if (v19)
          {
            *(_QWORD *)(v13 - 16) = v18;
            operator delete(v18);
          }
          v13 = v17;
        }
        while (v17 != v16);
      }
      a1[4] = v16;
    }
  }
  else
  {
    sub_20E7C1E68((uint64_t)(a1 + 3), a2 - v15);
  }
  v21 = a1[6];
  v20 = a1[7];
  v22 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v21) >> 3);
  if (a2 <= v22)
  {
    if (a2 < v22)
    {
      v23 = v21 + 24 * a2;
      if (v20 != v23)
      {
        v24 = a1[7];
        do
        {
          v26 = *(void **)(v24 - 24);
          v24 -= 24;
          v25 = v26;
          if (v26)
          {
            *(_QWORD *)(v20 - 16) = v25;
            operator delete(v25);
          }
          v20 = v24;
        }
        while (v24 != v23);
      }
      a1[7] = v23;
    }
  }
  else
  {
    sub_20E7C1E68((uint64_t)(a1 + 6), a2 - v22);
  }
  v28 = a1[9];
  v27 = a1[10];
  v29 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v28) >> 3);
  if (a2 <= v29)
  {
    if (a2 < v29)
    {
      v30 = v28 + 24 * a2;
      if (v27 != v30)
      {
        v31 = a1[10];
        do
        {
          v33 = *(void **)(v31 - 24);
          v31 -= 24;
          v32 = v33;
          if (v33)
          {
            *(_QWORD *)(v27 - 16) = v32;
            operator delete(v32);
          }
          v27 = v31;
        }
        while (v31 != v30);
      }
      a1[10] = v30;
    }
  }
  else
  {
    sub_20E7C1E68((uint64_t)(a1 + 9), a2 - v29);
  }
  v35 = a1[12];
  v34 = a1[13];
  v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 3);
  if (a2 <= v36)
  {
    if (a2 < v36)
    {
      v37 = v35 + 24 * a2;
      if (v34 != v37)
      {
        v38 = a1[13];
        do
        {
          v40 = *(void **)(v38 - 24);
          v38 -= 24;
          v39 = v40;
          if (v40)
          {
            *(_QWORD *)(v34 - 16) = v39;
            operator delete(v39);
          }
          v34 = v38;
        }
        while (v38 != v37);
      }
      a1[13] = v37;
    }
  }
  else
  {
    sub_20E7C1E68((uint64_t)(a1 + 12), a2 - v36);
  }
  v42 = a1[15];
  v41 = a1[16];
  v43 = 0xAAAAAAAAAAAAAAABLL * ((v41 - v42) >> 3);
  if (a2 <= v43)
  {
    if (a2 < v43)
    {
      v44 = v42 + 24 * a2;
      if (v41 != v44)
      {
        v45 = a1[16];
        do
        {
          v47 = *(void **)(v45 - 24);
          v45 -= 24;
          v46 = v47;
          if (v47)
          {
            *(_QWORD *)(v41 - 16) = v46;
            operator delete(v46);
          }
          v41 = v45;
        }
        while (v45 != v44);
      }
      a1[16] = v44;
    }
  }
  else
  {
    sub_20E7C1E68((uint64_t)(a1 + 15), a2 - v43);
  }
  v49 = a1[18];
  v48 = a1[19];
  v50 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v49) >> 3);
  if (a2 <= v50)
  {
    if (a2 < v50)
    {
      v51 = v49 + 24 * a2;
      if (v48 != v51)
      {
        v52 = a1[19];
        do
        {
          v54 = *(void **)(v52 - 24);
          v52 -= 24;
          v53 = v54;
          if (v54)
          {
            *(_QWORD *)(v48 - 16) = v53;
            operator delete(v53);
          }
          v48 = v52;
        }
        while (v52 != v51);
      }
      a1[19] = v51;
    }
  }
  else
  {
    sub_20E7C1E68((uint64_t)(a1 + 18), a2 - v50);
  }
  v56 = a1[21];
  v55 = a1[22];
  v57 = 0xAAAAAAAAAAAAAAABLL * ((v55 - v56) >> 3);
  if (a2 <= v57)
  {
    if (a2 < v57)
    {
      v58 = v56 + 24 * a2;
      if (v55 != v58)
      {
        v59 = a1[22];
        do
        {
          v61 = *(void **)(v59 - 24);
          v59 -= 24;
          v60 = v61;
          if (v61)
          {
            *(_QWORD *)(v55 - 16) = v60;
            operator delete(v60);
          }
          v55 = v59;
        }
        while (v59 != v58);
      }
      a1[22] = v58;
    }
  }
  else
  {
    sub_20E7C1E68((uint64_t)(a1 + 21), a2 - v57);
  }
  v63 = a1[24];
  v62 = a1[25];
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v62 - v63) >> 3);
  if (a2 <= v64)
  {
    if (a2 < v64)
    {
      v65 = v63 + 24 * a2;
      if (v62 != v65)
      {
        v66 = a1[25];
        do
        {
          v68 = *(void **)(v66 - 24);
          v66 -= 24;
          v67 = v68;
          if (v68)
          {
            *(_QWORD *)(v62 - 16) = v67;
            operator delete(v67);
          }
          v62 = v66;
        }
        while (v66 != v65);
      }
      a1[25] = v65;
    }
  }
  else
  {
    sub_20E7C1E68((uint64_t)(a1 + 24), a2 - v64);
  }
}

uint64_t sub_20E7EF470(uint64_t a1, unsigned int a2)
{
  return ((vcvtd_n_u64_f64(*(double *)(a1 + 8 * (a2 & 0x1F) + 960), 0xDuLL) << (a2 >> 5)) + 8) >> 4;
}

uint64_t sub_20E7EF494(uint64_t result, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  int *v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v3 = 0;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  do
  {
    v4 = (int *)(result + v3);
    v5 = *(_BYTE *)a3 | (*(_DWORD *)(a2 + 4 * *(int *)(result + v3 + 1216)) < *(_DWORD *)(a2
                                                                                          + 4
                                                                                          * *(int *)(result + v3 + 3264)));
    *(_BYTE *)a3 = v5;
    v6 = v5 | (2 * (*(_DWORD *)(a2 + 4 * v4[305]) < *(_DWORD *)(a2 + 4 * v4[817])));
    *(_BYTE *)a3 = v6;
    v7 = v6 | (4 * (*(_DWORD *)(a2 + 4 * v4[306]) < *(_DWORD *)(a2 + 4 * v4[818])));
    *(_BYTE *)a3 = v7;
    v8 = v7 | (8 * (*(_DWORD *)(a2 + 4 * v4[307]) < *(_DWORD *)(a2 + 4 * v4[819])));
    *(_BYTE *)a3 = v8;
    v9 = v8 | (16 * (*(_DWORD *)(a2 + 4 * v4[308]) < *(_DWORD *)(a2 + 4 * v4[820])));
    *(_BYTE *)a3 = v9;
    v10 = v9 | (32 * (*(_DWORD *)(a2 + 4 * v4[309]) < *(_DWORD *)(a2 + 4 * v4[821])));
    *(_BYTE *)a3 = v10;
    v11 = v10 | ((*(_DWORD *)(a2 + 4 * v4[310]) < *(_DWORD *)(a2 + 4 * v4[822])) << 6);
    *(_BYTE *)a3 = v11;
    *(_BYTE *)a3 = v11 | ((*(_DWORD *)(a2 + 4 * *(int *)(result + v3 + 1244)) < *(_DWORD *)(a2
                                                                                            + 4
                                                                                            * *(int *)(result + v3 + 3292))) << 7);
    a3 = (_OWORD *)((char *)a3 + 1);
    v3 += 32;
  }
  while (v3 != 2048);
  return result;
}

_QWORD *sub_20E7EF5BC(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  double v65;
  double v66;
  int v67;
  uint64_t v68;
  unint64_t *v69;
  _QWORD *v70;
  _OWORD *v71;
  unint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  _OWORD *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  __int128 v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  unint64_t v93;
  __int16 v94;
  _QWORD *v95;
  _QWORD *v96;
  _OWORD *v97;
  unint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  char *v104;
  _OWORD *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  __int128 v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int128 *v127;
  int *v128;
  unint64_t v129;
  _OWORD *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _OWORD *v143;
  _OWORD *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  __int128 v150;
  char *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  char v173;
  unint64_t v174;
  _OWORD *v175;
  _OWORD *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  unint64_t v182;
  char *v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  char *v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  char *v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  char *v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  char *v245;
  char *v246;
  _QWORD *result;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  void **v254;
  _QWORD *v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v264;
  uint64_t v265;
  double v266;
  double v267;
  double v268;
  __int128 v269;
  _BYTE v270[112];
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  _OWORD v280[2];
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  _OWORD v294[2];
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  uint64_t v303;

  v4 = a2;
  v303 = *MEMORY[0x24BDAC8D0];
  v288 = 0;
  v286 = 0u;
  v287 = 0u;
  v284 = 0u;
  v285 = 0u;
  v282 = 0u;
  v283 = 0u;
  v281 = 0u;
  v279 = 0u;
  memset(v280, 0, 28);
  v277 = 0u;
  v278 = 0u;
  v275 = 0u;
  v276 = 0u;
  v273 = 0u;
  v274 = 0u;
  v271 = 0u;
  v272 = 0u;
  v6 = *(int *)(a1 + 24);
  v7 = v6 - 2;
  if ((_DWORD)v6 == 2)
  {
    v9 = 0;
    goto LABEL_10;
  }
  v8 = *a2;
  if ((_DWORD)v6 == 3)
  {
    v9 = 0;
    v10 = 0;
LABEL_8:
    v19 = v6 - v10 - 2;
    v20 = (_QWORD *)(v8 + 24 * v10 + 8);
    do
    {
      v9 += (uint64_t)(*v20 - *(v20 - 1)) >> 7;
      v20 += 3;
      --v19;
    }
    while (v19);
    goto LABEL_10;
  }
  v11 = 0;
  v12 = 0;
  v10 = v7 & 0xFFFFFFFFFFFFFFFELL;
  v13 = (uint64_t *)(v8 + 24);
  v14 = v7 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v16 = *(v13 - 3);
    v15 = *(v13 - 2);
    v18 = *v13;
    v17 = v13[1];
    v13 += 6;
    v11 += (v15 - v16) >> 7;
    v12 += (v17 - v18) >> 7;
    v14 -= 2;
  }
  while (v14);
  v9 = v12 + v11;
  if (v10 != v7)
    goto LABEL_8;
LABEL_10:
  v22 = *(_QWORD *)(a1 + 440);
  v21 = *(_QWORD *)(a1 + 448);
  v252 = *(_QWORD *)(a1 + 464);
  v253 = *(_QWORD *)(a1 + 472);
  v23 = (void *)a4[10];
  a4[17] = a4[16];
  v24 = a4[12];
  a4[14] = a4[13];
  v251 = a4 + 4;
  a4[5] = a4[4];
  v25 = a4 + 7;
  a4[8] = a4[7];
  v257 = a4 + 10;
  a4[11] = v23;
  if (v9 > (v24 - (uint64_t)v23) >> 8)
  {
    if (HIBYTE(v9))
      sub_20E78D874();
    v26 = v9 << 8;
    v27 = (char *)operator new(v9 << 8);
    a4[10] = v27;
    a4[11] = v27;
    a4[12] = &v27[v26];
    if (v23)
      operator delete(v23);
  }
  v28 = *(_QWORD *)(a1 + 368);
  v29 = *(_QWORD *)(a1 + 376) - v28;
  if (v29)
  {
    v30 = v29 / 24;
    if (v30 <= 1)
      v30 = 1;
    v31 = (_QWORD *)(*(_QWORD *)(a1 + 224) + 8);
    v32 = (_QWORD *)(*(_QWORD *)(a1 + 416) + 8);
    v33 = (_QWORD *)(*(_QWORD *)(a1 + 248) + 8);
    v34 = (_QWORD *)(*(_QWORD *)(a1 + 392) + 8);
    v35 = (_QWORD *)(*(_QWORD *)(a1 + 272) + 8);
    v36 = (_QWORD *)(v28 + 8);
    v37 = (_QWORD *)(*(_QWORD *)(a1 + 296) + 8);
    v38 = (_QWORD *)(*(_QWORD *)(a1 + 344) + 8);
    v39 = (_QWORD *)(*(_QWORD *)(a1 + 320) + 8);
    do
    {
      *v31 = *(v31 - 1);
      v31 += 3;
      *v33 = *(v33 - 1);
      v33 += 3;
      *v35 = *(v35 - 1);
      v35 += 3;
      *v37 = *(v37 - 1);
      v37 += 3;
      *v39 = *(v39 - 1);
      v39 += 3;
      *v38 = *(v38 - 1);
      v38 += 3;
      *v36 = *(v36 - 1);
      v36 += 3;
      *v34 = *(v34 - 1);
      v34 += 3;
      *v32 = *(v32 - 1);
      v32 += 3;
      --v30;
    }
    while (v30);
  }
  v248 = v25;
  v249 = v22;
  v250 = v21;
  v40 = *(_DWORD *)(a1 + 24);
  if ((v40 - 3) <= 0xFFFFFFFD)
  {
    v255 = (_QWORD *)(a1 + 440);
    v256 = 0;
    v254 = (void **)(a1 + 464);
    v260 = 0;
    v41 = 1;
    v258 = v4;
    while (1)
    {
      v265 = v41 - 1;
      v42 = *(_QWORD *)(*v4 + 24 * (v41 - 1) + 8) - *(_QWORD *)(*v4 + 24 * (v41 - 1));
      if (v42)
        break;
LABEL_22:
      if (++v41 >= (unint64_t)(v40 - 1))
        goto LABEL_129;
    }
    v43 = 0;
    v44 = v42 >> 7;
    if ((unint64_t)(v42 >> 7) <= 1)
      v44 = 1;
    v259 = v44;
    v264 = v41;
    while (1)
    {
      while (1)
      {
        v261 = v43;
        v58 = (__int128 *)(*(_QWORD *)(*v4 + 24 * v265) + (v43 << 7));
        v59 = v58[3];
        v61 = *v58;
        v60 = v58[1];
        *(_OWORD *)&v270[16] = v58[2];
        *(_OWORD *)&v270[32] = v59;
        v269 = v61;
        *(_OWORD *)v270 = v60;
        v62 = v58[6];
        v64 = v58[4];
        v63 = v58[5];
        *(_OWORD *)&v270[96] = v58[7];
        *(_OWORD *)&v270[64] = v63;
        *(_OWORD *)&v270[80] = v62;
        *(_OWORD *)&v270[48] = v64;
        LODWORD(v62) = v269;
        v65 = (double)(unint64_t)v62 * 0.015625;
        v66 = (double)__PAIR64__(*(unsigned int *)&v270[100], DWORD1(v269)) * 0.015625;
        v67 = DWORD2(v269);
        v68 = sub_20E7F05D8(a1, a3, SDWORD2(v269), v41, (unsigned int *)&v281, v65, v66);
        v69 = (unint64_t *)(*(_QWORD *)(a1 + 224) + 24 * v265);
        v70 = v69 + 1;
        v71 = (_OWORD *)v69[1];
        v72 = v69[2];
        if ((unint64_t)v71 >= v72)
        {
          v77 = (_OWORD *)*v69;
          v78 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)((uint64_t)v71 - *v69) >> 3);
          v79 = v78 + 1;
          if (v78 + 1 > 0x222222222222222)
            sub_20E78D874();
          v80 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v72 - (_QWORD)v77) >> 3);
          if (2 * v80 > v79)
            v79 = 2 * v80;
          v81 = v80 >= 0x111111111111111 ? 0x222222222222222 : v79;
          if (v81)
          {
            if (v81 > 0x222222222222222)
              sub_20E78D888();
            v68 = (uint64_t)operator new(120 * v81);
          }
          else
          {
            v68 = 0;
          }
          v82 = v286;
          v83 = v68 + 120 * v78;
          *(_OWORD *)(v83 + 64) = v285;
          *(_OWORD *)(v83 + 80) = v82;
          *(_OWORD *)(v83 + 96) = v287;
          *(_QWORD *)(v83 + 112) = v288;
          v84 = v282;
          *(_OWORD *)v83 = v281;
          *(_OWORD *)(v83 + 16) = v84;
          v85 = v284;
          *(_OWORD *)(v83 + 32) = v283;
          *(_OWORD *)(v83 + 48) = v85;
          v86 = v83;
          if (v71 != v77)
          {
            do
            {
              v87 = *(_OWORD *)((char *)v71 - 120);
              v88 = *(_OWORD *)((char *)v71 - 104);
              v89 = *(_OWORD *)((char *)v71 - 88);
              *(_OWORD *)(v86 - 72) = *(_OWORD *)((char *)v71 - 72);
              *(_OWORD *)(v86 - 88) = v89;
              *(_OWORD *)(v86 - 104) = v88;
              *(_OWORD *)(v86 - 120) = v87;
              v90 = *(_OWORD *)((char *)v71 - 56);
              v91 = *(_OWORD *)((char *)v71 - 40);
              v92 = *(_OWORD *)((char *)v71 - 24);
              *(_QWORD *)(v86 - 8) = *((_QWORD *)v71 - 1);
              *(_OWORD *)(v86 - 24) = v92;
              *(_OWORD *)(v86 - 40) = v91;
              *(_OWORD *)(v86 - 56) = v90;
              v86 -= 120;
              v71 = (_OWORD *)((char *)v71 - 120);
            }
            while (v71 != v77);
            v71 = (_OWORD *)*v69;
          }
          v93 = v68 + 120 * v81;
          *v69 = v86;
          v76 = (char *)(v83 + 120);
          *v70 = v83 + 120;
          v69[2] = v93;
          if (v71)
            operator delete(v71);
        }
        else
        {
          v73 = v286;
          v71[4] = v285;
          v71[5] = v73;
          v71[6] = v287;
          *((_QWORD *)v71 + 14) = v288;
          v74 = v282;
          *v71 = v281;
          v71[1] = v74;
          v75 = v284;
          v76 = (char *)v71 + 120;
          v71[2] = v283;
          v71[3] = v75;
        }
        *v70 = v76;
        v267 = 0.0;
        v268 = 0.0;
        v266 = 0.0;
        sub_20E7F0958(v68, &v281, &v268, &v267, &v266);
        if ((int)v268 >= 0x1000)
          sub_20E80C91C();
        v94 = vcvtas_u32_f32((float)((float)(((vcvtd_n_u64_f64(*(double *)(a1 + 960 + 8 * (BYTE8(v269) & 0x1F)), 0xDuLL) << (DWORD2(v269) >> 5))+ 8) >> 4)* 0.0019531)* 512.0);
        HIDWORD(v269) = (int)v268 >> 4;
        *(_DWORD *)v270 = v94 & 0x3FFF;
        sub_20E7F0B88(a1, a3, v67, v264, (unsigned int *)&v271, v65, v66, v267, v266);
        v95 = (_QWORD *)(*(_QWORD *)(a1 + 248) + 24 * v265);
        v96 = v95 + 1;
        v97 = (_OWORD *)v95[1];
        v98 = v95[2];
        if ((unint64_t)v97 >= v98)
        {
          v105 = (_OWORD *)*v95;
          v106 = 0x82FA0BE82FA0BE83 * (((uint64_t)v97 - *v95) >> 2);
          v107 = v106 + 1;
          if (v106 + 1 > 0x17D05F417D05F41)
            sub_20E78D874();
          v108 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v98 - (_QWORD)v105) >> 2);
          if (2 * v108 > v107)
            v107 = 2 * v108;
          v109 = v108 >= 0xBE82FA0BE82FA0 ? 0x17D05F417D05F41 : v107;
          if (v109)
          {
            if (v109 > 0x17D05F417D05F41)
              sub_20E78D888();
            v110 = (char *)operator new(172 * v109);
          }
          else
          {
            v110 = 0;
          }
          v111 = v280[0];
          v112 = &v110[172 * v106];
          *((_OWORD *)v112 + 8) = v279;
          *((_OWORD *)v112 + 9) = v111;
          *(_OWORD *)(v112 + 156) = *(_OWORD *)((char *)v280 + 12);
          v113 = v276;
          *((_OWORD *)v112 + 4) = v275;
          *((_OWORD *)v112 + 5) = v113;
          v114 = v278;
          *((_OWORD *)v112 + 6) = v277;
          *((_OWORD *)v112 + 7) = v114;
          v115 = v272;
          *(_OWORD *)v112 = v271;
          *((_OWORD *)v112 + 1) = v115;
          v116 = v274;
          *((_OWORD *)v112 + 2) = v273;
          *((_OWORD *)v112 + 3) = v116;
          v117 = v112;
          if (v97 != v105)
          {
            do
            {
              v118 = *(_OWORD *)((char *)v97 - 172);
              v119 = *(_OWORD *)((char *)v97 - 156);
              *(_OWORD *)((char *)v117 - 140) = *(_OWORD *)((char *)v97 - 140);
              *(_OWORD *)((char *)v117 - 156) = v119;
              *(_OWORD *)((char *)v117 - 172) = v118;
              v120 = *(_OWORD *)((char *)v97 - 124);
              v121 = *(_OWORD *)((char *)v97 - 108);
              v122 = *(_OWORD *)((char *)v97 - 92);
              *(_OWORD *)((char *)v117 - 76) = *(_OWORD *)((char *)v97 - 76);
              *(_OWORD *)((char *)v117 - 92) = v122;
              *(_OWORD *)((char *)v117 - 108) = v121;
              *(_OWORD *)((char *)v117 - 124) = v120;
              v123 = *(_OWORD *)((char *)v97 - 60);
              v124 = *(_OWORD *)((char *)v97 - 44);
              v125 = *(_OWORD *)((char *)v97 - 28);
              *(v117 - 1) = *(v97 - 1);
              *(_OWORD *)((char *)v117 - 28) = v125;
              *(_OWORD *)((char *)v117 - 44) = v124;
              *(_OWORD *)((char *)v117 - 60) = v123;
              v117 = (_OWORD *)((char *)v117 - 172);
              v97 = (_OWORD *)((char *)v97 - 172);
            }
            while (v97 != v105);
            v97 = (_OWORD *)*v95;
          }
          *v95 = v117;
          v104 = v112 + 172;
          *v96 = v112 + 172;
          v95[2] = &v110[172 * v109];
          if (v97)
            operator delete(v97);
        }
        else
        {
          v99 = v280[0];
          v97[8] = v279;
          v97[9] = v99;
          *(_OWORD *)((char *)v97 + 156) = *(_OWORD *)((char *)v280 + 12);
          v100 = v276;
          v97[4] = v275;
          v97[5] = v100;
          v101 = v278;
          v97[6] = v277;
          v97[7] = v101;
          v102 = v272;
          *v97 = v271;
          v97[1] = v102;
          v103 = v274;
          v97[2] = v273;
          v97[3] = v103;
          v104 = (char *)v97 + 172;
        }
        v126 = 0;
        *v96 = v104;
        v301 = 0u;
        v302 = 0u;
        v127 = &v299;
        v299 = 0u;
        v300 = 0u;
        do
        {
          v128 = (int *)(a1 + v126);
          *(_BYTE *)v127 |= (*((_DWORD *)&v271 + *(int *)(a1 + v126 + 1216)) < *((_DWORD *)&v271
                                                                               + *(int *)(a1 + v126 + 3264))) | (2 * (*((_DWORD *)&v271 + v128[305]) < *((_DWORD *)&v271 + v128[817]))) | (4 * (*((_DWORD *)&v271 + v128[306]) < *((_DWORD *)&v271 + v128[818]))) | (8 * (*((_DWORD *)&v271 + v128[307]) < *((_DWORD *)&v271 + v128[819]))) | (16 * (*((_DWORD *)&v271 + v128[308]) < *((_DWORD *)&v271 + v128[820]))) | (32 * (*((_DWORD *)&v271 + v128[309]) < *((_DWORD *)&v271 + v128[821]))) | ((*((_DWORD *)&v271 + v128[310]) < *((_DWORD *)&v271 + v128[822])) << 6) | ((*((_DWORD *)&v271 + v128[311]) < *((_DWORD *)&v271 + v128[823])) << 7);
          v127 = (__int128 *)((char *)v127 + 1);
          v126 += 32;
        }
        while (v126 != 2048);
        sub_20E7F3010((uint64_t)&v295, (unsigned __int8 *)&v299);
        v130 = (_OWORD *)a4[11];
        v129 = a4[12];
        if ((unint64_t)v130 >= v129)
        {
          v144 = (_OWORD *)*v257;
          v145 = ((uint64_t)v130 - *v257) >> 8;
          v146 = v145 + 1;
          if ((unint64_t)(v145 + 1) >> 56)
            sub_20E78D874();
          v147 = v129 - (_QWORD)v144;
          if (v147 >> 7 > v146)
            v146 = v147 >> 7;
          v148 = (unint64_t)v147 >= 0x7FFFFFFFFFFFFF00 ? 0xFFFFFFFFFFFFFFLL : v146;
          if (v148)
          {
            if (HIBYTE(v148))
              sub_20E78D888();
            v149 = (char *)operator new(v148 << 8);
          }
          else
          {
            v149 = 0;
          }
          v150 = *(_OWORD *)&v270[64];
          v151 = &v149[256 * v145];
          *((_OWORD *)v151 + 4) = *(_OWORD *)&v270[48];
          *((_OWORD *)v151 + 5) = v150;
          v152 = *(_OWORD *)&v270[96];
          *((_OWORD *)v151 + 6) = *(_OWORD *)&v270[80];
          *((_OWORD *)v151 + 7) = v152;
          v153 = *(_OWORD *)v270;
          *(_OWORD *)v151 = v269;
          *((_OWORD *)v151 + 1) = v153;
          v154 = *(_OWORD *)&v270[32];
          *((_OWORD *)v151 + 2) = *(_OWORD *)&v270[16];
          *((_OWORD *)v151 + 3) = v154;
          v155 = v299;
          v156 = v300;
          v157 = v302;
          *((_OWORD *)v151 + 10) = v301;
          *((_OWORD *)v151 + 11) = v157;
          *((_OWORD *)v151 + 8) = v155;
          *((_OWORD *)v151 + 9) = v156;
          v158 = v298;
          *((_OWORD *)v151 + 14) = v297;
          *((_OWORD *)v151 + 15) = v158;
          v159 = v296;
          *((_OWORD *)v151 + 12) = v295;
          *((_OWORD *)v151 + 13) = v159;
          v160 = v151;
          if (v130 != v144)
          {
            do
            {
              v161 = *(v130 - 16);
              v162 = *(v130 - 15);
              v163 = *(v130 - 13);
              *((_OWORD *)v160 - 14) = *(v130 - 14);
              *((_OWORD *)v160 - 13) = v163;
              *((_OWORD *)v160 - 16) = v161;
              *((_OWORD *)v160 - 15) = v162;
              v164 = *(v130 - 12);
              v165 = *(v130 - 11);
              v166 = *(v130 - 9);
              *((_OWORD *)v160 - 10) = *(v130 - 10);
              *((_OWORD *)v160 - 9) = v166;
              *((_OWORD *)v160 - 12) = v164;
              *((_OWORD *)v160 - 11) = v165;
              v167 = *(v130 - 8);
              v168 = *(v130 - 7);
              v169 = *(v130 - 5);
              *((_OWORD *)v160 - 6) = *(v130 - 6);
              *((_OWORD *)v160 - 5) = v169;
              *((_OWORD *)v160 - 8) = v167;
              *((_OWORD *)v160 - 7) = v168;
              v170 = *(v130 - 4);
              v171 = *(v130 - 3);
              v172 = *(v130 - 1);
              *((_OWORD *)v160 - 2) = *(v130 - 2);
              *((_OWORD *)v160 - 1) = v172;
              *((_OWORD *)v160 - 4) = v170;
              *((_OWORD *)v160 - 3) = v171;
              v160 -= 256;
              v130 -= 16;
            }
            while (v130 != v144);
            v130 = (_OWORD *)*v257;
          }
          v143 = v151 + 256;
          a4[10] = v160;
          a4[11] = v151 + 256;
          a4[12] = &v149[256 * v148];
          if (v130)
            operator delete(v130);
        }
        else
        {
          v131 = v269;
          v132 = *(_OWORD *)v270;
          v133 = *(_OWORD *)&v270[32];
          v130[2] = *(_OWORD *)&v270[16];
          v130[3] = v133;
          *v130 = v131;
          v130[1] = v132;
          v134 = *(_OWORD *)&v270[96];
          v136 = *(_OWORD *)&v270[64];
          v135 = *(_OWORD *)&v270[80];
          v130[4] = *(_OWORD *)&v270[48];
          v130[5] = v136;
          v130[6] = v135;
          v130[7] = v134;
          v137 = v299;
          v138 = v300;
          v139 = v302;
          v130[10] = v301;
          v130[11] = v139;
          v130[8] = v137;
          v130[9] = v138;
          v140 = v295;
          v141 = v296;
          v142 = v298;
          v130[14] = v297;
          v130[15] = v142;
          v130[12] = v140;
          v130[13] = v141;
          v143 = v130 + 16;
        }
        a4[11] = v143;
        sub_20E7D4534((_QWORD *)(a1 + 224), &v269, &v299, &v295, v265);
        v292 = *(_OWORD *)&v270[57];
        v293 = *(_OWORD *)&v270[73];
        v294[0] = *(_OWORD *)&v270[89];
        v289 = *(_OWORD *)&v270[9];
        v290 = *(_OWORD *)&v270[25];
        *(_QWORD *)((char *)v294 + 15) = *(_QWORD *)&v270[104];
        v41 = v264;
        v173 = *(_BYTE *)(a1 + 56) ? (v264 - (DWORD2(v269) >> 4)) & 1 : v270[8];
        v291 = *(_OWORD *)&v270[41];
        if (!v270[8])
          break;
        v175 = *(_OWORD **)(a1 + 448);
        v174 = *(_QWORD *)(a1 + 456);
        if ((unint64_t)v175 >= v174)
        {
          v176 = (_OWORD *)*v255;
          v177 = ((uint64_t)v175 - *v255) >> 8;
          v178 = v177 + 1;
          if ((unint64_t)(v177 + 1) >> 56)
            sub_20E78D874();
          v179 = v174 - (_QWORD)v176;
          if (v179 >> 7 > v178)
            v178 = v179 >> 7;
          if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFF00)
            v180 = 0xFFFFFFFFFFFFFFLL;
          else
            v180 = v178;
          if (v180)
          {
            if (HIBYTE(v180))
              sub_20E78D888();
            v181 = (char *)operator new(v180 << 8);
          }
          else
          {
            v181 = 0;
          }
          v203 = &v181[256 * v177];
          *(_OWORD *)v203 = v269;
          v204 = *(_OWORD *)&v270[41];
          *(_OWORD *)(v203 + 73) = *(_OWORD *)&v270[57];
          v205 = *(_OWORD *)&v270[89];
          *(_OWORD *)(v203 + 89) = *(_OWORD *)&v270[73];
          *(_OWORD *)(v203 + 105) = v205;
          v206 = *(_OWORD *)&v270[25];
          *(_OWORD *)(v203 + 25) = *(_OWORD *)&v270[9];
          *((_QWORD *)v203 + 2) = *(_QWORD *)v270;
          v203[24] = v173;
          *((_QWORD *)v203 + 15) = *(_QWORD *)&v270[104];
          *(_OWORD *)(v203 + 41) = v206;
          *(_OWORD *)(v203 + 57) = v204;
          v207 = v302;
          *((_OWORD *)v203 + 10) = v301;
          *((_OWORD *)v203 + 11) = v207;
          v208 = v300;
          *((_OWORD *)v203 + 8) = v299;
          *((_OWORD *)v203 + 9) = v208;
          v209 = v298;
          *((_OWORD *)v203 + 14) = v297;
          *((_OWORD *)v203 + 15) = v209;
          v210 = v296;
          *((_OWORD *)v203 + 12) = v295;
          *((_OWORD *)v203 + 13) = v210;
          v211 = v203;
          if (v175 == v176)
          {
            v4 = v258;
            v41 = v264;
            v57 = v261;
            v55 = v203 + 256;
            *(_QWORD *)(a1 + 440) = v203;
            *(_QWORD *)(a1 + 448) = v203 + 256;
            *(_QWORD *)(a1 + 456) = &v181[256 * v180];
            if (v175)
              goto LABEL_113;
          }
          else
          {
            v57 = v261;
            do
            {
              v212 = *(v175 - 16);
              v213 = *(v175 - 15);
              v214 = *(v175 - 13);
              *((_OWORD *)v211 - 14) = *(v175 - 14);
              *((_OWORD *)v211 - 13) = v214;
              *((_OWORD *)v211 - 16) = v212;
              *((_OWORD *)v211 - 15) = v213;
              v215 = *(v175 - 12);
              v216 = *(v175 - 11);
              v217 = *(v175 - 9);
              *((_OWORD *)v211 - 10) = *(v175 - 10);
              *((_OWORD *)v211 - 9) = v217;
              *((_OWORD *)v211 - 12) = v215;
              *((_OWORD *)v211 - 11) = v216;
              v218 = *(v175 - 8);
              v219 = *(v175 - 7);
              v220 = *(v175 - 5);
              *((_OWORD *)v211 - 6) = *(v175 - 6);
              *((_OWORD *)v211 - 5) = v220;
              *((_OWORD *)v211 - 8) = v218;
              *((_OWORD *)v211 - 7) = v219;
              v221 = *(v175 - 4);
              v222 = *(v175 - 3);
              v223 = *(v175 - 1);
              *((_OWORD *)v211 - 2) = *(v175 - 2);
              *((_OWORD *)v211 - 1) = v223;
              *((_OWORD *)v211 - 4) = v221;
              *((_OWORD *)v211 - 3) = v222;
              v211 -= 256;
              v175 -= 16;
            }
            while (v175 != v176);
            v175 = (_OWORD *)*v255;
            v4 = v258;
            v41 = v264;
            v55 = v203 + 256;
            *(_QWORD *)(a1 + 440) = v211;
            *(_QWORD *)(a1 + 448) = v203 + 256;
            *(_QWORD *)(a1 + 456) = &v181[256 * v180];
            if (v175)
LABEL_113:
              operator delete(v175);
          }
          v56 = v260;
          goto LABEL_28;
        }
        v45 = v269;
        *((_QWORD *)v175 + 2) = *(_QWORD *)v270;
        *v175 = v45;
        *((_BYTE *)v175 + 24) = v173;
        v46 = v290;
        *(_OWORD *)((char *)v175 + 25) = v289;
        *(_OWORD *)((char *)v175 + 41) = v46;
        v47 = v292;
        *(_OWORD *)((char *)v175 + 57) = v291;
        *(_OWORD *)((char *)v175 + 73) = v47;
        v48 = v294[0];
        *(_OWORD *)((char *)v175 + 89) = v293;
        *(_OWORD *)((char *)v175 + 105) = v48;
        *((_QWORD *)v175 + 15) = *(_QWORD *)((char *)v294 + 15);
        v49 = v299;
        v50 = v300;
        v51 = v302;
        v175[10] = v301;
        v175[11] = v51;
        v175[8] = v49;
        v175[9] = v50;
        v52 = v295;
        v53 = v296;
        v54 = v298;
        v175[14] = v297;
        v175[15] = v54;
        v55 = v175 + 16;
        v175[12] = v52;
        v175[13] = v53;
        v4 = v258;
        v56 = v260;
        v57 = v261;
LABEL_28:
        *(_QWORD *)(a1 + 448) = v55;
        v260 = v56 + 1;
        v43 = v57 + 1;
        if (v43 == v259)
          goto LABEL_21;
      }
      v183 = *(char **)(a1 + 472);
      v182 = *(_QWORD *)(a1 + 480);
      if ((unint64_t)v183 >= v182)
        break;
      v184 = v269;
      *((_QWORD *)v183 + 2) = *(_QWORD *)v270;
      *(_OWORD *)v183 = v184;
      v183[24] = v173;
      v185 = v290;
      *(_OWORD *)(v183 + 25) = v289;
      *(_OWORD *)(v183 + 41) = v185;
      v186 = v292;
      *(_OWORD *)(v183 + 57) = v291;
      *(_OWORD *)(v183 + 73) = v186;
      v187 = v294[0];
      *(_OWORD *)(v183 + 89) = v293;
      *(_OWORD *)(v183 + 105) = v187;
      *((_QWORD *)v183 + 15) = *(_QWORD *)((char *)v294 + 15);
      v188 = v299;
      v189 = v300;
      v190 = v302;
      *((_OWORD *)v183 + 10) = v301;
      *((_OWORD *)v183 + 11) = v190;
      *((_OWORD *)v183 + 8) = v188;
      *((_OWORD *)v183 + 9) = v189;
      v191 = v295;
      v192 = v296;
      v193 = v298;
      *((_OWORD *)v183 + 14) = v297;
      *((_OWORD *)v183 + 15) = v193;
      v194 = v183 + 256;
      *((_OWORD *)v183 + 12) = v191;
      *((_OWORD *)v183 + 13) = v192;
      v4 = v258;
      v195 = v256;
      v196 = v261;
LABEL_124:
      *(_QWORD *)(a1 + 472) = v194;
      v256 = v195 + 1;
      v43 = v196 + 1;
      if (v43 == v259)
      {
LABEL_21:
        v40 = *(_DWORD *)(a1 + 24);
        goto LABEL_22;
      }
    }
    v197 = (char *)*v254;
    v198 = (v183 - (_BYTE *)*v254) >> 8;
    v199 = v198 + 1;
    if ((unint64_t)(v198 + 1) >> 56)
      sub_20E78D874();
    v200 = v182 - (_QWORD)v197;
    if (v200 >> 7 > v199)
      v199 = v200 >> 7;
    if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFF00)
      v201 = 0xFFFFFFFFFFFFFFLL;
    else
      v201 = v199;
    if (v201)
    {
      if (HIBYTE(v201))
        sub_20E78D888();
      v202 = (char *)operator new(v201 << 8);
    }
    else
    {
      v202 = 0;
    }
    v224 = &v202[256 * v198];
    *(_OWORD *)v224 = v269;
    v225 = *(_OWORD *)&v270[41];
    *(_OWORD *)(v224 + 73) = *(_OWORD *)&v270[57];
    v226 = *(_OWORD *)&v270[89];
    *(_OWORD *)(v224 + 89) = *(_OWORD *)&v270[73];
    *(_OWORD *)(v224 + 105) = v226;
    v227 = *(_OWORD *)&v270[25];
    *(_OWORD *)(v224 + 25) = *(_OWORD *)&v270[9];
    *((_QWORD *)v224 + 2) = *(_QWORD *)v270;
    v224[24] = v173;
    *((_QWORD *)v224 + 15) = *(_QWORD *)&v270[104];
    *(_OWORD *)(v224 + 41) = v227;
    *(_OWORD *)(v224 + 57) = v225;
    v228 = v302;
    *((_OWORD *)v224 + 10) = v301;
    *((_OWORD *)v224 + 11) = v228;
    v229 = v300;
    *((_OWORD *)v224 + 8) = v299;
    *((_OWORD *)v224 + 9) = v229;
    v230 = v298;
    *((_OWORD *)v224 + 14) = v297;
    *((_OWORD *)v224 + 15) = v230;
    v231 = v296;
    *((_OWORD *)v224 + 12) = v295;
    *((_OWORD *)v224 + 13) = v231;
    v232 = v224;
    if (v183 == v197)
    {
      v4 = v258;
      v41 = v264;
      v196 = v261;
      v194 = v224 + 256;
      *(_QWORD *)(a1 + 464) = v224;
      *(_QWORD *)(a1 + 472) = v224 + 256;
      *(_QWORD *)(a1 + 480) = &v202[256 * v201];
      if (!v183)
        goto LABEL_123;
    }
    else
    {
      v196 = v261;
      do
      {
        v233 = *((_OWORD *)v183 - 16);
        v234 = *((_OWORD *)v183 - 15);
        v235 = *((_OWORD *)v183 - 13);
        *((_OWORD *)v232 - 14) = *((_OWORD *)v183 - 14);
        *((_OWORD *)v232 - 13) = v235;
        *((_OWORD *)v232 - 16) = v233;
        *((_OWORD *)v232 - 15) = v234;
        v236 = *((_OWORD *)v183 - 12);
        v237 = *((_OWORD *)v183 - 11);
        v238 = *((_OWORD *)v183 - 9);
        *((_OWORD *)v232 - 10) = *((_OWORD *)v183 - 10);
        *((_OWORD *)v232 - 9) = v238;
        *((_OWORD *)v232 - 12) = v236;
        *((_OWORD *)v232 - 11) = v237;
        v239 = *((_OWORD *)v183 - 8);
        v240 = *((_OWORD *)v183 - 7);
        v241 = *((_OWORD *)v183 - 5);
        *((_OWORD *)v232 - 6) = *((_OWORD *)v183 - 6);
        *((_OWORD *)v232 - 5) = v241;
        *((_OWORD *)v232 - 8) = v239;
        *((_OWORD *)v232 - 7) = v240;
        v242 = *((_OWORD *)v183 - 4);
        v243 = *((_OWORD *)v183 - 3);
        v244 = *((_OWORD *)v183 - 1);
        *((_OWORD *)v232 - 2) = *((_OWORD *)v183 - 2);
        *((_OWORD *)v232 - 1) = v244;
        *((_OWORD *)v232 - 4) = v242;
        *((_OWORD *)v232 - 3) = v243;
        v232 -= 256;
        v183 -= 256;
      }
      while (v183 != v197);
      v183 = (char *)*v254;
      v4 = v258;
      v41 = v264;
      v194 = v224 + 256;
      *(_QWORD *)(a1 + 464) = v232;
      *(_QWORD *)(a1 + 472) = v224 + 256;
      *(_QWORD *)(a1 + 480) = &v202[256 * v201];
      if (!v183)
        goto LABEL_123;
    }
    operator delete(v183);
LABEL_123:
    v195 = v256;
    goto LABEL_124;
  }
  v256 = 0;
  v260 = 0;
LABEL_129:
  v245 = (char *)(*(_QWORD *)(a1 + 464) + ((v253 - v252) << 24 >> 24));
  sub_20E7D5B24(v251, v245, *(char **)(a1 + 472), (uint64_t)(*(_QWORD *)(a1 + 472) - (_QWORD)v245) >> 8);
  v246 = (char *)(*(_QWORD *)(a1 + 440) + ((v250 - v249) << 24 >> 24));
  result = sub_20E7D5B24(v248, v246, *(char **)(a1 + 448), (uint64_t)(*(_QWORD *)(a1 + 448) - (_QWORD)v246) >> 8);
  if (v260 + v256 != (uint64_t)(a4[11] - a4[10]) >> 8)
    sub_20E80C8F0();
  return result;
}

uint64_t sub_20E7F05D8(uint64_t a1, uint64_t a2, int a3, signed int a4, unsigned int *a5, double a6, double a7)
{
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  uint64_t v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  uint64_t v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  uint64_t result;
  int32x2_t v137;
  int v138;
  int v139;
  int v140;
  __int128 v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  __int128 v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;

  sub_20E7F2054(a1, a2, a4, a3, (uint64_t)&v170, (uint64_t)&v141, &v137, a6, a7);
  sub_20E7F2868(a1 + 224, &v170, &v141, a4 - 1);
  v11 = 144 * v137.i32[0];
  *a5 = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v11, *(double *)&v170, *(double *)&v141, v12, v13, v14, v15);
  a5[1] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v11, *((double *)&v170 + 1), *((double *)&v141 + 1), v16, v17, v18, v19);
  a5[2] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v11, v171, v142, v20, v21, v22, v23);
  a5[3] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v11, v172, v143, v24, v25, v26, v27);
  a5[4] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v11, v173, v144, v28, v29, v30, v31);
  a5[5] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v11, v174, v145, v32, v33, v34, v35);
  v36 = 144 * v137.i32[1];
  a5[6] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v36, v175, v146, v37, v38, v39, v40);
  a5[7] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v36, v176, v147, v41, v42, v43, v44);
  a5[8] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v36, v177, v148, v45, v46, v47, v48);
  a5[9] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v36, v178, v149, v49, v50, v51, v52);
  a5[10] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v36, v179, v150, v53, v54, v55, v56);
  a5[11] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v36, v180, v151, v57, v58, v59, v60);
  v61 = 144 * v138;
  a5[12] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v61, v181, v152, v62, v63, v64, v65);
  a5[13] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v61, v182, v153, v66, v67, v68, v69);
  a5[14] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v61, v183, v154, v70, v71, v72, v73);
  a5[15] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v61, v184, v155, v74, v75, v76, v77);
  a5[16] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v61, v185, v156, v78, v79, v80, v81);
  a5[17] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v61, v186, v157, v82, v83, v84, v85);
  v86 = 144 * v139;
  a5[18] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v86, v187, v158, v87, v88, v89, v90);
  a5[19] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v86, v188, v159, v91, v92, v93, v94);
  a5[20] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v86, v189, v160, v95, v96, v97, v98);
  a5[21] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v86, v190, v161, v99, v100, v101, v102);
  a5[22] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v86, v191, v162, v103, v104, v105, v106);
  a5[23] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v86, v192, v163, v107, v108, v109, v110);
  v111 = 144 * v140;
  a5[24] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v111, v193, v164, v112, v113, v114, v115);
  a5[25] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v111, v194, v165, v116, v117, v118, v119);
  a5[26] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v111, v195, v166, v120, v121, v122, v123);
  a5[27] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v111, v196, v167, v124, v125, v126, v127);
  a5[28] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v111, v197, v168, v128, v129, v130, v131);
  result = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v111, v198, v169, v132, v133, v134, v135);
  a5[29] = result;
  return result;
}

double sub_20E7F0958(uint64_t a1, _DWORD *a2, double *a3, double *a4, double *a5)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double result;

  v8 = a2[1];
  v9 = a2[3];
  v10 = a2[4];
  v11 = v8 + v9 - (*a2 + v10);
  v12 = v8 + *a2 - (v9 + v10);
  v13 = a2[10];
  v14 = a2[11];
  v15 = a2[8];
  v16 = a2[7];
  v17 = v16 + v15 - (v13 + v14);
  v18 = v16 - (v15 + v13);
  v20 = a2[12];
  v19 = a2[13];
  v21 = a2[15];
  v22 = a2[16];
  v23 = v19 + v21 + v11 - (v20 + v22);
  v24 = v19 + v20 + v12 - (v21 + v22);
  v25 = a2[22];
  v26 = a2[23];
  v27 = a2[20];
  v28 = a2[19];
  v29 = v28 + v27 + v17 - (v25 + v26);
  v30 = v28 + v14 + v18 - (v27 + v25) + v26;
  v32 = a2[24];
  v31 = a2[25];
  v33 = a2[28];
  v34 = a2[27];
  v35 = v31
      + v34
      + v23
      - (v32
       + v33)
      + ((1550 * v29 + 512) >> 10)
      + ((1941 * (a2[2] + a2[14] + a2[26] - (a2[5] + a2[17] + a2[29])) + 512) >> 10);
  v36 = v30
      + ((1941 * (a2[9] + a2[21] - (a2[6] + a2[18])) + 512) >> 10)
      + ((1550 * (v31 + v32 + v24 - (v34 + v33)) + 512) >> 10);
  v37 = 0.0;
  if (v36 | v35)
    v37 = (double)(int)sub_20E7F9530(v36, v35);
  *a3 = v37;
  v38 = sub_20E7F9714(13, (double)(v35 * (uint64_t)v35 + v36 * (uint64_t)v36));
  if (v36 | v35)
  {
    v40 = sub_20E7F9670(v38);
    v41 = sub_20E7F9714(13, (double)v35);
    v42 = sub_20E7F9714(13, (double)v36);
    *a4 = sub_20E7F9714(13, v40 * v41);
    v39 = sub_20E7F9714(13, v40 * v42);
  }
  else
  {
    *a4 = 1.0;
    v39 = 0.0;
  }
  *a5 = v39;
  *a4 = floor(*a4 * 256.0 + 0.5) * 0.00390625;
  result = floor(*a5 * 256.0 + 0.5) * 0.00390625;
  *a5 = result;
  return result;
}

uint64_t sub_20E7F0B88(uint64_t a1, uint64_t a2, int a3, signed int a4, unsigned int *a5, double a6, double a7, double a8, double a9)
{
  int v16;
  unsigned int *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t result;
  _BYTE v46[28];
  _BYTE v47[336];
  _BYTE __src[336];
  double v49;
  double v50[2];

  v49 = a9;
  v50[0] = a8;
  v16 = *(_DWORD *)(a1 + 24) - 1;
  if (v16 >= a4)
    v16 = a4;
  *a5 = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + 144 * v16, floor(floor(a6 / (double)(1 << (a4 >> 1)) * 128.0 + 0.5) * 0.0078125 * 64.0 + 0.5) * 0.015625, floor(floor(a7 / (double)(1 << (a4 >> 1)) * 128.0 + 0.5) * 0.0078125 * 64.0 + 0.5) * 0.015625, 128.0, 0.5, 0.0078125, 64.0);
  v17 = a5 + 3;
  sub_20E7F25A8(a1, a2, a4, a3, (uint64_t)__src, (uint64_t)v47, (uint64_t)v46, v50, a6, a7, &v49);
  sub_20E7F2C28(a1 + 224, __src, v47, a4 - 1);
  v22 = 0;
  for (i = 0; i != 28; i += 4)
  {
    v24 = 144 * *(int *)&v46[i];
    *(v17 - 2) = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v24, *(double *)&__src[v22], *(double *)&v47[v22], v18, v19, v20, v21);
    *(v17 - 1) = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v24, *(double *)&__src[v22 + 8], *(double *)&v47[v22 + 8], v25, v26, v27, v28);
    *v17 = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v24, *(double *)&__src[v22 + 16], *(double *)&v47[v22 + 16], v29, v30, v31, v32);
    v17[1] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v24, *(double *)&__src[v22 + 24], *(double *)&v47[v22 + 24], v33, v34, v35, v36);
    v17[2] = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v24, *(double *)&__src[v22 + 32], *(double *)&v47[v22 + 32], v37, v38, v39, v40);
    result = sub_20E7F2F24(*(_QWORD *)(a2 + 48) + v24, *(double *)&__src[v22 + 40], *(double *)&v47[v22 + 40], v41, v42, v43, v44);
    v17[3] = result;
    v22 += 48;
    v17 += 6;
  }
  return result;
}

void sub_20E7F0D98(uint64_t a1@<X0>, char **a2@<X8>)
{
  char **v2;
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  unint64_t v42;
  int v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  unint64_t v61;
  __int128 *v62;
  __int128 *v63;
  unint64_t v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t **v113;
  uint64_t *v114;
  uint64_t **v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  _BYTE *v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t **v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char **v142;
  _QWORD *v143;
  _OWORD v144[5];
  _OWORD v145[5];
  _QWORD v146[5];

  v2 = a2;
  v146[2] = *MEMORY[0x24BDAC8D0];
  memset(v145, 0, sizeof(v145));
  v144[2] = xmmword_20E80FF78;
  v144[3] = unk_20E80FF88;
  v144[4] = xmmword_20E80FF98;
  v144[0] = xmmword_20E80FF58;
  v144[1] = unk_20E80FF68;
  memset(v146, 0, 10);
  v3 = *(_DWORD *)(a1 + 24);
  if ((v3 - 1) <= 1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v5 = *(_QWORD *)(a1 + 368);
  v6 = v3 - 2;
  if (v6 >= 2)
  {
    v9 = 0;
    v10 = 0;
    v8 = v6 | 1;
    v11 = (uint64_t *)(v5 + 24);
    v12 = v6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v13 = *(v11 - 3);
      v14 = *(v11 - 2);
      v16 = *v11;
      v15 = v11[1];
      v11 += 6;
      v9 += (v14 - v13) >> 7;
      v10 += (v15 - v16) >> 7;
      v12 -= 2;
    }
    while (v12);
    v7 = v10 + v9;
    if (v6 == (v6 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_11;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v17 = ~v8 + v3;
  v18 = (uint64_t *)(v5 + 24 * v8 - 24);
  do
  {
    v20 = *v18;
    v19 = v18[1];
    v18 += 3;
    v7 += (v19 - v20) >> 7;
    --v17;
  }
  while (v17);
LABEL_11:
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v143 = 0;
  v142 = v2;
  if ((v3 - 3) > 0xFFFFFFFD)
    goto LABEL_44;
  v140 = v7;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  do
  {
    if (v21 < v22)
    {
      *(_QWORD *)v21 = v23;
      v26 = (uint64_t)(v21 + 8);
      goto LABEL_14;
    }
    v27 = (v21 - v24) >> 3;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 61)
      sub_20E78D874();
    if ((v22 - v24) >> 2 > v28)
      v28 = (v22 - v24) >> 2;
    if ((unint64_t)(v22 - v24) >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
    {
      if (v29 >> 61)
        sub_20E78D888();
      v30 = operator new(8 * v29);
      v31 = &v30[8 * v27];
      *v31 = v23;
      v26 = (uint64_t)(v31 + 1);
      if (v21 == v24)
        goto LABEL_30;
    }
    else
    {
      v30 = 0;
      v31 = (_QWORD *)(8 * v27);
      *(_QWORD *)(8 * v27) = v23;
      v26 = 8 * v27 + 8;
      if (v21 == v24)
        goto LABEL_30;
    }
    v32 = v21 - 8 - v24;
    if (v32 >= 0x168)
    {
      if (&v30[v21 - v24 - 8 - (v32 & 0xFFFFFFFFFFFFFFF8)] > &v30[v21 - v24 - 8])
      {
        v33 = v21;
      }
      else if (&v21[-(v32 & 0xFFFFFFFFFFFFFFF8) - 8] > v21 - 8)
      {
        v33 = v21;
      }
      else if ((unint64_t)(v24 - v30) >= 0x20)
      {
        v36 = (v32 >> 3) + 1;
        v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        v33 = &v21[-v37];
        v31 = (_QWORD *)((char *)v31 - v37);
        v38 = &v30[8 * v27 - 16];
        v39 = v21 - 16;
        v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v41 = *(_OWORD *)v39;
          *(v38 - 1) = *((_OWORD *)v39 - 1);
          *v38 = v41;
          v38 -= 2;
          v39 -= 32;
          v40 -= 4;
        }
        while (v40);
        if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_30;
      }
      else
      {
        v33 = v21;
      }
    }
    else
    {
      v33 = v21;
    }
    do
    {
      v34 = *((_QWORD *)v33 - 1);
      v33 -= 8;
      *--v31 = v34;
    }
    while (v33 != v24);
LABEL_30:
    v22 = &v30[8 * v29];
    v143 = v31;
    if (v24)
    {
      v35 = v26;
      operator delete(v24);
      v26 = v35;
      v3 = *(_DWORD *)(a1 + 24);
    }
    v24 = (char *)v31;
LABEL_14:
    v23 += (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 368) + 24 * v25 - 16)
                   - *(_QWORD *)(*(_QWORD *)(a1 + 368) + 24 * v25 - 24)) >> 7;
    ++v25;
    v21 = (char *)v26;
  }
  while (v25 < v3 - 1);
  v7 = v140;
  v2 = v142;
LABEL_44:
  if (v7)
  {
    v42 = 0;
    v138 = (uint64_t **)(a1 + 496);
    v43 = 1;
    do
    {
      BYTE1(v146[1]) = 0;
      *(_QWORD *)((char *)v146 + 1) = 0;
      v137 = v43;
      do
      {
        if ((v3 - 3) > 0xFFFFFFFD)
          break;
        v44 = 0;
        v45 = 1;
        do
        {
          v46 = *(_QWORD *)(a1 + 368);
          if ((_DWORD)v45 == 1)
            goto LABEL_130;
          v47 = *((_DWORD *)&dword_20E80FFD4 + (int)v45);
          v48 = __OFSUB__(v43, v47);
          v49 = v43 - v47;
          if (v49 < 0 == v48)
          {
            v50 = (v45 & 0x80000000) == 0 ? v45 : (int)v45 + 1;
            v51 = v49 & 0xF;
            v53 = -v49;
            v52 = v53 < 0;
            v54 = v53 & 0xF;
            v55 = v52 ? v51 : -v54;
            if (v55 < 1 << (4 - (v50 >> 1)))
            {
LABEL_130:
              if (!*((_BYTE *)v146 + v45))
              {
                v56 = 24 * (v45 - 1);
                v57 = *((_QWORD *)v145 + v45);
                v58 = *(_QWORD *)(v46 + v56 + 8);
                v59 = *(_QWORD *)(v46 + v56);
                if (v57 < (v58 - v59) >> 7)
                {
                  v60 = (__int128 *)(v59 + (v57 << 7));
                  v61 = *((_QWORD *)v144 + v45);
                  if (v61 >= (unsigned __int16)*((_DWORD *)v60 + 1) >> 6)
                  {
                    v139 = *((_QWORD *)v145 + v45);
                    v141 = v7;
                    v62 = (__int128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 392) + v56) + (v57 << 6));
                    v63 = (__int128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 416) + v56) + (v57 << 6));
                    v65 = v2[1];
                    v64 = (unint64_t)v2[2];
                    if ((unint64_t)v65 >= v64)
                    {
                      v79 = *v2;
                      v80 = (v65 - *v2) >> 8;
                      v81 = v80 + 1;
                      if ((unint64_t)(v80 + 1) >> 56)
                        sub_20E78D874();
                      v82 = v64 - (_QWORD)v79;
                      if (v82 >> 7 > v81)
                        v81 = v82 >> 7;
                      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFF00)
                        v83 = 0xFFFFFFFFFFFFFFLL;
                      else
                        v83 = v81;
                      if (v83)
                      {
                        v136 = v42;
                        if (HIBYTE(v83))
                          sub_20E78D888();
                        v84 = v83;
                        v85 = (char *)operator new(v83 << 8);
                        v83 = v84;
                        v42 = v136;
                      }
                      else
                      {
                        v85 = 0;
                      }
                      v86 = &v85[256 * v80];
                      v87 = *v60;
                      v88 = v60[1];
                      v89 = v60[3];
                      *((_OWORD *)v86 + 2) = v60[2];
                      *((_OWORD *)v86 + 3) = v89;
                      *(_OWORD *)v86 = v87;
                      *((_OWORD *)v86 + 1) = v88;
                      v90 = v60[4];
                      v91 = v60[5];
                      v92 = v60[7];
                      *((_OWORD *)v86 + 6) = v60[6];
                      *((_OWORD *)v86 + 7) = v92;
                      *((_OWORD *)v86 + 4) = v90;
                      *((_OWORD *)v86 + 5) = v91;
                      v93 = *v62;
                      v94 = v62[1];
                      v95 = v62[3];
                      *((_OWORD *)v86 + 10) = v62[2];
                      *((_OWORD *)v86 + 11) = v95;
                      *((_OWORD *)v86 + 8) = v93;
                      *((_OWORD *)v86 + 9) = v94;
                      v96 = *v63;
                      v97 = v63[1];
                      v98 = v63[3];
                      *((_OWORD *)v86 + 14) = v63[2];
                      *((_OWORD *)v86 + 15) = v98;
                      *((_OWORD *)v86 + 12) = v96;
                      *((_OWORD *)v86 + 13) = v97;
                      v99 = v86;
                      if (v65 != v79)
                      {
                        do
                        {
                          v100 = *((_OWORD *)v65 - 16);
                          v101 = *((_OWORD *)v65 - 15);
                          v102 = *((_OWORD *)v65 - 13);
                          *((_OWORD *)v99 - 14) = *((_OWORD *)v65 - 14);
                          *((_OWORD *)v99 - 13) = v102;
                          *((_OWORD *)v99 - 16) = v100;
                          *((_OWORD *)v99 - 15) = v101;
                          v103 = *((_OWORD *)v65 - 12);
                          v104 = *((_OWORD *)v65 - 11);
                          v105 = *((_OWORD *)v65 - 9);
                          *((_OWORD *)v99 - 10) = *((_OWORD *)v65 - 10);
                          *((_OWORD *)v99 - 9) = v105;
                          *((_OWORD *)v99 - 12) = v103;
                          *((_OWORD *)v99 - 11) = v104;
                          v106 = *((_OWORD *)v65 - 8);
                          v107 = *((_OWORD *)v65 - 7);
                          v108 = *((_OWORD *)v65 - 5);
                          *((_OWORD *)v99 - 6) = *((_OWORD *)v65 - 6);
                          *((_OWORD *)v99 - 5) = v108;
                          *((_OWORD *)v99 - 8) = v106;
                          *((_OWORD *)v99 - 7) = v107;
                          v109 = *((_OWORD *)v65 - 4);
                          v110 = *((_OWORD *)v65 - 3);
                          v111 = *((_OWORD *)v65 - 1);
                          *((_OWORD *)v99 - 2) = *((_OWORD *)v65 - 2);
                          *((_OWORD *)v99 - 1) = v111;
                          *((_OWORD *)v99 - 4) = v109;
                          *((_OWORD *)v99 - 3) = v110;
                          v99 -= 256;
                          v65 -= 256;
                        }
                        while (v65 != v79);
                        v65 = v79;
                      }
                      v78 = v86 + 256;
                      *v142 = v99;
                      v142[1] = v86 + 256;
                      v142[2] = &v85[256 * v83];
                      if (v65)
                        operator delete(v65);
                    }
                    else
                    {
                      v66 = *v60;
                      v67 = v60[1];
                      v68 = v60[3];
                      *((_OWORD *)v65 + 2) = v60[2];
                      *((_OWORD *)v65 + 3) = v68;
                      *(_OWORD *)v65 = v66;
                      *((_OWORD *)v65 + 1) = v67;
                      v69 = v60[4];
                      v70 = v60[5];
                      v71 = v60[7];
                      *((_OWORD *)v65 + 6) = v60[6];
                      *((_OWORD *)v65 + 7) = v71;
                      *((_OWORD *)v65 + 4) = v69;
                      *((_OWORD *)v65 + 5) = v70;
                      v72 = *v62;
                      v73 = v62[1];
                      v74 = v62[3];
                      *((_OWORD *)v65 + 10) = v62[2];
                      *((_OWORD *)v65 + 11) = v74;
                      *((_OWORD *)v65 + 8) = v72;
                      *((_OWORD *)v65 + 9) = v73;
                      v75 = *v63;
                      v76 = v63[1];
                      v77 = v63[3];
                      *((_OWORD *)v65 + 14) = v63[2];
                      *((_OWORD *)v65 + 15) = v77;
                      *((_OWORD *)v65 + 12) = v75;
                      *((_OWORD *)v65 + 13) = v76;
                      v78 = v65 + 256;
                    }
                    v2 = v142;
                    v142[1] = v78;
                    v112 = v143[v45 - 1];
                    v113 = (uint64_t **)(a1 + 496);
                    while (1)
                    {
                      v114 = *v113;
                      v115 = v113;
                      if (!*v113)
                        break;
                      while (1)
                      {
                        v113 = (uint64_t **)v114;
                        v116 = v114[4];
                        if (v42 < v116)
                          break;
                        if (v116 >= v42)
                        {
                          v117 = (uint64_t *)v113;
                          v120 = v139;
                          v123 = v141;
                          v43 = v137;
                          goto LABEL_115;
                        }
                        v114 = v113[1];
                        if (!v114)
                        {
                          v115 = v113 + 1;
                          goto LABEL_89;
                        }
                      }
                    }
LABEL_89:
                    v117 = (uint64_t *)operator new(0x30uLL);
                    v117[4] = v42;
                    v117[5] = 0;
                    *v117 = 0;
                    v117[1] = 0;
                    v117[2] = (uint64_t)v113;
                    *v115 = v117;
                    v118 = **(_QWORD **)(a1 + 488);
                    v119 = v117;
                    if (v118)
                    {
                      *(_QWORD *)(a1 + 488) = v118;
                      v119 = *v115;
                    }
                    v120 = v139;
                    v121 = *v138;
                    v122 = v119 == *v138;
                    *((_BYTE *)v119 + 24) = v122;
                    v123 = v141;
                    v43 = v137;
                    if (!v122)
                    {
                      do
                      {
                        v124 = v119[2];
                        if (*(_BYTE *)(v124 + 24))
                          break;
                        v125 = *(uint64_t **)(v124 + 16);
                        v126 = *v125;
                        if (*v125 == v124)
                        {
                          v129 = v125[1];
                          if (!v129 || (v130 = *(unsigned __int8 *)(v129 + 24), v127 = (_BYTE *)(v129 + 24), v130))
                          {
                            if (*(uint64_t **)v124 == v119)
                            {
                              *(_BYTE *)(v124 + 24) = 1;
                              *((_BYTE *)v125 + 24) = 0;
                              v133 = *(_QWORD *)(v124 + 8);
                              *v125 = v133;
                              if (v133)
                                goto LABEL_106;
                            }
                            else
                            {
                              v131 = *(uint64_t **)(v124 + 8);
                              v132 = *v131;
                              *(_QWORD *)(v124 + 8) = *v131;
                              if (v132)
                              {
                                *(_QWORD *)(v132 + 16) = v124;
                                v125 = *(uint64_t **)(v124 + 16);
                              }
                              v131[2] = (uint64_t)v125;
                              *(_QWORD *)(*(_QWORD *)(v124 + 16) + 8 * (**(_QWORD **)(v124 + 16) != v124)) = v131;
                              *v131 = v124;
                              *(_QWORD *)(v124 + 16) = v131;
                              v125 = (uint64_t *)v131[2];
                              v124 = *v125;
                              *((_BYTE *)v131 + 24) = 1;
                              *((_BYTE *)v125 + 24) = 0;
                              v133 = *(_QWORD *)(v124 + 8);
                              *v125 = v133;
                              if (v133)
LABEL_106:
                                *(_QWORD *)(v133 + 16) = v125;
                            }
                            *(_QWORD *)(v124 + 16) = v125[2];
                            *(_QWORD *)(v125[2] + 8 * (*(_QWORD *)v125[2] != (_QWORD)v125)) = v124;
                            *(_QWORD *)(v124 + 8) = v125;
LABEL_113:
                            v125[2] = v124;
                            break;
                          }
                        }
                        else if (!v126 || (v128 = *(unsigned __int8 *)(v126 + 24), v127 = (_BYTE *)(v126 + 24), v128))
                        {
                          if (*(uint64_t **)v124 == v119)
                          {
                            v135 = v119[1];
                            *(_QWORD *)v124 = v135;
                            if (v135)
                            {
                              *(_QWORD *)(v135 + 16) = v124;
                              v125 = *(uint64_t **)(v124 + 16);
                            }
                            v119[2] = (uint64_t)v125;
                            *(_QWORD *)(*(_QWORD *)(v124 + 16) + 8 * (**(_QWORD **)(v124 + 16) != v124)) = v119;
                            v119[1] = v124;
                            *(_QWORD *)(v124 + 16) = v119;
                            v125 = (uint64_t *)v119[2];
                            *((_BYTE *)v119 + 24) = 1;
                            *((_BYTE *)v125 + 24) = 0;
                            v124 = v125[1];
                            v134 = *(uint64_t **)v124;
                            v125[1] = *(_QWORD *)v124;
                            if (v134)
LABEL_111:
                              v134[2] = (uint64_t)v125;
                          }
                          else
                          {
                            *(_BYTE *)(v124 + 24) = 1;
                            *((_BYTE *)v125 + 24) = 0;
                            v124 = v125[1];
                            v134 = *(uint64_t **)v124;
                            v125[1] = *(_QWORD *)v124;
                            if (v134)
                              goto LABEL_111;
                          }
                          *(_QWORD *)(v124 + 16) = v125[2];
                          *(_QWORD *)(v125[2] + 8 * (*(_QWORD *)v125[2] != (_QWORD)v125)) = v124;
                          *(_QWORD *)v124 = v125;
                          goto LABEL_113;
                        }
                        *(_BYTE *)(v124 + 24) = 1;
                        v119 = v125;
                        *((_BYTE *)v125 + 24) = v125 == v121;
                        *v127 = 1;
                      }
                      while (v125 != v121);
                    }
                    ++*(_QWORD *)(a1 + 504);
                    v2 = v142;
LABEL_115:
                    v117[5] = v112 + v120;
                    ++v42;
                    ++*((_QWORD *)v145 + v45);
                    v7 = v123 - 1;
                    v3 = *(_DWORD *)(a1 + 24);
                    v44 = 1;
                  }
                  else
                  {
                    *((_QWORD *)v144 + v45) = v61 + 1;
                    *((_BYTE *)v146 + v45) = 1;
                  }
                }
              }
            }
          }
          ++v45;
        }
        while (v45 < v3 - 1);
      }
      while ((v44 & 1) != 0);
      ++v43;
    }
    while (v7);
  }
  if (v143)
    operator delete(v143);
}

void sub_20E7F16F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = *(void **)a15;
    if (!*(_QWORD *)a15)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = *(void **)a15;
    if (!*(_QWORD *)a15)
      goto LABEL_3;
  }
  *(_QWORD *)(a15 + 8) = v18;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_20E7F1748(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  __int128 *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _DWORD *v55;
  int *v56;
  int v57;
  int v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t **v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t **v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 *v78;
  _OWORD *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t i;
  __int32 v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t __n;
  unint64_t v108;
  _QWORD **v109;
  uint64_t v110;
  uint64_t v111;
  void **v112;
  uint64_t **v113;
  unint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  void *__p[3];
  _OWORD v121[4];
  _OWORD v122[4];
  unsigned int v123[16];
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  __int128 __dst;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE v134[84];
  uint64_t v135;

  v2 = a2;
  v135 = *MEMORY[0x24BDAC8D0];
  v108 = *(_QWORD *)(a1 + 48);
  v118 = *(_QWORD *)(a1 + 40);
  v116 = *(_QWORD *)(a1 + 32);
  v106 = (v116 & 0xFFFFFFFFFFFFFFE0) + 96;
  v3 = v106 * v118;
  v4 = *(char **)(a2 + 152);
  v5 = *(char **)(a2 + 160);
  v6 = (_QWORD *)(a2 + 152);
  v7 = (v5 - v4) >> 2;
  if (v106 * v118 <= v7)
  {
    if (v3 < v7)
    {
      v5 = &v4[4 * v3];
      *(_QWORD *)(a2 + 160) = v5;
    }
  }
  else
  {
    sub_20E78F7D4((uint64_t)v6, v106 * v118 - v7);
    v4 = *(char **)(v2 + 152);
    v5 = *(char **)(v2 + 160);
  }
  v8 = v5 - v4;
  if (v8 >= 1)
    bzero(v4, 4 * (((unint64_t)v8 >> 2) - ((unint64_t)v8 > 3)) + 4);
  v126 = 0u;
  v127 = 0u;
  v124 = 0u;
  v125 = 0u;
  memset(v123, 0, sizeof(v123));
  memset(v122, 0, sizeof(v122));
  memset(v121, 0, sizeof(v121));
  v9 = *(_QWORD *)(v2 + 176);
  v10 = *(_QWORD *)(v2 + 184);
  v11 = (void **)(v2 + 176);
  v12 = 0x8F5C28F5C28F5C29 * ((v10 - v9) >> 3);
  if (32 * v118 <= v12)
  {
    if (32 * v118 < v12)
    {
      v10 = v9 + 6400 * v118;
      *(_QWORD *)(v2 + 184) = v10;
    }
  }
  else
  {
    sub_20E7D5C6C((void **)(v2 + 176), 32 * v118 - v12);
    v9 = *(_QWORD *)(v2 + 176);
    v10 = *(_QWORD *)(v2 + 184);
  }
  memset(&v134[12], 0, 72);
  v13 = v10 - v9;
  if (v13 >= 1)
  {
    v14 = v13 / 0xC8uLL + 1;
    v15 = v9 + 20;
    do
    {
      *(_DWORD *)(v15 - 4) = 0x3FFF;
      v16 = __dst;
      v17 = v129;
      v18 = v131;
      *(_OWORD *)(v15 + 32) = v130;
      *(_OWORD *)(v15 + 48) = v18;
      *(_OWORD *)v15 = v16;
      *(_OWORD *)(v15 + 16) = v17;
      v19 = v132;
      v20 = v133;
      v21 = *(_OWORD *)&v134[16];
      *(_OWORD *)(v15 + 96) = *(_OWORD *)v134;
      *(_OWORD *)(v15 + 112) = v21;
      *(_OWORD *)(v15 + 64) = v19;
      *(_OWORD *)(v15 + 80) = v20;
      v22 = *(_OWORD *)&v134[32];
      v23 = *(_OWORD *)&v134[48];
      v24 = *(_OWORD *)&v134[64];
      *(_DWORD *)(v15 + 176) = *(_DWORD *)&v134[80];
      *(_OWORD *)(v15 + 144) = v23;
      *(_OWORD *)(v15 + 160) = v24;
      *(_OWORD *)(v15 + 128) = v22;
      --v14;
      v15 += 200;
    }
    while (v14 > 1);
  }
  sub_20E7F0D98(a1, (char **)__p);
  sub_20E7938D0(v2 + 8, *(_QWORD **)(v2 + 16));
  *(_QWORD *)(v2 + 8) = v2 + 16;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  v113 = (uint64_t **)(v2 + 16);
  v25 = *(_QWORD *)(v2 + 88) - *(_QWORD *)(v2 + 80);
  if (!v25)
  {
    v26 = 0;
    goto LABEL_76;
  }
  v109 = (_QWORD **)(v2 + 8);
  v110 = v2;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = v116 >> 5;
  v30 = v25 >> 8;
  v31 = a1;
  v32 = (char *)__p[0];
  v112 = (void **)(v2 + 176);
  v117 = v116 >> 5;
  if (v116 >> 5 <= 1)
    v29 = 1;
  __n = 4 * v29;
  if (v30 <= 1)
    v33 = 1;
  else
    v33 = v30;
  v114 = v29;
  v115 = v6;
  v105 = v29 & 0x7FFFFFFFFFFFFF8;
  v111 = v33;
  do
  {
    while (1)
    {
      v34 = &v32[256 * v28];
      v35 = *(unsigned __int16 *)v34;
      v36 = *((_DWORD *)v34 + 1);
      v37 = v34[12];
      v38 = *((_DWORD *)v34 + 4);
      v39 = *((_DWORD *)v34 + 5);
      v40 = v34[24];
      v41 = (v37 >> 5) | (8 * v40);
      v42 = v124.u32[v41];
      if ((_DWORD)v42)
        break;
      if (!(v27 & 1 | (v26 >= v118)))
      {
        v44 = v123[v41];
        if (v108 > v44)
        {
          v45 = 4 * v41;
          v43 = v26 * v106;
          *(_DWORD *)((char *)v122 + v45) = v26 * v106;
          *(_DWORD *)((char *)v121 + v45) = 32 * v26++;
          v123[(unint64_t)v45 / 4] = v44 + 1;
          goto LABEL_30;
        }
      }
LABEL_21:
      v27 = 1;
      if (++v28 == v33)
        goto LABEL_69;
    }
    if ((v27 & 1) != 0)
      goto LABEL_21;
    v43 = *((_DWORD *)v122 + v41);
LABEL_30:
    v46 = v35 | (v36 << 16);
    v47 = ((v39 & 7) << 28) | ((v38 & 0x3FFF) << 8);
    v48 = v43 + 2 * v42;
    v49 = *v115;
    *(_DWORD *)(*v115 + 4 * v48) = v46;
    *(_DWORD *)(v49 + 4 * (v48 + 1)) = v47 | (v40 << 31) | v37;
    if (v117 == 16 && !*(_BYTE *)(v31 + 57))
    {
      v50 = (__int128 *)(v34 + 128);
      if (v116 <= 0x1F)
        goto LABEL_33;
LABEL_35:
      v51 = v117 * v42;
      if (v114 >= 0xC && (v52 = v49 + 4 * (v51 + v43), (unint64_t)(v52 - (_QWORD)v50 + 384) >= 0x20))
      {
        v78 = v50 + 1;
        v79 = (_OWORD *)(v52 + 400);
        v80 = v105;
        do
        {
          v81 = *v78;
          *(v79 - 1) = *(v78 - 1);
          *v79 = v81;
          v78 += 2;
          v79 += 2;
          v80 -= 8;
        }
        while (v80);
        v53 = v105;
        if (v114 == v105)
          goto LABEL_40;
      }
      else
      {
        v53 = 0;
      }
      v54 = v114 - v53;
      v55 = (_DWORD *)(v49 + 4 * (v53 + v51 + v43) + 384);
      v56 = (int *)v50 + v53;
      do
      {
        v57 = *v56++;
        *v55++ = v57;
        --v54;
      }
      while (v54);
LABEL_40:
      *(_DWORD *)(v49 + 4 * (v42 + v43 + 64)) = 0;
      v130 = 0u;
      v131 = 0u;
      __dst = 0u;
      v129 = 0u;
      memcpy(&__dst, v50, __n);
      goto LABEL_41;
    }
    v50 = (__int128 *)(v34 + 192);
    if (v116 > 0x1F)
      goto LABEL_35;
LABEL_33:
    *(_DWORD *)(v49 + 4 * (v42 + v43 + 64)) = 0;
    v130 = 0u;
    v131 = 0u;
    __dst = 0u;
    v129 = 0u;
LABEL_41:
    v58 = *((_DWORD *)v121 + v41);
    v59 = (uint64_t **)(a1 + 496);
    while (1)
    {
      v60 = *v59;
      v61 = v59;
      if (!*v59)
        break;
      while (1)
      {
        v59 = (uint64_t **)v60;
        v62 = v60[4];
        if (v28 < v62)
          break;
        if (v62 >= v28)
        {
          v63 = (uint64_t *)v59;
          goto LABEL_51;
        }
        v60 = v59[1];
        if (!v60)
        {
          v61 = v59 + 1;
          goto LABEL_47;
        }
      }
    }
LABEL_47:
    v63 = (uint64_t *)operator new(0x30uLL);
    v63[4] = v28;
    v63[5] = 0;
    *v63 = 0;
    v63[1] = 0;
    v63[2] = (uint64_t)v59;
    *v61 = v63;
    v64 = **(_QWORD **)(a1 + 488);
    v65 = v63;
    if (v64)
    {
      *(_QWORD *)(a1 + 488) = v64;
      v65 = *v61;
    }
    sub_20E793910(*(uint64_t **)(a1 + 496), v65);
    ++*(_QWORD *)(a1 + 504);
LABEL_51:
    v66 = v113;
    v67 = *v113;
    v68 = v63[5];
LABEL_53:
    v69 = v66;
    if (v67)
    {
      while (1)
      {
        v66 = (uint64_t **)v67;
        v70 = v67[4];
        if (v68 < v70)
        {
          v67 = *v66;
          goto LABEL_53;
        }
        if (v70 >= v68)
          break;
        v67 = v66[1];
        if (!v67)
        {
          v69 = v66 + 1;
          goto LABEL_58;
        }
      }
      v71 = (uint64_t *)v66;
    }
    else
    {
LABEL_58:
      v71 = (uint64_t *)operator new(0x30uLL);
      v71[4] = v68;
      v71[5] = 0;
      *v71 = 0;
      v71[1] = 0;
      v71[2] = (uint64_t)v66;
      *v69 = v71;
      v72 = (_QWORD *)**v109;
      v73 = v71;
      if (v72)
      {
        *v109 = v72;
        v73 = *v69;
      }
      sub_20E793910(*(uint64_t **)(v110 + 16), v73);
      ++*(_QWORD *)(v110 + 24);
    }
    v11 = v112;
    v74 = (v58 + v42);
    v71[5] = v74;
    v32 = (char *)__p[0];
    v75 = (uint64_t)*v112 + 200 * v74;
    memmove((void *)v75, (char *)__p[0] + 256 * v28, 0x80uLL);
    *(_DWORD *)(v75 + 128) = 0;
    v76 = v129;
    *(_OWORD *)(v75 + 132) = __dst;
    *(_OWORD *)(v75 + 148) = v76;
    v77 = v131;
    *(_OWORD *)(v75 + 164) = v130;
    *(_OWORD *)(v75 + 180) = v77;
    *(_DWORD *)(v75 + 196) = 0;
    v124.i32[v41] = v42 + 1;
    v31 = a1;
    v33 = v111;
    if ((_DWORD)v42 == 31)
    {
      if (v26 > v118)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointToDescriptor.cpp", 408, "set_count <= max_num_sets", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v124.i32[v41] = 0;
    }
    v27 = 0;
    ++v28;
  }
  while (v28 != v111);
LABEL_69:
  if (v26 > v118)
  {
    v2 = v110;
    v6 = v115;
    if ((vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v124), (int16x8_t)vceqzq_s32(v125)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v126), (int16x8_t)vceqzq_s32(v127))))) & 1) != 0)
    {
      sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointToDescriptor.cpp", 416, "set_count <= max_num_sets", (void (*)(void *))sub_20E803DA4);
      abort();
    }
    goto LABEL_71;
  }
  v2 = v110;
  v6 = v115;
LABEL_76:
  for (i = 0; i != 16; ++i)
  {
    v86 = v124.i32[i];
    if (v86)
    {
      v87 = *v6;
      v88 = *(_DWORD *)((char *)v122 + i * 4) + 2 * v86;
      *(_DWORD *)(*v6 + 4 * v88) = -1;
      *(_DWORD *)(v87 + 4 * (v88 + 1)) = -1;
      v89 = *(_DWORD *)((char *)v121 + i * 4);
      memset(&v134[12], 0, 72);
      v90 = (uint64_t)*v11 + 200 * (v89 + v86);
      v91 = v130;
      *(_OWORD *)(v90 + 68) = v131;
      *(_OWORD *)(v90 + 52) = v91;
      v92 = __dst;
      *(_OWORD *)(v90 + 36) = v129;
      *(_OWORD *)(v90 + 20) = v92;
      v93 = *(_OWORD *)v134;
      *(_OWORD *)(v90 + 132) = *(_OWORD *)&v134[16];
      *(_OWORD *)(v90 + 116) = v93;
      v94 = v132;
      *(_OWORD *)(v90 + 100) = v133;
      *(_OWORD *)(v90 + 84) = v94;
      *(_OWORD *)(v90 + 180) = *(_OWORD *)&v134[64];
      v95 = *(_OWORD *)&v134[32];
      *(_OWORD *)(v90 + 164) = *(_OWORD *)&v134[48];
      *(_DWORD *)(v90 + 16) = 0x3FFF;
      *(_DWORD *)(v90 + 196) = *(_DWORD *)&v134[80];
      *(_OWORD *)(v90 + 148) = v95;
    }
  }
LABEL_71:
  if (v26 < v118)
  {
    v82 = *(_QWORD *)(v2 + 152);
    *(_QWORD *)(v82 + 4 * v26 * v106) = -1;
    v83 = (v26 * v106) | 2;
    v84 = (*(_QWORD *)(v2 + 160) - v82) >> 2;
    if (v83 <= v84)
    {
      if (v83 < v84)
        *(_QWORD *)(v2 + 160) = v82 + 4 * v83;
    }
    else
    {
      sub_20E78F7D4((uint64_t)v6, v83 - v84);
    }
    memset(&v134[12], 0, 72);
    v96 = *(_QWORD *)(v2 + 176) + 6400 * v26;
    v97 = v130;
    *(_OWORD *)(v96 + 68) = v131;
    *(_OWORD *)(v96 + 52) = v97;
    v98 = __dst;
    *(_OWORD *)(v96 + 36) = v129;
    *(_OWORD *)(v96 + 20) = v98;
    v99 = *(_OWORD *)v134;
    *(_OWORD *)(v96 + 132) = *(_OWORD *)&v134[16];
    *(_OWORD *)(v96 + 116) = v99;
    v100 = v132;
    *(_OWORD *)(v96 + 100) = v133;
    *(_OWORD *)(v96 + 84) = v100;
    *(_OWORD *)(v96 + 180) = *(_OWORD *)&v134[64];
    v101 = *(_OWORD *)&v134[32];
    *(_OWORD *)(v96 + 164) = *(_OWORD *)&v134[48];
    *(_DWORD *)(v96 + 16) = 0x3FFF;
    *(_DWORD *)(v96 + 196) = *(_DWORD *)&v134[80];
    *(_OWORD *)(v96 + 148) = v101;
    v102 = (32 * v26) | 1;
    v103 = *(_QWORD *)(v2 + 176);
    v104 = 0x8F5C28F5C28F5C29 * ((*(_QWORD *)(v2 + 184) - v103) >> 3);
    if (v102 <= v104)
    {
      if (v102 < v104)
        *(_QWORD *)(v2 + 184) = v103 + 200 * v102;
    }
    else
    {
      sub_20E7D5C6C(v11, v102 - v104);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20E7F201C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7F2054(uint64_t a1, uint64_t a2, signed int a3, int a4, uint64_t a5, uint64_t a6, int32x2_t *a7, double a8, double a9)
{
  int v9;
  signed int v10;
  int32x2_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  signed int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  double *v21;
  uint64_t v22;
  double *v23;
  uint64_t result;
  char v25;
  int v26;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  double *v40;
  double *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;

  v9 = a4 >> 4;
  v10 = *(_DWORD *)(a1 + 24) - 1;
  if (a4 >> 4 >= a3)
  {
    if (v10 >= a3)
      v14 = a3;
    else
      v14 = *(_DWORD *)(a1 + 24) - 1;
    a7->i32[0] = v14;
    v11 = (int32x2_t)0x300000002;
    v13 = a3 + 1;
    v12 = 4;
  }
  else
  {
    a7->i32[0] = a3;
    v11 = (int32x2_t)0x200000001;
    v12 = 3;
    v13 = a3;
  }
  v15 = 0;
  if (v10 < v13)
    v13 = v10;
  a7->i32[1] = v13;
  a7[1] = vmin_s32(vdup_n_s32(v10), vadd_s32(v11, vdup_n_s32(a3)));
  v16 = v12 + a3;
  if (v10 >= v16)
    v10 = v16;
  a7[2].i32[0] = v10;
  v17 = a1 + 704;
  v18 = a1 + 512;
  v19 = a1 + 608;
  v20 = 16 * v9;
  v21 = (double *)(a6 + 24);
  v22 = *(_QWORD *)(a2 + 48);
  v23 = (double *)(a5 + 24);
  result = 1;
  v25 = 1;
  do
  {
    v26 = a7->i32[v15];
    v27 = *(double *)(v17 + 8 * (v20 & 0x10 | a4 & 0xFu));
    v25 ^= 1u;
    v28 = 1 << (v26 >> 1);
    v29 = floor(a8 / (double)v28 * 128.0 + 0.5) * 0.0078125;
    v30 = (double)(1 << (((v9 + (int)v15) >> 1) - (v26 >> 1) + 1));
    v31 = floor(a9 / (double)v28 * 128.0 + 0.5) * 0.0078125;
    v32 = floor(v29 - v27 * v30);
    v33 = v22 + 144 * v26;
    v34 = ceil(v29 + v27 * v30);
    v35 = (double)(unint64_t)(*(_QWORD *)(v33 + 32) - 1);
    v36 = floor(v31 - v27 * v30);
    v37 = (double)(unint64_t)(*(_QWORD *)(v33 + 48) - 1);
    if (v32 < 0.0)
      v32 = 0.0;
    v38 = ceil(v31 + v27 * v30);
    v39 = (16 * (v25 & 1)) & 0xDF | (32 * (v25 & 1));
    v40 = (double *)(v18 + v39);
    v41 = (double *)(v19 + v39);
    v42 = floor(v27 * *v40 * v30 * 128.0 + 0.5);
    if (v34 > v35)
      v34 = v35;
    *(v23 - 3) = v42 * 0.0078125;
    *(v21 - 3) = floor(v27 * *v41 * v30 * 128.0 + 0.5) * 0.0078125;
    if (v36 >= 0.0)
      v43 = v36;
    else
      v43 = 0.0;
    *(v23 - 3) = floor((v29 + *(v23 - 3)) * 64.0 + 0.5) * 0.015625;
    if (v38 <= v37)
      v44 = v38;
    else
      v44 = v37;
    *(v21 - 3) = floor((v31 + *(v21 - 3)) * 64.0 + 0.5) * 0.015625;
    v45 = *(v23 - 3);
    if (v45 >= v32)
      v46 = *(v23 - 3);
    else
      v46 = v32;
    if (v45 <= v34)
      v47 = v46;
    else
      v47 = v34;
    *(v23 - 3) = v47;
    v48 = *(v21 - 3);
    if (v48 >= v43)
      v49 = *(v21 - 3);
    else
      v49 = v43;
    if (v48 <= v44)
      v50 = v49;
    else
      v50 = v44;
    *(v21 - 3) = v50;
    *(v23 - 2) = floor(v27 * v40[1] * v30 * 128.0 + 0.5) * 0.0078125;
    *(v21 - 2) = floor(v27 * v41[1] * v30 * 128.0 + 0.5) * 0.0078125;
    *(v23 - 2) = floor((v29 + *(v23 - 2)) * 64.0 + 0.5) * 0.015625;
    *(v21 - 2) = floor((v31 + *(v21 - 2)) * 64.0 + 0.5) * 0.015625;
    v51 = *(v23 - 2);
    if (v51 >= v32)
      v52 = *(v23 - 2);
    else
      v52 = v32;
    if (v51 <= v34)
      v53 = v52;
    else
      v53 = v34;
    *(v23 - 2) = v53;
    v54 = *(v21 - 2);
    if (v54 >= v43)
      v55 = *(v21 - 2);
    else
      v55 = v43;
    if (v54 <= v44)
      v56 = v55;
    else
      v56 = v44;
    *(v21 - 2) = v56;
    *(v23 - 1) = floor(v27 * v40[2] * v30 * 128.0 + 0.5) * 0.0078125;
    *(v21 - 1) = floor(v27 * v41[2] * v30 * 128.0 + 0.5) * 0.0078125;
    *(v23 - 1) = floor((v29 + *(v23 - 1)) * 64.0 + 0.5) * 0.015625;
    *(v21 - 1) = floor((v31 + *(v21 - 1)) * 64.0 + 0.5) * 0.015625;
    v57 = *(v23 - 1);
    if (v57 >= v32)
      v58 = *(v23 - 1);
    else
      v58 = v32;
    if (v57 <= v34)
      v59 = v58;
    else
      v59 = v34;
    *(v23 - 1) = v59;
    v60 = *(v21 - 1);
    if (v60 >= v43)
      v61 = *(v21 - 1);
    else
      v61 = v43;
    if (v60 <= v44)
      v62 = v61;
    else
      v62 = v44;
    *(v21 - 1) = v62;
    *v23 = floor(v27 * v40[3] * v30 * 128.0 + 0.5) * 0.0078125;
    *v21 = floor(v27 * v41[3] * v30 * 128.0 + 0.5) * 0.0078125;
    *v23 = floor((v29 + *v23) * 64.0 + 0.5) * 0.015625;
    *v21 = floor((v31 + *v21) * 64.0 + 0.5) * 0.015625;
    if (*v23 >= v32)
      v63 = *v23;
    else
      v63 = v32;
    if (*v23 <= v34)
      v64 = v63;
    else
      v64 = v34;
    *v23 = v64;
    if (*v21 >= v43)
      v65 = *v21;
    else
      v65 = v43;
    if (*v21 <= v44)
      v66 = v65;
    else
      v66 = v44;
    *v21 = v66;
    v23[1] = floor(v27 * v40[4] * v30 * 128.0 + 0.5) * 0.0078125;
    v21[1] = floor(v27 * v41[4] * v30 * 128.0 + 0.5) * 0.0078125;
    v23[1] = floor((v29 + v23[1]) * 64.0 + 0.5) * 0.015625;
    v21[1] = floor((v31 + v21[1]) * 64.0 + 0.5) * 0.015625;
    v67 = v23[1];
    if (v67 >= v32)
      v68 = v23[1];
    else
      v68 = v32;
    if (v67 <= v34)
      v69 = v68;
    else
      v69 = v34;
    v23[1] = v69;
    v70 = v21[1];
    if (v70 >= v43)
      v71 = v21[1];
    else
      v71 = v43;
    if (v70 <= v44)
      v72 = v71;
    else
      v72 = v44;
    v21[1] = v72;
    v23[2] = floor(v27 * v40[5] * v30 * 128.0 + 0.5) * 0.0078125;
    v21[2] = floor(v27 * v41[5] * v30 * 128.0 + 0.5) * 0.0078125;
    v23[2] = floor((v29 + v23[2]) * 64.0 + 0.5) * 0.015625;
    v21[2] = floor((v31 + v21[2]) * 64.0 + 0.5) * 0.015625;
    v73 = v23[2];
    if (v73 >= v32)
      v74 = v23[2];
    else
      v74 = v32;
    if (v73 <= v34)
      v75 = v74;
    else
      v75 = v34;
    v23[2] = v75;
    v76 = v21[2];
    if (v76 >= v43)
      v77 = v21[2];
    else
      v77 = v43;
    ++v15;
    if (v76 <= v44)
      v78 = v77;
    else
      v78 = v44;
    v21[2] = v78;
    v20 += 16;
    v21 += 6;
    v23 += 6;
  }
  while (v15 != 5);
  return result;
}

uint64_t sub_20E7F25A8(uint64_t a1, uint64_t a2, signed int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, double *a8, double a9, double a10, double *a11)
{
  int v11;
  signed int v12;
  int32x4_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  signed int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;

  v11 = a4 >> 4;
  v12 = *(_DWORD *)(a1 + 24) - 1;
  if (a4 >> 4 >= a3)
  {
    if (v12 >= a3)
      v16 = a3;
    else
      v16 = *(_DWORD *)(a1 + 24) - 1;
    *(_DWORD *)a7 = v16;
    v13 = (int32x4_t)xmmword_20E80FED0;
    v15 = a3 + 1;
    v14 = 6;
  }
  else
  {
    *(_DWORD *)a7 = a3;
    v13 = (int32x4_t)xmmword_20E80F6D0;
    v14 = 5;
    v15 = a3;
  }
  v17 = 0;
  if (v12 < v15)
    v15 = v12;
  *(_DWORD *)(a7 + 4) = v15;
  *(int32x4_t *)(a7 + 8) = vminq_s32(vdupq_n_s32(v12), vaddq_s32(v13, vdupq_n_s32(a3)));
  v18 = v14 + a3;
  if (v12 >= v18)
    v12 = v18;
  *(_DWORD *)(a7 + 24) = v12;
  v19 = a1 + 704;
  v20 = *(_QWORD *)(a2 + 48);
  v21 = a1 + 608;
  result = 0x3F80000000000000;
  do
  {
    v23 = 0;
    v24 = v21 + 48 * (v17 & 1);
    v25 = *(_DWORD *)(a7 + 4 * v17);
    v26 = *(double *)(v19 + 8 * (a4 & 0xF | (16 * (v11 & 1u))));
    v27 = (double)(1 << (v25 >> 1));
    v28 = floor(a9 / v27 * 128.0 + 0.5) * 0.0078125;
    v29 = floor(a10 / v27 * 128.0 + 0.5) * 0.0078125;
    v30 = (double)(1 << ((v11 >> 1) - (v25 >> 1) + 1));
    v31 = floor(v28 - v26 * v30);
    if (v31 < 0.0)
      v31 = 0.0;
    v32 = ceil(v28 + v26 * v30);
    v33 = v20 + 144 * v25;
    v34 = *(_QWORD *)(v33 + 32) - 1;
    if (v32 > (double)(unint64_t)v34)
      v32 = (double)(unint64_t)v34;
    v35 = floor(v29 - v26 * v30);
    if (v35 < 0.0)
      v35 = 0.0;
    v36 = ceil(v29 + v26 * v30);
    v37 = *(_QWORD *)(v33 + 48) - 1;
    if (v36 > (double)(unint64_t)v37)
      v36 = (double)(unint64_t)v37;
    do
    {
      *(double *)(a5 + v23) = floor((v28+ floor((floor(v26 * *(double *)(v24 + v23 - 96) * *a8 * v30 * 128.0 + 0.5) * 0.0078125- floor(v26 * *(double *)(v24 + v23) * *a11 * v30 * 128.0 + 0.5) * 0.0078125)* 128.0+ 0.5)* 0.0078125)* 64.0+ 0.5)* 0.015625;
      *(double *)(a6 + v23) = floor((v29+ floor((floor(v26 * *(double *)(v24 + v23 - 96) * *a11 * v30 * 128.0 + 0.5) * 0.0078125+ floor(v26 * *(double *)(v24 + v23) * *a8 * v30 * 128.0 + 0.5) * 0.0078125)* 128.0+ 0.5)* 0.0078125)* 64.0+ 0.5)* 0.015625;
      v38 = *(double *)(a5 + v23);
      if (v38 >= v31)
        v39 = *(double *)(a5 + v23);
      else
        v39 = v31;
      if (v38 <= v32)
        v40 = v39;
      else
        v40 = v32;
      *(double *)(a5 + v23) = v40;
      v41 = *(double *)(a6 + v23);
      if (v41 >= v35)
        v42 = *(double *)(a6 + v23);
      else
        v42 = v35;
      if (v41 <= v36)
        v43 = v42;
      else
        v43 = v36;
      *(double *)(a6 + v23) = v43;
      v23 += 8;
    }
    while (v23 != 48);
    ++v11;
    ++v17;
    a6 += 48;
    a5 += 48;
  }
  while (v17 != 7);
  return result;
}

void sub_20E7F2868(uint64_t a1, _OWORD *a2, __int128 *a3, uint64_t a4)
{
  char **v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char **v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  __int128 v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v7 = (char **)(*(_QWORD *)(a1 + 48) + 24 * a4);
  v9 = v7 + 1;
  v8 = v7[1];
  v10 = (unint64_t)v7[2];
  if ((unint64_t)v8 >= v10)
  {
    v91 = a4;
    v23 = *v7;
    v24 = 0xEEEEEEEEEEEEEEEFLL * ((v8 - *v7) >> 4);
    v25 = v24 + 1;
    if (v24 + 1 > 0x111111111111111)
      sub_20E78D874();
    v26 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v10 - (_QWORD)v23) >> 4);
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x88888888888888)
      v27 = 0x111111111111111;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 > 0x111111111111111)
        goto LABEL_37;
      v28 = (char *)operator new(240 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = a2[13];
    v30 = &v28[240 * v24];
    *((_OWORD *)v30 + 12) = a2[12];
    *((_OWORD *)v30 + 13) = v29;
    *((_OWORD *)v30 + 14) = a2[14];
    v31 = a2[9];
    *((_OWORD *)v30 + 8) = a2[8];
    *((_OWORD *)v30 + 9) = v31;
    v32 = a2[11];
    *((_OWORD *)v30 + 10) = a2[10];
    *((_OWORD *)v30 + 11) = v32;
    v33 = a2[5];
    *((_OWORD *)v30 + 4) = a2[4];
    *((_OWORD *)v30 + 5) = v33;
    v34 = a2[7];
    *((_OWORD *)v30 + 6) = a2[6];
    *((_OWORD *)v30 + 7) = v34;
    v35 = a2[1];
    *(_OWORD *)v30 = *a2;
    *((_OWORD *)v30 + 1) = v35;
    v37 = a2[2];
    v36 = a2[3];
    v22 = v30 + 240;
    *((_OWORD *)v30 + 2) = v37;
    *((_OWORD *)v30 + 3) = v36;
    if (v8 != v23)
    {
      do
      {
        v38 = *((_OWORD *)v8 - 15);
        v39 = *((_OWORD *)v8 - 13);
        *((_OWORD *)v30 - 14) = *((_OWORD *)v8 - 14);
        *((_OWORD *)v30 - 13) = v39;
        *((_OWORD *)v30 - 15) = v38;
        v40 = *((_OWORD *)v8 - 12);
        v41 = *((_OWORD *)v8 - 11);
        v42 = *((_OWORD *)v8 - 9);
        *((_OWORD *)v30 - 10) = *((_OWORD *)v8 - 10);
        *((_OWORD *)v30 - 9) = v42;
        *((_OWORD *)v30 - 12) = v40;
        *((_OWORD *)v30 - 11) = v41;
        v43 = *((_OWORD *)v8 - 8);
        v44 = *((_OWORD *)v8 - 7);
        v45 = *((_OWORD *)v8 - 5);
        *((_OWORD *)v30 - 6) = *((_OWORD *)v8 - 6);
        *((_OWORD *)v30 - 5) = v45;
        *((_OWORD *)v30 - 8) = v43;
        *((_OWORD *)v30 - 7) = v44;
        v46 = *((_OWORD *)v8 - 4);
        v47 = *((_OWORD *)v8 - 3);
        v48 = *((_OWORD *)v8 - 1);
        *((_OWORD *)v30 - 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v30 - 1) = v48;
        *((_OWORD *)v30 - 4) = v46;
        *((_OWORD *)v30 - 3) = v47;
        v30 -= 240;
        v8 -= 240;
      }
      while (v8 != v23);
      v8 = *v7;
    }
    *v7 = v30;
    *v9 = v22;
    v7[2] = &v28[240 * v27];
    if (v8)
      operator delete(v8);
    a4 = v91;
  }
  else
  {
    v11 = *a2;
    v12 = a2[2];
    *((_OWORD *)v8 + 1) = a2[1];
    *((_OWORD *)v8 + 2) = v12;
    *(_OWORD *)v8 = v11;
    v13 = a2[3];
    v14 = a2[4];
    v15 = a2[6];
    *((_OWORD *)v8 + 5) = a2[5];
    *((_OWORD *)v8 + 6) = v15;
    *((_OWORD *)v8 + 3) = v13;
    *((_OWORD *)v8 + 4) = v14;
    v16 = a2[7];
    v17 = a2[8];
    v18 = a2[10];
    *((_OWORD *)v8 + 9) = a2[9];
    *((_OWORD *)v8 + 10) = v18;
    *((_OWORD *)v8 + 7) = v16;
    *((_OWORD *)v8 + 8) = v17;
    v19 = a2[11];
    v20 = a2[12];
    v21 = a2[14];
    *((_OWORD *)v8 + 13) = a2[13];
    *((_OWORD *)v8 + 14) = v21;
    *((_OWORD *)v8 + 11) = v19;
    *((_OWORD *)v8 + 12) = v20;
    v22 = v8 + 240;
  }
  *v9 = v22;
  v49 = (char **)(*(_QWORD *)(a1 + 72) + 24 * a4);
  v51 = v49 + 1;
  v50 = v49[1];
  v52 = (unint64_t)v49[2];
  if ((unint64_t)v50 < v52)
  {
    v53 = *a3;
    v54 = a3[2];
    *((_OWORD *)v50 + 1) = a3[1];
    *((_OWORD *)v50 + 2) = v54;
    *(_OWORD *)v50 = v53;
    v55 = a3[3];
    v56 = a3[4];
    v57 = a3[6];
    *((_OWORD *)v50 + 5) = a3[5];
    *((_OWORD *)v50 + 6) = v57;
    *((_OWORD *)v50 + 3) = v55;
    *((_OWORD *)v50 + 4) = v56;
    v58 = a3[7];
    v59 = a3[8];
    v60 = a3[10];
    *((_OWORD *)v50 + 9) = a3[9];
    *((_OWORD *)v50 + 10) = v60;
    *((_OWORD *)v50 + 7) = v58;
    *((_OWORD *)v50 + 8) = v59;
    v61 = a3[11];
    v62 = a3[12];
    v63 = a3[14];
    *((_OWORD *)v50 + 13) = a3[13];
    *((_OWORD *)v50 + 14) = v63;
    *((_OWORD *)v50 + 11) = v61;
    *((_OWORD *)v50 + 12) = v62;
    v64 = v50 + 240;
    goto LABEL_36;
  }
  v65 = *v49;
  v66 = 0xEEEEEEEEEEEEEEEFLL * ((v50 - *v49) >> 4);
  v67 = v66 + 1;
  if (v66 + 1 > 0x111111111111111)
    sub_20E78D874();
  v68 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v52 - (_QWORD)v65) >> 4);
  if (2 * v68 > v67)
    v67 = 2 * v68;
  if (v68 >= 0x88888888888888)
    v69 = 0x111111111111111;
  else
    v69 = v67;
  if (!v69)
  {
    v70 = 0;
    goto LABEL_31;
  }
  if (v69 > 0x111111111111111)
LABEL_37:
    sub_20E78D888();
  v70 = (char *)operator new(240 * v69);
LABEL_31:
  v71 = a3[13];
  v72 = &v70[240 * v66];
  *((_OWORD *)v72 + 12) = a3[12];
  *((_OWORD *)v72 + 13) = v71;
  *((_OWORD *)v72 + 14) = a3[14];
  v73 = a3[9];
  *((_OWORD *)v72 + 8) = a3[8];
  *((_OWORD *)v72 + 9) = v73;
  v74 = a3[11];
  *((_OWORD *)v72 + 10) = a3[10];
  *((_OWORD *)v72 + 11) = v74;
  v75 = a3[5];
  *((_OWORD *)v72 + 4) = a3[4];
  *((_OWORD *)v72 + 5) = v75;
  v76 = a3[7];
  *((_OWORD *)v72 + 6) = a3[6];
  *((_OWORD *)v72 + 7) = v76;
  v77 = a3[1];
  *(_OWORD *)v72 = *a3;
  *((_OWORD *)v72 + 1) = v77;
  v79 = a3[2];
  v78 = a3[3];
  v64 = v72 + 240;
  *((_OWORD *)v72 + 2) = v79;
  *((_OWORD *)v72 + 3) = v78;
  if (v50 != v65)
  {
    do
    {
      v80 = *((_OWORD *)v50 - 15);
      v81 = *((_OWORD *)v50 - 13);
      *((_OWORD *)v72 - 14) = *((_OWORD *)v50 - 14);
      *((_OWORD *)v72 - 13) = v81;
      *((_OWORD *)v72 - 15) = v80;
      v82 = *((_OWORD *)v50 - 12);
      v83 = *((_OWORD *)v50 - 11);
      v84 = *((_OWORD *)v50 - 9);
      *((_OWORD *)v72 - 10) = *((_OWORD *)v50 - 10);
      *((_OWORD *)v72 - 9) = v84;
      *((_OWORD *)v72 - 12) = v82;
      *((_OWORD *)v72 - 11) = v83;
      v85 = *((_OWORD *)v50 - 8);
      v86 = *((_OWORD *)v50 - 7);
      v87 = *((_OWORD *)v50 - 5);
      *((_OWORD *)v72 - 6) = *((_OWORD *)v50 - 6);
      *((_OWORD *)v72 - 5) = v87;
      *((_OWORD *)v72 - 8) = v85;
      *((_OWORD *)v72 - 7) = v86;
      v88 = *((_OWORD *)v50 - 4);
      v89 = *((_OWORD *)v50 - 3);
      v90 = *((_OWORD *)v50 - 1);
      *((_OWORD *)v72 - 2) = *((_OWORD *)v50 - 2);
      *((_OWORD *)v72 - 1) = v90;
      *((_OWORD *)v72 - 4) = v88;
      *((_OWORD *)v72 - 3) = v89;
      v72 -= 240;
      v50 -= 240;
    }
    while (v50 != v65);
    v50 = *v49;
  }
  *v49 = v72;
  *v51 = v64;
  v49[2] = &v70[240 * v69];
  if (v50)
    operator delete(v50);
LABEL_36:
  *v51 = v64;
}

void sub_20E7F2C28(uint64_t a1, void *__src, const void *a3, uint64_t a4)
{
  uint64_t v4;
  const void *v5;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;

  v4 = a4;
  v5 = a3;
  v8 = (_QWORD *)(*(_QWORD *)(a1 + 96) + 24 * a4);
  v10 = v8 + 1;
  v9 = (char *)v8[1];
  v11 = v8[2];
  if ((unint64_t)v9 >= v11)
  {
    v13 = (char *)*v8;
    v14 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)&v9[-*v8] >> 4);
    v15 = v14 + 1;
    if (v14 + 1 > 0xC30C30C30C30C3)
      sub_20E78D874();
    v16 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v11 - (_QWORD)v13) >> 4);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x61861861861861)
      v17 = 0xC30C30C30C30C3;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 > 0xC30C30C30C30C3)
        goto LABEL_37;
      v18 = (char *)operator new(336 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[336 * v14];
    v20 = &v18[336 * v17];
    memcpy(v19, __src, 0x150uLL);
    v12 = v19 + 336;
    if (v9 != v13)
    {
      do
      {
        v9 -= 336;
        v19 -= 336;
        memcpy(v19, v9, 0x150uLL);
      }
      while (v9 != v13);
      v9 = (char *)*v8;
    }
    *v8 = v19;
    *v10 = v12;
    v8[2] = v20;
    v5 = a3;
    if (v9)
      operator delete(v9);
    v4 = a4;
  }
  else
  {
    memcpy(v9, __src, 0x150uLL);
    v12 = v9 + 336;
  }
  *v10 = v12;
  v21 = (_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * v4);
  v23 = v21 + 1;
  v22 = (char *)v21[1];
  v24 = v21[2];
  if ((unint64_t)v22 < v24)
  {
    memcpy(v22, v5, 0x150uLL);
    v25 = v22 + 336;
    goto LABEL_36;
  }
  v26 = (char *)*v21;
  v27 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)&v22[-*v21] >> 4);
  v28 = v27 + 1;
  if (v27 + 1 > 0xC30C30C30C30C3)
    sub_20E78D874();
  v29 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v24 - (_QWORD)v26) >> 4);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x61861861861861)
    v30 = 0xC30C30C30C30C3;
  else
    v30 = v28;
  if (!v30)
  {
    v31 = 0;
    goto LABEL_31;
  }
  if (v30 > 0xC30C30C30C30C3)
LABEL_37:
    sub_20E78D888();
  v31 = (char *)operator new(336 * v30);
LABEL_31:
  v32 = &v31[336 * v27];
  v33 = &v31[336 * v30];
  memcpy(v32, v5, 0x150uLL);
  v25 = v32 + 336;
  if (v22 != v26)
  {
    do
    {
      v22 -= 336;
      v32 -= 336;
      memcpy(v32, v22, 0x150uLL);
    }
    while (v22 != v26);
    v22 = (char *)*v21;
  }
  *v21 = v32;
  *v23 = v25;
  v21[2] = v33;
  if (v22)
    operator delete(v22);
LABEL_36:
  *v23 = v25;
}

void sub_20E7F2F00(uint64_t a1)
{
  sub_20E7D269C(a1);
  JUMPOUT(0x212BC47D4);
}

unsigned int sub_20E7F2F24(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  double v21;
  uint64_t v22;

  v7 = *(_DWORD *)(a1 + 32) - 1;
  v8 = *(_DWORD *)(a1 + 48) - 1;
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_DWORD *)(a1 + 40);
  v11 = vcvtmd_s64_f64(a2);
  v12 = vcvtmd_s64_f64(a3);
  v13 = v11 + 1;
  v14 = v12 + 1;
  v15 = v11 & ~(v11 >> 31);
  if (v7 < v15)
    v15 = *(_DWORD *)(a1 + 32) - 1;
  v16 = v12 & ~(v12 >> 31);
  if (v8 < v16)
    v16 = *(_DWORD *)(a1 + 48) - 1;
  if (v7 >= (v13 & ~(v13 >> 31)))
    v7 = v13 & ~(v13 >> 31);
  if (v8 >= (v14 & ~(v14 >> 31)))
    v8 = v14 & ~(v14 >> 31);
  v17 = (double)v13 - a2;
  v18 = v16 * v10;
  LOBYTE(a5) = *(_BYTE *)(v9 + v18 + v15);
  LOBYTE(a7) = *(_BYTE *)(v9 + v18 + v7);
  v19 = a2 - (double)v11;
  *(double *)&v20 = v19 * (double)*(unint64_t *)&a7;
  v21 = *(double *)&v20 + v17 * (double)*(unint64_t *)&a5;
  v22 = v8 * v10;
  LOBYTE(v20) = *(_BYTE *)(v9 + v22 + v15);
  LOBYTE(a7) = *(_BYTE *)(v9 + v22 + v7);
  return vcvtmd_s64_f64(((a3 - (double)v12) * (v19 * (double)*(unint64_t *)&a7 + v17 * (double)v20) + ((double)v14 - a3) * v21)* 16.0+ 0.5);
}

uint64_t sub_20E7F3010(uint64_t result, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  char v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  int v181;
  int v182;
  unsigned int v183;
  int v184;
  int v185;
  unsigned int v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  int v202;
  unsigned int v203;
  int v204;
  int v205;
  unsigned int v206;
  unsigned int v207;
  int v208;
  int v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  unsigned int v213;
  int v214;
  int v215;
  unsigned int v216;
  int v217;
  int v218;
  int v219;
  unsigned int v220;
  int v221;
  unsigned int v222;
  unsigned int v223;
  int v224;

  v2 = a2[9];
  *(_BYTE *)result = (4 * v2) & 8;
  v3 = a2[9] & 4 | (8 * ((v2 & 2) != 0));
  *(_BYTE *)result = v3;
  v4 = v3 & 0x7F | (a2[26] >> 1 << 7);
  *(_BYTE *)result = v4;
  v5 = (a2[26] >> 1) & 0x40 | v4;
  *(_BYTE *)result = v5;
  LOBYTE(v5) = v5 | a2[27] & 0x20;
  *(_BYTE *)result = v5;
  LOBYTE(v5) = a2[30] & 0x10 | v5;
  *(_BYTE *)result = v5;
  *(_BYTE *)result = v5 & 0xFC | (a2[31] >> 2) & 3;
  v6 = (16 * a2[22]) & 0x40;
  *(_BYTE *)(result + 1) = v6;
  v7 = v6 & 0xFFFFFFEF | (16 * (a2[26] & 1));
  *(_BYTE *)(result + 1) = v7;
  v8 = v7 & 0xFFFFFFDF | (32 * (a2[27] & 1));
  *(_BYTE *)(result + 1) = v8;
  v9 = v8 | a2[35] & 0x80;
  *(_BYTE *)(result + 1) = v9;
  v10 = v9 & 0xFFFFFFFE | (a2[46] >> 6) & 1;
  *(_BYTE *)(result + 1) = v10;
  LOBYTE(v10) = v10 | a2[51] & 6;
  *(_BYTE *)(result + 1) = v10;
  *(_BYTE *)(result + 1) = v10 & 0xF7 | (8 * ((a2[54] & 4) != 0));
  LOBYTE(v10) = a2[9];
  *(_BYTE *)(result + 2) = (v10 & 1) << 6;
  v11 = (a2[22] >> 1) & 4 | ((v10 & 1) << 6);
  *(_BYTE *)(result + 2) = v11;
  LOBYTE(v10) = v11 | a2[27] & 0x10;
  *(_BYTE *)(result + 2) = v10;
  LOBYTE(v10) = a2[30] & 0x20 | v10;
  *(_BYTE *)(result + 2) = v10;
  LOBYTE(v10) = v10 & 0xF7 | (8 * (a2[35] & 1));
  *(_BYTE *)(result + 2) = v10;
  LOBYTE(v10) = v10 & 0x7F | (a2[35] >> 6 << 7);
  *(_BYTE *)(result + 2) = v10;
  LOBYTE(v10) = v10 | a2[35] & 2;
  *(_BYTE *)(result + 2) = v10;
  *(_BYTE *)(result + 2) = a2[36] & 1 | v10;
  v12 = (a2[12] >> 3) & 0x10;
  *(_BYTE *)(result + 3) = v12;
  v13 = (a2[26] >> 1) & 2 | v12;
  *(_BYTE *)(result + 3) = v13;
  v14 = v13 & 0xFFFFFFFE | (a2[26] >> 6) & 1;
  *(_BYTE *)(result + 3) = v14;
  LOBYTE(v14) = v14 | a2[35] & 4;
  *(_BYTE *)(result + 3) = v14;
  LOBYTE(v14) = v14 & 0xF7 | (8 * ((a2[48] & 4) != 0));
  *(_BYTE *)(result + 3) = v14;
  LOBYTE(v14) = v14 | a2[53] & 0x20;
  *(_BYTE *)(result + 3) = v14;
  LOBYTE(v14) = v14 & 0x7F | (a2[54] >> 1 << 7);
  *(_BYTE *)(result + 3) = v14;
  *(_BYTE *)(result + 3) = (16 * a2[57]) & 0x40 | v14;
  v15 = a2[5];
  *(_BYTE *)(result + 4) = (2 * v15) & 0x10;
  v16 = (a2[12] >> 3) & 8 | (16 * ((v15 >> 3) & 1));
  *(_BYTE *)(result + 4) = v16;
  LOBYTE(v16) = v16 & 0xDF | (32 * (a2[13] & 1));
  *(_BYTE *)(result + 4) = v16;
  LOBYTE(v16) = (a2[18] >> 3) & 4 | v16;
  *(_BYTE *)(result + 4) = v16;
  LOBYTE(v16) = (a2[21] >> 3) & 2 | v16;
  *(_BYTE *)(result + 4) = v16;
  v17 = v16 & 0x7F | (a2[40] >> 2 << 7);
  *(_BYTE *)(result + 4) = v17;
  LOBYTE(v17) = v17 & 0xBF | (((a2[40] & 8) != 0) << 6);
  *(_BYTE *)(result + 4) = v17;
  *(_BYTE *)(result + 4) = ((a2[57] & 2) != 0) | v17;
  v18 = a2[5] & 0x10;
  *(_BYTE *)(result + 5) = v18;
  v19 = v18 & 0xFFFFFFBF | ((a2[11] & 1) << 6);
  *(_BYTE *)(result + 5) = v19;
  v20 = v19 & 0xFFFFFFFE | (a2[18] >> 4) & 1;
  *(_BYTE *)(result + 5) = v20;
  v21 = (a2[21] >> 4) & 2 | v20;
  *(_BYTE *)(result + 5) = v21;
  LOBYTE(v21) = v21 & 0xDF | (32 * ((a2[31] & 2) != 0));
  *(_BYTE *)(result + 5) = v21;
  v22 = v21 & 0x7F | (a2[31] >> 4 << 7);
  *(_BYTE *)(result + 5) = v22;
  LOBYTE(v22) = v22 & 0xF7 | (8 * ((a2[46] & 2) != 0));
  *(_BYTE *)(result + 5) = v22;
  *(_BYTE *)(result + 5) = (a2[46] >> 3) & 4 | v22;
  v23 = a2[10] >> 7;
  *(_BYTE *)(result + 6) = v23;
  v24 = v23 & 0x7F | (a2[23] >> 1 << 7);
  *(_BYTE *)(result + 6) = v24;
  LOBYTE(v24) = v24 & 0xBF | (((a2[25] & 8) != 0) << 6);
  *(_BYTE *)(result + 6) = v24;
  LOBYTE(v24) = v24 | a2[36] & 0x20;
  *(_BYTE *)(result + 6) = v24;
  LOBYTE(v24) = (a2[36] >> 2) & 4 | v24;
  *(_BYTE *)(result + 6) = v24;
  LOBYTE(v24) = (a2[39] >> 4) & 2 | v24;
  *(_BYTE *)(result + 6) = v24;
  *(_BYTE *)(result + 6) = (a2[52] >> 2) & 0x18 | v24;
  v25 = (a2[5] >> 1) & 2;
  *(_BYTE *)(result + 7) = v25;
  v26 = v25 & 0xFFFFFFDF | (32 * ((a2[7] >> 2) & 1));
  *(_BYTE *)(result + 7) = v26;
  v27 = v26 & 0xFFFFFFEF | (16 * ((a2[23] >> 2) & 1));
  *(_BYTE *)(result + 7) = v27;
  v28 = v27 & 0xFFFFFFF7 | (8 * ((a2[25] >> 2) & 1));
  *(_BYTE *)(result + 7) = v28;
  LOBYTE(v28) = v28 & 0xFE | ((a2[39] & 0x10) != 0);
  *(_BYTE *)(result + 7) = v28;
  LOBYTE(v28) = v28 & 0x7F | (a2[48] >> 1 << 7);
  *(_BYTE *)(result + 7) = v28;
  LOBYTE(v28) = (a2[55] >> 4) & 4 | v28;
  *(_BYTE *)(result + 7) = v28;
  *(_BYTE *)(result + 7) = v28 | a2[58] & 0x40;
  LOBYTE(v28) = a2[7] & 2;
  *(_BYTE *)(result + 8) = v28;
  LOBYTE(v28) = v28 & 0xBF | ((a2[23] & 1) << 6);
  *(_BYTE *)(result + 8) = v28;
  v29 = v28 & 0x7F | (a2[25] >> 4 << 7);
  *(_BYTE *)(result + 8) = v29;
  v30 = v29 & 0xFFFFFFCF | (16 * ((a2[32] >> 1) & 3));
  *(_BYTE *)(result + 8) = v30;
  LOBYTE(v30) = v30 | a2[34] & 0xC;
  *(_BYTE *)(result + 8) = v30;
  *(_BYTE *)(result + 8) = v30 & 0xFE | ((a2[47] & 0x20) != 0);
  v31 = a2[22] & 2;
  *(_BYTE *)(result + 9) = v31;
  v32 = v31 & 0xFFFFFFFE | (a2[22] >> 4) & 1;
  *(_BYTE *)(result + 9) = v32;
  v33 = (a2[27] >> 1) & 4 | v32;
  *(_BYTE *)(result + 9) = v33;
  v34 = (a2[27] >> 2) & 0x10 | v33;
  *(_BYTE *)(result + 9) = v34;
  LOBYTE(v34) = v34 & 0xDF | (32 * ((a2[30] & 8) != 0));
  *(_BYTE *)(result + 9) = v34;
  LOBYTE(v34) = (a2[30] >> 3) & 8 | v34;
  *(_BYTE *)(result + 9) = v34;
  LOBYTE(v34) = v34 & 0x7F | (a2[44] >> 2 << 7);
  *(_BYTE *)(result + 9) = v34;
  *(_BYTE *)(result + 9) = v34 | a2[49] & 0x40;
  v35 = a2[14] >> 3;
  *(_BYTE *)(result + 10) = v35 & 8;
  LOBYTE(v35) = (v35 | (32 * a2[40])) & 0x48;
  *(_BYTE *)(result + 10) = v35;
  v36 = v35 & 0x7F | (a2[40] >> 4 << 7);
  *(_BYTE *)(result + 10) = v36;
  v37 = v36 & 0xFFFFFFDF | (32 * (a2[44] & 1));
  *(_BYTE *)(result + 10) = v37;
  v38 = v37 | a2[44] & 2;
  *(_BYTE *)(result + 10) = v38;
  v39 = (a2[44] >> 5) & 4 | v38;
  *(_BYTE *)(result + 10) = v39;
  v40 = v39 & 0xFFFFFFFE | (a2[44] >> 6) & 1;
  *(_BYTE *)(result + 10) = v40;
  *(_BYTE *)(result + 10) = v40 & 0xEF | (16 * (a2[45] & 1));
  v41 = a2[16] & 0x10;
  *(_BYTE *)(result + 11) = v41;
  v42 = v41 & 0xFFFFFFF7 | (8 * (a2[32] & 1));
  *(_BYTE *)(result + 11) = v42;
  v43 = (a2[34] >> 2) & 4 | v42;
  *(_BYTE *)(result + 11) = v43;
  LOBYTE(v43) = v43 | a2[36] & 0x40;
  *(_BYTE *)(result + 11) = v43;
  LOBYTE(v43) = v43 & 0xDF | (32 * ((a2[55] & 2) != 0));
  *(_BYTE *)(result + 11) = v43;
  v44 = v43 & 0x7F | (a2[55] >> 5 << 7);
  *(_BYTE *)(result + 11) = v44;
  LOBYTE(v44) = v44 & 0xFE | ((a2[58] & 2) != 0);
  *(_BYTE *)(result + 11) = v44;
  *(_BYTE *)(result + 11) = (a2[58] >> 4) & 2 | v44;
  LOBYTE(v44) = (a2[9] >> 4) & 2;
  *(_BYTE *)(result + 12) = v44;
  LOBYTE(v44) = a2[14] & 0x20 | v44;
  *(_BYTE *)(result + 12) = v44;
  LOBYTE(v44) = a2[16] & 0x40 | v44;
  *(_BYTE *)(result + 12) = v44;
  LOBYTE(v44) = (a2[16] >> 3) & 4 | v44;
  *(_BYTE *)(result + 12) = v44;
  LOBYTE(v44) = (a2[18] >> 3) & 8 | v44;
  *(_BYTE *)(result + 12) = v44;
  v45 = v44 & 0x7F | (a2[19] >> 2 << 7);
  *(_BYTE *)(result + 12) = v45;
  LOBYTE(v45) = v45 & 0xEF | (16 * ((a2[21] & 8) != 0));
  *(_BYTE *)(result + 12) = v45;
  *(_BYTE *)(result + 12) = ((a2[39] & 8) != 0) | v45;
  v46 = (a2[5] >> 4) & 8;
  *(_BYTE *)(result + 13) = v46;
  LOBYTE(v46) = v46 & 0xBF | (((a2[18] & 8) != 0) << 6);
  *(_BYTE *)(result + 13) = v46;
  LOBYTE(v46) = v46 | (a2[20] >> 7);
  *(_BYTE *)(result + 13) = v46;
  v47 = v46 & 0x7F | (a2[21] >> 6 << 7);
  *(_BYTE *)(result + 13) = v47;
  v48 = (a2[41] >> 1) & 2 | v47;
  *(_BYTE *)(result + 13) = v48;
  LOBYTE(v48) = v48 | a2[43] & 4;
  *(_BYTE *)(result + 13) = v48;
  LOBYTE(v48) = v48 & 0xEF | (16 * ((a2[49] & 2) != 0));
  *(_BYTE *)(result + 13) = v48;
  *(_BYTE *)(result + 13) = v48 | a2[49] & 0x20;
  v49 = (a2[1] >> 2) & 0x10;
  *(_BYTE *)(result + 14) = v49;
  v50 = (a2[13] >> 1) & 4 | v49;
  *(_BYTE *)(result + 14) = v50;
  v51 = v50 & 0xFFFFFFBF | (((a2[24] >> 5) & 1) << 6);
  *(_BYTE *)(result + 14) = v51;
  v52 = v51 | a2[29] & 0x80;
  *(_BYTE *)(result + 14) = v52;
  v53 = v52 & 0xFFFFFFFE | (a2[36] >> 3) & 1;
  *(_BYTE *)(result + 14) = v53;
  v54 = (a2[39] >> 5) & 2 | v53;
  *(_BYTE *)(result + 14) = v54;
  LOBYTE(v54) = v54 & 0xF7 | (8 * ((a2[41] & 2) != 0));
  *(_BYTE *)(result + 14) = v54;
  *(_BYTE *)(result + 14) = (4 * a2[43]) & 0x20 | v54;
  LOBYTE(v54) = *a2 & 4;
  *(_BYTE *)(result + 15) = v54;
  v55 = v54 & 0x3F | (a2[2] >> 3 << 6);
  *(_BYTE *)(result + 15) = v55;
  v56 = v55 & 0xFFFFFFDF | (32 * ((a2[3] >> 2) & 1));
  *(_BYTE *)(result + 15) = v56;
  v57 = v56 | (a2[23] >> 7);
  *(_BYTE *)(result + 15) = v57;
  v58 = (a2[28] >> 1) & 2 | v57;
  *(_BYTE *)(result + 15) = v58;
  LOBYTE(v58) = v58 & 0xEF | (16 * ((a2[35] & 8) != 0));
  *(_BYTE *)(result + 15) = v58;
  *(_BYTE *)(result + 15) = (a2[35] >> 2) & 8 | v58;
  v59 = (a2[19] >> 2) & 2;
  *(_BYTE *)(result + 16) = v59;
  LOBYTE(v59) = v59 & 0xFE | ((a2[20] & 0x40) != 0);
  *(_BYTE *)(result + 16) = v59;
  LOBYTE(v59) = v59 | a2[29] & 0x40;
  *(_BYTE *)(result + 16) = v59;
  v60 = v59 & 0x7F | (a2[31] >> 6 << 7);
  *(_BYTE *)(result + 16) = v60;
  v61 = (a2[31] >> 1) & 0x10 | v60;
  *(_BYTE *)(result + 16) = v61;
  LOBYTE(v61) = v61 & 0xDF | (32 * (a2[41] & 1));
  *(_BYTE *)(result + 16) = v61;
  LOBYTE(v61) = (a2[44] >> 1) & 4 | v61;
  *(_BYTE *)(result + 16) = v61;
  *(_BYTE *)(result + 16) = (a2[44] >> 2) & 8 | v61;
  v62 = *a2 >> 7;
  *(_BYTE *)(result + 17) = v62;
  LOBYTE(v62) = v62 & 0xFD | (2 * (a2[1] & 1));
  *(_BYTE *)(result + 17) = v62;
  LOBYTE(v62) = v62 | a2[3] & 0x80;
  *(_BYTE *)(result + 17) = v62;
  LOBYTE(v62) = v62 & 0xEF | (16 * ((a2[28] & 8) != 0));
  *(_BYTE *)(result + 17) = v62;
  LOBYTE(v62) = (a2[40] >> 1) & 0x20 | v62;
  *(_BYTE *)(result + 17) = v62;
  LOBYTE(v62) = (a2[40] >> 3) & 4 | v62;
  *(_BYTE *)(result + 17) = v62;
  LOBYTE(v62) = (a2[43] >> 1) & 8 | v62;
  *(_BYTE *)(result + 17) = v62;
  *(_BYTE *)(result + 17) = (2 * a2[45]) & 0x40 | v62;
  LOBYTE(v62) = (32 * *a2) & 0x40;
  *(_BYTE *)(result + 18) = v62;
  v63 = v62 & 0x7F | (*a2 >> 3 << 7);
  *(_BYTE *)(result + 18) = v63;
  LOBYTE(v63) = v63 & 0xFE | a2[4] & 1;
  *(_BYTE *)(result + 18) = v63;
  LOBYTE(v63) = v63 & 0xDF | (32 * ((a2[17] & 2) != 0));
  *(_BYTE *)(result + 18) = v63;
  LOBYTE(v63) = (a2[26] >> 2) & 2 | v63;
  *(_BYTE *)(result + 18) = v63;
  LOBYTE(v63) = (a2[26] >> 3) & 4 | v63;
  *(_BYTE *)(result + 18) = v63;
  LOBYTE(v63) = (a2[34] >> 3) & 0x10 | v63;
  *(_BYTE *)(result + 18) = v63;
  *(_BYTE *)(result + 18) = (4 * a2[36]) & 8 | v63;
  v64 = a2[1] & 0x20;
  *(_BYTE *)(result + 19) = v64;
  v65 = (a2[1] >> 1) & 0x40 | v64;
  *(_BYTE *)(result + 19) = v65;
  v66 = v65 & 0xFFFFFFF7 | (8 * ((a2[3] >> 1) & 1));
  *(_BYTE *)(result + 19) = v66;
  v67 = v66 & 0xFFFFFFEF | (16 * ((a2[3] >> 3) & 1));
  *(_BYTE *)(result + 19) = v67;
  v68 = (a2[4] >> 4) & 4 | v67;
  *(_BYTE *)(result + 19) = v68;
  LOBYTE(v68) = v68 & 0xFE | ((a2[37] & 4) != 0);
  *(_BYTE *)(result + 19) = v68;
  LOBYTE(v68) = (a2[38] >> 6) & 2 | v68;
  *(_BYTE *)(result + 19) = v68;
  *(_BYTE *)(result + 19) = (2 * a2[45]) & 0x80 | v68;
  v69 = (a2[25] >> 2) & 0x20;
  *(_BYTE *)(result + 20) = v69;
  LOBYTE(v69) = v69 & 0xF7 | (8 * ((a2[27] & 2) != 0));
  *(_BYTE *)(result + 20) = v69;
  LOBYTE(v69) = (a2[32] >> 1) & 0x40 | v69;
  *(_BYTE *)(result + 20) = v69;
  LOBYTE(v69) = (a2[33] >> 1) & 0x10 | v69;
  *(_BYTE *)(result + 20) = v69;
  LOBYTE(v69) = v69 & 0x7F | (a2[38] >> 6 << 7);
  *(_BYTE *)(result + 20) = v69;
  LOBYTE(v69) = (a2[43] >> 5) & 4 | v69;
  *(_BYTE *)(result + 20) = v69;
  LOBYTE(v69) = v69 | a2[45] & 2;
  *(_BYTE *)(result + 20) = v69;
  *(_BYTE *)(result + 20) = ((a2[45] & 0x10) != 0) | v69;
  v70 = (a2[4] >> 4) & 2;
  *(_BYTE *)(result + 21) = v70;
  v71 = v70 | (a2[4] >> 7);
  *(_BYTE *)(result + 21) = v71;
  v72 = a2[22] & 0x60 | v71;
  *(_BYTE *)(result + 21) = v72;
  v73 = (a2[37] >> 1) & 4 | v72;
  *(_BYTE *)(result + 21) = v73;
  LOBYTE(v73) = v73 | (a2[47] << 7);
  *(_BYTE *)(result + 21) = v73;
  *(_BYTE *)(result + 21) = v73 & 0xE7 | (8 * (a2[50] & 3));
  v74 = (a2[41] >> 2) & 0x20;
  *(_BYTE *)(result + 22) = v74;
  v75 = (a2[42] >> 1) & 0x10 | v74;
  *(_BYTE *)(result + 22) = v75;
  v76 = v75 | a2[47] & 2;
  *(_BYTE *)(result + 22) = v76;
  v77 = v76 & 0xFFFFFFFE | (a2[47] >> 2) & 1;
  *(_BYTE *)(result + 22) = v77;
  LOBYTE(v77) = v77 & 0xF7 | (8 * (a2[55] & 1));
  *(_BYTE *)(result + 22) = v77;
  v78 = v77 & 0x7F | (a2[56] >> 3 << 7);
  *(_BYTE *)(result + 22) = v78;
  LOBYTE(v78) = v78 & 0xBF | (((a2[56] & 0x10) != 0) << 6);
  *(_BYTE *)(result + 22) = v78;
  *(_BYTE *)(result + 22) = (4 * (a2[58] & 1)) | v78;
  v79 = (8 * a2[13]) & 0xFF90;
  *(_BYTE *)(result + 23) = (8 * a2[13]) & 0x90;
  v80 = (a2[14] >> 2) & 0x20 | v79;
  *(_BYTE *)(result + 23) = v80;
  v81 = v80 & 0xFFFFFFBF | (((a2[53] >> 2) & 1) << 6);
  *(_BYTE *)(result + 23) = v81;
  v82 = (a2[54] >> 1) & 4 | v81;
  *(_BYTE *)(result + 23) = v82;
  v83 = (a2[54] >> 4) & 8 | v82;
  *(_BYTE *)(result + 23) = v83;
  LOBYTE(v83) = v83 & 0xFE | ((a2[57] & 8) != 0);
  *(_BYTE *)(result + 23) = v83;
  *(_BYTE *)(result + 23) = (a2[57] >> 6) & 2 | v83;
  LOBYTE(v83) = (a2[5] >> 2) & 8;
  *(_BYTE *)(result + 24) = v83;
  LOBYTE(v83) = (a2[8] >> 2) & 0x20 | v83;
  *(_BYTE *)(result + 24) = v83;
  v84 = v83 & 0x7F | (a2[9] >> 6 << 7);
  *(_BYTE *)(result + 24) = v84;
  v85 = (a2[9] >> 2) & 2 | v84;
  *(_BYTE *)(result + 24) = v85;
  v86 = (a2[16] >> 5) & 4 | v85;
  *(_BYTE *)(result + 24) = v86;
  LOBYTE(v86) = v86 & 0xBF | (((a2[48] & 0x10) != 0) << 6);
  *(_BYTE *)(result + 24) = v86;
  *(_BYTE *)(result + 24) = v86 | a2[53] & 0x11;
  LOBYTE(v86) = a2[6];
  *(_BYTE *)(result + 25) = 2 * (v86 & 1);
  v87 = (2 * a2[7]) & 0x10 | (2 * (v86 & 1));
  *(_BYTE *)(result + 25) = v87;
  v88 = (a2[7] >> 3) & 8 | v87;
  *(_BYTE *)(result + 25) = v88;
  v89 = v88 & 0xFFFFFFFE | (a2[11] >> 4) & 1;
  *(_BYTE *)(result + 25) = v89;
  LOBYTE(v89) = v89 | a2[15] & 4;
  *(_BYTE *)(result + 25) = v89;
  LOBYTE(v89) = v89 & 0xDF | (32 * ((a2[16] & 8) != 0));
  *(_BYTE *)(result + 25) = v89;
  LOBYTE(v89) = v89 & 0x7F | (a2[17] >> 2 << 7);
  *(_BYTE *)(result + 25) = v89;
  *(_BYTE *)(result + 25) = v89 | a2[48] & 0x40;
  v90 = (*a2 >> 1) & 0x20;
  *(_BYTE *)(result + 26) = v90;
  v91 = v90 & 0xFFFFFFEF | (16 * ((a2[1] >> 1) & 1));
  *(_BYTE *)(result + 26) = v91;
  LOBYTE(v91) = v91 | a2[11] & 2;
  *(_BYTE *)(result + 26) = v91;
  LOBYTE(v91) = v91 & 0xFE | ((a2[12] & 0x20) != 0);
  *(_BYTE *)(result + 26) = v91;
  LOBYTE(v91) = v91 | (a2[49] << 7);
  *(_BYTE *)(result + 26) = v91;
  LOBYTE(v91) = (a2[49] >> 1) & 0x40 | v91;
  *(_BYTE *)(result + 26) = v91;
  LOBYTE(v91) = (a2[51] >> 1) & 8 | v91;
  *(_BYTE *)(result + 26) = v91;
  *(_BYTE *)(result + 26) = (a2[51] >> 3) & 4 | v91;
  v92 = (a2[2] >> 1) & 2;
  *(_BYTE *)(result + 27) = v92;
  v93 = (a2[2] >> 3) & 4 | v92;
  *(_BYTE *)(result + 27) = v93;
  v94 = v93 & 0xFFFFFFBF | (((a2[50] >> 5) & 1) << 6);
  *(_BYTE *)(result + 27) = v94;
  v95 = v94 & 0xFFFFFFFE | (a2[50] >> 2) & 1;
  *(_BYTE *)(result + 27) = v95;
  LOBYTE(v95) = v95 & 0xDF | (32 * (a2[51] & 1));
  *(_BYTE *)(result + 27) = v95;
  LOBYTE(v95) = v95 & 0x7F | (a2[56] >> 2 << 7);
  *(_BYTE *)(result + 27) = v95;
  LOBYTE(v95) = (a2[56] >> 1) & 0x10 | v95;
  *(_BYTE *)(result + 27) = v95;
  *(_BYTE *)(result + 27) = (8 * (a2[57] & 1)) | v95;
  v96 = (a2[3] >> 1) & 0x20;
  *(_BYTE *)(result + 28) = v96;
  v97 = v96 & 0xFFFFFFFB | (4 * ((a2[4] >> 1) & 1));
  *(_BYTE *)(result + 28) = v97;
  v98 = (a2[48] >> 2) & 8 | v97;
  *(_BYTE *)(result + 28) = v98;
  LOBYTE(v98) = v98 & 0xEF | (16 * ((a2[51] & 8) != 0));
  *(_BYTE *)(result + 28) = v98;
  LOBYTE(v98) = (a2[51] >> 5) & 2 | v98;
  *(_BYTE *)(result + 28) = v98;
  v99 = v98 & 0x7F | (a2[52] >> 1 << 7);
  *(_BYTE *)(result + 28) = v99;
  LOBYTE(v99) = v99 & 0xBF | (((a2[53] & 2) != 0) << 6);
  *(_BYTE *)(result + 28) = v99;
  *(_BYTE *)(result + 28) = v99 | (a2[55] >> 7);
  v100 = a2[48];
  *(_BYTE *)(result + 29) = (4 * v100) & 0x20;
  v101 = (a2[48] >> 1) & 0x40 | (32 * ((v100 >> 3) & 1));
  *(_BYTE *)(result + 29) = v101;
  v102 = (a2[51] >> 5) & 4 | v101;
  *(_BYTE *)(result + 29) = v102;
  v103 = v102 & 0xFFFFFFFE | a2[52] & 1;
  *(_BYTE *)(result + 29) = v103;
  v104 = (a2[52] >> 3) & 2 | v103;
  *(_BYTE *)(result + 29) = v104;
  v105 = (a2[52] >> 4) & 8 | v104;
  *(_BYTE *)(result + 29) = v105;
  LOBYTE(v105) = v105 & 0xEF | (16 * ((a2[53] & 8) != 0));
  *(_BYTE *)(result + 29) = v105;
  *(_BYTE *)(result + 29) = (a2[56] << 6) & 0x80 | v105;
  v106 = a2[20];
  *(_BYTE *)(result + 30) = (_BYTE)v106 << 7;
  v107 = (a2[44] >> 2) & 4 | (v106 << 7);
  *(_BYTE *)(result + 30) = v107;
  v108 = v107 & 0xFFFFFFFE | (a2[45] >> 2) & 1;
  *(_BYTE *)(result + 30) = v108;
  v109 = (a2[54] >> 1) & 8 | v108;
  *(_BYTE *)(result + 30) = v109;
  v110 = (a2[54] >> 2) & 0x10 | v109;
  *(_BYTE *)(result + 30) = v110;
  LOBYTE(v110) = v110 & 0xFD | (2 * (a2[56] & 1));
  *(_BYTE *)(result + 30) = v110;
  LOBYTE(v110) = v110 & 0xDF | (32 * ((a2[57] & 0x10) != 0));
  *(_BYTE *)(result + 30) = v110;
  *(_BYTE *)(result + 30) = v110 | a2[57] & 0x40;
  v111 = a2[20];
  *(_BYTE *)(result + 31) = (v111 & 2) != 0;
  v112 = (a2[36] >> 3) & 0x10 | (v111 >> 1) & 1;
  *(_BYTE *)(result + 31) = v112;
  LOBYTE(v112) = v112 & 0xBF | ((a2[40] & 1) << 6);
  *(_BYTE *)(result + 31) = v112;
  LOBYTE(v111) = (a2[46] >> 2) & 0x20 | v112;
  *(_BYTE *)(result + 31) = v111;
  LOBYTE(v111) = v111 & 0x7F | (a2[47] >> 3 << 7);
  *(_BYTE *)(result + 31) = v111;
  LOBYTE(v111) = (a2[47] >> 3) & 2 | v111;
  *(_BYTE *)(result + 31) = v111;
  LOBYTE(v111) = (a2[54] >> 2) & 8 | v111;
  *(_BYTE *)(result + 31) = v111;
  *(_BYTE *)(result + 31) = (a2[57] >> 3) & 4 | v111;
  v113 = 2 * (a2[24] & 1);
  *(_BYTE *)(result + 32) = v113;
  v114 = v113 & 0xFFFFFFFE | (a2[24] >> 4) & 1;
  *(_BYTE *)(result + 32) = v114;
  v115 = v114 & 0xFFFFFFDF | (32 * ((a2[35] >> 4) & 1));
  *(_BYTE *)(result + 32) = v115;
  v116 = v115 & 0xFFFFFFEF | (16 * ((a2[36] >> 2) & 1));
  *(_BYTE *)(result + 32) = v116;
  LOBYTE(v116) = v116 | (a2[42] << 7);
  *(_BYTE *)(result + 32) = v116;
  LOBYTE(v116) = v116 & 0xBF | (((a2[42] & 0x10) != 0) << 6);
  *(_BYTE *)(result + 32) = v116;
  LOBYTE(v116) = v116 | a2[50] & 8;
  *(_BYTE *)(result + 32) = v116;
  *(_BYTE *)(result + 32) = (a2[50] >> 2) & 4 | v116;
  v117 = (2 * a2[1]) & 0x20;
  *(_BYTE *)(result + 33) = v117;
  v118 = v117 & 0xFFFFFFEF | (16 * (a2[2] & 1));
  *(_BYTE *)(result + 33) = v118;
  v119 = (a2[4] >> 2) & 4 | v118;
  *(_BYTE *)(result + 33) = v119;
  v120 = v119 & 0xFFFFFFF7 | (8 * (a2[5] & 1));
  *(_BYTE *)(result + 33) = v120;
  v121 = v120 | (a2[17] << 7);
  *(_BYTE *)(result + 33) = v121;
  v122 = v121 & 0xFFFFFFBF | (((a2[18] >> 2) & 1) << 6);
  *(_BYTE *)(result + 33) = v122;
  LOBYTE(v122) = v122 & 0xFE | ((a2[45] & 8) != 0);
  *(_BYTE *)(result + 33) = v122;
  *(_BYTE *)(result + 33) = (a2[45] >> 6) & 2 | v122;
  v123 = 2 * (*a2 & 1);
  *(_BYTE *)(result + 34) = v123;
  v124 = v123 & 0xFFFFFFFE | (*a2 >> 4) & 1;
  *(_BYTE *)(result + 34) = v124;
  v125 = v124 | (a2[3] << 7);
  *(_BYTE *)(result + 34) = v125;
  v126 = (a2[17] >> 1) & 0x10 | v125;
  *(_BYTE *)(result + 34) = v126;
  v127 = v126 | a2[23] & 0x40;
  *(_BYTE *)(result + 34) = v127;
  v128 = (a2[24] >> 1) & 0x20 | v127;
  *(_BYTE *)(result + 34) = v128;
  LOBYTE(v128) = v128 & 0xFB | (4 * (a2[37] & 1));
  *(_BYTE *)(result + 34) = v128;
  *(_BYTE *)(result + 34) = (a2[39] >> 4) & 8 | v128;
  v129 = (a2[1] >> 1) & 6;
  *(_BYTE *)(result + 35) = v129;
  v130 = v129 & 0xFFFFFFFE | (a2[3] >> 4) & 1;
  *(_BYTE *)(result + 35) = v130;
  v131 = v130 & 0xFFFFFFBF | (((a2[5] >> 1) & 1) << 6);
  *(_BYTE *)(result + 35) = v131;
  v132 = v131 & 0xFFFFFFEF | (16 * (a2[33] & 1));
  *(_BYTE *)(result + 35) = v132;
  v133 = v132 & 0xFFFFFFDF | (32 * ((a2[33] >> 4) & 1));
  *(_BYTE *)(result + 35) = v133;
  LOBYTE(v133) = v133 | a2[40] & 0x80;
  *(_BYTE *)(result + 35) = v133;
  *(_BYTE *)(result + 35) = v133 & 0xF7 | (8 * (a2[46] & 1));
  LOBYTE(v133) = a2[4] & 4;
  *(_BYTE *)(result + 36) = v133;
  LOBYTE(v133) = (a2[4] >> 2) & 2 | v133;
  *(_BYTE *)(result + 36) = v133;
  LOBYTE(v133) = (a2[27] >> 2) & 0x20 | v133;
  *(_BYTE *)(result + 36) = v133;
  v134 = v133 & 0x7F | (a2[29] >> 1 << 7);
  *(_BYTE *)(result + 36) = v134;
  LOBYTE(v134) = v134 & 0xBF | ((a2[31] & 1) << 6);
  *(_BYTE *)(result + 36) = v134;
  LOBYTE(v134) = v134 & 0xEF | (16 * (a2[38] & 1));
  *(_BYTE *)(result + 36) = v134;
  LOBYTE(v134) = v134 & 0xF7 | (8 * ((a2[38] & 2) != 0));
  *(_BYTE *)(result + 36) = v134;
  *(_BYTE *)(result + 36) = ((a2[43] & 0x20) != 0) | v134;
  v135 = *a2 & 0x20;
  *(_BYTE *)(result + 37) = v135;
  v136 = (a2[2] >> 3) & 0x18 | v135;
  *(_BYTE *)(result + 37) = v136;
  v137 = (a2[18] >> 6) & 2 | v136;
  *(_BYTE *)(result + 37) = v137;
  LOBYTE(v137) = v137 & 0xFB | (4 * (a2[22] & 1));
  *(_BYTE *)(result + 37) = v137;
  LOBYTE(v137) = v137 & 0xFE | a2[29] & 1;
  *(_BYTE *)(result + 37) = v137;
  LOBYTE(v137) = a2[41] & 0x40 | v137;
  *(_BYTE *)(result + 37) = v137;
  *(_BYTE *)(result + 37) = v137 & 0x7F | (((a2[42] & 0x40) != 0) << 7);
  LOBYTE(v137) = a2[3];
  *(_BYTE *)(result + 38) = (v137 & 0x20) != 0;
  LOBYTE(v112) = (a2[13] >> 1) & 2 | ((v137 & 0x20) != 0);
  *(_BYTE *)(result + 38) = v112;
  LOBYTE(v137) = v112 | a2[14] & 0x10;
  *(_BYTE *)(result + 38) = v137;
  v138 = v137 & 0x7F | (a2[19] >> 1 << 7);
  *(_BYTE *)(result + 38) = v138;
  v139 = v138 & 0xFFFFFFBF | (((a2[26] >> 4) & 1) << 6);
  *(_BYTE *)(result + 38) = v139;
  LOBYTE(v139) = v139 & 0xDF | (32 * ((a2[27] & 4) != 0));
  *(_BYTE *)(result + 38) = v139;
  LOBYTE(v139) = (a2[41] >> 2) & 4 | v139;
  *(_BYTE *)(result + 38) = v139;
  *(_BYTE *)(result + 38) = (a2[43] >> 3) & 8 | v139;
  v140 = (8 * a2[2]) & 0x10;
  *(_BYTE *)(result + 39) = v140;
  v141 = v140 & 0xFFFFFFBF | (((a2[6] >> 3) & 1) << 6);
  *(_BYTE *)(result + 39) = v141;
  v142 = (a2[13] >> 6) & 2 | v141;
  *(_BYTE *)(result + 39) = v142;
  LOBYTE(v142) = v142 & 0xFE | a2[21] & 1;
  *(_BYTE *)(result + 39) = v142;
  LOBYTE(v142) = v142 & 0xF7 | (8 * (a2[28] & 1));
  *(_BYTE *)(result + 39) = v142;
  LOBYTE(v142) = (a2[30] >> 5) & 4 | v142;
  *(_BYTE *)(result + 39) = v142;
  LOBYTE(v142) = v142 & 0x7F | (a2[32] >> 6 << 7);
  *(_BYTE *)(result + 39) = v142;
  *(_BYTE *)(result + 39) = (a2[33] >> 1) & 0x20 | v142;
  v143 = (a2[5] >> 4) & 4;
  *(_BYTE *)(result + 40) = v143;
  v144 = v143 & 0xFFFFFFF7 | (8 * (a2[7] & 1));
  *(_BYTE *)(result + 40) = v144;
  v145 = v144 | a2[15] & 2;
  *(_BYTE *)(result + 40) = v145;
  v146 = v145 & 0xFFFFFFFE | (a2[16] >> 1) & 1;
  *(_BYTE *)(result + 40) = v146;
  LOBYTE(v146) = v146 & 0xEF | (16 * (a2[19] & 1));
  *(_BYTE *)(result + 40) = v146;
  LOBYTE(v146) = v146 | a2[21] & 0x80;
  *(_BYTE *)(result + 40) = v146;
  LOBYTE(v146) = v146 & 0xBF | ((a2[39] & 1) << 6);
  *(_BYTE *)(result + 40) = v146;
  *(_BYTE *)(result + 40) = (16 * a2[43]) & 0x20 | v146;
  v147 = (a2[15] >> 2) & 0x10;
  *(_BYTE *)(result + 41) = v147;
  v148 = (a2[17] >> 1) & 4 | v147;
  *(_BYTE *)(result + 41) = v148;
  v149 = v148 & 0xFFFFFFDF | (32 * ((a2[19] >> 4) & 1));
  *(_BYTE *)(result + 41) = v149;
  v150 = (a2[20] >> 2) & 8 | v149;
  *(_BYTE *)(result + 41) = v150;
  LOBYTE(v150) = v150 | a2[37] & 2;
  *(_BYTE *)(result + 41) = v150;
  LOBYTE(v150) = v150 & 0xFE | ((a2[41] & 8) != 0);
  *(_BYTE *)(result + 41) = v150;
  LOBYTE(v150) = v150 & 0x7F | (a2[49] >> 2 << 7);
  *(_BYTE *)(result + 41) = v150;
  *(_BYTE *)(result + 41) = (4 * a2[49]) & 0x40 | v150;
  v151 = a2[9] & 0x10;
  *(_BYTE *)(result + 42) = v151;
  v152 = v151 & 0xFFFFFFF7 | (8 * ((a2[10] >> 1) & 1));
  *(_BYTE *)(result + 42) = v152;
  v153 = (a2[10] >> 1) & 0x20 | v152;
  *(_BYTE *)(result + 42) = v153;
  LOBYTE(v153) = v153 | (a2[15] << 7);
  *(_BYTE *)(result + 42) = v153;
  LOBYTE(v153) = v153 & 0xBF | (((a2[16] & 4) != 0) << 6);
  *(_BYTE *)(result + 42) = v153;
  LOBYTE(v153) = (a2[17] >> 4) & 5 | v153;
  *(_BYTE *)(result + 42) = v153;
  *(_BYTE *)(result + 42) = v153 | a2[18] & 2;
  v154 = a2[15];
  *(_BYTE *)(result + 43) = (2 * v154) & 0x10;
  v155 = (a2[17] >> 6) & 2 | (16 * ((v154 >> 3) & 1));
  *(_BYTE *)(result + 43) = v155;
  v156 = v155 & 0xFFFFFFFB | (4 * (a2[18] & 1));
  *(_BYTE *)(result + 43) = v156;
  v157 = (a2[31] >> 4) & 8 | v156;
  *(_BYTE *)(result + 43) = v157;
  v158 = v157 & 0xFFFFFFFE | (a2[34] >> 5) & 1;
  *(_BYTE *)(result + 43) = v158;
  v159 = v158 & 0xFFFFFFDF | (32 * ((a2[37] >> 4) & 1));
  *(_BYTE *)(result + 43) = v159;
  LOBYTE(v159) = v159 & 0xBF | (((a2[38] & 0x20) != 0) << 6);
  *(_BYTE *)(result + 43) = v159;
  *(_BYTE *)(result + 43) = (8 * a2[58]) & 0x80 | v159;
  v160 = (a2[19] >> 5) & 4;
  *(_BYTE *)(result + 44) = v160;
  v161 = v160 & 0xFFFFFFEF | (16 * ((a2[20] >> 2) & 1));
  *(_BYTE *)(result + 44) = v161;
  v162 = v161 | a2[37] & 0x80;
  *(_BYTE *)(result + 44) = v162;
  v163 = v162 & 0xFFFFFFDF | (32 * ((a2[38] >> 2) & 1));
  *(_BYTE *)(result + 44) = v163;
  v164 = v163 & 0xFFFFFFF7 | (8 * ((a2[42] >> 1) & 1));
  *(_BYTE *)(result + 44) = v164;
  v165 = (a2[42] >> 2) & 2 | v164;
  *(_BYTE *)(result + 44) = v165;
  LOBYTE(v165) = v165 & 0xBF | (((a2[55] & 0x10) != 0) << 6);
  *(_BYTE *)(result + 44) = v165;
  *(_BYTE *)(result + 44) = ((a2[58] & 4) != 0) | v165;
  v166 = (4 * a2[25]) & 0xFF80;
  *(_BYTE *)(result + 45) = (4 * a2[25]) & 0x80;
  v167 = v166 & 0xFFFFFFBF | (((a2[32] >> 3) & 1) << 6);
  *(_BYTE *)(result + 45) = v167;
  v168 = v167 | a2[32] & 0x10;
  *(_BYTE *)(result + 45) = v168;
  v169 = v168 & 0xFFFFFFDF | (32 * ((a2[34] >> 1) & 1));
  *(_BYTE *)(result + 45) = v169;
  v170 = (a2[34] >> 5) & 2 | v169;
  *(_BYTE *)(result + 45) = v170;
  LOBYTE(v170) = v170 | a2[42] & 4;
  *(_BYTE *)(result + 45) = v170;
  LOBYTE(v170) = v170 & 0xF7 | (8 * (a2[43] & 1));
  *(_BYTE *)(result + 45) = v170;
  *(_BYTE *)(result + 45) = ((a2[55] & 4) != 0) | v170;
  LOBYTE(v170) = (2 * a2[7]) & 0x40;
  *(_BYTE *)(result + 46) = v170;
  v171 = v170 & 0x7F | (a2[8] >> 5 << 7);
  *(_BYTE *)(result + 46) = v171;
  v172 = v171 | a2[8] & 4;
  *(_BYTE *)(result + 46) = v172;
  v173 = (a2[22] >> 6) & 2 | v172;
  *(_BYTE *)(result + 46) = v173;
  v174 = v173 & 0xFFFFFFDF | (32 * ((a2[28] >> 4) & 1));
  *(_BYTE *)(result + 46) = v174;
  v175 = (a2[29] >> 1) & 0x10 | v174;
  *(_BYTE *)(result + 46) = v175;
  LOBYTE(v175) = v175 & 0xFE | ((a2[41] & 0x20) != 0);
  *(_BYTE *)(result + 46) = v175;
  *(_BYTE *)(result + 46) = (a2[42] >> 4) & 8 | v175;
  v176 = a2[7];
  *(_BYTE *)(result + 47) = (8 * v176) & 0x80;
  v177 = (a2[7] >> 2) & 0x20 | (v176 >> 4 << 7);
  *(_BYTE *)(result + 47) = v177;
  v178 = v177 | a2[8] & 0x40;
  *(_BYTE *)(result + 47) = v178;
  v179 = a2[23] & 8 | v178;
  *(_BYTE *)(result + 47) = v179;
  v180 = v179 & 0xFFFFFFEF | (16 * ((a2[25] >> 1) & 1));
  *(_BYTE *)(result + 47) = v180;
  LOBYTE(v180) = v180 & 0xFB | (4 * ((a2[28] & 2) != 0));
  *(_BYTE *)(result + 47) = v180;
  LOBYTE(v180) = v180 & 0xFE | a2[30] & 1;
  *(_BYTE *)(result + 47) = v180;
  *(_BYTE *)(result + 47) = (a2[49] >> 2) & 2 | v180;
  v181 = a2[48] & 1;
  *(_BYTE *)(result + 48) = v181;
  v182 = v181 | (16 * ((a2[6] >> 6) & 1));
  *(_BYTE *)(result + 48) = v182;
  v183 = v182 & 0xFFFFFFBF | (((a2[15] >> 5) & 1) << 6);
  *(_BYTE *)(result + 48) = v183;
  v184 = v183 | a2[15] & 0x80;
  *(_BYTE *)(result + 48) = v184;
  v185 = (a2[15] >> 1) & 8 | v184;
  *(_BYTE *)(result + 48) = v185;
  LOBYTE(v185) = v185 & 0xDF | (32 * (a2[16] & 1));
  *(_BYTE *)(result + 48) = v185;
  LOBYTE(v185) = (a2[47] >> 5) & 2 | v185;
  *(_BYTE *)(result + 48) = v185;
  *(_BYTE *)(result + 48) = (a2[58] >> 1) & 4 | v185;
  v186 = a2[11];
  *(_BYTE *)(result + 49) = (4 * v186) & 0x10;
  v187 = (a2[11] >> 2) & 2 | (16 * ((v186 >> 2) & 1));
  *(_BYTE *)(result + 49) = v187;
  v188 = v187 & 0xFFFFFFDF | (32 * ((a2[12] >> 4) & 1));
  *(_BYTE *)(result + 49) = v188;
  v189 = v188 & 0xFFFFFFFE | (a2[12] >> 3) & 1;
  *(_BYTE *)(result + 49) = v189;
  v190 = (a2[23] >> 2) & 4 | v189;
  *(_BYTE *)(result + 49) = v190;
  v191 = (a2[25] >> 3) & 8 | v190;
  *(_BYTE *)(result + 49) = v191;
  LOBYTE(v191) = v191 & 0xBF | (((a2[37] & 0x20) != 0) << 6);
  *(_BYTE *)(result + 49) = v191;
  *(_BYTE *)(result + 49) = (32 * a2[39]) & 0x80 | v191;
  v192 = a2[11] & 0x20;
  *(_BYTE *)(result + 50) = v192;
  v193 = v192 & 0xFFFFFFFB | (4 * (a2[12] & 1));
  *(_BYTE *)(result + 50) = v193;
  v194 = (a2[19] >> 2) & 0x10 | v193;
  *(_BYTE *)(result + 50) = v194;
  v195 = v194 & 0xFFFFFFF7 | (8 * ((a2[21] >> 1) & 1));
  *(_BYTE *)(result + 50) = v195;
  v196 = v195 & 0xFFFFFFFE | (a2[37] >> 6) & 1;
  *(_BYTE *)(result + 50) = v196;
  LOBYTE(v196) = v196 | a2[39] & 2;
  *(_BYTE *)(result + 50) = v196;
  LOBYTE(v196) = v196 & 0xBF | (((a2[46] & 0x10) != 0) << 6);
  *(_BYTE *)(result + 50) = v196;
  *(_BYTE *)(result + 50) = (16 * a2[55]) & 0x80 | v196;
  LOBYTE(v196) = a2[6] & 2;
  *(_BYTE *)(result + 51) = v196;
  LOBYTE(v196) = (a2[6] >> 1) & 0x40 | v196;
  *(_BYTE *)(result + 51) = v196;
  v197 = v196 & 0x7F | (a2[21] >> 2 << 7);
  *(_BYTE *)(result + 51) = v197;
  v198 = (a2[28] >> 3) & 0x10 | v197;
  *(_BYTE *)(result + 51) = v198;
  v199 = v198 & 0xFFFFFFDF | (32 * ((a2[29] >> 2) & 1));
  *(_BYTE *)(result + 51) = v199;
  v200 = v199 & 0xFFFFFFFE | (a2[46] >> 2) & 1;
  *(_BYTE *)(result + 51) = v200;
  LOBYTE(v200) = v200 & 0xF7 | (8 * ((a2[52] & 4) != 0));
  *(_BYTE *)(result + 51) = v200;
  *(_BYTE *)(result + 51) = (a2[52] >> 1) & 4 | v200;
  LOBYTE(v200) = (2 * a2[6]) & 0x20;
  *(_BYTE *)(result + 52) = v200;
  LOBYTE(v200) = v200 & 0xFE | ((a2[6] & 4) != 0);
  *(_BYTE *)(result + 52) = v200;
  v201 = v200 & 0x7F | (a2[13] >> 6 << 7);
  *(_BYTE *)(result + 52) = v201;
  v202 = (a2[13] >> 3) & 4 | v201;
  *(_BYTE *)(result + 52) = v202;
  v203 = v202 & 0xFFFFFFBF | (((a2[14] >> 2) & 1) << 6);
  *(_BYTE *)(result + 52) = v203;
  v204 = (a2[19] >> 4) & 2 | v203;
  *(_BYTE *)(result + 52) = v204;
  LOBYTE(v204) = v204 & 0xEF | (16 * ((a2[38] & 8) != 0));
  *(_BYTE *)(result + 52) = v204;
  *(_BYTE *)(result + 52) = (a2[38] >> 1) & 8 | v204;
  LOBYTE(v204) = a2[53] & 0x40;
  *(_BYTE *)(result + 53) = v204;
  v205 = v204 & 0x7F | (a2[14] >> 1 << 7);
  *(_BYTE *)(result + 53) = v205;
  v206 = v205 & 0xFFFFFFFD | (2 * (a2[14] & 1));
  *(_BYTE *)(result + 53) = v206;
  v207 = v206 & 0xFFFFFFFE | (a2[14] >> 3) & 1;
  *(_BYTE *)(result + 53) = v207;
  v208 = (a2[47] >> 3) & 0x10 | v207;
  *(_BYTE *)(result + 53) = v208;
  LOBYTE(v208) = v208 & 0xDF | (32 * (a2[54] & 1));
  *(_BYTE *)(result + 53) = v208;
  LOBYTE(v208) = (a2[56] >> 3) & 8 | v208;
  *(_BYTE *)(result + 53) = v208;
  *(_BYTE *)(result + 53) = (a2[56] >> 5) & 4 | v208;
  v209 = 16 * a2[8];
  *(_BYTE *)(result + 54) = v209 & 0x80;
  v210 = (v209 | (a2[10] >> 3)) & 0xFFFFFF82;
  *(_BYTE *)(result + 54) = v210;
  v211 = v210 & 0xFFFFFFBF | (((a2[20] >> 3) & 1) << 6);
  *(_BYTE *)(result + 54) = v211;
  LOBYTE(v211) = v211 & 0xDF | (32 * ((a2[20] & 0x10) != 0));
  *(_BYTE *)(result + 54) = v211;
  LOBYTE(v211) = (a2[23] >> 3) & 4 | v211;
  *(_BYTE *)(result + 54) = v211;
  LOBYTE(v211) = v211 | (a2[24] >> 7);
  *(_BYTE *)(result + 54) = v211;
  LOBYTE(v211) = (a2[32] >> 1) & 0x10 | v211;
  *(_BYTE *)(result + 54) = v211;
  *(_BYTE *)(result + 54) = (a2[33] >> 4) & 8 | v211;
  LOBYTE(v211) = (2 * a2[6]) & 0x40;
  *(_BYTE *)(result + 55) = v211;
  LOBYTE(v211) = v211 & 0xFE | ((a2[8] & 2) != 0);
  *(_BYTE *)(result + 55) = v211;
  LOBYTE(v211) = (a2[28] >> 3) & 8 | v211;
  *(_BYTE *)(result + 55) = v211;
  LOBYTE(v211) = v211 | a2[30] & 2;
  *(_BYTE *)(result + 55) = v211;
  v212 = v211 & 0x7F | (a2[33] >> 1 << 7);
  *(_BYTE *)(result + 55) = v212;
  v213 = v212 & 0xFFFFFFCF | (16 * ((a2[33] >> 2) & 3));
  *(_BYTE *)(result + 55) = v213;
  *(_BYTE *)(result + 55) = v213 & 0xFB | (4 * (a2[34] & 1));
  LOBYTE(v213) = a2[8];
  *(_BYTE *)(result + 56) = 16 * (v213 & 1);
  v214 = (a2[8] >> 1) & 8 | (16 * (v213 & 1));
  *(_BYTE *)(result + 56) = v214;
  LOBYTE(v213) = v214 | a2[24] & 2;
  *(_BYTE *)(result + 56) = v213;
  LOBYTE(v213) = v213 & 0xFE | ((a2[24] & 8) != 0);
  *(_BYTE *)(result + 56) = v213;
  LOBYTE(v213) = (a2[46] >> 1) & 4 | v213;
  *(_BYTE *)(result + 56) = v213;
  LOBYTE(v213) = v213 & 0x7F | (a2[50] >> 6 << 7);
  *(_BYTE *)(result + 56) = v213;
  LOBYTE(v213) = (a2[50] >> 1) & 0x40 | v213;
  *(_BYTE *)(result + 56) = v213;
  *(_BYTE *)(result + 56) = (a2[53] >> 2) & 0x20 | v213;
  v215 = a2[9] & 0x80;
  *(_BYTE *)(result + 57) = v215;
  v216 = v215 & 0xFFFFFFEF | (16 * (a2[10] & 1));
  *(_BYTE *)(result + 57) = v216;
  v217 = v216 | a2[10] & 4;
  *(_BYTE *)(result + 57) = v217;
  v218 = (a2[10] >> 2) & 8 | v217;
  *(_BYTE *)(result + 57) = v218;
  v219 = (a2[11] >> 1) & 0x40 | v218;
  *(_BYTE *)(result + 57) = v219;
  LOBYTE(v219) = v219 & 0xDF | (32 * ((a2[12] & 2) != 0));
  *(_BYTE *)(result + 57) = v219;
  LOBYTE(v219) = (a2[24] >> 1) & 2 | v219;
  *(_BYTE *)(result + 57) = v219;
  *(_BYTE *)(result + 57) = v219 | a2[25] & 1;
  v220 = a2[10];
  *(_BYTE *)(result + 58) = (8 * v220) & 0x40;
  v221 = (a2[11] >> 1) & 0x20 | (((v220 >> 3) & 1) << 6);
  *(_BYTE *)(result + 58) = v221;
  v222 = v221 & 0xFFFFFFEF | (16 * ((a2[12] >> 2) & 1));
  *(_BYTE *)(result + 58) = v222;
  v223 = v222 & 0xFFFFFFFE | (a2[28] >> 5) & 1;
  *(_BYTE *)(result + 58) = v223;
  v224 = (a2[29] >> 1) & 0xC | v223;
  *(_BYTE *)(result + 58) = v224;
  *(_BYTE *)(result + 58) = (a2[30] >> 1) & 2 | v224;
  *(_DWORD *)(result + 59) = 0;
  *(_BYTE *)(result + 63) = 0;
  return result;
}

uint64_t sub_20E7F4D38(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void (***v19)(_QWORD);
  void (***v20)(_QWORD);
  void *v21;
  void (***v22)(_QWORD);
  void (***v23)(_QWORD);
  void (**v24)(_QWORD);
  BOOL v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  *(_OWORD *)a1 = xmmword_20E80E520;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(3uLL);
  *(_QWORD *)(a1 + 32) = 1;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 2097168;
  *(_BYTE *)(a1 + 52) = 1;
  *(_QWORD *)(a1 + 56) = 0x90000002DLL;
  *(_OWORD *)(a1 + 64) = xmmword_20E810000;
  *(_OWORD *)(a1 + 80) = unk_20E810010;
  *(_OWORD *)(a1 + 96) = xmmword_20E810020;
  *(_OWORD *)(a1 + 112) = unk_20E810030;
  *(_OWORD *)(a1 + 160) = xmmword_20E810060;
  *(_OWORD *)(a1 + 176) = unk_20E810070;
  *(_OWORD *)(a1 + 128) = xmmword_20E810040;
  *(_OWORD *)(a1 + 144) = unk_20E810050;
  *(_QWORD *)(a1 + 192) = 1;
  *(_OWORD *)(a1 + 200) = 0u;
  v4 = (_QWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 248) = 0u;
  v5 = (uint64_t *)(a1 + 248);
  v6 = (uint64_t *)(a1 + 256);
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)a1 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[4];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  v10 = a2[5];
  v11 = a2[6];
  v12 = a2[8];
  *(_OWORD *)(a1 + 112) = a2[7];
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 96) = v11;
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *(_OWORD *)(a1 + 160) = v14;
  *(_OWORD *)(a1 + 176) = v15;
  *(_OWORD *)(a1 + 144) = v13;
  if ((__int128 *)a1 != a2)
  {
    sub_20E7E3654(v4, *((char **)a2 + 25), *((char **)a2 + 26), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 3));
    sub_20E7E3654((_QWORD *)(a1 + 224), *((char **)a2 + 28), *((char **)a2 + 29), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 29) - *((_QWORD *)a2 + 28)) >> 3));
  }
  if (!sub_20E7F7CC0((unint64_t *)a2))
  {
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/ResponseMapAndKPCGenerator.cpp", 36, "IsResponseMapAndKPCGeneratorConfigValid(config) && \"Invalid configuration\"", (void (*)(void *))sub_20E803DA4);
    abort();
  }
  v16 = operator new();
  *(_OWORD *)v16 = xmmword_20E80E520;
  *(int64x2_t *)(v16 + 16) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v16 + 32) = 1;
  *(_QWORD *)(v16 + 40) = 0;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  v17 = (_QWORD *)*v5;
  *v5 = v16;
  if (v17)
  {
    v18 = (void *)v17[9];
    if (v18)
    {
      v17[10] = v18;
      operator delete(v18);
    }
    v19 = (void (***)(_QWORD))v17[6];
    if (v19)
    {
      v20 = (void (***)(_QWORD))v17[7];
      v21 = (void *)v17[6];
      if (v20 != v19)
      {
        v22 = v20 - 18;
        v23 = v20 - 18;
        do
        {
          v24 = *v23;
          v23 -= 18;
          (*v24)(v22);
          v25 = v22 == v19;
          v22 = v23;
        }
        while (!v25);
        v21 = (void *)v17[6];
      }
      v17[7] = v19;
      operator delete(v21);
    }
    MEMORY[0x212BC47D4](v17, 0x1020C4024B85F43);
    v16 = *v5;
  }
  v26 = *a2;
  v27 = a2[1];
  *(_OWORD *)(v16 + 26) = *(__int128 *)((char *)a2 + 26);
  *(_OWORD *)v16 = v26;
  *(_OWORD *)(v16 + 16) = v27;
  sub_20E7F6304((vImagePixelCount *)v16);
  v28 = *(_QWORD *)(a1 + 16);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = operator new();
  sub_20E7F7784(v30, (__int128 *)(a1 + 64), (__int128 *)(a1 + 128), v29 * v28);
  v31 = (_QWORD *)*v6;
  *v6 = v30;
  if (v31)
    sub_20E7CEBA0(a1 + 256, v31);
  return a1;
}

void sub_20E7F4FD0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  MEMORY[0x212BC47D4](v4, 0x1030C40B15F70E4);
  v6 = (_QWORD *)*v2;
  *v2 = 0;
  if (v6)
    sub_20E7CEBA0((uint64_t)v2, v6);
  sub_20E7DC400(v3);
  sub_20E7E6370(v1);
  _Unwind_Resume(a1);
}

unsigned __int16 *sub_20E7F502C(unsigned __int16 *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x4_t v26;
  int8x16_t v27;
  uint64_t v28;
  __int32 v29;
  int v30;
  unsigned int v31;
  __int16 v32;
  unsigned __int16 v33;
  _WORD *v34;
  unsigned __int16 *v35;
  int v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  int v39;
  int v40;
  unsigned int v41;
  __int16 *v42;
  unsigned __int16 *v43;
  int v44;
  unsigned __int16 v45;
  _WORD *v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  unsigned int v61;
  int v62;
  __int32 v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  _WORD *v72;
  uint64_t v73;
  __int16 *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  __int16 *v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  int32x4_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int32 v91;
  int v92;
  unsigned int v93;
  __int16 v94;
  unsigned __int16 v95;
  unsigned __int16 *v96;
  int v97;
  unsigned __int16 *v98;
  unsigned __int16 *v99;
  int v100;
  int v101;
  unsigned int v102;
  __int16 *v103;
  unsigned __int16 *v104;
  int v105;
  unsigned __int16 v106;
  _WORD *v107;
  unint64_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  uint16x8_t v113;
  uint16x8_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int8x16_t v122;
  int8x16_t v123;
  unsigned int v124;
  int v125;
  __int32 v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  __int16 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  unsigned __int16 *v140;
  int v141;
  unint64_t v142;
  int32x4_t v143;
  int32x4_t v144;
  unint64_t v145;
  unint64_t v146;
  _WORD *v147;
  _WORD *v148;
  _WORD *v149;

  v140 = result;
  if (a2[2])
  {
    v2 = 0;
    v138 = *((_QWORD *)result + 31);
    v139 = a2;
    v3 = *(_QWORD *)result;
    v4 = *((_QWORD *)result + 1);
    v143 = vdupq_n_s32(0x7FFF6Fu);
    v144 = vdupq_n_s32(0xFF7FFF70);
    while (1)
    {
      v137 = v2;
      v134 = a2[3] * v2;
      v7 = a2[6] + 144 * v134;
      v8 = *(_WORD **)(v7 + 72);
      v9 = *(_QWORD *)(v138 + 48) + 144 * v134;
      v10 = *(__int16 **)(v9 + 72);
      v11 = *(_QWORD *)(v7 + 40);
      v12 = *(_QWORD *)(v9 + 40);
      v13 = v140[24];
      v147 = v8;
      v148 = v8;
      v133 = v11;
      v149 = &v8[v11];
      v14 = v3;
      sub_20E7F79D8((uint64_t)&v147, v10, 0, v3, v13);
      v136 = v4;
      v15 = v4 - 1;
      v16 = &v10[v12];
      v142 = v14;
      if (v15 >= 2)
      {
        v17 = v133;
        v18 = v14 - 1;
        LOWORD(v19) = *v8;
        v145 = (v14 - 3);
        v20 = 2 * ((v145 + 1) & 0x1FFFFFFF8);
        v141 = (v14 - 2) & 0xFFFFFFF8 | 1;
        v21 = vdupq_n_s32(v13);
        v22 = 2 * v12;
        v23 = (uint64_t)&v8[2 * v133 + 1];
        v24 = (uint64_t)&v8[v133 + 1];
        v25 = 1;
        v26.i64[0] = 0x1000000010;
        v26.i64[1] = 0x1000000010;
        v27.i64[0] = 0x8000800080008000;
        v27.i64[1] = 0x8000800080008000;
        v28 = v133;
        while (1)
        {
          v33 = v19;
          v34 = &v8[v17];
          v35 = &v8[2 * v133];
          v19 = (unsigned __int16)v8[v133];
          v37 = &v8[v17 + 1];
          v36 = *v37;
          v39 = *v35;
          v38 = v35 + 1;
          v40 = (-3 * v19 + v36 + v33 + v39) * v13;
          v41 = (((v40 + 16) >> 5) + 4) >> 3;
          if (v40 > 8388463)
            LOWORD(v41) = 0x7FFF;
          if (v40 < -8388752)
            LOWORD(v41) = 0x8000;
          *v16 = v41;
          v42 = v16 + 1;
          v43 = v8 + 1;
          if (v18 >= 2)
            break;
          v29 = v19;
LABEL_8:
          v30 = (v29 + v36 - 4 * v36 + *v43 + *v38) * v13;
          v31 = (((v30 + 16) >> 5) + 4) >> 3;
          if (v30 > 8388463)
            LOWORD(v31) = 0x7FFF;
          if (v30 >= -8388752)
            v32 = v31;
          else
            v32 = 0x8000;
          *v42 = v32;
          ++v25;
          v16 = (__int16 *)((char *)v16 + v22);
          v23 += v17 * 2;
          v24 += v17 * 2;
          v8 = v34;
          if (v25 == v15)
            goto LABEL_35;
        }
        if (v145 >= 7)
        {
          v47 = 0;
          v43 = (unsigned __int16 *)((char *)v43 + v20);
          v37 = (unsigned __int16 *)((char *)v37 + v20);
          v38 = (unsigned __int16 *)((char *)v38 + v20);
          v42 = (__int16 *)((char *)v42 + v20);
          v48 = (int8x16_t)vdupq_n_s16(v19);
          v46 = &v34[(unint64_t)v20 / 2];
          do
          {
            v49 = v48;
            v48 = *(int8x16_t *)(v24 + v47);
            v50 = (uint16x8_t)vextq_s8(v49, v48, 0xEuLL);
            v51 = *(uint16x8_t *)(v24 + v47 + 2);
            v52 = *(uint16x8_t *)&v8[v47 / 2 + 1];
            v53 = *(uint16x8_t *)(v23 + v47);
            v54 = (int32x4_t)vaddl_high_u16(v51, v50);
            v55 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v51.i8, *(uint16x4_t *)v50.i8);
            v56 = vmulq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)vsubq_s32(v54, (int32x4_t)vshll_high_n_u16((uint16x8_t)v48, 2uLL)), v52), v53), v21);
            v57 = vmulq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)vsubq_s32(v55, (int32x4_t)vshll_n_u16(*(uint16x4_t *)v48.i8, 2uLL)), *(uint16x4_t *)v52.i8), *(uint16x4_t *)v53.i8), v21);
            v58 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v57, v26), 5uLL);
            v59 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v144, v57), (int16x8_t)vcgtq_s32(v144, v56));
            v60 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v143), (int16x8_t)vcgtq_s32(v56, v143));
            *(int8x16_t *)&v16[v47 / 2 + 1] = vbslq_s8(v59, v27, vorrq_s8((int8x16_t)(*(_OWORD *)&v60 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vbicq_s8((int8x16_t)vrshrn_high_n_s32(vrshrn_n_s32(v58, 3uLL), (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v56, v26), 5uLL), 3uLL), v60)));
            v47 += 16;
          }
          while (((2 * (v145 + 1)) & 0x3FFFFFFF0) != v47);
          if (v145 + 1 == ((v145 + 1) & 0x1FFFFFFF8))
          {
            v29 = vmovl_high_u16(*(uint16x8_t *)&v48).i32[3];
LABEL_33:
            v28 = v133;
            v36 = *v37;
            goto LABEL_8;
          }
          v45 = v48.u16[7];
          v44 = v141;
        }
        else
        {
          v44 = 1;
          v45 = v19;
          v46 = &v8[v17];
        }
        v61 = v18 - v44;
        do
        {
          v62 = (unsigned __int16)v46[2];
          v46 = v37;
          v63 = *v37++;
          v29 = v63;
          v65 = *v43++;
          v64 = v65;
          v66 = *v38++;
          v67 = (v62 + v45 - 4 * v29 + v64 + v66) * v13;
          v68 = (((v67 + 16) >> 5) + 4) >> 3;
          if (v67 > 8388463)
            LOWORD(v68) = 0x7FFF;
          if (v67 >= -8388752)
            v69 = v68;
          else
            v69 = 0x8000;
          *v42++ = v69;
          v45 = v29;
          --v61;
        }
        while (v61);
        goto LABEL_33;
      }
      v34 = v8;
      v28 = v133;
LABEL_35:
      v147 = v34;
      v148 = &v34[v28];
      v149 = v148;
      sub_20E7F79D8((uint64_t)&v147, v16, 0, v142, v13);
      v70 = 144 * v134 + 144;
      v71 = v139[6] + v70;
      v72 = *(_WORD **)(v71 + 72);
      v73 = *(_QWORD *)(v138 + 48) + v70;
      v74 = *(__int16 **)(v73 + 72);
      v75 = *(_QWORD *)(v71 + 40);
      v76 = v15;
      v77 = *(_QWORD *)(v73 + 40);
      v78 = v140[25];
      v147 = v72;
      v148 = v72;
      v135 = v75;
      v149 = &v72[v75];
      sub_20E7F79D8((uint64_t)&v147, v74, 0, v142, v78);
      v79 = v77;
      v80 = &v74[v77];
      if (v76 >= 2)
        break;
      v5 = v72;
      v6 = v135;
LABEL_4:
      v147 = v5;
      v148 = &v5[v6];
      v149 = v148;
      result = sub_20E7F79D8((uint64_t)&v147, v80, 0, v142, v78);
      v3 = (v142 + 1) >> 1;
      v4 = (v136 + 1) >> 1;
      v2 = v137 + 1;
      a2 = v139;
      if ((unint64_t)(v137 + 1) >= v139[2])
        return result;
    }
    v81 = v76;
    v82 = v135;
    v83 = v142 - 1;
    LOWORD(v84) = *v72;
    v146 = (v142 - 3);
    v85 = 2 * ((v146 + 1) & 0x1FFFFFFF8);
    v86 = vdupq_n_s32(v78);
    v87 = 2 * v79;
    v88 = (uint64_t)&v72[2 * v135 + 1];
    v89 = (uint64_t)&v72[v135 + 1];
    v90 = 1;
    v6 = v135;
    while (1)
    {
      v95 = v84;
      v5 = &v72[v82];
      v96 = &v72[2 * v135];
      v84 = (unsigned __int16)v72[v135];
      v98 = &v72[v82 + 1];
      v97 = *v98;
      v100 = *v96;
      v99 = v96 + 1;
      v101 = (-3 * v84 + v97 + v95 + v100) * v78;
      v102 = (((v101 + 16) >> 5) + 4) >> 3;
      if (v101 > 8388463)
        LOWORD(v102) = 0x7FFF;
      if (v101 < -8388752)
        LOWORD(v102) = 0x8000;
      *v80 = v102;
      v103 = v80 + 1;
      v104 = v72 + 1;
      if (v83 >= 2)
        break;
      v91 = v84;
LABEL_38:
      v92 = (v91 + v97 - 4 * v97 + *v104 + *v99) * v78;
      v93 = (((v92 + 16) >> 5) + 4) >> 3;
      if (v92 > 8388463)
        LOWORD(v93) = 0x7FFF;
      if (v92 >= -8388752)
        v94 = v93;
      else
        v94 = 0x8000;
      *v103 = v94;
      ++v90;
      v80 = (__int16 *)((char *)v80 + v87);
      v88 += v82 * 2;
      v89 += v82 * 2;
      v72 = v5;
      if (v90 == v81)
        goto LABEL_4;
    }
    if (v146 >= 7)
    {
      v108 = 0;
      v104 = (unsigned __int16 *)((char *)v104 + v85);
      v98 = (unsigned __int16 *)((char *)v98 + v85);
      v99 = (unsigned __int16 *)((char *)v99 + v85);
      v103 = (__int16 *)((char *)v103 + v85);
      v109 = (int8x16_t)vdupq_n_s16(v84);
      v107 = &v5[(unint64_t)v85 / 2];
      v110.i64[0] = 0x1000000010;
      v110.i64[1] = 0x1000000010;
      v111.i64[0] = 0x8000800080008000;
      v111.i64[1] = 0x8000800080008000;
      do
      {
        v112 = v109;
        v109 = *(int8x16_t *)(v89 + v108);
        v113 = (uint16x8_t)vextq_s8(v112, v109, 0xEuLL);
        v114 = *(uint16x8_t *)(v89 + v108 + 2);
        v115 = *(uint16x8_t *)&v72[v108 / 2 + 1];
        v116 = *(uint16x8_t *)(v88 + v108);
        v117 = (int32x4_t)vaddl_high_u16(v114, v113);
        v118 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v114.i8, *(uint16x4_t *)v113.i8);
        v119 = vmulq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)vsubq_s32(v117, (int32x4_t)vshll_high_n_u16((uint16x8_t)v109, 2uLL)), v115), v116), v86);
        v120 = vmulq_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)vsubq_s32(v118, (int32x4_t)vshll_n_u16(*(uint16x4_t *)v109.i8, 2uLL)), *(uint16x4_t *)v115.i8), *(uint16x4_t *)v116.i8), v86);
        v121 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v120, v110), 5uLL);
        v122 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v144, v120), (int16x8_t)vcgtq_s32(v144, v119));
        v123 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v120, v143), (int16x8_t)vcgtq_s32(v119, v143));
        *(int8x16_t *)&v80[v108 / 2 + 1] = vbslq_s8(v122, v111, vorrq_s8((int8x16_t)(*(_OWORD *)&v123 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vbicq_s8((int8x16_t)vrshrn_high_n_s32(vrshrn_n_s32(v121, 3uLL), (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v119, v110), 5uLL), 3uLL), v123)));
        v108 += 16;
      }
      while (((2 * (v146 + 1)) & 0x3FFFFFFF0) != v108);
      if (v146 + 1 == ((v146 + 1) & 0x1FFFFFFF8))
      {
        v91 = vmovl_high_u16(*(uint16x8_t *)&v109).i32[3];
LABEL_63:
        v6 = v135;
        v97 = *v98;
        goto LABEL_38;
      }
      v106 = v109.u16[7];
      v105 = (v142 - 2) & 0xFFFFFFF8 | 1;
    }
    else
    {
      v105 = 1;
      v106 = v84;
      v107 = &v72[v82];
    }
    v124 = v83 - v105;
    do
    {
      v125 = (unsigned __int16)v107[2];
      v107 = v98;
      v126 = *v98++;
      v91 = v126;
      v128 = *v104++;
      v127 = v128;
      v129 = *v99++;
      v130 = (v125 + v106 - 4 * v91 + v127 + v129) * v78;
      v131 = (((v130 + 16) >> 5) + 4) >> 3;
      if (v130 > 8388463)
        LOWORD(v131) = 0x7FFF;
      if (v130 >= -8388752)
        v132 = v131;
      else
        v132 = 0x8000;
      *v103++ = v132;
      v106 = v91;
      --v124;
    }
    while (v124);
    goto LABEL_63;
  }
  return result;
}

void sub_20E7F5760(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  int *v38;
  int v39;
  unsigned int v40;
  _DWORD *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  char *v47;
  char *i;
  _QWORD *v49;
  int v50;
  char *v51;
  char *j;
  _QWORD *v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  int v63;
  int v64;
  char v65;
  char *v66;
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  int v75;
  int v76;
  char v77;
  char *v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  int v107;
  __int128 v108;
  int v109;
  char v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;

  v88 = *(_QWORD *)(a1 + 248);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v6 = *(_QWORD *)(a1 + 8) * *(_QWORD *)a1;
  if (v6)
  {
    if (v6 > 0xCCCCCCCCCCCCCCCLL)
      goto LABEL_122;
    v7 = (char *)operator new(20 * v6);
    v8 = &v7[20 * v6];
    v111 = v7;
    v112 = v7;
    v113 = v8;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 2);
  if (v9 < 4)
    goto LABEL_8;
  if (v9 >= 0x3333333333333334)
LABEL_122:
    sub_20E78D874();
  v10 = v9 >> 2;
  v114 = (char *)operator new(20 * (v9 >> 2));
  v115 = v114;
  v116 = &v114[20 * v10];
LABEL_8:
  v11 = *(uint64_t **)(a1 + 256);
  v11[17] = 0;
  v11[18] = 0;
  v12 = v11[1];
  if (v12 <= 1)
    v12 = 1;
  v11[19] = v12 - 1;
  v13 = (void *)v11[20];
  v14 = v11[21] - (_QWORD)v13;
  if (v14 >= 1)
    bzero(v13, 8 * (((unint64_t)v14 >> 3) - ((unint64_t)v14 > 7)) + 8);
  v15 = v5 * v4;
  v11[23] = 0;
  v11[24] = 0;
  v16 = *v11;
  if (*v11)
  {
    v17 = v11[25];
    if (v16 == 1)
    {
      v18 = 0;
LABEL_18:
      v22 = v16 - v18;
      v23 = (_QWORD *)(v17 + 24 * v18 + 8);
      do
      {
        *v23 = *(v23 - 1);
        v23 += 3;
        --v22;
      }
      while (v22);
      goto LABEL_20;
    }
    v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
    v19 = (uint64_t *)(v17 + 24);
    v20 = v16 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v21 = *v19;
      *(v19 - 2) = *(v19 - 3);
      v19[1] = v21;
      v19 += 6;
      v20 -= 2;
    }
    while (v20);
    if (v16 != v18)
      goto LABEL_18;
  }
LABEL_20:
  v24 = (void *)v11[28];
  v25 = v11[29] - (_QWORD)v24;
  if (v25 >= 1)
    bzero(v24, 8 * (((unint64_t)v25 >> 3) - ((unint64_t)v25 > 7)) + 8);
  if (v15)
  {
    v26 = 0;
    v27 = v15 - 1;
    v86 = a2;
    v87 = v15;
    v94 = v15 - 1;
    while (1)
    {
      v28 = *(_QWORD *)(v88 + 48);
      v29 = v26 | 1;
      v30 = *(_QWORD *)(v28 + 144 * v26 + 32);
      if (v30 != *(_QWORD *)(v28 + 144 * (v26 | 1) + 32))
        break;
      v31 = *(_QWORD *)(v28 + 144 * v26 + 48);
      if (v31 != *(_QWORD *)(v28 + 144 * v29 + 48))
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/ResponseMapAndKPCGenerator.cpp", 105, "lap_scale0.height() == lap_scale1.height() && \"image height mismatch\"", (void (*)(void *))sub_20E803DA4);
        goto LABEL_121;
      }
      v32 = *(_QWORD *)(a1 + 192);
      if (v32 == 1)
      {
        v33 = v30 - 1;
        v34 = v31 - 1;
        v35 = 1;
        v36 = (int)v31 - 1 > 1 && v33 > 1;
        v101 = v26 | 1;
        if (v36)
          goto LABEL_59;
        goto LABEL_49;
      }
      v37 = 40 * v86 + 8 * (v26 >> 1);
      v38 = (int *)(*(_QWORD *)(a1 + 200) + v37);
      v39 = *v38;
      v40 = v38[1];
      if (*v38 <= 1)
        v35 = 1;
      else
        v35 = *v38;
      v41 = (_DWORD *)(*(_QWORD *)(a1 + 224) + v37);
      v42 = v41[1];
      v43 = *v41 + v39;
      v44 = v30 - 1;
      if (v44 >= v43)
        v33 = v43;
      else
        v33 = v44;
      if (v40 <= 1)
        LODWORD(v32) = 1;
      else
        LODWORD(v32) = v40;
      v34 = v42 + v40;
      v45 = v31 - 1;
      if (v45 < (int)(v42 + v40))
        v34 = v45;
      v46 = (int)v32 < v34 && v35 < v33;
      v101 = v26 | 1;
      if (v46)
      {
LABEL_59:
        v100 = v26 >> 1;
        v95 = (_QWORD *)(v28 + 144 * v26 + 120);
        v92 = v26;
        v93 = (_QWORD *)(v28 + 144 * v29 + 120);
        v56 = (int)v32;
        v89 = v34;
        v90 = v35;
        v96 = v33;
        do
        {
          v57 = 8 * v56 - 8;
          v58 = *(_QWORD *)(*v95 + v57);
          v105 = *(_QWORD *)(*v95 + 8 * v56);
          v91 = v56 + 1;
          v59 = 8 * (v56 + 1);
          v104 = *(_QWORD *)(*v95 + v59);
          v102 = *(_QWORD *)(*v93 + 8 * v56);
          v103 = *(_QWORD *)(*v93 + v57);
          v60 = *(_QWORD *)(*v93 + v59);
          v61 = v90;
          v97 = (_DWORD)v56 << v100;
          v98 = v58;
          v99 = v56;
          do
          {
            v110 = 0;
            if (v26
              && sub_20E7F7D70(v58, v105, v104, v103, v102, v60, v61, *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), &v110, *(_BYTE *)(a1 + 52)))
            {
              v63 = *(__int16 *)(*(_QWORD *)(*v95 + 8 * v56) + 2 * v61);
              v64 = (_DWORD)v61 << v100;
              v65 = v110;
              v66 = v115;
              if (v115 < v116)
              {
                *(_DWORD *)v115 = v64;
                *((_DWORD *)v66 + 1) = v97;
                *((_DWORD *)v66 + 2) = v26;
                v66[12] = v65;
                v67 = v66 + 20;
                *((_DWORD *)v66 + 4) = v63;
                v33 = v96;
                v58 = v98;
                v56 = v99;
LABEL_85:
                v115 = v67;
                v29 = v101;
                goto LABEL_86;
              }
              v68 = v114;
              v69 = 0xCCCCCCCCCCCCCCCDLL * ((v115 - v114) >> 2) + 1;
              if (v69 > 0xCCCCCCCCCCCCCCCLL)
                sub_20E78D874();
              if (0x999999999999999ALL * ((v116 - v114) >> 2) > v69)
                v69 = 0x999999999999999ALL * ((v116 - v114) >> 2);
              if (0xCCCCCCCCCCCCCCCDLL * ((v116 - v114) >> 2) >= 0x666666666666666)
                v70 = 0xCCCCCCCCCCCCCCCLL;
              else
                v70 = v69;
              if (v70)
              {
                if (v70 > 0xCCCCCCCCCCCCCCCLL)
                  sub_20E78D888();
                v71 = (char *)operator new(20 * v70);
              }
              else
              {
                v71 = 0;
              }
              v72 = &v71[4 * ((v66 - v68) >> 2)];
              *(_DWORD *)v72 = v64;
              *((_DWORD *)v72 + 1) = v97;
              v26 = v92;
              *((_DWORD *)v72 + 2) = v92;
              v72[12] = v65;
              *((_DWORD *)v72 + 4) = v63;
              v73 = v72;
              if (v66 == v68)
              {
                v58 = v98;
                v56 = v99;
                v67 = v72 + 20;
                v114 = v72;
                v115 = v72 + 20;
                v116 = &v71[20 * v70];
                if (v66)
                  goto LABEL_83;
              }
              else
              {
                v58 = v98;
                v56 = v99;
                do
                {
                  v74 = *(_OWORD *)(v66 - 20);
                  *((_DWORD *)v73 - 1) = *((_DWORD *)v66 - 1);
                  *(_OWORD *)(v73 - 20) = v74;
                  v73 -= 20;
                  v66 -= 20;
                }
                while (v66 != v68);
                v66 = v114;
                v67 = v72 + 20;
                v114 = v73;
                v115 = v72 + 20;
                v116 = &v71[20 * v70];
                if (v66)
LABEL_83:
                  operator delete(v66);
              }
              v27 = v94;
              v33 = v96;
              goto LABEL_85;
            }
LABEL_86:
            if (v29 != v27
              && sub_20E7F7D70(v103, v102, v60, v58, v105, v104, v61, *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), &v110, *(_BYTE *)(a1 + 52)))
            {
              v75 = *(__int16 *)(*(_QWORD *)(*v93 + 8 * v56) + 2 * v61);
              v76 = (_DWORD)v61 << v100;
              v77 = v110;
              v78 = v112;
              if (v112 < v113)
              {
                *(_DWORD *)v112 = v76;
                *((_DWORD *)v78 + 1) = v97;
                *((_DWORD *)v78 + 2) = v29;
                v78[12] = v77;
                v62 = v78 + 20;
                *((_DWORD *)v78 + 4) = v75;
                v33 = v96;
                v58 = v98;
                v56 = v99;
              }
              else
              {
                v79 = v111;
                v80 = 0xCCCCCCCCCCCCCCCDLL * ((v112 - v111) >> 2) + 1;
                if (v80 > 0xCCCCCCCCCCCCCCCLL)
                  sub_20E78D874();
                if (0x999999999999999ALL * ((v113 - v111) >> 2) > v80)
                  v80 = 0x999999999999999ALL * ((v113 - v111) >> 2);
                if (0xCCCCCCCCCCCCCCCDLL * ((v113 - v111) >> 2) >= 0x666666666666666)
                  v81 = 0xCCCCCCCCCCCCCCCLL;
                else
                  v81 = v80;
                if (v81)
                {
                  if (v81 > 0xCCCCCCCCCCCCCCCLL)
                    sub_20E78D888();
                  v82 = (char *)operator new(20 * v81);
                }
                else
                {
                  v82 = 0;
                }
                v83 = &v82[4 * ((v78 - v79) >> 2)];
                *(_DWORD *)v83 = v76;
                *((_DWORD *)v83 + 1) = v97;
                *((_DWORD *)v83 + 2) = v101;
                v83[12] = v77;
                *((_DWORD *)v83 + 4) = v75;
                v84 = v83;
                if (v78 == v79)
                {
                  v26 = v92;
                  v58 = v98;
                  v56 = v99;
                  v62 = v83 + 20;
                  v111 = v83;
                  v112 = v83 + 20;
                  v113 = &v82[20 * v81];
                  if (v78)
                    goto LABEL_105;
                }
                else
                {
                  v26 = v92;
                  v58 = v98;
                  v56 = v99;
                  do
                  {
                    v85 = *(_OWORD *)(v78 - 20);
                    *((_DWORD *)v84 - 1) = *((_DWORD *)v78 - 1);
                    *(_OWORD *)(v84 - 20) = v85;
                    v84 -= 20;
                    v78 -= 20;
                  }
                  while (v78 != v79);
                  v78 = v111;
                  v62 = v83 + 20;
                  v111 = v84;
                  v112 = v83 + 20;
                  v113 = &v82[20 * v81];
                  if (v78)
LABEL_105:
                    operator delete(v78);
                }
                v27 = v94;
                v33 = v96;
              }
              v112 = v62;
              v29 = v101;
            }
            ++v61;
          }
          while (v33 != (_DWORD)v61);
          v56 = v91;
        }
        while (v91 != v89);
      }
LABEL_49:
      if (v26)
      {
        v47 = v114;
        for (i = v115; v47 != i; v47 += 20)
        {
          v49 = *(_QWORD **)(a1 + 256);
          v50 = *((_DWORD *)v47 + 4);
          v108 = *(_OWORD *)v47;
          v109 = v50;
          sub_20E7F6030(v49, &v108, v26 - 1, *((unsigned int *)v47 + 1) >> (v26 >> 1), 1);
        }
      }
      if (v101 != v94)
      {
        v51 = v111;
        for (j = v112; v51 != j; v51 += 20)
        {
          v53 = *(_QWORD **)(a1 + 256);
          v54 = *((_DWORD *)v51 + 4);
          v106 = *(_OWORD *)v51;
          v107 = v54;
          sub_20E7F6030(v53, &v106, v26, *((unsigned int *)v51 + 1) >> (v26 >> 1), 1);
        }
      }
      if (v115 != v114)
        v115 = v114;
      v55 = v111;
      if (v112 != v111)
        v112 = v111;
      v26 += 2;
      v27 = v94;
      if (v26 >= v87)
        goto LABEL_110;
    }
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/ResponseMapAndKPCGenerator.cpp", 104, "lap_scale0.width() == lap_scale1.width() && \"image width mismatch\"", (void (*)(void *))sub_20E803DA4);
LABEL_121:
    abort();
  }
  v55 = v111;
LABEL_110:
  if (v55)
  {
    v112 = v55;
    operator delete(v55);
  }
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
}

void sub_20E7F5FD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
    v4 = *(void **)(v1 - 112);
    if (!v4)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *(void **)(v1 - 112);
    if (!v4)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 - 104) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

void sub_20E7F6030(_QWORD *a1, __int128 *a2, unint64_t a3, unint64_t a4, int a5)
{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  unint64_t v20;
  char **v21;
  char *v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  _DWORD *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;

  if (a1[24] >= a3)
  {
    v12 = a1[23];
    if (v12 >= a4)
      goto LABEL_5;
LABEL_8:
    v13 = a1[17];
    v14 = a1[18];
    v16 = a1[19];
    v15 = a1[20];
    a1[23] = v12 + 1;
    a1[18] = v14 + v13;
    a1[19] = v16 + 1;
    *(_QWORD *)(v15 + 8 * v16) = v13;
    v17 = a1[18];
    for (i = a1[19] % a1[a3 + 1]; ; i = a1[19] % a1[a3 + 1])
    {
      a1[19] = i;
      a1[17] = 0;
      v19 = v17 - *(_QWORD *)(v15 + 8 * i);
      a1[18] = v19;
      v20 = a1[23];
      if (v20 >= a4)
        break;
      a1[23] = v20 + 1;
      a1[18] = v19;
      a1[19] = i + 1;
      *(_QWORD *)(v15 + 8 * i) = 0;
      v17 = a1[18];
    }
    if (v19 >= a1[a3 + 9])
      return;
    goto LABEL_12;
  }
  a1[24] = a3;
  v10 = (void *)a1[20];
  v11 = a1[21] - (_QWORD)v10;
  if (v11 >= 1)
    bzero(v10, 8 * (((unint64_t)v11 >> 3) - ((unint64_t)v11 > 7)) + 8);
  v12 = 0;
  a1[23] = 0;
  a1[18] = 0;
  a1[19] = 0;
  a1[17] = 0;
  if (a4)
    goto LABEL_8;
LABEL_5:
  if (a1[17] + a1[18] >= a1[a3 + 9])
    return;
LABEL_12:
  if (a5)
  {
    v21 = (char **)(a1[25] + 24 * a3);
    v23 = v21 + 1;
    v22 = v21[1];
    v24 = (unint64_t)v21[2];
    if ((unint64_t)v22 >= v24)
    {
      v27 = *v21;
      v28 = 0xCCCCCCCCCCCCCCCDLL * ((v22 - *v21) >> 2);
      v29 = v28 + 1;
      if (v28 + 1 > 0xCCCCCCCCCCCCCCCLL)
        sub_20E78D874();
      v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24 - (_QWORD)v27) >> 2);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x666666666666666)
        v31 = 0xCCCCCCCCCCCCCCCLL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 > 0xCCCCCCCCCCCCCCCLL)
          sub_20E78D888();
        v32 = (char *)operator new(20 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[20 * v28];
      *(_OWORD *)v33 = *a2;
      *((_DWORD *)v33 + 4) = *((_DWORD *)a2 + 4);
      v26 = v33 + 20;
      if (v22 != v27)
      {
        do
        {
          v34 = *(_OWORD *)(v22 - 20);
          *((_DWORD *)v33 - 1) = *((_DWORD *)v22 - 1);
          *(_OWORD *)(v33 - 20) = v34;
          v33 -= 20;
          v22 -= 20;
        }
        while (v22 != v27);
        v22 = *v21;
      }
      *v21 = v33;
      *v23 = v26;
      v21[2] = &v32[20 * v31];
      if (v22)
        operator delete(v22);
    }
    else
    {
      v25 = *a2;
      *((_DWORD *)v22 + 4) = *((_DWORD *)a2 + 4);
      *(_OWORD *)v22 = v25;
      v26 = v22 + 20;
    }
    *v23 = v26;
  }
  ++a1[17];
  ++*(_QWORD *)(a1[28] + 8 * a3);
}

void sub_20E7F62D8(unsigned __int16 *a1, _QWORD *a2, unsigned int a3)
{
  sub_20E7F502C(a1, a2);
  sub_20E7F5760((uint64_t)a1, a3);
}

void sub_20E7F6304(vImagePixelCount *a1)
{
  vImagePixelCount v1;
  vImagePixelCount *v2;
  uint64_t v3;
  vImagePixelCount v4;
  vImagePixelCount v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  std::__shared_weak_count_vtbl *data;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  vImagePixelCount v31;
  vImagePixelCount v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _BYTE *v36;
  char *v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  size_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  size_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  char *v60;
  char *v61;
  _BYTE *v62;
  vImagePixelCount *v63;
  void **v64;
  size_t v65;
  char *v66;
  std::__shared_weak_count *v67;
  _QWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  char *v86;
  size_t v87;
  char *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  size_t v92;
  size_t v93;
  size_t v94;
  size_t v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  vImagePixelCount v108;
  void *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  vImagePixelCount v122;
  char *v123;
  uint64_t v124;
  vImagePixelCount v125;
  vImagePixelCount v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  char *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  size_t v151;
  char *v152;
  unint64_t v153;
  char *v154;
  char *v155;
  size_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  char *v171;
  vImagePixelCount v172;
  char *v173;
  void (***v174)(char *);
  void (**v175)(char *);
  BOOL v176;
  uint64_t v177;
  vImagePixelCount *v178;
  _QWORD *v179;
  _QWORD *v180;
  vImagePixelCount v181;
  vImagePixelCount v182;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  size_t v190;
  size_t v191;
  char *v192;
  size_t v193;
  char *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  size_t v199;
  vImagePixelCount v200;
  vImagePixelCount v201;
  size_t v202;
  unint64_t v203;
  __int128 v204;
  uint64_t v205;
  void *__p;
  std::__shared_weak_count *v207;
  vImage_Buffer buf;
  char *v209;
  vImagePixelCount v210;
  __int128 v211;
  vImagePixelCount *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;

  v1 = a1[2];
  if (v1)
  {
    v2 = a1;
    if (a1[3])
    {
      v3 = 0;
      v180 = a1 + 9;
      v178 = a1 + 8;
      v179 = a1 + 6;
      v4 = *a1;
      v5 = a1[1];
      v6 = 1;
      while (!v6)
      {
LABEL_5:
        v7 = *((unsigned __int8 *)v2 + 41);
        v5 = (v5 + v7) >> 1;
        v4 = (v4 + v7) >> 1;
        if (++v3 >= v1)
          return;
      }
      v177 = v3;
      v8 = 0;
      v9 = 8 * v5;
      v181 = v5;
      v182 = v4;
      v184 = 8 * v5;
LABEL_9:
      vImageBuffer_Init(&buf, v5, v4, 0x10u, 0);
      data = (std::__shared_weak_count_vtbl *)buf.data;
      v11 = (std::__shared_weak_count *)operator new();
      v11->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9A9090;
      v11->__shared_weak_owners_ = 0;
      v11[1].__vftable = data;
      v207 = v11;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = buf.rowBytes >> 1;
      __p = 0;
      if (v2[4] * v4 > buf.rowBytes >> 1)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      *(_QWORD *)&v204 = data;
      *((_QWORD *)&v204 + 1) = v11;
      v201 = v4;
      v202 = buf.rowBytes >> 1;
      v200 = v2[4];
      LOBYTE(v205) = 0;
      v203 = v5;
      if (v5)
      {
        if (v5 >> 61)
          sub_20E78D874();
        v15 = operator new(v9);
        bzero(v15, v9);
        v16 = 0;
        v17 = 0;
        __p = v15;
        do
        {
          *((_QWORD *)v15 + v17++) = v204 + v16;
          v16 += 2 * v14;
        }
        while (v5 != v17);
      }
      v19 = (_OWORD *)v2[10];
      v18 = v2[11];
      if ((unint64_t)v19 < v18)
      {
        v20 = *(_OWORD *)&buf.width;
        *v19 = *(_OWORD *)&buf.data;
        v19[1] = v20;
        v21 = v19 + 2;
        goto LABEL_29;
      }
      v22 = (_OWORD *)*v180;
      v23 = ((uint64_t)v19 - *v180) >> 5;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 59)
        sub_20E78D874();
      v25 = v18 - (_QWORD)v22;
      if (v25 >> 4 > v24)
        v24 = v25 >> 4;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
        v26 = 0x7FFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        if (v26 >> 59)
          goto LABEL_180;
        v27 = (char *)operator new(32 * v26);
        v28 = *(_OWORD *)&buf.width;
        v29 = &v27[32 * v23];
        *(_OWORD *)v29 = *(_OWORD *)&buf.data;
        *((_OWORD *)v29 + 1) = v28;
        v30 = (uint64_t)v29;
        if (v19 == v22)
        {
LABEL_27:
          v21 = v29 + 32;
          v2[9] = v30;
          v2[10] = (vImagePixelCount)(v29 + 32);
          v2[11] = (vImagePixelCount)&v27[32 * v26];
          if (!v19)
            goto LABEL_29;
          goto LABEL_28;
        }
      }
      else
      {
        v27 = 0;
        v57 = *(_OWORD *)&buf.width;
        v29 = (char *)(32 * v23);
        *(_OWORD *)v29 = *(_OWORD *)&buf.data;
        *((_OWORD *)v29 + 1) = v57;
        v30 = 32 * v23;
        if (v19 == v22)
          goto LABEL_27;
      }
      do
      {
        v58 = *(v19 - 1);
        *(_OWORD *)(v30 - 32) = *(v19 - 2);
        *(_OWORD *)(v30 - 16) = v58;
        v30 -= 32;
        v19 -= 2;
      }
      while (v19 != v22);
      v19 = (_OWORD *)*v180;
      v21 = v29 + 32;
      v2[9] = v30;
      v2[10] = (vImagePixelCount)(v29 + 32);
      v2[11] = (vImagePixelCount)&v27[32 * v26];
      if (!v19)
      {
LABEL_29:
        v2[10] = (vImagePixelCount)v21;
        v32 = v2[7];
        v31 = v2[8];
        v185 = v8;
        if (v32 < v31)
        {
          *(_QWORD *)v32 = &off_24C9A90E0;
          *(_BYTE *)(v32 + 8) = 0;
          *(_BYTE *)(v32 + 112) = 0;
          *(_OWORD *)(v32 + 16) = 0u;
          *(_OWORD *)(v32 + 32) = 0u;
          *(_OWORD *)(v32 + 48) = 0u;
          *(_OWORD *)(v32 + 64) = 0u;
          *(_OWORD *)(v32 + 80) = 0u;
          *(_OWORD *)(v32 + 89) = 0u;
          *(_QWORD *)(v32 + 120) = 0;
          *(_QWORD *)(v32 + 128) = 0;
          *(_QWORD *)(v32 + 136) = 0;
          if (v200 * v201 > v202)
          {
            sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
            abort();
          }
          v33 = *(std::__shared_weak_count **)(v32 + 80);
          *(_OWORD *)(v32 + 72) = v204;
          if (v33)
          {
            v34 = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          *(_BYTE *)(v32 + 8) = 0;
          *(_QWORD *)(v32 + 32) = v201;
          *(_QWORD *)(v32 + 40) = v202;
          *(_QWORD *)(v32 + 48) = v5;
          *(_QWORD *)(v32 + 16) = v200;
          *(_QWORD *)(v32 + 24) = 0;
          *(_BYTE *)(v32 + 112) = 0;
          *(_QWORD *)(v32 + 104) = v205;
          *(_QWORD *)(v32 + 56) = 2 * v200;
          *(_QWORD *)(v32 + 64) = 2 * v200;
          v36 = *(_BYTE **)(v32 + 120);
          v37 = *(char **)(v32 + 128);
          v38 = (v37 - v36) >> 3;
          v39 = v5 >= v38;
          v40 = v5 - v38;
          if (v5 <= v38)
          {
            v4 = v182;
            v2 = a1;
            v5 = v181;
            if (!v39)
              *(_QWORD *)(v32 + 128) = &v36[8 * v203];
            if (v203)
              goto LABEL_98;
          }
          else
          {
            v41 = *(_QWORD *)(v32 + 136);
            if (v40 <= (v41 - (uint64_t)v37) >> 3)
            {
              v93 = 8 * v40;
              bzero(*(void **)(v32 + 128), v93);
              *(_QWORD *)(v32 + 128) = &v37[v93];
              v4 = v182;
              v2 = a1;
              v5 = v181;
            }
            else
            {
              if (v5 >> 61)
                sub_20E78D874();
              v42 = v41 - (_QWORD)v36;
              v43 = v42 >> 2;
              if (v42 >> 2 <= v5)
                v43 = v5;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                v43 = 0x1FFFFFFFFFFFFFFFLL;
              if (v43 >> 61)
                sub_20E78D888();
              v197 = v43;
              v44 = (char *)operator new(8 * v43);
              v45 = 8 * v40;
              v46 = v44;
              v47 = &v44[8 * v38];
              v193 = v45;
              bzero(v47, v45);
              if (v37 == v36)
              {
                v49 = v47;
                v2 = a1;
                v50 = v46;
                v51 = v193;
              }
              else
              {
                v48 = v37 - 8 - v36;
                if (v48 < 0x58)
                {
                  v49 = v47;
                  v2 = a1;
                  v50 = v46;
                  v51 = v193;
                  goto LABEL_94;
                }
                v50 = v46;
                v49 = v47;
                v2 = a1;
                v51 = v193;
                if ((unint64_t)(v36 - v46) < 0x20)
                  goto LABEL_191;
                v98 = (v48 >> 3) + 1;
                v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
                v100 = &v37[-v99];
                v49 = &v47[-v99];
                v101 = &v46[8 * v38 - 16];
                v102 = v37 - 16;
                v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v104 = *(_OWORD *)v102;
                  *((_OWORD *)v101 - 1) = *((_OWORD *)v102 - 1);
                  *(_OWORD *)v101 = v104;
                  v101 -= 32;
                  v102 -= 32;
                  v103 -= 4;
                }
                while (v103);
                v37 = v100;
                if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_191:
                  do
                  {
LABEL_94:
                    v105 = *((_QWORD *)v37 - 1);
                    v37 -= 8;
                    *((_QWORD *)v49 - 1) = v105;
                    v49 -= 8;
                  }
                  while (v37 != v36);
                }
                v37 = *(char **)(v32 + 120);
              }
              *(_QWORD *)(v32 + 120) = v49;
              *(_QWORD *)(v32 + 128) = &v47[v51];
              *(_QWORD *)(v32 + 136) = &v50[8 * v197];
              v5 = v181;
              v4 = v182;
              if (v37)
                operator delete(v37);
            }
LABEL_98:
            v106 = 0;
            v107 = 0;
            do
            {
              *(_QWORD *)(*(_QWORD *)(v32 + 120) + 8 * v107++) = *(_QWORD *)(v32 + 72) + v106;
              v106 += 2 * v202;
            }
            while (v203 != v107);
          }
          v108 = v32 + 144;
          v2[7] = v32 + 144;
          v9 = v184;
          v2[7] = v108;
          v109 = __p;
          if (!__p)
            goto LABEL_102;
LABEL_101:
          operator delete(v109);
          goto LABEL_102;
        }
        v52 = 0x8E38E38E38E38E39 * ((uint64_t)(v32 - *v179) >> 4);
        v53 = v52 + 1;
        if (v52 + 1 > 0x1C71C71C71C71C7)
          sub_20E78D874();
        v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v31 - *v179) >> 4);
        if (2 * v54 > v53)
          v53 = 2 * v54;
        if (v54 >= 0xE38E38E38E38E3)
          v55 = 0x1C71C71C71C71C7;
        else
          v55 = v53;
        v212 = v178;
        if (v55)
        {
          if (v55 > 0x1C71C71C71C71C7)
LABEL_180:
            sub_20E78D888();
          v56 = (char *)operator new(144 * v55);
        }
        else
        {
          v56 = 0;
        }
        v59 = &v56[144 * v52];
        v209 = v56;
        v210 = (vImagePixelCount)v59;
        *(_QWORD *)&v211 = v59;
        *((_QWORD *)&v211 + 1) = &v56[144 * v55];
        *(_QWORD *)v59 = &off_24C9A90E0;
        v60 = v59;
        v59[112] = 0;
        *((_OWORD *)v59 + 2) = 0u;
        *((_OWORD *)v59 + 3) = 0u;
        *((_OWORD *)v59 + 4) = 0u;
        *((_OWORD *)v59 + 5) = 0u;
        *(_OWORD *)(v59 + 89) = 0u;
        v61 = v59;
        *((_QWORD *)v59 + 16) = 0;
        *((_QWORD *)v59 + 17) = 0;
        v59[8] = 0;
        v62 = v59 + 8;
        *((_OWORD *)v60 + 1) = 0u;
        v63 = (vImagePixelCount *)(v60 + 16);
        *((_QWORD *)v61 + 15) = 0;
        v64 = (void **)(v61 + 120);
        v65 = v202;
        if (v200 * v201 > v202)
        {
          sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
          abort();
        }
        v194 = v56;
        v198 = v52;
        v66 = &v56[144 * v52];
        v67 = (std::__shared_weak_count *)*((_QWORD *)v66 + 10);
        *(_OWORD *)(v66 + 72) = v204;
        v68 = v66 + 72;
        if (v67)
        {
          v69 = (unint64_t *)&v67->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
            v65 = v202;
          }
        }
        v71 = &v194[144 * v198];
        v74 = (char *)*((_QWORD *)v71 + 16);
        v72 = v71 + 128;
        v73 = v74;
        *v62 = 0;
        *(v72 - 13) = 0;
        *(v72 - 12) = v201;
        *(v72 - 11) = v65;
        *(v72 - 10) = v203;
        *v63 = v200;
        *(v72 - 3) = v205;
        *((_BYTE *)v72 - 16) = 0;
        *(v72 - 9) = 2 * v200;
        *(v72 - 8) = 2 * v200;
        v75 = (char *)*v64;
        v76 = v74 - (_BYTE *)*v64;
        v77 = v76 >> 3;
        v78 = v203 - (v76 >> 3);
        if (v203 <= v76 >> 3)
        {
          if (v203 < v76 >> 3)
            *v72 = &v75[8 * v203];
          v9 = v184;
          if (!v203)
            goto LABEL_117;
          goto LABEL_115;
        }
        v79 = &v194[144 * v198];
        v82 = *((_QWORD *)v79 + 17);
        v81 = v79 + 136;
        v80 = v82;
        if (v78 <= (v82 - (uint64_t)v73) >> 3)
        {
          v94 = 8 * v78;
          v95 = v65;
          v96 = v72;
          bzero(v73, v94);
          v65 = v95;
          *v96 = &v73[v94];
          v9 = v184;
LABEL_115:
          v120 = 0;
          v121 = 0;
          do
          {
            *((_QWORD *)*v64 + v121++) = *v68 + v120;
            v120 += 2 * v65;
          }
          while (v203 != v121);
LABEL_117:
          v122 = v211 + 144;
          *(_QWORD *)&v211 = v211 + 144;
          v2 = a1;
          v123 = (char *)a1[7];
          v192 = (char *)a1[6];
          if (v123 == v192)
          {
            a1[6] = v210;
            a1[7] = v122;
            a1[8] = *((_QWORD *)&v211 + 1);
            if (v123)
              goto LABEL_169;
            goto LABEL_170;
          }
          v124 = 0;
          v125 = v210;
          while (1)
          {
            v126 = v125;
            *(_QWORD *)(v125 - 144) = &off_24C9A90E0;
            v125 -= 144;
            *(_BYTE *)(v125 + 8) = 0;
            *(_BYTE *)(v125 + 112) = 0;
            *(_OWORD *)(v125 + 16) = 0u;
            *(_OWORD *)(v125 + 32) = 0u;
            *(_OWORD *)(v125 + 48) = 0u;
            *(_OWORD *)(v125 + 64) = 0u;
            *(_OWORD *)(v125 + 80) = 0u;
            *(_OWORD *)(v125 + 89) = 0u;
            *(_QWORD *)(v125 + 120) = 0;
            *(_QWORD *)(v125 + 128) = 0;
            *(_QWORD *)(v125 + 136) = 0;
            v127 = *((_QWORD *)v123 - 9);
            v213 = v127;
            v128 = (std::__shared_weak_count *)*((_QWORD *)v123 - 8);
            v214 = v128;
            if (v128)
            {
              v129 = (unint64_t *)&v128->__shared_owners_;
              do
                v130 = __ldxr(v129);
              while (__stxr(v130 + 1, v129));
            }
            v132 = *((_QWORD *)v123 - 14);
            v131 = *((_QWORD *)v123 - 13);
            v134 = *((_QWORD *)v123 - 16);
            v133 = *((_QWORD *)v123 - 15);
            v135 = *(v123 - 136);
            if (*(v123 - 136))
              v136 = *((_QWORD *)v123 - 14);
            else
              v136 = 0;
            if (v133 + v134 * v132 + v136 > v131)
            {
              sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
              abort();
            }
            v137 = *((_QWORD *)v123 - 12);
            v213 = 0;
            v214 = 0;
            v138 = *(std::__shared_weak_count **)(v126 - 64);
            *(_QWORD *)(v126 - 72) = v127;
            *(_QWORD *)(v126 - 64) = v128;
            if (v138)
            {
              v139 = (unint64_t *)&v138->__shared_owners_;
              do
                v140 = __ldaxr(v139);
              while (__stlxr(v140 - 1, v139));
              if (!v140)
              {
                v195 = v131;
                ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                std::__shared_weak_count::__release_weak(v138);
                v131 = v195;
              }
            }
            *(_BYTE *)(v126 - 136) = v135;
            *(_QWORD *)(v126 - 112) = v132;
            *(_QWORD *)(v126 - 104) = v131;
            *(_QWORD *)(v126 - 96) = v137;
            *(_QWORD *)(v126 - 128) = v134;
            *(_QWORD *)(v126 - 120) = v133;
            v141 = *((_QWORD *)v123 - 5);
            *(_BYTE *)(v126 - 32) = *(v123 - 32);
            *(_QWORD *)(v126 - 40) = v141;
            v142 = v135 | (2 * v134);
            *(_QWORD *)(v126 - 88) = v142 + v133;
            *(_QWORD *)(v126 - 80) = v142;
            v143 = *(_BYTE **)(v126 - 24);
            v144 = *(char **)(v126 - 16);
            v145 = (v144 - v143) >> 3;
            v146 = v137 - v145;
            if (v137 <= v145)
            {
              if (v137 < v145)
                *(_QWORD *)(v126 - 16) = &v143[8 * v137];
              if (!v137)
                goto LABEL_159;
              goto LABEL_157;
            }
            v147 = *(_QWORD *)(v126 - 8);
            if (v146 <= (v147 - (uint64_t)v144) >> 3)
            {
              v157 = v131;
              bzero(*(void **)(v126 - 16), 8 * v146);
              v131 = v157;
              *(_QWORD *)(v126 - 16) = &v144[8 * v146];
              goto LABEL_157;
            }
            if (v137 >> 61)
              sub_20E78D874();
            v148 = v147 - (_QWORD)v143;
            v149 = v148 >> 2;
            if (v148 >> 2 <= v137)
              v149 = v137;
            if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8)
              v149 = 0x1FFFFFFFFFFFFFFFLL;
            if (v149 >> 61)
              sub_20E78D888();
            v196 = v131;
            v188 = v149;
            v150 = (char *)operator new(8 * v149);
            v151 = 8 * v146;
            v186 = v150;
            v152 = &v150[8 * v145];
            v190 = v151;
            bzero(v152, v151);
            if (v144 != v143)
              break;
            v131 = v196;
            *(_QWORD *)(v126 - 24) = v152;
            *(_QWORD *)(v126 - 16) = &v152[v190];
            *(_QWORD *)(v126 - 8) = &v186[8 * v188];
            if (v144)
              goto LABEL_156;
LABEL_157:
            v166 = 0;
            v167 = 0;
            do
            {
              *(_QWORD *)(*(_QWORD *)(v126 - 24) + 8 * v167++) = *(_QWORD *)(v126 - 72) + v166;
              v166 += 2 * v131;
            }
            while (v137 != v167);
LABEL_159:
            v168 = v214;
            if (v214)
            {
              v169 = (unint64_t *)&v214->__shared_owners_;
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
            v123 -= 144;
            v124 -= 144;
            if (v123 == v192)
            {
              v123 = (char *)a1[6];
              v171 = (char *)a1[7];
              a1[6] = v125;
              v2 = a1;
              v172 = v211;
              *(_OWORD *)(a1 + 7) = v211;
              v122 = v172;
              if (v171 != v123)
              {
                v173 = v171 - 144;
                v174 = (void (***)(char *))(v171 - 144);
                do
                {
                  v175 = *v174;
                  v174 -= 18;
                  (*v175)(v173);
                  v176 = v173 == v123;
                  v173 = (char *)v174;
                }
                while (!v176);
              }
              v9 = v184;
              if (v123)
LABEL_169:
                operator delete(v123);
LABEL_170:
              v5 = v181;
              v4 = v182;
              v8 = v185;
              v2[7] = v122;
              v109 = __p;
              if (__p)
                goto LABEL_101;
LABEL_102:
              if (v207)
              {
                v110 = (unint64_t *)&v207->__shared_owners_;
                do
                  v111 = __ldaxr(v110);
                while (__stlxr(v111 - 1, v110));
                if (!v111)
                {
                  ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                  std::__shared_weak_count::__release_weak(v207);
                }
              }
              ++v8;
              v6 = v2[3];
              if (v8 >= v6)
              {
                v1 = v2[2];
                v3 = v177;
                goto LABEL_5;
              }
              goto LABEL_9;
            }
          }
          v153 = v144 - 8 - v143;
          v131 = v196;
          if (v153 >= 0x58)
          {
            v155 = v186;
            v154 = v152;
            v156 = v190;
            if ((unint64_t)(v143 - v186) >= 0x20)
            {
              v158 = (v153 >> 3) + 1;
              v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
              v160 = &v144[-v159];
              v154 = &v152[-v159];
              v161 = &v186[8 * v145 - 16];
              v162 = v144 - 16;
              v163 = v158 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v164 = *(_OWORD *)v162;
                *((_OWORD *)v161 - 1) = *((_OWORD *)v162 - 1);
                *(_OWORD *)v161 = v164;
                v161 -= 32;
                v162 -= 32;
                v163 -= 4;
              }
              while (v163);
              v144 = v160;
              if (v158 == (v158 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_155:
                v144 = *(char **)(v125 + 120);
                *(_QWORD *)(v126 - 24) = v154;
                *(_QWORD *)(v126 - 16) = &v152[v156];
                *(_QWORD *)(v126 - 8) = &v155[8 * v188];
                if (!v144)
                  goto LABEL_157;
LABEL_156:
                operator delete(v144);
                v131 = v196;
                goto LABEL_157;
              }
            }
          }
          else
          {
            v154 = v152;
            v155 = v186;
            v156 = v190;
          }
          do
          {
            v165 = *((_QWORD *)v144 - 1);
            v144 -= 8;
            *((_QWORD *)v154 - 1) = v165;
            v154 -= 8;
          }
          while (v144 != v143);
          goto LABEL_155;
        }
        if (v203 >> 61)
          sub_20E78D874();
        v191 = v65;
        v83 = v80 - (_QWORD)v75;
        v84 = v83 >> 2;
        if (v83 >> 2 <= v203)
          v84 = v203;
        if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
          v84 = 0x1FFFFFFFFFFFFFFFLL;
        if (v84 >> 61)
          sub_20E78D888();
        v85 = v72;
        v187 = v84;
        v189 = v81;
        v86 = (char *)operator new(8 * v84);
        v87 = 8 * v78;
        v88 = v86;
        v89 = &v86[8 * v77];
        v199 = v87;
        bzero(v89, v87);
        if (v73 == v75)
        {
          v91 = v89;
          v65 = v191;
          v97 = v187;
          v92 = v199;
          goto LABEL_113;
        }
        v90 = v73 - 8 - v75;
        v65 = v191;
        if (v90 >= 0x58)
        {
          v91 = v89;
          v92 = v199;
          if ((unint64_t)(&v73[-v76] - v88) >= 0x20)
          {
            v112 = (v90 >> 3) + 1;
            v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
            v114 = &v73[-v113];
            v91 = &v89[-v113];
            v115 = &v88[8 * v77 - 16];
            v116 = v73 - 16;
            v117 = v112 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v118 = *(_OWORD *)v116;
              *((_OWORD *)v115 - 1) = *((_OWORD *)v116 - 1);
              *(_OWORD *)v115 = v118;
              v115 -= 32;
              v116 -= 32;
              v117 -= 4;
            }
            while (v117);
            v73 = v114;
            if (v112 == (v112 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_112;
          }
        }
        else
        {
          v91 = v89;
          v92 = v199;
        }
        do
        {
          v119 = *((_QWORD *)v73 - 1);
          v73 -= 8;
          *((_QWORD *)v91 - 1) = v119;
          v91 -= 8;
        }
        while (v73 != v75);
LABEL_112:
        v73 = (char *)*v64;
        v97 = v187;
LABEL_113:
        *v64 = v91;
        *v85 = &v89[v92];
        *v189 = &v88[8 * v97];
        v9 = v184;
        if (v73)
        {
          operator delete(v73);
          v65 = v191;
        }
        goto LABEL_115;
      }
LABEL_28:
      operator delete(v19);
      goto LABEL_29;
    }
  }
}

void sub_20E7F728C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void **v33;
  uint64_t v34;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;

  v36 = *v33;
  if (*v33)
  {
    *(_QWORD *)(a29 + 144 * a30 + 128) = v36;
    operator delete(v36);
  }
  v37 = *(std::__shared_weak_count **)(a29 + 144 * a30 + 96);
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(std::__shared_weak_count **)(a29 + 144 * a30 + 80);
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  sub_20E7B81B8(v34 - 144);
  sub_20E7F7554(&a33);
  sub_20E7858BC(v34 - 192);
  _Unwind_Resume(a1);
}

void sub_20E7F73FC(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  free(v1);
  __cxa_rethrow();
}

void sub_20E7F7410(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E7F7440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  uint64_t v49;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;

  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  v51 = a45;
  if (a45)
  {
    p_shared_owners = (unint64_t *)&a45->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = a43;
  if (a43)
  {
    v55 = (unint64_t *)&a43->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  sub_20E7858BC((uint64_t)&a31);
  sub_20E7858BC(v49 - 192);
  _Unwind_Resume(a1);
}

void sub_20E7F74DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v37;

  sub_20E7858BC(v35 - 104);
  v37 = *a30;
  if (*a30)
  {
    *(_QWORD *)(v33 - 16) = v37;
    operator delete(v37);
  }
  sub_20E7ABA04(a27);
  if (v33 != a11)
  {
    do
    {
      (**(void (***)(uint64_t))(a11 + v34))(a11 + v34);
      v34 += 144;
    }
    while (v34);
  }
  sub_20E7B81B8(v35 - 144);
  sub_20E7F7554(&a33);
  sub_20E7858BC(v35 - 192);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E7F7554(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24C9A90E0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[12];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)a1[10];
      if (v6)
        goto LABEL_8;
      return a1;
    }
  }
  v6 = (std::__shared_weak_count *)a1[10];
  if (!v6)
    return a1;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20E7F7620(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

void sub_20E7F7644(uint64_t a1)
{
  free(*(void **)(a1 + 24));
}

uint64_t sub_20E7F764C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio16image_processing17ScaleSpacePyramidIsE23MakevImage_BufferSharedEPvEUlPsE_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidIsE23MakevImage_BufferSharedEPvEUlPsE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio16image_processing17ScaleSpacePyramidIsE23MakevImage_BufferSharedEPvEUlPsE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidIsE23MakevImage_BufferSharedEPvEUlPsE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E7F76BC(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24C9A90E0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[12];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E7F7784(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;

  *(_QWORD *)a1 = 8;
  *(_OWORD *)(a1 + 200) = 0u;
  v5 = a1 + 200;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  *(_OWORD *)(a1 + 56) = a2[3];
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  *(_OWORD *)(a1 + 120) = a3[3];
  *(_OWORD *)(a1 + 104) = v11;
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  v12 = a4 - 2;
  *(_QWORD *)a1 = a4 - 2;
  v13 = *(_QWORD *)a2;
  v14 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 <= v14)
    v13 = *((_QWORD *)a2 + 1);
  v15 = 8 * (*(_QWORD *)a2 < v14);
  v16 = *((_QWORD *)a2 + 2);
  v17 = *((_QWORD *)a2 + 3);
  v18 = v13 >= v16;
  if (v13 <= v16)
    v13 = *((_QWORD *)a2 + 2);
  if (!v18)
    v15 = 16;
  v19 = v13 >= v17;
  if (v13 <= v17)
    v13 = *((_QWORD *)a2 + 3);
  if (!v19)
    v15 = 24;
  v20 = *((_QWORD *)a2 + 4);
  v21 = *((_QWORD *)a2 + 5);
  v22 = v13 >= v20;
  if (v13 <= v20)
    v13 = *((_QWORD *)a2 + 4);
  if (!v22)
    v15 = 32;
  v23 = v13 >= v21;
  if (v13 <= v21)
    v13 = *((_QWORD *)a2 + 5);
  if (!v23)
    v15 = 40;
  v24 = *((_QWORD *)a2 + 6);
  v25 = v13 >= v24;
  if (v13 <= v24)
    v13 = *((_QWORD *)a2 + 6);
  if (!v25)
    v15 = 48;
  v26 = a1 + 224;
  v18 = v13 >= *((_QWORD *)a2 + 7);
  v27 = 56;
  if (v18)
    v27 = v15;
  v28 = *(_QWORD *)((char *)a2 + v27);
  v41 = 0;
  if (v28)
  {
    sub_20E7E3A20(a1 + 160, v28, &v41);
    v12 = *(_QWORD *)a1;
    v30 = *(_QWORD *)(a1 + 200);
    v29 = *(_QWORD *)(a1 + 208);
  }
  else
  {
    v30 = 0;
    v29 = 0;
  }
  v31 = *(_QWORD *)(a1 + 8);
  if (v31 <= 1)
    v31 = 1;
  *(_QWORD *)(a1 + 152) = v31 - 1;
  v32 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v30) >> 3);
  if (v12 <= v32)
  {
    if (v12 < v32)
    {
      v33 = v30 + 24 * v12;
      if (v29 != v33)
      {
        v34 = v29;
        do
        {
          v36 = *(void **)(v34 - 24);
          v34 -= 24;
          v35 = v36;
          if (v36)
          {
            *(_QWORD *)(v29 - 16) = v35;
            operator delete(v35);
          }
          v29 = v34;
        }
        while (v34 != v33);
      }
      *(_QWORD *)(a1 + 208) = v33;
    }
  }
  else
  {
    sub_20E7C1E68(v5, v12 - v32);
  }
  v37 = *(_QWORD *)a1;
  v41 = 0;
  v38 = *(_QWORD *)(a1 + 224);
  v39 = (*(_QWORD *)(a1 + 232) - v38) >> 3;
  if (v37 <= v39)
  {
    if (v37 < v39)
      *(_QWORD *)(a1 + 232) = v38 + 8 * v37;
  }
  else
  {
    sub_20E7E3A20(v26, v37 - v39, &v41);
  }
  return a1;
}

void sub_20E7F7984(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 232) = v6;
    operator delete(v6);
    sub_20E791F00(v3);
    v7 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    sub_20E791F00(v3);
    v7 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 168) = v7;
  operator delete(v7);
  _Unwind_Resume(a1);
}

unsigned __int16 *sub_20E7F79D8(uint64_t a1, __int16 *a2, unsigned int a3, int a4, unsigned int a5)
{
  unsigned __int16 *v5;
  unsigned int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned __int16 *result;
  int v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  unsigned int v13;
  uint16x8_t *v14;
  int v15;
  unsigned int v16;
  __int16 v17;
  int8x16_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint16x8_t *v22;
  int8x16_t *v23;
  BOOL v25;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  int8x16_t *v32;
  unsigned __int16 *v33;
  int8x16_t v34;
  int32x4_t v35;
  uint16x8_t *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int8x16_t v40;
  uint64_t v41;
  int8x16_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  uint32x4_t v52;
  int16x8_t v53;
  int8x16_t v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  __int16 v64;
  int v65;
  unsigned int v66;
  __int16 v67;

  v5 = *(unsigned __int16 **)(a1 + 8 * a3);
  if (a3 + 1 <= 2)
    v6 = a3 + 1;
  else
    v6 = 0;
  v7 = *(unsigned __int16 **)(a1 + 8 * v6);
  v8 = a3 + 2;
  if (a3 != 0 && a3 < 0xFFFFFFFE)
    v8 = a3 - 1;
  result = *(unsigned __int16 **)(a1 + 8 * v8);
  v11 = v7 + 1;
  v10 = v7[1];
  v12 = v5 + 1;
  v13 = *v7;
  v14 = (uint16x8_t *)(result + 1);
  v15 = (-3 * v13 + v10 + *v5 + *result) * a5;
  v16 = (((v15 + 16) >> 5) + 4) >> 3;
  if (v15 > 8388463)
    LOWORD(v16) = 0x7FFF;
  if (v15 >= -8388752)
    v17 = v16;
  else
    v17 = 0x8000;
  *a2 = v17;
  v18 = (int8x16_t *)(a2 + 1);
  if ((a4 - 1) >= 2)
  {
    v19 = (a4 - 3);
    if (v19 >= 7)
    {
      v21 = 2 * v19 + 4;
      v22 = (uint16x8_t *)((char *)a2 + v21);
      v23 = (int8x16_t *)((char *)result + v21);
      v25 = v18 < (int8x16_t *)((char *)v5 + v21) && v12 < (unsigned __int16 *)v22;
      v27 = v18 < v23 && v14 < v22;
      v28 = v11 >= (unsigned __int16 *)v22 || v18 >= (int8x16_t *)&v7[v19 + 3];
      v20 = 1;
      if (v28 && !v25 && !v27)
      {
        v29 = v19 + 1;
        v30 = v29 & 0x1FFFFFFF8;
        v31 = &v12[v30];
        v11 = (unsigned __int16 *)((char *)v11 + v30 * 2);
        result = &v14->u16[v30];
        v32 = (int8x16_t *)((char *)v18 + v30 * 2);
        v33 = &v7[v30];
        v20 = v29 & 0xFFFFFFF8 | 1;
        v34 = (int8x16_t)vdupq_n_s16(v13);
        v35 = vdupq_n_s32(a5);
        v36 = (uint16x8_t *)(v7 + 2);
        v37 = vdupq_n_s32(0xFF7FFF70);
        v38.i64[0] = 0x1000000010;
        v38.i64[1] = 0x1000000010;
        v39 = vdupq_n_s32(0x7FFF6Fu);
        v40.i64[0] = 0x8000800080008000;
        v40.i64[1] = 0x8000800080008000;
        v41 = v29 & 0x1FFFFFFF8;
        do
        {
          v42 = v34;
          v34 = *(int8x16_t *)((char *)&v36[-1] + 14);
          v43 = *v36++;
          v44 = v43;
          v45 = (uint16x8_t)vextq_s8(v42, v34, 0xEuLL);
          v46 = *(uint16x8_t *)v12;
          v12 += 8;
          v47 = v46;
          v48 = *v14++;
          v49 = vaddl_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v45.i8);
          v50 = vmulq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32((int32x4_t)vaddw_high_u16(vaddl_high_u16(v44, v45), v47), (int32x4_t)vshll_high_n_u16((uint16x8_t)v34, 2uLL)), v48), v35);
          v51 = vmulq_s32((int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32((int32x4_t)vaddw_u16(v49, *(uint16x4_t *)v47.i8), (int32x4_t)vshll_n_u16(*(uint16x4_t *)v34.i8, 2uLL)), *(uint16x4_t *)v48.i8), v35);
          v52 = (uint32x4_t)vaddq_s32(v50, v38);
          v53 = (int16x8_t)vcgtq_s32(v37, v50);
          v54 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v51, v39), (int16x8_t)vcgtq_s32(v50, v39));
          *v18++ = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v37, v51), v53), v40, vorrq_s8((int8x16_t)(*(_OWORD *)&v54 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vbicq_s8((int8x16_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v51, v38), 5uLL), 3uLL), (int32x4_t)vshrq_n_u32(v52, 5uLL), 3uLL), v54)));
          v41 -= 8;
        }
        while (v41);
        if (v29 == (v29 & 0x1FFFFFFF8))
        {
          v13 = vmovl_high_u16(*(uint16x8_t *)&v34).u32[3];
LABEL_46:
          v10 = *v11;
          v18 = v32;
          v14 = (uint16x8_t *)result;
          v12 = v31;
          goto LABEL_47;
        }
        LOWORD(v13) = v34.i16[7];
        v12 = v31;
        v14 = (uint16x8_t *)result;
        v18 = v32;
        v7 = v33;
      }
    }
    else
    {
      v20 = 1;
    }
    v55 = ~v20 + a4;
    v31 = v12;
    result = (unsigned __int16 *)v14;
    v32 = v18;
    do
    {
      v56 = v7[2];
      v7 = v11;
      v58 = *v11++;
      v57 = v58;
      v60 = *v31++;
      v59 = v60;
      v61 = *result++;
      v62 = (v56 + (unsigned __int16)v13 + v59 - 4 * v57 + v61) * a5;
      v63 = (((v62 + 16) >> 5) + 4) >> 3;
      if (v62 > 8388463)
        LOWORD(v63) = 0x7FFF;
      if (v62 >= -8388752)
        v64 = v63;
      else
        v64 = 0x8000;
      v32->i16[0] = v64;
      v32 = (int8x16_t *)((char *)v32 + 2);
      LOWORD(v13) = v57;
      --v55;
    }
    while (v55);
    v13 = v57;
    goto LABEL_46;
  }
LABEL_47:
  v65 = (v10 + v13 + *v12 + v14->u16[0] - 4 * v10) * a5;
  if (v65 <= 8388463)
    v66 = (((v65 + 16) >> 5) + 4) >> 3;
  else
    LOWORD(v66) = 0x7FFF;
  if (v65 >= -8388752)
    v67 = v66;
  else
    v67 = 0x8000;
  v18->i16[0] = v67;
  return result;
}

BOOL sub_20E7F7CC0(unint64_t *a1)
{
  BOOL v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  _BOOL8 result;

  v1 = a1[4] == 1 && a1[3] == 2;
  result = 0;
  if (v1)
  {
    v2 = *a1;
    if (*a1 >= 0xA0)
    {
      v3 = a1[1];
      if (v3 >= 0xA0)
      {
        v4 = v3 > 0x140 && v2 > 0x140;
        v5 = a1[2];
        v6 = v4 || v5 == 4;
        if (v6 && (v2 < 0x141 || v3 < 0x141 || v5 == 5))
        {
          v7 = a1[24];
          if (v7)
          {
            if (v7 == 1
              || 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[26] - a1[25]) >> 3) == v7
              && 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[29] - a1[28]) >> 3) == v7)
            {
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_20E7F7D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, __int16 a8, unsigned __int16 a9, char *a10, char a11)
{
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v21;
  int v22;
  BOOL v24;
  _BOOL8 result;
  int v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;

  v11 = *(__int16 *)(a2 + 2 * a7);
  if (v11 >= 0)
    v12 = *(__int16 *)(a2 + 2 * a7);
  else
    v12 = -v11;
  if (v12 <= a8)
    return 0;
  v13 = a7;
  *a10 = 0;
  v14 = a7 - 1;
  v15 = *(__int16 *)(a1 + 2 * v14);
  v16 = *(__int16 *)(a1 + 2 * a7);
  v17 = a7 + 1;
  v18 = *(__int16 *)(a1 + 2 * v17);
  if (v15 < v11 && v16 < v11 && v18 < v11)
  {
    v21 = *(__int16 *)(a2 + 2 * v14);
    v22 = *(__int16 *)(a2 + 2 * v17);
    if (v21 < v11 && v22 < v11)
    {
      v28 = *(__int16 *)(a3 + 2 * v14);
      if (v28 < v11)
      {
        v29 = *(__int16 *)(a3 + 2 * a7);
        if (v29 < v11)
        {
          v30 = *(__int16 *)(a3 + 2 * v17);
          if (v30 < v11
            && *(__int16 *)(a4 + 2 * v14) < v11
            && *(__int16 *)(a4 + 2 * v13) < v11
            && *(__int16 *)(a4 + 2 * v17) < v11
            && *(__int16 *)(a5 + 2 * v14) < v11
            && *(__int16 *)(a5 + 2 * v13) < v11
            && *(__int16 *)(a5 + 2 * v17) < v11
            && *(__int16 *)(a6 + 2 * v14) < v11
            && *(__int16 *)(a6 + 2 * v13) < v11
            && *(__int16 *)(a6 + 2 * v17) < v11)
          {
            v31 = 0;
            goto LABEL_56;
          }
        }
      }
    }
  }
  v24 = v15 <= v11 || v16 <= v11;
  if (v24 || v18 <= v11)
    return 0;
  v21 = *(__int16 *)(a2 + 2 * v14);
  v22 = *(__int16 *)(a2 + 2 * v17);
  result = 0;
  if (v21 <= v11 || v22 <= v11)
    return result;
  v28 = *(__int16 *)(a3 + 2 * v14);
  if (v28 <= v11)
    return result;
  v29 = *(__int16 *)(a3 + 2 * v13);
  if (v29 <= v11)
    return result;
  v30 = *(__int16 *)(a3 + 2 * v17);
  if (v30 <= v11)
    return result;
  result = 0;
  if (*(__int16 *)(a4 + 2 * v14) <= v11)
    return result;
  if (*(__int16 *)(a4 + 2 * v13) <= v11)
    return result;
  if (*(__int16 *)(a4 + 2 * v17) <= v11)
    return result;
  result = 0;
  if (*(__int16 *)(a5 + 2 * v14) <= v11)
    return result;
  if (*(__int16 *)(a5 + 2 * v13) <= v11)
    return result;
  if (*(__int16 *)(a5 + 2 * v17) <= v11)
    return result;
  result = 0;
  if (*(__int16 *)(a6 + 2 * v14) <= v11 || *(__int16 *)(a6 + 2 * v13) <= v11 || *(__int16 *)(a6 + 2 * v17) <= v11)
    return result;
  v31 = 1;
LABEL_56:
  *a10 = v31;
  if (!a11)
    return 1;
  v32 = 2 * v11;
  v33 = v22 - v32 + v21;
  v34 = v16 - v32 + v29;
  v35 = v15 - (v18 + v28) + v30;
  v36 = v33 >> 4;
  v37 = v34 >> 4;
  v38 = v35 >> 4;
  if (v33 >> 4 <= -2047)
    v36 = -2047;
  if (v33 >= 0x8000)
    v36 = 2047;
  if (v37 <= -2047)
    v37 = -2047;
  if (v34 >= 0x8000)
    v39 = 2047;
  else
    v39 = v37;
  if (v38 <= -2047)
    v38 = -2047;
  if (v35 >= 0x8000)
    v40 = 2047;
  else
    v40 = v38;
  return fabs((double)(uint64_t)(v39 * (uint64_t)v36 - ((unint64_t)(v40 * (uint64_t)v40 + 8) >> 4))) * (double)a9 > (double)((v39 + (uint64_t)v36) * (v39 + (uint64_t)v36));
}

void sub_20E7F7FFC(CVPixelBufferPoolRef pixelBufferPool)
{
  if (pixelBufferPool)
    CVPixelBufferPoolRelease(pixelBufferPool);
}

CVPixelBufferPoolRef *sub_20E7F8008(CVPixelBufferPoolRef *a1, int a2, int a3, int a4, int a5)
{
  CVReturn v6;
  CVPixelBufferPoolRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFDictionaryRef pixelBufferAttributes;
  std::__shared_weak_count *v13;
  CVPixelBufferPoolRef poolOut;

  *a1 = 0;
  a1[1] = (CVPixelBufferPoolRef)sub_20E7F7FFC;
  sub_20E7F8150(a2, a3, a4, a5, &pixelBufferAttributes);
  poolOut = 0;
  v6 = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, pixelBufferAttributes, &poolOut);
  v7 = *a1;
  *a1 = poolOut;
  if (v7)
    ((void (*)(void))a1[1])();
  a1[1] = (CVPixelBufferPoolRef)sub_20E7F7FFC;
  if (v6)
  {
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/AppleUtil/src/CvPixelBufferPoolUtils.cpp", 54, "err == kCVReturnSuccess", (void (*)(void *))sub_20E803DA4);
    abort();
  }
  v8 = v13;
  if (!v13)
    return a1;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20E7F811C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t *v10;
  uint64_t v12;

  v12 = *v10;
  *v10 = 0;
  if (v12)
    ((void (*)(void))v10[1])();
  _Unwind_Resume(exception_object);
}

void sub_20E7F8150(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _BOOL4 v10;
  _BOOL4 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;

  sub_20E8034B8(&v18);
  LODWORD(v19) = a4;
  if (sub_20E7F8458((uint64_t)&v18, (const void *)*MEMORY[0x24BDC56B8], (uint64_t)&v19))
  {
    sub_20E8034B8(&v19);
    v10 = sub_20E7F85BC((uint64_t)&v18, (const void *)*MEMORY[0x24BDC5668], (uint64_t)&v19);
    v11 = v10;
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (!*((_QWORD *)&v19 + 1))
      goto LABEL_6;
    v13 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v11)
        goto LABEL_13;
    }
    else
    {
LABEL_6:
      if (!v10)
        goto LABEL_13;
    }
    LODWORD(v19) = a1;
    v20 = a2;
    if (sub_20E7F87EC((uint64_t)&v18, (const void *)*MEMORY[0x24BDC5708], (uint64_t)&v19)
      && sub_20E7F87EC((uint64_t)&v18, (const void *)*MEMORY[0x24BDC5650], (uint64_t)&v20))
    {
      LODWORD(v19) = a3;
      if (sub_20E7F87EC((uint64_t)&v18, (const void *)*MEMORY[0x24BDC55D0], (uint64_t)&v19))
      {
        *(_OWORD *)a5 = v18;
        return;
      }
    }
  }
LABEL_13:
  sub_20E8034B0(a5);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20E7F82E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_20E7858BC((uint64_t)&a12);
  sub_20E7858BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E7F8300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E7858BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E7F8318(CVPixelBufferPoolRef *a1@<X0>, uint64_t a2@<X8>)
{
  CVReturn v3;
  BOOL v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __CVBuffer *v11;
  std::__shared_weak_count *v12;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v3 = CVPixelBufferPoolCreatePixelBuffer(0, *a1, &pixelBufferOut);
  kdebug_trace();
  if (v3)
    v4 = 1;
  else
    v4 = pixelBufferOut == 0;
  if (v4)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  else
  {
    sub_20E7F8AA4(pixelBufferOut, &v11);
    kdebug_trace();
    CVPixelBufferRelease(pixelBufferOut);
    v5 = v12;
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v8 = v12;
      *(_BYTE *)(a2 + 16) = 1;
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else
    {
      *(_BYTE *)(a2 + 16) = 1;
    }
  }
}

void sub_20E7F843C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E7858BC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20E7F8458(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v21;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_20E802B90(&v21, a3);
  v12 = v21;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    sub_20E80365C((CFMutableDictionaryRef *)a1, a2, v21);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_20E7F85A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E7858BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20E7F85BC(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL8 v17;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void *value;
  std::__shared_weak_count *v27;
  CFTypeRef v28;

  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v7)
      return 0;
  }
  if (sub_20E803664(*(const __CFDictionary **)a1, a2))
    return 0;
  v12 = *(const void **)a3;
  v11 = *(std::__shared_weak_count **)(a3 + 8);
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v28 = v12;
  if (sub_20E802F14(&v28))
  {
    value = (void *)v12;
    v27 = v11;
    if (!v11)
    {
LABEL_30:
      v17 = v12 != 0;
      if (v12)
        j__CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, a2, value);
      goto LABEL_32;
    }
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
LABEL_20:
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v12 = value;
    if (v27)
    {
      v21 = (unint64_t *)&v27->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    goto LABEL_30;
  }
  value = 0;
  v27 = 0;
  if (v11)
    goto LABEL_20;
  v17 = 0;
LABEL_32:
  if (v27)
  {
    v24 = (unint64_t *)&v27->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return v17;
}

void sub_20E7F8798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E7858BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7F87AC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20E7F87EC(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v21;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_20E802A88(&v21, a3);
  v12 = v21;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    sub_20E80365C((CFMutableDictionaryRef *)a1, a2, v21);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_20E7F893C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E7858BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E7F8950(OpaqueVTPixelTransferSession *a1)
{
  if (a1)
  {
    VTPixelTransferSessionInvalidate(a1);
    CFRelease(a1);
  }
}

VTPixelTransferSessionRef *sub_20E7F897C(VTPixelTransferSessionRef *a1)
{
  OSStatus v2;
  VTPixelTransferSessionRef v3;
  VTPixelTransferSessionRef v4;
  BOOL v5;
  VTPixelTransferSessionRef pixelTransferSessionOut;

  *a1 = 0;
  a1[1] = (VTPixelTransferSessionRef)sub_20E7F8950;
  pixelTransferSessionOut = 0;
  v2 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], &pixelTransferSessionOut);
  v3 = pixelTransferSessionOut;
  v4 = *a1;
  *a1 = pixelTransferSessionOut;
  if (v4)
  {
    ((void (*)(VTPixelTransferSessionRef))a1[1])(v4);
    v3 = pixelTransferSessionOut;
  }
  a1[1] = (VTPixelTransferSessionRef)sub_20E7F8950;
  if (v2)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (v5)
  {
    if (v2)
    {
      sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/AppleUtil/src/CvPixelBufferTransferSession.cpp", 54, "err == kCVReturnSuccess", (void (*)(void *))sub_20E803DA4);
      abort();
    }
  }
  else
  {
    VTSessionSetProperty(v3, (CFStringRef)*MEMORY[0x24BDF9678], (CFTypeRef)*MEMORY[0x24BDBD270]);
  }
  return a1;
}

void sub_20E7F8A50(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    ((void (*)(void))v1[1])();
  _Unwind_Resume(exception_object);
}

BOOL sub_20E7F8A78(VTPixelTransferSessionRef *a1, __CVBuffer *a2, __CVBuffer *a3)
{
  if (!a2 || !a3)
    sub_20E80C948();
  return VTPixelTransferSessionTransferImage(*a1, a2, a3) == 0;
}

__CVBuffer *sub_20E7F8AA4@<X0>(__CVBuffer *a1@<X0>, __CVBuffer **a2@<X8>)
{
  __CVBuffer *result;

  CVPixelBufferRetain(a1);
  kdebug_trace();
  *a2 = a1;
  result = (__CVBuffer *)operator new();
  *(_QWORD *)result = &off_24C9A9110;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *((_QWORD *)result + 3) = a1;
  a2[1] = result;
  return result;
}

void sub_20E7F8B14(void *a1)
{
  __CVBuffer *v1;

  __cxa_begin_catch(a1);
  kdebug_trace();
  CVPixelBufferRelease(v1);
  __cxa_rethrow();
}

void sub_20E7F8B44(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E7F8B64(__CVBuffer *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  signed int PixelFormatType;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD, _QWORD);
  size_t v9;
  size_t v10;
  _BYTE *BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  char *v13;
  size_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  int v28;
  _BYTE *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  void *BaseAddress;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    sub_20E80C974();
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType == 1278226488)
    goto LABEL_3;
  if ((PixelFormatType & 0xFFFFFFEF) != 0x34323066)
  {
    if (PixelFormatType > 1111970368)
    {
      if (PixelFormatType != 1111970369)
      {
        if (PixelFormatType == 1278226742)
          goto LABEL_3;
        v35 = 1647392359;
LABEL_29:
        if (PixelFormatType == v35)
          sub_20E80C9CC();
        sub_20E80C9A0();
      }
    }
    else
    {
      if (PixelFormatType == 24)
      {
        Width = CVPixelBufferGetWidth(a1);
        Height = CVPixelBufferGetHeight(a1);
        BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
        sub_20E7F92AC(&v47, a1);
        BaseAddress = CVPixelBufferGetBaseAddress(a1);
        v40 = v48;
        if (v48)
        {
          v45 = (unint64_t *)(v48 + 8);
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        v43 = v47;
        *(_BYTE *)a3 = 0;
        v44 = xmmword_20E810190;
        goto LABEL_39;
      }
      if (PixelFormatType != 875836518)
      {
        v35 = 825437747;
        goto LABEL_29;
      }
    }
    Width = CVPixelBufferGetWidth(a1);
    Height = CVPixelBufferGetHeight(a1);
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    sub_20E7F92AC(&v47, a1);
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    v40 = v48;
    if (v48)
    {
      v41 = (unint64_t *)(v48 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = v47;
    *(_BYTE *)a3 = 0;
    v44 = xmmword_20E810180;
LABEL_39:
    *(_OWORD *)(a3 + 8) = v44;
    *(_QWORD *)(a3 + 24) = Width;
    *(_QWORD *)(a3 + 32) = BytesPerRow;
    *(_QWORD *)(a3 + 40) = Height;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = BaseAddress;
    *(_QWORD *)(a3 + 72) = v40;
    *(_QWORD *)(a3 + 80) = v43;
    *(_QWORD *)(a3 + 88) = v40;
    *(_BYTE *)(a3 + 96) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    return;
  }
  if (a2)
  {
LABEL_3:
    sub_20E7F91CC(a3, a1);
    return;
  }
  CVPixelBufferLockBaseAddress(a1, 0);
  v7 = operator new(0x20uLL);
  v8 = MEMORY[0x24BDC53B0];
  *v7 = &off_24C9A86E0;
  v7[1] = v8;
  v7[2] = a1;
  *((_DWORD *)v7 + 6) = 0;
  v49 = v7;
  v9 = CVPixelBufferGetWidth(a1);
  v10 = CVPixelBufferGetHeight(a1);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  v13 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  v14 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  v15 = operator new[]();
  v16 = (std::__shared_weak_count *)operator new();
  v18 = v16;
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9A91B0;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  if (v10 && v9)
  {
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = 0;
      v23 = &v13[(v20 >> 1) * v14];
      do
      {
        LOBYTE(v17) = BaseAddressOfPlane[v22];
        v24 = (double)(v23[v22 | 1] - 128);
        v25 = (double)v17;
        v26 = (double)(v23[v22 & 0xFFFFFFFFFFFFFFFELL] - 128);
        v27.f64[0] = v25 + v26 * -0.343;
        *(float *)&v26 = v25 + v26 * 1.765;
        v28 = llroundf(*(float *)&v26);
        v29 = (_BYTE *)(v15 + v21);
        v30 = v28 & ~(v28 >> 31);
        if (v30 >= 255)
          LOBYTE(v30) = -1;
        v27.f64[1] = v25;
        *v29 = v30;
        v17 = (unint64_t)vmin_s32(vmax_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmlaq_n_f64(v27, (float64x2_t)xmmword_20E8101A0, v24)))), 0), (int32x2_t)0xFF000000FFLL);
        v29[2] = BYTE4(v17);
        v29[1] = v17;
        v29[3] = -1;
        v21 += 4;
        ++v22;
      }
      while (v9 != v22);
      ++v20;
      BaseAddressOfPlane += BytesPerRowOfPlane;
    }
    while (v20 != v10);
  }
  do
    v31 = __ldxr(p_shared_owners);
  while (__stxr(v31 + 1, p_shared_owners));
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = xmmword_20E810180;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = 4 * v9;
  *(_QWORD *)(a3 + 40) = v10;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = v15;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 72) = v16;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (!v49)
    sub_20E78D5A0();
  (*(void (**)(uint64_t *))(*v49 + 48))(v49);
  v33 = v49;
  if (v49 == &v47)
  {
    v34 = 4;
    v33 = &v47;
  }
  else
  {
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
}

void sub_20E7F903C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E7858BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7F9050(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    MEMORY[0x212BC47A4](v2, 0x1000C8077774924);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_20E7F9080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_end_catch();
  sub_20E78AB68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E7F90F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

void sub_20E7F9114(uint64_t a1)
{
  __CVBuffer *v1;

  v1 = *(__CVBuffer **)(a1 + 24);
  kdebug_trace();
  CVPixelBufferRelease(v1);
}

uint64_t sub_20E7F915C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10apple_util20CreateImageDataOwnerEP10__CVBufferE3$_0")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10apple_util20CreateImageDataOwnerEP10__CVBufferE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10apple_util20CreateImageDataOwnerEP10__CVBufferE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10apple_util20CreateImageDataOwnerEP10__CVBufferE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

double sub_20E7F91CC(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  void *BaseAddressOfPlane;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;

  WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  sub_20E7F92AC(&v13, pixelBuffer);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)(v14 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = v13;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 8) = xmmword_20E80E500;
  *(_QWORD *)(a1 + 24) = WidthOfPlane;
  *(_QWORD *)(a1 + 32) = BytesPerRowOfPlane;
  *(_QWORD *)(a1 + 40) = HeightOfPlane;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = BaseAddressOfPlane;
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  return result;
}

void sub_20E7F9298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E7858BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E7F92AC(_QWORD *a1, CVPixelBufferRef texture)
{
  _QWORD *result;

  CVPixelBufferRetain(texture);
  kdebug_trace();
  CVPixelBufferLockBaseAddress(texture, 1uLL);
  *a1 = texture;
  result = (_QWORD *)operator new();
  *result = &off_24C9A9160;
  result[1] = 0;
  result[2] = 0;
  result[3] = texture;
  a1[1] = result;
  return result;
}

void sub_20E7F932C(void *a1)
{
  __CVBuffer *v1;

  __cxa_begin_catch(a1);
  CVPixelBufferUnlockBaseAddress(v1, 1uLL);
  kdebug_trace();
  CVPixelBufferRelease(v1);
  __cxa_rethrow();
}

void sub_20E7F936C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E7F9388(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

void sub_20E7F93AC(uint64_t a1)
{
  __CVBuffer *v1;

  v1 = *(__CVBuffer **)(a1 + 24);
  CVPixelBufferUnlockBaseAddress(v1, 1uLL);
  kdebug_trace();
  CVPixelBufferRelease(v1);
}

uint64_t sub_20E7F9400(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10apple_util12_GLOBAL__N_115retainAndManageEP10__CVBufferE3$_0")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10apple_util12_GLOBAL__N_115retainAndManageEP10__CVBufferE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10apple_util12_GLOBAL__N_115retainAndManageEP10__CVBufferE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10apple_util12_GLOBAL__N_115retainAndManageEP10__CVBufferE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E7F9474(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E7F9498(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x212BC47A4);
  return result;
}

uint64_t sub_20E7F94B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10apple_util12_GLOBAL__N_119ConvertYpCbCrToBGRAIhEENS0_8cv_types9ImageDataIT_EEP10__CVBufferEUlPhE_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10apple_util12_GLOBAL__N_119ConvertYpCbCrToBGRAIhEENS0_8cv_types9ImageDataIT_"
                                "EEP10__CVBufferEUlPhE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10apple_util12_GLOBAL__N_119ConvertYpCbCrToBGRAIhEENS0_8cv_types9ImageDataIT_EEP10__CVBufferEUlPhE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10apple_util12_GLOBAL__N_119ConvertYpCbCrToBGRAIhEENS0_8cv_types9ImageDataIT_EEP10__CVBufferEUlPhE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E7F9528(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_20E7F9530(int a1, int a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v7;
  uint64_t v8;

  v4 = atomic_load((unsigned __int8 *)&qword_254A49348);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A49348))
  {
    qword_254A49370 = (uint64_t)sub_20E7F9CE0(5, 13, 16, 8);
    qword_254A49378 = v7;
    __cxa_guard_release(&qword_254A49348);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_254A49350);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A49350))
  {
    qword_254A49380 = (uint64_t)sub_20E7F9B8C(13, 10, 5, 11, 4);
    qword_254A49388 = v8;
    __cxa_guard_release(&qword_254A49350);
  }
  return sub_20E7F9968(a1, a2, qword_254A49370, qword_254A49378, 5, 13, 16, 8, qword_254A49380, qword_254A49388, 5, 13, 10, 11, 4);
}

void sub_20E7F9640(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49350);
  _Unwind_Resume(a1);
}

void sub_20E7F9658(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49348);
  _Unwind_Resume(a1);
}

double sub_20E7F9670(double a1)
{
  unsigned __int8 v2;
  uint64_t v4;

  v2 = atomic_load((unsigned __int8 *)&qword_254A49358);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A49358))
  {
    qword_254A49390 = (uint64_t)sub_20E7FA290(6, 13, 13, 7);
    qword_254A49398 = v4;
    __cxa_guard_release(&qword_254A49358);
  }
  return sub_20E7FA194(qword_254A49390, qword_254A49398, 6, 13, 13, 7, a1);
}

void sub_20E7F96FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49358);
  _Unwind_Resume(a1);
}

double sub_20E7F9714(uint64_t a1, double a2)
{
  double result;

  if (a2 == 0.0)
    return 0.0;
  *(_QWORD *)&result = (-1 << (53 - a1)) & COERCE_UNSIGNED_INT64(COERCE_DOUBLE((*(_QWORD *)&a2 - (a1 << 52)) & 0xFFF0000000000000)+ a2);
  return result;
}

void sub_20E7F9760(double a1)
{
  unsigned __int8 v2;
  uint64_t v3;

  v2 = atomic_load((unsigned __int8 *)&qword_254A49360);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A49360))
  {
    qword_254A493A0 = (uint64_t)sub_20E7F9CE0(7, 16, 17, 9);
    qword_254A493A8 = v3;
    __cxa_guard_release(&qword_254A49360);
  }
  sub_20E7F9BFC(qword_254A493A0, qword_254A493A8, 7, 16, 17, 9, fabs(a1));
}

void sub_20E7F97FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49360);
  _Unwind_Resume(a1);
}

void sub_20E7F9814(double a1)
{
  unsigned __int8 v2;
  uint64_t v3;

  v2 = atomic_load((unsigned __int8 *)&qword_254A49368);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A49368))
  {
    qword_254A493B0 = (uint64_t)sub_20E7F9F24(8, 18, 19, 10);
    qword_254A493B8 = v3;
    __cxa_guard_release(&qword_254A49368);
  }
  sub_20E7F9BFC(qword_254A493B0, qword_254A493B8, 8, 18, 19, 10, fabs(a1));
}

void sub_20E7F98B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49368);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7F98C8(uint64_t a1, uint64_t a2, int a3, int a4, char a5, char a6, int a7, int a8)
{
  char v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  char v15;
  char v16;
  char v17;

  if (1 << (a4 - 1) <= a3)
    return (1 << (a5 - 1));
  v8 = a4 - 1 - a6;
  v9 = (a3 >> v8) & ~(1 << a6);
  v10 = a3 - (a3 >> v8 << v8) + (-1 << (v8 - 1));
  v11 = 4 * v9;
  v12 = *(_DWORD *)(a1 + v11);
  v13 = *(_DWORD *)(a2 + v11);
  v14 = a8 + a4;
  v15 = a8 + a4 - (a7 + 2);
  v16 = a7 + 2 - (a8 + a4);
  if (a7 + 2 > a8 + a4)
    v15 = 0;
  if (a7 + 2 <= v14)
    v16 = 0;
  v17 = v14 + ~a5;
  if (a7 + 2 > a8 + a4)
    v17 = a7 - a5 + 1;
  return ((((((v13 * v10) << v16) + (v12 << v15)) >> (v17 - 1)) + 1) >> 1);
}

uint64_t sub_20E7F9968(int a1, int a2, uint64_t a3, uint64_t a4, char a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, int a13, int a14, int a15)
{
  uint64_t v15;
  unsigned int v18;
  unsigned int v19;
  int v20;
  double v21;
  int v22;
  double v23;
  long double v24;
  uint64_t v25;
  BOOL v26;
  double v27;
  double v28;
  double v29;
  BOOL v30;
  char v31;
  double v33;
  double v34;
  double v35;
  BOOL v38;
  char v39;
  char v40;
  long double v41;

  if (a2 >= 0)
    v18 = a2;
  else
    v18 = -a2;
  if (a1 >= 0)
    v19 = a1;
  else
    v19 = -a1;
  if (v18 >= v19)
    v20 = v19;
  else
    v20 = v18;
  v21 = (double)v20;
  if (v18 <= v19)
    v22 = v19;
  else
    v22 = v18;
  v23 = sub_20E7F9BFC(a3, a4, a5, a6, a7, a8, COERCE_DOUBLE((-1 << (53 - a6)) & COERCE_UNSIGNED_INT64((double)v22)))* COERCE_DOUBLE(v15 & *(_QWORD *)&v21);
  v24 = ldexp(1.0, a12 - 1);
  v25 = sub_20E7F98C8(a9, a10, (int)(v23 * v24 + 0.5), a12, a13, a11, a14, a15);
  if (((a2 | a1) & 0x80000000) == 0 && v18 >= v19)
    return v25;
  v26 = v18 >= v19;
  if (((a2 | a1) & 0x80000000) == 0 && v18 < v19)
  {
    v27 = ldexp(1.0, a13 + 1);
    v28 = 0.5;
LABEL_18:
    v29 = v27 * v28;
    return ((int)v29 - v25);
  }
  v30 = a1 >= 0 && a2 < 0;
  v31 = !v30;
  if (v30 && v18 < v19)
  {
    v34 = ldexp(1.0, a13 + 1);
    v35 = 0.5;
LABEL_38:
    v33 = v34 * v35;
    return (v25 + (int)v33);
  }
  if (v18 < v19)
    v31 = 1;
  if ((v31 & 1) == 0)
  {
    v29 = ldexp(1.0, a13 + 1);
    return ((int)v29 - v25);
  }
  if ((a2 & a1) < 0 != __OFSUB__(v18, v19) && v18 >= v19)
  {
    v33 = ldexp(1.0, a13 + 1);
    return (v25 + (int)v33);
  }
  if ((a2 & a1) < 0 && v18 < v19)
  {
    v27 = ldexp(1.0, a13 + 1);
    v28 = 1.5;
    goto LABEL_18;
  }
  v38 = a1 >= 0 || a2 < 0;
  v39 = v38;
  if (v38)
    v26 = 1;
  if (!v26)
  {
    v34 = ldexp(1.0, a13 + 1);
    v35 = 1.5;
    goto LABEL_38;
  }
  if (v18 < v19)
    v40 = 1;
  else
    v40 = v39;
  if ((v40 & 1) == 0)
  {
    v41 = ldexp(1.0, a13 + 1);
    v29 = v41 + v41;
    return ((int)v29 - v25);
  }
  return v25;
}

void *sub_20E7F9B8C(int a1, int a2, int a3, int a4, int a5)
{
  BOOL v9;

  if (a1 == 10 && a2 == 7 && a3 == 3 && a4 == 7 && a5 == 3)
    return &unk_254A412B8;
  v9 = a1 == 13 && a2 == 10 && a3 == 5 && a4 == 11;
  if (v9 && a5 == 4)
    return &unk_254A412F8;
  else
    return 0;
}

double sub_20E7F9BFC(uint64_t a1, uint64_t a2, char a3, int a4, int a5, int a6, double a7)
{
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  char v20;
  BOOL v21;
  char v22;
  int v23;
  unint64_t v24;

  v13 = sub_20E7FA44C(a4, a7);
  v14 = ~a3 + a4;
  v15 = 4 * (int)((v13 >> v14) & ~(1 << a3));
  v16 = *(int *)(a1 + v15);
  v17 = (1 << (v14 - 1)) - v13 + (v13 >> v14 << v14);
  v18 = *(_DWORD *)(a2 + v15);
  v19 = a4 + a6 - 1;
  LODWORD(v15) = a4 + a6 - 2;
  v20 = a5 - v15;
  v21 = __OFSUB__((_DWORD)v15, a5);
  v23 = v15 - a5;
  v22 = (v23 < 0) ^ v21;
  if (v22)
    LOBYTE(v23) = 0;
  else
    v20 = 0;
  if (v22)
    v19 = a5 + 1;
  v24 = sub_20E7FA53C(((v16 << v23) + (1 << (v19 - a4 - 2)) + ((v18 * (uint64_t)v17) << v20)) >> (v19 - a4 - 1), ~((v13 >> 16) >> 16), a4);
  return sub_20E7FA4FC(v24);
}

void *sub_20E7F9CE0(int a1, int a2, int a3, int a4)
{
  BOOL v5;
  char v6;

  if (a1 == 3 && a2 == 9 && a3 == 10 && a4 == 6)
    return &unk_254A433F8;
  if (a4 == 7 && a1 == 5 && a2 == 11 && a3 == 13)
    return &unk_254A43478;
  if (a4 == 7 && a1 == 5 && a2 == 12 && a3 == 12)
    return &unk_254A43578;
  if (a1 == 5 && a2 == 13 && a3 == 16 && a4 == 8)
    return &unk_254A43678;
  if (a4 == 8 && a1 == 6 && a2 == 14 && a3 == 14)
    return &unk_254A43A78;
  if (a1 == 6 && a2 == 15 && a3 == 17 && a4 == 10)
    return &unk_254A43C78;
  if (a1 == 7 && a2 == 13 && a3 == 16 && a4 == 8)
    return &unk_254A44278;
  if (a4 == 10 && a1 == 7 && a2 == 14 && a3 == 19)
    return &unk_254A44678;
  v5 = a1 == 7 && a2 == 16;
  v6 = v5;
  if (v5 && a3 == 17 && a4 == 9)
    return &unk_254A44A78;
  if (a3 != 20 || a4 != 11)
    v6 = 0;
  if ((v6 & 1) != 0)
    return &unk_254A44E78;
  if (a3 == 20 && a1 == 7 && a2 == 17 && a4 == 13)
    return &unk_254A45278;
  if (a1 != 9 || a2 != 21 || a3 != 26 || a4 != 15)
    abort();
  return &unk_254A413F8;
}

void *sub_20E7F9F24(int a1, int a2, int a3, int a4)
{
  BOOL v5;
  char v6;

  if (a1 == 3 && a2 == 9 && a3 == 10 && a4 == 6)
    return &unk_254A43438;
  if (a4 == 7 && a1 == 5 && a2 == 11 && a3 == 13)
    return &unk_254A43778;
  if (a4 == 7 && a1 == 5 && a2 == 12 && a3 == 12)
    return &unk_254A43878;
  if (a1 == 5 && a2 == 13 && a3 == 16 && a4 == 8)
    return &unk_254A43978;
  if (a4 == 8 && a1 == 6 && a2 == 14 && a3 == 14)
    return &unk_254A43E78;
  if (a1 == 6 && a2 == 15 && a3 == 17 && a4 == 10)
    return &unk_254A44078;
  if (a1 == 7 && a2 == 13 && a3 == 16 && a4 == 8)
    return &unk_254A45678;
  if (a1 == 7 && a2 == 14 && a3 == 19 && a4 == 10)
    return &unk_254A45A78;
  v5 = a1 == 7 && a2 == 16;
  v6 = v5;
  if (v5 && a3 == 17 && a4 == 9)
    return &unk_254A45E78;
  if (a3 != 20 || a4 != 11)
    v6 = 0;
  if ((v6 & 1) != 0)
    return &unk_254A46278;
  if (a3 == 20 && a1 == 7 && a2 == 17 && a4 == 13)
    return &unk_254A46678;
  if (a1 == 8 && a2 == 18 && a3 == 19 && a4 == 10)
    return &unk_254A46A78;
  if (a1 != 9 || a2 != 21 || a3 != 26 || a4 != 15)
    abort();
  return &unk_254A423F8;
}

double sub_20E7FA194(uint64_t a1, uint64_t a2, char a3, int a4, int a5, int a6, double a7)
{
  unint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  char v21;
  int v22;
  int v23;
  char v24;
  int v25;
  unint64_t v26;

  v13 = sub_20E7FA44C(a4, a7);
  v14 = v13 >> (a4 - a3);
  v15 = 1 << (a3 - 1);
  v16 = v14 & ~v15;
  if (((v13 >> 16) & 0x10000) == 0)
    v15 = 0;
  v17 = 4 * (v15 | v16);
  v18 = *(_DWORD *)(a1 + v17);
  v19 = *(_DWORD *)(a2 + v17);
  v20 = a6 + a4;
  v21 = a6 + a4 - 1 - a5;
  if (a6 + a4 - 1 < a5)
    v21 = 0;
  v22 = v18 << v21;
  v23 = ((1 << (a4 - a3 - 1)) - v13 + (v14 << (a4 - a3))) * v19;
  if (v20 - 1 >= a5)
    v24 = 0;
  else
    v24 = a5 - (a6 + a4 - 1);
  v25 = v23 << v24;
  if (v20 - 1 < a5)
    LOBYTE(v20) = a5 + 1;
  v26 = sub_20E7FA53C((uint64_t)(v22 + (1 << (v20 - a4 - 2)) + v25) >> (v20 - a4 - 1), ~(unsigned __int16)((int)(((int)(v13 >> 16) >> 16) - (((v13 >> 16) & 0x10000) >> 16)) / 2), a4);
  return sub_20E7FA4FC(v26);
}

void *sub_20E7FA290(int a1, int a2, int a3, int a4)
{
  BOOL v5;
  char v6;
  char v7;

  if (a3 == 12 && a1 == 5 && a2 == 11 && a4 == 5)
    return &unk_254A47678;
  if (a1 == 5 && a2 == 12 && a3 == 12 && a4 == 7)
    return &unk_254A47778;
  if (a4 == 7 && a2 == 13 && a1 == 6 && a3 == 13)
    return &unk_254A47878;
  if (a3 == 17 && a1 == 7 && a2 == 13 && a4 == 12)
    return &unk_254A47A78;
  v5 = a1 == 7 && a2 == 14;
  v6 = v5;
  if (v5 && a3 == 18 && a4 == 10)
    return &unk_254A47E78;
  v7 = v6 ^ 1;
  if (a3 != 19)
    v7 = 1;
  if ((v7 & 1) == 0 && a4 == 9)
    return &unk_254A48278;
  if (a3 == 18 && a1 == 7 && a2 == 15 && a4 == 8)
    return &unk_254A48678;
  if (a1 == 7 && a2 == 16 && a3 == 17 && a4 == 9)
    return &unk_254A48A78;
  if (a2 != 15 || a1 != 8 || a3 != 21 || a4 != 11)
    abort();
  return &unk_254A48E78;
}

unint64_t sub_20E7FA44C(char a1, double a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int16 v7;

  if (a2 == 0.0)
    return 0;
  v3 = ((*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000uLL) >> (52 - a1)) + 1;
  v4 = v3 >> 1;
  v5 = v3 >> 1 >> a1;
  v6 = v3 >> 2;
  if (v5 == 1)
  {
    v7 = -1022;
  }
  else
  {
    LODWORD(v6) = v4;
    v7 = -1023;
  }
  return ((unint64_t)(a1 & 0x1F) << 49) | (*(_QWORD *)&a2 >> 15) & 0xFFFF000000000000 | v6 | ((unint64_t)(unsigned __int16)(v7 + ((*(_QWORD *)&a2 >> 52) & 0x7FF)) << 32);
}

double sub_20E7FA4FC(uint64_t a1)
{
  double result;
  char v2;

  result = 0.0;
  v2 = __clz(a1);
  if ((_DWORD)a1)
    *(_QWORD *)&result = ((a1 << 20) + 0x3FF0000000000000) & 0x7FF0000000000000 | ((unint64_t)BYTE6(a1) << 63) | ((unint64_t)a1 << (v2 + 21)) & 0xFFFFFFFFFFFFELL;
  return result;
}

unint64_t sub_20E7FA53C(unsigned int a1, unsigned __int16 a2, int a3)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;

  v3 = (unint64_t)(a3 & 0x1F) << 49;
  if (!a1)
    return v3 & 0xFFFFFFFFFFFFFFLL;
  v4 = (__clz(a1) | 0xFFFFFFE0) + a3;
  if (v4)
  {
    v5 = (unint64_t)(a3 & 0x1F) << 49;
    v6 = (unsigned __int16)(a2 - v4);
    if (v4 < 0)
      v3 = v5 | (a1 >> -(char)v4) | (v6 << 32);
    else
      v3 = v5 | (a1 << v4) | (v6 << 32);
    return v3 & 0xFFFFFFFFFFFFFFLL;
  }
  return v3 & 0xFF000000000000 | a1 | ((unint64_t)a2 << 32) & 0xFFFFFFFFFFFFFFLL;
}

uint64_t sub_20E7FA5DC(uint64_t a1)
{
  NSObject *v2;
  _xpc_connection_s *mach_service;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[22];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    gettimeofday((timeval *)v13, 0);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v13;
    if (*(_QWORD *)a1)
      sub_20E80CA2C();
    kdebug_trace();
    v2 = dispatch_queue_create("com.apple.cvhwa.xpc.client", 0);
    mach_service = xpc_connection_create_mach_service("com.apple.cvhwa.xpc", v2, 0);
    *(_QWORD *)a1 = mach_service;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v13 = 136315394;
      *(_QWORD *)&v13[4] = "com.apple.cvhwa.xpc";
      *(_WORD *)&v13[12] = 2048;
      *(_QWORD *)&v13[14] = mach_service;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "VisionHWAClient: Creating XPC connection to %s: %p", v13, 0x16u);
      mach_service = *(_xpc_connection_s **)a1;
    }
    xpc_connection_set_event_handler(mach_service, &unk_24C9A9210);
    xpc_connection_resume(*(xpc_connection_t *)a1);
    dispatch_release(v2);
    kdebug_trace();
    return 0;
  }
  else
  {
    v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v5)
      sub_20E80C9F8(v5, v6, v7, v8, v9, v10, v11, v12);
    return 2;
  }
}

void sub_20E7FA77C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E785844(a1);
  _Unwind_Resume(a1);
}

const char *sub_20E7FA794(unsigned int a1)
{
  if (a1 <= 0x22)
    return off_24C9A9230[a1];
  else
    return "kVisionHWAReturnUnknownFailure";
}

uint64_t sub_20E7FA7B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((unint64_t)(a1 - 1) > 0x1A)
    return 4195860702;
  v1 = (a1 + 5);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80CA58(v1, v2, v3, v4, v5, v6, v7, v8);
  return v1;
}

uint64_t sub_20E7FA828(uint64_t a1, xpc_object_t *a2, int *a3)
{
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  xpc_object_t v16;
  xpc_object_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t uint64;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = MEMORY[0x212BC4B94](*a2);
  if (v6 == MEMORY[0x24BDACFB8])
  {
    v16 = *a2;
    if (v16 == (xpc_object_t)MEMORY[0x24BDACF38])
    {
      v27 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v27)
        sub_20E80CAD0(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      if (v16 == (xpc_object_t)MEMORY[0x24BDACF30])
      {
        v36 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v36)
          sub_20E80CB04(v36, v37, v38, v39, v40, v41, v42, v43);
        goto LABEL_21;
      }
      v17 = (xpc_object_t)MEMORY[0x24BDACF48];
      v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v16 == v17)
      {
        if (v18)
          sub_20E80CB38(v18, v19, v20, v21, v22, v23, v24, v25);
        goto LABEL_21;
      }
      if (v18)
        sub_20E80CB6C(v16);
    }
    sub_20E7FB4C4(a1);
LABEL_21:
    sub_20E7FB4C4(a1);
    v15 = 33;
    goto LABEL_22;
  }
  if (v6 == MEMORY[0x24BDACFA0])
  {
    if (xpc_dictionary_get_BOOL(*a2, "Status"))
      return 1;
    uint64 = xpc_dictionary_get_uint64(*a2, "Error");
    v15 = sub_20E7FA7B8(uint64);
  }
  else
  {
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v7)
      sub_20E80CBE8(v7, v8, v9, v10, v11, v12, v13, v14);
    v15 = 34;
  }
LABEL_22:
  *a3 = v15;
  return 0;
}

uint64_t sub_20E7FA9A4(uint64_t a1, CVPixelBufferRef *a2)
{
  uint64_t result;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __CVBuffer *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t *v16;
  unsigned int v17;
  timeval v18;

  if (a1)
  {
    gettimeofday(&v18, 0);
    *(timeval *)(a1 + 48) = v18;
    kdebug_trace();
    v18.tv_sec = (__darwin_time_t)xpc_dictionary_create_empty();
    xpc_dictionary_set_uint64((xpc_object_t)v18.tv_sec, "Command", 0x7D4uLL);
    v16 = (xpc_object_t *)&v18;
    result = sub_20E7FAB64(&v16, "ActionBuf", a2[1]);
    if (!(_DWORD)result)
    {
      result = sub_20E7FAB64(&v16, "OperationBuf", *a2);
      if (!(_DWORD)result)
      {
        result = sub_20E7FAB64(&v16, "StatsBuf", a2[2]);
        v17 = result;
        if (!(_DWORD)result)
        {
          v13 = a2[3];
          if (!v13 || (result = sub_20E7FAB64(&v16, "DtcmMetaBuf", v13), (v17 = result) == 0))
          {
            v14 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)a1, (xpc_object_t)v18.tv_sec);
            v15 = v14;
            if (sub_20E7FA828(a1, &v15, (int *)&v17))
              *(_QWORD *)(a1 + 8) = xpc_dictionary_get_uint64(v14, "ClientId");
            xpc_release(v14);
            xpc_release((xpc_object_t)v18.tv_sec);
            kdebug_trace();
            return v17;
          }
        }
      }
    }
  }
  else
  {
    v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v5)
      sub_20E80CC1C(v5, v6, v7, v8, v9, v10, v11, v12);
    return 2;
  }
  return result;
}

uint64_t sub_20E7FAB64(xpc_object_t **a1, const char *a2, CVPixelBufferRef pixelBuffer)
{
  __IOSurface *IOSurface;
  xpc_object_t XPCObject;
  void *v7;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  if (IOSurface)
  {
    XPCObject = IOSurfaceCreateXPCObject(IOSurface);
    if (XPCObject)
    {
      v7 = XPCObject;
      xpc_dictionary_set_value(**a1, a2, XPCObject);
      xpc_release(v7);
      return 0;
    }
    else
    {
      v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v17)
        sub_20E80CC84(v17, v18, v19, v20, v21, v22, v23, v24);
      xpc_release(**a1);
      return 3;
    }
  }
  else
  {
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      sub_20E80CC50(v9, v10, v11, v12, v13, v14, v15, v16);
    xpc_release(**a1);
    return 1;
  }
}

uint64_t sub_20E7FAC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  xpc_object_t empty;
  std::__fs::filesystem::path *p_p;
  xpc_object_t v9;
  std::__fs::filesystem::path v11;
  std::error_code __ec;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v14;
  unsigned int v15;

  v15 = 0;
  gettimeofday((timeval *)&v14, 0);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v14.__pn_.__r_.__value_.__l.__data_;
  ++*(_DWORD *)(a1 + 20);
  memset(&v14, 0, sizeof(v14));
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (std::string *)a2;
  else
    v5 = *(std::string **)a2;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  sub_20E7A9350(&v14.__pn_, v5, (std::string *)((char *)v5 + v4));
  memset(&__p, 0, sizeof(__p));
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  std::__fs::filesystem::__canonical(&v11, &v14, &__ec);
  __p = v11;
  if (!__ec.__val_)
  {
    empty = xpc_dictionary_create_empty();
    xpc_dictionary_set_uint64(empty, "ClientId", *(_QWORD *)(a1 + 8));
    xpc_dictionary_set_uint64(empty, "Command", 0x7D5uLL);
    if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
    xpc_dictionary_set_string(empty, "BinaryPath", (const char *)p_p);
    v9 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)a1, empty);
    v11.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    sub_20E7FA828(a1, (xpc_object_t *)&v11.__pn_.__r_.__value_.__l.__data_, (int *)&v15);
    xpc_release(v9);
    xpc_release(empty);
    v6 = v15;
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (__ec.__val_ == 2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_20E80CD48();
    v6 = 22;
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_19;
  }
  else
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v6 = 1;
      if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_19;
    }
    sub_20E80CCB8();
    v6 = 1;
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_19:
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
LABEL_20:
  if (SHIBYTE(v14.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__pn_.__r_.__value_.__l.__data_);
  return v6;
}

void sub_20E7FAE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7FAE74(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  xpc_object_t empty;
  const char *v9;
  xpc_object_t v10;
  int uint64;
  int v12;
  unsigned int v14;
  timeval v15;

  v14 = 0;
  gettimeofday(&v15, 0);
  *(timeval *)(a1 + 80) = v15;
  ++*(_DWORD *)(a1 + 24);
  empty = xpc_dictionary_create_empty();
  xpc_dictionary_set_uint64(empty, "ClientId", *(_QWORD *)(a1 + 8));
  xpc_dictionary_set_uint64(empty, "Command", 0x7D6uLL);
  if (*(char *)(a2 + 23) >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  xpc_dictionary_set_string(empty, "SymbolString", v9);
  v10 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)a1, empty);
  v15.tv_sec = (__darwin_time_t)v10;
  if (sub_20E7FA828(a1, (xpc_object_t *)&v15, (int *)&v14))
  {
    uint64 = xpc_dictionary_get_uint64(v10, "SymbolAddr");
    v12 = xpc_dictionary_get_uint64(v10, "SymbolSize");
    *a3 = uint64;
    *a4 = v12;
  }
  xpc_release(v10);
  xpc_release(empty);
  return v14;
}

uint64_t sub_20E7FAF8C(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  xpc_object_t empty;
  uint64_t v19;
  xpc_object_t v20;
  __IOSurface *IOSurface;
  xpc_object_t XPCObject;
  void *v23;
  __IOSurface *v24;
  xpc_object_t v25;
  void *v26;
  __IOSurface *v27;
  xpc_object_t v28;
  void *v29;
  unint64_t v30;
  __IOSurface *v31;
  xpc_object_t v32;
  void *v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::string v101;
  void *__p[2];
  int64_t v103;
  unsigned int v104;

  v104 = 0;
  ++*(_DWORD *)(a1 + 16);
  kdebug_trace();
  if (!a2)
  {
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
    {
      sub_20E80CDC8(v9, v10, v11, v12, v13, v14, v15, v16);
      return 2;
    }
    return 2;
  }
  if ((a3 & 1) != 0)
    LODWORD(v8) = 0;
  else
    v8 = (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3;
  empty = xpc_dictionary_create_empty();
  xpc_dictionary_set_uint64(empty, "IOBufListSize", v8);
  if ((a3 & 1) != 0)
  {
    v19 = 2003;
LABEL_9:
    xpc_dictionary_set_uint64(empty, "ClientId", *(_QWORD *)(a1 + 8));
    xpc_dictionary_set_uint64(empty, "Command", v19);
    v20 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)a1, empty);
    __p[0] = v20;
    sub_20E7FA828(a1, __p, (int *)&v104);
    xpc_release(v20);
    xpc_release(empty);
    kdebug_trace();
    return v104;
  }
  if (!(_DWORD)v8)
  {
    if ((a4 & 1) != 0)
      goto LABEL_21;
    goto LABEL_33;
  }
  if (v8 >= 0xB)
  {
LABEL_33:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      sub_20E80CE64(v8);
      return 2;
    }
    return 2;
  }
  if ((a4 & 1) == 0)
  {
    IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 8));
    if (IOSurface)
    {
      XPCObject = IOSurfaceCreateXPCObject(IOSurface);
      if (!XPCObject)
      {
        v61 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v61)
          sub_20E80CF10(v61, v62, v63, v64, v65, v66, v67, v68);
        return 3;
      }
      v23 = XPCObject;
      xpc_dictionary_set_value(empty, "ActionBuf", XPCObject);
      xpc_release(v23);
      v24 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)a2);
      if (v24)
      {
        v25 = IOSurfaceCreateXPCObject(v24);
        if (!v25)
        {
          v77 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v77)
            sub_20E80CF78(v77, v78, v79, v80, v81, v82, v83, v84);
          return 3;
        }
        v26 = v25;
        xpc_dictionary_set_value(empty, "OperationBuf", v25);
        xpc_release(v26);
        v27 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 16));
        if (v27)
        {
          v28 = IOSurfaceCreateXPCObject(v27);
          if (v28)
          {
            v29 = v28;
            xpc_dictionary_set_value(empty, "StatsBuf", v28);
            xpc_release(v29);
            goto LABEL_21;
          }
          v93 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v93)
            sub_20E80CFE0(v93, v94, v95, v96, v97, v98, v99, v100);
          return 3;
        }
        v85 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v85)
        {
          sub_20E80CFAC(v85, v86, v87, v88, v89, v90, v91, v92);
          return 1;
        }
      }
      else
      {
        v69 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v69)
        {
          sub_20E80CF44(v69, v70, v71, v72, v73, v74, v75, v76);
          return 1;
        }
      }
    }
    else
    {
      v53 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v53)
      {
        sub_20E80CEDC(v53, v54, v55, v56, v57, v58, v59, v60);
        return 1;
      }
    }
    return 1;
  }
LABEL_21:
  if (!(_DWORD)v8)
  {
    v19 = 2001;
    goto LABEL_9;
  }
  v30 = 0;
  v19 = 2001;
  while (1)
  {
    v31 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(*(_QWORD *)(a2 + 24) + 8 * v30));
    if (!v31)
      break;
    v32 = IOSurfaceCreateXPCObject(v31);
    if (!v32)
    {
      v45 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v45)
        sub_20E80CE30(v45, v46, v47, v48, v49, v50, v51, v52);
      return 3;
    }
    v33 = v32;
    std::to_string(&v101, v30);
    v34 = std::string::insert(&v101, 0, "IOBufList");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v103 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    if (v103 >= 0)
      v36 = __p;
    else
      v36 = (void **)__p[0];
    xpc_dictionary_set_value(empty, (const char *)v36, v33);
    xpc_release(v33);
    if (SHIBYTE(v103) < 0)
      operator delete(__p[0]);
    if (v8 == ++v30)
      goto LABEL_9;
  }
  v37 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (!v37)
    return 1;
  sub_20E80CDFC(v37, v38, v39, v40, v41, v42, v43, v44);
  return 1;
}

void sub_20E7FB390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7FB3C4(uint64_t a1)
{
  xpc_object_t empty;
  xpc_object_t v3;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  xpc_object_t v13;
  unsigned int v14;

  v14 = 0;
  if (a1)
  {
    empty = xpc_dictionary_create_empty();
    xpc_dictionary_set_uint64(empty, "Command", 0x7D2uLL);
    xpc_dictionary_set_uint64(empty, "ClientId", *(_QWORD *)(a1 + 8));
    v3 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)a1, empty);
    v13 = v3;
    sub_20E7FA828(a1, &v13, (int *)&v14);
    xpc_release(v3);
    xpc_release(empty);
    kdebug_trace();
    return v14;
  }
  else
  {
    v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v5)
      sub_20E80D014(v5, v6, v7, v8, v9, v10, v11, v12);
    return 2;
  }
}

void sub_20E7FB4C4(uint64_t a1)
{
  xpc_connection_t v2;
  int v3;
  xpc_connection_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v2 = *(xpc_connection_t *)a1;
    v3 = 134217984;
    v4 = v2;
    _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "VisionHWACancelXPCConnection: Cancelling XPC connection %p", (uint8_t *)&v3, 0xCu);
  }
  if (*(_QWORD *)a1)
  {
    xpc_connection_cancel(*(xpc_connection_t *)a1);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v3) = 0;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "VisionHWAClient: XPC Connection Cancelled", (uint8_t *)&v3, 2u);
    }
    xpc_release(*(xpc_object_t *)a1);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t sub_20E7FB5C0(unsigned int a1)
{
  return (a1 < 0x22) & (0x200000300uLL >> a1);
}

void sub_20E7FB5DC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_20E7FB5EC(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t sub_20E7FB618(FILE **a1, char *__filename, char *__mode)
{
  uint64_t v3;
  FILE *v5;
  FILE *v6;

  v3 = 2;
  if (__filename && __mode)
  {
    v5 = fopen(__filename, __mode);
    v6 = *a1;
    if (!v5)
    {
      *a1 = 0;
      v3 = 1;
      if (!v6)
        return v3;
      goto LABEL_5;
    }
    v3 = 0;
    *a1 = v5;
    if (v6)
LABEL_5:
      fclose(v6);
  }
  return v3;
}

void sub_20E7FB67C(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_254A493C8);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_254A493C8))
  {
    *a1 = qword_254A493C0;
  }
  else
  {
    sub_20E7FB800(&qword_254A493C0);
    __cxa_guard_release(&qword_254A493C8);
    *a1 = qword_254A493C0;
  }
}

void sub_20E7FB6F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A493C8);
  _Unwind_Resume(a1);
}

void sub_20E7FB70C(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  _QWORD *v5;

  v2 = atomic_load((unsigned __int8 *)qword_254A493D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_254A493D8))
  {
    sub_20E7FB67C(&v5);
    sub_20E78570C(__p, "cv3d");
    sub_20E7FE658(&v5, (uint64_t)__p, &qword_254A493D0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(qword_254A493D8);
  }
  *a1 = qword_254A493D0;
}

void sub_20E7FB7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_254A493D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_254A493D8);
  _Unwind_Resume(a1);
}

void sub_20E7FB800(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_254A493F8);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_254A493F8))
  {
    *a1 = qword_254A493F0;
  }
  else
  {
    sub_20E7FB888();
    __cxa_guard_release(&qword_254A493F8);
    *a1 = qword_254A493F0;
  }
}

void sub_20E7FB870(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A493F8);
  _Unwind_Resume(a1);
}

void sub_20E7FB888()
{
  void *__p[2];
  char v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  sub_20E7FEBB8(&qword_254A493F0);
  v4 = (_QWORD *)qword_254A493F0;
  sub_20E7FE648(&v4, &v5);
  v2 = (_QWORD *)qword_254A493F0;
  v1 = 7;
  strcpy((char *)__p, "cv3dapi");
  sub_20E7FE658(&v2, (uint64_t)__p, &v3);
  if (v1 < 0)
    operator delete(__p[0]);
  sub_20E7FDFB0((uint64_t)v5);
  sub_20E7FE090(v5, 6);
  sub_20E7FE090(v3, 6);
}

void sub_20E7FB938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20E7FB954(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    v3 = *(char **)(v2 + 32);
    if (v3)
    {
      do
      {
        v5 = *(char **)v3;
        v6 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5);
    }
    v4 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
      operator delete(v4);
    sub_20E7FBA0C((uint64_t *)(v2 + 8));
    JUMPOUT(0x212BC47D4);
  }
  return result;
}

uint64_t *sub_20E7FBA0C(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  void *v4;
  char *v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    v3 = *(char **)(v2 + 32);
    if (v3)
    {
      do
      {
        v6 = *(char **)v3;
        v7 = *((_QWORD *)v3 + 5);
        *((_QWORD *)v3 + 5) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v6;
      }
      while (v6);
    }
    v4 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
      operator delete(v4);
    sub_20E7FBA0C(v2 + 8);
    MEMORY[0x212BC47D4](v2, 0x10A0C400EF86968);
  }
  return a1;
}

uint64_t sub_20E7FBAC0(uint64_t a1, char *__format, ...)
{
  char *v4;
  unsigned int v5;
  size_t v6;
  uint64_t v7;
  va_list *p_dst;
  char *v9;
  size_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  char *v18;
  char *v19;
  char v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  __int128 v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  va_list *v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t v40;
  va_list __dst;
  size_t v42;
  int64_t v43;
  void *__p;
  char *v45;
  char *v46;
  char __str[512];
  uint64_t v48;
  va_list va;

  va_start(va, __format);
  v48 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 56))
  {
    v35 = operator new();
    sub_20E7FBF24(v35);
    v36 = (_QWORD *)operator new();
    *v36 = &unk_24C9A94F0;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = v35;
    v37 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v35;
    *(_QWORD *)(a1 + 64) = v36;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  __p = 0;
  v45 = 0;
  v46 = 0;
  v40 = a1;
  va_copy(__dst, va);
  v4 = __str;
  v5 = vsnprintf(__str, 0x200uLL, __format, va);
  v6 = v5;
  if (v5 >= 0x200)
  {
    v4 = 0;
    v9 = 0;
    v10 = 512;
    while (1)
    {
      if ((int)v5 > 0)
        v10 = v6 + 1;
      else
        v10 *= 4;
      v11 = v9 - v4;
      v12 = v10 - (v9 - v4);
      if (v10 <= v9 - v4)
      {
        if (v10 < v9 - v4)
        {
          v9 = &v4[v10];
          v45 = &v4[v10];
        }
        goto LABEL_35;
      }
      if (v46 - v9 < v12)
        break;
      bzero(v9, v10 - (v9 - v4));
      v45 = &v4[v10];
      v4 = (char *)__p;
      v9 += v12;
LABEL_35:
      va_copy(__dst, va);
      v5 = vsnprintf(v4, v10, __format, va);
      v6 = v5;
      if ((v5 & 0x80000000) == 0 && v10 > v5)
        goto LABEL_3;
    }
    if ((v10 & 0x8000000000000000) != 0)
      sub_20E78D874();
    v13 = 2 * (v46 - v4);
    if (v13 <= v10)
      v13 = v10;
    if ((unint64_t)(v46 - v4) >= 0x3FFFFFFFFFFFFFFFLL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v15 = (char *)operator new(v14);
    v16 = &v15[v11];
    bzero(&v15[v11], v10 - (v9 - v4));
    if (v9 == v4)
    {
LABEL_29:
      v9 = &v15[v10];
      __p = v16;
      v45 = &v15[v10];
      v46 = &v15[v14];
      if (v4)
        operator delete(v4);
      v4 = v16;
      goto LABEL_35;
    }
    if (v11 < 8 || (v15 <= &v15[v11 - 1] ? (v17 = v4 > v9 - 1) : (v17 = 1), v17 || (unint64_t)(v4 - v15) < 0x20))
    {
      v18 = v9;
      goto LABEL_26;
    }
    if (v11 >= 0x20)
    {
      v21 = v11 & 0xFFFFFFFFFFFFFFE0;
      v22 = &v15[v11 - 16];
      v23 = v9 - 16;
      v24 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v25 = *(_OWORD *)v23;
        *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
        *(_OWORD *)v22 = v25;
        v22 -= 32;
        v23 -= 32;
        v24 -= 32;
      }
      while (v24);
      if (v11 == v21)
        goto LABEL_28;
      if ((v11 & 0x18) == 0)
      {
        v16 -= v21;
        v18 = &v9[-v21];
LABEL_26:
        v19 = v16 - 1;
        do
        {
          v20 = *--v18;
          *v19-- = v20;
        }
        while (v18 != v4);
LABEL_28:
        v16 = v15;
        goto LABEL_29;
      }
    }
    else
    {
      v21 = 0;
    }
    v18 = &v9[-(v11 & 0xFFFFFFFFFFFFFFF8)];
    v16 -= v11 & 0xFFFFFFFFFFFFFFF8;
    v26 = &v15[&v9[-v21] - v4 - 8];
    v27 = &v9[-v21 - 8];
    v28 = v21 - (v11 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v29 = *(_QWORD *)v27;
      v27 -= 8;
      *(_QWORD *)v26 = v29;
      v26 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_28;
    goto LABEL_26;
  }
LABEL_3:
  v7 = *(_QWORD *)(v40 + 56);
  if (v5 >= 0x17)
  {
    v30 = (v6 & 0xFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v30 = v6 | 7;
    v31 = v30 + 1;
    p_dst = (va_list *)operator new(v30 + 1);
    v42 = v6;
    v43 = v31 | 0x8000000000000000;
    __dst = (va_list)p_dst;
    goto LABEL_52;
  }
  HIBYTE(v43) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_52:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  if (v43 >= 0)
    v32 = &__dst;
  else
    v32 = (va_list *)__dst;
  if (v43 >= 0)
    v33 = HIBYTE(v43);
  else
    v33 = v42;
  sub_20E78F4CC((_QWORD *)(v7 + 16), (uint64_t)v32, v33);
  if (SHIBYTE(v43) < 0)
    operator delete(__dst);
  if (__p)
    operator delete(__p);
  return v40;
}

void sub_20E7FBEA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20E7FBEBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC47D4](v1, 0x10B3C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20E7FBEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7FBF24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_20E7FC028(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x212BC4774](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7FC05C(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  _QWORD *v5;
  _DWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  *(_QWORD *)a1 = &off_24C9A9358;
  *(_QWORD *)(a1 + 8) = *a2;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (_QWORD *)operator new();
  v6 = (_DWORD *)operator new();
  *v6 = 3;
  *v5 = v6;
  v7 = (_QWORD *)operator new();
  v7[1] = 0;
  v8 = v7 + 1;
  *v7 = &off_24C9A94A0;
  v7[2] = 0;
  v7[3] = v6;
  v5[1] = v7;
  *(_QWORD *)(a1 + 56) = *v5;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = v7;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  v10 = operator new();
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = v10 + 48;
  *(_DWORD *)(v10 + 32) = 1065353216;
  v11 = (uint64_t *)(a1 + 72);
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 850045863;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_QWORD *)(v10 + 120) = 0;
  *(_QWORD *)(a1 + 72) = v10;
  v12 = *a3;
  v13 = a3[1];
  while (v12 != v13)
  {
    v14 = *v12;
    v15 = (std::__shared_weak_count *)v12[1];
    v29 = *v12;
    v30 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      v18 = *v11;
      *(_QWORD *)&v27 = v14;
      *((_QWORD *)&v27 + 1) = v14;
      v28 = v15;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    else
    {
      v18 = *v11;
      *(_QWORD *)&v27 = v14;
      *((_QWORD *)&v27 + 1) = v14;
      v28 = 0;
    }
    sub_20E7FFD8C((uint64_t **)(v18 + 40), &v27);
    v20 = v28;
    if (!v28)
      goto LABEL_17;
    v21 = (unint64_t *)&v28->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v23 = v30;
      if (!v30)
        goto LABEL_4;
    }
    else
    {
LABEL_17:
      v23 = v30;
      if (!v30)
        goto LABEL_4;
    }
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
LABEL_4:
    v12 += 2;
  }
  return a1;
}

void sub_20E7FC2A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  sub_20E7858BC(v3);
  sub_20E7FC428(v2);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_20E7FC338(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20E7FC3A0(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 64));
    sub_20E7FFD04(v2 + 40, *(_QWORD **)(v2 + 48));
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      operator delete(v5);
    MEMORY[0x212BC47D4](v2, 0x10A0C4002A566EDLL);
  }
  return a1;
}

uint64_t *sub_20E7FC428(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x212BC47D4](v2, 0x30C40EEE2E2AFLL);
  }
  return a1;
}

uint64_t sub_20E7FC4AC(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  v8 = *a2;
  *(_QWORD *)a1 = &off_24C9A9358;
  *(_QWORD *)(a1 + 8) = v8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20E7A8C78((_BYTE *)(a1 + 16), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v9;
  }
  v10 = *a4;
  v11 = *(_QWORD *)(*a4 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*a4 + 56);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *a5;
  if (*a5)
  {
    *a5 = 0;
  }
  else
  {
    v14 = operator new();
    *(_QWORD *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = v14 + 48;
    *(_DWORD *)(v14 + 32) = 1065353216;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_QWORD *)(v14 + 56) = 0;
    *(_QWORD *)(v14 + 64) = 850045863;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_QWORD *)(v14 + 120) = 0;
  }
  *(_QWORD *)(a1 + 72) = v14;
  return a1;
}

void sub_20E7FC5BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t *v4;

  sub_20E7858BC(v3);
  sub_20E7FC428(v4);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7FC5E8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  *(_QWORD *)a1 = &off_24C9A9358;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 64));
    sub_20E7FFD04(v2 + 40, *(_QWORD **)(v2 + 48));
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      operator delete(v5);
    MEMORY[0x212BC47D4](v2, 0x10A0C4002A566EDLL);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v6)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v9)
      goto LABEL_18;
  }
  else
  {
LABEL_11:
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v9)
      goto LABEL_18;
  }
  v10 = *(std::__shared_weak_count **)(v9 + 8);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  MEMORY[0x212BC47D4](v9, 0x30C40EEE2E2AFLL);
LABEL_18:
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20E7FC748(uint64_t a1)
{
  sub_20E7FC5E8(a1);
  JUMPOUT(0x212BC47D4);
}

void sub_20E7FC76C(_QWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  std::mutex *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 v17;
  char *v18;
  std::string::size_type size;
  void **v20;
  std::string::size_type v21;
  char *v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  char *v30;
  void **v31;
  void **v32;
  void *v33;
  _QWORD *v34;
  char **v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  void *v61[2];
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  void *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  std::string v72;
  void *__p[2];
  uint64_t v74;
  void *v75[2];
  void *v76[2];
  int v77;
  void *v78;
  char v79;
  uint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  __int128 __dst;
  void *v85;

  v6 = *a1;
  v7 = (std::mutex *)(*a1 + 7);
  std::mutex::lock(v7);
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = (_BYTE *)a2;
  else
    v9 = *(_BYTE **)a2;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_15;
  v10 = 0;
  v11 = v6 + 2;
  while (v9[v10] == 46)
  {
    if (v8 == ++v10)
      goto LABEL_15;
  }
  if (v10 == -1)
  {
LABEL_15:
    *a3 = **a1;
  }
  else
  {
    if (sub_20E7FD028((_QWORD *)a2))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_20E7A8C78(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        __dst = *(_OWORD *)a2;
        v85 = *(void **)(a2 + 16);
      }
    }
    else
    {
      sub_20E7FD2B4(a2, (uint64_t)&__dst);
    }
    v12 = sub_20E7FFEB8(v11, (uint64_t)&__dst);
    if (v12)
    {
      *a3 = v12[5];
      if (SHIBYTE(v85) < 0)
LABEL_112:
        operator delete((void *)__dst);
    }
    else
    {
      v13 = operator new();
      *(_QWORD *)v13 = **a1;
      v61[0] = 0;
      v61[1] = 0;
      v62 = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      sub_20E7FDAAC((uint64_t)v75, (uint64_t)&__dst, 24);
      __p[0] = 0;
      __p[1] = 0;
      v74 = 0;
      memset(&v72, 0, sizeof(v72));
      while (1)
      {
        v15 = sub_20E7FDC20(v75, (uint64_t)__p, 0x2Eu);
        if ((*((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 32) & 5) != 0)
          break;
        v16 = v61[1];
        if (v61[1] >= v62)
        {
          v18 = sub_20E8000E4((char **)v61, (uint64_t)__p);
        }
        else
        {
          if (SHIBYTE(v74) < 0)
          {
            sub_20E7A8C78((_BYTE *)v61[1], __p[0], (unint64_t)__p[1]);
          }
          else
          {
            v17 = *(_OWORD *)__p;
            *((_QWORD *)v61[1] + 2) = v74;
            *v16 = v17;
          }
          v18 = (char *)v16 + 24;
        }
        v61[1] = v18;
        size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v72.__r_.__value_.__l.__size_;
        if (size)
          std::string::append(&v72, ".");
        if (v74 >= 0)
          v20 = __p;
        else
          v20 = (void **)__p[0];
        if (v74 >= 0)
          v21 = HIBYTE(v74);
        else
          v21 = (std::string::size_type)__p[1];
        std::string::append(&v72, (const std::string::value_type *)v20, v21);
        v22 = v82;
        if ((unint64_t)v82 < v83)
        {
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_20E7A8C78(v82, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
          }
          else
          {
            v14 = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
            *((_QWORD *)v82 + 2) = *((_QWORD *)&v72.__r_.__value_.__l + 2);
            *(_OWORD *)v22 = v14;
          }
          v82 = v22 + 24;
        }
        else
        {
          v82 = sub_20E8000E4(&v81, (uint64_t)&v72);
        }
      }
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      if (SHIBYTE(v74) < 0)
        operator delete(__p[0]);
      v75[0] = *(void **)MEMORY[0x24BEDB7F0];
      v23 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)v75 + *((_QWORD *)v75[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v76[0] = v23;
      v76[1] = (void *)(MEMORY[0x24BEDB848] + 16);
      if (v79 < 0)
        operator delete(v78);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC4774](&v80);
      v24 = ((int)v82 - (int)v81) / 24 + 1;
      v25 = 24 * (((int)v82 - (int)v81) / 24) - 24;
      while (--v24 > 0)
      {
        v26 = sub_20E7FFEB8(v11, (uint64_t)&v81[v25]);
        v25 -= 24;
        if (v26)
        {
          v27 = (_QWORD *)operator new();
          *v27 = v26[5];
          MEMORY[0x212BC47D4](v13, 0x60C4044C4A2DFLL);
          v13 = (uint64_t)v27;
          break;
        }
      }
      v28 = v81;
      if (v81)
      {
        v29 = v82;
        v30 = v81;
        if (v82 != v81)
        {
          do
          {
            if (*(v29 - 1) < 0)
              operator delete(*((void **)v29 - 3));
            v29 -= 24;
          }
          while (v29 != v28);
          v30 = v81;
        }
        v82 = v28;
        operator delete(v30);
      }
      v31 = (void **)v61[0];
      if (v61[0])
      {
        v32 = (void **)v61[1];
        v33 = v61[0];
        if (v61[1] != v61[0])
        {
          do
          {
            if (*((char *)v32 - 1) < 0)
              operator delete(*(v32 - 3));
            v32 -= 3;
          }
          while (v32 != v31);
          v33 = v61[0];
        }
        v61[1] = v31;
        operator delete(v33);
      }
      *(_OWORD *)v75 = 0u;
      *(_OWORD *)v76 = 0u;
      v77 = 1065353216;
      v34 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v13 + 72) + 16);
      if (v34)
      {
        do
        {
          while (1)
          {
            v35 = (char **)v34[2];
            if (sub_20E7FDE14((char *)&__dst, v35 + 2))
              break;
            v34 = (_QWORD *)*v34;
            if (!v34)
              goto LABEL_79;
          }
          v61[0] = v35;
          sub_20E80031C((uint64_t)v75, (uint64_t *)v61, v61);
          v36 = (_QWORD *)*v34;
          sub_20E800674(*(_QWORD **)(*(_QWORD *)v13 + 72), v34, (uint64_t)v61);
          v37 = v61[0];
          v61[0] = 0;
          if (v37)
            operator delete(v37);
          v34 = v36;
        }
        while (v36);
      }
LABEL_79:
      v38 = operator new();
      sub_20E8007A8((uint64_t)&v67, (uint64_t)v75);
      v39 = v67;
      v40 = v68;
      v67 = 0;
      v68 = 0;
      *(_QWORD *)v38 = v39;
      *(_QWORD *)(v38 + 8) = v40;
      v41 = v69;
      v42 = v70;
      *(_QWORD *)(v38 + 16) = v69;
      *(_QWORD *)(v38 + 24) = v42;
      *(_DWORD *)(v38 + 32) = v71;
      if (v42)
      {
        v43 = v41[1];
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v43 >= v40)
            v43 %= v40;
        }
        else
        {
          v43 &= v40 - 1;
        }
        v41 = 0;
        v39[v43] = v38 + 16;
        v69 = 0;
        v70 = 0;
      }
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 40) = v38 + 48;
      *(_QWORD *)(v38 + 56) = 0;
      *(_QWORD *)(v38 + 64) = 850045863;
      *(_OWORD *)(v38 + 72) = 0u;
      *(_OWORD *)(v38 + 88) = 0u;
      *(_OWORD *)(v38 + 104) = 0u;
      *(_QWORD *)(v38 + 120) = 0;
      v81 = (char *)v38;
      if (v41)
      {
        do
        {
          v44 = (_QWORD *)*v41;
          operator delete(v41);
          v41 = v44;
        }
        while (v44);
      }
      v45 = v67;
      v67 = 0;
      if (v45)
        operator delete(v45);
      v46 = operator new();
      v47 = *a1;
      v65 = *(_QWORD *)v13;
      v66 = v47;
      v48 = v81;
      v81 = 0;
      v64 = v48;
      sub_20E7FC4AC(v46, (uint64_t *)&v66, &__dst, &v65, (uint64_t *)&v64);
      v49 = (uint64_t)v64;
      v64 = 0;
      if (v49)
      {
        std::mutex::~mutex((std::mutex *)(v49 + 64));
        sub_20E7FFD04(v49 + 40, *(_QWORD **)(v49 + 48));
        v50 = *(_QWORD **)(v49 + 16);
        if (v50)
        {
          do
          {
            v51 = (_QWORD *)*v50;
            operator delete(v50);
            v50 = v51;
          }
          while (v51);
        }
        v52 = *(void **)v49;
        *(_QWORD *)v49 = 0;
        if (v52)
          operator delete(v52);
        MEMORY[0x212BC47D4](v49, 0x10A0C4002A566EDLL);
      }
      if (SHIBYTE(v85) < 0)
      {
        sub_20E7A8C78(v61, (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        *(_OWORD *)v61 = __dst;
        v62 = v85;
      }
      v63 = v46;
      v53 = sub_20E800C40((uint64_t)v11, (uint64_t)v61, (__int128 *)v61);
      v54 = v63;
      v63 = 0;
      if (v54)
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
      if (SHIBYTE(v62) < 0)
        operator delete(v61[0]);
      v55 = (void *)*((_QWORD *)v53 + 5);
      v56 = *(_QWORD *)(*(_QWORD *)v13 + 72);
      v61[0] = v55;
      sub_20E80031C(v56, (uint64_t *)v61, v61);
      v57 = v76[0];
      if (v76[0])
      {
        v58 = v76[0];
        do
        {
          *(_QWORD *)(v58[2] + 40) = v55;
          v58 = (_QWORD *)*v58;
        }
        while (v58);
        *a3 = v55;
        if (v57)
        {
          do
          {
            v59 = (_QWORD *)*v57;
            operator delete(v57);
            v57 = v59;
          }
          while (v59);
        }
      }
      else
      {
        *a3 = v55;
      }
      v60 = v75[0];
      v75[0] = 0;
      if (v60)
        operator delete(v60);
      MEMORY[0x212BC47D4](v13, 0x60C4044C4A2DFLL);
      if (SHIBYTE(v85) < 0)
        goto LABEL_112;
    }
  }
  std::mutex::unlock(v7);
}

void sub_20E7FCEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  std::mutex *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  sub_20E7FC3A0((uint64_t *)(v36 - 136));
  sub_20E7EA590((uint64_t)&a33);
  MEMORY[0x212BC47D4](v34, 0x60C4044C4A2DFLL);
  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  std::mutex::unlock(v33);
  _Unwind_Resume(a1);
}

BOOL sub_20E7FD028(_QWORD *__s)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  int v11;
  char *v12;
  void *v13;
  char *v14;
  unsigned __int8 v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  size_t v21;
  char *v22;

  v2 = *((unsigned __int8 *)__s + 23);
  if (*((char *)__s + 23) < 0)
  {
    v4 = __s[1];
    if (v4)
    {
      v3 = (_QWORD *)*__s;
      goto LABEL_6;
    }
    return 1;
  }
  if (!*((_BYTE *)__s + 23))
    return 1;
  v3 = __s;
  v4 = *((unsigned __int8 *)__s + 23);
LABEL_6:
  v5 = 0;
  while (*((_BYTE *)v3 + v5) != 46)
  {
    if (v4 == ++v5)
      goto LABEL_12;
  }
  if (v4 != v5 && !v5)
    return 0;
LABEL_12:
  v7 = (_QWORD *)*__s;
  v6 = __s[1];
  if ((v2 & 0x80u) == 0)
    v8 = __s;
  else
    v8 = (_QWORD *)*__s;
  if ((v2 & 0x80u) == 0)
    v9 = *((unsigned __int8 *)__s + 23);
  else
    v9 = __s[1];
  v10 = (char *)v8 - 1;
  while (v9)
  {
    v11 = v10[v9--];
    if (v11 == 46)
    {
      if ((v2 & 0x80) == 0)
        goto LABEL_22;
      goto LABEL_25;
    }
  }
  v9 = -1;
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    v7 = __s;
    v6 = *((unsigned __int8 *)__s + 23);
    if (v9 == v2 - 1)
      return 0;
    goto LABEL_27;
  }
LABEL_25:
  if (v9 == v6 - 1)
    return 0;
LABEL_27:
  if (v6 >= 2)
  {
    v12 = (char *)v7 + v6;
    v13 = v7;
    do
    {
      v14 = (char *)memchr(v13, 46, v6 - 1);
      if (!v14)
        break;
      if (*(_WORD *)v14 == 11822)
      {
        if (v14 == v12 || v14 - (char *)v7 == -1)
          break;
        return 0;
      }
      v13 = v14 + 1;
      v6 = v12 - (_BYTE *)v13;
    }
    while (v12 - (_BYTE *)v13 >= 2);
  }
  v16 = atomic_load((unsigned __int8 *)qword_254A49400);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(qword_254A49400))
  {
    sub_20E78570C(&qword_254A49520, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
    __cxa_atexit(MEMORY[0x24BEDACF0], &qword_254A49520, &dword_20E77A000);
    __cxa_guard_release(qword_254A49400);
  }
  v17 = *((char *)__s + 23);
  if (v17 >= 0)
    v18 = (char *)__s;
  else
    v18 = (char *)*__s;
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)__s + 23);
  else
    v19 = __s[1];
  if (byte_254A49537 >= 0)
    v20 = &qword_254A49520;
  else
    v20 = (uint64_t *)qword_254A49520;
  if (byte_254A49537 >= 0)
    v21 = byte_254A49537;
  else
    v21 = unk_254A49528;
  if (!v19)
    return 1;
  v22 = v18;
  if (v21)
  {
    while (memchr(v20, *v22, v21))
    {
      ++v22;
      if (!--v19)
        return 1;
    }
  }
  return v22 - v18 == -1;
}

void sub_20E7FD29C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_254A49400);
  _Unwind_Resume(a1);
}

void sub_20E7FD2B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type size;
  std::string::size_type v7;
  int64_t v8;
  std::string *p_dst;
  char *v10;
  int64_t v11;
  std::string *v12;
  char *v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  char *v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  std::string::size_type v22;
  void (*v23)(void *);
  std::string::value_type v24;
  unsigned __int8 v25;
  void (*v26)(void *);
  uint64_t v27;
  std::string::value_type v28;
  unsigned __int8 v29;
  char *v30;
  std::string *v31;
  __int128 v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string::size_type v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  uint64_t v43;
  void **v44;
  char *i;
  __int128 v46;
  uint64_t v47;
  void **v48;
  char *v49;
  char *v50;
  _BYTE *v51;
  void *__p[2];
  uint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  void *v57;
  char v58;
  _BYTE v59[152];
  char *v60;
  char *v61;
  unint64_t v62;
  std::string __dst;

  if (sub_20E7FD028((_QWORD *)a1))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20E7A8C78((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
    }
    return;
  }
  if (*(char *)(a1 + 23) < 0)
    sub_20E7A8C78(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __dst = *(std::string *)a1;
  v51 = (_BYTE *)a2;
  v4 = 1;
LABEL_9:
  v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  size = __dst.__r_.__value_.__l.__size_;
  v7 = __dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v8 = __dst.__r_.__value_.__l.__size_;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if (v8 < 2)
  {
    v4 = v8;
  }
  else
  {
    v10 = (char *)p_dst + v8;
    v11 = v8;
    v12 = p_dst;
    do
    {
      v13 = (char *)memchr(v12, 46, v11 - 1);
      if (!v13)
        break;
      if (*(_WORD *)v13 == 11822)
      {
        if (v13 != v10 && v13 - (char *)p_dst != -1)
        {
          std::string::erase(&__dst, v13 - (char *)p_dst, 1uLL);
          goto LABEL_9;
        }
        break;
      }
      v12 = (std::string *)(v13 + 1);
      v11 = v10 - (char *)v12;
    }
    while (v10 - (char *)v12 >= 2);
  }
  if (v4)
  {
    v14 = 0;
    while (p_dst->__r_.__value_.__s.__data_[v14] != 46)
    {
      if (v8 == ++v14)
        goto LABEL_33;
    }
    if (v8 != v14 && !v14)
    {
      std::string::erase(&__dst, 0, 1uLL);
      v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      size = __dst.__r_.__value_.__l.__size_;
      v7 = __dst.__r_.__value_.__r.__words[0];
    }
  }
LABEL_33:
  if ((v5 & 0x80u) == 0)
    v15 = &__dst;
  else
    v15 = (std::string *)v7;
  if ((v5 & 0x80u) == 0)
    v16 = v5;
  else
    v16 = size;
  v17 = (char *)&v15[-1].__r_.__value_.__r.__words[2] + 7;
  while (v16)
  {
    v18 = v17[v16--];
    if (v18 == 46)
    {
      if ((v5 & 0x80) == 0)
        goto LABEL_43;
LABEL_46:
      if (v16 == size - 1)
        goto LABEL_47;
LABEL_50:
      v19 = __dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
      {
        v20 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        goto LABEL_52;
      }
LABEL_59:
      v51[23] = 0;
      *v51 = 0;
      if ((v5 & 0x80) == 0)
        return;
      goto LABEL_134;
    }
  }
  v16 = -1;
  if ((v5 & 0x80) != 0)
    goto LABEL_46;
LABEL_43:
  size = v5;
  if (v16 == v5 - 1)
  {
LABEL_47:
    std::string::erase(&__dst, size, 1uLL);
    LODWORD(v5) = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_50;
  }
  if (!(_DWORD)v5)
    goto LABEL_59;
  v19 = v5;
  v20 = &__dst;
LABEL_52:
  v21 = (std::string *)((char *)v20 + v19);
  v22 = v19 - 1;
  v23 = (void (*)(void *))MEMORY[0x24BEDACF0];
  while (1)
  {
    v24 = v20->__r_.__value_.__s.__data_[0];
    v25 = atomic_load((unsigned __int8 *)qword_254A49400);
    if ((v25 & 1) == 0 && __cxa_guard_acquire(qword_254A49400))
    {
      qword_254A49520 = (uint64_t)operator new(0x48uLL);
      unk_254A49528 = xmmword_20E810470;
      strcpy((char *)qword_254A49520, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
      __cxa_atexit(v23, &qword_254A49520, &dword_20E77A000);
      __cxa_guard_release(qword_254A49400);
    }
    if (std::string::find((const std::string *)&qword_254A49520, v24, 0) == -1)
      break;
    v20 = (std::string *)((char *)v20 + 1);
    --v22;
    if (v20 == v21)
      goto LABEL_71;
  }
  if (v20 == v21 || (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1) == v21)
  {
    v21 = v20;
  }
  else
  {
    v26 = (void (*)(void *))MEMORY[0x24BEDACF0];
    v27 = 1;
    v21 = v20;
    do
    {
      v28 = v20->__r_.__value_.__s.__data_[v27];
      v29 = atomic_load((unsigned __int8 *)qword_254A49400);
      if ((v29 & 1) == 0 && __cxa_guard_acquire(qword_254A49400))
      {
        qword_254A49520 = (uint64_t)operator new(0x48uLL);
        unk_254A49528 = xmmword_20E810470;
        strcpy((char *)qword_254A49520, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.");
        __cxa_atexit(v26, &qword_254A49520, &dword_20E77A000);
        __cxa_guard_release(qword_254A49400);
      }
      if (std::string::find((const std::string *)&qword_254A49520, v28, 0) != -1)
      {
        v21->__r_.__value_.__s.__data_[0] = v20->__r_.__value_.__s.__data_[v27];
        v21 = (std::string *)((char *)v21 + 1);
      }
      ++v27;
      --v22;
    }
    while (v22);
  }
LABEL_71:
  v30 = (char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v31 = &__dst;
  }
  else
  {
    v30 = (char *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
    v31 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  std::string::erase(&__dst, (char *)v21 - (char *)v31, v30 - (char *)v21);
  v60 = 0;
  v61 = 0;
  v62 = 0;
  sub_20E7FDAAC((uint64_t)v54, (uint64_t)&__dst, 24);
  __p[0] = 0;
  __p[1] = 0;
  v53 = 0;
  while (1)
  {
    v33 = sub_20E7FDC20(v54, (uint64_t)__p, 0x2Eu);
    if ((*((_BYTE *)v33 + *(_QWORD *)(*v33 - 24) + 32) & 5) != 0)
      break;
    v34 = v61;
    if ((unint64_t)v61 < v62)
    {
      if (SHIBYTE(v53) < 0)
      {
        sub_20E7A8C78(v61, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v32 = *(_OWORD *)__p;
        *((_QWORD *)v61 + 2) = v53;
        *(_OWORD *)v34 = v32;
      }
      v61 = v34 + 24;
    }
    else
    {
      v61 = sub_20E8000E4(&v60, (uint64_t)__p);
    }
  }
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
  v35 = *MEMORY[0x24BEDB7F0];
  v54[0] = v35;
  v37 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v36 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v54 + *(_QWORD *)(v35 - 24)) = v37;
  v55 = v36;
  v56 = MEMORY[0x24BEDB848] + 16;
  if (v58 < 0)
    operator delete(v57);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC4774](v59);
  v38 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v38 = __dst.__r_.__value_.__l.__size_;
  if (v38)
  {
    sub_20E7FBF24((uint64_t)v54);
    v39 = v60;
    v40 = v61;
    if (v60 != v61)
    {
      if (v60[23] < 0)
      {
        sub_20E7A8C78(__p, *(void **)v60, *((_QWORD *)v60 + 1));
      }
      else
      {
        v41 = *(_OWORD *)v60;
        v53 = *((_QWORD *)v60 + 2);
        *(_OWORD *)__p = v41;
      }
      if (v53 >= 0)
        v43 = HIBYTE(v53);
      else
        v43 = (uint64_t)__p[1];
      if (v43)
      {
        if (v53 >= 0)
          v44 = __p;
        else
          v44 = (void **)__p[0];
        sub_20E78F4CC(&v55, (uint64_t)v44, v43);
      }
      else
      {
        sub_20E78F4CC(&v55, (uint64_t)"_", 1);
      }
      if (SHIBYTE(v53) < 0)
        operator delete(__p[0]);
      for (i = v39 + 24; i != v40; i += 24)
      {
        if (i[23] < 0)
        {
          sub_20E7A8C78(__p, *(void **)i, *((_QWORD *)i + 1));
        }
        else
        {
          v46 = *(_OWORD *)i;
          v53 = *((_QWORD *)i + 2);
          *(_OWORD *)__p = v46;
        }
        sub_20E78F4CC(&v55, (uint64_t)".", 1);
        if (v53 >= 0)
          v47 = HIBYTE(v53);
        else
          v47 = (uint64_t)__p[1];
        if (v47)
        {
          if (v53 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          sub_20E78F4CC(&v55, (uint64_t)v48, v47);
        }
        else
        {
          sub_20E78F4CC(&v55, (uint64_t)"_", 1);
        }
        if (SHIBYTE(v53) < 0)
          operator delete(__p[0]);
      }
    }
    std::stringbuf::str();
    v54[0] = v35;
    *(_QWORD *)((char *)v54 + *(_QWORD *)(v35 - 24)) = v37;
    v55 = v36;
    v56 = MEMORY[0x24BEDB848] + 16;
    if (v58 < 0)
      operator delete(v57);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC4774](v59);
    v42 = v60;
    if (!v60)
      goto LABEL_133;
    goto LABEL_126;
  }
  v51[23] = 1;
  *(_WORD *)v51 = 95;
  v42 = v60;
  if (v60)
  {
LABEL_126:
    v49 = v61;
    v50 = v42;
    if (v61 != v42)
    {
      do
      {
        if (*(v49 - 1) < 0)
          operator delete(*((void **)v49 - 3));
        v49 -= 24;
      }
      while (v49 != v42);
      v50 = v60;
    }
    v61 = v42;
    operator delete(v50);
  }
LABEL_133:
  if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) == 0)
    return;
LABEL_134:
  operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20E7FDA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;

  __cxa_guard_abort(qword_254A49400);
  if (*(char *)(v20 - 89) < 0)
    operator delete(*(void **)(v20 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_20E7FDAAC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  v7 = a1 + 16;
  v8 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24)) = v10;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 24));
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = v8[4];
  v13 = v8[5];
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v7 + *(_QWORD *)(v12 - 24)) = v13;
  v14 = v8[1];
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + *(_QWORD *)(v14 - 24)) = v8[6];
  *(_QWORD *)a1 = v5 + 24;
  *(_QWORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x24BEDB848];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 24) = v15 + 16;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a3;
  std::stringbuf::str();
  return a1;
}

void sub_20E7FDBCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 111) < 0)
    operator delete(*v3);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC4774](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E7FDC20(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x212BC4630](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_20E7FDD4C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x20E7FDD18);
  }
  __cxa_rethrow();
}

void sub_20E7FDD90(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void **sub_20E7FDDA4(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20E7FDE14(char *a1, char **a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  char *v7;
  char *v8;
  int64_t v9;
  char *v10;
  int v11;
  int64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;

  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (unint64_t)a2[1];
  v4 = a1[23];
  if (a1[23] < 0)
  {
    v5 = *((_QWORD *)a1 + 1);
    if (v3 <= v5)
      return 0;
  }
  else
  {
    v5 = a1[23];
    if (v3 <= v4)
      return 0;
  }
  if (!v5)
    return 1;
  if (v2 >= 0)
    v7 = (char *)a2;
  else
    v7 = *a2;
  if ((v4 & 0x80u) == 0)
    v8 = a1;
  else
    v8 = *(char **)a1;
  if ((v4 & 0x80u) == 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    if ((uint64_t)v3 >= v9)
    {
      v10 = &v7[v3];
      v11 = *v8;
      v12 = v3;
      v13 = v7;
      while (1)
      {
        v14 = v12 - v9;
        if (v14 == -1)
          break;
        result = (uint64_t)memchr(v13, v11, v14 + 1);
        if (!result)
          return result;
        v15 = result;
        result = memcmp((const void *)result, v8, v9);
        if (!(_DWORD)result)
        {
          if ((char *)v15 == v10 || (char *)v15 != v7)
            return result;
          goto LABEL_30;
        }
        result = 0;
        v13 = (char *)(v15 + 1);
        v12 = (int64_t)&v10[-v15 - 1];
        if (v12 < v9)
          return result;
      }
    }
    return 0;
  }
LABEL_30:
  if (v7[v9] != 46 || v3 <= v9 + 1)
    return 0;
  while (v7[v9 + 1] == 46)
  {
    result = 0;
    if (v3 - 1 == ++v9)
      return result;
  }
  return v9 != -2;
}

void sub_20E7FDFB0(uint64_t a1)
{
  std::mutex *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (std::mutex *)(*(_QWORD *)(a1 + 72) + 64);
  std::mutex::lock(v2);
  v3 = *(_QWORD **)(a1 + 72);
  v4 = (_QWORD *)v3[6];
  v3 += 6;
  sub_20E7FFD04((uint64_t)(v3 - 1), v4);
  *(v3 - 1) = v3;
  *v3 = 0;
  v3[1] = 0;
  std::mutex::unlock(v2);
}

void **sub_20E7FDFF8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20E7FE090(_QWORD *a1, int a2)
{
  _DWORD **v3;
  std::mutex *v5;
  uint64_t *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t i;
  void **v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  void **v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  void *__p[2];
  __int128 v49;
  __int128 v50;

  v3 = (_DWORD **)a1[6];
  if (v3)
  {
    **v3 = a2;
    return;
  }
  v5 = (std::mutex *)(a1[1] + 56);
  std::mutex::lock(v5);
  v6 = (uint64_t *)operator new();
  v7 = (std::__shared_weak_count_vtbl *)operator new();
  LODWORD(v7->~__shared_weak_count) = a2;
  *v6 = (uint64_t)v7;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9A94A0;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = v7;
  v6[1] = (uint64_t)v8;
  v9 = a1[6];
  a1[6] = v6;
  if (!v9)
  {
    v13 = *v6;
    goto LABEL_13;
  }
  v10 = *(std::__shared_weak_count **)(v9 + 8);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  MEMORY[0x212BC47D4](v9, 0x30C40EEE2E2AFLL);
  v13 = *(_QWORD *)a1[6];
  v8 = *(std::__shared_weak_count **)(a1[6] + 8);
  if (v8)
  {
LABEL_13:
    v16 = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    v14 = 0;
    v15 = (std::__shared_weak_count *)a1[8];
    a1[7] = v13;
    a1[8] = v8;
    if (!v15)
      goto LABEL_21;
    goto LABEL_17;
  }
  v14 = 1;
  v15 = (std::__shared_weak_count *)a1[8];
  a1[7] = v13;
  a1[8] = 0;
  if (!v15)
    goto LABEL_21;
LABEL_17:
  v19 = (unint64_t *)&v15->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_21:
  if ((v14 & 1) == 0)
  {
    v21 = (unint64_t *)&v8->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v23 = *(_QWORD **)(a1[9] + 16);
  *(_OWORD *)__p = 0u;
  v49 = 0u;
  v50 = 0u;
  v24 = 0;
  if (v23)
  {
    v25 = v23;
    do
    {
      ++v24;
      v25 = (_QWORD *)*v25;
    }
    while (v25);
  }
  sub_20E8010C4(__p, v23, v24);
  i = *((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v27 = (void **)__p[1];
    v28 = v50;
    while (1)
    {
      v29 = *(uint64_t *)((char *)v27 + ((v28 >> 6) & 0x3FFFFFFFFFFFFF8));
      v30 = v28 & 0x1FF;
      v31 = *(_QWORD **)(v29 + 8 * v30);
      if (!v31[6])
      {
        v33 = a1[7];
        v32 = a1[8];
        if (v32)
        {
          v34 = (unint64_t *)(v32 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v36 = (std::__shared_weak_count *)v31[8];
        v31[7] = v33;
        v31[8] = v32;
        if (!v36)
          goto LABEL_42;
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
          v39 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v29 + 8 * v30) + 72) + 16);
          for (i = *((_QWORD *)&v50 + 1); v39; v39 = (_QWORD *)*v39)
          {
LABEL_47:
            v40 = (char *)__p[1];
            if ((void *)v49 == __p[1])
              v41 = 0;
            else
              v41 = (((_QWORD)v49 - (unint64_t)__p[1]) << 6) - 1;
            v42 = v50 + i;
            if (v41 == v42)
            {
              sub_20E801F5C((uint64_t)__p);
              v40 = (char *)__p[1];
              v42 = *((_QWORD *)&v50 + 1) + v50;
            }
            *(_QWORD *)(*(_QWORD *)&v40[(v42 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v42 & 0x1FF)) = v39[2];
            i = ++*((_QWORD *)&v50 + 1);
          }
        }
        else
        {
LABEL_42:
          v39 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v29 + 8 * v30) + 72) + 16);
          i = *((_QWORD *)&v50 + 1);
          if (v39)
            goto LABEL_47;
        }
      }
      v27 = (void **)__p[1];
      --i;
      v28 = v50 + 1;
      *(_QWORD *)&v50 = v28;
      *((_QWORD *)&v50 + 1) = i;
      if (v28 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        v27 = (void **)((char *)__p[1] + 8);
        v28 = v50 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v50 = v50 - 512;
        i = *((_QWORD *)&v50 + 1);
      }
      if (!i)
        goto LABEL_53;
    }
  }
  v27 = (void **)__p[1];
LABEL_53:
  v43 = (void **)v49;
  *((_QWORD *)&v50 + 1) = 0;
  v44 = v49 - (_QWORD)v27;
  if ((_QWORD)v49 - (_QWORD)v27 >= 0x11uLL)
  {
    do
    {
      operator delete(*v27);
      v43 = (void **)v49;
      v27 = (void **)((char *)__p[1] + 8);
      __p[1] = v27;
      v44 = v49 - (_QWORD)v27;
    }
    while ((_QWORD)v49 - (_QWORD)v27 > 0x10uLL);
  }
  v45 = v44 >> 3;
  if (v45 == 1)
  {
    v46 = 256;
  }
  else
  {
    if (v45 != 2)
      goto LABEL_60;
    v46 = 512;
  }
  *(_QWORD *)&v50 = v46;
LABEL_60:
  if (v27 != v43)
  {
    do
    {
      v47 = *v27++;
      operator delete(v47);
    }
    while (v27 != v43);
    if ((void *)v49 != __p[1])
      *(_QWORD *)&v49 = v49 + (((unint64_t)__p[1] - v49 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  std::mutex::unlock(v5);
}

void sub_20E7FE4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;
  void *v13;

  if (a11 == a10)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
    {
LABEL_3:
      std::mutex::unlock(v11);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v13);
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void sub_20E7FE530(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x212BC47D4](v3, 0x1000C4052888210);
  MEMORY[0x212BC47D4](v2, 0x30C40EEE2E2AFLL);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E7FE57C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E7FE590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_20E801E98((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7FE5AC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v3 = result;
  do
  {
    v4 = *(_QWORD *)(v3 + 72);
    v5 = *(_QWORD **)(v4 + 40);
    v6 = (_QWORD *)(v4 + 48);
    if (v5 != (_QWORD *)(v4 + 48))
    {
      do
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v5[5] + 16))(v5[5], a2);
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v6);
    }
    v3 = *(_QWORD *)(v3 + 40);
  }
  while (v3);
  return result;
}

_QWORD **sub_20E7FE648@<X0>(_QWORD **result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = **result;
  return result;
}

void sub_20E7FE658(_QWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;

  v3 = *a1;
  sub_20E7FC76C(&v3, a2, a3);
}

void sub_20E7FE680(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *__p;
  char *v23;
  _QWORD v24[2];
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_DWORD *)(v2 + 48) = 1065353216;
  *(_QWORD *)(v2 + 56) = 850045863;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 112) = 0;
  v3 = operator new();
  sub_20E7FEA00();
  *(_QWORD *)v3 = &off_24C9A93F8;
  v4 = (_QWORD *)operator new();
  *v4 = off_24C9A9378;
  v5 = v4 + 1;
  if (byte_254A496DF < 0)
  {
    sub_20E7A8C78(v5, (void *)xmmword_254A496C8, *((unint64_t *)&xmmword_254A496C8 + 1));
  }
  else
  {
    *(_OWORD *)v5 = xmmword_254A496C8;
    v4[3] = unk_254A496D8;
  }
  *(_QWORD *)(v3 + 8) = v4;
  *(_DWORD *)(v3 + 16) = 63;
  v24[1] = v3;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9A9540;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  v25 = v6;
  v8 = operator new();
  v24[0] = v2;
  v26 = v3;
  v27 = v6;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  sub_20E7FEAF4(&__p, &v26, 1uLL);
  sub_20E7FC05C(v8, v24, (uint64_t **)&__p);
  v10 = (char *)__p;
  if (__p)
  {
    v11 = v23;
    v12 = __p;
    if (v23 != __p)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v23 = v10;
    operator delete(v12);
  }
  v16 = v27;
  if (v27)
  {
    v17 = (unint64_t *)&v27->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)v2 = v8;
  sub_20E7FB954((uint64_t *)(v2 + 8), v2);
  *a1 = v2;
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20E7FE944(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC47D4](v1, 0x1093C402D7449D9);
  MEMORY[0x212BC47D4](v2, 0x10A1C40DF6760FDLL);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E7FEA00()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)qword_254A49428);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(qword_254A49428))
    return &qword_254A496C0;
  sub_20E78570C(__p, "%d [%t] %p %c: %m%n");
  sub_20E7FEC9C(&qword_254A496C0, (__int128 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))sub_20E7FED44, &qword_254A496C0, &dword_20E77A000);
  __cxa_guard_release(qword_254A49428);
  return &qword_254A496C0;
}

void sub_20E7FEAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_254A49428);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_254A49428);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E7FEAF4(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_20E78D874();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_20E7FEB98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_20E80D068((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

__int128 *sub_20E7FEBBC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)qword_254A49418);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(qword_254A49418))
    return &xmmword_254A49538;
  sub_20E78570C(&xmmword_254A49538, "ILayout");
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_254A49538, &dword_20E77A000);
  __cxa_guard_release(qword_254A49418);
  return &xmmword_254A49538;
}

void sub_20E7FEC48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_254A49418);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E7FEC60@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 48))(&v4);
  *a2 = v4;
  return result;
}

_QWORD *sub_20E7FEC9C(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;
  unsigned __int8 v5;
  unsigned __int8 v7;

  *a1 = off_24C9A9378;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E7A8C78(v3, *(void **)a2, *((_QWORD *)a2 + 1));
    v7 = atomic_load((unsigned __int8 *)&qword_254A49450);
    if ((v7 & 1) != 0)
      return a1;
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
    v5 = atomic_load((unsigned __int8 *)&qword_254A49450);
    if ((v5 & 1) != 0)
      return a1;
  }
  if (!__cxa_guard_acquire(&qword_254A49450))
    return a1;
  qword_254A49448 = std::chrono::steady_clock::now().__d_.__rep_;
  __cxa_guard_release(&qword_254A49450);
  return a1;
}

uint64_t sub_20E7FED44(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_24C9A9378;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20E7FED90(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9A9378;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC47D4);
}

__int128 *sub_20E7FEDDC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A49438);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A49438))
    return &xmmword_254A49550;
  sub_20E78570C(&xmmword_254A49550, "PatternLayout");
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_254A49550, &dword_20E77A000);
  __cxa_guard_release(&qword_254A49438);
  return &xmmword_254A49550;
}

void sub_20E7FEE68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49438);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7FEE80(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  tm *v5;
  size_t v6;
  size_t v7;
  size_t v8;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  void **__dst;
  size_t v18;
  int64_t v19;
  tm __t;
  time_t v21;
  char __s[24];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *a2 / 1000 % 1000;
  if (v3 >= 0)
    v4 = *a2 / 1000 % 1000;
  else
    v4 = v3 + 1000;
  *(_QWORD *)&__t.tm_sec = *a2 - 1000 * v4;
  v21 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&__t);
  v5 = localtime_r(&v21, &__t);
  strcpy(__s, "yyyy.mm.dd.HH-MM.SS.fff");
  v6 = strlen(__s);
  strftime(__s, v6, "%Y-%m-%d %H:%M:%S", v5);
  v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E7857BC();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v18 = v8;
    v19 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v19) = v7;
  p_dst = (void **)&__dst;
  if (v7)
LABEL_11:
    memcpy(p_dst, __s, v8);
  v12 = (_QWORD *)(a1 + 16);
  *((_BYTE *)p_dst + v8) = 0;
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 >= 0)
    v14 = HIBYTE(v19);
  else
    v14 = v18;
  v15 = sub_20E78F4CC(v12, (uint64_t)v13, v14);
  sub_20E78F4CC(v15, (uint64_t)",", 1);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__dst);
    if (v4 <= 9)
      goto LABEL_20;
  }
  else if (v4 <= 9)
  {
LABEL_20:
    sub_20E78F4CC(v12, (uint64_t)"00", 2);
    return std::ostream::operator<<();
  }
  if (v4 <= 0x63)
    sub_20E78F4CC(v12, (uint64_t)"0", 1);
  return std::ostream::operator<<();
}

void sub_20E7FF098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__int128 *sub_20E7FF0C0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A49438);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A49438))
    return &xmmword_254A49550;
  byte_254A49567 = 13;
  strcpy((char *)&xmmword_254A49550, "PatternLayout");
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_254A49550, &dword_20E77A000);
  __cxa_guard_release(&qword_254A49438);
  return &xmmword_254A49550;
}

void sub_20E7FF15C(int a1, uint64_t *a2)
{
  unsigned __int8 v3;
  void *v4[2];
  uint64_t v5;
  __int128 __p;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_254A49440);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A49440))
  {
    sub_20E7FEDDC();
    if (byte_254A49567 < 0)
    {
      sub_20E7A8C78(v4, (void *)xmmword_254A49550, *((unint64_t *)&xmmword_254A49550 + 1));
    }
    else
    {
      *(_OWORD *)v4 = xmmword_254A49550;
      v5 = unk_254A49560;
    }
    sub_20E7FEBBC();
    if (byte_254A4954F < 0)
    {
      sub_20E7A8C78(&__p, (void *)xmmword_254A49538, *((unint64_t *)&xmmword_254A49538 + 1));
    }
    else
    {
      __p = xmmword_254A49538;
      v7 = unk_254A49548;
    }
    sub_20E8025C8(&qword_254A49568, (uint64_t)v4, 2uLL);
    if (SHIBYTE(v7) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v5) < 0)
      operator delete(v4[0]);
    __cxa_atexit((void (*)(void *))sub_20E7FDDA4, &qword_254A49568, &dword_20E77A000);
    __cxa_guard_release(&qword_254A49440);
  }
  if (a2 != &qword_254A49568)
    sub_20E802784((uint64_t)a2, (std::string *)qword_254A49568, *(std::string **)algn_254A49570, 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)algn_254A49570 - qword_254A49568) >> 3));
}

void sub_20E7FF2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      __cxa_guard_abort(&qword_254A49440);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  __cxa_guard_abort(&qword_254A49440);
  _Unwind_Resume(a1);
}

void sub_20E7FF340(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49440);
  _Unwind_Resume(a1);
}

_BYTE *sub_20E7FF35C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _BYTE *result;

  v4 = (_QWORD *)operator new();
  *v4 = off_24C9A9378;
  result = v4 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    result = sub_20E7A8C78(result, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a1 + 8);
    v4[3] = *(_QWORD *)(a1 + 24);
  }
  *a2 = v4;
  return result;
}

void sub_20E7FF3E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC47D4](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7FF40C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t i;
  char *v8;
  size_t v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  void **v18;
  uint64_t v19;
  unsigned __int8 v20;
  char *v21;
  uint64_t v22;
  _QWORD v24[2];
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  void *v28[2];
  unsigned __int8 v29;

  sub_20E7FBF24((uint64_t)v24);
  if (*(char *)(a1 + 31) < 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 < 2)
      goto LABEL_50;
    goto LABEL_5;
  }
  v4 = *(unsigned __int8 *)(a1 + 31);
  if (v4 >= 2)
  {
LABEL_5:
    v5 = 0;
    v6 = (_QWORD *)(a1 + 8);
    for (i = 1; i < v4; i += 2)
    {
      if (*(char *)(a1 + 31) < 0)
      {
        v10 = *(char *)(a1 + 31);
        if (*(_BYTE *)(*v6 + v5) != 37)
        {
LABEL_21:
          v15 = a1 + 8;
          if (v10 < 0)
            v15 = *v6;
          LOBYTE(v28[0]) = *(_BYTE *)(v15 + v5);
          sub_20E78F4CC(v25, (uint64_t)v28, 1);
          i = v5;
          goto LABEL_8;
        }
      }
      else
      {
        v10 = *(char *)(a1 + 31);
        if (*((_BYTE *)v6 + v5) != 37)
          goto LABEL_21;
      }
      v11 = a1 + 8;
      if (v10 < 0)
        v11 = *v6;
      v12 = (_BYTE *)(v11 + i);
      if (v4 <= i + 1)
        v13 = i + 1;
      else
        v13 = v4;
      while (2)
      {
        switch(*v12)
        {
          case '%':
            v16 = "%";
            goto LABEL_39;
          case 'F':
            v8 = *(char **)(a2 + 32);
            v17 = strrchr(v8, 47);
            if (v17)
            {
              v8 = v17 + 1;
            }
            else
            {
              v21 = strrchr(v8, 92);
              if (v21)
                v8 = v21 + 1;
            }
            goto LABEL_7;
          case 'L':
            std::ostream::operator<<();
            break;
          case 'c':
            v8 = *(char **)a2;
            goto LABEL_7;
          case 'd':
            sub_20E7FEE80((uint64_t)v24, (_QWORD *)(a2 + 16));
            break;
          case 'f':
            v8 = *(char **)(a2 + 48);
            goto LABEL_7;
          case 'm':
            std::stringbuf::str();
            if ((v29 & 0x80u) == 0)
              v18 = v28;
            else
              v18 = (void **)v28[0];
            if ((v29 & 0x80u) == 0)
              v19 = v29;
            else
              v19 = (uint64_t)v28[1];
            sub_20E78F4CC(v25, (uint64_t)v18, v19);
            if ((char)v29 < 0)
              operator delete(v28[0]);
            break;
          case 'n':
            v16 = "\n";
LABEL_39:
            sub_20E78F4CC(v25, (uint64_t)v16, 1);
            break;
          case 'p':
            v8 = off_24C9A93B0[*(unsigned int *)(a2 + 24)];
LABEL_7:
            v9 = strlen(v8);
            sub_20E78F4CC(v25, (uint64_t)v8, v9);
            break;
          case 'r':
            v20 = atomic_load((unsigned __int8 *)&qword_254A49450);
            if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254A49450))
            {
              qword_254A49448 = std::chrono::steady_clock::now().__d_.__rep_;
              __cxa_guard_release(&qword_254A49450);
            }
            std::ostream::operator<<();
            break;
          case 't':
            pthread_self();
            std::ostream::operator<<();
            break;
          default:
            v14 = a1 + 8;
            if (*(char *)(a1 + 31) < 0)
              v14 = *v6;
            v12 = (_BYTE *)(v14 + i++ + 1);
            if (i < v4)
              continue;
            i = v13;
            break;
        }
        break;
      }
LABEL_8:
      v5 = i + 1;
    }
  }
LABEL_50:
  std::stringbuf::str();
  v24[0] = *MEMORY[0x24BEDB7F0];
  v22 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v25[0] = v22;
  v25[1] = MEMORY[0x24BEDB848] + 16;
  if (v26 < 0)
    operator delete((void *)v25[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC4774](&v27);
}

void sub_20E7FF7B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 89) < 0)
  {
    operator delete(*(void **)(v2 - 112));
    sub_20E78F444((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_20E78F444((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E7FF7F4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9A93F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20E7FF834(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9A93F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC47D4);
}

void sub_20E7FF884(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  int v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  void *p_p;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;

  if (((1 << (*(_DWORD *)(a2 + 24) - 1)) | *(_DWORD *)(a1 + 16)) == *(_DWORD *)(a1 + 16))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A49460);
    if ((v3 & 1) == 0)
    {
      v13 = a1;
      v14 = __cxa_guard_acquire(&qword_254A49460);
      a1 = v13;
      if (v14)
      {
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254A49278, &dword_20E77A000);
        __cxa_guard_release(&qword_254A49460);
        a1 = v13;
      }
    }
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(&__p, *(_QWORD *)(a1 + 8), a2);
    std::mutex::lock(&stru_254A49278);
    v4 = *(_DWORD *)(a2 + 24);
    if ((v4 - 1) < 3)
    {
      v9 = atomic_load((unsigned __int8 *)qword_254A49468);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(qword_254A49468))
      {
        qword_254A49510 = MEMORY[0x24BEDB318];
        qword_254A49518 = MEMORY[0x24BEDB310];
        __cxa_guard_release(qword_254A49468);
      }
      if ((v17 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v17 & 0x80u) == 0)
        v11 = v17;
      else
        v11 = v16;
      sub_20E78F4CC((_QWORD *)qword_254A49510, (uint64_t)p_p, v11);
      v12 = atomic_load((unsigned __int8 *)qword_254A49468);
      if ((v12 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      if ((v4 - 4) >= 3)
        goto LABEL_23;
      v5 = atomic_load((unsigned __int8 *)qword_254A49468);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(qword_254A49468))
      {
        qword_254A49510 = MEMORY[0x24BEDB318];
        qword_254A49518 = MEMORY[0x24BEDB310];
        __cxa_guard_release(qword_254A49468);
      }
      if ((v17 & 0x80u) == 0)
        v6 = &__p;
      else
        v6 = __p;
      if ((v17 & 0x80u) == 0)
        v7 = v17;
      else
        v7 = v16;
      sub_20E78F4CC((_QWORD *)qword_254A49518, (uint64_t)v6, v7);
      v8 = atomic_load((unsigned __int8 *)qword_254A49468);
      if ((v8 & 1) != 0)
      {
LABEL_22:
        std::ostream::flush();
LABEL_23:
        std::mutex::unlock(&stru_254A49278);
        if ((char)v17 < 0)
          operator delete(__p);
        return;
      }
    }
    if (__cxa_guard_acquire(qword_254A49468))
    {
      qword_254A49510 = MEMORY[0x24BEDB318];
      qword_254A49518 = MEMORY[0x24BEDB310];
      __cxa_guard_release(qword_254A49468);
    }
    goto LABEL_22;
  }
}

void sub_20E7FFAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20E7FFAF0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A49458);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A49458))
  {
    byte_254A49597 = 15;
    strcpy((char *)&qword_254A49580, "ConsoleAppender");
    __cxa_atexit(MEMORY[0x24BEDACF0], &qword_254A49580, &dword_20E77A000);
    __cxa_guard_release(&qword_254A49458);
  }
  if (byte_254A49597 >= 0)
    return &qword_254A49580;
  else
    return (uint64_t *)qword_254A49580;
}

void sub_20E7FFB90(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E7FFBB4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x212BC47D4);
  return result;
}

uint64_t sub_20E7FFBD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog8LogLevelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E7FFC48(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E7FFC6C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E7FFC84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000020E8106D0)
    return a1 + 24;
  if (((v3 & 0x800000020E8106D0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000020E8106D0))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020E8106D0 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_20E7FFD04(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_20E7FFD04(a1, *a2);
    sub_20E7FFD04(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[6];
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a2);
    }
    else
    {
LABEL_6:
      operator delete(a2);
    }
  }
}

uint64_t **sub_20E7FFD8C(uint64_t **a1, __int128 *a2)
{
  _QWORD *v4;
  void *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v4 = operator new(0x38uLL);
  v5 = v4;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v8 = a1 + 1;
  v9 = a1[1];
  *((_OWORD *)v4 + 2) = v6;
  v4[6] = v7;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v9;
        v11 = v9[4];
        if ((unint64_t)v6 >= v11)
          break;
        v9 = (uint64_t *)*v9;
        v8 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (v11 >= (unint64_t)v6)
        break;
      v9 = (uint64_t *)v9[1];
      if (!v9)
      {
        v8 = v10 + 1;
        goto LABEL_9;
      }
    }
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(v5);
    return v10;
  }
  else
  {
    v10 = a1 + 1;
LABEL_9:
    *v4 = 0;
    v4[1] = 0;
    v4[2] = v10;
    *v8 = v4;
    v12 = (uint64_t *)**a1;
    v13 = v4;
    if (v12)
    {
      *a1 = v12;
      v13 = *v8;
    }
    sub_20E793910(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t **)v5;
  }
}

uint64_t *sub_20E7FFEB8(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E7A8680((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

char *sub_20E8000E4(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E78D874();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_20E78D888();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E7A8C78(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_20E8002A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8002B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8002B8(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20E80031C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_20E7A8ACC(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_20E800660(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E800674@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_20E8007A8(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E7A8ACC(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20E8008E8(a1, i + 2, i + 2);
  return a1;
}

void sub_20E8008C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E7EA590(v1);
  _Unwind_Resume(a1);
}

void sub_20E8008D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E7EA590(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8008E8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_20E7A8ACC(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_20E800C2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20E800C40(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_20E7A8680((uint64_t)v44, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x30uLL);
  v26 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v27 = *((_QWORD *)a3 + 2);
  v28 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v44[0] = v14;
  v44[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = v26;
  *((_QWORD *)v14 + 4) = v27;
  *((_QWORD *)v14 + 5) = v28;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v11 && (float)(v30 * (float)v11) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v14 = *v32;
LABEL_89:
      *v32 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v11 >= 3)
      v33 = (v11 & (v11 - 1)) != 0;
    v34 = v33 | (2 * v11);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        sub_20E7A8ACC(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v41 & v10;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v10));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v31 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v42 >= v11)
        v42 %= v11;
    }
    else
    {
      v42 &= v11 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20E801048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E801060((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E801060(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_20E8010C4(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) << 6) - 1;
  v9 = a1[5];
  v10 = v9 + a1[4];
  v11 = v8 - v10;
  if (a3 > v11)
  {
    sub_20E80121C((uint64_t)a1, a3 - v11);
    v9 = a1[5];
    v6 = a1[1];
    v7 = a1[2];
    v10 = a1[4] + v9;
  }
  v12 = (_QWORD *)(v6 + 8 * (v10 >> 9));
  if (v7 == v6)
  {
    v13 = 0;
    if (a3)
      goto LABEL_8;
LABEL_11:
    v16 = v13;
    v15 = v12;
    goto LABEL_23;
  }
  v13 = *v12 + 8 * (v10 & 0x1FF);
  if (!a3)
    goto LABEL_11;
LABEL_8:
  v14 = a3 + ((v13 - *v12) >> 3);
  if (v14 < 1)
  {
    v17 = 511 - v14;
    LOWORD(v14) = ~(511 - v14);
    v15 = &v12[-(v17 >> 9)];
  }
  else
  {
    v15 = &v12[(unint64_t)v14 >> 9];
  }
  v16 = *v15 + 8 * (v14 & 0x1FF);
LABEL_23:
  while (v13 != v16)
  {
    v18 = v16;
    if (v12 != v15)
      v18 = *v12 + 4096;
    if (v13 == v18)
    {
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    else
    {
      v19 = (_QWORD *)v13;
      do
      {
        *v19++ = a2[2];
        a2 = (_QWORD *)*a2;
      }
      while (v19 != (_QWORD *)v18);
      v9 = a1[5] + ((v18 - v13) >> 3);
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    v20 = v12[1];
    ++v12;
    v13 = v20;
  }
}

void sub_20E80121C(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    *(_QWORD *)(a1 + 32) = v7 - (v8 << 9);
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0x1000uLL);
        sub_20E801B74((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0x1000uLL);
        sub_20E801D00((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 511;
        else
          v116 = 512;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - (v6 << 9);
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= v8 << 9;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      sub_20E78D888();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = v8 << 9;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0x1000uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      sub_20E78D888();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            sub_20E78D888();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            sub_20E78D888();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) -= v144;
  if (v71)
    operator delete(v71);
}

void sub_20E801B08(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20E801B54()
{
  __cxa_end_catch();
  JUMPOUT(0x20E801B5CLL);
}

void sub_20E801B74(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    sub_20E78D888();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_20E801D00(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        sub_20E78D888();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

uint64_t sub_20E801E98(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20E801F5C(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_20E78D888();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_20E801B74((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_20E801D00((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_20E78D888();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_20E78D888();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_20E8024B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_20E8024D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E8024E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E802500(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20E80251C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E802540(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20E802558(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4tlog15ConsoleAppenderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_20E8025C8(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E78D874();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_20E7A8C78(v9, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_20E8026A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20E8026F0(&a9);
  _Unwind_Resume(a1);
}

void sub_20E8026B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20E8026F0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20E8026F0(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_20E802784(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  const std::string *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  __int128 v17;
  std::string *v18;
  char *v19;
  std::string *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  const std::string *v28;

  v6 = __str;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) >= __sz)
  {
    v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        v20 = *(std::string **)a1;
      }
      else
      {
        v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v20;
        }
        while (v6 != a3);
        v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        --v12;
      }
      *(_QWORD *)(a1 + 8) = v20;
    }
    else
    {
      v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v14 -= 24;
        }
        while (v14);
        v9 = *(std::string **)(a1 + 8);
      }
      v15 = v9;
      if (v13 != a3)
      {
        v16 = 0;
        do
        {
          v18 = &v9[v16];
          v19 = (char *)&v13[v16];
          if (SHIBYTE(v13[v16].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_20E7A8C78(v18, *(void **)v19, *((_QWORD *)v19 + 1));
          }
          else
          {
            v17 = *(_OWORD *)v19;
            v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v17;
          }
          ++v16;
        }
        while (&v13[v16] != a3);
        v15 = &v9[v16];
      }
      *(_QWORD *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(std::string **)(a1 + 8);
      v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          --v10;
        }
        while (v10 != v9);
        v11 = *(std::string **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_48;
    v21 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v22 = 2 * v21;
    if (2 * v21 <= __sz)
      v22 = __sz;
    v23 = v21 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v22;
    if (v23 > 0xAAAAAAAAAAAAAAALL)
LABEL_48:
      sub_20E78D874();
    v24 = 24 * v23;
    v25 = (char *)operator new(24 * v23);
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v25;
    *(_QWORD *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      v26 = 0;
      do
      {
        v27 = &v25[v26 * 24];
        v28 = &v6[v26];
        if (SHIBYTE(v6[v26].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20E7A8C78(v27, v28->__r_.__value_.__l.__data_, v28->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v27 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          *((_QWORD *)v27 + 2) = *((_QWORD *)&v28->__r_.__value_.__l + 2);
        }
        ++v26;
      }
      while (&v6[v26] != a3);
      v25 += v26 * 24;
    }
    *(_QWORD *)(a1 + 8) = v25;
  }
}

void sub_20E802A8C(int *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9A9590;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20E802B64(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E802B7C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E802B94(unsigned int *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9A9590;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20E802C6C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E802C84(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E802C98(uint64_t a1@<X0>, CFStringRef *a2@<X8>)
{
  int v3;
  const UInt8 *v4;
  CFIndex v5;
  CFStringRef v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (const UInt8 *)a1;
  else
    v4 = *(const UInt8 **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v4, v5, 0x8000100u, 0);
  v7 = (std::__shared_weak_count *)operator new();
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9A95E0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = (CFStringRef)v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_20E802D78(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E802D90(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E802DA8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

void sub_20E802DCC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_20E802DEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E802E60(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

void sub_20E802E84(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_20E802EA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20E802F14(CFTypeRef *a1)
{
  CFTypeID TypeID;
  _BOOL4 v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  uint64_t result;
  CFIndex v8;
  CFIndex v9;
  char v10;
  CFTypeID v11;
  CFTypeRef ValueAtIndex;

  if (!*a1)
    return 0;
  TypeID = j__CFArrayGetTypeID();
  v3 = sub_20E803484(a1, TypeID);
  v4 = (const __CFArray *)*a1;
  if (!v3)
  {
    if (v4)
    {
      v11 = j__CFDictionaryGetTypeID();
      if (sub_20E803484(a1, v11))
      {
        ValueAtIndex = *a1;
        return sub_20E803038((CFDictionaryRef *)&ValueAtIndex);
      }
    }
    return 1;
  }
  if (!v4)
    return 0;
  Count = CFArrayGetCount((CFArrayRef)*a1);
  if (Count < 1)
    return 1;
  v6 = Count;
  ValueAtIndex = CFArrayGetValueAtIndex(v4, 0);
  result = sub_20E802F14(&ValueAtIndex);
  if ((_DWORD)result)
  {
    v8 = 1;
    do
    {
      v9 = v8;
      if (v6 == v8)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(v4, v8);
      v10 = sub_20E802F14(&ValueAtIndex);
      v8 = v9 + 1;
    }
    while ((v10 & 1) != 0);
    return v9 >= v6;
  }
  return result;
}

uint64_t sub_20E803038(CFDictionaryRef *a1)
{
  const __CFDictionary *v2;
  unint64_t Count;
  size_t v4;
  CFTypeRef *v5;
  char *v6;
  CFTypeRef *v7;
  char *v8;
  uint64_t v9;
  CFTypeRef *v10;
  CFTypeID TypeID;
  char *v12;
  uint64_t v13;
  char v14;

  v2 = *a1;
  if (!v2)
    return 0;
  Count = CFDictionaryGetCount(v2);
  if (Count)
  {
    if (Count >> 61)
      sub_20E78D874();
    v4 = 8 * Count;
    v5 = (CFTypeRef *)operator new(8 * Count);
    bzero(v5, v4);
    v6 = (char *)operator new(v4);
    v7 = &v5[v4 / 8];
    bzero(v6, v4);
    v8 = &v6[v4];
  }
  else
  {
    v7 = 0;
    v5 = 0;
    v6 = 0;
    v8 = 0;
  }
  CFDictionaryGetKeysAndValues(*a1, v5, (const void **)v6);
  if (v5 != v7)
  {
    v10 = v5;
    while (1)
    {
      if (!*v10)
      {
        v9 = 0;
        if (v6)
          goto LABEL_19;
        goto LABEL_20;
      }
      TypeID = j__CFStringGetTypeID();
      if (!sub_20E803484(v10, TypeID))
        break;
      if (++v10 == v7)
        goto LABEL_12;
    }
    v9 = 0;
    if (v6)
      goto LABEL_19;
    goto LABEL_20;
  }
LABEL_12:
  if (v6 != v8)
  {
    v12 = v6;
    do
    {
      v13 = sub_20E802F14(v12);
      v9 = v13;
      v12 += 8;
      if (v12 == v8)
        v14 = 0;
      else
        v14 = v13;
    }
    while ((v14 & 1) != 0);
    if (!v6)
      goto LABEL_20;
    goto LABEL_19;
  }
  v9 = 1;
  if (v6)
LABEL_19:
    operator delete(v6);
LABEL_20:
  if (v5)
    operator delete(v5);
  return v9;
}

void sub_20E803194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20E8031DC@<X0>(std::__shared_weak_count_vtbl **a1@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;

  Mutable = (std::__shared_weak_count_vtbl *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  return sub_20E803228(a1, Mutable, 0);
}

std::__shared_weak_count_vtbl **sub_20E803228(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_20E803334(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9A9630;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20E803304(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E80331C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20E803334(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9A9630;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20E803394(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E8033AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E8033C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

void sub_20E8033E8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_20E803408(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

BOOL sub_20E803484(CFTypeRef *a1, uint64_t a2)
{
  return CFGetTypeID(*a1) == a2;
}

_QWORD *sub_20E8034B0(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

_OWORD *sub_20E8034B8(_OWORD *a1)
{
  char **v3;
  char *v4[2];
  __int128 v5;

  v4[0] = 0;
  v4[1] = 0;
  v3 = v4;
  sub_20E803A9C(&v3, (std::__shared_weak_count_vtbl **)&v5);
  *a1 = v5;
  sub_20E803684((uint64_t)&v3, v4[0]);
  return a1;
}

void sub_20E803510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20E803684((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20E803528(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2, int a3)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;

  sub_20E803228(&v18, a2, a3);
  v4 = v18;
  v5 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *a1 = v4;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (std::__shared_weak_count *)a1[1];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a1 = v18;
    a1[1] = 0;
  }
  v14 = v19;
  if (!v19)
    return a1;
  v15 = (unint64_t *)&v19->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_20E80365C(CFMutableDictionaryRef *a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(*a1, a2, a3);
}

BOOL sub_20E803664(const __CFDictionary *a1, const void *a2)
{
  return CFDictionaryContainsKey(a1, a2) != 0;
}

void sub_20E803684(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_20E803684(a1, *(_QWORD *)a2);
    sub_20E803684(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_20E8036E4(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFMutableDictionaryRef v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *value;
  std::__shared_weak_count *v40;
  void *key;
  std::__shared_weak_count *v42;
  CFMutableDictionaryRef theDict[2];

  sub_20E8031DC((std::__shared_weak_count_vtbl **)theDict);
  v5 = theDict[0];
  v4 = (std::__shared_weak_count *)theDict[1];
  if (!theDict[1])
    goto LABEL_6;
  v6 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 - 1, v6));
  if (v8)
  {
LABEL_6:
    if (v5)
      goto LABEL_7;
LABEL_41:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v5)
    goto LABEL_41;
LABEL_7:
  v11 = (_QWORD *)*a1;
  v9 = a1 + 1;
  v10 = v11;
  if (v11 == v9)
  {
LABEL_8:
    *(_OWORD *)a2 = *(_OWORD *)theDict;
    theDict[0] = 0;
    theDict[1] = 0;
    goto LABEL_53;
  }
  while (1)
  {
    sub_20E802C98((uint64_t)(v10 + 4), (CFStringRef *)&key);
    sub_20E802A88(&value, v10 + 7);
    v13 = key;
    v12 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v17 = v40;
    if (!v13)
      break;
    v18 = value;
    if (v40)
    {
      v19 = (unint64_t *)&v40->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (!v18)
    {
      v17 = v40;
      break;
    }
    j__CFDictionarySetValue(theDict[0], key, value);
    v22 = v40;
    if (!v40)
      goto LABEL_28;
    v23 = (unint64_t *)&v40->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      v25 = v42;
      if (v42)
      {
LABEL_29:
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
LABEL_28:
      v25 = v42;
      if (v42)
        goto LABEL_29;
    }
    v28 = (_QWORD *)v10[1];
    if (v28)
    {
      do
      {
        v29 = v28;
        v28 = (_QWORD *)*v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = (_QWORD *)v10[2];
        v30 = *v29 == (_QWORD)v10;
        v10 = v29;
      }
      while (!v30);
    }
    v10 = v29;
    if (v29 == v9)
      goto LABEL_8;
  }
  *a2 = 0;
  a2[1] = 0;
  if (v17)
  {
    v31 = (unint64_t *)&v17->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v33 = v42;
  if (v42)
  {
    v34 = (unint64_t *)&v42->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
LABEL_53:
  v36 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v37 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_20E8039D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v17 = (unint64_t *)&a12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v19 = (unint64_t *)&a14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20E803A9C(_QWORD *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::logic_error *exception;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  sub_20E8036E4(a1, &v12);
  v4 = v12;
  v3 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given map is not compatible with this dictionary type");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9A8150, MEMORY[0x24BEDAB88]);
  }
  sub_20E803528(a2, v12, 1);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20E803BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20E7858BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E803BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E7858BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E803BF4(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  sub_20E7FBF24((uint64_t)v17);
  sub_20E78F4CC(v18, (uint64_t)"Assert: ", 8);
  v7 = strlen(a1);
  v8 = sub_20E78F4CC(v18, (uint64_t)a1, v7);
  sub_20E78F4CC(v8, (uint64_t)":", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = sub_20E78F4CC(v9, (uint64_t)" : ", 3);
  v11 = strlen(a3);
  v12 = sub_20E78F4CC(v10, (uint64_t)a3, v11);
  sub_20E78F4CC(v12, (uint64_t)"\n", 1);
  std::stringbuf::str();
  v17[0] = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v18[0] = v13;
  v18[1] = MEMORY[0x24BEDB848] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC4774](&v20);
  if (v16 >= 0)
    v14 = &v15;
  else
    v14 = v15;
  a4(v14);
  if (v16 < 0)
    operator delete(v15);
}

void sub_20E803D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E803DA4(char *__src)
{
  unsigned __int8 v2;
  NSObject *v3;
  int v5;
  char *v6;
  char __dst[1024];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  strncpy(__dst, __src, 0x400uLL);
  qword_254A492C0 = (uint64_t)__dst;
  v2 = atomic_load((unsigned __int8 *)&qword_254A498C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A498C0))
  {
    qword_254A498B8 = (uint64_t)os_log_create("CVHWA", (const char *)&unk_20E81BEF2);
    __cxa_guard_release(&qword_254A498C0);
  }
  v3 = qword_254A498B8;
  if (os_log_type_enabled((os_log_t)qword_254A498B8, OS_LOG_TYPE_FAULT))
  {
    v5 = 136446210;
    v6 = __src;
    _os_log_impl(&dword_20E77A000, v3, OS_LOG_TYPE_FAULT, "%{public}s", (uint8_t *)&v5, 0xCu);
  }
  return fputs(__src, (FILE *)*MEMORY[0x24BDAC8D8]);
}

uint64_t sub_20E803EC4(uint64_t a1)
{
  uint64_t FigBaseObject;
  void (*v3)(uint64_t);
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (**(_QWORD **)(a1 + 32))
  {
    FigBaseObject = FigCaptureDeviceGetFigBaseObject();
    if (FigBaseObject)
    {
      v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v3)
        v3(FigBaseObject);
    }
    CFRelease(**(CFTypeRef **)(a1 + 32));
    **(_QWORD **)(a1 + 32) = 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  if (!CMNotificationCenterRemoveListener()
    || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (!v4)
      goto LABEL_10;
    goto LABEL_9;
  }
  sub_20E80D0F8();
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
LABEL_9:
    MEMORY[0x212BC47D4](v4, 0x1020C403A5D3213);
LABEL_10:
  v5 = *(_QWORD **)(a1 + 24);
  if (v5 == (_QWORD *)a1)
  {
    v6 = 4;
    v5 = (_QWORD *)a1;
    goto LABEL_14;
  }
  if (v5)
  {
    v6 = 5;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_20E803FCC(int a1, uint64_t a2, CFTypeRef cf2)
{
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  if (CFEqual((CFTypeRef)*MEMORY[0x24BE104B8], cf2))
  {
    v23 = 1;
    v5 = *(_QWORD *)(a2 + 24);
    if (v5)
    {
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, &v23);
      return;
    }
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v7)
LABEL_13:
      sub_20E80D198(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  else if (CFEqual((CFTypeRef)*MEMORY[0x24BE104B0], cf2))
  {
    v24 = 2;
    v6 = *(_QWORD *)(a2 + 24);
    if (v6)
    {
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v24);
      return;
    }
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v7)
      goto LABEL_13;
  }
  else
  {
    v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v15)
      sub_20E80D164(v15, v16, v17, v18, v19, v20, v21, v22);
  }
}

BOOL sub_20E8040EC(uint64_t a1)
{
  mach_port_t v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const __CFDictionary *v7;
  void *v8;
  uint64_t (*v9)(uint64_t, _QWORD, CFTypeRef *);
  int v10;
  CFTypeRef v11;
  uint64_t v12;
  const __CFDictionary *v13;
  void *v14;
  uint64_t (*v15)(uint64_t, _QWORD, CFTypeRef *);
  const __CFDictionary *v16;
  void *v17;
  uint64_t (*v18)(uint64_t, _QWORD, CFTypeRef *);
  const __CFDictionary *v19;
  void *v20;
  uint64_t (*v21)(uint64_t, _QWORD, CFTypeRef *);
  _BOOL8 result;
  CFTypeRef cf;
  uint8_t v24[4];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = *MEMORY[0x24BDD8B18];
  v3 = 4;
  v4 = *MEMORY[0x24BDBD240];
  v5 = MEMORY[0x24BDACB70];
  while (1)
  {
    v6 = *(_QWORD *)(a1 + 32);
    cf = 0;
    v7 = IOServiceMatching("AppleH16CamIn");
    if (IOServiceGetMatchingService(v2, v7))
    {
      v8 = dlopen("/System/Library/MediaCapture/H16ISP.mediacapture", 4);
      if (v8
        && (v9 = (uint64_t (*)(uint64_t, _QWORD, CFTypeRef *))dlsym(v8, "H16ISPCaptureDeviceCreate")) != 0)
      {
        v10 = v9(v4, 0, &cf);
        v11 = cf;
        if (cf)
          goto LABEL_8;
      }
      else
      {
        v10 = 0;
        v11 = cf;
        if (cf)
        {
LABEL_8:
          v12 = 0;
          goto LABEL_30;
        }
      }
    }
    else
    {
      v10 = 0;
    }
    v13 = IOServiceMatching("AppleH13CamIn");
    if (IOServiceGetMatchingService(v2, v13))
    {
      v14 = dlopen("/System/Library/MediaCapture/H13ISP.mediacapture", 4);
      if (v14
        && (v15 = (uint64_t (*)(uint64_t, _QWORD, CFTypeRef *))dlsym(v14, "H13ISPCaptureDeviceCreate")) != 0)
      {
        v10 = v15(v4, 0, &cf);
        v11 = cf;
        if (cf)
          goto LABEL_25;
      }
      else
      {
        v10 = 0;
        v11 = cf;
        if (cf)
        {
LABEL_25:
          v12 = 1;
          goto LABEL_30;
        }
      }
    }
    v16 = IOServiceMatching("AppleH10CamIn");
    if (IOServiceGetMatchingService(v2, v16))
    {
      v17 = dlopen("/System/Library/MediaCapture/H10ISP.mediacapture", 4);
      if (v17
        && (v18 = (uint64_t (*)(uint64_t, _QWORD, CFTypeRef *))dlsym(v17, "H10ISPCaptureDeviceCreate")) != 0)
      {
        v10 = v18(v4, 0, &cf);
        v11 = cf;
        if (cf)
          goto LABEL_27;
      }
      else
      {
        v10 = 0;
        v11 = cf;
        if (cf)
        {
LABEL_27:
          v12 = 2;
          goto LABEL_30;
        }
      }
    }
    v19 = IOServiceMatching("AppleH9CamIn");
    if (IOServiceGetMatchingService(v2, v19))
    {
      v20 = dlopen("/System/Library/MediaCapture/H9ISP.mediacapture", 4);
      if (v20
        && (v21 = (uint64_t (*)(uint64_t, _QWORD, CFTypeRef *))dlsym(v20, "H9ISPCaptureDeviceCreate")) != 0)
      {
        v10 = v21(v4, 0, &cf);
        v11 = cf;
        if (!cf)
        {
LABEL_22:
          if (!v6)
            goto LABEL_32;
          v11 = 0;
          goto LABEL_31;
        }
      }
      else
      {
        v10 = 0;
        v11 = cf;
        if (!cf)
          goto LABEL_22;
      }
      v12 = 3;
LABEL_30:
      *(_DWORD *)(v6 + 8) = off_24C9A9698[4 * v12 + 3];
LABEL_31:
      *(_QWORD *)v6 = v11;
      goto LABEL_32;
    }
    v11 = cf;
    if (v6)
      goto LABEL_31;
    if (cf)
      CFRelease(cf);
LABEL_32:
    if (v10 != -536870186)
      break;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      sub_20E80D234(v24, v3 - 2, &v25);
      if (--v3 <= 1)
        goto LABEL_43;
    }
    else if (--v3 <= 1)
    {
      goto LABEL_43;
    }
  }
  if (!v10)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    return **(_QWORD **)(a1 + 32) != 0;
  }
LABEL_43:
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT);
  if (result)
  {
    sub_20E80D1CC();
    return 0;
  }
  return result;
}

void sub_20E804480(int a1@<W0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;

  v4 = atomic_load((unsigned __int8 *)&qword_254A498C8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A498C8))
  {
    __cxa_atexit((void (*)(void *))sub_20E80475C, &qword_254A498D0, &dword_20E77A000);
    __cxa_guard_release(&qword_254A498C8);
  }
  v19 = 0;
  if (qword_254A498D8)
  {
    v5 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_254A498D8);
    v19 = v5;
    if (v5)
    {
      v6 = qword_254A498D0;
      if (qword_254A498D0)
      {
        v7 = v5;
        if (**(_QWORD **)(qword_254A498D0 + 32))
          v8 = 1;
        else
          v8 = a1 == 0;
        if (v8 || sub_20E8040EC(qword_254A498D0))
        {
          *a2 = v6;
          a2[1] = (uint64_t)v7;
          return;
        }
        *a2 = 0;
        a2[1] = 0;
        goto LABEL_19;
      }
    }
  }
  v9 = operator new();
  *(_QWORD *)(v9 + 24) = 0;
  v10 = (_QWORD *)operator new();
  *v10 = 0;
  v10[1] = 0;
  *(_QWORD *)(v9 + 32) = v10;
  v11 = (std::__shared_weak_count *)operator new();
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9A9728;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
  if (a1 && !sub_20E8040EC(v9))
  {
    *a2 = 0;
    a2[1] = 0;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    v15 = (std::__shared_weak_count *)qword_254A498D8;
    qword_254A498D0 = v9;
    qword_254A498D8 = (uint64_t)v11;
    if (v15)
      std::__shared_weak_count::__release_weak(v15);
    *a2 = v9;
    a2[1] = (uint64_t)v11;
  }
  v7 = v19;
  if (v19)
  {
LABEL_19:
    v16 = (unint64_t *)&v7->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20E8046B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E7858BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8046C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20E7858BC((uint64_t)&a9);
  sub_20E7858BC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20E8046E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  v5 = sub_20E803EC4(v3);
  MEMORY[0x212BC47D4](v5, 0x1020C40BD065CB0);
  sub_20E7858BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E804748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E7858BC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E80475C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_20E804788(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, _QWORD, uint64_t, uint64_t *);
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  if (!**(_QWORD **)(a1 + 32))
    return 0;
  v7 = *MEMORY[0x24BE10508];
  v8[0] = &unk_24C9A97D8;
  v2 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1);
  v3 = **(_QWORD **)(a1 + 32);
  v4 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
  if (!v4)
    return 0;
  if (v4(v3, *MEMORY[0x24BDBD240], v2, &v6))
    return 0;
  return v6;
}

BOOL sub_20E80487C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t (*v4)(uint64_t, _QWORD, id);
  int v5;
  _BOOL8 v6;

  v3 = a2;
  v4 = *(uint64_t (**)(uint64_t, _QWORD, id))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v4)
    v5 = v4(a1, *MEMORY[0x24BE10568], v3);
  else
    v5 = -12782;
  v6 = v5 == 0;

  return v6;
}

void sub_20E8048E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_20E8048F4(uint64_t a1)
{
  dispatch_semaphore_t v2;
  NSObject *v3;
  uint64_t (*v4)(uint64_t, _QWORD *);
  int v5;
  _BOOL8 v6;
  _QWORD v8[4];
  NSObject *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v2 = dispatch_semaphore_create(0);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = sub_20E804A10;
  v8[3] = &unk_24C9A9678;
  v10 = &v11;
  v3 = v2;
  v9 = v3;
  v4 = *(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v4)
    goto LABEL_5;
  v5 = v4(a1, v8);
  if (v5 == -12780)
  {
    v6 = 1;
    goto LABEL_7;
  }
  if (v5)
  {
LABEL_5:
    v6 = 0;
  }
  else
  {
    dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
    v6 = *((_DWORD *)v12 + 6) == 0;
  }
LABEL_7:

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_20E8049EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_20E804A10(uint64_t a1, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_20E804A24(const void *a1)
{
  unsigned int (*v2)(const void *);
  uint64_t v3;
  unsigned int (*v4)(const void *);

  if (!a1)
    return 0;
  v2 = *(unsigned int (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v2 || v2(a1))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_20E80D2E0();
    v3 = 0;
    v4 = *(unsigned int (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (!v4)
      goto LABEL_11;
  }
  else
  {
    v3 = 1;
    v4 = *(unsigned int (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (!v4)
      goto LABEL_11;
  }
  if (v4(a1))
  {
LABEL_11:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_20E80D274();
    v3 = 0;
  }
  CFRelease(a1);
  return v3;
}

BOOL sub_20E804B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD);
  int v8;
  _BOOL8 result;
  unsigned int v10;
  NSObject *v11;
  uint64_t (*v13)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD);
  int v14;
  uint8_t v16[4];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 16);
  if (v7)
  {
    v8 = v7(a2, 0, 0, a3, a4, 0);
    kdebug_trace();
    if (v8)
    {
      kdebug_trace();
      if ((v8 + 12788) <= 8)
      {
        if (((1 << (v8 - 12)) & 0x1DB) != 0)
        {
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT);
          if (result)
            goto LABEL_23;
          return result;
        }
        v10 = 0;
        v11 = MEMORY[0x24BDACB70];
        while (1)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            sub_20E80D41C(v16, v8, &v17);
          usleep(0x3E8u);
          v13 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 16);
          if (!v13)
            break;
          v14 = v13(a2, 0, 0, a3, a4, 0);
          v8 = v14;
          if ((v14 == -12786 || v14 == -12783) && v10++ < 9)
            continue;
          goto LABEL_19;
        }
        v8 = -12782;
      }
LABEL_19:
      kdebug_trace();
      if (v8)
      {
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT);
        if (result)
        {
          sub_20E80D3B4();
          return 0;
        }
        return result;
      }
    }
    return 1;
  }
  kdebug_trace();
  kdebug_trace();
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT);
  if (result)
  {
LABEL_23:
    sub_20E80D34C();
    return 0;
  }
  return result;
}

BOOL sub_20E804DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, unsigned int a7)
{
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  double *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64x2_t v24;
  double *v25;
  __int128 *v26;
  unint64_t v27;
  __int128 v28;
  double *v29;
  double *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t (*v39)(uint64_t);
  int v40;
  float64x2x2_t v42;

  kdebug_trace();
  v13 = *a6;
  v14 = a6[1] - *a6;
  v15 = v14 >> 3;
  v16 = (v14 >> 3) + 3;
  v17 = v16;
  if ((v14 >> 3) == -3)
  {
    v18 = 0;
    goto LABEL_19;
  }
  if ((int)v15 <= -4)
    sub_20E78D874();
  v18 = (double *)operator new(16 * v16);
  bzero(v18, 16 * v17);
  if ((int)v15 >= 1)
  {
    v19 = *MEMORY[0x24BE10528];
    v20 = (v14 >> 3);
    if (v20 < 8)
    {
      v21 = 0;
      goto LABEL_16;
    }
    v22 = (unint64_t)v18 >= v13 + 8 * v20 || v13 >= (unint64_t)&v18[2 * v20];
    if (!v22)
    {
      v21 = 0;
LABEL_16:
      v30 = &v18[2 * v21 + 1];
      v31 = (uint64_t *)(v13 + 8 * v21);
      v32 = v21 - v20;
      do
      {
        *((_QWORD *)v30 - 1) = v19;
        v33 = *v31++;
        *(_QWORD *)v30 = v33;
        v30 += 2;
        v22 = __CFADD__(v32++, 1);
      }
      while (!v22);
      goto LABEL_19;
    }
    v23 = (v14 >> 3) & 3;
    v21 = v20 - v23;
    v24 = vdupq_n_s64(v19);
    v25 = v18 + 4;
    v26 = (__int128 *)(v13 + 16);
    v27 = v20 - v23;
    do
    {
      v42.val[1] = (float64x2_t)*(v26 - 1);
      v28 = *v26;
      v29 = v25 - 4;
      v42.val[0] = (float64x2_t)v24;
      vst2q_f64(v29, v42);
      vst2q_f64(v25, *(float64x2x2_t *)v24.i8);
      v25 += 8;
      v26 += 2;
      v27 -= 4;
    }
    while (v27);
    if (v23)
      goto LABEL_16;
  }
LABEL_19:
  v34 = (_QWORD *)((char *)v18 + ((uint64_t)(v14 << 29) >> 28));
  *v34 = CFSTR("OperationsList");
  v34[1] = a3;
  v35 = (_QWORD *)((char *)v18 + ((uint64_t)((v14 << 29) + 0x100000000) >> 28));
  *v35 = CFSTR("ActionsList");
  v35[1] = a4;
  v36 = (_QWORD *)((char *)v18 + ((uint64_t)((v14 << 29) + 0x200000000) >> 28));
  *v36 = CFSTR("StatsBuffer");
  v36[1] = a5;
  v37 = kdebug_trace();
  v38 = sub_20E804B20(v37, a2, v17, (uint64_t)v18);
  if (v38 & a7)
  {
    kdebug_trace();
    v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v39)
      v40 = v39(a2);
    else
      v40 = -12782;
    kdebug_trace();
    if (v40)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
        sub_20E80D45C();
      v38 = 0;
    }
    else
    {
      v38 = 1;
    }
  }
  operator delete(v18);
  return v38;
}

void sub_20E8050AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E8050D8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E8050FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_20E803EC4(result);
    JUMPOUT(0x212BC47D4);
  }
  return result;
}

uint64_t sub_20E805130(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN3isp11HxISPDeviceEE27__shared_ptr_default_deleteIS2_S2_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN3isp11HxISPDeviceEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN3isp11HxISPDeviceEE27__shared_ptr_default_deleteIS2_S2_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN3isp11HxISPDeviceEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E8051A0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 8u);
}

void sub_20E8051B0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

__CFDictionary *sub_20E8051BC(int a1, int a2, int a3, int a4, int a5, int a6, char a7, int a8)
{
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  __CFDictionary *v22;
  __CFDictionary *v23;
  const void *v24;
  CFNumberRef v25;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int valuePtr;

  v31 = a2;
  valuePtr = a1;
  v29 = a4;
  v30 = a3;
  v27 = a6;
  v28 = a5;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v12 = CFNumberCreate(v10, kCFNumberIntType, &valuePtr);
    if (!v12)
      goto LABEL_13;
    v13 = v12;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDC5708], v12);
    CFRelease(v13);
    v14 = CFNumberCreate(v10, kCFNumberIntType, &v31);
    if (!v14)
      goto LABEL_13;
    v15 = v14;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDC5650], v14);
    CFRelease(v15);
    v16 = CFNumberCreate(v10, kCFNumberIntType, &v30);
    if (!v16)
      goto LABEL_13;
    v17 = v16;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDC56B8], v16);
    CFRelease(v17);
    v18 = CFNumberCreate(v10, kCFNumberIntType, &v29);
    if (!v18)
      goto LABEL_13;
    v19 = v18;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDC55D0], v18);
    CFRelease(v19);
    v20 = CFNumberCreate(v10, kCFNumberIntType, &v28);
    if (!v20)
      goto LABEL_13;
    v21 = v20;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDC56C8], v20);
    CFRelease(v21);
    v22 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (v22)
    {
      v23 = v22;
      v24 = (const void *)*MEMORY[0x24BDBD270];
      CFDictionarySetValue(v22, (const void *)*MEMORY[0x24BDD8EC8], (const void *)*MEMORY[0x24BDBD270]);
      if ((a7 & 1) == 0)
        CFDictionarySetValue(v23, (const void *)*MEMORY[0x24BDD8FB8], (const void *)*MEMORY[0x24BDBD268]);
      if (a8)
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDC5690], v24);
      v25 = CFNumberCreate(v10, kCFNumberIntType, &v27);
      CFDictionarySetValue(v23, (const void *)*MEMORY[0x24BDD8E40], v25);
      CFRelease(v25);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BDC5668], v23);
    }
    else
    {
LABEL_13:
      v23 = Mutable;
      Mutable = 0;
    }
    CFRelease(v23);
  }
  return Mutable;
}

uint64_t sub_20E805430(unsigned int a1, unsigned int a2, OSType a3, CVPixelBufferRef *a4, int a5, int a6, int a7, char a8, unsigned __int8 a9)
{
  __CFDictionary *v13;
  __CFDictionary *v14;
  uint64_t v15;

  v13 = sub_20E8051BC(a1, a2, a3, a5, a6, a7, a8, a9);
  if (v13)
  {
    v14 = v13;
    v15 = CVPixelBufferCreate(0, a1, a2, a3, v13, a4);
    CFRelease(v14);
    if (!(_DWORD)v15)
      return v15;
  }
  else
  {
    v15 = 4294960636;
  }
  *a4 = 0;
  return v15;
}

void sub_20E8054DC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 307, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805508()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 316, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805534()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 325, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805560()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 334, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80558C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 343, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8055B8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 353, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8055E4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 362, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805610()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 371, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80563C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 380, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805668()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 389, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805694()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 398, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8056C0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 407, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8056EC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 410, "target_kp_idx < DYN_THRESH_NUM_KEYPOINTS", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805718()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 419, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805744()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 428, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805770()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtraction.cpp", 431, "max_kp_idx < DYN_THRESH_NUM_KEYPOINTS", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80579C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 180, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8057C8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 193, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8057F4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 199, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805820()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 205, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80584C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 215, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805878()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 227, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8058A4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 236, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8058D0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 248, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8058FC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 256, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805928()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 269, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805954()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 277, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805980()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 288, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8059AC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 296, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8059D8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 307, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805A04()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 315, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805A30()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 328, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805A5C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 338, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805A88()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 349, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805AB4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 360, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805AE0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 371, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805B0C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 382, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805B38()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 392, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805B64()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 401, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805B90()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 411, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805BBC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 421, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805BE8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 438, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805C14()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 453, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805C40()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 461, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805C6C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 469, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805C98()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 478, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805CC4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 491, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805CF0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 499, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805D1C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 507, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805D48()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 517, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805D74()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 526, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805DA0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 537, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805DCC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 547, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805DF8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 559, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805E24()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 568, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805E50()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 577, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805E7C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 586, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805EA8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 596, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805ED4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 606, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805F00()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 617, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805F2C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 629, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805F58()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 644, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805F84()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 657, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805FB0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 666, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E805FDC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 691, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806008()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 715, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806034()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 728, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806060()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 738, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80608C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 751, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8060B8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 761, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8060E4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 773, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806110()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 782, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80613C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 794, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806168()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 807, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806194()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 817, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8061C0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 827, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8061EC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 837, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806218()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 847, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806244()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 859, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806270()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 871, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80629C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionConfig.cpp", 885, "cfg != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8062C8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 81, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8062F4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 88, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806320()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 95, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80634C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 102, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806378()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 109, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8063A4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 116, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8063D0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 123, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8063FC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 130, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806428()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 137, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806454()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 144, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806480()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 151, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8064AC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 158, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8064D8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 165, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806504()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 172, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806530()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/product/AppleCVHWA/AppleCVHWA/src/CVHWAFeatureExtractionHwBufferInfo.cpp", 179, "hdl != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80655C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwCvdAllConfigurationUtilsImpl.h", 504, "size == extra_input_size", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806588()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwCvdAllConfigurationUtilsImpl.h", 483, "size == data_segment_size", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8065B4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwCvdAllConfigurationUtilsImpl.h", 461, "size == itcm_size", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8065E0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwLaccUtilsImpl.h", 33, "base_addr != nullptr && \"address cannot be null\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80660C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwLaccUtilsImpl.h", 61, "(lacc_info.itcm_width * lacc_info.itcm_height) > 0 && \"text segment cannot be zero\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806638()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwLaccUtilsImpl.h", 62, "lacc_buffer_size >= input_size && \"buffer size cannot be more than input\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806664()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwCvdAllConfigurationUtilsImpl.h", 43, "cvd_all_cfg.size() == 1 && octave == 0 && \"Operation buffer is only programmed once for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806690()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 253, "input_format == CISP_INPUT_FORMAT_RAW8", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8066BC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 259, "octave == 0", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8066E8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwCvdAllConfigurationUtilsImpl.h", 222, "num_octaves == 4 || num_octaves == 5 && \"number of octaves can only be 4 or 5\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806714()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 397, "Unsupported buffer type", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806740()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 352, "FlowType::kFlow1 == flow_ && \"Only valid for flow1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80676C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 355, "FlowType::kFlow1 == flow_ && \"Only valid for flow1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806798()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 360, "FlowType::kFlow1 == flow_ && \"Only valid for flow1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8067C4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 364, "(FlowType::kFlow1 == flow_) || ((FlowType::kFlow2 == flow_) && octave == 0) && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8067F0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 368, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80681C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 367, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806848()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 372, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806874()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 371, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8068A0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 376, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8068CC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 375, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8068F8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 380, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806924()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 379, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806950()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 384, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80697C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 383, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8069A8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 388, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8069D4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 387, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806A00()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 391, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806A2C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 394, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806A58()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 403, "FlowType::kFlow2 == flow_ && \"Only supported in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806A84()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 431, "FlowType::kFlow2 == flow_ && \"Only supported in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806AB0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 422, "(operation_buffer_base_addr_) && \"HwPlatformInterface::InitLaccOperation() called with NULL argument.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806ADC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwCvdAllConfigurationUtils.h", 196, "(config.wmaInitiator[i] >= 0 && config.wmaInitiator[i] < 3) && \"WMA initiator setting is either 0, 1, or 2.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806B08()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwCvdAllConfigurationUtils.h", 194, "(config.rmaInitiator[i] >= 0 && config.rmaInitiator[i] < 3) && \"RMA initiator setting is either 0, 1, or 2.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806B34()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwCvdAllConfigurationUtils.h", 155, "(config.laccMode < 4) && \"LaccMode has to be set to a value between 0 and 3 inclusive.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806B60()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwCvdAllConfigurationUtils.h", 152, "(bypassDesgen && bypassDesmatch) && \"ConfigureLacc currently expects that DG/DM is bypassed.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806B8C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwCvdAllConfigurationUtils.h", 132, "HasHardwareFeaturePointsColl() || HasHardwareFeaturePointsDonan() && \"Configuration not supported.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806BB8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 440, "(action_buffer_base_addr_) && \"HwCrete::InitLaccAction() called with NULL argument.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806BE4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 465, "(info.index < max_index) && \"Action buffer index out-of-range\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806C10()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 198, "(reg < grf.size()) && \"register number out of range.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806C3C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 207, "val && \"NULL pointer\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806C68()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 209, "(n) && \"number of vector lanes cannot be 0\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806C94()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 210, "(n <= 8) && \"number of vector lanes cannot exceed 8\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806CC0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 208, "(reg < vrf.size()) && \"register number out of range.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806CEC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 219, "val && \"NULL pointer\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806D18()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 221, "(n) && \"number of vector lanes cannot be 0\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806D44()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 222, "(n <= 4) && \"number of vector lanes cannot exceed 4\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806D70()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 220, "(reg < vrf.size()) && \"register number out of range.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806D9C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 228, "val && \"NULL pointer\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E806DC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof BP MCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E806E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof BP HCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E806EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Mbr StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E806F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof bus StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E806F78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof SB Dr StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E806FE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Hz StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E807050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof It BCont StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E8070BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Dt BCont StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E807128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Dt SCont StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E807194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Dt LCont StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E807200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Pp ClStCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80726C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Pk Cnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E8072D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof H Cnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E807344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof FR Cnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E8073B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "Final HALT location = %08x", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80741C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB24();
  sub_20E78FB58(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "Error addr = 0x%08x_%08x, size = %d, source = %08x", v1, v2, v3, v4, v5);
  sub_20E78FB68();
}

void sub_20E807490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB24();
  sub_20E78FB58(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "STAT0 = %08x, STAT1 = %08x, STAT2 = %08x, halt status = %d", v1, v2, v3, v4, v5);
  sub_20E78FB68();
}

void sub_20E807504()
{
  __int16 v0;
  int v1;
  uint8_t v2[26];
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  sub_20E78FB24();
  v3 = v0;
  v4 = v1;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "LC0 = %08x, LC1 = %08x, LC2 = %08x, LC3 = %08x, RET = %08x", v2, 0x20u);
  sub_20E78FB68();
}

void sub_20E807594(char *a1, void **a2, uint8_t *buf, _QWORD *a4)
{
  void *v6;

  if (*a1 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  *(_DWORD *)buf = 136446210;
  *a4 = v6;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%{public}s", buf, 0xCu);
  if (*a1 < 0)
    operator delete(*a2);
}

void sub_20E80760C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "===== HW version %08x =====", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E807678()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "================ Post-execution State ===============", v0, 2u);
  sub_20E78FB1C();
}

void sub_20E8076B8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 532, "false && \"dmaDescSize not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8076E4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenConfigurationUtilsImpl.h", 156, "num_stripes > 0 && \"Invalid number of stripes\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807710()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenConfigurationUtilsImpl.h", 540, "curr_desc_size <= kCurrDescriptorDTCMSizeColl", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80773C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenConfigurationUtilsImpl.h", 392, "!(input_cfg.enableShortDescriptorOutputFlow2 && input_cfg.enableLongDescriptorOutputFlow2) && \"short and long descriptor should not be enabled at the same time\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807768()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenConfigurationUtilsImpl.h", 277, "(input_cfg.numberOfOctaves == hw::desgen::ComputeNumOctavesFlow2( input_cfg.inputImageWidth, input_cfg.inputImageHeight)) && \"If width and height are > 320 then number of octaves should be 5 else,\" \"number of octaves should be 4.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807794()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenConfigurationUtilsImpl.h", 272, "(input_cfg.numberOfOctaves == 4 || input_cfg.numberOfOctaves == 5) && \"Number of octaves can only be 4 or 5.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8077C0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenConfigurationUtilsImpl.h", 237, "num_stripes == 1", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8077EC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenConfigurationUtilsImpl.h", 234, "hal.numberOfGridElements == feature_detection::kNumRegionOfInterestBlocks", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807818()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenConfigurationUtilsImpl.h", 233, "hal.minBlockSize == feature_detection::kMinBlockSize", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807844()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCollUtils.cpp", 72, "config.enableLongDescriptorOutputFlow2 && \"long desc should be enabled\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807870()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCollUtils.cpp", 80, "config.enableDynamicThresholding && \"Dynamic Thresholding should be enabled\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80789C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCollUtils.cpp", 95, "full_desc_min_data.offset == full_desc_max_data.offset + full_desc_max_data.max_size && \"Full desc maxima and Full desc minima should be contiguous in memory\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8078C8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCollUtils.cpp", 91, "(full_desc_max_data.offset < full_desc_min_data.offset || config.maxNumberOfKeypoints == 0) && \"Full desc maxima offset should be lower than Full desc minima offset.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8078F4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCollUtils.cpp", 77, "config.flow == FlowType::kFlow2 && \"This function is only valid in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807920(uint64_t a1, uint64_t a2)
{
  sub_20E793AE4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenUtils.h", a2, "full_desc_min_data.offset == full_desc_max_data.offset + full_desc_max_data.max_size && \"Full desc maxima and Full desc minima should be contiguous in memory\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807948(uint64_t a1, uint64_t a2)
{
  sub_20E793AD4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenUtils.h", a2, "(full_desc_max_data.offset < full_desc_min_data.offset || config.maxNumberOfKeypoints == 0) && \"Full desc maxima offset should be lower than Full desc minima offset.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807970(uint64_t a1, uint64_t a2)
{
  sub_20E793AC4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", a2, "(full_descriptor_output_enabled_ || short_descriptor_output_enabled_) && \"Only valid when full desc enabled or short desc enabled\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807998(uint64_t a1, uint64_t a2)
{
  sub_20E793B04("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", a2, "FlowType::kFlow2 == flow_ && \"Only valid in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8079C0(uint64_t a1, uint64_t a2)
{
  sub_20E793AFC("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", a2, "final_num_keypoints <= (full_desc_data_.num_descriptors + full_desc_min_data_.num_descriptors)", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8079E8(uint64_t a1, uint64_t a2)
{
  sub_20E793AF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", a2, "FlowType::kFlow2 == flow_ && \"Only valid in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807A10(uint64_t a1, uint64_t a2)
{
  sub_20E793AEC("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", a2, "(kp_desc_size + kp_desc_size_min) == kp_idx.size() && \"total kp_desc_size and kp_idx size should match\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807A38(uint64_t a1, uint64_t a2)
{
  sub_20E793ADC("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", a2, "num_buckets_scale >= 1 && \"num of buckets scale should be >= 1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807A60(uint64_t a1, uint64_t a2)
{
  sub_20E793ACC("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", a2, "(num_buckets_x == 1 && num_buckets_y == 1) && \"num_buckets x and y should be 1, other settings are currently not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807A88(void **a1, char *a2, void **a3)
{
  char *v5;
  void *v6;
  char *v8;
  void *v9;
  void *v10;

  v5 = (char *)*a1;
  v6 = a2;
  if (v5 != a2)
  {
    v8 = v5;
    do
    {
      v10 = (void *)*((_QWORD *)v8 - 3);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *((_QWORD *)v5 - 2) = v9;
        operator delete(v9);
      }
      v5 = v8;
    }
    while (v8 != a2);
    v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

void sub_20E807AEC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 173, "false && \"function not implemented\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807B18()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 183, "false && \"function not implemented\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807B44()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", 190, "false && \"function not implemented\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807B70()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwCvdAllConfigurationUtilsImpl.h", 129, "shortDescriptorSel == static_cast<uint32_t>(ShortDescriptorSel::kNone) && \"shall be kNone here\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807B9C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 246, "input_format == CISP_INPUT_FORMAT_RAW8", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807BC8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 252, "octave == 0", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807BF4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 384, "Unsupported buffer type", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807C20()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 339, "FlowType::kFlow1 == flow_ && \"Only valid for flow1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807C4C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 342, "FlowType::kFlow1 == flow_ && \"Only valid for flow1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807C78()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 347, "FlowType::kFlow1 == flow_ && \"Only valid for flow1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807CA4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 351, "(FlowType::kFlow1 == flow_) || ((FlowType::kFlow2 == flow_) && octave == 0) && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807CD0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 355, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807CFC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 354, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807D28()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 359, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807D54()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 358, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807D80()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 363, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807DAC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 362, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807DD8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 367, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807E04()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 366, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807E30()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 371, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807E5C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 370, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807E88()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 375, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807EB4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 374, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807EE0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 378, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807F0C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 381, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807F38()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 390, "FlowType::kFlow2 == flow_ && \"Only supported in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807F64()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 418, "FlowType::kFlow2 == flow_ && \"Only supported in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807F90()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwCvdAllConfigurationUtils.h", 147, "isPlatformMatched && \"Configuration not supported.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E807FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Mbr StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E808028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof bus StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E808094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof SB Dr StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E808100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Hz StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80816C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof It BCont StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E8081D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Dt BCont StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E808244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Dt SCont StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E8082B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Dt LCont StCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80831C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Pp ClStCnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E808388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Pk Cnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E8083F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof H Cnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E808460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof FR Cnt: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E8084CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "Final HALT location = %08x", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E808538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB24();
  sub_20E78FB58(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "Error addr = 0x%08x_%08x, size = %d, source = %08x", v1, v2, v3, v4, v5);
  sub_20E78FB68();
}

void sub_20E8085AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB24();
  sub_20E78FB58(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "STAT0 = %08x, STAT1 = %08x, STAT2 = %08x, halt status = %d", v1, v2, v3, v4, v5);
  sub_20E78FB68();
}

void sub_20E808620()
{
  __int16 v0;
  int v1;
  uint8_t v2[26];
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  sub_20E78FB24();
  v3 = v0;
  v4 = v1;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "LC0 = %08x, LC1 = %08x, LC2 = %08x, LC3 = %08x, RET = %08x", v2, 0x20u);
  sub_20E78FB68();
}

void sub_20E8086B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "===== HW version %08x =====", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80871C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 107, "config.enableDynamicThresholding && \"Dynamic Thresholding should be enabled\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808748()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 122, "full_desc_min_data.offset == full_desc_max_data.offset + full_desc_max_data.max_size && \"Full desc maxima and Full desc minima should be contiguous in memory\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808774()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 118, "(full_desc_max_data.offset < full_desc_min_data.offset || config.maxNumberOfKeypoints == 0) && \"Full desc maxima offset should be lower than Full desc minima offset.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8087A0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 104, "config.flow == FlowType::kFlow2 && \"This function is only valid in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8087CC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenUtils.h", 60, "full_desc_min_data.offset == full_desc_max_data.offset + full_desc_max_data.max_size && \"Full desc maxima and Full desc minima should be contiguous in memory\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8087F8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenUtils.h", 56, "(full_desc_max_data.offset < full_desc_min_data.offset || config.maxNumberOfKeypoints == 0) && \"Full desc maxima offset should be lower than Full desc minima offset.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808824()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", 299, "(full_descriptor_output_enabled_ || short_descriptor_output_enabled_) && \"Only valid when full desc enabled or short desc enabled\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808850()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", 297, "FlowType::kFlow2 == flow_ && \"Only valid in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80887C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", 374, "final_num_keypoints <= (full_desc_data_.num_descriptors + full_desc_min_data_.num_descriptors)", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8088A8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", 359, "FlowType::kFlow2 == flow_ && \"Only valid in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8088D4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", 68, "(kp_desc_size + kp_desc_size_min) == kp_idx.size() && \"total kp_desc_size and kp_idx size should match\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808900()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", 65, "num_buckets_scale >= 1 && \"num of buckets scale should be >= 1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80892C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", 64, "(num_buckets_x == 1 && num_buckets_y == 1) && \"num_buckets x and y should be 1, other settings are currently not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808958()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCvdAllConfigurationUtils.cpp", 109, "size == extra_input_size", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808984()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCvdAllConfigurationUtils.cpp", 88, "size == data_segment_size", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8089B0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCvdAllConfigurationUtils.cpp", 66, "size == itcm_size", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8089DC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCvdAllConfigurationUtils.cpp", 350, "FlowType::kFlow0 != flow && \"Flow 0 not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808A08()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 92, "config.numberOfOctaves > 0 && \"Number of octaves should be greater than 0\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808A34()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 95, "(config.inputImageWidth >> (config.numberOfOctaves - 1)) >= hal_.minSupportedWidthFlow1 && \"Min supported width violation\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808A60()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 98, "(config.inputImageHeight >> (config.numberOfOctaves - 1)) >= hal_.minSupportedHeightFlow1 && \"Min supported height violation\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808A8C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 90, "config.numberOfOctaves <= kMaxNumOctaves && \"Number of octaves has to be smaller than the maximum possible\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808AB8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 85, "hal_.minSupportedWidthFlow1 == hal_.minSupportedHeightFlow1 && \"min supported width and height should match\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808AE4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 149, "flow_ == config.flow && flow_ == FlowType::kFlow2", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808B10()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 148, "max_keypoints_ == config.maxNumberOfKeypoints", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808B3C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 147, "input_width_ == config.inputImageWidth && input_height_ == config.inputImageHeight", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808B68()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 203, "octave < number_of_octaves_ && \"Attempting to process invalid octave\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808B94()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 207, "octave == 0 && \"Action buffer is only programmed once for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808BC0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 305, "Unsupported buffer type", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808BEC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 266, "FlowType::kFlow1 == flow_ && \"Only valid for flow1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808C18()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 269, "FlowType::kFlow1 == flow_ && \"Only valid for flow1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808C44()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 274, "FlowType::kFlow1 == flow_ && \"Only valid for flow1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808C70()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 278, "(FlowType::kFlow1 == flow_) || ((FlowType::kFlow2 == flow_) && octave == 0) && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808C9C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 282, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808CC8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 281, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808CF4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 286, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808D20()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 285, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808D4C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 290, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808D78()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 289, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808DA4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 294, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808DD0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 293, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808DFC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 298, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808E28()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 297, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808E54()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 302, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808E80()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 301, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808EAC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 311, "FlowType::kFlow2 == flow_ && \"Only supported in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808ED8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 222, "hal.numberOfGridElements == feature_detection::kNumRegionOfInterestBlocks", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808F04()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 221, "hal.minBlockSize == feature_detection::kMinBlockSize", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808F30()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 267, "block_size >= min_block_size && \"Each block has to be at least 4 pixels big\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808F5C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 266, "(start + block_size * num_blocks <= dimension + block_size - 1) && \"Only the last block can extend beyond the image boundary\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808F88()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 264, "start >= 0 && \"Start should be greater than or equal to 0\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808FB4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 246, "expected_start >= 0 && expected_end > expected_start && expected_end <= dimension", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E808FE0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 261, "(expected_end <= start + num_blocks * block_size) && \"User requested end of ROI should be in the HW ROI\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80900C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 235, "dimension > 0 && \"Input dimension should be greater than 0\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809038()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 274, "(input_cfg.numberOfBinsHardwareX >= hal.minNumberOfBinsHardwareXFlow1 && input_cfg.numberOfBinsHardwareX <= hal.maxNumberOfBinsHardwareXFlow1) && \"numberOfBinsHardwareX has to be between 1 and 64\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809064()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 277, "(input_cfg.numberOfBinsHardwareY >= hal.minNumberOfBinsHardwareYFlow1 && input_cfg.numberOfBinsHardwareY <= hal.maxNumberOfBinsHardwareYFlow1) && \"numberOfBinsHardwareY has to be between 1 and 64\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809090()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 401, "(input_cfg.numberOfOctaves == hw::desgen::ComputeNumOctavesFlow2( input_cfg.inputImageWidth, input_cfg.inputImageHeight)) && \"If width and height are > 320 then number of octaves should be 5 else,\" \"number of octaves should be 4.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8090BC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 396, "(input_cfg.numberOfOctaves == 4 || input_cfg.numberOfOctaves == 5) && \"Number of octaves can only be 4 or 5.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8090E8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 718, "set_pointer_num <= kSetPointerMaxNum", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809114()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 767, "curr_desc_size <= kCurrDescriptorDTCMSize", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809140()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 783, "FlowType::kFlow0 != flow && \"Flow 0 not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80916C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 807, "(std::all_of(desgen_cfg.begin(), desgen_cfg.end(), [key_out_max](const HwStatenDesgenCfg& config) { return config.keyFrameMax == key_out_max; })) && \"keyOutMax for all octaves needs to be the same\"",
    (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809198()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 857, "desgen_cfg.size() == 1 && \"Make sure we are only populating one config for Flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8091C4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 951, "output_info.info_gp2[octave - 1].enabled && \"GP2 of previous octave has to be enabled, as it is the\" \"input to the current octave\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8091F0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 1036, "num_octaves == 4 || num_octaves == 5 && \"number of octaves can only be 4 or 5\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80921C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenConfigurationUtils.cpp", 1230, "desgen_cfg.size() == 1 && octave == 0 && \"Operation buffer is only programmed once for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809248()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenConfigurationUtilsImpl.h", 37, "hal.numberOfGridElements == feature_detection::kNumRegionOfInterestBlocks", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809274()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwDesgenConfigurationUtilsImpl.h", 36, "hal.minBlockSize == feature_detection::kMinBlockSize", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8092A0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenUtils.cpp", 35, "kpdesc != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8092CC(uint64_t a1, uint64_t a2)
{
  sub_20E793AD4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgenUtils.cpp", a2, "config.flow == FlowType::kFlow2 && \"This function is only valid in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8092F4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtraction.cpp", 61, "direct_config.maxInputImageWidth >= direct_config.inputImageWidth && \"Max Width has to be larger than current width\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809320()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtraction.cpp", 63, "direct_config.maxInputImageHeight >= direct_config.inputImageHeight && \"Max height has to be larger than current height\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80934C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtraction.cpp", 65, "direct_config.inputImageWidth <= direct_config.inputImageStride && \"The stride has to be larger or equal to the image width\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809378(uint64_t a1, uint64_t a2)
{
  sub_20E79F6B4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtraction.cpp", a2, "idx < list->tot && \"Index for general processing out of range\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8093A0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtraction.cpp", 175, "false && \"Error on initializing subimage processing\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8093CC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtraction.cpp", 67, "direct_config.inputImageStride % KBytesPerRowAlignmentHw == 0 && \"Stride needs to be aligned to 64 bytes\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8093F8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 191, "ctx", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809424()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 193, "0 && \"Action buffer cannot be NULL\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809450()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 202, "ctx", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80947C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 208, "ctx", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8094A8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 210, "0 && \"Operation buffer cannot be NULL\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8094D4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 219, "ctx", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809500()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 225, "ctx", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80952C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 231, "ctx", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809558()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 237, "ctx", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809584()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 248, "ctx", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8095B0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 337, "stride == ctx->config.inputImageStride", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8095DC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 336, "height == ctx->config.inputImageHeight", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809608()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 335, "width == ctx->config.inputImageWidth", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809634()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 440, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809660()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 448, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80968C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 456, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8096B8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 457, "target_kp_idx < DYN_THRESH_NUM_KEYPOINTS", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E8096E4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 465, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809710()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 473, "ctx != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80973C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwFeatureExtractionInterface.cpp", 474, "max_kp_idx < DYN_THRESH_NUM_KEYPOINTS", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "Error creating stats buffer", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80979C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E7A35A0();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "********* ******** ******* ****** ***** **** *** ** * Failed to create ISP session in XPCServer: error %u", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E809804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "Failed to create an XPC/Daemon Client connection", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E809838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E7A35A0();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "HwGPWrapper::LoadProgram Error: unspecified error #%u", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E8098A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "HwGPWrapper::LoadProgram Error: No daemon connection", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E8098D4(uint64_t *a1)
{
  uint64_t *v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a1 + 23) >= 0)
    v1 = a1;
  else
    v1 = (uint64_t *)*a1;
  v2 = 136315138;
  v3 = v1;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "HwGPWrapper::LoadProgram Error: Binary file %s not found.", (uint8_t *)&v2, 0xCu);
  sub_20E7A3560();
}

void sub_20E80995C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "HwGPWrapper::LoadProgram Error: Binary does not match the platform", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E809990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "HwGPWrapper::LoadProgram Error: Accelerator platform not available", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E8099C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E7A35A0();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "ReconnectSession: Failed to create an ISP session with buffers -- error code %u", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E809A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "ReconnectSession: Failed to create a new XPC connection", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E809A60()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGPWrapper.cpp", 504, "(daemon_client_.conn == nullptr && daemon_client_.client_id == 0) && \"Client should not try to reconnect when both connection and client ID \" \"are non-zero\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "One or more control buffer pointers are NULL in call to HwGPWrapper::RunLaccProgram", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E809AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "General Processing call failed (HwGPWrapper::RunL...Program)", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E809AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E7A35A0();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "HwGPWrapper::RunL...Program() -- error code returned by daemon: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E809B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "Lost connection to daemon", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E809B90(char a1, int a2)
{
  _DWORD v2[2];
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2[0] = 67109376;
  v2[1] = a2;
  v3 = 1024;
  v4 = a1 & 1;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error in VisionHWARequestProcessISPSession: error %u, cached=%d", (uint8_t *)v2, 0xEu);
  sub_20E7A3560();
}

void sub_20E809C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "One or more output buffer pointers are NULL in call to HwGPWrapper::RunLaccProgram", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E809C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "One or more input buffer pointers are NULL in call to HwGPWrapper::RunLaccProgram", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E809C80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E7A353C();
  sub_20E7A3580(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "Lookup requests sent by client: %d, most recently at %{public}s.%06d", v1, v2, v3, v4, v5);
  sub_20E7A3560();
}

void sub_20E809CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E7A353C();
  sub_20E7A3580(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "Load requests sent by client: %d, most recently at %{public}s.%06d", v1, v2, v3, v4, v5);
  sub_20E7A3560();
}

void sub_20E809D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "Processing requests sent by client: %d", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E809DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E7A3568();
  sub_20E7A3590(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "Processing Session created at %{public}s.%06d", v1, v2, v3, v4, v5);
  sub_20E7A3560();
}

void sub_20E809E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E7A3568();
  sub_20E7A3590(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "XPC Connection created at %{public}s.%06d", v1, v2, v3, v4, v5);
  sub_20E7A3560();
}

void sub_20E809EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "---- Client Statistics ----", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E809EDC(void **a1, uint64_t a2)
{
  void *v4;

  v4 = *a1;
  *a1 = 0;
  if (v4)
    operator delete(v4);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_20E809F1C(void **__p)
{
  void **v2;

  do
  {
    v2 = (void **)*__p;
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_20E809F5C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 259, "isp_dev_.get() != nullptr && \"Failed to create an ISP device instance\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809F88()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 472, "needs_memcpy && \"needs_memcpy is false unexpectedly\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809FB4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 504, "(base != buf) && \"Unnecessary memcpy, source == destination.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E809FE0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 452, "(needs_alloc || tracked_cvpb != nullptr) && \"No CVPixelBuffer backing available\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A00C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 431, "(*counterpart_ptr != *dma_ptr) && \"Shouldn't be in this branch if dma_in_ptr_ == dma_out_ptr_\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A038()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 528, "!(bufsize & 0x3f) && \"Non-aligned stack length\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A064()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 527, "!(stack_alloc_end_addr_ & 0x3f) && \"Non-aligned stack end\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A090()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 512, "(stack_size < stack_top) && \"Not enough space for accelerator stack frame\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A0BC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 542, "arg != nullptr && \"arg pointer is NULL\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A0E8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 550, "stack_buffer != nullptr && \"data pointer is NULL\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A114()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 560, "data != nullptr && \"data pointer is NULL\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "ReadStackArgument called, but offset and/or length are out of range.", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80A174()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 585, "general_purpose && \"NULL pointer\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A1A0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 593, "(reg < lacc_config_.GRF.size()) && \"register number out of range.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A1CC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 598, "val && \"NULL pointer\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A1F8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 600, "(n) && \"number of vector lanes cannot be 0\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A224()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 601, "(n <= 8) && \"number of vector lanes cannot exceed 8\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A250()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 599, "(reg < lacc_config_.VRF.size()) && \"register number out of range.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A27C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 606, "val && \"NULL pointer\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A2A8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 608, "(n) && \"number of vector lanes cannot be 0\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A2D4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 609, "(n <= 4) && \"number of vector lanes cannot exceed 4\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A300()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 607, "(reg < lacc_config_.VRF.size()) && \"register number out of range.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A32C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 679, "(dtcm_base_addr != 0ul && dtcm_top_addr > dtcm_base_addr) && \"Uninitialized platform data memory limits\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A358()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 681, "(itcm_base_addr != 0ul && itcm_top_addr > itcm_base_addr) && \"Uninitialized platform instruction memory limits\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "No stack frame allocated for accelerator -- cannot run without it!", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80A3B8(int a1)
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "unexpected program counter: 0x%08x.", (uint8_t *)v1, 8u);
  sub_20E78FB1C();
}

void sub_20E80A430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "Could not load accelerator binary.", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80A464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "Could not reconnect to XPC service", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80A498()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 735, "(stack_address >= (dtcm_base_addr) && stack_alloc_end_addr_ <= dtcm_top_addr) && \"Accelerator stack extends outside of DTCM range.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A4C4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 725, "(data_address >= (lacc_phys_base_address + dtcm_base_addr) && dtcm_range_max_ <= dtcm_top_addr) && \"Accelerator data extends outside the DTCM range.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A4F0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 717, "(code_address >= (lacc_phys_base_address + itcm_base_addr) && itcm_range_max_ <= itcm_top_addr) && \"Accelerator code extends outside the ITCM range.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A51C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 677, "(lacc_phys_base_address > 0ull && lacc_phys_base_address != ~0ull) && \"Uninitialized platform base address\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A548()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 1222, "(!info2.enabled || outputBufferIDs[i] != 0) && \"invalid buffer ID configured\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A574()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 1215, "(i == 0 || !info.enabled || inputBufferIDs[i] != 0) && \"invalid buffer ID configured\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A5A0(uint64_t a1, uint64_t a2)
{
  sub_20E7A97DC("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformInterface.h", a2, "(info.index < max_index) && \"Action buffer index out-of-range\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A5C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "Symbol lookup on daemon failed repeatedly -- Aborting.", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80A5FC(uint64_t *a1)
{
  uint64_t *v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a1 + 23) >= 0)
    v1 = a1;
  else
    v1 = (uint64_t *)*a1;
  v2 = 136315138;
  v3 = v1;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Symbol %s was not found", (uint8_t *)&v2, 0xCu);
}

void sub_20E80A688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "Failed to load program -- Aborting.", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80A6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "Failed to execute symbol lookup on daemon -- daemon may have restarted. Trying to reconnect.", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80A6F0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 125, "!(full_descriptor_output_enabled_ && short_descriptor_output_enabled_) && \"full and short descriptor should not be enabled at the same time\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A71C(uint64_t a1, uint64_t a2)
{
  sub_20E7AE430("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", a2, "cmd_vio_header->totSections > CVIO_SECTION_EXTRA && \"Number of sections is too small to contain extra section\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A744(uint64_t a1, uint64_t a2)
{
  sub_20E7AE428("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", a2, "cmd_vio_header->totSections > CVIO_SECTION_OUTPUT && \"Number of sections is too small to contain output section\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A76C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 665, "FlowType::kFlow2 == flow_ && \"Bidir Matches only valid for Flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A798()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 648, "FlowType::kFlow2 == flow_ && \"Binned Desc output only valid for Flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A7C4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 586, "FlowType::kFlow2 == flow_ && \"Keypoint Candidates output only valid for Flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A7F0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 603, "FlowType::kFlow2 == flow_ && \"Keypoints output only valid for Flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A81C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 331, "FlowType::kFlow1 == flow_ && \"Raw keypoints is only valid for flow1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A848()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 516, "FlowType::kFlow2 == flow_ && \"Full Freak Desc output only valid for Flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A874()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 551, "FlowType::kFlow2 == flow_ && \"Short Freak Desc output only valid for Flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A8A0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 64, "cmd_vio_header->totSections > CVIO_SECTION_OUTPUT && \"Number of sections is too small to contain output section\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A8CC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 475, "extraction_info_->input_image_stride >= extraction_info_->input_image_width && \"Input image stride should be greater or equal to the input image \" \"width in the feature buffer\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A8F8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 472, "extraction_info_->input_image_stride % KBytesPerRowAlignmentHw == 0 && \"Input image stride should be 64 byte aligned in the feature buffer\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A924()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 412, "cmd_vio_header->totSections > CVIO_SECTION_EXTRA && \"Number of sections is too small to contain extra section\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A950()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 493, "output_keypoints_data_.keypoints != nullptr && output_descriptors_data_.descriptors != nullptr", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A97C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 484, "NumberOfKeypointsForRelocalizationOnly() == 0 && \"makes sure when adding features, no featues are considered\" \"as relocalization only\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A9A8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 481, "extraction_info_->number_of_keypoints < max_keypoints_", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80A9D4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 500, "extraction_info_->v1.num_of_matches < max_keypoints_", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AA00()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 510, "tid_data_.num_tids < max_keypoints_ && idx < max_keypoints_", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AA2C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyConfigurationUtils.cpp", 106, "(input_cfg.numberOfBinsHardwareX >= hal.minNumberOfBinsHardwareX && input_cfg.numberOfBinsHardwareX <= hal.maxNumberOfBinsHardwareX) && \"numberOfBinsHardwareX has to be between 1 and 64\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AA58()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyConfigurationUtils.cpp", 109, "(input_cfg.numberOfBinsHardwareY >= hal.minNumberOfBinsHardwareY && input_cfg.numberOfBinsHardwareY <= hal.maxNumberOfBinsHardwareY) && \"numberOfBinsHardwareY has to be between 1 and 64\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AA84()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyConfigurationUtils.cpp", 165, "(key_cfg.activeStartX + key_cfg.blockSizeX * 5 <= (input_cfg.inputImageWidth >> octave)) && \"Active Area X ends outside image\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AAB0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyConfigurationUtils.cpp", 166, "(key_cfg.activeStartY + key_cfg.blockSizeY * 5 <= (input_cfg.inputImageHeight >> octave)) && \"Active Area Y ends outside image\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AADC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyConfigurationUtils.cpp", 91, "hal.numberOfGridElements == feature_detection::kNumRegionOfInterestBlocks", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AB08()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyConfigurationUtils.cpp", 90, "hal.minBlockSize == feature_detection::kMinBlockSize", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AB34()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ImageProcessing/include/VIO/ImageProcessing/PyramidScaleSpace.hpp", 125, "x.height == height && \"Height of input data does not match expected height\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AB60()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ImageProcessing/include/VIO/ImageProcessing/PyramidScaleSpace.hpp", 123, "x.width == width && \"Width of input data does not match expected width\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AB8C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ImageProcessing/include/VIO/ImageProcessing/PyramidScaleSpace.hpp", 116, "data.size() == levels().capacity() && \"Input size mismatches the expected size\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80ABB8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80ABE4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyDoGFeatureDetector.cpp", 236, "laplacian_pyr.num_scales_per_octave() == 2 && \"Only supporting binomial gaussian pyramid, with 2 scales per octave\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AC10()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGFeatureDetector_impl.h", 557, "buckets_hist.size() == bucket_num && \"Buckets histogram is expected to be allocated on input.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AC3C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/FeatureDetection/include/VIO/FeatureDetection/DoGFeatureDetector_impl.h", 528, "num_buckets_x == 1 && num_buckets_y == 1 && \"AssignScaleBuckets_Thresholding() does not support spatial buckets.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AC68()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyEngine.cpp", 84, "config.numberOfOctaves > 0 && \"Number of octaves should be greater than 0\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AC94()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyEngine.cpp", 87, "(config.inputImageWidth >> (config.numberOfOctaves - 1)) >= hal_.minSupportedWidth && \"Min supported width violation\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80ACC0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyEngine.cpp", 90, "(config.inputImageHeight >> (config.numberOfOctaves - 1)) >= hal_.minSupportedHeight && \"Min supported height violation\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80ACEC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyEngine.cpp", 83, "config.numberOfOctaves <= kMaxNumOctaves && \"Number of octaves has to be smaller than the maximum possible\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AD18()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyEngine.cpp", 78, "hal_.minSupportedWidth == hal_.minSupportedHeight && \"min supported width and height should match\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AD44()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyEngine.cpp", 146, "info_gp2_[octave - 1].enabled && \"GP2 of previous octave has to be enabled, as it is the\" \"input to the current octave\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AD70()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyEngine.cpp", 122, "octave < number_of_octaves_ && \"Attempting to process invalid octave\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AD9C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyEngine.cpp", 226, "Unsupported buffer type", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80ADC8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformUtils.h", 274, "val != std::numeric_limits<uint32_t>::max() && \"Passing max value for uint32_t into IncrementIfOdd, most likely\" \"unexpected behaviour\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80ADF4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwPlatformUtils.h", 278, "val % 2 == 0 && \"IncrementIfOdd should always return an\" \"even number\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AE20()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyEngine.cpp", 262, "(std::all_of(key_cfg_.begin(), key_cfg_.end(), [key_out_max](const HwKeyEngineCfg& config) { return config.keyOutMax == key_out_max; })) && \"keyOutMax for all octaves needs to be the same\"",
    (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AE4C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwLaccUtils.cpp", 111, "(rmanum < 4) && \"RMA index out of bounds\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80AE78(uint8_t *a1, _QWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 134217984;
  *a2 = 1;
  sub_20E7C56BC(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "RMA%zu is set by daemon", a1);
}

void sub_20E80AEBC(uint8_t *a1, _QWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 134217984;
  *a2 = 0;
  sub_20E7C56BC(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "RMA%zu is set by daemon", a1);
}

void sub_20E80AEFC()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_20E78FB24();
  sub_20E7C56C8();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x20u);
  sub_20E78FB68();
}

void sub_20E80AF88()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_20E7C56C8();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x14u);
}

void sub_20E80B020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB24();
  sub_20E78FB58(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "d StBrpMk[0..2]: 0x%08x 0x%08x 0x%08x, pipe-clean: %d", v1, v2, v3, v4, v5);
  sub_20E78FB68();
}

void sub_20E80B094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "d DtAdBrpPCl: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80B100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB24();
  sub_20E78FB58(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "d DtAdBrpEn[0..3]: %d %d %d %d", v1, v2, v3, v4, v5);
  sub_20E78FB68();
}

void sub_20E80B174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB24();
  sub_20E78FB58(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "d DtAdBrpEOf[0..3]: 0x%08x 0x%08x 0x%08x 0x%08x", v1, v2, v3, v4, v5);
  sub_20E78FB68();
}

void sub_20E80B1E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB24();
  sub_20E78FB58(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "d DtAdBrpBsAd[0..3]: 0x%08x 0x%08x 0x%08x 0x%08x", v1, v2, v3, v4, v5);
  sub_20E78FB68();
}

void sub_20E80B25C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "d PCBrpPCl: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80B2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB24();
  sub_20E78FB58(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "d PCBrpEn[0..3]: %d %d %d %d", v1, v2, v3, v4, v5);
  sub_20E78FB68();
}

void sub_20E80B33C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB24();
  sub_20E78FB58(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "d PCBrp[0..3]: 0x%08x 0x%08x 0x%08x 0x%08x", v1, v2, v3, v4, v5);
  sub_20E78FB68();
}

void sub_20E80B3B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "d En: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80B41C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof Clr: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80B488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "prof En: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80B4F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E78FB4C();
  sub_20E78FB0C(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "ErrClean: %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80B560(char *a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  if (a1[23] >= 0)
    v4 = a1;
  else
    v4 = *(char **)a1;
  *(_DWORD *)a2 = 136446210;
  *(_QWORD *)(a2 + 4) = v4;
  sub_20E7C56BC(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "%{public}s", (uint8_t *)a2);
  if (a1[23] < 0)
    operator delete(*(void **)a1);
}

void sub_20E80B5CC(char *a1, void **a2, uint8_t *a3, _QWORD *a4)
{
  void *v6;

  if (*a1 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  *(_DWORD *)a3 = 136446210;
  *a4 = v6;
  sub_20E7C56BC(&dword_20E77A000, MEMORY[0x24BDACB70], (uint64_t)a3, "%{public}s", a3);
  if (*a1 < 0)
    operator delete(*a2);
}

void sub_20E80B63C()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_20E7C56C8();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x38u);
}

void sub_20E80B71C()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_20E7C56C8();
  _os_log_error_impl(v0, v1, v2, v3, v4, 2u);
  sub_20E78FB1C();
}

void sub_20E80B758()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwPlatformUtils.cpp", 57, "(idx < (1u << 31)) && \"Buffer id is 31-bit value but idx passed is larger than that. \" \"Overflow!\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B784()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwPlatformUtils.cpp", 54, "(stride < (1u << 16)) && \"Buffer stride is 16-bit value but stride passed is larger than that.\" \"Overflow!\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B7B0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwPlatformUtils.cpp", 51, "(height < (1u << 16)) && \"Buffer height is 16-bit value but height passed is larger than that.\" \"Overflow!\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B7DC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwPlatformUtils.cpp", 48, "(width < (1u << 16)) && \"Buffer width is 16-bit value but width passed is larger than that.\" \"Overflow!\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B808()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwPlatformUtils.cpp", 291, "width * height >= size && \"Buffer for keypoints is too small to contain all keypoints\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B834()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwPlatformUtils.cpp", 289, "width < (1 << 16) && \"The width of the keypointbuffer has to be smaller than 2^16\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B860()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 223, "lacc_buffer_size >= lacc_tahiti_dp_bin_len", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B88C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 270, "input_format == CISP_INPUT_FORMAT_RAW8", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B8B8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 276, "octave == 0", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B8E4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 414, "Unsupported buffer type", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B910()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 369, "FlowType::kFlow1 == flow_ && \"Only valid for flow1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B93C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 372, "FlowType::kFlow1 == flow_ && \"Only valid for flow1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B968()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 377, "FlowType::kFlow1 == flow_ && \"Only valid for flow1\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B994()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 381, "(FlowType::kFlow1 == flow_) || ((FlowType::kFlow2 == flow_) && octave == 0) && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B9C0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 385, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80B9EC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 384, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BA18()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 389, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BA44()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 388, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BA70()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 393, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BA9C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 392, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BAC8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 397, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BAF4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 396, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BB20()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 401, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BB4C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 400, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BB78()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 405, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BBA4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 404, "FlowType::kFlow2 == flow_ && \"Only valid for flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BBD0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 408, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BBFC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 411, "octave == 0 && \"Invalid request\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BC28()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 420, "FlowType::kFlow2 == flow_ && \"Only supported in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BC54()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 448, "FlowType::kFlow2 == flow_ && \"Only supported in flow2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BC80()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwCvdAllConfigurationUtils.h", 137, "HasHardwareFeaturePointsTahiti() && \"Configuration not supported.\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BCAC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 550, "false && \"dmaDescSize not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BCD8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetectionUtils/src/HwKeyHeaderParser.cpp", 357, "(ctx->config.hw_platform != hw::desgen::HwPlatform::kHwStaten) && \"Unsupported HW platform\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BD04()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetectionUtils/src/HwKeyHeaderParser.cpp", 401, "output_buf_address && \"BaseAddress of output buffer could not be obtained\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BD30()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetectionUtils/src/HwKeyHeaderParser.cpp", 397, "kCVReturnSuccess == err && \"Creating CVPixelBuffer failed!\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BD5C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/FeatureDetection/src/KeyEngineUtils.cpp", 86, "(start + block_size * kNumRegionOfInterestBlocks <= dimension) && \"End should be smaller than size\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BD88()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/FeatureDetection/src/KeyEngineUtils.cpp", 87, "block_size >= kMinBlockSize && \"Each block has to be at least 4 pixels big\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BDB4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/FeatureDetection/src/KeyEngineUtils.cpp", 84, "start >= 0 && \"Start should be greater than 0\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BDE0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/FeatureDetection/src/KeyEngineUtils.cpp", 65, "expected_start >= 0 && expected_end > expected_start && expected_end <= dimension", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BE0C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/FeatureDetection/src/KeyEngineUtils.cpp", 81, "(expected_end <= start + kNumRegionOfInterestBlocks * block_size) && \"User requested end of ROI should be in the HW ROI\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BE38()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/FeatureDetection/src/KeyEngineUtils.cpp", 56, "dimension > 0 && \"Input dimension should be greater than 0\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BE64()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/FeatureDetection/src/KeyEngineUtils.cpp", 467, "num_octaves <= static_cast<int32_t>(requested_num_octave)", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BE90(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  char v6;
  void **v7;
  void **v8;
  char *v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  char *v14;

  v4 = (void *)sub_20E7D19B4(a1, a2);
  if (!v6)
  {
    v7 = v5;
    do
    {
      v8 = v3;
      v10 = (char *)*(v3 - 3);
      v3 -= 3;
      v9 = v10;
      if (v10)
      {
        v11 = (char *)*(v8 - 2);
        v12 = v9;
        if (v11 != v9)
        {
          do
          {
            v14 = v11 - 24;
            v13 = (void *)*((_QWORD *)v11 - 3);
            if (v13)
            {
              *((_QWORD *)v11 - 2) = v13;
              operator delete(v13);
            }
            v11 = v14;
          }
          while (v14 != v9);
          v12 = *v3;
        }
        *(v8 - 2) = v9;
        operator delete(v12);
      }
    }
    while (v3 != v2);
    v4 = *v7;
  }
  sub_20E7D19E0(v4);
  sub_20E7D19CC();
}

void sub_20E80BF14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void **v5;
  char v6;
  void **v7;
  void *v8;
  void *v9;

  v4 = (void *)sub_20E7D19B4(a1, a2);
  if (!v6)
  {
    v7 = v5;
    do
    {
      v9 = *(void **)(v3 - 24);
      v3 -= 24;
      v8 = v9;
      if (v9)
        operator delete(v8);
    }
    while (v3 != v2);
    v4 = *v7;
  }
  sub_20E7D19E0(v4);
}

void sub_20E80BF5C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointAndDescriptorMatcher.cpp", 84, "hamming_distance <= 471", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BF88()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include_private/VIO/Hardware/KeyPointAndDescriptorMatcherUtils.h", 40, "hamv_size <= 16", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BFB4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 85, "stripe_id < config_.num_stripes", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80BFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void **v5;
  uint64_t v6;
  char v7;
  void **v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = (void *)sub_20E7D5E90(a1, a2);
  if (!v7)
  {
    v8 = v5;
    v9 = v6;
    do
    {
      v11 = *(void **)(v9 - 24);
      v9 -= 24;
      v10 = v11;
      if (v11)
      {
        *(_QWORD *)(v6 - 16) = v10;
        operator delete(v10);
      }
      v6 = v9;
    }
    while (v9 != v2);
    v4 = *v8;
  }
  *v3 = v2;
  sub_20E7D5E84(v4);
}

void sub_20E80C02C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 166, "stripe_id < config_.num_stripes", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C058()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 368, "set_count <= max_num_sets", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C084()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 359, "set_count <= max_num_sets", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C0B0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ImageProcessing/include/VIO/ImageProcessing/ConvolutionsFixedPoint.h", 848, "dst < dst_end && \"Invalid destination pointer\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C0DC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/GaussianPyramidGeneratorUtils.cpp", 39, "v <= 65280 && \"overflow detected resulting in invalid result\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C108()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KPAndDescriptorGeneratorInterface.cpp", 98, "image_processing_height >= 160 && \"illegal input image size\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C134()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KPAndDescriptorGeneratorInterface.cpp", 97, "image_processing_width >= 160 && \"illegal input image size\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C160()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KPAndDescriptorGeneratorInterface.cpp", 127, "success", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C18C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20E80C220()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KPValidatorAndRefiner.cpp", 57, "score == res_map_cube[1][1][1] && \"score mismatch\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C24C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KPValidatorAndRefiner.cpp", 133, "scale == kp_scale && \"scale mismatch\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C278(uint64_t a1, uint64_t a2)
{
  sub_20E7E4964("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KPValidatorAndRefinerUtils.cpp", a2, "i2 < (1 << 30) && i2 >= -(1 << 30) && \"It is expected that a12*a21 is s31\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C2A0(uint64_t a1, uint64_t a2)
{
  sub_20E7E496C("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KPValidatorAndRefinerUtils.cpp", a2, "i1 < (1 << 30) && i1 >= -(1 << 30) && \"It is expected that a11*a22 is s31\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C2C8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 521, "stripes_config.pared_block_size[octave].X >= 2 && stripes_config.pared_block_size[octave].X <= octave_width", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C2F4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 523, "stripes_config.pared_block_size[octave].Y >= 2 && stripes_config.pared_block_size[octave].Y <= kMaxGridY[octave]", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C320()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 526, "stripes_config.pared_num_blocks[octave].X > 0 && stripes_config.pared_num_blocks[octave].X <= kMaxNumParedGridX[octave]", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C34C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 531, "stripes_config.pared_block_size[octave].X * stripes_config.pared_num_blocks[octave].X >= octave_width", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C378()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 537, "stripes_config.pared_block_size[octave].Y * stripes_config.pared_num_blocks[octave].Y >= octave_height", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C3A4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 542, "stripes_config.pared_grid_num_out[octave] >= 0 && stripes_config.pared_grid_num_out[octave] <= 3", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C3D0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 540, "stripes_config.pared_block_size[octave].Y * (stripes_config.pared_num_blocks[octave].Y - 1) < octave_height", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C3FC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 534, "stripes_config.pared_block_size[octave].X * (stripes_config.pared_num_blocks[octave].X - 1) < octave_width", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C428()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 528, "stripes_config.pared_num_blocks[octave].Y > 0 && stripes_config.pared_num_blocks[octave].Y <= kMaxNumParedGridY", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C454()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 237, "DumpDebugInfo<CollDesgenTraits>( *pImpl_->gaussian_pyr_generator_, *pImpl_->res_map_and_kpc_generator_, *pImpl_->kp_validator_and_refiner_, *pImpl_->kp_to_descriptor_, histogram_per_scale, config_.dump_path.c_str())", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C480()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGenerator.cpp", 232, "DumpDebugInfo<CreteDesgenTraits>( *pImpl_->gaussian_pyr_generator_, *pImpl_->res_map_and_kpc_generator_, *pImpl_->kp_validator_and_refiner_, *pImpl_->kp_to_descriptor_, histogram_per_scale, config_.dump_path.c_str())", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C4AC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 73, "num_scales_minus2 <= kMaxNumOfScalesMinus2 && \"Number of scales minus 2 should be less than or equal to max expected\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C4D8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 71, "num_scales > 2 && \"Number of scales should be > 2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C504()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 137, "laplacian_threshold[k] >= min_score", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C530()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 132, "num_scales_minus2 <= kMaxNumOfScalesMinus2 && \"Number of scales minus 2 should be less than or equal to max expected\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C55C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 130, "num_scales > 2 && \"Number of scales should be > 2\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C588()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 147, "height >= 160 && height <= 8192 && \"Unsupported height, supported range is [160, 8192]\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C5B4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 145, "width >= 160 && width <= 4096 && \"Unsupported width, supported range is [160, 4096]\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C5E0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 160, "octave < 5 && \"Invalid octave\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C60C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 159, "input_dimension <= 8192 && \"Max input dimension allowed is 8192\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C638()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 181, "num_stripes <= kMaxNumStripes && \"Invalid stripe setting\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C664()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorGeneratorUtils.cpp", 233, "config.num_stripes == 1 && \"num_stripes shall be 1 for VGA\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C690(void **a1, void **a2, _QWORD *a3, void **a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v7 = *a1;
  if (v7)
  {
    a3[63] = v7;
    operator delete(v7);
  }
  v8 = *a2;
  if (*a2)
  {
    a3[60] = v8;
    operator delete(v8);
  }
  v9 = (void *)a3[56];
  if (v9)
  {
    a3[57] = v9;
    operator delete(v9);
  }
  v10 = (void *)a3[53];
  if (v10)
  {
    a3[54] = v10;
    operator delete(v10);
  }
  v11 = (void *)a3[50];
  if (v11)
  {
    a3[51] = v11;
    operator delete(v11);
  }
  v12 = (void *)a3[47];
  if (v12)
  {
    a3[48] = v12;
    operator delete(v12);
  }
  v13 = (void *)a3[44];
  if (v13)
  {
    a3[45] = v13;
    operator delete(v13);
  }
  v14 = (void *)a3[41];
  if (v14)
  {
    a3[42] = v14;
    operator delete(v14);
  }
  v15 = (void *)a3[38];
  if (v15)
  {
    a3[39] = v15;
    operator delete(v15);
  }
  v16 = (void *)a3[35];
  if (v16)
  {
    a3[36] = v16;
    operator delete(v16);
  }
  v17 = (void *)a3[32];
  if (v17)
  {
    a3[33] = v17;
    operator delete(v17);
  }
  v18 = (void *)a3[29];
  if (v18)
  {
    a3[30] = v18;
    operator delete(v18);
  }
  v19 = (void *)a3[26];
  if (v19)
  {
    a3[27] = v19;
    operator delete(v19);
  }
  v20 = (void *)a3[23];
  if (v20)
  {
    a3[24] = v20;
    operator delete(v20);
  }
  v21 = (void *)a3[20];
  if (v21)
  {
    a3[21] = v21;
    operator delete(v21);
  }
  v22 = (void *)a3[17];
  if (v22)
  {
    a3[18] = v22;
    operator delete(v22);
  }
  v23 = (void *)a3[14];
  if (v23)
  {
    a3[15] = v23;
    operator delete(v23);
  }
  v24 = *a4;
  if (*a4)
  {
    a3[12] = v24;
    operator delete(v24);
  }
}

void sub_20E80C7E8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorMatcher.cpp", 142, "bin_i == bin && \"bin mismatch\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C814()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorMatcher.cpp", 416, "MB1.desc_index >= 0 && MB1.desc_index < 4096 && \"DesMatch: Invalid index  \"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C840()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointAndDescriptorMatcher.cpp", 285, "hamming_distance <= 471", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C86C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include_private/VIO/Hardware/KeyPointAndDescriptorMatcherUtils.h", 69, "bin_i == bin && \"bin mismatch\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C898()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointDescriptorStore.cpp", 82, "final_num_keypoints <= max_valid_idx", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C8C4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointDescriptorStore.cpp", 87, "id <= max_valid_idx", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C8F0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointToDescriptor.cpp", 259, "features.Size() == (minima_cnt + maxima_cnt)", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C91C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/KeyPointToDescriptor.cpp", 225, "orientation >= 0 && orientation < 256 && \"orientation overflow\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C948()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/AppleUtil/src/CvPixelBufferTransferSession.cpp", 64, "input_image && output_image", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C974()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/AppleUtil/src/CvPixelBufferUtils.cpp", 157, "img", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C9A0()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/AppleUtil/src/CvPixelBufferUtils.cpp", 187, "pbType == kCVPixelFormatType_32BGRA || pbType == kCVPixelFormatType_444YpCbCr8BiPlanarFullRange", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C9CC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/AppleUtil/src/CvPixelBufferUtils.cpp", 178, "k16BitDepth && \"Requested 8-bit image, but buffer is 16-bit\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80C9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient: Invalid Input xpc object!!\n", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CA2C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/VisionHWAccelerationServicesUtils/src/VisionHWAServicesXPCUtils.cpp", 65, "(conn_info->conn == nullptr) && \"Cannot create new XPC connection -- old connection is non-NULL\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E80CA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7FB5DC(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient: Error %s received from daemon", a5, a6, a7, a8, 2u);
  sub_20E7A3560();
}

void sub_20E80CAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "ReplyChecker error: XPC connection invalid", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "ReplyChecker error: XPC connection interrupted", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "ReplyChecker error: XPC connection termination imminent", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CB6C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  xpc_dictionary_get_string(a1, (const char *)*MEMORY[0x24BDACF40]);
  sub_20E7FB5DC(&dword_20E77A000, MEMORY[0x24BDACB70], v1, "ReplyChecker XPC error: %s", v2, v3, v4, v5, 2u);
  sub_20E7A3560();
}

void sub_20E80CBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient error: malformed reply from daemon", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient: Invalid xpc connection!!\n", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "Failed to obtain IOSurface from CVPixelBuffer", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "Failed to create XPC object from IOSurface", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CCB8()
{
  int v0;
  int v1[5];
  __int16 v2;
  int v3;

  sub_20E7FB5EC(*MEMORY[0x24BDAC8D0]);
  v1[0] = 136315650;
  sub_20E7FB604();
  v2 = 1024;
  v3 = v0;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s %s, error %d", (uint8_t *)v1, 0x1Cu);
}

void sub_20E80CD48()
{
  int v0[6];

  sub_20E7FB5EC(*MEMORY[0x24BDAC8D0]);
  v0[0] = 136315394;
  sub_20E7FB604();
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%s %s: file does not exist.", (uint8_t *)v0, 0x16u);
  sub_20E7A3560();
}

void sub_20E80CDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient: Invalid process buffer info\n", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient: Invalid cmdBufSurfaceIO!!\n", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient: Invalid ioXPCSurface!!\n", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CE64(int a1)
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "VisionHWAClient: Invalid Buffer list size %d", (uint8_t *)v1, 8u);
  sub_20E78FB1C();
}

void sub_20E80CEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient: Invalid cmdBufSurfaceAction!!\n", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient: Invalid actionXPCSurface!!\n", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient: Invalid cmdBufSurfaceOperation!!\n", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient: Invalid operationXPCSurface!!\n", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient: Invalid cmdBufSurfaceStats!!\n", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80CFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient: Invalid statsXPCSurface!!\n", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80D014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "VisionHWAClient: Invalid xpc connection!!\n", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80D048(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20E80D068(void **a1, char *a2, void **a3)
{
  char *v5;
  void *v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v5 = (char *)*a1;
  v6 = a2;
  if (v5 != a2)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 -= 16;
    }
    while (v5 != a2);
    v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

void sub_20E80D0F8()
{
  uint64_t v0;
  uint8_t v1[8];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  sub_20E7A35A0();
  sub_20E8051B0(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "Unable to unregister the device notification callback. Status returned: %d", v1);
  sub_20E78FB1C();
}

void sub_20E80D164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "HxISPDevice: notification not handled", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80D198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_20E7A352C(&dword_20E77A000, MEMORY[0x24BDACB70], a3, "HxISPDevice status callback was not set up", a5, a6, a7, a8, 0);
  sub_20E78FB1C();
}

void sub_20E80D1CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E7A35A0();
  sub_20E8051A0(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "HxISPDevice unable to create a device (error code 0x%08x)", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80D234(uint8_t *a1, int a2, _DWORD *a3)
{
  *(_DWORD *)a1 = 67109120;
  *a3 = a2;
  sub_20E8051B0(&dword_20E77A000, MEMORY[0x24BDACB70], (uint64_t)a3, "HxISPDevice createDevice() timed out -- %d retries remaining.", a1);
}

void sub_20E80D274()
{
  uint64_t v0;
  uint8_t v1[8];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  sub_20E7A35A0();
  sub_20E8051B0(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "Error: Failed to successfully invalidate session %d", v1);
  sub_20E78FB1C();
}

void sub_20E80D2E0()
{
  uint64_t v0;
  uint8_t v1[8];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  sub_20E7A35A0();
  sub_20E8051B0(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "Failed to successfully complete outstanding requests %d", v1);
  sub_20E78FB1C();
}

void sub_20E80D34C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E7A35A0();
  sub_20E8051A0(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "ISP driver reported error %d for processing buffer.", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80D3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E7A35A0();
  sub_20E8051A0(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "ISP driver reported error %d for processing buffer. Max number of retries reached.", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

void sub_20E80D41C(uint8_t *a1, int a2, _DWORD *a3)
{
  *(_DWORD *)a1 = 67109120;
  *a3 = a2;
  sub_20E8051B0(&dword_20E77A000, MEMORY[0x24BDACB70], (uint64_t)a3, "ISP temporarily unavailable -- retrying. Driver reported code %d.", a1);
}

void sub_20E80D45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_20E7A35A0();
  sub_20E8051A0(&dword_20E77A000, MEMORY[0x24BDACB70], v0, "CompleteBuffers failed with error code %d", v1, v2, v3, v4, v5);
  sub_20E78FB1C();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x24BDBBDC0](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x24BDBBE00](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x24BDBBE10](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x24BDBC558](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

uint64_t CMBaseObjectGetVTable()
{
  return MEMORY[0x24BDC0090]();
}

uint64_t CMNotificationCenterAddListener()
{
  return MEMORY[0x24BDC0228]();
}

uint64_t CMNotificationCenterGetDefaultLocalCenter()
{
  return MEMORY[0x24BDC0230]();
}

uint64_t CMNotificationCenterRemoveListener()
{
  return MEMORY[0x24BDC0248]();
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5248](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5250](allocator, width, height, *(_QWORD *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x24BDC5278](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDC5288](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC5290](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC5298](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52A0](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52B0](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52B8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x24BDC52C0](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D0](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52E8](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52F0](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x24BDC5308](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x24BDC5318](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5320](allocator, pixelBufferPool, pixelBufferOut);
}

void CVPixelBufferPoolRelease(CVPixelBufferPoolRef pixelBufferPool)
{
  MEMORY[0x24BDC5358](pixelBufferPool);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x24BDC5398](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x24BDC53A0](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x24BDC53B0](pixelBuffer, unlockFlags);
}

uint64_t FigCaptureDeviceGetFigBaseObject()
{
  return MEMORY[0x24BE10370]();
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x24BDD8988](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDD89A8](name);
}

xpc_object_t IOSurfaceCreateXPCObject(IOSurfaceRef aSurface)
{
  return (xpc_object_t)MEMORY[0x24BDD8B60](aSurface);
}

uint64_t MGGetProductType()
{
  return MEMORY[0x24BED8488]();
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x24BDF9168](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
  MEMORY[0x24BDF9170](session);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x24BDF9178](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x24BDF91A8](session, propertyKey, propertyValue);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x24BEDA9B0](this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

{
  return MEMORY[0x24BEDB068]();
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA00](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB50](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB68](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC20](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x24BEDACC0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF60]();
}

{
  return MEMORY[0x24BEDAF78]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB1E8](retstr, a2, __ec);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x24BEDB3E0]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x24BEDB3F0]();
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return MEMORY[0x24BEDB3F8](__t);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24C9A81A0();
}

void operator delete(void *__p)
{
  off_24C9A81A8(__p);
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  off_24C9A81B0(__p, a2);
}

void operator delete(void *__p, std::align_val_t a2)
{
  off_24C9A81B8(__p, a2);
}

uint64_t operator delete()
{
  return off_24C9A81C0();
}

uint64_t operator new[]()
{
  return off_24C9A81C8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24C9A81D0(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_24C9A81D8(__sz, a2);
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  return (void *)off_24C9A81E0(__sz, a2);
}

uint64_t operator new()
{
  return off_24C9A81E8();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x24BDAC898](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x24BDAE280](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x24BDAE440](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x24BDAE780](a1, a2);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x24BDAE958]();
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x24BDAEA30](*(_QWORD *)&__e, __x);
  return result;
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x24BDAEA98](a1);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x24BDAEAA0](a1, a2);
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAD8](__x);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x24BDAEAE0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAF688](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAF690](a1, a2);
  return result;
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x24BDAFF28](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFFA8](__s, *(_QWORD *)&__c);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x24BDB02E8](*(_QWORD *)&a1);
}

vImage_Error vImageBuffer_Init(vImage_Buffer *buf, vImagePixelCount height, vImagePixelCount width, uint32_t pixelBits, vImage_Flags flags)
{
  return MEMORY[0x24BDB3630](buf, height, width, *(_QWORD *)&pixelBits, *(_QWORD *)&flags);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x24BDB0448](__str, __size, __format, a4);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x24BDB0718](connection);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x24BDB0740](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x24BDB0798](connection);
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x24BDB07B8](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x24BDB07C8](connection, handler);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x24BDB08D0]();
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x24BDB0908](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x24BDB0950](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x24BDB0958](xdict, key);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x24BDB09C8](xdict, key, string);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x24BDB09D0](xdict, key, value);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x24BDB09E0](xdict, key, value);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x24BDB0A70](object);
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x24BDB0AE0](object);
}

