uint64_t CVHWAFeatureExtractionCreate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  if (!a1)
    return 2;
  v2 = operator new(0x18uLL, MEMORY[0x24BEDB6B8]);
  if (!v2)
    return 3;
  v3 = v2;
  result = sub_20E79F6BC(v2);
  if ((_DWORD)result)
    return 1;
  *a1 = v3;
  return result;
}

uint64_t CVHWAFeatureExtractionRelease(uint64_t a1)
{
  if (!a1)
    return 4;
  if (*(_BYTE *)(a1 + 16))
  {
    if (sub_20E7E1D2C(*(_QWORD *)(a1 + 8)))
      return 1;
  }
  else if (sub_20E79F858(*(_QWORD *)a1))
  {
    return 1;
  }
  MEMORY[0x212BC47D4](a1, 0x1020C40A95220FALL);
  return 0;
}

uint64_t CVHWAFeatureExtractionInitDirect(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;

  if (!a1)
    return 4;
  if (!a2)
    return 2;
  v4 = *(unsigned __int8 *)(a2 + 488);
  *(_BYTE *)(a1 + 16) = v4;
  if (!v4)
    return !sub_20E7C5870((int *)(a2 + 64)) || sub_20E79F9FC(*(_QWORD *)a1, (__int128 *)a2);
  v5 = (uint64_t *)(a1 + 8);
  return sub_20E7E1CAC((_QWORD *)(a1 + 8)) || sub_20E7E1DC8(*v5, (int *)(a2 + 184));
}

uint64_t CVHWAFeatureExtractionInitDirectWithLacc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t result;
  _QWORD v10[3];
  int v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  if (!a1)
    return 4;
  if (!a2)
    return 2;
  if (*(_BYTE *)(a1 + 16))
  {
    sub_20E783BA0(&v17);
    if (**(int **)(v17 + 56) <= 4)
    {
      v10[0] = &v17;
      v10[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v10[2] = std::chrono::system_clock::now().__d_.__rep_;
      v11 = 4;
      v12 = "unknown file";
      v13 = 153;
      v15 = 0;
      v16 = 0;
      v14 = "unknown function";
      sub_20E7FBAC0((uint64_t)v10, "%s has no effect in swproxy", "CVHWAFeatureExtractionInitDirectWithLacc");
      sub_20E783C94((uint64_t)v10);
      sub_20E783C94((uint64_t)v10);
      v6 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  if (!sub_20E7C5870((int *)(a2 + 64)))
    return 1;
  *(_QWORD *)(a2 + 168) = a3;
  result = sub_20E79F9FC(*(_QWORD *)a1, (__int128 *)a2);
  if ((_DWORD)result)
    return 1;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

void sub_20E783B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E783BA0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  _QWORD *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A49300);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A49300))
  {
    sub_20E7FB67C(&v5);
    sub_20E78570C(__p, "cv3d.vio");
    sub_20E7FE658(&v5, (uint64_t)__p, &qword_254A492F8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A49300);
  }
  *a1 = qword_254A492F8;
}

void sub_20E783C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A49300);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A49300);
  _Unwind_Resume(a1);
}

void sub_20E783C94(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v1 = *(uint64_t **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
    {
      v4 = (_QWORD *)(*v1 + 16);
      if (*(char *)(*v1 + 39) < 0)
        v4 = (_QWORD *)*v4;
      v5 = *(_OWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 24);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_DWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(std::__shared_weak_count **)(a1 + 64);
      v22 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v23 = v4;
      v24 = v5;
      v25 = v6;
      v26 = v7;
      v27 = v8;
      v28 = v9;
      v29 = v3;
      v30 = v10;
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      if (v6 >= **(_DWORD **)(*v1 + 56))
      {
        sub_20E7FE5AC(*v1, (uint64_t)&v23);
        v10 = v30;
      }
      if (v10)
      {
        v15 = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v22)
      {
        v17 = (unint64_t *)&v22->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v19 = *(std::__shared_weak_count **)(a1 + 64);
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
}

void sub_20E783E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E785854((uint64_t)va1);
  sub_20E7858BC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E783E38(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_20E783C94(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t CVHWAFeatureExtractionProcess(uint64_t a1, __CVBuffer *a2, CVPixelBufferRef *a3)
{
  uint64_t result;
  CVPixelBufferRef v6;
  __CVBuffer *v7;

  v7 = a2;
  if (!a1)
    return 4;
  if (*(_BYTE *)(a1 + 16))
  {
    if (!sub_20E7E2358(*(_QWORD *)(a1 + 8), &v7))
    {
      sub_20E7CAEA4(*(int64x2_t **)(a1 + 8), a3);
      return 0;
    }
    return 1;
  }
  v6 = 0;
  result = sub_20E7A01C0(*(_QWORD ***)a1, &v7, &v6);
  if ((_DWORD)result)
    return 1;
  *a3 = v6;
  return result;
}

uint64_t CVHWAFeatureExtractionProcessKeyOutputs(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v8[3];
  int v9;
  const char *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;

  if (!a1)
    return 4;
  if (*(_BYTE *)(a1 + 16))
  {
    sub_20E783BA0(&v15);
    if (**(int **)(v15 + 56) <= 4)
    {
      v8[0] = &v15;
      v8[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v8[2] = std::chrono::system_clock::now().__d_.__rep_;
      v9 = 4;
      v10 = "unknown file";
      v11 = 216;
      v13 = 0;
      v14 = 0;
      v12 = "unknown function";
      sub_20E7FBAC0((uint64_t)v8, "%s has no effect in swproxy", "CVHWAFeatureExtractionProcessKeyOutputs");
      sub_20E783C94((uint64_t)v8);
      sub_20E783C94((uint64_t)v8);
      v4 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  return sub_20E7A0048(*(_QWORD *)a1, a2, 0) != 0;
}

void sub_20E78408C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionProcessHwOutputs(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v8[3];
  int v9;
  const char *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;

  if (!a1)
    return 4;
  if (*(_BYTE *)(a1 + 16))
  {
    sub_20E783BA0(&v15);
    if (**(int **)(v15 + 56) <= 4)
    {
      v8[0] = &v15;
      v8[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v8[2] = std::chrono::system_clock::now().__d_.__rep_;
      v9 = 4;
      v10 = "unknown file";
      v11 = 234;
      v13 = 0;
      v14 = 0;
      v12 = "unknown function";
      sub_20E7FBAC0((uint64_t)v8, "%s has no effect in swproxy", "CVHWAFeatureExtractionProcessHwOutputs");
      sub_20E783C94((uint64_t)v8);
      sub_20E783C94((uint64_t)v8);
      v4 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  return sub_20E7A0048(*(_QWORD *)a1, a2, 0) != 0;
}

void sub_20E7841D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionProcessHwOutputsToOutBuf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[3];
  int v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  if (!a1)
    return 4;
  if (*(_BYTE *)(a1 + 16))
  {
    sub_20E783BA0(&v17);
    if (**(int **)(v17 + 56) <= 4)
    {
      v10[0] = &v17;
      v10[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v10[2] = std::chrono::system_clock::now().__d_.__rep_;
      v11 = 4;
      v12 = "unknown file";
      v13 = 252;
      v15 = 0;
      v16 = 0;
      v14 = "unknown function";
      sub_20E7FBAC0((uint64_t)v10, "%s has no effect in swproxy", "CVHWAFeatureExtractionProcessHwOutputsToOutBuf");
      sub_20E783C94((uint64_t)v10);
      sub_20E783C94((uint64_t)v10);
      v6 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  return sub_20E7A0048(*(_QWORD *)a1, a2, a3) != 0;
}

void sub_20E784320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionInitGPWithSession(uint64_t a1, uint64_t a2, unint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t result;
  _QWORD v10[3];
  int v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  if (!a1)
    return 4;
  if (!a2)
    return 2;
  if (*(_BYTE *)(a1 + 16))
  {
    sub_20E783BA0(&v17);
    if (**(int **)(v17 + 56) <= 4)
    {
      v10[0] = &v17;
      v10[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v10[2] = std::chrono::system_clock::now().__d_.__rep_;
      v11 = 4;
      v12 = "unknown file";
      v13 = 280;
      v15 = 0;
      v16 = 0;
      v14 = "unknown function";
      sub_20E7FBAC0((uint64_t)v10, "%s has no effect in swproxy", "CVHWAFeatureExtractionInitGPWithSession");
      sub_20E783C94((uint64_t)v10);
      sub_20E783C94((uint64_t)v10);
      v6 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
  if (!sub_20E7C5870((int *)(a2 + 64)))
    return 1;
  result = sub_20E79F890(*(_QWORD *)a1, a2, a3);
  if ((_DWORD)result)
    return 1;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

void sub_20E7844AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionInitGP(uint64_t a1, uint64_t a2)
{
  return CVHWAFeatureExtractionInitGPWithSession(a1, a2, 0);
}

CVPixelBufferRef CVHWAFeatureExtractionGetActionBuffer(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E8054DC();
  if (!*(_BYTE *)(a1 + 16))
    return sub_20E79FEF8(*(_QWORD *)a1);
  sub_20E783BA0(&v13);
  if (**(int **)(v13 + 56) > 4)
    return sub_20E79FEF8(*(_QWORD *)a1);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 309;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetActionBuffer");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return sub_20E79FEF8(*(_QWORD *)a1);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20E79FEF8(*(_QWORD *)a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20E79FEF8(*(_QWORD *)a1);
}

void sub_20E7845E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

CVPixelBufferRef CVHWAFeatureExtractionGetOperationBuffer(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805508();
  if (!*(_BYTE *)(a1 + 16))
    return sub_20E79FF50(*(_QWORD *)a1);
  sub_20E783BA0(&v13);
  if (**(int **)(v13 + 56) > 4)
    return sub_20E79FF50(*(_QWORD *)a1);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 318;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetOperationBuffer");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return sub_20E79FF50(*(_QWORD *)a1);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20E79FF50(*(_QWORD *)a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20E79FF50(*(_QWORD *)a1);
}

void sub_20E784714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetActionSizeInBytes(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805534();
  if (!*(_BYTE *)(a1 + 16))
    return sub_20E79FF34(*(_QWORD *)a1);
  sub_20E783BA0(&v13);
  if (**(int **)(v13 + 56) > 4)
    return sub_20E79FF34(*(_QWORD *)a1);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 327;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetActionSizeInBytes");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return sub_20E79FF34(*(_QWORD *)a1);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20E79FF34(*(_QWORD *)a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20E79FF34(*(_QWORD *)a1);
}

void sub_20E784844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetOperationSizeInBytes(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805560();
  if (!*(_BYTE *)(a1 + 16))
    return sub_20E79FF8C(*(_QWORD *)a1);
  sub_20E783BA0(&v13);
  if (**(int **)(v13 + 56) > 4)
    return sub_20E79FF8C(*(_QWORD *)a1);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 336;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetOperationSizeInBytes");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return sub_20E79FF8C(*(_QWORD *)a1);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20E79FF8C(*(_QWORD *)a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20E79FF8C(*(_QWORD *)a1);
}

void sub_20E784974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetOutputSizeInBytes(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E80558C();
  if (!*(_BYTE *)(a1 + 16))
    return sub_20E79FFA8(*(_QWORD *)a1);
  sub_20E783BA0(&v13);
  if (**(int **)(v13 + 56) > 4)
    return sub_20E79FFA8(*(_QWORD *)a1);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 345;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetOutputSizeInBytes");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return sub_20E79FFA8(*(_QWORD *)a1);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20E79FFA8(*(_QWORD *)a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20E79FFA8(*(_QWORD *)a1);
}

void sub_20E784AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetKeypointAndDescriptorSizeInBytes(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E8055B8();
  if (!*(_BYTE *)(a1 + 16))
    return sub_20E79FFC4(*(_QWORD *)a1);
  sub_20E783BA0(&v13);
  if (**(int **)(v13 + 56) > 4)
    return sub_20E79FFC4(*(_QWORD *)a1);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 355;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetKeypointAndDescriptorSizeInBytes");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return sub_20E79FFC4(*(_QWORD *)a1);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20E79FFC4(*(_QWORD *)a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20E79FFC4(*(_QWORD *)a1);
}

void sub_20E784BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetOutputReserveSizeInBytes(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E8055E4();
  if (!*(_BYTE *)(a1 + 16))
    return sub_20E79FFC4(*(_QWORD *)a1);
  sub_20E783BA0(&v13);
  if (**(int **)(v13 + 56) > 4)
    return sub_20E79FFC4(*(_QWORD *)a1);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 364;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetOutputReserveSizeInBytes");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return sub_20E79FFC4(*(_QWORD *)a1);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20E79FFC4(*(_QWORD *)a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20E79FFC4(*(_QWORD *)a1);
}

void sub_20E784D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

CVPixelBufferRef CVHWAFeatureExtractionGetLaccBuffer(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805610();
  if (!*(_BYTE *)(a1 + 16))
    return sub_20E79FFE0(*(_QWORD *)a1);
  sub_20E783BA0(&v13);
  if (**(int **)(v13 + 56) > 4)
    return sub_20E79FFE0(*(_QWORD *)a1);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 373;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetLaccBuffer");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return sub_20E79FFE0(*(_QWORD *)a1);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20E79FFE0(*(_QWORD *)a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20E79FFE0(*(_QWORD *)a1);
}

void sub_20E784E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetLaccSizeInBytes(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E80563C();
  if (!*(_BYTE *)(a1 + 16))
    return sub_20E7A002C(*(_QWORD *)a1);
  sub_20E783BA0(&v13);
  if (**(int **)(v13 + 56) > 4)
    return sub_20E7A002C(*(_QWORD *)a1);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 382;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetLaccSizeInBytes");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return sub_20E7A002C(*(_QWORD *)a1);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20E7A002C(*(_QWORD *)a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20E7A002C(*(_QWORD *)a1);
}

void sub_20E784F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetDynamicThresholdingEnable(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805668();
  if (!*(_BYTE *)(a1 + 16))
    return sub_20E7A0444(*(_QWORD *)a1);
  sub_20E783BA0(&v13);
  if (**(int **)(v13 + 56) > 4)
    return sub_20E7A0444(*(_QWORD *)a1);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 391;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetDynamicThresholdingEnable");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return sub_20E7A0444(*(_QWORD *)a1);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20E7A0444(*(_QWORD *)a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20E7A0444(*(_QWORD *)a1);
}

void sub_20E785094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetDynamicThresholdingTargetKeypointsConfigCount(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805694();
  if (!*(_BYTE *)(a1 + 16))
    return sub_20E7A0460(*(_QWORD *)a1);
  sub_20E783BA0(&v13);
  if (**(int **)(v13 + 56) > 4)
    return sub_20E7A0460(*(_QWORD *)a1);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 400;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetDynamicThresholdingTargetKeypointsConfigCount");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return sub_20E7A0460(*(_QWORD *)a1);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20E7A0460(*(_QWORD *)a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20E7A0460(*(_QWORD *)a1);
}

void sub_20E7851C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetDynamicThresholdingTargetKeypointsAtIndex(uint64_t a1, unsigned int a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v8[3];
  int v9;
  const char *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;

  if (!a1)
    sub_20E8056C0();
  if (*(_BYTE *)(a1 + 16))
  {
    sub_20E783BA0(&v15);
    if (**(int **)(v15 + 56) <= 4)
    {
      v8[0] = &v15;
      v8[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v8[2] = std::chrono::system_clock::now().__d_.__rep_;
      v9 = 4;
      v10 = "unknown file";
      v11 = 409;
      v13 = 0;
      v14 = 0;
      v12 = "unknown function";
      sub_20E7FBAC0((uint64_t)v8, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetDynamicThresholdingTargetKeypointsAtIndex");
      sub_20E783C94((uint64_t)v8);
      sub_20E783C94((uint64_t)v8);
      v4 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  if (a2 >= 9)
    sub_20E8056EC();
  return sub_20E7A0478(*(_QWORD *)a1, a2);
}

void sub_20E7852F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetDynamicThresholdingMaxKeypointsConfigCount(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805718();
  if (!*(_BYTE *)(a1 + 16))
    return sub_20E7A04A4(*(_QWORD *)a1);
  sub_20E783BA0(&v13);
  if (**(int **)(v13 + 56) > 4)
    return sub_20E7A04A4(*(_QWORD *)a1);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 421;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetDynamicThresholdingMaxKeypointsConfigCount");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return sub_20E7A04A4(*(_QWORD *)a1);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20E7A04A4(*(_QWORD *)a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20E7A04A4(*(_QWORD *)a1);
}

void sub_20E785428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetDynamicThresholdingMaxKeypointsAtIndex(uint64_t a1, unsigned int a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v8[3];
  int v9;
  const char *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;

  if (!a1)
    sub_20E805744();
  if (*(_BYTE *)(a1 + 16))
  {
    sub_20E783BA0(&v15);
    if (**(int **)(v15 + 56) <= 4)
    {
      v8[0] = &v15;
      v8[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v8[2] = std::chrono::system_clock::now().__d_.__rep_;
      v9 = 4;
      v10 = "unknown file";
      v11 = 430;
      v13 = 0;
      v14 = 0;
      v12 = "unknown function";
      sub_20E7FBAC0((uint64_t)v8, "%s has no effect in swproxy", "CVHWAFeatureExtractionGetDynamicThresholdingMaxKeypointsAtIndex");
      sub_20E783C94((uint64_t)v8);
      sub_20E783C94((uint64_t)v8);
      v4 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  if (a2 >= 9)
    sub_20E805770();
  return sub_20E7A04BC(*(_QWORD *)a1, a2);
}

void sub_20E78555C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionUpdateConfig(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v8[3];
  int v9;
  const char *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;

  if (!a1)
    return 4;
  if (!a2)
    return 2;
  if (*(_BYTE *)(a1 + 16))
  {
    sub_20E783BA0(&v15);
    if (**(int **)(v15 + 56) <= 4)
    {
      v8[0] = &v15;
      v8[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v8[2] = std::chrono::system_clock::now().__d_.__rep_;
      v9 = 4;
      v10 = "unknown file";
      v11 = 450;
      v13 = 0;
      v14 = 0;
      v12 = "unknown function";
      sub_20E7FBAC0((uint64_t)v8, "%s has no effect in swproxy", "CVHWAFeatureExtractionUpdateConfig");
      sub_20E783C94((uint64_t)v8);
      sub_20E783C94((uint64_t)v8);
      v4 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  return sub_20E7A04E8(*(_QWORD ***)a1, a2) != 0;
}

void sub_20E7856BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E78570C(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E7857BC();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_20E7857BC()
{
  sub_20E7857D0("basic_string");
}

void sub_20E7857D0(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_20E785820(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C9A8138, MEMORY[0x24BEDAAF0]);
}

void sub_20E78580C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_20E785820(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void sub_20E785844(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_20E785854(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20E7858BC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigCreateWithPreset(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v26[32];
  _BYTE v27[48];
  _BYTE v28[64];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[25];
  void *__p;
  _BYTE v34[15];
  _BYTE v35[17];
  __int128 v36;
  _BYTE v37[32];
  _BYTE v38[176];
  int v39;
  char v40;
  _BYTE v41[7];
  __int16 v42;
  char v43;
  __int16 v44;
  char v45;
  _OWORD v46[5];
  _BYTE v47[22];
  _BYTE v48[15];
  _BYTE v49[39];
  _BYTE v50[10];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  strcpy(&v27[8], "\n");
  *(_QWORD *)&v27[10] = 0xB000901010100;
  *(_WORD *)&v27[18] = 3;
  *(_OWORD *)&v27[20] = xmmword_20E80DDF0;
  v27[36] = 1;
  *(_DWORD *)&v27[40] = 0;
  *(_DWORD *)&v27[43] = 0;
  *(_QWORD *)v28 = 1061997773;
  v28[8] = 0;
  *(_DWORD *)&v28[9] = 65537;
  *(_DWORD *)&v28[48] = 1065353216;
  *(_OWORD *)&v28[16] = xmmword_20E80DE40;
  *(_OWORD *)&v28[32] = unk_20E80DE50;
  v28[52] = 1;
  *(_QWORD *)&v28[56] = 0x3F00000041A00000;
  *(_QWORD *)&v29 = 0xB43E4CCCCDLL;
  DWORD2(v29) = 0;
  BYTE12(v29) = 0;
  LODWORD(v30) = 2;
  WORD2(v30) = 0;
  *((_QWORD *)&v30 + 1) = 0;
  v31 = 0xDEC000005CCLL;
  *(_DWORD *)v32 = 2;
  v32[4] = 0;
  *(int64x2_t *)&v32[8] = vdupq_n_s64(0x280uLL);
  v32[24] = 0;
  v35[0] = 5;
  strcpy((char *)&__p, "/tmp/");
  v35[1] = 1;
  *(_QWORD *)&v35[5] = 0x90000002DLL;
  *(_QWORD *)&v36 = 5000;
  BYTE8(v36) = 1;
  HIDWORD(v36) = 1061997773;
  v37[0] = 0;
  *(int64x2_t *)&v37[8] = vdupq_n_s64(1uLL);
  *(_QWORD *)&v37[24] = 5;
  *(_WORD *)v38 = 256;
  *(_WORD *)&v38[104] = 0;
  *(_OWORD *)&v38[108] = xmmword_20E80DE00;
  *(_OWORD *)&v38[124] = xmmword_20E80DE10;
  *(_OWORD *)&v38[140] = xmmword_20E80DE64;
  *(_OWORD *)&v38[156] = unk_20E80DE74;
  *(_DWORD *)&v38[172] = 0x4000;
  v39 = 1045220557;
  v40 = 0;
  if (kCVHWAConfigPresetMobileSfM == a2)
  {
    if (!sub_20E7C5844())
    {
      v3 = 7;
      if ((v35[0] & 0x80) != 0)
        goto LABEL_20;
      return v3;
    }
    *(_DWORD *)&v50[3] = 0;
    *(_DWORD *)&v50[6] = 0;
    *(_DWORD *)&v49[35] = 1065353216;
    *(_OWORD *)&v49[3] = xmmword_20E80DE40;
    *(_OWORD *)&v49[19] = unk_20E80DE50;
    *(_QWORD *)v26 = 0x96000000C80;
    *(_DWORD *)&v26[8] = 3200;
    *(_QWORD *)&v26[12] = 0;
    *(_WORD *)&v26[20] = 300;
    v26[22] = -1;
    *(_QWORD *)&v26[24] = 0x138800004268;
    *(_QWORD *)v27 = 0xA000500010001;
    strcpy(&v27[8], "\n");
    *(_QWORD *)&v27[10] = 0xB000901010101;
    *(_WORD *)&v27[18] = 3;
    *(_OWORD *)&v27[20] = xmmword_20E80DE20;
    v27[36] = 2;
    *(_QWORD *)&v27[37] = *(unsigned int *)v50;
    *(_WORD *)&v27[45] = 0;
    *(_QWORD *)v28 = 1061997773;
    v28[8] = 1;
    *(_DWORD *)&v28[9] = 0;
    *(_OWORD *)&v28[13] = *(_OWORD *)v49;
    *(_OWORD *)&v28[29] = *(_OWORD *)&v49[16];
    *(_QWORD *)&v28[44] = *(_QWORD *)&v49[31];
    v28[52] = 1;
    *(_QWORD *)&v28[56] = 0x3F00000041A00000;
    *(_QWORD *)&v29 = 0xB43E4CCCCDLL;
    BYTE8(v29) = 1;
    *(_DWORD *)((char *)&v29 + 9) = 0x1000000;
    LODWORD(v30) = 2;
    WORD2(v30) = 0;
    *((_QWORD *)&v30 + 1) = 0;
    v31 = 0xDEC000005CCLL;
    *(_DWORD *)v32 = 2;
    v32[4] = 0;
    *(int64x2_t *)&v32[8] = vdupq_n_s64(0x280uLL);
    v32[24] = 0;
    if ((v35[0] & 0x80000000) != 0)
      operator delete(__p);
    __p = (void *)0x2F706D742FLL;
    *(_QWORD *)v34 = *(_QWORD *)v48;
    *(_QWORD *)&v34[7] = *(_QWORD *)&v48[7];
    *(_WORD *)v35 = 261;
    *(_WORD *)&v35[2] = v44;
    v35[4] = v45;
    *(_QWORD *)&v35[5] = 0x90000002DLL;
    *(_QWORD *)&v36 = 5000;
    BYTE8(v36) = 1;
    *(_WORD *)((char *)&v36 + 9) = v42;
    BYTE11(v36) = v43;
    HIDWORD(v36) = 1061997773;
    v37[0] = 0;
    *(_DWORD *)&v37[1] = *(_DWORD *)v41;
    *(_DWORD *)&v37[4] = *(_DWORD *)&v41[3];
    *(int64x2_t *)&v37[8] = vdupq_n_s64(1uLL);
    *(_QWORD *)&v37[24] = 5;
    *(_WORD *)v38 = 256;
    *(_OWORD *)&v38[50] = v46[3];
    *(_OWORD *)&v38[66] = v46[4];
    *(_OWORD *)&v38[82] = *(_OWORD *)v47;
    *(_OWORD *)&v38[2] = v46[0];
    *(_OWORD *)&v38[18] = v46[1];
    *(_OWORD *)&v38[34] = v46[2];
    *(_QWORD *)&v38[96] = *(_QWORD *)&v47[14];
    *(_WORD *)&v38[104] = 0;
    *(_OWORD *)&v38[108] = xmmword_20E80DE00;
    *(_OWORD *)&v38[124] = xmmword_20E80DE10;
    *(_DWORD *)&v38[172] = 0x4000;
    *(_OWORD *)&v38[140] = xmmword_20E80DE64;
    *(_OWORD *)&v38[156] = unk_20E80DE74;
    goto LABEL_18;
  }
  if (kCVHWAConfigPresetProxyStaten == a2)
  {
    *(_DWORD *)&v49[3] = 0;
    *(_DWORD *)&v49[6] = 0;
    v28[8] = 0;
    *(_DWORD *)((char *)&v46[2] + 3) = 1065353216;
    *(_OWORD *)((char *)v46 + 3) = xmmword_20E80DE40;
    *(_OWORD *)((char *)&v46[1] + 3) = unk_20E80DE50;
    DWORD2(v29) = 0;
    BYTE12(v29) = 0;
    *(_QWORD *)v26 = 0x1E000000280;
    *(_DWORD *)&v26[8] = 640;
    *(_QWORD *)&v26[12] = 0;
    strcpy(&v26[20], "-");
    v26[22] = -1;
    *(int32x2_t *)&v26[24] = vdup_n_s32(0x1388u);
    *(_QWORD *)v27 = 0xA000500010001;
    strcpy(&v27[8], "\n");
    *(_DWORD *)&v27[10] = 16843008;
    *(_DWORD *)&v27[14] = 720905;
    *(_WORD *)&v27[18] = 3;
    *(_OWORD *)&v27[20] = xmmword_20E80DDF0;
    v27[36] = 1;
    *(_QWORD *)&v27[37] = *(_QWORD *)v49;
    *(_WORD *)&v27[45] = 0;
    *(_QWORD *)v28 = 1061997773;
    *(_DWORD *)&v28[9] = 65537;
    *(_OWORD *)&v28[13] = v46[0];
    *(_OWORD *)&v28[29] = v46[1];
    *(_QWORD *)&v28[44] = *(_QWORD *)((char *)&v46[1] + 15);
    v28[52] = 1;
    *(_QWORD *)&v28[56] = 0x3F00000041A00000;
    *(_QWORD *)&v29 = 0xB43E4CCCCDLL;
    LODWORD(v30) = 2;
    WORD2(v30) = 0;
    *((_QWORD *)&v30 + 1) = 0;
    v31 = 0xDEC000005CCLL;
    *(_DWORD *)v32 = 0;
LABEL_10:
    v32[4] = 0;
    *(int64x2_t *)&v32[8] = vdupq_n_s64(0x280uLL);
    v32[24] = 0;
    *(_WORD *)v35 = 261;
    *(_QWORD *)&v35[5] = 0x90000002DLL;
    __p = (void *)0x2F706D742FLL;
    *(_QWORD *)&v36 = 5000;
    BYTE8(v36) = 1;
    HIDWORD(v36) = 1061997773;
    goto LABEL_11;
  }
  if (kCVHWAConfigPresetProxyCrete == a2)
  {
    *(_DWORD *)&v49[3] = 0;
    *(_DWORD *)&v49[6] = 0;
    v28[8] = 0;
    *(_DWORD *)((char *)&v46[2] + 3) = 1065353216;
    *(_OWORD *)((char *)v46 + 3) = xmmword_20E80DE40;
    *(_OWORD *)((char *)&v46[1] + 3) = unk_20E80DE50;
    DWORD2(v29) = 0;
    BYTE12(v29) = 0;
    *(_QWORD *)v26 = 0x1E000000280;
    *(_DWORD *)&v26[8] = 640;
    *(_QWORD *)&v26[12] = 0;
    strcpy(&v26[20], "-");
    v26[22] = -1;
    *(int32x2_t *)&v26[24] = vdup_n_s32(0x1388u);
    *(_QWORD *)v27 = 0xA000500010001;
    strcpy(&v27[8], "\n");
    *(_DWORD *)&v27[10] = 16843008;
    *(_DWORD *)&v27[14] = 720905;
    *(_WORD *)&v27[18] = 3;
    *(_OWORD *)&v27[20] = xmmword_20E80DDF0;
    v27[36] = 1;
    *(_QWORD *)&v27[37] = *(_QWORD *)v49;
    *(_WORD *)&v27[45] = 0;
    *(_QWORD *)v28 = 1061997773;
    *(_DWORD *)&v28[9] = 65537;
    *(_OWORD *)&v28[13] = v46[0];
    *(_OWORD *)&v28[29] = v46[1];
    *(_QWORD *)&v28[44] = *(_QWORD *)((char *)&v46[1] + 15);
    v28[52] = 1;
    *(_QWORD *)&v28[56] = 0x3F00000041A00000;
    *(_QWORD *)&v29 = 0xB43E4CCCCDLL;
    LODWORD(v30) = 2;
    WORD2(v30) = 0;
    *((_QWORD *)&v30 + 1) = 0;
    v31 = 0xDEC000005CCLL;
    *(_DWORD *)v32 = 2;
    goto LABEL_10;
  }
  if (kCVHWAConfigPresetProxyColl == a2)
  {
    *(_DWORD *)&v49[3] = 0;
    *(_DWORD *)&v49[6] = 0;
    v28[8] = 0;
    *(_DWORD *)((char *)&v46[2] + 3) = 1065353216;
    *(_OWORD *)((char *)v46 + 3) = xmmword_20E80DE40;
    *(_OWORD *)((char *)&v46[1] + 3) = unk_20E80DE50;
    DWORD2(v29) = 0;
    BYTE12(v29) = 0;
    *(_QWORD *)v26 = 0x1E000000280;
    *(_DWORD *)&v26[8] = 640;
    *(_QWORD *)&v26[12] = 0;
    strcpy(&v26[20], "-");
    v26[22] = -1;
    *(int32x2_t *)&v26[24] = vdup_n_s32(0x1388u);
    *(_QWORD *)v27 = 0xA000500010001;
    strcpy(&v27[8], "\n");
    *(_DWORD *)&v27[10] = 16843008;
    *(_DWORD *)&v27[14] = 720905;
    *(_WORD *)&v27[18] = 3;
    *(_OWORD *)&v27[20] = xmmword_20E80DDF0;
    v27[36] = 1;
    *(_QWORD *)&v27[37] = *(_QWORD *)v49;
    *(_WORD *)&v27[45] = 0;
    *(_QWORD *)v28 = 1061997773;
    *(_DWORD *)&v28[9] = 65537;
    *(_OWORD *)&v28[13] = v46[0];
    *(_OWORD *)&v28[29] = v46[1];
    *(_QWORD *)&v28[44] = *(_QWORD *)((char *)&v46[1] + 15);
    v28[52] = 1;
    *(_QWORD *)&v28[56] = 0x3F00000041A00000;
    *(_QWORD *)&v29 = 0xB43E4CCCCDLL;
    LODWORD(v30) = 2;
    WORD2(v30) = 0;
    *((_QWORD *)&v30 + 1) = 0;
    v31 = 0xDEC000005CCLL;
    *(_DWORD *)v32 = 3;
    v32[4] = 0;
    *(int64x2_t *)&v32[8] = vdupq_n_s64(0x280uLL);
    v32[24] = 0;
    *(_WORD *)v35 = 261;
    *(_QWORD *)&v35[5] = 0x90000002DLL;
    __p = (void *)0x2F706D742FLL;
    *(_QWORD *)&v36 = 5000;
    BYTE8(v36) = 1;
    HIDWORD(v36) = 1061997773;
LABEL_11:
    v37[0] = 0;
    *(int64x2_t *)&v37[8] = vdupq_n_s64(1uLL);
    *(_QWORD *)&v37[24] = 5;
    *(_WORD *)v38 = 256;
    *(_WORD *)&v38[104] = 0;
    *(_OWORD *)&v38[108] = xmmword_20E80DE00;
    *(_OWORD *)&v38[124] = xmmword_20E80DE10;
    *(_DWORD *)&v38[172] = 0x4000;
    *(_OWORD *)&v38[140] = xmmword_20E80DE64;
    *(_OWORD *)&v38[156] = unk_20E80DE74;
    v39 = 1045220557;
    v40 = 1;
    v3 = CVHWAFeatureExtractionConfigCreate(a1);
    if ((_DWORD)v3)
      return v3;
    goto LABEL_19;
  }
  *(_DWORD *)&v49[3] = 0;
  *(_DWORD *)&v49[6] = 0;
  v28[8] = 0;
  *(_DWORD *)((char *)&v46[2] + 3) = 1065353216;
  *(_OWORD *)((char *)v46 + 3) = xmmword_20E80DE40;
  *(_OWORD *)((char *)&v46[1] + 3) = unk_20E80DE50;
  DWORD2(v29) = 0;
  BYTE12(v29) = 0;
  *(_QWORD *)v26 = 0x1E000000280;
  *(_DWORD *)&v26[8] = 640;
  *(_QWORD *)&v26[12] = 0;
  strcpy(&v26[20], "-");
  v26[22] = -1;
  *(int32x2_t *)&v26[24] = vdup_n_s32(0x1388u);
  *(_QWORD *)v27 = 0xA000500010001;
  strcpy(&v27[8], "\n");
  *(_DWORD *)&v27[10] = 16843008;
  *(_DWORD *)&v27[14] = 720905;
  *(_WORD *)&v27[18] = 3;
  *(_OWORD *)&v27[20] = xmmword_20E80DDF0;
  v27[36] = 1;
  *(_QWORD *)&v27[37] = *(_QWORD *)v49;
  *(_WORD *)&v27[45] = 0;
  *(_QWORD *)v28 = 1061997773;
  *(_DWORD *)&v28[9] = 65537;
  *(_OWORD *)&v28[13] = v46[0];
  *(_OWORD *)&v28[29] = v46[1];
  *(_QWORD *)&v28[44] = *(_QWORD *)((char *)&v46[1] + 15);
  v28[52] = 1;
  *(_QWORD *)&v28[56] = 0x3F00000041A00000;
  *(_QWORD *)&v29 = 0xB43E4CCCCDLL;
  LODWORD(v30) = 2;
  WORD2(v30) = 0;
  *((_QWORD *)&v30 + 1) = 0;
  v31 = 0xDEC000005CCLL;
  *(_DWORD *)v32 = 2;
  v32[4] = 0;
  *(int64x2_t *)&v32[8] = vdupq_n_s64(0x280uLL);
  v32[24] = 0;
  *(_WORD *)v35 = 261;
  *(_QWORD *)&v35[5] = 0x90000002DLL;
  __p = (void *)0x2F706D742FLL;
  *(_QWORD *)&v36 = 5000;
  BYTE8(v36) = 1;
  HIDWORD(v36) = 1061997773;
  v37[0] = 0;
  *(int64x2_t *)&v37[8] = vdupq_n_s64(1uLL);
  *(_QWORD *)&v37[24] = 5;
  *(_WORD *)v38 = 256;
  *(_WORD *)&v38[104] = 0;
  *(_OWORD *)&v38[108] = xmmword_20E80DE00;
  *(_OWORD *)&v38[124] = xmmword_20E80DE10;
  *(_DWORD *)&v38[172] = 0x4000;
  *(_OWORD *)&v38[140] = xmmword_20E80DE64;
  *(_OWORD *)&v38[156] = unk_20E80DE74;
LABEL_18:
  v39 = 1045220557;
  v40 = 0;
  v3 = CVHWAFeatureExtractionConfigCreate(a1);
  if ((_DWORD)v3)
    return v3;
LABEL_19:
  v4 = *a1;
  v5 = *(_OWORD *)&v27[16];
  *(_OWORD *)(v4 + 32) = *(_OWORD *)v27;
  *(_OWORD *)(v4 + 48) = v5;
  *(_OWORD *)v4 = *(_OWORD *)v26;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)&v26[16];
  v6 = *(_OWORD *)&v27[32];
  v7 = *(_OWORD *)v28;
  v8 = *(_OWORD *)&v28[32];
  *(_OWORD *)(v4 + 96) = *(_OWORD *)&v28[16];
  *(_OWORD *)(v4 + 112) = v8;
  *(_OWORD *)(v4 + 64) = v6;
  *(_OWORD *)(v4 + 80) = v7;
  v9 = *(_OWORD *)&v28[48];
  v10 = v29;
  v11 = v30;
  *(_QWORD *)(v4 + 176) = v31;
  *(_OWORD *)(v4 + 144) = v10;
  *(_OWORD *)(v4 + 160) = v11;
  *(_OWORD *)(v4 + 128) = v9;
  v12 = *(_OWORD *)v32;
  *(_OWORD *)(v4 + 193) = *(_OWORD *)&v32[9];
  *(_OWORD *)(v4 + 184) = v12;
  std::string::operator=((std::string *)(v4 + 216), (const std::string *)&__p);
  v3 = 0;
  v13 = *(_OWORD *)&v35[1];
  v14 = v36;
  v15 = *(_OWORD *)&v37[16];
  *(_OWORD *)(v4 + 272) = *(_OWORD *)v37;
  *(_OWORD *)(v4 + 288) = v15;
  *(_OWORD *)(v4 + 240) = v13;
  *(_OWORD *)(v4 + 256) = v14;
  v16 = *(_OWORD *)v38;
  v17 = *(_OWORD *)&v38[16];
  v18 = *(_OWORD *)&v38[48];
  *(_OWORD *)(v4 + 336) = *(_OWORD *)&v38[32];
  *(_OWORD *)(v4 + 352) = v18;
  *(_OWORD *)(v4 + 304) = v16;
  *(_OWORD *)(v4 + 320) = v17;
  v19 = *(_OWORD *)&v38[64];
  v20 = *(_OWORD *)&v38[80];
  v21 = *(_OWORD *)&v38[112];
  *(_OWORD *)(v4 + 400) = *(_OWORD *)&v38[96];
  *(_OWORD *)(v4 + 416) = v21;
  *(_OWORD *)(v4 + 368) = v19;
  *(_OWORD *)(v4 + 384) = v20;
  v22 = *(_OWORD *)&v38[128];
  v23 = *(_OWORD *)&v38[144];
  v24 = *(_OWORD *)&v38[160];
  *(_DWORD *)(v4 + 480) = v39;
  *(_OWORD *)(v4 + 448) = v23;
  *(_OWORD *)(v4 + 464) = v24;
  *(_OWORD *)(v4 + 432) = v22;
  *(_BYTE *)(v4 + 488) = v40;
  if ((v35[0] & 0x80) != 0)
LABEL_20:
    operator delete(__p);
  return v3;
}

void sub_20E7863C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CVHWAFeatureExtractionConfigCreate(_QWORD *a1)
{
  char *v2;
  uint64_t v3;

  if (!a1)
    return 4;
  v2 = (char *)operator new(0x1F0uLL, MEMORY[0x24BEDB6B8]);
  v3 = 3;
  if (v2)
  {
    *(_QWORD *)v2 = 0x1E000000280;
    *((_DWORD *)v2 + 2) = 640;
    *(_QWORD *)(v2 + 12) = 0;
    *((_WORD *)v2 + 10) = 45;
    v2[22] = -1;
    *((int32x2_t *)v2 + 3) = vdup_n_s32(0x1388u);
    *((_QWORD *)v2 + 4) = 0xA000500010001;
    *((_WORD *)v2 + 20) = 10;
    *(_DWORD *)(v2 + 42) = 16843008;
    *(_DWORD *)(v2 + 46) = 720905;
    *((_WORD *)v2 + 25) = 3;
    *(_OWORD *)(v2 + 52) = xmmword_20E80DDF0;
    v2[68] = 1;
    *((_DWORD *)v2 + 18) = 0;
    *(_DWORD *)(v2 + 75) = 0;
    *((_QWORD *)v2 + 10) = 1061997773;
    v2[88] = 0;
    *(_DWORD *)(v2 + 89) = 65537;
    *((_DWORD *)v2 + 32) = 1065353216;
    *((_OWORD *)v2 + 6) = xmmword_20E80DE40;
    *((_OWORD *)v2 + 7) = unk_20E80DE50;
    v2[132] = 1;
    *((_QWORD *)v2 + 17) = 0x3F00000041A00000;
    *((_QWORD *)v2 + 18) = 0xB43E4CCCCDLL;
    *((_DWORD *)v2 + 38) = 0;
    v2[156] = 0;
    *((_DWORD *)v2 + 40) = 2;
    *((_WORD *)v2 + 82) = 0;
    *((_QWORD *)v2 + 21) = 0;
    *((_QWORD *)v2 + 22) = 0xDEC000005CCLL;
    *((_DWORD *)v2 + 46) = 2;
    v2[188] = 0;
    *((int64x2_t *)v2 + 12) = vdupq_n_s64(0x280uLL);
    v2[208] = 0;
    v2[239] = 5;
    strcpy(v2 + 216, "/tmp/");
    v2[240] = 1;
    *(_QWORD *)(v2 + 244) = 0x90000002DLL;
    *((_QWORD *)v2 + 32) = 5000;
    v2[264] = 1;
    *((_DWORD *)v2 + 67) = 1061997773;
    v2[272] = 0;
    *((_QWORD *)v2 + 35) = 1;
    *((_OWORD *)v2 + 18) = xmmword_20E80DE30;
    *((_WORD *)v2 + 152) = 256;
    *((_WORD *)v2 + 204) = 0;
    *(_OWORD *)(v2 + 412) = xmmword_20E80DE00;
    *(_OWORD *)(v2 + 428) = xmmword_20E80DE10;
    *((_DWORD *)v2 + 119) = 0x4000;
    *(_OWORD *)(v2 + 444) = xmmword_20E80DE64;
    *(_OWORD *)(v2 + 460) = unk_20E80DE74;
    *((_DWORD *)v2 + 120) = 1045220557;
    v2[488] = 0;
    *a1 = v2;
    return 0;
  }
  return v3;
}

uint64_t CVHWAFeatureExtractionConfigRelease(uint64_t a1)
{
  if (!a1)
    return 4;
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  MEMORY[0x212BC47D4](a1, 0x1032C4073236B7BLL);
  return 0;
}

uint64_t CVHWAFeatureExtractionConfigSetImageSize(uint64_t result, unsigned int a2, unsigned int a3, int a4)
{
  if (!result)
    sub_20E80579C();
  if (*(_BYTE *)(result + 488))
  {
    *(_QWORD *)(result + 192) = a2;
    *(_QWORD *)(result + 200) = a3;
  }
  else
  {
    *(_DWORD *)result = a2;
    *(_DWORD *)(result + 4) = a3;
    *(_DWORD *)(result + 8) = a4;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetWidth(unsigned int *a1)
{
  if (!a1)
    sub_20E8057C8();
  if (*((_BYTE *)a1 + 488))
    return a1[48];
  else
    return *a1;
}

uint64_t CVHWAFeatureExtractionConfigGetHeight(uint64_t a1)
{
  if (!a1)
    sub_20E8057F4();
  if (*(_BYTE *)(a1 + 488))
    return *(unsigned int *)(a1 + 200);
  else
    return *(unsigned int *)(a1 + 4);
}

uint64_t CVHWAFeatureExtractionConfigGetStride(uint64_t a1)
{
  if (!a1)
    sub_20E805820();
  if (*(_BYTE *)(a1 + 488))
    return (*(_DWORD *)(a1 + 192) + 63) & 0xFFFFFFC0;
  else
    return *(unsigned int *)(a1 + 8);
}

_BYTE *CVHWAFeatureExtractionConfigSetEnableDynamicThresholding(_BYTE *result, char a2)
{
  if (!result)
    sub_20E80584C();
  if (result[488])
    result[264] = a2;
  else
    result[76] = a2;
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetEnableDynamicThresholding(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    sub_20E805878();
  v1 = 264;
  if (!*(_BYTE *)(a1 + 488))
    v1 = 76;
  return *(unsigned __int8 *)(a1 + v1);
}

uint64_t CVHWAFeatureExtractionConfigSetTargetNumberOfKeypoints(uint64_t result, unsigned int a2)
{
  if (!result)
    sub_20E8058A4();
  if (*(_BYTE *)(result + 488))
    *(_QWORD *)(result + 256) = a2;
  else
    *(_DWORD *)(result + 28) = a2;
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetTargetNumberOfKeypoints(uint64_t a1)
{
  if (!a1)
    sub_20E8058D0();
  if (*(_BYTE *)(a1 + 488))
    return *(unsigned int *)(a1 + 256);
  else
    return *(unsigned int *)(a1 + 28);
}

uint64_t CVHWAFeatureExtractionConfigSetMaxNumberOfKeypoints(uint64_t result, unsigned int a2)
{
  if (!result)
    sub_20E8058FC();
  if (*(_BYTE *)(result + 488))
  {
    *(_QWORD *)(result + 256) = a2;
  }
  else
  {
    *(_DWORD *)(result + 24) = a2;
    *(_DWORD *)(result + 28) = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetMaxNumberOfKeypoints(uint64_t a1)
{
  if (!a1)
    sub_20E805928();
  if (*(_BYTE *)(a1 + 488))
    return *(unsigned int *)(a1 + 256);
  else
    return *(unsigned int *)(a1 + 24);
}

uint64_t CVHWAFeatureExtractionConfigSetResponseThreshold(uint64_t result, int a2)
{
  if (!result)
    sub_20E805954();
  if (*(_BYTE *)(result + 488))
    *(_DWORD *)(result + 244) = a2;
  else
    *(_WORD *)(result + 20) = a2;
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetResponseThreshold(uint64_t a1)
{
  if (!a1)
    sub_20E805980();
  if (*(_BYTE *)(a1 + 488))
    return (unsigned __int16)*(_DWORD *)(a1 + 244);
  else
    return *(unsigned __int16 *)(a1 + 20);
}

_BYTE *CVHWAFeatureExtractionConfigSetEnableParedGrid(_BYTE *result, char a2)
{
  if (!result)
    sub_20E8059AC();
  if (result[488])
    result[304] = a2;
  else
    result[42] = a2;
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetEnableParedGrid(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    sub_20E8059D8();
  v1 = 304;
  if (!*(_BYTE *)(a1 + 488))
    v1 = 42;
  return *(unsigned __int8 *)(a1 + v1);
}

_BYTE *CVHWAFeatureExtractionConfigSetDisablePostProcessing(_BYTE *result, char a2)
{
  if (!result)
    sub_20E805A04();
  if (result[488])
    result[188] = a2;
  else
    result[78] = a2;
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetDisablePostProcessing(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    sub_20E805A30();
  v1 = 188;
  if (!*(_BYTE *)(a1 + 488))
    v1 = 78;
  return *(unsigned __int8 *)(a1 + v1);
}

void CVHWAFeatureExtractionConfigSetEnableOrientationAssignment(uint64_t a1, char a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[3];
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;

  if (!a1)
    sub_20E805A5C();
  if (!*(_BYTE *)(a1 + 488))
    goto LABEL_8;
  sub_20E786A7C(&v14);
  if (**(int **)(v14 + 56) > 4)
    goto LABEL_8;
  v7[0] = &v14;
  v7[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v7[2] = std::chrono::system_clock::now().__d_.__rep_;
  v8 = 4;
  v9 = "unknown file";
  v10 = 340;
  v12 = 0;
  v13 = 0;
  v11 = "unknown function";
  sub_20E7FBAC0((uint64_t)v7, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetEnableOrientationAssignment");
  sub_20E783C94((uint64_t)v7);
  sub_20E783C94((uint64_t)v7);
  v4 = v13;
  if (!v13)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(_BYTE *)(a1 + 44) = a2;
  }
  else
  {
LABEL_8:
    *(_BYTE *)(a1 + 44) = a2;
  }
}

void sub_20E786A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E786A7C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  _QWORD *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A49310);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A49310))
  {
    sub_20E7FB67C(&v5);
    sub_20E78570C(__p, "cv3d.vio");
    sub_20E7FE658(&v5, (uint64_t)__p, &qword_254A49308);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A49310);
  }
  *a1 = qword_254A49308;
}

void sub_20E786B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A49310);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A49310);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetEnableOrientationAssignment(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805A88();
  if (!*(_BYTE *)(a1 + 488))
    return *(unsigned __int8 *)(a1 + 44);
  sub_20E786A7C(&v13);
  if (**(int **)(v13 + 56) > 4)
    return *(unsigned __int8 *)(a1 + 44);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 351;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetEnableOrientationAssignment");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return *(unsigned __int8 *)(a1 + 44);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return *(unsigned __int8 *)(a1 + 44);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned __int8 *)(a1 + 44);
}

void sub_20E786C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetDetectionFlow(uint64_t a1, char a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[3];
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;

  if (!a1)
    sub_20E805AB4();
  if (!*(_BYTE *)(a1 + 488))
    goto LABEL_8;
  sub_20E786A7C(&v14);
  if (**(int **)(v14 + 56) > 4)
    goto LABEL_8;
  v7[0] = &v14;
  v7[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v7[2] = std::chrono::system_clock::now().__d_.__rep_;
  v8 = 4;
  v9 = "unknown file";
  v10 = 362;
  v12 = 0;
  v13 = 0;
  v11 = "unknown function";
  sub_20E7FBAC0((uint64_t)v7, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetDetectionFlow");
  sub_20E783C94((uint64_t)v7);
  sub_20E783C94((uint64_t)v7);
  v4 = v13;
  if (!v13)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(_BYTE *)(a1 + 68) = a2;
  }
  else
  {
LABEL_8:
    *(_BYTE *)(a1 + 68) = a2;
  }
}

void sub_20E786DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetDetectionFlow(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805AE0();
  if (!*(_BYTE *)(a1 + 488))
    return *(unsigned __int8 *)(a1 + 68);
  sub_20E786A7C(&v13);
  if (**(int **)(v13 + 56) > 4)
    return *(unsigned __int8 *)(a1 + 68);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 373;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetDetectionFlow");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return *(unsigned __int8 *)(a1 + 68);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return *(unsigned __int8 *)(a1 + 68);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned __int8 *)(a1 + 68);
}

void sub_20E786EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetMaxImageSize(uint64_t a1, int a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[3];
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;

  if (!a1)
    sub_20E805B0C();
  if (!*(_BYTE *)(a1 + 488))
    goto LABEL_8;
  sub_20E786A7C(&v16);
  if (**(int **)(v16 + 56) > 4)
    goto LABEL_8;
  v9[0] = &v16;
  v9[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v9[2] = std::chrono::system_clock::now().__d_.__rep_;
  v10 = 4;
  v11 = "unknown file";
  v12 = 384;
  v14 = 0;
  v15 = 0;
  v13 = "unknown function";
  sub_20E7FBAC0((uint64_t)v9, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetMaxImageSize");
  sub_20E783C94((uint64_t)v9);
  sub_20E783C94((uint64_t)v9);
  v6 = v15;
  if (!v15)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    *(_DWORD *)(a1 + 56) = a2;
    *(_DWORD *)(a1 + 60) = a3;
  }
  else
  {
LABEL_8:
    *(_DWORD *)(a1 + 56) = a2;
    *(_DWORD *)(a1 + 60) = a3;
  }
}

void sub_20E787020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetMaxWidth(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805B38();
  if (!*(_BYTE *)(a1 + 488))
    return *(unsigned int *)(a1 + 56);
  sub_20E786A7C(&v13);
  if (**(int **)(v13 + 56) > 4)
    return *(unsigned int *)(a1 + 56);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 394;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetMaxWidth");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return *(unsigned int *)(a1 + 56);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return *(unsigned int *)(a1 + 56);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned int *)(a1 + 56);
}

void sub_20E787148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetMaxHeight(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805B64();
  if (!*(_BYTE *)(a1 + 488))
    return *(unsigned int *)(a1 + 60);
  sub_20E786A7C(&v13);
  if (**(int **)(v13 + 56) > 4)
    return *(unsigned int *)(a1 + 60);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 403;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetMaxHeight");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return *(unsigned int *)(a1 + 60);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return *(unsigned int *)(a1 + 60);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned int *)(a1 + 60);
}

void sub_20E787270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetNumberOfOctaves(uint64_t a1, __int16 a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[3];
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;

  if (!a1)
    sub_20E805B90();
  if (!*(_BYTE *)(a1 + 488))
    goto LABEL_8;
  sub_20E786A7C(&v14);
  if (**(int **)(v14 + 56) > 4)
    goto LABEL_8;
  v7[0] = &v14;
  v7[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v7[2] = std::chrono::system_clock::now().__d_.__rep_;
  v8 = 4;
  v9 = "unknown file";
  v10 = 413;
  v12 = 0;
  v13 = 0;
  v11 = "unknown function";
  sub_20E7FBAC0((uint64_t)v7, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetNumberOfOctaves");
  sub_20E783C94((uint64_t)v7);
  sub_20E783C94((uint64_t)v7);
  v4 = v13;
  if (!v13)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(_WORD *)(a1 + 50) = a2;
  }
  else
  {
LABEL_8:
    *(_WORD *)(a1 + 50) = a2;
  }
}

void sub_20E7873A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetNumberOfOctaves(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805BBC();
  if (!*(_BYTE *)(a1 + 488))
    return *(unsigned __int16 *)(a1 + 50);
  sub_20E786A7C(&v13);
  if (**(int **)(v13 + 56) > 4)
    return *(unsigned __int16 *)(a1 + 50);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 423;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetNumberOfOctaves");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return *(unsigned __int16 *)(a1 + 50);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return *(unsigned __int16 *)(a1 + 50);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned __int16 *)(a1 + 50);
}

void sub_20E7874D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigSetNumberOfBinsXYZ(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (!result)
    sub_20E805BE8();
  if (*(_BYTE *)(result + 488))
  {
    *(_QWORD *)(result + 280) = a2;
    *(_QWORD *)(result + 288) = a3;
    *(_QWORD *)(result + 296) = a4;
  }
  else
  {
    *(_WORD *)(result + 32) = a2;
    *(_WORD *)(result + 34) = a3;
    *(_WORD *)(result + 36) = a4;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetNumberOfBinsX(uint64_t a1)
{
  if (!a1)
    sub_20E805C14();
  if (*(_BYTE *)(a1 + 488))
    return *(unsigned __int16 *)(a1 + 280);
  else
    return *(unsigned __int16 *)(a1 + 32);
}

uint64_t CVHWAFeatureExtractionConfigGetNumberOfBinsY(uint64_t a1)
{
  if (!a1)
    sub_20E805C40();
  if (*(_BYTE *)(a1 + 488))
    return *(unsigned __int16 *)(a1 + 288);
  else
    return *(unsigned __int16 *)(a1 + 34);
}

uint64_t CVHWAFeatureExtractionConfigGetNumberOfBinsZ(uint64_t a1)
{
  if (!a1)
    sub_20E805C6C();
  if (*(_BYTE *)(a1 + 488))
    return *(unsigned __int16 *)(a1 + 296);
  else
    return *(unsigned __int16 *)(a1 + 36);
}

uint64_t CVHWAFeatureExtractionConfigSetNumberOfBinsHardwareXY(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (!result)
    sub_20E805C98();
  if (*(_BYTE *)(result + 488))
  {
    *(_QWORD *)(result + 280) = a2;
    *(_QWORD *)(result + 288) = a3;
  }
  else
  {
    *(_WORD *)(result + 38) = a2;
    *(_WORD *)(result + 40) = a3;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetNumberOfBinsHardwareX(uint64_t a1)
{
  if (!a1)
    sub_20E805CC4();
  if (*(_BYTE *)(a1 + 488))
    return *(unsigned __int16 *)(a1 + 280);
  else
    return *(unsigned __int16 *)(a1 + 38);
}

uint64_t CVHWAFeatureExtractionConfigGetNumberOfBinsHardwareY(uint64_t a1)
{
  if (!a1)
    sub_20E805CF0();
  if (*(_BYTE *)(a1 + 488))
    return *(unsigned __int16 *)(a1 + 288);
  else
    return *(unsigned __int16 *)(a1 + 40);
}

_BYTE *CVHWAFeatureExtractionConfigSetExtraTestEnable(_BYTE *result, char a2)
{
  if (!result)
    sub_20E805D1C();
  if (result[488])
    result[240] = a2;
  else
    result[43] = a2;
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetExtraTestEnable(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    sub_20E805D48();
  v1 = 240;
  if (!*(_BYTE *)(a1 + 488))
    v1 = 43;
  return *(unsigned __int8 *)(a1 + v1);
}

uint64_t CVHWAFeatureExtractionConfigSetExtraTestThreshold(uint64_t result, int a2)
{
  if (!result)
    sub_20E805D74();
  if (*(_BYTE *)(result + 488))
    *(_DWORD *)(result + 248) = a2;
  else
    *(_WORD *)(result + 46) = a2;
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetExtraTestThreshold(uint64_t a1)
{
  if (!a1)
    sub_20E805DA0();
  if (*(_BYTE *)(a1 + 488))
    return (unsigned __int16)*(_DWORD *)(a1 + 248);
  else
    return *(unsigned __int16 *)(a1 + 46);
}

void CVHWAFeatureExtractionConfigSetRoi(uint64_t a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[3];
  int v14;
  const char *v15;
  int v16;
  const char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  if (!a1)
    sub_20E805DCC();
  if (*(_BYTE *)(a1 + 488))
  {
    sub_20E786A7C(&v20);
    if (**(int **)(v20 + 56) <= 4)
    {
      v13[0] = &v20;
      v13[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v13[2] = std::chrono::system_clock::now().__d_.__rep_;
      v14 = 4;
      v15 = "unknown file";
      v16 = 549;
      v18 = 0;
      v19 = 0;
      v17 = "unknown function";
      sub_20E7FBAC0((uint64_t)v13, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetRoi");
      sub_20E783C94((uint64_t)v13);
      sub_20E783C94((uint64_t)v13);
      v10 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  *(_WORD *)(a1 + 12) = a2;
  *(_WORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 16) = a4;
  *(_WORD *)(a1 + 18) = a5;
}

void sub_20E787874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetRoiTop(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805DF8();
  if (!*(_BYTE *)(a1 + 488))
    return *(__int16 *)(a1 + 12);
  sub_20E786A7C(&v13);
  if (**(int **)(v13 + 56) > 4)
    return *(__int16 *)(a1 + 12);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 561;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetRoiTop");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return *(__int16 *)(a1 + 12);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return *(__int16 *)(a1 + 12);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(__int16 *)(a1 + 12);
}

void sub_20E78799C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetRoiLeft(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805E24();
  if (!*(_BYTE *)(a1 + 488))
    return *(__int16 *)(a1 + 14);
  sub_20E786A7C(&v13);
  if (**(int **)(v13 + 56) > 4)
    return *(__int16 *)(a1 + 14);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 570;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetRoiLeft");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return *(__int16 *)(a1 + 14);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return *(__int16 *)(a1 + 14);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(__int16 *)(a1 + 14);
}

void sub_20E787AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetRoiBottom(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805E50();
  if (!*(_BYTE *)(a1 + 488))
    return *(__int16 *)(a1 + 16);
  sub_20E786A7C(&v13);
  if (**(int **)(v13 + 56) > 4)
    return *(__int16 *)(a1 + 16);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 579;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetRoiBottom");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return *(__int16 *)(a1 + 16);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return *(__int16 *)(a1 + 16);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(__int16 *)(a1 + 16);
}

void sub_20E787BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetRoiRight(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805E7C();
  if (!*(_BYTE *)(a1 + 488))
    return *(__int16 *)(a1 + 18);
  sub_20E786A7C(&v13);
  if (**(int **)(v13 + 56) > 4)
    return *(__int16 *)(a1 + 18);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 588;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetRoiRight");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return *(__int16 *)(a1 + 18);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return *(__int16 *)(a1 + 18);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(__int16 *)(a1 + 18);
}

void sub_20E787D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetMaxNumberOfKeypointsPerOctave(uint64_t a1, int a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[3];
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;

  if (!a1)
    sub_20E805EA8();
  if (!*(_BYTE *)(a1 + 488))
    goto LABEL_8;
  sub_20E786A7C(&v14);
  if (**(int **)(v14 + 56) > 4)
    goto LABEL_8;
  v7[0] = &v14;
  v7[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v7[2] = std::chrono::system_clock::now().__d_.__rep_;
  v8 = 4;
  v9 = "unknown file";
  v10 = 598;
  v12 = 0;
  v13 = 0;
  v11 = "unknown function";
  sub_20E7FBAC0((uint64_t)v7, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetMaxNumberOfKeypointsPerOctave");
  sub_20E783C94((uint64_t)v7);
  sub_20E783C94((uint64_t)v7);
  v4 = v13;
  if (!v13)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(_DWORD *)(a1 + 52) = a2;
  }
  else
  {
LABEL_8:
    *(_DWORD *)(a1 + 52) = a2;
  }
}

void sub_20E787E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetMaxNumberOfKeypointsPerOctave(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805ED4();
  if (!*(_BYTE *)(a1 + 488))
    return *(unsigned int *)(a1 + 52);
  sub_20E786A7C(&v13);
  if (**(int **)(v13 + 56) > 4)
    return *(unsigned int *)(a1 + 52);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 608;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetMaxNumberOfKeypointsPerOctave");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return *(unsigned int *)(a1 + 52);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return *(unsigned int *)(a1 + 52);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned int *)(a1 + 52);
}

void sub_20E787F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetShouldCheckTopLevelPruning(uint64_t a1, char a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[3];
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;

  if (!a1)
    sub_20E805F00();
  if (!*(_BYTE *)(a1 + 488))
    goto LABEL_8;
  sub_20E786A7C(&v14);
  if (**(int **)(v14 + 56) > 4)
    goto LABEL_8;
  v7[0] = &v14;
  v7[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v7[2] = std::chrono::system_clock::now().__d_.__rep_;
  v8 = 4;
  v9 = "unknown file";
  v10 = 619;
  v12 = 0;
  v13 = 0;
  v11 = "unknown function";
  sub_20E7FBAC0((uint64_t)v7, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigSetShouldCheckTopLevelPruning");
  sub_20E783C94((uint64_t)v7);
  sub_20E783C94((uint64_t)v7);
  v4 = v13;
  if (!v13)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(_BYTE *)(a1 + 45) = a2;
  }
  else
  {
LABEL_8:
    *(_BYTE *)(a1 + 45) = a2;
  }
}

void sub_20E7880AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetShouldCheckTopLevelPruning(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E805F2C();
  if (!*(_BYTE *)(a1 + 488))
    return *(unsigned __int8 *)(a1 + 45);
  sub_20E786A7C(&v13);
  if (**(int **)(v13 + 56) > 4)
    return *(unsigned __int8 *)(a1 + 45);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 631;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s has no effect in swproxy", "CVHWAFeatureExtractionConfigGetShouldCheckTopLevelPruning");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v2 = v12;
  if (!v12)
    return *(unsigned __int8 *)(a1 + 45);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return *(unsigned __int8 *)(a1 + 45);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return *(unsigned __int8 *)(a1 + 45);
}

void sub_20E7881D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *CVHWAFeatureExtractionConfigSetEnableFeatureMatching(_BYTE *result, char a2)
{
  if (!result)
    sub_20E805F58();
  if (result[488])
  {
    result[409] = a2;
    result[408] = a2;
  }
  else
  {
    result[92] = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetEnableFeatureMatching(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    sub_20E805F84();
  v1 = 409;
  if (!*(_BYTE *)(a1 + 488))
    v1 = 92;
  return *(unsigned __int8 *)(a1 + v1);
}

uint64_t CVHWAFeatureExtractionConfigSetFeatureMatchingDescriptorSize(uint64_t result, int a2)
{
  if (!result)
    sub_20E805FB0();
  if (*(_BYTE *)(result + 488))
  {
    switch(a2)
    {
      case 2:
        *(_DWORD *)(result + 412) = 512;
        break;
      case 1:
        *(_DWORD *)(result + 412) = 256;
        break;
      case 0:
        *(_DWORD *)(result + 412) = 128;
        break;
    }
  }
  else
  {
    *(_BYTE *)(result + 132) = a2;
  }
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetFeatureMatchingDescriptorSize(uint64_t a1)
{
  int v1;

  if (!a1)
    sub_20E805FDC();
  if (!*(_BYTE *)(a1 + 488))
    return *(unsigned __int8 *)(a1 + 132);
  v1 = *(_DWORD *)(a1 + 412);
  if (v1 == 128)
    return 0;
  if (v1 != 512)
  {
    if (v1 == 256)
      return 1;
    return *(unsigned __int8 *)(a1 + 132);
  }
  return 2;
}

uint64_t CVHWAFeatureExtractionConfigSetOrientationDistanceThreshold(uint64_t result, float a2)
{
  if (!result)
    sub_20E806008();
  if (*(_BYTE *)(result + 488))
    *(_DWORD *)(result + 428) = vcvtas_u32_f32((float)(a2 * 256.0) / 360.0);
  else
    *(float *)(result + 136) = a2;
  return result;
}

float CVHWAFeatureExtractionConfigGetOrientationDistanceThreshold(uint64_t a1)
{
  if (!a1)
    sub_20E806034();
  if (*(_BYTE *)(a1 + 488))
    return (float)((float)*(unsigned int *)(a1 + 428) * 360.0) * 0.0039062;
  else
    return *(float *)(a1 + 136);
}

uint64_t CVHWAFeatureExtractionConfigSetSigmaDistanceThreshold(uint64_t result, float a2)
{
  if (!result)
    sub_20E806060();
  if (*(_BYTE *)(result + 488))
    *(_DWORD *)(result + 424) = vcvtas_u32_f32(a2 * 512.0);
  else
    *(float *)(result + 140) = a2;
  return result;
}

float CVHWAFeatureExtractionConfigGetSigmaDistanceThreshold(uint64_t a1)
{
  if (!a1)
    sub_20E80608C();
  if (*(_BYTE *)(a1 + 488))
    return (float)*(unsigned int *)(a1 + 424) * 0.0019531;
  else
    return *(float *)(a1 + 140);
}

uint64_t CVHWAFeatureExtractionConfigSetSquareDistanceDisparityFraction(uint64_t result, float a2)
{
  uint64_t v2;

  if (!result)
    sub_20E8060B8();
  v2 = 480;
  if (!*(_BYTE *)(result + 488))
    v2 = 144;
  *(float *)(result + v2) = a2;
  return result;
}

float CVHWAFeatureExtractionConfigGetSquareDistanceDisparityFraction(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    sub_20E8060E4();
  v1 = 480;
  if (!*(_BYTE *)(a1 + 488))
    v1 = 144;
  return *(float *)(a1 + v1);
}

uint64_t CVHWAFeatureExtractionConfigSetHammingDistanceThreshold(uint64_t result, int a2)
{
  if (!result)
    sub_20E806110();
  if (*(_BYTE *)(result + 488))
    *(_DWORD *)(result + 416) = a2;
  else
    *(_DWORD *)(result + 148) = a2;
  return result;
}

uint64_t CVHWAFeatureExtractionConfigGetHammingDistanceThreshold(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    sub_20E80613C();
  v1 = 416;
  if (!*(_BYTE *)(a1 + 488))
    v1 = 148;
  return *(unsigned int *)(a1 + v1);
}

void CVHWAFeatureExtractionConfigSetFeatureMatchingMaxElements(uint64_t a1, int a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[3];
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;

  if (!a1)
    sub_20E806168();
  if (*(_BYTE *)(a1 + 488))
    goto LABEL_3;
  sub_20E786A7C(&v14);
  if (**(int **)(v14 + 56) > 4)
    goto LABEL_3;
  v7[0] = &v14;
  v7[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v7[2] = std::chrono::system_clock::now().__d_.__rep_;
  v8 = 4;
  v9 = "unknown file";
  v10 = 809;
  v12 = 0;
  v13 = 0;
  v11 = "unknown function";
  sub_20E7FBAC0((uint64_t)v7, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigSetFeatureMatchingMaxElements");
  sub_20E783C94((uint64_t)v7);
  sub_20E783C94((uint64_t)v7);
  v4 = v13;
  if (!v13)
    goto LABEL_3;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_3:
    *(_DWORD *)(a1 + 440) = a2;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(_DWORD *)(a1 + 440) = a2;
  }
}

void sub_20E78860C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetFeatureMatchingMaxElements(uint64_t a1)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E806194();
  if (*(_BYTE *)(a1 + 488))
    return *(unsigned int *)(a1 + 440);
  sub_20E786A7C(&v13);
  if (**(int **)(v13 + 56) > 4)
    return *(unsigned int *)(a1 + 440);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 819;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigGetFeatureMatchingMaxElements");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v3 = v12;
  if (!v12)
    return *(unsigned int *)(a1 + 440);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return *(unsigned int *)(a1 + 440);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return *(unsigned int *)(a1 + 440);
}

void sub_20E788734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetFeatureMatchingMaxNumSets(uint64_t a1, int a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[3];
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;

  if (!a1)
    sub_20E8061C0();
  if (*(_BYTE *)(a1 + 488))
    goto LABEL_3;
  sub_20E786A7C(&v14);
  if (**(int **)(v14 + 56) > 4)
    goto LABEL_3;
  v7[0] = &v14;
  v7[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v7[2] = std::chrono::system_clock::now().__d_.__rep_;
  v8 = 4;
  v9 = "unknown file";
  v10 = 829;
  v12 = 0;
  v13 = 0;
  v11 = "unknown function";
  sub_20E7FBAC0((uint64_t)v7, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigSetFeatureMatchingMaxNumSets");
  sub_20E783C94((uint64_t)v7);
  sub_20E783C94((uint64_t)v7);
  v4 = v13;
  if (!v13)
    goto LABEL_3;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_3:
    *(_DWORD *)(a1 + 432) = a2;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(_DWORD *)(a1 + 432) = a2;
  }
}

void sub_20E78886C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionConfigGetFeatureMatchingMaxNumSets(uint64_t a1)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v6[3];
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (!a1)
    sub_20E8061EC();
  if (*(_BYTE *)(a1 + 488))
    return *(unsigned int *)(a1 + 432);
  sub_20E786A7C(&v13);
  if (**(int **)(v13 + 56) > 4)
    return *(unsigned int *)(a1 + 432);
  v6[0] = &v13;
  v6[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v6[2] = std::chrono::system_clock::now().__d_.__rep_;
  v7 = 4;
  v8 = "unknown file";
  v9 = 839;
  v11 = 0;
  v12 = 0;
  v10 = "unknown function";
  sub_20E7FBAC0((uint64_t)v6, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigGetFeatureMatchingMaxNumSets");
  sub_20E783C94((uint64_t)v6);
  sub_20E783C94((uint64_t)v6);
  v3 = v12;
  if (!v12)
    return *(unsigned int *)(a1 + 432);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return *(unsigned int *)(a1 + 432);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return *(unsigned int *)(a1 + 432);
}

void sub_20E788994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetFeatureMatchingHomographyMatrix(uint64_t a1, _DWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[3];
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;

  if (!a1)
    sub_20E806218();
  if (!*(_BYTE *)(a1 + 488))
  {
    sub_20E786A7C(&v14);
    if (**(int **)(v14 + 56) <= 4)
    {
      v7[0] = &v14;
      v7[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v7[2] = std::chrono::system_clock::now().__d_.__rep_;
      v8 = 4;
      v9 = "unknown file";
      v10 = 849;
      v12 = 0;
      v13 = 0;
      v11 = "unknown function";
      sub_20E7FBAC0((uint64_t)v7, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigSetFeatureMatchingHomographyMatrix");
      sub_20E783C94((uint64_t)v7);
      sub_20E783C94((uint64_t)v7);
      v4 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  *(_DWORD *)(a1 + 444) = *a2;
  *(_DWORD *)(a1 + 448) = a2[1];
  *(_DWORD *)(a1 + 452) = a2[2];
  *(_DWORD *)(a1 + 456) = a2[3];
  *(_DWORD *)(a1 + 460) = a2[4];
  *(_DWORD *)(a1 + 464) = a2[5];
  *(_DWORD *)(a1 + 468) = a2[6];
  *(_DWORD *)(a1 + 472) = a2[7];
  *(_DWORD *)(a1 + 476) = a2[8];
}

void sub_20E788AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigGetFeatureMatchingHomographyMatrix(uint64_t a1, _DWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[3];
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;

  if (!a1)
    sub_20E806244();
  if (!*(_BYTE *)(a1 + 488))
  {
    sub_20E786A7C(&v14);
    if (**(int **)(v14 + 56) <= 4)
    {
      v7[0] = &v14;
      v7[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v7[2] = std::chrono::system_clock::now().__d_.__rep_;
      v8 = 4;
      v9 = "unknown file";
      v10 = 861;
      v12 = 0;
      v13 = 0;
      v11 = "unknown function";
      sub_20E7FBAC0((uint64_t)v7, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigGetFeatureMatchingHomographyMatrix");
      sub_20E783C94((uint64_t)v7);
      sub_20E783C94((uint64_t)v7);
      v4 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  *a2 = *(_DWORD *)(a1 + 444);
  a2[1] = *(_DWORD *)(a1 + 448);
  a2[2] = *(_DWORD *)(a1 + 452);
  a2[3] = *(_DWORD *)(a1 + 456);
  a2[4] = *(_DWORD *)(a1 + 460);
  a2[5] = *(_DWORD *)(a1 + 464);
  a2[6] = *(_DWORD *)(a1 + 468);
  a2[7] = *(_DWORD *)(a1 + 472);
  a2[8] = *(_DWORD *)(a1 + 476);
}

void sub_20E788C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetUseDefaultParedGridSetting(uint64_t a1, char a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[3];
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;

  if (!a1)
    sub_20E806270();
  if (*(_BYTE *)(a1 + 488))
    goto LABEL_3;
  sub_20E786A7C(&v14);
  if (**(int **)(v14 + 56) > 4)
    goto LABEL_3;
  v7[0] = &v14;
  v7[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v7[2] = std::chrono::system_clock::now().__d_.__rep_;
  v8 = 4;
  v9 = "unknown file";
  v10 = 873;
  v12 = 0;
  v13 = 0;
  v11 = "unknown function";
  sub_20E7FBAC0((uint64_t)v7, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigSetUseDefaultParedGridSetting");
  sub_20E783C94((uint64_t)v7);
  sub_20E783C94((uint64_t)v7);
  v4 = v13;
  if (!v13)
    goto LABEL_3;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_3:
    *(_BYTE *)(a1 + 305) = a2;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    *(_BYTE *)(a1 + 305) = a2;
  }
}

void sub_20E788D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void CVHWAFeatureExtractionConfigSetParedGrid(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD v15[3];
  int v16;
  const char *v17;
  int v18;
  const char *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;

  if (!a1)
    sub_20E80629C();
  if (!*(_BYTE *)(a1 + 488))
  {
    sub_20E786A7C(&v22);
    if (**(int **)(v22 + 56) <= 4)
    {
      v15[0] = &v22;
      v15[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v15[2] = std::chrono::system_clock::now().__d_.__rep_;
      v16 = 4;
      v17 = "unknown file";
      v18 = 887;
      v20 = 0;
      v21 = 0;
      v19 = "unknown function";
      sub_20E7FBAC0((uint64_t)v15, "%s only has effect in swproxy", "CVHWAFeatureExtractionConfigSetParedGrid");
      sub_20E783C94((uint64_t)v15);
      sub_20E783C94((uint64_t)v15);
      v12 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
  *(_DWORD *)(a1 + 308) = *a2;
  *(_DWORD *)(a1 + 328) = *a3;
  *(_DWORD *)(a1 + 348) = *a4;
  *(_DWORD *)(a1 + 368) = *a5;
  *(_DWORD *)(a1 + 388) = *a6;
  *(_DWORD *)(a1 + 312) = a2[1];
  *(_DWORD *)(a1 + 332) = a3[1];
  *(_DWORD *)(a1 + 352) = a4[1];
  *(_DWORD *)(a1 + 372) = a5[1];
  *(_DWORD *)(a1 + 392) = a6[1];
  *(_DWORD *)(a1 + 316) = a2[2];
  *(_DWORD *)(a1 + 336) = a3[2];
  *(_DWORD *)(a1 + 356) = a4[2];
  *(_DWORD *)(a1 + 376) = a5[2];
  *(_DWORD *)(a1 + 396) = a6[2];
  *(_DWORD *)(a1 + 320) = a2[3];
  *(_DWORD *)(a1 + 340) = a3[3];
  *(_DWORD *)(a1 + 360) = a4[3];
  *(_DWORD *)(a1 + 380) = a5[3];
  *(_DWORD *)(a1 + 400) = a6[3];
  *(_DWORD *)(a1 + 324) = a2[4];
  *(_DWORD *)(a1 + 344) = a3[4];
  *(_DWORD *)(a1 + 364) = a4[4];
  *(_DWORD *)(a1 + 384) = a5[4];
  *(_DWORD *)(a1 + 404) = a6[4];
}

void sub_20E788F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionHwBufferInfoCreate(_QWORD *a1)
{
  char *v2;
  char *v3;
  uint64_t result;

  if (!a1)
    return 4;
  v2 = (char *)operator new(0xA8uLL, MEMORY[0x24BEDB6B8]);
  if (!v2)
    return 3;
  v3 = v2;
  result = 0;
  *a1 = v3;
  *(_WORD *)v3 = 0;
  *(_QWORD *)(v3 + 12) = 0;
  *(_QWORD *)(v3 + 4) = 0;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  return result;
}

#error "20E78904C: call analysis failed (funcsize=65)"

void sub_20E789150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E789164(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  _QWORD *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A49320);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A49320))
  {
    sub_20E7FB67C(&v5);
    sub_20E78570C(__p, "cv3d.vio");
    sub_20E7FE658(&v5, (uint64_t)__p, &qword_254A49318);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A49320);
  }
  *a1 = qword_254A49318;
}

void sub_20E789200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A49320);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A49320);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionHwBufferInfoRelease(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v5[3];
  int v6;
  const char *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;

  if (a1)
  {
    MEMORY[0x212BC47D4](a1, 0x1020C4005052BACLL);
    return 0;
  }
  else
  {
    sub_20E789164(&v12);
    if (**(int **)(v12 + 56) > 5)
      return 4;
    v5[0] = &v12;
    v5[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v5[2] = std::chrono::system_clock::now().__d_.__rep_;
    v6 = 5;
    v7 = "unknown file";
    v8 = 69;
    v10 = 0;
    v11 = 0;
    v9 = "unknown function";
    sub_20E7FBAC0((uint64_t)v5, "%s: Invalid extrDataInfo_hdl", "CVHWAFeatureExtractionHwBufferInfoRelease");
    sub_20E783C94((uint64_t)v5);
    sub_20E783C94((uint64_t)v5);
    v2 = v11;
    if (!v11)
      return 4;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return 4;
    }
    else
    {
      return 4;
    }
  }
}

void sub_20E789384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E783E38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVHWAFeatureExtractionGetKeyPoints(uint64_t a1)
{
  if (!a1)
    sub_20E8062C8();
  return *(_QWORD *)(a1 + 136);
}

uint64_t CVHWAFeatureExtractionGetDescriptors(uint64_t a1)
{
  if (!a1)
    sub_20E8062F4();
  return *(_QWORD *)(a1 + 144);
}

uint64_t CVHWAFeatureExtractionGetNumberOfOctaves(unsigned __int16 *a1)
{
  if (!a1)
    sub_20E806320();
  return *a1;
}

uint64_t CVHWAFeatureExtractionGetNumberOfKeypoints(uint64_t a1)
{
  if (!a1)
    sub_20E80634C();
  return *(unsigned int *)(a1 + 4);
}

uint64_t CVHWAFeatureExtractionGetNumberOfPrunedKeypointsAtTopLevel(uint64_t a1)
{
  if (!a1)
    sub_20E806378();
  return *(unsigned int *)(a1 + 12);
}

uint64_t CVHWAFeatureExtractionGetInputImageWidth(uint64_t a1)
{
  if (!a1)
    sub_20E8063A4();
  return *(unsigned int *)(a1 + 32);
}

uint64_t CVHWAFeatureExtractionGetInputImageHeight(uint64_t a1)
{
  if (!a1)
    sub_20E8063D0();
  return *(unsigned int *)(a1 + 36);
}

uint64_t CVHWAFeatureExtractionGetNumberOfFeatureMatches(uint64_t a1)
{
  if (!a1)
    sub_20E8063FC();
  return *(unsigned int *)(a1 + 8);
}

uint64_t CVHWAFeatureExtractionGetMatchedPairs(uint64_t a1)
{
  if (!a1)
    sub_20E806428();
  return *(_QWORD *)(a1 + 152);
}

uint64_t CVHWAFeatureExtractionGetTids(uint64_t a1)
{
  if (!a1)
    sub_20E806454();
  return *(_QWORD *)(a1 + 160);
}

uint64_t CVHWAFeatureExtractionGetFeatureMatchingEnabled(uint64_t a1)
{
  if (!a1)
    sub_20E806480();
  return *(unsigned __int8 *)(a1 + 18);
}

uint64_t CVHWAFeatureExtractionGetGaussianOutputEnabled(uint64_t a1)
{
  if (!a1)
    sub_20E8064AC();
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t CVHWAFeatureExtractionGetFlowType(uint64_t a1)
{
  if (!a1)
    sub_20E8064D8();
  return *(unsigned __int8 *)(a1 + 17);
}

uint64_t CVHWAFeatureExtractionGetLaccEnabled(uint64_t a1)
{
  if (!a1)
    sub_20E806504();
  return *(unsigned __int8 *)(a1 + 19);
}

uint64_t CVHWAFeatureExtractionGetFrameId(uint64_t a1)
{
  if (!a1)
    sub_20E806530();
  return *(_QWORD *)(a1 + 24);
}

uint64_t CVHWAGetLaccArchVersion()
{
  if (sub_20E7CB574())
    return 2;
  if ((sub_20E7CB5A4() & 1) != 0)
    return 2;
  if ((sub_20E7CB5E8() & 1) != 0)
    return 2;
  return sub_20E7CB530();
}

uint64_t sub_20E78959C(unsigned int a1)
{
  if (a1 > 6)
    return 10;
  else
    return dword_20E80DE88[a1];
}

uint64_t CVHWAGeneralProcessingCreate(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;

  if (!a1)
    return 2;
  sub_20E7FB70C(&v8);
  sub_20E7FE090(v8, 4);
  v2 = (uint64_t *)operator new(8uLL, MEMORY[0x24BEDB6B8]);
  if (!v2)
    return 3;
  v3 = v2;
  *v2 = 0;
  v4 = operator new();
  sub_20E7A4618(v4, 1);
  v5 = *v3;
  *v3 = v4;
  if (v5)
  {
    v6 = sub_20E7A4864();
    MEMORY[0x212BC47D4](v6, 0x10B2C402501FFA3);
  }
  result = 0;
  *a1 = v3;
  return result;
}

uint64_t sub_20E78968C(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v4;

  MEMORY[0x212BC47D4](v2, 0x10B2C402501FFA3);
  __cxa_begin_catch(a1);
  v4 = sub_20E7896F0(v1);
  MEMORY[0x212BC47D4](v4, 0x20C4093837F09);
  __cxa_end_catch();
  return 1;
}

uint64_t *sub_20E7896F0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20E7A4864();
    MEMORY[0x212BC47D4](v3, 0x10B2C402501FFA3);
  }
  return a1;
}

uint64_t CVHWAGeneralProcessingRelease(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 4;
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20E7A4864();
    MEMORY[0x212BC47D4](v3, 0x10B2C402501FFA3);
  }
  MEMORY[0x212BC47D4](a1, 0x20C4093837F09);
  return 0;
}

uint64_t CVHWAGeneralProcessingInit(uint64_t *a1, unsigned int *a2)
{
  unsigned int AccelInstance;
  BOOL v5;
  int v7;
  unsigned int v8;

  if (!a1)
    return 4;
  if (!a2)
    return 2;
  AccelInstance = CVHWAGeneralProcessingConfigGetAccelInstance(a2);
  if (AccelInstance)
    v5 = AccelInstance == 2;
  else
    v5 = 1;
  if (v5)
    return 1;
  v7 = sub_20E7A4868(*a1, (uint64_t)a2);
  if (v7 == 6)
    v8 = 6;
  else
    v8 = 0;
  if (v7 == 4)
    return 1;
  else
    return v8;
}

uint64_t CVHWAGeneralProcessingLoadProgramSegment(uint64_t *a1, void *a2, size_t a3, unsigned int a4)
{
  uint64_t v4;

  if (!a1)
    return 4;
  if (!a2)
    return 2;
  v4 = *a1;
  if (*(_DWORD *)(v4 + 8) - *(_DWORD *)(v4 + 16) <= a4)
  {
    if (sub_20E7A4EF4(v4, a2, a3, a4, a4))
      return 0;
    else
      return 3;
  }
  else if (sub_20E7A50FC(v4, a2, a3, a4, a4))
  {
    return 0;
  }
  else
  {
    return 3;
  }
}

uint64_t CVHWAGeneralProcessingLoadProgramSegmentWithLma(uint64_t *a1, void *a2, size_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;

  if (!a1)
    return 4;
  if (!a2)
    return 2;
  v5 = *a1;
  if (*(_DWORD *)(v5 + 8) - *(_DWORD *)(v5 + 16) <= a4)
  {
    if (sub_20E7A4EF4(v5, a2, a3, a4, a5))
      return 0;
    else
      return 3;
  }
  else if (sub_20E7A50FC(v5, a2, a3, a4, a5))
  {
    return 0;
  }
  else
  {
    return 3;
  }
}

uint64_t CVHWAGeneralProcessingClearProgram(uint64_t *a1)
{
  if (!a1)
    return 4;
  sub_20E7A52A0(*a1);
  return 0;
}

uint64_t CVHWAGeneralProcessingAllocateBuffer(int a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;

  result = 2;
  if (a1 && a2)
  {
    v5 = sub_20E7A386C(a1);
    *a2 = v5;
    if (v5)
      return 0;
    else
      return 3;
  }
  return result;
}

uint64_t CVHWAGeneralProcessingFreeBuffer(uint64_t a1)
{
  if (a1)
    return sub_20E7A3A2C(a1) ^ 1;
  else
    return 2;
}

uint64_t CVHWAGeneralProcessingSetupDMASourceBuffer(uint64_t *a1, uint64_t a2, const void *a3, size_t a4)
{
  size_t v5;

  v5 = a4;
  if (!a1)
    return 4;
  if (!a3)
    return 2;
  if (sub_20E7A5348(*a1, a3, &v5, 1))
    return 0;
  return 3;
}

uint64_t CVHWAGeneralProcessingSetupDMADestinationBuffer(uint64_t *a1, uint64_t a2, const void *a3, size_t a4)
{
  size_t v5;

  v5 = a4;
  if (!a1)
    return 4;
  if (!a3)
    return 2;
  if (sub_20E7A5348(*a1, a3, &v5, 0))
    return 0;
  return 3;
}

uint64_t CVHWAGeneralProcessingAllocateStack(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  sub_20E7A58D4(*a1, a2, a3);
  return 0;
}

uint64_t CVHWAGeneralProcessingWriteStackData(uint64_t *a1, const void *a2, unsigned int a3, size_t a4)
{
  if (!a1)
    return 4;
  if (!a2)
    return 2;
  if (sub_20E7A594C(*a1, a2, a3, a4))
    return 0;
  return 3;
}

uint64_t CVHWAGeneralProcessingReadStackData(uint64_t *a1, unsigned int a2, void *a3, size_t a4)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 2;
  if (a3 && a4)
  {
    if (sub_20E7A59C0(*a1, a2, a3, a4))
      return 0;
    else
      return 2;
  }
  return result;
}

uint64_t CVHWAGeneralProcessingClearStackData(_QWORD *a1)
{
  if (!a1)
    return 4;
  nullsub_13(*a1);
  return 0;
}

uint64_t CVHWAGeneralProcessingClearRegisters(uint64_t *a1)
{
  if (!a1)
    return 4;
  sub_20E7A5314(*a1);
  return 0;
}

uint64_t CVHWAGeneralProcessingSetRegisters(uint64_t *a1, const void *a2, uint64_t a3)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 2;
  if (a2)
  {
    if (a3)
    {
      sub_20E7A5A3C(*a1, a2, a3);
      return 0;
    }
  }
  return result;
}

uint64_t CVHWAGeneralProcessingSetUint32Register(uint64_t *a1, unint64_t a2, int a3)
{
  if (!a1)
    return 4;
  if (a2 > 0x1F)
    return 2;
  sub_20E7A5B80(*a1, a2, a3);
  return 0;
}

uint64_t CVHWAGeneralProcessingSetVecFloatRegister(uint64_t *a1, unint64_t a2, void *a3, unint64_t a4)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 2;
  if (a3 && a2 <= 0x1F && a4 - 9 >= 0xFFFFFFFFFFFFFFF8)
  {
    sub_20E7A5BA4(*a1, a2, a3, a4);
    return 0;
  }
  return result;
}

uint64_t CVHWAGeneralProcessingSetVecDoubleRegister(uint64_t *a1, unint64_t a2, void *a3, unint64_t a4)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 2;
  if (a3 && a2 <= 0x1F && a4 - 5 >= 0xFFFFFFFFFFFFFFFCLL)
  {
    sub_20E7A5BF0(*a1, a2, a3, a4);
    return 0;
  }
  return result;
}

uint64_t CVHWAGeneralProcessingGetUint32Register(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result;
  int v6;

  if (!a1)
    return 4;
  result = 2;
  if (a2 <= 0x1F)
  {
    if (a3)
    {
      v6 = sub_20E7A5C3C(*a1, a2);
      result = 0;
      *a3 = v6;
    }
  }
  return result;
}

uint64_t CVHWAGeneralProcessingGetVecFloatRegister(uint64_t *a1, unint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 2;
  if (a2 <= 0x1F && a3 && (unint64_t)(a4 - 9) >= 0xFFFFFFFFFFFFFFF8)
  {
    sub_20E7A5C68(*a1, a2, a3, a4);
    return 0;
  }
  return result;
}

uint64_t CVHWAGeneralProcessingGetVecDoubleRegister(uint64_t *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 2;
  if (a2 <= 0x1F && a3 && (unint64_t)(a4 - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    sub_20E7A5CA0(*a1, a2, a3, a4);
    return 0;
  }
  return result;
}

uint64_t CVHWAGeneralProcessingRunProgram(uint64_t *a1, int a2, int a3)
{
  if (a1)
    return sub_20E7A5F48(*a1, a2, a3) != 0;
  else
    return 4;
}

uint64_t CVHWAGeneralProcessingCallFunction(uint64_t *a1, char *__s, const char *a3)
{
  size_t v6;
  const void *v7;
  const void **v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  void *__p[2];
  uint64_t v15;
  const void *__dst[2];
  unint64_t v17;

  if (!a1)
    return 4;
  if (__s)
  {
    v6 = strlen(__s);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E7857BC();
    v7 = (const void *)v6;
    if (v6 >= 0x17)
    {
      v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v10 = v6 | 7;
      v11 = v10 + 1;
      v8 = (const void **)operator new(v10 + 1);
      __dst[1] = v7;
      v17 = v11 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v17) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_13:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        __p[0] = 0;
        __p[1] = 0;
        v15 = 0;
        if (a3)
          v12 = a3;
        else
          v12 = "__stop";
        MEMORY[0x212BC45E8](__p, v12);
        v9 = sub_20E7A7BCC(*a1, __dst, (const void **)__p) != 0;
        if (SHIBYTE(v15) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v17) & 0x80000000) == 0)
            return v9;
        }
        else if ((SHIBYTE(v17) & 0x80000000) == 0)
        {
          return v9;
        }
        operator delete((void *)__dst[0]);
        return v9;
      }
    }
    memcpy(v8, __s, (size_t)v7);
    goto LABEL_13;
  }
  return 2;
}

void sub_20E789E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t CVHWAGeneralProcessingReadSpecialRegister(uint64_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result;

  if (!a1)
    return 4;
  result = 2;
  if (a3)
  {
    if (a4)
      return sub_20E7A5CD8(*a1, a2, a3, a4) ^ 1;
  }
  return result;
}

uint64_t CVHWAGeneralProcessingConfigCreate(_QWORD *a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t result;

  if (!a1)
    return 4;
  v2 = operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  if (!v2)
    return 3;
  v3 = v2;
  result = 0;
  *(_DWORD *)v3 = 0;
  v3[31] = 0;
  v3[8] = 0;
  *a1 = v3;
  return result;
}

uint64_t CVHWAGeneralProcessingConfigRelease(uint64_t a1)
{
  if (!a1)
    return 4;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  MEMORY[0x212BC47D4](a1, 0x1012C40849EBCB1);
  return 0;
}

uint64_t CVHWAGeneralProcessingConfigSetAccelInstance(unsigned int *a1, unsigned int a2)
{
  uint64_t result;

  if (!a1)
    return 4;
  if (a2 > 2)
    return 2;
  result = 0;
  *a1 = a2;
  return result;
}

unsigned int *CVHWAGeneralProcessingConfigGetAccelInstance(unsigned int *result)
{
  if (result)
    return (unsigned int *)*result;
  return result;
}

uint64_t CVHWAGeneralProcessingConfigSetBinaryPath(uint64_t a1)
{
  if (!a1)
    return 4;
  MEMORY[0x212BC45E8](a1 + 8);
  return 0;
}

uint64_t CVHWAGeneralProcessingConfigGetBinaryPath(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_20E78A038(uint64_t result, int a2)
{
  __int128 v2;
  uint64_t v3;

  *(_QWORD *)result = &off_24C9A8570;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 0;
  *(_QWORD *)(result + 20) = 0;
  *(_WORD *)(result + 28) = 2;
  *(_DWORD *)(result + 200) = 0;
  *(_OWORD *)(result + 180) = 0u;
  *(_BYTE *)(result + 196) = 0;
  *(_WORD *)(result + 204) = 0;
  *(_DWORD *)(result + 228) = 0;
  *(_OWORD *)(result + 208) = 0u;
  *(_BYTE *)(result + 224) = 0;
  *(_WORD *)(result + 232) = 0;
  *(_DWORD *)(result + 256) = 0;
  *(_OWORD *)(result + 236) = 0u;
  *(_BYTE *)(result + 252) = 0;
  *(_WORD *)(result + 260) = 0;
  *(_DWORD *)(result + 284) = 0;
  *(_BYTE *)(result + 280) = 0;
  *(_OWORD *)(result + 264) = 0u;
  *(_WORD *)(result + 288) = 0;
  *(_DWORD *)(result + 312) = 0;
  *(_OWORD *)(result + 292) = 0u;
  *(_BYTE *)(result + 308) = 0;
  *(_WORD *)(result + 316) = 0;
  *(_DWORD *)(result + 340) = 0;
  *(_OWORD *)(result + 320) = 0u;
  *(_BYTE *)(result + 336) = 0;
  *(_WORD *)(result + 344) = 0;
  *(_DWORD *)(result + 368) = 0;
  *(_OWORD *)(result + 348) = 0u;
  *(_BYTE *)(result + 364) = 0;
  *(_WORD *)(result + 372) = 0;
  *(_DWORD *)(result + 396) = 0;
  *(_OWORD *)(result + 376) = 0u;
  *(_BYTE *)(result + 392) = 0;
  *(_WORD *)(result + 400) = 0;
  *(_DWORD *)(result + 424) = 0;
  *(_BYTE *)(result + 420) = 0;
  *(_OWORD *)(result + 404) = 0u;
  *(_WORD *)(result + 428) = 0;
  *(_DWORD *)(result + 452) = 0;
  *(_OWORD *)(result + 432) = 0u;
  *(_BYTE *)(result + 448) = 0;
  *(_WORD *)(result + 456) = 0;
  *(_DWORD *)(result + 480) = 0;
  *(_OWORD *)(result + 460) = 0u;
  *(_BYTE *)(result + 476) = 0;
  *(_WORD *)(result + 484) = 0;
  *(_DWORD *)(result + 508) = 0;
  *(_OWORD *)(result + 488) = 0u;
  *(_BYTE *)(result + 504) = 0;
  *(_WORD *)(result + 512) = 0;
  *(_DWORD *)(result + 536) = 0;
  *(_BYTE *)(result + 532) = 0;
  *(_OWORD *)(result + 516) = 0u;
  *(_WORD *)(result + 540) = 0;
  *(_DWORD *)(result + 564) = 0;
  *(_OWORD *)(result + 544) = 0u;
  *(_BYTE *)(result + 560) = 0;
  *(_WORD *)(result + 568) = 0;
  *(_DWORD *)(result + 592) = 0;
  *(_OWORD *)(result + 572) = 0u;
  *(_BYTE *)(result + 588) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_WORD *)(result + 176) = 0;
  *(_OWORD *)(result + 660) = 0u;
  *(_OWORD *)(result + 632) = 0u;
  *(_OWORD *)(result + 648) = 0u;
  *(_OWORD *)(result + 600) = 0u;
  *(_OWORD *)(result + 616) = 0u;
  *(_OWORD *)(result + 680) = xmmword_20E80DEC0;
  *(_OWORD *)(result + 696) = xmmword_20E80DED0;
  *(_OWORD *)(result + 712) = xmmword_20E80DEE0;
  *(_OWORD *)(result + 728) = xmmword_20E80DEF0;
  *(_DWORD *)(result + 744) = 4;
  *(_WORD *)(result + 748) = 5;
  *(_QWORD *)(result + 752) = 0xFFFF0000003FLL;
  *(_OWORD *)(result + 760) = xmmword_20E80DF00;
  *(_QWORD *)(result + 776) = 0x3F80000000000000;
  *(_DWORD *)(result + 784) = 511;
  *(_QWORD *)(result + 808) = 0;
  *(_OWORD *)(result + 792) = 0u;
  *(_BYTE *)(result + 816) = 26;
  *(_QWORD *)(result + 824) = 0;
  if (a2 == 7)
  {
    v2 = xmmword_20E80DF10;
    v3 = 0x29B000000;
  }
  else
  {
    if (a2 != 8)
    {
      sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 54, "0 && \"unsupported platform\"", (void (*)(void *))sub_20E803DA4);
      abort();
    }
    v2 = xmmword_20E80DF20;
    v3 = 0x48F000000;
  }
  *(_QWORD *)(result + 824) = v3;
  *(_OWORD *)(result + 656) = v2;
  *(_BYTE *)(result + 816) = 26;
  return result;
}

void sub_20E78A2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v11;

  if (*a10)
  {
    *(_QWORD *)(v10 + 800) = *a10;
    MEMORY[0x212BC47C8]();
  }
  sub_20E78A2E4(v11);
  nullsub_13(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E78A2E4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

BOOL sub_20E78A368(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned int v5;
  int v6;
  int v7;
  char *v8;
  unint64_t v9;

  if (*(_BYTE *)(a2 + 68) != 2)
    return 0;
  *(_WORD *)(a2 + 50) = sub_20E7E78F8(*(_DWORD *)a2, *(_DWORD *)(a2 + 4));
  result = sub_20E799E38(a1 + 680, a2);
  if (result)
  {
    result = sub_20E78A4B0(a1, a2);
    if (result)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
      v5 = *(unsigned __int16 *)(a2 + 50);
      *(_WORD *)(a1 + 16) = v5;
      v6 = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 24) = v6;
      v7 = *(unsigned __int8 *)(a2 + 68);
      *(_BYTE *)(a1 + 28) = v7;
      sub_20E798BD8(a1 + 32, v5, v7);
      if (*(_BYTE *)(a1 + 28) == 2)
      {
        v8 = *(char **)(a1 + 792);
        v9 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(_QWORD *)(a1 + 800) - (_QWORD)v8) >> 7);
        if (*(char **)(a1 + 800) == v8)
        {
          sub_20E78D69C((char **)(a1 + 792), 1 - v9);
          v8 = *(char **)(a1 + 792);
        }
        else if (v9 >= 2)
        {
          *(_QWORD *)(a1 + 800) = v8 + 6528;
        }
        sub_20E78A804(a1 + 680, a2, v8, a1 + 600, a1 + 32);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_20E78A4B0(uint64_t a1, uint64_t a2)
{
  __CVBuffer *v4;
  int BytesPerRow;
  int Height;
  int Width;
  void *BaseAddress;
  unsigned int v9;
  _BOOL8 v10;
  size_t v11;
  unsigned int v12;
  int v13;
  __CVBuffer *v14;
  _QWORD *v15;
  uint64_t (*v16)(_QWORD, _QWORD);
  void *v17;
  uint8_t *v18;
  uint64_t v19;
  __CVBuffer *v20;
  CVPixelBufferRef pixelBuffer;
  uint8_t buf[4];
  int v24;
  uint8_t *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a2 + 92))
    return *(_QWORD *)(a2 + 168) == 0;
  if (*(_BYTE *)(a2 + 165) == 1)
  {
    v4 = *(__CVBuffer **)(a2 + 168);
    if (!v4)
      return 1;
    BytesPerRow = CVPixelBufferGetBytesPerRow(v4);
    Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 168));
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Lacc config and metadata received\n", buf, 2u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 168));
      *(_DWORD *)buf = 67109120;
      v24 = Width;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "width = %d", buf, 8u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v24 = Height;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "height = %d", buf, 8u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v24 = BytesPerRow;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "stride = %d", buf, 8u);
    }
    CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(a2 + 168), 0);
    BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 168));
    v9 = Height * BytesPerRow;
  }
  else
  {
    v9 = dword_254A40170;
    BaseAddress = &unk_254A3FDF8;
  }
  v11 = v9;
  pixelBuffer = 0;
  v12 = sub_20E78AA60((_DWORD *)(a1 + 600), (uint64_t)BaseAddress, v9);
  v13 = sub_20E805430(v12, 1u, 0x4C303038u, &pixelBuffer, 16, 16, 0, 1, 0);
  v10 = v13 == 0;
  if (!v13)
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    v14 = pixelBuffer;
    v15 = operator new(0x20uLL);
    v16 = MEMORY[0x24BDC53B0];
    *v15 = &off_24C9A86E0;
    v15[1] = v16;
    v15[2] = v14;
    *((_DWORD *)v15 + 6) = 0;
    v25 = (uint8_t *)v15;
    v17 = CVPixelBufferGetBaseAddress(v14);
    memcpy(v17, BaseAddress, v11);
    *(_QWORD *)(a1 + 600) = pixelBuffer;
    *(_BYTE *)(a1 + 29) = 1;
    if (!v25)
      sub_20E78D5A0();
    (*(void (**)(uint8_t *))(*(_QWORD *)v25 + 48))(v25);
    v18 = v25;
    if (v25 == buf)
    {
      v19 = 4;
      v18 = buf;
    }
    else
    {
      if (!v25)
        goto LABEL_23;
      v19 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
  }
LABEL_23:
  v20 = *(__CVBuffer **)(a2 + 168);
  if (v20)
  {
    if (*(_BYTE *)(a2 + 165) == 1)
    {
      CVPixelBufferUnlockBaseAddress(v20, 0);
      v20 = *(__CVBuffer **)(a2 + 168);
    }
    CVPixelBufferRelease(v20);
  }
  return v10;
}

void sub_20E78A7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E78AB68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E78A7E8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E785844(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20E78A804(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  int v10;
  double result;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  bzero(a3, 0x1980uLL);
  *(_DWORD *)(a4 + 72) = (*(_QWORD *)a4 != 0) << 12;
  v10 = *(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16);
  sub_20E78D8B0(a1, a2, a3 + 64, a4, a5);
  v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFFC | (v10 != 0);
  *((_DWORD *)a3 + 1) = v12;
  if (v10)
  {
    *(_BYTE *)(a5 + 472) = 1;
    *(_DWORD *)(a5 + 476) = 0;
    if (sub_20E7C59A4(a5 + 452, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(_DWORD *)(a4 + 12), 8) != v10)
      sub_20E8065B4();
    v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFF3 | 4;
    *((_DWORD *)a3 + 1) = v12;
    *((_QWORD *)a3 + 797) = *(_QWORD *)(a4 + 56);
    *((_DWORD *)a3 + 1596) = v10;
  }
  v13 = *(_DWORD *)(a4 + 28);
  v14 = *(_DWORD *)(a4 + 32);
  v15 = v14 * v13;
  if (v14 * v13)
  {
    *(_BYTE *)(a5 + 500) = 1;
    *(_DWORD *)(a5 + 504) = 0;
    if (sub_20E7C59A4(a5 + 480, v13, v14, *(_DWORD *)(a4 + 24), 8) != v15)
      sub_20E806588();
    v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFCF | 0x10;
    *((_DWORD *)a3 + 1) = v12;
    *(_QWORD *)(a3 + 6388) = *(_QWORD *)(a4 + 64);
    *((_DWORD *)a3 + 1599) = v15;
  }
  v16 = *(_DWORD *)(a4 + 40);
  v17 = *(_DWORD *)(a4 + 44);
  v18 = v17 * v16;
  if (v17 * v16)
  {
    *(_BYTE *)(a5 + 528) = 1;
    *(_DWORD *)(a5 + 532) = *(_DWORD *)(a4 + 72);
    if (sub_20E7C59A4(a5 + 508, v16, v17, *(_DWORD *)(a4 + 36), 8) != v18)
      sub_20E80655C();
    *(_DWORD *)(a4 + 72) += v18;
    v19 = *(_QWORD *)(a4 + 64) + *(unsigned int *)(a5 + 532);
    v12 = *((_DWORD *)a3 + 1) & 0xFFFFFF3F | 0x40;
    *((_DWORD *)a3 + 1) = v12;
    *((_QWORD *)a3 + 800) = v19;
    *((_DWORD *)a3 + 1602) = v18;
  }
  if (*(_BYTE *)(a5 + 360))
  {
    v20 = *(_QWORD *)(a4 + 64) + *(unsigned int *)(a5 + 364);
    v12 = v12 & 0xFFFFF3FF | 0x400;
    *((_DWORD *)a3 + 1) = v12;
    *((_QWORD *)a3 + 803) = v20;
    *((_DWORD *)a3 + 1608) = *(_DWORD *)(a5 + 348) * *(_DWORD *)(a5 + 352);
  }
  if (*(_BYTE *)(a5 + 388))
  {
    v21 = *(_QWORD *)(a4 + 64) + *(unsigned int *)(a5 + 392);
    *((_DWORD *)a3 + 1) = v12 & 0xFFFFCFFF | 0x1000;
    *(_QWORD *)(a3 + 6436) = v21;
    *((_DWORD *)a3 + 1611) = *(_DWORD *)(a5 + 376) * *(_DWORD *)(a5 + 380);
  }
  if (v10)
  {
    *((_DWORD *)a3 + 1334) = *(_DWORD *)(a4 + 8);
    *((_DWORD *)a3 + 1335) = 0x80000000;
    *((_QWORD *)a3 + 668) = 0;
    *(_QWORD *)&result = 0x600000006;
    *((_QWORD *)a3 + 651) = 0x600000006;
    *((_DWORD *)a3 + 1295) = 0x80000;
  }
  return result;
}

unint64_t sub_20E78AA60(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;

  if (!a2)
    sub_20E8065E0();
  a1[2] = *(unsigned __int16 *)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v5)
  {
    v6 = (const char *)(a2 + 41);
    v7 = 96;
    while (1)
    {
      if (!strncmp(v6, "ro", 7uLL))
      {
        a1[6] = *(_DWORD *)(v6 - 5);
        v8 = *(unsigned int *)(v6 - 9);
        a1[7] = v8;
        a1[8] = 1;
      }
      else
      {
        if (strncmp(v6, "text", 7uLL))
          goto LABEL_6;
        a1[3] = *(_DWORD *)(v6 - 5);
        a1[4] = 64;
        v9 = *(_DWORD *)(v6 - 9) + 63;
        a1[5] = v9 >> 6;
        v8 = v9 & 0xFFFFFFC0;
      }
      v7 += v8;
LABEL_6:
      v6 += 16;
      if (!--v5)
        goto LABEL_11;
    }
  }
  v7 = 96;
LABEL_11:
  if (!(a1[5] * a1[4]))
    sub_20E80660C();
  if (v7 < a3)
    sub_20E806638();
  return v7;
}

_QWORD *sub_20E78AB68(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1[3];
  if (!v2)
    sub_20E78D5A0();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t sub_20E78ABD4()
{
  return 3776;
}

uint64_t sub_20E78ABDC()
{
  return 6528;
}

uint64_t sub_20E78ABE4()
{
  return 1664;
}

double sub_20E78ABEC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _DWORD *v6;
  unsigned int v7;
  int v8;
  double result;

  v6 = *(_DWORD **)(a1 + 792);
  v7 = *(unsigned __int16 *)(a1 + 16);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  *(_QWORD *)&result = sub_20E78AC4C(v6, v7, v8, a2, a3, (_QWORD *)(a1 + 32)).n128_u64[0];
  return result;
}

__n128 sub_20E78AC4C(_DWORD *a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, _QWORD *a6)
{
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  __n128 result;
  uint64_t v27;

  if (a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v27 = a2;
    do
    {
      v13 = 3 << (v10 & 0xFE);
      if ((v13 & a1[101]) != 0)
      {
        v14 = *a6 + v9;
        v15 = sub_20E7E7940(a4, v12);
        v16 = sub_20E7E7940(a5, v12);
        v11 += sub_20E7C5980(v14, v15, v16, v11);
      }
      if ((v13 & a1[102]) != 0)
      {
        v17 = a6[9] + v9;
        v18 = sub_20E7E7940(a4, v12);
        v19 = sub_20E7E7940(a5, v12);
        v11 += sub_20E7C5958(v17, v18, v19, v11);
      }
      ++v12;
      v10 += 2;
      v9 += 28;
    }
    while (v27 != v12);
  }
  else
  {
    v11 = 0;
  }
  if (a1[545])
  {
    v20 = a6;
    v11 += sub_20E7C5A20(0x186A00u, v11, 64, (uint64_t)(a6 + 32));
    if (!a1[103])
      goto LABEL_12;
    goto LABEL_11;
  }
  v20 = a6;
  if (a1[103])
LABEL_11:
    v11 += sub_20E7C5A20(8 * a1[486], v11, 64, (uint64_t)v20 + 284);
LABEL_12:
  v21 = (((unint64_t)a1[544] >> 2) & 3) - 1;
  if (v21 <= 2)
  {
    v22 = dword_20E80E1F4[v21];
    v23 = sub_20E7C59D0(a1[486] * v22, v11, (uint64_t)v20 + 172) + v11;
    v11 = sub_20E7C59D0(a1[486] * v22, v23, (uint64_t)(v20 + 18)) + v23;
  }
  v24 = sub_20E7C59A4(v20[15], (a3 + 63) & 0xFFFFFFC0, 1, v11, 8) + v11;
  if (*((_BYTE *)v20 + 340))
  {
    *((_DWORD *)v20 + 89) = v24;
    v24 += *((_DWORD *)v20 + 87) * *((_DWORD *)v20 + 88);
  }
  if (*((_BYTE *)v20 + 368))
  {
    *((_DWORD *)v20 + 96) = v24;
    v20[41] = *(_QWORD *)((char *)v20 + 356);
    result = *(__n128 *)((char *)v20 + 340);
    *(__n128 *)(v20 + 39) = result;
    *((_BYTE *)v20 + 332) = 0;
    *((_DWORD *)v20 + 84) = 0;
  }
  return result;
}

uint64_t sub_20E78AEA4(uint64_t a1, int a2)
{
  return ((8 * a2 + 63) & 0xFFFFFFC0) + ((4 * a2 + 63) & 0xFFFFFFC0) + 576;
}

void *sub_20E78AEC8(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  const void *v4;
  int v5;

  if (a4 != 8)
    sub_20E806690();
  if (a3 || (v4 = *(const void **)(a1 + 792), *(_QWORD *)(a1 + 800) - (_QWORD)v4 != 6528))
    sub_20E806664();
  v5 = *(unsigned __int8 *)(a1 + 816);
  *a2 = -1;
  a2[1] = v5;
  a2[3] = 6528;
  return memcpy(a2 + 4, v4, 0x1980uLL);
}

uint64_t sub_20E78AF20(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7)
{
  size_t v13;

  if (a7)
    sub_20E8066BC();
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  return sub_20E78AF94(a2, v13, a3, a4, a5, a6, *(_DWORD *)(a1 + 24), (unsigned int *)(a1 + 32));
}

uint64_t sub_20E78AF94(_DWORD *a1, size_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, unsigned int *a8)
{
  uint64_t v15;
  uint64_t result;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  bzero(a1, a2);
  *a1 = -1;
  a1[1] = a3 | 0x80000000;
  *((_QWORD *)a1 + 1) = 0;
  a1[38] |= 0x7FFFFFFFu;
  a1[59] |= 0x7FFFFFFFu;
  a1[80] |= 0x7FFFFFFFu;
  a1[101] |= 0x7FFFFFFFu;
  a1[122] |= 0x7FFFFFFFu;
  a1[143] |= 0x7FFFFFFFu;
  a1[164] |= 0x7FFFFFFFu;
  a1[185] |= 0x7FFFFFFFu;
  a1[206] |= 0x7FFFFFFFu;
  a1[227] |= 0x7FFFFFFFu;
  a1[248] |= 0x7FFFFFFFu;
  a1[269] |= 0x7FFFFFFFu;
  a1[290] |= 0x7FFFFFFFu;
  a1[311] |= 0x7FFFFFFFu;
  a1[332] |= 0x7FFFFFFFu;
  a1[353] |= 0x7FFFFFFFu;
  a1[374] |= 0x7FFFFFFFu;
  a1[395] |= 0x7FFFFFFFu;
  v15 = *((_QWORD *)a8 + 1) - *(_QWORD *)a8;
  *((_QWORD *)a1 + 18) = 0x100000012;
  if (((0x6DB6DB6DB6DB6DB7 * (v15 >> 2)) & 0xFFFFFFFFFFFFFFFELL) != 4)
    sub_20E8066E8();
  result = sub_20E7C56D4((uint64_t)(a1 + 80), a4, a5, a6, 8, 0, 0);
  v17 = *(_BYTE **)a8;
  if (**(_BYTE **)a8)
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 101), *((_DWORD *)v17 + 1), *((_DWORD *)v17 + 2), *((_DWORD *)v17 + 3), 8, 1, *((_DWORD *)v17 + 4) + a7);
    v17 = *(_BYTE **)a8;
  }
  if (v17[28])
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 122), *((_DWORD *)v17 + 8), *((_DWORD *)v17 + 9), *((_DWORD *)v17 + 10), 8, 1, *((_DWORD *)v17 + 11) + a7);
    v17 = *(_BYTE **)a8;
  }
  if (v17[56])
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 143), *((_DWORD *)v17 + 15), *((_DWORD *)v17 + 16), *((_DWORD *)v17 + 17), 8, 1, *((_DWORD *)v17 + 18) + a7);
    v17 = *(_BYTE **)a8;
  }
  if (v17[84])
    result = sub_20E7C56D4((uint64_t)(a1 + 164), *((_DWORD *)v17 + 22), *((_DWORD *)v17 + 23), *((_DWORD *)v17 + 24), 8, 1, *((_DWORD *)v17 + 25) + a7);
  v18 = *((_QWORD *)a8 + 9);
  if (*(_BYTE *)v18)
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 101), *(_DWORD *)(v18 + 4), *(_DWORD *)(v18 + 8), *(_DWORD *)(v18 + 12), 4, 1, *(_DWORD *)(v18 + 16) + a7);
    v18 = *((_QWORD *)a8 + 9);
  }
  if (*(_BYTE *)(v18 + 28))
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 122), *(_DWORD *)(v18 + 32), *(_DWORD *)(v18 + 36), *(_DWORD *)(v18 + 40), 4, 1, *(_DWORD *)(v18 + 44) + a7);
    v18 = *((_QWORD *)a8 + 9);
  }
  if (*(_BYTE *)(v18 + 56))
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 143), *(_DWORD *)(v18 + 60), *(_DWORD *)(v18 + 64), *(_DWORD *)(v18 + 68), 4, 1, *(_DWORD *)(v18 + 72) + a7);
    v18 = *((_QWORD *)a8 + 9);
  }
  if (*(_BYTE *)(v18 + 84))
    result = sub_20E7C56D4((uint64_t)(a1 + 164), *(_DWORD *)(v18 + 88), *(_DWORD *)(v18 + 92), *(_DWORD *)(v18 + 96), 4, 1, *(_DWORD *)(v18 + 100) + a7);
  if (v15 == 140)
  {
    if (*(_BYTE *)(*(_QWORD *)a8 + 112))
      result = sub_20E7C56D4((uint64_t)(a1 + 185), *(_DWORD *)(*(_QWORD *)a8 + 116), *(_DWORD *)(*(_QWORD *)a8 + 120), *(_DWORD *)(*(_QWORD *)a8 + 124), 8, 1, *(_DWORD *)(*(_QWORD *)a8 + 128) + a7);
    v19 = *((_QWORD *)a8 + 9);
    if (*(_BYTE *)(v19 + 112))
      result = sub_20E7C56D4((uint64_t)(a1 + 185), *(_DWORD *)(v19 + 116), *(_DWORD *)(v19 + 120), *(_DWORD *)(v19 + 124), 4, 1, *(_DWORD *)(v19 + 128) + a7);
  }
  v20 = *((_QWORD *)a8 + 15);
  if (*(_BYTE *)v20)
    result = sub_20E7C56D4((uint64_t)(a1 + 395), *(_DWORD *)(v20 + 4), *(_DWORD *)(v20 + 8), *(_DWORD *)(v20 + 12), 8, 1, *(_DWORD *)(v20 + 16) + a7);
  if (*((_BYTE *)a8 + 256))
    result = sub_20E7C56D4((uint64_t)(a1 + 206), a8[65], a8[66], a8[67], 8, 1, a8[68] + a7);
  if (*((_BYTE *)a8 + 284))
    result = sub_20E7C56D4((uint64_t)(a1 + 227), a8[72], a8[73], a8[74], 8, 1, a8[75] + a7);
  if (*((_BYTE *)a8 + 144))
    result = sub_20E7C56D4((uint64_t)(a1 + 206), a8[37], a8[38], a8[39], 8, 1, a8[40] + a7);
  if (*((_BYTE *)a8 + 172))
    result = sub_20E7C56D4((uint64_t)(a1 + 227), a8[44], a8[45], a8[46], 8, 1, a8[47] + a7);
  if (*((_BYTE *)a8 + 340))
    result = sub_20E7C56D4((uint64_t)(a1 + 248), a8[86], a8[87], a8[88], 8, 1, a8[89] + a7);
  if (*((_BYTE *)a8 + 312))
    result = sub_20E7C56D4((uint64_t)(a1 + 59), a8[79], a8[80], a8[81], 8, 2, a8[82] + a7);
  if (*((_BYTE *)a8 + 368))
    result = sub_20E7C56D4((uint64_t)(a1 + 332), a8[93], a8[94], a8[95], 8, 1, a8[96] + a7);
  if (*((_BYTE *)a8 + 452))
    result = sub_20E7C56D4((uint64_t)(a1 + 38), a8[114], a8[115], a8[116], 8, 3, a8[117]);
  if (*((_BYTE *)a8 + 480))
    return sub_20E7C56D4((uint64_t)(a1 + 269), a8[121], a8[122], a8[123], 8, 3, a8[124]);
  return result;
}

__n128 sub_20E78B4B0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint16x4_t *v14;
  uint32x4_t *v15;
  uint32x4_t v16;
  uint32x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  __int128 v25;
  __int128 v26;
  __n128 result;
  __int128 v28;

  v3 = 0;
  *(_QWORD *)(a3 + 92) = *(uint64_t *)((char *)a2 + 100);
  v4 = *a2;
  *(_WORD *)(a3 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)a3 = v4;
  v5 = *(uint64_t *)((char *)a2 + 10);
  *(_WORD *)(a3 + 18) = *((_WORD *)a2 + 9);
  *(_QWORD *)(a3 + 10) = v5;
  v6 = *(uint64_t *)((char *)a2 + 20);
  *(_WORD *)(a3 + 28) = *((_WORD *)a2 + 14);
  *(_QWORD *)(a3 + 20) = v6;
  v7 = *(uint64_t *)((char *)a2 + 30);
  *(_WORD *)(a3 + 38) = *((_WORD *)a2 + 19);
  *(_QWORD *)(a3 + 30) = v7;
  v8 = a2[5];
  *(_WORD *)(a3 + 48) = *((_WORD *)a2 + 24);
  *(_QWORD *)(a3 + 40) = v8;
  v9 = *(_OWORD *)((char *)a2 + 52);
  v10 = *(_OWORD *)((char *)a2 + 68);
  *(_QWORD *)(a3 + 84) = *(uint64_t *)((char *)a2 + 84);
  *(_OWORD *)(a3 + 68) = v10;
  *(_OWORD *)(a3 + 52) = v9;
  v11 = *(_OWORD *)((char *)a2 + 126);
  *(_WORD *)(a3 + 124) = *((_WORD *)a2 + 71);
  *(_OWORD *)(a3 + 108) = v11;
  v12 = *(_OWORD *)((char *)a2 + 108);
  *(_WORD *)(a3 + 142) = *((_WORD *)a2 + 62);
  *(_OWORD *)(a3 + 126) = v12;
  v13 = *((_OWORD *)a2 + 82);
  *(_OWORD *)(a3 + 144) = *((_OWORD *)a2 + 81);
  *(_OWORD *)(a3 + 160) = v13;
  v14 = (uint16x4_t *)(a2 + 49);
  do
  {
    v15 = *(uint32x4_t **)(a3 + 240 + v3);
    v16 = vmovl_u16(v14[-14]);
    *v15 = vmovl_u16(v14[-15]);
    v15[1] = v16;
    v17 = vmovl_u16(v14[-12]);
    v15[2] = vmovl_u16(v14[-13]);
    v15[3] = v17;
    v18 = vmovl_u16(v14[-10]);
    v15[4] = vmovl_u16(v14[-11]);
    v15[5] = v18;
    v19 = vmovl_u16(v14[-8]);
    v15[6] = vmovl_u16(v14[-9]);
    v15[7] = v19;
    v20 = vmovl_u16(v14[-6]);
    v15[8] = vmovl_u16(v14[-7]);
    v15[9] = v20;
    v21 = vmovl_u16(v14[-4]);
    v15[10] = vmovl_u16(v14[-5]);
    v15[11] = v21;
    v22 = vmovl_u16(v14[-2]);
    v15[12] = vmovl_u16(v14[-3]);
    v15[13] = v22;
    v23 = vmovl_u16(v14[-1]);
    v24 = vmovl_u16(*v14);
    v3 += 24;
    v14 += 16;
    v15[14] = v23;
    v15[15] = v24;
  }
  while (v3 != 192);
  *(_WORD *)(a3 + 176) = *((_WORD *)a2 + 664);
  *(_DWORD *)(a3 + 436) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a3 + 180) = *((_OWORD *)a2 + 100);
  *(_OWORD *)(a3 + 196) = *((_OWORD *)a2 + 101);
  *(_OWORD *)(a3 + 212) = *((_OWORD *)a2 + 102);
  *(_QWORD *)(a3 + 228) = a2[206];
  *(_DWORD *)(a3 + 236) = *((_DWORD *)a2 + 414);
  *(_DWORD *)(a3 + 432) = *((_DWORD *)a2 + 866);
  v25 = *(_OWORD *)((char *)a2 + 1660);
  v26 = *(_OWORD *)((char *)a2 + 1676);
  *(_DWORD *)(a3 + 512) = *((_DWORD *)a2 + 423);
  *(_OWORD *)(a3 + 480) = v25;
  *(_OWORD *)(a3 + 496) = v26;
  result = *((__n128 *)a2 + 106);
  v28 = *((_OWORD *)a2 + 107);
  *(_DWORD *)(a3 + 548) = *((_DWORD *)a2 + 432);
  *(__n128 *)(a3 + 516) = result;
  *(_OWORD *)(a3 + 532) = v28;
  return result;
}

uint64_t sub_20E78B65C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t result;
  int v4;

  switch(a2)
  {
    case 0:
      result = *(_QWORD *)(a1 + 32) + 28 * a3;
      break;
    case 1:
      if (*(_BYTE *)(a1 + 28) != 1)
        sub_20E806740();
      result = *(_QWORD *)(a1 + 56) + 28 * a3;
      break;
    case 2:
      if (*(_BYTE *)(a1 + 28) != 1)
        sub_20E80676C();
      result = *(_QWORD *)(a1 + 80) + 28 * a3;
      break;
    case 3:
      result = *(_QWORD *)(a1 + 104) + 28 * a3;
      break;
    case 4:
      if (*(_BYTE *)(a1 + 28) != 1)
        sub_20E806798();
      result = *(_QWORD *)(a1 + 128) + 28 * a3;
      break;
    case 5:
      v4 = *(unsigned __int8 *)(a1 + 28);
      if (v4 != 1 && (a3 || v4 != 2))
        sub_20E8067C4();
      result = *(_QWORD *)(a1 + 152) + 28 * a3;
      break;
    case 6:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E80681C();
      if (a3)
        sub_20E8067F0();
      result = a1 + 176;
      break;
    case 7:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E806874();
      if (a3)
        sub_20E806848();
      result = a1 + 204;
      break;
    case 8:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E8068CC();
      if (a3)
        sub_20E8068A0();
      result = a1 + 232;
      break;
    case 9:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E806924();
      if (a3)
        sub_20E8068F8();
      result = a1 + 260;
      break;
    case 10:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E80697C();
      if (a3)
        sub_20E806950();
      result = a1 + 288;
      break;
    case 11:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E8069D4();
      if (a3)
        sub_20E8069A8();
      result = a1 + 316;
      break;
    case 12:
      if (a3)
        sub_20E806A00();
      result = a1 + 372;
      break;
    case 13:
      if (a3)
        sub_20E806A2C();
      result = a1 + 400;
      break;
    default:
      sub_20E806714();
  }
  return result;
}

uint64_t sub_20E78B850(uint64_t result, int32x4_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int16x8_t *v6;
  int32x4_t *v7;
  unint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  __int16 *v12;
  __int16 *v13;
  __int16 v14;

  if (*(_BYTE *)(result + 28) != 2)
    sub_20E806A58();
  v2 = *(unsigned __int16 *)(result + 16);
  v3 = 2 * v2 - 2;
  if (2 * (_DWORD)v2 != 2)
  {
    v4 = *(_QWORD *)(result + 792);
    if (v3 < 0x10)
    {
      v5 = 0;
LABEL_8:
      v11 = v5 - 2 * v2 + 2;
      v12 = (__int16 *)(v4 + 2 * v5 + 2354);
      v13 = &a2->i16[4 * v5];
      do
      {
        v14 = *v13;
        v13 += 4;
        v12[9] = v14;
        *v12++ = v14;
      }
      while (!__CFADD__(v11++, 1));
      return result;
    }
    v5 = v3 & 0xFFFFFFFFFFFFFFF0;
    v6 = (int16x8_t *)(v4 + 2388);
    v7 = a2 + 4;
    v8 = v3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v9 = vuzp1q_s16((int16x8_t)vuzp1q_s32(v7[-4], v7[-3]), (int16x8_t)vuzp1q_s32(v7[-2], v7[-1]));
      v10 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v7, v7[1]), (int16x8_t)vuzp1q_s32(v7[2], v7[3]));
      v6[-1] = v9;
      *v6 = v10;
      *(int16x8_t *)((char *)v6 - 34) = v9;
      *(int16x8_t *)((char *)v6 - 18) = v10;
      v6 += 2;
      v7 += 8;
      v8 -= 16;
    }
    while (v8);
    if (v5 != v3)
      goto LABEL_8;
  }
  return result;
}

void sub_20E78B918()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwColl.cpp", 413, "0 && \"Update config not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

__n128 sub_20E78B944@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  __n128 v4;
  __n128 v5;
  uint64_t v6;
  __n128 result;

  v2 = (_QWORD *)(*(_QWORD *)(a1 + 792) + 2188);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 792) + 2196);
  v4.n128_u64[0] = *v2;
  v4.n128_u64[1] = HIDWORD(*v2);
  v5 = v4;
  v4.n128_u64[0] = v3;
  v4.n128_u64[1] = HIDWORD(v3);
  *a2 = v5;
  a2[1] = v4;
  v5.n128_u64[0] = v2[2];
  v6 = v2[3];
  v4.n128_u64[0] = v5.n128_u32[0];
  v4.n128_u64[1] = v5.n128_u32[1];
  result = v4;
  v4.n128_u64[0] = v6;
  v4.n128_u64[1] = HIDWORD(v6);
  a2[2] = result;
  a2[3] = v4;
  return result;
}

uint64_t sub_20E78B970(uint64_t a1)
{
  return *(_QWORD *)(a1 + 600);
}

uint64_t sub_20E78B978(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 29);
}

uint64_t sub_20E78B980(uint64_t result, int a2)
{
  if (*(_BYTE *)(result + 28) != 2)
    sub_20E806A84();
  *(_DWORD *)(*(_QWORD *)(result + 792) + 3908) = a2;
  return result;
}

void sub_20E78B9A8(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
}

double sub_20E78B9B4(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  double result;

  v3 = *a2;
  *(_DWORD *)(a3 + 8) = 2;
  *(_DWORD *)(a3 + 12) = v3;
  if (*a2 == 1)
  {
    v6 = 0x20000;
    v4 = 0x80000;
    v5 = 0x200000;
    goto LABEL_5;
  }
  if (*a2 == 2)
  {
    v4 = 98304;
    v5 = 0x400000;
    v6 = 98304;
LABEL_5:
    *(_QWORD *)&result = v4 | 0x10000000000000;
    *(_QWORD *)a3 = *(_QWORD *)(a1 + 824) + v5;
    *(_DWORD *)(a3 + 16) = 0;
    *(double *)(a3 + 20) = result;
    *(_DWORD *)(a3 + 28) = v6;
    return result;
  }
  result = 0.0;
  *(_QWORD *)a3 = -1;
  *(_DWORD *)(a3 + 16) = -1;
  *(_QWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 28) = 0;
  return result;
}

double sub_20E78BA3C(uint64_t a1, uint64_t a2)
{
  double result;

  if (!a2)
    sub_20E806AB0();
  *(_OWORD *)a2 = xmmword_20E80DF30;
  *(_QWORD *)&result = 0x198000000000;
  *(_QWORD *)(a2 + 16) = 0x198000000000;
  return result;
}

double sub_20E78BA6C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  return sub_20E78BA88(a2 + *(unsigned int *)(a2 + 4) + 16, a3, 1, 1);
}

double sub_20E78BA88(uint64_t a1, unsigned __int8 *a2, int a3, char a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  double result;
  int v18;

  if (!sub_20E7CB574() && (sub_20E7CB5A4() & 1) == 0)
    sub_20E806B8C();
  if (!a3 || (a4 & 1) == 0)
    sub_20E806B60();
  v8 = *a2;
  if (v8 >= 4)
    sub_20E806B34();
  v9 = *(_DWORD *)(a1 + 4) & 0xFFFFFFFC | v8;
  *(_DWORD *)(a1 + 4) = v9;
  *(_DWORD *)(a1 + 64) &= ~1u;
  *(_QWORD *)(a1 + 128) |= 1uLL;
  *(_DWORD *)(a1 + 3840) |= 1u;
  v10 = a2[2];
  if (v10 >= 3)
    goto LABEL_33;
  if (a2[6] >= 3u)
    goto LABEL_34;
  v11 = a2[3];
  if (v11 > 2)
    goto LABEL_33;
  if (a2[7] > 2u)
    goto LABEL_34;
  if (a2[4] > 2u)
    goto LABEL_33;
  if (a2[8] > 2u)
    goto LABEL_34;
  if (a2[5] > 2u)
LABEL_33:
    sub_20E806B08();
  if (a2[9] > 2u)
LABEL_34:
    sub_20E806ADC();
  if (a2[2])
  {
    v9 = v9 & 0xFFFFFFF3 | (4 * (v10 & 3));
    *(_DWORD *)(a1 + 4) = v9;
    *(_QWORD *)(a1 + 6376) = *((_QWORD *)a2 + 162);
    *(_DWORD *)(a1 + 6384) = *((_DWORD *)a2 + 326);
    v11 = a2[3];
  }
  if (v11)
  {
    v9 = v9 & 0xFFFFFFCF | (16 * (v11 & 3));
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 6388) = *((_DWORD *)a2 + 327);
    *(_QWORD *)(a1 + 6392) = *((_QWORD *)a2 + 164);
  }
  if (a2[4])
  {
    v9 = v9 & 0xFFFFFF3F | ((a2[4] & 3) << 6);
    *(_DWORD *)(a1 + 4) = v9;
    *(_QWORD *)(a1 + 6400) = *((_QWORD *)a2 + 165);
    *(_DWORD *)(a1 + 6408) = *((_DWORD *)a2 + 332);
  }
  if (a2[5])
  {
    v9 = v9 & 0xFFFFFCFF | ((a2[5] & 3) << 8);
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 6412) = *((_DWORD *)a2 + 333);
    *(_QWORD *)(a1 + 6416) = *((_QWORD *)a2 + 167);
  }
  if (a2[6])
  {
    v9 = v9 & 0xFFFFF3FF | ((a2[6] & 3) << 10);
    *(_DWORD *)(a1 + 4) = v9;
    *(_QWORD *)(a1 + 6424) = *((_QWORD *)a2 + 168);
    *(_DWORD *)(a1 + 6432) = *((_DWORD *)a2 + 338);
  }
  if (a2[7])
  {
    v9 = v9 & 0xFFFFCFFF | ((a2[7] & 3) << 12);
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 6436) = *((_DWORD *)a2 + 339);
    *(_QWORD *)(a1 + 6440) = *((_QWORD *)a2 + 170);
  }
  if (a2[8])
  {
    v9 = v9 & 0xFFFF3FFF | ((a2[8] & 3) << 14);
    *(_DWORD *)(a1 + 4) = v9;
    *(_QWORD *)(a1 + 6448) = *((_QWORD *)a2 + 171);
    *(_DWORD *)(a1 + 6456) = *((_DWORD *)a2 + 344);
  }
  if (a2[9])
  {
    *(_DWORD *)(a1 + 4) = v9 & 0xFFFCFFFF | ((a2[9] & 3) << 16);
    *(_DWORD *)(a1 + 6460) = *((_DWORD *)a2 + 345);
    *(_QWORD *)(a1 + 6464) = *((_QWORD *)a2 + 173);
  }
  v12 = 0;
  v13 = a2 + 144;
  v14 = a1 + 4032;
  v15 = -128;
  do
  {
    *(_DWORD *)(v14 + v15 + 1152) = *(_DWORD *)&v13[v15 - 4];
    v16 = (_DWORD *)(v14 + v12);
    *v16 = *(_DWORD *)&v13[v12];
    v16[1] = *(_DWORD *)&v13[v12 + 4];
    v16[2] = *(_DWORD *)&v13[v12 + 8];
    v16[3] = *(_DWORD *)&v13[v12 + 12];
    v16[4] = *(_DWORD *)&v13[v12 + 16];
    v16[5] = *(_DWORD *)&v13[v12 + 20];
    v16[6] = *(_DWORD *)&v13[v12 + 24];
    v16[7] = *(_DWORD *)&v13[v12 + 28];
    v12 += 32;
    v15 += 4;
  }
  while (v15);
  *(_DWORD *)(a1 + 5200) = *((_DWORD *)a2 + 292);
  *(_DWORD *)(a1 + 5340) = *((_DWORD *)a2 + 293);
  *(_DWORD *)(a1 + 5344) = *((_DWORD *)a2 + 294);
  *(_DWORD *)(a1 + 5348) = *((_DWORD *)a2 + 295);
  *(_DWORD *)(a1 + 5204) = a2[1184];
  result = *(double *)(a2 + 1188);
  *(double *)(a1 + 5208) = result;
  *(_DWORD *)(a1 + 5216) = a2[1196];
  *(_DWORD *)(a1 + 5220) = *((_DWORD *)a2 + 300);
  *(_DWORD *)(a1 + 5236) = a2[1216];
  *(_DWORD *)(a1 + 5252) = *((_DWORD *)a2 + 306);
  *(_DWORD *)(a1 + 5268) = *((_DWORD *)a2 + 310);
  *(_DWORD *)(a1 + 5284) = a2[1256];
  *(_DWORD *)(a1 + 5300) = *((_DWORD *)a2 + 316);
  *(_DWORD *)(a1 + 5224) = *((_DWORD *)a2 + 301);
  *(_DWORD *)(a1 + 5240) = a2[1217];
  *(_DWORD *)(a1 + 5256) = *((_DWORD *)a2 + 307);
  *(_DWORD *)(a1 + 5272) = *((_DWORD *)a2 + 311);
  *(_DWORD *)(a1 + 5288) = a2[1257];
  *(_DWORD *)(a1 + 5304) = *((_DWORD *)a2 + 317);
  *(_DWORD *)(a1 + 5228) = *((_DWORD *)a2 + 302);
  *(_DWORD *)(a1 + 5244) = a2[1218];
  *(_DWORD *)(a1 + 5260) = *((_DWORD *)a2 + 308);
  *(_DWORD *)(a1 + 5276) = *((_DWORD *)a2 + 312);
  *(_DWORD *)(a1 + 5292) = a2[1258];
  *(_DWORD *)(a1 + 5308) = *((_DWORD *)a2 + 318);
  *(_DWORD *)(a1 + 5232) = *((_DWORD *)a2 + 303);
  *(_DWORD *)(a1 + 5248) = a2[1219];
  *(_DWORD *)(a1 + 5264) = *((_DWORD *)a2 + 309);
  *(_DWORD *)(a1 + 5280) = *((_DWORD *)a2 + 313);
  *(_DWORD *)(a1 + 5296) = a2[1259];
  v18 = *((_DWORD *)a2 + 323);
  *(_DWORD *)(a1 + 5316) = *((_DWORD *)a2 + 320);
  *(_DWORD *)(a1 + 5320) = a2[1284];
  *(_DWORD *)(a1 + 5324) = a2[1286];
  *(_DWORD *)(a1 + 5328) = a2[1287];
  *(_DWORD *)(a1 + 5332) = a2[1288];
  *(_DWORD *)(a1 + 5336) = v18;
  return result;
}

double sub_20E78BE18(uint64_t a1, uint64_t a2)
{
  double result;

  if (!a2)
    sub_20E806BB8();
  *(_OWORD *)a2 = xmmword_20E80DF40;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)&result = 0x100000012;
  *(_QWORD *)(a2 + 152) = 0x100000012;
  *(_DWORD *)(a2 + 160) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 244) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 328) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 412) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 496) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 580) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 664) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 748) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 832) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 916) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1000) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1084) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1168) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1252) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1336) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1420) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1504) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1588) |= 0x7FFFFFFFu;
  return result;
}

void sub_20E78BF24(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = a2 + *(unsigned int *)(a2 + 4);
  if (*(unsigned __int8 *)(v4 + 144) <= *(unsigned __int8 *)(a3 + 2))
    sub_20E806BE4();
  if (*(_BYTE *)a3)
  {
    v5 = v4 + 84 * *(unsigned __int8 *)(a3 + 2);
    *(_DWORD *)(v5 + 152) = *(_DWORD *)(v5 + 152) & 0x80000000 | a4 & 0x7FFFFFFF;
    *(_WORD *)(v5 + 166) = *(_WORD *)(a3 + 4);
    v6 = *(_DWORD *)(a3 + 24);
    *(_WORD *)(v5 + 164) = *(_DWORD *)(a3 + 20);
    *(_WORD *)(v5 + 162) = v6;
    v7 = *(_DWORD *)(a3 + 32);
    *(_WORD *)(v5 + 160) = *(_DWORD *)(a3 + 28);
    *(_DWORD *)(v5 + 156) = v7;
  }
}

uint64_t sub_20E78BF8C(uint64_t a1, _OWORD *a2, unint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[8];

  v3 = a2[201];
  v8[4] = a2[200];
  v8[5] = v3;
  v4 = a2[203];
  v8[6] = a2[202];
  v8[7] = v4;
  v5 = a2[197];
  v8[0] = a2[196];
  v8[1] = v5;
  v6 = a2[199];
  v8[2] = a2[198];
  v8[3] = v6;
  if (a3 >= 0x20)
    sub_20E806C10();
  return *((unsigned int *)v8 + a3);
}

void *sub_20E78BFEC(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  _OWORD v9[64];

  memcpy(v9, (const void *)(a2 + 2112), sizeof(v9));
  if (!a4)
    sub_20E806C3C();
  if (a3 >= 0x20)
    sub_20E806CC0();
  if (!a5)
    sub_20E806C68();
  if (a5 >= 9)
    sub_20E806C94();
  return memcpy(a4, &v9[2 * a3], 4 * a5);
}

void *sub_20E78C070(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  _OWORD v9[64];

  memcpy(v9, (const void *)(a2 + 2112), sizeof(v9));
  if (!a4)
    sub_20E806CEC();
  if (a3 >= 0x20)
    sub_20E806D70();
  if (!a5)
    sub_20E806D18();
  if (a5 >= 5)
    sub_20E806D44();
  return memcpy(a4, &v9[2 * a3], 8 * a5);
}

uint64_t sub_20E78C0F4(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v5;
  int v6;
  uint64_t result;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  if (!a4)
    sub_20E806D9C();
  *a5 = 0;
  if (a3 <= 0x7F)
  {
    v5 = *(_DWORD *)((char *)a2 + (a3 & 0xFFFFFFFFFFFFFFFCLL) + 3136);
LABEL_7:
    *(_DWORD *)a4 = v5;
    *a5 = 4;
    return 1;
  }
  if (a3 == 2004)
  {
    *a5 = 4;
    v6 = a2[834];
LABEL_11:
    *(_DWORD *)a4 = v6;
    return 1;
  }
  if (a3 == 2000)
  {
    v5 = a2[835];
    goto LABEL_7;
  }
  if (a3 - 2008 <= 0xB)
  {
    *a5 = 4;
    v6 = *(_DWORD *)((char *)a2 + (((_DWORD)a3 + 1336) & 0xFFFFFFFC));
    goto LABEL_11;
  }
  if (a3 - 6000 <= 0x3FF)
  {
    *a5 = 32;
    v8 = (_OWORD *)((char *)a2 + ((a3 - 6000) & 0xFFFFFFFFFFFFFFE0) + ((8 * (_DWORD)a3 - 13952) & 0xFFFFFFE0));
    v9 = v8[1];
    *(_OWORD *)a4 = *v8;
    *(_OWORD *)(a4 + 16) = v9;
    return 1;
  }
  result = 0;
  *((_QWORD *)&v10 + 1) = a3;
  *(_QWORD *)&v10 = a3 - 10000;
  switch((unint64_t)(v10 >> 2))
  {
    case 0uLL:
      *a5 = 4;
      v6 = a2[848];
      goto LABEL_11;
    case 1uLL:
      *a5 = 4;
      v6 = a2[850];
      goto LABEL_11;
    case 2uLL:
      *a5 = 4;
      v6 = a2[854];
      goto LABEL_11;
    case 5uLL:
      *a5 = 4;
      v6 = a2[857];
      goto LABEL_11;
    case 7uLL:
      *a5 = 4;
      v6 = a2[856];
      goto LABEL_11;
    case 0xDuLL:
      *a5 = 4;
      v6 = a2[846];
      goto LABEL_11;
    case 0xEuLL:
      *a5 = 4;
      v6 = a2[847];
      goto LABEL_11;
    case 0xFuLL:
      *a5 = 4;
      v6 = a2[849];
      goto LABEL_11;
    case 0x10uLL:
      *a5 = 4;
      v6 = a2[851];
      goto LABEL_11;
    case 0x11uLL:
      *a5 = 4;
      v6 = a2[852];
      goto LABEL_11;
    case 0x12uLL:
      *a5 = 4;
      v6 = a2[853];
      goto LABEL_11;
    case 0x13uLL:
      *a5 = 4;
      v6 = a2[855];
      goto LABEL_11;
    case 0x14uLL:
      *a5 = 4;
      v6 = a2[858];
      goto LABEL_11;
    case 0x15uLL:
      *a5 = 4;
      v6 = a2[859];
      goto LABEL_11;
    default:
      return result;
  }
  return result;
}

uint64_t sub_20E78C2D0(uint64_t a1, _DWORD *a2)
{
  return sub_20E78C2D8(a2);
}

uint64_t sub_20E78C2D8(_DWORD *a1)
{
  uint64_t v1;
  _DWORD *v2;
  char *v3;
  const std::locale::facet *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  void *v44;
  char v45;
  _QWORD v46[2];
  _QWORD v47[11];
  char v48;
  uint64_t v49;
  std::locale v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  uint8_t buf[4];
  _QWORD v58[5];

  *(_QWORD *)((char *)&v58[2] + 4) = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807678();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80760C();
  sub_20E78F30C((uint64_t)v46, 16);
  v1 = 0;
  v2 = a1 + 535;
  do
  {
    v3 = (char *)v46 + *(_QWORD *)(v46[0] - 24);
    if (*((_DWORD *)v3 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(v46[0] - 24)));
      v4 = std::locale::use_facet(&v50, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
      std::locale::~locale(&v50);
    }
    *((_DWORD *)v3 + 36) = 48;
    sub_20E78F4CC(v47, (uint64_t)"GRF ", 4);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = sub_20E78F4CC(v5, (uint64_t)" = 0x", 5);
    v7 = *v6;
    *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 24) = 8;
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = sub_20E78F4CC(v8, (uint64_t)"\t\t", 2);
    *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 2;
    v10 = (_QWORD *)std::ostream::operator<<();
    sub_20E78F4CC(v10, (uint64_t)" = (", 4);
    v11 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v12 = *v11;
    *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v11 + *(_QWORD *)(v12 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v13 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v14 = *v13;
    *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v13 + *(_QWORD *)(v14 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v15 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v16 = *v15;
    *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v15 + *(_QWORD *)(v16 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v17 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v18 = *v17;
    *(_DWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v17 + *(_QWORD *)(v18 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v19 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v20 = *v19;
    *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v19 + *(_QWORD *)(v20 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v21 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v22 = *v21;
    *(_DWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 8) = *(_DWORD *)((_BYTE *)v21 + *(_QWORD *)(*v21 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v21 + *(_QWORD *)(v22 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v23 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v24 = *v23;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(*v23 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v23 + *(_QWORD *)(v24 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v25 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v26 = *v25;
    *(_DWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 8) = *(_DWORD *)((_BYTE *)v25 + *(_QWORD *)(*v25 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v25 + *(_QWORD *)(v26 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)")", 1);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str();
      sub_20E807594(&v45, &v44, buf, v58);
    }
    BYTE1(v56) = 0;
    LOBYTE(v50.__locale_) = 0;
    std::stringbuf::str();
    if (SBYTE1(v56) < 0)
      operator delete(v50.__locale_);
    ++v1;
    v2 += 8;
  }
  while (v1 != 32);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v29 = a1[816];
    v30 = a1[823];
    v50.__locale_ = (std::locale::__imp *)67109888;
    v51 = 1024;
    v52 = v29;
    v53 = 1024;
    v54 = 0;
    v55 = 1024;
    v56 = v30;
    _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      goto LABEL_61;
    }
  }
  else if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    goto LABEL_15;
  }
  v31 = a1[817];
  v32 = a1[824];
  v50.__locale_ = (std::locale::__imp *)0x104000400;
  v51 = 1024;
  v52 = v31;
  v53 = 1024;
  v54 = 1;
  v55 = 1024;
  v56 = v32;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_16:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_17;
    goto LABEL_62;
  }
LABEL_61:
  v33 = a1[818];
  v34 = a1[825];
  v50.__locale_ = (std::locale::__imp *)0x204000400;
  v51 = 1024;
  v52 = v33;
  v53 = 1024;
  v54 = 2;
  v55 = 1024;
  v56 = v34;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    goto LABEL_63;
  }
LABEL_62:
  v35 = a1[819];
  v36 = a1[826];
  v50.__locale_ = (std::locale::__imp *)0x304000400;
  v51 = 1024;
  v52 = v35;
  v53 = 1024;
  v54 = 3;
  v55 = 1024;
  v56 = v36;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_18:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    goto LABEL_64;
  }
LABEL_63:
  v37 = a1[820];
  v38 = a1[827];
  v50.__locale_ = (std::locale::__imp *)0x404000400;
  v51 = 1024;
  v52 = v37;
  v53 = 1024;
  v54 = 4;
  v55 = 1024;
  v56 = v38;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_19:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    goto LABEL_65;
  }
LABEL_64:
  v39 = a1[821];
  v40 = a1[828];
  v50.__locale_ = (std::locale::__imp *)0x504000400;
  v51 = 1024;
  v52 = v39;
  v53 = 1024;
  v54 = 5;
  v55 = 1024;
  v56 = v40;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_20:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_65:
  v41 = a1[822];
  v42 = a1[829];
  v50.__locale_ = (std::locale::__imp *)0x604000400;
  v51 = 1024;
  v52 = v41;
  v53 = 1024;
  v54 = 6;
  v55 = 1024;
  v56 = v42;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
LABEL_21:
    sub_20E807504();
LABEL_22:
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807490();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80741C();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E8073B0();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807344();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E8072D8();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80726C();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807200();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807194();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807128();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E8070BC();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807050();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E806FE4();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E806F78();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E806F0C();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E806EA0();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E806E34();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E806DC8();
  v46[0] = *MEMORY[0x24BEDB7F0];
  v27 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v47[0] = v27;
  v47[1] = MEMORY[0x24BEDB848] + 16;
  if (v48 < 0)
    operator delete((void *)v47[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC4774](&v49);
}

void sub_20E78CDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E78F444((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E78CDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::locale::~locale((std::locale *)(v6 - 160));
  sub_20E78F444((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E78CE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  if (*(char *)(v6 - 137) < 0)
  {
    operator delete(*(void **)(v6 - 160));
    sub_20E78F444((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_20E78F444((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E78CE84(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  int v5;

  v4 = (((unint64_t)*(unsigned int *)(a3 + 2192) >> 2) & 3) - 1;
  if (v4 >= 3)
    sub_20E8076B8();
  v5 = dword_20E80E1F4[v4];
  *(_DWORD *)(a4 + 4) = *(unsigned __int16 *)(a1 + 16);
  *(_DWORD *)(a4 + 8) = v5;
  return sub_20E78CECC(a2, a3, a4);
}

uint64_t sub_20E78CECC(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if ((*(_DWORD *)(a2 + 148) & 0x1F) != 1 && (*(_DWORD *)(a2 + 148) & 0x1Fu) > *(_DWORD *)a3)
  {
    v6 = a2;
    if ((*(_BYTE *)(a2 + 1576) & 1) != 0)
    {
      v7 = *(_QWORD *)(a3 + 32);
      v8 = a1[228];
      *(_DWORD *)(a3 + 12) = a1[207];
      *(_DWORD *)(a3 + 16) = v8;
      *(_DWORD *)(a3 + 20) = a1[396];
      v9 = HIDWORD(*(_QWORD *)(a2 + 144)) & 0x1FLL;
      *(_DWORD *)(a3 + 24) = v9;
      v10 = (*(_QWORD *)(a3 + 40) - v7) >> 2;
      if (v9 <= v10)
      {
        if (v9 < v10)
          *(_QWORD *)(a3 + 40) = v7 + 4 * v9;
      }
      else
      {
        sub_20E78F7D4(a3 + 32, v9 - v10);
      }
      v11 = *(_QWORD *)(a3 + 56);
      v12 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 64) - v11) >> 3);
      if (v9 <= v12)
      {
        if (v9 < v12)
          *(_QWORD *)(a3 + 64) = v11 + 24 * v9;
      }
      else
      {
        sub_20E78F970((char **)(a3 + 56), v9 - v12);
      }
      v13 = *(_QWORD *)(a3 + 80);
      v14 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 88) - v13) >> 3);
      if (v9 <= v14)
      {
        if (v9 < v14)
          *(_QWORD *)(a3 + 88) = v13 + 24 * v9;
      }
      else
      {
        sub_20E78F970((char **)(a3 + 80), v9 - v14);
      }
      v15 = *(_QWORD *)(a3 + 104);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 112) - v15) >> 3);
      if (v9 <= v16)
      {
        if (v9 < v16)
          *(_QWORD *)(a3 + 112) = v15 + 24 * v9;
      }
      else
      {
        sub_20E78F970((char **)(a3 + 104), v9 - v16);
      }
      v17 = *(_QWORD *)(a3 + 128);
      v18 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 136) - v17) >> 3);
      if (v9 <= v18)
      {
        if (v9 < v18)
          *(_QWORD *)(a3 + 136) = v17 + 24 * v9;
      }
      else
      {
        sub_20E78F970((char **)(a3 + 128), v9 - v18);
      }
      v19 = *(_QWORD *)(a3 + 152);
      v20 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 160) - v19) >> 3);
      if (v9 <= v20)
      {
        if (v9 < v20)
          *(_QWORD *)(a3 + 160) = v19 + 24 * v9;
      }
      else
      {
        sub_20E78F970((char **)(a3 + 152), v9 - v20);
      }
      v21 = *(_QWORD *)(a3 + 176);
      v22 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 184) - v21) >> 3);
      if (v9 <= v22)
      {
        if (v9 < v22)
          *(_QWORD *)(a3 + 184) = v21 + 24 * v9;
      }
      else
      {
        sub_20E78F970((char **)(a3 + 176), v9 - v22);
      }
      v23 = *(_QWORD *)(a3 + 200);
      v24 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 208) - v23) >> 3);
      if (v9 <= v24)
      {
        if (v9 < v24)
          *(_QWORD *)(a3 + 208) = v23 + 24 * v9;
      }
      else
      {
        sub_20E78F970((char **)(a3 + 200), v9 - v24);
      }
      if ((_DWORD)v9)
      {
        v25 = 0;
        v26 = v6 + 2000;
        v27 = *(_QWORD *)(a3 + 32);
        v28 = *(_QWORD *)(a3 + 56);
        v29 = *(_QWORD *)(a3 + 80);
        v30 = *(_QWORD *)(a3 + 104);
        v31 = *(_QWORD *)(a3 + 128);
        v32 = *(_QWORD *)(a3 + 152);
        v33 = *(_QWORD *)(a3 + 176);
        v34 = *(_QWORD *)(a3 + 200);
        do
        {
          *(_DWORD *)(v27 + 4 * v25) = *(_DWORD *)(v26 + 4 * v25) & 0x1FFF;
          if (*(_DWORD *)(a3 + 4))
          {
            v35 = 0;
            v36 = 936;
            do
            {
              v37 = 4 * v35;
              v38 = v6 + 4 * v35;
              *(_DWORD *)(v28 + v37) = *(_DWORD *)(v38 + 616) & 0x7FF;
              *(_DWORD *)(v29 + v37) = *(_WORD *)(v38 + 618) & 0x1FFF;
              *(_DWORD *)(v30 + v37) = *(_DWORD *)(v6 + v36) & 0x3FF;
              *(_DWORD *)(v31 + v37) = *(_WORD *)(v6 + v36 + 2) & 0x1FFF;
              *(_DWORD *)(v32 + v37) = *(_DWORD *)(v6 + v36 + 320) & 0x3FF;
              *(_DWORD *)(v33 + v37) = *(_DWORD *)(v6 + v36 + 664) & 0x7FF;
              *(_DWORD *)(v34 + v37) = *(_WORD *)(v6 + v36 + 666) & 0xFFF;
              ++v35;
              v36 += 4;
            }
            while (v35 < *(unsigned int *)(a3 + 4));
          }
          ++v25;
          v6 += 20;
          v34 += 24;
          v28 += 24;
          v29 += 24;
          v30 += 24;
          v31 += 24;
          v32 += 24;
          v33 += 24;
        }
        while (v25 != v9);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    *(_DWORD *)a3 = 0xFFFF;
  }
  return result;
}

uint64_t sub_20E78D234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_20E78D244(a2, a3, a4);
}

uint64_t sub_20E78D244(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;

  v3 = *(_DWORD *)(a3 + 8);
  v4 = *(_DWORD *)(a3 + 12) + v3 * *(_DWORD *)(a3 + 232);
  v5 = *(_DWORD *)(a3 + 16) + *(_DWORD *)(a3 + 236) * v3;
  v6 = (v4 + 63) & 0xFFFFFFC0;
  *(_DWORD *)(result + 828) = v6;
  v7 = (v5 + 63) & 0xFFFFFFC0;
  *(_DWORD *)(result + 912) = v7;
  *(_DWORD *)(a3 + 240) = v4;
  *(_DWORD *)(a3 + 244) = v6;
  *(_DWORD *)(a3 + 248) = v5;
  *(_DWORD *)(a3 + 252) = v7;
  v8 = (*(_DWORD *)(a3 + 228) - *(_DWORD *)(a3 + 224));
  if (!(_DWORD)v8)
    sub_20E8076E4();
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a2 + 144) & 0xFFFFFFE0FFFFFFFFLL | ((unint64_t)((*(_BYTE *)(a3 + 228)
                                                                                            - *(_BYTE *)(a3 + 224)) & 0x1F) << 32);
  *(_DWORD *)(a2 + 2516) = v8;
  v9 = *(unsigned int *)(a3 + 224);
  if (v9 < *(_DWORD *)(a3 + 228))
  {
    v10 = a2 + 2000;
    v11 = 24 * v9;
    do
    {
      v12 = v9 - *(_DWORD *)(a3 + 224);
      v13 = 4 * v12;
      result = *(_DWORD *)(v10 + v13) & 0xFFFFE000 | *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4 * v9) & 0x1FFF;
      *(_DWORD *)(v10 + v13) = result;
      *(_DWORD *)(a2 + 2524 + v13) = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4 * v9);
      if (*(_DWORD *)(a3 + 4))
      {
        v14 = 0;
        v15 = a2 + 20 * v12;
        v16 = 936;
        do
        {
          result = 4 * v14;
          v17 = v15 + 4 * v14;
          v18 = *(_DWORD *)(v17 + 616) & 0xFFFFF800 | *(_DWORD *)(*(_QWORD *)(a3 + 56) + v11 + 4 * v14) & 0x7FF;
          *(_DWORD *)(v17 + 616) = v18;
          *(_DWORD *)(v17 + 616) = v18 & 0xE000FFFF | ((*(_DWORD *)(*(_QWORD *)(a3 + 80) + v11 + 4 * v14) & 0x1FFF) << 16);
          v19 = (unsigned int *)(v15 + v16);
          v20 = *(_DWORD *)(v15 + v16) & 0xFFFFFC00 | *(_DWORD *)(*(_QWORD *)(a3 + 104) + v11 + 4 * v14) & 0x3FF;
          *v19 = v20;
          *v19 = v20 & 0xE000FFFF | ((*(_DWORD *)(*(_QWORD *)(a3 + 128) + v11 + 4 * v14) & 0x1FFF) << 16);
          v19[80] = *(_DWORD *)(v15 + v16 + 320) & 0xFFFFFC00 | *(_DWORD *)(*(_QWORD *)(a3 + 152) + v11 + 4 * v14) & 0x3FF;
          v21 = *(_DWORD *)(v15 + v16 + 664) & 0xFFFFF800 | *(_DWORD *)(*(_QWORD *)(a3 + 176) + v11 + 4 * v14) & 0x7FF;
          v19[166] = v21;
          v19[166] = v21 & 0xF000FFFF | ((*(_DWORD *)(*(_QWORD *)(a3 + 200) + v11 + 4 * v14++) & 0xFFF) << 16);
          v16 += 4;
        }
        while (v14 < *(unsigned int *)(a3 + 4));
      }
      ++v9;
      v11 += 24;
    }
    while (v9 < *(unsigned int *)(a3 + 228));
  }
  if (v8 < *(_DWORD *)(a3 + 24))
  {
    v22 = (_DWORD *)(a2 + 20 * v8);
    do
    {
      v23 = 4 * v8;
      *(_DWORD *)(a2 + 2000 + v23) = *(_DWORD *)(a2 + 2000 + 4 * v8) & 0xFFFFE000;
      *(_DWORD *)(a2 + 2524 + v23) = 0;
      if (*(_DWORD *)(a3 + 4))
      {
        v24 = 0;
        v25 = v22;
        do
        {
          v25[154] &= 0xE000F800;
          result = 3758160896;
          v25[234] &= 0xE000FC00;
          v25[314] &= 0xFFFFFC00;
          v25[400] = v25[400] & 0xF000F800 | 0x50005;
          ++v24;
          ++v25;
        }
        while (v24 < *(unsigned int *)(a3 + 4));
      }
      ++v8;
      v22 += 5;
    }
    while (v8 < *(unsigned int *)(a3 + 24));
  }
  return result;
}

void *sub_20E78D4A8(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  __int32 v12;

  v5 = a2 + a3[2].u32[1];
  v6 = *(int32x2_t *)(v5 + 100);
  a3[29] = vadd_s32(a3[29], v6);
  v7 = a3[30].u32[0];
  v8 = a3[30].u32[1];
  if ((_DWORD)v7 == (_DWORD)v8)
  {
    v9 = a3[31].u32[0];
    v10 = a3[31].u32[1];
    if ((_DWORD)v9 == (_DWORD)v10)
      goto LABEL_3;
  }
  else
  {
    v12 = v6.i32[1];
    result = memcpy((void *)(a2 + v7), (const void *)(a2 + v8), (a3[1].i32[0] * v6.i32[0]));
    v6.i32[1] = v12;
    v9 = a3[31].u32[0];
    v10 = a3[31].u32[1];
    if ((_DWORD)v9 == (_DWORD)v10)
    {
LABEL_3:
      if (!a3[32].i8[0])
        return result;
      goto LABEL_4;
    }
  }
  result = memcpy((void *)(a2 + v9), (const void *)(a2 + v10), (a3[1].i32[0] * v6.i32[1]));
  if (!a3[32].i8[0])
    return result;
LABEL_4:
  *(_DWORD *)(v5 + 100) = a3[29].i32[0];
  *(_DWORD *)(v5 + 104) = a3[29].i32[1];
  return result;
}

void sub_20E78D574(_QWORD *a1)
{
  sub_20E78D5FC(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E78D598()
{
  return 0x3FFFLL;
}

void sub_20E78D5A0()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C9A86B8;
  __cxa_throw(exception, (struct type_info *)&unk_24C9A8690, (void (*)(void *))std::exception::~exception);
}

void sub_20E78D5D8(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E78D5FC(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &off_24C9A8570;
  v2 = a1[99];
  if (v2)
  {
    a1[100] = v2;
    MEMORY[0x212BC47C8]();
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  return nullsub_13(a1);
}

void sub_20E78D69C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (0xFAFAFAFAFAFAFAFBLL * ((v4 - v5) >> 7) >= a2)
  {
    if (a2)
    {
      v12 = 6528 * ((6528 * a2 - 6528) / 0x1980) + 6528;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xFAFAFAFAFAFAFAFBLL * ((v5 - *a1) >> 7);
    v8 = v7 + a2;
    if (v7 + a2 > 0xA0A0A0A0A0A0ALL)
      sub_20E78D874();
    v9 = 0xFAFAFAFAFAFAFAFBLL * ((v4 - v6) >> 7);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x5050505050505)
      v10 = 0xA0A0A0A0A0A0ALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xA0A0A0A0A0A0ALL)
        sub_20E78D888();
      v11 = (char *)operator new(6528 * v10, (std::align_val_t)0x40uLL);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[6528 * v7];
    v14 = &v11[6528 * v10];
    v15 = 6528 * ((6528 * a2 - 6528) / 0x1980) + 6528;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v5 -= 6528;
        v13 -= 6528;
        memcpy(v13, v5, 0x1980uLL);
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      JUMPOUT(0x212BC47C8);
  }
}

void sub_20E78D874()
{
  sub_20E7857D0("vector");
}

void sub_20E78D888()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void sub_20E78D8B0(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  __int16 v27;

  bzero(a3, 0xF80uLL);
  *(_DWORD *)a3 = *(unsigned __int8 *)(a2 + 92);
  v10 = *(_DWORD *)a2;
  v11 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 >= 0x280u)
    v10 = 640;
  *((_DWORD *)a3 + 1) = v10;
  *((_DWORD *)a3 + 2) = v11;
  *((_DWORD *)a3 + 3) = 8;
  sub_20E78DBA8(a1, a2, (unint64_t *)a3 + 8, a4, a5);
  v12 = *((_DWORD *)a3 + 944);
  if (*(_BYTE *)(a2 + 92))
  {
    *((_DWORD *)a3 + 944) = v12 & 0xFFFFFFFE;
    *((_DWORD *)a3 + 960) = *((_DWORD *)a3 + 960) & 0xFFFFC000 | sub_20E79B4C8(*(_DWORD *)(a2 + 24)) & 0x3FFF;
    v13 = *((_DWORD *)a3 + 944) & 0xFFFE00FF | ((sub_20E79B4E8(*(_DWORD *)(a2 + 24)) & 0x1FF) << 8);
    *((_DWORD *)a3 + 944) = v13;
    *((_DWORD *)a3 + 944) = v13 & 0xFCFFFFFF | ((*(_BYTE *)(a2 + 132) & 3) << 24);
    *((_DWORD *)a3 + 945) = *((_DWORD *)a3 + 593);
    *((_DWORD *)a3 + 946) = *((_DWORD *)a3 + 594);
    *((_DWORD *)a3 + 951) = *((_DWORD *)a3 + 595);
    *((_DWORD *)a3 + 952) = *((_DWORD *)a3 + 596);
    *((_DWORD *)a3 + 947) = sub_20E79B50C(*(unsigned __int8 *)(a2 + 132)) << 7;
    *((_DWORD *)a3 + 948) = 32 * sub_20E79D1F8(*(unsigned __int8 *)(a2 + 132));
    v14 = *((_DWORD *)a3 + 945) & 0x7FFFF;
    *((_DWORD *)a3 + 949) = v14 + 384;
    *((_DWORD *)a3 + 950) = v14 + 512;
    *((_DWORD *)a3 + 953) = *((_DWORD *)a3 + 597);
    v15 = *(unsigned int *)(a4 + 72);
    v16 = *(_QWORD *)(a4 + 64) + v15;
    *((_QWORD *)a3 + 477) = v16;
    v17 = v16 + 4 * (*((_DWORD *)a3 + 960) & 0x3FFF);
    LODWORD(v15) = 4 * (*((_DWORD *)a3 + 960) & 0x3FFF) + v15;
    *(_DWORD *)(a4 + 72) = v15;
    *((_QWORD *)a3 + 478) = v17;
    v18 = 16 * (*((_DWORD *)a3 + 960) & 0x3FFF);
    LODWORD(v15) = 16 * (*((_DWORD *)a3 + 960) & 0x3FFF) + v15;
    *(_DWORD *)(a4 + 72) = v15;
    *((_QWORD *)a3 + 479) = v17 + v18;
    *(_BYTE *)(a5 + 388) = 1;
    *(_DWORD *)(a5 + 392) = v15;
    *(_DWORD *)(a4 + 72) += sub_20E7C5A20(32 * (*((_DWORD *)a3 + 960) & 0x3FFFu) + 32, 0, 64, a5 + 368);
    *((_DWORD *)a3 + 960) &= 0xC0FFFFFF;
    *((_DWORD *)a3 + 961) = 1;
    v19 = *(float32x4_t *)(a2 + 96);
    v20 = *(float32x4_t *)(a2 + 112);
    v21.i64[0] = 0x300000003;
    v21.i64[1] = 0x300000003;
    *(int8x16_t *)(a3 + 3884) = vandq_s8((int8x16_t)vcvtq_n_u32_f32(vabsq_f32(v19), 0x12uLL), v21);
    *(uint32x4_t *)(a3 + 3848) = vcvtq_u32_f32(v19);
    *(uint32x4_t *)(a3 + 3864) = vcvtq_u32_f32(v20);
    *(int8x16_t *)(a3 + 3900) = vandq_s8((int8x16_t)vcvtq_n_u32_f32(vabsq_f32(v20), 0x12uLL), v21);
    v19.i32[0] = *(_DWORD *)(a2 + 128);
    *((_DWORD *)a3 + 970) = v19.f32[0];
    *((_DWORD *)a3 + 979) = vcvts_n_u32_f32(fabsf(v19.f32[0]), 0x12uLL) & 0x3FFFF;
    v22 = *((_DWORD *)a3 + 982);
    v23 = *((_QWORD *)a3 + 490);
    *((_QWORD *)a3 + 490) = v23 & 0xFFFFFFFFC000E000;
    v24 = v23 & 0xFFFFE000C000E000 | ((unint64_t)(*(_DWORD *)a2 & 0x1FFF) << 32);
    *((_QWORD *)a3 + 490) = v24;
    v25 = v24 & 0xC000FFFFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(a2 + 4) & 0x3FFF) << 48);
    *((_QWORD *)a3 + 490) = v25;
    v26 = vcvtas_u32_f32((float)(*(float *)(a2 + 136) * 256.0) / 360.0) | v22 & 0xFFFFFF00;
    *((_QWORD *)a3 + 490) = v25;
    *((_DWORD *)a3 + 982) = v26;
    v27 = vcvtas_u32_f32(*(float *)(a2 + 140) * 512.0);
    *((_QWORD *)a3 + 490) = v25;
    *((_DWORD *)a3 + 982) = v26 & 0xFEC000FF | ((v27 & 0x3FFF) << 8);
    *((_DWORD *)a3 + 983) = (float)(*(float *)(a2 + 144)
                                                * (float)((float)(*(float *)(a2 + 144) * (float)*(unsigned int *)a2)
                                                        * (float)*(unsigned int *)a2));
    *((_DWORD *)a3 + 984) = *(_DWORD *)(a2 + 148);
  }
  else
  {
    *((_DWORD *)a3 + 944) = v12 | 1;
  }
}

void sub_20E78DBA8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  int v20;
  char v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  __int128 v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int64x2_t v35;
  uint64_t v36;
  char *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int32x4_t v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int32x4_t *v46;
  int v47;
  int v48;
  int v49;
  _QWORD *v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int32x4_t *v63;
  int32x4_t *v64;
  unint64_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  unint64_t v70;
  uint64_t *v71;
  _DWORD *v72;
  uint64_t v73;
  unsigned int v74;
  const __int16 *v75;
  unint64_t v76;
  int16x8_t v77;
  int16x8_t *v78;
  int16x8_t v79;
  int16x8_t v80;
  unint64_t v81;
  uint64_t v82;
  __int16 *v83;
  int v85;
  int v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  const char *v90;
  uint8x16_t v91;
  uint16x8_t v92;
  int8x16_t v93;
  int8x16_t v94;
  uint16x8_t v95;
  int8x16_t v96;
  int8x16_t v98;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  unint64_t v108;
  int8x16_t *v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  unint64_t v113;
  const char *v114;
  uint8x8_t v115;
  uint16x8_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v122;
  int8x16_t *v123;
  unint64_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  char *v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  unint64_t v133;
  unsigned int v134;
  int v135;
  int8x16_t *v136;
  int8x16_t v137;
  int8x16_t v138;
  unsigned __int128 v139;
  int8x16_t v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  double v155;
  uint32x4_t v156;
  unsigned int v157;
  unsigned int v158;
  int8x16_t v159;
  int32x4_t v160;
  int8x16_t v161;
  int32x4_t v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int8x8_t v167;
  int32x2_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  int8x16_t v177;
  int8x16_t v178;
  unint64_t *v179;
  int v180;
  int v181;
  int8x16_t v182;
  int32x4_t v183;
  int v184;
  int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  int8x16_t v189;
  int32x4_t v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  int8x8_t v195;
  int32x2_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int *v199;
  int8x16_t *v200;
  int8x16_t v201;
  int8x16_t v202;
  uint64_t v203;
  int8x16_t v204;
  int8x16_t v205;
  unsigned int v206;
  int v207;
  unint64_t v208;
  uint64_t v209;
  _OWORD *v210;
  int8x16_t v211;
  unint64_t v212;
  int8x16_t *v213;
  int8x16_t v214;
  int8x16_t v215;
  unint64_t v216;
  _DWORD *v217;
  unsigned int v218[17];
  unsigned int v219[17];
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  _DWORD v229[151];
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  _DWORD v239[159];
  int v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  __int32 v248;
  __int32 v249;
  __int32 v250;
  __int32 v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  _DWORD v261[5];
  int v262;
  _QWORD v263[4];
  _QWORD v264[5];

  v5 = *(unsigned __int16 *)(a2 + 50);
  if ((v5 & 0xFFFE) != 4)
    sub_20E807794();
  if (sub_20E7E78F8(*(_DWORD *)a2, *(_DWORD *)(a2 + 4)) != v5)
    sub_20E807768();
  v11 = *(unsigned __int16 *)(a2 + 50);
  v12 = 2 * v11;
  bzero(a3, 0xE80uLL);
  *a3 = 4128;
  v13 = *(_DWORD *)a2;
  v14 = *(_DWORD *)(a2 + 4);
  *(_OWORD *)((char *)a3 + 12) = 0u;
  if (v13 >= 0x280)
    LOWORD(v13) = 640;
  *((_WORD *)a3 + 4) = v13;
  *((_WORD *)a3 + 5) = v14;
  *(unint64_t *)((char *)a3 + 268) = 0;
  *(_OWORD *)((char *)a3 + 236) = 0uLL;
  *(_OWORD *)((char *)a3 + 252) = 0uLL;
  *(_OWORD *)((char *)a3 + 204) = 0uLL;
  *(_OWORD *)((char *)a3 + 220) = 0uLL;
  *(_OWORD *)((char *)a3 + 172) = 0uLL;
  *(_OWORD *)((char *)a3 + 188) = 0uLL;
  *(_OWORD *)((char *)a3 + 140) = 0uLL;
  *(_OWORD *)((char *)a3 + 156) = 0uLL;
  *(_OWORD *)((char *)a3 + 108) = 0uLL;
  *(_OWORD *)((char *)a3 + 124) = 0uLL;
  *(_OWORD *)((char *)a3 + 76) = 0uLL;
  *(_OWORD *)((char *)a3 + 92) = 0uLL;
  *(_OWORD *)((char *)a3 + 44) = 0uLL;
  *(_OWORD *)((char *)a3 + 60) = 0uLL;
  *(_OWORD *)((char *)a3 + 28) = 0uLL;
  if (*(_WORD *)(a2 + 50) == 5)
    v15 = 1023;
  else
    v15 = 255;
  if (*(_BYTE *)(a2 + 84))
    v16 = v15;
  else
    v16 = 0;
  *((_DWORD *)a3 + 69) = v16;
  if (*(_WORD *)(a2 + 50) == 5)
    v17 = 1023;
  else
    v17 = 255;
  if (*(_BYTE *)(a2 + 85))
    v18 = v17;
  else
    v18 = 0;
  *((_DWORD *)a3 + 70) = v18;
  v19 = *(_BYTE *)(a2 + 86);
  if (*(_WORD *)(a2 + 50) == 5)
    v20 = 510;
  else
    v20 = 126;
  if (!*(_BYTE *)(a2 + 86))
    v20 = 0;
  *((_DWORD *)a3 + 71) = v20;
  v21 = v19 | *(_BYTE *)(a2 + 87) | *(_BYTE *)(a2 + 88) | *(_BYTE *)(a2 + 89) | *(_BYTE *)(a2 + 153) | *(_BYTE *)(a2 + 92);
  if (*(_WORD *)(a2 + 50) == 5)
    v22 = 510;
  else
    v22 = 126;
  if (v21)
    v23 = v22;
  else
    v23 = 0;
  *((_DWORD *)a3 + 72) = v23;
  if ((_DWORD)v11)
  {
    if (v12 <= 1)
      v24 = 1;
    else
      v24 = 2 * v11;
    if (v24 >= 8)
    {
      v26 = (char *)a3 + 292;
      v27 = (int64x2_t)xmmword_20E80DF50;
      v28 = (int64x2_t)xmmword_20E80DF60;
      v29 = (int64x2_t)xmmword_20E80DF70;
      v30 = (int64x2_t)xmmword_20E80DF80;
      v25 = v24 & 0x1FFF8;
      *(_QWORD *)&v31 = 0x3000300030003;
      *((_QWORD *)&v31 + 1) = 0x3000300030003;
      v32 = (int8x16_t)vdupq_n_s64(1uLL);
      v33.i64[0] = 0x20002000200020;
      v33.i64[1] = 0x20002000200020;
      v34.i64[0] = 0x10001000100010;
      v34.i64[1] = 0x10001000100010;
      v35 = vdupq_n_s64(8uLL);
      v36 = v24 & 0x1FFF8;
      do
      {
        *(_OWORD *)v26 = v31;
        *(int8x16_t *)(v26 + 124) = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v30, v32)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v29, v32))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v28, v32)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v27, v32)))), v34, v33);
        v28 = vaddq_s64(v28, v35);
        v29 = vaddq_s64(v29, v35);
        v30 = vaddq_s64(v30, v35);
        v27 = vaddq_s64(v27, v35);
        v26 += 16;
        v36 -= 8;
      }
      while (v36);
      if (v24 == v25)
        goto LABEL_41;
    }
    else
    {
      v25 = 0;
    }
    do
    {
      v37 = (char *)a3 + 2 * v25;
      *((_WORD *)v37 + 146) = 3;
      if ((v25 & 1) != 0)
        v38 = 32;
      else
        v38 = 16;
      *((_WORD *)v37 + 208) = v38;
      ++v25;
    }
    while (v24 != v25);
  }
LABEL_41:
  *((_DWORD *)a3 + 78) = 0;
  v39 = *(unsigned __int16 *)(a1 + 68);
  if (*(_WORD *)(a1 + 68))
  {
    v40 = 0;
    v41 = *(unsigned __int16 *)(a2 + 20);
    v42 = vdupq_n_s32(v41);
    v43 = (_OWORD *)((char *)a3 + 316);
    do
    {
      if (v39 >= 8)
      {
        v45 = (unsigned __int16)v39 & 0xFFF8;
        v46 = (int32x4_t *)v43;
        do
        {
          *v46 = v42;
          v46[1] = v42;
          v46 += 2;
          v45 -= 8;
        }
        while (v45);
        v44 = (unsigned __int16)v39 & 0xFFF8;
        if (v44 == v39)
          goto LABEL_43;
      }
      else
      {
        v44 = 0;
      }
      do
        *((_DWORD *)v43 + v44++) = v41;
      while (v39 != v44);
LABEL_43:
      ++v40;
      v43 = (_OWORD *)((char *)v43 + 20);
    }
    while (v40 != v39);
  }
  *((_DWORD *)a3 + 454) = *(_DWORD *)(a2 + 24);
  *((_DWORD *)a3 + 455) = 2047;
  *((_DWORD *)a3 + 456) = sub_20E7E7940(*(_DWORD *)a2, 0);
  v47 = sub_20E7E7940(*(_DWORD *)a2, 1u);
  *((_DWORD *)a3 + 457) = v47;
  *((_DWORD *)a3 + 458) = v47;
  v48 = sub_20E7E7940(*(_DWORD *)a2, 2u);
  *((_DWORD *)a3 + 459) = v48;
  *((_DWORD *)a3 + 460) = v48;
  v49 = sub_20E7E7940(*(_DWORD *)a2, 3u);
  *((_DWORD *)a3 + 461) = v49;
  if (*(_WORD *)(a2 + 50) == 5)
  {
    *((_DWORD *)a3 + 462) = v49;
    *((_DWORD *)a3 + 463) = sub_20E7E7940(*(_DWORD *)a2, 4u);
  }
  *((_DWORD *)a3 + 480) = 1023;
  *(_OWORD *)((char *)a3 + 1924) = xmmword_20E80DF90;
  *((_DWORD *)a3 + 485) = 9437297;
  if (v11 >= 2)
  {
    v50 = a3 + 243;
    v51 = 2;
    do
    {
      *(_OWORD *)v50 = xmmword_20E80DFA0;
      *((_DWORD *)v50 + 4) = 9830514;
      v51 += 2;
      v50 = (_QWORD *)((char *)v50 + 20);
    }
    while (v51 < v12);
  }
  v52 = *((_DWORD *)a3 + 512);
  v53 = v52 & 0xFFFFFFFD;
  *((_DWORD *)a3 + 512) = v52 & 0xFFFFFFFD;
  if (*(_BYTE *)(a2 + 88))
    _ZF = *(_BYTE *)(a2 + 89) == 0;
  else
    _ZF = 1;
  if (!_ZF)
    sub_20E80773C();
  v55 = v52 & 0xFFFFFFF1;
  *((_DWORD *)a3 + 512) = v55;
  if (*(_BYTE *)(a2 + 89))
  {
    v55 = v53 | 0xC;
  }
  else if (*(_BYTE *)(a2 + 88))
  {
    if (*(_BYTE *)(a2 + 91))
    {
      if (*(_BYTE *)(a2 + 91) == 1)
        v55 |= 8u;
    }
    else
    {
      v55 |= 4u;
    }
  }
  *((_DWORD *)a3 + 512) = v55 & 0xFFE0018F | 0x88000;
  if (*(_WORD *)(a2 + 50) == 5)
    v56 = 510;
  else
    v56 = 126;
  if (*(_BYTE *)(a2 + 87))
    v57 = v56;
  else
    v57 = 0;
  *((_DWORD *)a3 + 513) = v57;
  v58 = *(unsigned int *)(a2 + 28);
  v263[0] = v58;
  v263[1] = v58;
  v263[2] = v58;
  v263[3] = v58;
  v264[0] = v58;
  v264[1] = v58;
  v264[2] = v58;
  v264[3] = v58;
  if (*(_BYTE *)(a2 + 76))
    sub_20E7E75AC(v58, 2 * v11, v263);
  v59 = v12 - 1;
  if (v12 != 2)
  {
    v60 = 2;
    if (v59 > 2)
      v60 = v12 - 1;
    if (v60 < 9)
    {
      v61 = 1;
LABEL_83:
      v70 = v60 - v61;
      v71 = &v263[v61 - 1];
      v72 = (_DWORD *)a3 + v61 + 514;
      do
      {
        v73 = *v71++;
        *v72++ = v73;
        --v70;
      }
      while (v70);
      goto LABEL_85;
    }
    v62 = (v60 - 1) & 0xFFFFFFFFFFFFFFF8;
    v61 = v62 | 1;
    v63 = (int32x4_t *)v264;
    v64 = (int32x4_t *)((char *)a3 + 2060);
    v65 = v62;
    do
    {
      v67 = v63[-2];
      v66 = v63[-1];
      v69 = *v63;
      v68 = v63[1];
      v63 += 4;
      *v64 = vuzp1q_s32(v67, v66);
      v64[1] = vuzp1q_s32(v69, v68);
      v64 += 2;
      v65 -= 8;
    }
    while (v65);
    if (v60 - 1 != v62)
      goto LABEL_83;
  }
LABEL_85:
  v74 = *((_DWORD *)a3 + 523) & 0xFFFFFC00 | *(_DWORD *)a2 & 0x3FF;
  *((_DWORD *)a3 + 523) = v74;
  *((_DWORD *)a3 + 523) = v74 & 0xE000FFFF | ((*(_DWORD *)(a2 + 4) & 0x1FFF) << 16);
  *((_OWORD *)a3 + 131) = xmmword_20E80DFB0;
  *((_OWORD *)a3 + 132) = xmmword_20E80DFC0;
  *((_OWORD *)a3 + 133) = xmmword_20E80DFD0;
  *((_OWORD *)a3 + 134) = xmmword_20E80DFE0;
  a3[270] = 0x1D002E00230039;
  v75 = (const __int16 *)(a2 + 20);
  if (v59 > 7 && ((unint64_t)a3 + 2188 >= a2 + 22 || v75 >= (const __int16 *)a3 + 2 * v11 + 1120))
  {
    v76 = v59 & 0xFFFFFFFFFFFFFFF8;
    v77 = vld1q_dup_s16(v75);
    v78 = (int16x8_t *)((char *)a3 + 2242);
    v79.i64[0] = 0x1000100010001;
    v79.i64[1] = 0x1000100010001;
    v80.i64[0] = -1;
    v80.i64[1] = -1;
    v81 = v59 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      *(int16x8_t *)((char *)v78 - 54) = v79;
      *(int16x8_t *)((char *)v78 - 36) = v80;
      *v78 = v77;
      *(int16x8_t *)((char *)v78++ - 18) = v77;
      v81 -= 8;
    }
    while (v81);
  }
  else
  {
    v76 = 0;
  }
  v82 = v76 - v12 + 1;
  v83 = (__int16 *)a3 + v76 + 1121;
  do
  {
    *(v83 - 27) = 1;
    *(v83 - 18) = -1;
    *v83 = *v75;
    *(v83 - 9) = *v75;
    ++v83;
    _CF = __CFADD__(v82++, 1);
  }
  while (!_CF);
  *(_OWORD *)((char *)a3 + 2260) = xmmword_20E80DFF0;
  *(unint64_t *)((char *)a3 + 2276) = 0;
  v85 = *(unsigned __int16 *)(a2 + 50);
  if (v85 == 5)
    v86 = 15;
  else
    v86 = 7;
  *((_DWORD *)a3 + 571) = v86;
  if (v85 != 1)
  {
    v87 = 0;
    v88 = (char *)a3 + 2290;
    do
    {
      *(_DWORD *)(v88 - 2) = 19267693;
      ++v87;
      v88 += 4;
    }
    while (v87 < (unint64_t)*(unsigned __int16 *)(a2 + 50) - 1);
  }
  if (v59 >= 8)
  {
    if ((unint64_t)a3 + 436 >= a2 + 48 || a2 + 43 >= (unint64_t)&a3[v11 + 54])
    {
      if (v59 >= 0x10)
      {
        v89 = v59 & 0xFFFFFFFFFFFFFFF0;
        v90 = (const char *)(a2 + 43);
        v91 = (uint8x16_t)vld1q_dup_s8(v90);
        v92 = vmovl_high_u8(v91);
        v93 = (int8x16_t)vmovl_high_u16(v92);
        v94 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v92.i8);
        v95 = vmovl_u8(*(uint8x8_t *)v91.i8);
        v96 = (int8x16_t)vmovl_high_u16(v95);
        _Q1 = vdupq_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)(a2 + 46), (int8x8_t)0x3F003F003F003FLL), 0);
        v98 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v95.i8);
        __asm { SHLL2           V6.4S, V1.8H, #0x10 }
        v102 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
        v103 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
        v104 = vorrq_s8(_Q6, v93);
        v105 = vorrq_s8(_Q6, v96);
        v106 = vorrq_s8(v102, v98);
        v107 = vorrq_s8(v102, v94);
        v108 = v59 & 0xFFFFFFFFFFFFFFF0;
        v109 = (int8x16_t *)((char *)a3 + 436);
        do
        {
          v110 = vorrq_s8(v104, vandq_s8(v109[3], v103));
          v111 = vorrq_s8(v105, vandq_s8(v109[1], v103));
          v112 = vorrq_s8(v107, vandq_s8(v109[2], v103));
          *v109 = vorrq_s8(v106, vandq_s8(*v109, v103));
          v109[1] = v111;
          v109[2] = v112;
          v109[3] = v110;
          v109 += 4;
          v108 -= 16;
        }
        while (v108);
        if ((v59 & 8) == 0)
          goto LABEL_112;
      }
      else
      {
        v89 = 0;
      }
      v113 = v89;
      v89 = v59 & 0xFFFFFFFFFFFFFFF8;
      v114 = (const char *)(a2 + 43);
      v115 = (uint8x8_t)vld1_dup_s8(v114);
      v116 = vmovl_u8(v115);
      v117 = (int8x16_t)vmovl_high_u16(v116);
      v118 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v116.i8);
      v119.i64[0] = 0x3F003F003F003FLL;
      v119.i64[1] = 0x3F003F003F003FLL;
      _Q0 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vandq_s8(*(int8x16_t *)(a2 + 46), v119), 0);
      __asm { SHLL2           V3.4S, V0.8H, #0x10 }
      v122 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
      v123 = (int8x16_t *)((char *)a3 + 4 * v113 + 436);
      v124 = v113 - (v59 & 0xFFFFFFFFFFFFFFF8);
      v125 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
      v126 = vorrq_s8(_Q3, v117);
      v127 = vorrq_s8(v122, v118);
      do
      {
        v128 = vorrq_s8(v126, vandq_s8(v123[1], v125));
        *v123 = vorrq_s8(v127, vandq_s8(*v123, v125));
        v123[1] = v128;
        v123 += 2;
        v124 += 8;
      }
      while (v124);
    }
    else
    {
      v89 = 0;
    }
  }
  else
  {
    v89 = 0;
  }
  do
  {
LABEL_112:
    v129 = (char *)a3 + 4 * v89;
    v130 = *((_DWORD *)v129 + 109) & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 43);
    *((_DWORD *)v129 + 109) = v130;
    *((_DWORD *)v129 + 109) = v130 & 0xFFC0FFFF | ((*(_WORD *)(a2 + 46) & 0x3F) << 16);
    ++v89;
  }
  while (v59 != v89);
  *((_DWORD *)a3 + 576) = a3[288] & 0xFFFFFFFE | ((*(unsigned __int8 *)(a2 + 92) | *(unsigned __int8 *)(a2 + 153)) != 0);
  if (*(unsigned __int8 *)(a2 + 92) | *(unsigned __int8 *)(a2 + 153))
  {
    v131 = a3[288] & 0xFFFE00FF | ((sub_20E79B4E8(*(_DWORD *)(a2 + 24)) & 0x1FF) << 8);
    *((_DWORD *)a3 + 576) = v131;
    *((_DWORD *)a3 + 576) = v131 & 0xF8FFFFFF | ((*(_BYTE *)(a2 + 132) & 3) << 24);
    *((_DWORD *)a3 + 581) = sub_20E79B554(*(_DWORD *)(a2 + 24));
    v132 = *(unsigned int *)(a4 + 72);
    v133 = *(_QWORD *)(a4 + 64) + v132;
    *(unint64_t *)((char *)a3 + 2308) = v133;
    *(_BYTE *)(a5 + 360) = 1;
    *(_DWORD *)(a5 + 364) = v132;
    v134 = sub_20E79D214(*(_DWORD *)(a2 + 24), *(unsigned __int8 *)(a2 + 132));
    if (sub_20E7C5A20(v134, 0, 64, a5 + 340) >= 0x4B001)
      sub_20E807710();
    v135 = *(_DWORD *)(a4 + 72) + 307200;
    *(unint64_t *)((char *)a3 + 2316) = v133 + 307200;
    *(_DWORD *)(a4 + 72) = v135 + (*((_DWORD *)a3 + 581) << 6);
  }
  *(int8x16_t *)(a3 + 179) = vandq_s8(*(int8x16_t *)(a3 + 179), (int8x16_t)xmmword_20E80E000);
  *((_OWORD *)a3 + 111) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 111), (int8x16_t)vdupq_n_s32(0xE000F000)) | __PAIR128__(0x10001000100010, 0x10001000100010);
  a3[181] &= 0xFFFFFFF0FFFFFFF0;
  *((int8x16_t *)a3 + 112) = vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 112), (int8x16_t)xmmword_20E80E010), (int8x16_t)xmmword_20E80E020);
  v136 = (int8x16_t *)((char *)a3 + 1436);
  a3[226] = (unint64_t)vorr_s8(vand_s8((int8x8_t)a3[226], (int8x8_t)vdup_n_s32(0xFFFF8080)), (int8x8_t)vdup_n_s32(0x101u));
  v137 = (int8x16_t)vdupq_n_s32(0xF000F800);
  *((_OWORD *)a3 + 91) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 91), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 368) = a3[184] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1476) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1476), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 373) = *((_DWORD *)a3 + 373) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 187) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 187), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 378) = a3[189] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1516) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1516), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 383) = *((_DWORD *)a3 + 383) & 0xF000F800 | 0x50005;
  *((_OWORD *)a3 + 96) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 96), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 388) = a3[194] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1556) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1556), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 393) = *((_DWORD *)a3 + 393) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 197) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 197), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 398) = a3[199] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1596) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1596), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 403) = *((_DWORD *)a3 + 403) & 0xF000F800 | 0x50005;
  *((_OWORD *)a3 + 101) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 101), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 408) = a3[204] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1636) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1636), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 413) = *((_DWORD *)a3 + 413) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 207) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 207), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 418) = a3[209] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1676) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1676), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 423) = *((_DWORD *)a3 + 423) & 0xF000F800 | 0x50005;
  *((_OWORD *)a3 + 106) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 106), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 428) = a3[214] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1716) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1716), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 433) = *((_DWORD *)a3 + 433) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 217) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 217), v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 438) = a3[219] & 0xF000F800 | 0x50005;
  v138 = *(int8x16_t *)((char *)a3 + 1756);
  v139 = *(_OWORD *)&vandq_s8(v138, v137) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *(_OWORD *)((char *)a3 + 1756) = v139;
  *((_DWORD *)a3 + 443) = *((_DWORD *)a3 + 443) & 0xF000F800 | 0x50005;
  if (*(_DWORD *)a2 <= 0x280u)
  {
    *a3 = *a3 & 0xFFFFFFE0FFFFFFFFLL | 0x100000000;
    v140 = (int8x16_t)vdupq_n_s32(0xC000E000);
    *((int8x16_t *)a3 + 116) = vandq_s8(*((int8x16_t *)a3 + 116), v140);
    *((int8x16_t *)a3 + 117) = vandq_s8(*((int8x16_t *)a3 + 117), v140);
    *((int8x16_t *)a3 + 118) = vandq_s8(*((int8x16_t *)a3 + 118), v140);
    *((int8x16_t *)a3 + 119) = vandq_s8(*((int8x16_t *)a3 + 119), v140);
    sub_20E78F074(a1, a2, (uint64_t)a3, 1);
    *((_DWORD *)a3 + 358) = a3[179] & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 42);
    if (*(_BYTE *)(a2 + 42))
    {
      bzero(v219, 0x824uLL);
      v141 = *((_DWORD *)a3 + 118);
      v218[0] = 1;
      v220 = v141 & 0x7FF;
      v142 = *((_DWORD *)a3 + 198);
      v231 = 5 * (HIWORD(v142) & 0x1FFF);
      v143 = (a3[139] & 0x3FF) + 5 * (v142 & 0x3FF);
      v144 = *((_DWORD *)a3 + 119);
      v221 = HIWORD(v141) & 0x1FFF;
      v222 = v144 & 0x7FF;
      v145 = HIWORD(v144) & 0x1FFF;
      v146 = *((_DWORD *)a3 + 199);
      v233 = 5 * (HIWORD(v146) & 0x1FFF);
      v232 = (*((_DWORD *)a3 + 279) & 0x3FF) + 5 * (v146 & 0x3FF);
      v147 = *((_DWORD *)a3 + 120);
      v223 = v145;
      v224 = v147 & 0x7FF;
      v148 = HIWORD(v147) & 0x1FFF;
      v149 = *((_DWORD *)a3 + 200);
      v235 = 5 * (HIWORD(v149) & 0x1FFF);
      v234 = (a3[140] & 0x3FF) + 5 * (v149 & 0x3FF);
      v150 = *((_DWORD *)a3 + 121);
      v225 = v148;
      v226 = v150 & 0x7FF;
      v151 = HIWORD(v150) & 0x1FFF;
      v152 = *((_DWORD *)a3 + 201);
      v237 = 5 * (HIWORD(v152) & 0x1FFF);
      v236 = (*((_DWORD *)a3 + 281) & 0x3FF) + 5 * (v152 & 0x3FF);
      v153 = *((_DWORD *)a3 + 122);
      v227 = v151;
      v228 = v153 & 0x7FF;
      v230 = v143;
      v229[0] = HIWORD(v153) & 0x1FFF;
      v154 = *((_DWORD *)a3 + 202);
      v239[0] = 5 * (HIWORD(v154) & 0x1FFF);
      v238 = (a3[141] & 0x3FF) + 5 * (v154 & 0x3FF);
      sub_20E7E797C(0x280u, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), 1, v218, v155, v156);
      v157 = v242;
      v158 = v243;
      v159.i64[0] = __PAIR64__(v254, v252);
      v160.i64[0] = __PAIR64__(v255, v253);
      v161.i64[0] = __PAIR64__(v239[153], v239[151]);
      v162.i64[0] = __PAIR64__(v239[154], v239[152]);
      v163 = v244;
      v164 = v245;
      v165 = v246;
      v166 = v247;
      v167.i32[0] = v248;
      v168.i32[0] = v249;
      v159.i64[1] = __PAIR64__(v258, v256);
      v169.i64[0] = 0xF0000000FLL;
      v169.i64[1] = 0xF0000000FLL;
      v160.i64[1] = __PAIR64__(v259, v257);
      v161.i32[2] = v239[155];
      v162.i32[2] = v239[156];
      *((int8x16_t *)a3 + 111) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v160, 0x10uLL) & __PAIR128__(0x1FFFFFFF1FFFFFFFLL, 0x1FFFFFFF1FFFFFFFLL)), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 111), (int8x16_t)vdupq_n_s32(0xE000F000)), vandq_s8(v159, v169)));
      v170.i64[0] = 0xF0000000FLL;
      v170.i64[1] = 0xF0000000FLL;
      *v136 = vbslq_s8(v170, *v136, *(int8x16_t *)&v261[1]);
      v161.i32[3] = v239[157];
      v160.i64[0] = 0x700000007;
      v160.i64[1] = 0x700000007;
      v162.i32[3] = v239[158];
      *((int8x16_t *)a3 + 91) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v162, 0x10uLL) & __PAIR128__(0xFFFFFFF0FFFFFFFLL, 0xFFFFFFF0FFFFFFFLL)), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 91), (int8x16_t)vdupq_n_s32(0xF000F800)), vandq_s8(v161, (int8x16_t)v160)));
      v167.i32[1] = v250;
      v168.i32[1] = v251;
      a3[226] = (unint64_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v168, 8uLL), (int8x8_t)0x7F0000007F00), vorr_s8(vand_s8((int8x8_t)a3[226], (int8x8_t)vdup_n_s32(0xFFFF8080)), vand_s8(v167, (int8x8_t)0x7F0000007FLL)));
      v171.i64[0] = __PAIR64__(v157, v260);
      v162.i64[0] = __PAIR64__(v158, v261[0]);
      v171.i64[1] = __PAIR64__(v165, v163);
      v162.i64[1] = __PAIR64__(v166, v164);
      *((int8x16_t *)a3 + 112) = vorrq_s8(vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)v162, (uint32x4_t)xmmword_20E80E040), (int8x16_t)xmmword_20E80E050), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 112), (int8x16_t)xmmword_20E80E010), vandq_s8(v171, (int8x16_t)xmmword_20E80E030)));
      *((_DWORD *)a3 + 363) = *((_DWORD *)a3 + 363) & 0xFFFFFFF0 | v262 & 0xF;
      *((_DWORD *)a3 + 368) = ((v241 & 0xFFF) << 16) | a3[184] & 0xF000F800 | v240 & 0x7FF;
    }
    return;
  }
  sub_20E7E797C(0x280u, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int8 *)(a2 + 42), v218, *(double *)&v139, (uint32x4_t)v138);
  v172 = v218[0] & 0x1F;
  v173 = *a3 & 0xFFFFFFE0FFFFFFFFLL | ((unint64_t)(v218[0] & 0x1F) << 32);
  *a3 = v173;
  v174 = HIDWORD(v173) & 0x1F;
  if (v172)
  {
    v175 = 0;
    v176 = 0;
    v177.i64[0] = 0x700000007;
    v177.i64[1] = 0x700000007;
    v178 = (int8x16_t)vdupq_n_s32(0xE000F800);
    v179 = a3;
    do
    {
      *(_DWORD *)((char *)a3 + v176 * 4 + 1856) = *(_DWORD *)((_BYTE *)a3 + v176 * 4 + 1856) & 0xFFFFE000 | v218[v176 + 1] & 0x1FFF;
      v180 = *(int *)((char *)&v230 + v175);
      *((_DWORD *)v179 + 198) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v231 + v175)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v231 + v175)) >> 63)) & 0x1FFF) << 16) | v179[99] & 0xE000FC00 | (v180 / 5) & 0x3FF;
      *((_DWORD *)v179 + 278) = v179[139] & 0xFFFFFC00 | (v180 % 5) & 0x3FF;
      v181 = *(int *)((char *)&v232 + v175);
      *((_DWORD *)v179 + 199) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v233 + v175)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v233 + v175)) >> 63)) & 0x1FFF) << 16) | *((_DWORD *)v179 + 199) & 0xE000FC00 | (v181 / 5) & 0x3FF;
      *((_DWORD *)v179 + 279) = *((_DWORD *)v179 + 279) & 0xFFFFFC00 | (v181 % 5) & 0x3FF;
      v182.i32[0] = *(int *)((char *)&v220 + v175);
      v183.i32[0] = *(int *)((char *)&v221 + v175);
      v182.i32[1] = *(int *)((char *)&v222 + v175);
      v183.i32[1] = *(int *)((char *)&v223 + v175);
      v184 = *(int *)((char *)&v234 + v175);
      v182.i32[2] = *(int *)((char *)&v224 + v175);
      v183.i32[2] = *(int *)((char *)&v225 + v175);
      *((_DWORD *)v179 + 200) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v235 + v175)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v235 + v175)) >> 63)) & 0x1FFF) << 16) | v179[100] & 0xE000FC00 | (v184 / 5) & 0x3FF;
      *((_DWORD *)v179 + 280) = v179[140] & 0xFFFFFC00 | (v184 % 5) & 0x3FF;
      v182.i32[3] = *(int *)((char *)&v226 + v175);
      v183.i32[3] = *(int *)((char *)&v227 + v175);
      *(int8x16_t *)(v179 + 59) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v183, 0x10uLL) & __PAIR128__(0x1FFFFFFF1FFFFFFFLL, 0x1FFFFFFF1FFFFFFFLL)), vorrq_s8(vandq_s8(*(int8x16_t *)(v179 + 59), v178), vandq_s8(v182, v177)));
      v185 = *(int *)((char *)&v236 + v175);
      *((_DWORD *)v179 + 201) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v237 + v175)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v237 + v175)) >> 63)) & 0x1FFF) << 16) | *((_DWORD *)v179 + 201) & 0xE000FC00 | (v185 / 5) & 0x3FF;
      *((_DWORD *)v179 + 281) = *((_DWORD *)v179 + 281) & 0xFFFFFC00 | (v185 % 5) & 0x3FF;
      *((_DWORD *)v179 + 122) = ((v229[v175 / 4] & 0x1FFF) << 16) | v179[61] & 0xE000F800 | v229[v175 / 4 - 1] & 0x7FF;
      v186 = v239[v175 / 4 - 1];
      *((_DWORD *)v179 + 202) = ((((unsigned __int16)((unint64_t)(1717986919 * (int)v239[v175 / 4]) >> 33)
                                 + ((unint64_t)(1717986919 * (int)v239[v175 / 4]) >> 63)) & 0x1FFF) << 16) | v179[101] & 0xE000FC00 | (v186 / 5) & 0x3FF;
      *((_DWORD *)v179 + 282) = v179[141] & 0xFFFFFC00 | (v186 % 5) & 0x3FF;
      ++v176;
      v175 += 40;
      v179 = (unint64_t *)((char *)v179 + 20);
    }
    while (40 * v174 != v175);
  }
  *((_DWORD *)a3 + 358) = a3[179] & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 42);
  if (*(_BYTE *)(a2 + 42))
  {
    v187 = v242;
    v188 = v243;
    v189.i64[0] = __PAIR64__(v254, v252);
    v190.i64[0] = __PAIR64__(v255, v253);
    v191 = v244;
    v192 = v245;
    v193 = v246;
    v194 = v247;
    v195.i32[0] = v248;
    v196.i32[0] = v249;
    v189.i64[1] = __PAIR64__(v258, v256);
    v197.i64[0] = 0xF0000000FLL;
    v197.i64[1] = 0xF0000000FLL;
    v190.i64[1] = __PAIR64__(v259, v257);
    *((int8x16_t *)a3 + 111) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v190, 0x10uLL) & __PAIR128__(0x1FFFFFFF1FFFFFFFLL, 0x1FFFFFFF1FFFFFFFLL)), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 111), (int8x16_t)vdupq_n_s32(0xE000F000)), vandq_s8(v189, v197)));
    v198.i64[0] = 0xF0000000FLL;
    v198.i64[1] = 0xF0000000FLL;
    *v136 = vbslq_s8(v198, *v136, *(int8x16_t *)&v261[1]);
    v195.i32[1] = v250;
    v196.i32[1] = v251;
    a3[226] = (unint64_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v196, 8uLL), (int8x8_t)0x7F0000007F00), vorr_s8(vand_s8((int8x8_t)a3[226], (int8x8_t)vdup_n_s32(0xFFFF8080)), vand_s8(v195, (int8x8_t)0x7F0000007FLL)));
    v189.i64[0] = __PAIR64__(v187, v260);
    v190.i64[0] = __PAIR64__(v188, v261[0]);
    v189.i64[1] = __PAIR64__(v193, v191);
    v190.i64[1] = __PAIR64__(v194, v192);
    *((int8x16_t *)a3 + 112) = vorrq_s8(vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)v190, (uint32x4_t)xmmword_20E80E040), (int8x16_t)xmmword_20E80E050), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 112), (int8x16_t)xmmword_20E80E010), vandq_s8(v189, (int8x16_t)xmmword_20E80E030)));
    *((_DWORD *)a3 + 363) = *((_DWORD *)a3 + 363) & 0xFFFFFFF0 | v262 & 0xF;
    if (v172)
    {
      v199 = &v241;
      v200 = (int8x16_t *)(a3 + 184);
      v201.i64[0] = 0x700000007;
      v201.i64[1] = 0x700000007;
      v202 = (int8x16_t)vdupq_n_s32(0xF000F800);
      v203 = HIDWORD(v173) & 0x1F;
      do
      {
        v204.i32[0] = *(v199 - 9);
        v204.i32[1] = *(v199 - 7);
        v204.i32[2] = *(v199 - 5);
        v204.i32[3] = *(v199 - 3);
        v205 = vorrq_s8(vandq_s8(v200[-1], v202), vandq_s8(v204, v201));
        v204.i32[0] = *(v199 - 8);
        v204.i32[1] = *(v199 - 6);
        v204.i32[2] = *(v199 - 4);
        v204.i32[3] = *(v199 - 2);
        v200[-1] = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32((int32x4_t)v204, 0x10uLL) & __PAIR128__(0xFFFFFFF0FFFFFFFLL, 0xFFFFFFF0FFFFFFFLL)), v205);
        v206 = v200->i32[0] & 0xF000F800 | *(v199 - 1) & 0x7FF;
        v207 = *v199;
        v199 += 10;
        v200->i32[0] = ((v207 & 0xFFF) << 16) | v206;
        v200 = (int8x16_t *)((char *)v200 + 20);
        --v203;
      }
      while (v203);
    }
  }
  *((_DWORD *)a3 + 592) = a3[296] & 0xE0000000 | (2 * (a3[1] & 0x3FFF)) & 0x7FFF | ((*((_WORD *)a3 + 5) & 0x3FFF) << 15) | 1;
  *((_DWORD *)a3 + 593) = v172;
  if (v174)
  {
    if (v174 < 8)
    {
      v208 = 0;
LABEL_132:
      v216 = v208 - v174;
      v217 = (_DWORD *)a3 + v208 + 464;
      do
      {
        v217[131] = *v217 & 0x1FFF;
        ++v217;
        _CF = __CFADD__(v216++, 1);
      }
      while (!_CF);
      return;
    }
    v209 = HIDWORD(v173) & 7;
    v208 = v174 - v209;
    v210 = a3 + 232;
    v211.i64[0] = 0x1F0000001FLL;
    v211.i64[1] = 0x1F0000001FLL;
    v212 = v174 - v209;
    do
    {
      v213 = (int8x16_t *)((char *)v210 + 524);
      v214 = *(int8x16_t *)v210;
      v215 = *((int8x16_t *)v210 + 1);
      v210 += 2;
      *v213 = vandq_s8(v214, v211);
      v213[1] = vandq_s8(v215, v211);
      v212 -= 8;
    }
    while (v212);
    if (v209)
      goto LABEL_132;
  }
}

uint64_t sub_20E78F074(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v15;
  uint64_t v16;

  if (*(_DWORD *)(result + 64) != 4)
    sub_20E807818();
  v4 = result;
  if (*(_WORD *)(result + 68) != 5)
    sub_20E8077EC();
  if (a4 != 1)
    sub_20E8077C0();
  if (*(_WORD *)(a2 + 50))
  {
    v6 = 0;
    do
    {
      v8 = sub_20E7E7940(*(_DWORD *)a2, v6);
      v9 = sub_20E7E7940(*(_DWORD *)(a2 + 4), v6);
      v10 = *(__int16 *)(a2 + 14);
      v11 = v8;
      if (*(_WORD *)(a2 + 18))
        v11 = sub_20E7E7940(*(__int16 *)(a2 + 18), v6);
      v12 = *(__int16 *)(a2 + 12);
      v13 = v9;
      if (*(_WORD *)(a2 + 16))
        v13 = sub_20E7E7940(*(__int16 *)(a2 + 16), v6);
      v15 = 0;
      v16 = 0;
      sub_20E79A308(v4, v8, (int *)&v16 + 1, (signed int *)&v16, v10 >> v6, v11);
      result = sub_20E79A308(v4, v9, (int *)&v15 + 1, (signed int *)&v15, v12 >> v6, v13);
      v7 = a3 + 4 * v6;
      *(_DWORD *)(v7 + 472) = ((WORD2(v15) & 0x1FFF) << 16) | WORD2(v16) & 0x7FF | *(_DWORD *)(v7 + 472) & 0xE000F800;
      *(_DWORD *)(v7 + 792) = ((v15 & 0x1FFF) << 16) | v16 & 0x3FF | *(_DWORD *)(v7 + 792) & 0xE000FC00;
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 50));
  }
  return result;
}

void sub_20E78F208()
{
  JUMPOUT(0x212BC47D4);
}

__n128 sub_20E78F21C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9A86E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20E78F25C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9A86E0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20E78F284(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(int *)(a1 + 24));
}

uint64_t sub_20E78F294(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFiP10__CVBufferyEJRS6_iEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFiP10__CVBufferyEJRS6_iEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFiP10__CVBufferyEJRS6_iEEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFiP10__CVBufferyEJRS6_iEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E78F300()
{
  return &unk_24C9A8750;
}

uint64_t sub_20E78F30C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = MEMORY[0x24BEDB858];
  v5 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v4 + 64;
  v6 = a1 + 16;
  v7 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + *(_QWORD *)(v8 - 24)) = v9;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v10, (void *)(a1 + 24));
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v11 = v7[4];
  v12 = v7[5];
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v6 + *(_QWORD *)(v11 - 24)) = v12;
  v13 = v7[1];
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + *(_QWORD *)(v13 - 24)) = v7[6];
  *(_QWORD *)a1 = v4 + 24;
  *(_QWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 16) = v4 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a2;
  return a1;
}

void sub_20E78F410(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x212BC4774](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E78F444(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC4774](a1 + 128);
  return a1;
}

_QWORD *sub_20E78F4CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x212BC4648](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_20E78F630(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x212BC4654](v13);
  return a1;
}

void sub_20E78F5D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x212BC4654](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x20E78F5B4);
}

void sub_20E78F61C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20E78F630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_20E7857BC();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_20E78F7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E78F7D4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_20E78D874();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E78D888();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_20E78F970(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E78D874();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E78D888();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_20E78FB0C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_20E78FB58(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Au);
}

uint64_t sub_20E78FB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5, char a6)
{
  uint64_t result;
  BOOL v11;
  uint64_t **v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  size_t v19;
  int64x2_t *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  int64x2_t v24;
  int64x2_t *v25;
  int64x2_t v26;
  int64x2_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  _DWORD *v35;
  __int16 v36;
  int *v37;
  _QWORD *v38;
  unsigned int v39;
  _QWORD *v40;
  unsigned int v41;
  _QWORD *v42;
  _QWORD **v43;
  unsigned int v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t *v60;
  signed int v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  size_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t *v91;
  uint64_t **v92;
  uint64_t **v93;
  int v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  unsigned int v99;
  uint64_t *v100;
  int v101;
  uint64_t *v102;
  int v103;
  uint64_t **v104;
  _DWORD *v105;
  uint64_t *v106;
  uint64_t *v107;
  unsigned int v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t **v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  void *__p;
  __int8 *v144;
  __int8 *v145;
  char *v146;
  char *v147;
  char *v148;
  uint8_t buf[8];
  char *v150;
  char *v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  result = kdebug_trace();
  if (*(_BYTE *)(a3 + 89))
    v11 = 0;
  else
    v11 = *(_BYTE *)(a3 + 88) == 0;
  if (v11 && *(_BYTE *)(a3 + 92) == 0)
    return result;
  if (!*(_BYTE *)(a3 + 92))
  {
    if (*(_BYTE *)(a3 + 89))
    {
      sub_20E79097C(a1, (unsigned int *)a3);
    }
    else if (*(_BYTE *)(a3 + 88))
    {
      if (*(_BYTE *)(a3 + 91))
      {
        if (*(_BYTE *)(a3 + 91) == 1)
          sub_20E790AFC(a1, (unsigned int *)a3);
      }
      else
      {
        sub_20E790C7C(a1, (unsigned int *)a3);
      }
    }
    goto LABEL_173;
  }
  v13 = (uint64_t **)(a4 + 8);
  sub_20E7938D0(a4, *(_QWORD **)(a4 + 8));
  *(_QWORD *)a4 = a4 + 8;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (!*(_BYTE *)(a3 + 89))
    sub_20E807844();
  if (*(_BYTE *)(a3 + 68) != 2)
    sub_20E8078F4();
  if (!*(_BYTE *)(a3 + 76))
    sub_20E807870();
  v126 = *(_DWORD *)(a1 + 184);
  v15 = *(_DWORD *)(a1 + 160);
  v16 = *(_DWORD *)(a1 + 176);
  v17 = *(_DWORD *)(a1 + 152);
  if (v16 >= v17 && *(_DWORD *)(a3 + 24))
    sub_20E8078C8();
  if (v17 != *(_DWORD *)(a1 + 180) + v16)
    sub_20E80789C();
  v120 = a2;
  __p = 0;
  v144 = 0;
  v145 = 0;
  v18 = v15 + v126;
  v122 = v18;
  v123 = a3;
  v121 = a6;
  if (v18)
  {
    v19 = 8 * v18;
    v20 = (int64x2_t *)operator new(v19);
    __p = v20;
    v145 = &v20->i8[v19];
    bzero(v20, v19);
    v144 = &v20->i8[v19];
    if (v19 - 8 < 0x18)
    {
      v21 = 0;
      v22 = (uint64_t *)v20;
      do
LABEL_24:
        *v22++ = v21++;
      while (v22 != (uint64_t *)&v20->i8[v19]);
      goto LABEL_25;
    }
    v23 = ((v19 - 8) >> 3) + 1;
    v21 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    v22 = &v20->i64[v23 & 0x3FFFFFFFFFFFFFFCLL];
    v24 = (int64x2_t)xmmword_20E80DF80;
    v25 = v20 + 1;
    v26 = vdupq_n_s64(2uLL);
    v27 = vdupq_n_s64(4uLL);
    v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25[-1] = v24;
      *v25 = vaddq_s64(v24, v26);
      v24 = vaddq_s64(v24, v27);
      v25 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v23 != v21)
      goto LABEL_24;
  }
LABEL_25:
  if (*(_BYTE *)(a3 + 132) != 1)
  {
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCollUtils.cpp", 107, "config.fmDescSize == FeatureMatchingDescriptorSize::k256bits", (void (*)(void *))sub_20E803DA4);
    abort();
  }
  v125 = *(_QWORD *)(a1 + 328);
  v29 = *(_DWORD *)(a1 + 324);
  v119 = *(_DWORD *)(*(_QWORD *)(a1 + 296) + 180);
  v136 = 0;
  v137 = 0;
  v135 = &v136;
  if (v29 >= 0x180)
  {
    v31 = 0;
    v124 = v29 / 0x180uLL;
    do
    {
      v32 = (uint64_t *)(v125 + 1536 * v31);
      v33 = sub_20E790DFC(v32);
      if (!v33)
        break;
      v128 = v31;
      v34 = 0;
      v130 = v33;
      v132 = (*v32 >> 63) & v126;
      do
      {
        v35 = (_DWORD *)v32 + v34;
        v36 = *((_WORD *)v35 + 129);
        v37 = v35 + 96;
        v38 = v136;
        v39 = v35[96];
        if (v136)
        {
          v40 = v136;
          do
          {
            v41 = *((_DWORD *)v40 + 7);
            if (v39 >= v41)
            {
              if (v41 >= v39)
              {
                v116 = 135;
                v117 = "!duplicate_tid && \"duplicate tid is unexpected\"";
                goto LABEL_187;
              }
              ++v40;
            }
            v40 = (_QWORD *)*v40;
          }
          while (v40);
          if (!v39)
          {
LABEL_188:
            v116 = 137;
            v117 = "desc_set->tid[i] && \"TID not assigned\"";
LABEL_187:
            sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCollUtils.cpp", v116, v117, (void (*)(void *))sub_20E803DA4);
            abort();
          }
          while (1)
          {
            while (1)
            {
              v43 = (_QWORD **)v38;
              v44 = *((_DWORD *)v38 + 7);
              if (v39 >= v44)
                break;
              v38 = *v43;
              v42 = v43;
              if (!*v43)
                goto LABEL_47;
            }
            if (v44 >= v39)
              break;
            v38 = v43[1];
            if (!v38)
            {
              v42 = v43 + 1;
              goto LABEL_47;
            }
          }
        }
        else
        {
          v43 = &v136;
          v42 = &v136;
          if (!v39)
            goto LABEL_188;
LABEL_47:
          v45 = operator new(0x20uLL);
          *((_DWORD *)v45 + 7) = v39;
          *v45 = 0;
          v45[1] = 0;
          v45[2] = v43;
          *v42 = v45;
          if (*v135)
          {
            v135 = (_QWORD *)*v135;
            v45 = (_QWORD *)*v42;
          }
          v46 = v136;
          v11 = v45 == v136;
          *((_BYTE *)v45 + 24) = v45 == v136;
          if (!v11)
          {
            do
            {
              v47 = v45[2];
              if (*(_BYTE *)(v47 + 24))
                break;
              v48 = *(_QWORD **)(v47 + 16);
              v49 = *v48;
              if (*v48 == v47)
              {
                v52 = v48[1];
                if (!v52 || (v53 = *(unsigned __int8 *)(v52 + 24), v50 = (_BYTE *)(v52 + 24), v53))
                {
                  if (*(_QWORD **)v47 == v45)
                  {
                    *(_BYTE *)(v47 + 24) = 1;
                    *((_BYTE *)v48 + 24) = 0;
                    v56 = *(_QWORD *)(v47 + 8);
                    *v48 = v56;
                    if (v56)
                      goto LABEL_64;
                  }
                  else
                  {
                    v54 = *(uint64_t **)(v47 + 8);
                    v55 = *v54;
                    *(_QWORD *)(v47 + 8) = *v54;
                    if (v55)
                    {
                      *(_QWORD *)(v55 + 16) = v47;
                      v48 = *(_QWORD **)(v47 + 16);
                    }
                    v54[2] = (uint64_t)v48;
                    *(_QWORD *)(*(_QWORD *)(v47 + 16) + 8 * (**(_QWORD **)(v47 + 16) != v47)) = v54;
                    *v54 = v47;
                    *(_QWORD *)(v47 + 16) = v54;
                    v48 = (_QWORD *)v54[2];
                    v47 = *v48;
                    *((_BYTE *)v54 + 24) = 1;
                    *((_BYTE *)v48 + 24) = 0;
                    v56 = *(_QWORD *)(v47 + 8);
                    *v48 = v56;
                    if (v56)
LABEL_64:
                      *(_QWORD *)(v56 + 16) = v48;
                  }
                  *(_QWORD *)(v47 + 16) = v48[2];
                  *(_QWORD *)(v48[2] + 8 * (*(_QWORD *)v48[2] != (_QWORD)v48)) = v47;
                  *(_QWORD *)(v47 + 8) = v48;
LABEL_70:
                  v48[2] = v47;
                  break;
                }
              }
              else if (!v49 || (v51 = *(unsigned __int8 *)(v49 + 24), v50 = (_BYTE *)(v49 + 24), v51))
              {
                if (*(_QWORD **)v47 == v45)
                {
                  v78 = v45[1];
                  *(_QWORD *)v47 = v78;
                  if (v78)
                  {
                    *(_QWORD *)(v78 + 16) = v47;
                    v48 = *(_QWORD **)(v47 + 16);
                  }
                  v45[2] = v48;
                  *(_QWORD *)(*(_QWORD *)(v47 + 16) + 8 * (**(_QWORD **)(v47 + 16) != v47)) = v45;
                  v45[1] = v47;
                  *(_QWORD *)(v47 + 16) = v45;
                  v48 = (_QWORD *)v45[2];
                  *((_BYTE *)v45 + 24) = 1;
                  *((_BYTE *)v48 + 24) = 0;
                  v47 = v48[1];
                  v57 = *(_QWORD **)v47;
                  v48[1] = *(_QWORD *)v47;
                  if (v57)
LABEL_68:
                    v57[2] = v48;
                }
                else
                {
                  *(_BYTE *)(v47 + 24) = 1;
                  *((_BYTE *)v48 + 24) = 0;
                  v47 = v48[1];
                  v57 = *(_QWORD **)v47;
                  v48[1] = *(_QWORD *)v47;
                  if (v57)
                    goto LABEL_68;
                }
                *(_QWORD *)(v47 + 16) = v48[2];
                *(_QWORD *)(v48[2] + 8 * (*(_QWORD *)v48[2] != (_QWORD)v48)) = v47;
                *(_QWORD *)v47 = v48;
                goto LABEL_70;
              }
              *(_BYTE *)(v47 + 24) = 1;
              v45 = v48;
              *((_BYTE *)v48 + 24) = v48 == v46;
              *v50 = 1;
            }
            while (v48 != v46);
          }
          v137 = (_QWORD *)((char *)v137 + 1);
          v39 = *v37;
        }
        v58 = *v13;
        v59 = (uint64_t **)(a4 + 8);
        v60 = (uint64_t *)(a4 + 8);
        if (*v13)
        {
          while (1)
          {
            while (1)
            {
              v60 = v58;
              v61 = *((_DWORD *)v58 + 7);
              if ((int)v39 >= v61)
                break;
              v58 = (uint64_t *)*v60;
              v59 = (uint64_t **)v60;
              if (!*v60)
                goto LABEL_79;
            }
            if (v61 >= (int)v39)
              break;
            v58 = (uint64_t *)v60[1];
            if (!v58)
            {
              v59 = (uint64_t **)(v60 + 1);
              goto LABEL_79;
            }
          }
          v62 = v60;
        }
        else
        {
LABEL_79:
          v62 = operator new(0x28uLL);
          v62[7] = v39;
          v62[8] = 0;
          *(_QWORD *)v62 = 0;
          *((_QWORD *)v62 + 1) = 0;
          *((_QWORD *)v62 + 2) = v60;
          *v59 = (uint64_t *)v62;
          v63 = **(_QWORD **)a4;
          v64 = (uint64_t *)v62;
          if (v63)
          {
            *(_QWORD *)a4 = v63;
            v64 = *v59;
          }
          v65 = *v13;
          v11 = v64 == *v13;
          *((_BYTE *)v64 + 24) = v11;
          if (!v11)
          {
            do
            {
              v66 = v64[2];
              if (*(_BYTE *)(v66 + 24))
                break;
              v67 = *(uint64_t **)(v66 + 16);
              v68 = *v67;
              if (*v67 == v66)
              {
                v71 = v67[1];
                if (!v71 || (v72 = *(unsigned __int8 *)(v71 + 24), v69 = (_BYTE *)(v71 + 24), v72))
                {
                  if (*(uint64_t **)v66 == v64)
                  {
                    *(_BYTE *)(v66 + 24) = 1;
                    *((_BYTE *)v67 + 24) = 0;
                    v75 = *(_QWORD *)(v66 + 8);
                    *v67 = v75;
                    if (v75)
                      goto LABEL_96;
                  }
                  else
                  {
                    v73 = *(uint64_t **)(v66 + 8);
                    v74 = *v73;
                    *(_QWORD *)(v66 + 8) = *v73;
                    if (v74)
                    {
                      *(_QWORD *)(v74 + 16) = v66;
                      v67 = *(uint64_t **)(v66 + 16);
                    }
                    v73[2] = (uint64_t)v67;
                    *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8 * (**(_QWORD **)(v66 + 16) != v66)) = v73;
                    *v73 = v66;
                    *(_QWORD *)(v66 + 16) = v73;
                    v67 = (uint64_t *)v73[2];
                    v66 = *v67;
                    *((_BYTE *)v73 + 24) = 1;
                    *((_BYTE *)v67 + 24) = 0;
                    v75 = *(_QWORD *)(v66 + 8);
                    *v67 = v75;
                    if (v75)
LABEL_96:
                      *(_QWORD *)(v75 + 16) = v67;
                  }
                  *(_QWORD *)(v66 + 16) = v67[2];
                  *(_QWORD *)(v67[2] + 8 * (*(_QWORD *)v67[2] != (_QWORD)v67)) = v66;
                  *(_QWORD *)(v66 + 8) = v67;
LABEL_103:
                  v67[2] = v66;
                  break;
                }
              }
              else if (!v68 || (v70 = *(unsigned __int8 *)(v68 + 24), v69 = (_BYTE *)(v68 + 24), v70))
              {
                if (*(uint64_t **)v66 == v64)
                {
                  v79 = v64[1];
                  *(_QWORD *)v66 = v79;
                  if (v79)
                  {
                    *(_QWORD *)(v79 + 16) = v66;
                    v67 = *(uint64_t **)(v66 + 16);
                  }
                  v64[2] = (uint64_t)v67;
                  *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8 * (**(_QWORD **)(v66 + 16) != v66)) = v64;
                  v64[1] = v66;
                  *(_QWORD *)(v66 + 16) = v64;
                  v67 = (uint64_t *)v64[2];
                  *((_BYTE *)v64 + 24) = 1;
                  *((_BYTE *)v67 + 24) = 0;
                  v66 = v67[1];
                  v76 = *(uint64_t **)v66;
                  v67[1] = *(_QWORD *)v66;
                  if (v76)
LABEL_101:
                    v76[2] = (uint64_t)v67;
                }
                else
                {
                  *(_BYTE *)(v66 + 24) = 1;
                  *((_BYTE *)v67 + 24) = 0;
                  v66 = v67[1];
                  v76 = *(uint64_t **)v66;
                  v67[1] = *(_QWORD *)v66;
                  if (v76)
                    goto LABEL_101;
                }
                *(_QWORD *)(v66 + 16) = v67[2];
                *(_QWORD *)(v67[2] + 8 * (*(_QWORD *)v67[2] != (_QWORD)v67)) = v66;
                *(_QWORD *)v66 = v67;
                goto LABEL_103;
              }
              *(_BYTE *)(v66 + 24) = 1;
              v64 = v67;
              *((_BYTE *)v67 + 24) = v67 == v65;
              *v69 = 1;
            }
            while (v67 != v65);
          }
          ++*(_QWORD *)(a4 + 16);
        }
        v77 = (v36 & 0x1FFF) + v132;
        v62[8] = v77;
        sub_20E7ABE6C(a1, *v37, v77);
        ++v34;
      }
      while (v34 != v130);
      v31 = v128 + 1;
    }
    while (v128 + 1 != v124);
  }
  if ((v121 & 1) == 0)
  {
    v133 = *(_QWORD *)(a1 + 344);
    v80 = sub_20E79B4C8(*(_DWORD *)(a3 + 24));
    v81 = v80;
    v82 = *(unsigned int *)(v123 + 24);
    v150 = 0;
    v151 = 0;
    *(_QWORD *)buf = 0;
    if ((_DWORD)v82)
    {
      v83 = 4 * v82;
      v84 = (char *)operator new(4 * v82);
      v85 = &v84[4 * v82];
      *(_QWORD *)buf = v84;
      v151 = v85;
      memset(v84, 255, 4 * v82);
      v150 = v85;
      v86 = (char *)operator new(4 * v82);
      v87 = &v86[4 * v82];
      v146 = v86;
      v148 = v87;
      memset(v86, 255, v83);
      v147 = v87;
      if (v81)
      {
LABEL_121:
        v88 = 0;
        v30 = 0;
        v129 = "curr_desc_dram_idx < num_descs && \"invalid current index\"";
        v131 = v81;
        while (1)
        {
          v89 = v133 + 32 * v88;
          if (*(_QWORD *)v89 == -1
            && *(_QWORD *)(v89 + 8) == -1
            && *(_QWORD *)(v89 + 16) == -1
            && *(_QWORD *)(v89 + 24) == -1)
          {
LABEL_158:
            v86 = v146;
            if (v146)
              goto LABEL_159;
            goto LABEL_160;
          }
          v90 = *(_DWORD *)(v89 + 20);
          v91 = *v13;
          v92 = (uint64_t **)(a4 + 8);
          v93 = (uint64_t **)(a4 + 8);
          if (*v13)
          {
            while (1)
            {
              while (1)
              {
                v93 = (uint64_t **)v91;
                v94 = *((_DWORD *)v91 + 7);
                if (v94 <= v90)
                  break;
                v91 = *v93;
                v92 = v93;
                if (!*v93)
                  goto LABEL_135;
              }
              if (v94 >= v90)
                break;
              v91 = v93[1];
              if (!v91)
              {
                v92 = v93 + 1;
                goto LABEL_135;
              }
            }
            v95 = v93;
            v98 = a5[1];
            if (!v98)
            {
LABEL_122:
              ++v30;
              goto LABEL_123;
            }
          }
          else
          {
LABEL_135:
            v95 = operator new(0x28uLL);
            v95[7] = v90;
            v95[8] = 0;
            *(_QWORD *)v95 = 0;
            *((_QWORD *)v95 + 1) = 0;
            *((_QWORD *)v95 + 2) = v93;
            *v92 = (uint64_t *)v95;
            v96 = **(_QWORD **)a4;
            v97 = (uint64_t *)v95;
            if (v96)
            {
              *(_QWORD *)a4 = v96;
              v97 = *v92;
            }
            sub_20E793910(*(uint64_t **)(a4 + 8), v97);
            ++*(_QWORD *)(a4 + 16);
            v98 = a5[1];
            if (!v98)
              goto LABEL_122;
          }
          v99 = v95[8];
          v100 = v98;
          while (1)
          {
            v101 = *((_DWORD *)v100 + 7);
            if (v101 <= v90)
              break;
LABEL_141:
            v100 = (uint64_t *)*v100;
            if (!v100)
              goto LABEL_122;
          }
          if (v101 < v90)
            break;
          do
          {
            while (1)
            {
              v102 = v98;
              v103 = *((_DWORD *)v98 + 7);
              if (v103 > v90)
                break;
              if (v103 >= v90)
              {
                v105 = v102;
                if (v99 < v122)
                  goto LABEL_156;
LABEL_189:
                v118 = 181;
LABEL_191:
                sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCollUtils.cpp", v118, v129, (void (*)(void *))sub_20E803DA4);
                abort();
              }
              v98 = (uint64_t *)v102[1];
              if (!v98)
              {
                v104 = (uint64_t **)(v102 + 1);
                goto LABEL_151;
              }
            }
            v98 = (uint64_t *)*v102;
          }
          while (*v102);
          v104 = (uint64_t **)v102;
LABEL_151:
          v105 = operator new(0x28uLL);
          v105[7] = v90;
          v105[8] = 0;
          *(_QWORD *)v105 = 0;
          *((_QWORD *)v105 + 1) = 0;
          *((_QWORD *)v105 + 2) = v102;
          *v104 = (uint64_t *)v105;
          v106 = (uint64_t *)**a5;
          v107 = (uint64_t *)v105;
          if (v106)
          {
            *a5 = v106;
            v107 = *v104;
          }
          sub_20E793910(a5[1], v107);
          a5[2] = (uint64_t *)((char *)a5[2] + 1);
          if (v99 >= v122)
            goto LABEL_189;
LABEL_156:
          v108 = v105[8];
          if (v108 >= *(_DWORD *)(v123 + 24))
          {
            v118 = 183;
            v129 = "prev_desc_dram_idx < config.maxNumberOfKeypoints && \"invalid prev index\"";
            goto LABEL_191;
          }
          sub_20E79913C((uint64_t *)buf, (uint64_t *)&v146, v99, v105[8], *(_DWORD *)(v89 + 20));
          sub_20E7ABE2C(a1, v99, v108);
LABEL_123:
          if (++v88 == v131)
            goto LABEL_158;
        }
        ++v100;
        goto LABEL_141;
      }
    }
    else
    {
      v86 = 0;
      v146 = 0;
      v147 = 0;
      v148 = 0;
      if (v80)
        goto LABEL_121;
    }
    v30 = 0;
    if (v86)
    {
LABEL_159:
      v147 = v86;
      operator delete(v86);
    }
LABEL_160:
    if (*(_QWORD *)buf)
    {
      v150 = *(char **)buf;
      operator delete(*(void **)buf);
    }
    goto LABEL_162;
  }
  v30 = 0;
LABEL_162:
  a2 = v120;
  a3 = v123;
  sub_20E7910FC(a1, v14);
  sub_20E7911BC(a1, &__p);
  v109 = *a5;
  *a5 = *(uint64_t **)a4;
  *(_QWORD *)a4 = v109;
  v110 = a5[1];
  v111 = a5[2];
  *(_OWORD *)(a5 + 1) = *(_OWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v110;
  *(_QWORD *)(a4 + 16) = v111;
  if (a5[2])
    v112 = (uint64_t **)(a5[1] + 2);
  else
    v112 = a5;
  *v112 = (uint64_t *)(a5 + 1);
  v113 = (_QWORD *)(*(_QWORD *)(a4 + 8) + 16);
  if (!v111)
    v113 = (_QWORD *)a4;
  *v113 = v13;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v120 + 136))(v120, v119);
  if (*(_DWORD *)(a1 + 372) != *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4))
  {
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCollUtils.cpp", 203, "hw_data_handler.GetNumTids() == hw_data_handler.GetNumKeypoints() && \"Number of TIDs should match the number of KPs\"", (void (*)(void *))sub_20E803DA4);
    abort();
  }
  if (v30 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v30;
    _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "[AppleCVHWA] skipped %u matches potentially due to frame drop - matches correspond to new untracked features in dropped frame", buf, 8u);
  }
  sub_20E7938D0((uint64_t)&v135, v136);
  if (__p)
  {
    v144 = (__int8 *)__p;
    operator delete(__p);
  }
LABEL_173:
  if (*(_BYTE *)(a3 + 76))
  {
    if (*(_BYTE *)(a3 + 90))
    {
      v114 = *(unsigned __int16 *)(a3 + 50);
      v115 = (_QWORD *)*(unsigned __int16 *)(a3 + 20);
      v135 = v115;
      v136 = v115;
      v137 = v115;
      v138 = v115;
      v139 = v115;
      v140 = v115;
      v141 = v115;
      v142 = v115;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 96))(&__p, a2);
      sub_20E7E7700((uint64_t)&__p, *(_QWORD *)(a1 + 296) + 240, 2 * v114, v115, (uint64_t)&v135, *(float *)(a3 + 80));
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)a2 + 112))(a2, &v135);
    }
  }
  return kdebug_trace();
}

void sub_20E7908DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  void *v35;

  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }
  sub_20E7938D0((uint64_t)&a24, a25);
  if (!__p)
    _Unwind_Resume(a1);
  a33 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20E79097C(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64x2_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  int64x2_t v18;
  uint64_t v19;
  void *__p;
  _BYTE *v21;
  uint64_t v22;

  v2 = *(_DWORD *)(a1 + 176);
  v3 = *(_DWORD *)(a1 + 152);
  if (v2 >= v3 && a2[6] != 0)
    sub_20E807948(a1, (uint64_t)a2);
  if (v3 != *(_DWORD *)(a1 + 180) + v2)
    sub_20E807920(a1, (uint64_t)a2);
  __p = 0;
  v21 = 0;
  v22 = 0;
  v7 = *(_DWORD *)(a1 + 184);
  v8 = *(_DWORD *)(a1 + 160);
  v9 = (v8 + v7);
  if (v8 + v7)
  {
    sub_20E791B74((uint64_t)&__p, v9);
    v10 = v21;
    if (__p != v21)
    {
      v11 = v21 - (_BYTE *)__p - 8;
      if (v11 < 0x18)
      {
        v12 = 0;
        v13 = __p;
        do
LABEL_14:
          *v13++ = v12++;
        while (v13 != v10);
        goto LABEL_15;
      }
      v14 = (v11 >> 3) + 1;
      v12 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      v13 = (char *)__p + 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
      v15 = (int64x2_t)xmmword_20E80DF80;
      v16 = (int64x2_t *)((char *)__p + 16);
      v17 = vdupq_n_s64(2uLL);
      v18 = vdupq_n_s64(4uLL);
      v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v16[-1] = v15;
        *v16 = vaddq_s64(v15, v17);
        v15 = vaddq_s64(v15, v18);
        v16 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v14 != v12)
        goto LABEL_14;
    }
  }
LABEL_15:
  sub_20E7910FC(a1, v9);
  if (*((_BYTE *)a2 + 77))
    sub_20E7914A4(*(_QWORD *)(a1 + 288), *(unsigned int *)(a1 + 284), *(_QWORD *)(a1 + 168), *(unsigned int *)(a1 + 160), *((unsigned __int16 *)a2 + 16), *((unsigned __int16 *)a2 + 17), *((unsigned __int16 *)a2 + 18), a2[6], *a2, a2[1], (char **)&__p);
  sub_20E7911BC(a1, &__p);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20E790ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E790AFC(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64x2_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  int64x2_t v18;
  uint64_t v19;
  void *__p;
  _BYTE *v21;
  uint64_t v22;

  v2 = *(_DWORD *)(a1 + 176);
  v3 = *(_DWORD *)(a1 + 152);
  if (v2 >= v3 && a2[6] != 0)
    sub_20E807948(a1, (uint64_t)a2);
  if (v3 != *(_DWORD *)(a1 + 180) + v2)
    sub_20E807920(a1, (uint64_t)a2);
  __p = 0;
  v21 = 0;
  v22 = 0;
  v7 = *(_DWORD *)(a1 + 184);
  v8 = *(_DWORD *)(a1 + 160);
  v9 = (v8 + v7);
  if (v8 + v7)
  {
    sub_20E791B74((uint64_t)&__p, v9);
    v10 = v21;
    if (__p != v21)
    {
      v11 = v21 - (_BYTE *)__p - 8;
      if (v11 < 0x18)
      {
        v12 = 0;
        v13 = __p;
        do
LABEL_14:
          *v13++ = v12++;
        while (v13 != v10);
        goto LABEL_15;
      }
      v14 = (v11 >> 3) + 1;
      v12 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      v13 = (char *)__p + 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
      v15 = (int64x2_t)xmmword_20E80DF80;
      v16 = (int64x2_t *)((char *)__p + 16);
      v17 = vdupq_n_s64(2uLL);
      v18 = vdupq_n_s64(4uLL);
      v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v16[-1] = v15;
        *v16 = vaddq_s64(v15, v17);
        v15 = vaddq_s64(v15, v18);
        v16 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v14 != v12)
        goto LABEL_14;
    }
  }
LABEL_15:
  sub_20E79244C(a1, v9);
  if (*((_BYTE *)a2 + 77))
    sub_20E79251C(*(_QWORD *)(a1 + 288), *(unsigned int *)(a1 + 284), *(_QWORD *)(a1 + 168), *(unsigned int *)(a1 + 160), *((unsigned __int16 *)a2 + 16), *((unsigned __int16 *)a2 + 17), *((unsigned __int16 *)a2 + 18), a2[6], *a2, a2[1], (char **)&__p);
  sub_20E792BEC(a1, (unint64_t **)&__p);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20E790C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E790C7C(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64x2_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  int64x2_t v18;
  uint64_t v19;
  void *__p;
  _BYTE *v21;
  uint64_t v22;

  v2 = *(_DWORD *)(a1 + 176);
  v3 = *(_DWORD *)(a1 + 152);
  if (v2 >= v3 && a2[6] != 0)
    sub_20E807948(a1, (uint64_t)a2);
  if (v3 != *(_DWORD *)(a1 + 180) + v2)
    sub_20E807920(a1, (uint64_t)a2);
  __p = 0;
  v21 = 0;
  v22 = 0;
  v7 = *(_DWORD *)(a1 + 184);
  v8 = *(_DWORD *)(a1 + 160);
  v9 = (v8 + v7);
  if (v8 + v7)
  {
    sub_20E791B74((uint64_t)&__p, v9);
    v10 = v21;
    if (__p != v21)
    {
      v11 = v21 - (_BYTE *)__p - 8;
      if (v11 < 0x18)
      {
        v12 = 0;
        v13 = __p;
        do
LABEL_14:
          *v13++ = v12++;
        while (v13 != v10);
        goto LABEL_15;
      }
      v14 = (v11 >> 3) + 1;
      v12 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      v13 = (char *)__p + 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
      v15 = (int64x2_t)xmmword_20E80DF80;
      v16 = (int64x2_t *)((char *)__p + 16);
      v17 = vdupq_n_s64(2uLL);
      v18 = vdupq_n_s64(4uLL);
      v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v16[-1] = v15;
        *v16 = vaddq_s64(v15, v17);
        v15 = vaddq_s64(v15, v18);
        v16 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v14 != v12)
        goto LABEL_14;
    }
  }
LABEL_15:
  sub_20E792E8C(a1, v9);
  if (*((_BYTE *)a2 + 77))
    sub_20E792F60(*(_QWORD *)(a1 + 288), *(unsigned int *)(a1 + 284), *(_QWORD *)(a1 + 168), *(unsigned int *)(a1 + 160), *((unsigned __int16 *)a2 + 16), *((unsigned __int16 *)a2 + 17), *((unsigned __int16 *)a2 + 18), a2[6], *a2, a2[1], (char **)&__p);
  sub_20E793630(a1, (unint64_t **)&__p);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20E790DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E790DFC(_DWORD *a1)
{
  if ((~*a1 & 0xFFFC0000) == 0)
    return 0;
  if ((~a1[2] & 0xFFFC0000) == 0)
    return 1;
  if ((~a1[4] & 0xFFFC0000) == 0)
    return 2;
  if ((~a1[6] & 0xFFFC0000) == 0)
    return 3;
  if ((~a1[8] & 0xFFFC0000) == 0)
    return 4;
  if ((~a1[10] & 0xFFFC0000) == 0)
    return 5;
  if ((~a1[12] & 0xFFFC0000) == 0)
    return 6;
  if ((~a1[14] & 0xFFFC0000) == 0)
    return 7;
  if ((~a1[16] & 0xFFFC0000) == 0)
    return 8;
  if ((~a1[18] & 0xFFFC0000) == 0)
    return 9;
  if ((~a1[20] & 0xFFFC0000) == 0)
    return 10;
  if ((~a1[22] & 0xFFFC0000) == 0)
    return 11;
  if ((~a1[24] & 0xFFFC0000) == 0)
    return 12;
  if ((~a1[26] & 0xFFFC0000) == 0)
    return 13;
  if ((~a1[28] & 0xFFFC0000) == 0)
    return 14;
  if ((~a1[30] & 0xFFFC0000) == 0)
    return 15;
  if ((~a1[32] & 0xFFFC0000) == 0)
    return 16;
  if ((~a1[34] & 0xFFFC0000) == 0)
    return 17;
  if ((~a1[36] & 0xFFFC0000) == 0)
    return 18;
  if ((~a1[38] & 0xFFFC0000) == 0)
    return 19;
  if ((~a1[40] & 0xFFFC0000) == 0)
    return 20;
  if ((~a1[42] & 0xFFFC0000) == 0)
    return 21;
  if ((~a1[44] & 0xFFFC0000) == 0)
    return 22;
  if ((~a1[46] & 0xFFFC0000) == 0)
    return 23;
  if ((~a1[48] & 0xFFFC0000) == 0)
    return 24;
  if ((~a1[50] & 0xFFFC0000) == 0)
    return 25;
  if ((~a1[52] & 0xFFFC0000) == 0)
    return 26;
  if ((~a1[54] & 0xFFFC0000) == 0)
    return 27;
  if ((~a1[56] & 0xFFFC0000) == 0)
    return 28;
  if ((~a1[58] & 0xFFFC0000) == 0)
    return 29;
  if ((~a1[60] & 0xFFFC0000) == 0)
    return 30;
  if ((~a1[62] & 0xFFFC0000) != 0)
    return 32;
  return 31;
}

void *sub_20E7910FC(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v4;
  const void *v5;
  unsigned int v6;
  unsigned int v7;

  if (*(_BYTE *)(a1 + 20) != 2)
    sub_20E807998(a1, a2);
  if (!*(_BYTE *)(a1 + 385) && !*(_BYTE *)(a1 + 386))
    sub_20E807970(a1, a2);
  result = (void *)sub_20E7A97E4(a1);
  v4 = *(_QWORD *)(a1 + 192);
  if ((_DWORD)result)
  {
    *(_QWORD *)(a1 + 288) = v4;
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 176) = 0;
  }
  else
  {
    v5 = *(const void **)(a1 + 168);
    v6 = *(_DWORD *)(a1 + 184);
    v7 = *(_DWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 288) = v4;
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 284) = v7 + v6;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    if (v7)
      return memcpy((void *)(v4 + 76 * v6), v5, 76 * v7);
  }
  return result;
}

void sub_20E7911BC(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  float32x2_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 *v20;
  BOOL v21;
  __int128 *v22;
  __int128 *v23;
  unint64_t v24;
  int8x16_t v25;
  float v26;
  __int16 v27;
  uint64_t v28;
  float v29;
  unint64_t __n;
  void *v31;
  unint64_t v32;
  char *__src;
  uint64_t v34;

  if (*(_BYTE *)(a1 + 20) != 2)
    sub_20E8079E8(a1, (uint64_t)a2);
  v4 = (*(_DWORD *)(a1 + 160) + *(_DWORD *)(a1 + 284));
  v5 = a2[1];
  v6 = v5 - *a2;
  v7 = v6 >> 3;
  if (v6 >> 3 > v4)
    sub_20E8079C0(a1, (uint64_t)a2);
  v34 = *(_QWORD *)(a1 + 288);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_OWORD **)(a1 + 144);
  if (v5 == *a2)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4) = (unint64_t)v6 >> 3;
  }
  else
  {
    if ((unint64_t)v6 >= 0x5555555555555551)
      sub_20E78D874();
    v31 = *(void **)(a1 + 128);
    v32 = v5 - *a2;
    v10 = (char *)operator new(24 * v7);
    v11 = (v4 - 1);
    __n = 24 * ((24 * v7 - 24) / 0x18) + 24;
    bzero(v10, __n);
    v12 = 0;
    if (v7 <= 1)
      v7 = 1;
    __src = v10;
    v13 = (float *)(v10 + 12);
    v14 = (float32x2_t)vdup_n_s32(0x3C800000u);
    do
    {
      v18 = *(_QWORD *)(*a2 + 8 * v12);
      if (v18 > v11)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", 389, "idx[i] <= max_valid_idx", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v19 = *(unsigned int *)(a1 + 284);
      v20 = (__int128 *)(v34 + 76 * v18);
      v21 = v18 >= v19;
      v22 = (__int128 *)(v8 + 76 * (v18 - v19));
      if (v21)
        v23 = v22;
      else
        v23 = v20;
      v24 = *((_QWORD *)v23 + 8);
      v25.i64[0] = v24;
      v25.i64[1] = HIDWORD(v24);
      *(float32x2_t *)(v13 - 3) = vmul_f32(vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8(v25, (int8x16_t)xmmword_20E80E200))), v14);
      v26 = pow(1.41421356, (float)((float)(v24 >> 23) * 0.0625));
      *v13 = v26;
      v27 = *((_DWORD *)v23 + 18);
      v28 = *((_QWORD *)v23 + 8);
      *((_BYTE *)v13 + 4) = v28 < 0;
      v29 = (double)((unint64_t)v28 >> 52) * 3.14159265 * 0.0078125;
      *(v13 - 1) = v29;
      v13[2] = (float)(v27 & 0x7FFF);
      if (*(_BYTE *)(a1 + 388))
      {
        sub_20E7ABEA8((unsigned __int8 *)v23, (uint64_t)v9);
      }
      else
      {
        v15 = *v23;
        v16 = v23[1];
        v17 = v23[3];
        v9[2] = v23[2];
        v9[3] = v17;
        *v9 = v15;
        v9[1] = v16;
      }
      ++v12;
      v9 += 4;
      v13 += 6;
    }
    while (v7 != v12);
    memcpy(v31, __src, __n);
    *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4) = v32 >> 3;
    operator delete(__src);
  }
}

void sub_20E791478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E7914A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unint64_t a9, unint64_t a10, char **a11)
{
  unint64_t v11;
  char **v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  float v23;
  uint64_t *v24;
  float v25;
  uint64_t *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  uint64_t i;
  char *v52;
  float *v53;
  float *v54;
  unint64_t v55;
  unint64_t v56;
  float *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  char *v81;
  char *v82;
  void *v83;
  char *v84;
  void *v85;
  void *v86;
  unint64_t v89;
  uint64_t v90;
  unint64_t v92;
  uint64_t v93;
  void *__p;
  char *v95;

  if (a5 != 1 || a6 != 1)
    sub_20E807A60(a1, a2);
  if (a7 <= 0)
    sub_20E807A38(a1, a2);
  v11 = a2;
  v12 = a11;
  v13 = a4 + a2;
  if (a4 + a2 != (v12[1] - *v12) >> 3)
    sub_20E807A10(a1, a2);
  v93 = a7;
  sub_20E791D10(&__p, a7);
  if (v13)
  {
    v15 = v13;
    v16 = 0;
    v89 = v11;
    v90 = a3;
    do
    {
      while (1)
      {
        v17 = *(_QWORD *)&(*v12)[8 * v16];
        v18 = a1;
        if (v17 < v11)
        {
          v19 = 0;
        }
        else
        {
          v18 = a3;
          v19 = v11;
        }
        v20 = v18 + 76 * (v17 - v19);
        v21 = *(_QWORD *)(v20 + 64);
        if (vcvtms_s32_f32((float)((float)(HIDWORD(v21) & 0x7FFFF) / (float)a10) * 0.015625)
           + vcvtms_s32_f32((float)((float)(v21 & 0x3FFFF) / (float)a9) * 0.015625))
        {
          sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", 97, "bin_index == 0 && \"bin index should always be 0\"", (void (*)(void *))sub_20E803DA4);
          abort();
        }
        v22 = *(_DWORD *)(v20 + 72);
        v23 = (float)((float)(v21 >> 23) * 0.0625) * 0.25;
        if (v23 > (float)(a7 - 1))
          v23 = (float)(a7 - 1);
        v24 = (uint64_t *)((char *)__p + 24 * (int)vcvtms_s32_f32(v23));
        v25 = (float)(v22 & 0x7FFF);
        v26 = v24 + 1;
        v27 = (char *)v24[1];
        v28 = v24[2];
        if ((unint64_t)v27 >= v28)
          break;
        *(float *)v27 = v25;
        *((_DWORD *)v27 + 1) = v17;
        v12 = a11;
        *v26 = (uint64_t)(v27 + 8);
        if (++v16 == v15)
          goto LABEL_37;
      }
      v29 = (char *)*v24;
      v30 = (uint64_t)&v27[-*v24];
      v31 = v30 >> 3;
      v32 = (v30 >> 3) + 1;
      if (v32 >> 61)
        sub_20E78D874();
      v33 = v28 - (_QWORD)v29;
      if (v33 >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        if (v34 >> 61)
          sub_20E78D888();
        v35 = operator new(8 * v34);
        v36 = (uint64_t)&v35[8 * v31];
        *(float *)v36 = v25;
        *(_DWORD *)(v36 + 4) = v17;
        if (v27 != v29)
        {
LABEL_24:
          v37 = v27 - 8 - v29;
          if (v37 < 0x58)
          {
            v38 = v36;
            goto LABEL_32;
          }
          v38 = v36;
          if ((unint64_t)(v27 - &v35[v30]) < 0x20)
            goto LABEL_98;
          v39 = (v37 >> 3) + 1;
          v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v27[-v40];
          v38 = v36 - v40;
          v42 = &v35[8 * v31 - 16];
          v43 = v27 - 16;
          v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *v42 = v45;
            v42 -= 2;
            v43 -= 32;
            v44 -= 4;
          }
          while (v44);
          v27 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_98:
            do
            {
LABEL_32:
              v46 = *((_QWORD *)v27 - 1);
              v27 -= 8;
              *(_QWORD *)(v38 - 8) = v46;
              v38 -= 8;
            }
            while (v27 != v29);
          }
          v27 = (char *)*v24;
          goto LABEL_34;
        }
      }
      else
      {
        v35 = 0;
        v36 = 8 * v31;
        *(float *)v36 = v25;
        *(_DWORD *)(v36 + 4) = v17;
        if (v27 != v29)
          goto LABEL_24;
      }
      v38 = v36;
LABEL_34:
      *v24 = v38;
      v47 = v36 + 8;
      *v26 = v36 + 8;
      v24[2] = (uint64_t)&v35[8 * v34];
      v11 = v89;
      a3 = v90;
      if (v27)
        operator delete(v27);
      v15 = v13;
      v12 = a11;
      *v26 = v47;
      ++v16;
    }
    while (v16 != v13);
  }
LABEL_37:
  v48 = *v12;
  v12[1] = *v12;
  v92 = a8 / a7;
  v49 = v92 * v93;
  if (v92 * v93 > (v12[2] - v48) >> 3)
  {
    if (v49 >> 61)
      sub_20E78D874();
    v50 = (char *)operator new(8 * v49);
    *v12 = v50;
    v12[1] = v50;
    v12[2] = &v50[8 * v49];
    if (v48)
      operator delete(v48);
  }
  for (i = 0; i != v93; ++i)
  {
    v52 = (char *)__p + 24 * i;
    v53 = *(float **)v52;
    v54 = (float *)*((_QWORD *)v52 + 1);
    v55 = ((uint64_t)v54 - *(_QWORD *)v52) >> 3;
    if (v55 >= v92)
      v56 = a8 / a7;
    else
      v56 = v55;
    v57 = &v53[2 * v56];
    if (v57 != v54)
      sub_20E791F74(v53, v57, v54);
    if (v56)
    {
      v58 = 0;
      v59 = v12[1];
      while (1)
      {
        while (1)
        {
          v60 = *(int *)(*((_QWORD *)__p + 3 * i) + 8 * v58 + 4);
          v61 = (unint64_t)v12[2];
          if ((unint64_t)v59 >= v61)
            break;
          *(_QWORD *)v59 = v60;
          v59 += 8;
          v12[1] = v59;
          if (++v58 == v56)
            goto LABEL_42;
        }
        v62 = v56;
        v63 = *v12;
        v64 = v59 - *v12;
        v65 = v64 >> 3;
        v66 = (v64 >> 3) + 1;
        if (v66 >> 61)
          sub_20E78D874();
        v67 = v61 - (_QWORD)v63;
        if (v67 >> 2 > v66)
          v66 = v67 >> 2;
        v68 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v66;
        if (v68)
        {
          if (v68 >> 61)
            sub_20E78D888();
          v69 = operator new(8 * v68);
          v70 = &v69[8 * v65];
          *(_QWORD *)v70 = v60;
          v71 = (uint64_t)(v70 + 8);
          if (v59 == v63)
          {
LABEL_69:
            v56 = v62;
            v12 = a11;
            *a11 = v70;
            a11[1] = (char *)v71;
            a11[2] = &v69[8 * v68];
            if (!v63)
              goto LABEL_66;
LABEL_65:
            operator delete(v63);
            goto LABEL_66;
          }
        }
        else
        {
          v69 = 0;
          v70 = (char *)(8 * v65);
          *(_QWORD *)(8 * v65) = v60;
          v71 = 8 * v65 + 8;
          if (v59 == v63)
            goto LABEL_69;
        }
        v72 = v59 - 8 - v63;
        if (v72 < 0x168
          || &v69[v64 - 8 - (v72 & 0xFFFFFFFFFFFFFFF8)] > &v69[v64 - 8]
          || &v59[-(v72 & 0xFFFFFFFFFFFFFFF8) - 8] > v59 - 8
          || (unint64_t)(v59 - &v69[v64]) < 0x20)
        {
          break;
        }
        v75 = (v72 >> 3) + 1;
        v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
        v73 = &v59[-v76];
        v70 -= v76;
        v77 = &v69[8 * v65 - 16];
        v78 = v59 - 16;
        v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
        v56 = v62;
        do
        {
          v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 4;
        }
        while (v79);
        v12 = a11;
        if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_63;
LABEL_64:
        *v12 = v70;
        v12[1] = (char *)v71;
        v12[2] = &v69[8 * v68];
        if (v63)
          goto LABEL_65;
LABEL_66:
        v12[1] = (char *)v71;
        ++v58;
        v59 = (char *)v71;
        if (v58 == v56)
          goto LABEL_42;
      }
      v73 = v59;
      v56 = v62;
      v12 = a11;
      do
      {
LABEL_63:
        v74 = *((_QWORD *)v73 - 1);
        v73 -= 8;
        *((_QWORD *)v70 - 1) = v74;
        v70 -= 8;
      }
      while (v73 != v63);
      goto LABEL_64;
    }
LABEL_42:
    ;
  }
  sub_20E791DD8((uint64_t)v12);
  v81 = (char *)__p;
  if (__p)
  {
    v82 = v95;
    v83 = __p;
    if (v95 != __p)
    {
      v84 = v95;
      do
      {
        v86 = (void *)*((_QWORD *)v84 - 3);
        v84 -= 24;
        v85 = v86;
        if (v86)
        {
          *((_QWORD *)v82 - 2) = v85;
          operator delete(v85);
        }
        v82 = v84;
      }
      while (v84 != v81);
      v83 = __p;
    }
    v95 = v81;
    operator delete(v83);
  }
}

void sub_20E791AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E791AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E791B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E791B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E791B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E791B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E791B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E791B74(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_20E78D874();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E78D888();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

_QWORD *sub_20E791D10(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E78D874();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20E791DB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_20E807A88((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20E791DD8(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v1 = *(_BYTE **)(a1 + 8);
  v2 = *(_BYTE **)a1;
  v3 = (uint64_t)&v1[-*(_QWORD *)a1];
  v4 = v3 >> 3;
  if (v3 >> 3 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3))
  {
    v6 = v1 - v2;
    if (v1 == v2)
    {
      v8 = 8 * v4;
      v9 = 8 * v4;
    }
    else
    {
      if (v3 < 0)
        sub_20E78D888();
      v7 = (char *)operator new((size_t)&v1[-*(_QWORD *)a1]);
      v8 = (uint64_t)&v7[8 * v4];
      if ((unint64_t)(v6 - 8) >= 0x58)
      {
        v9 = (uint64_t)&v7[8 * v4];
        if ((unint64_t)(&v1[-v3] - v7) >= 0x20)
        {
          v10 = ((unint64_t)(v6 - 8) >> 3) + 1;
          v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
          v12 = &v1[-v11];
          v9 = v8 - v11;
          v13 = &v7[8 * v4 - 16];
          v14 = (__int128 *)(v1 - 16);
          v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v16 = *v14;
            *((_OWORD *)v13 - 1) = *(v14 - 1);
            *(_OWORD *)v13 = v16;
            v13 -= 32;
            v14 -= 2;
            v15 -= 4;
          }
          while (v15);
          v1 = v12;
          if (v10 == (v10 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_12;
        }
      }
      else
      {
        v9 = (uint64_t)&v7[8 * v4];
      }
      do
      {
        v17 = *((_QWORD *)v1 - 1);
        v1 -= 8;
        *(_QWORD *)(v9 - 8) = v17;
        v9 -= 8;
      }
      while (v1 != v2);
    }
LABEL_12:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    if (v2)
      operator delete(v2);
  }
}

void **sub_20E791F00(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

float *sub_20E791F74(float *result, float *a2, float *a3)
{
  unint64_t v3;
  unint64_t v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  int v10;
  int v11;
  float v12;
  float v13;
  float *v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  int v23;
  float *v24;
  float *v25;
  int v26;
  float v27;
  int v28;
  int v29;
  float *v30;
  int v31;
  float v32;
  int v33;
  float v34;
  float v35;
  float *v36;
  float v37;
  float *v38;
  float v39;
  float v40;
  int v41;
  int v42;
  float v43;
  float v44;
  float v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int v51;
  float v52;
  float v53;
  float v54;
  int v55;
  float *v56;
  float v57;
  float v58;
  float *v59;
  float *v60;
  float *v61;
  float v62;
  float v63;
  int v64;
  int v65;
  float v66;
  float v67;
  int v68;
  int v69;
  float v70;

  while (a3 != a2)
  {
    v3 = ((char *)a3 - (char *)result) >> 3;
    if (v3 < 2)
      break;
    if (v3 == 3)
    {
      v52 = result[2];
      v53 = *result;
      v54 = *(a3 - 2);
      if (v52 <= *result)
      {
        if (v54 > v52)
        {
          result[2] = v54;
          *(a3 - 2) = v52;
          v65 = *((_DWORD *)result + 3);
          result[3] = *(a3 - 1);
          *((_DWORD *)a3 - 1) = v65;
          v66 = result[2];
          v67 = *result;
          if (v66 > *result)
          {
            *result = v66;
            result[2] = v67;
            v68 = *((_DWORD *)result + 1);
            result[1] = result[3];
            *((_DWORD *)result + 3) = v68;
          }
        }
      }
      else if (v54 <= v52)
      {
        *result = v52;
        result[2] = v53;
        v69 = *((_DWORD *)result + 1);
        result[1] = result[3];
        *((_DWORD *)result + 3) = v69;
        v70 = *(a3 - 2);
        if (v70 > v53)
        {
          result[2] = v70;
          *(a3 - 2) = v53;
          result[3] = *(a3 - 1);
          *((_DWORD *)a3 - 1) = v69;
        }
      }
      else
      {
        *result = v54;
        *(a3 - 2) = v53;
        v55 = *((_DWORD *)result + 1);
        result[1] = *(a3 - 1);
        *((_DWORD *)a3 - 1) = v55;
      }
      return result;
    }
    if (v3 == 2)
    {
      v49 = *(a3 - 2);
      v50 = *result;
      if (v49 > *result)
      {
        *result = v49;
        *(a3 - 2) = v50;
        v51 = *((_DWORD *)result + 1);
        result[1] = *(a3 - 1);
        *((_DWORD *)a3 - 1) = v51;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      while (result != a3 - 2)
      {
        v56 = result;
        result += 2;
        if (v56 != a3 && result != a3)
        {
          v57 = *v56;
          v58 = *v56;
          v59 = result;
          v60 = v56;
          v61 = result;
          do
          {
            v62 = *v61;
            v61 += 2;
            v63 = v62;
            if (v62 > v58)
            {
              v58 = v63;
              v60 = v59;
            }
            v59 = v61;
          }
          while (v61 != a3);
          if (v60 != v56)
          {
            *v56 = *v60;
            *v60 = v57;
            v64 = *((_DWORD *)v56 + 1);
            v56[1] = v60[1];
            *((_DWORD *)v60 + 1) = v64;
          }
        }
      }
      return result;
    }
    v4 = v3 >> 1;
    v5 = &result[2 * (v3 >> 1)];
    v6 = a3 - 2;
    v7 = *(a3 - 2);
    v8 = *v5;
    v9 = *result;
    if (*v5 <= *result)
    {
      if (v7 <= v8)
      {
        v11 = 0;
        v12 = *result;
        v13 = *v5;
        if (*result <= *v5)
          goto LABEL_27;
        goto LABEL_9;
      }
      *v5 = v7;
      *(a3 - 2) = v8;
      v24 = &result[2 * v4];
      v26 = *((_DWORD *)v24 + 1);
      v25 = v24 + 1;
      *v25 = *(a3 - 1);
      *((_DWORD *)a3 - 1) = v26;
      v27 = *result;
      if (*v5 > *result)
      {
        *result = *v5;
        *v5 = v27;
        v28 = *((_DWORD *)result + 1);
        result[1] = *v25;
        *(_DWORD *)v25 = v28;
        v11 = 2;
        v12 = *result;
        v13 = *v5;
        if (*result <= *v5)
          goto LABEL_27;
        goto LABEL_9;
      }
LABEL_49:
      v11 = 1;
      v12 = *result;
      v13 = *v5;
      if (*result <= *v5)
        goto LABEL_27;
LABEL_9:
      v14 = a3 - 2;
      v15 = result + 2;
      if (result + 2 >= a3 - 2)
      {
LABEL_31:
        v20 = v15;
      }
      else
      {
LABEL_10:
        v16 = v15;
        while (1)
        {
          v17 = *v5;
          do
          {
            v18 = *v16;
            v16 += 2;
            v19 = v18;
          }
          while (v18 > v17);
          v20 = v16 - 2;
          do
          {
            v21 = *(v14 - 2);
            v14 -= 2;
            v22 = v21;
          }
          while (v21 <= v17);
          if (v20 >= v14)
            break;
          *(v16 - 2) = v22;
          *v14 = v19;
          v23 = *((_DWORD *)v16 - 1);
          *(v16 - 1) = v14[1];
          *((_DWORD *)v14 + 1) = v23;
          ++v11;
          if (v20 == v5)
            v5 = v14;
        }
      }
      if (v20 != v5)
      {
        v32 = *v20;
        if (*v5 > *v20)
        {
          *v20 = *v5;
          *v5 = v32;
          v33 = *((_DWORD *)v20 + 1);
          v20[1] = v5[1];
          *((_DWORD *)v5 + 1) = v33;
          ++v11;
        }
      }
      if (v20 == a2)
        return result;
      if (!v11)
      {
        if (v20 <= a2)
        {
          v38 = v20 + 2;
          while (v38 != a3)
          {
            v39 = *v38;
            v40 = *(v38 - 2);
            v38 += 2;
            if (v39 > v40)
              goto LABEL_37;
          }
        }
        else
        {
          while (v15 != v20)
          {
            v34 = *v15;
            v35 = *(v15 - 2);
            v15 += 2;
            if (v34 > v35)
              goto LABEL_37;
          }
        }
        return result;
      }
LABEL_37:
      if (v20 <= a2)
        result = v20 + 2;
      else
        a3 = v20;
    }
    else
    {
      if (v7 <= v8)
      {
        *result = v8;
        *v5 = v9;
        v29 = *((_DWORD *)result + 1);
        v30 = &result[2 * v4 + 1];
        result[1] = *v30;
        *(_DWORD *)v30 = v29;
        if (*v6 > v9)
        {
          *v5 = *v6;
          *(a3 - 2) = v9;
          *v30 = *(a3 - 1);
          *((_DWORD *)a3 - 1) = v29;
          v11 = 2;
          v12 = *result;
          v13 = *v5;
          if (*result <= *v5)
            goto LABEL_27;
          goto LABEL_9;
        }
        goto LABEL_49;
      }
      *result = v7;
      *(a3 - 2) = v9;
      v10 = *((_DWORD *)result + 1);
      result[1] = *(a3 - 1);
      *((_DWORD *)a3 - 1) = v10;
      v11 = 1;
      v12 = *result;
      v13 = *v5;
      if (*result > *v5)
        goto LABEL_9;
LABEL_27:
      v14 = a3 - 2;
      while (1)
      {
        v14 -= 2;
        if (v14 == result)
          break;
        if (*v14 > v13)
        {
          *result = *v14;
          *v14 = v12;
          v31 = *((_DWORD *)result + 1);
          result[1] = v14[1];
          *((_DWORD *)v14 + 1) = v31;
          ++v11;
          v15 = result + 2;
          if (result + 2 < v14)
            goto LABEL_10;
          goto LABEL_31;
        }
      }
      v36 = result + 2;
      if (v12 <= *v6)
      {
        if (v36 == v6)
          return result;
        while (1)
        {
          v37 = *v36;
          if (v12 > *v36)
            break;
          v36 += 2;
          if (v36 == v6)
            return result;
        }
        *v36 = *v6;
        *(a3 - 2) = v37;
        v41 = *((_DWORD *)v36 + 1);
        v36[1] = *(a3 - 1);
        *((_DWORD *)a3 - 1) = v41;
        v36 += 2;
      }
      if (v36 == v6)
        return result;
      while (1)
      {
        v43 = *result;
        do
        {
          v44 = *v36;
          v36 += 2;
          v45 = v44;
        }
        while (v43 <= v44);
        v46 = v36 - 2;
        do
        {
          v47 = *(v6 - 2);
          v6 -= 2;
          v48 = v47;
        }
        while (v43 > v47);
        if (v46 >= v6)
          break;
        *(v36 - 2) = v48;
        *v6 = v45;
        v42 = *((_DWORD *)v36 - 1);
        *(v36 - 1) = v6[1];
        *((_DWORD *)v6 + 1) = v42;
      }
      result = v36 - 2;
      if (v46 > a2)
        return result;
    }
  }
  return result;
}

uint64_t sub_20E79244C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  unsigned int v5;
  unsigned int v6;

  if (*(_BYTE *)(result + 20) != 2)
    sub_20E807998(result, a2);
  v2 = result;
  if (!*(_BYTE *)(result + 385) && !*(_BYTE *)(result + 386))
    sub_20E807970(result, a2);
  if (!*(_BYTE *)(result + 387))
  {
    result = sub_20E7A97E4(result);
    v3 = *(_QWORD *)(v2 + 192);
    if ((_DWORD)result)
    {
      *(_QWORD *)(v2 + 288) = v3;
      *(_DWORD *)(v2 + 280) = *(_DWORD *)(v2 + 176);
      *(_DWORD *)(v2 + 284) = *(_DWORD *)(v2 + 184);
      *(_QWORD *)(v2 + 184) = 0;
      *(_QWORD *)(v2 + 192) = 0;
      *(_QWORD *)(v2 + 176) = 0;
    }
    else
    {
      v4 = *(const void **)(v2 + 168);
      v5 = *(_DWORD *)(v2 + 184);
      v6 = *(_DWORD *)(v2 + 160);
      *(_QWORD *)(v2 + 288) = v3;
      *(_DWORD *)(v2 + 280) = *(_DWORD *)(v2 + 176);
      *(_DWORD *)(v2 + 284) = v6 + v5;
      *(_OWORD *)(v2 + 168) = 0u;
      *(_OWORD *)(v2 + 152) = 0u;
      *(_OWORD *)(v2 + 184) = 0u;
      if (v6)
        return (uint64_t)memcpy((void *)(v3 + 44 * v5), v4, 44 * v6);
    }
  }
  return result;
}

void sub_20E79251C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unint64_t a9, unint64_t a10, char **a11)
{
  unint64_t v11;
  char **v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  float v23;
  uint64_t *v24;
  float v25;
  uint64_t *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  uint64_t i;
  char *v52;
  float *v53;
  float *v54;
  unint64_t v55;
  unint64_t v56;
  float *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  char *v81;
  char *v82;
  void *v83;
  char *v84;
  void *v85;
  void *v86;
  unint64_t v89;
  uint64_t v90;
  unint64_t v92;
  uint64_t v93;
  void *__p;
  char *v95;

  if (a5 != 1 || a6 != 1)
    sub_20E807A60(a1, a2);
  if (a7 <= 0)
    sub_20E807A38(a1, a2);
  v11 = a2;
  v12 = a11;
  v13 = a4 + a2;
  if (a4 + a2 != (v12[1] - *v12) >> 3)
    sub_20E807A10(a1, a2);
  v93 = a7;
  sub_20E791D10(&__p, a7);
  if (v13)
  {
    v15 = v13;
    v16 = 0;
    v89 = v11;
    v90 = a3;
    do
    {
      while (1)
      {
        v17 = *(_QWORD *)&(*v12)[8 * v16];
        v18 = a1;
        if (v17 < v11)
        {
          v19 = 0;
        }
        else
        {
          v18 = a3;
          v19 = v11;
        }
        v20 = v18 + 44 * (v17 - v19);
        v21 = *(_QWORD *)(v20 + 32);
        if (vcvtms_s32_f32((float)((float)(HIDWORD(v21) & 0x7FFFF) / (float)a10) * 0.015625)
           + vcvtms_s32_f32((float)((float)(v21 & 0x3FFFF) / (float)a9) * 0.015625))
        {
          sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", 97, "bin_index == 0 && \"bin index should always be 0\"", (void (*)(void *))sub_20E803DA4);
          abort();
        }
        v22 = *(_DWORD *)(v20 + 40);
        v23 = (float)((float)(v21 >> 23) * 0.0625) * 0.25;
        if (v23 > (float)(a7 - 1))
          v23 = (float)(a7 - 1);
        v24 = (uint64_t *)((char *)__p + 24 * (int)vcvtms_s32_f32(v23));
        v25 = (float)(v22 & 0x7FFF);
        v26 = v24 + 1;
        v27 = (char *)v24[1];
        v28 = v24[2];
        if ((unint64_t)v27 >= v28)
          break;
        *(float *)v27 = v25;
        *((_DWORD *)v27 + 1) = v17;
        v12 = a11;
        *v26 = (uint64_t)(v27 + 8);
        if (++v16 == v15)
          goto LABEL_37;
      }
      v29 = (char *)*v24;
      v30 = (uint64_t)&v27[-*v24];
      v31 = v30 >> 3;
      v32 = (v30 >> 3) + 1;
      if (v32 >> 61)
        sub_20E78D874();
      v33 = v28 - (_QWORD)v29;
      if (v33 >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        if (v34 >> 61)
          sub_20E78D888();
        v35 = operator new(8 * v34);
        v36 = (uint64_t)&v35[8 * v31];
        *(float *)v36 = v25;
        *(_DWORD *)(v36 + 4) = v17;
        if (v27 != v29)
        {
LABEL_24:
          v37 = v27 - 8 - v29;
          if (v37 < 0x58)
          {
            v38 = v36;
            goto LABEL_32;
          }
          v38 = v36;
          if ((unint64_t)(v27 - &v35[v30]) < 0x20)
            goto LABEL_98;
          v39 = (v37 >> 3) + 1;
          v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v27[-v40];
          v38 = v36 - v40;
          v42 = &v35[8 * v31 - 16];
          v43 = v27 - 16;
          v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *v42 = v45;
            v42 -= 2;
            v43 -= 32;
            v44 -= 4;
          }
          while (v44);
          v27 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_98:
            do
            {
LABEL_32:
              v46 = *((_QWORD *)v27 - 1);
              v27 -= 8;
              *(_QWORD *)(v38 - 8) = v46;
              v38 -= 8;
            }
            while (v27 != v29);
          }
          v27 = (char *)*v24;
          goto LABEL_34;
        }
      }
      else
      {
        v35 = 0;
        v36 = 8 * v31;
        *(float *)v36 = v25;
        *(_DWORD *)(v36 + 4) = v17;
        if (v27 != v29)
          goto LABEL_24;
      }
      v38 = v36;
LABEL_34:
      *v24 = v38;
      v47 = v36 + 8;
      *v26 = v36 + 8;
      v24[2] = (uint64_t)&v35[8 * v34];
      v11 = v89;
      a3 = v90;
      if (v27)
        operator delete(v27);
      v15 = v13;
      v12 = a11;
      *v26 = v47;
      ++v16;
    }
    while (v16 != v13);
  }
LABEL_37:
  v48 = *v12;
  v12[1] = *v12;
  v92 = a8 / a7;
  v49 = v92 * v93;
  if (v92 * v93 > (v12[2] - v48) >> 3)
  {
    if (v49 >> 61)
      sub_20E78D874();
    v50 = (char *)operator new(8 * v49);
    *v12 = v50;
    v12[1] = v50;
    v12[2] = &v50[8 * v49];
    if (v48)
      operator delete(v48);
  }
  for (i = 0; i != v93; ++i)
  {
    v52 = (char *)__p + 24 * i;
    v53 = *(float **)v52;
    v54 = (float *)*((_QWORD *)v52 + 1);
    v55 = ((uint64_t)v54 - *(_QWORD *)v52) >> 3;
    if (v55 >= v92)
      v56 = a8 / a7;
    else
      v56 = v55;
    v57 = &v53[2 * v56];
    if (v57 != v54)
      sub_20E791F74(v53, v57, v54);
    if (v56)
    {
      v58 = 0;
      v59 = v12[1];
      while (1)
      {
        while (1)
        {
          v60 = *(int *)(*((_QWORD *)__p + 3 * i) + 8 * v58 + 4);
          v61 = (unint64_t)v12[2];
          if ((unint64_t)v59 >= v61)
            break;
          *(_QWORD *)v59 = v60;
          v59 += 8;
          v12[1] = v59;
          if (++v58 == v56)
            goto LABEL_42;
        }
        v62 = v56;
        v63 = *v12;
        v64 = v59 - *v12;
        v65 = v64 >> 3;
        v66 = (v64 >> 3) + 1;
        if (v66 >> 61)
          sub_20E78D874();
        v67 = v61 - (_QWORD)v63;
        if (v67 >> 2 > v66)
          v66 = v67 >> 2;
        v68 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v66;
        if (v68)
        {
          if (v68 >> 61)
            sub_20E78D888();
          v69 = operator new(8 * v68);
          v70 = &v69[8 * v65];
          *(_QWORD *)v70 = v60;
          v71 = (uint64_t)(v70 + 8);
          if (v59 == v63)
          {
LABEL_69:
            v56 = v62;
            v12 = a11;
            *a11 = v70;
            a11[1] = (char *)v71;
            a11[2] = &v69[8 * v68];
            if (!v63)
              goto LABEL_66;
LABEL_65:
            operator delete(v63);
            goto LABEL_66;
          }
        }
        else
        {
          v69 = 0;
          v70 = (char *)(8 * v65);
          *(_QWORD *)(8 * v65) = v60;
          v71 = 8 * v65 + 8;
          if (v59 == v63)
            goto LABEL_69;
        }
        v72 = v59 - 8 - v63;
        if (v72 < 0x168
          || &v69[v64 - 8 - (v72 & 0xFFFFFFFFFFFFFFF8)] > &v69[v64 - 8]
          || &v59[-(v72 & 0xFFFFFFFFFFFFFFF8) - 8] > v59 - 8
          || (unint64_t)(v59 - &v69[v64]) < 0x20)
        {
          break;
        }
        v75 = (v72 >> 3) + 1;
        v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
        v73 = &v59[-v76];
        v70 -= v76;
        v77 = &v69[8 * v65 - 16];
        v78 = v59 - 16;
        v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
        v56 = v62;
        do
        {
          v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 4;
        }
        while (v79);
        v12 = a11;
        if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_63;
LABEL_64:
        *v12 = v70;
        v12[1] = (char *)v71;
        v12[2] = &v69[8 * v68];
        if (v63)
          goto LABEL_65;
LABEL_66:
        v12[1] = (char *)v71;
        ++v58;
        v59 = (char *)v71;
        if (v58 == v56)
          goto LABEL_42;
      }
      v73 = v59;
      v56 = v62;
      v12 = a11;
      do
      {
LABEL_63:
        v74 = *((_QWORD *)v73 - 1);
        v73 -= 8;
        *((_QWORD *)v70 - 1) = v74;
        v70 -= 8;
      }
      while (v73 != v63);
      goto LABEL_64;
    }
LABEL_42:
    ;
  }
  sub_20E791DD8((uint64_t)v12);
  v81 = (char *)__p;
  if (__p)
  {
    v82 = v95;
    v83 = __p;
    if (v95 != __p)
    {
      v84 = v95;
      do
      {
        v86 = (void *)*((_QWORD *)v84 - 3);
        v84 -= 24;
        v85 = v86;
        if (v86)
        {
          *((_QWORD *)v82 - 2) = v85;
          operator delete(v85);
        }
        v82 = v84;
      }
      while (v84 != v81);
      v83 = __p;
    }
    v95 = v81;
    operator delete(v83);
  }
}

void sub_20E792B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E792B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E792B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E792B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E792BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E792BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E792BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E792BEC(uint64_t a1, unint64_t **a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  float *v13;
  float32x2_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  float v23;
  __int16 v24;
  uint64_t v25;
  float v26;
  unint64_t __n;
  void *v28;
  unint64_t v29;
  char *__src;

  if (*(_BYTE *)(a1 + 20) != 2)
    sub_20E8079E8(a1, (uint64_t)a2);
  v2 = *(unsigned int *)(a1 + 284);
  v3 = (*(_DWORD *)(a1 + 160) + v2);
  v5 = *a2;
  v4 = a2[1];
  v6 = (char *)v4 - (char *)*a2;
  v7 = v6 >> 3;
  if (v6 >> 3 > v3)
    sub_20E8079C0(a1, (uint64_t)a2);
  v8 = *(_QWORD *)(a1 + 288);
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 144) = 0;
  if (v4 == v5)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4) = (unint64_t)v6 >> 3;
  }
  else
  {
    if ((unint64_t)v6 >= 0x5555555555555551)
      sub_20E78D874();
    v28 = v10;
    v29 = v6;
    v11 = (char *)operator new(24 * v7);
    __n = 24 * ((24 * v7 - 24) / 0x18) + 24;
    bzero(v11, __n);
    if (v7 <= 1)
      v12 = 1;
    else
      v12 = v7;
    __src = v11;
    v13 = (float *)(v11 + 12);
    v14 = (float32x2_t)vdup_n_s32(0x3C800000u);
    do
    {
      v16 = *v5++;
      v15 = v16;
      if (v16 > (v3 - 1))
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", 389, "idx[i] <= max_valid_idx", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v17 = v8 + 44 * v15;
      v18 = v15 >= v2;
      v19 = v9 + 44 * (v15 - v2);
      if (v18)
        v20 = v19;
      else
        v20 = v17;
      v21 = *(_QWORD *)(v20 + 32);
      v22.i64[0] = v21;
      v22.i64[1] = HIDWORD(v21);
      *(float32x2_t *)(v13 - 3) = vmul_f32(vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8(v22, (int8x16_t)xmmword_20E80E200))), v14);
      v23 = pow(1.41421356, (float)((float)(v21 >> 23) * 0.0625));
      *v13 = v23;
      v24 = *(_DWORD *)(v20 + 40);
      v25 = *(_QWORD *)(v20 + 32);
      *((_BYTE *)v13 + 4) = v25 < 0;
      v26 = (double)((unint64_t)v25 >> 52) * 3.14159265 * 0.0078125;
      *(v13 - 1) = v26;
      v13[2] = (float)(v24 & 0x7FFF);
      v13 += 6;
      --v12;
    }
    while (v12);
    memcpy(v28, __src, __n);
    *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4) = v29 >> 3;
    operator delete(__src);
  }
}

void sub_20E792E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E792E8C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  unsigned int v5;
  uint64_t v6;

  if (*(_BYTE *)(result + 20) != 2)
    sub_20E807998(result, a2);
  v2 = result;
  if (!*(_BYTE *)(result + 385) && !*(_BYTE *)(result + 386))
    sub_20E807970(result, a2);
  if (!*(_BYTE *)(result + 387))
  {
    result = sub_20E7A97E4(result);
    v3 = *(_QWORD *)(v2 + 192);
    if ((_DWORD)result)
    {
      *(_QWORD *)(v2 + 288) = v3;
      *(_DWORD *)(v2 + 280) = *(_DWORD *)(v2 + 176);
      *(_DWORD *)(v2 + 284) = *(_DWORD *)(v2 + 184);
      *(_QWORD *)(v2 + 184) = 0;
      *(_QWORD *)(v2 + 192) = 0;
      *(_QWORD *)(v2 + 176) = 0;
    }
    else
    {
      v4 = *(const void **)(v2 + 168);
      v5 = *(_DWORD *)(v2 + 184);
      v6 = *(unsigned int *)(v2 + 160);
      *(_QWORD *)(v2 + 288) = v3;
      *(_DWORD *)(v2 + 280) = *(_DWORD *)(v2 + 176);
      *(_DWORD *)(v2 + 284) = v6 + v5;
      *(_OWORD *)(v2 + 168) = 0u;
      *(_OWORD *)(v2 + 152) = 0u;
      *(_OWORD *)(v2 + 184) = 0u;
      if ((_DWORD)v6)
        return (uint64_t)memcpy((void *)(v3 + 28 * v5), v4, 28 * v6);
    }
  }
  return result;
}

void sub_20E792F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unint64_t a9, unint64_t a10, char **a11)
{
  unint64_t v11;
  char **v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  float v23;
  uint64_t *v24;
  float v25;
  uint64_t *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  uint64_t i;
  char *v52;
  float *v53;
  float *v54;
  unint64_t v55;
  unint64_t v56;
  float *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  char *v81;
  char *v82;
  void *v83;
  char *v84;
  void *v85;
  void *v86;
  unint64_t v89;
  uint64_t v90;
  unint64_t v92;
  uint64_t v93;
  void *__p;
  char *v95;

  if (a5 != 1 || a6 != 1)
    sub_20E807A60(a1, a2);
  if (a7 <= 0)
    sub_20E807A38(a1, a2);
  v11 = a2;
  v12 = a11;
  v13 = a4 + a2;
  if (a4 + a2 != (v12[1] - *v12) >> 3)
    sub_20E807A10(a1, a2);
  v93 = a7;
  sub_20E791D10(&__p, a7);
  if (v13)
  {
    v15 = v13;
    v16 = 0;
    v89 = v11;
    v90 = a3;
    do
    {
      while (1)
      {
        v17 = *(_QWORD *)&(*v12)[8 * v16];
        v18 = a1;
        if (v17 < v11)
        {
          v19 = 0;
        }
        else
        {
          v18 = a3;
          v19 = v11;
        }
        v20 = v18 + 28 * (v17 - v19);
        v21 = *(_QWORD *)(v20 + 16);
        if (vcvtms_s32_f32((float)((float)(HIDWORD(v21) & 0x7FFFF) / (float)a10) * 0.015625)
           + vcvtms_s32_f32((float)((float)(v21 & 0x3FFFF) / (float)a9) * 0.015625))
        {
          sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", 97, "bin_index == 0 && \"bin index should always be 0\"", (void (*)(void *))sub_20E803DA4);
          abort();
        }
        v22 = *(_DWORD *)(v20 + 24);
        v23 = (float)((float)(v21 >> 23) * 0.0625) * 0.25;
        if (v23 > (float)(a7 - 1))
          v23 = (float)(a7 - 1);
        v24 = (uint64_t *)((char *)__p + 24 * (int)vcvtms_s32_f32(v23));
        v25 = (float)(v22 & 0x7FFF);
        v26 = v24 + 1;
        v27 = (char *)v24[1];
        v28 = v24[2];
        if ((unint64_t)v27 >= v28)
          break;
        *(float *)v27 = v25;
        *((_DWORD *)v27 + 1) = v17;
        v12 = a11;
        *v26 = (uint64_t)(v27 + 8);
        if (++v16 == v15)
          goto LABEL_37;
      }
      v29 = (char *)*v24;
      v30 = (uint64_t)&v27[-*v24];
      v31 = v30 >> 3;
      v32 = (v30 >> 3) + 1;
      if (v32 >> 61)
        sub_20E78D874();
      v33 = v28 - (_QWORD)v29;
      if (v33 >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        if (v34 >> 61)
          sub_20E78D888();
        v35 = operator new(8 * v34);
        v36 = (uint64_t)&v35[8 * v31];
        *(float *)v36 = v25;
        *(_DWORD *)(v36 + 4) = v17;
        if (v27 != v29)
        {
LABEL_24:
          v37 = v27 - 8 - v29;
          if (v37 < 0x58)
          {
            v38 = v36;
            goto LABEL_32;
          }
          v38 = v36;
          if ((unint64_t)(v27 - &v35[v30]) < 0x20)
            goto LABEL_98;
          v39 = (v37 >> 3) + 1;
          v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v27[-v40];
          v38 = v36 - v40;
          v42 = &v35[8 * v31 - 16];
          v43 = v27 - 16;
          v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *v42 = v45;
            v42 -= 2;
            v43 -= 32;
            v44 -= 4;
          }
          while (v44);
          v27 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_98:
            do
            {
LABEL_32:
              v46 = *((_QWORD *)v27 - 1);
              v27 -= 8;
              *(_QWORD *)(v38 - 8) = v46;
              v38 -= 8;
            }
            while (v27 != v29);
          }
          v27 = (char *)*v24;
          goto LABEL_34;
        }
      }
      else
      {
        v35 = 0;
        v36 = 8 * v31;
        *(float *)v36 = v25;
        *(_DWORD *)(v36 + 4) = v17;
        if (v27 != v29)
          goto LABEL_24;
      }
      v38 = v36;
LABEL_34:
      *v24 = v38;
      v47 = v36 + 8;
      *v26 = v36 + 8;
      v24[2] = (uint64_t)&v35[8 * v34];
      v11 = v89;
      a3 = v90;
      if (v27)
        operator delete(v27);
      v15 = v13;
      v12 = a11;
      *v26 = v47;
      ++v16;
    }
    while (v16 != v13);
  }
LABEL_37:
  v48 = *v12;
  v12[1] = *v12;
  v92 = a8 / a7;
  v49 = v92 * v93;
  if (v92 * v93 > (v12[2] - v48) >> 3)
  {
    if (v49 >> 61)
      sub_20E78D874();
    v50 = (char *)operator new(8 * v49);
    *v12 = v50;
    v12[1] = v50;
    v12[2] = &v50[8 * v49];
    if (v48)
      operator delete(v48);
  }
  for (i = 0; i != v93; ++i)
  {
    v52 = (char *)__p + 24 * i;
    v53 = *(float **)v52;
    v54 = (float *)*((_QWORD *)v52 + 1);
    v55 = ((uint64_t)v54 - *(_QWORD *)v52) >> 3;
    if (v55 >= v92)
      v56 = a8 / a7;
    else
      v56 = v55;
    v57 = &v53[2 * v56];
    if (v57 != v54)
      sub_20E791F74(v53, v57, v54);
    if (v56)
    {
      v58 = 0;
      v59 = v12[1];
      while (1)
      {
        while (1)
        {
          v60 = *(int *)(*((_QWORD *)__p + 3 * i) + 8 * v58 + 4);
          v61 = (unint64_t)v12[2];
          if ((unint64_t)v59 >= v61)
            break;
          *(_QWORD *)v59 = v60;
          v59 += 8;
          v12[1] = v59;
          if (++v58 == v56)
            goto LABEL_42;
        }
        v62 = v56;
        v63 = *v12;
        v64 = v59 - *v12;
        v65 = v64 >> 3;
        v66 = (v64 >> 3) + 1;
        if (v66 >> 61)
          sub_20E78D874();
        v67 = v61 - (_QWORD)v63;
        if (v67 >> 2 > v66)
          v66 = v67 >> 2;
        v68 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v66;
        if (v68)
        {
          if (v68 >> 61)
            sub_20E78D888();
          v69 = operator new(8 * v68);
          v70 = &v69[8 * v65];
          *(_QWORD *)v70 = v60;
          v71 = (uint64_t)(v70 + 8);
          if (v59 == v63)
          {
LABEL_69:
            v56 = v62;
            v12 = a11;
            *a11 = v70;
            a11[1] = (char *)v71;
            a11[2] = &v69[8 * v68];
            if (!v63)
              goto LABEL_66;
LABEL_65:
            operator delete(v63);
            goto LABEL_66;
          }
        }
        else
        {
          v69 = 0;
          v70 = (char *)(8 * v65);
          *(_QWORD *)(8 * v65) = v60;
          v71 = 8 * v65 + 8;
          if (v59 == v63)
            goto LABEL_69;
        }
        v72 = v59 - 8 - v63;
        if (v72 < 0x168
          || &v69[v64 - 8 - (v72 & 0xFFFFFFFFFFFFFFF8)] > &v69[v64 - 8]
          || &v59[-(v72 & 0xFFFFFFFFFFFFFFF8) - 8] > v59 - 8
          || (unint64_t)(v59 - &v69[v64]) < 0x20)
        {
          break;
        }
        v75 = (v72 >> 3) + 1;
        v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
        v73 = &v59[-v76];
        v70 -= v76;
        v77 = &v69[8 * v65 - 16];
        v78 = v59 - 16;
        v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
        v56 = v62;
        do
        {
          v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 4;
        }
        while (v79);
        v12 = a11;
        if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_63;
LABEL_64:
        *v12 = v70;
        v12[1] = (char *)v71;
        v12[2] = &v69[8 * v68];
        if (v63)
          goto LABEL_65;
LABEL_66:
        v12[1] = (char *)v71;
        ++v58;
        v59 = (char *)v71;
        if (v58 == v56)
          goto LABEL_42;
      }
      v73 = v59;
      v56 = v62;
      v12 = a11;
      do
      {
LABEL_63:
        v74 = *((_QWORD *)v73 - 1);
        v73 -= 8;
        *((_QWORD *)v70 - 1) = v74;
        v70 -= 8;
      }
      while (v73 != v63);
      goto LABEL_64;
    }
LABEL_42:
    ;
  }
  sub_20E791DD8((uint64_t)v12);
  v81 = (char *)__p;
  if (__p)
  {
    v82 = v95;
    v83 = __p;
    if (v95 != __p)
    {
      v84 = v95;
      do
      {
        v86 = (void *)*((_QWORD *)v84 - 3);
        v84 -= 24;
        v85 = v86;
        if (v86)
        {
          *((_QWORD *)v82 - 2) = v85;
          operator delete(v85);
        }
        v82 = v84;
      }
      while (v84 != v81);
      v83 = __p;
    }
    v95 = v81;
    operator delete(v83);
  }
}

void sub_20E7935A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7935B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7935CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7935E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7935F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E793608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E79361C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E793630(uint64_t a1, unint64_t **a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  float *v13;
  float32x2_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  float v23;
  __int16 v24;
  uint64_t v25;
  float v26;
  unint64_t __n;
  void *v28;
  unint64_t v29;
  char *__src;

  if (*(_BYTE *)(a1 + 20) != 2)
    sub_20E8079E8(a1, (uint64_t)a2);
  v2 = *(unsigned int *)(a1 + 284);
  v3 = (*(_DWORD *)(a1 + 160) + v2);
  v5 = *a2;
  v4 = a2[1];
  v6 = (char *)v4 - (char *)*a2;
  v7 = v6 >> 3;
  if (v6 >> 3 > v3)
    sub_20E8079C0(a1, (uint64_t)a2);
  v8 = *(_QWORD *)(a1 + 288);
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 144) = 0;
  if (v4 == v5)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4) = (unint64_t)v6 >> 3;
  }
  else
  {
    if ((unint64_t)v6 >= 0x5555555555555551)
      sub_20E78D874();
    v28 = v10;
    v29 = v6;
    v11 = (char *)operator new(24 * v7);
    __n = 24 * ((24 * v7 - 24) / 0x18) + 24;
    bzero(v11, __n);
    if (v7 <= 1)
      v12 = 1;
    else
      v12 = v7;
    __src = v11;
    v13 = (float *)(v11 + 12);
    v14 = (float32x2_t)vdup_n_s32(0x3C800000u);
    do
    {
      v16 = *v5++;
      v15 = v16;
      if (v16 > (v3 - 1))
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", 389, "idx[i] <= max_valid_idx", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v17 = v8 + 28 * v15;
      v18 = v15 >= v2;
      v19 = v9 + 28 * (v15 - v2);
      if (v18)
        v20 = v19;
      else
        v20 = v17;
      v21 = *(_QWORD *)(v20 + 16);
      v22.i64[0] = v21;
      v22.i64[1] = HIDWORD(v21);
      *(float32x2_t *)(v13 - 3) = vmul_f32(vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8(v22, (int8x16_t)xmmword_20E80E200))), v14);
      v23 = pow(1.41421356, (float)((float)(v21 >> 23) * 0.0625));
      *v13 = v23;
      v24 = *(_DWORD *)(v20 + 24);
      v25 = *(_QWORD *)(v20 + 16);
      *((_BYTE *)v13 + 4) = v25 < 0;
      v26 = (double)((unint64_t)v25 >> 52) * 3.14159265 * 0.0078125;
      *(v13 - 1) = v26;
      v13[2] = (float)(v24 & 0x7FFF);
      v13 += 6;
      --v12;
    }
    while (v12);
    memcpy(v28, __src, __n);
    *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4) = v29 >> 3;
    operator delete(__src);
  }
}

void sub_20E7938A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E7938D0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20E7938D0(a1, *a2);
    sub_20E7938D0(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *sub_20E793910(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void sub_20E793AC4(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 299, a3, a4);
}

void sub_20E793ACC(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 64, a3, a4);
}

void sub_20E793AD4(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 56, a3, a4);
}

void sub_20E793ADC(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 65, a3, a4);
}

void sub_20E793AE4(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 60, a3, a4);
}

void sub_20E793AEC(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 68, a3, a4);
}

void sub_20E793AF4(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 359, a3, a4);
}

void sub_20E793AFC(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 374, a3, a4);
}

void sub_20E793B04(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 297, a3, a4);
}

double sub_20E793B0C(uint64_t a1, int a2)
{
  double result;

  *(_QWORD *)a1 = &off_24C9A8770;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_WORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_BYTE *)(a1 + 196) = 0;
  *(_WORD *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_BYTE *)(a1 + 252) = 0;
  *(_WORD *)(a1 + 260) = 0;
  *(_DWORD *)(a1 + 284) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_WORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_BYTE *)(a1 + 308) = 0;
  *(_WORD *)(a1 + 316) = 0;
  *(_DWORD *)(a1 + 340) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_BYTE *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_BYTE *)(a1 + 364) = 0;
  *(_WORD *)(a1 + 372) = 0;
  *(_DWORD *)(a1 + 396) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_BYTE *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 420) = 0;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_WORD *)(a1 + 428) = 0;
  *(_DWORD *)(a1 + 452) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_BYTE *)(a1 + 448) = 0;
  *(_WORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_BYTE *)(a1 + 476) = 0;
  *(_WORD *)(a1 + 484) = 0;
  *(_DWORD *)(a1 + 508) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_BYTE *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 532) = 0;
  *(_OWORD *)(a1 + 516) = 0u;
  *(_WORD *)(a1 + 540) = 0;
  *(_DWORD *)(a1 + 564) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_BYTE *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 572) = 0u;
  *(_BYTE *)(a1 + 588) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 660) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 680) = xmmword_20E80DEC0;
  *(_OWORD *)(a1 + 696) = xmmword_20E80DED0;
  *(_OWORD *)(a1 + 712) = xmmword_20E80DEE0;
  *(_OWORD *)(a1 + 728) = xmmword_20E80DEF0;
  *(_DWORD *)(a1 + 744) = 4;
  *(_WORD *)(a1 + 748) = 5;
  *(_QWORD *)(a1 + 752) = 0xFFFF0000003FLL;
  *(_OWORD *)(a1 + 760) = xmmword_20E80DF00;
  *(_QWORD *)(a1 + 776) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 784) = 511;
  *(_QWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_BYTE *)(a1 + 816) = 21;
  *(_QWORD *)(a1 + 824) = 0;
  if (a2 != 6)
  {
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 57, "0 && \"unsupported platform\"", (void (*)(void *))sub_20E803DA4);
    abort();
  }
  *(_BYTE *)(a1 + 816) = 21;
  *(_QWORD *)(a1 + 824) = 0x22D000000;
  *(_QWORD *)&result = 0x22D300000;
  *(_OWORD *)(a1 + 656) = xmmword_20E80E220;
  return result;
}

void sub_20E793D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v11;

  if (*a10)
  {
    *(_QWORD *)(v10 + 800) = *a10;
    MEMORY[0x212BC47C8]();
  }
  sub_20E78A2E4(v11);
  nullsub_13(v10);
  _Unwind_Resume(a1);
}

BOOL sub_20E793DA0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned int v5;
  int v6;
  int v7;
  char *v8;
  unint64_t v9;

  if (*(_BYTE *)(a2 + 68) != 2)
    return 0;
  *(_WORD *)(a2 + 50) = sub_20E7E78F8(*(_DWORD *)a2, *(_DWORD *)(a2 + 4));
  result = sub_20E799E38(a1 + 680, a2);
  if (result)
  {
    result = sub_20E793EE4(a1, a2);
    if (result)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
      v5 = *(unsigned __int16 *)(a2 + 50);
      *(_WORD *)(a1 + 16) = v5;
      v6 = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 24) = v6;
      v7 = *(unsigned __int8 *)(a2 + 68);
      *(_BYTE *)(a1 + 28) = v7;
      sub_20E798BD8(a1 + 32, v5, v7);
      if (*(_BYTE *)(a1 + 28) == 2)
      {
        v8 = *(char **)(a1 + 792);
        v9 = 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(_QWORD *)(a1 + 800) - (_QWORD)v8) >> 6);
        if (*(char **)(a1 + 800) == v8)
        {
          sub_20E79663C((char **)(a1 + 792), 1 - v9);
          v8 = *(char **)(a1 + 792);
        }
        else if (v9 >= 2)
        {
          *(_QWORD *)(a1 + 800) = v8 + 3776;
        }
        sub_20E7986B8(a1 + 680, a2, v8, a1 + 600, a1 + 32);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_20E793EE4(uint64_t a1, uint64_t a2)
{
  __CVBuffer *v4;
  int BytesPerRow;
  int Height;
  int Width;
  int v8;
  int v9;
  void *BaseAddress;
  unsigned int v11;
  size_t v13;
  unsigned int v14;
  __CVBuffer *v15;
  _QWORD *v16;
  uint64_t (*v17)(_QWORD, _QWORD);
  void *v18;
  uint8_t *v19;
  uint64_t v20;
  __CVBuffer *v21;
  CVPixelBufferRef pixelBuffer;
  uint8_t buf[4];
  int v24;
  uint8_t *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a2 + 92))
    return *(_QWORD *)(a2 + 168) == 0;
  if (*(_BYTE *)(a2 + 165) != 1)
  {
    v11 = dword_254A40CA8;
    BaseAddress = &unk_254A40174;
    goto LABEL_15;
  }
  v4 = *(__CVBuffer **)(a2 + 168);
  if (v4)
  {
    BytesPerRow = CVPixelBufferGetBytesPerRow(v4);
    Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 168));
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Lacc config and metadata received\n", buf, 2u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 168));
      *(_DWORD *)buf = 67109120;
      v24 = Width;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "width = %d", buf, 8u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v8 = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 168));
      *(_DWORD *)buf = 67109120;
      v24 = v8;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "height = %d", buf, 8u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v9 = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a2 + 168));
      *(_DWORD *)buf = 67109120;
      v24 = v9;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "stride = %d", buf, 8u);
    }
    CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(a2 + 168), 0);
    BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a2 + 168));
    v11 = Height * BytesPerRow;
LABEL_15:
    v13 = v11;
    pixelBuffer = 0;
    v14 = sub_20E78AA60((_DWORD *)(a1 + 600), (uint64_t)BaseAddress, v11);
    if (sub_20E805430(v14, 1u, 0x4C303038u, &pixelBuffer, 16, 16, 0, 1, 0))
      goto LABEL_22;
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    v15 = pixelBuffer;
    v16 = operator new(0x20uLL);
    v17 = MEMORY[0x24BDC53B0];
    *v16 = &off_24C9A86E0;
    v16[1] = v17;
    v16[2] = v15;
    *((_DWORD *)v16 + 6) = 0;
    v25 = (uint8_t *)v16;
    v18 = CVPixelBufferGetBaseAddress(v15);
    memcpy(v18, BaseAddress, v13);
    *(_QWORD *)(a1 + 600) = pixelBuffer;
    *(_BYTE *)(a1 + 29) = 1;
    if (!v25)
      sub_20E78D5A0();
    (*(void (**)(uint8_t *))(*(_QWORD *)v25 + 48))(v25);
    v19 = v25;
    if (v25 == buf)
    {
      v20 = 4;
      v19 = buf;
    }
    else
    {
      if (!v25)
        goto LABEL_22;
      v20 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_22:
    v21 = *(__CVBuffer **)(a2 + 168);
    if (v21)
    {
      if (*(_BYTE *)(a2 + 165) == 1)
      {
        CVPixelBufferUnlockBaseAddress(v21, 0);
        v21 = *(__CVBuffer **)(a2 + 168);
      }
      CVPixelBufferRelease(v21);
    }
  }
  return 1;
}

void sub_20E794210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E78AB68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E794224(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E785844(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E794240()
{
  return 3712;
}

uint64_t sub_20E794248()
{
  return 3776;
}

uint64_t sub_20E794250()
{
  return 1832;
}

double sub_20E794258(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  double result;

  v6 = *(_QWORD *)(a1 + 792);
  v7 = *(unsigned __int16 *)(a1 + 16);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  *(_QWORD *)&result = sub_20E7942B8(v6, v7, v8, a2, a3, (_QWORD *)(a1 + 32)).n128_u64[0];
  return result;
}

__n128 sub_20E7942B8(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, _QWORD *a6)
{
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  __n128 result;
  uint64_t v29;

  if (a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v29 = a2;
    do
    {
      v13 = 3 << (v10 & 0xFE);
      if ((v13 & *(_DWORD *)(a1 + 400)) != 0)
      {
        v14 = *a6 + v9;
        v15 = sub_20E7E7940(a4, v12);
        v16 = sub_20E7E7940(a5, v12);
        v11 += sub_20E7C5980(v14, v15, v16, v11);
      }
      if ((v13 & *(_DWORD *)(a1 + 404)) != 0)
      {
        v17 = a6[9] + v9;
        v18 = sub_20E7E7940(a4, v12);
        v19 = sub_20E7E7940(a5, v12);
        v11 += sub_20E7C5958(v17, v18, v19, v11);
      }
      ++v12;
      v10 += 2;
      v9 += 28;
    }
    while (v29 != v12);
  }
  else
  {
    v11 = 0;
  }
  if (*(_DWORD *)(a1 + 840))
  {
    v20 = a6;
    v11 += sub_20E7C5A20(0x186A00u, v11, 64, (uint64_t)(a6 + 32));
    if (!*(_DWORD *)(a1 + 408))
      goto LABEL_12;
    goto LABEL_11;
  }
  v20 = a6;
  if (*(_DWORD *)(a1 + 408))
LABEL_11:
    v11 += sub_20E7C5A20(8 * *(_DWORD *)(a1 + 652), v11, 64, (uint64_t)v20 + 284);
LABEL_12:
  v21 = *(_QWORD *)(a1 + 832);
  if ((v21 & 1) != 0)
  {
    v22 = sub_20E7C59D0(72 * *(_DWORD *)(a1 + 652), v11, (uint64_t)v20 + 172) + v11;
    v11 = sub_20E7C59D0(72 * *(_DWORD *)(a1 + 652), v22, (uint64_t)(v20 + 18)) + v22;
    v21 = *(_QWORD *)(a1 + 832);
  }
  v23 = (v21 >> 2) & 3;
  if (v23)
  {
    if (v23 == 1)
    {
      v24 = 40;
    }
    else
    {
      if (v23 != 2)
        sub_20E807B70();
      v24 = 24;
    }
    v25 = sub_20E7C59D0(*(_DWORD *)(a1 + 652) * v24, v11, (uint64_t)v20 + 228) + v11;
    v11 = sub_20E7C59D0(*(_DWORD *)(a1 + 652) * v24, v25, (uint64_t)(v20 + 25)) + v25;
  }
  v26 = sub_20E7C59A4(v20[15], (a3 + 63) & 0xFFFFFFC0, 1, v11, 8) + v11;
  if (*((_BYTE *)v20 + 340))
  {
    *((_DWORD *)v20 + 89) = v26;
    v26 += *((_DWORD *)v20 + 87) * *((_DWORD *)v20 + 88);
  }
  if (*((_BYTE *)v20 + 368))
  {
    *((_DWORD *)v20 + 96) = v26;
    v20[41] = *(_QWORD *)((char *)v20 + 356);
    result = *(__n128 *)((char *)v20 + 340);
    *(__n128 *)(v20 + 39) = result;
    *((_BYTE *)v20 + 332) = 0;
    *((_DWORD *)v20 + 84) = 0;
  }
  return result;
}

uint64_t sub_20E79455C(uint64_t a1, int a2)
{
  return ((8 * a2 + 63) & 0xFFFFFFC0) + ((4 * a2 + 63) & 0xFFFFFFC0) + 576;
}

void *sub_20E794580(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  const void *v4;
  int v5;

  if (a4 != 8)
    sub_20E807B9C();
  if (a3 || (v4 = *(const void **)(a1 + 792), *(_QWORD *)(a1 + 800) - (_QWORD)v4 != 3776))
    sub_20E806664();
  v5 = *(unsigned __int8 *)(a1 + 816);
  *a2 = -1;
  a2[1] = v5;
  a2[3] = 3776;
  return memcpy(a2 + 4, v4, 0xEC0uLL);
}

uint64_t sub_20E7945D8(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7)
{
  size_t v13;

  if (a7)
    sub_20E807BC8();
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  return sub_20E79464C(a2, v13, a3, a4, a5, a6, *(_DWORD *)(a1 + 24), (unsigned int *)(a1 + 32));
}

uint64_t sub_20E79464C(_DWORD *a1, size_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, unsigned int *a8)
{
  uint64_t v15;
  uint64_t result;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  bzero(a1, a2);
  *a1 = -1;
  a1[1] = a3 | 0x80000000;
  *((_QWORD *)a1 + 1) = 0;
  a1[38] |= 0x7FFFFFFFu;
  a1[59] |= 0x7FFFFFFFu;
  a1[80] |= 0x7FFFFFFFu;
  a1[101] |= 0x7FFFFFFFu;
  a1[122] |= 0x7FFFFFFFu;
  a1[143] |= 0x7FFFFFFFu;
  a1[164] |= 0x7FFFFFFFu;
  a1[185] |= 0x7FFFFFFFu;
  a1[206] |= 0x7FFFFFFFu;
  a1[227] |= 0x7FFFFFFFu;
  a1[248] |= 0x7FFFFFFFu;
  a1[269] |= 0x7FFFFFFFu;
  a1[290] |= 0x7FFFFFFFu;
  a1[311] |= 0x7FFFFFFFu;
  a1[332] |= 0x7FFFFFFFu;
  a1[353] |= 0x7FFFFFFFu;
  a1[374] |= 0x7FFFFFFFu;
  a1[395] |= 0x7FFFFFFFu;
  a1[416] |= 0x7FFFFFFFu;
  a1[437] |= 0x7FFFFFFFu;
  v15 = *((_QWORD *)a8 + 1) - *(_QWORD *)a8;
  *((_QWORD *)a1 + 18) = 0x100000014;
  if (((0x6DB6DB6DB6DB6DB7 * (v15 >> 2)) & 0xFFFFFFFFFFFFFFFELL) != 4)
    sub_20E8066E8();
  result = sub_20E7C56D4((uint64_t)(a1 + 80), a4, a5, a6, 8, 0, 0);
  v17 = *(_BYTE **)a8;
  if (**(_BYTE **)a8)
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 101), *((_DWORD *)v17 + 1), *((_DWORD *)v17 + 2), *((_DWORD *)v17 + 3), 8, 1, *((_DWORD *)v17 + 4) + a7);
    v17 = *(_BYTE **)a8;
  }
  if (v17[28])
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 122), *((_DWORD *)v17 + 8), *((_DWORD *)v17 + 9), *((_DWORD *)v17 + 10), 8, 1, *((_DWORD *)v17 + 11) + a7);
    v17 = *(_BYTE **)a8;
  }
  if (v17[56])
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 143), *((_DWORD *)v17 + 15), *((_DWORD *)v17 + 16), *((_DWORD *)v17 + 17), 8, 1, *((_DWORD *)v17 + 18) + a7);
    v17 = *(_BYTE **)a8;
  }
  if (v17[84])
    result = sub_20E7C56D4((uint64_t)(a1 + 164), *((_DWORD *)v17 + 22), *((_DWORD *)v17 + 23), *((_DWORD *)v17 + 24), 8, 1, *((_DWORD *)v17 + 25) + a7);
  v18 = *((_QWORD *)a8 + 9);
  if (*(_BYTE *)v18)
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 101), *(_DWORD *)(v18 + 4), *(_DWORD *)(v18 + 8), *(_DWORD *)(v18 + 12), 4, 1, *(_DWORD *)(v18 + 16) + a7);
    v18 = *((_QWORD *)a8 + 9);
  }
  if (*(_BYTE *)(v18 + 28))
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 122), *(_DWORD *)(v18 + 32), *(_DWORD *)(v18 + 36), *(_DWORD *)(v18 + 40), 4, 1, *(_DWORD *)(v18 + 44) + a7);
    v18 = *((_QWORD *)a8 + 9);
  }
  if (*(_BYTE *)(v18 + 56))
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 143), *(_DWORD *)(v18 + 60), *(_DWORD *)(v18 + 64), *(_DWORD *)(v18 + 68), 4, 1, *(_DWORD *)(v18 + 72) + a7);
    v18 = *((_QWORD *)a8 + 9);
  }
  if (*(_BYTE *)(v18 + 84))
    result = sub_20E7C56D4((uint64_t)(a1 + 164), *(_DWORD *)(v18 + 88), *(_DWORD *)(v18 + 92), *(_DWORD *)(v18 + 96), 4, 1, *(_DWORD *)(v18 + 100) + a7);
  if (v15 == 140)
  {
    if (*(_BYTE *)(*(_QWORD *)a8 + 112))
      result = sub_20E7C56D4((uint64_t)(a1 + 185), *(_DWORD *)(*(_QWORD *)a8 + 116), *(_DWORD *)(*(_QWORD *)a8 + 120), *(_DWORD *)(*(_QWORD *)a8 + 124), 8, 1, *(_DWORD *)(*(_QWORD *)a8 + 128) + a7);
    v19 = *((_QWORD *)a8 + 9);
    if (*(_BYTE *)(v19 + 112))
      result = sub_20E7C56D4((uint64_t)(a1 + 185), *(_DWORD *)(v19 + 116), *(_DWORD *)(v19 + 120), *(_DWORD *)(v19 + 124), 4, 1, *(_DWORD *)(v19 + 128) + a7);
  }
  v20 = *((_QWORD *)a8 + 15);
  if (*(_BYTE *)v20)
    result = sub_20E7C56D4((uint64_t)(a1 + 437), *(_DWORD *)(v20 + 4), *(_DWORD *)(v20 + 8), *(_DWORD *)(v20 + 12), 8, 1, *(_DWORD *)(v20 + 16) + a7);
  if (*((_BYTE *)a8 + 256))
    result = sub_20E7C56D4((uint64_t)(a1 + 206), a8[65], a8[66], a8[67], 8, 1, a8[68] + a7);
  if (*((_BYTE *)a8 + 284))
    result = sub_20E7C56D4((uint64_t)(a1 + 227), a8[72], a8[73], a8[74], 8, 1, a8[75] + a7);
  if (*((_BYTE *)a8 + 144))
    result = sub_20E7C56D4((uint64_t)(a1 + 206), a8[37], a8[38], a8[39], 8, 1, a8[40] + a7);
  if (*((_BYTE *)a8 + 172))
    result = sub_20E7C56D4((uint64_t)(a1 + 227), a8[44], a8[45], a8[46], 8, 1, a8[47] + a7);
  if (*((_BYTE *)a8 + 200))
    result = sub_20E7C56D4((uint64_t)(a1 + 248), a8[51], a8[52], a8[53], 8, 1, a8[54] + a7);
  if (*((_BYTE *)a8 + 228))
    result = sub_20E7C56D4((uint64_t)(a1 + 269), a8[58], a8[59], a8[60], 8, 1, a8[61] + a7);
  if (*((_BYTE *)a8 + 340))
    result = sub_20E7C56D4((uint64_t)(a1 + 290), a8[86], a8[87], a8[88], 8, 1, a8[89] + a7);
  if (*((_BYTE *)a8 + 312))
    result = sub_20E7C56D4((uint64_t)(a1 + 59), a8[79], a8[80], a8[81], 8, 2, a8[82] + a7);
  if (*((_BYTE *)a8 + 368))
    result = sub_20E7C56D4((uint64_t)(a1 + 374), a8[93], a8[94], a8[95], 8, 1, a8[96] + a7);
  if (*((_BYTE *)a8 + 452))
    result = sub_20E7C56D4((uint64_t)(a1 + 38), a8[114], a8[115], a8[116], 8, 3, a8[117]);
  if (*((_BYTE *)a8 + 480))
    return sub_20E7C56D4((uint64_t)(a1 + 311), a8[121], a8[122], a8[123], 8, 3, a8[124]);
  return result;
}

__n128 sub_20E794BC8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint16x4_t *v14;
  uint32x4_t *v15;
  uint32x4_t v16;
  uint32x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  __n128 result;
  __int128 v26;

  v3 = 0;
  *(_OWORD *)(a3 + 92) = *(_OWORD *)((char *)a2 + 100);
  v4 = *a2;
  *(_WORD *)(a3 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)a3 = v4;
  v5 = *(uint64_t *)((char *)a2 + 10);
  *(_WORD *)(a3 + 18) = *((_WORD *)a2 + 9);
  *(_QWORD *)(a3 + 10) = v5;
  v6 = *(uint64_t *)((char *)a2 + 20);
  *(_WORD *)(a3 + 28) = *((_WORD *)a2 + 14);
  *(_QWORD *)(a3 + 20) = v6;
  v7 = *(uint64_t *)((char *)a2 + 30);
  *(_WORD *)(a3 + 38) = *((_WORD *)a2 + 19);
  *(_QWORD *)(a3 + 30) = v7;
  v8 = a2[5];
  *(_WORD *)(a3 + 48) = *((_WORD *)a2 + 24);
  *(_QWORD *)(a3 + 40) = v8;
  v9 = *(_OWORD *)((char *)a2 + 52);
  v10 = *(_OWORD *)((char *)a2 + 68);
  *(_QWORD *)(a3 + 84) = *(uint64_t *)((char *)a2 + 84);
  *(_OWORD *)(a3 + 68) = v10;
  *(_OWORD *)(a3 + 52) = v9;
  v11 = *(_OWORD *)((char *)a2 + 134);
  *(_WORD *)(a3 + 124) = *((_WORD *)a2 + 75);
  *(_OWORD *)(a3 + 108) = v11;
  v12 = *(_OWORD *)((char *)a2 + 116);
  *(_WORD *)(a3 + 142) = *((_WORD *)a2 + 66);
  *(_OWORD *)(a3 + 126) = v12;
  v13 = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)(a2 + 163);
  *(_OWORD *)(a3 + 160) = v13;
  v14 = (uint16x4_t *)(a2 + 50);
  do
  {
    v15 = *(uint32x4_t **)(a3 + 240 + v3);
    v16 = vmovl_u16(v14[-14]);
    *v15 = vmovl_u16(v14[-15]);
    v15[1] = v16;
    v17 = vmovl_u16(v14[-12]);
    v15[2] = vmovl_u16(v14[-13]);
    v15[3] = v17;
    v18 = vmovl_u16(v14[-10]);
    v15[4] = vmovl_u16(v14[-11]);
    v15[5] = v18;
    v19 = vmovl_u16(v14[-8]);
    v15[6] = vmovl_u16(v14[-9]);
    v15[7] = v19;
    v20 = vmovl_u16(v14[-6]);
    v15[8] = vmovl_u16(v14[-7]);
    v15[9] = v20;
    v21 = vmovl_u16(v14[-4]);
    v15[10] = vmovl_u16(v14[-5]);
    v15[11] = v21;
    v22 = vmovl_u16(v14[-2]);
    v15[12] = vmovl_u16(v14[-3]);
    v15[13] = v22;
    v23 = vmovl_u16(v14[-1]);
    v24 = vmovl_u16(*v14);
    v3 += 24;
    v14 += 16;
    v15[14] = v23;
    v15[15] = v24;
  }
  while (v3 != 192);
  *(_WORD *)(a3 + 176) = *((_WORD *)a2 + 668);
  *(_DWORD *)(a3 + 436) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a3 + 180) = *((_OWORD *)a2 + 100);
  *(_OWORD *)(a3 + 196) = *((_OWORD *)a2 + 101);
  *(_OWORD *)(a3 + 212) = *((_OWORD *)a2 + 102);
  *(_QWORD *)(a3 + 228) = a2[206];
  *(_DWORD *)(a3 + 236) = *((_DWORD *)a2 + 414);
  *(_DWORD *)(a3 + 432) = *((_DWORD *)a2 + 857);
  result = *(__n128 *)((char *)a2 + 1660);
  v26 = *(_OWORD *)((char *)a2 + 1676);
  *(_DWORD *)(a3 + 476) = *((_DWORD *)a2 + 423);
  *(__n128 *)(a3 + 444) = result;
  *(_OWORD *)(a3 + 460) = v26;
  return result;
}

uint64_t sub_20E794D60(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t result;
  int v4;

  switch(a2)
  {
    case 0:
      result = *(_QWORD *)(a1 + 32) + 28 * a3;
      break;
    case 1:
      if (*(_BYTE *)(a1 + 28) != 1)
        sub_20E807C20();
      result = *(_QWORD *)(a1 + 56) + 28 * a3;
      break;
    case 2:
      if (*(_BYTE *)(a1 + 28) != 1)
        sub_20E807C4C();
      result = *(_QWORD *)(a1 + 80) + 28 * a3;
      break;
    case 3:
      result = *(_QWORD *)(a1 + 104) + 28 * a3;
      break;
    case 4:
      if (*(_BYTE *)(a1 + 28) != 1)
        sub_20E807C78();
      result = *(_QWORD *)(a1 + 128) + 28 * a3;
      break;
    case 5:
      v4 = *(unsigned __int8 *)(a1 + 28);
      if (v4 != 1 && (a3 || v4 != 2))
        sub_20E807CA4();
      result = *(_QWORD *)(a1 + 152) + 28 * a3;
      break;
    case 6:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E807CFC();
      if (a3)
        sub_20E807CD0();
      result = a1 + 176;
      break;
    case 7:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E807D54();
      if (a3)
        sub_20E807D28();
      result = a1 + 204;
      break;
    case 8:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E807DAC();
      if (a3)
        sub_20E807D80();
      result = a1 + 232;
      break;
    case 9:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E807E04();
      if (a3)
        sub_20E807DD8();
      result = a1 + 260;
      break;
    case 10:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E807E5C();
      if (a3)
        sub_20E807E30();
      result = a1 + 288;
      break;
    case 11:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E807EB4();
      if (a3)
        sub_20E807E88();
      result = a1 + 316;
      break;
    case 12:
      if (a3)
        sub_20E807EE0();
      result = a1 + 372;
      break;
    case 13:
      if (a3)
        sub_20E807F0C();
      result = a1 + 400;
      break;
    default:
      sub_20E807BF4();
  }
  return result;
}

uint64_t sub_20E794F54(uint64_t result, int32x4_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int16x8_t *v6;
  int32x4_t *v7;
  unint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  __int16 *v12;
  __int16 *v13;
  __int16 v14;

  if (*(_BYTE *)(result + 28) != 2)
    sub_20E807F38();
  v2 = *(unsigned __int16 *)(result + 16);
  v3 = 2 * v2 - 2;
  if (2 * (_DWORD)v2 != 2)
  {
    v4 = *(_QWORD *)(result + 792);
    if (v3 < 0x10)
    {
      v5 = 0;
LABEL_8:
      v11 = v5 - 2 * v2 + 2;
      v12 = (__int16 *)(v4 + 2 * v5 + 1050);
      v13 = &a2->i16[4 * v5];
      do
      {
        v14 = *v13;
        v13 += 4;
        v12[9] = v14;
        *v12++ = v14;
      }
      while (!__CFADD__(v11++, 1));
      return result;
    }
    v5 = v3 & 0xFFFFFFFFFFFFFFF0;
    v6 = (int16x8_t *)(v4 + 1084);
    v7 = a2 + 4;
    v8 = v3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v9 = vuzp1q_s16((int16x8_t)vuzp1q_s32(v7[-4], v7[-3]), (int16x8_t)vuzp1q_s32(v7[-2], v7[-1]));
      v10 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v7, v7[1]), (int16x8_t)vuzp1q_s32(v7[2], v7[3]));
      v6[-1] = v9;
      *v6 = v10;
      *(int16x8_t *)((char *)v6 - 34) = v9;
      *(int16x8_t *)((char *)v6 - 18) = v10;
      v6 += 2;
      v7 += 8;
      v8 -= 16;
    }
    while (v8);
    if (v5 != v3)
      goto LABEL_8;
  }
  return result;
}

void sub_20E79501C()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCrete.cpp", 400, "0 && \"Update config not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

__n128 sub_20E795048@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  __n128 v4;
  __n128 v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;

  v2 = *(_QWORD **)(a1 + 792);
  v3 = v2[106];
  v4.n128_u64[0] = v3;
  v4.n128_u64[1] = HIDWORD(v3);
  v5 = v4;
  v6 = v2[107];
  v4.n128_u64[0] = v6;
  v4.n128_u64[1] = HIDWORD(v6);
  *a2 = v5;
  a2[1] = v4;
  v5.n128_u64[0] = v2[108];
  v4.n128_u64[0] = v5.n128_u32[0];
  v4.n128_u64[1] = v5.n128_u32[1];
  result = v4;
  v8 = v2[109];
  v4.n128_u64[0] = v8;
  v4.n128_u64[1] = HIDWORD(v8);
  a2[2] = result;
  a2[3] = v4;
  return result;
}

uint64_t sub_20E795078(uint64_t a1)
{
  return *(_QWORD *)(a1 + 600);
}

uint64_t sub_20E795080(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 29);
}

uint64_t sub_20E795088(uint64_t result, int a2)
{
  if (*(_BYTE *)(result + 28) != 2)
    sub_20E807F64();
  *(_DWORD *)(*(_QWORD *)(result + 792) + 1284) = a2;
  return result;
}

void sub_20E7950B0(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
}

double sub_20E7950BC(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  double result;

  v3 = *a2;
  *(_DWORD *)(a3 + 8) = 1;
  *(_DWORD *)(a3 + 12) = v3;
  if (*a2 == 1)
  {
    v6 = 0x20000;
    v4 = 0x80000;
    v5 = 0x200000;
    goto LABEL_5;
  }
  if (*a2 == 2)
  {
    v4 = 98304;
    v5 = 0x400000;
    v6 = 98304;
LABEL_5:
    *(_QWORD *)&result = v4 | 0x10000000000000;
    *(_QWORD *)a3 = *(_QWORD *)(a1 + 824) + v5;
    *(_DWORD *)(a3 + 16) = 0;
    *(double *)(a3 + 20) = result;
    *(_DWORD *)(a3 + 28) = v6;
    return result;
  }
  result = 0.0;
  *(_QWORD *)a3 = -1;
  *(_DWORD *)(a3 + 16) = -1;
  *(_QWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 28) = 0;
  return result;
}

double sub_20E795144(uint64_t a1, uint64_t a2)
{
  double result;

  if (!a2)
    sub_20E806AB0();
  *(_OWORD *)a2 = xmmword_20E80E230;
  *(_QWORD *)&result = 0xEC000000000;
  *(_QWORD *)(a2 + 16) = 0xEC000000000;
  return result;
}

double sub_20E795174(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  double result;

  *(_QWORD *)&result = sub_20E795190(a2 + (unint64_t)*(unsigned int *)(a2 + 4) + 16, a3, 1, 1).u64[0];
  return result;
}

uint32x4_t sub_20E795190(uint64_t a1, unsigned __int8 *a2, int a3, char a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t i;
  _DWORD *v14;
  uint8x8_t v15;
  int v16;
  int v17;
  int v18;
  uint32x4_t result;

  if ((sub_20E7CB530() & 1) == 0)
    sub_20E807F90();
  if (!a3 || (a4 & 1) == 0)
    sub_20E806B60();
  v8 = *a2;
  if (v8 >= 4)
    sub_20E806B34();
  v9 = *(_DWORD *)(a1 + 4) & 0xFFFFFFFC | v8;
  *(_DWORD *)(a1 + 4) = v9;
  *(_DWORD *)(a1 + 64) &= ~1u;
  *(_DWORD *)(a1 + 128) |= 1u;
  *(_DWORD *)(a1 + 1216) |= 1u;
  v10 = a2[2];
  if (v10 >= 3)
    goto LABEL_32;
  if (a2[6] >= 3u)
    goto LABEL_33;
  v11 = a2[3];
  if (v11 > 2)
    goto LABEL_32;
  if (a2[7] > 2u)
    goto LABEL_33;
  if (a2[4] > 2u)
    goto LABEL_32;
  if (a2[8] > 2u)
    goto LABEL_33;
  if (a2[5] > 2u)
LABEL_32:
    sub_20E806B08();
  if (a2[9] > 2u)
LABEL_33:
    sub_20E806ADC();
  if (a2[2])
  {
    v9 = v9 & 0xFFFFFFF3 | (4 * (v10 & 3));
    *(_DWORD *)(a1 + 4) = v9;
    *(_QWORD *)(a1 + 3680) = *((_QWORD *)a2 + 162);
    *(_DWORD *)(a1 + 3688) = *((_DWORD *)a2 + 326);
    v11 = a2[3];
  }
  if (v11)
  {
    v9 = v9 & 0xFFFFFFCF | (16 * (v11 & 3));
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 3692) = *((_DWORD *)a2 + 327);
    *(_QWORD *)(a1 + 3696) = *((_QWORD *)a2 + 164);
  }
  if (a2[4])
  {
    v9 = v9 & 0xFFFFFF3F | ((a2[4] & 3) << 6);
    *(_DWORD *)(a1 + 4) = v9;
    *(_QWORD *)(a1 + 3704) = *((_QWORD *)a2 + 165);
    *(_DWORD *)(a1 + 3712) = *((_DWORD *)a2 + 332);
  }
  if (a2[5])
  {
    v9 = v9 & 0xFFFFFCFF | ((a2[5] & 3) << 8);
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 3716) = *((_DWORD *)a2 + 333);
    *(_QWORD *)(a1 + 3720) = *((_QWORD *)a2 + 167);
  }
  if (a2[6])
  {
    v9 = v9 & 0xFFFFF3FF | ((a2[6] & 3) << 10);
    *(_DWORD *)(a1 + 4) = v9;
    *(_QWORD *)(a1 + 3728) = *((_QWORD *)a2 + 168);
    *(_DWORD *)(a1 + 3736) = *((_DWORD *)a2 + 338);
  }
  if (a2[7])
  {
    v9 = v9 & 0xFFFFCFFF | ((a2[7] & 3) << 12);
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 3740) = *((_DWORD *)a2 + 339);
    *(_QWORD *)(a1 + 3744) = *((_QWORD *)a2 + 170);
  }
  if (a2[8])
  {
    v9 = v9 & 0xFFFF3FFF | ((a2[8] & 3) << 14);
    *(_DWORD *)(a1 + 4) = v9;
    *(_QWORD *)(a1 + 3752) = *((_QWORD *)a2 + 171);
    *(_DWORD *)(a1 + 3760) = *((_DWORD *)a2 + 344);
  }
  if (a2[9])
  {
    *(_DWORD *)(a1 + 4) = v9 & 0xFFFCFFFF | ((a2[9] & 3) << 16);
    *(_DWORD *)(a1 + 3764) = *((_DWORD *)a2 + 345);
    *(_QWORD *)(a1 + 3768) = *((_QWORD *)a2 + 173);
  }
  v12 = 1344;
  for (i = 2368; i != 2496; i += 4)
  {
    *(_DWORD *)(a1 + i) = *(_DWORD *)&a2[i - 2356];
    v14 = (_DWORD *)(a1 + v12);
    *v14 = *(_DWORD *)&a2[v12 - 1200];
    v14[1] = *(_DWORD *)&a2[v12 - 1196];
    v14[2] = *(_DWORD *)&a2[v12 - 1192];
    v14[3] = *(_DWORD *)&a2[v12 - 1188];
    v14[4] = *(_DWORD *)&a2[v12 - 1184];
    v14[5] = *(_DWORD *)&a2[v12 - 1180];
    v14[6] = *(_DWORD *)&a2[v12 - 1176];
    v14[7] = *(_DWORD *)&a2[v12 - 1172];
    v12 += 32;
  }
  *(_DWORD *)(a1 + 2512) = *((_DWORD *)a2 + 292);
  *(_DWORD *)(a1 + 2660) = *((_DWORD *)a2 + 293);
  *(_DWORD *)(a1 + 2664) = *((_DWORD *)a2 + 294);
  *(_DWORD *)(a1 + 2668) = *((_DWORD *)a2 + 295);
  *(_DWORD *)(a1 + 2516) = a2[1184];
  v15 = *(uint8x8_t *)(a2 + 1188);
  *(uint8x8_t *)(a1 + 2520) = v15;
  *(_DWORD *)(a1 + 2528) = *((_DWORD *)a2 + 300);
  *(_DWORD *)(a1 + 2544) = a2[1216];
  *(_DWORD *)(a1 + 2564) = *((_DWORD *)a2 + 306);
  *(_DWORD *)(a1 + 2580) = *((_DWORD *)a2 + 310);
  *(_DWORD *)(a1 + 2596) = a2[1256];
  *(_DWORD *)(a1 + 2616) = *((_DWORD *)a2 + 316);
  *(_DWORD *)(a1 + 2532) = *((_DWORD *)a2 + 301);
  *(_DWORD *)(a1 + 2548) = a2[1217];
  *(_DWORD *)(a1 + 2568) = *((_DWORD *)a2 + 307);
  *(_DWORD *)(a1 + 2584) = *((_DWORD *)a2 + 311);
  *(_DWORD *)(a1 + 2600) = a2[1257];
  *(_DWORD *)(a1 + 2620) = *((_DWORD *)a2 + 317);
  *(_DWORD *)(a1 + 2536) = *((_DWORD *)a2 + 302);
  *(_DWORD *)(a1 + 2552) = a2[1218];
  *(_DWORD *)(a1 + 2572) = *((_DWORD *)a2 + 308);
  *(_DWORD *)(a1 + 2588) = *((_DWORD *)a2 + 312);
  *(_DWORD *)(a1 + 2604) = a2[1258];
  *(_DWORD *)(a1 + 2624) = *((_DWORD *)a2 + 318);
  *(_DWORD *)(a1 + 2540) = *((_DWORD *)a2 + 303);
  *(_DWORD *)(a1 + 2556) = a2[1219];
  *(_DWORD *)(a1 + 2576) = *((_DWORD *)a2 + 309);
  *(_DWORD *)(a1 + 2592) = *((_DWORD *)a2 + 313);
  *(_DWORD *)(a1 + 2608) = a2[1259];
  v16 = *((_DWORD *)a2 + 323);
  v17 = *((_DWORD *)a2 + 320);
  v18 = a2[1276];
  *(_DWORD *)(a1 + 2560) = a2[1220];
  *(_DWORD *)(a1 + 2612) = a2[1260];
  *(_DWORD *)(a1 + 2628) = v18;
  *(_DWORD *)(a1 + 2632) = v17;
  v15.i32[0] = *((_DWORD *)a2 + 321);
  result = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v15));
  *(uint32x4_t *)(a1 + 2636) = result;
  *(_DWORD *)(a1 + 2652) = a2[1288];
  *(_DWORD *)(a1 + 2656) = v16;
  return result;
}

double sub_20E795540(uint64_t a1, uint64_t a2)
{
  double result;

  if (!a2)
    sub_20E806BB8();
  *(_OWORD *)a2 = xmmword_20E80DF40;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)&result = 0x100000014;
  *(_QWORD *)(a2 + 152) = 0x100000014;
  *(_DWORD *)(a2 + 160) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 244) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 328) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 412) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 496) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 580) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 664) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 748) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 832) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 916) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1000) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1084) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1168) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1252) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1336) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1420) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1504) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1588) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1672) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1756) |= 0x7FFFFFFFu;
  return result;
}

void sub_20E795664(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = a2 + *(unsigned int *)(a2 + 4);
  if (*(unsigned __int8 *)(v4 + 144) <= *(unsigned __int8 *)(a3 + 2))
    sub_20E806BE4();
  if (*(_BYTE *)a3)
  {
    v5 = v4 + 84 * *(unsigned __int8 *)(a3 + 2);
    *(_DWORD *)(v5 + 152) = *(_DWORD *)(v5 + 152) & 0x80000000 | a4 & 0x7FFFFFFF;
    *(_WORD *)(v5 + 166) = *(_WORD *)(a3 + 4);
    v6 = *(_DWORD *)(a3 + 24);
    *(_WORD *)(v5 + 164) = *(_DWORD *)(a3 + 20);
    *(_WORD *)(v5 + 162) = v6;
    v7 = *(_DWORD *)(a3 + 32);
    *(_WORD *)(v5 + 160) = *(_DWORD *)(a3 + 28);
    *(_DWORD *)(v5 + 156) = v7;
  }
}

uint64_t sub_20E7956CC(uint64_t a1, _OWORD *a2, unint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[8];

  v3 = a2[197];
  v8[4] = a2[196];
  v8[5] = v3;
  v4 = a2[199];
  v8[6] = a2[198];
  v8[7] = v4;
  v5 = a2[193];
  v8[0] = a2[192];
  v8[1] = v5;
  v6 = a2[195];
  v8[2] = a2[194];
  v8[3] = v6;
  if (a3 >= 0x20)
    sub_20E806C10();
  return *((unsigned int *)v8 + a3);
}

void *sub_20E79572C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  _OWORD v9[64];

  memcpy(v9, (const void *)(a2 + 2048), sizeof(v9));
  if (!a4)
    sub_20E806C3C();
  if (a3 >= 0x20)
    sub_20E806CC0();
  if (!a5)
    sub_20E806C68();
  if (a5 >= 9)
    sub_20E806C94();
  return memcpy(a4, &v9[2 * a3], 4 * a5);
}

void *sub_20E7957B0(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  _OWORD v9[64];

  memcpy(v9, (const void *)(a2 + 2048), sizeof(v9));
  if (!a4)
    sub_20E806CEC();
  if (a3 >= 0x20)
    sub_20E806D70();
  if (!a5)
    sub_20E806D18();
  if (a5 >= 5)
    sub_20E806D44();
  return memcpy(a4, &v9[2 * a3], 8 * a5);
}

uint64_t sub_20E795834(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v5;
  int v6;
  uint64_t result;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  if (!a4)
    sub_20E806D9C();
  *a5 = 0;
  if (a3 <= 0x7F)
  {
    v5 = *(_DWORD *)((char *)a2 + (a3 & 0xFFFFFFFFFFFFFFFCLL) + 3072);
LABEL_7:
    *(_DWORD *)a4 = v5;
    *a5 = 4;
    return 1;
  }
  if (a3 == 2004)
  {
    *a5 = 4;
    v6 = a2[818];
LABEL_11:
    *(_DWORD *)a4 = v6;
    return 1;
  }
  if (a3 == 2000)
  {
    v5 = a2[853];
    goto LABEL_7;
  }
  if (a3 - 2008 <= 0xB)
  {
    *a5 = 4;
    v6 = *(_DWORD *)((char *)a2 + (((_DWORD)a3 + 1268) & 0xFFFFFFFC));
    goto LABEL_11;
  }
  if (a3 - 6000 <= 0x3FF)
  {
    *a5 = 32;
    v8 = (_OWORD *)((char *)a2 + ((a3 - 6000) & 0xFFFFFFFFFFFFFFE0) + ((8 * (_DWORD)a3 - 14016) & 0xFFFFFFE0));
    v9 = v8[1];
    *(_OWORD *)a4 = *v8;
    *(_OWORD *)(a4 + 16) = v9;
    return 1;
  }
  result = 0;
  *((_QWORD *)&v10 + 1) = a3;
  *(_QWORD *)&v10 = a3 - 10000;
  switch((unint64_t)(v10 >> 2))
  {
    case 0uLL:
      *a5 = 4;
      v6 = a2[830];
      goto LABEL_11;
    case 1uLL:
      *a5 = 4;
      v6 = a2[832];
      goto LABEL_11;
    case 2uLL:
      *a5 = 4;
      v6 = a2[836];
      goto LABEL_11;
    case 0xDuLL:
      *a5 = 4;
      v6 = a2[828];
      goto LABEL_11;
    case 0xEuLL:
      *a5 = 4;
      v6 = a2[829];
      goto LABEL_11;
    case 0xFuLL:
      *a5 = 4;
      v6 = a2[831];
      goto LABEL_11;
    case 0x10uLL:
      *a5 = 4;
      v6 = a2[833];
      goto LABEL_11;
    case 0x11uLL:
      *a5 = 4;
      v6 = a2[834];
      goto LABEL_11;
    case 0x12uLL:
      *a5 = 4;
      v6 = a2[835];
      goto LABEL_11;
    case 0x13uLL:
      *a5 = 4;
      v6 = a2[837];
      goto LABEL_11;
    case 0x14uLL:
      *a5 = 4;
      v6 = a2[838];
      goto LABEL_11;
    case 0x15uLL:
      *a5 = 4;
      v6 = a2[839];
      goto LABEL_11;
    default:
      return result;
  }
  return result;
}

uint64_t sub_20E7959F0(uint64_t a1, _DWORD *a2)
{
  return sub_20E7959F8(a2);
}

uint64_t sub_20E7959F8(_DWORD *a1)
{
  uint64_t v1;
  _DWORD *v2;
  char *v3;
  const std::locale::facet *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  void *v44;
  char v45;
  _QWORD v46[2];
  _QWORD v47[11];
  char v48;
  uint64_t v49;
  std::locale v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  uint8_t buf[4];
  _QWORD v58[5];

  *(_QWORD *)((char *)&v58[2] + 4) = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807678();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E8086B0();
  sub_20E78F30C((uint64_t)v46, 16);
  v1 = 0;
  v2 = a1 + 519;
  do
  {
    v3 = (char *)v46 + *(_QWORD *)(v46[0] - 24);
    if (*((_DWORD *)v3 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(v46[0] - 24)));
      v4 = std::locale::use_facet(&v50, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
      std::locale::~locale(&v50);
    }
    *((_DWORD *)v3 + 36) = 48;
    sub_20E78F4CC(v47, (uint64_t)"GRF ", 4);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = sub_20E78F4CC(v5, (uint64_t)" = 0x", 5);
    v7 = *v6;
    *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 24) = 8;
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = sub_20E78F4CC(v8, (uint64_t)"\t\t", 2);
    *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 2;
    v10 = (_QWORD *)std::ostream::operator<<();
    sub_20E78F4CC(v10, (uint64_t)" = (", 4);
    v11 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v12 = *v11;
    *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v11 + *(_QWORD *)(v12 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v13 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v14 = *v13;
    *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v13 + *(_QWORD *)(v14 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v15 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v16 = *v15;
    *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v15 + *(_QWORD *)(v16 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v17 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v18 = *v17;
    *(_DWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v17 + *(_QWORD *)(v18 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v19 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v20 = *v19;
    *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v19 + *(_QWORD *)(v20 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v21 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v22 = *v21;
    *(_DWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 8) = *(_DWORD *)((_BYTE *)v21 + *(_QWORD *)(*v21 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v21 + *(_QWORD *)(v22 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v23 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v24 = *v23;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(*v23 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v23 + *(_QWORD *)(v24 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v25 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v26 = *v25;
    *(_DWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 8) = *(_DWORD *)((_BYTE *)v25 + *(_QWORD *)(*v25 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v25 + *(_QWORD *)(v26 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)")", 1);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str();
      sub_20E807594(&v45, &v44, buf, v58);
    }
    BYTE1(v56) = 0;
    LOBYTE(v50.__locale_) = 0;
    std::stringbuf::str();
    if (SBYTE1(v56) < 0)
      operator delete(v50.__locale_);
    ++v1;
    v2 += 8;
  }
  while (v1 != 32);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v29 = a1[800];
    v30 = a1[807];
    v50.__locale_ = (std::locale::__imp *)67109888;
    v51 = 1024;
    v52 = v29;
    v53 = 1024;
    v54 = 0;
    v55 = 1024;
    v56 = v30;
    _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      goto LABEL_57;
    }
  }
  else if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    goto LABEL_15;
  }
  v31 = a1[801];
  v32 = a1[808];
  v50.__locale_ = (std::locale::__imp *)0x104000400;
  v51 = 1024;
  v52 = v31;
  v53 = 1024;
  v54 = 1;
  v55 = 1024;
  v56 = v32;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_16:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_17;
    goto LABEL_58;
  }
LABEL_57:
  v33 = a1[802];
  v34 = a1[809];
  v50.__locale_ = (std::locale::__imp *)0x204000400;
  v51 = 1024;
  v52 = v33;
  v53 = 1024;
  v54 = 2;
  v55 = 1024;
  v56 = v34;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    goto LABEL_59;
  }
LABEL_58:
  v35 = a1[803];
  v36 = a1[810];
  v50.__locale_ = (std::locale::__imp *)0x304000400;
  v51 = 1024;
  v52 = v35;
  v53 = 1024;
  v54 = 3;
  v55 = 1024;
  v56 = v36;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_18:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    goto LABEL_60;
  }
LABEL_59:
  v37 = a1[804];
  v38 = a1[811];
  v50.__locale_ = (std::locale::__imp *)0x404000400;
  v51 = 1024;
  v52 = v37;
  v53 = 1024;
  v54 = 4;
  v55 = 1024;
  v56 = v38;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_19:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    goto LABEL_61;
  }
LABEL_60:
  v39 = a1[805];
  v40 = a1[812];
  v50.__locale_ = (std::locale::__imp *)0x504000400;
  v51 = 1024;
  v52 = v39;
  v53 = 1024;
  v54 = 5;
  v55 = 1024;
  v56 = v40;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_20:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_61:
  v41 = a1[806];
  v42 = a1[813];
  v50.__locale_ = (std::locale::__imp *)0x604000400;
  v51 = 1024;
  v52 = v41;
  v53 = 1024;
  v54 = 6;
  v55 = 1024;
  v56 = v42;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
LABEL_21:
    sub_20E808620();
LABEL_22:
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E8085AC();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E808538();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E8084CC();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E808460();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E8083F4();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E808388();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80831C();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E8082B0();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E808244();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E8081D8();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80816C();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E808100();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E808094();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E808028();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807FBC();
  v46[0] = *MEMORY[0x24BEDB7F0];
  v27 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v47[0] = v27;
  v47[1] = MEMORY[0x24BEDB848] + 16;
  if (v48 < 0)
    operator delete((void *)v47[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC4774](&v49);
}

void sub_20E7964C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E78F444((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7964D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::locale::~locale((std::locale *)(v6 - 160));
  sub_20E78F444((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7964F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  if (*(char *)(v6 - 137) < 0)
  {
    operator delete(*(void **)(v6 - 160));
    sub_20E78F444((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_20E78F444((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E796570(_QWORD *a1)
{
  sub_20E79659C(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E796594()
{
  return 4095;
}

uint64_t sub_20E79659C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &off_24C9A8770;
  v2 = a1[99];
  if (v2)
  {
    a1[100] = v2;
    MEMORY[0x212BC47C8]();
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  return nullsub_13(a1);
}

void sub_20E79663C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCBEEA4E1A08AD8F3 * ((v4 - v5) >> 6) >= a2)
  {
    if (a2)
    {
      v12 = 3776 * ((3776 * a2 - 3776) / 0xEC0) + 3776;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCBEEA4E1A08AD8F3 * ((v5 - *a1) >> 6);
    v8 = v7 + a2;
    if (v7 + a2 > 0x115B1E5F75270DLL)
      sub_20E78D874();
    v9 = 0xCBEEA4E1A08AD8F3 * ((v4 - v6) >> 6);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x8AD8F2FBA9386)
      v10 = 0x115B1E5F75270DLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x115B1E5F75270DLL)
        sub_20E78D888();
      v11 = (char *)operator new(3776 * v10, (std::align_val_t)0x40uLL);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[3776 * v7];
    v14 = &v11[3776 * v10];
    v15 = 3776 * ((3776 * a2 - 3776) / 0xEC0) + 3776;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v5 -= 3776;
        v13 -= 3776;
        memcpy(v13, v5, 0xEC0uLL);
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      JUMPOUT(0x212BC47C8);
  }
}

uint64_t sub_20E796810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5, char a6)
{
  uint64_t result;
  uint64_t **v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  BOOL v24;
  unint64_t *v25;
  _BYTE *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  int v33;
  int v34;
  int v35;
  uint64_t i;
  __int128 v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  unsigned int v41;
  unsigned int v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t **v71;
  uint64_t **v72;
  unsigned int v73;
  _DWORD *v74;
  uint64_t *v75;
  uint64_t **v76;
  uint64_t **v77;
  signed int v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v94;
  uint64_t **v95;
  uint64_t **v96;
  int v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  uint64_t *v103;
  int v104;
  _QWORD *v105;
  int v106;
  uint64_t **v107;
  _DWORD *v108;
  uint64_t *v109;
  uint64_t *v110;
  unsigned int v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t **v115;
  _QWORD *v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  char *v124;
  uint64_t __sz;
  size_t __sza;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t **v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  void *__p;
  char *v137;
  char *v138;
  uint64_t **v139;
  uint64_t *v140;
  uint64_t v141;
  _OWORD v142[8];
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  char *v147;
  char *v148;
  char *v149;
  uint8_t buf[8];
  char *v151;
  char *v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  result = kdebug_trace();
  if (*(_BYTE *)(a3 + 89) | *(_BYTE *)(a3 + 92))
  {
    if (!*(_BYTE *)(a3 + 92))
    {
      if (*(_DWORD *)(a1 + 184))
      {
        v20 = 0;
        v21 = (_QWORD *)(*(_QWORD *)(a1 + 192) + 64);
        do
        {
          *v21 &= ~0x8000000000000000;
          v21 += 9;
          ++v20;
        }
        while (v20 < *(unsigned int *)(a1 + 184));
      }
      if (*(_DWORD *)(a1 + 160))
      {
        v22 = 0;
        v23 = (_QWORD *)(*(_QWORD *)(a1 + 168) + 64);
        do
        {
          *v23 |= 0x8000000000000000;
          v23 += 9;
          ++v22;
        }
        while (v22 < *(unsigned int *)(a1 + 160));
      }
      sub_20E7976B0(a1, (unsigned int *)a3);
      if (*(_BYTE *)(a3 + 76))
        v24 = *(_BYTE *)(a3 + 90) == 0;
      else
        v24 = 1;
      if (v24)
        goto LABEL_171;
LABEL_170:
      v118 = *(unsigned __int16 *)(a3 + 50);
      v119 = a3;
      v120 = *(unsigned __int16 *)(a3 + 20);
      *(_QWORD *)&v143 = v120;
      *((_QWORD *)&v143 + 1) = v120;
      *(_QWORD *)&v144 = v120;
      *((_QWORD *)&v144 + 1) = v120;
      *(_QWORD *)&v145 = v120;
      *((_QWORD *)&v145 + 1) = v120;
      *(_QWORD *)&v146 = v120;
      *((_QWORD *)&v146 + 1) = v120;
      (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 96))(v142, a2);
      sub_20E7E7700((uint64_t)v142, *(_QWORD *)(a1 + 296) + 240, 2 * v118, v120, (uint64_t)&v143, *(float *)(v119 + 80));
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 112))(a2, &v143);
LABEL_171:
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 136))(a2, *(unsigned int *)(*(_QWORD *)(a1 + 296) + 180));
      return kdebug_trace();
    }
    v134 = a1;
    v13 = (uint64_t **)(a4 + 8);
    sub_20E7938D0(a4, *(_QWORD **)(a4 + 8));
    *(_QWORD *)a4 = a4 + 8;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (*(_BYTE *)(a3 + 68) != 2)
      sub_20E8087A0();
    v130 = a5;
    v123 = a2;
    if (!*(_BYTE *)(a3 + 76))
      sub_20E80871C();
    v14 = *(unsigned int *)(v134 + 184);
    v15 = *(unsigned int *)(v134 + 160);
    v16 = *(_DWORD *)(v134 + 176);
    v17 = *(_DWORD *)(v134 + 152);
    if (v16 >= v17 && *(_DWORD *)(a3 + 24))
      sub_20E808774();
    v127 = a3;
    if (v17 != *(_DWORD *)(v134 + 180) + v16)
      sub_20E808748();
    v18 = (v15 + v14);
    v19 = (int *)operator new(0x204uLL);
    bzero(v19, 0x204uLL);
    if ((_DWORD)v18)
    {
      v124 = (char *)operator new(2 * v18);
      bzero(v124, 2 * v18);
      if (!(_DWORD)v14)
        goto LABEL_27;
    }
    else
    {
      v124 = 0;
      if (!(_DWORD)v14)
        goto LABEL_27;
    }
    v25 = (unint64_t *)(*(_QWORD *)(v134 + 192) + 64);
    v26 = v124 + 1;
    v27 = v14;
    do
    {
      v28 = *v25;
      v29 = ((*v25 >> 44) & 0xF) + (*v25 >> 63);
      *(v26 - 1) = (*v25 >> 37) & 7;
      *v26 = v29;
      *v25 &= ~0x8000000000000000;
      v25 += 9;
      if (v29 - 1 >= 8)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 148, "scale > 0 && scale <= kMaxNumOfHwScalesMinus2", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v30 = 8 * ((v28 >> 37) & 7) + v29;
      ++v19[v30];
      v26 += 2;
      --v27;
    }
    while (v27);
LABEL_27:
    if ((_DWORD)v15)
    {
      v31 = &v124[2 * v14 + 1];
      v32 = (_QWORD *)(*(_QWORD *)(v134 + 168) + 64);
      do
      {
        v33 = (*v32 >> 37) & 7 | 8;
        v34 = ((*v32 >> 44) & 0xF) + (*v32 >> 63);
        *(v31 - 1) = (*v32 >> 37) & 7 | 8;
        *v31 = v34;
        *v32 |= 0x8000000000000000;
        v32 += 9;
        if ((v34 - 1) >= 8)
        {
          sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 167, "scale > 0 && scale <= kMaxNumOfHwScalesMinus2", (void (*)(void *))sub_20E803DA4);
          abort();
        }
        ++v19[v34 + 8 * v33];
        v31 += 2;
        --v15;
      }
      while (v15);
    }
    v35 = *v19;
    for (i = 1; i != 129; ++i)
    {
      v35 += v19[i];
      v19[i] = v35;
    }
    v147 = 0;
    v148 = 0;
    v149 = 0;
    if ((_DWORD)v18)
    {
      v147 = (char *)operator new(8 * v18);
      v149 = &v147[8 * v18];
      bzero(v147, 8 * v18);
      v148 = v149;
    }
    __sz = 8 * v18;
    v128 = a6;
    v133 = v18;
    *(_QWORD *)&v37 = -1;
    *((_QWORD *)&v37 + 1) = -1;
    v143 = v37;
    v144 = v37;
    v145 = v37;
    v146 = v37;
    memset(v142, 0, sizeof(v142));
    v38 = *(char *)(v127 + 132);
    if (v38 > 2)
      v39 = 96;
    else
      v39 = dword_20E80E2A0[v38];
    v40 = *(uint64_t **)(v134 + 328);
    v41 = *(_DWORD *)(v134 + 324);
    v42 = sub_20E79B4E8(*(_DWORD *)(v127 + 24));
    if (v42)
    {
      v43 = 4 * v42;
      v132 = (char *)operator new(v43);
      bzero(v132, v43);
      v131 = (char *)operator new(v43);
      bzero(v131, v43);
      v44 = v39;
      if (v39 > v41)
        goto LABEL_56;
    }
    else
    {
      v131 = 0;
      v132 = 0;
      v44 = v39;
      if (v39 > v41)
        goto LABEL_56;
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    LODWORD(v48) = v41 / v39;
    if (v41 / v39 <= 1)
      v48 = 1;
    else
      v48 = v48;
    v49 = v40;
    do
    {
      v50 = *v49;
      if ((~*v49 & 0x3FFF0000000000) == 0)
        break;
      v49 = (uint64_t *)((char *)v49 + 4 * v44);
      v51 = v50 >= 0;
      if (v50 < 0)
        v52 = v46;
      else
        v52 = v47;
      v53 = v132;
      if (v51)
        ++v47;
      else
        v53 = v131;
      if (!v51)
        ++v46;
      *(_DWORD *)&v53[4 * v52] = v45++;
    }
    while (v48 != v45);
LABEL_56:
    if ((_DWORD)v18)
    {
      v135 = operator new(__sz);
      bzero(v135, __sz);
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v57 = v147;
      v58 = (unsigned __int8 *)(v124 + 1);
      do
      {
        v63 = *(v58 - 1);
        v64 = &v19[8 * v63 + *v58];
        v65 = *(v64 - 1);
        *(v64 - 1) = v65 + 1;
        *(_QWORD *)&v57[8 * v65] = v54;
        v62 = *((_DWORD *)&v143 + v63);
        if (v62 == -1 || (v59 = *((_QWORD *)v142 + v63), v59 == 32))
        {
          v59 = 0;
          v60 = &v132[4 * v55];
          v61 = &v131[4 * v56];
          if (v54 < v14)
            ++v55;
          else
            ++v56;
          if (v54 >= v14)
            v60 = v61;
          v62 = *(_DWORD *)v60;
          *((_DWORD *)&v143 + v63) = v62;
        }
        v135[v65] = v59 + v62 * v44 + 64;
        v58 += 2;
        *((_QWORD *)v142 + v63) = v59 + 1;
        ++v54;
      }
      while (v18 != v54);
      v66 = 0;
      v140 = 0;
      v141 = 0;
      v139 = &v140;
      v67 = *((_DWORD *)v40 + *v135);
LABEL_82:
      v71 = &v140;
      v72 = &v140;
      if (!v67)
      {
LABEL_179:
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 281, "assigned_tid != 0 && \"All TIDs are expected to be assigned by the LACC program\"", (void (*)(void *))sub_20E803DA4);
LABEL_176:
        abort();
      }
LABEL_83:
      v74 = operator new(0x20uLL);
      v74[7] = v67;
      *(_QWORD *)v74 = 0;
      *((_QWORD *)v74 + 1) = 0;
      *((_QWORD *)v74 + 2) = v72;
      *v71 = (uint64_t *)v74;
      if (*v139)
      {
        v139 = (uint64_t **)*v139;
        v74 = *v71;
      }
      sub_20E793910(v140, (uint64_t *)v74);
      ++v141;
      while (1)
      {
        v75 = *v13;
        v76 = (uint64_t **)(a4 + 8);
        v77 = (uint64_t **)(a4 + 8);
        if (*v13)
        {
          while (1)
          {
            while (1)
            {
              v77 = (uint64_t **)v75;
              v78 = *((_DWORD *)v75 + 7);
              if ((int)v67 >= v78)
                break;
              v75 = *v77;
              v76 = v77;
              if (!*v77)
                goto LABEL_93;
            }
            if (v78 >= (int)v67)
              break;
            v75 = v77[1];
            if (!v75)
            {
              v76 = v77 + 1;
              goto LABEL_93;
            }
          }
          v79 = v77;
        }
        else
        {
LABEL_93:
          v79 = operator new(0x28uLL);
          v79[7] = v67;
          v79[8] = 0;
          *(_QWORD *)v79 = 0;
          *((_QWORD *)v79 + 1) = 0;
          *((_QWORD *)v79 + 2) = v77;
          *v76 = (uint64_t *)v79;
          v80 = **(_QWORD **)a4;
          v81 = (uint64_t *)v79;
          if (v80)
          {
            *(_QWORD *)a4 = v80;
            v81 = *v76;
          }
          sub_20E793910(*(uint64_t **)(a4 + 8), v81);
          ++*(_QWORD *)(a4 + 16);
        }
        v79[8] = v66;
        sub_20E7ABE6C(v134, v67, v66++);
        if (v66 == v133)
          break;
        v70 = v140;
        v67 = *((_DWORD *)v40 + v135[v66]);
        if (!v140)
          goto LABEL_82;
        v68 = v140;
        do
        {
          v69 = *((_DWORD *)v68 + 7);
          if (v67 >= v69)
          {
            if (v69 >= v67)
            {
              sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 278, "!duplicate_tid && \"duplicate tid is unexpected\"", (void (*)(void *))sub_20E803DA4);
              goto LABEL_176;
            }
            ++v68;
          }
          v68 = (uint64_t *)*v68;
        }
        while (v68);
        if (!v67)
          goto LABEL_179;
        while (1)
        {
          while (1)
          {
            v72 = (uint64_t **)v70;
            v73 = *((_DWORD *)v70 + 7);
            if (v67 >= v73)
              break;
            v70 = *v72;
            v71 = v72;
            if (!*v72)
              goto LABEL_83;
          }
          if (v73 >= v67)
            break;
          v70 = v72[1];
          if (!v70)
          {
            v71 = v72 + 1;
            goto LABEL_83;
          }
        }
      }
    }
    else
    {
      v135 = 0;
      v140 = 0;
      v141 = 0;
      v139 = &v140;
    }
    if ((v128 & 1) != 0)
    {
      v82 = 0;
      goto LABEL_147;
    }
    v129 = *(_QWORD *)(v134 + 344);
    v83 = sub_20E79B4C8(*(_DWORD *)(v127 + 24));
    v84 = v83;
    v85 = *(unsigned int *)(v127 + 24);
    v151 = 0;
    v152 = 0;
    *(_QWORD *)buf = 0;
    if ((_DWORD)v85)
    {
      v86 = (char *)operator new(4 * v85);
      v87 = &v86[4 * v85];
      *(_QWORD *)buf = v86;
      v152 = v87;
      memset(v86, 255, 4 * v85);
      v151 = v87;
      v88 = (char *)operator new(4 * v85);
      __p = v88;
      v138 = &v88[4 * v85];
      memset(v88, 255, 4 * v85);
      v137 = v138;
      if (v84)
      {
LABEL_105:
        v89 = 0;
        v82 = 0;
        __sza = v84;
        v122 = "curr_idx < num_descs && \"invalid current index\"";
        while (1)
        {
          v90 = (uint64_t *)(v129 + 16 * v89);
          v91 = v90[1];
          if (v91 >> 61 == 7)
          {
            v92 = *v90;
            if ((v91 & 0x1FFFFFFFFFFFFFFFLL) == 0x1FFFFFFFFFFFFFFFLL && v92 == -1)
            {
LABEL_143:
              v88 = (char *)__p;
              if (__p)
                goto LABEL_144;
              goto LABEL_145;
            }
          }
          v94 = *v13;
          v95 = (uint64_t **)(a4 + 8);
          v96 = (uint64_t **)(a4 + 8);
          if (*v13)
          {
            while (1)
            {
              while (1)
              {
                v96 = (uint64_t **)v94;
                v97 = *((_DWORD *)v94 + 7);
                if (v97 <= (int)v91)
                  break;
                v94 = *v96;
                v95 = v96;
                if (!*v96)
                  goto LABEL_120;
              }
              if (v97 >= (int)v91)
                break;
              v94 = v96[1];
              if (!v94)
              {
                v95 = v96 + 1;
                goto LABEL_120;
              }
            }
            v98 = v96;
            v101 = v130[1];
            if (!v101)
            {
LABEL_106:
              ++v82;
              goto LABEL_107;
            }
          }
          else
          {
LABEL_120:
            v98 = operator new(0x28uLL);
            v98[7] = v91;
            v98[8] = 0;
            *(_QWORD *)v98 = 0;
            *((_QWORD *)v98 + 1) = 0;
            *((_QWORD *)v98 + 2) = v96;
            *v95 = (uint64_t *)v98;
            v99 = **(_QWORD **)a4;
            v100 = (uint64_t *)v98;
            if (v99)
            {
              *(_QWORD *)a4 = v99;
              v100 = *v95;
            }
            sub_20E793910(*(uint64_t **)(a4 + 8), v100);
            ++*(_QWORD *)(a4 + 16);
            v101 = v130[1];
            if (!v101)
              goto LABEL_106;
          }
          v102 = v98[8];
          v103 = v101;
          while (1)
          {
            v104 = *((_DWORD *)v103 + 7);
            if (v104 <= (int)v91)
              break;
LABEL_126:
            v103 = (uint64_t *)*v103;
            if (!v103)
              goto LABEL_106;
          }
          if (v104 < (int)v91)
            break;
          do
          {
            while (1)
            {
              v105 = v101;
              v106 = *((_DWORD *)v101 + 7);
              if (v106 > (int)v91)
                break;
              if (v106 >= (int)v91)
              {
                v108 = v105;
                if (v102 < v133)
                  goto LABEL_141;
LABEL_180:
                v121 = 324;
LABEL_182:
                sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", v121, v122, (void (*)(void *))sub_20E803DA4);
                abort();
              }
              v101 = (uint64_t *)v105[1];
              if (!v101)
              {
                v107 = (uint64_t **)(v105 + 1);
                goto LABEL_136;
              }
            }
            v101 = (uint64_t *)*v105;
          }
          while (*v105);
          v107 = (uint64_t **)v105;
LABEL_136:
          v108 = operator new(0x28uLL);
          v108[7] = v91;
          v108[8] = 0;
          *(_QWORD *)v108 = 0;
          *((_QWORD *)v108 + 1) = 0;
          *((_QWORD *)v108 + 2) = v105;
          *v107 = (uint64_t *)v108;
          v109 = (uint64_t *)**v130;
          v110 = (uint64_t *)v108;
          if (v109)
          {
            *v130 = v109;
            v110 = *v107;
          }
          sub_20E793910(v130[1], v110);
          v130[2] = (uint64_t *)((char *)v130[2] + 1);
          if (v102 >= v133)
            goto LABEL_180;
LABEL_141:
          v111 = v108[8];
          if (v111 >= *(_DWORD *)(v127 + 24))
          {
            v121 = 325;
            v122 = "prev_idx < config.maxNumberOfKeypoints && \"invalid prev index\"";
            goto LABEL_182;
          }
          sub_20E79913C((uint64_t *)buf, (uint64_t *)&__p, v102, v111, *(_DWORD *)(v129 + 16 * v89 + 8));
          sub_20E7ABE2C(v134, v102, v111);
LABEL_107:
          if (++v89 == __sza)
            goto LABEL_143;
        }
        ++v103;
        goto LABEL_126;
      }
    }
    else
    {
      v88 = 0;
      __p = 0;
      v137 = 0;
      v138 = 0;
      if (v83)
        goto LABEL_105;
    }
    v82 = 0;
    if (v88)
    {
LABEL_144:
      v137 = v88;
      operator delete(v88);
    }
LABEL_145:
    if (*(_QWORD *)buf)
    {
      v151 = *(char **)buf;
      operator delete(*(void **)buf);
    }
LABEL_147:
    sub_20E7978A0(v134);
    sub_20E797964(v134, &v147);
    v112 = *v130;
    *v130 = *(uint64_t **)a4;
    *(_QWORD *)a4 = v112;
    v113 = v130[1];
    v114 = v130[2];
    *(_OWORD *)(v130 + 1) = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v113;
    *(_QWORD *)(a4 + 16) = v114;
    if (v130[2])
      v115 = (uint64_t **)(v130[1] + 2);
    else
      v115 = v130;
    *v115 = (uint64_t *)(v130 + 1);
    v116 = (_QWORD *)(*(_QWORD *)(a4 + 8) + 16);
    if (!v114)
      v116 = (_QWORD *)a4;
    *v116 = v13;
    if (*(_DWORD *)(v134 + 372) != *(_DWORD *)(*(_QWORD *)(v134 + 400) + 4))
    {
      sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwCreteUtils.cpp", 341, "hw_data_handler.GetNumTids() == hw_data_handler.GetNumKeypoints() && \"Number of TIDs should match the number of KPs\"", (void (*)(void *))sub_20E803DA4);
      abort();
    }
    a1 = v134;
    if (v82 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v82;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "[AppleCVHWA] skipped %u matches potentially due to frame drop - matches correspond to new untracked features in dropped frame", buf, 8u);
    }
    sub_20E7938D0((uint64_t)&v139, v140);
    if (v135)
      operator delete(v135);
    a2 = v123;
    if (v131)
      operator delete(v131);
    if (v132)
      operator delete(v132);
    if (v147)
    {
      v148 = v147;
      operator delete(v147);
    }
    if (v124)
      operator delete(v124);
    operator delete(v19);
    a3 = v127;
    if (*(_BYTE *)(v127 + 76))
      v117 = *(_BYTE *)(v127 + 90) == 0;
    else
      v117 = 1;
    if (v117)
      goto LABEL_171;
    goto LABEL_170;
  }
  return result;
}

void sub_20E7974E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *__p,void *a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25)
{
  void *v25;
  uint64_t v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(_QWORD *)(v26 - 120) = v28;
    operator delete(v28);
    sub_20E7938D0((uint64_t)&a24, a25);
    if (!__p)
    {
LABEL_3:
      v29 = a16;
      if (!a16)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    sub_20E7938D0((uint64_t)&a24, a25);
    if (!__p)
      goto LABEL_3;
  }
  operator delete(__p);
  v29 = a16;
  if (!a16)
  {
LABEL_4:
    v30 = a17;
    if (!a17)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v29);
  v30 = a17;
  if (!a17)
  {
LABEL_5:
    v31 = *(void **)(v26 - 152);
    if (!v31)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v30);
  v31 = *(void **)(v26 - 152);
  if (!v31)
  {
LABEL_6:
    v32 = a11;
    if (!a11)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(v26 - 144) = v31;
  operator delete(v31);
  v32 = a11;
  if (!a11)
  {
LABEL_7:
    operator delete(v25);
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete(v32);
  operator delete(v25);
  _Unwind_Resume(a1);
}

void sub_20E7976B0(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v7;
  void *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  int64x2_t *v16;
  uint64_t v17;
  int64x2_t v18;
  void *__p;
  char *v20;
  uint64_t v21;
  void *v22;
  int v23[2];
  uint64_t v24;

  v2 = *(_DWORD *)(a1 + 176);
  v3 = *(_DWORD *)(a1 + 152);
  if (v2 >= v3 && a2[6] != 0)
    sub_20E8087F8();
  if (v3 != *(_DWORD *)(a1 + 180) + v2)
    sub_20E8087CC();
  v22 = 0;
  *(_QWORD *)v23 = 0;
  v24 = 0;
  v7 = *(_QWORD *)(a1 + 168);
  sub_20E79D24C(*(_QWORD *)(a1 + 192), *(unsigned int *)(a1 + 184), (char **)&v22);
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20E79D24C(v7, *(unsigned int *)(a1 + 160), (char **)&__p);
  v8 = *(void **)v23;
  v9 = (char *)__p;
  v10 = v20;
  if (__p != v20)
  {
    v11 = ((*(_QWORD *)v23 - (_QWORD)v22) >> 3);
    v12 = v20 - (_BYTE *)__p - 8;
    v13 = (char *)__p;
    if (v12 < 0x18)
      goto LABEL_23;
    v14 = (v12 >> 3) + 1;
    v13 = (char *)__p + 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
    v15 = vdupq_n_s64(v11);
    v16 = (int64x2_t *)((char *)__p + 16);
    v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v18 = vaddq_s64(*v16, v15);
      v16[-1] = vaddq_s64(v16[-1], v15);
      *v16 = v18;
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      do
      {
        *(_QWORD *)v13 += v11;
        v13 += 8;
      }
      while (v13 != v10);
    }
  }
  sub_20E798310((unint64_t *)&v22, v8, v9, v10, (v10 - v9) >> 3);
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
  sub_20E7978A0(a1);
  if (*((_BYTE *)a2 + 77))
    sub_20E797C3C(*(_QWORD *)(a1 + 288), *(unsigned int *)(a1 + 284), *(_QWORD *)(a1 + 168), *(unsigned int *)(a1 + 160), *((unsigned __int16 *)a2 + 16), *((unsigned __int16 *)a2 + 17), *((unsigned __int16 *)a2 + 18), a2[6], *a2, a2[1], (char **)&v22);
  sub_20E797964(a1, &v22);
  if (v22)
  {
    *(_QWORD *)v23 = v22;
    operator delete(v22);
  }
}

void sub_20E797848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20E7978A0(uint64_t a1)
{
  void *result;
  uint64_t v3;
  const void *v4;
  unsigned int v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 20) != 2)
    sub_20E808850();
  if (!*(_BYTE *)(a1 + 385) && !*(_BYTE *)(a1 + 386))
    sub_20E808824();
  result = (void *)sub_20E7A97E4(a1);
  v3 = *(_QWORD *)(a1 + 192);
  if ((_DWORD)result)
  {
    *(_QWORD *)(a1 + 288) = v3;
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 176) = 0;
  }
  else
  {
    v4 = *(const void **)(a1 + 168);
    v5 = *(_DWORD *)(a1 + 184);
    v6 = *(unsigned int *)(a1 + 160);
    *(_QWORD *)(a1 + 288) = v3;
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 284) = v6 + v5;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    if ((_DWORD)v6)
      return memcpy((void *)(v3 + 72 * v5), v4, 72 * v6);
  }
  return result;
}

void sub_20E797964(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  float *v12;
  float32x2_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  __int128 *v19;
  BOOL v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float v26;
  float v27;
  unint64_t __n;
  void *v29;
  unint64_t v30;
  char *__src;
  uint64_t v32;
  uint64_t v33;

  if (*(_BYTE *)(a1 + 20) != 2)
    sub_20E8088A8();
  v3 = (*(_DWORD *)(a1 + 160) + *(_DWORD *)(a1 + 284));
  v4 = a2[1];
  v5 = v4 - *a2;
  v6 = v5 >> 3;
  if (v5 >> 3 > v3)
    sub_20E80887C();
  v33 = *(_QWORD *)(a1 + 288);
  v32 = *(_QWORD *)(a1 + 168);
  v7 = *(_OWORD **)(a1 + 144);
  if (v4 == *a2)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4) = (unint64_t)v5 >> 3;
  }
  else
  {
    if ((unint64_t)v5 >= 0x5555555555555551)
      sub_20E78D874();
    v29 = *(void **)(a1 + 128);
    v30 = v4 - *a2;
    v9 = (char *)operator new(24 * v6);
    v10 = (v3 - 1);
    __n = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v9, __n);
    v11 = 0;
    if (v6 <= 1)
      v6 = 1;
    __src = v9;
    v12 = (float *)(v9 + 12);
    v13 = (float32x2_t)vdup_n_s32(0x3C800000u);
    do
    {
      v17 = *(_QWORD *)(*a2 + 8 * v11);
      if (v17 > v10)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/include/VIO/HWFeatureDetection/HwIspDataHandler.h", 389, "idx[i] <= max_valid_idx", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v18 = *(unsigned int *)(a1 + 284);
      v19 = (__int128 *)(v33 + 72 * v17);
      v20 = v17 >= v18;
      v21 = (__int128 *)(v32 + 72 * (v17 - v18));
      if (v20)
        v22 = v21;
      else
        v22 = v19;
      v23 = *((_QWORD *)v22 + 8);
      v24.i64[0] = v23;
      v24.i64[1] = (unint64_t)v23 >> 16;
      v25.i64[0] = 0xFFFFLL;
      v25.i64[1] = 0xFFFFLL;
      *(float32x2_t *)(v12 - 3) = vmul_f32(vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8(v24, v25))), v13);
      v26 = pow(1.41421356, (float)((float)BYTE5(v23) * 0.0625));
      *((_BYTE *)v12 + 4) = v23 < 0;
      v27 = (double)BYTE4(v23) * 3.14159265 * 0.0078125;
      *(v12 - 1) = v27;
      *v12 = v26;
      v12[2] = (float)(HIWORD(v23) & 0x7FFF);
      if (*(_BYTE *)(a1 + 388))
      {
        sub_20E7ABEA8((unsigned __int8 *)v22, (uint64_t)v7);
      }
      else
      {
        v14 = *v22;
        v15 = v22[1];
        v16 = v22[3];
        v7[2] = v22[2];
        v7[3] = v16;
        *v7 = v14;
        v7[1] = v15;
      }
      ++v11;
      v7 += 4;
      v12 += 6;
    }
    while (v6 != v11);
    memcpy(v29, __src, __n);
    *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4) = v30 >> 3;
    operator delete(__src);
  }
}

void sub_20E797C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E797C3C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unint64_t a9, unint64_t a10, char **a11)
{
  unint64_t v11;
  char **v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  uint64_t *v22;
  float v23;
  uint64_t *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t i;
  char *v51;
  float *v52;
  float *v53;
  unint64_t v54;
  unint64_t v55;
  float *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  char *v80;
  char *v81;
  void *v82;
  char *v83;
  void *v84;
  void *v85;
  unint64_t v88;
  uint64_t v89;
  unint64_t v91;
  uint64_t v92;
  void *__p;
  char *v94;

  if (a5 != 1 || a6 != 1)
    sub_20E80892C();
  if (a7 <= 0)
    sub_20E808900();
  v11 = a2;
  v12 = a11;
  v13 = a4 + a2;
  if (a4 + a2 != (v12[1] - *v12) >> 3)
    sub_20E8088D4();
  v92 = a7;
  sub_20E791D10(&__p, a7);
  if (v13)
  {
    v15 = v13;
    v16 = 0;
    v88 = v11;
    v89 = a3;
    do
    {
      while (1)
      {
        v17 = *(_QWORD *)&(*v12)[8 * v16];
        v18 = a1;
        if (v17 < v11)
        {
          v19 = 0;
        }
        else
        {
          v18 = a3;
          v19 = v11;
        }
        v20 = *(_QWORD *)(v18 + 72 * (v17 - v19) + 64);
        if (vcvtms_s32_f32((float)((float)WORD1(v20) / (float)a10) * 0.015625)
           + vcvtms_s32_f32((float)((float)(unsigned __int16)v20 / (float)a9) * 0.015625))
        {
          sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/include/VIO/Hardware/KeyPointAndDescriptorGeneratorUtils.h", 97, "bin_index == 0 && \"bin index should always be 0\"", (void (*)(void *))sub_20E803DA4);
          abort();
        }
        v21 = (float)((float)BYTE5(v20) * 0.0625) * 0.25;
        if (v21 > (float)(a7 - 1))
          v21 = (float)(a7 - 1);
        v22 = (uint64_t *)((char *)__p + 24 * (int)vcvtms_s32_f32(v21));
        v23 = (float)(HIWORD(v20) & 0x7FFF);
        v24 = v22 + 1;
        v25 = (char *)v22[1];
        v26 = v22[2];
        if ((unint64_t)v25 >= v26)
          break;
        *(float *)v25 = v23;
        *((_DWORD *)v25 + 1) = v17;
        v12 = a11;
        *v24 = (uint64_t)(v25 + 8);
        if (++v16 == v15)
          goto LABEL_37;
      }
      v27 = (char *)*v22;
      v28 = (uint64_t)&v25[-*v22];
      v29 = v28 >> 3;
      v30 = (v28 >> 3) + 1;
      if (v30 >> 61)
        sub_20E78D874();
      v31 = v26 - (_QWORD)v27;
      if (v31 >> 2 > v30)
        v30 = v31 >> 2;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
        v32 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        if (v32 >> 61)
          sub_20E78D888();
        v33 = v32;
        v34 = operator new(8 * v32);
        v32 = v33;
        v35 = (uint64_t)&v34[8 * v29];
        *(float *)v35 = v23;
        *(_DWORD *)(v35 + 4) = v17;
        if (v25 != v27)
        {
LABEL_24:
          v36 = v25 - 8 - v27;
          if (v36 < 0x58)
          {
            v37 = v35;
            goto LABEL_32;
          }
          v37 = v35;
          if ((unint64_t)(v25 - &v34[v28]) < 0x20)
            goto LABEL_98;
          v38 = (v36 >> 3) + 1;
          v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
          v40 = &v25[-v39];
          v37 = v35 - v39;
          v41 = &v34[8 * v29 - 16];
          v42 = v25 - 16;
          v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v44 = *(_OWORD *)v42;
            *(v41 - 1) = *((_OWORD *)v42 - 1);
            *v41 = v44;
            v41 -= 2;
            v42 -= 32;
            v43 -= 4;
          }
          while (v43);
          v25 = v40;
          if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_98:
            do
            {
LABEL_32:
              v45 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *(_QWORD *)(v37 - 8) = v45;
              v37 -= 8;
            }
            while (v25 != v27);
          }
          v25 = (char *)*v22;
          goto LABEL_34;
        }
      }
      else
      {
        v34 = 0;
        v35 = 8 * v29;
        *(float *)v35 = v23;
        *(_DWORD *)(v35 + 4) = v17;
        if (v25 != v27)
          goto LABEL_24;
      }
      v37 = v35;
LABEL_34:
      *v22 = v37;
      v46 = v35 + 8;
      *v24 = v35 + 8;
      v22[2] = (uint64_t)&v34[8 * v32];
      v11 = v88;
      a3 = v89;
      if (v25)
        operator delete(v25);
      v15 = v13;
      v12 = a11;
      *v24 = v46;
      ++v16;
    }
    while (v16 != v13);
  }
LABEL_37:
  v47 = *v12;
  v12[1] = *v12;
  v91 = a8 / a7;
  v48 = v91 * v92;
  if (v91 * v92 > (v12[2] - v47) >> 3)
  {
    if (v48 >> 61)
      sub_20E78D874();
    v49 = (char *)operator new(8 * v48);
    *v12 = v49;
    v12[1] = v49;
    v12[2] = &v49[8 * v48];
    if (v47)
      operator delete(v47);
  }
  for (i = 0; i != v92; ++i)
  {
    v51 = (char *)__p + 24 * i;
    v52 = *(float **)v51;
    v53 = (float *)*((_QWORD *)v51 + 1);
    v54 = ((uint64_t)v53 - *(_QWORD *)v51) >> 3;
    if (v54 >= v91)
      v55 = a8 / a7;
    else
      v55 = v54;
    v56 = &v52[2 * v55];
    if (v56 != v53)
      sub_20E791F74(v52, v56, v53);
    if (v55)
    {
      v57 = 0;
      v58 = v12[1];
      while (1)
      {
        while (1)
        {
          v59 = *(int *)(*((_QWORD *)__p + 3 * i) + 8 * v57 + 4);
          v60 = (unint64_t)v12[2];
          if ((unint64_t)v58 >= v60)
            break;
          *(_QWORD *)v58 = v59;
          v58 += 8;
          v12[1] = v58;
          if (++v57 == v55)
            goto LABEL_42;
        }
        v61 = v55;
        v62 = *v12;
        v63 = v58 - *v12;
        v64 = v63 >> 3;
        v65 = (v63 >> 3) + 1;
        if (v65 >> 61)
          sub_20E78D874();
        v66 = v60 - (_QWORD)v62;
        if (v66 >> 2 > v65)
          v65 = v66 >> 2;
        v67 = (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v65;
        if (v67)
        {
          if (v67 >> 61)
            sub_20E78D888();
          v68 = operator new(8 * v67);
          v69 = &v68[8 * v64];
          *(_QWORD *)v69 = v59;
          v70 = (uint64_t)(v69 + 8);
          if (v58 == v62)
          {
LABEL_69:
            v55 = v61;
            v12 = a11;
            *a11 = v69;
            a11[1] = (char *)v70;
            a11[2] = &v68[8 * v67];
            if (!v62)
              goto LABEL_66;
LABEL_65:
            operator delete(v62);
            goto LABEL_66;
          }
        }
        else
        {
          v68 = 0;
          v69 = (char *)(8 * v64);
          *(_QWORD *)(8 * v64) = v59;
          v70 = 8 * v64 + 8;
          if (v58 == v62)
            goto LABEL_69;
        }
        v71 = v58 - 8 - v62;
        if (v71 < 0x168
          || &v68[v63 - 8 - (v71 & 0xFFFFFFFFFFFFFFF8)] > &v68[v63 - 8]
          || &v58[-(v71 & 0xFFFFFFFFFFFFFFF8) - 8] > v58 - 8
          || (unint64_t)(v58 - &v68[v63]) < 0x20)
        {
          break;
        }
        v74 = (v71 >> 3) + 1;
        v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        v72 = &v58[-v75];
        v69 -= v75;
        v76 = &v68[8 * v64 - 16];
        v77 = v58 - 16;
        v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        v55 = v61;
        do
        {
          v79 = *(_OWORD *)v77;
          *(v76 - 1) = *((_OWORD *)v77 - 1);
          *v76 = v79;
          v76 -= 2;
          v77 -= 32;
          v78 -= 4;
        }
        while (v78);
        v12 = a11;
        if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_63;
LABEL_64:
        *v12 = v69;
        v12[1] = (char *)v70;
        v12[2] = &v68[8 * v67];
        if (v62)
          goto LABEL_65;
LABEL_66:
        v12[1] = (char *)v70;
        ++v57;
        v58 = (char *)v70;
        if (v57 == v55)
          goto LABEL_42;
      }
      v72 = v58;
      v55 = v61;
      v12 = a11;
      do
      {
LABEL_63:
        v73 = *((_QWORD *)v72 - 1);
        v72 -= 8;
        *((_QWORD *)v69 - 1) = v73;
        v69 -= 8;
      }
      while (v72 != v62);
      goto LABEL_64;
    }
LABEL_42:
    ;
  }
  sub_20E791DD8((uint64_t)v12);
  v80 = (char *)__p;
  if (__p)
  {
    v81 = v94;
    v82 = __p;
    if (v94 != __p)
    {
      v83 = v94;
      do
      {
        v85 = (void *)*((_QWORD *)v83 - 3);
        v83 -= 24;
        v84 = v85;
        if (v85)
        {
          *((_QWORD *)v81 - 2) = v84;
          operator delete(v84);
        }
        v81 = v83;
      }
      while (v83 != v80);
      v82 = __p;
    }
    v94 = v80;
    operator delete(v82);
  }
}

void sub_20E798284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E798298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7982AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7982C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7982D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7982E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7982FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

char *sub_20E798310(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  size_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v70;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v9 = a5 - 1;
  if (a5 < 1)
    return v8;
  v11 = __src;
  v13 = v7 >> 3;
  v15 = a1[1];
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    v16 = a5 + ((uint64_t)(v15 - v6) >> 3);
    if (v16 >> 61)
      sub_20E78D874();
    v17 = v14 - v6;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        sub_20E78D888();
      v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      v20 = v18;
      v21 = operator new(8 * v18);
      v18 = v20;
      v8 = (char *)v19;
      v13 = v7 >> 3;
      v11 = __src;
    }
    else
    {
      v21 = 0;
    }
    v43 = &v21[8 * v13];
    v44 = &v43[8 * a5];
    v45 = v43;
    v46 = v11;
    if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_57;
    v45 = &v21[8 * v13];
    v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFF8] - v11) < 0x20)
      goto LABEL_57;
    v47 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v45 = &v43[v48];
    v46 = &v11[v48];
    v49 = (__int128 *)(v11 + 16);
    v50 = &v21[8 * v13 + 16];
    v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 4;
    }
    while (v51);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        v53 = *(_QWORD *)v46;
        v46 += 8;
        *(_QWORD *)v45 = v53;
        v45 += 8;
      }
      while (v45 != v44);
    }
    v54 = &v21[8 * v13];
    if ((void *)v6 != a2)
    {
      v55 = v8;
      v54 = &v21[8 * v13];
      if ((unint64_t)(v7 - 8) < 0x68)
        goto LABEL_58;
      v55 = v8;
      v54 = &v21[8 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20)
        goto LABEL_58;
      v56 = ((unint64_t)(v7 - 8) >> 3) + 1;
      v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      v55 = &v8[-v57];
      v54 = &v43[-v57];
      v58 = 8 * v13 - 16;
      v59 = &v21[v58];
      v60 = (__int128 *)(v6 + v58);
      v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 4;
      }
      while (v61);
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_58:
        do
        {
          v63 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v54 - 1) = v63;
          v54 -= 8;
        }
        while (v55 != (char *)v6);
      }
    }
    v64 = &v21[8 * v18];
    v65 = v15 - (_QWORD)v8;
    if (v65)
      memmove(&v43[8 * a5], v8, v65);
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6)
      operator delete((void *)v6);
    return v43;
  }
  v22 = v15 - (_QWORD)v8;
  v23 = (uint64_t)(v15 - (_QWORD)v8) >> 3;
  if (v23 >= a5)
  {
    v24 = &__src[8 * a5];
    v26 = a1[1];
  }
  else
  {
    v24 = &__src[8 * v23];
    v25 = a4 - v24;
    if (a4 != v24)
    {
      v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v23], a4 - v24);
      v13 = v7 >> 3;
      v8 = (char *)v70;
    }
    v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1)
      return v8;
  }
  v27 = &v8[8 * a5];
  v28 = v26 - (_QWORD)v27;
  v29 = (uint64_t)(v26 - (_QWORD)v27) >> 3;
  v30 = (uint64_t *)(v26 - 8 * a5);
  v31 = (_QWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + v28;
    v33 = (char *)(v32 + v6);
    v34 = v32 + v6 + 8;
    if (v15 > v34)
      v34 = v15;
    v35 = v34 + ~v6 - v32;
    if (v35 < 0x58)
    {
      v31 = (_QWORD *)v26;
    }
    else
    {
      v36 = v26 - (_QWORD)v33;
      v31 = (_QWORD *)v26;
      if (v36 >= 0x20)
      {
        v37 = (v35 >> 3) + 1;
        v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = (uint64_t *)((char *)v30 + v38);
        v31 = (_QWORD *)(v26 + v38);
        v39 = (_OWORD *)(v26 + 16);
        v40 = (__int128 *)(8 * v29 + 8 * v13 + v6 + 16);
        v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 4;
        }
        while (v41);
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
    }
    do
    {
      v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    v67 = v8;
    memmove((void *)(v26 - 8 * v29), v8, v28);
    v8 = v67;
  }
  if (v24 != v11)
  {
    v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

double sub_20E7986B8(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  int v10;
  double result;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  bzero(a3, 0xEC0uLL);
  *(_DWORD *)(a4 + 72) = (*(_QWORD *)a4 != 0) << 12;
  v10 = *(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16);
  sub_20E798914(a1, a2, a3 + 64, a4, a5);
  v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFFC | (v10 != 0);
  *((_DWORD *)a3 + 1) = v12;
  if (v10)
  {
    *(_BYTE *)(a5 + 472) = 1;
    *(_DWORD *)(a5 + 476) = 0;
    if (sub_20E7C59A4(a5 + 452, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(_DWORD *)(a4 + 12), 8) != v10)
      sub_20E8089B0();
    v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFF3 | 4;
    *((_DWORD *)a3 + 1) = v12;
    *((_QWORD *)a3 + 460) = *(_QWORD *)(a4 + 56);
    *((_DWORD *)a3 + 922) = v10;
  }
  v13 = *(_DWORD *)(a4 + 28);
  v14 = *(_DWORD *)(a4 + 32);
  v15 = v14 * v13;
  if (v14 * v13)
  {
    *(_BYTE *)(a5 + 500) = 1;
    *(_DWORD *)(a5 + 504) = 0;
    if (sub_20E7C59A4(a5 + 480, v13, v14, *(_DWORD *)(a4 + 24), 8) != v15)
      sub_20E808984();
    v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFCF | 0x10;
    *((_DWORD *)a3 + 1) = v12;
    *(_QWORD *)(a3 + 3692) = *(_QWORD *)(a4 + 64);
    *((_DWORD *)a3 + 925) = v15;
  }
  v16 = *(_DWORD *)(a4 + 40);
  v17 = *(_DWORD *)(a4 + 44);
  v18 = v17 * v16;
  if (v17 * v16)
  {
    *(_BYTE *)(a5 + 528) = 1;
    *(_DWORD *)(a5 + 532) = *(_DWORD *)(a4 + 72);
    if (sub_20E7C59A4(a5 + 508, v16, v17, *(_DWORD *)(a4 + 36), 8) != v18)
      sub_20E808958();
    *(_DWORD *)(a4 + 72) += v18;
    v19 = *(_QWORD *)(a4 + 64) + *(unsigned int *)(a5 + 532);
    v12 = *((_DWORD *)a3 + 1) & 0xFFFFFF3F | 0x40;
    *((_DWORD *)a3 + 1) = v12;
    *((_QWORD *)a3 + 463) = v19;
    *((_DWORD *)a3 + 928) = v18;
  }
  if (*(_BYTE *)(a5 + 360))
  {
    v20 = *(_QWORD *)(a4 + 64) + *(unsigned int *)(a5 + 364);
    v12 = v12 & 0xFFFFF3FF | 0x400;
    *((_DWORD *)a3 + 1) = v12;
    *((_QWORD *)a3 + 466) = v20;
    *((_DWORD *)a3 + 934) = *(_DWORD *)(a5 + 348) * *(_DWORD *)(a5 + 352);
  }
  if (*(_BYTE *)(a5 + 388))
  {
    v21 = *(_QWORD *)(a4 + 64) + *(unsigned int *)(a5 + 392);
    *((_DWORD *)a3 + 1) = v12 & 0xFFFFCFFF | 0x1000;
    *(_QWORD *)(a3 + 3740) = v21;
    *((_DWORD *)a3 + 937) = *(_DWORD *)(a5 + 376) * *(_DWORD *)(a5 + 380);
  }
  if (v10)
  {
    *((_DWORD *)a3 + 664) = *(_DWORD *)(a4 + 8);
    *((_DWORD *)a3 + 665) = 0x80000000;
    *((_QWORD *)a3 + 333) = 0;
    *(_QWORD *)&result = 0x600000006;
    *((_QWORD *)a3 + 315) = 0x600000006;
    *((_DWORD *)a3 + 623) = 0x80000;
  }
  return result;
}

void sub_20E798914(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  float32x4_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int16 v24;

  bzero(a3, 0x500uLL);
  *(_DWORD *)a3 = *(unsigned __int8 *)(a2 + 92);
  *(_QWORD *)(a3 + 4) = *(_QWORD *)a2;
  *((_DWORD *)a3 + 3) = 8;
  sub_20E79B598(a1, a2, (int8x16_t *)a3 + 4, a4, a5);
  v10 = *((_DWORD *)a3 + 288);
  if (*(_BYTE *)(a2 + 92))
  {
    *((_DWORD *)a3 + 288) = v10 & 0xFFFFFFFE;
    *((_DWORD *)a3 + 304) = *((_DWORD *)a3 + 304) & 0xFFFFC000 | sub_20E79B4C8(*(_DWORD *)(a2 + 24)) & 0x3FFF;
    v11 = *((_DWORD *)a3 + 288) & 0xFFFE00FF | ((sub_20E79B4E8(*(_DWORD *)(a2 + 24)) & 0x1FF) << 8);
    *((_DWORD *)a3 + 288) = v11;
    *((_DWORD *)a3 + 288) = v11 & 0xFCFFFFFF | ((*(_BYTE *)(a2 + 132) & 3) << 24);
    *(_QWORD *)(a3 + 1156) = *((_QWORD *)a3 + 134);
    *(_QWORD *)(a3 + 1180) = *((_QWORD *)a3 + 135);
    *((_DWORD *)a3 + 291) = sub_20E79B50C(*(unsigned __int8 *)(a2 + 132)) << 7;
    *((_DWORD *)a3 + 292) = 32 * sub_20E79B530(*(unsigned __int8 *)(a2 + 132));
    v12 = *((_DWORD *)a3 + 289);
    *((_DWORD *)a3 + 293) = v12 + 256;
    *((_DWORD *)a3 + 294) = v12 + 384;
    *((_DWORD *)a3 + 297) = *((_DWORD *)a3 + 272);
    v13 = *(unsigned int *)(a4 + 72);
    v14 = *(_QWORD *)(a4 + 64) + v13;
    *((_DWORD *)a3 + 302) = v14 & 0xFFFFF;
    *((_DWORD *)a3 + 303) = v14 >> 20;
    *(_BYTE *)(a5 + 388) = 1;
    *(_DWORD *)(a5 + 392) = v13;
    v15 = sub_20E7C5A20(16 * (*((_DWORD *)a3 + 304) & 0x3FFFu) + 16, 0, 64, a5 + 368);
    v16 = v14 + v15;
    v17 = *(_DWORD *)(a4 + 72) + v15;
    *(_DWORD *)(a4 + 72) = v17;
    *((_DWORD *)a3 + 298) = v16 & 0xFFFFF;
    *((_DWORD *)a3 + 299) = v16 >> 20;
    v18 = v16 + 4 * (*((_DWORD *)a3 + 304) & 0x3FFF);
    v19 = 4 * (*((_DWORD *)a3 + 304) & 0x3FFF) + v17;
    *(_DWORD *)(a4 + 72) = v19;
    *((_DWORD *)a3 + 300) = v18 & 0xFFFFF;
    *((_DWORD *)a3 + 301) = v18 >> 20;
    *(_DWORD *)(a4 + 72) = 16 * (*((_DWORD *)a3 + 304) & 0x3FFF) + v19;
    *((_DWORD *)a3 + 304) &= 0xC0FFFFFF;
    *((_DWORD *)a3 + 305) = 108000000;
    v20 = *(float32x4_t *)(a2 + 112);
    *(uint32x4_t *)(a3 + 1224) = vcvtq_n_u32_f32(*(float32x4_t *)(a2 + 96), 0xEuLL);
    *(uint32x4_t *)(a3 + 1240) = vcvtq_n_u32_f32(v20, 0xEuLL);
    *((_DWORD *)a3 + 314) = vcvts_n_u32_f32(*(float *)(a2 + 128), 0xEuLL);
    LODWORD(v18) = *((_DWORD *)a3 + 317);
    v21 = *(_QWORD *)(a3 + 1260);
    *(_QWORD *)(a3 + 1260) = v21 & 0xFFFFFFFFF800F800;
    v22 = v21 & 0xFFFFF800F800F800 | ((unint64_t)(*(_DWORD *)a2 & 0x7FF) << 32);
    *(_QWORD *)(a3 + 1260) = v22;
    v23 = v22 & 0xF800FFFFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(a2 + 4) & 0x7FF) << 48);
    *(_QWORD *)(a3 + 1260) = v23;
    LODWORD(v18) = vcvtas_u32_f32((float)(*(float *)(a2 + 136) * 256.0) / 360.0) | v18 & 0xFFFFFF00;
    *(_QWORD *)(a3 + 1260) = v23;
    *((_DWORD *)a3 + 317) = v18;
    v24 = vcvtas_u32_f32(*(float *)(a2 + 140) * 512.0);
    *(_QWORD *)(a3 + 1260) = v23;
    *((_DWORD *)a3 + 317) = v18 & 0xFEC000FF | ((v24 & 0x3FFF) << 8);
    *((_DWORD *)a3 + 318) = (float)(*(float *)(a2 + 144)
                                                * (float)((float)(*(float *)(a2 + 144) * (float)*(unsigned int *)a2)
                                                        * (float)*(unsigned int *)a2));
    *((_DWORD *)a3 + 319) = *(_DWORD *)(a2 + 148);
  }
  else
  {
    *((_DWORD *)a3 + 288) = v10 | 1;
  }
}

void sub_20E798BD8(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  if (!a3)
    sub_20E8089DC();
  v5 = a2;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v7 = a2 >= v6;
  v8 = a2 - v6;
  if (v8 != 0 && v7)
  {
    sub_20E798DFC((char **)a1, v8);
  }
  else if (!v7)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 28 * v5;
  }
  v9 = *(_QWORD *)(a1 + 72);
  v10 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 80) - v9) >> 2);
  if (v5 <= v10)
  {
    if (v5 < v10)
      *(_QWORD *)(a1 + 80) = v9 + 28 * v5;
  }
  else
  {
    sub_20E798DFC((char **)(a1 + 72), v5 - v10);
  }
  if (a3 == 2)
  {
    v14 = *(_QWORD *)(a1 + 120);
    v13 = (char **)(a1 + 120);
    v15 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 128) - v14) >> 2);
    if (*(_QWORD *)(a1 + 128) != v14)
    {
      if (v15 < 2)
        return;
      v16 = v14 + 28;
      goto LABEL_31;
    }
    v23 = 1 - v15;
LABEL_34:
    sub_20E798DFC(v13, v23);
    return;
  }
  if (a3 != 1)
    return;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 32) - v11) >> 2);
  if (v5 <= v12)
  {
    if (v5 < v12)
      *(_QWORD *)(a1 + 32) = v11 + 28 * v5;
  }
  else
  {
    sub_20E798DFC((char **)(a1 + 24), v5 - v12);
  }
  v17 = *(_QWORD *)(a1 + 48);
  v18 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 56) - v17) >> 2);
  if (v5 <= v18)
  {
    if (v5 < v18)
      *(_QWORD *)(a1 + 56) = v17 + 28 * v5;
  }
  else
  {
    sub_20E798DFC((char **)(a1 + 48), v5 - v18);
  }
  v19 = *(_QWORD *)(a1 + 96);
  v20 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 104) - v19) >> 2);
  if (v5 <= v20)
  {
    if (v5 < v20)
      *(_QWORD *)(a1 + 104) = v19 + 28 * v5;
  }
  else
  {
    sub_20E798DFC((char **)(a1 + 96), v5 - v20);
  }
  v21 = *(_QWORD *)(a1 + 120);
  v13 = (char **)(a1 + 120);
  v22 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 128) - v21) >> 2);
  v23 = v5 - v22;
  if (v5 > v22)
    goto LABEL_34;
  if (v5 >= v22)
    return;
  v16 = v21 + 28 * v5;
LABEL_31:
  *(_QWORD *)(a1 + 128) = v16;
}

void sub_20E798DFC(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 28 * ((28 * a2 - 28) / 0x1C) + 28;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x924924924924924)
      sub_20E78D874();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x492492492492492)
      v10 = 0x924924924924924;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x924924924924924)
        sub_20E78D888();
      v11 = (char *)operator new(28 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[28 * v7];
    v14 = &v11[28 * v10];
    v15 = 28 * ((28 * a2 - 28) / 0x1C) + 28;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 28);
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        *(_OWORD *)(v13 - 28) = v17;
        v13 -= 28;
        v5 -= 28;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_20E798FD4(uint64_t *a1, int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  int v16;
  unsigned int v17;
  __int16 v18;
  _WORD v19[11];

  *(_QWORD *)&v19[7] = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a4 + 23) >= 0)
      v8 = a4;
    else
      v8 = (uint64_t *)*a4;
    v16 = 67109378;
    v17 = a3;
    v18 = 2080;
    *(_QWORD *)v19 = v8;
    _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "TID %u, %s duplicate", (uint8_t *)&v16, 0x12u);
  }
  v9 = *a1;
  v10 = a1[1] - *a1;
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = v10 >> 2;
    while (1)
    {
      v14 = *(_DWORD *)(v9 + 4 * v11);
      if (v14 != -1 && v14 == a2)
        break;
      v11 = ++v12;
      if (v13 <= v12)
        return;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v16 = 67109632;
      v17 = v12;
      v18 = 1024;
      *(_DWORD *)v19 = a2;
      v19[2] = 1024;
      *(_DWORD *)&v19[3] = a2;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "[AppleCVHWA] curr to same prev: %u & %u -> %u.", (uint8_t *)&v16, 0x14u);
    }
  }
}

void sub_20E79913C(uint64_t *a1, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v8;
  int v9;
  const char *v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v14;
  uint8_t buf[4];
  unsigned int v16;
  __int16 v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  v8 = *a2;
  v9 = *(_DWORD *)(*a2 + 4 * a4);
  if (*(_DWORD *)(*a1 + 4 * a3) != -1)
  {
    if (v9 == -1)
    {
      MEMORY[0x212BC45E8](__p, "curr idx");
      sub_20E798FD4(a1, a4, a5, (uint64_t *)__p);
      v10 = "false && \"Unexpected: curr idx is duplicate\"";
      v11 = 527;
    }
    else
    {
      MEMORY[0x212BC45E8](__p, "curr & prev idx");
      sub_20E798FD4(a1, a4, a5, (uint64_t *)__p);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v16 = a3;
        v17 = 1024;
        v18 = a4;
        _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "duplicate indices pair: {%u, %u}", buf, 0xEu);
      }
      v10 = "false && \"Unexpected: curr & prev idx are duplicates\"";
      v11 = 523;
    }
LABEL_11:
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDebugUtils.cpp", v11, v10, (void (*)(void *))sub_20E803DA4);
    abort();
  }
  if (v9 != -1)
  {
    MEMORY[0x212BC45E8](__p, "prev idx");
    sub_20E798FD4(a1, a4, a5, (uint64_t *)__p);
    v10 = "false && \"Unexpected: prev idx is duplicate\"";
    v11 = 531;
    goto LABEL_11;
  }
  *(_DWORD *)(*a1 + 4 * a3) = a4;
  *(_DWORD *)(v8 + 4 * a4) = a3;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
}

void sub_20E799328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20E799344(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  _BOOL8 result;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int8x16_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char **v20;

  if (*(_DWORD *)(a2 + 64) != 4)
    return 0;
  *(_BYTE *)(a1 + 480) = 17;
  v4 = *(unsigned __int8 *)(a2 + 68);
  if (v4 == 2)
  {
    *(_WORD *)(a2 + 50) = sub_20E7E78F8(*(_DWORD *)a2, *(_DWORD *)(a2 + 4));
    v7 = a1 + 344;
    result = sub_20E799E38(a1 + 344, a2);
    if (!result)
      return result;
  }
  else
  {
    if (v4 != 1)
      return 0;
    v5 = *(unsigned int *)(a1 + 352);
    if ((_DWORD)v5 != *(_DWORD *)(a1 + 356))
      sub_20E808AB8();
    v6 = sub_20E7CB93C(*(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int16 *)(a2 + 50), v5);
    *(_WORD *)(a2 + 50) = v6;
    if (v6 >= 7u)
      sub_20E808A8C();
    if (!v6)
      sub_20E808A08();
    if (*(_DWORD *)a2 >> (v6 - 1) < *(_DWORD *)(a1 + 352))
      sub_20E808A34();
    if (*(_DWORD *)(a2 + 4) >> (v6 - 1) < *(_DWORD *)(a1 + 356))
      sub_20E808A60();
    v7 = a1 + 344;
    result = sub_20E799E38(a1 + 344, a2);
    if (!result)
      return result;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  v9 = *(unsigned __int16 *)(a2 + 50);
  *(_WORD *)(a1 + 16) = v9;
  v10 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = v10;
  v11 = *(unsigned __int8 *)(a2 + 68);
  *(_BYTE *)(a1 + 28) = v11;
  sub_20E79C1D4(a1 + 32, v9, v11);
  v12 = *(unsigned __int8 *)(a1 + 28);
  if (v12 != 2)
  {
    if (v12 == 1)
    {
      v13 = *(unsigned __int16 *)(a1 + 16);
      v14 = *(_QWORD *)(a1 + 456);
      v15 = (*(_QWORD *)(a1 + 464) - v14) >> 10;
      if (v13 <= v15)
      {
        if (v13 < v15)
          *(_QWORD *)(a1 + 464) = v14 + (v13 << 10);
      }
      else
      {
        sub_20E799D04((char **)(a1 + 456), v13 - v15);
        LODWORD(v13) = *(unsigned __int16 *)(a1 + 16);
      }
      if ((_DWORD)v13)
      {
        v18 = 0;
        v19 = 0;
        do
        {
          sub_20E79A400(v7, a2, v19++, (char *)(*(_QWORD *)(a1 + 456) + v18));
          v18 += 1024;
        }
        while (v19 < *(unsigned __int16 *)(a1 + 16));
      }
      return 1;
    }
    return 0;
  }
  v16 = *(int8x16_t **)(a1 + 456);
  v17 = *(_QWORD *)(a1 + 464) - (_QWORD)v16;
  if (v17)
  {
    if (v17 >= 0x401)
      *(_QWORD *)(a1 + 464) = v16 + 64;
  }
  else
  {
    v20 = (char **)(a1 + 456);
    sub_20E799D04(v20, 1uLL);
    v16 = (int8x16_t *)*v20;
  }
  sub_20E79A9D8(v7, a2, v16);
  return 1;
}

void sub_20E799578(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)a2 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 4))
    sub_20E808B3C();
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 24))
    sub_20E808B10();
  if (*(_BYTE *)(a1 + 28) != 2 || *(_BYTE *)(a2 + 68) != 2)
    sub_20E808AE4();
  sub_20E79A9D8(a1 + 344, a2, *(int8x16_t **)(a1 + 456));
}

uint64_t sub_20E7995E4()
{
  return 1344;
}

uint64_t sub_20E7995EC()
{
  return 1088;
}

uint64_t sub_20E7995F4()
{
  return 1076;
}

uint64_t sub_20E7995FC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v6;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  _QWORD *v10;

  v6 = *(unsigned __int8 *)(a1 + 28);
  v7 = (_QWORD *)(a1 + 456);
  v8 = *(unsigned __int16 *)(a1 + 16);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v10 = (_QWORD *)(a1 + 32);
  if (v6 == 1)
    return sub_20E79C3F8(v7, v8, v9, a2, a3, v10);
  else
    return sub_20E79C5EC(v7, v8, v9, a2, a3, v10);
}

uint64_t sub_20E79967C(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 28) == 1)
    return ((24 * a2 + 63) & 0xFFFFFFC0) + (a2 << 6) + 576;
  else
    return 576;
}

void *sub_20E7996AC(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v7 = (_QWORD *)(a1 + 456);
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  v10 = *(unsigned __int8 *)(a1 + 480);
  if (*(_BYTE *)(a1 + 28) == 1)
    return sub_20E79CF50(a2, v7, v8, v9, a3, v10, a4);
  else
    return sub_20E79CFEC(a2, (uint64_t)v7, v8, v9, a3, v10, a4);
}

uint64_t sub_20E7996DC(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  size_t v14;
  size_t v16;

  if (*(_BYTE *)(a1 + 28) == 1)
  {
    if (*(unsigned __int16 *)(a1 + 16) <= a7)
      sub_20E808B68();
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    return sub_20E79C850(a2, v14, a3, a4, a5, a6, a7, *(_DWORD *)(a1 + 24), (_QWORD *)(a1 + 32));
  }
  else
  {
    if (a7)
      sub_20E808B94();
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    return sub_20E79CB2C(a2, v16, a3, a4, a5, a6, *(_DWORD *)(a1 + 24), (unsigned int *)(a1 + 32));
  }
}

__n128 sub_20E7997DC@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  __n128 v4;
  __n128 v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;

  v2 = *(_QWORD **)(a1 + 456);
  v3 = v2[90];
  v4.n128_u64[0] = v3;
  v4.n128_u64[1] = HIDWORD(v3);
  v5 = v4;
  v6 = v2[91];
  v4.n128_u64[0] = v6;
  v4.n128_u64[1] = HIDWORD(v6);
  *a2 = v5;
  a2[1] = v4;
  v5.n128_u64[0] = v2[92];
  v4.n128_u64[0] = v5.n128_u32[0];
  v4.n128_u64[1] = v5.n128_u32[1];
  result = v4;
  v8 = v2[93];
  v4.n128_u64[0] = v8;
  v4.n128_u64[1] = HIDWORD(v8);
  a2[2] = result;
  a2[3] = v4;
  return result;
}

uint32x4_t sub_20E79980C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint16x4_t *v12;
  uint32x4_t *v13;
  uint32x4_t v14;
  uint32x4_t v15;
  uint32x4_t v16;
  uint32x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  uint32x4_t result;
  uint32x4_t v22;

  v3 = 0;
  *(_OWORD *)(a3 + 92) = *(_OWORD *)((char *)a2 + 92);
  v4 = *a2;
  *(_WORD *)(a3 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)a3 = v4;
  v5 = *(uint64_t *)((char *)a2 + 10);
  *(_WORD *)(a3 + 18) = *((_WORD *)a2 + 9);
  *(_QWORD *)(a3 + 10) = v5;
  v6 = *(uint64_t *)((char *)a2 + 20);
  *(_WORD *)(a3 + 28) = *((_WORD *)a2 + 14);
  *(_QWORD *)(a3 + 20) = v6;
  v7 = *(uint64_t *)((char *)a2 + 30);
  *(_WORD *)(a3 + 38) = *((_WORD *)a2 + 19);
  *(_QWORD *)(a3 + 30) = v7;
  v8 = a2[5];
  *(_WORD *)(a3 + 48) = *((_WORD *)a2 + 24);
  *(_QWORD *)(a3 + 40) = v8;
  v9 = *(_OWORD *)((char *)a2 + 52);
  v10 = *(_OWORD *)((char *)a2 + 68);
  *(_QWORD *)(a3 + 84) = *(uint64_t *)((char *)a2 + 84);
  *(_OWORD *)(a3 + 68) = v10;
  *(_OWORD *)(a3 + 52) = v9;
  v11 = *(_OWORD *)((char *)a2 + 126);
  *(_WORD *)(a3 + 124) = *((_WORD *)a2 + 71);
  *(_OWORD *)(a3 + 108) = v11;
  v12 = (uint16x4_t *)(a2 + 49);
  do
  {
    v13 = *(uint32x4_t **)(a3 + 240 + v3);
    v14 = vmovl_u16(v12[-14]);
    *v13 = vmovl_u16(v12[-15]);
    v13[1] = v14;
    v15 = vmovl_u16(v12[-12]);
    v13[2] = vmovl_u16(v12[-13]);
    v13[3] = v15;
    v16 = vmovl_u16(v12[-10]);
    v13[4] = vmovl_u16(v12[-11]);
    v13[5] = v16;
    v17 = vmovl_u16(v12[-8]);
    v13[6] = vmovl_u16(v12[-9]);
    v13[7] = v17;
    v18 = vmovl_u16(v12[-6]);
    v13[8] = vmovl_u16(v12[-7]);
    v13[9] = v18;
    v19 = vmovl_u16(v12[-4]);
    v13[10] = vmovl_u16(v12[-5]);
    v13[11] = v19;
    v20 = vmovl_u16(v12[-2]);
    v13[12] = vmovl_u16(v12[-3]);
    v13[13] = v20;
    result = vmovl_u16(v12[-1]);
    v22 = vmovl_u16(*v12);
    v3 += 24;
    v12 += 16;
    v13[14] = result;
    v13[15] = v22;
  }
  while (v3 != 192);
  return result;
}

uint64_t sub_20E799930(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t result;
  int v4;

  switch(a2)
  {
    case 0:
      result = *(_QWORD *)(a1 + 32) + 28 * a3;
      break;
    case 1:
      if (*(_BYTE *)(a1 + 28) != 1)
        sub_20E808BEC();
      result = *(_QWORD *)(a1 + 56) + 28 * a3;
      break;
    case 2:
      if (*(_BYTE *)(a1 + 28) != 1)
        sub_20E808C18();
      result = *(_QWORD *)(a1 + 80) + 28 * a3;
      break;
    case 3:
      result = *(_QWORD *)(a1 + 104) + 28 * a3;
      break;
    case 4:
      if (*(_BYTE *)(a1 + 28) != 1)
        sub_20E808C44();
      result = *(_QWORD *)(a1 + 128) + 28 * a3;
      break;
    case 5:
      v4 = *(unsigned __int8 *)(a1 + 28);
      if (v4 != 1 && (a3 || v4 != 2))
        sub_20E808C70();
      result = *(_QWORD *)(a1 + 152) + 28 * a3;
      break;
    case 6:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E808CC8();
      if (a3)
        sub_20E808C9C();
      result = a1 + 176;
      break;
    case 7:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E808D20();
      if (a3)
        sub_20E808CF4();
      result = a1 + 204;
      break;
    case 8:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E808D78();
      if (a3)
        sub_20E808D4C();
      result = a1 + 232;
      break;
    case 9:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E808DD0();
      if (a3)
        sub_20E808DA4();
      result = a1 + 260;
      break;
    case 10:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E808E28();
      if (a3)
        sub_20E808DFC();
      result = a1 + 288;
      break;
    case 11:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E808E80();
      if (a3)
        sub_20E808E54();
      result = a1 + 316;
      break;
    default:
      sub_20E808BC0();
  }
  return result;
}

uint64_t sub_20E799AFC(uint64_t result, int32x4_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int16x8_t *v6;
  int32x4_t *v7;
  unint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  __int16 *v12;
  __int16 *v13;
  __int16 v14;

  if (*(_BYTE *)(result + 28) != 2)
    sub_20E808EAC();
  v2 = *(unsigned __int16 *)(result + 16);
  v3 = 2 * v2 - 2;
  if (2 * (_DWORD)v2 != 2)
  {
    v4 = *(_QWORD *)(result + 456);
    if (v3 < 0x10)
    {
      v5 = 0;
LABEL_8:
      v11 = v5 - 2 * v2 + 2;
      v12 = (__int16 *)(v4 + 2 * v5 + 902);
      v13 = &a2->i16[4 * v5];
      do
      {
        v14 = *v13;
        v13 += 4;
        v12[9] = v14;
        *v12++ = v14;
      }
      while (!__CFADD__(v11++, 1));
      return result;
    }
    v5 = v3 & 0xFFFFFFFFFFFFFFF0;
    v6 = (int16x8_t *)(v4 + 936);
    v7 = a2 + 4;
    v8 = v3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v9 = vuzp1q_s16((int16x8_t)vuzp1q_s32(v7[-4], v7[-3]), (int16x8_t)vuzp1q_s32(v7[-2], v7[-1]));
      v10 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v7, v7[1]), (int16x8_t)vuzp1q_s32(v7[2], v7[3]));
      v6[-1] = v9;
      *v6 = v10;
      *(int16x8_t *)((char *)v6 - 34) = v9;
      *(int16x8_t *)((char *)v6 - 18) = v10;
      v6 += 2;
      v7 += 8;
      v8 -= 16;
    }
    while (v8);
    if (v5 != v3)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_20E799BC4()
{
  return 0;
}

uint64_t sub_20E799BCC()
{
  return 0;
}

void sub_20E799BD4()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwDesgen.cpp", 325, "0 && \"Update TID counter init value is not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E799C04(_QWORD *a1)
{
  sub_20E799C64(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E799C30()
{
  return 0;
}

uint64_t sub_20E799C48()
{
  return 0;
}

uint64_t sub_20E799C58()
{
  return 0;
}

uint64_t sub_20E799C64(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &off_24C9A88A0;
  v2 = a1[57];
  if (v2)
  {
    a1[58] = v2;
    MEMORY[0x212BC47C8]();
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  return nullsub_13(a1);
}

void sub_20E799D04(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 10)
  {
    if (a2)
    {
      v12 = a2 << 10;
      bzero(a1[1], a2 << 10);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 10;
    v8 = v7 + a2;
    if ((v7 + a2) >> 54)
      sub_20E78D874();
    v9 = v4 - v6;
    if (v9 >> 9 > v8)
      v8 = v9 >> 9;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFC00)
      v10 = 0x3FFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 54)
        sub_20E78D888();
      v11 = (char *)operator new(v10 << 10, (std::align_val_t)0x40uLL);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[1024 * v7];
    v14 = a2 << 10;
    v15 = &v11[1024 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v5 -= 1024;
        v13 -= 1024;
        memcpy(v13, v5, 0x400uLL);
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      JUMPOUT(0x212BC47C8);
  }
}

BOOL sub_20E799E38(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v10;
  int v11;
  unsigned int v12;
  signed int v13;
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  char v17;
  BOOL v18;
  unsigned int v19;
  int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  BOOL v25;
  BOOL v26;
  unsigned int v27;
  BOOL v28;
  BOOL v30;
  unsigned int v31;
  BOOL v32;
  _DWORD *v33;
  unsigned __int32 v34;
  unsigned int v35;
  char v36;
  int v37;
  BOOL v38;
  char v39;
  BOOL v40;
  BOOL v41;
  char v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  _BOOL4 v52;
  BOOL v53;
  int v54;
  int v55;
  float v56;
  float v57;
  BOOL v58;
  float v59;
  _BOOL4 v60;
  int v61;
  int v62;
  int v63;
  double v64;
  uint32x4_t v65;
  unsigned int v67;
  unsigned int v68;
  char v69;
  char v70;
  unsigned int v72[522];

  v4 = *(unsigned __int8 *)(a2 + 68);
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      v5 = *(unsigned __int16 *)(a2 + 50);
      v6 = v5 > 6 || *(_DWORD *)(a1 + 16) > v5;
      v7 = *(_DWORD *)a2;
      v8 = *(_DWORD *)(a2 + 4);
      v10 = v6 || v7 > *(_DWORD *)a1 || v8 > *(_DWORD *)(a1 + 4);
      v11 = *(__int16 *)(a2 + 14);
      v12 = *(__int16 *)(a2 + 18);
      v13 = *(__int16 *)(a2 + 12);
      v14 = ((v11 | v13) >> 15) & 1;
      if (v10)
        LOWORD(v14) = 1;
      if (v11 > (int)v12)
        v15 = 1;
      else
        v15 = v14;
      v18 = v7 >= v12;
      v16 = *(__int16 *)(a2 + 16);
      if (!v18)
        v15 = 1;
      if (v13 > (int)v16)
        v15 = 1;
      if (v8 < v16)
        v15 = 1;
      v17 = v5 - 1;
      if (v15)
        v18 = 0;
      else
        v18 = v7 >> v17 >= *(_DWORD *)(a1 + 8);
      v19 = v8 >> v17;
      v21 = !v18 || v19 < *(_DWORD *)(a1 + 12);
      if (*(_BYTE *)(a2 + 42))
      {
        v22 = *(unsigned __int16 *)(a2 + 38);
        v23 = *(_DWORD *)(a1 + 20) <= v22 && *(_DWORD *)(a1 + 28) >= v22;
        v24 = *(unsigned __int16 *)(a2 + 40);
        v25 = !v23 || *(_DWORD *)(a1 + 24) > v24;
        v26 = !v25 && *(_DWORD *)(a1 + 32) >= v24;
        v27 = 2 * v22;
        v28 = v26 && v7 >= v27;
        if (!v28 || v8 < 2 * v24)
          v21 = 1;
      }
      v30 = (*(unsigned __int8 *)(a2 + 92) | v21 | ((*(_DWORD *)(a2 + 64) - 5) < 5)) != 0;
      v4 = 1;
    }
    else
    {
      v30 = 0;
    }
    goto LABEL_129;
  }
  v31 = *(_DWORD *)(a2 + 64);
  v32 = (*(unsigned __int8 *)(a2 + 42) | *(unsigned __int8 *)(a2 + 44) ^ 1) != 0;
  if (v31 - 5 >= 2)
    v32 = *(_BYTE *)(a2 + 44) == 0;
  if (v31 - 7 >= 3)
    v33 = (_DWORD *)(a1 + 44);
  else
    v33 = (_DWORD *)(a1 + 48);
  v34 = *(_DWORD *)a2;
  v35 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 > *v33)
    v32 = 1;
  if (v35 > *(_DWORD *)(a1 + 52))
    v32 = 1;
  if (v34 < *(_DWORD *)(a1 + 56))
    v32 = 1;
  v36 = v35 < *(_DWORD *)(a1 + 60) || v32;
  v37 = *(unsigned __int16 *)(a2 + 50);
  v38 = v34 > 0x140 && v37 != 5;
  if (v35 <= 0x140)
    v38 = 0;
  v39 = v36 | (v37 == 4) ^ (v37 != 5);
  if (v37 != 4)
  {
    v40 = v34 >= 0x141 && v35 >= 0x141;
    v41 = !v40;
    if (!v38)
      v38 = v41;
  }
  v42 = v39 | v38;
  v43 = *(unsigned __int8 *)(a2 + 89);
  v44 = v42 & 1;
  v45 = *(unsigned __int8 *)(a2 + 87) | *(unsigned __int8 *)(a2 + 86);
  if (v45)
    v46 = *(unsigned __int8 *)(a2 + 89);
  else
    v46 = 0;
  if (*(_BYTE *)(a2 + 84))
    v47 = *(unsigned __int8 *)(a2 + 85);
  else
    v47 = 0;
  v48 = v45 | *(unsigned __int8 *)(a2 + 84) | *(unsigned __int8 *)(a2 + 85);
  v49 = *(unsigned __int8 *)(a2 + 88);
  v50 = *(unsigned __int8 *)(a2 + 153);
  v51 = *(unsigned __int8 *)(a2 + 92);
  v52 = (v48 | v49 | v43 | v51 | v50) == 0;
  if (v51 | v50)
    v53 = v31 == 4;
  else
    v53 = 0;
  v54 = v53;
  v55 = v46 | v47 | v52 | v54 | v44;
  if (v51 | v50)
  {
    v56 = *(float *)(a2 + 136);
    v57 = *(float *)(a2 + 140);
    v58 = v56 < *(float *)(a1 + 80);
    if (v56 > *(float *)(a1 + 84))
      v58 = 1;
    if (v57 < *(float *)(a1 + 88))
      v58 = 1;
    if (v57 > *(float *)(a1 + 92))
      v58 = 1;
    v59 = *(float *)(a2 + 144);
    if (v59 < *(float *)(a1 + 96))
      v58 = 1;
    if (v59 > *(float *)(a1 + 100))
      v58 = 1;
    if (*(_DWORD *)(a2 + 148) > *(_DWORD *)(a1 + 104))
      v58 = 1;
    v55 |= v58;
  }
  if (v31 < 7)
  {
    v30 = (*(unsigned __int8 *)(a2 + 156) | (v55 != 0)) != 0;
LABEL_128:
    v4 = 2;
    goto LABEL_129;
  }
  v53 = v49 == 0;
  v60 = v49 != 0;
  if (v53)
    v43 = 0;
  if (*(_BYTE *)(a2 + 91) != 2)
    v60 = 0;
  v61 = v43 | v60;
  if (*(_BYTE *)(a2 + 153))
    v62 = 1;
  else
    v62 = *(unsigned __int8 *)(a2 + 92);
  if (!*(_BYTE *)(a2 + 156))
    v62 = 0;
  v63 = v61 | v62 | (v55 != 0);
  v30 = v63 != 0;
  if (!*(_BYTE *)(a2 + 42))
    goto LABEL_128;
  bzero(v72, 0x828uLL);
  if (v34 <= 0x280)
    v72[0] = 1;
  sub_20E7E797C(0x280u, v34, v35, 1, v72, v64, v65);
  v30 = sub_20E7E861C(v72) > *(_DWORD *)(a2 + 24) || v63 != 0;
  v4 = *(unsigned __int8 *)(a2 + 68);
LABEL_129:
  v67 = *(_DWORD *)(a2 + 24);
  v68 = v4 - 3;
  if (*(_BYTE *)(a2 + 76))
    v69 = *(_BYTE *)(a2 + 77);
  else
    v69 = 0;
  if (*(_DWORD *)(a2 + 28) > v67)
    v30 = 1;
  if (v67 > *(_DWORD *)(a1 + 76))
    v30 = 1;
  if (v68 < 0xFFFFFFFE)
    v30 = 1;
  v70 = *(_DWORD *)(a1 + 72) < *(unsigned __int16 *)(a2 + 46) || v30;
  return (v69 | v70) == 0;
}

uint64_t sub_20E79A214(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  signed int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  if (*(_DWORD *)(a1 + 64) != 4)
    sub_20E808F04();
  if (*(_WORD *)(a1 + 68) != 5)
    sub_20E808ED8();
  v5 = *(__int16 *)(a2 + 14);
  v6 = (*(_DWORD *)(a2 + 4) >> a3);
  if (*(_WORD *)(a2 + 16))
    v7 = *(__int16 *)(a2 + 16) >> a3;
  else
    v7 = *(_DWORD *)(a2 + 4) >> a3;
  v8 = (*(_DWORD *)a2 >> a3);
  if (*(_WORD *)(a2 + 18))
    v9 = *(__int16 *)(a2 + 18) >> a3;
  else
    v9 = *(_DWORD *)a2 >> a3;
  v10 = *(__int16 *)(a2 + 12) >> a3;
  v12 = 0;
  v13 = 0;
  sub_20E7CB758(v8, (unsigned int *)&v13 + 1, (signed int *)&v13, v5 >> a3, v9);
  result = sub_20E7CB758(v6, (unsigned int *)&v12 + 1, (signed int *)&v12, v10, v7);
  *(_DWORD *)(a4 + 468) = *(_DWORD *)(a4 + 468) & 0xE000F800 | WORD2(v13) & 0x7FF | ((WORD2(v12) & 0x1FFF) << 16);
  *(_DWORD *)(a4 + 488) = *(_DWORD *)(a4 + 488) & 0xE000FC00 | v13 & 0x3FF | ((v12 & 0x1FFF) << 16);
  return result;
}

uint64_t sub_20E79A308(uint64_t result, int a2, int *a3, signed int *a4, int a5, int a6)
{
  unsigned int v6;
  int v7;
  signed int v8;
  int v9;
  int v10;

  if (a2 <= 0)
    sub_20E80900C();
  v6 = *(unsigned __int16 *)(result + 68);
  v7 = *(_DWORD *)(result + 64);
  if ((a6 & a5) == 0xFFFFFFFF || !a5 && a6 == a2)
  {
    *a3 = 0;
    v8 = (a2 + v6 - 1) / v6;
    *a4 = v8;
    a5 = *a3;
  }
  else
  {
    if (a6 > a2 || a5 < 0 || a6 <= a5)
      sub_20E808FB4();
    v9 = (int)(~a5 + a6 + v6) / (int)v6;
    if (v9 <= v7)
      v9 = *(_DWORD *)(result + 64);
    if (v9 >= (unsigned __int16)(a2 / v6))
      v9 = (unsigned __int16)(a2 / v6);
    *a4 = v9;
    *a3 = a5;
    v8 = *a4;
    v10 = a5 + *a4 * v6;
    if (v10 >= a2)
    {
      a5 = a2 - *a4 * v6;
      *a3 = a5;
      v8 = *a4;
      v10 = a5 + *a4 * v6;
    }
    if (v10 < a6)
      sub_20E808FE0();
  }
  if (a5 < 0)
    sub_20E808F88();
  if ((int)(a5 + v8 * v6) >= v8 + a2)
    sub_20E808F5C();
  if (v8 < v7)
    sub_20E808F30();
  return result;
}

void sub_20E79A400(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  unsigned int v4;
  unsigned int v8;
  char *v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int32x4_t v18;
  uint64_t v19;
  char *v20;
  int32x4_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  int32x4_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;

  v4 = *(unsigned __int16 *)(a2 + 38);
  if (*(_DWORD *)(a1 + 20) > v4 || *(_DWORD *)(a1 + 28) < v4)
    sub_20E809038();
  v8 = *(unsigned __int16 *)(a2 + 40);
  if (*(_DWORD *)(a1 + 24) > v8 || *(_DWORD *)(a1 + 32) < v8)
    sub_20E809064();
  v12 = a4 + 312;
  bzero(a4, 0x400uLL);
  *(_DWORD *)a4 = 4368;
  v13 = *(_DWORD *)(a2 + 4);
  *((_WORD *)a4 + 2) = *(_DWORD *)a2 >> a3;
  *((_WORD *)a4 + 3) = v13 >> a3;
  *((_QWORD *)a4 + 33) = 0;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_OWORD *)(a4 + 232) = 0u;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_QWORD *)&v14 = 0x300000003;
  *((_QWORD *)&v14 + 1) = 0x300000003;
  *((_OWORD *)a4 + 17) = v14;
  *((_DWORD *)a4 + 72) = 196611;
  v15 = *(unsigned __int16 *)(a1 + 68);
  if (*(_WORD *)(a1 + 68))
  {
    v16 = *(unsigned __int16 *)(a2 + 20);
    if (v15 > 7)
    {
      v18 = vdupq_n_s32(v16);
      if ((v15 & 0xFFF8) == v15)
      {
        v19 = 0;
        v20 = v12 + 16;
        do
        {
          v21 = (int32x4_t *)v20;
          v22 = (unsigned __int16)v15 & 0xFFF8;
          do
          {
            v21[-1] = v18;
            *v21 = v18;
            v21 += 2;
            v22 -= 8;
          }
          while (v22);
          ++v19;
          v20 += 20;
        }
        while (v19 != v15);
      }
      else
      {
        v23 = 0;
        v24 = v12;
        do
        {
          v25 = (unsigned __int16)v15 & 0xFFF8;
          v26 = (int32x4_t *)v24;
          do
          {
            *v26 = v18;
            v26[1] = v18;
            v26 += 2;
            v25 -= 8;
          }
          while (v25);
          v27 = (unsigned __int16)v15 & 0xFFF8;
          do
            *((_DWORD *)v24 + v27++) = v16;
          while (v15 != v27);
          ++v23;
          v24 = (_OWORD *)((char *)v24 + 20);
        }
        while (v23 != v15);
      }
    }
    else
    {
      *((_DWORD *)a4 + 78) = v16;
      if ((_DWORD)v15 != 1)
      {
        *((_DWORD *)a4 + 79) = v16;
        if ((_DWORD)v15 != 2)
        {
          *((_DWORD *)a4 + 80) = v16;
          if ((_DWORD)v15 != 3)
          {
            *((_DWORD *)a4 + 81) = v16;
            if ((_DWORD)v15 != 4)
            {
              *((_DWORD *)a4 + 82) = v16;
              if ((_DWORD)v15 != 5)
              {
                *((_DWORD *)a4 + 83) = v16;
                if ((_DWORD)v15 != 6)
                  *((_DWORD *)a4 + 84) = v16;
              }
            }
          }
        }
        *((_DWORD *)a4 + 83) = v16;
        *((_DWORD *)a4 + 84) = v16;
        if ((_DWORD)v15 != 2)
        {
          *((_DWORD *)a4 + 85) = v16;
          if ((_DWORD)v15 != 3)
          {
            *((_DWORD *)a4 + 86) = v16;
            if ((_DWORD)v15 != 4)
            {
              *((_DWORD *)a4 + 87) = v16;
              if ((_DWORD)v15 != 5)
              {
                *((_DWORD *)a4 + 88) = v16;
                if ((_DWORD)v15 != 6)
                  *((_DWORD *)a4 + 89) = v16;
              }
            }
          }
          *((_DWORD *)a4 + 88) = v16;
          *((_DWORD *)a4 + 89) = v16;
          *((_DWORD *)a4 + 90) = v16;
          if ((_DWORD)v15 != 3)
          {
            *((_DWORD *)a4 + 91) = v16;
            if ((_DWORD)v15 != 4)
            {
              *((_DWORD *)a4 + 92) = v16;
              if ((_DWORD)v15 != 5)
              {
                *((_DWORD *)a4 + 93) = v16;
                if ((_DWORD)v15 != 6)
                  *((_DWORD *)a4 + 94) = v16;
              }
            }
            *((_DWORD *)a4 + 93) = v16;
            *((_DWORD *)a4 + 94) = v16;
            *((_DWORD *)a4 + 95) = v16;
            *((_DWORD *)a4 + 96) = v16;
            if ((_DWORD)v15 != 4)
            {
              *((_DWORD *)a4 + 97) = v16;
              if ((_DWORD)v15 != 5)
              {
                *((_DWORD *)a4 + 98) = v16;
                if ((_DWORD)v15 != 6)
                  *((_DWORD *)a4 + 99) = v16;
              }
              *((_DWORD *)a4 + 98) = v16;
              *((_DWORD *)a4 + 99) = v16;
              *((_DWORD *)a4 + 100) = v16;
              *((_DWORD *)a4 + 101) = v16;
              *((_DWORD *)a4 + 102) = v16;
              if ((_DWORD)v15 != 5)
              {
                *((_DWORD *)a4 + 103) = v16;
                if ((_DWORD)v15 != 6)
                  *((_DWORD *)a4 + 104) = v16;
                *((_DWORD *)a4 + 103) = v16;
                *((_DWORD *)a4 + 104) = v16;
                *((_DWORD *)a4 + 105) = v16;
                *((_DWORD *)a4 + 106) = v16;
                *((_DWORD *)a4 + 107) = v16;
                *((_DWORD *)a4 + 108) = v16;
                if ((_DWORD)v15 != 6)
                {
                  *((_DWORD *)a4 + 109) = v16;
                  *((_DWORD *)a4 + 108) = v16;
                  *((_DWORD *)a4 + 109) = v16;
                  *((_DWORD *)a4 + 110) = v16;
                  *((_DWORD *)a4 + 111) = v16;
                  *((_DWORD *)a4 + 112) = v16;
                  *((_DWORD *)a4 + 113) = v16;
                  *((_DWORD *)a4 + 114) = v16;
                }
              }
            }
          }
        }
      }
    }
    v17 = *((_DWORD *)a4 + 108) & 0xFFFFFFFE;
    LODWORD(v15) = *((_DWORD *)a4 + 109) & 0xFFFFFFFE;
  }
  else
  {
    v17 = 0;
  }
  *((_DWORD *)a4 + 103) = 2097168;
  v28 = v17 | *(unsigned __int8 *)(a2 + 43);
  *((_DWORD *)a4 + 108) = v28;
  *((_DWORD *)a4 + 108) = v28 & 0xFFC0FFFF | ((*(_WORD *)(a2 + 46) & 0x3F) << 16);
  v29 = v15 | *(unsigned __int8 *)(a2 + 43);
  *((_DWORD *)a4 + 109) = v29;
  *((_DWORD *)a4 + 109) = v29 & 0xFFC0FFFF | ((*(_WORD *)(a2 + 46) & 0x3F) << 16);
  sub_20E79A214(a1, a2, a3, (uint64_t)a4);
  v30 = *(_QWORD *)(v12 + 204);
  v31 = *(_QWORD *)(v12 + 196) & 0xF000F800FFFFFFFFLL | ((unint64_t)(*((_DWORD *)a4 + 117) & 0x7FF) << 32) & 0xF000FFFFFFFFFFFFLL | ((((unint64_t)*((unsigned int *)a4 + 117) >> 16) & 0xFFF) << 48);
  *(_QWORD *)(v12 + 196) = v31;
  v32 = *(_WORD *)(a2 + 38) & 0x7F;
  v33 = v30 & 0xFFFFFF80FFFFFFFFLL | ((unint64_t)(*(_WORD *)(a2 + 38) & 0x7F) << 32);
  *(_QWORD *)(v12 + 196) = v31;
  *(_QWORD *)(v12 + 204) = v33;
  v34 = *(_WORD *)(a2 + 40) & 0x7F;
  v35 = v33 & 0xFFFF80FFFFFFFFFFLL | ((unint64_t)(*(_WORD *)(a2 + 40) & 0x7F) << 40);
  *(_QWORD *)(v12 + 196) = v31;
  *(_QWORD *)(v12 + 204) = v35;
  v36 = *((_DWORD *)a4 + 122);
  v37 = (int)(v32 + (v36 & 0x3FF) * *(unsigned __int16 *)(a1 + 68) - 1) / v32;
  if (v37 <= 2)
    LOWORD(v37) = 2;
  v38 = v37 & 0xFFF;
  v39 = v38 | v35 & 0xFFFFFFFFFFFFF000;
  *(_QWORD *)(v12 + 196) = v31;
  *(_QWORD *)(v12 + 204) = v39;
  v40 = (int)(v34 + (HIWORD(v36) & 0x1FFF) * *(unsigned __int16 *)(a1 + 68) - 1) / v34;
  if (v40 <= 2)
    LOWORD(v40) = 2;
  v41 = v40 & 0x1FFF;
  v42 = v39 & 0xFFFFFFFFE000FFFFLL | ((unint64_t)(v40 & 0x1FFF) << 16);
  *(_QWORD *)(v12 + 196) = v31;
  *(_QWORD *)(v12 + 204) = v42;
  v43 = *(unsigned __int8 *)(a2 + 42);
  *(_QWORD *)(v12 + 204) = v42;
  *(_QWORD *)(v12 + 196) = v31 & 0xFFFFFFFFFFFFFFFELL | v43;
  if (v43)
  {
    v44 = sub_20E7CB878(v32, v38, v41);
    *(_QWORD *)(v12 + 196) = *(_QWORD *)(v12 + 196) & 0xFFFFFFFFFFFFF0FFLL | ((log2((double)(unint64_t)v44) & 0xF) << 8);
  }
  *((_DWORD *)a4 + 131) = *(_DWORD *)(a2 + 52);
  *((_DWORD *)a4 + 132) = *(_DWORD *)a2 >> a3;
  *((_DWORD *)a4 + 141) &= 0x8000E000;
  v45 = 204;
  v46 = 0x7C001C00020000;
  if (a3)
  {
    v47 = 8;
    v48 = 2;
  }
  else
  {
    *(_QWORD *)(a4 + 572) = 0x7C001C00020000;
    *((_WORD *)a4 + 290) = 204;
    v46 = 0x710035000F0003;
    v47 = 12;
    v45 = 144;
    v48 = 3;
  }
  *((_DWORD *)a4 + 142) = v48;
  *(_QWORD *)(a4 + 582) = v46;
  *((_WORD *)a4 + 295) = v45;
  v49 = v47 | (a3 != 0) | *((_DWORD *)a4 + 169) & 0xFFFFFFF0;
  *((_DWORD *)a4 + 169) = v49;
  *((_DWORD *)a4 + 169) = v49 & 0xFFFFFFED | (16 * (*(unsigned __int16 *)(a2 + 50) - 1 != a3));
}

void sub_20E79A9D8(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  const char *v13;
  uint8x16_t v14;
  uint16x8_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint16x8_t v18;
  int8x16_t v19;
  int8x16_t v21;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  unint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  unint64_t v37;
  const char *v38;
  uint8x8_t v39;
  uint16x8_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v46;
  int8x16_t *v47;
  unint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;

  sub_20E79ABA4(a1, a2, a3);
  v5 = *(unsigned __int16 *)(a2 + 50);
  v6 = 2 * v5;
  v7 = 2 * v5 - 1;
  if (v7 < 8 || (unint64_t)&a3[27] < a2 + 48 && a2 + 43 < (unint64_t)&a3[26].u64[v5 + 1] + 4)
  {
    v8 = 0;
    goto LABEL_5;
  }
  if (v7 < 0x10)
  {
    v8 = 0;
LABEL_14:
    v37 = v8;
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    v38 = (const char *)(a2 + 43);
    v39 = (uint8x8_t)vld1_dup_s8(v38);
    v40 = vmovl_u8(v39);
    v41 = (int8x16_t)vmovl_high_u16(v40);
    v42 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v40.i8);
    v43.i64[0] = 0x3F003F003F003FLL;
    v43.i64[1] = 0x3F003F003F003FLL;
    _Q0 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vandq_s8(*(int8x16_t *)(a2 + 46), v43), 0);
    __asm { SHLL2           V3.4S, V0.8H, #0x10 }
    v46 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
    v47 = (int8x16_t *)((char *)a3 + 4 * v37 + 432);
    v48 = v37 - v8;
    v49 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
    v50 = vorrq_s8(_Q3, v41);
    v51 = vorrq_s8(v46, v42);
    do
    {
      v52 = vorrq_s8(v50, vandq_s8(v47[1], v49));
      *v47 = vorrq_s8(v51, vandq_s8(*v47, v49));
      v47[1] = v52;
      v47 += 2;
      v48 += 8;
    }
    while (v48);
    goto LABEL_5;
  }
  v8 = v7 & 0xFFFFFFFFFFFFFFF0;
  v13 = (const char *)(a2 + 43);
  v14 = (uint8x16_t)vld1q_dup_s8(v13);
  v15 = vmovl_high_u8(v14);
  v16 = (int8x16_t)vmovl_high_u16(v15);
  v17 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v15.i8);
  v18 = vmovl_u8(*(uint8x8_t *)v14.i8);
  v19 = (int8x16_t)vmovl_high_u16(v18);
  _Q1 = vdupq_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)(a2 + 46), (int8x8_t)0x3F003F003F003FLL), 0);
  v21 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v18.i8);
  __asm { SHLL2           V6.4S, V1.8H, #0x10 }
  v26 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
  v27 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
  v28 = a3 + 27;
  v29 = vorrq_s8(_Q6, v16);
  v30 = vorrq_s8(_Q6, v19);
  v31 = vorrq_s8(v26, v21);
  v32 = vorrq_s8(v26, v17);
  v33 = v7 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v34 = vorrq_s8(v29, vandq_s8(v28[3], v27));
    v35 = vorrq_s8(v30, vandq_s8(v28[1], v27));
    v36 = vorrq_s8(v32, vandq_s8(v28[2], v27));
    *v28 = vorrq_s8(v31, vandq_s8(*v28, v27));
    v28[1] = v35;
    v28[2] = v36;
    v28[3] = v34;
    v28 += 4;
    v33 -= 16;
  }
  while (v33);
  if ((v7 & 8) != 0)
    goto LABEL_14;
LABEL_5:
  v9 = v8 - v6 + 1;
  v10 = (unsigned int *)&a3[27] + v8;
  do
  {
    v11 = *v10 & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 43);
    *v10 = v11;
    *v10++ = v11 & 0xFFC0FFFF | ((*(_WORD *)(a2 + 46) & 0x3F) << 16);
  }
  while (!__CFADD__(v9++, 1));
  a3[44].i64[0] |= 0x180uLL;
}

void sub_20E79ABA4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  int v14;
  char v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int64x2_t v29;
  uint64_t v30;
  char *v31;
  __int16 v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int32x4_t v36;
  _OWORD *v37;
  uint64_t v38;
  int32x4_t *v39;
  uint64_t i;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int32x4_t *v56;
  int32x4_t *v57;
  unint64_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  unint64_t v63;
  uint64_t *v64;
  _DWORD *v65;
  uint64_t v66;
  unsigned int v67;
  const __int16 *v68;
  unint64_t v69;
  int16x8_t v70;
  int16x8_t *v71;
  int16x8_t v72;
  int16x8_t v73;
  unint64_t v74;
  uint64_t v75;
  __int16 *v76;
  int v78;
  int v79;
  unint64_t v80;
  char *v81;
  _QWORD v82[4];
  _QWORD v83[4];

  v3 = *(unsigned __int16 *)(a2 + 50);
  if ((v3 & 0xFFFE) != 4)
    sub_20E8090BC();
  if (sub_20E7E78F8(*(_DWORD *)a2, *(_DWORD *)(a2 + 4)) != v3)
    sub_20E809090();
  v7 = *(unsigned __int16 *)(a2 + 50);
  v8 = 2 * v7;
  bzero(a3, 0x400uLL);
  *a3 = 4384;
  *((_WORD *)a3 + 2) = *(_DWORD *)a2;
  *((_WORD *)a3 + 3) = *(_DWORD *)(a2 + 4);
  *((_QWORD *)a3 + 33) = 0;
  *(_OWORD *)(a3 + 62) = 0u;
  *(_OWORD *)(a3 + 58) = 0u;
  *(_OWORD *)(a3 + 54) = 0u;
  *(_OWORD *)(a3 + 50) = 0u;
  *(_OWORD *)(a3 + 46) = 0u;
  *(_OWORD *)(a3 + 42) = 0u;
  *(_OWORD *)(a3 + 38) = 0u;
  *(_OWORD *)(a3 + 34) = 0u;
  *(_OWORD *)(a3 + 30) = 0u;
  *(_OWORD *)(a3 + 26) = 0u;
  *(_OWORD *)(a3 + 22) = 0u;
  *(_OWORD *)(a3 + 18) = 0u;
  *(_OWORD *)(a3 + 14) = 0u;
  *(_OWORD *)(a3 + 10) = 0u;
  *(_OWORD *)(a3 + 6) = 0u;
  *(_OWORD *)(a3 + 2) = 0u;
  if (*(_WORD *)(a2 + 50) == 5)
    v9 = 1023;
  else
    v9 = 255;
  if (*(_BYTE *)(a2 + 84))
    v10 = v9;
  else
    v10 = 0;
  a3[68] = v10;
  if (*(_WORD *)(a2 + 50) == 5)
    v11 = 1023;
  else
    v11 = 255;
  if (*(_BYTE *)(a2 + 85))
    v12 = v11;
  else
    v12 = 0;
  a3[69] = v12;
  v13 = *(_BYTE *)(a2 + 86);
  if (*(_WORD *)(a2 + 50) == 5)
    v14 = 510;
  else
    v14 = 126;
  if (!*(_BYTE *)(a2 + 86))
    v14 = 0;
  a3[70] = v14;
  v15 = v13 | *(_BYTE *)(a2 + 87) | *(_BYTE *)(a2 + 88) | *(_BYTE *)(a2 + 89) | *(_BYTE *)(a2 + 153) | *(_BYTE *)(a2 + 92);
  if (*(_WORD *)(a2 + 50) == 5)
    v16 = 510;
  else
    v16 = 126;
  if (v15)
    v17 = v16;
  else
    v17 = 0;
  a3[71] = v17;
  if ((_DWORD)v7)
  {
    if (v8 <= 1)
      v18 = 1;
    else
      v18 = 2 * v7;
    if (v18 >= 8)
    {
      v19 = v18 & 0x1FFF8;
      v20 = (int64x2_t)xmmword_20E80DF50;
      v21 = (int64x2_t)xmmword_20E80DF60;
      v22 = (int64x2_t)xmmword_20E80DF70;
      v23 = (int64x2_t)xmmword_20E80DF80;
      v24 = (int8x16_t *)(a3 + 103);
      v25.i64[0] = 0x3000300030003;
      v25.i64[1] = 0x3000300030003;
      v26 = (int8x16_t)vdupq_n_s64(1uLL);
      v27.i64[0] = 0x20002000200020;
      v27.i64[1] = 0x20002000200020;
      v28.i64[0] = 0x10001000100010;
      v28.i64[1] = 0x10001000100010;
      v29 = vdupq_n_s64(8uLL);
      v30 = v18 & 0x1FFF8;
      do
      {
        *(int8x16_t *)((char *)v24 - 124) = v25;
        *v24++ = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v23, v26)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v22, v26))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v21, v26)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v20, v26)))), v28, v27);
        v21 = vaddq_s64(v21, v29);
        v22 = vaddq_s64(v22, v29);
        v23 = vaddq_s64(v23, v29);
        v20 = vaddq_s64(v20, v29);
        v30 -= 8;
      }
      while (v30);
      if (v18 == v19)
        goto LABEL_39;
    }
    else
    {
      v19 = 0;
    }
    do
    {
      v31 = (char *)a3 + 2 * v19;
      *((_WORD *)v31 + 144) = 3;
      if ((v19 & 1) != 0)
        v32 = 32;
      else
        v32 = 16;
      *((_WORD *)v31 + 206) = v32;
      ++v19;
    }
    while (v18 != v19);
  }
LABEL_39:
  a3[77] = 0;
  v33 = *(unsigned __int16 *)(a1 + 68);
  if (*(_WORD *)(a1 + 68))
  {
    v34 = *(unsigned __int16 *)(a2 + 20);
    if (v33 >= 8)
    {
      v35 = 0;
      v36 = vdupq_n_s32(v34);
      v37 = a3 + 78;
      do
      {
        v38 = (unsigned __int16)v33 & 0xFFF8;
        v39 = (int32x4_t *)v37;
        do
        {
          *v39 = v36;
          v39[1] = v36;
          v39 += 2;
          v38 -= 8;
        }
        while (v38);
        for (i = (unsigned __int16)v33 & 0xFFF8; v33 != i; ++i)
          *((_DWORD *)v37 + i) = v34;
        ++v35;
        v37 = (_OWORD *)((char *)v37 + 20);
      }
      while (v35 != v33);
    }
    else
    {
      a3[78] = v34;
      if ((_DWORD)v33 != 1)
      {
        a3[79] = v34;
        if ((_DWORD)v33 != 2)
        {
          a3[80] = v34;
          if ((_DWORD)v33 != 3)
          {
            a3[81] = v34;
            if ((_DWORD)v33 != 4)
            {
              a3[82] = v34;
              if ((_DWORD)v33 != 5)
              {
                a3[83] = v34;
                if ((_DWORD)v33 != 6)
                  a3[84] = v34;
              }
            }
          }
        }
        a3[83] = v34;
        a3[84] = v34;
        if ((_DWORD)v33 != 2)
        {
          a3[85] = v34;
          if ((_DWORD)v33 != 3)
          {
            a3[86] = v34;
            if ((_DWORD)v33 != 4)
            {
              a3[87] = v34;
              if ((_DWORD)v33 != 5)
              {
                a3[88] = v34;
                if ((_DWORD)v33 != 6)
                  a3[89] = v34;
              }
            }
          }
          a3[88] = v34;
          a3[89] = v34;
          a3[90] = v34;
          if ((_DWORD)v33 != 3)
          {
            a3[91] = v34;
            if ((_DWORD)v33 != 4)
            {
              a3[92] = v34;
              if ((_DWORD)v33 != 5)
              {
                a3[93] = v34;
                if ((_DWORD)v33 != 6)
                  a3[94] = v34;
              }
            }
            a3[93] = v34;
            a3[94] = v34;
            a3[95] = v34;
            a3[96] = v34;
            if ((_DWORD)v33 != 4)
            {
              a3[97] = v34;
              if ((_DWORD)v33 != 5)
              {
                a3[98] = v34;
                if ((_DWORD)v33 != 6)
                  a3[99] = v34;
              }
              a3[98] = v34;
              a3[99] = v34;
              a3[100] = v34;
              a3[101] = v34;
              a3[102] = v34;
              if ((_DWORD)v33 != 5)
              {
                a3[103] = v34;
                if ((_DWORD)v33 != 6)
                  a3[104] = v34;
                a3[103] = v34;
                a3[104] = v34;
                a3[105] = v34;
                a3[106] = v34;
                a3[107] = v34;
                a3[108] = v34;
                if ((_DWORD)v33 != 6)
                {
                  a3[109] = v34;
                  a3[108] = v34;
                  a3[109] = v34;
                  a3[110] = v34;
                  a3[111] = v34;
                  a3[112] = v34;
                  a3[113] = v34;
                  a3[114] = v34;
                }
              }
            }
          }
        }
      }
    }
  }
  sub_20E79D074(a1, a2, (uint64_t)a3);
  v41 = *(_QWORD *)(a3 + 129) & 0xFFFF8080E000F000 | 0x10100100010;
  *(_QWORD *)(a3 + 127) = *(_QWORD *)(a3 + 127) & 0xF000F800FFFFF0FELL | 0x5000500000000;
  *(_QWORD *)(a3 + 129) = v41;
  a3[131] = *(_DWORD *)(a2 + 24);
  a3[132] = 2047;
  a3[133] = sub_20E7E7940(*(_DWORD *)a2, 0);
  v42 = sub_20E7E7940(*(_DWORD *)a2, 1u);
  a3[134] = v42;
  a3[135] = v42;
  v43 = sub_20E7E7940(*(_DWORD *)a2, 2u);
  a3[136] = v43;
  a3[137] = v43;
  v44 = sub_20E7E7940(*(_DWORD *)a2, 3u);
  a3[138] = v44;
  if (*(_WORD *)(a2 + 50) == 5)
  {
    a3[139] = v44;
    a3[140] = sub_20E7E7940(*(_DWORD *)a2, 4u);
  }
  a3[141] &= 0x8000E000;
  a3[142] = 1023;
  *(_OWORD *)(a3 + 143) = xmmword_20E80DF90;
  a3[147] = 9437297;
  if (v7 >= 2)
  {
    v45 = (char *)a3 + 610;
    v46 = 2;
    do
    {
      *(_OWORD *)(v45 - 18) = xmmword_20E80DFA0;
      *(_DWORD *)(v45 - 2) = 9830514;
      v46 += 2;
      v45 += 20;
    }
    while (v46 < v8);
  }
  v47 = *((_QWORD *)a3 + 88) & 0xFFFFFFFFFFFFFFF0 | *(unsigned __int8 *)(a2 + 89);
  *((_QWORD *)a3 + 88) = v47;
  if (*(_BYTE *)(a2 + 88))
  {
    v48 = v47 | 8;
    if (*(_BYTE *)(a2 + 91) == 1)
      v47 |= 4uLL;
    if (!*(_BYTE *)(a2 + 91))
      v47 = v48;
  }
  *((_QWORD *)a3 + 88) = v47 & 0x7FF00000FFE0018FLL | 0x88000;
  if (*(_WORD *)(a2 + 50) == 5)
    v49 = 510;
  else
    v49 = 126;
  if (*(_BYTE *)(a2 + 87))
    v50 = v49;
  else
    v50 = 0;
  a3[178] = v50;
  v51 = *(unsigned int *)(a2 + 28);
  v82[0] = v51;
  v82[1] = v51;
  v82[2] = v51;
  v82[3] = v51;
  v83[0] = v51;
  v83[1] = v51;
  v83[2] = v51;
  v83[3] = v51;
  if (*(_BYTE *)(a2 + 76))
    sub_20E7E75AC(v51, 2 * v7, v82);
  v52 = v8 - 1;
  if (v8 != 2)
  {
    v53 = 2;
    if (v52 > 2)
      v53 = v8 - 1;
    if (v53 < 9)
    {
      v54 = 1;
LABEL_101:
      v63 = v53 - v54;
      v64 = &v82[v54 - 1];
      v65 = &a3[v54 + 179];
      do
      {
        v66 = *v64++;
        *v65++ = v66;
        --v63;
      }
      while (v63);
      goto LABEL_103;
    }
    v55 = (v53 - 1) & 0xFFFFFFFFFFFFFFF8;
    v54 = v55 | 1;
    v56 = (int32x4_t *)v83;
    v57 = (int32x4_t *)(a3 + 184);
    v58 = v55;
    do
    {
      v60 = v56[-2];
      v59 = v56[-1];
      v62 = *v56;
      v61 = v56[1];
      v56 += 4;
      v57[-1] = vuzp1q_s32(v60, v59);
      *v57 = vuzp1q_s32(v62, v61);
      v57 += 2;
      v58 -= 8;
    }
    while (v58);
    if (v53 - 1 != v55)
      goto LABEL_101;
  }
LABEL_103:
  memset_pattern16(a3 + 188, &unk_20E80E340, 8 * v7 - 4);
  v67 = a3[197] & 0xFFFFFC00 | *(_DWORD *)a2 & 0x3FF;
  a3[197] = v67;
  a3[197] = v67 & 0xE000FFFF | ((*(_DWORD *)(a2 + 4) & 0x1FFF) << 16);
  *(_OWORD *)(a3 + 198) = xmmword_20E80DFB0;
  *(_OWORD *)(a3 + 202) = xmmword_20E80DFC0;
  *(_OWORD *)(a3 + 206) = xmmword_20E80DFD0;
  *(_OWORD *)(a3 + 210) = xmmword_20E80DFE0;
  *((_QWORD *)a3 + 107) = 0x1D002E00230039;
  v68 = (const __int16 *)(a2 + 20);
  if (v52 > 7 && ((unint64_t)(a3 + 216) >= a2 + 22 || v68 >= (const __int16 *)&a3[v7 + 229]))
  {
    v69 = v52 & 0xFFFFFFFFFFFFFFF8;
    v70 = vld1q_dup_s16(v68);
    v71 = (int16x8_t *)((char *)a3 + 918);
    v72.i64[0] = 0x1000100010001;
    v72.i64[1] = 0x1000100010001;
    v73.i64[0] = -1;
    v73.i64[1] = -1;
    v74 = v52 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      *(int16x8_t *)((char *)v71 - 54) = v72;
      *(int16x8_t *)((char *)v71 - 36) = v73;
      *v71 = v70;
      *(int16x8_t *)((char *)v71++ - 18) = v70;
      v74 -= 8;
    }
    while (v74);
  }
  else
  {
    v69 = 0;
  }
  v75 = v69 - v8 + 1;
  v76 = (__int16 *)a3 + v69 + 459;
  do
  {
    *(v76 - 27) = 1;
    *(v76 - 18) = -1;
    *v76 = *v68;
    *(v76 - 9) = *v68;
    ++v76;
  }
  while (!__CFADD__(v75++, 1));
  *(_OWORD *)(a3 + 234) = xmmword_20E80E330;
  *((_QWORD *)a3 + 119) = 640;
  a3[240] = 0;
  v78 = *(unsigned __int16 *)(a2 + 50);
  if (v78 == 5)
    v79 = 15;
  else
    v79 = 7;
  a3[241] = v79;
  if (v78 != 1)
  {
    v80 = 0;
    v81 = (char *)a3 + 970;
    do
    {
      *(_DWORD *)(v81 - 2) = 19267693;
      ++v80;
      v81 += 4;
    }
    while (v80 < (unint64_t)*(unsigned __int16 *)(a2 + 50) - 1);
  }
}

unsigned int sub_20E79B4C8(unsigned int a1)
{
  return vcvts_n_u32_f32(ceilf((float)a1 * 0.0019531) + 1.0, 9uLL);
}

uint64_t sub_20E79B4E8(unsigned int a1)
{
  return vcvts_n_u32_f32(ceilf((float)a1 * 0.0019531) + 1.0, 9uLL) >> 5;
}

uint64_t sub_20E79B50C(unsigned int a1)
{
  if (a1 > 2)
    return 0;
  else
    return dword_20E80E350[(char)a1];
}

uint64_t sub_20E79B530(unsigned int a1)
{
  if (a1 > 2)
    return 12;
  else
    return dword_20E80E35C[(char)a1];
}

uint64_t sub_20E79B554(unsigned int a1)
{
  if ((((vcvts_n_u32_f32(ceilf((float)a1 * 0.0019531) + 1.0, 9uLL) >> 9) + 7) & 0xFFFFF8) >= 0x19)
    sub_20E8090E8();
  return 24;
}

void sub_20E79B598(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  uint8x16_t v14;
  uint16x8_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint16x8_t v18;
  int8x16_t v19;
  int8x16_t v21;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  unint64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  unint64_t v38;
  const char *v39;
  uint8x8_t v40;
  uint16x8_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v47;
  int8x16_t *v48;
  unint64_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned __int8 v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  int v65;

  sub_20E79B8B8(a1, a2, a3);
  v9 = *(unsigned __int16 *)(a2 + 50);
  v10 = 2 * v9;
  v11 = 2 * v9 - 1;
  if (v11 < 8 || (unint64_t)&a3[27] < a2 + 48 && a2 + 43 < (unint64_t)&a3[26].u64[v9 + 1] + 4)
  {
    v12 = 0;
    goto LABEL_12;
  }
  if (v11 < 0x10)
  {
    v12 = 0;
LABEL_10:
    v38 = v12;
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v39 = (const char *)(a2 + 43);
    v40 = (uint8x8_t)vld1_dup_s8(v39);
    v41 = vmovl_u8(v40);
    v42 = (int8x16_t)vmovl_high_u16(v41);
    v43 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v41.i8);
    v44.i64[0] = 0x3F003F003F003FLL;
    v44.i64[1] = 0x3F003F003F003FLL;
    _Q0 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vandq_s8(*(int8x16_t *)(a2 + 46), v44), 0);
    __asm { SHLL2           V3.4S, V0.8H, #0x10 }
    v47 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
    v48 = (int8x16_t *)((char *)a3 + 4 * v38 + 432);
    v49 = v38 - v12;
    v50 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
    v51 = vorrq_s8(_Q3, v42);
    v52 = vorrq_s8(v47, v43);
    do
    {
      v53 = vorrq_s8(v51, vandq_s8(v48[1], v50));
      *v48 = vorrq_s8(v52, vandq_s8(*v48, v50));
      v48[1] = v53;
      v48 += 2;
      v49 += 8;
    }
    while (v49);
    goto LABEL_12;
  }
  v12 = v11 & 0xFFFFFFFFFFFFFFF0;
  v13 = (const char *)(a2 + 43);
  v14 = (uint8x16_t)vld1q_dup_s8(v13);
  v15 = vmovl_high_u8(v14);
  v16 = (int8x16_t)vmovl_high_u16(v15);
  v17 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v15.i8);
  v18 = vmovl_u8(*(uint8x8_t *)v14.i8);
  v19 = (int8x16_t)vmovl_high_u16(v18);
  _Q1 = vdupq_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)(a2 + 46), (int8x8_t)0x3F003F003F003FLL), 0);
  v21 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v18.i8);
  __asm { SHLL2           V6.4S, V1.8H, #0x10 }
  v27 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
  v28 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
  v29 = a3 + 27;
  v30 = vorrq_s8(_Q6, v16);
  v31 = vorrq_s8(_Q6, v19);
  v32 = vorrq_s8(v27, v21);
  v33 = vorrq_s8(v27, v17);
  v34 = v11 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v35 = vorrq_s8(v30, vandq_s8(v29[3], v28));
    v36 = vorrq_s8(v31, vandq_s8(v29[1], v28));
    v37 = vorrq_s8(v33, vandq_s8(v29[2], v28));
    *v29 = vorrq_s8(v32, vandq_s8(*v29, v28));
    v29[1] = v36;
    v29[2] = v37;
    v29[3] = v35;
    v29 += 4;
    v34 -= 16;
  }
  while (v34);
  if ((v11 & 8) != 0)
    goto LABEL_10;
LABEL_12:
  v54 = v12 - v10 + 1;
  v55 = (unsigned int *)&a3[27] + v12;
  do
  {
    v56 = *v55 & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 43);
    *v55 = v56;
    *v55++ = v56 & 0xFFC0FFFF | ((*(_WORD *)(a2 + 46) & 0x3F) << 16);
  }
  while (!__CFADD__(v54++, 1));
  if (*(_BYTE *)(a2 + 92))
    v57 = 1;
  else
    v57 = *(_BYTE *)(a2 + 153);
  v58 = a3[62].i32[3] & 0xFFFFFFFE | v57;
  a3[62].i32[3] = v58;
  if (*(unsigned __int8 *)(a2 + 92) | *(unsigned __int8 *)(a2 + 153))
  {
    v59 = v58 & 0xFFFE00FF | (((vcvts_n_u32_f32(ceilf((float)*(unsigned int *)(a2 + 24) * 0.0019531) + 1.0, 9uLL) >> 5) & 0x1FF) << 8);
    a3[62].i32[3] = v59;
    a3[62].i32[3] = v59 & 0xF8FFFFFF | ((*(_BYTE *)(a2 + 132) & 3) << 24);
    v60 = vcvts_n_u32_f32(ceilf((float)*(unsigned int *)(a2 + 24) * 0.0019531) + 1.0, 9uLL);
    if ((((v60 >> 9) + 7) & 0xFFFFF8) >= 0x19)
      sub_20E8090E8();
    a3[64].i32[0] = 24;
    v61 = *(unsigned int *)(a4 + 72);
    v62 = *(_QWORD *)(a4 + 64) + v61;
    a3[63].i32[0] = v62 & 0xFFFFF;
    a3[63].i32[1] = v62 >> 20;
    *(_BYTE *)(a5 + 360) = 1;
    *(_DWORD *)(a5 + 364) = v61;
    v63 = *(char *)(a2 + 132);
    if (v63 > 2)
      v64 = 12;
    else
      v64 = dword_20E80E35C[v63];
    if (sub_20E7C5A20(v64 * v60, 0, 64, a5 + 340) >= 0x42401)
      sub_20E809114();
    v65 = *(_DWORD *)(a4 + 72) + 271360;
    a3[63].i32[2] = (v62 + 271360) & 0xFFFFF;
    a3[63].i32[3] = (v62 + 271360) >> 20;
    *(_DWORD *)(a4 + 72) = v65 + (a3[64].i32[0] << 6);
  }
}

void sub_20E79B8B8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  int v14;
  char v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int64x2_t v29;
  uint64_t v30;
  char *v31;
  __int16 v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int32x4_t v36;
  _OWORD *v37;
  uint64_t v38;
  int32x4_t *v39;
  uint64_t i;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int32x4_t *v56;
  int32x4_t *v57;
  unint64_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  unint64_t v63;
  uint64_t *v64;
  _DWORD *v65;
  uint64_t v66;
  unsigned int v67;
  const __int16 *v68;
  unint64_t v69;
  int16x8_t v70;
  _OWORD *v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  uint64_t v75;
  __int16 *v76;
  int v78;
  int v79;
  unint64_t v80;
  char *v81;
  _QWORD v82[4];
  _QWORD v83[4];

  v3 = *(unsigned __int16 *)(a2 + 50);
  if ((v3 & 0xFFFE) != 4)
    sub_20E8090BC();
  if (sub_20E7E78F8(*(_DWORD *)a2, *(_DWORD *)(a2 + 4)) != v3)
    sub_20E809090();
  v7 = *(unsigned __int16 *)(a2 + 50);
  v8 = 2 * v7;
  bzero(a3, 0x440uLL);
  *a3 = 4384;
  *((_WORD *)a3 + 2) = *(_DWORD *)a2;
  *((_WORD *)a3 + 3) = *(_DWORD *)(a2 + 4);
  *((_QWORD *)a3 + 33) = 0;
  *(_OWORD *)(a3 + 62) = 0u;
  *(_OWORD *)(a3 + 58) = 0u;
  *(_OWORD *)(a3 + 54) = 0u;
  *(_OWORD *)(a3 + 50) = 0u;
  *(_OWORD *)(a3 + 46) = 0u;
  *(_OWORD *)(a3 + 42) = 0u;
  *(_OWORD *)(a3 + 38) = 0u;
  *(_OWORD *)(a3 + 34) = 0u;
  *(_OWORD *)(a3 + 30) = 0u;
  *(_OWORD *)(a3 + 26) = 0u;
  *(_OWORD *)(a3 + 22) = 0u;
  *(_OWORD *)(a3 + 18) = 0u;
  *(_OWORD *)(a3 + 14) = 0u;
  *(_OWORD *)(a3 + 10) = 0u;
  *(_OWORD *)(a3 + 6) = 0u;
  *(_OWORD *)(a3 + 2) = 0u;
  if (*(_WORD *)(a2 + 50) == 5)
    v9 = 1023;
  else
    v9 = 255;
  if (*(_BYTE *)(a2 + 84))
    v10 = v9;
  else
    v10 = 0;
  a3[68] = v10;
  if (*(_WORD *)(a2 + 50) == 5)
    v11 = 1023;
  else
    v11 = 255;
  if (*(_BYTE *)(a2 + 85))
    v12 = v11;
  else
    v12 = 0;
  a3[69] = v12;
  v13 = *(_BYTE *)(a2 + 86);
  if (*(_WORD *)(a2 + 50) == 5)
    v14 = 510;
  else
    v14 = 126;
  if (!*(_BYTE *)(a2 + 86))
    v14 = 0;
  a3[70] = v14;
  v15 = v13 | *(_BYTE *)(a2 + 87) | *(_BYTE *)(a2 + 88) | *(_BYTE *)(a2 + 89) | *(_BYTE *)(a2 + 153) | *(_BYTE *)(a2 + 92);
  if (*(_WORD *)(a2 + 50) == 5)
    v16 = 510;
  else
    v16 = 126;
  if (v15)
    v17 = v16;
  else
    v17 = 0;
  a3[71] = v17;
  if ((_DWORD)v7)
  {
    if (v8 <= 1)
      v18 = 1;
    else
      v18 = 2 * v7;
    if (v18 >= 8)
    {
      v19 = v18 & 0x1FFF8;
      v20 = (int64x2_t)xmmword_20E80DF50;
      v21 = (int64x2_t)xmmword_20E80DF60;
      v22 = (int64x2_t)xmmword_20E80DF70;
      v23 = (int64x2_t)xmmword_20E80DF80;
      v24 = (int8x16_t *)(a3 + 103);
      v25.i64[0] = 0x3000300030003;
      v25.i64[1] = 0x3000300030003;
      v26 = (int8x16_t)vdupq_n_s64(1uLL);
      v27.i64[0] = 0x20002000200020;
      v27.i64[1] = 0x20002000200020;
      v28.i64[0] = 0x10001000100010;
      v28.i64[1] = 0x10001000100010;
      v29 = vdupq_n_s64(8uLL);
      v30 = v18 & 0x1FFF8;
      do
      {
        *(int8x16_t *)((char *)v24 - 124) = v25;
        *v24++ = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v23, v26)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v22, v26))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v21, v26)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v20, v26)))), v28, v27);
        v21 = vaddq_s64(v21, v29);
        v22 = vaddq_s64(v22, v29);
        v23 = vaddq_s64(v23, v29);
        v20 = vaddq_s64(v20, v29);
        v30 -= 8;
      }
      while (v30);
      if (v18 == v19)
        goto LABEL_39;
    }
    else
    {
      v19 = 0;
    }
    do
    {
      v31 = (char *)a3 + 2 * v19;
      *((_WORD *)v31 + 144) = 3;
      if ((v19 & 1) != 0)
        v32 = 32;
      else
        v32 = 16;
      *((_WORD *)v31 + 206) = v32;
      ++v19;
    }
    while (v18 != v19);
  }
LABEL_39:
  a3[77] = 0;
  v33 = *(unsigned __int16 *)(a1 + 68);
  if (*(_WORD *)(a1 + 68))
  {
    v34 = *(unsigned __int16 *)(a2 + 20);
    if (v33 >= 8)
    {
      v35 = 0;
      v36 = vdupq_n_s32(v34);
      v37 = a3 + 78;
      do
      {
        v38 = (unsigned __int16)v33 & 0xFFF8;
        v39 = (int32x4_t *)v37;
        do
        {
          *v39 = v36;
          v39[1] = v36;
          v39 += 2;
          v38 -= 8;
        }
        while (v38);
        for (i = (unsigned __int16)v33 & 0xFFF8; v33 != i; ++i)
          *((_DWORD *)v37 + i) = v34;
        ++v35;
        v37 = (_OWORD *)((char *)v37 + 20);
      }
      while (v35 != v33);
    }
    else
    {
      a3[78] = v34;
      if ((_DWORD)v33 != 1)
      {
        a3[79] = v34;
        if ((_DWORD)v33 != 2)
        {
          a3[80] = v34;
          if ((_DWORD)v33 != 3)
          {
            a3[81] = v34;
            if ((_DWORD)v33 != 4)
            {
              a3[82] = v34;
              if ((_DWORD)v33 != 5)
              {
                a3[83] = v34;
                if ((_DWORD)v33 != 6)
                  a3[84] = v34;
              }
            }
          }
        }
        a3[83] = v34;
        a3[84] = v34;
        if ((_DWORD)v33 != 2)
        {
          a3[85] = v34;
          if ((_DWORD)v33 != 3)
          {
            a3[86] = v34;
            if ((_DWORD)v33 != 4)
            {
              a3[87] = v34;
              if ((_DWORD)v33 != 5)
              {
                a3[88] = v34;
                if ((_DWORD)v33 != 6)
                  a3[89] = v34;
              }
            }
          }
          a3[88] = v34;
          a3[89] = v34;
          a3[90] = v34;
          if ((_DWORD)v33 != 3)
          {
            a3[91] = v34;
            if ((_DWORD)v33 != 4)
            {
              a3[92] = v34;
              if ((_DWORD)v33 != 5)
              {
                a3[93] = v34;
                if ((_DWORD)v33 != 6)
                  a3[94] = v34;
              }
            }
            a3[93] = v34;
            a3[94] = v34;
            a3[95] = v34;
            a3[96] = v34;
            if ((_DWORD)v33 != 4)
            {
              a3[97] = v34;
              if ((_DWORD)v33 != 5)
              {
                a3[98] = v34;
                if ((_DWORD)v33 != 6)
                  a3[99] = v34;
              }
              a3[98] = v34;
              a3[99] = v34;
              a3[100] = v34;
              a3[101] = v34;
              a3[102] = v34;
              if ((_DWORD)v33 != 5)
              {
                a3[103] = v34;
                if ((_DWORD)v33 != 6)
                  a3[104] = v34;
                a3[103] = v34;
                a3[104] = v34;
                a3[105] = v34;
                a3[106] = v34;
                a3[107] = v34;
                a3[108] = v34;
                if ((_DWORD)v33 != 6)
                {
                  a3[109] = v34;
                  a3[108] = v34;
                  a3[109] = v34;
                  a3[110] = v34;
                  a3[111] = v34;
                  a3[112] = v34;
                  a3[113] = v34;
                  a3[114] = v34;
                }
              }
            }
          }
        }
      }
    }
  }
  sub_20E79D074(a1, a2, (uint64_t)a3);
  v41 = *(_QWORD *)(a3 + 129) & 0xFFFF8080E000F000 | 0x10100100010;
  *(_QWORD *)(a3 + 127) = *(_QWORD *)(a3 + 127) & 0xF000F800FFFFF0FELL | 0x5000500000000;
  *(_QWORD *)(a3 + 129) = v41;
  a3[131] = *(_DWORD *)(a2 + 24);
  a3[132] = 2047;
  a3[133] = sub_20E7E7940(*(_DWORD *)a2, 0);
  v42 = sub_20E7E7940(*(_DWORD *)a2, 1u);
  a3[134] = v42;
  a3[135] = v42;
  v43 = sub_20E7E7940(*(_DWORD *)a2, 2u);
  a3[136] = v43;
  a3[137] = v43;
  v44 = sub_20E7E7940(*(_DWORD *)a2, 3u);
  a3[138] = v44;
  if (*(_WORD *)(a2 + 50) == 5)
  {
    a3[139] = v44;
    a3[140] = sub_20E7E7940(*(_DWORD *)a2, 4u);
  }
  a3[141] &= 0x8000E000;
  a3[142] = 1023;
  *(_OWORD *)(a3 + 143) = xmmword_20E80DF90;
  a3[147] = 9437297;
  if (v7 >= 2)
  {
    v45 = (char *)a3 + 610;
    v46 = 2;
    do
    {
      *(_OWORD *)(v45 - 18) = xmmword_20E80DFA0;
      *(_DWORD *)(v45 - 2) = 9830514;
      v46 += 2;
      v45 += 20;
    }
    while (v46 < v8);
  }
  v47 = *((_QWORD *)a3 + 88) & 0xFFFFFFFFFFFFFFF0 | *(unsigned __int8 *)(a2 + 89);
  *((_QWORD *)a3 + 88) = v47;
  if (*(_BYTE *)(a2 + 88))
  {
    v48 = v47 | 8;
    if (*(_BYTE *)(a2 + 91) == 1)
      v47 |= 4uLL;
    if (!*(_BYTE *)(a2 + 91))
      v47 = v48;
  }
  *((_QWORD *)a3 + 88) = v47 & 0x7FF00000FFE0018FLL | 0x88000;
  if (*(_WORD *)(a2 + 50) == 5)
    v49 = 510;
  else
    v49 = 126;
  if (*(_BYTE *)(a2 + 87))
    v50 = v49;
  else
    v50 = 0;
  a3[178] = v50;
  v51 = *(unsigned int *)(a2 + 28);
  v82[0] = v51;
  v82[1] = v51;
  v82[2] = v51;
  v82[3] = v51;
  v83[0] = v51;
  v83[1] = v51;
  v83[2] = v51;
  v83[3] = v51;
  if (*(_BYTE *)(a2 + 76))
    sub_20E7E75AC(v51, 2 * v7, v82);
  v52 = v8 - 1;
  if (v8 != 2)
  {
    v53 = 2;
    if (v52 > 2)
      v53 = v8 - 1;
    if (v53 < 9)
    {
      v54 = 1;
LABEL_101:
      v63 = v53 - v54;
      v64 = &v82[v54 - 1];
      v65 = &a3[v54 + 179];
      do
      {
        v66 = *v64++;
        *v65++ = v66;
        --v63;
      }
      while (v63);
      goto LABEL_103;
    }
    v55 = (v53 - 1) & 0xFFFFFFFFFFFFFFF8;
    v54 = v55 | 1;
    v56 = (int32x4_t *)v83;
    v57 = (int32x4_t *)(a3 + 184);
    v58 = v55;
    do
    {
      v60 = v56[-2];
      v59 = v56[-1];
      v62 = *v56;
      v61 = v56[1];
      v56 += 4;
      v57[-1] = vuzp1q_s32(v60, v59);
      *v57 = vuzp1q_s32(v62, v61);
      v57 += 2;
      v58 -= 8;
    }
    while (v58);
    if (v53 - 1 != v55)
      goto LABEL_101;
  }
LABEL_103:
  memset_pattern16(a3 + 188, &unk_20E80E340, 8 * v7 - 4);
  v67 = a3[197] & 0xFFFFFC00 | *(_DWORD *)a2 & 0x3FF;
  a3[197] = v67;
  a3[197] = v67 & 0xE000FFFF | ((*(_DWORD *)(a2 + 4) & 0x1FFF) << 16);
  *(_OWORD *)(a3 + 198) = xmmword_20E80DFB0;
  *(_OWORD *)(a3 + 202) = xmmword_20E80DFC0;
  *(_OWORD *)(a3 + 206) = xmmword_20E80DFD0;
  *(_OWORD *)(a3 + 210) = xmmword_20E80DFE0;
  *((_QWORD *)a3 + 107) = 0x1D002E00230039;
  v68 = (const __int16 *)(a2 + 20);
  if (v52 > 7 && ((unint64_t)(a3 + 221) >= a2 + 22 || v68 >= (const __int16 *)&a3[v7 + 234]))
  {
    v69 = v52 & 0xFFFFFFFFFFFFFFF8;
    v70 = vld1q_dup_s16(v68);
    v71 = a3 + 221;
    *(_QWORD *)&v72 = 0x1000100010001;
    *((_QWORD *)&v72 + 1) = 0x1000100010001;
    *(_QWORD *)&v73 = -1;
    *((_QWORD *)&v73 + 1) = -1;
    v74 = v52 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      *v71 = v72;
      *(_OWORD *)((char *)v71 + 18) = v73;
      *(int16x8_t *)((char *)v71 + 54) = v70;
      *(int16x8_t *)((char *)v71++ + 36) = v70;
      v74 -= 8;
    }
    while (v74);
  }
  else
  {
    v69 = 0;
  }
  v75 = v69 - v8 + 1;
  v76 = (__int16 *)a3 + v69 + 469;
  do
  {
    *(v76 - 27) = 1;
    *(v76 - 18) = -1;
    *v76 = *v68;
    *(v76 - 9) = *v68;
    ++v76;
  }
  while (!__CFADD__(v75++, 1));
  *(_OWORD *)(a3 + 239) = xmmword_20E80E330;
  a3[243] = 640;
  *((_QWORD *)a3 + 122) = 0;
  v78 = *(unsigned __int16 *)(a2 + 50);
  if (v78 == 5)
    v79 = 15;
  else
    v79 = 7;
  a3[246] = v79;
  if (v78 != 1)
  {
    v80 = 0;
    v81 = (char *)a3 + 990;
    do
    {
      *(_DWORD *)(v81 - 2) = 19267693;
      ++v80;
      v81 += 4;
    }
    while (v80 < (unint64_t)*(unsigned __int16 *)(a2 + 50) - 1);
  }
}

void sub_20E79C1D4(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  if (!a3)
    sub_20E809140();
  v5 = a2;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v7 = a2 >= v6;
  v8 = a2 - v6;
  if (v8 != 0 && v7)
  {
    sub_20E798DFC((char **)a1, v8);
  }
  else if (!v7)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 28 * v5;
  }
  v9 = *(_QWORD *)(a1 + 72);
  v10 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 80) - v9) >> 2);
  if (v5 <= v10)
  {
    if (v5 < v10)
      *(_QWORD *)(a1 + 80) = v9 + 28 * v5;
  }
  else
  {
    sub_20E798DFC((char **)(a1 + 72), v5 - v10);
  }
  if (a3 == 2)
  {
    v14 = *(_QWORD *)(a1 + 120);
    v13 = (char **)(a1 + 120);
    v15 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 128) - v14) >> 2);
    if (*(_QWORD *)(a1 + 128) != v14)
    {
      if (v15 < 2)
        return;
      v16 = v14 + 28;
      goto LABEL_31;
    }
    v23 = 1 - v15;
LABEL_34:
    sub_20E798DFC(v13, v23);
    return;
  }
  if (a3 != 1)
    return;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 32) - v11) >> 2);
  if (v5 <= v12)
  {
    if (v5 < v12)
      *(_QWORD *)(a1 + 32) = v11 + 28 * v5;
  }
  else
  {
    sub_20E798DFC((char **)(a1 + 24), v5 - v12);
  }
  v17 = *(_QWORD *)(a1 + 48);
  v18 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 56) - v17) >> 2);
  if (v5 <= v18)
  {
    if (v5 < v18)
      *(_QWORD *)(a1 + 56) = v17 + 28 * v5;
  }
  else
  {
    sub_20E798DFC((char **)(a1 + 48), v5 - v18);
  }
  v19 = *(_QWORD *)(a1 + 96);
  v20 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 104) - v19) >> 2);
  if (v5 <= v20)
  {
    if (v5 < v20)
      *(_QWORD *)(a1 + 104) = v19 + 28 * v5;
  }
  else
  {
    sub_20E798DFC((char **)(a1 + 96), v5 - v20);
  }
  v21 = *(_QWORD *)(a1 + 120);
  v13 = (char **)(a1 + 120);
  v22 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 128) - v21) >> 2);
  v23 = v5 - v22;
  if (v5 > v22)
    goto LABEL_34;
  if (v5 >= v22)
    return;
  v16 = v21 + 28 * v5;
LABEL_31:
  *(_QWORD *)(a1 + 128) = v16;
}

uint64_t sub_20E79C3F8(_QWORD *a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v23;

  v10 = *a1;
  v11 = a1[1];
  v12 = *(_DWORD *)(*a1 + 524);
  if (*a1 != v11)
  {
    do
    {
      if (*(_DWORD *)(v10 + 524) != v12)
        sub_20E80916C();
      v10 += 1024;
    }
    while (v10 != v11);
  }
  if (a2)
  {
    v13 = 0;
    v14 = 0;
    LODWORD(v15) = 0;
    v23 = 4 * v12;
    v16 = (a3 + 63) & 0xFFFFFFC0;
    v17 = 676;
    v18 = a2;
    while (1)
    {
      v20 = *a1;
      v21 = *(_DWORD *)(*a1 + v17 - 404);
      if ((v21 & 1) != 0)
      {
        LODWORD(v15) = sub_20E7C59A4(*a6 + v13, a4 >> v14, a5 >> v14, v15, 8) + v15;
        v20 = *a1;
        if ((*(_DWORD *)(*a1 + v17 - 404) & 2) == 0)
        {
LABEL_9:
          if ((*(_BYTE *)(v20 + v17) & 0x10) == 0)
            goto LABEL_10;
          goto LABEL_14;
        }
      }
      else if ((v21 & 2) == 0)
      {
        goto LABEL_9;
      }
      LODWORD(v15) = sub_20E7C59A4(a6[3] + v13, a4 >> v14, a5 >> v14, v15, 8) + v15;
      v20 = *a1;
      if ((*(_BYTE *)(*a1 + v17) & 0x10) == 0)
      {
LABEL_10:
        if ((*(_BYTE *)(v20 + v17 - 400) & 3) == 0)
          goto LABEL_6;
LABEL_15:
        LODWORD(v15) = sub_20E7C5958(a6[9] + v13, a4 >> v14, a5 >> v14, v15) + v15;
        goto LABEL_6;
      }
LABEL_14:
      LODWORD(v15) = sub_20E7C59A4(a6[6] + v13, a4 >> (v14 + 1), a5 >> (v14 + 1), v15, 4) + v15;
      if ((*(_BYTE *)(*a1 + v17 - 400) & 3) != 0)
        goto LABEL_15;
LABEL_6:
      v19 = sub_20E7C5A20(v23, v15, 64, a6[12] + v13) + v15;
      v15 = sub_20E7C59A4(a6[15] + v13, v16, 1, v19, 8) + v19;
      ++v14;
      v17 += 1024;
      v13 += 28;
      if (v18 == v14)
        return v15;
    }
  }
  return 0;
}

uint64_t sub_20E79C5EC(_QWORD *a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v31;

  if (a1[1] - *a1 != 1024)
    sub_20E809198();
  v6 = a1;
  if (a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v31 = a2;
    do
    {
      v14 = *v6;
      v15 = 3 << (v10 & 0xFE);
      if ((v15 & *(_DWORD *)(*v6 + 272)) != 0)
      {
        v16 = *a6 + v9;
        v17 = sub_20E7E7940(a4, v11);
        v18 = sub_20E7E7940(a5, v11);
        v19 = v16;
        v6 = a1;
        v12 += sub_20E7C5980(v19, v17, v18, v12);
        v14 = *a1;
      }
      if ((v15 & *(_DWORD *)(v14 + 276)) != 0)
      {
        v20 = a6[9] + v9;
        v21 = sub_20E7E7940(a4, v11);
        v22 = sub_20E7E7940(a5, v11);
        v23 = v20;
        v6 = a1;
        v12 += sub_20E7C5958(v23, v21, v22, v12);
      }
      ++v11;
      v10 += 2;
      v9 += 28;
    }
    while (v31 != v11);
  }
  else
  {
    v12 = 0;
  }
  v24 = sub_20E7C59A4(a6[15], (a3 + 63) & 0xFFFFFFC0, 1, v12, 8) + v12;
  v25 = *v6;
  if (*(_DWORD *)(*v6 + 712))
  {
    v24 = sub_20E7C5A20(0x186A00u, v24, 64, (uint64_t)(a6 + 32)) + v24;
    v25 = *v6;
  }
  if (*(_DWORD *)(v25 + 280))
  {
    v24 = sub_20E7C5A20(8 * *(_DWORD *)(v25 + 524), v24, 64, (uint64_t)a6 + 284) + v24;
    v25 = *v6;
  }
  v26 = *(_QWORD *)(v25 + 704);
  if ((v26 & 1) != 0)
  {
    v27 = sub_20E7C59D0(72 * *(_DWORD *)(v25 + 524), v24, (uint64_t)a6 + 172) + v24;
    v24 = sub_20E7C59D0(72 * *(_DWORD *)(*v6 + 524), v27, (uint64_t)(a6 + 18)) + v27;
    v25 = *v6;
    v26 = *(_QWORD *)(*v6 + 704);
  }
  if ((v26 & 0xC) != 0)
  {
    v28 = sub_20E7C59D0(72 * *(_DWORD *)(v25 + 524), v24, (uint64_t)a6 + 228) + v24;
    return sub_20E7C59D0(72 * *(_DWORD *)(*v6 + 524), v28, (uint64_t)(a6 + 25)) + v28;
  }
  return v24;
}

uint64_t sub_20E79C850(_DWORD *a1, size_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, _QWORD *a9)
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  bzero(a1, a2);
  *a1 = -1;
  a1[1] = a3 | 0x80000000;
  *((_QWORD *)a1 + 1) = 0;
  v16 = (uint64_t)(a1 + 38);
  a1[38] |= 0x7FFFFFFFu;
  v17 = a1[59];
  *((_QWORD *)a1 + 18) = 0x10000000BLL;
  a1[59] = v17 | 0x7FFFFFFF;
  a1[80] |= 0x7FFFFFFFu;
  a1[101] |= 0x7FFFFFFFu;
  a1[122] |= 0x7FFFFFFFu;
  a1[143] |= 0x7FFFFFFFu;
  a1[164] |= 0x7FFFFFFFu;
  a1[185] |= 0x7FFFFFFFu;
  a1[206] |= 0x7FFFFFFFu;
  a1[227] |= 0x7FFFFFFFu;
  a1[248] |= 0x7FFFFFFFu;
  if (a7)
  {
    v18 = a9[6];
    if (!*(_BYTE *)(v18 + 28 * (a7 - 1)))
      sub_20E8091C4();
    result = sub_20E7C56D4(v16, *(_DWORD *)(v18 + 28 * (a7 - 1) + 4), *(_DWORD *)(v18 + 28 * (a7 - 1) + 8), *(_DWORD *)(v18 + 28 * (a7 - 1) + 12), 4, 1, *(_DWORD *)(v18 + 28 * (a7 - 1) + 16) + a8);
    v20 = (_BYTE *)*a9;
    if (*(_BYTE *)(*a9 + 28 * a7))
      goto LABEL_4;
  }
  else
  {
    result = sub_20E7C56D4(v16, a4, a5, a6, 8, 0, 0);
    a7 = 0;
    v20 = (_BYTE *)*a9;
    if (*(_BYTE *)*a9)
LABEL_4:
      result = sub_20E7C56D4((uint64_t)(a1 + 122), *(_DWORD *)&v20[28 * a7 + 4], *(_DWORD *)&v20[28 * a7 + 8], *(_DWORD *)&v20[28 * a7 + 12], 8, 1, *(_DWORD *)&v20[28 * a7 + 16] + a8);
  }
  v21 = a9[3];
  if (*(_BYTE *)(v21 + 28 * a7))
    result = sub_20E7C56D4((uint64_t)(a1 + 143), *(_DWORD *)(v21 + 28 * a7 + 4), *(_DWORD *)(v21 + 28 * a7 + 8), *(_DWORD *)(v21 + 28 * a7 + 12), 8, 1, *(_DWORD *)(v21 + 28 * a7 + 16) + a8);
  v22 = a9[6];
  if (*(_BYTE *)(v22 + 28 * a7))
    result = sub_20E7C56D4((uint64_t)(a1 + 59), *(_DWORD *)(v22 + 28 * a7 + 4), *(_DWORD *)(v22 + 28 * a7 + 8), *(_DWORD *)(v22 + 28 * a7 + 12), 4, 1, *(_DWORD *)(v22 + 28 * a7 + 16) + a8);
  v23 = a9[9];
  if (*(_BYTE *)(v23 + 28 * a7))
    result = sub_20E7C56D4((uint64_t)(a1 + 101), *(_DWORD *)(v23 + 28 * a7 + 4), *(_DWORD *)(v23 + 28 * a7 + 8), *(_DWORD *)(v23 + 28 * a7 + 12), 4, 1, *(_DWORD *)(v23 + 28 * a7 + 16) + a8);
  v24 = a9[12];
  if (*(_BYTE *)(v24 + 28 * a7))
    result = sub_20E7C56D4((uint64_t)(a1 + 80), *(_DWORD *)(v24 + 28 * a7 + 4), *(_DWORD *)(v24 + 28 * a7 + 8), *(_DWORD *)(v24 + 28 * a7 + 12), 8, 1, *(_DWORD *)(v24 + 28 * a7 + 16) + a8);
  v25 = a9[15];
  if (*(_BYTE *)(v25 + 28 * a7))
    return sub_20E7C56D4((uint64_t)(a1 + 248), *(_DWORD *)(v25 + 28 * a7 + 4), *(_DWORD *)(v25 + 28 * a7 + 8), *(_DWORD *)(v25 + 28 * a7 + 12), 8, 1, *(_DWORD *)(v25 + 28 * a7 + 16) + a8);
  return result;
}

uint64_t sub_20E79CB2C(_DWORD *a1, size_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, unsigned int *a8)
{
  uint64_t v15;
  uint64_t result;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  bzero(a1, a2);
  *a1 = -1;
  a1[1] = a3 | 0x80000000;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 18) = 0x10000000BLL;
  a1[38] |= 0x7FFFFFFFu;
  a1[59] |= 0x7FFFFFFFu;
  a1[80] |= 0x7FFFFFFFu;
  a1[101] |= 0x7FFFFFFFu;
  a1[122] |= 0x7FFFFFFFu;
  a1[143] |= 0x7FFFFFFFu;
  a1[164] |= 0x7FFFFFFFu;
  a1[185] |= 0x7FFFFFFFu;
  a1[206] |= 0x7FFFFFFFu;
  a1[227] |= 0x7FFFFFFFu;
  a1[248] |= 0x7FFFFFFFu;
  v15 = *((_QWORD *)a8 + 1) - *(_QWORD *)a8;
  if (((0x6DB6DB6DB6DB6DB7 * (v15 >> 2)) & 0xFFFFFFFFFFFFFFFELL) != 4)
    sub_20E8091F0();
  result = sub_20E7C56D4((uint64_t)(a1 + 38), a4, a5, a6, 8, 0, 0);
  v17 = *(_BYTE **)a8;
  if (**(_BYTE **)a8)
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 101), *((_DWORD *)v17 + 1), *((_DWORD *)v17 + 2), *((_DWORD *)v17 + 3), 8, 1, *((_DWORD *)v17 + 4) + a7);
    v17 = *(_BYTE **)a8;
  }
  if (v17[28])
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 59), *((_DWORD *)v17 + 8), *((_DWORD *)v17 + 9), *((_DWORD *)v17 + 10), 8, 1, *((_DWORD *)v17 + 11) + a7);
    v17 = *(_BYTE **)a8;
  }
  if (v17[56])
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 122), *((_DWORD *)v17 + 15), *((_DWORD *)v17 + 16), *((_DWORD *)v17 + 17), 8, 1, *((_DWORD *)v17 + 18) + a7);
    v17 = *(_BYTE **)a8;
  }
  if (v17[84])
    result = sub_20E7C56D4((uint64_t)(a1 + 143), *((_DWORD *)v17 + 22), *((_DWORD *)v17 + 23), *((_DWORD *)v17 + 24), 8, 1, *((_DWORD *)v17 + 25) + a7);
  v18 = *((_QWORD *)a8 + 9);
  if (*(_BYTE *)v18)
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 101), *(_DWORD *)(v18 + 4), *(_DWORD *)(v18 + 8), *(_DWORD *)(v18 + 12), 4, 1, *(_DWORD *)(v18 + 16) + a7);
    v18 = *((_QWORD *)a8 + 9);
  }
  if (*(_BYTE *)(v18 + 28))
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 59), *(_DWORD *)(v18 + 32), *(_DWORD *)(v18 + 36), *(_DWORD *)(v18 + 40), 4, 1, *(_DWORD *)(v18 + 44) + a7);
    v18 = *((_QWORD *)a8 + 9);
  }
  if (*(_BYTE *)(v18 + 56))
  {
    result = sub_20E7C56D4((uint64_t)(a1 + 122), *(_DWORD *)(v18 + 60), *(_DWORD *)(v18 + 64), *(_DWORD *)(v18 + 68), 4, 1, *(_DWORD *)(v18 + 72) + a7);
    v18 = *((_QWORD *)a8 + 9);
  }
  if (*(_BYTE *)(v18 + 84))
    result = sub_20E7C56D4((uint64_t)(a1 + 143), *(_DWORD *)(v18 + 88), *(_DWORD *)(v18 + 92), *(_DWORD *)(v18 + 96), 4, 1, *(_DWORD *)(v18 + 100) + a7);
  if (v15 == 140)
  {
    if (*(_BYTE *)(*(_QWORD *)a8 + 112))
      result = sub_20E7C56D4((uint64_t)(a1 + 227), *(_DWORD *)(*(_QWORD *)a8 + 116), *(_DWORD *)(*(_QWORD *)a8 + 120), *(_DWORD *)(*(_QWORD *)a8 + 124), 8, 1, *(_DWORD *)(*(_QWORD *)a8 + 128) + a7);
    v19 = *((_QWORD *)a8 + 9);
    if (*(_BYTE *)(v19 + 112))
      result = sub_20E7C56D4((uint64_t)(a1 + 227), *(_DWORD *)(v19 + 116), *(_DWORD *)(v19 + 120), *(_DWORD *)(v19 + 124), 4, 1, *(_DWORD *)(v19 + 128) + a7);
  }
  v20 = *((_QWORD *)a8 + 15);
  if (*(_BYTE *)v20)
    result = sub_20E7C56D4((uint64_t)(a1 + 248), *(_DWORD *)(v20 + 4), *(_DWORD *)(v20 + 8), *(_DWORD *)(v20 + 12), 8, 1, *(_DWORD *)(v20 + 16) + a7);
  if (*((_BYTE *)a8 + 256))
    result = sub_20E7C56D4((uint64_t)(a1 + 80), a8[65], a8[66], a8[67], 8, 1, a8[68] + a7);
  if (*((_BYTE *)a8 + 284))
    result = sub_20E7C56D4((uint64_t)(a1 + 164), a8[72], a8[73], a8[74], 8, 1, a8[75] + a7);
  if (*((_BYTE *)a8 + 144))
    result = sub_20E7C56D4((uint64_t)(a1 + 80), a8[37], a8[38], a8[39], 8, 1, a8[40] + a7);
  if (*((_BYTE *)a8 + 172))
    result = sub_20E7C56D4((uint64_t)(a1 + 164), a8[44], a8[45], a8[46], 8, 1, a8[47] + a7);
  if (*((_BYTE *)a8 + 200))
    result = sub_20E7C56D4((uint64_t)(a1 + 185), a8[51], a8[52], a8[53], 8, 1, a8[54] + a7);
  if (*((_BYTE *)a8 + 228))
    return sub_20E7C56D4((uint64_t)(a1 + 206), a8[58], a8[59], a8[60], 8, 1, a8[61] + a7);
  return result;
}

void *sub_20E79CF50(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, int a7)
{
  _DWORD *v13;

  *(_DWORD *)a1 = -1;
  *(_DWORD *)(a1 + 4) = a6;
  bzero((void *)(a1 + 16), 0x440uLL);
  *(_QWORD *)(a1 + 12) = 0x200000440;
  *(_DWORD *)(a1 + 20) = a3 >> a5;
  *(_DWORD *)(a1 + 24) = a4 >> a5;
  *(_DWORD *)(a1 + 28) = a7;
  *(_DWORD *)(a1 + 32) = 1;
  v13 = (_DWORD *)(*a2 + ((unint64_t)a5 << 10));
  v13[169] = v13[169] & 0xFFFFFFFE | (a7 == 4);
  return memcpy((void *)(a1 + 80), v13, 0x400uLL);
}

void *sub_20E79CFEC(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  if (a5 || *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 1024)
    sub_20E80921C();
  *(_DWORD *)a1 = -1;
  *(_DWORD *)(a1 + 4) = a6;
  bzero((void *)(a1 + 16), 0x440uLL);
  *(_QWORD *)(a1 + 12) = 0x200000440;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a7;
  *(_DWORD *)(a1 + 32) = 1;
  return memcpy((void *)(a1 + 80), *(const void **)a2, 0x400uLL);
}

uint64_t sub_20E79D074(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;

  if (*(_DWORD *)(result + 64) != 4)
    sub_20E809274();
  v3 = result;
  if (*(_WORD *)(result + 68) != 5)
    sub_20E809248();
  if (*(_WORD *)(a2 + 50))
  {
    v5 = 0;
    do
    {
      v7 = sub_20E7E7940(*(_DWORD *)a2, v5);
      v8 = sub_20E7E7940(*(_DWORD *)(a2 + 4), v5);
      v9 = *(__int16 *)(a2 + 14);
      v10 = v7;
      if (*(_WORD *)(a2 + 18))
        v10 = sub_20E7E7940(*(__int16 *)(a2 + 18), v5);
      v11 = *(__int16 *)(a2 + 12);
      v12 = v8;
      if (*(_WORD *)(a2 + 16))
        v12 = sub_20E7E7940(*(__int16 *)(a2 + 16), v5);
      v14 = 0;
      v15 = 0;
      sub_20E79A308(v3, v7, (int *)&v15 + 1, (signed int *)&v15, v9 >> v5, v10);
      result = sub_20E79A308(v3, v8, (int *)&v14 + 1, (signed int *)&v14, v11 >> v5, v12);
      v6 = a3 + 4 * v5;
      *(_DWORD *)(v6 + 468) = ((WORD2(v14) & 0x1FFF) << 16) | WORD2(v15) & 0x7FF | *(_DWORD *)(v6 + 468) & 0xE000F800;
      *(_DWORD *)(v6 + 488) = ((v14 & 0x1FFF) << 16) | v15 & 0x3FF | *(_DWORD *)(v6 + 488) & 0xE000FC00;
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a2 + 50));
  }
  return result;
}

uint64_t sub_20E79D1F8(unsigned int a1)
{
  return 4 * sub_20E79B50C(a1) + 16;
}

uint64_t sub_20E79D214(unsigned int a1, unsigned int a2)
{
  int v3;

  v3 = 4 * sub_20E79B50C(a2) + 16;
  return v3 * sub_20E79B4C8(a1);
}

void sub_20E79D24C(uint64_t a1, unint64_t a2, char **a3)
{
  char *v5;
  __n128 *v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  int64x2_t v17;
  uint64_t v18;
  const std::nothrow_t *v19;
  unint64_t v20;
  char *v21;
  BOOL v22;
  char *v23;
  uint64_t v24;

  if (!a1)
    sub_20E8092A0();
  v5 = *a3;
  v6 = (__n128 *)a3[1];
  v7 = ((char *)v6 - *a3) >> 3;
  v8 = a2 >= v7;
  v9 = a2 - v7;
  if (v9 != 0 && v8)
  {
    sub_20E791B74((uint64_t)a3, v9);
    v5 = *a3;
    v6 = (__n128 *)a3[1];
  }
  else if (!v8)
  {
    v6 = (__n128 *)&v5[8 * a2];
    a3[1] = (char *)v6;
  }
  if (v5 != (char *)v6)
  {
    v10 = (char *)v6 - v5 - 8;
    if (v10 < 0x18)
    {
      v11 = 0;
      v12 = (__n128 *)v5;
      do
      {
LABEL_13:
        v12->n128_u64[0] = v11;
        v12 = (__n128 *)((char *)v12 + 8);
        ++v11;
      }
      while (v12 != v6);
      goto LABEL_14;
    }
    v13 = (v10 >> 3) + 1;
    v11 = v13 & 0x3FFFFFFFFFFFFFFCLL;
    v12 = (__n128 *)&v5[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
    v14 = (int64x2_t)xmmword_20E80DF80;
    v15 = (int64x2_t *)(v5 + 16);
    v16 = vdupq_n_s64(2uLL);
    v17 = vdupq_n_s64(4uLL);
    v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v15[-1] = v14;
      *v15 = vaddq_s64(v14, v16);
      v14 = vaddq_s64(v14, v17);
      v15 += 2;
      v18 -= 4;
    }
    while (v18);
    if (v13 != v11)
      goto LABEL_13;
  }
LABEL_14:
  v24 = a1;
  if ((char *)v6 - v5 < 1025)
  {
LABEL_18:
    sub_20E79D698(v5, v6, &v24, ((char *)v6 - v5) >> 3, 0, 0);
  }
  else
  {
    v19 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v20 = ((char *)v6 - v5) >> 3;
    while (1)
    {
      v21 = (char *)operator new(8 * v20, v19);
      if (v21)
        break;
      v22 = v20 > 1;
      v20 >>= 1;
      if (!v22)
        goto LABEL_18;
    }
    v23 = v21;
    sub_20E79D698(v5, v6, &v24, ((char *)v6 - v5) >> 3, v21, v20);
    operator delete(v23);
  }
}

uint64_t sub_20E79D3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[8];
  _QWORD v10[8];

  result = kdebug_trace();
  if (*(_BYTE *)(a3 + 68) != 2)
    sub_20E8092CC(result, v7);
  if (*(_BYTE *)(a3 + 89))
  {
    if (*(_BYTE *)(a3 + 155))
    {
      sub_20E7976B0(a1, (unsigned int *)a3);
      if (!*(_BYTE *)(a3 + 76))
        return kdebug_trace();
    }
    else
    {
      sub_20E79D518(a1, (unsigned int *)a3);
      if (!*(_BYTE *)(a3 + 76))
        return kdebug_trace();
    }
    if (*(_BYTE *)(a3 + 90))
    {
      v8 = 2 * *(unsigned __int16 *)(a3 + 50);
      v9[0] = *(unsigned __int16 *)(a3 + 20);
      v9[1] = v9[0];
      v9[2] = v9[0];
      v9[3] = v9[0];
      v9[4] = v9[0];
      v9[5] = v9[0];
      v9[6] = v9[0];
      v9[7] = v9[0];
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 96))(v10, a2);
      sub_20E7E7700((uint64_t)v10, *(_QWORD *)(a1 + 296) + 240, v8, v9[0], (uint64_t)v9, *(float *)(a3 + 80));
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 112))(a2, v9);
    }
    return kdebug_trace();
  }
  return result;
}

void sub_20E79D518(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  int64x2_t v17;
  uint64_t v18;
  void *__p;
  _BYTE *v20;
  uint64_t v21;

  v2 = *(_DWORD *)(a1 + 176);
  v3 = *(_DWORD *)(a1 + 152);
  if (v2 >= v3 && a2[6] != 0)
    sub_20E807948(a1, (uint64_t)a2);
  if (v3 != *(_DWORD *)(a1 + 180) + v2)
    sub_20E8087CC();
  __p = 0;
  v20 = 0;
  v21 = 0;
  v7 = *(_DWORD *)(a1 + 184);
  v8 = *(_DWORD *)(a1 + 160);
  if (v8 + v7)
  {
    sub_20E791B74((uint64_t)&__p, (v8 + v7));
    v9 = v20;
    if (__p != v20)
    {
      v10 = v20 - (_BYTE *)__p - 8;
      if (v10 < 0x18)
      {
        v11 = 0;
        v12 = __p;
        do
LABEL_14:
          *v12++ = v11++;
        while (v12 != v9);
        goto LABEL_15;
      }
      v13 = (v10 >> 3) + 1;
      v11 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      v12 = (char *)__p + 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
      v14 = (int64x2_t)xmmword_20E80DF80;
      v15 = (int64x2_t *)((char *)__p + 16);
      v16 = vdupq_n_s64(2uLL);
      v17 = vdupq_n_s64(4uLL);
      v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v15[-1] = v14;
        *v15 = vaddq_s64(v14, v16);
        v14 = vaddq_s64(v14, v17);
        v15 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v13 != v11)
        goto LABEL_14;
    }
  }
LABEL_15:
  sub_20E7978A0(a1);
  if (*((_BYTE *)a2 + 77))
    sub_20E797C3C(*(_QWORD *)(a1 + 288), *(unsigned int *)(a1 + 284), *(_QWORD *)(a1 + 168), *(unsigned int *)(a1 + 160), *((unsigned __int16 *)a2 + 16), *((unsigned __int16 *)a2 + 17), *((unsigned __int16 *)a2 + 18), a2[6], *a2, a2[1], (char **)&__p);
  sub_20E797964(a1, &__p);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20E79D678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20E79D698(char *a1, __n128 *a2, uint64_t *a3, unint64_t a4, char *a5, uint64_t a6)
{
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __n128 *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  __n128 result;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __n128 *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  char *v66;
  __n128 *v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  __n128 *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 *v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 *v83;
  __n128 v84;

  if (a4 < 2)
    return result;
  v8 = (__n128 *)a1;
  if (a4 == 2)
  {
    v9 = a2[-1].n128_u64[1];
    v10 = *(_QWORD *)a1;
    v11 = *(_QWORD *)(*a3 + 72 * v9 + 64);
    v12 = *(_QWORD *)(*a3 + 72 * *(_QWORD *)a1 + 64);
    if (BYTE5(v11) < (unint64_t)BYTE5(v12)
      || BYTE5(v12) >= (unint64_t)BYTE5(v11)
      && (WORD1(v11) < (unint64_t)WORD1(v12)
       || WORD1(v12) >= (unint64_t)WORD1(v11)
       && ((unsigned __int16)*(_QWORD *)(*a3 + 72 * v9 + 64) < (unint64_t)(unsigned __int16)*(_QWORD *)(*a3 + 72 * *(_QWORD *)a1 + 64)
        || (unsigned __int16)*(_QWORD *)(*a3 + 72 * *(_QWORD *)a1 + 64) >= (unint64_t)(unsigned __int16)*(_QWORD *)(*a3 + 72 * v9 + 64)
        && ((v41 = HIWORD(v11) & 0x7FFF, v42 = HIWORD(v12) & 0x7FFF, v41 < v42)
         || ((v43 = BYTE4(v11), v44 = BYTE4(v12), v42 >= v41) ? (v45 = v43 >= v44) : (v45 = 1), !v45)))))
    {
      *(_QWORD *)a1 = v9;
      a2[-1].n128_u64[1] = v10;
    }
    return result;
  }
  if ((uint64_t)a4 > 128)
  {
    v48 = a4 >> 1;
    v49 = &a1[8 * (a4 >> 1)];
    v50 = a4 >> 1;
    if ((uint64_t)a4 > a6)
    {
      sub_20E79D698(a1, v49, a3, v50, a5, a6);
      sub_20E79D698(&v8->n128_u64[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
      result.n128_u64[0] = sub_20E79E08C(v8, (__n128 *)((char *)v8 + 8 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6).n128_u64[0];
      return result;
    }
    sub_20E79DBA8(a1, v49, a3, v50, a5);
    v52 = &a5[8 * v48];
    result.n128_u64[0] = sub_20E79DBA8(&v8->n128_i8[8 * (a4 >> 1)], (char *)a2, a3, a4 - (a4 >> 1), v52).n128_u64[0];
    v53 = *a3;
    v54 = v52;
    v55 = a5;
    v56 = v8;
    v57 = &a5[8 * a4];
    while (1)
    {
      if (v54 == v57)
      {
        if (v55 == v52)
          return result;
        v65 = &a5[8 * v48] - v55 - 8;
        if (v65 >= 0x38 && (unint64_t)((char *)v8 - v55) >= 0x20)
        {
          v73 = 0;
          v74 = (v65 >> 3) + 1;
          v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          v66 = &v55[v75];
          v67 = (__n128 *)((char *)v56 + v75);
          v76 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v77 = &v56[v73];
            result = *(__n128 *)&v55[v73 * 16];
            v78 = *(__n128 *)&v55[v73 * 16 + 16];
            *v77 = result;
            v77[1] = v78;
            v73 += 2;
            v76 -= 4;
          }
          while (v76);
          if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v66 = v55;
          v67 = v56;
        }
        do
        {
          v68 = *(_QWORD *)v66;
          v66 += 8;
          v67->n128_u64[0] = v68;
          v67 = (__n128 *)((char *)v67 + 8);
        }
        while (v66 != v52);
        return result;
      }
      v58 = *(_QWORD *)(v53 + 72 * *(_QWORD *)v54 + 64);
      v59 = *(_QWORD *)(v53 + 72 * *(_QWORD *)v55 + 64);
      if (BYTE5(v58) >= (unint64_t)BYTE5(v59)
        && (BYTE5(v59) < (unint64_t)BYTE5(v58)
         || WORD1(v58) >= (unint64_t)WORD1(v59)
         && (WORD1(v59) < (unint64_t)WORD1(v58)
          || (unsigned __int16)*(_QWORD *)(v53 + 72 * *(_QWORD *)v54 + 64) >= (unint64_t)(unsigned __int16)*(_QWORD *)(v53 + 72 * *(_QWORD *)v55 + 64)
          && ((unsigned __int16)*(_QWORD *)(v53 + 72 * *(_QWORD *)v55 + 64) < (unint64_t)(unsigned __int16)*(_QWORD *)(v53 + 72 * *(_QWORD *)v54 + 64)
           || (v60 = HIWORD(v58) & 0x7FFF, v61 = HIWORD(v59) & 0x7FFF, v60 >= v61)
           && ((v62 = BYTE4(v58), v63 = BYTE4(v59), v61 >= v60) ? (v64 = v62 >= v63) : (v64 = 1), v64)))))
      {
        v56->n128_u64[0] = *(_QWORD *)v55;
        v56 = (__n128 *)((char *)v56 + 8);
        v55 += 8;
        v8 = (__n128 *)((char *)v8 + 8);
        if (v55 == v52)
        {
LABEL_79:
          if (v54 == v57)
            return result;
          v69 = &a5[8 * a4] - v54 - 8;
          if (v69 >= 0x48 && (unint64_t)((char *)v8 - v54) >= 0x20)
          {
            v79 = 0;
            v80 = (v69 >> 3) + 1;
            v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
            v70 = &v54[v81];
            v71 = (__n128 *)((char *)v56 + v81);
            v82 = v80 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v83 = &v56[v79];
              result = *(__n128 *)&v54[v79 * 16];
              v84 = *(__n128 *)&v54[v79 * 16 + 16];
              *v83 = result;
              v83[1] = v84;
              v79 += 2;
              v82 -= 4;
            }
            while (v82);
            if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v70 = v54;
            v71 = v56;
          }
          do
          {
            v72 = *(_QWORD *)v70;
            v70 += 8;
            v71->n128_u64[0] = v72;
            v71 = (__n128 *)((char *)v71 + 8);
          }
          while (v70 != v57);
          return result;
        }
      }
      else
      {
        v56->n128_u64[0] = *(_QWORD *)v54;
        v56 = (__n128 *)((char *)v56 + 8);
        v54 += 8;
        v8 = (__n128 *)((char *)v8 + 8);
        if (v55 == v52)
          goto LABEL_79;
      }
    }
  }
  if (a1 == (char *)a2)
    return result;
  v14 = a1 + 8;
  if (a1 + 8 == (char *)a2)
    return result;
  v15 = 0;
  v16 = *a3;
  v17 = a1;
  while (2)
  {
    v18 = (__n128 *)v17;
    v17 = v14;
    v19 = *(_QWORD *)v14;
    v20 = v16 + 72 * v19;
    v23 = *(_QWORD *)(v20 + 64);
    v21 = (unint64_t *)(v20 + 64);
    v22 = v23;
    v24 = BYTE5(v23);
    v25 = *(_QWORD *)(v16 + 72 * v18->n128_u64[0] + 64);
    if (BYTE5(v23) >= (unint64_t)BYTE5(v25))
    {
      if (BYTE5(v25) < v24)
        goto LABEL_11;
      if (WORD1(v22) >= (unint64_t)WORD1(v25))
      {
        if (WORD1(v25) < (unint64_t)WORD1(v22))
          goto LABEL_11;
        if ((unsigned __int16)v22 >= (unint64_t)(unsigned __int16)*(_QWORD *)(v16 + 72 * v18->n128_u64[0] + 64))
        {
          if ((unsigned __int16)*(_QWORD *)(v16 + 72 * v18->n128_u64[0] + 64) < (unint64_t)(unsigned __int16)v22)
            goto LABEL_11;
          v36 = HIWORD(v22) & 0x7FFF;
          v37 = HIWORD(v25) & 0x7FFF;
          if (v36 >= v37)
          {
            v38 = BYTE4(v22);
            v39 = BYTE4(v25);
            if (v37 < v36 || v38 >= v39)
              goto LABEL_11;
          }
        }
      }
    }
    *(_QWORD *)v17 = v18->n128_u64[0];
    if (v18 == v8)
    {
LABEL_9:
      v18 = v8;
      goto LABEL_10;
    }
    v26 = v15;
    while (1)
    {
      v27 = *(unint64_t *)((char *)&v8->n128_u64[-1] + v26);
      v28 = *v21;
      v29 = ((unsigned __int16)WORD2(*v21) >> 8);
      v30 = *(_QWORD *)(v16 + 72 * v27 + 64);
      if (v29 < BYTE5(v30))
        goto LABEL_15;
      if (BYTE5(v30) < v29)
        goto LABEL_10;
      if (WORD1(v28) < (unint64_t)WORD1(v30))
        goto LABEL_15;
      if (WORD1(v30) < (unint64_t)WORD1(v28))
        goto LABEL_10;
      if ((unsigned __int16)*v21 < (unint64_t)(unsigned __int16)*(_QWORD *)(v16 + 72 * v27 + 64))
        goto LABEL_15;
      if ((unsigned __int16)*(_QWORD *)(v16 + 72 * v27 + 64) < (unint64_t)(unsigned __int16)*v21)
        break;
      v31 = HIWORD(v28) & 0x7FFF;
      v32 = HIWORD(v30) & 0x7FFF;
      if (v31 >= v32)
      {
        v33 = BYTE4(v28);
        v34 = BYTE4(v30);
        if (v32 < v31 || v33 >= v34)
          goto LABEL_10;
      }
LABEL_15:
      v18 = (__n128 *)((char *)v18 - 8);
      *(unint64_t *)((char *)v8->n128_u64 + v26) = v27;
      v26 -= 8;
      if (!v26)
        goto LABEL_9;
    }
    v18 = (__n128 *)((char *)v8 + v26);
LABEL_10:
    v18->n128_u64[0] = v19;
LABEL_11:
    v14 = v17 + 8;
    v15 += 8;
    if (v17 + 8 != (char *)a2)
      continue;
    return result;
  }
}

__n128 sub_20E79DBA8(char *a1, char *a2, uint64_t *a3, unint64_t a4, char *a5)
{
  char *v5;
  char *v7;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  __n128 result;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  __int128 v74;

  if (a4)
  {
    v5 = a5;
    v7 = a1;
    if (a4 == 1)
    {
LABEL_70:
      *(_QWORD *)v5 = *(_QWORD *)v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = *((_QWORD *)a2 - 1);
      v11 = *(_QWORD *)(*a3 + 72 * v10 + 64);
      v12 = *(_QWORD *)(*a3 + 72 * *(_QWORD *)a1 + 64);
      if (BYTE5(v11) >= (unint64_t)BYTE5(v12))
      {
        if (BYTE5(v12) < (unint64_t)BYTE5(v11)
          || WORD1(v11) >= (unint64_t)WORD1(v12)
          && (WORD1(v12) < (unint64_t)WORD1(v11)
           || (unsigned __int16)*(_QWORD *)(*a3 + 72 * v10 + 64) >= (unint64_t)(unsigned __int16)*(_QWORD *)(*a3 + 72 * *(_QWORD *)a1 + 64)
           && ((unsigned __int16)*(_QWORD *)(*a3 + 72 * *(_QWORD *)a1 + 64) < (unint64_t)(unsigned __int16)*(_QWORD *)(*a3 + 72 * v10 + 64)
            || (v61 = HIWORD(v11) & 0x7FFF, v62 = HIWORD(v12) & 0x7FFF, v61 >= v62)
            && (v62 < v61 || BYTE4(v11) >= (unint64_t)BYTE4(v12)))))
        {
          v10 = *(_QWORD *)a1;
          v7 = a2 - 8;
        }
      }
      *(_QWORD *)a5 = v10;
      v5 = a5 + 8;
      goto LABEL_70;
    }
    if ((uint64_t)a4 > 8)
    {
      v38 = a4 >> 1;
      v39 = 8 * (a4 >> 1);
      v40 = &a1[v39];
      sub_20E79D698(a1, &a1[v39], a3, a4 >> 1, a5, a4 >> 1);
      sub_20E79D698(&v7[v39], a2, a3, a4 - v38, &v5[v39], a4 - v38);
      v42 = *a3;
      v43 = v5;
      v44 = v7;
      v45 = &v7[v39];
      do
      {
        while (1)
        {
          if (v45 == a2)
          {
            if (v44 == v40)
              return result;
            v53 = &v7[8 * v38] - v44 - 8;
            if (v53 >= 0x38 && (unint64_t)(v43 - v44) >= 0x20)
            {
              v63 = 0;
              v64 = (v53 >> 3) + 1;
              v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
              v54 = &v5[v65];
              v55 = &v44[v65];
              v66 = v64 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = &v5[v63];
                result = *(__n128 *)&v44[v63];
                v68 = *(_OWORD *)&v44[v63 + 16];
                *(__n128 *)v67 = result;
                *((_OWORD *)v67 + 1) = v68;
                v63 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
                return result;
            }
            else
            {
              v54 = v5;
              v55 = v44;
            }
            do
            {
              v56 = *(_QWORD *)v55;
              v55 += 8;
              *(_QWORD *)v54 = v56;
              v54 += 8;
            }
            while (v55 != v40);
            return result;
          }
          v46 = *(_QWORD *)(v42 + 72 * *(_QWORD *)v45 + 64);
          v47 = *(_QWORD *)(v42 + 72 * *(_QWORD *)v44 + 64);
          if (BYTE5(v46) >= (unint64_t)BYTE5(v47))
          {
            if (BYTE5(v47) < (unint64_t)BYTE5(v46))
              break;
            if (WORD1(v46) >= (unint64_t)WORD1(v47))
            {
              if (WORD1(v47) < (unint64_t)WORD1(v46))
                break;
              if ((unsigned __int16)*(_QWORD *)(v42 + 72 * *(_QWORD *)v45 + 64) >= (unint64_t)(unsigned __int16)*(_QWORD *)(v42 + 72 * *(_QWORD *)v44 + 64))
              {
                if ((unsigned __int16)*(_QWORD *)(v42 + 72 * *(_QWORD *)v44 + 64) < (unint64_t)(unsigned __int16)*(_QWORD *)(v42 + 72 * *(_QWORD *)v45 + 64))
                  break;
                v48 = HIWORD(v46) & 0x7FFF;
                v49 = HIWORD(v47) & 0x7FFF;
                if (v48 >= v49)
                {
                  v50 = BYTE4(v46);
                  v51 = BYTE4(v47);
                  if (v49 < v48 || v50 >= v51)
                    break;
                }
              }
            }
          }
          *(_QWORD *)v5 = *(_QWORD *)v45;
          v5 += 8;
          v45 += 8;
          v43 += 8;
          if (v44 == v40)
            goto LABEL_72;
        }
        *(_QWORD *)v5 = *(_QWORD *)v44;
        v5 += 8;
        v44 += 8;
        v43 += 8;
      }
      while (v44 != v40);
LABEL_72:
      if (v45 == a2)
        return result;
      v57 = a2 - v45 - 8;
      if (v57 < 0x48 || (unint64_t)(v43 - v45) < 0x20)
      {
        v58 = v5;
        v59 = v45;
        do
        {
LABEL_76:
          v60 = *(_QWORD *)v59;
          v59 += 8;
          *(_QWORD *)v58 = v60;
          v58 += 8;
        }
        while (v59 != a2);
        return result;
      }
      v69 = 0;
      v70 = (v57 >> 3) + 1;
      v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
      v58 = &v5[v71];
      v59 = &v45[v71];
      v72 = v70 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v73 = &v5[v69];
        result = *(__n128 *)&v45[v69];
        v74 = *(_OWORD *)&v45[v69 + 16];
        *(__n128 *)v73 = result;
        *((_OWORD *)v73 + 1) = v74;
        v69 += 32;
        v72 -= 4;
      }
      while (v72);
      if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_76;
    }
    else
    {
      if (a1 == a2)
        return result;
      v13 = *a3;
      v14 = a1 + 8;
      *(_QWORD *)a5 = *(_QWORD *)a1;
      if (a1 + 8 == a2)
        return result;
      v15 = 0;
      v16 = a5;
      v17 = (uint64_t *)a5;
LABEL_13:
      while (2)
      {
        v21 = *v17++;
        v20 = v21;
        v22 = *(_QWORD *)(v13 + 72 * *(_QWORD *)v14 + 64);
        v23 = *(_QWORD *)(v13 + 72 * v21 + 64);
        if (BYTE5(v22) < (unint64_t)BYTE5(v23)
          || BYTE5(v23) >= (unint64_t)BYTE5(v22)
          && (WORD1(v22) < (unint64_t)WORD1(v23)
           || WORD1(v23) >= (unint64_t)WORD1(v22)
           && ((unsigned __int16)*(_QWORD *)(v13 + 72 * *(_QWORD *)v14 + 64) < (unint64_t)(unsigned __int16)v23
            || (unsigned __int16)v23 >= (unint64_t)(unsigned __int16)*(_QWORD *)(v13 + 72 * *(_QWORD *)v14 + 64)
            && ((v33 = HIWORD(v22) & 0x7FFF, v34 = HIWORD(v23) & 0x7FFF, v33 < v34)
             || ((v35 = BYTE4(v22), v36 = BYTE4(v23), v34 >= v33) ? (v37 = v35 >= v36) : (v37 = 1), !v37)))))
        {
          *((_QWORD *)v16 + 1) = v20;
          v18 = a5;
          if (v16 == a5)
            goto LABEL_12;
          v24 = v15;
          while (1)
          {
            v25 = *(_QWORD *)&a5[v24 - 8];
            v26 = *(_QWORD *)(v13 + 72 * *(_QWORD *)v14 + 64);
            v27 = *(_QWORD *)(v13 + 72 * v25 + 64);
            if (BYTE5(v26) >= (unint64_t)BYTE5(v27))
            {
              if (BYTE5(v27) < (unint64_t)BYTE5(v26))
                goto LABEL_29;
              if (WORD1(v26) >= (unint64_t)WORD1(v27))
              {
                if (WORD1(v27) < (unint64_t)WORD1(v26))
                  goto LABEL_29;
                if ((unsigned __int16)*(_QWORD *)(v13 + 72 * *(_QWORD *)v14 + 64) >= (unint64_t)(unsigned __int16)*(_QWORD *)(v13 + 72 * v25 + 64))
                {
                  if ((unsigned __int16)*(_QWORD *)(v13 + 72 * v25 + 64) < (unint64_t)(unsigned __int16)*(_QWORD *)(v13 + 72 * *(_QWORD *)v14 + 64))
                  {
                    v18 = &a5[v24];
LABEL_12:
                    v19 = *(_QWORD *)v14;
                    v14 += 8;
                    *(_QWORD *)v18 = v19;
                    v15 += 8;
                    v16 = (char *)v17;
                    if (v14 == a2)
                      return result;
                    goto LABEL_13;
                  }
                  v28 = HIWORD(v26) & 0x7FFF;
                  v29 = HIWORD(v27) & 0x7FFF;
                  if (v28 >= v29)
                  {
                    v30 = BYTE4(v26);
                    v31 = BYTE4(v27);
                    if (v29 < v28 || v30 >= v31)
                    {
LABEL_29:
                      v18 = v16;
                      goto LABEL_12;
                    }
                  }
                }
              }
            }
            v16 -= 8;
            *(_QWORD *)&a5[v24] = v25;
            v24 -= 8;
            if (!v24)
            {
              v18 = a5;
              goto LABEL_12;
            }
          }
        }
        *v17 = *(_QWORD *)v14;
        v14 += 8;
        v15 += 8;
        v16 = (char *)v17;
        if (v14 != a2)
          continue;
        break;
      }
    }
  }
  return result;
}

__n128 sub_20E79E08C(__n128 *a1, __n128 *a2, __n128 *a3, _QWORD *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __n128 *v33;
  __n128 *v34;
  unint64_t v35;
  __n128 *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  int64_t v64;
  __n128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 *v76;
  uint64_t v77;
  uint64_t v78;
  __n128 *v79;
  __n128 *v80;
  __n128 *v81;
  uint64_t v82;
  BOOL v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  __n128 *v88;
  __n128 result;
  uint64_t v90;
  int64_t v91;
  unint64_t v92;
  char *v93;
  __n128 *v94;
  uint64_t v95;
  uint64_t v96;
  __n128 *v97;
  __n128 *v98;
  uint64_t v99;
  __n128 v100;
  unint64_t v101;
  char *v102;
  __n128 *v103;
  uint64_t v104;
  uint64_t v105;
  __n128 *v106;
  __n128 *v107;
  uint64_t v108;
  __n128 v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  BOOL v118;
  unint64_t v119;
  uint64_t v120;
  __n128 *v121;
  uint64_t v122;
  __n128 *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  BOOL v130;
  unint64_t v131;
  char *v132;
  __n128 *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  char *v147;

  if (!a6)
    return result;
  v8 = a6;
  v146 = a8;
  v147 = a7;
  v145 = a4;
  while (v8 > a8 && a5 > a8)
  {
    if (!a5)
      return result;
    v12 = 0;
    v13 = *a4;
    v14 = *(_QWORD *)(*a4 + 72 * a2->n128_u64[0] + 64);
    v15 = BYTE5(v14);
    v16 = WORD1(v14);
    v17 = (unsigned __int16)v14;
    v18 = HIWORD(v14) & 0x7FFF;
    v19 = BYTE4(v14);
    v20 = -a5;
    while (1)
    {
      v21 = a1->n128_i64[v12 / 8];
      v22 = *(_QWORD *)(v13 + 72 * v21 + 64);
      if (v15 < BYTE5(v22))
        break;
      if (BYTE5(v22) >= v15)
      {
        if (v16 < WORD1(v22))
          break;
        if (WORD1(v22) >= v16)
        {
          if (v17 < (unsigned __int16)*(_QWORD *)(v13 + 72 * v21 + 64))
            break;
          if ((unsigned __int16)*(_QWORD *)(v13 + 72 * v21 + 64) >= v17)
          {
            v23 = HIWORD(v22) & 0x7FFF;
            if (v18 < v23)
              break;
            v24 = BYTE4(v22);
            v25 = v23 < v18 || v19 >= v24;
            if (!v25)
              break;
          }
        }
      }
      v12 += 8;
      v25 = __CFADD__(v20++, 1);
      if (v25)
        return result;
    }
    v26 = (__n128 *)((char *)a1 + v12);
    if (-v20 >= v8)
    {
      if (v20 == -1)
      {
        a1->n128_u64[v12 / 8] = a2->n128_u64[0];
        a2->n128_u64[0] = v21;
        return result;
      }
      if (v20 <= 0)
        v37 = -v20;
      else
        v37 = 1 - v20;
      v30 = v37 >> 1;
      v29 = (__n128 *)((char *)a1 + 8 * (v37 >> 1) + v12);
      if (a2 == a3)
      {
        v28 = 0;
      }
      else
      {
        v28 = 0;
        v51 = ((char *)a3 - (char *)a2) >> 3;
        v52 = *(_QWORD *)(v13 + 72 * v29->n128_u64[0] + 64);
        v53 = BYTE5(v52);
        v54 = WORD1(v52);
        v55 = (unsigned __int16)v52;
        v56 = HIWORD(v52) & 0x7FFF;
        v57 = BYTE4(v52);
        do
        {
          v58 = v51 >> 1;
          v59 = (v51 >> 1) + v28;
          v60 = *(_QWORD *)(v13 + 72 * a2->n128_u64[v59] + 64);
          if (BYTE5(v60) < v53
            || v53 >= BYTE5(v60)
            && (WORD1(v60) < v54
             || v54 >= WORD1(v60)
             && ((unsigned __int16)*(_QWORD *)(v13 + 72 * a2->n128_u64[v59] + 64) < v55
              || v55 >= (unsigned __int16)*(_QWORD *)(v13 + 72 * a2->n128_u64[v59] + 64)
              && ((v61 = HIWORD(v60) & 0x7FFF, v61 < v56)
               || ((v62 = BYTE4(v60), v56 >= v61) ? (v63 = v62 >= v57) : (v63 = 1), !v63)))))
          {
            v28 = v59 + 1;
            v58 = v51 + ~v58;
          }
          v51 = v58;
        }
        while (v58);
      }
      v31 = (8 * v28) >> 3;
      v32 = &a2->n128_i8[8 * v28];
      if (v29 != a2)
      {
LABEL_25:
        v33 = v29;
        if (v28)
        {
          v34 = (__n128 *)&v29->n128_i8[8];
          if (&v29->n128_i8[8] == (__int8 *)a2)
          {
            v142 = v29->n128_u64[0];
            v144 = v31;
            v64 = v32 - (char *)a2;
            v65 = a3;
            v66 = v30;
            memmove(v29, a2, v32 - (char *)a2);
            v31 = v144;
            v26 = (__n128 *)((char *)a1 + v12);
            v30 = v66;
            a4 = v145;
            a3 = v65;
            v33 = (__n128 *)((char *)v29 + v64);
            v33->n128_u64[0] = v142;
          }
          else if (v28 == 1)
          {
            v35 = *((_QWORD *)v32 - 1);
            v33 = (__n128 *)&v29->n128_i8[8];
            if (v32 - 8 != (char *)v29)
            {
              v36 = a3;
              v143 = v31;
              v141 = v30;
              memmove(&v29->n128_i8[8], v29, v32 - 8 - (char *)v29);
              v30 = v141;
              v31 = v143;
              v26 = (__n128 *)((char *)a1 + v12);
              a4 = v145;
              a3 = v36;
            }
            v29->n128_u64[0] = v35;
          }
          else
          {
            v67 = ((char *)a2 - (char *)v29) >> 3;
            v68 = (v32 - (char *)a2) >> 3;
            if (v67 == v68)
            {
              v69 = 8 * v28 - 8;
              v70 = a2;
              do
              {
                v71 = v34[-1].n128_i64[1];
                v34[-1].n128_u64[1] = v70->n128_u64[0];
                v70->n128_u64[0] = v71;
                v70 = (__n128 *)((char *)v70 + 8);
                if (v34 == a2)
                  break;
                v34 = (__n128 *)((char *)v34 + 8);
                v72 = v69;
                v69 -= 8;
              }
              while (v72);
              v33 = a2;
            }
            else
            {
              v73 = (v32 - (char *)a2) >> 3;
              v74 = ((char *)a2 - (char *)v29) >> 3;
              do
              {
                v75 = v74;
                v74 = v73;
                v73 = v75 % v73;
              }
              while (v73);
              if (v74)
              {
                v76 = (__n128 *)((char *)v29 + 8 * v74);
                do
                {
                  v78 = v76[-1].n128_i64[1];
                  v76 = (__n128 *)((char *)v76 - 8);
                  v77 = v78;
                  v79 = (__n128 *)((char *)v76 + 8 * v67);
                  v80 = v76;
                  do
                  {
                    v81 = v79;
                    v80->n128_u64[0] = v79->n128_u64[0];
                    v82 = (v32 - (char *)v79) >> 3;
                    v83 = __OFSUB__(v67, v82);
                    v85 = v67 - v82;
                    v84 = (v85 < 0) ^ v83;
                    v79 = (__n128 *)((char *)v29 + 8 * v85);
                    if (v84)
                      v79 = (__n128 *)((char *)v81 + 8 * v67);
                    v80 = v81;
                  }
                  while (v79 != v76);
                  v81->n128_u64[0] = v77;
                }
                while (v76 != v29);
              }
              v33 = (__n128 *)((char *)v29 + 8 * v68);
            }
          }
        }
        goto LABEL_86;
      }
    }
    else
    {
      if (v8 >= 0)
        v27 = v8;
      else
        v27 = v8 + 1;
      v28 = v27 >> 1;
      v29 = (__n128 *)((char *)a1 + v12);
      if ((char *)a2 - (char *)a1 != v12)
      {
        v38 = (uint64_t)((char *)a2 - (char *)a1 - v12) >> 3;
        v39 = *(_QWORD *)(v13 + 72 * a2->n128_u64[v28] + 64);
        v40 = BYTE5(v39);
        v41 = WORD1(v39);
        v42 = (unsigned __int16)v39;
        v43 = HIWORD(v39) & 0x7FFF;
        v44 = BYTE4(v39);
        v29 = (__n128 *)((char *)a1 + v12);
        do
        {
          v45 = v38 >> 1;
          v46 = &v29->n128_u64[v38 >> 1];
          v47 = *(_QWORD *)(v13 + 72 * *v46 + 64);
          if (v40 >= BYTE5(v47))
          {
            if (BYTE5(v47) < v40
              || v41 >= WORD1(v47)
              && (WORD1(v47) < v41
               || v42 >= (unsigned __int16)*(_QWORD *)(v13 + 72 * *v46 + 64)
               && ((unsigned __int16)*(_QWORD *)(v13 + 72 * *v46 + 64) < v42
                || (v48 = HIWORD(v47) & 0x7FFF, v43 >= v48)
                && ((v49 = BYTE4(v47), v48 >= v43) ? (v50 = v44 >= v49) : (v50 = 1), v50))))
            {
              v29 = (__n128 *)(v46 + 1);
              v45 = v38 + ~v45;
            }
          }
          v38 = v45;
        }
        while (v45);
      }
      v30 = (uint64_t)((char *)v29 - (char *)a1 - v12) >> 3;
      v31 = v28;
      v32 = &a2->n128_i8[8 * v28];
      if (v29 != a2)
        goto LABEL_25;
    }
    v33 = (__n128 *)v32;
LABEL_86:
    a5 = -v30 - v20;
    v86 = v8 - v31;
    if (v30 + v31 >= v8 - (v30 + v31) - v20)
    {
      a1 = v26;
      a5 = v30;
      v90 = v31;
      sub_20E79E08C(v33, v32, a3, a4, -v30 - v20, v8 - v31, v147, v146);
      a4 = v145;
      a8 = v146;
      a7 = v147;
      a3 = v33;
      v8 = v90;
      a2 = v29;
      if (!v90)
        return result;
    }
    else
    {
      v87 = &a1->n128_u64[v12 / 8];
      v88 = a3;
      sub_20E79E08C(v87, v29, v33, a4, v30, v31, v147, v146);
      a4 = v145;
      a8 = v146;
      a3 = v88;
      a7 = v147;
      a1 = v33;
      v8 = v86;
      a2 = (__n128 *)v32;
      if (!v86)
        return result;
    }
  }
  if (a5 <= v8)
  {
    if (a1 != a2)
    {
      v101 = (char *)a2 - (char *)a1 - 8;
      v102 = a7;
      v103 = a1;
      if (v101 < 0x18)
        goto LABEL_156;
      v102 = a7;
      v103 = a1;
      if ((unint64_t)(a7 - (char *)a1) < 0x20)
        goto LABEL_156;
      v104 = (v101 >> 3) + 1;
      v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
      v102 = &a7[v105];
      v103 = (__n128 *)((char *)a1 + v105);
      v106 = a1 + 1;
      v107 = (__n128 *)(a7 + 16);
      v108 = v104 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = v106[-1];
        v109 = *v106;
        v107[-1] = result;
        *v107 = v109;
        v106 += 2;
        v107 += 2;
        v108 -= 4;
      }
      while (v108);
      if (v104 != (v104 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_156:
        do
        {
          v110 = v103->n128_u64[0];
          v103 = (__n128 *)((char *)v103 + 8);
          *(_QWORD *)v102 = v110;
          v102 += 8;
        }
        while (v103 != a2);
      }
      if (v102 != a7)
      {
        v111 = *a4;
        while (a2 != a3)
        {
          v112 = *(_QWORD *)(v111 + 72 * a2->n128_u64[0] + 64);
          v113 = *(_QWORD *)(v111 + 72 * *(_QWORD *)a7 + 64);
          if (BYTE5(v112) >= (unint64_t)BYTE5(v113)
            && (BYTE5(v113) < (unint64_t)BYTE5(v112)
             || WORD1(v112) >= (unint64_t)WORD1(v113)
             && (WORD1(v113) < (unint64_t)WORD1(v112)
              || (unsigned __int16)*(_QWORD *)(v111 + 72 * a2->n128_u64[0] + 64) >= (unint64_t)(unsigned __int16)*(_QWORD *)(v111 + 72 * *(_QWORD *)a7 + 64)
              && ((unsigned __int16)*(_QWORD *)(v111 + 72 * *(_QWORD *)a7 + 64) < (unint64_t)(unsigned __int16)*(_QWORD *)(v111 + 72 * a2->n128_u64[0] + 64)
               || (v114 = HIWORD(v112) & 0x7FFF, v115 = HIWORD(v113) & 0x7FFF, v114 >= v115)
               && ((v116 = BYTE4(v112), v117 = BYTE4(v113), v115 >= v114) ? (v118 = v116 >= v117) : (v118 = 1), v118)))))
          {
            a1->n128_u64[0] = *(_QWORD *)a7;
            a1 = (__n128 *)((char *)a1 + 8);
            a7 += 8;
            if (a7 == v102)
              return result;
          }
          else
          {
            a1->n128_u64[0] = a2->n128_u64[0];
            a1 = (__n128 *)((char *)a1 + 8);
            a2 = (__n128 *)((char *)a2 + 8);
            if (a7 == v102)
              return result;
          }
        }
        memmove(a1, a7, v102 - a7);
      }
    }
    return result;
  }
  v91 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v92 = v91 - 8;
  if ((unint64_t)(v91 - 8) < 0x18)
  {
    v93 = a7;
    v94 = a2;
    do
    {
LABEL_127:
      v119 = v94->n128_u64[0];
      v94 = (__n128 *)((char *)v94 + 8);
      *(_QWORD *)v93 = v119;
      v93 += 8;
    }
    while (v94 != a3);
    goto LABEL_128;
  }
  v93 = a7;
  v94 = a2;
  if ((unint64_t)(a7 - (char *)a2) < 0x20)
    goto LABEL_127;
  v95 = (v92 >> 3) + 1;
  v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
  v93 = &a7[v96];
  v94 = (__n128 *)((char *)a2 + v96);
  v97 = a2 + 1;
  v98 = (__n128 *)(a7 + 16);
  v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = v97[-1];
    v100 = *v97;
    v98[-1] = result;
    *v98 = v100;
    v97 += 2;
    v98 += 2;
    v99 -= 4;
  }
  while (v99);
  if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_127;
LABEL_128:
  if (v93 != a7)
  {
    v120 = *a4;
    v121 = a3;
    while (a2 != a1)
    {
      v123 = (__n128 *)((char *)a2 - 8);
      v122 = a2[-1].n128_i64[1];
      v124 = *(_QWORD *)(v120 + 72 * *((_QWORD *)v93 - 1) + 64);
      v125 = *(_QWORD *)(v120 + 72 * v122 + 64);
      if (BYTE5(v124) >= (unint64_t)BYTE5(v125))
      {
        if (BYTE5(v125) < (unint64_t)BYTE5(v124)
          || WORD1(v124) >= (unint64_t)WORD1(v125)
          && (WORD1(v125) < (unint64_t)WORD1(v124)
           || (unsigned __int16)*(_QWORD *)(v120 + 72 * *((_QWORD *)v93 - 1) + 64) >= (unint64_t)(unsigned __int16)*(_QWORD *)(v120 + 72 * v122 + 64)
           && ((unsigned __int16)*(_QWORD *)(v120 + 72 * v122 + 64) < (unint64_t)(unsigned __int16)*(_QWORD *)(v120 + 72 * *((_QWORD *)v93 - 1) + 64)
            || (v126 = HIWORD(v124) & 0x7FFF, v127 = HIWORD(v125) & 0x7FFF, v126 >= v127)
            && ((v128 = BYTE4(v124), v129 = BYTE4(v125), v127 >= v126) ? (v130 = v128 >= v129) : (v130 = 1), v130))))
        {
          v122 = *((_QWORD *)v93 - 1);
          v123 = a2;
          v93 -= 8;
        }
      }
      a3[-1].n128_u64[1] = v122;
      a3 = (__n128 *)((char *)a3 - 8);
      v121 = (__n128 *)((char *)v121 - 8);
      a2 = v123;
      if (v93 == a7)
        return result;
    }
    v131 = v93 - a7 - 8;
    if (v131 < 0x58 || (unint64_t)(v93 - (char *)v121) < 0x20)
    {
      v132 = v93;
      v133 = a3;
      goto LABEL_148;
    }
    v136 = 0;
    v137 = (v131 >> 3) + 1;
    v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
    v132 = &v93[-v138];
    v133 = (__n128 *)((char *)a3 - v138);
    v139 = v137 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = *(__n128 *)&v93[v136 * 16 - 16];
      v140 = &a3[v136];
      v140[-2] = *(__n128 *)&v93[v136 * 16 - 32];
      v140[-1] = result;
      v136 -= 2;
      v139 -= 4;
    }
    while (v139);
    if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_148:
      v134 = &v133[-1].n128_u64[1];
      do
      {
        v135 = *((_QWORD *)v132 - 1);
        v132 -= 8;
        *v134-- = v135;
      }
      while (v132 != a7);
    }
  }
  return result;
}

uint64_t sub_20E79E900(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  CVPixelBufferRef *v6;
  CVPixelBufferRef **v7;
  CVPixelBufferRef *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  int v17;
  _BOOL4 v18;
  __CVBuffer *v19;
  __CVBuffer *v20;
  int Height;
  _QWORD *v22;
  CVPixelBufferRef *v23;
  char *BaseAddress;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  char *v30;

  v6 = *(CVPixelBufferRef **)a3;
  *(_QWORD *)a3 = 0;
  if (v6)
  {
    CVPixelBufferUnlockBaseAddress(*v6, 0);
    CVPixelBufferRelease(*v6);
    MEMORY[0x212BC47D4](v6, 0x20C4093837F09);
  }
  v7 = (CVPixelBufferRef **)(a3 + 8);
  v8 = *(CVPixelBufferRef **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  if (v8)
  {
    CVPixelBufferUnlockBaseAddress(*v8, 0);
    CVPixelBufferRelease(*v8);
    MEMORY[0x212BC47D4](v8, 0x20C4093837F09);
  }
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  if (a2[14] < *a2)
    sub_20E8092F4();
  if (a2[15] < a2[1])
    sub_20E809320();
  v9 = a2[2];
  if (*a2 > v9)
    sub_20E80934C();
  if ((v9 & 0x3F) != 0)
    sub_20E8093CC();
  v10 = a2[16];
  *((_DWORD *)a1 + 2) = v10;
  switch(v10)
  {
    case 4u:
      v11 = operator new();
      *(_OWORD *)(v11 + 16) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 80) = 0u;
      *(_OWORD *)(v11 + 96) = 0u;
      *(_OWORD *)(v11 + 112) = 0u;
      *(_OWORD *)(v11 + 128) = 0u;
      *(_OWORD *)(v11 + 144) = 0u;
      *(_OWORD *)(v11 + 160) = 0u;
      *(_OWORD *)(v11 + 176) = 0u;
      *(_OWORD *)(v11 + 192) = 0u;
      *(_OWORD *)(v11 + 208) = 0u;
      *(_OWORD *)(v11 + 224) = 0u;
      *(_OWORD *)(v11 + 240) = 0u;
      *(_OWORD *)(v11 + 256) = 0u;
      *(_OWORD *)(v11 + 272) = 0u;
      *(_OWORD *)(v11 + 288) = 0u;
      *(_OWORD *)(v11 + 304) = 0u;
      *(_OWORD *)(v11 + 320) = 0u;
      *(_OWORD *)(v11 + 336) = 0u;
      *(_OWORD *)(v11 + 352) = 0u;
      *(_OWORD *)(v11 + 368) = 0u;
      *(_OWORD *)(v11 + 384) = 0u;
      *(_OWORD *)(v11 + 400) = 0u;
      *(_OWORD *)(v11 + 416) = 0u;
      *(_OWORD *)(v11 + 432) = 0u;
      *(_OWORD *)(v11 + 448) = 0u;
      *(_OWORD *)(v11 + 464) = 0u;
      *(_QWORD *)(v11 + 480) = 0;
      *(_QWORD *)v11 = &off_24C9A88A0;
      *(_QWORD *)(v11 + 8) = 0;
      *(_BYTE *)(v11 + 28) = 1;
      *(_QWORD *)(v11 + 188) = 0;
      *(_QWORD *)(v11 + 180) = 0;
      *(_BYTE *)(v11 + 196) = 0;
      *(_QWORD *)(v11 + 208) = 0;
      *(_QWORD *)(v11 + 216) = 0;
      *(_BYTE *)(v11 + 224) = 0;
      *(_QWORD *)(v11 + 244) = 0;
      *(_QWORD *)(v11 + 236) = 0;
      *(_BYTE *)(v11 + 252) = 0;
      *(_QWORD *)(v11 + 264) = 0;
      *(_QWORD *)(v11 + 272) = 0;
      *(_BYTE *)(v11 + 280) = 0;
      *(_QWORD *)(v11 + 300) = 0;
      *(_QWORD *)(v11 + 292) = 0;
      *(_BYTE *)(v11 + 308) = 0;
      *(_QWORD *)(v11 + 320) = 0;
      *(_QWORD *)(v11 + 328) = 0;
      *(_BYTE *)(v11 + 336) = 0;
      *(_WORD *)(v11 + 176) = 0;
      *(_OWORD *)(v11 + 144) = 0u;
      *(_OWORD *)(v11 + 160) = 0u;
      *(_OWORD *)(v11 + 112) = 0u;
      *(_OWORD *)(v11 + 128) = 0u;
      *(_OWORD *)(v11 + 80) = 0u;
      *(_OWORD *)(v11 + 96) = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)(v11 + 344) = xmmword_20E80DEC0;
      *(_OWORD *)(v11 + 360) = xmmword_20E80DED0;
      *(_OWORD *)(v11 + 376) = xmmword_20E80DEE0;
      *(_OWORD *)(v11 + 392) = xmmword_20E80DEF0;
      *(_DWORD *)(v11 + 408) = 4;
      *(_WORD *)(v11 + 412) = 5;
      *(_QWORD *)(v11 + 416) = 0xFFFF0000003FLL;
      *(_DWORD *)(v11 + 428) = 1135869952;
      *(_DWORD *)(v11 + 436) = 1107296256;
      *(_QWORD *)(v11 + 444) = 0x1FF3F800000;
      *(_QWORD *)(v11 + 456) = 0;
      *(_QWORD *)(v11 + 464) = 0;
      *(_QWORD *)(v11 + 472) = 0;
      *(_BYTE *)(v11 + 480) = 17;
      v12 = *a1;
      *a1 = v11;
      if (v12)
        goto LABEL_18;
      goto LABEL_19;
    case 6u:
      v14 = operator new();
      sub_20E793D9C(v14, *((unsigned int *)a1 + 2));
      goto LABEL_17;
    case 7u:
    case 8u:
      v14 = operator new();
      sub_20E78A364(v14, *((unsigned int *)a1 + 2));
      goto LABEL_17;
    case 9u:
      v14 = operator new();
      sub_20E7C5D28(v14, *((unsigned int *)a1 + 2));
LABEL_17:
      v12 = *a1;
      *a1 = v14;
      if (v12)
        goto LABEL_18;
      goto LABEL_19;
    default:
      v13 = operator new();
      *(_OWORD *)(v13 + 160) = 0u;
      *(_OWORD *)(v13 + 176) = 0u;
      *(_OWORD *)(v13 + 192) = 0u;
      *(_OWORD *)(v13 + 208) = 0u;
      *(_OWORD *)(v13 + 224) = 0u;
      *(_OWORD *)(v13 + 240) = 0u;
      *(_QWORD *)v13 = &off_24C9A8AB0;
      *(_OWORD *)(v13 + 8) = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 146) = 0u;
      *(_OWORD *)(v13 + 172) = xmmword_20E80DEC0;
      *(_OWORD *)(v13 + 188) = xmmword_20E80E370;
      *(_OWORD *)(v13 + 204) = xmmword_20E80E380;
      *(_WORD *)(v13 + 220) = 5;
      *(_QWORD *)(v13 + 224) = 0xFFFF00000100;
      *(_QWORD *)(v13 + 232) = 0;
      *(_QWORD *)(v13 + 240) = 0;
      *(_QWORD *)(v13 + 248) = 0;
      *(_QWORD *)(v13 + 256) = 0;
      *(_BYTE *)(v13 + 256) = 7;
      v12 = *a1;
      *a1 = v13;
      if (!v12)
        goto LABEL_19;
LABEL_18:
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
LABEL_19:
      result = (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)*a1 + 16))(*a1, a2);
      if (!(_DWORD)result)
        return result;
      v16 = *((unsigned __int8 *)a2 + 68);
      if (v16 == 2)
      {
        v17 = 1;
      }
      else
      {
        if (v16 != 1)
          goto LABEL_25;
        v17 = *((unsigned __int16 *)a2 + 25);
      }
      *((_DWORD *)a1 + 3) = v17;
LABEL_25:
      *(_DWORD *)(a3 + 24) = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a1 + 24))(*a1, a2[14], a2[15]);
      *(_DWORD *)(a3 + 28) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, a2[6]);
      v18 = sub_20E79EF50(a1, (CVPixelBufferRef **)(a3 + 8), (unsigned int *)(a3 + 20), (CVPixelBufferRef **)a3, (unsigned int *)(a3 + 16), 0, 0);
      result = 0;
      if (*(_DWORD *)(a3 + 24) && v18)
      {
        sub_20E79F2F0(a1, *a2, a2[1], a2[2], *(CVPixelBufferRef **)(a3 + 8), *(CVPixelBufferRef **)a3);
        v19 = (__CVBuffer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 120))(*a1);
        if (v19)
        {
          v20 = v19;
          Height = CVPixelBufferGetHeight(v19);
          *(_DWORD *)(a3 + 40) = CVPixelBufferGetBytesPerRow(v20) * Height;
          v22 = (_QWORD *)operator new();
          *v22 = v20;
          v23 = *(CVPixelBufferRef **)(a3 + 32);
          *(_QWORD *)(a3 + 32) = v22;
          if (v23)
          {
            CVPixelBufferUnlockBaseAddress(*v23, 0);
            CVPixelBufferRelease(*v23);
            MEMORY[0x212BC47D4](v23, 0x20C4093837F09);
            v20 = **(__CVBuffer ***)(a3 + 32);
          }
          CVPixelBufferLockBaseAddress(v20, 0);
        }
        if (*((_BYTE *)a2 + 92))
          *(_DWORD *)(a3 + 44) = *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 104))(*a1, 12, 0)+ 16);
        if (*((_BYTE *)a2 + 156))
        {
          BaseAddress = (char *)CVPixelBufferGetBaseAddress(**(CVPixelBufferRef **)a3);
          if (!*(_DWORD *)BaseAddress)
            sub_20E809378((uint64_t)BaseAddress, v25);
          v26 = BaseAddress;
          v27 = *((unsigned int *)BaseAddress + 1);
          v28 = CVPixelBufferGetBaseAddress(**v7);
          if (!*v28)
            sub_20E809378((uint64_t)v28, v29);
          v30 = (char *)v28 + v28[1];
          *((_DWORD *)a1 + 4) = a2[40];
          if (((*(uint64_t (**)(uint64_t, char *, char *, uint64_t *))(*(_QWORD *)*a1 + 200))(*a1, &v26[v27], v30, a1 + 2) & 1) == 0)
          {
            if (*((_DWORD *)a1 + 4) != 0xFFFF)
              sub_20E8093A0();
            *((_BYTE *)a2 + 156) = 0;
          }
        }
        return 1;
      }
      return result;
  }
}

void sub_20E79EF00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E79F47C((CVPixelBufferRef **)va);
  _Unwind_Resume(a1);
}

void sub_20E79EF14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC47D4](v1, 0x10A1C40AA3D422ELL);
  _Unwind_Resume(a1);
}

BOOL sub_20E79EF50(_QWORD *a1, CVPixelBufferRef **a2, unsigned int *a3, CVPixelBufferRef **a4, unsigned int *a5, CVPixelBufferRef **a6, unsigned int a7)
{
  int v14;
  unsigned int v15;
  CVPixelBufferRef *v16;
  CVPixelBufferRef *v17;
  int v18;
  unsigned int v19;
  CVPixelBufferRef *v20;
  CVPixelBufferRef *v21;
  CVPixelBufferRef *v22;
  CVPixelBufferRef *v23;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;

  v14 = *((_DWORD *)a1 + 3);
  v15 = ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) + 20) * v14 + 4;
  *a3 = v15;
  v16 = (CVPixelBufferRef *)operator new();
  if (sub_20E805430(v15, 1u, 0x4C303038u, v16, 64, 64, 0, 1, 0))
  {
    v25 = "(ret == kCVReturnSuccess && buf_ref.get()) && \"Could not pre-allocate a CVPixelBuffer\"";
    v26 = 258;
    goto LABEL_23;
  }
  CVPixelBufferLockBaseAddress(*v16, 0);
  if (!CVPixelBufferGetBaseAddress(*v16))
  {
    v25 = "*base_address && \"NULL pointer\"";
    v26 = 263;
LABEL_23:
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetectionUtils/include/VIO/HWFeatureDetectionUtils/HwFeatureExtractionCommon.h", v26, v25, (void (*)(void *))sub_20E803DA4);
    abort();
  }
  v17 = *a2;
  *a2 = v16;
  if (v17)
  {
    CVPixelBufferUnlockBaseAddress(*v17, 0);
    CVPixelBufferRelease(*v17);
    MEMORY[0x212BC47D4](v17, 0x20C4093837F09);
  }
  v18 = *((_DWORD *)a1 + 3);
  v19 = ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 56))(*a1) + 4) * v18 + 4;
  *a5 = v19;
  v20 = (CVPixelBufferRef *)operator new();
  if (sub_20E805430(v19, 1u, 0x4C303038u, v20, 64, 64, 0, 1, 0))
  {
    v27 = "(ret == kCVReturnSuccess && buf_ref.get()) && \"Could not pre-allocate a CVPixelBuffer\"";
    v28 = 258;
    goto LABEL_26;
  }
  CVPixelBufferLockBaseAddress(*v20, 0);
  if (!CVPixelBufferGetBaseAddress(*v20))
  {
    v27 = "*base_address && \"NULL pointer\"";
    v28 = 263;
LABEL_26:
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetectionUtils/include/VIO/HWFeatureDetectionUtils/HwFeatureExtractionCommon.h", v28, v27, (void (*)(void *))sub_20E803DA4);
    abort();
  }
  v21 = *a4;
  *a4 = v20;
  if (v21)
  {
    CVPixelBufferUnlockBaseAddress(*v21, 0);
    CVPixelBufferRelease(*v21);
    MEMORY[0x212BC47D4](v21, 0x20C4093837F09);
  }
  if (a6 && a7)
  {
    v22 = (CVPixelBufferRef *)operator new();
    if (sub_20E805430(a7, 1u, 0x4C303038u, v22, 64, 64, 0, 1, 0))
    {
      v29 = "(ret == kCVReturnSuccess && buf_ref.get()) && \"Could not pre-allocate a CVPixelBuffer\"";
      v30 = 258;
    }
    else
    {
      CVPixelBufferLockBaseAddress(*v22, 0);
      if (CVPixelBufferGetBaseAddress(*v22))
      {
        v23 = *a6;
        *a6 = v22;
        if (v23)
        {
          CVPixelBufferUnlockBaseAddress(*v23, 0);
          CVPixelBufferRelease(*v23);
          MEMORY[0x212BC47D4](v23, 0x20C4093837F09);
        }
        return *a2 && *a4 && (!a6 || *a6);
      }
      v29 = "*base_address && \"NULL pointer\"";
      v30 = 263;
    }
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetectionUtils/include/VIO/HWFeatureDetectionUtils/HwFeatureExtractionCommon.h", v30, v29, (void (*)(void *))sub_20E803DA4);
    abort();
  }
  return *a2 && *a4 && (!a6 || *a6);
}

void sub_20E79F2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E79F47C((CVPixelBufferRef **)va);
  _Unwind_Resume(a1);
}

void sub_20E79F2C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E79F47C((CVPixelBufferRef **)va);
  _Unwind_Resume(a1);
}

void sub_20E79F2DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E79F47C((CVPixelBufferRef **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E79F2F0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, CVPixelBufferRef *a5, CVPixelBufferRef *a6)
{
  char *BaseAddress;
  int v12;
  char *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  _DWORD *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  char *v25;

  BaseAddress = (char *)CVPixelBufferGetBaseAddress(*a5);
  v12 = *((_DWORD *)a1 + 3);
  *(_DWORD *)BaseAddress = v12;
  if (v12)
  {
    v13 = BaseAddress;
    v14 = 4 * v12 + 4;
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    *((_DWORD *)v13 + 1) = v14;
    (*(void (**)(_QWORD, char *, _QWORD, uint64_t))(*(_QWORD *)*a1 + 48))(*a1, &v13[v14 & 0xFFFFFFFC], 0, 8);
    LODWORD(v15) = *((_DWORD *)a1 + 3);
    if (v15 >= 2)
    {
      v16 = 2;
      do
      {
        v17 = ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) + 16) * (v16 - 1) + 4 * v15 + 4;
        *(_DWORD *)&v13[4 * v16] = v17;
        (*(void (**)(_QWORD, char *, unint64_t, uint64_t))(*(_QWORD *)*a1 + 48))(*a1, &v13[v17], v16 - 1, 4);
        v15 = *((unsigned int *)a1 + 3);
      }
      while (v16++ < v15);
    }
  }
  v19 = CVPixelBufferGetBaseAddress(*a6);
  LODWORD(v20) = *((_DWORD *)a1 + 3);
  *v19 = v20;
  if ((_DWORD)v20)
  {
    v21 = (char *)v19;
    v22 = 0;
    v23 = v19 + 1;
    do
    {
      v24 = (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 56))(*a1) * v22
          + 4 * (_DWORD)v20
          + 4;
      v23[v22] = v24;
      v25 = &v21[v24];
      (*(void (**)(_QWORD, char *, unint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, &v21[v24], v22, a2, a3, a4, (unsigned __int16)v22);
      *((_DWORD *)v25 + 3) = 0;
      *((_DWORD *)v25 + 4) = 0;
      ++v22;
      v20 = *((unsigned int *)a1 + 3);
    }
    while (v22 < v20);
  }
  return 1;
}

CVPixelBufferRef **sub_20E79F47C(CVPixelBufferRef **a1)
{
  CVPixelBufferRef *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    CVPixelBufferUnlockBaseAddress(*v2, 0);
    CVPixelBufferRelease(*v2);
    MEMORY[0x212BC47D4](v2, 0x20C4093837F09);
  }
  return a1;
}

char *sub_20E79F4D8(_QWORD *a1, CVPixelBufferRef *a2)
{
  char *result;
  int v4;
  char *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;

  result = (char *)CVPixelBufferGetBaseAddress(*a2);
  v4 = *((_DWORD *)a1 + 3);
  *(_DWORD *)result = v4;
  if (v4)
  {
    v5 = result;
    v6 = 4 * v4 + 4;
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    *((_DWORD *)v5 + 1) = v6;
    result = (char *)(*(uint64_t (**)(_QWORD, char *, _QWORD, uint64_t))(*(_QWORD *)*a1 + 48))(*a1, &v5[v6 & 0xFFFFFFFC], 0, 8);
    LODWORD(v7) = *((_DWORD *)a1 + 3);
    if (v7 >= 2)
    {
      v8 = 2;
      do
      {
        v9 = ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) + 16) * (v8 - 1) + 4 * v7 + 4;
        *(_DWORD *)&v5[4 * v8] = v9;
        result = (char *)(*(uint64_t (**)(_QWORD, char *, unint64_t, uint64_t))(*(_QWORD *)*a1 + 48))(*a1, &v5[v9], v8 - 1, 4);
        v7 = *((unsigned int *)a1 + 3);
      }
      while (v8++ < v7);
    }
  }
  return result;
}

uint64_t sub_20E79F5C0(_QWORD *a1, CVPixelBufferRef *a2, CVPixelBufferRef *a3, int a4, int a5)
{
  char *BaseAddress;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  BaseAddress = (char *)CVPixelBufferGetBaseAddress(*a2);
  if (!*(_DWORD *)BaseAddress)
    sub_20E809378((uint64_t)BaseAddress, v10);
  v11 = BaseAddress;
  v12 = *((unsigned int *)BaseAddress + 1);
  v13 = (char *)CVPixelBufferGetBaseAddress(*a3);
  if (!*(_DWORD *)v13)
    sub_20E809378((uint64_t)v13, v14);
  v15 = *((unsigned int *)v13 + 1);
  *((_DWORD *)a1 + 60) = a4;
  *((_DWORD *)a1 + 61) = a5;
  if (!a4)
    a1[31] = 0;
  return (*(uint64_t (**)(_QWORD, char *, char *, _QWORD *))(*(_QWORD *)*a1 + 208))(*a1, &v11[v12], &v13[v15], a1 + 2);
}

uint64_t sub_20E79F650(_BYTE *a1, CVPixelBufferRef *a2, char a3)
{
  void *BaseAddress;

  CVPixelBufferLockBaseAddress(*a2, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(*a2);
  a1[272] = a3;
  (*(void (**)(_QWORD, void *, _BYTE *))(**(_QWORD **)a1 + 216))(*(_QWORD *)a1, BaseAddress, a1 + 16);
  return CVPixelBufferUnlockBaseAddress(*a2, 1uLL);
}

void sub_20E79F6B4(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 44, a3, a4);
}

uint64_t sub_20E79F6BC(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  __int128 v4;

  if (!a1)
    return 2;
  v2 = (char *)operator new(0x1A8uLL, MEMORY[0x24BEDB6B8]);
  v3 = 3;
  if (v2)
  {
    *((_QWORD *)v2 + 3) = 0x1E000000280;
    *((int32x2_t *)v2 + 6) = vdup_n_s32(0x1388u);
    *((_QWORD *)v2 + 7) = 0xA000500010001;
    *(_DWORD *)(v2 + 66) = 16843008;
    *(_OWORD *)(v2 + 76) = xmmword_20E80DDF0;
    *(_DWORD *)(v2 + 113) = 65537;
    *(_OWORD *)(v2 + 120) = xmmword_20E80E3E0;
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    *((_QWORD *)v2 + 2) = 0;
    *((_DWORD *)v2 + 8) = 640;
    *(_QWORD *)(v2 + 36) = 0;
    *((_WORD *)v2 + 22) = 45;
    v2[46] = -1;
    *((_WORD *)v2 + 32) = 10;
    *(_DWORD *)(v2 + 70) = 720905;
    *((_WORD *)v2 + 37) = 3;
    v2[92] = 1;
    *((_DWORD *)v2 + 24) = 0;
    *(_DWORD *)(v2 + 99) = 0;
    *((_QWORD *)v2 + 13) = 1061997773;
    v2[112] = 0;
    *((_DWORD *)v2 + 38) = 1065353216;
    *(_OWORD *)(v2 + 136) = unk_20E80E3F0;
    v2[156] = 1;
    *((_QWORD *)v2 + 20) = 0x3F00000041A00000;
    *((_QWORD *)v2 + 21) = 0xB43E4CCCCDLL;
    *((_DWORD *)v2 + 44) = 0;
    v2[180] = 0;
    *((_DWORD *)v2 + 46) = 2;
    *((_WORD *)v2 + 94) = 0;
    *((_QWORD *)v2 + 24) = 0;
    *((_QWORD *)v2 + 25) = 0xDEC000005CCLL;
    v2[208] = 0;
    *(_QWORD *)&v4 = 0xFFFF0000FFFFLL;
    *((_QWORD *)&v4 + 1) = 0xFFFF0000FFFFLL;
    *(_OWORD *)(v2 + 212) = v4;
    *(_OWORD *)(v2 + 228) = v4;
    *(_OWORD *)(v2 + 244) = v4;
    *(_OWORD *)(v2 + 260) = v4;
    *(_QWORD *)(v2 + 276) = 0xFFFF0000FFFFLL;
    LOWORD(v4) = 0;
    WORD2(v4) = 0;
    WORD4(v4) = 0;
    WORD6(v4) = 0;
    *((_OWORD *)v2 + 19) = v4;
    *((_OWORD *)v2 + 20) = v4;
    *((_OWORD *)v2 + 18) = v4;
    *((_QWORD *)v2 + 42) = -1;
    *((_QWORD *)v2 + 43) = 0;
    *((_QWORD *)v2 + 44) = v2 + 360;
    *((_QWORD *)v2 + 45) = 0;
    *((_QWORD *)v2 + 48) = 0;
    *((_QWORD *)v2 + 49) = 0;
    *((_QWORD *)v2 + 46) = 0;
    *((_QWORD *)v2 + 47) = v2 + 384;
    v2[400] = 1;
    *((_QWORD *)v2 + 51) = -1;
    *((_QWORD *)v2 + 52) = 0;
    *a1 = v2;
    return 0;
  }
  return v3;
}

uint64_t sub_20E79F858(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return 2;
  v1 = sub_20E7A05B4(a1);
  MEMORY[0x212BC47D4](v1, 0x10A0C4079514D77);
  return 0;
}

uint64_t sub_20E79F890(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _BYTE v22[8];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  __int128 v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  if (!a1)
    return 4;
  v6 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 112);
  v33 = *(_OWORD *)(a2 + 128);
  v34 = v6;
  v35 = v7;
  v9 = *(_OWORD *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 96);
  v11 = *(_OWORD *)(a2 + 48);
  v29 = *(_OWORD *)(a2 + 64);
  v30 = v9;
  v31 = v10;
  v32 = v8;
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v27[0] = *(_OWORD *)a2;
  v27[1] = v12;
  v36 = *(_QWORD *)(a2 + 176);
  v27[2] = v13;
  v28 = v11;
  DWORD2(v29) = 64;
  *((_QWORD *)&v28 + 1) = *(_QWORD *)a2;
  BYTE10(v30) = 1;
  v14 = sub_20E79F9FC(a1, v27);
  if (!(_DWORD)v14)
  {
    v24 = 0u;
    v23 = 0u;
    v26 = 0;
    v25 = a3;
    v22[0] = *(_BYTE *)(a2 + 152);
    v15 = operator new(0x140uLL, (std::align_val_t)0x40uLL);
    sub_20E7A1940(v15, a1 + 288, v22);
    v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v15;
    if (v16)
    {
      v17 = sub_20E7A0D1C(v16);
      MEMORY[0x212BC47C8](v17, 64);
    }
    v18 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  return v14;
}

void sub_20E79F9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x212BC47C8](v9, 64);
  sub_20E79FD40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E79F9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E79FD40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E79F9FC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  float v17;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v25;
  int v26;
  uint64_t v27;
  float v28;
  float v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  char v37;
  char v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  int v59;

  if (!a1)
    return 4;
  v3 = a2[8];
  v4 = a2[10];
  v49 = a2[9];
  v50 = v4;
  v5 = a2[4];
  v6 = a2[6];
  v7 = a2[7];
  v45 = a2[5];
  v46 = v6;
  v51 = *((_QWORD *)a2 + 22);
  v47 = v7;
  v48 = v3;
  v8 = a2[1];
  v40 = *a2;
  v41 = v8;
  v9 = a2[3];
  v42 = a2[2];
  v43 = v9;
  v44 = v5;
  sub_20E7A0F28((unsigned int *)&v40);
  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 224) = 0u;
  *(_OWORD *)(v10 + 240) = 0u;
  *(_OWORD *)(v10 + 256) = 0u;
  *(_QWORD *)(v10 + 272) = 0;
  v11 = *(uint64_t **)a1;
  *(_QWORD *)a1 = v10;
  if (v11)
  {
    sub_20E7A0BA4(v11 + 2);
    v12 = *v11;
    *v11 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    MEMORY[0x212BC47D4](v11, 0x1030C40E8DE7E06);
    v10 = *(_QWORD *)a1;
  }
  if (!sub_20E79E900((uint64_t *)v10, (unsigned int *)&v40, a1 + 288))
    return 2;
  BYTE10(v49) = sub_20E7C5A90();
  v13 = v47;
  *(_OWORD *)(a1 + 152) = v48;
  v14 = v49;
  *(_OWORD *)(a1 + 184) = v50;
  *(_OWORD *)(a1 + 88) = v44;
  v15 = v46;
  *(_OWORD *)(a1 + 104) = v45;
  *(_OWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 24) = v40;
  *(_OWORD *)(a1 + 40) = v41;
  *(_OWORD *)(a1 + 56) = v42;
  *(_OWORD *)(a1 + 72) = v43;
  *(_QWORD *)(a1 + 200) = v51;
  *(_OWORD *)(a1 + 168) = v14;
  v16 = &v43;
  v27 = 0x3E800000002;
  v37 = 0;
  v25 = v40;
  v17 = (float)WORD2(v41);
  v28 = v17;
  v34 = DWORD2(v41);
  v35 = 16000;
  v30 = 5;
  v31 = (unsigned __int16)v42;
  v32 = WORD1(v42);
  v33 = WORD2(v42);
  v26 = WORD1(v43);
  v38 = BYTE12(v44);
  if (DWORD1(v40) != 480 || (_DWORD)v40 != 640)
    v16 = (__int128 *)((char *)&v42 + 14);
  LOWORD(v17) = *(_WORD *)v16;
  v29 = (float)LODWORD(v17);
  v39 = BYTE13(v42);
  v36 = BYTE12(v42);
  if (BYTE4(v44) == 1)
  {
    v19 = operator new();
    v53 = xmmword_20E80E3D0;
    v52 = 0x4120000042A00000;
    v54 = 0x3E8000000064;
    v55 = 0;
    v56 = 0xC800000050;
    v57 = 0;
    v58 = 0x3F96E9DD3F5425F2;
    v59 = 0;
    sub_20E7AEA14(v19, &v25, &v52);
    v20 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v19;
    if (v20)
    {
      v21 = (void *)v20[11];
      if (v21)
      {
        v20[12] = v21;
        operator delete(v21);
      }
      v22 = (void *)v20[8];
      if (v22)
      {
        v20[9] = v22;
        operator delete(v22);
      }
      v23 = (_QWORD *)v20[7];
      v20[7] = 0;
      if (v23)
        sub_20E7A0C44((uint64_t)(v20 + 7), v23);
      MEMORY[0x212BC47D4](v20, 0x1020C4030AFA861);
    }
  }
  sub_20E79FDA8(a1);
  return 0;
}

void sub_20E79FD1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC47D4](v1, 0x1020C4030AFA861);
  _Unwind_Resume(a1);
}

uint64_t sub_20E79FD40(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

int32x4_t sub_20E79FDA8(uint64_t a1)
{
  uint64x2_t v2;
  int8x16_t v3;
  uint64x2_t v4;
  uint64x2_t v5;
  int8x16_t v6;
  float v7;
  int32x4_t result;
  void *v9;
  unsigned int v10;
  int8x16_t v11;
  uint64x2_t v12;
  int32x4_t v13;
  uint64x2_t v14;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 92) == 2)
    {
      if (*(_BYTE *)(a1 + 100))
      {
        *(_BYTE *)(a1 + 208) = 1;
        (*(void (**)(int8x16_t *__return_ptr))(***(_QWORD ***)a1 + 96))(&v11);
        v3 = v11;
        v2 = v12;
        v5 = (uint64x2_t)v13;
        v4 = v14;
        v6 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, v13), (int8x16_t)v12, 4uLL);
        v6.i32[3] = v14.i32[0];
        *(int8x16_t *)(a1 + 264) = v6;
        v7 = *(float *)(a1 + 104);
        *(int32x2_t *)(a1 + 252) = vzip1_s32(*(int32x2_t *)v3.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
        *(_DWORD *)(a1 + 260) = v2.i32[0];
        *(uint32x4_t *)(a1 + 216) = vcvtq_u32_f32(vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v3)), vcvtq_f64_u64(v2)), v7));
        result = (int32x4_t)vcvtq_u32_f32(vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(v5)), vcvtq_f64_u64(v4)), v7));
        *(int32x4_t *)(a1 + 232) = result;
        *(_DWORD *)(a1 + 280) = v4.i32[2];
      }
      else
      {
        *(_BYTE *)(a1 + 208) = 0;
        v10 = *(_DWORD *)(a1 + 48);
        result = vdupq_n_s32(v10);
        *(int32x4_t *)(a1 + 212) = result;
        *(int32x4_t *)(a1 + 260) = result;
        *(int32x4_t *)(a1 + 228) = result;
        *(int32x4_t *)(a1 + 244) = result;
        *(_DWORD *)(a1 + 276) = v10;
        *(_DWORD *)(a1 + 280) = v10;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 208) = 0;
      v9 = (void *)(a1 + 248);
      memset_pattern16((void *)(a1 + 212), &unk_20E80E340, 0x24uLL);
      memset_pattern16(v9, &unk_20E80E340, 0x24uLL);
    }
  }
  return result;
}

CVPixelBufferRef sub_20E79FEF8(uint64_t a1)
{
  CVPixelBufferRef *v1;
  CVPixelBufferRef v2;

  if (!a1)
    sub_20E8093F8();
  v1 = *(CVPixelBufferRef **)(a1 + 288);
  if (!v1)
    sub_20E809424();
  v2 = *v1;
  CVPixelBufferRetain(*v1);
  return v2;
}

uint64_t sub_20E79FF34(uint64_t a1)
{
  if (!a1)
    sub_20E809450();
  return *(unsigned int *)(a1 + 304);
}

CVPixelBufferRef sub_20E79FF50(uint64_t a1)
{
  CVPixelBufferRef *v1;
  CVPixelBufferRef v2;

  if (!a1)
    sub_20E80947C();
  v1 = *(CVPixelBufferRef **)(a1 + 296);
  if (!v1)
    sub_20E8094A8();
  v2 = *v1;
  CVPixelBufferRetain(*v1);
  return v2;
}

uint64_t sub_20E79FF8C(uint64_t a1)
{
  if (!a1)
    sub_20E8094D4();
  return *(unsigned int *)(a1 + 308);
}

uint64_t sub_20E79FFA8(uint64_t a1)
{
  if (!a1)
    sub_20E809500();
  return *(unsigned int *)(a1 + 312);
}

uint64_t sub_20E79FFC4(uint64_t a1)
{
  if (!a1)
    sub_20E80952C();
  return *(unsigned int *)(a1 + 316);
}

CVPixelBufferRef sub_20E79FFE0(uint64_t a1)
{
  CVPixelBufferRef *v1;
  CVPixelBufferRef v2;

  if (!a1)
    sub_20E809558();
  v1 = *(CVPixelBufferRef **)(a1 + 320);
  if (!v1)
    return 0;
  v2 = *v1;
  CVPixelBufferRetain(*v1);
  return v2;
}

uint64_t sub_20E7A002C(uint64_t a1)
{
  if (!a1)
    sub_20E809584();
  return *(unsigned int *)(a1 + 328);
}

uint64_t sub_20E7A0048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  _QWORD v11[79];
  uint64_t v12;

  v12 = a2;
  if (a1)
  {
    v4 = **(_QWORD **)a1;
    v5 = *(_DWORD *)(*(_QWORD *)a1 + 8);
    v6 = a1 + 24;
    sub_20E7ABBF0(v11, &v12, a1 + 24, v4, a1 + 408, a1 + 416, a3);
    if (*(_BYTE *)(a1 + 188))
      v7 = v5 >= 6;
    else
      v7 = 0;
    if (v7)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 136))(v4, *(unsigned int *)(v11[37] + 180));
      v9 = 0;
    }
    else
    {
      v8 = *(unsigned __int8 *)(a1 + 92);
      if (v8 == 2)
      {
        if (v5 - 7 >= 3)
        {
          if (v5 == 6)
          {
            sub_20E796810((uint64_t)v11, v4, v6, a1 + 352, (uint64_t **)(a1 + 376), *(_BYTE *)(a1 + 400));
          }
          else if (v5 == 4)
          {
            sub_20E79D3E0((uint64_t)v11, v4, v6);
          }
        }
        else
        {
          sub_20E78FB70((uint64_t)v11, v4, v6, a1 + 352, (uint64_t **)(a1 + 376), *(_BYTE *)(a1 + 400));
        }
        goto LABEL_18;
      }
      if (v8 == 1)
      {
        sub_20E7AEA18(*(_QWORD *)(a1 + 8), (uint64_t)v11);
LABEL_18:
        v9 = 0;
        *(_BYTE *)(a1 + 400) = 0;
        goto LABEL_19;
      }
      v9 = 1;
    }
LABEL_19:
    sub_20E7A077C(v11);
    return v9;
  }
  return 4;
}

void sub_20E7A0198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E7A077C(&a9);
  _Unwind_Resume(a1);
}

void sub_20E7A01AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E7A077C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7A01C0(_QWORD **a1, CVPixelBufferRef *a2, CVPixelBufferRef *a3)
{
  int Width;
  int Height;
  int BytesPerRow;
  CVPixelBufferRef *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  CVPixelBufferRef *v17;
  __CVBuffer *v18;
  BOOL v19;
  CVPixelBufferRef v21;
  CVPixelBufferRef v22;

  if (!a1)
    return 4;
  Width = CVPixelBufferGetWidth(*a2);
  Height = CVPixelBufferGetHeight(*a2);
  BytesPerRow = CVPixelBufferGetBytesPerRow(*a2);
  if (*((_DWORD *)a1 + 6) != Width)
    sub_20E809608();
  if (*((_DWORD *)a1 + 7) != Height)
    sub_20E8095DC();
  if (*((_DWORD *)a1 + 8) != BytesPerRow)
    sub_20E8095B0();
  if (*((_BYTE *)a1 + 116))
  {
    kdebug_trace();
    v9 = (CVPixelBufferRef *)(a1 + 43);
    v10 = sub_20E7A2260((uint64_t)a1[2], a1 + 36, a2, a3, (CVPixelBufferRef *)a1 + 43);
    kdebug_trace();
    if (a1[43])
    {
      CVPixelBufferRelease((CVPixelBufferRef)a1[43]);
      *v9 = 0;
    }
    if (v10)
    {
      if (*((_BYTE *)a1 + 116))
      {
        CVPixelBufferRetain(*a3);
        *v9 = *a3;
      }
      goto LABEL_24;
    }
  }
  else
  {
    kdebug_trace();
    if (*((_BYTE *)a1 + 180))
    {
      v12 = *((_DWORD *)*a1 + 10);
      if (v12)
      {
        v13 = 0;
        v14 = *((_DWORD *)a1 + 46);
        while (1)
        {
          v15 = v13 + v14;
          v16 = v12 >= v13 + v14 ? v13 + v14 : v12;
          v22 = 0;
          v17 = (CVPixelBufferRef *)a1[37];
          v18 = (__CVBuffer *)*a1[36];
          v21 = 0;
          v22 = v18;
          v21 = *v17;
          sub_20E79F5C0(*a1, &v22, &v21, v13, v16);
          if (!sub_20E7A1EF0((uint64_t)a1[2], a1 + 36, a2, a3, v13 != 0))
            break;
          sub_20E79F650(*a1, a3, v12 <= v15);
          v13 += v14;
          if (v15 >= v12)
            goto LABEL_20;
        }
        v19 = 0;
      }
      else
      {
LABEL_20:
        v19 = 1;
      }
    }
    else
    {
      v19 = sub_20E7A1EF0((uint64_t)a1[2], a1 + 36, a2, a3, 0);
    }
    kdebug_trace();
    if (v19)
    {
LABEL_24:
      v11 = sub_20E7A0048((uint64_t)a1, (uint64_t)*a3, 0);
      if (*((_BYTE *)a1 + 92) == 2)
        goto LABEL_27;
      return v11;
    }
  }
  v11 = 1;
  if (*((_BYTE *)a1 + 92) == 2)
LABEL_27:
    sub_20E79F4D8(*a1, (CVPixelBufferRef *)a1[37]);
  return v11;
}

uint64_t sub_20E7A0444(uint64_t a1)
{
  if (!a1)
    sub_20E809634();
  return *(unsigned __int8 *)(a1 + 208);
}

uint64_t sub_20E7A0460(uint64_t a1)
{
  if (!a1)
    sub_20E809660();
  return 9;
}

uint64_t sub_20E7A0478(uint64_t a1, unsigned int a2)
{
  if (!a1)
    sub_20E80968C();
  if (a2 >= 9)
    sub_20E8096B8();
  return *(unsigned int *)(a1 + 4 * a2 + 212);
}

uint64_t sub_20E7A04A4(uint64_t a1)
{
  if (!a1)
    sub_20E8096E4();
  return 9;
}

uint64_t sub_20E7A04BC(uint64_t a1, unsigned int a2)
{
  if (!a1)
    sub_20E809710();
  if (a2 >= 9)
    sub_20E80973C();
  return *(unsigned int *)(a1 + 4 * a2 + 248);
}

uint64_t sub_20E7A04E8(_QWORD **a1, uint64_t a2)
{
  _QWORD **v4;
  __int16 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (!a1)
    return 4;
  v4 = a1 + 3;
  if (!sub_20E7A0E48((uint64_t)(a1 + 3), a2))
    return 1;
  v5 = *((_WORD *)a1 + 37);
  *((_BYTE *)a1 + 178) = sub_20E7C5A90();
  v6 = *(_OWORD *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v4 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v4 + 7) = v11;
  *((_OWORD *)v4 + 4) = v9;
  *((_OWORD *)v4 + 5) = v10;
  v12 = *(_OWORD *)(a2 + 128);
  v13 = *(_OWORD *)(a2 + 144);
  v14 = *(_OWORD *)(a2 + 160);
  v4[22] = *(_QWORD **)(a2 + 176);
  *((_OWORD *)v4 + 9) = v13;
  *((_OWORD *)v4 + 10) = v14;
  *((_OWORD *)v4 + 8) = v12;
  *((_OWORD *)v4 + 1) = v7;
  *((_OWORD *)v4 + 2) = v8;
  *(_OWORD *)v4 = v6;
  *((_WORD *)a1 + 37) = v5;
  (*(void (**)(_QWORD, _QWORD **))(*(_QWORD *)**a1 + 88))(**a1, v4);
  sub_20E79FDA8((uint64_t)a1);
  return 0;
}

uint64_t sub_20E7A05B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;

  sub_20E7938D0(a1 + 376, *(_QWORD **)(a1 + 384));
  sub_20E7938D0(a1 + 352, *(_QWORD **)(a1 + 360));
  sub_20E7A06A8((CVPixelBufferRef **)(a1 + 288));
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = sub_20E7A0D1C(v2);
    MEMORY[0x212BC47C8](v3, 64);
  }
  v4 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    v5 = (void *)v4[11];
    if (v5)
    {
      v4[12] = v5;
      operator delete(v5);
    }
    v6 = (void *)v4[8];
    if (v6)
    {
      v4[9] = v6;
      operator delete(v6);
    }
    v7 = (_QWORD *)v4[7];
    v4[7] = 0;
    if (v7)
      sub_20E7A0C44((uint64_t)(v4 + 7), v7);
    MEMORY[0x212BC47D4](v4, 0x1020C4030AFA861);
  }
  v8 = *(uint64_t **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
  {
    sub_20E7A0BA4(v8 + 2);
    v9 = *v8;
    *v8 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    MEMORY[0x212BC47D4](v8, 0x1030C40E8DE7E06);
  }
  return a1;
}

CVPixelBufferRef **sub_20E7A06A8(CVPixelBufferRef **a1)
{
  CVPixelBufferRef *v2;
  CVPixelBufferRef *v3;
  CVPixelBufferRef *v4;

  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    CVPixelBufferUnlockBaseAddress(*v2, 0);
    CVPixelBufferRelease(*v2);
    MEMORY[0x212BC47D4](v2, 0x20C4093837F09);
  }
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    CVPixelBufferUnlockBaseAddress(*v3, 0);
    CVPixelBufferRelease(*v3);
    MEMORY[0x212BC47D4](v3, 0x20C4093837F09);
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    CVPixelBufferUnlockBaseAddress(*v4, 0);
    CVPixelBufferRelease(*v4);
    MEMORY[0x212BC47D4](v4, 0x20C4093837F09);
  }
  return a1;
}

_QWORD *sub_20E7A077C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;

  v2 = (std::__shared_weak_count *)a1[76];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[74];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[74];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[62];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[60];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[60];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = a1[37];
  if (v14)
  {
    v15 = a1[38];
    v16 = (void *)a1[37];
    if (v15 != v14)
    {
      do
      {
        v17 = v15 - 552;
        sub_20E7A0B04(v15 - 312);
        v15 = v17;
      }
      while (v17 != v14);
      v16 = (void *)a1[37];
    }
    a1[38] = v14;
    operator delete(v16);
  }
  v18 = (void *)a1[12];
  if (v18)
  {
    a1[13] = v18;
    operator delete(v18);
  }
  v19 = a1[9];
  if (v19)
  {
    v20 = a1[10];
    v21 = (void *)a1[9];
    if (v20 == v19)
    {
LABEL_44:
      a1[10] = v19;
      operator delete(v21);
      goto LABEL_45;
    }
    while (1)
    {
      v22 = *(std::__shared_weak_count **)(v20 - 24);
      if (!v22)
        goto LABEL_36;
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        v25 = *(std::__shared_weak_count **)(v20 - 40);
        if (v25)
        {
LABEL_37:
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      else
      {
LABEL_36:
        v25 = *(std::__shared_weak_count **)(v20 - 40);
        if (v25)
          goto LABEL_37;
      }
      v20 -= 112;
      if (v20 == v19)
      {
        v21 = (void *)a1[9];
        goto LABEL_44;
      }
    }
  }
LABEL_45:
  v28 = a1[6];
  if (!v28)
    goto LABEL_62;
  v29 = a1[7];
  v30 = (void *)a1[6];
  if (v29 != v28)
  {
    while (1)
    {
      v31 = *(std::__shared_weak_count **)(v29 - 24);
      if (!v31)
        goto LABEL_53;
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
        v34 = *(std::__shared_weak_count **)(v29 - 40);
        if (v34)
        {
LABEL_54:
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      else
      {
LABEL_53:
        v34 = *(std::__shared_weak_count **)(v29 - 40);
        if (v34)
          goto LABEL_54;
      }
      v29 -= 112;
      if (v29 == v28)
      {
        v30 = (void *)a1[6];
        break;
      }
    }
  }
  a1[7] = v28;
  operator delete(v30);
LABEL_62:
  v37 = a1[3];
  if (v37)
  {
    v38 = a1[4];
    v39 = (void *)a1[3];
    if (v38 == v37)
    {
LABEL_78:
      a1[4] = v37;
      operator delete(v39);
      return a1;
    }
    while (1)
    {
      v40 = *(std::__shared_weak_count **)(v38 - 24);
      if (!v40)
        goto LABEL_70;
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        v43 = *(std::__shared_weak_count **)(v38 - 40);
        if (v43)
        {
LABEL_71:
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }
      else
      {
LABEL_70:
        v43 = *(std::__shared_weak_count **)(v38 - 40);
        if (v43)
          goto LABEL_71;
      }
      v38 -= 112;
      if (v38 == v37)
      {
        v39 = (void *)a1[3];
        goto LABEL_78;
      }
    }
  }
  return a1;
}

uint64_t sub_20E7A0B04(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 152) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(_QWORD *)(a1 + 128) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(_QWORD *)(a1 + 104) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 72);
  if (v6)
  {
    *(_QWORD *)(a1 + 80) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 48);
  if (v7)
  {
    *(_QWORD *)(a1 + 56) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

_QWORD *sub_20E7A0BA4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[22];
  if (v3)
  {
    a1[23] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[19];
  if (v4)
  {
    a1[20] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[16];
  if (v5)
  {
    a1[17] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[13];
  if (v6)
  {
    a1[14] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[10];
  if (v7)
  {
    a1[11] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[4];
  if (v9)
  {
    a1[5] = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_20E7A0C44(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;

  if (a2)
  {
    v3 = a2[11];
    if (v3)
    {
      v4 = a2[12];
      v5 = (void *)a2[11];
      if (v4 != v3)
      {
        v6 = a2[12];
        do
        {
          v8 = *(void **)(v6 - 24);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v4 - 16) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = (void *)a2[11];
      }
      a2[12] = v3;
      operator delete(v5);
    }
    v9 = a2[8];
    if (v9)
    {
      v10 = a2[9];
      v11 = (void *)a2[8];
      if (v10 != v9)
      {
        v12 = a2[9];
        do
        {
          v14 = *(void **)(v12 - 24);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *(_QWORD *)(v10 - 16) = v13;
            operator delete(v13);
          }
          v10 = v12;
        }
        while (v12 != v9);
        v11 = (void *)a2[8];
      }
      a2[9] = v9;
      operator delete(v11);
    }
    JUMPOUT(0x212BC47D4);
  }
}

uint64_t sub_20E7A0D1C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  CVPixelBufferRef *v4;
  const void **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 96))
  {
    sub_20E7FB3C4(a1);
    sub_20E7FB4C4(a1);
  }
  v2 = *(uint64_t **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      ((void (*)(void))v2[1])();
    MEMORY[0x212BC47D4](v2, 0xA0C40AFF93C70);
  }
  v4 = *(CVPixelBufferRef **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v4)
  {
    CVPixelBufferUnlockBaseAddress(*v4, 0);
    CVPixelBufferRelease(*v4);
    MEMORY[0x212BC47D4](v4, 0x20C4093837F09);
  }
  v5 = *(const void ***)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v5)
  {
    sub_20E804A24(*v5);
    MEMORY[0x212BC47D4](v5, 0x20C4093837F09);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 112);
  if (!v6)
    return a1;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

BOOL sub_20E7A0E48(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  BOOL v4;
  BOOL v6;
  int32x4_t v7;
  int32x4_t v8;
  BOOL v10;
  BOOL v12;
  unsigned __int8 v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  char v17;

  v2 = *(_DWORD *)(a2 + 24);
  v3 = *(unsigned __int8 *)(a2 + 68);
  v4 = v3 != 2;
  v6 = *(unsigned __int8 *)(a1 + 68) != v3 || *(unsigned __int8 *)(a1 + 78) != *(unsigned __int8 *)(a2 + 78);
  v10 = *(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 24) != v2;
  v12 = *(unsigned __int16 *)(a1 + 40) != *(unsigned __int16 *)(a2 + 40) || *(_DWORD *)(a2 + 28) > v2;
  v8.i64[1] = *(_QWORD *)(a2 + 56);
  v8.i64[0] = *(_QWORD *)(a2 + 4);
  v7.i64[1] = *(_QWORD *)(a1 + 56);
  v7.i64[0] = *(_QWORD *)(a1 + 4);
  v13 = (*(_DWORD *)(a1 + 42) != *(_DWORD *)(a2 + 42)) | vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v7, v8))));
  v14 = *(_QWORD *)(a1 + 12) != *(_QWORD *)(a2 + 12) || v4;
  v15 = *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52) && *(unsigned __int16 *)(a1 + 38) == *(unsigned __int16 *)(a2 + 38);
  v16 = v14 || v6;
  v17 = !v15 || v10;
  return ((v13 | (v16 | v17 | v12)) & 1) == 0;
}

BOOL sub_20E7A0F28(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v2;
  _BOOL8 v4;

  v1 = *a1;
  v2 = (*a1 + 1) & 0xFFFFFFFE;
  v4 = *a1 != v2 && a1[16] > 6;
  if (v4)
  {
    *a1 = v2;
    if (v1 == a1[14])
      a1[14] = v2;
  }
  return v4;
}

void sub_20E7A0F6C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC47D4);
}

BOOL sub_20E7A0F90(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  const void **v4;

  a1[15] = sub_20E804788(a1[13]);
  v2 = (_QWORD *)operator new();
  v3 = a1[15];
  v4 = (const void **)a1[16];
  *v2 = v3;
  a1[16] = (uint64_t)v2;
  if (v4)
  {
    sub_20E804A24(*v4);
    MEMORY[0x212BC47D4](v4, 0x20C4093837F09);
    if (!a1[16])
      return 0;
    v3 = a1[15];
  }
  if (sub_20E80487C(v3, &unk_24C9A8A08))
    return sub_20E8048F4(a1[15]);
  return 0;
}

void sub_20E7A104C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E7A1064((const void ***)va);
  _Unwind_Resume(a1);
}

const void ***sub_20E7A1064(const void ***a1)
{
  const void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_20E804A24(*v2);
    MEMORY[0x212BC47D4](v2, 0x20C4093837F09);
  }
  return a1;
}

uint64_t sub_20E7A10B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  CVPixelBufferRef **v7;
  uint64_t **v8;
  int v9;
  CVPixelBufferRef *v10;
  CVPixelBufferRef *v11;
  __int128 v12;
  _QWORD *v13;
  std::runtime_error *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  const char *v37;
  uint64_t v38;
  std::runtime_error *v39;
  std::runtime_error *exception;
  std::runtime_error *v41;
  std::runtime_error *v42;
  std::runtime_error *v43;
  std::runtime_error *v44;
  std::string v45;
  uint8_t buf[16];
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v6 = (uint64_t *)(a1 + 104);
  v7 = (CVPixelBufferRef **)(a1 + 136);
  v8 = (uint64_t **)(a1 + 144);
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_DWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 264) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)a3;
  sub_20E7C5920(a1 + 192, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(unsigned __int8 *)(a1 + 96);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Use of XPC Services %d", buf, 8u);
  }
  if (*(_QWORD *)(a3 + 40) && *(_BYTE *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E78570C(buf, "Error User Parameters conflict with valid ISP session and use_xpc_service");
    std::runtime_error::runtime_error(exception, (const std::string *)buf);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24C9A89D0;
    __cxa_throw(exception, (struct type_info *)&unk_24C9A8A28, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  kdebug_trace();
  v10 = (CVPixelBufferRef *)operator new();
  *(_QWORD *)buf = v10;
  if (sub_20E805430(0x1000u, 1u, 0x4C303038u, v10, 64, 64, 0, 1, 0))
  {
    v37 = "(ret == kCVReturnSuccess && buf_ref.get()) && \"Could not pre-allocate a CVPixelBuffer\"";
    v38 = 258;
    goto LABEL_46;
  }
  CVPixelBufferLockBaseAddress(*v10, 0);
  if (!CVPixelBufferGetBaseAddress(*v10))
  {
    v37 = "*base_address && \"NULL pointer\"";
    v38 = 263;
LABEL_46:
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetectionUtils/include/VIO/HWFeatureDetectionUtils/HwFeatureExtractionCommon.h", v38, v37, (void (*)(void *))sub_20E803DA4);
    abort();
  }
  *(_QWORD *)buf = 0;
  v11 = *v7;
  *v7 = v10;
  if (v11)
  {
    CVPixelBufferUnlockBaseAddress(*v11, 0);
    CVPixelBufferRelease(*v11);
    MEMORY[0x212BC47D4](v11, 0x20C4093837F09);
    if (!*v7)
    {
      v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E78570C(buf, "Error creating stats buffer");
      std::runtime_error::runtime_error(v41, (const std::string *)buf);
      v41->__vftable = (std::runtime_error_vtbl *)&off_24C9A89D0;
      __cxa_throw(v41, (struct type_info *)&unk_24C9A8A28, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (sub_20E7FA5DC(a1))
    {
      v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E78570C(buf, "Error Create XPC connection to daemon");
      std::runtime_error::runtime_error(v42, (const std::string *)buf);
      v42->__vftable = (std::runtime_error_vtbl *)&off_24C9A89D0;
      __cxa_throw(v42, (struct type_info *)&unk_24C9A8A28, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v12 = *(_OWORD *)(a3 + 24);
    *(_OWORD *)buf = *(_OWORD *)(a3 + 8);
    v47 = v12;
    v13 = *(_QWORD **)a2;
    *(_QWORD *)buf = **(_QWORD **)(a2 + 8);
    *(_QWORD *)&buf[8] = *v13;
    *(_QWORD *)&v47 = **(_QWORD **)(a1 + 136);
    *((_QWORD *)&v47 + 1) = v47;
    if (sub_20E7FA9A4(a1, (CVPixelBufferRef *)buf))
    {
      sub_20E7FB4C4(a1);
      v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E78570C(&v45, "Error Create ISP session in daemon");
      std::runtime_error::runtime_error(v14, &v45);
      v14->__vftable = (std::runtime_error_vtbl *)&off_24C9A89D0;
      __cxa_throw(v14, (struct type_info *)&unk_24C9A8A28, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    goto LABEL_38;
  }
  v15 = *(_QWORD *)(a3 + 48);
  v16 = *(_QWORD *)(a3 + 56);
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *(std::__shared_weak_count **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    v15 = *v6;
  }
  v22 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 120) = v22;
  if (v15)
  {
    if (v22)
      goto LABEL_38;
    goto LABEL_37;
  }
  sub_20E804480(1, (uint64_t *)buf);
  v23 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v24 = *(std::__shared_weak_count **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = v23;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (!*v6)
  {
    v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E78570C(buf, "Failed to create an ISP instance");
    std::runtime_error::runtime_error(v43, (const std::string *)buf);
    v43->__vftable = (std::runtime_error_vtbl *)&off_24C9A89D0;
    __cxa_throw(v43, (struct type_info *)&unk_24C9A8A28, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!*(_QWORD *)(a1 + 120))
  {
LABEL_37:
    if (!sub_20E7A0F90((uint64_t *)a1))
    {
      v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E78570C(buf, "Failed to create an ISP session");
      std::runtime_error::runtime_error(v44, (const std::string *)buf);
      v44->__vftable = (std::runtime_error_vtbl *)&off_24C9A89D0;
      __cxa_throw(v44, (struct type_info *)&unk_24C9A8A28, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
LABEL_38:
  kdebug_trace();
  v30 = *(_DWORD *)(a1 + 240);
  v31 = *(_DWORD *)(a1 + 244);
  v32 = (uint64_t *)operator new(0x10uLL, MEMORY[0x24BEDB6B8]);
  if (!v32)
  {
    v45.__r_.__value_.__r.__words[0] = 0;
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E78570C(buf, "Error creating buffer pool");
    std::runtime_error::runtime_error(v39, (const std::string *)buf);
    v39->__vftable = (std::runtime_error_vtbl *)&off_24C9A89D0;
    __cxa_throw(v39, (struct type_info *)&unk_24C9A8A28, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v33 = v32;
  sub_20E7F8314(v32, ((v31 + 63) & 0xFFFFFFC0) + v30, 1, 16, 1278226488);
  v45.__r_.__value_.__r.__words[0] = 0;
  v34 = *v8;
  *v8 = v33;
  if (v34)
  {
    v35 = *v34;
    *v34 = 0;
    if (v35)
      ((void (*)(void))v34[1])();
    MEMORY[0x212BC47D4](v34, 0xA0C40AFF93C70);
  }
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 48);
  return a1;
}

void sub_20E7A1774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  CVPixelBufferRef **v23;
  uint64_t **v24;
  void *v25;
  int v26;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v26)
  {
LABEL_6:
    sub_20E7A18E4(v24);
    sub_20E79F47C(v23);
    sub_20E7A1064((const void ***)(v21 + 128));
    sub_20E7858BC(v22);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t **sub_20E7A18E4(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      ((void (*)(void))v2[1])();
    MEMORY[0x212BC47D4](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t sub_20E7A1944(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t *v5;
  CVPixelBufferRef **v6;
  CVPixelBufferRef *v7;
  CVPixelBufferRef *v8;
  CVPixelBufferRef v9;
  __int128 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *size;
  unint64_t *v26;
  unint64_t v27;
  const char *v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::runtime_error *exception;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::runtime_error *v48;
  std::runtime_error *v49;
  std::runtime_error *v50;
  std::string v51;
  std::string v52;
  uint64_t v53;

  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 100) = 0u;
  v4 = (_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_DWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 264) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)a2;
  kdebug_trace();
  v5 = (uint64_t *)(a1 + 104);
  v6 = (CVPixelBufferRef **)(a1 + 136);
  v7 = (CVPixelBufferRef *)operator new();
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  if (sub_20E805430(0x1000u, 1u, 0x4C303038u, v7, 64, 64, 0, 1, 0))
  {
    v29 = "(ret == kCVReturnSuccess && buf_ref.get()) && \"Could not pre-allocate a CVPixelBuffer\"";
    v30 = 258;
    goto LABEL_40;
  }
  CVPixelBufferLockBaseAddress(*v7, 0);
  if (!CVPixelBufferGetBaseAddress(*v7))
  {
    v29 = "*base_address && \"NULL pointer\"";
    v30 = 263;
LABEL_40:
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetectionUtils/include/VIO/HWFeatureDetectionUtils/HwFeatureExtractionCommon.h", v30, v29, (void (*)(void *))sub_20E803DA4);
    abort();
  }
  v8 = *v6;
  *v6 = v7;
  if (v8)
  {
    CVPixelBufferUnlockBaseAddress(*v8, 0);
    CVPixelBufferRelease(*v8);
    MEMORY[0x212BC47D4](v8, 0x20C4093837F09);
    v7 = *v6;
  }
  v9 = *v7;
  if (!*v7)
  {
    v31 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v31)
      sub_20E809768(v31, v32, v33, v34, v35, v36, v37, v38);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E78570C(&v52, "Error creating stats buffer");
    std::runtime_error::runtime_error(exception, &v52);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24C9A89D0;
    __cxa_throw(exception, (struct type_info *)&unk_24C9A8A28, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (*(_BYTE *)(a1 + 96))
  {
    v10 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    v53 = *((_QWORD *)&v10 + 1);
    v52.__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
    v11 = sub_20E7FA5DC(a1);
    *v4 = v11;
    if (v11)
    {
      v40 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v40)
        sub_20E809804(v40, v41, v42, v43, v44, v45, v46, v47);
      v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E78570C(&v51, "Error Create XPC connection to daemon");
      std::runtime_error::runtime_error(v48, &v51);
      v48->__vftable = (std::runtime_error_vtbl *)&off_24C9A89D0;
      __cxa_throw(v48, (struct type_info *)&unk_24C9A8A28, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v12 = sub_20E7FA9A4(a1, (CVPixelBufferRef *)&v52);
    *v4 = v12;
    if (v12)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        sub_20E80979C();
      sub_20E7FB4C4(a1);
    }
    goto LABEL_37;
  }
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(std::__shared_weak_count **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    v13 = *v5;
  }
  v20 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 120) = v20;
  if (v13)
  {
    if (v20)
      goto LABEL_37;
    goto LABEL_36;
  }
  sub_20E804480(1, (uint64_t *)&v52);
  v21 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
  v22 = *(std::__shared_weak_count **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = v21;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
  if (v52.__r_.__value_.__l.__size_)
  {
    v26 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (!*v5)
  {
    v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E78570C(&v52, "Failed to create an ISP instance");
    std::runtime_error::runtime_error(v49, &v52);
    v49->__vftable = (std::runtime_error_vtbl *)&off_24C9A89D0;
    __cxa_throw(v49, (struct type_info *)&unk_24C9A8A28, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!*(_QWORD *)(a1 + 120))
  {
LABEL_36:
    if (!sub_20E7A0F90((uint64_t *)a1))
    {
      v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E78570C(&v52, "Failed to create an ISP session");
      std::runtime_error::runtime_error(v50, &v52);
      v50->__vftable = (std::runtime_error_vtbl *)&off_24C9A89D0;
      __cxa_throw(v50, (struct type_info *)&unk_24C9A8A28, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
LABEL_37:
  kdebug_trace();
  return a1;
}

void sub_20E7A1E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  CVPixelBufferRef **v23;
  void *v24;
  int v25;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      sub_20E7A18E4((uint64_t **)(v21 + 144));
      sub_20E79F47C(v23);
      sub_20E7A1064((const void ***)(v21 + 128));
      sub_20E7858BC(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

BOOL sub_20E7A1EF0(uint64_t a1, uint64_t **a2, _QWORD *a3, CVPixelBufferRef *a4, char a5)
{
  int v10;
  _BOOL8 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CVBuffer *v16;
  _OWORD *BaseAddress;
  __int128 v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v24;
  uint64_t v25;
  void *__p;
  void *v27;
  uint64_t v28;
  void *__src;
  int v30[2];
  uint64_t v31;
  __int128 v32;
  unsigned __int8 v33;

  if (!*(_BYTE *)(a1 + 96) && !*(_QWORD *)(a1 + 104))
    return 0;
  if ((a5 & 1) != 0)
  {
    v10 = 0;
    LOBYTE(v32) = 0;
    v33 = 0;
    goto LABEL_10;
  }
  *a4 = 0;
  LOBYTE(v32) = 0;
  v33 = 0;
  sub_20E7F8318(*(CVPixelBufferPoolRef **)(a1 + 144), (uint64_t)&v24);
  if (!(_BYTE)v25)
  {
    v10 = v33;
    if (v33)
      goto LABEL_9;
    return 0;
  }
  v32 = v24;
  v24 = 0uLL;
  v33 = 1;
  v10 = 1;
LABEL_9:
  *a4 = (CVPixelBufferRef)v32;
LABEL_10:
  __src = 0;
  *(_QWORD *)v30 = 0;
  v31 = 0;
  sub_20E7A3248(&__src, 2uLL);
  *(_QWORD *)__src = *a3;
  v12 = (char *)__src;
  *((_QWORD *)__src + 1) = *a4;
  v13 = *a2[1];
  v14 = **a2;
  v15 = **(_QWORD **)(a1 + 136);
  if (*(_BYTE *)(a1 + 96))
  {
    v27 = 0;
    v28 = 0;
    *(_QWORD *)&v24 = v13;
    *((_QWORD *)&v24 + 1) = v14;
    v25 = v15;
    __p = 0;
    sub_20E7A33E8(&__p, v12, *(char **)v30, (uint64_t)(*(_QWORD *)v30 - (_QWORD)v12) >> 3);
    v11 = sub_20E7FAF8C(a1, (uint64_t)&v24, a5, 1) == 0;
    if (__p)
    {
      v27 = __p;
      operator delete(__p);
    }
    if (!v11)
      goto LABEL_19;
    goto LABEL_16;
  }
  v11 = sub_20E804DD8(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 120), v13, v14, v15, (unint64_t *)&__src, 1u);
  if (v11)
  {
LABEL_16:
    if ((a5 & 1) == 0)
    {
      CVPixelBufferRetain(*a4);
      v16 = *a4;
      if (CVPixelBufferLockBaseAddress(v16, 0))
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGPWrapper.cpp", 232, "cv_ret == kCVReturnSuccess", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      BaseAddress = CVPixelBufferGetBaseAddress(v16);
      v19 = *(_OWORD *)(a1 + 224);
      v18 = *(_OWORD *)(a1 + 240);
      BaseAddress[1] = *(_OWORD *)(a1 + 208);
      BaseAddress[2] = v19;
      BaseAddress[3] = v18;
      *BaseAddress = *(_OWORD *)(a1 + 192);
      ++*(_DWORD *)(a1 + 196);
      CVPixelBufferUnlockBaseAddress(v16, 0);
    }
  }
LABEL_19:
  if (__src)
  {
    *(_QWORD *)v30 = __src;
    operator delete(__src);
  }
  if (v10)
  {
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  return v11;
}

void sub_20E7A217C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E7A21F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7A2190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
  {
    operator delete(__p);
    sub_20E7A21F0((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  sub_20E7A21F0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7A21F0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 16))
  {
    v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_20E7A2260(uint64_t a1, uint64_t **a2, _QWORD *a3, CVPixelBufferRef *a4, CVPixelBufferRef *a5)
{
  __CVBuffer *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  CVPixelBufferRef v19;
  int v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  __CVBuffer *v26;
  _OWORD *BaseAddress;
  __int128 v28;
  __int128 v29;
  _QWORD v30[3];
  void *__p;
  void *v32;
  uint64_t v33;
  void *__src;
  int v35[2];
  uint64_t v36;
  CVPixelBufferRef pixelBuffer;
  std::__shared_weak_count *v38;
  char v39;

  if (!*(_BYTE *)(a1 + 96) && !*(_QWORD *)(a1 + 104))
    return 0;
  *a4 = 0;
  sub_20E7F8318(*(CVPixelBufferPoolRef **)(a1 + 144), (uint64_t)&pixelBuffer);
  if (!v39)
    return 0;
  v10 = pixelBuffer;
  *a4 = pixelBuffer;
  if (!*a5)
  {
    CVPixelBufferLockBaseAddress(v10, 1uLL);
    *(_QWORD *)((char *)CVPixelBufferGetBaseAddress(*a4) + *(unsigned int *)(a1 + 232) + *(unsigned int *)(a1 + 256)) = *(_QWORD *)(a1 + 264);
    CVPixelBufferUnlockBaseAddress(*a4, 1uLL);
  }
  v11 = a2[4];
  if (v11)
    v12 = *v11;
  else
    v12 = 0;
  v14 = *a2[1];
  v15 = **a2;
  v16 = **(_QWORD **)(a1 + 136);
  __src = 0;
  *(_QWORD *)v35 = 0;
  if (v12)
    v17 = 4;
  else
    v17 = 3;
  v36 = 0;
  sub_20E7A3248(&__src, v17);
  *(_QWORD *)__src = *a3;
  v18 = (char *)__src;
  *((_QWORD *)__src + 1) = *a4;
  v19 = *a5;
  if (!*a5)
    v19 = *a4;
  *((_QWORD *)v18 + 2) = v19;
  if (v12)
    *((_QWORD *)v18 + 3) = v12;
  if (!*(_BYTE *)(a1 + 96))
  {
    if (!sub_20E804DD8(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 120), v14, v15, v16, (unint64_t *)&__src, 1u))
      goto LABEL_21;
LABEL_31:
    CVPixelBufferRetain(*a4);
    v26 = *a4;
    if (CVPixelBufferLockBaseAddress(v26, 0))
    {
      sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGPWrapper.cpp", 232, "cv_ret == kCVReturnSuccess", (void (*)(void *))sub_20E803DA4);
      abort();
    }
    BaseAddress = CVPixelBufferGetBaseAddress(v26);
    v29 = *(_OWORD *)(a1 + 224);
    v28 = *(_OWORD *)(a1 + 240);
    BaseAddress[1] = *(_OWORD *)(a1 + 208);
    BaseAddress[2] = v29;
    BaseAddress[3] = v28;
    *BaseAddress = *(_OWORD *)(a1 + 192);
    ++*(_DWORD *)(a1 + 196);
    CVPixelBufferUnlockBaseAddress(v26, 0);
    v13 = 1;
    v21 = __src;
    if (!__src)
      goto LABEL_23;
    goto LABEL_22;
  }
  v32 = 0;
  v33 = 0;
  v30[0] = v14;
  v30[1] = v15;
  v30[2] = v16;
  __p = 0;
  sub_20E7A33E8(&__p, v18, *(char **)v35, (uint64_t)(*(_QWORD *)v35 - (_QWORD)v18) >> 3);
  v20 = sub_20E7FAF8C(a1, (uint64_t)v30, 0, 1);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  if (!v20)
    goto LABEL_31;
LABEL_21:
  v13 = 0;
  v21 = __src;
  if (__src)
  {
LABEL_22:
    *(_QWORD *)v35 = v21;
    operator delete(v21);
  }
LABEL_23:
  if (v39)
  {
    v22 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  return v13;
}

void sub_20E7A24F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20E7A21F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7A250C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20E7A21F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7A2520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20E7A21F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7A2534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    operator delete(__p);
    sub_20E7A21F0((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  sub_20E7A21F0((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL sub_20E7A2594(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (!*(_BYTE *)(a1 + 96))
    return 0;
  v4 = sub_20E7FAC3C(a1, (uint64_t)a2);
  *(_DWORD *)(a1 + 100) = v4;
  v5 = v4;
  result = 1;
  switch(v5)
  {
    case 0:
      return result;
    case 22:
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_20E8098D4(a2);
        return 0;
      }
      break;
    case 31:
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_20E80995C(result, v7, v8, v9, v10, v11, v12, v13);
        result = 0;
      }
      break;
    case 32:
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_20E809990(result, v14, v15, v16, v17, v18, v19, v20);
        result = 0;
      }
      break;
    case 33:
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_20E8098A0(result, v21, v22, v23, v24, v25, v26, v27);
        result = 0;
      }
      break;
    default:
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_20E809838();
        result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_20E7A26DC(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v5;
  char v6;
  _BOOL4 v7;
  int v8;

  if (!*(_BYTE *)(a1 + 96))
    return *(unsigned __int8 *)(a1 + 96) | 0x100u;
  v5 = sub_20E7FAE74(a1, a2, a3, a4);
  *(_DWORD *)(a1 + 100) = v5;
  v6 = sub_20E7FB5C0(v5);
  v7 = v5 == 0;
  if ((v6 & 1) != 0)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  return v7 | (v8 << 8);
}

BOOL sub_20E7A2740(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  int v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE v18[32];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 96))
    return 0;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)a1;
    v5 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)v18 = 134218240;
    *(_QWORD *)&v18[4] = v4;
    *(_WORD *)&v18[12] = 2048;
    *(_QWORD *)&v18[14] = v5;
    _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "ReconnectSession: connection=%p, client_id=%llu", v18, 0x16u);
  }
  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)v18 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v18[16] = v6;
  *(_QWORD *)&v18[16] = **(_QWORD **)(a1 + 136);
  if (*(_QWORD *)a1)
  {
    v7 = sub_20E7FA9A4(a1, (CVPixelBufferRef *)v18);
    *(_DWORD *)(a1 + 100) = v7;
    if (!v7)
      return 1;
    if (v7 != 33)
      return 0;
    if (*(_QWORD *)a1 || *(_QWORD *)(a1 + 8))
      sub_20E809A60();
  }
  v8 = sub_20E7FA5DC(a1);
  *(_DWORD *)(a1 + 100) = v8;
  if (!v8)
  {
    v17 = sub_20E7FA9A4(a1, (CVPixelBufferRef *)v18);
    *(_DWORD *)(a1 + 100) = v17;
    if (v17)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        sub_20E8099C4();
      sub_20E7FB4C4(a1);
      return 0;
    }
    return 1;
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (!result)
    return result;
  sub_20E809A2C(result, v10, v11, v12, v13, v14, v15, v16);
  return 0;
}

uint64_t sub_20E7A28D4(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t *a4, uint64_t *a5, char a6)
{
  BOOL v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unsigned int v70;
  void *v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BOOL8 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v102[3];
  void *v103;
  void *v104;
  uint64_t v105;
  void *__p;
  char *v107;
  char *v108;

  if (*a4)
    v6 = *a5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v7)
      sub_20E809A8C(v7, v8, v9, v10, v11, v12, v13, v14);
    return 4;
  }
  __p = 0;
  v107 = 0;
  v108 = 0;
  v18 = *a2;
  v17 = a2[1];
  v19 = *a3;
  v20 = a3[1];
  v21 = v20 - *a3 + v17 - *a2;
  if (!v21)
  {
    v22 = 0;
    if (v18 != v17)
      goto LABEL_17;
    goto LABEL_14;
  }
  if (v21 >> 61)
    sub_20E78D874();
  v22 = (char *)operator new(8 * v21);
  __p = v22;
  v107 = v22;
  v108 = &v22[8 * v21];
  if (v18 == v17)
  {
LABEL_14:
    if (v19 != v20)
      goto LABEL_54;
LABEL_83:
    kdebug_trace();
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 96))
    {
      v80 = *(_QWORD *)(a1 + 104);
      if (!v80)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGPWrapper.cpp", 657, "isp_ && \"Failed to instantiate an ISP driver plugin\"", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      if (sub_20E804DD8(v80, *(_QWORD *)(a1 + 120), *a5, *a4, **(_QWORD **)(a1 + 136), (unint64_t *)&__p, 1u))
        v15 = 0;
      else
        v15 = 3;
      goto LABEL_98;
    }
    v103 = 0;
    v104 = 0;
    v105 = 0;
    v69 = *a4;
    v102[0] = *a5;
    v102[1] = v69;
    v102[2] = **(_QWORD **)(a1 + 136);
    sub_20E7A33E8(&v103, (char *)__p, v107, (v107 - (_BYTE *)__p) >> 3);
    v70 = sub_20E7FAF8C(a1, (uint64_t)v102, a6, 1);
    *(_DWORD *)(a1 + 100) = v70;
    if (!v70)
    {
      v15 = 0;
      v71 = v103;
      if (!v103)
      {
LABEL_98:
        kdebug_trace();
        kdebug_trace();
        if ((_DWORD)v15)
        {
          v81 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v81)
            sub_20E809AC0(v81, v82, v83, v84, v85, v86, v87, v88);
        }
        goto LABEL_101;
      }
LABEL_97:
      v104 = v71;
      operator delete(v71);
      goto LABEL_98;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      sub_20E809B90(a6, v70);
      if (v70 > 0x22)
        goto LABEL_113;
    }
    else if (v70 > 0x22)
    {
      goto LABEL_113;
    }
    if (((1 << v70) & 0x1FFFFC41ELL) != 0)
      goto LABEL_88;
    if (((1 << v70) & 0x400003AA0) != 0)
    {
      v15 = 2;
      v71 = v103;
      if (!v103)
        goto LABEL_98;
      goto LABEL_97;
    }
    if (((1 << v70) & 0x200000100) != 0)
    {
      v90 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v90)
      {
        sub_20E809B5C(v90, v91, v92, v93, v94, v95, v96, v97);
        v15 = 1;
        v71 = v103;
        if (!v103)
          goto LABEL_98;
      }
      else
      {
        v15 = 1;
        v71 = v103;
        if (!v103)
          goto LABEL_98;
      }
      goto LABEL_97;
    }
LABEL_113:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_20E809AF4();
LABEL_88:
    v15 = 3;
    v71 = v103;
    if (!v103)
      goto LABEL_98;
    goto LABEL_97;
  }
LABEL_17:
  while (1)
  {
    v23 = *v18;
    if (!*v18)
      break;
    if (v22 < v108)
    {
      *(_QWORD *)v22 = v23;
      v22 += 8;
      v107 = v22;
      if (++v18 == v17)
        goto LABEL_50;
    }
    else
    {
      v24 = (char *)__p;
      v25 = v22 - (_BYTE *)__p;
      v26 = (v22 - (_BYTE *)__p) >> 3;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61)
        sub_20E78D874();
      v28 = v108 - (_BYTE *)__p;
      if ((v108 - (_BYTE *)__p) >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 >> 61)
          sub_20E78D888();
        v30 = operator new(8 * v29);
        v31 = &v30[8 * v26];
        *(_QWORD *)v31 = v23;
        v32 = v31 + 8;
        if (v22 != v24)
        {
LABEL_28:
          v33 = v22 - 8 - v24;
          if (v33 < 0x168)
          {
            v34 = v22;
            goto LABEL_30;
          }
          if (&v30[v25 - 8 - (v33 & 0xFFFFFFFFFFFFFFF8)] > &v30[v25 - 8])
          {
            v34 = v22;
            goto LABEL_30;
          }
          if (&v22[-(v33 & 0xFFFFFFFFFFFFFFF8) - 8] > v22 - 8)
          {
            v34 = v22;
            goto LABEL_30;
          }
          if ((unint64_t)(v22 - v30 - v25) < 0x20)
          {
            v34 = v22;
            goto LABEL_30;
          }
          v36 = (v33 >> 3) + 1;
          v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
          v34 = &v22[-v37];
          v31 -= v37;
          v38 = &v30[8 * v26 - 16];
          v39 = v22 - 16;
          v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v41 = *(_OWORD *)v39;
            *(v38 - 1) = *((_OWORD *)v39 - 1);
            *v38 = v41;
            v38 -= 2;
            v39 -= 32;
            v40 -= 4;
          }
          while (v40);
          if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_30:
              v35 = *((_QWORD *)v34 - 1);
              v34 -= 8;
              *((_QWORD *)v31 - 1) = v35;
              v31 -= 8;
            }
            while (v34 != v24);
          }
          v22 = (char *)__p;
          __p = v31;
          v108 = &v30[8 * v29];
          if (!v22)
            goto LABEL_36;
LABEL_35:
          operator delete(v22);
          goto LABEL_36;
        }
      }
      else
      {
        v30 = 0;
        v31 = (char *)(8 * v26);
        *(_QWORD *)(8 * v26) = v23;
        v32 = (char *)(8 * v26 + 8);
        if (v22 != v24)
          goto LABEL_28;
      }
      __p = v31;
      v108 = &v30[8 * v29];
      if (v22)
        goto LABEL_35;
LABEL_36:
      v22 = v32;
      v107 = v32;
      if (++v18 == v17)
      {
LABEL_50:
        v19 = *a3;
        v20 = a3[1];
        if (*a3 == v20)
          goto LABEL_83;
LABEL_54:
        while (2)
        {
          v51 = *v19;
          if (!*v19)
          {
            v72 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v72)
            {
              sub_20E809C18(v72, v73, v74, v75, v76, v77, v78, v79);
              v15 = 4;
            }
            else
            {
LABEL_91:
              v15 = 4;
            }
            goto LABEL_101;
          }
          if (v22 < v108)
          {
            *(_QWORD *)v22 = v51;
            v50 = v22 + 8;
            goto LABEL_53;
          }
          v52 = (char *)__p;
          v53 = v22 - (_BYTE *)__p;
          v54 = (v22 - (_BYTE *)__p) >> 3;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61)
            sub_20E78D874();
          v56 = v108 - (_BYTE *)__p;
          if ((v108 - (_BYTE *)__p) >> 2 > v55)
            v55 = v56 >> 2;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
            v57 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            if (v57 >> 61)
              sub_20E78D888();
            v58 = operator new(8 * v57);
            v59 = &v58[8 * v54];
            *(_QWORD *)v59 = v51;
            v50 = v59 + 8;
            if (v22 != v52)
            {
LABEL_65:
              v60 = v22 - 8 - v52;
              if (v60 < 0x168)
              {
                v61 = v22;
                goto LABEL_67;
              }
              if (&v58[v53 - 8 - (v60 & 0xFFFFFFFFFFFFFFF8)] > &v58[v53 - 8])
              {
                v61 = v22;
                goto LABEL_67;
              }
              if (&v22[-(v60 & 0xFFFFFFFFFFFFFFF8) - 8] > v22 - 8)
              {
                v61 = v22;
                goto LABEL_67;
              }
              if ((unint64_t)(v22 - v58 - v53) < 0x20)
              {
                v61 = v22;
                goto LABEL_67;
              }
              v63 = (v60 >> 3) + 1;
              v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
              v61 = &v22[-v64];
              v59 -= v64;
              v65 = &v58[8 * v54 - 16];
              v66 = v22 - 16;
              v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v68 = *(_OWORD *)v66;
                *(v65 - 1) = *((_OWORD *)v66 - 1);
                *v65 = v68;
                v65 -= 2;
                v66 -= 32;
                v67 -= 4;
              }
              while (v67);
              if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_67:
                  v62 = *((_QWORD *)v61 - 1);
                  v61 -= 8;
                  *((_QWORD *)v59 - 1) = v62;
                  v59 -= 8;
                }
                while (v61 != v52);
              }
              v22 = (char *)__p;
              __p = v59;
              v108 = &v58[8 * v57];
              if (!v22)
              {
LABEL_53:
                v107 = v50;
                ++v19;
                v22 = v50;
                if (v19 == v20)
                  goto LABEL_83;
                continue;
              }
LABEL_72:
              operator delete(v22);
              goto LABEL_53;
            }
          }
          else
          {
            v58 = 0;
            v59 = (char *)(8 * v54);
            *(_QWORD *)(8 * v54) = v51;
            v50 = (char *)(8 * v54 + 8);
            if (v22 != v52)
              goto LABEL_65;
          }
          break;
        }
        __p = v59;
        v108 = &v58[8 * v57];
        if (!v22)
          goto LABEL_53;
        goto LABEL_72;
      }
    }
  }
  v42 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (!v42)
    goto LABEL_91;
  sub_20E809C4C(v42, v43, v44, v45, v46, v47, v48, v49);
  v15 = 4;
LABEL_101:
  if (__p)
  {
    v107 = (char *)__p;
    operator delete(__p);
  }
  return v15;
}

void sub_20E7A3014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E7A3088(const time_t *a1)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  tm *v10;
  tm *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  tm *v19;
  tm *v20;
  char v21[100];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v2)
    sub_20E809EA8(v2, v3, v4, v5, v6, v7, v8, v9);
  v10 = localtime(a1 + 4);
  strftime(v21, 0x64uLL, "%F %T", v10);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E809E3C();
  v11 = localtime(a1 + 6);
  strftime(v21, 0x64uLL, "%F %T", v11);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    sub_20E809DD0();
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_7;
  }
  else if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    goto LABEL_7;
  }
  sub_20E809D60((uint64_t)(a1 + 2), v12, v13, v14, v15, v16, v17, v18);
LABEL_7:
  v19 = localtime(a1 + 8);
  strftime(v21, 0x64uLL, "%F %T", v19);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E809CF0();
  v20 = localtime(a1 + 10);
  strftime(v21, 0x64uLL, "%F %T", v20);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E809C80();
}

void sub_20E7A3248(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_20E78D874();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_20E78D888();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

_QWORD *sub_20E7A33E8(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      sub_20E78D874();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20E7A352C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_20E7A3580(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x18u);
}

void sub_20E7A3590(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void *sub_20E7A35AC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  CVPixelBufferRef *v4;
  void *result;

  v3 = (a1 + 2047) >> 11;
  v4 = (CVPixelBufferRef *)operator new();
  if (sub_20E805430(0x800u, v3, 0x4C303038u, v4, 64, 64, 0, 1, 0))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    CVPixelBufferUnlockBaseAddress(*v4, 0);
    CVPixelBufferRelease(*v4);
    JUMPOUT(0x212BC47D4);
  }
  CVPixelBufferLockBaseAddress(*v4, 0);
  result = CVPixelBufferGetBaseAddress(*v4);
  if (!result)
  {
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 72, "base_address && \"NULL pointer\"", (void (*)(void *))sub_20E803DA4);
    abort();
  }
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void sub_20E7A36C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E79F47C((CVPixelBufferRef **)va);
  _Unwind_Resume(a1);
}

void sub_20E7A36D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E79F47C((CVPixelBufferRef **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7A36EC(uint64_t a1, int a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD *v8;
  _QWORD *v9;

  if (a2)
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254A49330);
    if ((v3 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_254A49330))
      {
        v8 = (_QWORD *)operator new();
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        qword_254A49328 = (uint64_t)v8;
        __cxa_guard_release(&qword_254A49330);
      }
    }
    v4 = *(_QWORD *)qword_254A49328;
    v5 = *(_QWORD *)(qword_254A49328 + 8);
    if (*(_QWORD *)qword_254A49328 != v5)
    {
      while (*(_QWORD *)v4 != a1)
      {
        v4 += 16;
        if (v4 == v5)
          return 0;
      }
    }
  }
  else
  {
    v6 = atomic_load((unsigned __int8 *)&qword_254A49340);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A49340))
    {
      v9 = (_QWORD *)operator new();
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      qword_254A49338 = (uint64_t)v9;
      __cxa_guard_release(&qword_254A49340);
    }
    v4 = *(_QWORD *)qword_254A49338;
    v5 = *(_QWORD *)(qword_254A49338 + 8);
    if (*(_QWORD *)qword_254A49338 != v5)
    {
      while (*(_QWORD *)v4 != a1)
      {
        v4 += 16;
        if (v4 == v5)
          return 0;
      }
    }
  }
  if (v4 == v5)
    return 0;
  else
    return **(_QWORD **)(v4 + 8);
}

void sub_20E7A383C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49340);
  _Unwind_Resume(a1);
}

void sub_20E7A3854(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49330);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7A386C(int a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  CVPixelBufferRef *v8;
  _QWORD *v9;
  __int128 v10;
  char v11;

  sub_20E7A35AC(a1, (uint64_t)&v10);
  if (!v11)
    return 0;
  v1 = atomic_load((unsigned __int8 *)&qword_254A49340);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254A49340))
  {
    v9 = (_QWORD *)operator new();
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    qword_254A49338 = (uint64_t)v9;
    __cxa_guard_release(&qword_254A49340);
  }
  v2 = qword_254A49338;
  v3 = v10;
  v4 = *(_QWORD **)(qword_254A49338 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(qword_254A49338 + 16))
  {
    v6 = sub_20E7A8D04((_QWORD *)qword_254A49338, &v10);
  }
  else
  {
    *v4 = v10;
    v5 = *((_QWORD *)&v10 + 1);
    *((_QWORD *)&v10 + 1) = 0;
    v4[1] = v5;
    v6 = v4 + 2;
  }
  *(_QWORD *)(v2 + 8) = v6;
  if (!v11)
    return v3;
  v8 = (CVPixelBufferRef *)*((_QWORD *)&v10 + 1);
  *((_QWORD *)&v10 + 1) = 0;
  if (!v8)
    return v3;
  CVPixelBufferUnlockBaseAddress(*v8, 0);
  CVPixelBufferRelease(*v8);
  MEMORY[0x212BC47D4](v8, 0x20C4093837F09);
  return v3;
}

void sub_20E7A3990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_guard_abort(&qword_254A49340);
  sub_20E7A39C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7A39B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E7A39C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7A39C8(uint64_t a1)
{
  CVPixelBufferRef *v2;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(CVPixelBufferRef **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v2)
    {
      CVPixelBufferUnlockBaseAddress(*v2, 0);
      CVPixelBufferRelease(*v2);
      MEMORY[0x212BC47D4](v2, 0x20C4093837F09);
    }
  }
  return a1;
}

uint64_t sub_20E7A3A2C(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t *v7;
  _QWORD *v9;
  _QWORD *v10;

  v2 = atomic_load((unsigned __int8 *)&qword_254A49340);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A49340))
  {
    v9 = (_QWORD *)operator new();
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    qword_254A49338 = (uint64_t)v9;
    __cxa_guard_release(&qword_254A49340);
  }
  v3 = qword_254A49338;
  v4 = *(uint64_t **)qword_254A49338;
  v5 = *(uint64_t **)(qword_254A49338 + 8);
  if (*(uint64_t **)qword_254A49338 != v5)
  {
    while (*v4 != a1)
    {
      v4 += 2;
      if (v4 == v5)
        goto LABEL_7;
    }
  }
  if (v4 != v5)
    goto LABEL_13;
LABEL_7:
  v6 = atomic_load((unsigned __int8 *)&qword_254A49330);
  if ((v6 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A49330))
    {
      v10 = (_QWORD *)operator new();
      *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
      qword_254A49328 = (uint64_t)v10;
      __cxa_guard_release(&qword_254A49330);
    }
  }
  v3 = qword_254A49328;
  v4 = *(uint64_t **)qword_254A49328;
  v7 = *(uint64_t **)(qword_254A49328 + 8);
  if (*(uint64_t **)qword_254A49328 != v7)
  {
    while (*v4 != a1)
    {
      v4 += 2;
      if (v4 == v7)
        return 0;
    }
  }
  if (v4 != v7)
  {
LABEL_13:
    sub_20E7A3BB0(v3, v4);
    return 1;
  }
  return 0;
}

void sub_20E7A3B80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49330);
  _Unwind_Resume(a1);
}

void sub_20E7A3B98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49340);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E7A3BB0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  CVPixelBufferRef *v9;
  CVPixelBufferRef *v10;

  v4 = a2 + 2;
  v5 = *(uint64_t **)(a1 + 8);
  if (a2 + 2 == v5)
  {
    v6 = a2;
  }
  else
  {
    do
    {
      v7 = *v4;
      v8 = v4[1];
      v4[1] = 0;
      v9 = (CVPixelBufferRef *)*(v4 - 1);
      *(v4 - 2) = v7;
      *(v4 - 1) = v8;
      if (v9)
      {
        CVPixelBufferUnlockBaseAddress(*v9, 0);
        CVPixelBufferRelease(*v9);
        MEMORY[0x212BC47D4](v9, 0x20C4093837F09);
      }
      v4 += 2;
    }
    while (v4 != v5);
    v6 = v4 - 2;
    v4 = *(uint64_t **)(a1 + 8);
  }
  while (v4 != v6)
  {
    v10 = (CVPixelBufferRef *)*(v4 - 1);
    *(v4 - 1) = 0;
    if (v10)
    {
      CVPixelBufferUnlockBaseAddress(*v10, 0);
      CVPixelBufferRelease(*v10);
      MEMORY[0x212BC47D4](v10, 0x20C4093837F09);
    }
    v4 -= 2;
  }
  *(_QWORD *)(a1 + 8) = v6;
  return a2;
}

uint64_t sub_20E7A3CAC(uint64_t a1, char a2)
{
  _BYTE *v4;
  CVPixelBufferRef **v5;
  CVPixelBufferRef **v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  CVPixelBufferRef *v12;
  size_t v13;
  void *BaseAddress;
  CVPixelBufferRef *v15;
  int v16;
  CVPixelBufferRef *v17;
  size_t v18;
  void *v19;
  CVPixelBufferRef *v20;
  unint64_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t i;
  void **v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void *exception;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void *__p[2];
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  v4 = (_BYTE *)(a1 + 1608);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  sub_20E7C4880(a1 + 1608);
  *(_WORD *)(a1 + 2072) = 0;
  v5 = (CVPixelBufferRef **)(a1 + 1984);
  v6 = (CVPixelBufferRef **)(a1 + 1992);
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_BYTE *)(a1 + 2112) = 0;
  *(_BYTE *)(a1 + 2113) = a2;
  *(_DWORD *)(a1 + 2120) = 0;
  *(_BYTE *)(a1 + 2151) = 0;
  *(_BYTE *)(a1 + 2128) = 0;
  v42 = 0;
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_DWORD *)(a1 + 2184) = 1065353216;
  sub_20E7A8EE0(a1 + 2152, (uint64_t)__p, (uint64_t)__p);
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  *(_WORD *)(a1 + 2215) = 1;
  *(_WORD *)(a1 + 2192) = 0;
  v7 = (unsigned int *)(a1 + 24);
  if ((sub_20E7C5870((int *)(a1 + 24)) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC4588](exception, "Non-accelerated Platform");
    goto LABEL_84;
  }
  v8 = *v7;
  if (*v7 - 7 < 2)
  {
    v9 = operator new();
    sub_20E78A364(v9, *v7);
    goto LABEL_10;
  }
  if (v8 == 9)
  {
    v9 = operator new();
    sub_20E7C5D28(v9, *v7);
    goto LABEL_10;
  }
  if (v8 != 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC4588](exception, "Non-LACC Platform");
LABEL_84:
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v9 = operator new();
  sub_20E793D9C(v9, *v7);
LABEL_10:
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_20E7C47EC(v4, (_DWORD *)(a1 + 24));
  bzero((void *)(a1 + 216), 0x570uLL);
  if (*(_BYTE *)(a1 + 1612))
    goto LABEL_74;
  if (!*(_BYTE *)(a1 + 1613))
    goto LABEL_75;
  if (*(_DWORD *)(a1 + 1632))
  {
LABEL_76:
    v31 = "item.width == 0 && \"Uninitialized lacc_info_ struct\"";
    v32 = 158;
LABEL_77:
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", v32, v31, (void (*)(void *))sub_20E803DA4);
    abort();
  }
  if (*(_BYTE *)(a1 + 1648))
  {
LABEL_74:
    v31 = "!item.enabled && \"Uninitialized lacc_info_ struct\"";
    v32 = 156;
    goto LABEL_77;
  }
  if (!*(_BYTE *)(a1 + 1649))
  {
LABEL_75:
    v31 = "item.hostInitiated && \"Uninitialized lacc_info_ struct\"";
    v32 = 157;
    goto LABEL_77;
  }
  if (*(_DWORD *)(a1 + 1668))
    goto LABEL_76;
  if (*(_BYTE *)(a1 + 1684))
    goto LABEL_74;
  if (!*(_BYTE *)(a1 + 1685))
    goto LABEL_75;
  if (*(_DWORD *)(a1 + 1704))
    goto LABEL_76;
  if (*(_BYTE *)(a1 + 1720))
    goto LABEL_74;
  if (!*(_BYTE *)(a1 + 1721))
    goto LABEL_75;
  if (*(_DWORD *)(a1 + 1740))
    goto LABEL_76;
  if (*(_QWORD *)(a1 + 1760) || *(_QWORD *)(a1 + 1768) || *(_QWORD *)(a1 + 1776) || *(_QWORD *)(a1 + 1784))
  {
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 161, "item == nullptr && \"Uninitialized lacc_info_ struct, buffer member\"", (void (*)(void *))sub_20E803DA4);
    abort();
  }
  if (*(_BYTE *)(a1 + 1792))
    goto LABEL_79;
  if (!*(_BYTE *)(a1 + 1793))
    goto LABEL_80;
  if (*(_DWORD *)(a1 + 1812))
  {
LABEL_81:
    v33 = "item.width == 0 && \"Uninitialized lacc_info_ struct\"";
    v34 = 166;
LABEL_82:
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", v34, v33, (void (*)(void *))sub_20E803DA4);
    abort();
  }
  if (*(_BYTE *)(a1 + 1828))
  {
LABEL_79:
    v33 = "!item.enabled && \"Uninitialized lacc_info_ struct\"";
    v34 = 164;
    goto LABEL_82;
  }
  if (!*(_BYTE *)(a1 + 1829))
  {
LABEL_80:
    v33 = "item.hostInitiated && \"Uninitialized lacc_info_ struct\"";
    v34 = 165;
    goto LABEL_82;
  }
  if (*(_DWORD *)(a1 + 1848))
    goto LABEL_81;
  if (*(_BYTE *)(a1 + 1864))
    goto LABEL_79;
  if (!*(_BYTE *)(a1 + 1865))
    goto LABEL_80;
  if (*(_DWORD *)(a1 + 1884))
    goto LABEL_81;
  if (*(_BYTE *)(a1 + 1900))
    goto LABEL_79;
  if (!*(_BYTE *)(a1 + 1901))
    goto LABEL_80;
  if (*(_DWORD *)(a1 + 1920))
    goto LABEL_81;
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  v12 = (CVPixelBufferRef *)operator new();
  v13 = (v11 + 24);
  __p[0] = v12;
  if (sub_20E805430(v13, 1u, 0x4C303038u, v12, 64, 64, 0, 1, 0))
  {
    v36 = "(ret == kCVReturnSuccess && buf_ref.get()) && \"Could not pre-allocate a CVPixelBuffer\"";
    v37 = 258;
    goto LABEL_87;
  }
  CVPixelBufferLockBaseAddress(*v12, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(*v12);
  *(_QWORD *)(a1 + 2024) = BaseAddress;
  if (!BaseAddress)
  {
    v36 = "*base_address && \"NULL pointer\"";
    v37 = 263;
LABEL_87:
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetectionUtils/include/VIO/HWFeatureDetectionUtils/HwFeatureExtractionCommon.h", v37, v36, (void (*)(void *))sub_20E803DA4);
    abort();
  }
  __p[0] = 0;
  v15 = *v6;
  *v6 = v12;
  if (v15)
  {
    CVPixelBufferUnlockBaseAddress(*v15, 0);
    CVPixelBufferRelease(*v15);
    MEMORY[0x212BC47D4](v15, 0x20C4093837F09);
    BaseAddress = *(void **)(a1 + 2024);
  }
  bzero(BaseAddress, v13);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2024));
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
  v17 = (CVPixelBufferRef *)operator new();
  v18 = (v16 + 8);
  __p[0] = v17;
  if (sub_20E805430(v18, 1u, 0x4C303038u, v17, 64, 64, 0, 1, 0))
  {
    v38 = "(ret == kCVReturnSuccess && buf_ref.get()) && \"Could not pre-allocate a CVPixelBuffer\"";
    v39 = 258;
    goto LABEL_90;
  }
  CVPixelBufferLockBaseAddress(*v17, 0);
  v19 = CVPixelBufferGetBaseAddress(*v17);
  *(_QWORD *)(a1 + 2016) = v19;
  if (!v19)
  {
    v38 = "*base_address && \"NULL pointer\"";
    v39 = 263;
LABEL_90:
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetectionUtils/include/VIO/HWFeatureDetectionUtils/HwFeatureExtractionCommon.h", v39, v38, (void (*)(void *))sub_20E803DA4);
    abort();
  }
  __p[0] = 0;
  v20 = *v5;
  *v5 = v17;
  if (v20)
  {
    CVPixelBufferUnlockBaseAddress(*v20, 0);
    CVPixelBufferRelease(*v20);
    MEMORY[0x212BC47D4](v20, 0x20C4093837F09);
    v19 = *(void **)(a1 + 2016);
  }
  bzero(v19, v18);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 184))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2016));
  prime = vcvtps_u32_f32(13.0 / *(float *)(a1 + 2184));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v22 = *(int8x8_t *)(a1 + 2160);
  if (prime > *(_QWORD *)&v22)
    goto LABEL_53;
  if (prime < *(_QWORD *)&v22)
  {
    v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 2176) / *(float *)(a1 + 2184));
    if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
    {
      v23 = std::__next_prime(v23);
    }
    else
    {
      v25 = 1 << -(char)__clz(v23 - 1);
      if (v23 >= 2)
        v23 = v25;
    }
    if (prime <= v23)
      prime = v23;
    if (prime < *(_QWORD *)&v22)
LABEL_53:
      sub_20E7A8ACC(a1 + 2152, prime);
  }
  if (*(_QWORD *)(a1 + 2176))
  {
    v26 = *(void ***)(a1 + 2168);
    if (v26)
    {
      do
      {
        v30 = (void **)*v26;
        if (*((char *)v26 + 39) < 0)
          operator delete(v26[2]);
        operator delete(v26);
        v26 = v30;
      }
      while (v30);
    }
    *(_QWORD *)(a1 + 2168) = 0;
    v27 = *(_QWORD *)(a1 + 2160);
    if (v27)
    {
      for (i = 0; i != v27; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 2152) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 2176) = 0;
  }
  return a1;
}

void sub_20E7A43EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  CVPixelBufferRef **v12;
  CVPixelBufferRef **v13;
  uint64_t v14;
  void *v15;
  void **v16;
  void *v18;
  void *v19;
  uint64_t v20;

  __cxa_free_exception(v15);
  if (*(char *)(v11 + 2215) < 0)
    operator delete(*(void **)(v11 + 2192));
  sub_20E7A4578(v14);
  if (*(char *)(v11 + 2151) < 0)
    operator delete(*(void **)(v11 + 2128));
  sub_20E7858BC(v11 + 2056);
  sub_20E79F47C((CVPixelBufferRef **)(v11 + 2008));
  sub_20E79F47C((CVPixelBufferRef **)(v11 + 2000));
  sub_20E79F47C(v13);
  sub_20E79F47C(v12);
  sub_20E7A45E0((uint64_t *)(v11 + 208));
  sub_20E79FD40(v11 + 144);
  v18 = *(void **)(v11 + 96);
  if (v18)
  {
    *(_QWORD *)(v11 + 104) = v18;
    operator delete(v18);
    v19 = *v16;
    if (!*v16)
    {
LABEL_7:
      v20 = *(_QWORD *)(v11 + 32);
      *(_QWORD *)(v11 + 32) = 0;
      if (!v20)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  else
  {
    v19 = *v16;
    if (!*v16)
      goto LABEL_7;
  }
  *(_QWORD *)(v11 + 80) = v19;
  operator delete(v19);
  v20 = *(_QWORD *)(v11 + 32);
  *(_QWORD *)(v11 + 32) = 0;
  if (!v20)
LABEL_8:
    _Unwind_Resume(a1);
LABEL_11:
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7A4578(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *sub_20E7A45E0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20E7A0D1C(v2);
    MEMORY[0x212BC47C8](v3, 64);
  }
  return a1;
}

uint64_t sub_20E7A461C(uint64_t a1)
{
  void **v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  CVPixelBufferRef *v7;
  CVPixelBufferRef *v8;
  CVPixelBufferRef *v9;
  CVPixelBufferRef *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void **v20;

  if (*(char *)(a1 + 2215) < 0)
    operator delete(*(void **)(a1 + 2192));
  v2 = *(void ***)(a1 + 2168);
  if (v2)
  {
    do
    {
      v20 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v20;
    }
    while (v20);
  }
  v3 = *(void **)(a1 + 2152);
  *(_QWORD *)(a1 + 2152) = 0;
  if (v3)
    operator delete(v3);
  if (*(char *)(a1 + 2151) < 0)
    operator delete(*(void **)(a1 + 2128));
  v4 = *(std::__shared_weak_count **)(a1 + 2064);
  if (!v4)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_12:
    v7 = *(CVPixelBufferRef **)(a1 + 2008);
    *(_QWORD *)(a1 + 2008) = 0;
    if (!v7)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  v7 = *(CVPixelBufferRef **)(a1 + 2008);
  *(_QWORD *)(a1 + 2008) = 0;
  if (v7)
  {
LABEL_13:
    CVPixelBufferUnlockBaseAddress(*v7, 0);
    CVPixelBufferRelease(*v7);
    MEMORY[0x212BC47D4](v7, 0x20C4093837F09);
  }
LABEL_14:
  v8 = *(CVPixelBufferRef **)(a1 + 2000);
  *(_QWORD *)(a1 + 2000) = 0;
  if (v8)
  {
    CVPixelBufferUnlockBaseAddress(*v8, 0);
    CVPixelBufferRelease(*v8);
    MEMORY[0x212BC47D4](v8, 0x20C4093837F09);
  }
  v9 = *(CVPixelBufferRef **)(a1 + 1992);
  *(_QWORD *)(a1 + 1992) = 0;
  if (v9)
  {
    CVPixelBufferUnlockBaseAddress(*v9, 0);
    CVPixelBufferRelease(*v9);
    MEMORY[0x212BC47D4](v9, 0x20C4093837F09);
  }
  v10 = *(CVPixelBufferRef **)(a1 + 1984);
  *(_QWORD *)(a1 + 1984) = 0;
  if (v10)
  {
    CVPixelBufferUnlockBaseAddress(*v10, 0);
    CVPixelBufferRelease(*v10);
    MEMORY[0x212BC47D4](v10, 0x20C4093837F09);
  }
  v11 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v11)
  {
    v12 = sub_20E7A0D1C(v11);
    MEMORY[0x212BC47C8](v12, 64);
  }
  v13 = *(std::__shared_weak_count **)(a1 + 200);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(void **)(a1 + 96);
  if (v16)
  {
    *(_QWORD *)(a1 + 104) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 72);
  if (v17)
  {
    *(_QWORD *)(a1 + 80) = v17;
    operator delete(v17);
  }
  v18 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return a1;
}

uint64_t sub_20E7A4868(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::string *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  CVPixelBufferRef *v9;
  void *BaseAddress;
  CVPixelBufferRef *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  CVPixelBufferRef *v18;
  void *v19;
  CVPixelBufferRef *v20;
  int v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string *v40;
  std::__fs::filesystem::path::__string_view v41;
  std::__fs::filesystem::path *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v43;
  std::basic_string_view<_CharT, _Traits>::size_type v44;
  void *v45;
  int v46;
  void **v47;
  uint64_t v48;
  BOOL v49;
  BOOL v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  std::__fs::filesystem::path v58;
  std::__fs::filesystem::path __dst;

  if (*(_DWORD *)a2 != 1)
    return 4;
  v3 = a1 + 2120;
  *(_DWORD *)(a1 + 2120) = 1;
  v4 = (std::string *)(a1 + 2128);
  std::string::operator=((std::string *)(a1 + 2128), (const std::string *)(a2 + 8));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 152))(*(_QWORD *)(a1 + 32), v3, a1 + 40);
  if (!*(_DWORD *)(a1 + 52))
    return 4;
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v5;
  v6 = *(_DWORD *)(a1 + 64) + v5;
  v7 = *(_DWORD *)(a1 + 68) + v6;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  LODWORD(v5) = *(_DWORD *)(a1 + 56) + v5;
  v8 = *(_DWORD *)(a1 + 60) + v5;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v8;
  if (!*(_BYTE *)(a1 + 2113) && !*(_QWORD *)(a1 + 2000))
  {
    v9 = (CVPixelBufferRef *)operator new();
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    if (sub_20E805430(0x100u, 0x800u, 0x4C303038u, v9, 64, 64, 0, 1, 0))
    {
      v53 = "(ret == kCVReturnSuccess && buf_ref.get()) && \"Could not pre-allocate a CVPixelBuffer\"";
      v54 = 258;
    }
    else
    {
      CVPixelBufferLockBaseAddress(*v9, 0);
      BaseAddress = CVPixelBufferGetBaseAddress(*v9);
      *(_QWORD *)(a1 + 2032) = BaseAddress;
      if (BaseAddress)
      {
        v11 = *(CVPixelBufferRef **)(a1 + 2000);
        *(_QWORD *)(a1 + 2000) = v9;
        if (v11)
        {
          CVPixelBufferUnlockBaseAddress(*v11, 0);
          CVPixelBufferRelease(*v11);
          MEMORY[0x212BC47D4](v11, 0x20C4093837F09);
        }
        goto LABEL_9;
      }
      v53 = "*base_address && \"NULL pointer\"";
      v54 = 263;
    }
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetectionUtils/include/VIO/HWFeatureDetectionUtils/HwFeatureExtractionCommon.h", v54, v53, (void (*)(void *))sub_20E803DA4);
    abort();
  }
LABEL_9:
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
  *(_BYTE *)(a1 + 1936) = 1;
  *(_DWORD *)(a1 + 1956) = 128;
  v13 = (v12 + 127) >> 7;
  *(_DWORD *)(a1 + 1960) = v13;
  *(_QWORD *)(a1 + 1964) = 0x8000000000080;
  if (*(_QWORD *)(a1 + 2008))
  {
    v14 = 0x80000;
    goto LABEL_18;
  }
  v17 = v13 + 4096;
  v18 = (CVPixelBufferRef *)operator new();
  __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  if (sub_20E805430(0x80u, v17, 0x4C303038u, v18, 64, 64, 0, 1, 0))
  {
    v51 = "(ret == kCVReturnSuccess && buf_ref.get()) && \"Could not pre-allocate a CVPixelBuffer\"";
    v52 = 258;
    goto LABEL_77;
  }
  CVPixelBufferLockBaseAddress(*v18, 0);
  v19 = CVPixelBufferGetBaseAddress(*v18);
  *(_QWORD *)(a1 + 2040) = v19;
  if (!v19)
  {
    v51 = "*base_address && \"NULL pointer\"";
    v52 = 263;
LABEL_77:
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetectionUtils/include/VIO/HWFeatureDetectionUtils/HwFeatureExtractionCommon.h", v52, v51, (void (*)(void *))sub_20E803DA4);
    abort();
  }
  v20 = *(CVPixelBufferRef **)(a1 + 2008);
  *(_QWORD *)(a1 + 2008) = v18;
  if (v20)
  {
    CVPixelBufferUnlockBaseAddress(*v20, 0);
    CVPixelBufferRelease(*v20);
    MEMORY[0x212BC47D4](v20, 0x20C4093837F09);
  }
  v14 = *(_DWORD *)(a1 + 1968);
LABEL_18:
  v21 = *(unsigned __int8 *)(a1 + 2113);
  *(_BYTE *)(a1 + 144) = v21;
  *(_QWORD *)(a1 + 2048) = *(_QWORD *)(a1 + 2040) + v14;
  if (v21)
  {
    *(_QWORD *)(a1 + 160) = **(_QWORD **)(a1 + 1984);
    *(_QWORD *)(a1 + 152) = **(_QWORD **)(a1 + 1992);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = **(_QWORD **)(a1 + 2008);
    if (*(_QWORD *)(a1 + 208))
      goto LABEL_43;
    goto LABEL_41;
  }
  sub_20E804480(1, (uint64_t *)&__dst);
  v22 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
  *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_ = 0uLL;
  v23 = *(std::__shared_weak_count **)(a1 + 2064);
  *(_OWORD *)(a1 + 2056) = v22;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  size = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__l.__size_;
  if (__dst.__pn_.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(__dst.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v29 = *(_QWORD *)(a1 + 2056);
  if (!v29)
    sub_20E809F5C();
  v30 = *(_QWORD *)(a1 + 2064);
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *(std::__shared_weak_count **)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v29;
  *(_QWORD *)(a1 + 200) = v30;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  *(_QWORD *)(a1 + 1976) = 0;
  if (!*(_QWORD *)(a1 + 208))
  {
LABEL_41:
    v36 = operator new(0x140uLL, (std::align_val_t)0x40uLL);
    sub_20E7A1EEC(v36, a1 + 144);
    v37 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v36;
    if (v37)
    {
      v38 = sub_20E7A0D1C(v37);
      MEMORY[0x212BC47C8](v38, 64);
    }
  }
LABEL_43:
  memset(&v58, 0, sizeof(v58));
  v39 = *(unsigned __int8 *)(a1 + 2151);
  if ((v39 & 0x80u) == 0)
    v40 = v4;
  else
    v40 = *(std::string **)(a1 + 2128);
  if ((v39 & 0x80u) != 0)
    v39 = *(_QWORD *)(a1 + 2136);
  sub_20E7A9350(&v58.__pn_, v40, (std::string *)((char *)v40 + v39));
  v41 = std::__fs::filesystem::path::__filename(&v58);
  if (v41.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_20E7857BC();
  if (v41.__size_ >= 0x17)
  {
    v43 = (v41.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41.__size_ | 7) != 0x17)
      v43 = v41.__size_ | 7;
    v44 = v43 + 1;
    p_dst = (std::__fs::filesystem::path *)operator new(v43 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = v41.__size_;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v44 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_55;
  }
  *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v41.__size_;
  p_dst = &__dst;
  if (v41.__size_)
LABEL_55:
    memmove(p_dst, v41.__data_, v41.__size_);
  p_dst->__pn_.__r_.__value_.__s.__data_[v41.__size_] = 0;
  v45 = (void *)__dst.__pn_.__r_.__value_.__r.__words[0];
  v55 = __dst.__pn_.__r_.__value_.__r.__words[2];
  HIBYTE(v55) = __dst.__pn_.__r_.__value_.__s.__data_[19];
  v46 = SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E7A8C78(&v56, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v56 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
    LODWORD(v57) = v55;
    *(_DWORD *)((char *)&v57 + 3) = *(_DWORD *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[2] + 3);
    HIBYTE(v57) = *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23);
  }
  v47 = (void **)(a1 + 2192);
  if (*(char *)(a1 + 2215) < 0)
    operator delete(*v47);
  *(_OWORD *)v47 = v56;
  *(_QWORD *)(a1 + 2208) = v57;
  HIBYTE(v57) = 0;
  LOBYTE(v56) = 0;
  if (v46 < 0)
  {
    operator delete(v45);
    v48 = *(_QWORD *)(a1 + 208);
    if ((SHIBYTE(v58.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_63;
  }
  else
  {
    v48 = *(_QWORD *)(a1 + 208);
    if ((SHIBYTE(v58.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      __dst = v58;
      goto LABEL_66;
    }
  }
  sub_20E7A8C78(&__dst, v58.__pn_.__r_.__value_.__l.__data_, v58.__pn_.__r_.__value_.__l.__size_);
LABEL_66:
  v49 = sub_20E7A2594(v48, (uint64_t *)&__dst);
  v50 = v49;
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    if (v50)
    {
LABEL_68:
      v15 = 0;
      *(_BYTE *)(a1 + 2216) = 0;
      if (SHIBYTE(v58.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_72;
      return v15;
    }
  }
  else if (v49)
  {
    goto LABEL_68;
  }
  v15 = 6;
  if (SHIBYTE(v58.__pn_.__r_.__value_.__r.__words[2]) < 0)
LABEL_72:
    operator delete(v58.__pn_.__r_.__value_.__l.__data_);
  return v15;
}

void sub_20E7A4E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7A4EF4(uint64_t a1, void *__src, size_t __len, unsigned int a4, unsigned int a5)
{
  unsigned int v7;
  char *v13;
  void **v14;
  char *v15;
  BOOL v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  BOOL v26;

  if (!__src)
    return 0;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 > a4)
    return 0;
  if (v7 > a5 || *(_DWORD *)(a1 + 12) <= a4)
    return 0;
  if (__len)
  {
    v13 = *(char **)(a1 + 72);
    v15 = *(char **)(a1 + 80);
    v14 = (void **)(a1 + 72);
    v16 = a4 != a5;
    v17 = v13;
    if (a4 == a5)
    {
      if (v13 != v15)
      {
        v17 = *(char **)(a1 + 72);
        while (*(_DWORD *)v17 != a4)
        {
          v17 += 16;
          if (v17 == v15)
            goto LABEL_22;
        }
      }
      if (v17 != v15)
        v16 = 1;
      v18 = *(_QWORD *)(a1 + 88);
      if ((unint64_t)v15 < v18)
        goto LABEL_23;
    }
    else
    {
      if (v13 != v15)
      {
        v17 = *(char **)(a1 + 72);
        while (*(_DWORD *)v17 != a4)
        {
          v17 += 16;
          if (v17 == v15)
            goto LABEL_22;
        }
      }
      if (v17 != v15)
        v17[12] = 1;
LABEL_22:
      v18 = *(_QWORD *)(a1 + 88);
      if ((unint64_t)v15 < v18)
      {
LABEL_23:
        *(_DWORD *)v15 = a4;
        *((_DWORD *)v15 + 1) = a5;
        *((_DWORD *)v15 + 2) = __len;
        v19 = v15 + 16;
        v15[12] = v16;
LABEL_42:
        *(_QWORD *)(a1 + 80) = v19;
        memmove((void *)(*(_QWORD *)(a1 + 2032) + a5 - *(_DWORD *)(a1 + 8)), __src, __len);
        return 1;
      }
    }
    v20 = (v15 - v13) >> 4;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60)
      sub_20E78D874();
    v22 = v18 - (_QWORD)v13;
    if (v22 >> 3 > v21)
      v21 = v22 >> 3;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      v26 = v16;
      if (v23 >> 60)
        sub_20E78D888();
      v24 = (char *)operator new(16 * v23);
      v16 = v26;
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[16 * v20];
    *(_DWORD *)v25 = a4;
    *((_DWORD *)v25 + 1) = a5;
    *((_DWORD *)v25 + 2) = __len;
    v25[12] = v16;
    v19 = v25 + 16;
    if (v13 != v15)
    {
      do
      {
        *((_OWORD *)v25 - 1) = *((_OWORD *)v15 - 1);
        v25 -= 16;
        v15 -= 16;
      }
      while (v15 != v13);
      v13 = (char *)*v14;
    }
    *(_QWORD *)(a1 + 72) = v25;
    *(_QWORD *)(a1 + 80) = v19;
    *(_QWORD *)(a1 + 88) = &v24[16 * v23];
    if (v13)
      operator delete(v13);
    goto LABEL_42;
  }
  return 1;
}

uint64_t sub_20E7A50FC(uint64_t a1, void *__src, size_t __len, unsigned int a4, int a5)
{
  BOOL v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  char **v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unsigned int v23;
  unsigned int v24;
  char **v25;

  if (!__src || *(_DWORD *)(a1 + 16) > a4 || *(_DWORD *)(a1 + 20) <= a4)
    return 0;
  if (__len)
  {
    v10 = a4 != a5;
    v12 = *(char **)(a1 + 104);
    v11 = *(_QWORD *)(a1 + 112);
    if ((unint64_t)v12 >= v11)
    {
      v15 = (char **)(a1 + 96);
      v16 = *(char **)(a1 + 96);
      v17 = (v12 - v16) >> 4;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 60)
        sub_20E78D874();
      v19 = v11 - (_QWORD)v16;
      if (v19 >> 3 > v18)
        v18 = v19 >> 3;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
        v20 = 0xFFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        v25 = (char **)(a1 + 96);
        if (v20 >> 60)
          sub_20E78D888();
        v21 = (char *)operator new(16 * v20);
        v15 = v25;
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[16 * v17];
      *(_DWORD *)v22 = a4;
      *((_DWORD *)v22 + 1) = a5;
      *((_DWORD *)v22 + 2) = __len;
      v22[12] = v10;
      v13 = v22 + 16;
      if (v12 != v16)
      {
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v12 - 1);
          v22 -= 16;
          v12 -= 16;
        }
        while (v12 != v16);
        v12 = *v15;
      }
      *(_QWORD *)(a1 + 96) = v22;
      *(_QWORD *)(a1 + 104) = v13;
      *(_QWORD *)(a1 + 112) = &v21[16 * v20];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_DWORD *)v12 = a4;
      *((_DWORD *)v12 + 1) = a5;
      *((_DWORD *)v12 + 2) = __len;
      v13 = v12 + 16;
      v12[12] = v10;
    }
    *(_QWORD *)(a1 + 104) = v13;
    v23 = *(_DWORD *)(a1 + 128);
    v24 = *(_DWORD *)(a1 + 132);
    if (v23 >= a4)
      v23 = a4;
    if (v24 <= __len + a4)
      v24 = __len + a4;
    *(_DWORD *)(a1 + 128) = v23;
    *(_DWORD *)(a1 + 132) = v24;
    memmove((void *)(*(_QWORD *)(a1 + 2040) + a4 - *(_DWORD *)(a1 + 16)), __src, __len);
  }
  return 1;
}

void sub_20E7A52A0(uint64_t a1)
{
  unsigned int v2;

  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  bzero((void *)(a1 + 360), 0x400uLL);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
  v2 = *(_DWORD *)(a1 + 20);
  *(_QWORD *)(a1 + 120) = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(a1 + 128) = v2;
}

void sub_20E7A5314(uint64_t a1)
{
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  bzero((void *)(a1 + 360), 0x400uLL);
}

uint64_t sub_20E7A5348(uint64_t a1, const void *a2, size_t *a3, int a4)
{
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  size_t *v16;
  uint64_t v17;
  size_t *v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  __CVBuffer *v22;
  int v23;
  size_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  void *BaseAddress;
  CVPixelBufferRef *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 buf;
  char v42;

  kdebug_trace();
  if (!a2)
    return 0;
  v8 = atomic_load((unsigned __int8 *)&qword_254A49340);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A49340))
  {
    v36 = (_QWORD *)operator new();
    *v36 = 0;
    v36[1] = 0;
    v36[2] = 0;
    qword_254A49338 = (uint64_t)v36;
    __cxa_guard_release(&qword_254A49340);
  }
  v9 = *(_QWORD *)qword_254A49338;
  v10 = *(_QWORD *)(qword_254A49338 + 8);
  if (*(_QWORD *)qword_254A49338 != v10)
  {
    while (*(const void **)v9 != a2)
    {
      v9 += 16;
      if (v9 == v10)
        goto LABEL_9;
    }
  }
  if (v9 == v10)
LABEL_9:
    v11 = 0;
  else
    v11 = **(_QWORD **)(v9 + 8);
  if (a4)
    v12 = 2072;
  else
    v12 = 2073;
  *(_BYTE *)(a1 + v12) = v11 == 0;
  v13 = 2088;
  if (a4)
  {
    v13 = 2080;
    v14 = (const void **)(a1 + 2080);
  }
  else
  {
    v14 = (const void **)(a1 + 2088);
  }
  if (a4)
    v15 = (const void **)(a1 + 2088);
  else
    v15 = (const void **)(a1 + 2080);
  v16 = (size_t *)(a1 + 2096);
  v17 = 2104;
  if (a4)
    v17 = 2096;
  v40 = v17;
  if (a4)
    v18 = (size_t *)(a1 + 2096);
  else
    v18 = (size_t *)(a1 + 2104);
  if (a4)
    v16 = (size_t *)(a1 + 2104);
  if (v11)
  {
    v19 = atomic_load((unsigned __int8 *)&qword_254A49340);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254A49340))
    {
      v37 = (_QWORD *)operator new();
      *v37 = 0;
      v37[1] = 0;
      v37[2] = 0;
      qword_254A49338 = (uint64_t)v37;
      __cxa_guard_release(&qword_254A49340);
    }
    v20 = *(_QWORD *)qword_254A49338;
    v21 = *(_QWORD *)(qword_254A49338 + 8);
    if (*(_QWORD *)qword_254A49338 != v21)
    {
      while (*(const void **)v20 != a2)
      {
        v20 += 16;
        if (v20 == v21)
        {
          v22 = 0;
          v23 = 0;
          goto LABEL_53;
        }
      }
    }
    v23 = 0;
    if (v20 == v21)
      goto LABEL_52;
LABEL_50:
    v22 = **(__CVBuffer ***)(v20 + 8);
    if ((v23 & 1) != 0)
      goto LABEL_54;
    goto LABEL_53;
  }
  if (*v14 == a2 && *v18 >= *a3)
  {
    v23 = 0;
  }
  else if (*v15 == a2 && (v24 = *v16, *v16 >= *a3))
  {
    if (*v14 == a2)
      sub_20E80A00C();
    v23 = 0;
    *(_QWORD *)(a1 + v13) = a2;
    *(_QWORD *)(a1 + v40) = v24;
    v25 = 2072;
    if (a4)
      v25 = 2073;
    *(_BYTE *)(a1 + v12) = *(_BYTE *)(a1 + v25);
    *(_BYTE *)(a1 + 2112) = 0;
  }
  else
  {
    v23 = 1;
  }
  v26 = atomic_load((unsigned __int8 *)&qword_254A49330);
  if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A49330))
  {
    v38 = (_QWORD *)operator new();
    *v38 = 0;
    v38[1] = 0;
    v38[2] = 0;
    qword_254A49328 = (uint64_t)v38;
    __cxa_guard_release(&qword_254A49330);
  }
  v20 = *(_QWORD *)qword_254A49328;
  v27 = *(_QWORD *)(qword_254A49328 + 8);
  if (*(_QWORD *)qword_254A49328 != v27)
  {
    while (*(const void **)v20 != a2)
    {
      v20 += 16;
      if (v20 == v27)
        goto LABEL_52;
    }
  }
  if (v20 != v27)
    goto LABEL_50;
LABEL_52:
  v22 = 0;
  if ((v23 & 1) != 0)
    goto LABEL_54;
LABEL_53:
  if (!v22)
    sub_20E809FE0();
LABEL_54:
  if (v23)
  {
    *(_BYTE *)(a1 + 2112) = 0;
    if (v22)
    {
      if (*(_QWORD *)(a1 + 2080) == *(_QWORD *)(a1 + 2088))
      {
        *v14 = 0;
        if (*(_BYTE *)(a1 + v12))
        {
LABEL_61:
          sub_20E7A35AC(*a3, (uint64_t)&buf);
          if (v42)
          {
            v28 = atomic_load((unsigned __int8 *)&qword_254A49330);
            if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A49330))
            {
              v39 = (_QWORD *)operator new();
              *v39 = 0;
              v39[1] = 0;
              v39[2] = 0;
              qword_254A49328 = (uint64_t)v39;
              __cxa_guard_release(&qword_254A49330);
            }
            v29 = (_QWORD *)qword_254A49328;
            *(_QWORD *)&buf = a2;
            *v14 = a2;
            v22 = (__CVBuffer *)**((_QWORD **)&buf + 1);
            v30 = (_QWORD *)v29[1];
            if ((unint64_t)v30 >= v29[2])
            {
              v32 = sub_20E7A8D04(v29, &buf);
            }
            else
            {
              *v30 = a2;
              v31 = *((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              v30[1] = v31;
              v32 = v30 + 2;
            }
            v29[1] = v32;
            if (v42)
            {
              v35 = (CVPixelBufferRef *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v35)
              {
                CVPixelBufferUnlockBaseAddress(*v35, 0);
                CVPixelBufferRelease(*v35);
                MEMORY[0x212BC47D4](v35, 0x20C4093837F09);
              }
            }
            goto LABEL_67;
          }
          return 0;
        }
LABEL_76:
        sub_20E809F88();
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Releasing and re-allocating a DMA buffer :(", (uint8_t *)&buf, 2u);
      }
      CVPixelBufferRelease(v22);
    }
    if (*(_BYTE *)(a1 + v12))
      goto LABEL_61;
    goto LABEL_76;
  }
  *v14 = a2;
LABEL_67:
  *(_QWORD *)(a1 + v40) = *a3;
  if (*(_BYTE *)(a1 + v12))
  {
    BaseAddress = CVPixelBufferGetBaseAddress(v22);
    if (BaseAddress == a2)
      sub_20E809FB4();
    memcpy(BaseAddress, a2, *a3);
  }
  kdebug_trace();
  return 1;
}

void sub_20E7A584C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  __cxa_guard_abort(&qword_254A49330);
  sub_20E7A39C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7A586C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49330);
  _Unwind_Resume(a1);
}

void sub_20E7A5884(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49340);
  _Unwind_Resume(a1);
}

void sub_20E7A589C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49340);
  _Unwind_Resume(a1);
}

void sub_20E7A58B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E7A39C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7A58D4(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;

  if (a2 <= a3)
    sub_20E80A090();
  *(_QWORD *)(result + 1776) = **(_QWORD **)(result + 2008);
  *(_DWORD *)(result + 1712) = 64;
  *(_DWORD *)(result + 1704) = 64;
  v3 = (a2 - a3) & 0xFFFFFFC0;
  *(_DWORD *)(result + 136) = v3;
  *(_DWORD *)(result + 140) = a2;
  if ((a2 & 0x3F) != 0)
    sub_20E80A064();
  v4 = a2 - v3;
  if ((((_BYTE)a2 - (_BYTE)v3) & 0x3F) != 0)
    sub_20E80A038();
  *(_DWORD *)(result + 1700) = v4;
  *(_DWORD *)(result + 1708) = (unint64_t)(v4 + 63) >> 6;
  *(_DWORD *)(result + 1716) = v3;
  *(_BYTE *)(result + 1684) = a2 != v3;
  return result;
}

uint64_t sub_20E7A594C(uint64_t a1, const void *a2, unsigned int a3, size_t __len)
{
  uint64_t v4;
  uint64_t v6;

  if (!a2)
    sub_20E80A0BC();
  v4 = *(unsigned int *)(a1 + 136);
  if (a3 < v4)
    return 0;
  if (__len + a3 > *(unsigned int *)(a1 + 140))
    return 0;
  v6 = *(_QWORD *)(a1 + 2040);
  if (!v6)
    sub_20E80A0E8();
  if (__len)
    memmove((void *)(v6 + v4 + a3 - v4), a2, __len);
  return 1;
}

BOOL sub_20E7A59C0(uint64_t a1, unsigned int a2, void *__dst, size_t __len)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!__dst)
    sub_20E80A114();
  if (*(_DWORD *)(a1 + 136) <= a2 && __len + a2 <= *(_DWORD *)(a1 + 140))
  {
    if (__len)
      memmove(__dst, (const void *)(*(_QWORD *)(a1 + 2040) + a2), __len);
    return 1;
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_20E80A140(result, v5, v6, v7, v8, v9, v10, v11);
      return 0;
    }
  }
  return result;
}

__n128 sub_20E7A5A3C(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __n128 result;

  if (!a2)
    sub_20E80A174();
  v4 = a1 + 216;
  memmove((void *)(a1 + 228), a2, 0x80uLL);
  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 144) = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 160) = v5;
  v6 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 176) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 192) = v6;
  v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v4 + 208) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 224) = v7;
  v8 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v4 + 240) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v4 + 256) = v8;
  v9 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v4 + 272) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v4 + 288) = v9;
  v10 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(v4 + 304) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(v4 + 320) = v10;
  v11 = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(v4 + 336) = *(_OWORD *)(a3 + 192);
  *(_OWORD *)(v4 + 352) = v11;
  v12 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v4 + 368) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v4 + 384) = v12;
  v13 = *(_OWORD *)(a3 + 272);
  *(_OWORD *)(v4 + 400) = *(_OWORD *)(a3 + 256);
  *(_OWORD *)(v4 + 416) = v13;
  v14 = *(_OWORD *)(a3 + 304);
  *(_OWORD *)(v4 + 432) = *(_OWORD *)(a3 + 288);
  *(_OWORD *)(v4 + 448) = v14;
  v15 = *(_OWORD *)(a3 + 336);
  *(_OWORD *)(v4 + 464) = *(_OWORD *)(a3 + 320);
  *(_OWORD *)(v4 + 480) = v15;
  v16 = *(_OWORD *)(a3 + 368);
  *(_OWORD *)(v4 + 496) = *(_OWORD *)(a3 + 352);
  *(_OWORD *)(v4 + 512) = v16;
  v17 = *(_OWORD *)(a3 + 400);
  *(_OWORD *)(v4 + 528) = *(_OWORD *)(a3 + 384);
  *(_OWORD *)(v4 + 544) = v17;
  v18 = *(_OWORD *)(a3 + 432);
  *(_OWORD *)(v4 + 560) = *(_OWORD *)(a3 + 416);
  *(_OWORD *)(v4 + 576) = v18;
  v19 = *(_OWORD *)(a3 + 464);
  *(_OWORD *)(v4 + 592) = *(_OWORD *)(a3 + 448);
  *(_OWORD *)(v4 + 608) = v19;
  v20 = *(_OWORD *)(a3 + 496);
  *(_OWORD *)(v4 + 624) = *(_OWORD *)(a3 + 480);
  *(_OWORD *)(v4 + 640) = v20;
  v21 = *(_OWORD *)(a3 + 528);
  *(_OWORD *)(v4 + 656) = *(_OWORD *)(a3 + 512);
  *(_OWORD *)(v4 + 672) = v21;
  v22 = *(_OWORD *)(a3 + 560);
  *(_OWORD *)(v4 + 688) = *(_OWORD *)(a3 + 544);
  *(_OWORD *)(v4 + 704) = v22;
  v23 = *(_OWORD *)(a3 + 592);
  *(_OWORD *)(v4 + 720) = *(_OWORD *)(a3 + 576);
  *(_OWORD *)(v4 + 736) = v23;
  v24 = *(_OWORD *)(a3 + 624);
  *(_OWORD *)(v4 + 752) = *(_OWORD *)(a3 + 608);
  *(_OWORD *)(v4 + 768) = v24;
  v25 = *(_OWORD *)(a3 + 656);
  *(_OWORD *)(v4 + 784) = *(_OWORD *)(a3 + 640);
  *(_OWORD *)(v4 + 800) = v25;
  v26 = *(_OWORD *)(a3 + 688);
  *(_OWORD *)(v4 + 816) = *(_OWORD *)(a3 + 672);
  *(_OWORD *)(v4 + 832) = v26;
  v27 = *(_OWORD *)(a3 + 720);
  *(_OWORD *)(v4 + 848) = *(_OWORD *)(a3 + 704);
  *(_OWORD *)(v4 + 864) = v27;
  v28 = *(_OWORD *)(a3 + 752);
  *(_OWORD *)(v4 + 880) = *(_OWORD *)(a3 + 736);
  *(_OWORD *)(v4 + 896) = v28;
  v29 = *(_OWORD *)(a3 + 784);
  *(_OWORD *)(v4 + 912) = *(_OWORD *)(a3 + 768);
  *(_OWORD *)(v4 + 928) = v29;
  v30 = *(_OWORD *)(a3 + 816);
  *(_OWORD *)(v4 + 944) = *(_OWORD *)(a3 + 800);
  *(_OWORD *)(v4 + 960) = v30;
  v31 = *(_OWORD *)(a3 + 848);
  *(_OWORD *)(v4 + 976) = *(_OWORD *)(a3 + 832);
  *(_OWORD *)(v4 + 992) = v31;
  v32 = *(_OWORD *)(a3 + 880);
  *(_OWORD *)(v4 + 1008) = *(_OWORD *)(a3 + 864);
  *(_OWORD *)(v4 + 1024) = v32;
  v33 = *(_OWORD *)(a3 + 896);
  *(_OWORD *)(v4 + 1056) = *(_OWORD *)(a3 + 912);
  *(_OWORD *)(v4 + 1040) = v33;
  v34 = *(_OWORD *)(a3 + 928);
  *(_OWORD *)(v4 + 1088) = *(_OWORD *)(a3 + 944);
  *(_OWORD *)(v4 + 1072) = v34;
  v35 = *(_OWORD *)(a3 + 960);
  *(_OWORD *)(v4 + 1120) = *(_OWORD *)(a3 + 976);
  *(_OWORD *)(v4 + 1104) = v35;
  result = *(__n128 *)(a3 + 992);
  *(_OWORD *)(v4 + 1152) = *(_OWORD *)(a3 + 1008);
  *(__n128 *)(v4 + 1136) = result;
  return result;
}

uint64_t sub_20E7A5B80(uint64_t result, unint64_t a2, int a3)
{
  if (a2 >= 0x20)
    sub_20E80A1A0();
  *(_DWORD *)(result + 4 * a2 + 228) = a3;
  return result;
}

void *sub_20E7A5BA4(uint64_t a1, unint64_t a2, void *__src, unint64_t a4)
{
  if (!__src)
    sub_20E80A1CC();
  if (a2 >= 0x20)
    sub_20E80A250();
  if (!a4)
    sub_20E80A1F8();
  if (a4 >= 9)
    sub_20E80A224();
  return memmove((void *)(a1 + 32 * a2 + 360), __src, 4 * a4);
}

void *sub_20E7A5BF0(uint64_t a1, unint64_t a2, void *__src, unint64_t a4)
{
  if (!__src)
    sub_20E80A27C();
  if (a2 >= 0x20)
    sub_20E80A300();
  if (!a4)
    sub_20E80A2A8();
  if (a4 >= 5)
    sub_20E80A2D4();
  return memmove((void *)(a1 + 32 * a2 + 360), __src, 8 * a4);
}

uint64_t sub_20E7A5C3C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 2216))
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 224))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), a2);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_20E7A5C68(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*(_BYTE *)(result + 2216))
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _DWORD *, uint64_t))(**(_QWORD **)(result + 32) + 232))(*(_QWORD *)(result + 32), *(_QWORD *)(result + 2048), a2, a3, a4);
  *a3 = 2139095039;
  return result;
}

uint64_t sub_20E7A5CA0(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  if (*(_BYTE *)(result + 2216))
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(result + 32) + 240))(*(_QWORD *)(result + 32), *(_QWORD *)(result + 2048), a2, a3, a4);
  *a3 = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_20E7A5CD8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 2216))
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _DWORD *, uint64_t))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), a2, a3, a4);
  *a3 = -1;
  return 0;
}

void sub_20E7A5D14(uint64_t a1, std::string::size_type a2)
{
  int v4;
  _BOOL4 v5;
  std::string::size_type v6;
  NSObject *v7;
  const char *v8;
  std::string::size_type v9;
  const char *v10;
  std::string *v11;
  std::string v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    LOWORD(v12.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "---- AppleCVHWA analytics output starts here ----", (uint8_t *)&v12, 2u);
  }
  v4 = *(unsigned __int8 *)(a1 + 2112);
  v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT);
  if (v4)
  {
    if (!v5)
      goto LABEL_15;
    if (*(char *)(a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    LODWORD(v12.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = v9;
    v7 = MEMORY[0x24BDACB70];
    v8 = "Cached accelerator offload failed due to %{public}s, aborting.";
  }
  else
  {
    if (!v5)
      goto LABEL_15;
    if (*(char *)(a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *(_QWORD *)a2;
    LODWORD(v12.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = v6;
    v7 = MEMORY[0x24BDACB70];
    v8 = "Uncached accelerator offload failed due to %{public}s, aborting.";
  }
  _os_log_fault_impl(&dword_20E77A000, v7, OS_LOG_TYPE_FAULT, v8, (uint8_t *)&v12, 0xCu);
LABEL_15:
  sub_20E7A3088(*(const time_t **)(a1 + 208));
  sub_20E7C4A28((_DWORD *)(a1 + 216));
  if (*(_BYTE *)(a1 + 2216))
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048));
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    LOWORD(v12.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Metadata register values are stale, not reporting.", (uint8_t *)&v12, 2u);
  }
  v10 = sub_20E7FA794(*(_DWORD *)(*(_QWORD *)(a1 + 208) + 100));
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v12.__r_.__value_.__r.__words[1] = xmmword_20E80E490;
  strcpy(v12.__r_.__value_.__l.__data_, "Original error reported by request utility function: ");
  std::string::append(&v12, v10);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v12;
  else
    v11 = (std::string *)v12.__r_.__value_.__r.__words[0];
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwGeneralProcessingAPI.cpp", 666, (const char *)v11, (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E7A5F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7A5F48(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 v56;
  __CVBuffer *v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  __CVBuffer *v62;
  int Width;
  int Height;
  unsigned int v65;
  int v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  __CVBuffer **v79;
  char *v80;
  uint64_t v81;
  int64_t v82;
  unint64_t v83;
  char *v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE *v87;
  int64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  __CVBuffer **v94;
  char *v95;
  int64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _OWORD *v101;
  __int128 *v102;
  uint64_t v103;
  __int128 v104;
  __CVBuffer *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  __int128 v111;
  __CVBuffer *v112;
  int v113;
  void *BaseAddress;
  int v115;
  int v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _BOOL8 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BOOL8 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  __int128 v139;
  void *v140;
  _QWORD *v141;
  unint64_t v142;
  void *__p;
  uint64_t v144;
  char *v145;
  _BYTE buf[24];
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152[3];
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    *(_QWORD *)buf = operator new(0x28uLL);
    *(_OWORD *)&buf[8] = xmmword_20E80E4E0;
    strcpy(*(char **)buf, "call with invalid return address");
    sub_20E7A5D14(a1, (std::string::size_type)buf);
  }
  kdebug_trace();
  v6 = *(_QWORD *)a1;
  if ((unint64_t)(*(_QWORD *)a1 + 1) <= 1)
    sub_20E80A51C();
  v7 = *(_DWORD *)(a1 + 16);
  if (!v7 || *(_DWORD *)(a1 + 20) <= v7)
    sub_20E80A32C();
  v8 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v8 || (v9 = *(_DWORD *)(a1 + 12), v9 <= v8))
    sub_20E80A358();
  *(_BYTE *)(a1 + 2216) = 0;
  v10 = *(unsigned __int8 *)(a1 + 2113);
  if (!*(_BYTE *)(a1 + 2113))
  {
    v21 = *(_QWORD *)(a1 + 72);
    v20 = *(_QWORD *)(a1 + 80);
    if (v21 != v20)
    {
      v22 = v21 + 8;
      v23 = 1;
      do
      {
        v24 = v22 - 8;
        v25 = *(_DWORD *)(v22 - 8);
        if (!*(_BYTE *)(v22 + 4))
        {
          v26 = *(_DWORD *)v22 + v25;
          if ((v23 & 1) == 0)
          {
            if (v25 >= *(_DWORD *)(a1 + 120))
              v25 = *(_DWORD *)(a1 + 120);
            if (*(_DWORD *)(a1 + 124) > v26)
              v26 = *(_DWORD *)(a1 + 124);
          }
          v23 = 0;
          *(_DWORD *)(a1 + 120) = v25;
          *(_DWORD *)(a1 + 124) = v26;
        }
        v22 += 16;
      }
      while (v24 + 16 != v20);
    }
    v28 = *(_QWORD *)(a1 + 96);
    v27 = *(_QWORD *)(a1 + 104);
    if (v28 != v27)
    {
      v29 = v28 + 8;
      v30 = 1;
      do
      {
        v31 = v29 - 8;
        v32 = *(_DWORD *)(v29 - 8);
        if (!*(_BYTE *)(v29 + 4))
        {
          v33 = *(_DWORD *)v29 + v32;
          if ((v30 & 1) == 0)
          {
            if (v32 >= *(_DWORD *)(a1 + 128))
              v32 = *(_DWORD *)(a1 + 128);
            if (*(_DWORD *)(a1 + 132) > v33)
              v33 = *(_DWORD *)(a1 + 132);
          }
          v30 = 0;
          *(_DWORD *)(a1 + 128) = v32;
          *(_DWORD *)(a1 + 132) = v33;
        }
        v29 += 16;
      }
      while (v31 + 16 != v27);
    }
    v35 = *(_DWORD *)(a1 + 120);
    v34 = *(_DWORD *)(a1 + 124);
    if (v35 >= v34)
    {
      *(_BYTE *)(a1 + 1612) = 0;
      v40 = *(_DWORD *)(a1 + 128);
      v39 = *(_DWORD *)(a1 + 132);
      if (v40 >= v39)
      {
LABEL_37:
        *(_BYTE *)(a1 + 1648) = 0;
        if (*(_DWORD *)(a1 + 136))
          goto LABEL_41;
        goto LABEL_9;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 1760) = **(_QWORD **)(a1 + 2000);
      *(_DWORD *)(a1 + 1640) = 64;
      *(_DWORD *)(a1 + 1632) = 64;
      v36 = v35 & 0xFFFFFFC0;
      v37 = (v34 + 63) & 0xFFFFFFC0;
      *(_DWORD *)(a1 + 120) = v36;
      *(_DWORD *)(a1 + 124) = v37;
      v38 = v37 - v36;
      *(_DWORD *)(a1 + 1628) = v38;
      *(_DWORD *)(a1 + 1636) = v38 >> 6;
      *(_DWORD *)(a1 + 1644) = v36 - v8;
      *(_BYTE *)(a1 + 1612) = 1;
      v40 = *(_DWORD *)(a1 + 128);
      v39 = *(_DWORD *)(a1 + 132);
      if (v40 >= v39)
        goto LABEL_37;
    }
    *(_BYTE *)(a1 + 1648) = 1;
    *(_QWORD *)(a1 + 1768) = **(_QWORD **)(a1 + 2008);
    *(_DWORD *)(a1 + 1676) = 64;
    *(_DWORD *)(a1 + 1668) = 64;
    v41 = v40 & 0xFFFFFFC0;
    v42 = (v39 + 63) & 0xFFFFFFC0;
    *(_DWORD *)(a1 + 128) = v41;
    *(_DWORD *)(a1 + 132) = v42;
    v43 = v42 - v41;
    *(_DWORD *)(a1 + 1664) = v43;
    *(_DWORD *)(a1 + 1672) = v43 >> 6;
    *(_DWORD *)(a1 + 1680) = v41 - v7;
    if (*(_DWORD *)(a1 + 136))
      goto LABEL_41;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 136))
    goto LABEL_41;
LABEL_9:
  if (!*(_DWORD *)(a1 + 140))
  {
    v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v11)
      sub_20E80A384(v11, v12, v13, v14, v15, v16, v17, v18);
    return 1;
  }
LABEL_41:
  if (v10)
  {
    v44 = a1 + 1608;
    if (!*(_BYTE *)(a1 + 1684))
      goto LABEL_46;
    goto LABEL_43;
  }
  v53 = *(unsigned int *)(a1 + 128);
  v54 = v6;
  if (*(_BYTE *)(a1 + 1612))
  {
    v55 = v6 + *(unsigned int *)(a1 + 120);
    if (v55 < v6 + v8 || *(_DWORD *)(a1 + 124) > v9)
      sub_20E80A4F0();
    sub_20E7C49A4(a1 + 1608, 0, v55, 1);
    v54 = *(_QWORD *)a1;
  }
  if (!*(_BYTE *)(a1 + 1648))
  {
    v6 = v54;
    v44 = a1 + 1608;
    if (!*(_BYTE *)(a1 + 1684))
      goto LABEL_46;
    goto LABEL_43;
  }
  if (v6 + v53 < v54 + (unint64_t)*(unsigned int *)(a1 + 16) || *(_DWORD *)(a1 + 132) > *(_DWORD *)(a1 + 20))
    sub_20E80A4C4();
  sub_20E7C49A4(a1 + 1608, 1u, v6 + v53, 1);
  v6 = *(_QWORD *)a1;
  v44 = a1 + 1608;
  if (*(_BYTE *)(a1 + 1684))
  {
LABEL_43:
    v45 = *(unsigned int *)(a1 + 136);
    v46 = v6 + v45;
    if (v6 + v45 < (unint64_t)*(unsigned int *)(a1 + 16)
      || (v47 = *(_DWORD *)(a1 + 140), v47 > *(_DWORD *)(a1 + 20)))
    {
      sub_20E80A498();
    }
    v48 = v47 - v45;
    v49 = *(_DWORD *)(a1 + 1716);
    sub_20E7C49A4(v44, 2u, v46, 1);
    sub_20E7C49E4(v44, 0, v46, 1, v48, 0x40u, v49);
  }
LABEL_46:
  if (*(_BYTE *)(a1 + 2072))
  {
    v50 = atomic_load((unsigned __int8 *)&qword_254A49330);
    if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A49330))
    {
      v117 = (_QWORD *)operator new();
      *v117 = 0;
      v117[1] = 0;
      v117[2] = 0;
      qword_254A49328 = (uint64_t)v117;
      __cxa_guard_release(&qword_254A49330);
    }
    v51 = *(_QWORD *)qword_254A49328;
    v52 = *(_QWORD *)(qword_254A49328 + 8);
    if (*(_QWORD *)qword_254A49328 != v52)
    {
      while (*(_QWORD *)v51 != *(_QWORD *)(a1 + 2080))
      {
        v51 += 16;
        if (v51 == v52)
          goto LABEL_73;
      }
    }
  }
  else
  {
    v56 = atomic_load((unsigned __int8 *)&qword_254A49340);
    if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_254A49340))
    {
      v119 = (_QWORD *)operator new();
      *v119 = 0;
      v119[1] = 0;
      v119[2] = 0;
      qword_254A49338 = (uint64_t)v119;
      __cxa_guard_release(&qword_254A49340);
    }
    v51 = *(_QWORD *)qword_254A49338;
    v52 = *(_QWORD *)(qword_254A49338 + 8);
    if (*(_QWORD *)qword_254A49338 != v52)
    {
      while (*(_QWORD *)v51 != *(_QWORD *)(a1 + 2080))
      {
        v51 += 16;
        if (v51 == v52)
          goto LABEL_73;
      }
    }
  }
  if (v51 == v52)
  {
LABEL_73:
    v57 = 0;
    if (!*(_BYTE *)(a1 + 2073))
      goto LABEL_68;
LABEL_74:
    v61 = atomic_load((unsigned __int8 *)&qword_254A49330);
    if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A49330))
    {
      v118 = (_QWORD *)operator new();
      *v118 = 0;
      v118[1] = 0;
      v118[2] = 0;
      qword_254A49328 = (uint64_t)v118;
      __cxa_guard_release(&qword_254A49330);
    }
    v59 = *(_QWORD *)qword_254A49328;
    v60 = *(_QWORD *)(qword_254A49328 + 8);
    if (*(_QWORD *)qword_254A49328 != v60)
    {
      while (*(_QWORD *)v59 != *(_QWORD *)(a1 + 2088))
      {
        v59 += 16;
        if (v59 == v60)
          goto LABEL_82;
      }
    }
    goto LABEL_79;
  }
  v57 = **(__CVBuffer ***)(v51 + 8);
  if (*(_BYTE *)(a1 + 2073))
    goto LABEL_74;
LABEL_68:
  v58 = atomic_load((unsigned __int8 *)&qword_254A49340);
  if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A49340))
  {
    v120 = (_QWORD *)operator new();
    *v120 = 0;
    v120[1] = 0;
    v120[2] = 0;
    qword_254A49338 = (uint64_t)v120;
    __cxa_guard_release(&qword_254A49340);
  }
  v59 = *(_QWORD *)qword_254A49338;
  v60 = *(_QWORD *)(qword_254A49338 + 8);
  if (*(_QWORD *)qword_254A49338 != v60)
  {
    while (*(_QWORD *)v59 != *(_QWORD *)(a1 + 2088))
    {
      v59 += 16;
      if (v59 == v60)
        goto LABEL_82;
    }
  }
LABEL_79:
  if (v59 == v60)
  {
LABEL_82:
    v62 = 0;
    if (!v57)
      goto LABEL_84;
    goto LABEL_83;
  }
  v62 = **(__CVBuffer ***)(v59 + 8);
  if (v57)
  {
LABEL_83:
    CVPixelBufferGetDataSize(v57);
    Width = CVPixelBufferGetWidth(v57);
    Height = CVPixelBufferGetHeight(v57);
    *(_QWORD *)(a1 + 1784) = v57;
    *(_DWORD *)(a1 + 1752) = 0;
    *(_DWORD *)(a1 + 1740) = Width;
    *(_DWORD *)(a1 + 1744) = Height;
    *(_DWORD *)(a1 + 1748) = Width;
    *(_DWORD *)(a1 + 1736) = Height * Width;
    sub_20E7C49A4(v44, 3u, *(_QWORD *)a1, 0);
  }
LABEL_84:
  if (v62)
  {
    CVPixelBufferGetDataSize(v62);
    v65 = CVPixelBufferGetWidth(v62);
    v66 = CVPixelBufferGetHeight(v62);
    *(_DWORD *)(a1 + 1860) = 0;
    *(_DWORD *)(a1 + 1848) = v65;
    *(_DWORD *)(a1 + 1852) = v66;
    *(_DWORD *)(a1 + 1844) = v66 * v65;
    sub_20E7C49E4(v44, 1u, *(_QWORD *)a1, 0, *(_DWORD *)(a1 + 2104), v65, 0);
  }
  *(_DWORD *)(a1 + 1508) = a2 & 0xFFFFF;
  *(_DWORD *)(a1 + 1384) = a3 & 0xFFFFF;
  sub_20E7A71C4(a1);
  __p = 0;
  v144 = 0;
  v145 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  if (*(_BYTE *)(a1 + 2113))
  {
    if (v57)
    {
      v67 = 0;
      v68 = 0;
      goto LABEL_92;
    }
  }
  else
  {
    v69 = *(_QWORD **)(a1 + 2000);
    v70 = (char *)operator new(8uLL);
    *(_QWORD *)v70 = *v69;
    v144 = (uint64_t)(v70 + 8);
    v145 = v70 + 8;
    __p = v70;
    v71 = *(uint64_t **)(a1 + 2008);
    v67 = (char *)operator new(0x10uLL);
    v68 = v67 + 16;
    v72 = *v71;
    *(_QWORD *)v67 = *(_QWORD *)v70;
    *((_QWORD *)v67 + 1) = v72;
    v73 = __p;
    __p = v67;
    v145 = v67 + 16;
    if (v73)
      operator delete(v73);
    v144 = (uint64_t)(v67 + 16);
    if (v57)
    {
LABEL_92:
      v74 = v68 - v67;
      v75 = (v68 - v67) >> 3;
      v76 = v75 + 1;
      if ((unint64_t)(v75 + 1) >> 61)
        goto LABEL_219;
      if (v74 >> 2 > v76)
        v76 = v74 >> 2;
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
        v77 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v77 = v76;
      if (v77)
      {
        if (v77 >> 61)
          goto LABEL_212;
        v78 = (char *)operator new(8 * v77);
        v79 = (__CVBuffer **)&v78[8 * v75];
        v80 = &v78[8 * v77];
        *v79 = v57;
        v81 = (uint64_t)(v79 + 1);
        v82 = v68 - v67;
        if (v68 != v67)
        {
LABEL_101:
          v83 = v82 - 8;
          if (v83 >= 0x18)
          {
            v106 = (v83 >> 3) + 1;
            v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
            v84 = &v68[-v107];
            v79 = (__CVBuffer **)((char *)v79 - v107);
            v108 = &v78[8 * v75 - 16];
            v109 = v68 - 16;
            v110 = v106 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v111 = *(_OWORD *)v109;
              *((_OWORD *)v108 - 1) = *((_OWORD *)v109 - 1);
              *(_OWORD *)v108 = v111;
              v108 -= 32;
              v109 -= 32;
              v110 -= 4;
            }
            while (v110);
            if (v106 == (v106 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_132:
              v67 = (char *)__p;
              __p = v79;
              v144 = v81;
              v145 = v80;
              if (!v67)
                goto LABEL_106;
              goto LABEL_105;
            }
          }
          else
          {
            v84 = v68;
          }
          do
          {
            v112 = (__CVBuffer *)*((_QWORD *)v84 - 1);
            v84 -= 8;
            *--v79 = v112;
          }
          while (v84 != v67);
          goto LABEL_132;
        }
      }
      else
      {
        v78 = 0;
        v79 = (__CVBuffer **)(8 * v75);
        v80 = 0;
        *(_QWORD *)(8 * v75) = v57;
        v81 = 8 * v75 + 8;
        v82 = v68 - v67;
        if (v68 != v67)
          goto LABEL_101;
      }
      __p = v79;
      v144 = v81;
      v145 = v80;
      if (!v67)
      {
LABEL_106:
        v144 = v81;
        goto LABEL_107;
      }
LABEL_105:
      operator delete(v67);
      goto LABEL_106;
    }
  }
LABEL_107:
  if (v62 && v57 != v62)
  {
    v85 = v141;
    if ((unint64_t)v141 < v142)
    {
      *v141 = v62;
      v86 = (uint64_t)(v85 + 8);
LABEL_139:
      v141 = (_QWORD *)v86;
      goto LABEL_140;
    }
    v87 = v140;
    v88 = (char *)v141 - (_BYTE *)v140;
    v89 = ((char *)v141 - (_BYTE *)v140) >> 3;
    v90 = v89 + 1;
    if (!((unint64_t)(v89 + 1) >> 61))
    {
      v91 = v142 - (_QWORD)v140;
      if ((uint64_t)(v142 - (_QWORD)v140) >> 2 > v90)
        v90 = v91 >> 2;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
        v92 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      if (!v92)
      {
        v93 = 0;
        v94 = (__CVBuffer **)(8 * v89);
        v95 = 0;
        *(_QWORD *)(8 * v89) = v62;
        v86 = 8 * v89 + 8;
        v96 = v85 - v87;
        if (v85 != v87)
          goto LABEL_120;
        goto LABEL_137;
      }
      if (!(v92 >> 61))
      {
        v93 = operator new(8 * v92);
        v94 = (__CVBuffer **)&v93[8 * v89];
        v95 = &v93[8 * v92];
        *v94 = v62;
        v86 = (uint64_t)(v94 + 1);
        v96 = v85 - v87;
        if (v85 != v87)
        {
LABEL_120:
          v97 = v96 - 8;
          if (v97 < 0x58)
            goto LABEL_228;
          if ((unint64_t)(v85 - v93 - v88) < 0x20)
            goto LABEL_228;
          v98 = (v97 >> 3) + 1;
          v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
          v100 = &v85[-v99];
          v94 = (__CVBuffer **)((char *)v94 - v99);
          v101 = &v93[8 * v89 - 16];
          v102 = (__int128 *)(v85 - 16);
          v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v104 = *v102;
            *(v101 - 1) = *(v102 - 1);
            *v101 = v104;
            v101 -= 2;
            v102 -= 2;
            v103 -= 4;
          }
          while (v103);
          v85 = v100;
          if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_228:
            do
            {
              v105 = (__CVBuffer *)*((_QWORD *)v85 - 1);
              v85 -= 8;
              *--v94 = v105;
            }
            while (v85 != v87);
          }
          v85 = v140;
          v140 = v94;
          v142 = (unint64_t)v95;
          if (!v85)
            goto LABEL_139;
          goto LABEL_138;
        }
LABEL_137:
        v140 = v94;
        v142 = (unint64_t)v95;
        if (!v85)
          goto LABEL_139;
LABEL_138:
        operator delete(v85);
        goto LABEL_139;
      }
LABEL_212:
      sub_20E78D888();
    }
LABEL_219:
    sub_20E78D874();
  }
LABEL_140:
  v113 = sub_20E7A28D4(*(_QWORD *)(a1 + 208), (uint64_t **)&__p, (uint64_t **)&v140, *(uint64_t **)(a1 + 1984), *(uint64_t **)(a1 + 1992), *(_BYTE *)(a1 + 2112));
  if ((v113 - 1) < 2)
  {
    *(_BYTE *)(a1 + 2112) = 0;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 1;
      _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Offload call failed with transient error -- number of retries left: %d.", buf, 8u);
    }
    if (v113 == 1)
    {
      if (!sub_20E7A2740(*(_QWORD *)(a1 + 208), a1 + 144))
      {
        v121 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v121)
          sub_20E80A464(v121, v122, v123, v124, v125, v126, v127, v128);
        *(_QWORD *)buf = operator new(0x30uLL);
        *(_OWORD *)&buf[8] = xmmword_20E80E4A0;
        strcpy(*(char **)buf, "incomplete offload call -- unable to reconnect");
        sub_20E7A5D14(a1, (std::string::size_type)buf);
      }
      if (*(char *)(a1 + 2151) < 0)
      {
        sub_20E7A8C78(buf, *(void **)(a1 + 2128), *(_QWORD *)(a1 + 2136));
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)(a1 + 2128);
        *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 2144);
      }
      if (!sub_20E7A2594(*(_QWORD *)(a1 + 208), (uint64_t *)buf))
      {
        v129 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v129)
          sub_20E80A430(v129, v130, v131, v132, v133, v134, v135, v136);
        v138 = (char *)operator new(0x38uLL);
        v139 = xmmword_20E80E4B0;
        strcpy(v138, "incomplete offload call -- unable to load program");
        sub_20E7A5D14(a1, (std::string::size_type)&v138);
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    v113 = sub_20E7A28D4(*(_QWORD *)(a1 + 208), (uint64_t **)&__p, (uint64_t **)&v140, *(uint64_t **)(a1 + 1984), *(uint64_t **)(a1 + 1992), *(_BYTE *)(a1 + 2112));
  }
  if (v113)
  {
    *(_BYTE *)(a1 + 2112) = 0;
    *(_QWORD *)buf = operator new(0x19uLL);
    *(_OWORD *)&buf[8] = xmmword_20E80E4C0;
    strcpy(*(char **)buf, "incomplete offload call");
    sub_20E7A5D14(a1, (std::string::size_type)buf);
  }
  *(_BYTE *)(a1 + 2112) = 1;
  *(_BYTE *)(a1 + 2216) = 1;
  LODWORD(v138) = 0;
  (*(void (**)(_QWORD, _QWORD, uint64_t, _BYTE *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10052, buf, &v138);
  if (!*(_BYTE *)(a1 + 2216))
  {
    *(_DWORD *)&buf[4] = -1;
    goto LABEL_166;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, _BYTE *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10056, &buf[4], &v138);
  if (!*(_BYTE *)(a1 + 2216))
  {
LABEL_166:
    *(_DWORD *)&buf[8] = -1;
    goto LABEL_167;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, _BYTE *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10000, &buf[8], &v138);
  if (!*(_BYTE *)(a1 + 2216))
  {
LABEL_167:
    *(_DWORD *)&buf[12] = -1;
    goto LABEL_168;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, _BYTE *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10060, &buf[12], &v138);
  if (!*(_BYTE *)(a1 + 2216))
  {
LABEL_168:
    *(_DWORD *)&buf[16] = -1;
    goto LABEL_169;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, _BYTE *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10004, &buf[16], &v138);
  if (!*(_BYTE *)(a1 + 2216))
  {
LABEL_169:
    *(_DWORD *)&buf[20] = -1;
    goto LABEL_170;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, _BYTE *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10064, &buf[20], &v138);
  if (!*(_BYTE *)(a1 + 2216))
  {
LABEL_170:
    v147 = -1;
    goto LABEL_171;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, int *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10068, &v147, &v138);
  if (!*(_BYTE *)(a1 + 2216))
  {
LABEL_171:
    v148 = -1;
    goto LABEL_172;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, int *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10072, &v148, &v138);
  if (!*(_BYTE *)(a1 + 2216))
  {
LABEL_172:
    v149 = -1;
    goto LABEL_173;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, int *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10008, &v149, &v138);
  if (!*(_BYTE *)(a1 + 2216))
  {
LABEL_173:
    v150 = -1;
    goto LABEL_174;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, int *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10076, &v150, &v138);
  if (!*(_BYTE *)(a1 + 2216))
  {
LABEL_174:
    v151 = -1;
    goto LABEL_175;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, int *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10080, &v151, &v138);
  if (*(_BYTE *)(a1 + 2216))
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t, int *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10084, v152, &v138);
    goto LABEL_176;
  }
LABEL_175:
  v152[0] = -1;
LABEL_176:
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  if ((*(_DWORD *)(a1 + 24) - 7) > 2)
    goto LABEL_183;
  v137 = 0;
  if (!*(_BYTE *)(a1 + 2216))
  {
    LODWORD(v137) = -1;
    goto LABEL_181;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10028, &v137, &v138);
  if (!*(_BYTE *)(a1 + 2216))
  {
LABEL_181:
    HIDWORD(v137) = -1;
    goto LABEL_182;
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t, char *, char **))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 10020, (char *)&v137 + 4, &v138);
LABEL_182:
  kdebug_trace();
LABEL_183:
  if (*(_BYTE *)(a1 + 2073) && v62 && *(_QWORD *)(a1 + 2088))
  {
    kdebug_trace();
    BaseAddress = CVPixelBufferGetBaseAddress(v62);
    memcpy(*(void **)(a1 + 2088), BaseAddress, *(_QWORD *)(a1 + 2104));
    kdebug_trace();
  }
  HIDWORD(v137) = 0;
  LODWORD(v138) = 0;
  if (*(_BYTE *)(a1 + 2216))
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t, char **, char *))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2048), 2000, &v138, (char *)&v137 + 4);
    v115 = (int)v138;
  }
  else
  {
    v115 = -1;
    LODWORD(v138) = -1;
  }
  v116 = *(_DWORD *)(a1 + 1384);
  if ((*(_DWORD *)(a1 + 24) - 7) < 3)
    v116 += 4;
  if (v115 != v116)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_20E80A3B8(v115);
    *(_QWORD *)buf = operator new(0x50uLL);
    *(_OWORD *)&buf[8] = xmmword_20E80E4D0;
    strcpy(*(char **)buf, "an unexpected halt address -- possibly an assertion in the accelerator kernel.");
    sub_20E7A5D14(a1, (std::string::size_type)buf);
  }
  kdebug_trace();
  if (v140)
  {
    v141 = v140;
    operator delete(v140);
  }
  if (__p)
  {
    v144 = (uint64_t)__p;
    operator delete(__p);
  }
  return 0;
}

void sub_20E7A7064(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49340);
  _Unwind_Resume(a1);
}

void sub_20E7A707C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49340);
  _Unwind_Resume(a1);
}

void sub_20E7A7094(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49330);
  _Unwind_Resume(a1);
}

void sub_20E7A70AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A49330);
  _Unwind_Resume(a1);
}

void sub_20E7A70C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v28;
  void *v29;

  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    v28 = a16;
    if (a16)
    {
LABEL_9:
      operator delete(v28);
      v29 = a19;
      if (a19)
      {
LABEL_10:
        operator delete(v29);
        _Unwind_Resume(a1);
      }
LABEL_11:
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v28 = a16;
    if (a16)
      goto LABEL_9;
  }
  v29 = a19;
  if (a19)
    goto LABEL_10;
  goto LABEL_11;
}

uint64_t sub_20E7A71C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  char v11;
  _BOOL4 v12;
  char v13;
  _BOOL4 v14;
  char v15;
  _BOOL4 v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  int v22;
  int v23;
  int v24;
  char v25;
  char v26;
  int v27;
  int v28;
  int v29;
  int32x2_t *v30;
  char v31;
  int32x2_t v32;
  int v33;
  char v34;
  char v35;
  int v36;
  int v37;
  int v38;
  char v39;
  char v40;
  int32x2_t v41;
  int v42;
  char v43;
  int v44;
  int v45;
  int v46;
  char v47;
  int v48;
  int v49;
  int v50;
  char v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;

  v2 = sub_20E7A36EC(*(_QWORD *)(a1 + 2080), *(unsigned __int8 *)(a1 + 2072));
  v3 = sub_20E7A36EC(*(_QWORD *)(a1 + 2088), *(unsigned __int8 *)(a1 + 2073));
  if (v2 | v3)
  {
    v4 = 2;
    if (v2 != v3)
    {
      v5 = 2 * (v2 != 0);
      if (v2)
        v6 = 3;
      else
        v6 = 2;
      if (v3)
        v4 = v6;
      else
        v4 = 0;
      if (!*(_BYTE *)(a1 + 1648))
        goto LABEL_23;
LABEL_12:
      v7 = *(_BYTE *)(a1 + 1649) != 0;
      v8 = *(_BYTE *)(a1 + 1649) == 0;
      if (*(_BYTE *)(a1 + 1684))
      {
        if (!*(_BYTE *)(a1 + 1649))
        {
          v7 = 0;
          v8 = *(_BYTE *)(a1 + 1685) == 0;
          if (*(_BYTE *)(a1 + 1720))
            goto LABEL_16;
LABEL_27:
          v9 = v8;
LABEL_28:
          v10 = a1 + 1792;
          if (*(_BYTE *)(a1 + 1792))
            goto LABEL_29;
LABEL_61:
          v11 = 1;
          v12 = v9;
          if (!*(_BYTE *)(a1 + 1828))
            goto LABEL_62;
          goto LABEL_36;
        }
        v8 = 0;
        v7 = *(_BYTE *)(a1 + 1685) != 0;
      }
      if (*(_BYTE *)(a1 + 1720))
        goto LABEL_16;
      goto LABEL_27;
    }
    v5 = 2;
    if (*(_BYTE *)(a1 + 1648))
      goto LABEL_12;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    if (*(_BYTE *)(a1 + 1648))
      goto LABEL_12;
  }
LABEL_23:
  if (!*(_BYTE *)(a1 + 1684))
  {
    if (!*(_BYTE *)(a1 + 1720))
    {
      v10 = a1 + 1792;
      if (!*(_BYTE *)(a1 + 1792))
      {
        if (!*(_BYTE *)(a1 + 1828))
        {
          if (!*(_BYTE *)(a1 + 1864))
          {
            if (*(_BYTE *)(a1 + 1900))
            {
              v7 = *(_BYTE *)(a1 + 1901) != 0;
              v13 = 1;
              v11 = 1;
              v15 = 1;
              v17 = 0;
              if (*(_BYTE *)(a1 + 1901))
                goto LABEL_82;
            }
            else
            {
              v7 = 1;
              v15 = 1;
              v11 = 1;
              v13 = 1;
              v17 = 1;
            }
LABEL_65:
            if (v7)
              v20 = 1;
            else
              v20 = 3;
            *(_BYTE *)(a1 + 216) = v20;
            v18 = a1 + 216;
            v19 = *(_BYTE *)(a1 + 1612);
            if (!v19)
              goto LABEL_69;
LABEL_86:
            if (*(_BYTE *)(a1 + 1613))
              v26 = 1;
            else
              v26 = 2;
            v27 = *(_DWORD *)(a1 + 1624);
            v28 = *(_DWORD *)(a1 + 1620);
            v29 = *(_DWORD *)(a1 + 1628);
            *(_BYTE *)(a1 + 218) = v26;
            *(_DWORD *)(a1 + 1512) = v27;
            *(_DWORD *)(a1 + 1516) = v28;
            *(_DWORD *)(a1 + 1520) = v29;
            if ((v11 & 1) == 0)
              goto LABEL_70;
LABEL_90:
            v21 = 0;
            v22 = 0;
            v23 = 0;
            v24 = 0;
            goto LABEL_91;
          }
          v7 = *(_BYTE *)(a1 + 1865) != 0;
          v11 = 1;
          v13 = 1;
          goto LABEL_48;
        }
        v7 = *(_BYTE *)(a1 + 1829) != 0;
        v11 = 1;
        goto LABEL_41;
      }
      v7 = *(_BYTE *)(a1 + 1793) != 0;
      goto LABEL_34;
    }
    v7 = *(_BYTE *)(a1 + 1721) != 0;
    goto LABEL_60;
  }
  v7 = *(_BYTE *)(a1 + 1685) != 0;
  v8 = *(_BYTE *)(a1 + 1685) == 0;
  if (!*(_BYTE *)(a1 + 1720))
    goto LABEL_27;
LABEL_16:
  if (v7)
  {
    v7 = *(_BYTE *)(a1 + 1721) != 0;
    if (!v8)
    {
      v9 = 0;
      v10 = a1 + 1792;
      if (*(_BYTE *)(a1 + 1792))
        goto LABEL_29;
      goto LABEL_61;
    }
  }
  else
  {
    v9 = 0;
    if (!v8)
      goto LABEL_28;
  }
LABEL_60:
  v9 = *(_BYTE *)(a1 + 1721) == 0;
  v10 = a1 + 1792;
  if (!*(_BYTE *)(a1 + 1792))
    goto LABEL_61;
LABEL_29:
  if (!v7)
  {
    v11 = 0;
    v12 = 0;
    if (!v9)
      goto LABEL_35;
    goto LABEL_34;
  }
  v7 = *(_BYTE *)(a1 + 1793) != 0;
  if (v9)
  {
LABEL_34:
    v11 = 0;
    v12 = *(_BYTE *)(a1 + 1793) == 0;
LABEL_35:
    if (!*(_BYTE *)(a1 + 1828))
      goto LABEL_62;
    goto LABEL_36;
  }
  v11 = 0;
  v12 = 0;
  if (!*(_BYTE *)(a1 + 1828))
  {
LABEL_62:
    v13 = 1;
    v14 = v12;
    if (!*(_BYTE *)(a1 + 1864))
      goto LABEL_63;
    goto LABEL_43;
  }
LABEL_36:
  if (!v7)
  {
    v13 = 0;
    v14 = 0;
    if (!v12)
      goto LABEL_42;
    goto LABEL_41;
  }
  v7 = *(_BYTE *)(a1 + 1829) != 0;
  if (v12)
  {
LABEL_41:
    v13 = 0;
    v14 = *(_BYTE *)(a1 + 1829) == 0;
LABEL_42:
    if (!*(_BYTE *)(a1 + 1864))
      goto LABEL_63;
    goto LABEL_43;
  }
  v13 = 0;
  v14 = 0;
  if (!*(_BYTE *)(a1 + 1864))
  {
LABEL_63:
    v15 = 1;
    v16 = v14;
    if (!*(_BYTE *)(a1 + 1900))
      goto LABEL_64;
    goto LABEL_50;
  }
LABEL_43:
  if (!v7)
  {
    v15 = 0;
    v16 = 0;
    if (!v14)
      goto LABEL_49;
    goto LABEL_48;
  }
  v7 = *(_BYTE *)(a1 + 1865) != 0;
  if (v14)
  {
LABEL_48:
    v15 = 0;
    v16 = *(_BYTE *)(a1 + 1865) == 0;
LABEL_49:
    if (!*(_BYTE *)(a1 + 1900))
      goto LABEL_64;
    goto LABEL_50;
  }
  v15 = 0;
  v16 = 0;
  if (!*(_BYTE *)(a1 + 1900))
  {
LABEL_64:
    v17 = 1;
    if (v16)
      goto LABEL_65;
    goto LABEL_82;
  }
LABEL_50:
  if (v7)
  {
    v7 = *(_BYTE *)(a1 + 1901) != 0;
    if (!v16)
    {
      v17 = 0;
      goto LABEL_82;
    }
  }
  else if (!v16)
  {
    v17 = 0;
    *(_BYTE *)(a1 + 216) = 2;
    v18 = a1 + 216;
    v19 = *(_BYTE *)(a1 + 1612);
    if (!v19)
      goto LABEL_69;
    goto LABEL_86;
  }
  v17 = 0;
  if (!*(_BYTE *)(a1 + 1901))
    goto LABEL_65;
LABEL_82:
  if (v7)
    v25 = 1;
  else
    v25 = 2;
  *(_BYTE *)(a1 + 216) = v25;
  v18 = a1 + 216;
  v19 = *(_BYTE *)(a1 + 1612);
  if (v19)
    goto LABEL_86;
LABEL_69:
  *(_BYTE *)(a1 + 218) = v19;
  *(_DWORD *)(a1 + 1512) = 0;
  *(_DWORD *)(a1 + 1516) = 0;
  *(_DWORD *)(a1 + 1520) = 0;
  if ((v11 & 1) != 0)
    goto LABEL_90;
LABEL_70:
  if (*(_BYTE *)(a1 + 1793))
    v21 = 1;
  else
    v21 = 2;
  v22 = *(_DWORD *)(a1 + 1804);
  v23 = *(_DWORD *)(a1 + 1800);
  v24 = *(_DWORD *)(a1 + 1808);
LABEL_91:
  v30 = (int32x2_t *)(a1 + 1524);
  *(_BYTE *)(a1 + 222) = v21;
  *(_DWORD *)(a1 + 1560) = v22;
  *(_DWORD *)(a1 + 1564) = v23;
  *(_DWORD *)(a1 + 1568) = v24;
  if (*(_BYTE *)(a1 + 1648))
  {
    if (*(_BYTE *)(a1 + 1649))
      v31 = 1;
    else
      v31 = 2;
    v32 = *(int32x2_t *)(a1 + 1656);
    v33 = *(_DWORD *)(a1 + 1664);
    *(_BYTE *)(a1 + 219) = v31;
    *v30 = vrev64_s32(v32);
    *(_DWORD *)(a1 + 1532) = v33;
    if ((v13 & 1) != 0)
    {
LABEL_96:
      *(_BYTE *)(a1 + 223) = 0;
      *(_DWORD *)(a1 + 1572) = 0;
      *(_DWORD *)(a1 + 1576) = 0;
      *(_DWORD *)(a1 + 1580) = 0;
      v34 = *(_BYTE *)(a1 + 1684);
      if (v34)
        goto LABEL_97;
LABEL_112:
      *(_BYTE *)(a1 + 220) = v34;
      *(_DWORD *)(a1 + 1536) = 0;
      *(_DWORD *)(a1 + 1540) = 0;
      *(_DWORD *)(a1 + 1544) = 0;
      if ((v15 & 1) != 0)
        goto LABEL_101;
      goto LABEL_113;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 219) = 0;
    *v30 = vrev64_s32(0);
    *(_DWORD *)(a1 + 1532) = 0;
    if ((v13 & 1) != 0)
      goto LABEL_96;
  }
  if (*(_BYTE *)(a1 + 1829))
    v47 = 1;
  else
    v47 = 2;
  v48 = *(_DWORD *)(a1 + 1840);
  v49 = *(_DWORD *)(a1 + 1836);
  v50 = *(_DWORD *)(a1 + 1844);
  *(_BYTE *)(a1 + 223) = v47;
  *(_DWORD *)(a1 + 1572) = v48;
  *(_DWORD *)(a1 + 1576) = v49;
  *(_DWORD *)(a1 + 1580) = v50;
  v34 = *(_BYTE *)(a1 + 1684);
  if (!v34)
    goto LABEL_112;
LABEL_97:
  if (*(_BYTE *)(a1 + 1685))
    v35 = 1;
  else
    v35 = 2;
  v36 = *(_DWORD *)(a1 + 1696);
  v37 = *(_DWORD *)(a1 + 1692);
  v38 = *(_DWORD *)(a1 + 1700);
  *(_BYTE *)(a1 + 220) = v35;
  *(_DWORD *)(a1 + 1536) = v36;
  *(_DWORD *)(a1 + 1540) = v37;
  *(_DWORD *)(a1 + 1544) = v38;
  if ((v15 & 1) != 0)
  {
LABEL_101:
    *(_BYTE *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 1584) = 0;
    *(_DWORD *)(a1 + 1588) = 0;
    *(_DWORD *)(a1 + 1592) = 0;
    v39 = *(_BYTE *)(a1 + 1720);
    if (v39)
      goto LABEL_102;
    goto LABEL_117;
  }
LABEL_113:
  if (*(_BYTE *)(a1 + 1865))
    v51 = 1;
  else
    v51 = 2;
  v52 = *(_DWORD *)(a1 + 1876);
  v53 = *(_DWORD *)(a1 + 1872);
  v54 = *(_DWORD *)(a1 + 1880);
  *(_BYTE *)(a1 + 224) = v51;
  *(_DWORD *)(a1 + 1584) = v52;
  *(_DWORD *)(a1 + 1588) = v53;
  *(_DWORD *)(a1 + 1592) = v54;
  v39 = *(_BYTE *)(a1 + 1720);
  if (v39)
  {
LABEL_102:
    if (*(_BYTE *)(a1 + 1721))
      v40 = 1;
    else
      v40 = 2;
    v41 = *(int32x2_t *)(a1 + 1728);
    v42 = *(_DWORD *)(a1 + 1736);
    *(_BYTE *)(a1 + 221) = v40;
    *(int32x2_t *)(a1 + 1548) = vrev64_s32(v41);
    *(_DWORD *)(a1 + 1556) = v42;
    if ((v17 & 1) != 0)
      goto LABEL_106;
    goto LABEL_118;
  }
LABEL_117:
  *(_BYTE *)(a1 + 221) = v39;
  *(int32x2_t *)(a1 + 1548) = vrev64_s32(0);
  *(_DWORD *)(a1 + 1556) = 0;
  if ((v17 & 1) != 0)
  {
LABEL_106:
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_122;
  }
LABEL_118:
  if (*(_BYTE *)(a1 + 1901))
    v43 = 1;
  else
    v43 = 2;
  v44 = *(_DWORD *)(a1 + 1912);
  v45 = *(_DWORD *)(a1 + 1908);
  v46 = *(_DWORD *)(a1 + 1916);
LABEL_122:
  *(_BYTE *)(a1 + 225) = v43;
  *(_DWORD *)(a1 + 1596) = v44;
  *(_DWORD *)(a1 + 1600) = v45;
  *(_DWORD *)(a1 + 1604) = v46;
  *(_DWORD *)(a1 + 1388) = 0x80000000;
  *(_QWORD *)(a1 + 1392) = 0;
  v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 160))(*(_QWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 1404) = v55;
  *(_DWORD *)(a1 + 1408) = v55;
  *(_DWORD *)(a1 + 1496) = 0;
  *(_WORD *)(a1 + 1500) = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 176))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 2024), v18);
  v58 = *(_QWORD *)(a1 + 2016) + *(unsigned int *)(*(_QWORD *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v58 + 144) <= *(unsigned __int8 *)(a1 + 1614))
    goto LABEL_157;
  if (*(_BYTE *)(a1 + 1612))
  {
    v59 = v58 + 84 * *(unsigned __int8 *)(a1 + 1614);
    *(_DWORD *)(v59 + 152) &= 0x80000000;
    *(_WORD *)(v59 + 166) = *(_WORD *)(a1 + 1616);
    *(_WORD *)(v59 + 164) = *(_DWORD *)(a1 + 1632);
    *(_WORD *)(v59 + 162) = *(_DWORD *)(a1 + 1636);
    *(_WORD *)(v59 + 160) = *(_DWORD *)(a1 + 1640);
    *(_DWORD *)(v59 + 156) = *(_DWORD *)(a1 + 1644);
  }
  v60 = *(_QWORD *)(a1 + 2016) + *(unsigned int *)(*(_QWORD *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v60 + 144) <= *(unsigned __int8 *)(a1 + 1794))
LABEL_158:
    sub_20E80A5A0(result, v57);
  if (*(_BYTE *)v10)
  {
    v61 = v60 + 84 * *(unsigned __int8 *)(a1 + 1794);
    *(_DWORD *)(v61 + 152) = *(_DWORD *)(v61 + 152) & 0x80000000 | 1;
    *(_WORD *)(v61 + 166) = *(_WORD *)(a1 + 1796);
    *(_WORD *)(v61 + 164) = *(_DWORD *)(a1 + 1812);
    *(_WORD *)(v61 + 162) = *(_DWORD *)(a1 + 1816);
    *(_WORD *)(v61 + 160) = *(_DWORD *)(a1 + 1820);
    *(_DWORD *)(v61 + 156) = *(_DWORD *)(a1 + 1824);
  }
  v62 = *(_QWORD *)(a1 + 2016) + *(unsigned int *)(*(_QWORD *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v62 + 144) <= *(unsigned __int8 *)(a1 + 1650))
    goto LABEL_157;
  if (*(_BYTE *)(a1 + 1648))
  {
    v63 = v62 + 84 * *(unsigned __int8 *)(a1 + 1650);
    *(_DWORD *)(v63 + 152) = *(_DWORD *)(v63 + 152) & 0x80000000 | 1;
    *(_WORD *)(v63 + 166) = *(_WORD *)(a1 + 1652);
    *(_WORD *)(v63 + 164) = *(_DWORD *)(a1 + 1668);
    *(_WORD *)(v63 + 162) = *(_DWORD *)(a1 + 1672);
    *(_WORD *)(v63 + 160) = *(_DWORD *)(a1 + 1676);
    *(_DWORD *)(v63 + 156) = *(_DWORD *)(a1 + 1680);
  }
  if (*(_BYTE *)(v10 + 36) && !v4)
    goto LABEL_159;
  v64 = *(_QWORD *)(a1 + 2016) + *(unsigned int *)(*(_QWORD *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v64 + 144) <= *(unsigned __int8 *)(v10 + 38))
    goto LABEL_158;
  if (*(_BYTE *)(v10 + 36))
  {
    v65 = v64 + 84 * *(unsigned __int8 *)(v10 + 38);
    *(_DWORD *)(v65 + 152) = *(_DWORD *)(v65 + 152) & 0x80000000 | v4 & 0x7FFFFFFF;
    *(_WORD *)(v65 + 166) = *(_WORD *)(v10 + 40);
    v66 = *(_DWORD *)(v10 + 60);
    *(_WORD *)(v65 + 164) = *(_DWORD *)(v10 + 56);
    *(_WORD *)(v65 + 162) = v66;
    v67 = *(_DWORD *)(v10 + 68);
    *(_WORD *)(v65 + 160) = *(_DWORD *)(v10 + 64);
    *(_DWORD *)(v65 + 156) = v67;
  }
  v68 = *(_QWORD *)(a1 + 2016) + *(unsigned int *)(*(_QWORD *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v68 + 144) <= *(unsigned __int8 *)(a1 + 1686))
    goto LABEL_157;
  if (*(_BYTE *)(a1 + 1684))
  {
    v69 = v68 + 84 * *(unsigned __int8 *)(a1 + 1686);
    *(_DWORD *)(v69 + 152) = *(_DWORD *)(v69 + 152) & 0x80000000 | 1;
    *(_WORD *)(v69 + 166) = *(_WORD *)(a1 + 1688);
    *(_WORD *)(v69 + 164) = *(_DWORD *)(a1 + 1704);
    *(_WORD *)(v69 + 162) = *(_DWORD *)(a1 + 1708);
    *(_WORD *)(v69 + 160) = *(_DWORD *)(a1 + 1712);
    *(_DWORD *)(v69 + 156) = *(_DWORD *)(a1 + 1716);
  }
  if (*(_BYTE *)(v10 + 72))
LABEL_159:
    sub_20E80A548();
  v70 = *(_QWORD *)(a1 + 2016) + *(unsigned int *)(*(_QWORD *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v70 + 144) <= *(unsigned __int8 *)(v10 + 74))
    goto LABEL_158;
  if (*(_BYTE *)(v10 + 72))
  {
    v71 = v70 + 84 * *(unsigned __int8 *)(v10 + 74);
    *(_DWORD *)(v71 + 152) &= 0x80000000;
    *(_WORD *)(v71 + 166) = *(_WORD *)(v10 + 76);
    v72 = *(_DWORD *)(v10 + 96);
    *(_WORD *)(v71 + 164) = *(_DWORD *)(v10 + 92);
    *(_WORD *)(v71 + 162) = v72;
    v73 = *(_DWORD *)(v10 + 104);
    *(_WORD *)(v71 + 160) = *(_DWORD *)(v10 + 100);
    *(_DWORD *)(v71 + 156) = v73;
  }
  if (*(_BYTE *)(a1 + 1720) && !v5)
    sub_20E80A574();
  v74 = *(_QWORD *)(a1 + 2016) + *(unsigned int *)(*(_QWORD *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v74 + 144) <= *(unsigned __int8 *)(a1 + 1722))
LABEL_157:
    sub_20E80A5A0(result, v57);
  if (*(_BYTE *)(a1 + 1720))
  {
    v75 = v74 + 84 * *(unsigned __int8 *)(a1 + 1722);
    *(_DWORD *)(v75 + 152) = *(_DWORD *)(v75 + 152) & 0x80000000 | v5;
    *(_WORD *)(v75 + 166) = *(_WORD *)(a1 + 1724);
    *(_WORD *)(v75 + 164) = *(_DWORD *)(a1 + 1740);
    *(_WORD *)(v75 + 162) = *(_DWORD *)(a1 + 1744);
    *(_WORD *)(v75 + 160) = *(_DWORD *)(a1 + 1748);
    *(_DWORD *)(v75 + 156) = *(_DWORD *)(a1 + 1752);
  }
  if (*(_BYTE *)(v10 + 108))
    goto LABEL_159;
  v76 = *(_QWORD *)(a1 + 2016) + *(unsigned int *)(*(_QWORD *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v76 + 144) <= *(unsigned __int8 *)(v10 + 110))
    goto LABEL_158;
  if (*(_BYTE *)(v10 + 108))
  {
    v77 = v76 + 84 * *(unsigned __int8 *)(v10 + 110);
    *(_DWORD *)(v77 + 152) &= 0x80000000;
    *(_WORD *)(v77 + 166) = *(_WORD *)(v10 + 112);
    v78 = *(_DWORD *)(v10 + 132);
    *(_WORD *)(v77 + 164) = *(_DWORD *)(v10 + 128);
    *(_WORD *)(v77 + 162) = v78;
    v79 = *(_DWORD *)(v10 + 140);
    *(_WORD *)(v77 + 160) = *(_DWORD *)(v10 + 136);
    *(_DWORD *)(v77 + 156) = v79;
  }
  v80 = *(_QWORD *)(a1 + 2016) + *(unsigned int *)(*(_QWORD *)(a1 + 2016) + 4);
  if (*(unsigned __int8 *)(v80 + 144) <= *(unsigned __int8 *)(a1 + 1938))
    sub_20E80A5A0(result, v57);
  if (*(_BYTE *)(a1 + 1936))
  {
    v81 = v80 + 84 * *(unsigned __int8 *)(a1 + 1938);
    *(_DWORD *)(v81 + 152) = *(_DWORD *)(v81 + 152) & 0x80000000 | 1;
    *(_WORD *)(v81 + 166) = *(_WORD *)(a1 + 1940);
    *(_WORD *)(v81 + 164) = *(_DWORD *)(a1 + 1956);
    *(_WORD *)(v81 + 162) = *(_DWORD *)(a1 + 1960);
    *(_WORD *)(v81 + 160) = *(_DWORD *)(a1 + 1964);
    *(_DWORD *)(v81 + 156) = *(_DWORD *)(a1 + 1968);
  }
  return result;
}

uint64_t sub_20E7A7BCC(uint64_t a1, const void **a2, const void **a3)
{
  int v5;
  size_t v6;
  int v7;
  size_t v8;
  unint64_t v9;
  const void **v10;
  void **p_dst;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  unint64_t v18;
  const void *v19;
  char *v20;
  const void *v21;
  int v22;
  size_t v23;
  unint64_t v24;
  char *p_p;
  const void *v26;
  char *v27;
  const void *v28;
  uint64_t *v29;
  uint64_t v30;
  const void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  int v37;
  _QWORD v38[2];
  void *__p;
  size_t v40;
  unint64_t v41;
  void **__dst;
  size_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;

  if (!*(_BYTE *)(a1 + 2113))
    return 5;
  v48 = 0;
  v47 = 0;
  v46 = 0;
  v45 = 0;
  v5 = *((char *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = *(char *)(a1 + 2215);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 2215);
  else
    v8 = *(_QWORD *)(a1 + 2200);
  v9 = v8 + v6;
  if (v8 + v6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E7857BC();
  v10 = a3;
  if (v9 <= 0x16)
  {
    v43 = 0;
    v44 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v44) = v8 + v6;
    v12 = (const void **)(a1 + 2192);
    if (!v6)
      goto LABEL_20;
    goto LABEL_16;
  }
  v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17)
    v14 = v9 | 7;
  v15 = *(char *)(a1 + 2215);
  v17 = v14 + 1;
  p_dst = (void **)operator new(v14 + 1);
  v18 = v17 | 0x8000000000000000;
  v10 = a3;
  v7 = v15;
  v43 = v8 + v6;
  v44 = v18;
  __dst = p_dst;
  v12 = (const void **)(a1 + 2192);
  if (v6)
  {
LABEL_16:
    if (v5 >= 0)
      v19 = a2;
    else
      v19 = *a2;
    memmove(p_dst, v19, v6);
  }
LABEL_20:
  v20 = (char *)p_dst + v6;
  if (v8)
  {
    if (v7 >= 0)
      v21 = v12;
    else
      v21 = *v12;
    memmove(v20, v21, v8);
  }
  v20[v8] = 0;
  v22 = *((char *)v10 + 23);
  if (v22 >= 0)
    v23 = *((unsigned __int8 *)v10 + 23);
  else
    v23 = (size_t)v10[1];
  v24 = v23 + v8;
  if (v23 + v8 > 0x7FFFFFFFFFFFFFF7)
    sub_20E7857BC();
  if (v24 <= 0x16)
  {
    v40 = 0;
    v41 = 0;
    __p = 0;
    p_p = (char *)&__p;
    HIBYTE(v41) = v23 + v8;
    if (!v23)
      goto LABEL_35;
    goto LABEL_31;
  }
  v37 = v7;
  v31 = v10;
  v32 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v24 | 7) != 0x17)
    v32 = v24 | 7;
  v33 = v32 + 1;
  p_p = (char *)operator new(v32 + 1);
  v40 = v23 + v8;
  v41 = v33 | 0x8000000000000000;
  __p = p_p;
  v10 = v31;
  v7 = v37;
  if (v23)
  {
LABEL_31:
    if (v22 >= 0)
      v26 = v10;
    else
      v26 = *v10;
    memmove(p_p, v26, v23);
  }
LABEL_35:
  v27 = &p_p[v23];
  if (v8)
  {
    if (v7 >= 0)
      v28 = v12;
    else
      v28 = *v12;
    memmove(v27, v28, v8);
  }
  v27[v8] = 0;
  v38[0] = a1;
  v38[1] = &v48;
  v29 = sub_20E7A95B0((_QWORD *)(a1 + 2152), (uint64_t)&__dst);
  if (v29)
  {
    v30 = v29[5];
    HIDWORD(v46) = v29[6];
    v47 = v30;
  }
  else if (!sub_20E7A7F10(v38, (uint64_t *)a2, (uint64_t)&__dst, &v47, (_DWORD *)&v46 + 1))
  {
    goto LABEL_56;
  }
  v34 = sub_20E7A95B0((_QWORD *)(a1 + 2152), (uint64_t)&__p);
  if (v34)
  {
    v35 = *((_DWORD *)v34 + 10);
    v45 = v34[6];
    LODWORD(v46) = v35;
    goto LABEL_51;
  }
  if (sub_20E7A7F10(v38, (uint64_t *)v10, (uint64_t)&__p, &v46, &v45))
  {
    v35 = v46;
LABEL_51:
    v13 = sub_20E7A5F48(a1, v47, v35);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_52;
  }
LABEL_56:
  v13 = v48;
  if (SHIBYTE(v41) < 0)
LABEL_52:
    operator delete(__p);
LABEL_53:
  if (SHIBYTE(v44) < 0)
    operator delete(__dst);
  return v13;
}

void sub_20E7A7EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a23 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a18);
  _Unwind_Resume(a1);
}

BOOL sub_20E7A7F10(_QWORD *a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v10;
  unsigned __int16 v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 result;
  int v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t *v27;
  int *v28;
  int v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string v46;
  std::string __p;

  v10 = *a1;
  v11 = sub_20E7A26DC(*(_QWORD *)(*a1 + 208), (uint64_t)a2, a4, a5);
  if (v11 > 0xFFu)
  {
LABEL_17:
    if ((_BYTE)v11)
    {
      __p.__r_.__value_.__r.__words[0] = a3;
      v27 = sub_20E7A81C4(v10 + 2152, a3, (uint64_t)&unk_20E80E4F0, (__int128 **)&__p);
      v27[5] = *a4;
      v27[6] = *a5;
      return 1;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_20E80A5FC(a2);
    result = 0;
    v28 = (int *)a1[1];
    v29 = 8;
    goto LABEL_29;
  }
  v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v12)
  {
    sub_20E80A6BC(v12, v13, v14, v15, v16, v17, v18, v19);
    result = sub_20E7A2740(*(_QWORD *)(v10 + 208), v10 + 144);
    if (result)
    {
LABEL_4:
      memset(&__p, 0, sizeof(__p));
      v21 = *(char *)(v10 + 2151);
      if (v21 >= 0)
        v22 = (std::string *)(v10 + 2128);
      else
        v22 = *(std::string **)(v10 + 2128);
      v23 = *(_QWORD *)(v10 + 2136);
      if (v21 >= 0)
        v23 = *(unsigned __int8 *)(v10 + 2151);
      sub_20E7A9350(&__p, v22, (std::string *)((char *)v22 + v23));
      v24 = *(_QWORD *)(v10 + 208);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        sub_20E7A8C78(&v46, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v46 = __p;
      v25 = sub_20E7A2594(v24, (uint64_t *)&v46);
      v26 = v25;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v46.__r_.__value_.__l.__data_);
        if (v26)
          goto LABEL_14;
      }
      else if (v25)
      {
LABEL_14:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v11 = sub_20E7A26DC(*(_QWORD *)(v10 + 208), (uint64_t)a2, a4, a5);
        if (v11 <= 0xFFu)
        {
          v38 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v38)
            sub_20E80A5C8(v38, v39, v40, v41, v42, v43, v44, v45);
          *(_DWORD *)a1[1] = 8;
          sub_20E7A8190();
        }
        goto LABEL_17;
      }
      *(_DWORD *)a1[1] = 6;
      v30 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v30)
      {
        sub_20E80A688(v30, v31, v32, v33, v34, v35, v36, v37);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return 0;
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        return 0;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      return 0;
    }
  }
  else
  {
    result = sub_20E7A2740(*(_QWORD *)(v10 + 208), v10 + 144);
    if (result)
      goto LABEL_4;
  }
  v28 = (int *)a1[1];
  v29 = 7;
LABEL_29:
  *v28 = v29;
  return result;
}

void sub_20E7A8158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E7A8190()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

uint64_t *sub_20E7A81C4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_20E7A8680((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = v26 + 2;
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_20E7A8C78(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        sub_20E7A8ACC(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20E7A8608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E7A8634((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E7A861C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E7A8634((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E7A8634(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_20E7A8680(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v27 + a3 + v26 + v23;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v36 + v25 + v28;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v58 + v49 + v47 + v48;
        v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void sub_20E7A8ACC(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_20E78D888();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

void *sub_20E7A8C78(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E7857BC();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

_OWORD *sub_20E7A8D04(_QWORD *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  _OWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  double *v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  CVPixelBufferRef *v28;
  float64x2x2_t v30;

  v3 = a1[1] - *a1;
  v4 = (v3 >> 4) + 1;
  if (v4 >> 60)
    sub_20E78D874();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v17 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v6 = 0xFFFFFFFFFFFFFFFLL;
  if (!v17)
    v6 = v4;
  if (v6 >> 60)
    sub_20E78D888();
  v8 = 16 * v6;
  v9 = (char *)operator new(16 * v6);
  v10 = &v9[16 * (v3 >> 4)];
  v11 = &v9[v8];
  v12 = *a2;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v10 = v12;
  v13 = v10 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_26;
  }
  v16 = (unint64_t)&v15[-*a1 - 16];
  if (v16 < 0x90)
    goto LABEL_17;
  v17 = &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] >= v15 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF0) - 16] >= v10;
  if (!v17)
    goto LABEL_17;
  v18 = (v16 >> 4) + 1;
  v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFELL);
  v20 = &v10[-v19];
  v21 = &v15[-v19];
  v22 = (double *)(v10 - 32);
  v23 = (const double *)(v15 - 32);
  v24 = v18 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v30 = vld2q_f64(v23);
    v23[3] = 0.0;
    v23[1] = 0.0;
    vst2q_f64(v22, v30);
    v23 -= 4;
    v22 -= 4;
    v24 -= 2;
  }
  while (v24);
  v10 = v20;
  v15 = v21;
  if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_17:
    v20 = v10;
    do
    {
      v25 = *((_QWORD *)v15 - 2);
      v15 -= 16;
      *((_QWORD *)v20 - 2) = v25;
      v20 -= 16;
      v26 = *((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v20 + 1) = v26;
    }
    while (v15 != v14);
  }
  v27 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v20;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v27)
  {
    do
    {
      v28 = (CVPixelBufferRef *)*((_QWORD *)v15 - 1);
      *((_QWORD *)v15 - 1) = 0;
      if (v28)
      {
        CVPixelBufferUnlockBaseAddress(*v28, 0);
        CVPixelBufferRelease(*v28);
        MEMORY[0x212BC47D4](v28, 0x20C4093837F09);
      }
      v15 -= 16;
    }
    while (v15 != v27);
    v15 = v27;
  }
  if (v15)
LABEL_26:
    operator delete(v15);
  return v13;
}

uint64_t *sub_20E7A8EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_20E7A8680((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20E7A8C78(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_20E7A8ACC(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20E7A9324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E7A8634((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E7A9338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E7A8634((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::string *sub_20E7A9350(std::string *this, std::string *__src, std::string *a3)
{
  unint64_t v6;
  size_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **p_dst;
  std::string *v13;
  std::string::value_type *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  char *v20;
  _OWORD *v21;
  std::string::size_type *v22;
  unint64_t v23;
  __int128 v24;
  std::string::value_type v25;
  std::string::size_type v26;
  void **__dst;
  size_t v29;
  int64_t v30;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (char *)a3 - (char *)__src;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == __src)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src)
      goto LABEL_12;
  }
  else
  {
    if (a3 == __src)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
    if (this > __src)
    {
LABEL_12:
      if (v9 - size < v7)
      {
        std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
        this->__r_.__value_.__l.__size_ = size;
        v13 = this;
        if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_14:
          v14 = (char *)v13 + size;
          if (a3 == __src)
            goto LABEL_38;
          goto LABEL_18;
        }
      }
      else
      {
        v13 = this;
        if ((v6 & 0x80) == 0)
          goto LABEL_14;
      }
      v13 = (std::string *)this->__r_.__value_.__r.__words[0];
      v14 = (std::string::value_type *)(this->__r_.__value_.__r.__words[0] + size);
      if (a3 == __src)
        goto LABEL_38;
LABEL_18:
      if (v7 >= 0x20)
      {
        v20 = (char *)v13 + size;
        if ((unint64_t)((char *)v13 + size - (char *)__src) >= 0x20)
        {
          v15 = (std::string *)((char *)__src + (v7 & 0xFFFFFFFFFFFFFFE0));
          v14 += v7 & 0xFFFFFFFFFFFFFFE0;
          v21 = v20 + 16;
          v22 = &__src->__r_.__value_.__r.__words[2];
          v23 = v7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            *v21 = v24;
            v21 += 2;
            v22 += 4;
            v23 -= 32;
          }
          while (v23);
          if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_38;
        }
        else
        {
          v15 = __src;
        }
      }
      else
      {
        v15 = __src;
      }
      do
      {
        v25 = v15->__r_.__value_.__s.__data_[0];
        v15 = (std::string *)((char *)v15 + 1);
        *v14++ = v25;
      }
      while (v15 != a3);
LABEL_38:
      *v14 = 0;
      v26 = v7 + size;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v26;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v26 & 0x7F;
      return this;
    }
  }
  if ((std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= __src)
    goto LABEL_12;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E7857BC();
  if (v7 > 0x16)
  {
    v16 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v16 = v7 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v29 = v7;
    v30 = v17 | 0x8000000000000000;
    __dst = p_dst;
    if (a3 == __src)
      goto LABEL_24;
  }
  else
  {
    HIBYTE(v30) = v7;
    p_dst = (void **)&__dst;
    if (a3 == __src)
      goto LABEL_24;
  }
  memcpy(p_dst, __src, v7);
  p_dst = (void **)((char *)p_dst + v7);
LABEL_24:
  *(_BYTE *)p_dst = 0;
  if (v30 >= 0)
    v18 = (const std::string::value_type *)&__dst;
  else
    v18 = (const std::string::value_type *)__dst;
  if (v30 >= 0)
    v19 = HIBYTE(v30);
  else
    v19 = v29;
  std::string::append(this, v18, v19);
  if (SHIBYTE(v30) < 0)
    operator delete(__dst);
  return this;
}

void sub_20E7A9594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20E7A95B0(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E7A8680((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void sub_20E7A97DC(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 465, a3, a4);
}

BOOL sub_20E7A97E4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 584) != 0;
}

void sub_20E7A97F4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  int v10;
  int v11;
  BOOL v12;
  _BOOL4 v13;
  char v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v10 = *(unsigned __int16 *)(a2 + 50);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 24);
  v11 = *(unsigned __int8 *)(a2 + 68);
  *(_BYTE *)(a1 + 20) = v11;
  v12 = v11 != 1;
  v13 = v11 == 1;
  if (*(_BYTE *)(a2 + 84))
    v14 = 1;
  else
    v14 = v13;
  *(_BYTE *)(a1 + 384) = v14;
  if (*(_BYTE *)(a2 + 89))
    v15 = 1;
  else
    v15 = v13;
  *(_BYTE *)(a1 + 385) = v15;
  if (*(_BYTE *)(a2 + 88))
    v13 = 1;
  *(_BYTE *)(a1 + 386) = v13;
  if (!*(_BYTE *)(a2 + 154))
    v12 = 0;
  *(_BYTE *)(a1 + 388) = v12;
  if (*(_DWORD *)(a2 + 64) < 7u)
  {
    if (!v13)
      goto LABEL_20;
    v16 = 1;
LABEL_19:
    *(_BYTE *)(a1 + 387) = v16;
    goto LABEL_20;
  }
  if (!v15)
  {
    if (!v13)
      goto LABEL_20;
    v16 = 0;
    goto LABEL_19;
  }
  if (v13)
    sub_20E80A6F0();
LABEL_20:
  *(_BYTE *)(a1 + 389) = *(_BYTE *)(a2 + 92);
  *(_BYTE *)(a1 + 390) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 128))(a3);
  *(_BYTE *)(a1 + 391) = *(_BYTE *)(a2 + 156);
  v17 = *(unsigned int *)(*(_QWORD *)(a1 + 472) + 4);
  *(_QWORD *)(a1 + 392) = *a5 + 1;
  v18 = v17 - *a4;
  if (v17 <= *a4)
    v18 += 0x7FFFFFFF;
  if (*a4 != -1 && v18 != 1)
  {
    kdebug_trace();
    ++*(_QWORD *)(a1 + 392);
  }
  *a4 = v17;
  *a5 = *(_QWORD *)(a1 + 392);
  sub_20E7A9C04(a1, a3);
  v20 = *(unsigned __int8 *)(a1 + 20);
  if (v20 == 2)
  {
    if (*(_BYTE *)(a2 + 84))
      sub_20E7A9E08(a1, a3);
    if (*(_BYTE *)(a2 + 85))
      sub_20E7AA9B8(a1, a3);
    sub_20E7AB174(a1, a3);
    v21 = sub_20E7AB250(a1, a3);
    if (*(_BYTE *)(a1 + 20) != 2)
      sub_20E80A7F0();
    v23 = *(_QWORD *)(a1 + 472);
    if (*(_DWORD *)(v23 + 8) <= 1u)
      sub_20E80A744(v21, v22);
    v24 = *(unsigned int *)(v23 + 40);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 104))(a3, 11, 0);
    if (*(_BYTE *)v25)
    {
      *(_QWORD *)(a1 + 272) = v23 + v24 + *(unsigned int *)(v25 + 16);
      *(_DWORD *)(a1 + 264) = *(_DWORD *)(*(_QWORD *)(a1 + 296) + 96);
    }
    if (*(_BYTE *)(a1 + 20) != 2)
      sub_20E80A7C4();
    v27 = *(_QWORD *)(a1 + 472);
    if (*(_DWORD *)(v27 + 8) <= 1u)
      sub_20E80A744(v25, v26);
    v28 = *(unsigned int *)(v27 + 40);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 104))(a3, 10, 0);
    if (*(_BYTE *)v29)
    {
      *(_QWORD *)(a1 + 256) = v27 + v28 + *(unsigned int *)(v29 + 16);
      *(_DWORD *)(a1 + 248) = *(_DWORD *)(*(_QWORD *)(a1 + 296) + 92);
    }
    if (*(unsigned __int8 *)(a2 + 153) | *(unsigned __int8 *)(a2 + 92))
    {
      if (*(_BYTE *)(a1 + 20) != 2)
        sub_20E80A798();
      v30 = *(_QWORD *)(a1 + 472);
      if (*(_DWORD *)(v30 + 8) <= 1u)
        sub_20E80A744(v29, v19);
      v31 = *(unsigned int *)(v30 + 40);
      v32 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 104))(a3, 12, 0);
      if (*(_BYTE *)v32)
      {
        v33 = *(unsigned int *)(v32 + 16);
        *(_QWORD *)(a1 + 328) = v30 + v31 + v33;
        *(_DWORD *)(a1 + 320) = v33;
        *(_DWORD *)(a1 + 324) = *(_DWORD *)(v32 + 8) * *(_DWORD *)(v32 + 12);
      }
      if (*(_BYTE *)(a2 + 92))
      {
        if (*(_BYTE *)(a1 + 20) != 2)
          sub_20E80A76C();
        v34 = *(_QWORD *)(a1 + 472);
        if (*(_DWORD *)(v34 + 8) <= 1u)
          sub_20E80A744(v32, v19);
        v35 = *(unsigned int *)(v34 + 40);
        v36 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 104))(a3, 13, 0);
        if (*(_BYTE *)v36)
        {
          v37 = *(unsigned int *)(v36 + 16);
          *(_QWORD *)(a1 + 344) = v34 + v35 + v37;
          *(_DWORD *)(a1 + 336) = v37;
          *(_DWORD *)(a1 + 340) = *(_DWORD *)(v36 + 8) * *(_DWORD *)(v36 + 12);
        }
        v38 = *(_QWORD *)(a1 + 584);
        if (!v38)
          v38 = *(_QWORD *)(a1 + 472);
        if (*(_DWORD *)(v38 + 8) <= 2u)
          sub_20E80A71C(v36, v19);
        v39 = v38 + *(unsigned int *)(v38 + 48);
        *(_DWORD *)(a1 + 352) = 576;
        v40 = ((8 * *(_DWORD *)(a1 + 16) + 63) & 0xFFFFFFC0) + 576;
        *(_DWORD *)(a1 + 368) = v40;
        *(_QWORD *)(a1 + 360) = v39 + 576;
        *(_QWORD *)(a1 + 376) = v39 + (v40 & 0xFFFFFFC0);
      }
    }
  }
  else if (v20 == 1)
  {
    sub_20E7A9E08(a1, a3);
    sub_20E7AA9B8(a1, a3);
    sub_20E7AAF34(a1, a3);
  }
  sub_20E7AB32C(a1, v19);
  sub_20E7AB400(a1, a3);
}

void sub_20E7A9C04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 472);
  if (*(_DWORD *)(v2 + 8) <= 1u)
    sub_20E80A744(a1, a2);
  v5 = v2 + *(unsigned int *)(v2 + 40);
  v6 = *(unsigned __int8 *)(a1 + 20);
  if (v6 == 2)
  {
    v12 = (_QWORD *)(a1 + 296);
    v14 = *(_QWORD *)(a1 + 296);
    v13 = *(_QWORD *)(a1 + 304);
    v15 = 0xF128CFC4A33F128DLL * ((v13 - v14) >> 3);
    if (v13 == v14)
    {
      sub_20E7ADE04((uint64_t *)(a1 + 296), 1 - v15);
    }
    else if (v15 >= 2)
    {
      v16 = v14 + 552;
      if (v13 != v14 + 552)
      {
        do
        {
          v17 = v13 - 552;
          sub_20E7A0B04(v13 - 312);
          v13 = v17;
        }
        while (v17 != v16);
      }
      *(_QWORD *)(a1 + 304) = v16;
    }
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, 5, 0);
    if (*(_BYTE *)v23)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 80))(a2, v5 + *(unsigned int *)(v23 + 16), *v12);
    kdebug_trace();
  }
  else if (v6 == 1)
  {
    v7 = (_QWORD *)(a1 + 296);
    v8 = *(unsigned int *)(a1 + 12);
    v10 = *(_QWORD *)(a1 + 296);
    v9 = *(_QWORD *)(a1 + 304);
    v11 = 0xF128CFC4A33F128DLL * ((v9 - v10) >> 3);
    if (v8 <= v11)
    {
      if (v8 < v11)
      {
        v18 = v10 + 552 * v8;
        if (v9 != v18)
        {
          do
          {
            v19 = v9 - 552;
            sub_20E7A0B04(v9 - 312);
            v9 = v19;
          }
          while (v19 != v18);
        }
        *(_QWORD *)(a1 + 304) = v18;
      }
    }
    else
    {
      sub_20E7ADE04((uint64_t *)(a1 + 296), v8 - v11);
    }
    if (*(_DWORD *)(a1 + 12))
    {
      v20 = 0;
      v21 = 0;
      do
      {
        v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, 5, (unsigned __int16)v21);
        if (*(_BYTE *)v22)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v5 + *(unsigned int *)(v22 + 16), *v7 + v20);
        ++v21;
        v20 += 552;
      }
      while (v21 < *(unsigned int *)(a1 + 12));
    }
  }
}

void sub_20E7A9E08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int8x16_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  int64x2_t v30;
  std::__shared_weak_count *v31;
  _OWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int8x16_t v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  int64x2_t v46;
  std::__shared_weak_count *v47;
  _OWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  _OWORD *v67;
  __int128 v68;
  __int128 v69;
  int64x2_t v70;
  std::__shared_weak_count *v71;
  _OWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  int8x16_t v89;
  _OWORD *v90;
  __int128 v91;
  __int128 v92;
  int64x2_t v93;
  std::__shared_weak_count *v94;
  _OWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  int8x16_t v113;
  _OWORD *v114;
  __int128 v115;
  __int128 v116;
  int64x2_t v117;
  std::__shared_weak_count *v118;
  _OWORD *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  uint64_t v126;
  int64x2_t v127;
  void **v128;
  _BYTE v129[32];
  int8x16_t v130;
  int64x2_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  std::__shared_weak_count *v136;

  v2 = *(_QWORD *)(a1 + 472);
  if (*(_DWORD *)(v2 + 8) <= 1u)
    sub_20E80A744(a1, a2);
  v5 = *(unsigned int *)(v2 + 40);
  v128 = (void **)(a1 + 24);
  sub_20E7ABBF4((char **)(a1 + 24), (2 * *(_DWORD *)(a1 + 12)));
  sub_20E7ABBF4((char **)(a1 + 48), *(unsigned int *)(a1 + 12));
  if (*(_DWORD *)(a1 + 12))
  {
    v6 = 0;
    v7 = v2 + v5;
    v126 = v2 + v5 + 1;
    v127 = vdupq_n_s64(1uLL);
    do
    {
      v8 = *(unsigned __int8 *)(a1 + 20);
      if (v8 != 2)
      {
        if (v8 != 1)
          goto LABEL_4;
        v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 104))(a2, 0, (unsigned __int16)v6);
        if (*(_BYTE *)v9)
        {
          v10 = v7 + *(unsigned int *)(v9 + 16);
          v11 = *(std::__shared_weak_count **)(a1 + 496);
          v135 = v10;
          v136 = v11;
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(p_shared_owners);
            while (__stxr(v13 + 1, p_shared_owners));
            v14 = *(_DWORD *)a1;
            v15 = *(_QWORD *)(v9 + 8);
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
          }
          else
          {
            v14 = *(_DWORD *)a1;
            v15 = *(_QWORD *)(v9 + 8);
          }
          v26.i64[0] = v15;
          v26.i64[1] = HIDWORD(v15);
          v129[0] = 0;
          *(_OWORD *)&v129[8] = xmmword_20E80E500;
          *(_QWORD *)&v129[24] = v14 >> v6;
          v130 = vextq_s8(v26, v26, 8uLL);
          v131 = vdupq_n_s64(1uLL);
          *(_QWORD *)&v132 = v10;
          *((_QWORD *)&v132 + 1) = v11;
          v133 = 0uLL;
          LOBYTE(v134) = 0;
          BYTE8(v134) = 0;
          v27 = *(_OWORD **)(a1 + 32);
          if ((unint64_t)v27 >= *(_QWORD *)(a1 + 40))
          {
            v32 = sub_20E7ADBF0(v128, (uint64_t)v129);
            v33 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
            *(_QWORD *)(a1 + 32) = v32;
            if (!v33)
              goto LABEL_29;
            v34 = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (v35)
            {
LABEL_29:
              v31 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
              if (!*((_QWORD *)&v132 + 1))
                goto LABEL_34;
              goto LABEL_30;
            }
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
            v31 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
            if (*((_QWORD *)&v132 + 1))
              goto LABEL_30;
          }
          else
          {
            v28 = *(_OWORD *)v129;
            v29 = *(_OWORD *)&v129[16];
            v30 = v131;
            v27[2] = v130;
            v27[3] = v30;
            *v27 = v28;
            v27[1] = v29;
            v27[4] = v132;
            v132 = 0uLL;
            v27[5] = v133;
            v133 = 0uLL;
            v27[6] = v134;
            *(_QWORD *)(a1 + 32) = v27 + 7;
            v31 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
            if (!*((_QWORD *)&v132 + 1))
              goto LABEL_34;
LABEL_30:
            v36 = (unint64_t *)&v31->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
LABEL_34:
          v38 = v136;
          if (v136)
          {
            v39 = (unint64_t *)&v136->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
        }
        v81 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, 1, (unsigned __int16)v6);
        if (*(_BYTE *)v81)
        {
          v82 = v7 + *(unsigned int *)(v81 + 16);
          v83 = *(std::__shared_weak_count **)(a1 + 496);
          v135 = v82;
          v136 = v83;
          if (v83)
          {
            v84 = (unint64_t *)&v83->__shared_owners_;
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
            v86 = *(_DWORD *)a1;
            v87 = *(_QWORD *)(v81 + 8);
            do
              v88 = __ldxr(v84);
            while (__stxr(v88 + 1, v84));
          }
          else
          {
            v86 = *(_DWORD *)a1;
            v87 = *(_QWORD *)(v81 + 8);
          }
          v89.i64[0] = v87;
          v89.i64[1] = HIDWORD(v87);
          v129[0] = 0;
          *(_OWORD *)&v129[8] = xmmword_20E80E500;
          *(_QWORD *)&v129[24] = v86 >> v6;
          v130 = vextq_s8(v89, v89, 8uLL);
          v131 = vdupq_n_s64(1uLL);
          *(_QWORD *)&v132 = v82;
          *((_QWORD *)&v132 + 1) = v83;
          v133 = 0uLL;
          LOBYTE(v134) = 0;
          BYTE8(v134) = 0;
          v90 = *(_OWORD **)(a1 + 32);
          if ((unint64_t)v90 >= *(_QWORD *)(a1 + 40))
          {
            v95 = sub_20E7ADBF0(v128, (uint64_t)v129);
            v96 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
            *(_QWORD *)(a1 + 32) = v95;
            if (!v96)
              goto LABEL_93;
            v97 = (unint64_t *)&v96->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (v98)
            {
LABEL_93:
              v94 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
              if (!*((_QWORD *)&v132 + 1))
                goto LABEL_98;
              goto LABEL_94;
            }
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
            v94 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
            if (*((_QWORD *)&v132 + 1))
              goto LABEL_94;
          }
          else
          {
            v91 = *(_OWORD *)v129;
            v92 = *(_OWORD *)&v129[16];
            v93 = v131;
            v90[2] = v130;
            v90[3] = v93;
            *v90 = v91;
            v90[1] = v92;
            v90[4] = v132;
            v132 = 0uLL;
            v90[5] = v133;
            v133 = 0uLL;
            v90[6] = v134;
            *(_QWORD *)(a1 + 32) = v90 + 7;
            v94 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
            if (!*((_QWORD *)&v132 + 1))
              goto LABEL_98;
LABEL_94:
            v99 = (unint64_t *)&v94->__shared_owners_;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
LABEL_98:
          v101 = v136;
          if (v136)
          {
            v102 = (unint64_t *)&v136->__shared_owners_;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
        }
        v104 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, 2, (unsigned __int16)v6);
        if (!*(_BYTE *)v104)
          goto LABEL_4;
        v105 = v7 + *(unsigned int *)(v104 + 16);
        v106 = *(std::__shared_weak_count **)(a1 + 496);
        v135 = v105;
        v136 = v106;
        if (v106)
        {
          v107 = (unint64_t *)&v106->__shared_owners_;
          do
            v108 = __ldxr(v107);
          while (__stxr(v108 + 1, v107));
        }
        v109 = *(_DWORD *)a1;
        v110 = *(_QWORD *)(v104 + 8);
        if (v106)
        {
          v111 = (unint64_t *)&v106->__shared_owners_;
          do
            v112 = __ldxr(v111);
          while (__stxr(v112 + 1, v111));
        }
        v113.i64[0] = v110;
        v113.i64[1] = HIDWORD(v110);
        v129[0] = 0;
        *(_OWORD *)&v129[8] = xmmword_20E80E500;
        *(_QWORD *)&v129[24] = 2 * (v109 >> (v6 + 1));
        v130 = vextq_s8(v113, v113, 8uLL);
        v131 = vdupq_n_s64(1uLL);
        *(_QWORD *)&v132 = v105;
        *((_QWORD *)&v132 + 1) = v106;
        v133 = 0uLL;
        LOBYTE(v134) = 0;
        BYTE8(v134) = 0;
        v114 = *(_OWORD **)(a1 + 56);
        if ((unint64_t)v114 >= *(_QWORD *)(a1 + 64))
        {
          v119 = sub_20E7ADBF0((void **)(a1 + 48), (uint64_t)v129);
          v120 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
          *(_QWORD *)(a1 + 56) = v119;
          if (!v120)
            goto LABEL_119;
          v121 = (unint64_t *)&v120->__shared_owners_;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (v122)
          {
LABEL_119:
            v118 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
            if (!*((_QWORD *)&v132 + 1))
              goto LABEL_124;
            goto LABEL_120;
          }
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
          v118 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
          if (*((_QWORD *)&v132 + 1))
            goto LABEL_120;
        }
        else
        {
          v115 = *(_OWORD *)v129;
          v116 = *(_OWORD *)&v129[16];
          v117 = v131;
          v114[2] = v130;
          v114[3] = v117;
          *v114 = v115;
          v114[1] = v116;
          v114[4] = v132;
          v132 = 0uLL;
          v114[5] = v133;
          v133 = 0uLL;
          v114[6] = v134;
          *(_QWORD *)(a1 + 56) = v114 + 7;
          v118 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
          if (!*((_QWORD *)&v132 + 1))
            goto LABEL_124;
LABEL_120:
          v123 = (unint64_t *)&v118->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
LABEL_124:
        v78 = v136;
        if (v136)
        {
          v125 = (unint64_t *)&v136->__shared_owners_;
          do
            v80 = __ldaxr(v125);
          while (__stlxr(v80 - 1, v125));
LABEL_127:
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
          goto LABEL_4;
        }
        goto LABEL_4;
      }
      v17 = (_BYTE *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 104))(a2, 0, (unsigned __int16)v6);
      if (!*v17)
        goto LABEL_4;
      v18 = v17;
      v19 = sub_20E7E7940(*(_DWORD *)a1, v6);
      v20 = v7 + *((unsigned int *)v18 + 4);
      v21 = *(std::__shared_weak_count **)(a1 + 496);
      v135 = v20;
      v136 = v21;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        v24 = *((_QWORD *)v18 + 1);
        do
          v25 = __ldxr(v22);
        while (__stxr(v25 + 1, v22));
      }
      else
      {
        v24 = *((_QWORD *)v18 + 1);
      }
      v129[0] = 0;
      *(_OWORD *)&v129[8] = xmmword_20E80E500;
      v41 = v19;
      v42.i64[0] = v24;
      v42.i64[1] = HIDWORD(v24);
      *(_QWORD *)&v129[24] = v19;
      v130 = vextq_s8(v42, v42, 8uLL);
      v131 = v127;
      *(_QWORD *)&v132 = v20;
      *((_QWORD *)&v132 + 1) = v21;
      v133 = 0uLL;
      LOBYTE(v134) = 0;
      BYTE8(v134) = 0;
      v43 = *(_OWORD **)(a1 + 32);
      if ((unint64_t)v43 >= *(_QWORD *)(a1 + 40))
      {
        v48 = sub_20E7ADBF0(v128, (uint64_t)v129);
        v49 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
        *(_QWORD *)(a1 + 32) = v48;
        if (!v49)
          goto LABEL_47;
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
          v47 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
          if (!*((_QWORD *)&v132 + 1))
            goto LABEL_52;
        }
        else
        {
LABEL_47:
          v47 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
          if (!*((_QWORD *)&v132 + 1))
            goto LABEL_52;
        }
      }
      else
      {
        v44 = *(_OWORD *)v129;
        v45 = *(_OWORD *)&v129[16];
        v46 = v131;
        v43[2] = v130;
        v43[3] = v46;
        *v43 = v44;
        v43[1] = v45;
        v43[4] = v132;
        v132 = 0uLL;
        v43[5] = v133;
        v133 = 0uLL;
        v43[6] = v134;
        *(_QWORD *)(a1 + 32) = v43 + 7;
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
        if (!*((_QWORD *)&v132 + 1))
          goto LABEL_52;
      }
      v52 = (unint64_t *)&v47->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
LABEL_52:
      v54 = *((unsigned int *)v18 + 4);
      v55 = *(std::__shared_weak_count **)(a1 + 496);
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v58 = v136;
      v135 = v126 + v54;
      v136 = v55;
      if (!v58)
        goto LABEL_59;
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
        v62 = *((unsigned int *)v18 + 2);
        v61 = *((unsigned int *)v18 + 3);
        v64 = v135;
        v63 = v136;
        if (!v136)
          goto LABEL_62;
      }
      else
      {
LABEL_59:
        v62 = *((unsigned int *)v18 + 2);
        v61 = *((unsigned int *)v18 + 3);
        v64 = v135;
        v63 = v136;
        if (!v136)
          goto LABEL_62;
      }
      v65 = (unint64_t *)&v63->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
LABEL_62:
      v129[0] = 0;
      *(_OWORD *)&v129[8] = xmmword_20E80E500;
      *(_QWORD *)&v129[24] = v41;
      v130.i64[0] = v61;
      v130.i64[1] = v62;
      v131 = vdupq_n_s64(1uLL);
      *(_QWORD *)&v132 = v64;
      *((_QWORD *)&v132 + 1) = v63;
      v133 = 0uLL;
      LOBYTE(v134) = 0;
      BYTE8(v134) = 0;
      v67 = *(_OWORD **)(a1 + 32);
      if ((unint64_t)v67 >= *(_QWORD *)(a1 + 40))
      {
        v72 = sub_20E7ADBF0(v128, (uint64_t)v129);
        v73 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
        *(_QWORD *)(a1 + 32) = v72;
        if (!v73)
          goto LABEL_69;
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
          v71 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
          if (!*((_QWORD *)&v132 + 1))
            goto LABEL_74;
        }
        else
        {
LABEL_69:
          v71 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
          if (!*((_QWORD *)&v132 + 1))
            goto LABEL_74;
        }
      }
      else
      {
        v68 = *(_OWORD *)v129;
        v69 = *(_OWORD *)&v129[16];
        v70 = v131;
        v67[2] = v130;
        v67[3] = v70;
        *v67 = v68;
        v67[1] = v69;
        v67[4] = v132;
        v132 = 0uLL;
        v67[5] = v133;
        v133 = 0uLL;
        v67[6] = v134;
        *(_QWORD *)(a1 + 32) = v67 + 7;
        v71 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
        if (!*((_QWORD *)&v132 + 1))
          goto LABEL_74;
      }
      v76 = (unint64_t *)&v71->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
LABEL_74:
      v78 = v136;
      if (v136)
      {
        v79 = (unint64_t *)&v136->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        goto LABEL_127;
      }
LABEL_4:
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 12));
  }
}

void sub_20E7AA904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  sub_20E7ABA04((uint64_t)&a28);
  sub_20E7858BC((uint64_t)&a22);
  sub_20E7858BC(v28 - 104);
  _Unwind_Resume(a1);
}

void sub_20E7AA928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  sub_20E7ABA04((uint64_t)&a28);
  sub_20E7858BC((uint64_t)&a24);
  sub_20E7858BC(v28 - 104);
  _Unwind_Resume(a1);
}

void sub_20E7AA94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  sub_20E7ABA04((uint64_t)&a28);
  sub_20E7858BC((uint64_t)&a18);
  sub_20E7858BC(v28 - 104);
  _Unwind_Resume(a1);
}

void sub_20E7AA970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  sub_20E7ABA04((uint64_t)&a28);
  sub_20E7858BC((uint64_t)&a20);
  sub_20E7858BC(v28 - 104);
  _Unwind_Resume(a1);
}

void sub_20E7AA994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;

  sub_20E7ABA04((uint64_t)&a28);
  sub_20E7858BC((uint64_t)&a26);
  sub_20E7858BC(v28 - 104);
  _Unwind_Resume(a1);
}

void sub_20E7AA9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void **v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  int64x2_t v25;
  std::__shared_weak_count *v26;
  _OWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  int64x2_t v49;
  std::__shared_weak_count *v50;
  _OWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  int64x2_t v61;
  _BYTE v62[32];
  __int128 v63;
  int64x2_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  std::__shared_weak_count *v69;

  v2 = *(_QWORD *)(a1 + 472);
  if (*(_DWORD *)(v2 + 8) <= 1u)
    sub_20E80A744(a1, a2);
  v5 = *(unsigned int *)(v2 + 40);
  v6 = (void **)(a1 + 72);
  sub_20E7ABBF4((char **)(a1 + 72), (2 * *(_DWORD *)(a1 + 12)));
  if (*(_DWORD *)(a1 + 12))
  {
    v7 = 0;
    v8 = v2 + v5;
    v60 = v2 + v5 + 2;
    v61 = vdupq_n_s64(2uLL);
    while (1)
    {
      v9 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, 3, (unsigned __int16)v7);
      if (*(_BYTE *)v9)
        break;
LABEL_4:
      if (++v7 >= *(_DWORD *)(a1 + 12))
        return;
    }
    v10 = v9;
    v11 = *(_DWORD *)a1;
    if (*(_BYTE *)(a1 + 20) == 1)
    {
      v12 = v11 >> v7;
      v13 = v8 + v10[4];
      v14 = *(std::__shared_weak_count **)(a1 + 496);
      v68 = v13;
      v69 = v14;
      if (!v14)
        goto LABEL_12;
    }
    else
    {
      v12 = sub_20E7E7940(v11, v7);
      v13 = v8 + v10[4];
      v14 = *(std::__shared_weak_count **)(a1 + 496);
      v68 = v13;
      v69 = v14;
      if (!v14)
        goto LABEL_12;
    }
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
LABEL_12:
    v17 = v10[3];
    if ((v17 & 1) != 0)
    {
      sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwIspDataHandler.cpp", 312, "lp01_info.stride % sizeof(LaplacianDataType) == 0 && \"Width step is not a multiple of scalar data type\"", (void (*)(void *))sub_20E803DA4);
      abort();
    }
    v18 = v10[2];
    if (v14)
    {
      v19 = (unint64_t *)&v14->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v62[0] = 0;
    *(_OWORD *)&v62[8] = xmmword_20E80E500;
    v21 = v12;
    *(_QWORD *)&v62[24] = v12;
    *(_QWORD *)&v63 = v17 >> 1;
    *((_QWORD *)&v63 + 1) = v18;
    v64 = v61;
    *(_QWORD *)&v65 = v13;
    *((_QWORD *)&v65 + 1) = v14;
    v66 = 0uLL;
    LOBYTE(v67) = 0;
    BYTE8(v67) = 0;
    v22 = *(_OWORD **)(a1 + 80);
    if ((unint64_t)v22 >= *(_QWORD *)(a1 + 88))
    {
      v27 = sub_20E7ADBF0(v6, (uint64_t)v62);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
      *(_QWORD *)(a1 + 80) = v27;
      if (!v28)
        goto LABEL_23;
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (!*((_QWORD *)&v65 + 1))
          goto LABEL_28;
      }
      else
      {
LABEL_23:
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (!*((_QWORD *)&v65 + 1))
          goto LABEL_28;
      }
    }
    else
    {
      v23 = *(_OWORD *)v62;
      v24 = *(_OWORD *)&v62[16];
      v25 = v64;
      v22[2] = v63;
      v22[3] = v25;
      *v22 = v23;
      v22[1] = v24;
      v22[4] = v65;
      v65 = 0uLL;
      v22[5] = v66;
      v66 = 0uLL;
      v22[6] = v67;
      *(_QWORD *)(a1 + 80) = v22 + 7;
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
      if (!*((_QWORD *)&v65 + 1))
        goto LABEL_28;
    }
    v31 = (unint64_t *)&v26->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
LABEL_28:
    v33 = v10[4];
    v34 = *(std::__shared_weak_count **)(a1 + 496);
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = v69;
    v68 = v60 + v33;
    v69 = v34;
    if (!v37)
      goto LABEL_35;
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      v40 = v10[2];
      v41 = v10[3];
      v43 = v68;
      v42 = v69;
      if (!v69)
        goto LABEL_38;
    }
    else
    {
LABEL_35:
      v40 = v10[2];
      v41 = v10[3];
      v43 = v68;
      v42 = v69;
      if (!v69)
        goto LABEL_38;
    }
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
LABEL_38:
    v62[0] = 0;
    *(_OWORD *)&v62[8] = xmmword_20E80E500;
    *(_QWORD *)&v62[24] = v21;
    *(_QWORD *)&v63 = v41 >> 1;
    *((_QWORD *)&v63 + 1) = v40;
    v64 = vdupq_n_s64(2uLL);
    *(_QWORD *)&v65 = v43;
    *((_QWORD *)&v65 + 1) = v42;
    v66 = 0uLL;
    LOBYTE(v67) = 0;
    BYTE8(v67) = 0;
    v46 = *(_OWORD **)(a1 + 80);
    if ((unint64_t)v46 >= *(_QWORD *)(a1 + 88))
    {
      v51 = sub_20E7ADBF0(v6, (uint64_t)v62);
      v52 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
      *(_QWORD *)(a1 + 80) = v51;
      if (!v52)
        goto LABEL_45;
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (!*((_QWORD *)&v65 + 1))
        {
LABEL_50:
          v57 = v69;
          if (v69)
          {
            v58 = (unint64_t *)&v69->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          goto LABEL_4;
        }
      }
      else
      {
LABEL_45:
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
        if (!*((_QWORD *)&v65 + 1))
          goto LABEL_50;
      }
    }
    else
    {
      v47 = *(_OWORD *)v62;
      v48 = *(_OWORD *)&v62[16];
      v49 = v64;
      v46[2] = v63;
      v46[3] = v49;
      *v46 = v47;
      v46[1] = v48;
      v46[4] = v65;
      v65 = 0uLL;
      v46[5] = v66;
      v66 = 0uLL;
      v46[6] = v67;
      *(_QWORD *)(a1 + 80) = v46 + 7;
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
      if (!*((_QWORD *)&v65 + 1))
        goto LABEL_50;
    }
    v55 = (unint64_t *)&v50->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
    goto LABEL_50;
  }
}

void sub_20E7AAEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20E7ABA04((uint64_t)va1);
  sub_20E7858BC((uint64_t)va);
  sub_20E7858BC(v8 - 104);
  _Unwind_Resume(a1);
}

void sub_20E7AAF20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E7858BC(v1 - 104);
  _Unwind_Resume(a1);
}

void sub_20E7AAF34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void **v33;

  if (*(_BYTE *)(a1 + 20) != 1)
    sub_20E80A81C();
  v3 = *(_QWORD *)(a1 + 472);
  if (*(_DWORD *)(v3 + 8) <= 1u)
    sub_20E80A744(a1, a2);
  v4 = a2;
  v5 = *(unsigned int *)(v3 + 40);
  v6 = *(_BYTE **)(a1 + 96);
  v7 = *(unsigned int *)(a1 + 12);
  v33 = (void **)(a1 + 96);
  if (v7 > (uint64_t)(*(_QWORD *)(a1 + 112) - (_QWORD)v6) >> 4)
  {
    v8 = *(_BYTE **)(a1 + 104);
    v9 = (char *)operator new(16 * v7);
    v10 = &v9[(v8 - v6) & 0xFFFFFFFFFFFFFFF0];
    v11 = v10;
    if (v8 != v6)
    {
      v12 = &v9[(v8 - v6) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v11 = v12 - 16;
        *((_OWORD *)v12 - 1) = *((_OWORD *)v8 - 1);
        v8 -= 16;
        v12 -= 16;
      }
      while (v8 != v6);
    }
    *(_QWORD *)(a1 + 96) = v11;
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = &v9[16 * v7];
    if (v6)
    {
      operator delete(v6);
      LODWORD(v7) = *(_DWORD *)(a1 + 12);
    }
  }
  if ((_DWORD)v7)
  {
    v13 = 0;
    v14 = v3 + v5;
    v32 = v4;
    do
    {
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 104))(v4, 4, (unsigned __int16)v13);
      if (*(_BYTE *)v16)
      {
        v17 = v14 + *(unsigned int *)(v16 + 16);
        v18 = *(_QWORD *)(a1 + 296) + 552 * v13;
        v19 = *(_DWORD *)(v18 + 92);
        v20 = *(_DWORD *)(v18 + 52);
        v22 = *(char **)(a1 + 104);
        v21 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v22 < v21)
        {
          *(_DWORD *)v22 = v19;
          *((_DWORD *)v22 + 1) = v20;
          v15 = v22 + 16;
          *((_QWORD *)v22 + 1) = v17;
        }
        else
        {
          v23 = v14;
          v24 = (char *)*v33;
          v25 = (v22 - (_BYTE *)*v33) >> 4;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 60)
            sub_20E78D874();
          v27 = v21 - (_QWORD)v24;
          if (v27 >> 3 > v26)
            v26 = v27 >> 3;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
            v28 = 0xFFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            if (v28 >> 60)
              sub_20E78D888();
            v29 = (char *)operator new(16 * v28);
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[16 * v25];
          *(_DWORD *)v30 = v19;
          *((_DWORD *)v30 + 1) = v20;
          *((_QWORD *)v30 + 1) = v17;
          v31 = v30;
          v14 = v23;
          if (v22 != v24)
          {
            do
            {
              *((_OWORD *)v31 - 1) = *((_OWORD *)v22 - 1);
              v31 -= 16;
              v22 -= 16;
            }
            while (v22 != v24);
            v22 = (char *)*v33;
          }
          v4 = v32;
          v15 = v30 + 16;
          *(_QWORD *)(a1 + 96) = v31;
          *(_QWORD *)(a1 + 104) = v30 + 16;
          *(_QWORD *)(a1 + 112) = &v29[16 * v28];
          if (v22)
            operator delete(v22);
        }
        *(_QWORD *)(a1 + 104) = v15;
      }
      ++v13;
    }
    while (v13 < *(unsigned int *)(a1 + 12));
  }
}

uint64_t sub_20E7AB174(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;

  if (*(_BYTE *)(a1 + 20) != 2)
    sub_20E80A848();
  v3 = *(_QWORD *)(a1 + 472);
  if (*(_DWORD *)(v3 + 8) <= 1u)
    sub_20E80A744(a1, a2);
  v5 = v3 + *(unsigned int *)(v3 + 40);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, 6, 0);
  if (*(_BYTE *)v6)
  {
    v7 = *(unsigned int *)(v6 + 16);
    *(_QWORD *)(a1 + 168) = v5 + v7;
    v8 = *(_DWORD *)(v6 + 8) * *(_DWORD *)(v6 + 12);
    *(_DWORD *)(a1 + 152) = v7;
    *(_DWORD *)(a1 + 156) = v8;
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)(a1 + 296) + 92);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, 7, 0);
  if (*(_BYTE *)result)
  {
    v10 = *(unsigned int *)(result + 16);
    *(_QWORD *)(a1 + 192) = v5 + v10;
    v11 = *(_DWORD *)(result + 8) * *(_DWORD *)(result + 12);
    *(_DWORD *)(a1 + 176) = v10;
    *(_DWORD *)(a1 + 180) = v11;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(_QWORD *)(a1 + 296) + 96);
  }
  return result;
}

uint64_t sub_20E7AB250(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;

  if (*(_BYTE *)(a1 + 20) != 2)
    sub_20E80A874();
  v3 = *(_QWORD *)(a1 + 472);
  if (*(_DWORD *)(v3 + 8) <= 1u)
    sub_20E80A744(a1, a2);
  v5 = v3 + *(unsigned int *)(v3 + 40);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, 8, 0);
  if (*(_BYTE *)v6)
  {
    v7 = *(unsigned int *)(v6 + 16);
    *(_QWORD *)(a1 + 216) = v5 + v7;
    v8 = *(_DWORD *)(v6 + 8) * *(_DWORD *)(v6 + 12);
    *(_DWORD *)(a1 + 200) = v7;
    *(_DWORD *)(a1 + 204) = v8;
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(_QWORD *)(a1 + 296) + 100);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 104))(a2, 9, 0);
  if (*(_BYTE *)result)
  {
    v10 = *(unsigned int *)(result + 16);
    *(_QWORD *)(a1 + 240) = v5 + v10;
    v11 = *(_DWORD *)(result + 8) * *(_DWORD *)(result + 12);
    *(_DWORD *)(a1 + 224) = v10;
    *(_DWORD *)(a1 + 228) = v11;
    *(_DWORD *)(a1 + 232) = *(_DWORD *)(*(_QWORD *)(a1 + 296) + 104);
  }
  return result;
}

uint64_t sub_20E7AB32C(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(unsigned __int8 *)(result + 20);
  if (v2 == 1)
  {
    v7 = *(_QWORD *)(result + 584);
    if (!v7)
      v7 = *(_QWORD *)(result + 472);
    if (*(_DWORD *)(v7 + 8) <= 2u)
      sub_20E80A71C(result, a2);
    v4 = v7 + *(unsigned int *)(v7 + 48);
    v5 = 576;
    *(_DWORD *)(result + 120) = 576;
    v6 = ((24 * *(_DWORD *)(result + 16) + 63) & 0xFFFFFFC0) + 576;
    goto LABEL_11;
  }
  if (v2 == 2)
  {
    v3 = *(_QWORD *)(result + 584);
    if (!v3)
      v3 = *(_QWORD *)(result + 472);
    if (*(_DWORD *)(v3 + 8) <= 1u)
      sub_20E80A8A0();
    v4 = v3 + *(unsigned int *)(v3 + 40);
    v5 = *(_DWORD *)(result + 176);
    *(_DWORD *)(result + 120) = v5;
    v6 = *(_DWORD *)(result + 152);
LABEL_11:
    *(_DWORD *)(result + 136) = v6;
    *(_QWORD *)(result + 128) = v4 + v5;
    *(_QWORD *)(result + 144) = v4 + v6;
    return result;
  }
  v8 = *(_DWORD *)(result + 136);
  *(_QWORD *)(result + 128) = *(unsigned int *)(result + 120);
  *(_QWORD *)(result + 144) = v8;
  return result;
}

void sub_20E7AB400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD);
  unint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  unsigned int v20;

  v4 = *(_QWORD *)(a1 + 584);
  if (!v4)
    v4 = *(_QWORD *)(a1 + 472);
  if (*(_DWORD *)(v4 + 8) <= 2u)
    sub_20E80A924();
  v5 = (void *)(v4 + *(unsigned int *)(v4 + 48));
  *(_QWORD *)(a1 + 400) = v5;
  bzero(v5, 0x240uLL);
  v6 = *(_QWORD *)(a1 + 400);
  *(_WORD *)(v6 + 2) = 1;
  *(_QWORD *)(v6 + 20) = *(_QWORD *)a1;
  v8 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v6 + 12) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(v6 + 16) = v7;
  *(_WORD *)v6 = *(_DWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(v6 + 4) = 0;
  *(_DWORD *)(v6 + 8) = v9;
  *(_QWORD *)(v6 + 76) = v8;
  *(_BYTE *)(v6 + 84) = *(_BYTE *)(a1 + 20);
  v10 = *(unsigned __int8 *)(a1 + 384);
  *(_BYTE *)(v6 + 85) = v10;
  if (v7)
  {
    if (v10)
    {
      v11 = 0;
      do
      {
        v12 = *(unsigned __int8 *)(a1 + 384);
        if (*(_BYTE *)(a1 + 384))
        {
          *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v11 + 28) = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 104))(a2, 0, (unsigned __int16)v11)+ 16);
          v13 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 104);
          if (*(_BYTE *)(a1 + 20) == 1)
            v12 = *(_DWORD *)(v13(a2, 1, (unsigned __int16)v11) + 16);
          else
            v12 = *(_DWORD *)(v13(a2, 0, (unsigned __int16)v11) + 16) + 1;
          v6 = *(_QWORD *)(a1 + 400);
        }
        else
        {
          *(_DWORD *)(v6 + 4 * v11 + 28) = 0;
        }
        *(_DWORD *)(v6 + 4 * v11++ + 52) = v12;
      }
      while (v11 < *(unsigned int *)(a1 + 12));
    }
    else
    {
      v14 = 0;
      do
      {
        v15 = v6 + 4 * v14;
        *(_DWORD *)(v15 + 28) = 0;
        *(_DWORD *)(v15 + 52) = 0;
        ++v14;
      }
      while (v14 < *(unsigned int *)(a1 + 12));
    }
  }
  *(_WORD *)(v6 + 86) = *(_WORD *)(a1 + 389);
  v16 = *(_DWORD *)(a1 + 352);
  *(_DWORD *)(v6 + 88) = 0;
  *(_DWORD *)(v6 + 92) = v16;
  *(_DWORD *)(v6 + 96) = *(_DWORD *)(a1 + 368);
  *(_QWORD *)&v17 = *(_QWORD *)(a1 + 320);
  *((_QWORD *)&v17 + 1) = *(_QWORD *)(a1 + 336);
  *(_OWORD *)(v6 + 100) = v17;
  v18 = HIDWORD(*(_QWORD *)(a1 + 392));
  *(_DWORD *)(v6 + 116) = (unsigned __int16)*(_QWORD *)(a1 + 392);
  *(_DWORD *)(v6 + 120) = v18;
  v19 = *(_BYTE *)(a1 + 391);
  if (v19)
    v19 = *(_DWORD *)a1 > 0x280u;
  *(_BYTE *)(v6 + 124) = v19;
  v20 = *(_DWORD *)(v6 + 76);
  if ((v20 & 0x3F) != 0)
    sub_20E80A8F8();
  if (v20 < *(_DWORD *)(v6 + 20))
    sub_20E80A8CC();
}

uint64_t sub_20E7AB5E0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  _OWORD *v12;
  _OWORD *v13;
  const void **v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char v57;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 385) = 1;
  *(_BYTE *)(a1 + 387) = 1;
  v12 = (_OWORD *)(a1 + 408);
  *(_BYTE *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 489) = 0u;
  v13 = (_OWORD *)(a1 + 520);
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 601) = 0u;
  *(_QWORD *)(a1 + 396) = 0;
  *(_QWORD *)(a1 + 388) = 0;
  *(_QWORD *)(a1 + 401) = 0;
  sub_20E7F8B60(&v50, *a2, 1);
  v14 = (const void **)(a1 + 472);
  v15 = v51;
  *v12 = v50;
  v12[1] = v15;
  v16 = v53;
  v12[2] = v52;
  v12[3] = v16;
  v17 = v54;
  v54 = 0uLL;
  v18 = *(std::__shared_weak_count **)(a1 + 480);
  *(_OWORD *)(a1 + 472) = v17;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v55;
  v55 = 0uLL;
  v22 = *(std::__shared_weak_count **)(a1 + 496);
  *(_OWORD *)(a1 + 488) = v21;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  *(_QWORD *)(a1 + 504) = v56;
  *(_BYTE *)(a1 + 512) = v57;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (!*((_QWORD *)&v54 + 1))
    goto LABEL_20;
  v29 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if (!a7)
      goto LABEL_45;
  }
  else
  {
LABEL_20:
    if (!a7)
      goto LABEL_45;
  }
  sub_20E7F8B60(&v50, a7, 1);
  v31 = v51;
  *v13 = v50;
  v13[1] = v31;
  v32 = v53;
  v13[2] = v52;
  v13[3] = v32;
  v33 = v54;
  v54 = 0uLL;
  v34 = *(std::__shared_weak_count **)(a1 + 592);
  *(_OWORD *)(a1 + 584) = v33;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v55;
  v55 = 0uLL;
  v38 = *(std::__shared_weak_count **)(a1 + 608);
  *(_OWORD *)(a1 + 600) = v37;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  *(_QWORD *)(a1 + 616) = v56;
  *(_BYTE *)(a1 + 624) = v57;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (*(_QWORD *)(a1 + 584))
    v47 = *(void **)(a1 + 584);
  else
    v47 = (void *)*v14;
  memcpy(v47, *v14, 8 * *((unsigned int *)*v14 + 2) + 32);
LABEL_45:
  sub_20E7A97F4(a1, a3, a4, a5, a6);
  return a1;
}

void sub_20E7AB9A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;

  sub_20E7ABA04(v4);
  sub_20E7ABA04(v3);
  sub_20E7ABAB0((void **)(v1 + 296));
  v6 = *(void **)(v1 + 96);
  if (v6)
  {
    *(_QWORD *)(v1 + 104) = v6;
    operator delete(v6);
  }
  sub_20E7ABB14((void **)(v1 + 72));
  sub_20E7ABB14((void **)(v1 + 48));
  sub_20E7ABB14(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7ABA04(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 72);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void **sub_20E7ABAB0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 552;
        sub_20E7A0B04((uint64_t)(v3 - 312));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20E7ABB14(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 5);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 5);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 112;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

void sub_20E7ABBF4(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4) >= a2)
    return;
  if (a2 >= 0x24924924924924ALL)
    sub_20E78D874();
  v4 = a1[1];
  v5 = 112 * a2;
  v6 = (char *)operator new(112 * a2);
  v7 = &v6[v5];
  v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (v2)
      goto LABEL_22;
    return;
  }
  v9 = &v6[v4 - v2];
  do
  {
    v10 = *((_OWORD *)v4 - 7);
    v11 = *((_OWORD *)v4 - 6);
    v12 = *((_OWORD *)v4 - 4);
    *((_OWORD *)v9 - 5) = *((_OWORD *)v4 - 5);
    *((_OWORD *)v9 - 4) = v12;
    *((_OWORD *)v9 - 7) = v10;
    *((_OWORD *)v9 - 6) = v11;
    *((_OWORD *)v9 - 3) = *((_OWORD *)v4 - 3);
    *((_QWORD *)v4 - 6) = 0;
    *((_QWORD *)v4 - 5) = 0;
    *((_OWORD *)v9 - 2) = *((_OWORD *)v4 - 2);
    *((_QWORD *)v4 - 4) = 0;
    *((_QWORD *)v4 - 3) = 0;
    *((_OWORD *)v9 - 1) = *((_OWORD *)v4 - 1);
    v9 -= 112;
    v4 -= 112;
  }
  while (v4 != v2);
  v13 = *a1;
  v2 = a1[1];
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v13)
  {
    while (1)
    {
      v14 = (std::__shared_weak_count *)*((_QWORD *)v2 - 3);
      if (!v14)
        goto LABEL_13;
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        v17 = (std::__shared_weak_count *)*((_QWORD *)v2 - 5);
        if (v17)
        {
LABEL_14:
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      else
      {
LABEL_13:
        v17 = (std::__shared_weak_count *)*((_QWORD *)v2 - 5);
        if (v17)
          goto LABEL_14;
      }
      v2 -= 112;
      if (v2 == v13)
      {
        v2 = v13;
        break;
      }
    }
  }
  if (v2)
LABEL_22:
    operator delete(v2);
}

__n128 sub_20E7ABD9C(uint64_t a1, char a2, uint64_t a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  v8 = *(_QWORD *)(a1 + 400);
  v9 = *(_DWORD *)(v8 + 4);
  if (v9 >= *(_DWORD *)(a1 + 16))
    sub_20E80A9A8();
  if (*(_DWORD *)(v8 + 80))
    sub_20E80A97C();
  v10 = *(_QWORD *)(a1 + 128);
  if (!v10 || !*(_QWORD *)(a1 + 144))
    sub_20E80A950();
  v11 = v10 + 24 * v9;
  *(float *)v11 = a4;
  *(float *)(v11 + 4) = a5;
  *(float *)(v11 + 8) = a6;
  *(float *)(v11 + 12) = a7;
  *(_BYTE *)(v11 + 16) = a2;
  *(float *)(v11 + 20) = a8;
  v12 = *(_QWORD *)(a1 + 144) + ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 400) + 4) << 6);
  result = *(__n128 *)a3;
  v14 = *(_OWORD *)(a3 + 16);
  v15 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v12 + 48) = v15;
  *(__n128 *)v12 = result;
  *(_OWORD *)(v12 + 16) = v14;
  ++*(_DWORD *)(*(_QWORD *)(a1 + 400) + 4);
  return result;
}

uint64_t sub_20E7ABE2C(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = *(_QWORD *)(result + 400);
  v4 = *(unsigned int *)(v3 + 88);
  if (v4 >= *(_DWORD *)(result + 16))
    sub_20E80A9D4();
  v5 = (_DWORD *)(*(_QWORD *)(result + 360) + 8 * v4);
  *v5 = a2;
  v5[1] = a3;
  ++*(_DWORD *)(v3 + 88);
  return result;
}

uint64_t sub_20E7ABE6C(uint64_t result, int a2, unsigned int a3)
{
  unsigned int v3;
  BOOL v4;
  BOOL v5;

  v3 = *(_DWORD *)(result + 16);
  if (*(_DWORD *)(result + 372) < v3)
  {
    v4 = v3 >= a3;
    v5 = v3 == a3;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  if (v5 || !v4)
    sub_20E80AA00();
  *(_DWORD *)(*(_QWORD *)(result + 376) + 4 * a3) = a2;
  ++*(_DWORD *)(result + 372);
  return result;
}

unsigned __int8 *sub_20E7ABEA8(unsigned __int8 *result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  int v145;
  unsigned int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  int v197;
  unsigned int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  unsigned int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  int v212;

  v2 = result[15] & 4;
  *(_BYTE *)a2 = v2;
  v3 = v2 | (result[17] << 7);
  *(_BYTE *)a2 = v3;
  v4 = (result[18] >> 4) & 8 | v3;
  *(_BYTE *)a2 = v4;
  v5 = (result[18] >> 5) & 2 | v4;
  *(_BYTE *)a2 = v5;
  v6 = v5 & 0xFFFFFFBF | (((result[26] >> 5) & 1) << 6);
  *(_BYTE *)a2 = v6;
  LOBYTE(v6) = v6 & 0xEF | (16 * (result[34] & 1));
  *(_BYTE *)a2 = v6;
  LOBYTE(v6) = v6 & 0xFE | ((result[34] & 2) != 0);
  *(_BYTE *)a2 = v6;
  *(_BYTE *)a2 = v6 | result[37] & 0x20;
  LOBYTE(v6) = (4 * result[14]) & 0x40;
  *(_BYTE *)(a2 + 1) = v6;
  LOBYTE(v6) = v6 & 0xFE | ((result[17] & 2) != 0);
  *(_BYTE *)(a2 + 1) = v6;
  v7 = v6 & 0x7F | (result[19] >> 6 << 7);
  *(_BYTE *)(a2 + 1) = v7;
  v8 = v7 | result[19] & 0x20;
  *(_BYTE *)(a2 + 1) = v8;
  v9 = (result[26] >> 3) & 2 | v8;
  *(_BYTE *)(a2 + 1) = v9;
  v10 = (result[33] >> 1) & 0x10 | v9;
  *(_BYTE *)(a2 + 1) = v10;
  *(_BYTE *)(a2 + 1) = v10 & 0xF3 | (4 * ((result[35] >> 1) & 3));
  v11 = (result[15] >> 3) & 0x18;
  *(_BYTE *)(a2 + 2) = v11;
  v12 = v11 & 0xFFFFFFDF | (32 * ((result[27] >> 2) & 1));
  *(_BYTE *)(a2 + 2) = v12;
  v13 = v12 & 0xFFFFFFFB | (4 * ((result[27] >> 1) & 1));
  *(_BYTE *)(a2 + 2) = v13;
  LOBYTE(v13) = v13 & 0xFE | ((result[33] & 0x10) != 0);
  *(_BYTE *)(a2 + 2) = v13;
  LOBYTE(v13) = v13 & 0x3F | (result[37] >> 3 << 6);
  *(_BYTE *)(a2 + 2) = v13;
  *(_BYTE *)(a2 + 2) = (result[39] >> 3) & 2 | v13;
  v14 = (result[15] >> 3) & 4;
  *(_BYTE *)(a2 + 3) = v14;
  v15 = result[17] & 0x80 | v14;
  *(_BYTE *)(a2 + 3) = v15;
  v16 = (result[19] >> 1) & 8 | v15;
  *(_BYTE *)(a2 + 3) = v16;
  v17 = (result[19] >> 2) & 2 | v16;
  *(_BYTE *)(a2 + 3) = v17;
  v18 = v17 & 0xFFFFFFBF | (((result[28] >> 5) & 1) << 6);
  *(_BYTE *)(a2 + 3) = v18;
  v19 = v18 | (result[34] >> 7);
  *(_BYTE *)(a2 + 3) = v19;
  LOBYTE(v19) = v19 & 0xEF | (16 * (result[35] & 1));
  *(_BYTE *)(a2 + 3) = v19;
  *(_BYTE *)(a2 + 3) = (32 * (result[38] & 1)) | v19;
  v20 = result[18] & 1;
  *(_BYTE *)(a2 + 4) = v20;
  v21 = v20 & 0xFFFFFFBF | (((result[19] >> 2) & 1) << 6);
  *(_BYTE *)(a2 + 4) = v21;
  v22 = v21 | (result[21] << 7);
  *(_BYTE *)(a2 + 4) = v22;
  v23 = v22 & 0xFFFFFFDF | (32 * ((result[21] >> 1) & 1));
  *(_BYTE *)(a2 + 4) = v23;
  v24 = (result[28] >> 1) & 2 | v23;
  *(_BYTE *)(a2 + 4) = v24;
  v25 = v24 & 0xFFFFFFEF | (16 * ((result[33] >> 2) & 1));
  *(_BYTE *)(a2 + 4) = v25;
  LOBYTE(v25) = v25 & 0xF7 | (8 * ((result[36] & 2) != 0));
  *(_BYTE *)(a2 + 4) = v25;
  *(_BYTE *)(a2 + 4) = v25 | result[36] & 4;
  v26 = result[5] & 0x10;
  *(_BYTE *)(a2 + 5) = v26;
  v27 = (result[4] >> 1) & 8 | v26;
  *(_BYTE *)(a2 + 5) = v27;
  LOBYTE(v27) = v27 & 0xFB | (4 * ((result[7] & 2) != 0));
  *(_BYTE *)(a2 + 5) = v27;
  v28 = v27 & 0x7F | (result[13] >> 3 << 7);
  *(_BYTE *)(a2 + 5) = v28;
  v29 = v28 & 0xFFFFFFDF | (32 * ((result[24] >> 3) & 1));
  *(_BYTE *)(a2 + 5) = v29;
  LOBYTE(v29) = v29 & 0xFE | ((result[33] & 8) != 0);
  *(_BYTE *)(a2 + 5) = v29;
  LOBYTE(v29) = (result[35] >> 5) & 2 | v29;
  *(_BYTE *)(a2 + 5) = v29;
  *(_BYTE *)(a2 + 5) = (16 * result[40]) & 0x40 | v29;
  v30 = result[25];
  *(_BYTE *)(a2 + 6) = (v30 & 2) != 0;
  v31 = (result[39] >> 3) & 8 | (v30 >> 1) & 1;
  *(_BYTE *)(a2 + 6) = v31;
  LOBYTE(v31) = v31 & 0xBF | (((result[48] & 0x10) != 0) << 6);
  *(_BYTE *)(a2 + 6) = v31;
  v32 = v31 & 0x7F | (result[51] >> 6 << 7);
  *(_BYTE *)(a2 + 6) = v32;
  LOBYTE(v30) = v32 | result[51] & 2;
  *(_BYTE *)(a2 + 6) = v30;
  LOBYTE(v30) = v30 & 0xFB | (4 * (result[52] & 1));
  *(_BYTE *)(a2 + 6) = v30;
  LOBYTE(v30) = (result[52] >> 1) & 0x10 | v30;
  *(_BYTE *)(a2 + 6) = v30;
  *(_BYTE *)(a2 + 6) = (result[55] >> 1) & 0x20 | v30;
  v33 = (result[7] >> 3) & 4;
  *(_BYTE *)(a2 + 7) = v33;
  v34 = result[8] & 2 | v33;
  *(_BYTE *)(a2 + 7) = v34;
  v35 = v34 & 0xFFFFFFBF | (((result[25] >> 3) & 1) << 6);
  *(_BYTE *)(a2 + 7) = v35;
  v36 = (result[25] >> 1) & 8 | v35;
  *(_BYTE *)(a2 + 7) = v36;
  LOBYTE(v36) = v36 & 0xFE | ((result[40] & 8) != 0);
  *(_BYTE *)(a2 + 7) = v36;
  LOBYTE(v36) = (result[46] >> 1) & 0x20 | v36;
  *(_BYTE *)(a2 + 7) = v36;
  LOBYTE(v36) = v36 & 0x7F | (result[47] >> 5 << 7);
  *(_BYTE *)(a2 + 7) = v36;
  *(_BYTE *)(a2 + 7) = (result[47] >> 3) & 0x10 | v36;
  v37 = result[24];
  *(_BYTE *)(a2 + 8) = (4 * v37) & 0x80;
  v38 = result[46] & 4 | (v37 >> 5 << 7);
  *(_BYTE *)(a2 + 8) = v38;
  v39 = (result[46] >> 2) & 0x20 | v38;
  *(_BYTE *)(a2 + 8) = v39;
  v40 = v39 | result[47] & 0x40;
  *(_BYTE *)(a2 + 8) = v40;
  v41 = (result[54] >> 4) & 8 | v40;
  *(_BYTE *)(a2 + 8) = v41;
  LOBYTE(v41) = v41 & 0xFD | (2 * (result[55] & 1));
  *(_BYTE *)(a2 + 8) = v41;
  LOBYTE(v41) = v41 & 0xEF | (16 * ((result[56] & 8) != 0));
  *(_BYTE *)(a2 + 8) = v41;
  *(_BYTE *)(a2 + 8) = ((result[56] & 0x10) != 0) | v41;
  v42 = *result & 4;
  *(_BYTE *)(a2 + 9) = v42;
  v43 = (*result >> 2) & 2 | v42;
  *(_BYTE *)(a2 + 9) = v43;
  v44 = v43 & 0xFFFFFFFE | (result[2] >> 6) & 1;
  *(_BYTE *)(a2 + 9) = v44;
  v45 = v44 & 0xFFFFFFDF | (32 * ((result[12] >> 1) & 1));
  *(_BYTE *)(a2 + 9) = v45;
  LOBYTE(v45) = v45 & 0xF7 | (8 * ((result[24] & 2) != 0));
  *(_BYTE *)(a2 + 9) = v45;
  LOBYTE(v45) = (result[24] >> 1) & 0x40 | v45;
  *(_BYTE *)(a2 + 9) = v45;
  LOBYTE(v45) = v45 | result[42] & 0x10;
  *(_BYTE *)(a2 + 9) = v45;
  *(_BYTE *)(a2 + 9) = result[57] & 0x80 | v45;
  v46 = result[6] << 7;
  *(_BYTE *)(a2 + 10) = v46;
  v47 = v46 & 0xFFFFFFBF | (((result[42] >> 5) & 1) << 6);
  *(_BYTE *)(a2 + 10) = v47;
  v48 = (result[42] >> 2) & 2 | v47;
  *(_BYTE *)(a2 + 10) = v48;
  v49 = v48 & 0xFFFFFFEF | (16 * ((result[54] >> 1) & 1));
  *(_BYTE *)(a2 + 10) = v49;
  v50 = v49 & 0xFFFFFFDF | (32 * ((result[57] >> 3) & 1));
  *(_BYTE *)(a2 + 10) = v50;
  LOBYTE(v50) = v50 | result[57] & 4;
  *(_BYTE *)(a2 + 10) = v50;
  LOBYTE(v50) = v50 & 0xFE | ((result[57] & 0x10) != 0);
  *(_BYTE *)(a2 + 10) = v50;
  *(_BYTE *)(a2 + 10) = (result[58] >> 3) & 8 | v50;
  v51 = result[5];
  *(_BYTE *)(a2 + 11) = (v51 & 0x40) != 0;
  v52 = ((v51 >> 6) | (16 * result[25])) & 0x11;
  *(_BYTE *)(a2 + 11) = v52;
  LOBYTE(v52) = v52 | result[26] & 2;
  *(_BYTE *)(a2 + 11) = v52;
  LOBYTE(v52) = v52 & 0xF7 | (8 * ((result[49] & 2) != 0));
  *(_BYTE *)(a2 + 11) = v52;
  LOBYTE(v52) = (result[49] >> 2) & 4 | v52;
  *(_BYTE *)(a2 + 11) = v52;
  LOBYTE(v52) = v52 | result[50] & 0x20;
  *(_BYTE *)(a2 + 11) = v52;
  v53 = v52 & 0x7F | (result[57] >> 6 << 7);
  *(_BYTE *)(a2 + 11) = v53;
  *(_BYTE *)(a2 + 11) = v53 & 0xBF | (((result[58] & 0x20) != 0) << 6);
  v54 = (8 * result[3]) & 0xFF80;
  *(_BYTE *)(a2 + 12) = (8 * result[3]) & 0x80;
  v55 = v54 & 0xFFFFFFBF | (((result[4] >> 3) & 1) << 6);
  *(_BYTE *)(a2 + 12) = v55;
  v56 = v55 & 0xFFFFFFDF | (32 * (result[26] & 1));
  *(_BYTE *)(a2 + 12) = v56;
  v57 = v56 & 0xFFFFFFF7 | (8 * (result[49] & 1));
  *(_BYTE *)(a2 + 12) = v57;
  v58 = (result[49] >> 1) & 0x10 | v57;
  *(_BYTE *)(a2 + 12) = v58;
  LOBYTE(v58) = v58 & 0xFE | ((result[50] & 4) != 0);
  *(_BYTE *)(a2 + 12) = v58;
  LOBYTE(v58) = (result[57] >> 4) & 2 | v58;
  *(_BYTE *)(a2 + 12) = v58;
  *(_BYTE *)(a2 + 12) = (result[58] >> 2) & 4 | v58;
  v59 = result[4];
  *(_BYTE *)(a2 + 13) = (v59 & 0x20) != 0;
  v60 = ((v59 >> 5) | (2 * result[14])) & 9;
  *(_BYTE *)(a2 + 13) = v60;
  v61 = (result[23] >> 3) & 0x12 | v60;
  *(_BYTE *)(a2 + 13) = v61;
  LOBYTE(v61) = v61 & 0xFB | (4 * ((result[38] & 2) != 0));
  *(_BYTE *)(a2 + 13) = v61;
  v62 = v61 & 0x7F | (result[39] >> 1 << 7);
  *(_BYTE *)(a2 + 13) = v62;
  LOBYTE(v62) = v62 & 0xDF | (32 * ((result[52] & 4) != 0));
  *(_BYTE *)(a2 + 13) = v62;
  *(_BYTE *)(a2 + 13) = (result[52] >> 1) & 0x40 | v62;
  LOBYTE(v62) = result[10];
  *(_BYTE *)(a2 + 14) = (8 * v62) & 0x40;
  LOBYTE(v62) = result[12] & 0x20 | (((v62 & 8) != 0) << 6);
  *(_BYTE *)(a2 + 14) = v62;
  v63 = v62 & 0x7F | (result[23] >> 5 << 7);
  *(_BYTE *)(a2 + 14) = v63;
  v64 = v63 | result[38] & 0x10;
  *(_BYTE *)(a2 + 14) = v64;
  v65 = (result[52] >> 4) & 4 | v64;
  *(_BYTE *)(a2 + 14) = v65;
  LOBYTE(v65) = v65 & 0xF7 | (8 * (result[53] & 1));
  *(_BYTE *)(a2 + 14) = v65;
  LOBYTE(v65) = v65 & 0xFE | ((result[53] & 2) != 0);
  *(_BYTE *)(a2 + 14) = v65;
  *(_BYTE *)(a2 + 14) = (result[53] >> 6) & 2 | v65;
  v66 = result[25] & 4;
  *(_BYTE *)(a2 + 15) = v66;
  v67 = result[40] & 2 | v66;
  *(_BYTE *)(a2 + 15) = v67;
  v68 = v67 & 0xFFFFFFBF | (((result[41] >> 4) & 1) << 6);
  *(_BYTE *)(a2 + 15) = v68;
  v69 = v68 | (result[42] >> 7);
  *(_BYTE *)(a2 + 15) = v69;
  v70 = (result[43] >> 1) & 8 | v69;
  *(_BYTE *)(a2 + 15) = v70;
  LOBYTE(v70) = v70 & 0xEF | (16 * ((result[48] & 8) != 0));
  *(_BYTE *)(a2 + 15) = v70;
  LOBYTE(v70) = v70 | result[48] & 0x80;
  *(_BYTE *)(a2 + 15) = v70;
  *(_BYTE *)(a2 + 15) = (result[48] >> 1) & 0x20 | v70;
  LOBYTE(v70) = result[11] & 0x10;
  *(_BYTE *)(a2 + 16) = v70;
  LOBYTE(v70) = v70 & 0xDF | (32 * ((result[12] & 4) != 0));
  *(_BYTE *)(a2 + 16) = v70;
  LOBYTE(v70) = v70 | result[12] & 0x40;
  *(_BYTE *)(a2 + 16) = v70;
  v71 = v70 & 0x7F | (result[24] >> 2 << 7);
  *(_BYTE *)(a2 + 16) = v71;
  v72 = (result[25] >> 2) & 8 | v71;
  *(_BYTE *)(a2 + 16) = v72;
  LOBYTE(v72) = v72 & 0xFD | (2 * (result[40] & 1));
  *(_BYTE *)(a2 + 16) = v72;
  LOBYTE(v72) = (result[42] >> 4) & 4 | v72;
  *(_BYTE *)(a2 + 16) = v72;
  *(_BYTE *)(a2 + 16) = ((result[48] & 0x20) != 0) | v72;
  v73 = (result[18] >> 4) & 2;
  *(_BYTE *)(a2 + 17) = v73;
  v74 = (result[25] >> 5) & 4 | v73;
  *(_BYTE *)(a2 + 17) = v74;
  v75 = v74 | (result[33] >> 7);
  *(_BYTE *)(a2 + 17) = v75;
  v76 = v75 & 0xFFFFFFDF | (32 * ((result[34] >> 4) & 1));
  *(_BYTE *)(a2 + 17) = v76;
  v77 = v76 & 0xFFFFFFF7 | (8 * ((result[41] >> 2) & 1));
  *(_BYTE *)(a2 + 17) = v77;
  LOBYTE(v77) = (16 * result[42]) & 0x50 | v77;
  *(_BYTE *)(a2 + 17) = v77;
  *(_BYTE *)(a2 + 17) = v77 & 0x7F | (((result[43] & 2) != 0) << 7);
  LOBYTE(v77) = (8 * result[4]) & 0x20;
  *(_BYTE *)(a2 + 18) = v77;
  LOBYTE(v77) = v77 & 0xEF | (16 * (result[5] & 1));
  *(_BYTE *)(a2 + 18) = v77;
  LOBYTE(v77) = v77 & 0xBF | (((result[12] & 8) != 0) << 6);
  *(_BYTE *)(a2 + 18) = v77;
  LOBYTE(v77) = (result[13] >> 3) & 8 | v77;
  *(_BYTE *)(a2 + 18) = v77;
  LOBYTE(v77) = (result[33] >> 4) & 4 | v77;
  *(_BYTE *)(a2 + 18) = v77;
  LOBYTE(v77) = v77 & 0x7F | (result[37] >> 1 << 7);
  *(_BYTE *)(a2 + 18) = v77;
  LOBYTE(v77) = v77 | result[42] & 2;
  *(_BYTE *)(a2 + 18) = v77;
  *(_BYTE *)(a2 + 18) = ((result[43] & 4) != 0) | v77;
  v78 = (result[12] >> 5) & 4;
  *(_BYTE *)(a2 + 19) = v78;
  v79 = v78 & 0xFFFFFFF7 | (8 * ((result[16] >> 1) & 1));
  *(_BYTE *)(a2 + 19) = v79;
  v80 = (result[38] >> 6) & 2 | v79;
  *(_BYTE *)(a2 + 19) = v80;
  LOBYTE(v80) = v80 & 0xFE | ((result[40] & 0x10) != 0);
  *(_BYTE *)(a2 + 19) = v80;
  LOBYTE(v80) = (result[41] >> 1) & 0x10 | v80;
  *(_BYTE *)(a2 + 19) = v80;
  v81 = v80 & 0x7F | (result[44] >> 2 << 7);
  *(_BYTE *)(a2 + 19) = v81;
  LOBYTE(v81) = v81 & 0xBF | (((result[50] & 0x10) != 0) << 6);
  *(_BYTE *)(a2 + 19) = v81;
  *(_BYTE *)(a2 + 19) = (16 * result[52]) & 0x20 | v81;
  v82 = result[13] << 7;
  *(_BYTE *)(a2 + 20) = v82;
  v83 = v82 & 0xFFFFFFBF | ((result[16] & 1) << 6);
  *(_BYTE *)(a2 + 20) = v83;
  v84 = v83 | (result[30] >> 7);
  *(_BYTE *)(a2 + 20) = v84;
  LOBYTE(v84) = v84 & 0xFD | (2 * (result[31] & 1));
  *(_BYTE *)(a2 + 20) = v84;
  LOBYTE(v84) = v84 & 0xDF | (32 * ((result[41] & 8) != 0));
  *(_BYTE *)(a2 + 20) = v84;
  LOBYTE(v84) = (result[44] >> 2) & 4 | v84;
  *(_BYTE *)(a2 + 20) = v84;
  LOBYTE(v84) = (result[54] >> 1) & 0x10 | v84;
  *(_BYTE *)(a2 + 20) = v84;
  *(_BYTE *)(a2 + 20) = (result[54] >> 3) & 8 | v84;
  LOBYTE(v84) = (8 * result[4]) & 0x10;
  *(_BYTE *)(a2 + 21) = v84;
  LOBYTE(v84) = v84 & 0xDF | (32 * ((result[5] & 2) != 0));
  *(_BYTE *)(a2 + 21) = v84;
  LOBYTE(v84) = (result[12] >> 1) & 8 | v84;
  *(_BYTE *)(a2 + 21) = v84;
  LOBYTE(v84) = (result[13] >> 1) & 0x40 | v84;
  *(_BYTE *)(a2 + 21) = v84;
  LOBYTE(v84) = v84 & 0xFE | result[39] & 1;
  *(_BYTE *)(a2 + 21) = v84;
  LOBYTE(v84) = result[40] & 0x80 | v84;
  *(_BYTE *)(a2 + 21) = v84;
  LOBYTE(v84) = (result[50] >> 2) & 2 | v84;
  *(_BYTE *)(a2 + 21) = v84;
  *(_BYTE *)(a2 + 21) = (result[51] >> 5) & 4 | v84;
  v85 = (result[1] >> 4) & 4;
  *(_BYTE *)(a2 + 22) = v85;
  v86 = v85 & 0xFFFFFFF7 | (8 * ((result[2] >> 2) & 1));
  *(_BYTE *)(a2 + 22) = v86;
  v87 = v86 & 0xFFFFFFEF | (16 * (result[9] & 1));
  *(_BYTE *)(a2 + 22) = v87;
  v88 = v87 | result[9] & 2;
  *(_BYTE *)(a2 + 22) = v88;
  v89 = result[21] & 0x60 | v88;
  *(_BYTE *)(a2 + 22) = v89;
  v90 = v89 & 0xFFFFFFFE | (result[37] >> 2) & 1;
  *(_BYTE *)(a2 + 22) = v90;
  *(_BYTE *)(a2 + 22) = v90 & 0x7F | (((result[46] & 2) != 0) << 7);
  v91 = (result[6] >> 6) & 2;
  *(_BYTE *)(a2 + 23) = v91;
  v92 = (result[7] >> 2) & 4 | v91;
  *(_BYTE *)(a2 + 23) = v92;
  v93 = v92 & 0xFFFFFFFE | (result[8] >> 6) & 1;
  *(_BYTE *)(a2 + 23) = v93;
  LOBYTE(v93) = v93 | (result[15] << 7);
  *(_BYTE *)(a2 + 23) = v93;
  LOBYTE(v93) = result[34] & 0x40 | v93;
  *(_BYTE *)(a2 + 23) = v93;
  LOBYTE(v93) = result[47] & 8 | v93;
  *(_BYTE *)(a2 + 23) = v93;
  LOBYTE(v93) = v93 & 0xEF | (16 * ((result[49] & 4) != 0));
  *(_BYTE *)(a2 + 23) = v93;
  *(_BYTE *)(a2 + 23) = (8 * result[54]) & 0x20 | v93;
  v94 = (result[14] >> 1) & 0x20;
  *(_BYTE *)(a2 + 24) = v94;
  v95 = v94 & 0xFFFFFFEF | (16 * (result[32] & 1));
  *(_BYTE *)(a2 + 24) = v95;
  v96 = v95 & 0xFFFFFFFE | (result[32] >> 1) & 1;
  *(_BYTE *)(a2 + 24) = v96;
  v97 = v96 & 0xFFFFFFBF | (((result[34] >> 5) & 1) << 6);
  *(_BYTE *)(a2 + 24) = v97;
  LOBYTE(v97) = v97 | (result[54] << 7);
  *(_BYTE *)(a2 + 24) = v97;
  LOBYTE(v97) = v97 & 0xF7 | (8 * (result[56] & 1));
  *(_BYTE *)(a2 + 24) = v97;
  LOBYTE(v97) = v97 | result[56] & 2;
  *(_BYTE *)(a2 + 24) = v97;
  *(_BYTE *)(a2 + 24) = (2 * result[57]) & 4 | v97;
  LOBYTE(v97) = (result[6] >> 3) & 8;
  *(_BYTE *)(a2 + 25) = v97;
  LOBYTE(v97) = (result[7] >> 1) & 4 | v97;
  *(_BYTE *)(a2 + 25) = v97;
  LOBYTE(v97) = (result[8] >> 3) & 0x10 | v97;
  *(_BYTE *)(a2 + 25) = v97;
  v98 = v97 & 0x7F | (result[20] >> 5 << 7);
  *(_BYTE *)(a2 + 25) = v98;
  v99 = (result[45] >> 2) & 0x20 | v98;
  *(_BYTE *)(a2 + 25) = v99;
  v100 = (result[47] >> 3) & 2 | v99;
  *(_BYTE *)(a2 + 25) = v100;
  LOBYTE(v100) = v100 & 0xBF | (((result[49] & 8) != 0) << 6);
  *(_BYTE *)(a2 + 25) = v100;
  *(_BYTE *)(a2 + 25) = v100 | result[57] & 1;
  v101 = *result;
  *(_BYTE *)(a2 + 26) = (2 * v101) & 0x80;
  v102 = (*result >> 6) & 2 | (v101 >> 6 << 7);
  *(_BYTE *)(a2 + 26) = v102;
  v103 = v102 & 0xFFFFFFFE | (result[1] >> 4) & 1;
  *(_BYTE *)(a2 + 26) = v103;
  v104 = v103 & 0xFFFFFFBF | ((result[3] & 1) << 6);
  *(_BYTE *)(a2 + 26) = v104;
  v105 = v104 & 0xFFFFFFFB | (4 * ((result[3] >> 1) & 1));
  *(_BYTE *)(a2 + 26) = v105;
  v106 = v105 & 0xFFFFFFDF | (32 * ((result[18] >> 2) & 1));
  *(_BYTE *)(a2 + 26) = v106;
  LOBYTE(v106) = v106 & 0xF7 | (8 * ((result[18] & 2) != 0));
  *(_BYTE *)(a2 + 26) = v106;
  *(_BYTE *)(a2 + 26) = (result[38] >> 2) & 0x10 | v106;
  v107 = *result & 0x20;
  *(_BYTE *)(a2 + 27) = v107;
  v108 = v107 & 0xFFFFFFFE | (result[1] >> 5) & 1;
  *(_BYTE *)(a2 + 27) = v108;
  v109 = v108 | result[2] & 0x10;
  *(_BYTE *)(a2 + 27) = v109;
  v110 = v109 & 0xFFFFFFBF | (((result[9] >> 4) & 1) << 6);
  *(_BYTE *)(a2 + 27) = v110;
  LOBYTE(v110) = v110 & 0xF7 | (8 * ((result[9] & 4) != 0));
  *(_BYTE *)(a2 + 27) = v110;
  LOBYTE(v110) = (result[20] >> 2) & 2 | v110;
  *(_BYTE *)(a2 + 27) = v110;
  LOBYTE(v110) = v110 & 0x7F | (result[36] >> 5 << 7);
  *(_BYTE *)(a2 + 27) = v110;
  *(_BYTE *)(a2 + 27) = (result[38] >> 3) & 4 | v110;
  v111 = result[15];
  *(_BYTE *)(a2 + 28) = (2 * v111) & 4;
  v112 = (result[17] >> 1) & 8 | (4 * ((v111 >> 1) & 1));
  *(_BYTE *)(a2 + 28) = v112;
  LOBYTE(v112) = v112 & 0xFE | ((result[39] & 8) != 0);
  *(_BYTE *)(a2 + 28) = v112;
  LOBYTE(v112) = (result[46] >> 1) & 0x10 | v112;
  *(_BYTE *)(a2 + 28) = v112;
  LOBYTE(v112) = (result[47] >> 1) & 2 | v112;
  *(_BYTE *)(a2 + 28) = v112;
  v113 = v112 & 0x7F | (result[51] >> 4 << 7);
  *(_BYTE *)(a2 + 28) = v113;
  LOBYTE(v113) = v113 & 0xBF | (((result[55] & 8) != 0) << 6);
  *(_BYTE *)(a2 + 28) = v113;
  *(_BYTE *)(a2 + 28) = (32 * (result[58] & 1)) | v113;
  v114 = result[14] & 0x80;
  *(_BYTE *)(a2 + 29) = v114;
  v115 = result[16] & 0x40 | v114;
  *(_BYTE *)(a2 + 29) = v115;
  v116 = (result[36] >> 6) & 2 | v115;
  *(_BYTE *)(a2 + 29) = v116;
  v117 = v116 & 0xFFFFFFFE | result[37] & 1;
  *(_BYTE *)(a2 + 29) = v117;
  v118 = v117 & 0xFFFFFFDF | (32 * ((result[46] >> 4) & 1));
  *(_BYTE *)(a2 + 29) = v118;
  v119 = (result[51] >> 3) & 4 | v118;
  *(_BYTE *)(a2 + 29) = v119;
  *(_BYTE *)(a2 + 29) = v119 & 0xE7 | (8 * ((result[58] >> 2) & 3));
  LOBYTE(v119) = *result & 0x10;
  *(_BYTE *)(a2 + 30) = v119;
  LOBYTE(v119) = result[2] & 0x20 | v119;
  *(_BYTE *)(a2 + 30) = v119;
  LOBYTE(v119) = v119 & 0xBF | (((result[9] & 8) != 0) << 6);
  *(_BYTE *)(a2 + 30) = v119;
  LOBYTE(v119) = (result[9] >> 2) & 8 | v119;
  *(_BYTE *)(a2 + 30) = v119;
  LOBYTE(v119) = v119 & 0x7F | (result[39] >> 2 << 7);
  *(_BYTE *)(a2 + 30) = v119;
  LOBYTE(v119) = v119 & 0xFE | result[47] & 1;
  *(_BYTE *)(a2 + 30) = v119;
  LOBYTE(v119) = result[55] & 2 | v119;
  *(_BYTE *)(a2 + 30) = v119;
  *(_BYTE *)(a2 + 30) = (2 * result[58]) & 4 | v119;
  LOBYTE(v119) = *result;
  *(_BYTE *)(a2 + 31) = 4 * (*result & 3);
  v120 = (result[5] >> 3) & 0x10 | (4 * (v119 & 3));
  *(_BYTE *)(a2 + 31) = v120;
  v121 = (result[5] >> 4) & 2 | v120;
  *(_BYTE *)(a2 + 31) = v121;
  v122 = v121 & 0xFFFFFFDF | (32 * ((result[16] >> 4) & 1));
  *(_BYTE *)(a2 + 31) = v122;
  v123 = (result[16] >> 1) & 0x40 | v122;
  *(_BYTE *)(a2 + 31) = v123;
  v124 = v123 & 0xFFFFFFFE | (result[36] >> 6) & 1;
  *(_BYTE *)(a2 + 31) = v124;
  *(_BYTE *)(a2 + 31) = v124 & 0x7F | (((result[43] & 8) != 0) << 7);
  v125 = (result[8] >> 3) & 6;
  *(_BYTE *)(a2 + 32) = v125;
  LOBYTE(v125) = v125 & 0xFE | ((result[11] & 8) != 0);
  *(_BYTE *)(a2 + 32) = v125;
  v126 = v125 & 0x7F | (result[20] >> 6 << 7);
  *(_BYTE *)(a2 + 32) = v126;
  v127 = (result[39] >> 1) & 0x40 | v126;
  *(_BYTE *)(a2 + 32) = v127;
  v128 = v127 | result[45] & 0x10;
  *(_BYTE *)(a2 + 32) = v128;
  v129 = (result[45] >> 3) & 8 | v128;
  *(_BYTE *)(a2 + 32) = v129;
  *(_BYTE *)(a2 + 32) = v129 & 0xDF | (32 * ((result[54] & 0x10) != 0));
  v130 = result[20];
  *(_BYTE *)(a2 + 33) = (2 * v130) & 0x20;
  v131 = (result[35] >> 1) & 0x10 | (32 * ((v130 >> 4) & 1));
  *(_BYTE *)(a2 + 33) = v131;
  v132 = v131 & 0xFFFFFFFE | (result[35] >> 4) & 1;
  *(_BYTE *)(a2 + 33) = v132;
  LOBYTE(v132) = v132 & 0xBF | (((result[39] & 0x20) != 0) << 6);
  *(_BYTE *)(a2 + 33) = v132;
  LOBYTE(v132) = v132 & 0x7F | (result[54] >> 3 << 7);
  *(_BYTE *)(a2 + 33) = v132;
  LOBYTE(v132) = (result[55] >> 2) & 0xC | v132;
  *(_BYTE *)(a2 + 33) = v132;
  *(_BYTE *)(a2 + 33) = (result[55] >> 6) & 2 | v132;
  LOBYTE(v132) = result[8] & 0xC;
  *(_BYTE *)(a2 + 34) = v132;
  LOBYTE(v132) = v132 & 0xEF | (16 * ((result[11] & 4) != 0));
  *(_BYTE *)(a2 + 34) = v132;
  v133 = v132 & 0x7F | (result[18] >> 4 << 7);
  *(_BYTE *)(a2 + 34) = v133;
  v134 = v133 & 0xFFFFFFDF | (32 * (result[43] & 1));
  *(_BYTE *)(a2 + 34) = v134;
  v135 = v134 & 0xFFFFFFBF | (((result[45] >> 1) & 1) << 6);
  *(_BYTE *)(a2 + 34) = v135;
  v136 = (result[45] >> 4) & 2 | v135;
  *(_BYTE *)(a2 + 34) = v136;
  *(_BYTE *)(a2 + 34) = v136 & 0xFE | ((result[55] & 4) != 0);
  v137 = result[1] & 0x80;
  *(_BYTE *)(a2 + 35) = v137;
  v138 = result[2] & 2 | v137;
  *(_BYTE *)(a2 + 35) = v138;
  v139 = (result[2] >> 1) & 0x40 | v138;
  *(_BYTE *)(a2 + 35) = v139;
  v140 = v139 & 0xFFFFFFFE | (result[2] >> 3) & 1;
  *(_BYTE *)(a2 + 35) = v140;
  LOBYTE(v140) = v140 | result[3] & 4;
  *(_BYTE *)(a2 + 35) = v140;
  LOBYTE(v140) = v140 & 0xDF | (32 * ((result[15] & 8) != 0));
  *(_BYTE *)(a2 + 35) = v140;
  LOBYTE(v140) = (result[15] >> 1) & 8 | v140;
  *(_BYTE *)(a2 + 35) = v140;
  *(_BYTE *)(a2 + 35) = (result[32] >> 1) & 0x10 | v140;
  v141 = result[2] & 1;
  *(_BYTE *)(a2 + 36) = v141;
  v142 = v141 & 0xFFFFFFEF | (16 * ((result[6] >> 2) & 1));
  *(_BYTE *)(a2 + 36) = v142;
  LOBYTE(v142) = v142 | result[6] & 0x20;
  *(_BYTE *)(a2 + 36) = v142;
  LOBYTE(v142) = result[11] & 0x40 | v142;
  *(_BYTE *)(a2 + 36) = v142;
  LOBYTE(v142) = v142 & 0xF7 | (8 * (result[14] & 1));
  *(_BYTE *)(a2 + 36) = v142;
  LOBYTE(v142) = (result[18] >> 2) & 2 | v142;
  *(_BYTE *)(a2 + 36) = v142;
  LOBYTE(v142) = v142 & 0x7F | (result[31] >> 4 << 7);
  *(_BYTE *)(a2 + 36) = v142;
  *(_BYTE *)(a2 + 36) = (result[32] >> 2) & 4 | v142;
  LOBYTE(v142) = result[19];
  *(_BYTE *)(a2 + 37) = 4 * (v142 & 1);
  LOBYTE(v120) = (2 * result[21]) & 8 | (4 * (v142 & 1));
  *(_BYTE *)(a2 + 37) = v120;
  LOBYTE(v120) = v120 & 0xFE | ((result[34] & 4) != 0);
  *(_BYTE *)(a2 + 37) = v120;
  LOBYTE(v142) = v120 | result[41] & 2;
  *(_BYTE *)(a2 + 37) = v142;
  LOBYTE(v142) = (result[43] >> 1) & 0x10 | v142;
  *(_BYTE *)(a2 + 37) = v142;
  LOBYTE(v142) = v142 | result[44] & 0x80;
  *(_BYTE *)(a2 + 37) = v142;
  LOBYTE(v142) = (result[49] >> 1) & 0x20 | v142;
  *(_BYTE *)(a2 + 37) = v142;
  *(_BYTE *)(a2 + 37) = ((result[50] & 1) << 6) | v142;
  v143 = result[19];
  *(_BYTE *)(a2 + 38) = ((_BYTE)v143 << 6) & 0x80;
  v144 = (result[20] >> 1) & 0x40 | (v143 >> 1 << 7);
  *(_BYTE *)(a2 + 38) = v144;
  v145 = (result[36] >> 2) & 2 | v144;
  *(_BYTE *)(a2 + 38) = v145;
  v146 = v145 & 0xFFFFFFFE | (result[36] >> 4) & 1;
  *(_BYTE *)(a2 + 38) = v146;
  v147 = (result[43] >> 1) & 0x20 | v146;
  *(_BYTE *)(a2 + 38) = v147;
  v148 = (result[44] >> 3) & 4 | v147;
  *(_BYTE *)(a2 + 38) = v148;
  LOBYTE(v148) = v148 & 0xEF | (16 * ((result[52] & 8) != 0));
  *(_BYTE *)(a2 + 38) = v148;
  *(_BYTE *)(a2 + 38) = (result[52] >> 1) & 8 | v148;
  LOBYTE(v148) = (16 * result[6]) & 0x20;
  *(_BYTE *)(a2 + 39) = v148;
  LOBYTE(v148) = v148 & 0xEF | (16 * (result[7] & 1));
  *(_BYTE *)(a2 + 39) = v148;
  LOBYTE(v148) = v148 & 0xF7 | (8 * (result[12] & 1));
  *(_BYTE *)(a2 + 39) = v148;
  LOBYTE(v148) = v148 & 0xBF | (((result[14] & 2) != 0) << 6);
  *(_BYTE *)(a2 + 39) = v148;
  v149 = v148 & 0x7F | (result[34] >> 3 << 7);
  *(_BYTE *)(a2 + 39) = v149;
  LOBYTE(v149) = v149 & 0xFE | ((result[40] & 0x40) != 0);
  *(_BYTE *)(a2 + 39) = v149;
  LOBYTE(v149) = (result[49] >> 5) & 4 | v149;
  *(_BYTE *)(a2 + 39) = v149;
  *(_BYTE *)(a2 + 39) = v149 | result[50] & 2;
  v150 = (result[4] >> 3) & 8;
  *(_BYTE *)(a2 + 40) = v150;
  v151 = (result[4] >> 5) & 4 | v150;
  *(_BYTE *)(a2 + 40) = v151;
  v152 = (result[10] >> 3) & 0x10 | v151;
  *(_BYTE *)(a2 + 40) = v152;
  v153 = (result[10] >> 5) & 2 | v152;
  *(_BYTE *)(a2 + 40) = v153;
  v154 = v153 & 0xFFFFFFDF | (32 * ((result[17] >> 2) & 1));
  *(_BYTE *)(a2 + 40) = v154;
  v155 = v154 & 0xFFFFFFBF | (((result[17] >> 5) & 1) << 6);
  *(_BYTE *)(a2 + 40) = v155;
  LOBYTE(v155) = v155 & 0xFE | ((result[31] & 0x40) != 0);
  *(_BYTE *)(a2 + 40) = v155;
  *(_BYTE *)(a2 + 40) = v155 | result[35] & 0x80;
  v156 = result[13];
  *(_BYTE *)(a2 + 41) = (2 * v156) & 4;
  v157 = (result[14] >> 2) & 2 | (4 * ((v156 >> 1) & 1));
  *(_BYTE *)(a2 + 41) = v157;
  LOBYTE(v157) = v157 & 0xFE | ((result[16] & 0x20) != 0);
  *(_BYTE *)(a2 + 41) = v157;
  v158 = v157 & 0x7F | (result[22] >> 5 << 7);
  *(_BYTE *)(a2 + 41) = v158;
  v159 = v158 | result[37] & 0x40;
  *(_BYTE *)(a2 + 41) = v159;
  v160 = v159 & 0xFFFFFFEF | (16 * ((result[38] >> 2) & 1));
  *(_BYTE *)(a2 + 41) = v160;
  LOBYTE(v160) = v160 & 0xF7 | (8 * (result[41] & 1));
  *(_BYTE *)(a2 + 41) = v160;
  *(_BYTE *)(a2 + 41) = (32 * (result[46] & 1)) | v160;
  v161 = result[22];
  *(_BYTE *)(a2 + 42) = (2 * v161) & 0x20;
  v162 = (result[32] >> 2) & 0x10 | (32 * ((v161 >> 4) & 1));
  *(_BYTE *)(a2 + 42) = v162;
  v163 = v162 | (result[32] >> 7);
  *(_BYTE *)(a2 + 42) = v163;
  v164 = (result[37] >> 1) & 0x40 | v163;
  *(_BYTE *)(a2 + 42) = v164;
  LOBYTE(v164) = v164 & 0xF7 | (8 * ((result[44] & 2) != 0));
  *(_BYTE *)(a2 + 42) = v164;
  LOBYTE(v164) = (result[44] >> 2) & 2 | v164;
  *(_BYTE *)(a2 + 42) = v164;
  LOBYTE(v164) = v164 | result[45] & 4;
  *(_BYTE *)(a2 + 42) = v164;
  *(_BYTE *)(a2 + 42) = (16 * result[46]) & 0x80 | v164;
  v165 = result[13] & 4;
  *(_BYTE *)(a2 + 43) = v165;
  v166 = (result[14] >> 2) & 8 | v165;
  *(_BYTE *)(a2 + 43) = v166;
  LOBYTE(v166) = v166 & 0xEF | (16 * ((result[17] & 8) != 0));
  *(_BYTE *)(a2 + 43) = v166;
  v167 = v166 & 0x7F | (result[20] >> 2 << 7);
  *(_BYTE *)(a2 + 43) = v167;
  LOBYTE(v167) = v167 & 0xDF | (32 * (result[36] & 1));
  *(_BYTE *)(a2 + 43) = v167;
  LOBYTE(v167) = v167 & 0xBF | (((result[38] & 8) != 0) << 6);
  *(_BYTE *)(a2 + 43) = v167;
  LOBYTE(v167) = (result[40] >> 4) & 2 | v167;
  *(_BYTE *)(a2 + 43) = v167;
  *(_BYTE *)(a2 + 43) = ((result[45] & 8) != 0) | v167;
  v168 = result[9] >> 5;
  *(_BYTE *)(a2 + 44) = v168 & 4;
  LOBYTE(v168) = (v168 | (result[10] << 6)) & 0x7C;
  *(_BYTE *)(a2 + 44) = v168;
  LOBYTE(v168) = v168 | (result[10] >> 2 << 7);
  *(_BYTE *)(a2 + 44) = v168;
  LOBYTE(v168) = v168 | result[10] & 2;
  *(_BYTE *)(a2 + 44) = v168;
  LOBYTE(v168) = ((result[10] & 0x20) != 0) | v168;
  *(_BYTE *)(a2 + 44) = v168;
  LOBYTE(v168) = (4 * result[16]) & 0x20 | v168;
  *(_BYTE *)(a2 + 44) = v168;
  LOBYTE(v168) = (2 * result[16]) & 8 | v168;
  *(_BYTE *)(a2 + 44) = v168;
  *(_BYTE *)(a2 + 44) = (4 * result[30]) & 0x10 | v168;
  v169 = result[10];
  *(_BYTE *)(a2 + 45) = (v169 & 0x10) != 0;
  v170 = (result[17] >> 1) & 0x20 | (v169 >> 4) & 1;
  *(_BYTE *)(a2 + 45) = v170;
  v171 = (result[19] >> 1) & 0x40 | v170;
  *(_BYTE *)(a2 + 45) = v171;
  LOBYTE(v171) = v171 & 0xEF | (16 * (result[20] & 1));
  *(_BYTE *)(a2 + 45) = v171;
  LOBYTE(v171) = v171 | result[20] & 2;
  *(_BYTE *)(a2 + 45) = v171;
  LOBYTE(v171) = v171 & 0xFB | (4 * (result[30] & 1));
  *(_BYTE *)(a2 + 45) = v171;
  LOBYTE(v171) = v171 & 0x7F | (result[33] >> 1 << 7);
  *(_BYTE *)(a2 + 45) = v171;
  *(_BYTE *)(a2 + 45) = (8 * (result[33] & 1)) | v171;
  LOBYTE(v171) = result[1];
  *(_BYTE *)(a2 + 46) = (v171 & 1) << 6;
  LOBYTE(v170) = (8 * result[5]) & 0x20 | ((v171 & 1) << 6);
  *(_BYTE *)(a2 + 46) = v170;
  LOBYTE(v171) = (result[5] >> 2) & 2 | v170;
  *(_BYTE *)(a2 + 46) = v171;
  v172 = v171 & 0x7F | (result[31] >> 5 << 7);
  *(_BYTE *)(a2 + 46) = v172;
  v173 = v172 & 0xFFFFFFFE | (result[35] >> 3) & 1;
  *(_BYTE *)(a2 + 46) = v173;
  v174 = (result[50] >> 2) & 0x10 | v173;
  *(_BYTE *)(a2 + 46) = v174;
  LOBYTE(v174) = v174 & 0xFB | (4 * (result[51] & 1));
  *(_BYTE *)(a2 + 46) = v174;
  *(_BYTE *)(a2 + 46) = (2 * result[56]) & 8 | v174;
  LOBYTE(v174) = result[8];
  *(_BYTE *)(a2 + 47) = 32 * (v174 & 1);
  v175 = (result[21] >> 7) & 0xFFFFFFDF | (32 * (v174 & 1));
  *(_BYTE *)(a2 + 47) = v175;
  LOBYTE(v175) = v175 & 0xFB | (4 * (result[22] & 1));
  *(_BYTE *)(a2 + 47) = v175;
  LOBYTE(v174) = v175 | result[22] & 2;
  *(_BYTE *)(a2 + 47) = v174;
  LOBYTE(v174) = v174 & 0xEF | (16 * ((result[31] & 2) != 0));
  *(_BYTE *)(a2 + 47) = v174;
  LOBYTE(v174) = (result[31] >> 4) & 8 | v174;
  *(_BYTE *)(a2 + 47) = v174;
  LOBYTE(v174) = (32 * result[48]) & 0x40 | v174;
  *(_BYTE *)(a2 + 47) = v174;
  *(_BYTE *)(a2 + 47) = (8 * result[53]) & 0x80 | v174;
  v176 = result[48] & 1;
  *(_BYTE *)(a2 + 48) = v176;
  v177 = v176 | (4 * ((result[3] >> 3) & 1));
  *(_BYTE *)(a2 + 48) = v177;
  v178 = (result[7] >> 6) & 2 | v177;
  *(_BYTE *)(a2 + 48) = v178;
  v179 = (result[24] >> 2) & 0x10 | v178;
  *(_BYTE *)(a2 + 48) = v179;
  LOBYTE(v179) = v179 | result[25] & 0x40;
  *(_BYTE *)(a2 + 48) = v179;
  LOBYTE(v179) = v179 & 0xDF | (32 * ((result[28] & 8) != 0));
  *(_BYTE *)(a2 + 48) = v179;
  LOBYTE(v179) = v179 & 0x7F | (result[29] >> 6 << 7);
  *(_BYTE *)(a2 + 48) = v179;
  *(_BYTE *)(a2 + 48) = (result[29] >> 2) & 8 | v179;
  LOBYTE(v179) = result[9] & 0x40;
  *(_BYTE *)(a2 + 49) = v179;
  LOBYTE(v179) = result[13] & 0x20 | v179;
  *(_BYTE *)(a2 + 49) = v179;
  LOBYTE(v179) = (result[13] >> 3) & 2 | v179;
  *(_BYTE *)(a2 + 49) = v179;
  LOBYTE(v179) = v179 & 0x7F | (result[26] >> 6 << 7);
  *(_BYTE *)(a2 + 49) = v179;
  LOBYTE(v179) = v179 | (result[26] >> 7);
  *(_BYTE *)(a2 + 49) = v179;
  LOBYTE(v179) = (result[41] >> 2) & 0x10 | v179;
  *(_BYTE *)(a2 + 49) = v179;
  LOBYTE(v179) = (result[41] >> 5) & 4 | v179;
  *(_BYTE *)(a2 + 49) = v179;
  *(_BYTE *)(a2 + 49) = (4 * result[47]) & 8 | v179;
  v180 = (result[21] >> 3) & 3;
  *(_BYTE *)(a2 + 50) = v180;
  v181 = v180 & 0xFFFFFFFB | (4 * (result[27] & 1));
  *(_BYTE *)(a2 + 50) = v181;
  v182 = (result[27] >> 1) & 0x20 | v181;
  *(_BYTE *)(a2 + 50) = v182;
  LOBYTE(v182) = v182 & 0xEF | (16 * ((result[32] & 4) != 0));
  *(_BYTE *)(a2 + 50) = v182;
  LOBYTE(v182) = v182 | result[32] & 8;
  *(_BYTE *)(a2 + 50) = v182;
  LOBYTE(v182) = v182 & 0x7F | (result[56] >> 6 << 7);
  *(_BYTE *)(a2 + 50) = v182;
  *(_BYTE *)(a2 + 50) = (result[56] >> 1) & 0x40 | v182;
  v183 = result[1] & 6;
  *(_BYTE *)(a2 + 51) = v183;
  v184 = v183 & 0xFFFFFFDF | (32 * ((result[26] >> 2) & 1));
  *(_BYTE *)(a2 + 51) = v184;
  v185 = v184 & 0xFFFFFFEF | (16 * ((result[26] >> 3) & 1));
  *(_BYTE *)(a2 + 51) = v185;
  v186 = v185 & 0xFFFFFFFE | (result[27] >> 5) & 1;
  *(_BYTE *)(a2 + 51) = v186;
  v187 = v186 & 0xFFFFFFBF | (((result[28] >> 1) & 1) << 6);
  *(_BYTE *)(a2 + 51) = v187;
  v188 = (result[28] >> 1) & 8 | v187;
  *(_BYTE *)(a2 + 51) = v188;
  *(_BYTE *)(a2 + 51) = v188 & 0x7F | (((result[29] & 4) != 0) << 7);
  LOBYTE(v188) = result[6];
  *(_BYTE *)(a2 + 52) = (4 * v188) & 0x60;
  LOBYTE(v188) = (result[28] >> 6) & 2 | (4 * v188) & 0x62;
  *(_BYTE *)(a2 + 52) = v188;
  v189 = v188 & 0x7F | (result[29] >> 3 << 7);
  *(_BYTE *)(a2 + 52) = v189;
  v190 = v189 & 0xFFFFFFEF | (16 * ((result[29] >> 1) & 1));
  *(_BYTE *)(a2 + 52) = v190;
  LOBYTE(v190) = v190 & 0xFE | result[29] & 1;
  *(_BYTE *)(a2 + 52) = v190;
  LOBYTE(v190) = v190 & 0xF7 | (8 * ((result[51] & 4) != 0));
  *(_BYTE *)(a2 + 52) = v190;
  *(_BYTE *)(a2 + 52) = (result[51] >> 1) & 4 | v190;
  LOBYTE(v190) = result[53] & 0x40;
  *(_BYTE *)(a2 + 53) = v190;
  LOBYTE(v190) = result[3] & 0x20 | v190;
  *(_BYTE *)(a2 + 53) = v190;
  LOBYTE(v190) = (result[23] >> 4) & 4 | v190;
  *(_BYTE *)(a2 + 53) = v190;
  LOBYTE(v190) = v190 | result[24] & 0x11;
  *(_BYTE *)(a2 + 53) = v190;
  LOBYTE(v190) = (result[28] >> 5) & 2 | v190;
  *(_BYTE *)(a2 + 53) = v190;
  LOBYTE(v190) = (result[29] >> 1) & 8 | v190;
  *(_BYTE *)(a2 + 53) = v190;
  *(_BYTE *)(a2 + 53) = (4 * result[56]) & 0x80 | v190;
  LOBYTE(v190) = (result[1] >> 1) & 4;
  *(_BYTE *)(a2 + 54) = v190;
  LOBYTE(v190) = (result[3] >> 6) & 2 | v190;
  *(_BYTE *)(a2 + 54) = v190;
  v191 = v190 & 0x7F | (result[23] >> 3 << 7);
  *(_BYTE *)(a2 + 54) = v191;
  v192 = v191 & 0xFFFFFFF7 | (8 * ((result[23] >> 2) & 1));
  *(_BYTE *)(a2 + 54) = v192;
  v193 = v192 & 0xFFFFFFBF | (((result[30] >> 4) & 1) << 6);
  *(_BYTE *)(a2 + 54) = v193;
  v194 = v193 & 0xFFFFFFEF | (16 * ((result[30] >> 3) & 1));
  *(_BYTE *)(a2 + 54) = v194;
  LOBYTE(v194) = v194 & 0xDF | (32 * ((result[31] & 8) != 0));
  *(_BYTE *)(a2 + 54) = v194;
  *(_BYTE *)(a2 + 54) = ((result[53] & 0x20) != 0) | v194;
  v195 = result[7];
  *(_BYTE *)(a2 + 55) = (16 * v195) & 0x40;
  v196 = (result[11] >> 2) & 0x20 | (((v195 >> 2) & 1) << 6);
  *(_BYTE *)(a2 + 55) = v196;
  v197 = (result[11] >> 4) & 2 | v196;
  *(_BYTE *)(a2 + 55) = v197;
  v198 = v197 & 0xFFFFFFFE | (result[22] >> 3) & 1;
  *(_BYTE *)(a2 + 55) = v198;
  v199 = v198 | (result[28] << 7);
  *(_BYTE *)(a2 + 55) = v199;
  v200 = (result[44] >> 2) & 0x10 | v199;
  *(_BYTE *)(a2 + 55) = v200;
  LOBYTE(v200) = v200 & 0xFB | (4 * (result[45] & 1));
  *(_BYTE *)(a2 + 55) = v200;
  *(_BYTE *)(a2 + 55) = (result[50] >> 4) & 8 | v200;
  v201 = (result[22] >> 2) & 0x10;
  *(_BYTE *)(a2 + 56) = v201;
  v202 = (result[22] >> 4) & 8 | v201;
  *(_BYTE *)(a2 + 56) = v202;
  v203 = v202 & 0xFFFFFFDF | (32 * ((result[27] >> 4) & 1));
  *(_BYTE *)(a2 + 56) = v203;
  v204 = (result[27] >> 5) & 4 | v203;
  *(_BYTE *)(a2 + 56) = v204;
  v205 = (result[29] >> 6) & 2 | v204;
  *(_BYTE *)(a2 + 56) = v205;
  LOBYTE(v205) = v205 & 0xFE | ((result[30] & 2) != 0);
  *(_BYTE *)(a2 + 56) = v205;
  LOBYTE(v205) = v205 & 0x7F | (result[53] >> 2 << 7);
  *(_BYTE *)(a2 + 56) = v205;
  *(_BYTE *)(a2 + 56) = (8 * result[53]) & 0x40 | v205;
  v206 = (result[3] >> 4) & 4;
  *(_BYTE *)(a2 + 57) = v206;
  LOBYTE(v206) = v206 & 0xFD | (2 * (result[4] & 1));
  *(_BYTE *)(a2 + 57) = v206;
  v207 = v206 & 0x7F | (result[23] >> 1 << 7);
  *(_BYTE *)(a2 + 57) = v207;
  LOBYTE(v207) = v207 & 0xF7 | (8 * (result[23] & 1));
  *(_BYTE *)(a2 + 57) = v207;
  LOBYTE(v207) = v207 & 0xFE | ((result[27] & 8) != 0);
  *(_BYTE *)(a2 + 57) = v207;
  LOBYTE(v207) = v207 | result[30] & 0x40;
  *(_BYTE *)(a2 + 57) = v207;
  LOBYTE(v207) = (result[30] >> 1) & 0x10 | v207;
  *(_BYTE *)(a2 + 57) = v207;
  *(_BYTE *)(a2 + 57) = (8 * result[31]) & 0x20 | v207;
  v208 = result[7] & 0x40;
  *(_BYTE *)(a2 + 58) = v208;
  v209 = v208 & 0xFFFFFFDF | (32 * ((result[11] >> 1) & 1));
  *(_BYTE *)(a2 + 58) = v209;
  v210 = v209 & 0xFFFFFFFD | (2 * (result[11] & 1));
  *(_BYTE *)(a2 + 58) = v210;
  v211 = v210 & 0xFFFFFFFE | (result[22] >> 2) & 1;
  *(_BYTE *)(a2 + 58) = v211;
  v212 = (result[43] >> 3) & 0x10 | v211;
  *(_BYTE *)(a2 + 58) = v212;
  LOBYTE(v212) = v212 & 0xFB | (4 * (result[44] & 1));
  *(_BYTE *)(a2 + 58) = v212;
  *(_BYTE *)(a2 + 58) = v212 & 0xF7 | (8 * ((result[48] & 4) != 0));
  *(_DWORD *)(a2 + 59) = 0;
  *(_BYTE *)(a2 + 63) = 0;
  return result;
}

_OWORD *sub_20E7ADBF0(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;

  v3 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249)
    sub_20E78D874();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)) >= 0x124924924924924)
    v6 = 0x249249249249249;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x249249249249249)
      sub_20E78D888();
    v7 = (char *)operator new(112 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[112 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[112 * v6];
  v11 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v11;
  v12 = *(_OWORD *)(a2 + 64);
  v13 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *((_OWORD *)v9 + 4) = v12;
  *((_OWORD *)v9 + 5) = v13;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *((_OWORD *)v9 + 6) = *(_OWORD *)(a2 + 96);
  v14 = v9 + 112;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v9;
    a1[1] = v14;
    a1[2] = v10;
    if (!v16)
      return v14;
    goto LABEL_29;
  }
  do
  {
    v17 = *((_OWORD *)v16 - 7);
    v18 = *((_OWORD *)v16 - 6);
    v19 = *((_OWORD *)v16 - 4);
    *((_OWORD *)v9 - 5) = *((_OWORD *)v16 - 5);
    *((_OWORD *)v9 - 4) = v19;
    *((_OWORD *)v9 - 7) = v17;
    *((_OWORD *)v9 - 6) = v18;
    *((_OWORD *)v9 - 3) = *((_OWORD *)v16 - 3);
    *((_QWORD *)v16 - 6) = 0;
    *((_QWORD *)v16 - 5) = 0;
    *((_OWORD *)v9 - 2) = *((_OWORD *)v16 - 2);
    *((_QWORD *)v16 - 4) = 0;
    *((_QWORD *)v16 - 3) = 0;
    *((_OWORD *)v9 - 1) = *((_OWORD *)v16 - 1);
    v9 -= 112;
    v16 -= 112;
  }
  while (v16 != v15);
  v20 = (char *)*a1;
  v16 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v14;
  a1[2] = v10;
  if (v16 != v20)
  {
    while (1)
    {
      v21 = (std::__shared_weak_count *)*((_QWORD *)v16 - 3);
      if (!v21)
        goto LABEL_20;
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        v24 = (std::__shared_weak_count *)*((_QWORD *)v16 - 5);
        if (v24)
        {
LABEL_21:
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      else
      {
LABEL_20:
        v24 = (std::__shared_weak_count *)*((_QWORD *)v16 - 5);
        if (v24)
          goto LABEL_21;
      }
      v16 -= 112;
      if (v16 == v20)
      {
        v16 = v20;
        break;
      }
    }
  }
  if (v16)
LABEL_29:
    operator delete(v16);
  return v14;
}

void sub_20E7ADE04(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (0xF128CFC4A33F128DLL * ((v4 - v6) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = v6 + 552 * a2;
      v13 = 552 * a2;
      do
      {
        sub_20E7AE064(v6);
        v6 += 552;
        v13 -= 552;
      }
      while (v13);
      v6 = v12;
    }
    a1[1] = v6;
  }
  else
  {
    v7 = 0xF128CFC4A33F128DLL * ((v6 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x76B981DAE6076BLL)
      sub_20E78D874();
    v9 = 0xF128CFC4A33F128DLL * ((v4 - *a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3B5CC0ED7303B5)
      v10 = 0x76B981DAE6076BLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x76B981DAE6076BLL)
        sub_20E78D888();
      v11 = (char *)operator new(552 * v10);
    }
    else
    {
      v11 = 0;
    }
    v14 = (uint64_t)&v11[552 * v7];
    v21 = v14;
    v22 = &v11[552 * v10];
    v15 = 552 * a2;
    v16 = v14 + 552 * a2;
    do
    {
      sub_20E7AE064(v14);
      v14 += 552;
      v15 -= 552;
    }
    while (v15);
    sub_20E7AE224(v5, a1[1], a1[1], *a1, *a1, v21, v21);
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    *a1 = v19;
    a1[1] = v16;
    a1[2] = (uint64_t)v22;
    if (v17 != v18)
    {
      do
      {
        v20 = v17 - 552;
        sub_20E7A0B04((uint64_t)(v17 - 312));
        v17 = v20;
      }
      while (v20 != v18);
    }
    if (v18)
      operator delete(v18);
  }
}

void sub_20E7ADFDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E7AE010((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7ADFF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20E7ADFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E7AE010((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7AE010(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 552;
    sub_20E7A0B04(i - 312);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20E7AE064(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  sub_20E78F7D4(a1 + 240, 0x40uLL);
  v2 = *(_QWORD *)(a1 + 264);
  v3 = *(_QWORD *)(a1 + 272) - v2;
  if (v3 >= 0x100)
  {
    if (v3 != 256)
      *(_QWORD *)(a1 + 272) = v2 + 256;
  }
  else
  {
    sub_20E78F7D4(a1 + 264, 64 - (v3 >> 2));
  }
  v4 = *(_QWORD *)(a1 + 288);
  v5 = *(_QWORD *)(a1 + 296) - v4;
  if (v5 >= 0x100)
  {
    if (v5 != 256)
      *(_QWORD *)(a1 + 296) = v4 + 256;
  }
  else
  {
    sub_20E78F7D4(a1 + 288, 64 - (v5 >> 2));
  }
  v6 = *(_QWORD *)(a1 + 312);
  v7 = *(_QWORD *)(a1 + 320) - v6;
  if (v7 >= 0x100)
  {
    if (v7 != 256)
      *(_QWORD *)(a1 + 320) = v6 + 256;
  }
  else
  {
    sub_20E78F7D4(a1 + 312, 64 - (v7 >> 2));
  }
  v8 = *(_QWORD *)(a1 + 336);
  v9 = *(_QWORD *)(a1 + 344) - v8;
  if (v9 >= 0x100)
  {
    if (v9 != 256)
      *(_QWORD *)(a1 + 344) = v8 + 256;
  }
  else
  {
    sub_20E78F7D4(a1 + 336, 64 - (v9 >> 2));
  }
  v10 = *(_QWORD *)(a1 + 360);
  v11 = *(_QWORD *)(a1 + 368) - v10;
  if (v11 >= 0x100)
  {
    if (v11 != 256)
      *(_QWORD *)(a1 + 368) = v10 + 256;
  }
  else
  {
    sub_20E78F7D4(a1 + 360, 64 - (v11 >> 2));
  }
  v12 = *(_QWORD *)(a1 + 384);
  v13 = *(_QWORD *)(a1 + 392) - v12;
  if (v13 >= 0x100)
  {
    if (v13 != 256)
      *(_QWORD *)(a1 + 392) = v12 + 256;
  }
  else
  {
    sub_20E78F7D4(a1 + 384, 64 - (v13 >> 2));
  }
  v14 = *(_QWORD *)(a1 + 408);
  v15 = *(_QWORD *)(a1 + 416) - v14;
  if (v15 < 0x100)
  {
    sub_20E78F7D4(a1 + 408, 64 - (v15 >> 2));
    return a1;
  }
  if (v15 == 256)
    return a1;
  *(_QWORD *)(a1 + 416) = v14 + 256;
  return a1;
}

void sub_20E7AE210(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E7A0B04(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20E7AE224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __n128 result;
  __int128 v32;
  __int128 v33;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = (_OWORD *)(a7 + v7 - 552);
      v11 = *(_OWORD *)(a3 + v7 - 552);
      v12 = *(_OWORD *)(a3 + v7 - 520);
      v10[1] = *(_OWORD *)(a3 + v7 - 536);
      v10[2] = v12;
      *v10 = v11;
      v13 = *(_OWORD *)(a3 + v7 - 504);
      v14 = *(_OWORD *)(a3 + v7 - 488);
      v15 = *(_OWORD *)(a3 + v7 - 456);
      v10[5] = *(_OWORD *)(a3 + v7 - 472);
      v10[6] = v15;
      v10[3] = v13;
      v10[4] = v14;
      v16 = *(_OWORD *)(a3 + v7 - 440);
      v17 = *(_OWORD *)(a3 + v7 - 424);
      v18 = *(_OWORD *)(a3 + v7 - 392);
      v10[9] = *(_OWORD *)(a3 + v7 - 408);
      v10[10] = v18;
      v10[7] = v16;
      v10[8] = v17;
      v19 = *(_OWORD *)(a3 + v7 - 376);
      v20 = *(_OWORD *)(a3 + v7 - 360);
      v21 = *(_OWORD *)(a3 + v7 - 328);
      v22 = (_QWORD *)(a7 + v7 - 312);
      v10[13] = *(_OWORD *)(a3 + v7 - 344);
      v10[14] = v21;
      v23 = a3 + v7 - 312;
      *(_QWORD *)(a7 + v7 - 304) = 0;
      *v22 = 0;
      v10[11] = v19;
      v10[12] = v20;
      v22[2] = 0;
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *(_QWORD *)(a7 + v7 - 296) = *(_QWORD *)(a3 + v7 - 296);
      *(_QWORD *)(a3 + v7 - 304) = 0;
      *(_QWORD *)v23 = 0;
      v24 = (_QWORD *)(a7 + v7 - 288);
      *(_QWORD *)(v23 + 16) = 0;
      v25 = a3 + v7 - 288;
      *(_QWORD *)(a7 + v7 - 280) = 0;
      *v24 = 0;
      v24[2] = 0;
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *(_QWORD *)(a7 + v7 - 272) = *(_QWORD *)(a3 + v7 - 272);
      *(_QWORD *)(a3 + v7 - 280) = 0;
      *(_QWORD *)v25 = 0;
      *(_QWORD *)(v25 + 16) = 0;
      v26 = (_QWORD *)(a7 + v7 - 264);
      v27 = (_OWORD *)(a3 + v7 - 264);
      *v26 = 0;
      *(_QWORD *)(v8 - 256) = 0;
      *(_QWORD *)(v8 - 248) = 0;
      *(_OWORD *)v26 = *v27;
      *(_QWORD *)(v8 - 248) = *(_QWORD *)(a3 + v7 - 248);
      *(_QWORD *)v27 = 0;
      *(_QWORD *)(v9 - 256) = 0;
      *(_QWORD *)(v9 - 248) = 0;
      *(_QWORD *)(v8 - 240) = 0;
      *(_QWORD *)(v8 - 232) = 0;
      *(_QWORD *)(v8 - 224) = 0;
      *(_OWORD *)(v8 - 240) = *(_OWORD *)(a3 + v7 - 240);
      *(_QWORD *)(v8 - 224) = *(_QWORD *)(a3 + v7 - 224);
      *(_QWORD *)(v9 - 240) = 0;
      *(_QWORD *)(v9 - 232) = 0;
      *(_QWORD *)(v9 - 224) = 0;
      *(_QWORD *)(v8 - 216) = 0;
      *(_QWORD *)(v8 - 208) = 0;
      *(_QWORD *)(v8 - 200) = 0;
      *(_OWORD *)(v8 - 216) = *(_OWORD *)(a3 + v7 - 216);
      *(_QWORD *)(v8 - 200) = *(_QWORD *)(a3 + v7 - 200);
      *(_QWORD *)(v9 - 216) = 0;
      *(_QWORD *)(v9 - 208) = 0;
      *(_QWORD *)(v9 - 200) = 0;
      *(_QWORD *)(v8 - 192) = 0;
      *(_QWORD *)(v8 - 184) = 0;
      *(_QWORD *)(v8 - 176) = 0;
      *(_OWORD *)(v8 - 192) = *(_OWORD *)(a3 + v7 - 192);
      *(_QWORD *)(v8 - 176) = *(_QWORD *)(a3 + v7 - 176);
      *(_QWORD *)(v9 - 192) = 0;
      *(_QWORD *)(v9 - 184) = 0;
      *(_QWORD *)(v9 - 176) = 0;
      *(_QWORD *)(v8 - 168) = 0;
      *(_QWORD *)(v8 - 160) = 0;
      *(_QWORD *)(v8 - 152) = 0;
      *(_OWORD *)(v8 - 168) = *(_OWORD *)(a3 + v7 - 168);
      *(_QWORD *)(v8 - 152) = *(_QWORD *)(a3 + v7 - 152);
      *(_QWORD *)(v9 - 168) = 0;
      *(_QWORD *)(v9 - 160) = 0;
      *(_QWORD *)(v9 - 152) = 0;
      *(_QWORD *)(v8 - 144) = 0;
      *(_QWORD *)(v8 - 136) = 0;
      *(_QWORD *)(v8 - 128) = 0;
      *(_OWORD *)(v8 - 144) = *(_OWORD *)(a3 + v7 - 144);
      *(_QWORD *)(v8 - 128) = *(_QWORD *)(a3 + v7 - 128);
      *(_QWORD *)(v9 - 136) = 0;
      *(_QWORD *)(v9 - 128) = 0;
      *(_QWORD *)(v9 - 144) = 0;
      v28 = *(_OWORD *)(a3 + v7 - 40);
      v29 = *(_OWORD *)(a3 + v7 - 24);
      v30 = *(_QWORD *)(a3 + v7 - 8);
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v8 - 8) = v30;
      *(_OWORD *)(v8 - 24) = v29;
      *(_OWORD *)(v8 - 40) = v28;
      result = *(__n128 *)(a3 + v7 - 120);
      v32 = *(_OWORD *)(a3 + v7 - 104);
      v33 = *(_OWORD *)(a3 + v7 - 88);
      *(_OWORD *)(v8 - 72) = *(_OWORD *)(a3 + v7 - 72);
      *(_OWORD *)(v8 - 88) = v33;
      *(_OWORD *)(v8 - 104) = v32;
      *(__n128 *)(v8 - 120) = result;
      v7 -= 552;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void sub_20E7AE428(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 76, a3, a4);
}

void sub_20E7AE430(const char *a1, uint64_t a2, const char *a3, void (*a4)(void *))
{
  sub_20E803BF4(a1, 92, a3, a4);
}

uint64_t sub_20E7AE438(unsigned int *a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v7;
  int v8;
  unsigned int v9;
  signed int v10;
  unsigned int v11;
  __int16 v12;
  unsigned int v13;
  char v14;
  BOOL v15;
  unsigned int v16;
  BOOL v18;
  unsigned int v19;
  int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  BOOL v25;
  BOOL v26;
  unsigned int v27;
  BOOL v28;

  v2 = *(unsigned __int16 *)(a2 + 50);
  v3 = v2 > 6 || a1[5] > v2;
  v4 = *(_DWORD *)a2;
  v5 = *(_DWORD *)(a2 + 4);
  v7 = v3 || v4 > *a1 || v5 > a1[1];
  v8 = *(__int16 *)(a2 + 14);
  v9 = *(__int16 *)(a2 + 18);
  v10 = *(__int16 *)(a2 + 12);
  v11 = ((v8 | v10) >> 15) & 1;
  if (v7)
    LOWORD(v11) = 1;
  if (v8 > (int)v9)
    v12 = 1;
  else
    v12 = v11;
  v15 = v4 >= v9;
  v13 = *(__int16 *)(a2 + 16);
  if (!v15)
    v12 = 1;
  if (v10 > (int)v13)
    v12 = 1;
  if (v5 < v13)
    v12 = 1;
  v14 = v2 - 1;
  if (v12)
    v15 = 0;
  else
    v15 = v4 >> v14 >= a1[2];
  v16 = v5 >> v14;
  v18 = v15 && v16 >= a1[3] && a1[10] >= *(unsigned __int16 *)(a2 + 46);
  v19 = *(_DWORD *)(a2 + 24);
  v21 = !v18 || *(_DWORD *)(a2 + 28) > v19;
  if (*(_BYTE *)(a2 + 42))
  {
    v22 = *(unsigned __int16 *)(a2 + 38);
    v23 = a1[6] <= v22 && a1[8] >= v22;
    v24 = *(unsigned __int16 *)(a2 + 40);
    v25 = !v23 || a1[7] > v24;
    v26 = !v25 && a1[9] >= v24;
    v27 = 2 * v22;
    v28 = v26 && v4 >= v27;
    if (!v28 || v5 < 2 * v24)
      v21 = 1;
  }
  if (v19 <= a1[14])
    return ((*(_BYTE *)(a2 + 68) & 0xFD) != 0) & ~v21;
  else
    return 0;
}

void sub_20E7AE528(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4;
  unsigned int v8;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v4 = *(unsigned __int16 *)(a2 + 38);
  if (*(_DWORD *)(a1 + 24) > v4 || *(_DWORD *)(a1 + 32) < v4)
    sub_20E80AA2C();
  v8 = *(unsigned __int16 *)(a2 + 40);
  if (*(_DWORD *)(a1 + 28) > v8 || *(_DWORD *)(a1 + 36) < v8)
    sub_20E80AA58();
  v11 = a3;
  *(_QWORD *)(a4 + 152) = 0;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_QWORD *)a4 = 626;
  v12 = ((unint64_t)*(unsigned __int8 *)(a2 + 42) << 10) | 0x18272;
  *(_QWORD *)a4 = v12;
  v13 = 0x300000000;
  if (*(unsigned __int16 *)(a2 + 50) - 1 == a3)
    v13 = 0x200000000;
  v14 = 0xE2400000000;
  if (!a3)
    v14 = 0xF4000000000;
  v15 = v14 | v12 | v13;
  *(_QWORD *)a4 = v15;
  v16 = v15 | ((unint64_t)*(unsigned __int8 *)(a2 + 43) << 44);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)a4 = v16 | ((unint64_t)(*(_WORD *)(a2 + 46) & 0x3F) << 45);
  sub_20E7AE784(a1, a2, a3, (_WORD *)a4);
  *(_WORD *)(a4 + 66) = *(_WORD *)(a4 + 66) & 0xFC00 | 0x10;
  *(_DWORD *)(a4 + 68) = *(_DWORD *)(a4 + 68) & 0xFFFFC000 | 0x20;
  v17 = *(_DWORD *)a2 >> v11;
  *(_DWORD *)(a4 + 72) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a4 + 76) = v17;
  *(_DWORD *)(a4 + 80) = *(_DWORD *)(a4 + 8);
  v18 = *(unsigned __int16 *)(a2 + 38);
  *(_WORD *)(a4 + 88) = v18;
  v19 = *(unsigned __int16 *)(a2 + 40);
  *(_WORD *)(a4 + 90) = v19;
  v20 = *(unsigned __int16 *)(a1 + 48);
  v21 = (v18 + v20 * *(unsigned __int16 *)(a4 + 12) - 1) / v18;
  if (v21 <= 2)
    LOWORD(v21) = 2;
  *(_WORD *)(a4 + 84) = v21;
  v22 = (v19 + *(unsigned __int16 *)(a4 + 14) * v20 - 1) / v19;
  if (v22 <= 2)
    LOWORD(v22) = 2;
  *(_WORD *)(a4 + 86) = v22;
  if (v20)
  {
    v23 = 0;
    v24 = a4 + 16;
    LODWORD(v25) = 1;
    do
    {
      if ((_DWORD)v25)
      {
        v26 = 0;
        do
        {
          *(_WORD *)(v24 + 2 * v26++) = *(_WORD *)(a2 + 20);
          v25 = *(unsigned __int16 *)(a1 + 48);
        }
        while (v26 < v25);
      }
      ++v23;
      v24 += 10;
    }
    while (v23 < v25);
  }
  if ((*(_BYTE *)(a4 + 1) & 4) != 0)
  {
    v27 = sub_20E7CB878(*(unsigned __int16 *)(a4 + 88), *(unsigned __int16 *)(a4 + 84), *(unsigned __int16 *)(a4 + 86));
    *(_QWORD *)a4 = *(_QWORD *)a4 & 0xFFFFFFFFFFF1FFFFLL | ((log2((double)(unint64_t)v27) & 7) << 17);
    v17 = *(_DWORD *)a2 >> v11;
  }
  if (5 * *(unsigned __int16 *)(a4 + 12) + *(unsigned __int16 *)(a4 + 8) > v17)
    sub_20E80AA84();
  if (5 * *(unsigned __int16 *)(a4 + 14) + *(unsigned __int16 *)(a4 + 10) > *(_DWORD *)(a2 + 4) >> v11)
    sub_20E80AAB0();
}

uint64_t sub_20E7AE784(uint64_t a1, uint64_t a2, char a3, _WORD *a4)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  signed int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  if (*(_DWORD *)(a1 + 16) != 4)
    sub_20E80AB08();
  if (*(_WORD *)(a1 + 48) != 5)
    sub_20E80AADC();
  v5 = *(__int16 *)(a2 + 14);
  v6 = (*(_DWORD *)(a2 + 4) >> a3);
  if (*(_WORD *)(a2 + 16))
    v7 = *(__int16 *)(a2 + 16) >> a3;
  else
    v7 = *(_DWORD *)(a2 + 4) >> a3;
  v8 = (*(_DWORD *)a2 >> a3);
  if (*(_WORD *)(a2 + 18))
    v9 = *(__int16 *)(a2 + 18) >> a3;
  else
    v9 = *(_DWORD *)a2 >> a3;
  v10 = *(__int16 *)(a2 + 12) >> a3;
  v12 = 0;
  v13 = 0;
  sub_20E7CB758(v8, (unsigned int *)&v13 + 1, (signed int *)&v13, v5 >> a3, v9);
  result = sub_20E7CB758(v6, (unsigned int *)&v12 + 1, (signed int *)&v12, v10, v7);
  a4[4] = WORD2(v13);
  a4[6] = v13;
  a4[5] = WORD2(v12);
  a4[7] = v12;
  return result;
}

uint64_t sub_20E7AE854(uint64_t a1, __int128 *a2, _OWORD *a3)
{
  uint64_t *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE v14[32];
  _OWORD v15[2];

  *(_OWORD *)a1 = xmmword_20E80E510;
  *(_DWORD *)(a1 + 16) = 1000;
  *(_QWORD *)(a1 + 20) = 0x4100000042340000;
  *(_OWORD *)(a1 + 28) = xmmword_20E80E3D0;
  *(_QWORD *)(a1 + 44) = 0x3E8000001388;
  *(_DWORD *)(a1 + 52) = 16777217;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (uint64_t *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)a1 = v6;
  v9 = a3[1];
  *(_OWORD *)v14 = *a3;
  *(_OWORD *)&v14[16] = v9;
  v15[0] = a3[2];
  *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)((char *)a3 + 44);
  v10 = *((_DWORD *)a2 + 11);
  *(_DWORD *)&v14[24] = v10;
  if (*((_BYTE *)a2 + 53))
    *(_DWORD *)&v14[24] = 2 * v10;
  if (*((_BYTE *)a2 + 55))
    LOBYTE(v15[0]) = sub_20E7C39E8(*(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  *(_QWORD *)v14 = *(_QWORD *)((char *)a2 + 20);
  *(_OWORD *)&v14[8] = *(__int128 *)((char *)a2 + 28);
  BYTE12(v15[0]) = *((_BYTE *)a2 + 54);
  v11 = operator new();
  sub_20E7BE308(v11, v14);
  v12 = (_QWORD *)*v5;
  *v5 = v11;
  if (v12)
    sub_20E7A0C44((uint64_t)v5, v12);
  return a1;
}

void sub_20E7AE990(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v4;
  void *v5;
  _QWORD *v6;

  v4 = (void *)v1[11];
  if (v4)
  {
    v1[12] = v4;
    operator delete(v4);
    v5 = (void *)v1[8];
    if (!v5)
    {
LABEL_3:
      v6 = (_QWORD *)*v2;
      *v2 = 0;
      if (!v6)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v5 = (void *)v1[8];
    if (!v5)
      goto LABEL_3;
  }
  v1[9] = v5;
  operator delete(v5);
  v6 = (_QWORD *)*v2;
  *v2 = 0;
  if (!v6)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  sub_20E7A0C44((uint64_t)v2, v6);
  _Unwind_Resume(exception_object);
}

void sub_20E7AEA18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __n128 v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  char *v30;
  void *v31;
  char *v32;
  void (***v33)(char *);
  void (**v34)(char *);
  BOOL v35;
  char *v36;
  void *v37;
  char *v38;
  void (***v39)(char *);
  void (**v40)(char *);
  __int128 v41;
  _BYTE v42[26];
  uint64_t v43;
  __int128 v44;
  _BYTE v45[26];
  void *v46[2];
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  float v50;
  __int128 v51;
  _OWORD v52[2];
  void *v53[2];
  void *v54[2];
  __int128 v55;
  _BYTE v56[64];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 44))
  {
    *(_OWORD *)v54 = 0u;
    v55 = 0u;
    v43 = 0x3E4CCCCD3DCCCCCDLL;
    v44 = xmmword_20E80E520;
    *(int64x2_t *)v45 = vdupq_n_s64(3uLL);
    *(_QWORD *)&v45[16] = 1;
    *(_WORD *)&v45[24] = 0;
    *(_OWORD *)v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0x404000003F800000;
    v50 = 0.0;
    *(_QWORD *)&v42[16] = 1;
    *(_WORD *)&v42[24] = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v5 = *(_QWORD *)a1;
    *((_QWORD *)&v5 + 1) = HIDWORD(*(_QWORD *)a1);
    v6 = v5;
    *(_QWORD *)&v5 = (int)v4;
    *((_QWORD *)&v5 + 1) = SHIDWORD(v4);
    v41 = v6;
    *(_OWORD *)v42 = v5;
    *(_OWORD *)((char *)v52 + 10) = *(_OWORD *)&v42[10];
    v52[0] = v5;
    *(_OWORD *)v53 = 0u;
    v51 = v6;
    sub_20E7B6CCC(&v51, (uint64_t *)(a2 + 72));
    v44 = v41;
    *(_OWORD *)v45 = v5;
    *(_OWORD *)&v45[10] = *(_OWORD *)&v42[10];
    sub_20E7B8548(&v44, (uint64_t *)(a2 + 24));
    v43 = 0x3F80000000000000;
    *((float *)&v49 + 1) = (float)(unint64_t)sub_20E7F9528((uint64_t)&v41) / 0.69315;
    v7 = sub_20E7F9528((uint64_t)&v41);
    LODWORD(v49) = exp2f(1.0 / (float)(unint64_t)v7);
    v50 = logf(*((float *)&v43 + 1));
    kdebug_trace();
    sub_20E7BE30C(*(_QWORD *)(a1 + 56), (uint64_t)&v43, &v51, (_QWORD *)(a2 + 96), a1 + 64, a1 + 88);
    kdebug_trace();
    if (*(_BYTE *)(a1 + 53))
    {
      v9 = *(unsigned int *)(a1 + 44);
      v10 = *(_QWORD *)(a1 + 64);
      v11 = *(float **)(a1 + 72);
      v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - v10) >> 4);
      if (v12 > v9)
      {
        v13 = 126 - 2 * __clz(v12);
        v14 = v11 == (float *)v10 ? 0 : v13;
        v8.n128_f64[0] = sub_20E7B9D78(v10, v11, (uint64_t)v56, v14, 1, v8);
        v15 = *(_QWORD *)(a1 + 64);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 72) - v15) >> 4) > v9)
          *(_QWORD *)(a1 + 72) = v15 + 48 * v9;
      }
    }
    if (*(_DWORD *)a1 == 640 && *(_DWORD *)(a1 + 4) == 480)
    {
      v16 = *(unsigned int *)(a1 + 16);
      v17 = *(_QWORD *)(a1 + 64);
      v18 = *(float **)(a1 + 72);
      v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - v17) >> 4);
      if (v19 > v16)
      {
        v20 = 126 - 2 * __clz(v19);
        v21 = v18 == (float *)v17 ? 0 : v20;
        sub_20E7B9D78(v17, v18, (uint64_t)v56, v21, 1, v8);
        v22 = *(_QWORD *)(a1 + 64);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 72) - v22) >> 4) > v16)
          *(_QWORD *)(a1 + 72) = v22 + 48 * v16;
      }
    }
    kdebug_trace();
    if (*(_BYTE *)(a1 + 52))
    {
      sub_20E7AF018((float **)(a1 + 64), (uint64_t)&v43, 1);
      sub_20E7AF018((float **)(a1 + 88), (uint64_t)&v43, 1);
    }
    kdebug_trace();
    kdebug_trace();
    v23 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) != v23)
    {
      v24 = 0;
      v25 = 0;
      do
      {
        if (sub_20E7B0FDC((uint64_t)v56, (uint64_t)&v43, *(float *)(v23 + v24 + 16), *(float *)(v23 + v24 + 20), *(float *)(v23 + v24 + 40), *(float *)(v23 + v24 + 12), 2.0, 1.0))sub_20E7ABD9C(a2, *(_BYTE *)(v23 + v24 + 28), (uint64_t)v56, *(float *)(v23 + v24 + 16), *(float *)(v23 + v24 + 20), *(float *)(v23 + v24 + 40), *(float *)(v23 + v24 + 12), *(float *)(v23 + v24 + 44));
        ++v25;
        v23 = *(_QWORD *)(a1 + 64);
        v24 += 48;
      }
      while (v25 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 72) - v23) >> 4));
    }
    v26 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) == v26)
    {
      v29 = 0;
    }
    else
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)(a2 + 400) + 4) >= *(_DWORD *)(a2 + 16))
          break;
        if (sub_20E7B0FDC((uint64_t)v56, (uint64_t)&v43, *(float *)(v26 + v27 + 16), *(float *)(v26 + v27 + 20), *(float *)(v26 + v27 + 40), *(float *)(v26 + v27 + 12), 2.0, 1.0))
        {
          sub_20E7ABD9C(a2, *(_BYTE *)(v26 + v27 + 28), (uint64_t)v56, *(float *)(v26 + v27 + 16), *(float *)(v26 + v27 + 20), *(float *)(v26 + v27 + 40), *(float *)(v26 + v27 + 12), *(float *)(v26 + v27 + 44));
          ++v29;
        }
        ++v28;
        v26 = *(_QWORD *)(a1 + 88);
        v27 += 48;
      }
      while (v28 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 96) - v26) >> 4));
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 400) + 80) = v29;
    kdebug_trace();
    if (*((_QWORD *)&v47 + 1))
    {
      *(_QWORD *)&v48 = *((_QWORD *)&v47 + 1);
      operator delete(*((void **)&v47 + 1));
    }
    v30 = (char *)v46[0];
    if (v46[0])
    {
      v31 = v46[0];
      if (v46[1] != v46[0])
      {
        v32 = (char *)v46[1] - 144;
        v33 = (void (***)(char *))((char *)v46[1] - 144);
        do
        {
          v34 = *v33;
          v33 -= 18;
          (*v34)(v32);
          v35 = v32 == v30;
          v32 = (char *)v33;
        }
        while (!v35);
        v31 = v46[0];
      }
      v46[1] = v30;
      operator delete(v31);
    }
    if (v54[1])
    {
      *(void **)&v55 = v54[1];
      operator delete(v54[1]);
    }
    v36 = (char *)v53[0];
    if (v53[0])
    {
      v37 = v53[0];
      if (v53[1] != v53[0])
      {
        v38 = (char *)v53[1] - 144;
        v39 = (void (***)(char *))((char *)v53[1] - 144);
        do
        {
          v40 = *v39;
          v39 -= 18;
          (*v40)(v38);
          v35 = v38 == v36;
          v38 = (char *)v39;
        }
        while (!v35);
        v37 = v53[0];
      }
      v53[1] = v36;
      operator delete(v37);
    }
  }
}

void sub_20E7AEFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2)
    sub_20E785844(exception_object);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20E7AF018(float **a1, uint64_t a2, int a3)
{
  unsigned __int8 *result;
  float *v6;
  float v7;
  float v8;
  float v9;
  int32x2_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  int v16;
  int v17;
  float v18;
  int v19;
  int v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  unsigned int v46;
  float v47;
  unsigned int v48;
  float v49;
  unsigned int v50;
  float v51;
  unsigned int v52;
  float v53;
  float v54;
  int v55;
  int v56;
  int32x2_t v57;
  int32x2_t v58;
  int32x2_t v59;
  int32x2_t v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  float v65;
  float v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  float v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  unsigned int v86;
  int8x16_t v87;
  int8x16_t v88;
  __int128 v89;
  __int128 v90;
  unsigned int v91;
  float v92;
  unsigned int v93;
  float v94;
  unsigned int v95;
  unsigned int v96;
  float v97;
  unsigned int v98;
  float v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  int32x2_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  uint64_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  uint64_t v113;
  float32x4_t v114;
  float v115;
  float v116;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  float v126;
  float v127;
  float v128;
  float v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  float v147;
  float v148;
  unsigned int v149;
  float v150;
  float v151;
  float v152;
  unsigned int v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  unsigned int v170;
  unsigned int v171;
  float v172;
  float v173;
  float v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  float v179;
  unsigned int v180;
  float v181;
  unsigned int v182;
  unsigned int v183;
  float v184;
  float v185;
  float v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  float v190;
  float v191;
  float v192;
  unsigned int v193;
  float v194;
  float v195;
  float v196;
  unsigned int v197;
  float v198;
  unsigned int v199;
  float v200;
  float v201;
  int v202;
  float v203;
  float v204;
  float v205;
  uint64_t v206;
  uint64_t v207;
  float v208;
  float v209;
  float v210;
  float v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  float v215;
  int v216;
  float v217;
  float v218;
  unsigned int v219;
  unsigned int v220;
  float v221;
  float v222;
  float v223;
  int v224;
  int v225;
  int32x2_t v226;
  int32x2_t v227;
  int32x2_t v228;
  int32x2_t v229;
  unsigned int v230;
  int v231;
  int v232;
  int v233;
  float v234;
  float v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  float v242;
  float v243;
  uint64_t v244;
  uint64_t v245;
  float v246;
  float v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  unsigned int v255;
  int8x16_t v256;
  int8x16_t v257;
  __int128 v258;
  __int128 v259;
  unsigned int v260;
  float v261;
  unsigned int v262;
  float v263;
  unsigned int v264;
  unsigned int v265;
  float v266;
  unsigned int v267;
  float v268;
  float32x2_t v269;
  float32x2_t v270;
  float32x2_t v271;
  int32x2_t v272;
  uint64_t v273;
  unsigned __int8 *v274;
  unsigned __int8 *v275;
  uint64_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  uint64_t v282;
  float32x4_t v283;
  float v284;
  float v285;
  int v286;
  int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  int v292;
  int v293;
  int v294;
  float v295;
  float v296;
  float v297;
  float v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  float v316;
  float v317;
  unsigned int v318;
  float v319;
  float v320;
  float v321;
  unsigned int v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int v331;
  uint64_t v332;
  uint64_t v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  unsigned int v339;
  unsigned int v340;
  float v341;
  float v342;
  float v343;
  uint64_t v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  float v348;
  unsigned int v349;
  float v350;
  unsigned int v351;
  unsigned int v352;
  float v353;
  float v354;
  float v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  float v359;
  float v360;
  float v361;
  unsigned int v362;
  float v363;
  float v364;
  float v365;
  unsigned int v366;
  float v367;
  unsigned int v368;
  float v369;
  float v370;
  int v371;
  float v372;
  float v373;
  float v374;
  uint64_t v375;
  uint64_t v376;
  float v377;
  float v378;
  float v379;
  float v380;
  unsigned int v381;
  unsigned int v382;
  unsigned int v383;
  float v384;
  int v385;
  float v386;
  float v387;
  unsigned int v388;
  unsigned int v389;
  float v390;
  float v391;
  float v392;
  int v393;
  int v394;
  int32x2_t v395;
  int32x2_t v396;
  int32x2_t v397;
  int32x2_t v398;
  unsigned int v399;
  int v400;
  int v401;
  int v402;
  float v403;
  float v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  unint64_t v410;
  float v411;
  float v412;
  uint64_t v413;
  uint64_t v414;
  float v415;
  float v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  int32x4_t v420;
  int32x4_t v421;
  float32x4_t v422;
  float32x4_t v423;
  unsigned int v424;
  int8x16_t v425;
  int8x16_t v426;
  __int128 v427;
  __int128 v428;
  unsigned int v429;
  float v430;
  unsigned int v431;
  float v432;
  unsigned int v433;
  unsigned int v434;
  float v435;
  unsigned int v436;
  float v437;
  float32x2_t v438;
  float32x2_t v439;
  float32x2_t v440;
  int32x2_t v441;
  uint64_t v442;
  unsigned __int8 *v443;
  unsigned __int8 *v444;
  uint64_t v445;
  float32x4_t v446;
  float32x4_t v447;
  float32x4_t v448;
  float32x4_t v449;
  float32x4_t v450;
  uint64_t v451;
  float32x4_t v452;
  float v453;
  float v454;
  int v455;
  int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  int v461;
  int v462;
  int v463;
  float v464;
  float v465;
  float v466;
  float v467;
  uint64_t v468;
  _QWORD *v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  unint64_t v473;
  float v474;
  float v475;
  float v476;
  float v477;
  float v478;
  float v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unsigned int v483;
  uint64_t v484;
  float v485;
  float v486;
  unsigned int v487;
  float v488;
  float v489;
  float v490;
  unsigned int v491;
  float v492;
  float v493;
  float v494;
  float v495;
  float v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  float v503;
  float v504;
  float v505;
  float v506;
  float v507;
  unsigned int v508;
  unsigned int v509;
  float v510;
  float v511;
  float v512;
  uint64_t v513;
  unsigned int v514;
  uint64_t v515;
  uint64_t v516;
  float v517;
  unsigned int v518;
  float v519;
  unsigned int v520;
  unsigned int v521;
  float v522;
  float v523;
  float v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  float v528;
  float v529;
  float v530;
  unsigned int v531;
  float v532;
  float v533;
  float v534;
  unsigned int v535;
  float v536;
  unsigned int v537;
  float v538;
  float v539;
  int v540;
  float v541;
  float v542;
  float v543;
  uint64_t v544;
  uint64_t v545;
  float v546;
  float v547;
  float v548;
  float v549;
  unsigned int v550;
  unsigned int v551;
  unsigned int v552;
  float v553;
  int v554;
  float v555;
  float v556;
  unsigned int v557;
  unsigned int v558;
  float v559;
  float v560;
  int v561;
  int v562;
  int32x2_t v563;
  int32x2_t v564;
  int32x2_t v565;
  int32x2_t v566;
  unsigned int v567;
  int v568;
  int v569;
  int v570;
  uint64_t v571;
  float v572;
  float v573;
  _QWORD *v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  float v579;
  float v580;
  float v581;
  uint64_t v582;
  uint64_t v583;
  float v584;
  float32_t v585;
  float32x2_t v586;
  float32x4_t v587;
  float v588;
  float32x4_t v589;
  float32x4_t v590;
  int32x4_t v591;
  int32x4_t v592;
  float32x4_t v593;
  float32x4_t v594;
  unsigned int v595;
  int8x16_t v596;
  int8x16_t v597;
  __int128 v598;
  __int128 v599;
  unsigned int v600;
  unsigned int v601;
  float v602;
  float v603;
  float32x2_t v604;
  float32x2_t v605;
  float32x2_t v606;
  int32x2_t v607;
  uint64_t v608;
  unsigned __int8 *v609;
  unsigned __int8 *v610;
  uint64_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  uint64_t v618;
  float32x4_t v619;
  int v620;
  float *i;
  float *v622;
  float *v623;
  float32x4_t v624;
  float32x2_t v625[68];
  _WORD v626[8];
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  _WORD v633[15];

  if (a3)
  {
    v625[0].i32[0] = 1191181824;
    result = (unsigned __int8 *)memcpy((char *)v625 + 4, "\b", 0x21CuLL);
    v6 = *a1;
    v623 = a1[1];
    if (*a1 != v623)
    {
      v624 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      do
      {
        v12 = v6[4];
        v13 = v6[5];
        v14 = v6[3];
        v632 = 0u;
        memset(v633, 0, sizeof(v633));
        v630 = 0u;
        v631 = 0u;
        v628 = 0u;
        v629 = 0u;
        v627 = 0u;
        v15 = *(_DWORD *)(a2 + 24);
        v16 = *(_DWORD *)(a2 + 32);
        v17 = sub_20E7F9528(a2 + 8);
        v18 = (float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v14) & 0x807FFFFF | 0x3F800000) * -0.33333)
                                            + 2.0)
                                    * COERCE_FLOAT(LODWORD(v14) & 0x807FFFFF | 0x3F800000))
                            + -1.6667)
                    + (float)((LODWORD(v14) >> 23) - 127))
            * 0.69315;
        v19 = vcvtms_s32_f32(*(float *)(a2 + 108) * (float)(v18 - *(float *)(a2 + 112)));
        if (v19 < 0)
        {
          v20 = 0;
          v21 = 0;
        }
        else if (v17 * v15 <= v19)
        {
          v20 = v15 - 1;
          v21 = v16 - 1;
        }
        else
        {
          v20 = v19 / v17;
          v21 = v19 % v17;
        }
        v22 = v14 + v14;
        v23 = 1.0 / (float)(1 << v20);
        v24 = v12 * v23;
        v25 = v13 * v23;
        v26 = *(_QWORD *)(a2 + 32);
        v27 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 144 * (v26 * v20 + v21));
        v28 = v27[9];
        v30 = v27[4];
        v29 = v27[5];
        v31 = v27[6];
        v32 = v24 + 0.0;
        v33 = (float)v30 + -1.001;
        if (v33 >= v32)
          v33 = v32;
        if (v32 >= 0.0)
          v34 = v33;
        else
          v34 = 0.0;
        v35 = v25 + 0.0;
        v36 = (float)v31 + -1.001;
        if (v36 >= v35)
          v36 = v35;
        if (v35 >= 0.0)
          v37 = v36;
        else
          v37 = 0.0;
        v38 = v34;
        v39 = v37;
        v40 = (v38 + 1);
        v41 = v28 + v29 * v39;
        v42 = v41 + v29;
        v43 = (float)v40 - v34;
        v44 = (float)(v39 + 1) - v37;
        v45 = v43 * v44;
        *(float *)&v46 = v34 - (float)v34;
        v47 = *(float *)&v46 * v44;
        *(float *)&v48 = (float)v37;
        v49 = v37 - *(float *)&v48;
        *(float *)&v50 = v43 * v49;
        v51 = *(float *)&v46 * v49;
        LOBYTE(v46) = *(_BYTE *)(v41 + v38);
        LOBYTE(v48) = *(_BYTE *)(v41 + v40);
        *(float *)&v52 = v47 * (float)v48;
        v53 = *(float *)&v52 + (float)(v45 * (float)v46);
        LOBYTE(v52) = *(_BYTE *)(v42 + v38);
        v54 = v53 + (float)(*(float *)&v50 * (float)v52);
        LOBYTE(v50) = *(_BYTE *)(v42 + v40);
        v626[0] = (int)(float)((float)(v54 + (float)(v51 * (float)v50)) * 255.0);
        v55 = *(_DWORD *)(a2 + 24);
        v56 = sub_20E7F9528(a2 + 8);
        v62 = vcvtms_s32_f32((float)(v18 - *(float *)(a2 + 112)) * *(float *)(a2 + 108));
        if (v62 < 0)
        {
          v64 = 0;
          v63 = 0;
        }
        else if (v56 * v55 <= v62)
        {
          v63 = v55 - 1;
          v64 = v26 - 1;
        }
        else
        {
          v63 = v62 / v56;
          v64 = v62 % v56;
        }
        v65 = (float)(1 << v63);
        *(float *)v58.i32 = v12 * (float)(1.0 / v65);
        *(float *)v59.i32 = v13 * (float)(1.0 / v65);
        v66 = v22 / v65;
        v67 = *(_QWORD *)(a2 + 32);
        v68 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 144 * (v67 * v63 + v64));
        v69 = v68[9];
        v71 = v68[4];
        v70 = v68[5];
        v72 = v68[6];
        *(float *)v57.i32 = (float)v71 + -1.001;
        v73 = *(float *)v59.i32 + (float)(v66 * 0.70711);
        *(float *)v60.i32 = (float)v72 + -1.001;
        if (*(float *)v60.i32 >= v73)
          v74 = *(float *)v59.i32 + (float)(v66 * 0.70711);
        else
          v74 = (float)v72 + -1.001;
        if (v73 < 0.0)
          v74 = 0.0;
        v75 = v74;
        v76 = v69 + v70 * v75;
        v77 = (float)(v75 + 1) - v74;
        v78 = v74 - (float)v74;
        v79.f32[0] = v66 + *(float *)v58.i32;
        v79.f32[1] = *(float *)v58.i32 + (float)(v66 * 0.5);
        *(float32x2_t *)&v79.u32[2] = vmla_n_f32((float32x2_t)vdup_lane_s32(v58, 0), (float32x2_t)0xBF000000BF800000, v66);
        v80 = (float32x4_t)vdupq_lane_s32(v57, 0);
        v81 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v79, v80), (int8x16_t)v80, (int8x16_t)v79), (int8x16_t)vcltzq_f32(v79));
        v82 = (int32x4_t)vcvtq_u32_f32(v81);
        v80.i64[0] = 0x100000001;
        v80.i64[1] = 0x100000001;
        v83 = vaddq_s32(v82, (int32x4_t)v80);
        v84 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)v83), v81);
        v85 = vsubq_f32(v81, vcvtq_f32_u32((uint32x4_t)v82));
        *(float *)&v86 = vmuls_lane_f32(v78, v84, 3);
        v87 = (int8x16_t)vtrn2q_s32(v82, v83);
        v88 = vextq_s8(v87, v87, 8uLL);
        *(_QWORD *)&v89 = v88.u32[2];
        *((_QWORD *)&v89 + 1) = v88.u32[3];
        v90 = v89;
        *(_QWORD *)&v89 = v88.u32[0];
        v88.i8[0] = *(_BYTE *)(v76 + v88.u32[0]);
        LOBYTE(v61) = *(_BYTE *)(v76 + v88.u32[1]);
        *(float *)&v91 = vmuls_lane_f32(v77, v85, 3) * (float)v61;
        v92 = *(float *)&v91 + (float)(vmuls_lane_f32(v77, v84, 3) * (float)v88.u32[0]);
        LOBYTE(v91) = *(_BYTE *)(v76 + v70 + v89);
        *(float *)&v93 = (float)v91;
        v94 = v92 + (float)(*(float *)&v86 * *(float *)&v93);
        LOBYTE(v93) = *(_BYTE *)(v76 + v70 + v88.u32[1]);
        *(float *)&v95 = (float)(v94 + (float)(vmuls_lane_f32(v78, v85, 3) * (float)v93)) * 255.0;
        HIWORD(v627) = (int)*(float *)&v95;
        LOBYTE(v95) = *(_BYTE *)(v76 + v90);
        *(float *)&v96 = (float)v95;
        LOBYTE(v86) = *(_BYTE *)(v76 + *((_QWORD *)&v90 + 1));
        v97 = (float)(vmuls_lane_f32(v77, *(float32x2_t *)v85.f32, 1) * (float)v86)
            + (float)(vmuls_lane_f32(v77, *(float32x2_t *)v84.f32, 1) * *(float *)&v96);
        LOBYTE(v96) = *(_BYTE *)(v76 + v70 + v90);
        *(float *)&v98 = (float)v96;
        v99 = v97 + (float)(vmuls_lane_f32(v78, *(float32x2_t *)v84.f32, 1) * *(float *)&v98);
        LOBYTE(v98) = *(_BYTE *)(v76 + v70 + *((_QWORD *)&v90 + 1));
        LODWORD(v75) = (int)(float)((float)(v99 + (float)(vmuls_lane_f32(v78, *(float32x2_t *)v85.f32, 1) * (float)v98))
                                  * 255.0);
        v100 = vmla_n_f32((float32x2_t)vdup_lane_s32(v59, 0), (float32x2_t)0xBF3504F300000000, v66);
        v101 = (float32x2_t)vdup_lane_s32(v60, 0);
        v102 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v100, v101), (int8x8_t)v101, (int8x8_t)v100), (int8x8_t)vcltz_f32(v100));
        v103 = (int32x2_t)vcvt_u32_f32(v102);
        v104 = v69 + v70 * v103.u32[0];
        v105 = (unsigned __int8 *)(v104 + v70 + v82.u32[0]);
        v106 = (unsigned __int8 *)(v104 + v70 + v83.u32[0]);
        v107 = v69 + v70 * v103.u32[1];
        *(float32x2_t *)v108.f32 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v103, (int32x2_t)0x100000001)), v102);
        v108.i64[1] = v108.i64[0];
        *(float32x2_t *)v109.f32 = vsub_f32(v102, vcvt_f32_u32((uint32x2_t)v103));
        v109.i64[1] = v109.i64[0];
        v110 = vmulq_f32(v84, v108);
        v111 = vmulq_f32(v84, v109);
        v112 = vmulq_f32(v85, v109);
        v82.i16[0] = *(unsigned __int8 *)(v104 + v82.u32[0]);
        v82.i16[1] = *(unsigned __int8 *)(v107 + v90);
        v82.i16[2] = *(unsigned __int8 *)(v104 + v82.u32[2]);
        v82.i16[3] = *(unsigned __int8 *)(v107 + v89);
        v113 = v83.u32[2];
        v83.i16[0] = *(unsigned __int8 *)(v104 + v83.u32[0]);
        v83.i16[1] = *(unsigned __int8 *)(v107 + *((_QWORD *)&v90 + 1));
        v83.i16[2] = *(unsigned __int8 *)(v104 + v83.u32[2]);
        v83.i16[3] = *(unsigned __int8 *)(v107 + v88.u32[1]);
        v114 = vmlaq_f32(vmulq_f32(vmulq_f32(v85, v108), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v83.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v82.i8)), v110);
        v82.i16[0] = *v105;
        v82.i16[1] = *(unsigned __int8 *)(v107 + v70 + v90);
        v82.i16[2] = *(unsigned __int8 *)(v104 + v70 + v82.u32[2]);
        v82.i16[3] = *(unsigned __int8 *)(v107 + v70 + v89);
        v85.i16[0] = *v106;
        v85.i16[1] = *(unsigned __int8 *)(v107 + v70 + *((_QWORD *)&v90 + 1));
        v85.i16[2] = *(unsigned __int8 *)(v104 + v70 + v113);
        v85.i16[3] = *(unsigned __int8 *)(v107 + v70 + v88.u32[1]);
        *(int16x4_t *)v114.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(vmlaq_f32(v114, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v82.i8)), v111), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v85.f32)), v112), v624)));
        *(int16x4_t *)v112.f32 = vrev32_s16(*(int16x4_t *)v114.f32);
        v112.i32[0] = v114.i32[0];
        LOWORD(v628) = v75;
        *(_QWORD *)((char *)&v628 + 2) = v112.i64[0];
        v115 = v22 * 1.4142;
        v116 = v14 * 1.4142;
        v117 = *(_DWORD *)(a2 + 24);
        v118 = sub_20E7F9528(a2 + 8);
        v123 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v116) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v116) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v116) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
        if (v123 < 0)
        {
          v124 = 0;
          v125 = 0;
        }
        else if (v118 * v117 <= v123)
        {
          v124 = v117 - 1;
          v125 = v67 - 1;
        }
        else
        {
          v124 = v123 / v118;
          v125 = v123 % v118;
        }
        v126 = (float)(1 << v124);
        v127 = v12 * (float)(1.0 / v126);
        v128 = v13 * (float)(1.0 / v126);
        v129 = v115 / v126;
        v130 = *(_QWORD *)(a2 + 32);
        v131 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 144 * (v130 * v124 + v125));
        v132 = v131[9];
        v133 = v131[4];
        v134 = v131[5];
        v135 = v131[6];
        v136 = v127 + (float)(v129 * 0.0);
        v137 = (float)v133 + -1.001;
        if (v137 >= v136)
          v138 = v127 + (float)(v129 * 0.0);
        else
          v138 = (float)v133 + -1.001;
        if (v136 >= 0.0)
          v139 = v138;
        else
          v139 = 0.0;
        v140 = (float)v135 + -1.001;
        if (v140 >= (float)(v128 - v129))
          v141 = v128 - v129;
        else
          v141 = (float)v135 + -1.001;
        if ((float)(v128 - v129) < 0.0)
          v141 = 0.0;
        v142 = v139;
        v143 = v141;
        v144 = (v142 + 1);
        v145 = v143 + 1;
        v146 = v132 + v134 * v143;
        v147 = (float)v144 - v139;
        v148 = (float)v145 - v141;
        *(float *)&v149 = v147 * v148;
        v150 = v139 - (float)v139;
        v151 = v150 * v148;
        v152 = v141 - (float)v141;
        *(float *)&v153 = v147 * v152;
        LOBYTE(v119) = *(_BYTE *)(v146 + v142);
        LOBYTE(v120) = *(_BYTE *)(v146 + v144);
        v154 = (float)(v151 * (float)v120) + (float)(*(float *)&v149 * (float)v119);
        LOBYTE(v149) = *(_BYTE *)(v146 + v134 + v142);
        LOBYTE(v153) = *(_BYTE *)(v146 + v134 + v144);
        HIWORD(v628) = (int)(float)((float)((float)(v154 + (float)((float)(v147 * v152) * (float)v149))
                                          + (float)((float)(v150 * v152) * (float)v153))
                                  * 255.0);
        v155 = v127 + (float)(v129 * 0.70711);
        if (v137 >= v155)
          v156 = v127 + (float)(v129 * 0.70711);
        else
          v156 = v137;
        if (v155 < 0.0)
          v156 = 0.0;
        v157 = v128 + (float)(v129 * 0.5);
        if (v140 >= v157)
          v158 = v128 + (float)(v129 * 0.5);
        else
          v158 = v140;
        if (v157 < 0.0)
          v158 = 0.0;
        v159 = v156;
        v160 = v158;
        v161 = (v159 + 1);
        v162 = v160 + 1;
        v163 = v132 + v134 * v160;
        v164 = v163 + v134;
        v165 = (float)v161 - v156;
        v166 = (float)v162 - v158;
        v167 = v156 - (float)v156;
        v168 = v158 - (float)v158;
        LOBYTE(v121) = *(_BYTE *)(v163 + v159);
        LOBYTE(v122) = *(_BYTE *)(v163 + v161);
        v169 = (float)v122;
        *(float *)&v170 = (float)(v167 * v166) * v169;
        *(float *)&v171 = *(float *)&v170 + (float)((float)(v165 * v166) * (float)v121);
        LOBYTE(v170) = *(_BYTE *)(v163 + v134 + v159);
        v172 = *(float *)&v171 + (float)((float)(v165 * v168) * (float)v170);
        LOBYTE(v171) = *(_BYTE *)(v163 + v134 + v161);
        LOWORD(v629) = (int)(float)((float)(v172 + (float)((float)(v167 * v168) * (float)v171)) * 255.0);
        v173 = v128 + (float)(v129 * -0.5);
        if (v140 >= v173)
          v174 = v128 + (float)(v129 * -0.5);
        else
          v174 = v140;
        if (v173 < 0.0)
          v174 = 0.0;
        v175 = v174;
        v176 = v175 + 1;
        v177 = v132 + v134 * v175;
        v178 = v177 + v134;
        v179 = (float)v176 - v174;
        *(float *)&v180 = (float)v174;
        v181 = v174 - *(float *)&v180;
        LOBYTE(v180) = *(_BYTE *)(v177 + v159);
        *(float *)&v182 = (float)v180;
        LOBYTE(v169) = *(_BYTE *)(v177 + v161);
        *(float *)&v183 = (float)(v167 * v179) * (float)LODWORD(v169);
        v184 = *(float *)&v183 + (float)((float)(v165 * v179) * *(float *)&v182);
        LOBYTE(v183) = *(_BYTE *)(v177 + v134 + v159);
        LOBYTE(v182) = *(_BYTE *)(v177 + v134 + v161);
        WORD1(v629) = (int)(float)((float)((float)(v184 + (float)((float)(v165 * v181) * (float)v183))
                                         + (float)((float)(v167 * v181) * (float)v182))
                                 * 255.0);
        v185 = v129 + v128;
        if (v140 >= v185)
          v140 = v185;
        if (v185 >= 0.0)
          v186 = v140;
        else
          v186 = 0.0;
        v187 = v186;
        v188 = v132 + v134 * v187;
        v189 = v188 + v134;
        v190 = (float)(v187 + 1) - v186;
        v191 = v147 * v190;
        v192 = v150 * v190;
        *(float *)&v193 = (float)v186;
        v194 = v186 - *(float *)&v193;
        v195 = v147 * v194;
        v196 = v150 * v194;
        LOBYTE(v150) = *(_BYTE *)(v188 + v142);
        LOBYTE(v193) = *(_BYTE *)(v188 + v144);
        *(float *)&v197 = (float)v193;
        v198 = v192 * *(float *)&v197;
        LOBYTE(v197) = *(_BYTE *)(v189 + v142);
        *(float *)&v199 = v198 + (float)(v191 * (float)LODWORD(v150));
        v200 = *(float *)&v199 + (float)(v195 * (float)v197);
        LOBYTE(v199) = *(_BYTE *)(v189 + v144);
        v201 = (float)v199;
        v202 = (int)(float)((float)(v200 + (float)(v196 * v201)) * 255.0);
        v203 = v127 + (float)(v129 * -0.70711);
        if (v137 >= v203)
          v204 = v203;
        else
          v204 = v137;
        if (v203 >= 0.0)
          v205 = v204;
        else
          v205 = 0.0;
        v206 = v205;
        v207 = (v206 + 1);
        v208 = (float)v207 - v205;
        v209 = v208 * v179;
        v210 = v205 - (float)v205;
        v211 = v210 * v179;
        *(float *)&v212 = v208 * v181;
        LOBYTE(v201) = *(_BYTE *)(v177 + v206);
        *(float *)&v213 = (float)LODWORD(v201);
        LOBYTE(v179) = *(_BYTE *)(v177 + v207);
        *(float *)&v214 = v211 * (float)LODWORD(v179);
        v215 = *(float *)&v214 + (float)(v209 * *(float *)&v213);
        LOBYTE(v214) = *(_BYTE *)(v178 + v206);
        LOBYTE(v213) = *(_BYTE *)(v178 + v207);
        v216 = (int)(float)((float)((float)(v215 + (float)((float)(v208 * v181) * (float)v214))
                                  + (float)((float)(v210 * v181) * (float)v213))
                          * 255.0);
        WORD2(v629) = v202;
        v217 = v208 * v166;
        v218 = v210 * v166;
        LOBYTE(v166) = *(_BYTE *)(v163 + v206);
        *(float *)&v219 = (float)LODWORD(v166);
        LOBYTE(v212) = *(_BYTE *)(v163 + v207);
        *(float *)&v220 = v218 * (float)v212;
        v221 = *(float *)&v220 + (float)(v217 * *(float *)&v219);
        LOBYTE(v220) = *(_BYTE *)(v164 + v206);
        LOBYTE(v219) = *(_BYTE *)(v164 + v207);
        WORD3(v629) = v216;
        WORD4(v629) = (int)(float)((float)((float)(v221 + (float)((float)(v208 * v168) * (float)v220))
                                         + (float)((float)(v210 * v168) * (float)v219))
                                 * 255.0);
        v222 = v115 * 1.4142;
        v223 = v116 * 1.4142;
        v224 = *(_DWORD *)(a2 + 24);
        v225 = sub_20E7F9528(a2 + 8);
        v231 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v223) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v223) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v223) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
        if (v231 < 0)
        {
          v232 = 0;
          v233 = 0;
        }
        else if (v225 * v224 <= v231)
        {
          v232 = v224 - 1;
          v233 = v130 - 1;
        }
        else
        {
          v232 = v231 / v225;
          v233 = v231 % v225;
        }
        v234 = (float)(1 << v232);
        *(float *)v227.i32 = v12 * (float)(1.0 / v234);
        *(float *)v228.i32 = v13 * (float)(1.0 / v234);
        v235 = v222 / v234;
        v236 = *(_QWORD *)(a2 + 32);
        v237 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 144 * (v236 * v232 + v233));
        v238 = v237[9];
        v240 = v237[4];
        v239 = v237[5];
        v241 = v237[6];
        *(float *)v226.i32 = (float)v240 + -1.001;
        v242 = *(float *)v228.i32 + (float)(v235 * 0.70711);
        *(float *)v229.i32 = (float)v241 + -1.001;
        if (*(float *)v229.i32 >= v242)
          v243 = *(float *)v228.i32 + (float)(v235 * 0.70711);
        else
          v243 = (float)v241 + -1.001;
        if (v242 < 0.0)
          v243 = 0.0;
        v244 = v243;
        v245 = v238 + v239 * v244;
        v246 = (float)(v244 + 1) - v243;
        v247 = v243 - (float)v243;
        v248.f32[0] = v235 + *(float *)v227.i32;
        v248.f32[1] = *(float *)v227.i32 + (float)(v235 * 0.5);
        *(float32x2_t *)&v248.u32[2] = vmla_n_f32((float32x2_t)vdup_lane_s32(v227, 0), (float32x2_t)0xBF000000BF800000, v235);
        v249 = (float32x4_t)vdupq_lane_s32(v226, 0);
        v250 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v248, v249), (int8x16_t)v249, (int8x16_t)v248), (int8x16_t)vcltzq_f32(v248));
        v251 = (int32x4_t)vcvtq_u32_f32(v250);
        v249.i64[0] = 0x100000001;
        v249.i64[1] = 0x100000001;
        v252 = vaddq_s32(v251, (int32x4_t)v249);
        v253 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)v252), v250);
        v254 = vsubq_f32(v250, vcvtq_f32_u32((uint32x4_t)v251));
        *(float *)&v255 = vmuls_lane_f32(v247, v253, 3);
        v256 = (int8x16_t)vtrn2q_s32(v251, v252);
        v257 = vextq_s8(v256, v256, 8uLL);
        *(_QWORD *)&v258 = v257.u32[2];
        *((_QWORD *)&v258 + 1) = v257.u32[3];
        v259 = v258;
        *(_QWORD *)&v258 = v257.u32[0];
        v257.i8[0] = *(_BYTE *)(v245 + v257.u32[0]);
        LOBYTE(v230) = *(_BYTE *)(v245 + v257.u32[1]);
        *(float *)&v260 = vmuls_lane_f32(v246, v254, 3) * (float)v230;
        v261 = *(float *)&v260 + (float)(vmuls_lane_f32(v246, v253, 3) * (float)v257.u32[0]);
        LOBYTE(v260) = *(_BYTE *)(v245 + v239 + v258);
        *(float *)&v262 = (float)v260;
        v263 = v261 + (float)(*(float *)&v255 * *(float *)&v262);
        LOBYTE(v262) = *(_BYTE *)(v245 + v239 + v257.u32[1]);
        *(float *)&v264 = (float)(v263 + (float)(vmuls_lane_f32(v247, v254, 3) * (float)v262)) * 255.0;
        HIWORD(v629) = (int)*(float *)&v264;
        LOBYTE(v264) = *(_BYTE *)(v245 + v259);
        *(float *)&v265 = (float)v264;
        LOBYTE(v255) = *(_BYTE *)(v245 + *((_QWORD *)&v259 + 1));
        v266 = (float)(vmuls_lane_f32(v246, *(float32x2_t *)v254.f32, 1) * (float)v255)
             + (float)(vmuls_lane_f32(v246, *(float32x2_t *)v253.f32, 1) * *(float *)&v265);
        LOBYTE(v265) = *(_BYTE *)(v245 + v239 + v259);
        *(float *)&v267 = (float)v265;
        v268 = v266 + (float)(vmuls_lane_f32(v247, *(float32x2_t *)v253.f32, 1) * *(float *)&v267);
        LOBYTE(v267) = *(_BYTE *)(v245 + v239 + *((_QWORD *)&v259 + 1));
        LODWORD(v244) = (int)(float)((float)(v268
                                           + (float)(vmuls_lane_f32(v247, *(float32x2_t *)v254.f32, 1) * (float)v267))
                                   * 255.0);
        v269 = vmla_n_f32((float32x2_t)vdup_lane_s32(v228, 0), (float32x2_t)0xBF3504F300000000, v235);
        v270 = (float32x2_t)vdup_lane_s32(v229, 0);
        v271 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v269, v270), (int8x8_t)v270, (int8x8_t)v269), (int8x8_t)vcltz_f32(v269));
        v272 = (int32x2_t)vcvt_u32_f32(v271);
        v273 = v238 + v239 * v272.u32[0];
        v274 = (unsigned __int8 *)(v273 + v239 + v251.u32[0]);
        v275 = (unsigned __int8 *)(v273 + v239 + v252.u32[0]);
        v276 = v238 + v239 * v272.u32[1];
        *(float32x2_t *)v277.f32 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v272, (int32x2_t)0x100000001)), v271);
        v277.i64[1] = v277.i64[0];
        *(float32x2_t *)v278.f32 = vsub_f32(v271, vcvt_f32_u32((uint32x2_t)v272));
        v278.i64[1] = v278.i64[0];
        v279 = vmulq_f32(v253, v277);
        v280 = vmulq_f32(v253, v278);
        v281 = vmulq_f32(v254, v278);
        v251.i16[0] = *(unsigned __int8 *)(v273 + v251.u32[0]);
        v251.i16[1] = *(unsigned __int8 *)(v276 + v259);
        v251.i16[2] = *(unsigned __int8 *)(v273 + v251.u32[2]);
        v251.i16[3] = *(unsigned __int8 *)(v276 + v258);
        v282 = v252.u32[2];
        v252.i16[0] = *(unsigned __int8 *)(v273 + v252.u32[0]);
        v252.i16[1] = *(unsigned __int8 *)(v276 + *((_QWORD *)&v259 + 1));
        v252.i16[2] = *(unsigned __int8 *)(v273 + v252.u32[2]);
        v252.i16[3] = *(unsigned __int8 *)(v276 + v257.u32[1]);
        v283 = vmlaq_f32(vmulq_f32(vmulq_f32(v254, v277), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v252.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v251.i8)), v279);
        v251.i16[0] = *v274;
        v251.i16[1] = *(unsigned __int8 *)(v276 + v239 + v259);
        v251.i16[2] = *(unsigned __int8 *)(v273 + v239 + v251.u32[2]);
        v251.i16[3] = *(unsigned __int8 *)(v276 + v239 + v258);
        v254.i16[0] = *v275;
        v254.i16[1] = *(unsigned __int8 *)(v276 + v239 + *((_QWORD *)&v259 + 1));
        v254.i16[2] = *(unsigned __int8 *)(v273 + v239 + v282);
        v254.i16[3] = *(unsigned __int8 *)(v276 + v239 + v257.u32[1]);
        *(int16x4_t *)v283.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(vmlaq_f32(v283, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v251.i8)), v280), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v254.f32)), v281), v624)));
        *(int16x4_t *)v281.f32 = vrev32_s16(*(int16x4_t *)v283.f32);
        v281.i32[0] = v283.i32[0];
        LOWORD(v630) = v244;
        *(_QWORD *)((char *)&v630 + 2) = v281.i64[0];
        v284 = v222 * 1.4142;
        v285 = v223 * 1.4142;
        v286 = *(_DWORD *)(a2 + 24);
        v287 = sub_20E7F9528(a2 + 8);
        v292 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v285) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v285) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v285) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
        if (v292 < 0)
        {
          v293 = 0;
          v294 = 0;
        }
        else if (v287 * v286 <= v292)
        {
          v293 = v286 - 1;
          v294 = v236 - 1;
        }
        else
        {
          v293 = v292 / v287;
          v294 = v292 % v287;
        }
        v295 = (float)(1 << v293);
        v296 = v12 * (float)(1.0 / v295);
        v297 = v13 * (float)(1.0 / v295);
        v298 = v284 / v295;
        v299 = *(_QWORD *)(a2 + 32);
        v300 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 144 * (v299 * v293 + v294));
        v301 = v300[9];
        v302 = v300[4];
        v303 = v300[5];
        v304 = v300[6];
        v305 = v296 + (float)(v298 * 0.0);
        v306 = (float)v302 + -1.001;
        if (v306 >= v305)
          v307 = v296 + (float)(v298 * 0.0);
        else
          v307 = (float)v302 + -1.001;
        if (v305 >= 0.0)
          v308 = v307;
        else
          v308 = 0.0;
        v309 = (float)v304 + -1.001;
        if (v309 >= (float)(v297 - v298))
          v310 = v297 - v298;
        else
          v310 = (float)v304 + -1.001;
        if ((float)(v297 - v298) < 0.0)
          v310 = 0.0;
        v311 = v308;
        v312 = v310;
        v313 = (v311 + 1);
        v314 = v312 + 1;
        v315 = v301 + v303 * v312;
        v316 = (float)v313 - v308;
        v317 = (float)v314 - v310;
        *(float *)&v318 = v316 * v317;
        v319 = v308 - (float)v308;
        v320 = v319 * v317;
        v321 = v310 - (float)v310;
        *(float *)&v322 = v316 * v321;
        LOBYTE(v288) = *(_BYTE *)(v315 + v311);
        LOBYTE(v289) = *(_BYTE *)(v315 + v313);
        v323 = (float)(v320 * (float)v289) + (float)(*(float *)&v318 * (float)v288);
        LOBYTE(v318) = *(_BYTE *)(v315 + v303 + v311);
        LOBYTE(v322) = *(_BYTE *)(v315 + v303 + v313);
        HIWORD(v630) = (int)(float)((float)((float)(v323 + (float)((float)(v316 * v321) * (float)v318))
                                          + (float)((float)(v319 * v321) * (float)v322))
                                  * 255.0);
        v324 = v296 + (float)(v298 * 0.70711);
        if (v306 >= v324)
          v325 = v296 + (float)(v298 * 0.70711);
        else
          v325 = v306;
        if (v324 < 0.0)
          v325 = 0.0;
        v326 = v297 + (float)(v298 * 0.5);
        if (v309 >= v326)
          v327 = v297 + (float)(v298 * 0.5);
        else
          v327 = v309;
        if (v326 < 0.0)
          v327 = 0.0;
        v328 = v325;
        v329 = v327;
        v330 = (v328 + 1);
        v331 = v329 + 1;
        v332 = v301 + v303 * v329;
        v333 = v332 + v303;
        v334 = (float)v330 - v325;
        v335 = (float)v331 - v327;
        v336 = v325 - (float)v325;
        v337 = v327 - (float)v327;
        LOBYTE(v290) = *(_BYTE *)(v332 + v328);
        LOBYTE(v291) = *(_BYTE *)(v332 + v330);
        v338 = (float)v291;
        *(float *)&v339 = (float)(v336 * v335) * v338;
        *(float *)&v340 = *(float *)&v339 + (float)((float)(v334 * v335) * (float)v290);
        LOBYTE(v339) = *(_BYTE *)(v332 + v303 + v328);
        v341 = *(float *)&v340 + (float)((float)(v334 * v337) * (float)v339);
        LOBYTE(v340) = *(_BYTE *)(v332 + v303 + v330);
        LOWORD(v631) = (int)(float)((float)(v341 + (float)((float)(v336 * v337) * (float)v340)) * 255.0);
        v342 = v297 + (float)(v298 * -0.5);
        if (v309 >= v342)
          v343 = v297 + (float)(v298 * -0.5);
        else
          v343 = v309;
        if (v342 < 0.0)
          v343 = 0.0;
        v344 = v343;
        v345 = v344 + 1;
        v346 = v301 + v303 * v344;
        v347 = v346 + v303;
        v348 = (float)v345 - v343;
        *(float *)&v349 = (float)v343;
        v350 = v343 - *(float *)&v349;
        LOBYTE(v349) = *(_BYTE *)(v346 + v328);
        *(float *)&v351 = (float)v349;
        LOBYTE(v338) = *(_BYTE *)(v346 + v330);
        *(float *)&v352 = (float)(v336 * v348) * (float)LODWORD(v338);
        v353 = *(float *)&v352 + (float)((float)(v334 * v348) * *(float *)&v351);
        LOBYTE(v352) = *(_BYTE *)(v346 + v303 + v328);
        LOBYTE(v351) = *(_BYTE *)(v346 + v303 + v330);
        WORD1(v631) = (int)(float)((float)((float)(v353 + (float)((float)(v334 * v350) * (float)v352))
                                         + (float)((float)(v336 * v350) * (float)v351))
                                 * 255.0);
        v354 = v298 + v297;
        if (v309 >= v354)
          v309 = v354;
        if (v354 >= 0.0)
          v355 = v309;
        else
          v355 = 0.0;
        v356 = v355;
        v357 = v301 + v303 * v356;
        v358 = v357 + v303;
        v359 = (float)(v356 + 1) - v355;
        v360 = v316 * v359;
        v361 = v319 * v359;
        *(float *)&v362 = (float)v355;
        v363 = v355 - *(float *)&v362;
        v364 = v316 * v363;
        v365 = v319 * v363;
        LOBYTE(v319) = *(_BYTE *)(v357 + v311);
        LOBYTE(v362) = *(_BYTE *)(v357 + v313);
        *(float *)&v366 = (float)v362;
        v367 = v361 * *(float *)&v366;
        LOBYTE(v366) = *(_BYTE *)(v358 + v311);
        *(float *)&v368 = v367 + (float)(v360 * (float)LODWORD(v319));
        v369 = *(float *)&v368 + (float)(v364 * (float)v366);
        LOBYTE(v368) = *(_BYTE *)(v358 + v313);
        v370 = (float)v368;
        v371 = (int)(float)((float)(v369 + (float)(v365 * v370)) * 255.0);
        v372 = v296 + (float)(v298 * -0.70711);
        if (v306 >= v372)
          v373 = v372;
        else
          v373 = v306;
        if (v372 >= 0.0)
          v374 = v373;
        else
          v374 = 0.0;
        v375 = v374;
        v376 = (v375 + 1);
        v377 = (float)v376 - v374;
        v378 = v377 * v348;
        v379 = v374 - (float)v374;
        v380 = v379 * v348;
        *(float *)&v381 = v377 * v350;
        LOBYTE(v370) = *(_BYTE *)(v346 + v375);
        *(float *)&v382 = (float)LODWORD(v370);
        LOBYTE(v348) = *(_BYTE *)(v346 + v376);
        *(float *)&v383 = v380 * (float)LODWORD(v348);
        v384 = *(float *)&v383 + (float)(v378 * *(float *)&v382);
        LOBYTE(v383) = *(_BYTE *)(v347 + v375);
        LOBYTE(v382) = *(_BYTE *)(v347 + v376);
        v385 = (int)(float)((float)((float)(v384 + (float)((float)(v377 * v350) * (float)v383))
                                  + (float)((float)(v379 * v350) * (float)v382))
                          * 255.0);
        WORD2(v631) = v371;
        v386 = v377 * v335;
        v387 = v379 * v335;
        LOBYTE(v335) = *(_BYTE *)(v332 + v375);
        *(float *)&v388 = (float)LODWORD(v335);
        LOBYTE(v381) = *(_BYTE *)(v332 + v376);
        *(float *)&v389 = v387 * (float)v381;
        v390 = *(float *)&v389 + (float)(v386 * *(float *)&v388);
        LOBYTE(v389) = *(_BYTE *)(v333 + v375);
        LOBYTE(v388) = *(_BYTE *)(v333 + v376);
        WORD3(v631) = v385;
        WORD4(v631) = (int)(float)((float)((float)(v390 + (float)((float)(v377 * v337) * (float)v389))
                                         + (float)((float)(v379 * v337) * (float)v388))
                                 * 255.0);
        v391 = v284 * 1.4142;
        v392 = v285 * 1.4142;
        v393 = *(_DWORD *)(a2 + 24);
        v394 = sub_20E7F9528(a2 + 8);
        v400 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v392) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v392) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v392) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
        if (v400 < 0)
        {
          v401 = 0;
          v402 = 0;
        }
        else if (v394 * v393 <= v400)
        {
          v401 = v393 - 1;
          v402 = v299 - 1;
        }
        else
        {
          v401 = v400 / v394;
          v402 = v400 % v394;
        }
        v403 = (float)(1 << v401);
        *(float *)v396.i32 = v12 * (float)(1.0 / v403);
        *(float *)v397.i32 = v13 * (float)(1.0 / v403);
        v404 = v391 / v403;
        v405 = *(_QWORD *)(a2 + 32);
        v406 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 144 * (v405 * v401 + v402));
        v407 = v406[9];
        v409 = v406[4];
        v408 = v406[5];
        v410 = v406[6];
        *(float *)v395.i32 = (float)v409 + -1.001;
        v411 = *(float *)v397.i32 + (float)(v404 * 0.70711);
        *(float *)v398.i32 = (float)v410 + -1.001;
        if (*(float *)v398.i32 >= v411)
          v412 = *(float *)v397.i32 + (float)(v404 * 0.70711);
        else
          v412 = (float)v410 + -1.001;
        if (v411 < 0.0)
          v412 = 0.0;
        v413 = v412;
        v414 = v407 + v408 * v413;
        v415 = (float)(v413 + 1) - v412;
        v416 = v412 - (float)v412;
        v417.f32[0] = v404 + *(float *)v396.i32;
        v417.f32[1] = *(float *)v396.i32 + (float)(v404 * 0.5);
        *(float32x2_t *)&v417.u32[2] = vmla_n_f32((float32x2_t)vdup_lane_s32(v396, 0), (float32x2_t)0xBF000000BF800000, v404);
        v418 = (float32x4_t)vdupq_lane_s32(v395, 0);
        v419 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v417, v418), (int8x16_t)v418, (int8x16_t)v417), (int8x16_t)vcltzq_f32(v417));
        v420 = (int32x4_t)vcvtq_u32_f32(v419);
        v418.i64[0] = 0x100000001;
        v418.i64[1] = 0x100000001;
        v421 = vaddq_s32(v420, (int32x4_t)v418);
        v422 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)v421), v419);
        v423 = vsubq_f32(v419, vcvtq_f32_u32((uint32x4_t)v420));
        *(float *)&v424 = vmuls_lane_f32(v416, v422, 3);
        v425 = (int8x16_t)vtrn2q_s32(v420, v421);
        v426 = vextq_s8(v425, v425, 8uLL);
        *(_QWORD *)&v427 = v426.u32[2];
        *((_QWORD *)&v427 + 1) = v426.u32[3];
        v428 = v427;
        *(_QWORD *)&v427 = v426.u32[0];
        v426.i8[0] = *(_BYTE *)(v414 + v426.u32[0]);
        LOBYTE(v399) = *(_BYTE *)(v414 + v426.u32[1]);
        *(float *)&v429 = vmuls_lane_f32(v415, v423, 3) * (float)v399;
        v430 = *(float *)&v429 + (float)(vmuls_lane_f32(v415, v422, 3) * (float)v426.u32[0]);
        LOBYTE(v429) = *(_BYTE *)(v414 + v408 + v427);
        *(float *)&v431 = (float)v429;
        v432 = v430 + (float)(*(float *)&v424 * *(float *)&v431);
        LOBYTE(v431) = *(_BYTE *)(v414 + v408 + v426.u32[1]);
        *(float *)&v433 = (float)(v432 + (float)(vmuls_lane_f32(v416, v423, 3) * (float)v431)) * 255.0;
        HIWORD(v631) = (int)*(float *)&v433;
        LOBYTE(v433) = *(_BYTE *)(v414 + v428);
        *(float *)&v434 = (float)v433;
        LOBYTE(v424) = *(_BYTE *)(v414 + *((_QWORD *)&v428 + 1));
        v435 = (float)(vmuls_lane_f32(v415, *(float32x2_t *)v423.f32, 1) * (float)v424)
             + (float)(vmuls_lane_f32(v415, *(float32x2_t *)v422.f32, 1) * *(float *)&v434);
        LOBYTE(v434) = *(_BYTE *)(v414 + v408 + v428);
        *(float *)&v436 = (float)v434;
        v437 = v435 + (float)(vmuls_lane_f32(v416, *(float32x2_t *)v422.f32, 1) * *(float *)&v436);
        LOBYTE(v436) = *(_BYTE *)(v414 + v408 + *((_QWORD *)&v428 + 1));
        LODWORD(v413) = (int)(float)((float)(v437
                                           + (float)(vmuls_lane_f32(v416, *(float32x2_t *)v423.f32, 1) * (float)v436))
                                   * 255.0);
        v438 = vmla_n_f32((float32x2_t)vdup_lane_s32(v397, 0), (float32x2_t)0xBF3504F300000000, v404);
        v439 = (float32x2_t)vdup_lane_s32(v398, 0);
        v440 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v438, v439), (int8x8_t)v439, (int8x8_t)v438), (int8x8_t)vcltz_f32(v438));
        v441 = (int32x2_t)vcvt_u32_f32(v440);
        v442 = v407 + v408 * v441.u32[0];
        v443 = (unsigned __int8 *)(v442 + v408 + v420.u32[0]);
        v444 = (unsigned __int8 *)(v442 + v408 + v421.u32[0]);
        v445 = v407 + v408 * v441.u32[1];
        *(float32x2_t *)v446.f32 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v441, (int32x2_t)0x100000001)), v440);
        v446.i64[1] = v446.i64[0];
        *(float32x2_t *)v447.f32 = vsub_f32(v440, vcvt_f32_u32((uint32x2_t)v441));
        v447.i64[1] = v447.i64[0];
        v448 = vmulq_f32(v422, v446);
        v449 = vmulq_f32(v422, v447);
        v450 = vmulq_f32(v423, v447);
        v420.i16[0] = *(unsigned __int8 *)(v442 + v420.u32[0]);
        v420.i16[1] = *(unsigned __int8 *)(v445 + v428);
        v420.i16[2] = *(unsigned __int8 *)(v442 + v420.u32[2]);
        v420.i16[3] = *(unsigned __int8 *)(v445 + v427);
        v451 = v421.u32[2];
        v421.i16[0] = *(unsigned __int8 *)(v442 + v421.u32[0]);
        v421.i16[1] = *(unsigned __int8 *)(v445 + *((_QWORD *)&v428 + 1));
        v421.i16[2] = *(unsigned __int8 *)(v442 + v421.u32[2]);
        v421.i16[3] = *(unsigned __int8 *)(v445 + v426.u32[1]);
        v452 = vmlaq_f32(vmulq_f32(vmulq_f32(v423, v446), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v421.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v420.i8)), v448);
        v420.i16[0] = *v443;
        v420.i16[1] = *(unsigned __int8 *)(v445 + v408 + v428);
        v420.i16[2] = *(unsigned __int8 *)(v442 + v408 + v420.u32[2]);
        v420.i16[3] = *(unsigned __int8 *)(v445 + v408 + v427);
        v423.i16[0] = *v444;
        v423.i16[1] = *(unsigned __int8 *)(v445 + v408 + *((_QWORD *)&v428 + 1));
        v423.i16[2] = *(unsigned __int8 *)(v442 + v408 + v451);
        v423.i16[3] = *(unsigned __int8 *)(v445 + v408 + v426.u32[1]);
        *(int16x4_t *)v452.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(vmlaq_f32(v452, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v420.i8)), v449), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v423.f32)), v450), v624)));
        *(int16x4_t *)v450.f32 = vrev32_s16(*(int16x4_t *)v452.f32);
        v450.i32[0] = v452.i32[0];
        LOWORD(v632) = v413;
        *(_QWORD *)((char *)&v632 + 2) = v450.i64[0];
        v453 = v391 * 1.4142;
        v454 = v392 * 1.4142;
        v455 = *(_DWORD *)(a2 + 24);
        v456 = sub_20E7F9528(a2 + 8);
        v461 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v454) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v454) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v454) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
        if (v461 < 0)
        {
          v462 = 0;
          v463 = 0;
        }
        else if (v456 * v455 <= v461)
        {
          v462 = v455 - 1;
          v463 = v405 - 1;
        }
        else
        {
          v462 = v461 / v456;
          v463 = v461 % v456;
        }
        v464 = (float)(1 << v462);
        v465 = v12 * (float)(1.0 / v464);
        v466 = v13 * (float)(1.0 / v464);
        v467 = v453 / v464;
        v468 = *(_QWORD *)(a2 + 32);
        v469 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 144 * (v468 * v462 + v463));
        v470 = v469[9];
        v471 = v469[4];
        v472 = v469[5];
        v473 = v469[6];
        v474 = v465 + (float)(v467 * 0.0);
        v475 = (float)v471 + -1.001;
        if (v475 >= v474)
          v476 = v465 + (float)(v467 * 0.0);
        else
          v476 = (float)v471 + -1.001;
        if (v474 >= 0.0)
          v477 = v476;
        else
          v477 = 0.0;
        v478 = (float)v473 + -1.001;
        if (v478 >= (float)(v466 - v467))
          v479 = v466 - v467;
        else
          v479 = (float)v473 + -1.001;
        if ((float)(v466 - v467) < 0.0)
          v479 = 0.0;
        v480 = v477;
        v481 = v479;
        v482 = (v480 + 1);
        v483 = v481 + 1;
        v484 = v470 + v472 * v481;
        v485 = (float)v482 - v477;
        v486 = (float)v483 - v479;
        *(float *)&v487 = v485 * v486;
        v488 = v477 - (float)v477;
        v489 = v488 * v486;
        v490 = v479 - (float)v479;
        *(float *)&v491 = v485 * v490;
        LOBYTE(v457) = *(_BYTE *)(v484 + v480);
        LOBYTE(v458) = *(_BYTE *)(v484 + v482);
        v492 = (float)(v489 * (float)v458) + (float)(*(float *)&v487 * (float)v457);
        LOBYTE(v487) = *(_BYTE *)(v484 + v472 + v480);
        LOBYTE(v491) = *(_BYTE *)(v484 + v472 + v482);
        HIWORD(v632) = (int)(float)((float)((float)(v492 + (float)((float)(v485 * v490) * (float)v487))
                                          + (float)((float)(v488 * v490) * (float)v491))
                                  * 255.0);
        v493 = v465 + (float)(v467 * 0.70711);
        if (v475 >= v493)
          v494 = v465 + (float)(v467 * 0.70711);
        else
          v494 = v475;
        if (v493 < 0.0)
          v494 = 0.0;
        v495 = v466 + (float)(v467 * 0.5);
        if (v478 >= v495)
          v496 = v466 + (float)(v467 * 0.5);
        else
          v496 = v478;
        if (v495 < 0.0)
          v496 = 0.0;
        v497 = v494;
        v498 = v496;
        v499 = (v497 + 1);
        v500 = v498 + 1;
        v501 = v470 + v472 * v498;
        v502 = v501 + v472;
        v503 = (float)v499 - v494;
        v504 = (float)v500 - v496;
        v505 = v494 - (float)v494;
        v506 = v496 - (float)v496;
        LOBYTE(v459) = *(_BYTE *)(v501 + v497);
        LOBYTE(v460) = *(_BYTE *)(v501 + v499);
        v507 = (float)v460;
        *(float *)&v508 = (float)(v505 * v504) * v507;
        *(float *)&v509 = *(float *)&v508 + (float)((float)(v503 * v504) * (float)v459);
        LOBYTE(v508) = *(_BYTE *)(v501 + v472 + v497);
        v510 = *(float *)&v509 + (float)((float)(v503 * v506) * (float)v508);
        LOBYTE(v509) = *(_BYTE *)(v501 + v472 + v499);
        v633[0] = (int)(float)((float)(v510 + (float)((float)(v505 * v506) * (float)v509)) * 255.0);
        v511 = v466 + (float)(v467 * -0.5);
        if (v478 >= v511)
          v512 = v466 + (float)(v467 * -0.5);
        else
          v512 = v478;
        if (v511 < 0.0)
          v512 = 0.0;
        v513 = v512;
        v514 = v513 + 1;
        v515 = v470 + v472 * v513;
        v516 = v515 + v472;
        v517 = (float)v514 - v512;
        *(float *)&v518 = (float)v512;
        v519 = v512 - *(float *)&v518;
        LOBYTE(v518) = *(_BYTE *)(v515 + v497);
        *(float *)&v520 = (float)v518;
        LOBYTE(v507) = *(_BYTE *)(v515 + v499);
        *(float *)&v521 = (float)(v505 * v517) * (float)LODWORD(v507);
        v522 = *(float *)&v521 + (float)((float)(v503 * v517) * *(float *)&v520);
        LOBYTE(v521) = *(_BYTE *)(v515 + v472 + v497);
        LOBYTE(v520) = *(_BYTE *)(v515 + v472 + v499);
        v633[1] = (int)(float)((float)((float)(v522 + (float)((float)(v503 * v519) * (float)v521))
                                     + (float)((float)(v505 * v519) * (float)v520))
                             * 255.0);
        v523 = v467 + v466;
        if (v478 >= v523)
          v478 = v523;
        if (v523 >= 0.0)
          v524 = v478;
        else
          v524 = 0.0;
        v525 = v524;
        v526 = v470 + v472 * v525;
        v527 = v526 + v472;
        v528 = (float)(v525 + 1) - v524;
        v529 = v485 * v528;
        v530 = v488 * v528;
        *(float *)&v531 = (float)v524;
        v532 = v524 - *(float *)&v531;
        v533 = v485 * v532;
        v534 = v488 * v532;
        LOBYTE(v488) = *(_BYTE *)(v526 + v480);
        LOBYTE(v531) = *(_BYTE *)(v526 + v482);
        *(float *)&v535 = (float)v531;
        v536 = v530 * *(float *)&v535;
        LOBYTE(v535) = *(_BYTE *)(v527 + v480);
        *(float *)&v537 = v536 + (float)(v529 * (float)LODWORD(v488));
        v538 = *(float *)&v537 + (float)(v533 * (float)v535);
        LOBYTE(v537) = *(_BYTE *)(v527 + v482);
        v539 = (float)v537;
        v540 = (int)(float)((float)(v538 + (float)(v534 * v539)) * 255.0);
        v541 = v465 + (float)(v467 * -0.70711);
        if (v475 >= v541)
          v542 = v541;
        else
          v542 = v475;
        if (v541 >= 0.0)
          v543 = v542;
        else
          v543 = 0.0;
        v544 = v543;
        v545 = (v544 + 1);
        v546 = (float)v545 - v543;
        v547 = v546 * v517;
        v548 = v543 - (float)v543;
        v549 = v548 * v517;
        *(float *)&v550 = v546 * v519;
        LOBYTE(v539) = *(_BYTE *)(v515 + v544);
        *(float *)&v551 = (float)LODWORD(v539);
        LOBYTE(v517) = *(_BYTE *)(v515 + v545);
        *(float *)&v552 = v549 * (float)LODWORD(v517);
        v553 = *(float *)&v552 + (float)(v547 * *(float *)&v551);
        LOBYTE(v552) = *(_BYTE *)(v516 + v544);
        LOBYTE(v551) = *(_BYTE *)(v516 + v545);
        v554 = (int)(float)((float)((float)(v553 + (float)((float)(v546 * v519) * (float)v552))
                                  + (float)((float)(v548 * v519) * (float)v551))
                          * 255.0);
        v633[2] = v540;
        v555 = v546 * v504;
        v556 = v548 * v504;
        LOBYTE(v504) = *(_BYTE *)(v501 + v544);
        *(float *)&v557 = (float)LODWORD(v504);
        LOBYTE(v550) = *(_BYTE *)(v501 + v545);
        *(float *)&v558 = v556 * (float)v550;
        v559 = *(float *)&v558 + (float)(v555 * *(float *)&v557);
        LOBYTE(v558) = *(_BYTE *)(v502 + v544);
        LOBYTE(v557) = *(_BYTE *)(v502 + v545);
        v633[3] = v554;
        v633[4] = (int)(float)((float)((float)(v559 + (float)((float)(v546 * v506) * (float)v558))
                                     + (float)((float)(v548 * v506) * (float)v557))
                             * 255.0);
        v560 = v453 * 1.4142;
        v561 = *(_DWORD *)(a2 + 24);
        v562 = sub_20E7F9528(a2 + 8);
        v568 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v454 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v454 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v454 * 1.4142) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
        if (v568 < 0)
        {
          v569 = 0;
          v570 = 0;
        }
        else if (v562 * v561 <= v568)
        {
          v569 = v561 - 1;
          v570 = v468 - 1;
        }
        else
        {
          v569 = v568 / v562;
          v570 = v568 % v562;
        }
        v571 = 0;
        v572 = (float)(1 << v569);
        *(float *)v565.i32 = v12 * (float)(1.0 / v572);
        *(float *)v564.i32 = v13 * (float)(1.0 / v572);
        v573 = v560 / v572;
        v574 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 144 * (*(_QWORD *)(a2 + 32) * v569 + v570));
        v575 = v574[9];
        v577 = v574[4];
        v576 = v574[5];
        v578 = v574[6];
        v579 = *(float *)v564.i32 + (float)((float)(v560 / v572) * 0.70711);
        *(float *)v566.i32 = (float)v578 + -1.001;
        if (*(float *)v566.i32 >= v579)
          v580 = *(float *)v564.i32 + (float)(v573 * 0.70711);
        else
          v580 = (float)v578 + -1.001;
        if (v579 >= 0.0)
          v581 = v580;
        else
          v581 = 0.0;
        v582 = v581;
        *(float *)v563.i32 = (float)v577 + -1.001;
        v583 = v575 + v576 * v582;
        v584 = (float)(v582 + 1) - v581;
        v585 = *(float *)v565.i32 + (float)(v573 * 0.5);
        v586 = (float32x2_t)vdup_lane_s32(v565, 0);
        v587.f32[0] = v573 + *(float *)v565.i32;
        v587.f32[1] = v585;
        *(float32x2_t *)&v587.u32[2] = vmla_n_f32(v586, (float32x2_t)0xBF000000BF800000, v573);
        v588 = v581 - (float)v581;
        v589 = (float32x4_t)vdupq_lane_s32(v563, 0);
        v590 = (float32x4_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v587, v589), (int8x16_t)v589, (int8x16_t)v587), (int8x16_t)vcltzq_f32(v587));
        v591 = (int32x4_t)vcvtq_u32_f32(v590);
        v589.i64[0] = 0x100000001;
        v589.i64[1] = 0x100000001;
        v592 = vaddq_s32(v591, (int32x4_t)v589);
        v593 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)v592), v590);
        v594 = vsubq_f32(v590, vcvtq_f32_u32((uint32x4_t)v591));
        *(float *)&v595 = vmuls_lane_f32(v588, v593, 3);
        v596 = (int8x16_t)vtrn2q_s32(v591, v592);
        v597 = vextq_s8(v596, v596, 8uLL);
        *(_QWORD *)&v598 = v597.u32[2];
        *((_QWORD *)&v598 + 1) = v597.u32[3];
        v599 = v598;
        *(_QWORD *)&v598 = v597.u32[0];
        v597.i8[0] = *(_BYTE *)(v583 + v597.u32[0]);
        LOBYTE(v567) = *(_BYTE *)(v583 + v597.u32[1]);
        *(float *)&v600 = vmuls_lane_f32(v584, v594, 3) * (float)v567;
        v586.f32[0] = *(float *)&v600 + (float)(vmuls_lane_f32(v584, v593, 3) * (float)v597.u32[0]);
        LOBYTE(v600) = *(_BYTE *)(v583 + v576 + v598);
        *(float *)&v601 = (float)v600;
        v586.f32[0] = v586.f32[0] + (float)(*(float *)&v595 * *(float *)&v601);
        LOBYTE(v601) = *(_BYTE *)(v583 + v576 + v597.u32[1]);
        v586.f32[0] = (float)(v586.f32[0] + (float)(vmuls_lane_f32(v588, v594, 3) * (float)v601)) * 255.0;
        v633[7] = (int)v586.f32[0];
        v586.i8[0] = *(_BYTE *)(v583 + v599);
        v586.f32[0] = (float)v586.u32[0];
        LOBYTE(v595) = *(_BYTE *)(v583 + *((_QWORD *)&v599 + 1));
        v602 = (float)(vmuls_lane_f32(v584, *(float32x2_t *)v594.f32, 1) * (float)v595)
             + (float)(vmuls_lane_f32(v584, *(float32x2_t *)v593.f32, 1) * v586.f32[0]);
        v586.i8[0] = *(_BYTE *)(v583 + v576 + v599);
        v586.f32[0] = (float)v586.u32[0];
        v603 = v602 + (float)(vmuls_lane_f32(v588, *(float32x2_t *)v593.f32, 1) * v586.f32[0]);
        v586.i8[0] = *(_BYTE *)(v583 + v576 + *((_QWORD *)&v599 + 1));
        v633[8] = (int)(float)((float)(v603
                                     + (float)(vmuls_lane_f32(v588, *(float32x2_t *)v594.f32, 1) * (float)v586.u32[0]))
                             * 255.0);
        v604 = vmla_n_f32((float32x2_t)vdup_lane_s32(v564, 0), (float32x2_t)0xBF3504F300000000, v573);
        v605 = (float32x2_t)vdup_lane_s32(v566, 0);
        v606 = (float32x2_t)vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v604, v605), (int8x8_t)v605, (int8x8_t)v604), (int8x8_t)vcltz_f32(v604));
        v607 = (int32x2_t)vcvt_u32_f32(v606);
        v608 = v575 + v576 * v607.u32[0];
        v609 = (unsigned __int8 *)(v608 + v576 + v591.u32[0]);
        v610 = (unsigned __int8 *)(v608 + v576 + v592.u32[0]);
        v611 = v575 + v576 * v607.u32[1];
        *(float32x2_t *)v612.f32 = vsub_f32(vcvt_f32_u32((uint32x2_t)vadd_s32(v607, (int32x2_t)0x100000001)), v606);
        v612.i64[1] = v612.i64[0];
        *(float32x2_t *)v613.f32 = vsub_f32(v606, vcvt_f32_u32((uint32x2_t)v607));
        v613.i64[1] = v613.i64[0];
        result = (unsigned __int8 *)(v611 + v576 + v599);
        v614 = vmulq_f32(v593, v612);
        v615 = vmulq_f32(v594, v612);
        v616 = vmulq_f32(v593, v613);
        v617 = vmulq_f32(v594, v613);
        v591.i16[0] = *(unsigned __int8 *)(v608 + v591.u32[0]);
        v591.i16[1] = *(unsigned __int8 *)(v611 + v599);
        v591.i16[2] = *(unsigned __int8 *)(v608 + v591.u32[2]);
        v591.i16[3] = *(unsigned __int8 *)(v611 + v598);
        v618 = v592.u32[2];
        v592.i16[0] = *(unsigned __int8 *)(v608 + v592.u32[0]);
        v592.i16[1] = *(unsigned __int8 *)(v611 + *((_QWORD *)&v599 + 1));
        v592.i16[2] = *(unsigned __int8 *)(v608 + v592.u32[2]);
        v592.i16[3] = *(unsigned __int8 *)(v611 + v597.u32[1]);
        v613.i16[0] = *v609;
        v613.i16[1] = *result;
        v613.i16[2] = *(unsigned __int8 *)(v608 + v576 + v591.u32[2]);
        v613.i16[3] = *(unsigned __int8 *)(v611 + v576 + v598);
        v619 = vmlaq_f32(vmlaq_f32(vmulq_f32(v615, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v592.i8))), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v591.i8)), v614), vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v613.f32)), v616);
        v616.i16[0] = *v610;
        v616.i16[1] = *(unsigned __int8 *)(v611 + v576 + *((_QWORD *)&v599 + 1));
        v616.i16[2] = *(unsigned __int8 *)(v608 + v576 + v618);
        v616.i16[3] = *(unsigned __int8 *)(v611 + v576 + v597.u32[1]);
        *(int16x4_t *)v619.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vmlaq_f32(v619, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v616.f32)), v617), v624)));
        *(int16x4_t *)v617.f32 = vrev32_s16(*(int16x4_t *)v619.f32);
        v617.i32[0] = v619.i32[0];
        *(_QWORD *)&v633[9] = v617.i64[0];
        v10 = 0;
        do
        {
          v10 = vsra_n_s32(v10, vmul_s32(vdup_n_s32((unsigned __int16)v626[v625[0].u16[v571 + 2]]- (unsigned __int16)v626[v625[0].u16[v571 + 3]]), *(int32x2_t *)((char *)&v625[1] + v571 * 2)), 0xFuLL);
          v571 += 6;
        }
        while (v571 != 270);
        v620 = v10.i32[0];
        if (v10)
        {
          v7 = fabsf((float)v10.i32[1]) + 0.0000001;
          v8 = v7 + (float)v620;
          v9 = v8 / (float)(v7 - (float)v620);
          *(float *)v10.i32 = (float)((float)v620 - v7) / v8;
          v11 = 0.7854;
          if (v620 < 1)
          {
            v11 = 2.3562;
            *(float *)v10.i32 = v9;
          }
          *(float *)v10.i32 = v11
                            + (float)((float)((float)((float)(*(float *)v10.i32 * 0.1821) * *(float *)v10.i32) + -0.9675)
                                    * *(float *)v10.i32);
          if (v10.i32[1] < 0)
            *(float *)v10.i32 = 6.2832 - *(float *)v10.i32;
        }
        else
        {
          v10.i32[0] = 0;
        }
        if (*(float *)v10.i32 < 0.0)
          *(float *)v10.i32 = 0.0;
        if (*(float *)v10.i32 > 6.2832)
          *(float *)v10.i32 = 6.2832;
        v6[10] = *(float *)v10.i32;
        v6 += 12;
      }
      while (v6 != v623);
    }
  }
  else
  {
    v625[0].i32[0] = 1191181824;
    result = (unsigned __int8 *)memcpy((char *)v625 + 4, &unk_20E80E7D8, 0x21CuLL);
    v622 = *a1;
    for (i = a1[1]; v622 != i; v622 += 12)
      result = (unsigned __int8 *)sub_20E7BB788(v622 + 10, v625, a2, v622[4], v622[5], v622[3], 2.0, 1.0);
  }
  return result;
}

uint64_t sub_20E7B0FDC(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  float v11;
  __float2 v12;
  int v13;
  int v14;
  int v15;
  float v16;
  int v17;
  int v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  unsigned int v42;
  float v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  float v97;
  float v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  float v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  float v111;
  float v112;
  float v113;
  uint64_t v114;
  float v115;
  uint64_t v116;
  unint64_t v117;
  float v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  float v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  float v129;
  float v130;
  float v131;
  float v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  float v185;
  float v186;
  float v187;
  float v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  float v192;
  float v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  float v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  float v206;
  float v207;
  float v208;
  float v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  uint64_t v247;
  float v248;
  uint64_t v249;
  unint64_t v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  float v278;
  float v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  float v285;
  float v286;
  float v287;
  float v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  uint64_t v315;
  float v316;
  uint64_t v317;
  uint64_t v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  float v356;
  float v357;
  float v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  float v364;
  float v365;
  float v366;
  float v367;
  uint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  unint64_t v371;
  float v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  float v399;
  float v400;
  float v401;
  float v402;
  float v403;
  float v404;
  uint64_t v405;
  float v406;
  float v407;
  float v408;
  float v409;
  float v410;
  float v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  float v418;
  float v419;
  uint64_t v420;
  float v421;
  uint64_t v422;
  unint64_t v423;
  float v424;
  float v425;
  float v426;
  float v427;
  float v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  uint64_t v432;
  float v433;
  int v434;
  int v435;
  float v436;
  int v437;
  uint64_t v438;
  int v439;
  int v440;
  float v441;
  float v442;
  float v443;
  float v444;
  _QWORD *v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  unint64_t v449;
  float v450;
  float v451;
  float v452;
  float v453;
  float v454;
  float v455;
  float v456;
  float v457;
  float v458;
  float v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  float v463;
  float v464;
  float v465;
  float v466;
  float v467;
  float v468;
  float v469;
  uint64_t v470;
  float v471;
  uint64_t v472;
  uint64_t v473;
  float v474;
  float v475;
  float v476;
  float v477;
  float v478;
  float v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  float v483;
  float v484;
  float v485;
  float v486;
  float v487;
  float v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  float v492;
  float v493;
  float v494;
  float v495;
  float v496;
  float v497;
  float v498;
  float v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  float v505;
  float v506;
  float v507;
  float v508;
  float v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  float v515;
  unsigned int v516;
  int v517;
  int v518;
  unsigned int v519;
  unsigned int v520;
  int v521;
  int v522;
  int v523;
  float v524;
  float v525;
  float v526;
  float v527;
  float v528;
  float v529;
  float v530;
  float v531;
  float v532;
  float v533;
  float v534;
  float v535;
  float v536;
  float v537;
  float v538;
  float v539;
  float v540;
  float v541;
  float v542;
  float v543;
  float v544;
  float v545;
  float v546;
  float v547;
  float v548;
  unint64_t *v549;
  float v550;
  float v551;
  float v552;
  float v553;
  float v554;
  float v555;
  float v556;
  unint64_t v557;
  float v558;
  float v559;
  float v560;
  float v561;
  float v562;
  BOOL v563;
  uint64_t v564;
  uint64_t v565;
  float v566;
  float v567;
  unint64_t v568;
  unint64_t v569;
  uint64_t v570;
  unsigned int v571;
  unint64_t v572;
  float v573;
  unsigned int v574;
  float v575;
  unsigned int v576;
  unsigned int v577;
  unint64_t v578;
  float v579;
  float v580;
  float v581;
  float v582;
  float v583;
  float v584;
  float v585;
  float v586;
  float v587;
  uint64_t v588;
  uint64_t v589;
  float v590;
  float v591;
  float v592;
  uint64_t v593;
  unsigned int v594;
  unint64_t v595;
  float v596;
  unsigned int v597;
  float v598;
  float v599;
  unsigned int v600;
  unsigned int v601;
  unint64_t v602;
  float v603;
  float v604;
  float v605;
  float v606;
  float v607;
  float v608;
  float v609;
  float v610;
  uint64_t v611;
  uint64_t v612;
  float v613;
  float v614;
  uint64_t v615;
  unsigned int v616;
  unint64_t v617;
  float v618;
  unsigned int v619;
  float v620;
  unsigned int v621;
  unsigned int v622;
  unint64_t v623;
  float v624;
  float v625;
  float v626;
  float v627;
  float v628;
  float v629;
  float v630;
  float v631;
  float v632;
  uint64_t v633;
  uint64_t v634;
  float v635;
  float v636;
  uint64_t v637;
  unsigned int v638;
  unint64_t v639;
  float v640;
  unsigned int v641;
  unsigned int v642;
  float v643;
  unint64_t v644;
  float v645;
  float v646;
  float v647;
  float v648;
  float v649;
  float v650;
  float v651;
  uint64_t v652;
  uint64_t v653;
  float v654;
  float v655;
  uint64_t v656;
  unsigned int v657;
  unint64_t v658;
  float v659;
  unsigned int v660;
  float v661;
  unsigned int v662;
  unsigned int v663;
  unint64_t v664;
  float v665;
  float v666;
  float v667;
  float v668;
  float v669;
  float v670;
  float v671;
  float v672;
  float v673;
  uint64_t v674;
  float v675;
  uint64_t v676;
  float v677;
  float v678;
  uint64_t v679;
  unint64_t v680;
  float v681;
  unsigned int v682;
  unsigned int v683;
  unsigned int v684;
  float v685;
  unint64_t v686;
  float v687;
  unsigned int v688;
  unsigned int v689;
  unsigned int v690;
  unsigned int v691;
  unsigned int v692;
  unsigned int v693;
  unsigned int v694;
  unsigned int v695;
  unsigned int v696;
  unsigned int v697;
  unsigned int v698;
  unsigned int v699;
  unsigned int v700;
  unsigned int v701;
  float v702;
  float v703;
  float v704;
  float v705;
  float v706;
  unsigned int v707;
  unsigned int v708;
  unsigned int v709;
  unsigned int v710;
  unsigned int v711;
  char v712;
  char v713;
  char v714;
  char v715;
  char v716;
  char v717;
  char v718;
  unsigned int v720;
  unsigned int v721;
  BOOL v722;
  char v723;
  char v724;
  BOOL v725;
  BOOL v726;
  BOOL v727;
  BOOL v728;
  BOOL v729;
  BOOL v730;
  BOOL v731;
  BOOL v732;
  BOOL v733;
  char v734;
  char v735;
  BOOL v736;
  BOOL v737;
  BOOL v738;
  BOOL v739;
  char v740;
  char v741;
  BOOL v742;
  BOOL v743;
  BOOL v744;
  BOOL v745;
  char v746;
  char v747;
  char v748;
  BOOL v749;
  BOOL v750;
  BOOL v751;
  BOOL v752;
  BOOL v753;
  char v754;
  char v755;
  BOOL v756;
  BOOL v757;
  BOOL v758;
  BOOL v759;
  BOOL v760;
  char v761;
  BOOL v762;
  char v763;
  char v764;
  BOOL v765;
  BOOL v766;
  BOOL v767;
  BOOL v768;
  BOOL v769;
  char v770;
  BOOL v771;
  BOOL v772;
  BOOL v773;
  BOOL v774;
  char v775;
  char v776;
  BOOL v777;
  BOOL v778;
  BOOL v779;
  BOOL v780;
  char v781;
  char v782;
  BOOL v783;
  BOOL v784;
  BOOL v785;
  BOOL v786;
  BOOL v787;
  BOOL v788;
  BOOL v789;
  BOOL v790;
  BOOL v791;
  char v792;
  char v793;
  BOOL v794;
  unsigned int v795;
  BOOL v796;
  BOOL v797;
  BOOL v798;
  BOOL v799;
  BOOL v800;
  BOOL v801;
  BOOL v802;
  BOOL v803;
  char v804;
  BOOL v805;
  BOOL v806;
  BOOL v807;
  BOOL v808;
  unsigned int v809;
  char v810;
  BOOL v811;
  BOOL v812;
  BOOL v813;
  BOOL v814;
  BOOL v815;
  char v816;
  char v817;
  BOOL v818;
  BOOL v819;
  BOOL v820;
  BOOL v821;
  BOOL v822;
  BOOL v823;
  char v824;
  BOOL v825;
  BOOL v826;
  uint64_t v827;
  unsigned int v828;
  char v829;
  unsigned int v830;
  unsigned int v831;
  unsigned int v832;
  unsigned int v833;
  BOOL v834;
  unsigned int v835;
  unsigned int v836;
  unsigned int v837;
  BOOL v838;
  uint64_t v839;
  char v840;
  unsigned int v841;
  unsigned int v842;
  unsigned int v843;
  uint64_t v844;
  unsigned int v845;
  BOOL v846;
  unsigned int v847;
  BOOL v848;
  unsigned int v849;
  unsigned int v850;
  unsigned int v851;
  char v852;
  unsigned int v853;
  BOOL v854;
  uint64_t v855;
  BOOL v856;
  unsigned int v858;
  BOOL v859;
  unsigned int v860;
  BOOL v861;
  unsigned int v862;
  BOOL v863;
  unsigned int v864;
  float v865;
  unsigned int v866;
  char v867;
  unsigned int v868;
  BOOL v869;
  uint64_t v870;
  unsigned int v871;
  unsigned int v872;
  unsigned int v873;
  unsigned int v874;
  BOOL v875;
  float v876;
  char v877;
  uint64_t v878;
  float v879;
  unsigned int v880;
  unsigned int v881;
  unsigned int v882;
  BOOL v883;
  unsigned int v884;
  BOOL v885;
  unsigned int v886;
  float v887;
  uint64_t v888;
  unsigned int v889;
  unsigned int v890;
  BOOL v891;
  unsigned int v892;
  unsigned int v893;
  unsigned int v894;
  float v895;
  unsigned int v896;
  uint64_t v897;
  char v898;
  unsigned int v899;
  unsigned int v900;
  unsigned int v901;
  unsigned int v902;
  unsigned int v903;
  unsigned int v904;
  BOOL v905;
  uint64_t v906;
  unsigned int v907;
  float v908;
  unsigned int v909;
  unsigned int v910;
  unsigned int v911;
  BOOL v912;
  unsigned int v913;
  uint64_t v914;
  unsigned int v915;
  float v916;
  unsigned int v917;
  unsigned int v918;
  BOOL v919;
  unsigned int v920;
  unsigned int v921;
  unsigned int v922;
  unsigned int v923;
  float v924;
  uint64_t v925;
  char v926;
  unsigned int v927;
  unsigned int v928;
  unsigned int v929;
  unsigned int v930;
  unsigned int v931;
  unsigned int v932;
  float v933;
  float v934;
  unsigned int v935;
  unsigned int v936;
  unsigned int v937;
  unsigned int v938;
  unsigned int v939;
  float v940;
  uint64_t v941;
  unsigned int v942;
  unsigned int v943;
  unsigned int v944;
  unsigned int v945;
  unsigned int v946;
  unsigned int v947;
  float v948;
  float v949;
  float v950;
  uint64_t v951;
  float v952;
  float v953;
  unsigned int v954;
  float v955;
  unsigned int v956;
  unsigned int v957;
  unsigned int v958;
  unsigned int v959;
  unsigned int v960;
  unsigned int v961;
  float v962;
  float v963;
  float v964;
  uint64_t v965;
  float v966;
  float v967;
  float v968;
  float v969;
  unsigned int v970;
  unsigned int v971;
  unsigned int v972;
  unsigned int v973;
  unsigned int v974;
  unsigned int v975;
  float v976;
  float v977;
  float v978;
  uint64_t v979;
  float v980;
  float v981;
  float v982;
  float v983;
  unsigned int v984;
  unsigned int v985;
  unsigned int v986;
  unsigned int v987;
  unsigned int v988;
  float v989;
  float v990;
  unsigned int v991;
  float v992;
  uint64_t v993;
  float v994;
  float v995;
  unsigned int v996;
  float v997;
  unsigned int v998;
  char v999;
  unsigned int v1000;
  BOOL v1001;
  unsigned int v1002;
  BOOL v1003;
  float v1004;
  float v1005;
  BOOL v1006;
  unsigned int v1007;
  BOOL v1008;
  unsigned int v1009;
  BOOL v1010;
  unsigned int v1011;
  float v1012;
  uint64_t v1013;
  float v1014;
  float v1015;
  float v1016;
  unsigned int v1017;
  float v1018;
  float v1019;
  unsigned int v1020;
  float v1021;
  float v1022;
  float v1023;
  float v1024;
  unsigned int v1025;
  float v1026;
  unsigned int v1027;
  float v1028;
  unsigned int v1029;
  unsigned int v1030;
  unsigned int v1031;
  unsigned int v1032;
  unsigned int v1033;
  uint64_t v1034;
  float v1035;
  float v1036;
  unsigned int v1037;
  unsigned int v1038;
  unsigned int v1039;
  float v1040;
  BOOL v1041;
  unsigned int v1042;
  unsigned int v1043;
  BOOL v1044;
  unsigned int v1045;
  uint64_t v1046;
  char v1047;
  float v1048;
  float v1049;
  unsigned int v1050;
  unsigned int v1051;
  BOOL v1052;
  unsigned int v1053;
  float v1054;
  unsigned int v1055;
  unsigned int v1056;
  BOOL v1057;
  unsigned int v1058;
  BOOL v1059;
  float v1060;
  char v1061;
  float v1062;
  uint64_t v1063;
  char v1064;
  float v1065;
  float v1066;
  BOOL v1067;
  unsigned int v1068;
  unsigned int v1069;
  BOOL v1070;
  unsigned int v1071;
  BOOL v1072;
  unsigned int v1073;
  BOOL v1074;
  unsigned int v1075;
  BOOL v1076;
  unsigned int v1077;
  char v1078;
  float v1079;
  uint64_t v1080;
  float v1081;
  float v1082;
  BOOL v1083;
  unsigned int v1084;
  BOOL v1085;
  unsigned int v1086;
  unsigned int v1087;
  unsigned int v1088;
  BOOL v1089;
  unsigned int v1090;
  char v1091;
  unsigned int v1092;
  float v1093;
  uint64_t v1094;
  BOOL v1095;
  float v1096;
  float v1097;
  BOOL v1098;
  unsigned int v1099;
  unsigned int v1100;
  unsigned int v1101;
  BOOL v1102;
  unsigned int v1103;
  unsigned int v1104;
  unsigned int v1105;
  BOOL v1106;
  float v1107;
  uint64_t v1108;
  float v1109;
  unsigned int v1110;
  float v1111;
  BOOL v1112;
  unsigned int v1113;
  unsigned int v1114;
  unsigned int v1115;
  unsigned int v1116;
  unsigned int v1117;
  unsigned int v1118;
  uint64_t v1119;
  float v1120;
  float v1121;
  unsigned int v1122;
  unsigned int v1123;
  unsigned int v1124;
  unsigned int v1125;
  unsigned int v1126;
  unsigned int v1127;
  unsigned int v1128;
  float v1129;
  unsigned int v1130;
  float v1131;
  unsigned int v1132;
  unsigned int v1133;
  unsigned int v1134;
  unsigned int v1135;
  uint64_t v1136;
  float v1137;
  unsigned int v1138;
  float v1139;
  unsigned int v1140;
  unsigned int v1141;
  unsigned int v1142;
  unsigned int v1143;
  unsigned int v1144;
  uint64_t v1145;
  unsigned int v1146;
  unsigned int v1147;
  unsigned int v1148;
  unsigned int v1149;
  unsigned int v1150;
  unsigned int v1151;
  uint64_t v1152;
  BOOL v1153;
  unsigned int v1154;
  BOOL v1155;
  unsigned int v1156;
  BOOL v1157;
  unsigned int v1158;
  char v1159;
  unsigned int v1160;
  unsigned int v1161;
  unsigned int v1162;
  uint64_t v1163;
  float v1164;
  BOOL v1165;
  float v1166;
  float v1167;
  float v1168;
  float v1169;
  float v1170;
  float v1171;
  unsigned int v1172;
  unsigned int v1173;
  unsigned int v1174;
  unsigned int v1175;
  unsigned int v1176;
  unsigned int v1177;
  unsigned int v1178;
  uint64_t v1179;
  float v1180;
  float v1181;
  unsigned int v1182;
  unsigned int v1183;
  unsigned int v1184;
  char v1185;
  unsigned int v1186;
  char v1187;
  unsigned int v1188;
  char v1189;
  unsigned int v1190;
  char v1191;
  float v1192;
  uint64_t v1193;
  char v1194;
  unsigned int v1195;
  char v1196;
  unsigned int v1197;
  char v1198;
  unsigned int v1199;
  char v1200;
  unsigned int v1201;
  char v1202;
  float v1203;
  char v1204;
  unsigned int v1205;
  char v1206;
  unsigned int v1207;
  char v1208;
  uint64_t v1209;
  char v1210;
  float v1211;
  char v1212;
  unsigned int v1213;
  char v1214;
  unsigned int v1215;
  char v1216;
  unsigned int v1217;
  char v1218;
  unsigned int v1219;
  char v1220;
  unsigned int v1221;
  char v1222;
  unsigned int v1223;
  char v1224;
  uint64_t v1225;
  char v1226;
  unsigned int v1227;
  char v1228;
  unsigned int v1229;
  char v1230;
  float v1231;
  char v1232;
  float v1233;
  BOOL v1234;
  char v1235;
  unsigned int v1236;
  char v1237;
  unsigned int v1238;
  unsigned int v1239;
  unsigned int v1240;
  unsigned int v1241;
  unsigned int v1242;
  unsigned int v1243;
  uint64_t v1244;
  unsigned int v1245;
  unsigned int v1246;
  char v1247;
  unsigned int v1248;
  BOOL v1249;
  unsigned int v1250;
  unsigned int v1251;
  unsigned int v1252;
  float v1253;
  char v1254;
  unsigned int v1255;
  unsigned int v1256;
  BOOL v1257;
  uint64_t v1258;
  BOOL v1259;
  float v1260;
  BOOL v1261;
  float v1262;
  BOOL v1263;
  float v1264;
  BOOL v1265;
  float v1266;
  unsigned int v1267;
  float v1268;
  unsigned int v1269;
  float v1270;
  uint64_t v1271;
  unsigned int v1272;
  float v1273;
  unsigned int v1274;
  unsigned int v1276;
  unsigned int v1277;
  unsigned int v1279;
  unsigned int v1280;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v11 = a6 * a8;
  v12 = __sincosf_stret(a5);
  v13 = *(_DWORD *)(a2 + 24);
  v14 = *(_DWORD *)(a2 + 32);
  v15 = sub_20E7F9528(a2 + 8);
  v1192 = v11;
  v16 = (float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v11) & 0x807FFFFF | 0x3F800000) * -0.33333) + 2.0)
                              * COERCE_FLOAT(LODWORD(v11) & 0x807FFFFF | 0x3F800000))
                      + -1.6667)
              + (float)((LODWORD(v11) >> 23) - 127))
      * 0.69315;
  v17 = vcvtms_s32_f32((float)(v16 - *(float *)(a2 + 112)) * *(float *)(a2 + 108));
  if (v17 < 0)
  {
    v18 = 0;
    v19 = 0;
  }
  else if (v15 * v13 <= v17)
  {
    v18 = v13 - 1;
    v19 = v14 - 1;
  }
  else
  {
    v18 = v17 / v15;
    v19 = v17 % v15;
  }
  v20 = a6 * a7;
  v1273 = -v12.__sinval;
  v21 = 1.0 / (float)(1 << v18);
  v22 = v21 * a3;
  v23 = v21 * a4;
  v24 = *(_QWORD *)(a2 + 32);
  v25 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 144 * (v24 * v18 + v19));
  v26 = v25[9];
  v28 = v25[4];
  v27 = v25[5];
  v29 = v25[6];
  v30 = (float)(v22 + (float)((float)(v12.__cosval * 0.0) * 0.0)) + (float)((float)(v12.__sinval * -0.0) * 0.0);
  v31 = (float)v28 + -1.001;
  if (v31 >= v30)
    v31 = v30;
  if (v30 >= 0.0)
    v32 = v31;
  else
    v32 = 0.0;
  v33 = (float)(v23 + (float)((float)(v12.__sinval * 0.0) * 0.0)) + (float)((float)(v12.__cosval * 0.0) * 0.0);
  v34 = (float)v29 + -1.001;
  if (v34 >= v33)
    v34 = v33;
  if (v33 >= 0.0)
    v35 = v34;
  else
    v35 = 0.0;
  v36 = v32;
  v37 = v35;
  v38 = (v36 + 1);
  v39 = v26 + v27 * v37;
  v40 = v39 + v27;
  v1270 = (float)v38 - v32;
  v41 = (float)(v37 + 1) - v35;
  v1054 = v32 - (float)v32;
  v42 = v35;
  LOBYTE(v42) = *(_BYTE *)(v39 + v36);
  v1177 = v42;
  LOBYTE(v42) = *(_BYTE *)(v39 + v38);
  v43 = (float)v42;
  LOBYTE(v42) = *(_BYTE *)(v40 + v36);
  v1117 = v42;
  LOBYTE(v42) = *(_BYTE *)(v40 + v38);
  v1033 = v42;
  v44 = *(_DWORD *)(a2 + 24);
  v45 = sub_20E7F9528(a2 + 8);
  v46 = vcvtms_s32_f32((float)(v16 - *(float *)(a2 + 112)) * *(float *)(a2 + 108));
  if (v46 < 0)
  {
    v48 = 0;
    v47 = 0;
  }
  else if (v45 * v44 <= v46)
  {
    v47 = v44 - 1;
    v48 = v24 - 1;
  }
  else
  {
    v47 = v46 / v45;
    v48 = v46 % v45;
  }
  v49 = v35 - (float)v35;
  v50 = (float)(1 << v47);
  v1170 = (float)(v1054 * v41) * v43;
  v51 = (float)(1.0 / v50) * a3;
  v52 = (float)(1.0 / v50) * a4;
  v53 = v20 / v50;
  v54 = *(_QWORD *)(a2 + 32);
  v55 = (unint64_t *)(*(_QWORD *)(a2 + 56) + 144 * (v54 * v47 + v48));
  v57 = v12.__cosval * (float)(v20 / v50);
  v58 = v51 + (float)(v57 * -0.5);
  v59 = v53 * v1273;
  v60 = v58 + (float)((float)(v53 * v1273) * 0.70711);
  v61 = (float)v55[4] + -1.001;
  if (v61 >= v60)
    v62 = v58 + (float)(v59 * 0.70711);
  else
    v62 = (float)v55[4] + -1.001;
  if (v60 >= 0.0)
    v63 = v62;
  else
    v63 = 0.0;
  v64 = v12.__sinval * v53;
  v65 = v52 + (float)((float)(v12.__sinval * v53) * -0.5);
  v66 = v65 + (float)(v57 * 0.70711);
  v56 = v55[6];
  v67 = (float)v56 + -1.001;
  if (v67 >= v66)
    v68 = v65 + (float)(v57 * 0.70711);
  else
    v68 = (float)v56 + -1.001;
  if (v66 >= 0.0)
    v69 = v68;
  else
    v69 = 0.0;
  v70 = v51 + (float)(v57 * 0.5);
  v71 = v70 + (float)(v59 * 0.70711);
  if (v61 >= v71)
    v72 = v70 + (float)(v59 * 0.70711);
  else
    v72 = (float)v55[4] + -1.001;
  if (v71 >= 0.0)
    v73 = v72;
  else
    v73 = 0.0;
  v74 = v52 + (float)(v64 * 0.5);
  v75 = v74 + (float)(v57 * 0.70711);
  if (v67 >= v75)
    v76 = v74 + (float)(v57 * 0.70711);
  else
    v76 = (float)v56 + -1.001;
  if (v75 >= 0.0)
    v77 = v76;
  else
    v77 = 0.0;
  v78 = (float)(v57 + v51) + (float)(v59 * 0.0);
  if (v61 >= v78)
    v79 = (float)(v57 + v51) + (float)(v59 * 0.0);
  else
    v79 = (float)v55[4] + -1.001;
  if (v78 >= 0.0)
    v80 = v79;
  else
    v80 = 0.0;
  v81 = (float)(v64 + v52) + (float)(v57 * 0.0);
  if (v67 >= v81)
    v82 = (float)(v64 + v52) + (float)(v57 * 0.0);
  else
    v82 = (float)v56 + -1.001;
  if (v81 >= 0.0)
    v83 = v82;
  else
    v83 = 0.0;
  v84 = v70 + (float)(v59 * -0.70711);
  if (v61 >= v84)
    v85 = v84;
  else
    v85 = (float)v55[4] + -1.001;
  if (v84 < 0.0)
    v85 = 0.0;
  v86 = v74 + (float)(v57 * -0.70711);
  if (v67 >= v86)
    v87 = v74 + (float)(v57 * -0.70711);
  else
    v87 = (float)v56 + -1.001;
  if (v86 < 0.0)
    v87 = 0.0;
  v88 = v58 + (float)(v59 * -0.70711);
  if (v61 >= v88)
    v89 = v88;
  else
    v89 = (float)v55[4] + -1.001;
  if (v88 < 0.0)
    v89 = 0.0;
  v90 = v65 + (float)(v57 * -0.70711);
  if (v67 >= v90)
    v91 = v65 + (float)(v57 * -0.70711);
  else
    v91 = (float)v56 + -1.001;
  v92 = v55[5];
  v93 = v55[9];
  v1266 = v63;
  v1268 = v69;
  v94 = v63;
  v95 = (v94 + 1);
  v1258 = v69;
  v96 = v93 + v92 * v1258;
  v1255 = *(unsigned __int8 *)(v96 + v94);
  v1252 = *(unsigned __int8 *)(v96 + v95);
  v1246 = v63;
  v1248 = v94 + 1;
  v1256 = *(unsigned __int8 *)(v96 + v92 + v94);
  v97 = (float)(v51 - v57) + (float)(v59 * 0.0);
  v1250 = *(unsigned __int8 *)(v96 + v92 + v95);
  if (v90 >= 0.0)
    v98 = v91;
  else
    v98 = 0.0;
  if (v61 >= v97)
    v99 = v97;
  else
    v99 = v61;
  v1262 = v73;
  v1264 = v77;
  v100 = v73;
  v101 = (v100 + 1);
  v1244 = v77;
  v102 = v93 + v92 * v1244;
  v1238 = *(unsigned __int8 *)(v102 + v100);
  v1236 = *(unsigned __int8 *)(v102 + v101);
  v1227 = v73;
  v1240 = *(unsigned __int8 *)(v102 + v92 + v100);
  v1229 = v100 + 1;
  v1242 = *(unsigned __int8 *)(v102 + v92 + v101);
  v1253 = v80;
  v103 = v80;
  v1260 = v83;
  v104 = (v103 + 1);
  v1225 = v83;
  v105 = v93 + v92 * v1225;
  v1219 = *(unsigned __int8 *)(v105 + v103);
  v1217 = *(unsigned __int8 *)(v105 + v104);
  v1213 = v80;
  v1221 = *(unsigned __int8 *)(v105 + v92 + v103);
  v1215 = v103 + 1;
  v1223 = *(unsigned __int8 *)(v105 + v92 + v104);
  v1231 = v85;
  v106 = v85;
  v1233 = v87;
  v107 = (float)(v52 - v64) + (float)(v57 * 0.0);
  v108 = (v106 + 1);
  v1209 = v87;
  v109 = v93 + v92 * v1209;
  v110 = v109 + v92;
  v1207 = *(unsigned __int8 *)(v109 + v106);
  v1205 = *(unsigned __int8 *)(v109 + v108);
  if (v97 >= 0.0)
    v111 = v99;
  else
    v111 = 0.0;
  if (v67 >= v107)
    v112 = v107;
  else
    v112 = v67;
  v1195 = v85;
  v1199 = *(unsigned __int8 *)(v110 + v106);
  v1197 = v106 + 1;
  v1201 = *(unsigned __int8 *)(v110 + v108);
  if (v107 < 0.0)
    v112 = 0.0;
  v113 = v20 * 1.4142;
  v1211 = v89;
  v114 = v89;
  v1203 = v98;
  v115 = v1192 * 1.4142;
  v116 = (v114 + 1);
  v1193 = v98;
  v117 = v93 + v92 * v1193;
  v1186 = *(unsigned __int8 *)(v117 + v114);
  v1184 = *(unsigned __int8 *)(v117 + v116);
  v1182 = v89;
  v1188 = *(unsigned __int8 *)(v117 + v92 + v114);
  v1183 = v114 + 1;
  v1190 = *(unsigned __int8 *)(v117 + v92 + v116);
  v118 = v1270 * v41;
  v1181 = v112;
  v1179 = v112;
  v119 = v93 + v92 * v1179;
  v1180 = v111;
  v120 = v111;
  v121 = v119 + v92;
  v122 = (v120 + 1);
  v1175 = *(unsigned __int8 *)(v119 + v120);
  v1174 = *(unsigned __int8 *)(v119 + v122);
  v123 = (float)v1177;
  v1172 = v111;
  v1176 = *(unsigned __int8 *)(v121 + v120);
  v1173 = v120 + 1;
  v1178 = *(unsigned __int8 *)(v121 + v122);
  v124 = *(_DWORD *)(a2 + 24);
  v125 = sub_20E7F9528(a2 + 8);
  v126 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v115) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v115) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v115) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
  if (v126 < 0)
  {
    v128 = 0;
    v127 = 0;
  }
  else if (v125 * v124 <= v126)
  {
    v127 = v124 - 1;
    v128 = v54 - 1;
  }
  else
  {
    v127 = v126 / v125;
    v128 = v126 % v125;
  }
  v1062 = v1170 + (float)(v118 * v123);
  v129 = (float)(1 << v127);
  v130 = (float)(1.0 / v129) * a3;
  v131 = (float)(1.0 / v129) * a4;
  v132 = v113 / v129;
  v133 = *(_QWORD *)(a2 + 32);
  v134 = (unint64_t *)(*(_QWORD *)(a2 + 56) + 144 * (v133 * v127 + v128));
  v136 = v12.__cosval * (float)(v113 / v129);
  v137 = v130 + (float)(v136 * 0.0);
  v138 = (float)(v113 / v129) * v1273;
  v139 = (float)v134[4] + -1.001;
  if (v139 >= (float)(v137 - v138))
    v140 = v137 - v138;
  else
    v140 = (float)v134[4] + -1.001;
  if ((float)(v137 - v138) >= 0.0)
    v141 = v140;
  else
    v141 = 0.0;
  v142 = v12.__sinval * v132;
  v143 = v131 + (float)((float)(v12.__sinval * v132) * 0.0);
  v135 = v134[6];
  v144 = (float)v135 + -1.001;
  if (v144 >= (float)(v143 - v136))
    v145 = v143 - v136;
  else
    v145 = (float)v135 + -1.001;
  if ((float)(v143 - v136) >= 0.0)
    v146 = v145;
  else
    v146 = 0.0;
  v147 = v130 + (float)(v136 * 0.70711);
  v148 = v147 + (float)(v138 * 0.5);
  if (v139 >= v148)
    v149 = v147 + (float)(v138 * 0.5);
  else
    v149 = (float)v134[4] + -1.001;
  if (v148 >= 0.0)
    v150 = v149;
  else
    v150 = 0.0;
  v151 = v131 + (float)(v142 * 0.70711);
  v152 = v151 + (float)(v136 * 0.5);
  if (v144 >= v152)
    v153 = v151 + (float)(v136 * 0.5);
  else
    v153 = (float)v135 + -1.001;
  if (v152 < 0.0)
    v153 = 0.0;
  v154 = v147 + (float)(v138 * -0.5);
  if (v139 >= v154)
    v155 = v154;
  else
    v155 = (float)v134[4] + -1.001;
  if (v154 < 0.0)
    v155 = 0.0;
  v156 = v151 + (float)(v136 * -0.5);
  if (v144 >= v156)
    v157 = v156;
  else
    v157 = (float)v135 + -1.001;
  if (v156 < 0.0)
    v157 = 0.0;
  v158 = v138 + v137;
  if (v139 >= v158)
    v159 = v158;
  else
    v159 = (float)v134[4] + -1.001;
  v160 = v131 + (float)(v142 * -0.70711);
  v161 = v130 + (float)(v136 * -0.70711);
  v162 = v161 + (float)(v138 * -0.5);
  v163 = v161 + (float)(v138 * 0.5);
  v164 = v160 + (float)(v136 * -0.5);
  v165 = v160 + (float)(v136 * 0.5);
  v166 = v134[5];
  v167 = v134[9];
  v1169 = v141;
  v168 = v141;
  v1171 = v146;
  v169 = (v168 + 1);
  v1163 = v146;
  v170 = v167 + v166 * v1163;
  v1160 = *(unsigned __int8 *)(v170 + v168);
  v1158 = *(unsigned __int8 *)(v170 + v169);
  v1154 = v141;
  v1161 = *(unsigned __int8 *)(v170 + v166 + v168);
  v1156 = v168 + 1;
  v1162 = *(unsigned __int8 *)(v170 + v166 + v169);
  v1167 = v150;
  v171 = v150;
  if (v158 >= 0.0)
    v172 = v159;
  else
    v172 = 0.0;
  v173 = v136 + v143;
  if (v144 >= v173)
    v174 = v173;
  else
    v174 = v144;
  if (v173 < 0.0)
    v174 = 0.0;
  if (v139 >= v162)
    v175 = v162;
  else
    v175 = v139;
  if (v162 >= 0.0)
    v176 = v175;
  else
    v176 = 0.0;
  if (v144 >= v164)
    v177 = v164;
  else
    v177 = v144;
  v1168 = v153;
  v178 = (v171 + 1);
  v1152 = v153;
  v179 = v167 + v166 * v1152;
  v1149 = *(unsigned __int8 *)(v179 + v171);
  v1148 = *(unsigned __int8 *)(v179 + v178);
  v1147 = v150;
  v1150 = *(unsigned __int8 *)(v179 + v166 + v171);
  v1146 = v171 + 1;
  v1151 = *(unsigned __int8 *)(v179 + v166 + v178);
  v1164 = v155;
  v180 = v155;
  v1166 = v157;
  v181 = (v180 + 1);
  v1145 = v157;
  v182 = v167 + v166 * v1145;
  v1143 = *(unsigned __int8 *)(v182 + v180);
  v1141 = *(unsigned __int8 *)(v182 + v181);
  v183 = v182 + v166;
  v1138 = v155;
  v1144 = *(unsigned __int8 *)(v183 + v180);
  if (v164 < 0.0)
    v177 = 0.0;
  if (v139 >= v163)
    v139 = v163;
  v1140 = v180 + 1;
  v1142 = *(unsigned __int8 *)(v183 + v181);
  v1137 = v172;
  v184 = v172;
  if (v163 >= 0.0)
    v185 = v139;
  else
    v185 = 0.0;
  if (v144 >= v165)
    v186 = v165;
  else
    v186 = v144;
  v187 = v113 * 1.4142;
  v188 = v115 * 1.4142;
  v1139 = v174;
  v189 = (v184 + 1);
  v1136 = v174;
  v190 = v167 + v166 * v1136;
  v1133 = *(unsigned __int8 *)(v190 + v184);
  v1132 = *(unsigned __int8 *)(v190 + v189);
  v1130 = v172;
  v1134 = *(unsigned __int8 *)(v190 + v166 + v184);
  v1128 = v184 + 1;
  v1135 = *(unsigned __int8 *)(v190 + v166 + v189);
  v1131 = v176;
  v191 = v176;
  v1129 = v177;
  v192 = v49;
  v193 = v1270 * v49;
  v194 = (v191 + 1);
  v1271 = v177;
  v195 = v167 + v166 * v1271;
  v1125 = *(unsigned __int8 *)(v195 + v191);
  v1124 = *(unsigned __int8 *)(v195 + v194);
  v1122 = v176;
  v1126 = *(unsigned __int8 *)(v195 + v166 + v191);
  v1123 = v191 + 1;
  v1127 = *(unsigned __int8 *)(v195 + v166 + v194);
  if (v165 < 0.0)
    v186 = 0.0;
  v1120 = v186;
  v1119 = v186;
  v196 = v167 + v166 * v1119;
  v1121 = v185;
  v197 = v185;
  v198 = v196 + v166;
  v199 = (v197 + 1);
  v1115 = *(unsigned __int8 *)(v196 + v197);
  v1114 = *(unsigned __int8 *)(v196 + v199);
  v200 = (float)v1117;
  v1110 = v185;
  v1116 = *(unsigned __int8 *)(v198 + v197);
  v1113 = v197 + 1;
  v1118 = *(unsigned __int8 *)(v198 + v199);
  v201 = *(_DWORD *)(a2 + 24);
  v202 = sub_20E7F9528(a2 + 8);
  v203 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v188) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v188) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v188) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
  if (v203 < 0)
  {
    v204 = 0;
    v205 = 0;
  }
  else if (v202 * v201 <= v203)
  {
    v204 = v201 - 1;
    v205 = v133 - 1;
  }
  else
  {
    v204 = v203 / v202;
    v205 = v203 % v202;
  }
  v206 = (float)(1 << v204);
  v207 = (float)(1.0 / v206) * a3;
  v208 = (float)(1.0 / v206) * a4;
  v209 = v187 / v206;
  v210 = *(_QWORD *)(a2 + 32);
  v211 = (unint64_t *)(*(_QWORD *)(a2 + 56) + 144 * (v210 * v204 + v205));
  v212 = v211[5];
  v214 = v12.__cosval * (float)(v187 / v206);
  v215 = v207 + (float)(v214 * -0.5);
  v216 = v209 * v1273;
  v217 = v215 + (float)((float)(v209 * v1273) * 0.70711);
  v218 = (float)v211[4] + -1.001;
  if (v218 >= v217)
    v219 = v215 + (float)(v216 * 0.70711);
  else
    v219 = (float)v211[4] + -1.001;
  if (v217 >= 0.0)
    v220 = v219;
  else
    v220 = 0.0;
  v221 = v12.__sinval * v209;
  v222 = v208 + (float)(v221 * -0.5);
  v223 = v222 + (float)(v214 * 0.70711);
  v213 = v211[6];
  v224 = (float)v213 + -1.001;
  if (v224 >= v223)
    v225 = v222 + (float)(v214 * 0.70711);
  else
    v225 = (float)v213 + -1.001;
  if (v223 < 0.0)
    v225 = 0.0;
  v1107 = v220;
  v226 = v220;
  v1109 = v225;
  v227 = v211[9];
  v228 = (v226 + 1);
  v1108 = v225;
  v229 = v227 + v212 * v1108;
  v1105 = *(unsigned __int8 *)(v229 + v226);
  v1101 = *(unsigned __int8 *)(v229 + v228);
  v1099 = v220;
  v1103 = *(unsigned __int8 *)(v229 + v212 + v226);
  v1100 = v226 + 1;
  v1104 = *(unsigned __int8 *)(v229 + v212 + v228);
  v230 = v207 + (float)(v214 * 0.5);
  v231 = v230 + (float)(v216 * 0.70711);
  if (v218 >= v231)
    v232 = v230 + (float)(v216 * 0.70711);
  else
    v232 = v218;
  if (v231 >= 0.0)
    v233 = v232;
  else
    v233 = 0.0;
  v234 = v208 + (float)(v221 * 0.5);
  v235 = v234 + (float)(v214 * 0.70711);
  if (v224 >= v235)
    v236 = v234 + (float)(v214 * 0.70711);
  else
    v236 = (float)v213 + -1.001;
  if (v235 >= 0.0)
    v237 = v236;
  else
    v237 = 0.0;
  v1093 = v233;
  v238 = v233;
  v1096 = v237;
  v239 = (v238 + 1);
  v1094 = v237;
  v240 = v227 + v212 * v1094;
  v1092 = *(unsigned __int8 *)(v240 + v238);
  v1087 = *(unsigned __int8 *)(v240 + v239);
  v241 = v240 + v212;
  v1084 = v233;
  v1088 = *(unsigned __int8 *)(v241 + v238);
  v1086 = v238 + 1;
  v1090 = *(unsigned __int8 *)(v241 + v239);
  v242 = (float)(v214 + v207) + (float)(v216 * 0.0);
  if (v218 >= v242)
    v243 = (float)(v214 + v207) + (float)(v216 * 0.0);
  else
    v243 = v218;
  if (v242 >= 0.0)
    v244 = v243;
  else
    v244 = 0.0;
  v245 = (float)(v221 + v208) + (float)(v214 * 0.0);
  if (v224 >= v245)
    v246 = (float)(v221 + v208) + (float)(v214 * 0.0);
  else
    v246 = (float)v213 + -1.001;
  v1079 = v244;
  v247 = v244;
  if (v245 >= 0.0)
    v248 = v246;
  else
    v248 = 0.0;
  v1081 = v248;
  v249 = (v247 + 1);
  v1080 = v248;
  v250 = v227 + v212 * v1080;
  v1077 = *(unsigned __int8 *)(v250 + v247);
  v1071 = *(unsigned __int8 *)(v250 + v249);
  v1068 = v244;
  v1073 = *(unsigned __int8 *)(v250 + v212 + v247);
  v1069 = v247 + 1;
  v1075 = *(unsigned __int8 *)(v250 + v212 + v249);
  v251 = v230 + (float)(v216 * -0.70711);
  if (v218 >= v251)
    v252 = v251;
  else
    v252 = v218;
  if (v251 < 0.0)
    v252 = 0.0;
  v253 = v234 + (float)(v214 * -0.70711);
  if (v224 >= v253)
    v254 = v234 + (float)(v214 * -0.70711);
  else
    v254 = (float)v213 + -1.001;
  if (v253 >= 0.0)
    v255 = v254;
  else
    v255 = 0.0;
  v1060 = v252;
  v256 = v252;
  v1065 = v255;
  v1022 = v1062 + (float)(v193 * v200);
  v257 = (v256 + 1);
  v1063 = v255;
  v258 = v227 + v212 * v1063;
  v1058 = *(unsigned __int8 *)(v258 + v256);
  v1056 = *(unsigned __int8 *)(v258 + v257);
  v1053 = v252;
  v1050 = *(unsigned __int8 *)(v258 + v212 + v256);
  v259 = v1054 * v192;
  v1055 = v256 + 1;
  v1051 = *(unsigned __int8 *)(v258 + v212 + v257);
  v260 = v215 + (float)(v216 * -0.70711);
  if (v218 >= v260)
    v261 = v260;
  else
    v261 = v218;
  if (v260 < 0.0)
    v261 = 0.0;
  v262 = v222 + (float)(v214 * -0.70711);
  if (v224 >= v262)
    v263 = v222 + (float)(v214 * -0.70711);
  else
    v263 = (float)v213 + -1.001;
  if (v262 >= 0.0)
    v264 = v263;
  else
    v264 = 0.0;
  v1040 = v261;
  v265 = v261;
  v1048 = v264;
  v266 = (v265 + 1);
  v1046 = v264;
  v267 = v227 + v212 * v1046;
  v1042 = *(unsigned __int8 *)(v267 + v265);
  v1039 = *(unsigned __int8 *)(v267 + v266);
  v1037 = v261;
  v1043 = *(unsigned __int8 *)(v267 + v212 + v265);
  v1038 = v265 + 1;
  v1045 = *(unsigned __int8 *)(v267 + v212 + v266);
  v268 = (float)(v207 - v214) + (float)(v216 * 0.0);
  if (v218 >= v268)
    v269 = v268;
  else
    v269 = v218;
  if (v268 < 0.0)
    v269 = 0.0;
  v270 = (float)(v208 - v221) + (float)(v214 * 0.0);
  if (v224 >= v270)
    v271 = v270;
  else
    v271 = (float)v213 + -1.001;
  if (v270 >= 0.0)
    v272 = v271;
  else
    v272 = 0.0;
  v1035 = v272;
  v273 = (float)v1033;
  v1034 = v272;
  v274 = v227 + v212 * v1034;
  v275 = v274 + v212;
  v1028 = v269;
  v276 = v269;
  v277 = (v276 + 1);
  v1030 = *(unsigned __int8 *)(v274 + v276);
  v1029 = *(unsigned __int8 *)(v274 + v277);
  v1025 = v269;
  v1031 = *(unsigned __int8 *)(v275 + v276);
  v1027 = v276 + 1;
  v1032 = *(unsigned __int8 *)(v275 + v277);
  v278 = v187 * 1.4142;
  v279 = v188 * 1.4142;
  v280 = *(_DWORD *)(a2 + 24);
  v281 = sub_20E7F9528(a2 + 8);
  v282 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v279) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v279) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v279) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
  if (v282 < 0)
  {
    v283 = 0;
    v284 = 0;
  }
  else if (v281 * v280 <= v282)
  {
    v283 = v280 - 1;
    v284 = v210 - 1;
  }
  else
  {
    v283 = v282 / v281;
    v284 = v282 % v281;
  }
  v285 = (float)(1 << v283);
  v286 = (float)(1.0 / v285) * a3;
  v287 = (float)(1.0 / v285) * a4;
  v288 = v278 / v285;
  v289 = *(_QWORD *)(a2 + 32);
  v290 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 144 * (v289 * v283 + v284));
  v291 = v290[9];
  v293 = v290[4];
  v292 = v290[5];
  v294 = v290[6];
  v295 = v12.__cosval * (float)(v278 / v285);
  v296 = v286 + (float)(v295 * 0.0);
  v297 = v288 * v1273;
  v298 = (float)v293 + -1.001;
  if (v298 >= (float)(v296 - (float)(v288 * v1273)))
    v299 = v296 - v297;
  else
    v299 = (float)v293 + -1.001;
  if ((float)(v296 - (float)(v288 * v1273)) >= 0.0)
    v300 = v299;
  else
    v300 = 0.0;
  v301 = v12.__sinval * v288;
  v302 = v287 + (float)((float)(v12.__sinval * v288) * 0.0);
  v303 = (float)v294 + -1.001;
  if (v303 >= (float)(v302 - v295))
    v304 = v302 - v295;
  else
    v304 = (float)v294 + -1.001;
  v1012 = v300;
  v305 = v300;
  if ((float)(v302 - v295) < 0.0)
    v304 = 0.0;
  v1014 = v304;
  v306 = (v305 + 1);
  v1013 = v304;
  v307 = v291 + v292 * v1013;
  v1011 = *(unsigned __int8 *)(v307 + v305);
  v1002 = *(unsigned __int8 *)(v307 + v306);
  v998 = v300;
  v1007 = *(unsigned __int8 *)(v307 + v292 + v305);
  v1000 = v305 + 1;
  v1009 = *(unsigned __int8 *)(v307 + v292 + v306);
  v308 = v286 + (float)(v295 * 0.70711);
  v309 = v308 + (float)(v297 * 0.5);
  if (v298 >= v309)
    v310 = v308 + (float)(v297 * 0.5);
  else
    v310 = (float)v293 + -1.001;
  if (v309 >= 0.0)
    v311 = v310;
  else
    v311 = 0.0;
  v312 = v287 + (float)(v301 * 0.70711);
  v313 = v312 + (float)(v295 * 0.5);
  if (v303 >= v313)
    v314 = v312 + (float)(v295 * 0.5);
  else
    v314 = v303;
  v992 = v311;
  v315 = v311;
  if (v313 >= 0.0)
    v316 = v314;
  else
    v316 = 0.0;
  v994 = v316;
  v317 = (v315 + 1);
  v993 = v316;
  v318 = v291 + v292 * v993;
  v991 = *(unsigned __int8 *)(v318 + v315);
  v986 = *(unsigned __int8 *)(v318 + v317);
  v984 = v311;
  v987 = *(unsigned __int8 *)(v318 + v292 + v315);
  v985 = v315 + 1;
  v988 = *(unsigned __int8 *)(v318 + v292 + v317);
  v319 = v308 + (float)(v297 * -0.5);
  if (v298 >= v319)
    v320 = v319;
  else
    v320 = (float)v293 + -1.001;
  if (v319 < 0.0)
    v320 = 0.0;
  v321 = v312 + (float)(v295 * -0.5);
  if (v303 >= v321)
    v322 = v321;
  else
    v322 = v303;
  if (v321 >= 0.0)
    v323 = v322;
  else
    v323 = 0.0;
  v978 = v320;
  v324 = v320;
  v980 = v323;
  v325 = (v324 + 1);
  v979 = v323;
  v326 = v291 + v292 * v979;
  v975 = *(unsigned __int8 *)(v326 + v324);
  v972 = *(unsigned __int8 *)(v326 + v325);
  v970 = v320;
  v973 = *(unsigned __int8 *)(v326 + v292 + v324);
  v971 = v324 + 1;
  v974 = *(unsigned __int8 *)(v326 + v292 + v325);
  v327 = v297 + v296;
  if (v298 >= v327)
    v328 = v327;
  else
    v328 = (float)v293 + -1.001;
  if (v327 < 0.0)
    v328 = 0.0;
  v329 = v295 + v302;
  if (v303 >= (float)(v295 + v302))
    v330 = v295 + v302;
  else
    v330 = v303;
  if (v329 >= 0.0)
    v331 = v330;
  else
    v331 = 0.0;
  v964 = v328;
  v332 = v328;
  v966 = v331;
  v333 = (v332 + 1);
  v965 = v331;
  v334 = v291 + v292 * v965;
  v959 = *(unsigned __int8 *)(v334 + v332);
  v957 = *(unsigned __int8 *)(v334 + v333);
  v956 = v328;
  v960 = *(unsigned __int8 *)(v334 + v292 + v332);
  v958 = v332 + 1;
  v961 = *(unsigned __int8 *)(v334 + v292 + v333);
  v335 = v286 + (float)(v295 * -0.70711);
  v336 = v287 + (float)(v301 * -0.70711);
  v337 = v335 + (float)(v297 * -0.5);
  if (v298 >= v337)
    v338 = v335 + (float)(v297 * -0.5);
  else
    v338 = (float)v293 + -1.001;
  if (v337 >= 0.0)
    v339 = v338;
  else
    v339 = 0.0;
  v340 = v336 + (float)(v295 * -0.5);
  if (v303 >= v340)
    v341 = v336 + (float)(v295 * -0.5);
  else
    v341 = v303;
  if (v340 >= 0.0)
    v342 = v341;
  else
    v342 = 0.0;
  v950 = v339;
  v343 = v339;
  v952 = v342;
  v344 = (v343 + 1);
  v951 = v342;
  v345 = v291 + v292 * v951;
  v947 = *(unsigned __int8 *)(v345 + v343);
  v943 = *(unsigned __int8 *)(v345 + v344);
  v346 = v345 + v292;
  v942 = v339;
  v945 = *(unsigned __int8 *)(v346 + v343);
  v944 = v343 + 1;
  v946 = *(unsigned __int8 *)(v346 + v344);
  v347 = v335 + (float)(v297 * 0.5);
  if (v298 >= v347)
    v298 = v347;
  if (v347 >= 0.0)
    v348 = v298;
  else
    v348 = 0.0;
  v349 = v336 + (float)(v295 * 0.5);
  if (v303 >= v349)
    v350 = v349;
  else
    v350 = v303;
  if (v349 >= 0.0)
    v351 = v350;
  else
    v351 = 0.0;
  v948 = v351;
  v941 = v351;
  v352 = v291 + v292 * v941;
  v353 = v352 + v292;
  v940 = v348;
  v354 = v348;
  v355 = (v354 + 1);
  v937 = *(unsigned __int8 *)(v352 + v354);
  v936 = *(unsigned __int8 *)(v352 + v355);
  v954 = v348;
  v938 = *(unsigned __int8 *)(v353 + v354);
  v356 = v1022 + (float)(v259 * v273);
  v935 = v354 + 1;
  v939 = *(unsigned __int8 *)(v353 + v355);
  v357 = v278 * 1.4142;
  v358 = v279 * 1.4142;
  v359 = *(_DWORD *)(a2 + 24);
  v360 = sub_20E7F9528(a2 + 8);
  v361 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v358) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v358) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v358) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
  if (v361 < 0)
  {
    v362 = 0;
    v363 = 0;
  }
  else if (v360 * v359 <= v361)
  {
    v362 = v359 - 1;
    v363 = v289 - 1;
  }
  else
  {
    v362 = v361 / v360;
    v363 = v361 % v360;
  }
  v364 = (float)(1 << v362);
  v365 = (float)(1.0 / v364) * a3;
  v366 = (float)(1.0 / v364) * a4;
  v367 = v357 / v364;
  v368 = *(_QWORD *)(a2 + 32);
  v369 = (unint64_t *)(*(_QWORD *)(a2 + 56) + 144 * (v368 * v362 + v363));
  v370 = v369[5];
  v372 = v12.__cosval * (float)(v357 / v364);
  v373 = v365 + (float)(v372 * -0.5);
  v374 = v367 * v1273;
  v375 = v373 + (float)((float)(v367 * v1273) * 0.70711);
  v376 = (float)v369[4] + -1.001;
  if (v376 >= v375)
    v377 = v373 + (float)(v374 * 0.70711);
  else
    v377 = (float)v369[4] + -1.001;
  if (v375 >= 0.0)
    v378 = v377;
  else
    v378 = 0.0;
  v379 = v12.__sinval * v367;
  v380 = v366 + (float)(v379 * -0.5);
  v381 = v380 + (float)(v372 * 0.70711);
  v371 = v369[6];
  v382 = (float)v371 + -1.001;
  if (v382 >= v381)
    v383 = v380 + (float)(v372 * 0.70711);
  else
    v383 = (float)v371 + -1.001;
  if (v381 < 0.0)
    v383 = 0.0;
  v933 = v378;
  v384 = v378;
  v934 = v383;
  v385 = v369[9];
  v386 = (v384 + 1);
  v878 = v383;
  v387 = v385 + v370 * v878;
  v932 = *(unsigned __int8 *)(v387 + v384);
  v929 = *(unsigned __int8 *)(v387 + v386);
  v927 = v378;
  v930 = *(unsigned __int8 *)(v387 + v370 + v384);
  v928 = v384 + 1;
  v931 = *(unsigned __int8 *)(v387 + v370 + v386);
  v388 = v365 + (float)(v372 * 0.5);
  v389 = v388 + (float)(v374 * 0.70711);
  if (v376 >= v389)
    v390 = v388 + (float)(v374 * 0.70711);
  else
    v390 = v376;
  if (v389 >= 0.0)
    v391 = v390;
  else
    v391 = 0.0;
  v392 = v366 + (float)(v379 * 0.5);
  v393 = v392 + (float)(v372 * 0.70711);
  if (v382 >= v393)
    v394 = v392 + (float)(v372 * 0.70711);
  else
    v394 = (float)v371 + -1.001;
  if (v393 >= 0.0)
    v395 = v394;
  else
    v395 = 0.0;
  v924 = v391;
  v396 = v391;
  v962 = v395;
  v397 = (v396 + 1);
  v925 = v395;
  v398 = v385 + v370 * v925;
  v923 = *(unsigned __int8 *)(v398 + v396);
  v920 = *(unsigned __int8 *)(v398 + v397);
  v917 = v391;
  v921 = *(unsigned __int8 *)(v398 + v370 + v396);
  v918 = v396 + 1;
  v922 = *(unsigned __int8 *)(v398 + v370 + v397);
  v399 = (float)(v372 + v365) + (float)(v374 * 0.0);
  if (v376 >= v399)
    v400 = (float)(v372 + v365) + (float)(v374 * 0.0);
  else
    v400 = v376;
  if (v399 >= 0.0)
    v401 = v400;
  else
    v401 = 0.0;
  v402 = (float)(v379 + v366) + (float)(v372 * 0.0);
  if (v382 >= v402)
    v403 = (float)(v379 + v366) + (float)(v372 * 0.0);
  else
    v403 = (float)v371 + -1.001;
  if (v402 >= 0.0)
    v404 = v403;
  else
    v404 = 0.0;
  v916 = v401;
  v405 = v401;
  v406 = v388 + (float)(v374 * -0.70711);
  if (v376 >= v406)
    v407 = v406;
  else
    v407 = v376;
  if (v406 < 0.0)
    v407 = 0.0;
  v408 = v392 + (float)(v372 * -0.70711);
  if (v382 >= v408)
    v409 = v392 + (float)(v372 * -0.70711);
  else
    v409 = (float)v371 + -1.001;
  if (v408 < 0.0)
    v409 = 0.0;
  v410 = v373 + (float)(v374 * -0.70711);
  if (v376 >= v410)
    v411 = v410;
  else
    v411 = v376;
  v968 = v404;
  v412 = (v405 + 1);
  v914 = v404;
  v413 = v385 + v370 * v914;
  v910 = *(unsigned __int8 *)(v413 + v405);
  v909 = *(unsigned __int8 *)(v413 + v412);
  v915 = v401;
  v911 = *(unsigned __int8 *)(v413 + v370 + v405);
  v907 = v405 + 1;
  v913 = *(unsigned __int8 *)(v413 + v370 + v412);
  v908 = v407;
  v414 = v407;
  v976 = v409;
  v415 = (v414 + 1);
  v906 = v409;
  v416 = v385 + v370 * v906;
  v902 = *(unsigned __int8 *)(v416 + v414);
  v901 = *(unsigned __int8 *)(v416 + v415);
  v417 = v416 + v370;
  v899 = v407;
  v903 = *(unsigned __int8 *)(v417 + v414);
  v900 = v414 + 1;
  v904 = *(unsigned __int8 *)(v417 + v415);
  if (v410 < 0.0)
    v411 = 0.0;
  v418 = v380 + (float)(v372 * -0.70711);
  if (v382 >= v418)
    v419 = v380 + (float)(v372 * -0.70711);
  else
    v419 = (float)v371 + -1.001;
  v895 = v411;
  v420 = v411;
  if (v418 >= 0.0)
    v421 = v419;
  else
    v421 = 0.0;
  v982 = v421;
  v422 = (v420 + 1);
  v897 = v421;
  v423 = v385 + v370 * v897;
  v893 = *(unsigned __int8 *)(v423 + v420);
  v892 = *(unsigned __int8 *)(v423 + v422);
  v889 = v411;
  v894 = *(unsigned __int8 *)(v423 + v370 + v420);
  v890 = v420 + 1;
  v896 = *(unsigned __int8 *)(v423 + v370 + v422);
  v424 = (float)(v365 - v372) + (float)(v374 * 0.0);
  if (v376 >= v424)
    v425 = v424;
  else
    v425 = v376;
  if (v424 < 0.0)
    v425 = 0.0;
  v426 = (float)(v366 - v379) + (float)(v372 * 0.0);
  if (v382 >= v426)
    v427 = v426;
  else
    v427 = (float)v371 + -1.001;
  if (v426 >= 0.0)
    v428 = v427;
  else
    v428 = 0.0;
  v989 = v428;
  v888 = v428;
  v429 = v385 + v370 * v888;
  v430 = v429 + v370;
  v887 = v425;
  v431 = v425;
  v432 = (v431 + 1);
  v882 = *(unsigned __int8 *)(v429 + v431);
  v881 = *(unsigned __int8 *)(v429 + v432);
  v996 = v425;
  v884 = *(unsigned __int8 *)(v430 + v431);
  v1023 = v356 * 255.0;
  v880 = v431 + 1;
  v886 = *(unsigned __int8 *)(v430 + v432);
  v433 = v357 * 1.4142;
  v434 = *(_DWORD *)(a2 + 24);
  v435 = sub_20E7F9528(a2 + 8);
  v436 = v358 * 1.4142;
  v437 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v358 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v358 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v358 * 1.4142) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
  if (v437 < 0)
  {
    v438 = a2 + 8;
    v439 = 0;
    v440 = 0;
  }
  else
  {
    v438 = a2 + 8;
    if (v435 * v434 <= v437)
    {
      v439 = v434 - 1;
      v440 = v368 - 1;
    }
    else
    {
      v439 = v437 / v435;
      v440 = v437 % v435;
    }
  }
  v441 = (float)(1 << v439);
  v442 = (float)(1.0 / v441) * a3;
  v443 = (float)(1.0 / v441) * a4;
  v1019 = v357 * 1.4142;
  v444 = v433 / v441;
  v827 = *(_QWORD *)(a2 + 32);
  v445 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 144 * (v827 * v439 + v440));
  v446 = v445[9];
  v448 = v445[4];
  v447 = v445[5];
  v449 = v445[6];
  v450 = v12.__cosval * (float)(v433 / v441);
  v451 = v442 + (float)(v450 * 0.0);
  v452 = v444 * v1273;
  v453 = (float)v448 + -1.001;
  if (v453 >= (float)(v451 - (float)(v444 * v1273)))
    v454 = v451 - v452;
  else
    v454 = (float)v448 + -1.001;
  if ((float)(v451 - (float)(v444 * v1273)) >= 0.0)
    v455 = v454;
  else
    v455 = 0.0;
  v456 = v12.__sinval * v444;
  v457 = v443 + (float)((float)(v12.__sinval * v444) * 0.0);
  v458 = (float)v449 + -1.001;
  if (v458 >= (float)(v457 - v450))
    v459 = v457 - v450;
  else
    v459 = (float)v449 + -1.001;
  v876 = v455;
  v460 = v455;
  if ((float)(v457 - v450) < 0.0)
    v459 = 0.0;
  v879 = v459;
  v461 = (v460 + 1);
  v870 = v459;
  v462 = v446 + v447 * v870;
  v874 = *(unsigned __int8 *)(v462 + v460);
  v871 = *(unsigned __int8 *)(v462 + v461);
  v866 = v455;
  v872 = *(unsigned __int8 *)(v462 + v447 + v460);
  v868 = v460 + 1;
  v873 = *(unsigned __int8 *)(v462 + v447 + v461);
  v463 = v442 + (float)(v450 * 0.70711);
  v464 = v463 + (float)(v452 * 0.5);
  if (v453 >= v464)
    v465 = v463 + (float)(v452 * 0.5);
  else
    v465 = (float)v448 + -1.001;
  if (v464 >= 0.0)
    v466 = v465;
  else
    v466 = 0.0;
  v467 = v443 + (float)(v456 * 0.70711);
  v468 = v467 + (float)(v450 * 0.5);
  if (v458 >= v468)
    v469 = v467 + (float)(v450 * 0.5);
  else
    v469 = v458;
  v865 = v466;
  v470 = v466;
  if (v468 >= 0.0)
    v471 = v469;
  else
    v471 = 0.0;
  v1004 = v471;
  v472 = (v470 + 1);
  v855 = v471;
  v473 = v446 + v447 * v855;
  v864 = *(unsigned __int8 *)(v473 + v470);
  v858 = *(unsigned __int8 *)(v473 + v472);
  v851 = v466;
  v860 = *(unsigned __int8 *)(v473 + v447 + v470);
  v853 = v470 + 1;
  v862 = *(unsigned __int8 *)(v473 + v447 + v472);
  v474 = v463 + (float)(v452 * -0.5);
  if (v453 >= v474)
    v475 = v474;
  else
    v475 = (float)v448 + -1.001;
  if (v474 >= 0.0)
    v476 = v475;
  else
    v476 = 0.0;
  v477 = v467 + (float)(v450 * -0.5);
  if (v458 >= v477)
    v478 = v477;
  else
    v478 = v458;
  if (v477 >= 0.0)
    v479 = v478;
  else
    v479 = 0.0;
  v480 = v476;
  v1015 = v479;
  v481 = (v480 + 1);
  v844 = v479;
  v482 = v446 + v447 * v844;
  v850 = *(unsigned __int8 *)(v482 + v480);
  v845 = *(unsigned __int8 *)(v482 + v481);
  v847 = *(unsigned __int8 *)(v482 + v447 + v480);
  v843 = v480 + 1;
  v849 = *(unsigned __int8 *)(v482 + v447 + v481);
  v483 = v452 + v451;
  if (v453 >= v483)
    v484 = v483;
  else
    v484 = (float)v448 + -1.001;
  if (v483 >= 0.0)
    v485 = v484;
  else
    v485 = 0.0;
  v486 = v450 + v457;
  if (v458 >= (float)(v450 + v457))
    v487 = v450 + v457;
  else
    v487 = v458;
  if (v486 >= 0.0)
    v488 = v487;
  else
    v488 = 0.0;
  v489 = v485;
  v490 = (v489 + 1);
  v839 = v488;
  v491 = v446 + v447 * v839;
  v841 = *(unsigned __int8 *)(v491 + v489);
  v837 = *(unsigned __int8 *)(v491 + v490);
  v842 = *(unsigned __int8 *)(v491 + v447 + v489);
  v1017 = *(unsigned __int8 *)(v491 + v447 + v490);
  v492 = v442 + (float)(v450 * -0.70711);
  v493 = v492 + (float)(v452 * -0.5);
  if (v453 >= v493)
    v494 = v492 + (float)(v452 * -0.5);
  else
    v494 = (float)v448 + -1.001;
  if (v493 >= 0.0)
    v495 = v494;
  else
    v495 = 0.0;
  v496 = v443 + (float)(v456 * -0.70711);
  v497 = v496 + (float)(v450 * -0.5);
  if (v458 >= v497)
    v498 = v496 + (float)(v450 * -0.5);
  else
    v498 = v458;
  if (v497 >= 0.0)
    v499 = v498;
  else
    v499 = 0.0;
  v500 = v495;
  v501 = (v500 + 1);
  v502 = v499;
  v503 = v446 + v447 * v502;
  v1020 = *(unsigned __int8 *)(v503 + v500);
  v833 = *(unsigned __int8 *)(v503 + v501);
  v504 = v503 + v447;
  v835 = *(unsigned __int8 *)(v504 + v500);
  v836 = *(unsigned __int8 *)(v504 + v501);
  v505 = v492 + (float)(v452 * 0.5);
  if (v453 >= v505)
    v453 = v505;
  if (v505 >= 0.0)
    v506 = v453;
  else
    v506 = 0.0;
  v507 = v496 + (float)(v450 * 0.5);
  if (v458 >= v507)
    v508 = v507;
  else
    v508 = v458;
  if (v507 >= 0.0)
    v509 = v508;
  else
    v509 = 0.0;
  v510 = v509;
  v511 = v446 + v447 * v510;
  v512 = v511 + v447;
  v513 = v506;
  v514 = (v513 + 1);
  v830 = *(unsigned __int8 *)(v511 + v513);
  v828 = *(unsigned __int8 *)(v511 + v514);
  v831 = *(unsigned __int8 *)(v512 + v513);
  v832 = *(unsigned __int8 *)(v512 + v514);
  v515 = v436 * 1.4142;
  v516 = (int)v1023;
  v517 = *(_DWORD *)(a2 + 24);
  v518 = sub_20E7F9528(v438);
  v521 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v515) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v515) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v515) >> 23) - 127))* 0.69315)- *(float *)(a2 + 112))* *(float *)(a2 + 108));
  if (v521 < 0)
  {
    v522 = 0;
    v523 = 0;
  }
  else if (v518 * v517 <= v521)
  {
    v522 = v517 - 1;
    v523 = v827 - 1;
  }
  else
  {
    v522 = v521 / v518;
    v523 = v521 % v518;
  }
  v1024 = (float)((float)((float)((float)((float)(v506 - (float)v513)
                                        * (float)((float)(v510 + 1) - v509))
                                * (float)v828)
                        + (float)((float)((float)((float)v514 - v506)
                                        * (float)((float)(v510 + 1) - v509))
                                * (float)v830))
                + (float)((float)((float)((float)v514 - v506) * (float)(v509 - (float)v510))
                        * (float)v831))
        + (float)((float)((float)(v506 - (float)v513) * (float)(v509 - (float)v510))
                * (float)v832);
  v1021 = (float)((float)((float)((float)((float)(v495 - (float)v500)
                                        * (float)((float)(v502 + 1) - v499))
                                * (float)v833)
                        + (float)((float)((float)((float)v501 - v495)
                                        * (float)((float)(v502 + 1) - v499))
                                * (float)v1020))
                + (float)((float)((float)((float)v501 - v495) * (float)(v499 - (float)v502))
                        * (float)v835))
        + (float)((float)((float)(v495 - (float)v500) * (float)(v499 - (float)v502))
                * (float)v836);
  v1018 = (float)((float)((float)((float)((float)(v485 - (float)v489)
                                        * (float)((float)(v839 + 1) - v488))
                                * (float)v837)
                        + (float)((float)((float)((float)(v489 + 1) - v485)
                                        * (float)((float)(v839 + 1) - v488))
                                * (float)v841))
                + (float)((float)((float)((float)(v489 + 1) - v485)
                                * (float)(v488 - (float)v839))
                        * (float)v842))
        + (float)((float)((float)(v485 - (float)v489) * (float)(v488 - (float)v839))
                * (float)v1017);
  v1016 = (float)((float)((float)((float)((float)(v476 - (float)v476)
                                        * (float)((float)(v844 + 1) - v1015))
                                * (float)v845)
                        + (float)((float)((float)((float)v843 - v476) * (float)((float)(v844 + 1) - v1015))
                                * (float)v850))
                + (float)((float)((float)((float)v843 - v476) * (float)(v1015 - (float)v844)) * (float)v847))
        + (float)((float)((float)(v476 - (float)v476) * (float)(v1015 - (float)v844))
                * (float)v849);
  v1005 = (float)((float)((float)((float)((float)(v865 - (float)v851) * (float)((float)(v855 + 1) - v1004))
                                * (float)v858)
                        + (float)((float)((float)((float)v853 - v865) * (float)((float)(v855 + 1) - v1004))
                                * (float)v864))
                + (float)((float)((float)((float)v853 - v865) * (float)(v1004 - (float)v855)) * (float)v860))
        + (float)((float)((float)(v865 - (float)v851) * (float)(v1004 - (float)v855)) * (float)v862);
  v524 = v876 - (float)v866;
  v525 = v879 - (float)v870;
  v526 = (float)((float)((float)(v524 * (float)((float)(v870 + 1) - v879)) * (float)v871)
               + (float)((float)((float)((float)v868 - v876) * (float)((float)(v870 + 1) - v879))
                       * (float)v874))
       + (float)((float)((float)((float)v868 - v876) * v525) * (float)v872);
  v527 = v524 * v525;
  v528 = (float)v996;
  v997 = v526 + (float)(v527 * (float)v873);
  v990 = (float)((float)((float)((float)((float)(v887 - v528) * (float)((float)(v888 + 1) - v989))
                               * (float)v881)
                       + (float)((float)((float)((float)v880 - v887) * (float)((float)(v888 + 1) - v989))
                               * (float)v882))
               + (float)((float)((float)((float)v880 - v887) * (float)(v989 - (float)v888)) * (float)v884))
       + (float)((float)((float)(v887 - v528) * (float)(v989 - (float)v888)) * (float)v886);
  v983 = (float)((float)((float)((float)((float)(v895 - (float)v889) * (float)((float)(v897 + 1) - v982))
                               * (float)v892)
                       + (float)((float)((float)((float)v890 - v895) * (float)((float)(v897 + 1) - v982))
                               * (float)v893))
               + (float)((float)((float)((float)v890 - v895) * (float)(v982 - (float)v897)) * (float)v894))
       + (float)((float)((float)(v895 - (float)v889) * (float)(v982 - (float)v897)) * (float)v896);
  v977 = (float)((float)((float)((float)((float)(v908 - (float)v899) * (float)((float)(v906 + 1) - v976))
                               * (float)v901)
                       + (float)((float)((float)((float)v900 - v908) * (float)((float)(v906 + 1) - v976))
                               * (float)v902))
               + (float)((float)((float)((float)v900 - v908) * (float)(v976 - (float)v906)) * (float)v903))
       + (float)((float)((float)(v908 - (float)v899) * (float)(v976 - (float)v906)) * (float)v904);
  v969 = (float)((float)((float)((float)((float)(v916 - (float)v915) * (float)((float)(v914 + 1) - v968))
                               * (float)v909)
                       + (float)((float)((float)((float)v907 - v916) * (float)((float)(v914 + 1) - v968))
                               * (float)v910))
               + (float)((float)((float)((float)v907 - v916) * (float)(v968 - (float)v914)) * (float)v911))
       + (float)((float)((float)(v916 - (float)v915) * (float)(v968 - (float)v914)) * (float)v913);
  v963 = (float)((float)((float)((float)((float)(v924 - (float)v917) * (float)((float)(v925 + 1) - v962))
                               * (float)v920)
                       + (float)((float)((float)((float)v918 - v924) * (float)((float)(v925 + 1) - v962))
                               * (float)v923))
               + (float)((float)((float)((float)v918 - v924) * (float)(v962 - (float)v925)) * (float)v921))
       + (float)((float)((float)(v924 - (float)v917) * (float)(v962 - (float)v925)) * (float)v922);
  v529 = v933 - (float)v927;
  v530 = v934 - (float)v878;
  v531 = (float)((float)((float)(v529 * (float)((float)(v878 + 1) - v934)) * (float)v929)
               + (float)((float)((float)((float)v928 - v933) * (float)((float)(v878 + 1) - v934))
                       * (float)v932))
       + (float)((float)((float)((float)v928 - v933) * v530) * (float)v930);
  v532 = v529 * v530;
  v533 = (float)v954;
  v955 = v531 + (float)(v532 * (float)v931);
  v949 = (float)((float)((float)((float)((float)(v940 - v533) * (float)((float)(v941 + 1) - v948))
                               * (float)v936)
                       + (float)((float)((float)((float)v935 - v940) * (float)((float)(v941 + 1) - v948))
                               * (float)v937))
               + (float)((float)((float)((float)v935 - v940) * (float)(v948 - (float)v941)) * (float)v938))
       + (float)((float)((float)(v940 - v533) * (float)(v948 - (float)v941)) * (float)v939);
  v953 = (float)((float)((float)((float)((float)(v950 - (float)v942) * (float)((float)(v951 + 1) - v952))
                               * (float)v943)
                       + (float)((float)((float)((float)v944 - v950) * (float)((float)(v951 + 1) - v952))
                               * (float)v947))
               + (float)((float)((float)((float)v944 - v950) * (float)(v952 - (float)v951)) * (float)v945))
       + (float)((float)((float)(v950 - (float)v942) * (float)(v952 - (float)v951)) * (float)v946);
  v967 = (float)((float)((float)((float)((float)(v964 - (float)v956) * (float)((float)(v965 + 1) - v966))
                               * (float)v957)
                       + (float)((float)((float)((float)v958 - v964) * (float)((float)(v965 + 1) - v966))
                               * (float)v959))
               + (float)((float)((float)((float)v958 - v964) * (float)(v966 - (float)v965)) * (float)v960))
       + (float)((float)((float)(v964 - (float)v956) * (float)(v966 - (float)v965)) * (float)v961);
  v981 = (float)((float)((float)((float)((float)(v978 - (float)v970) * (float)((float)(v979 + 1) - v980))
                               * (float)v972)
                       + (float)((float)((float)((float)v971 - v978) * (float)((float)(v979 + 1) - v980))
                               * (float)v975))
               + (float)((float)((float)((float)v971 - v978) * (float)(v980 - (float)v979)) * (float)v973))
       + (float)((float)((float)(v978 - (float)v970) * (float)(v980 - (float)v979)) * (float)v974);
  v995 = (float)((float)((float)((float)((float)(v992 - (float)v984) * (float)((float)(v993 + 1) - v994))
                               * (float)v986)
                       + (float)((float)((float)((float)v985 - v992) * (float)((float)(v993 + 1) - v994))
                               * (float)v991))
               + (float)((float)((float)((float)v985 - v992) * (float)(v994 - (float)v993)) * (float)v987))
       + (float)((float)((float)(v992 - (float)v984) * (float)(v994 - (float)v993)) * (float)v988);
  v534 = v1012 - (float)v998;
  v535 = v1014 - (float)v1013;
  v536 = (float)((float)((float)(v534 * (float)((float)(v1013 + 1) - v1014)) * (float)v1002)
               + (float)((float)((float)((float)v1000 - v1012) * (float)((float)(v1013 + 1) - v1014))
                       * (float)v1011))
       + (float)((float)((float)((float)v1000 - v1012) * v535) * (float)v1007);
  v537 = v534 * v535;
  v538 = (float)v1025;
  v1026 = v536 + (float)(v537 * (float)v1009);
  v1036 = (float)((float)((float)((float)((float)(v1028 - v538) * (float)((float)(v1034 + 1) - v1035))
                                * (float)v1029)
                        + (float)((float)((float)((float)v1027 - v1028)
                                        * (float)((float)(v1034 + 1) - v1035))
                                * (float)v1030))
                + (float)((float)((float)((float)v1027 - v1028) * (float)(v1035 - (float)v1034))
                        * (float)v1031))
        + (float)((float)((float)(v1028 - v538) * (float)(v1035 - (float)v1034)) * (float)v1032);
  v1049 = (float)((float)((float)((float)((float)(v1040 - (float)v1037)
                                        * (float)((float)(v1046 + 1) - v1048))
                                * (float)v1039)
                        + (float)((float)((float)((float)v1038 - v1040)
                                        * (float)((float)(v1046 + 1) - v1048))
                                * (float)v1042))
                + (float)((float)((float)((float)v1038 - v1040) * (float)(v1048 - (float)v1046))
                        * (float)v1043))
        + (float)((float)((float)(v1040 - (float)v1037) * (float)(v1048 - (float)v1046)) * (float)v1045);
  v1066 = (float)((float)((float)((float)((float)(v1060 - (float)v1053)
                                        * (float)((float)(v1063 + 1) - v1065))
                                * (float)v1056)
                        + (float)((float)((float)((float)v1055 - v1060)
                                        * (float)((float)(v1063 + 1) - v1065))
                                * (float)v1058))
                + (float)((float)((float)((float)v1055 - v1060) * (float)(v1065 - (float)v1063))
                        * (float)v1050))
        + (float)((float)((float)(v1060 - (float)v1053) * (float)(v1065 - (float)v1063)) * (float)v1051);
  v1082 = (float)((float)((float)((float)((float)(v1079 - (float)v1068)
                                        * (float)((float)(v1080 + 1) - v1081))
                                * (float)v1071)
                        + (float)((float)((float)((float)v1069 - v1079)
                                        * (float)((float)(v1080 + 1) - v1081))
                                * (float)v1077))
                + (float)((float)((float)((float)v1069 - v1079) * (float)(v1081 - (float)v1080))
                        * (float)v1073))
        + (float)((float)((float)(v1079 - (float)v1068) * (float)(v1081 - (float)v1080)) * (float)v1075);
  v1097 = (float)((float)((float)((float)((float)(v1093 - (float)v1084)
                                        * (float)((float)(v1094 + 1) - v1096))
                                * (float)v1087)
                        + (float)((float)((float)((float)v1086 - v1093)
                                        * (float)((float)(v1094 + 1) - v1096))
                                * (float)v1092))
                + (float)((float)((float)((float)v1086 - v1093) * (float)(v1096 - (float)v1094))
                        * (float)v1088))
        + (float)((float)((float)(v1093 - (float)v1084) * (float)(v1096 - (float)v1094)) * (float)v1090);
  v539 = v1107 - (float)v1099;
  v540 = v1109 - (float)v1108;
  v541 = (float)((float)((float)(v539 * (float)((float)(v1108 + 1) - v1109)) * (float)v1101)
               + (float)((float)((float)((float)v1100 - v1107) * (float)((float)(v1108 + 1) - v1109))
                       * (float)v1105))
       + (float)((float)((float)((float)v1100 - v1107) * v540) * (float)v1103);
  v542 = v539 * v540;
  v543 = (float)v1110;
  v1111 = v541 + (float)(v542 * (float)v1104);
  v544 = (float)((float)((float)((float)((float)(v1121 - v543) * (float)((float)(v1119 + 1) - v1120))
                               * (float)v1114)
                       + (float)((float)((float)((float)v1113 - v1121)
                                       * (float)((float)(v1119 + 1) - v1120))
                               * (float)v1115))
               + (float)((float)((float)((float)v1113 - v1121) * (float)(v1120 - (float)v1119))
                       * (float)v1116))
       + (float)((float)((float)(v1121 - v543) * (float)(v1120 - (float)v1119)) * (float)v1118);
  v545 = (float)(1 << v522);
  v546 = (float)(1.0 / v545) * a3;
  v547 = (float)(1.0 / v545) * a4;
  v548 = (float)(v1019 * 1.4142) / v545;
  v549 = (unint64_t *)(*(_QWORD *)(a2 + 56) + 144 * (*(_QWORD *)(a2 + 32) * v522 + v523));
  v550 = v12.__cosval * v548;
  v551 = v548 * v1273;
  v552 = (float)v549[4] + -1.001;
  v553 = v546 + (float)((float)(v12.__cosval * v548) * -0.5);
  v554 = v553 + (float)((float)(v548 * v1273) * 0.70711);
  if (v552 >= v554)
    v555 = v553 + (float)(v551 * 0.70711);
  else
    v555 = (float)v549[4] + -1.001;
  v556 = v12.__sinval * v548;
  v557 = v549[6];
  v558 = (float)v557 + -1.001;
  if (v554 >= 0.0)
    v559 = v555;
  else
    v559 = 0.0;
  v560 = v547 + (float)(v556 * -0.5);
  v561 = v560 + (float)(v550 * 0.70711);
  if (v558 >= v561)
    v562 = v560 + (float)(v550 * 0.70711);
  else
    v562 = (float)v557 + -1.001;
  v563 = v561 < 0.0;
  v564 = v559;
  v565 = (v564 + 1);
  v566 = (float)v565 - v559;
  v567 = v559 - (float)v559;
  v568 = v549[5];
  v569 = v549[9];
  if (v563)
    v562 = 0.0;
  v570 = v562;
  v571 = v570 + 1;
  v572 = v569 + v568 * v570;
  v573 = (float)v571 - v562;
  LOBYTE(v519) = *(_BYTE *)(v572 + v565);
  *(float *)&v574 = v567 * v573;
  LOBYTE(v574) = *(_BYTE *)(v572 + v564);
  v575 = (float)((float)(v567 * v573) * (float)v519) + (float)((float)(v566 * v573) * (float)v574);
  *(float *)&v576 = (float)v562;
  *(float *)&v577 = v562 - *(float *)&v576;
  v578 = v572 + v568;
  LOBYTE(v576) = *(_BYTE *)(v578 + v564);
  v579 = v575 + (float)((float)(v566 * *(float *)&v577) * (float)v576);
  v580 = v567 * *(float *)&v577;
  LOBYTE(v577) = *(_BYTE *)(v578 + v565);
  v581 = v579 + (float)(v580 * (float)v577);
  v582 = v546 + (float)(v550 * 0.5);
  v583 = v582 + (float)(v551 * 0.70711);
  if (v552 >= v583)
    v584 = v582 + (float)(v551 * 0.70711);
  else
    v584 = v552;
  if (v583 >= 0.0)
    v585 = v584;
  else
    v585 = 0.0;
  v586 = v547 + (float)(v556 * 0.5);
  v587 = v586 + (float)(v550 * 0.70711);
  v588 = v585;
  v589 = (v588 + 1);
  if (v558 >= v587)
    v590 = v586 + (float)(v550 * 0.70711);
  else
    v590 = v558;
  v563 = v587 < 0.0;
  v591 = (float)v589 - v585;
  v592 = v585 - (float)v585;
  if (v563)
    v590 = 0.0;
  v593 = v590;
  v594 = v593 + 1;
  v595 = v569 + v568 * v593;
  v596 = (float)v594 - v590;
  LOBYTE(v520) = *(_BYTE *)(v595 + v589);
  *(float *)&v597 = v592 * v596;
  LOBYTE(v597) = *(_BYTE *)(v595 + v588);
  v598 = (float)v597;
  v599 = (float)((float)(v592 * v596) * (float)v520) + (float)((float)(v591 * v596) * v598);
  *(float *)&v600 = (float)v590;
  *(float *)&v601 = v590 - *(float *)&v600;
  v602 = v595 + v568;
  LOBYTE(v600) = *(_BYTE *)(v602 + v588);
  v603 = v599 + (float)((float)(v591 * *(float *)&v601) * (float)v600);
  v604 = v592 * *(float *)&v601;
  LOBYTE(v601) = *(_BYTE *)(v602 + v589);
  v605 = v603 + (float)(v604 * (float)v601);
  v606 = (float)(v550 + v546) + (float)(v551 * 0.0);
  if (v552 >= v606)
    v607 = (float)(v550 + v546) + (float)(v551 * 0.0);
  else
    v607 = v552;
  if (v606 >= 0.0)
    v608 = v607;
  else
    v608 = 0.0;
  v609 = (float)(v556 + v547) + (float)(v550 * 0.0);
  if (v558 >= v609)
    v610 = (float)(v556 + v547) + (float)(v550 * 0.0);
  else
    v610 = v558;
  v563 = v609 < 0.0;
  v611 = v608;
  v612 = (v611 + 1);
  v613 = (float)v612 - v608;
  v614 = v608 - (float)v608;
  if (v563)
    v610 = 0.0;
  v615 = v610;
  v616 = v615 + 1;
  v617 = v569 + v568 * v615;
  LOBYTE(v598) = *(_BYTE *)(v617 + v612);
  v618 = (float)v616 - v610;
  *(float *)&v619 = v614 * v618;
  LOBYTE(v619) = *(_BYTE *)(v617 + v611);
  v620 = (float)((float)(v614 * v618) * (float)LODWORD(v598)) + (float)((float)(v613 * v618) * (float)v619);
  *(float *)&v621 = (float)v610;
  *(float *)&v622 = v610 - *(float *)&v621;
  v623 = v617 + v568;
  LOBYTE(v621) = *(_BYTE *)(v623 + v611);
  v624 = (float)v621;
  v625 = v620 + (float)((float)(v613 * *(float *)&v622) * v624);
  v626 = v614 * *(float *)&v622;
  LOBYTE(v622) = *(_BYTE *)(v623 + v612);
  v627 = v625 + (float)(v626 * (float)v622);
  v628 = v582 + (float)(v551 * -0.70711);
  if (v552 >= v628)
    v629 = v628;
  else
    v629 = v552;
  if (v628 >= 0.0)
    v630 = v629;
  else
    v630 = 0.0;
  v631 = v586 + (float)(v550 * -0.70711);
  if (v558 >= v631)
    v632 = v631;
  else
    v632 = v558;
  v563 = v631 < 0.0;
  v633 = v630;
  v634 = (v633 + 1);
  v635 = (float)v634 - v630;
  v636 = v630 - (float)v630;
  if (v563)
    v632 = 0.0;
  v637 = v632;
  v638 = v637 + 1;
  v639 = v569 + v568 * v637;
  v640 = (float)v638 - v632;
  LOBYTE(v624) = *(_BYTE *)(v639 + v634);
  *(float *)&v641 = v636 * v640;
  LOBYTE(v641) = *(_BYTE *)(v639 + v633);
  v646 = (float)((float)(v636 * v640) * (float)LODWORD(v624)) + (float)((float)(v635 * v640) * (float)v641);
  *(float *)&v642 = (float)v632;
  v643 = v632 - *(float *)&v642;
  v644 = v639 + v568;
  LOBYTE(v642) = *(_BYTE *)(v644 + v633);
  v645 = v646 + (float)((float)(v635 * v643) * (float)v642);
  LOBYTE(v646) = *(_BYTE *)(v644 + v634);
  v647 = v645 + (float)((float)(v636 * v643) * (float)LODWORD(v646));
  v648 = v553 + (float)(v551 * -0.70711);
  if (v552 >= v648)
    v649 = v553 + (float)(v551 * -0.70711);
  else
    v649 = v552;
  v563 = v648 < 0.0;
  v650 = v560 + (float)(v550 * -0.70711);
  if (v563)
    v649 = 0.0;
  if (v558 >= v650)
    v651 = v560 + (float)(v550 * -0.70711);
  else
    v651 = v558;
  v563 = v650 < 0.0;
  v652 = v649;
  v653 = (v652 + 1);
  v654 = (float)v653 - v649;
  v655 = v649 - (float)v649;
  if (v563)
    v651 = 0.0;
  v656 = v651;
  v657 = v656 + 1;
  v658 = v569 + v568 * v656;
  LOBYTE(v646) = *(_BYTE *)(v658 + v653);
  v659 = (float)v657 - v651;
  *(float *)&v660 = v655 * v659;
  LOBYTE(v660) = *(_BYTE *)(v658 + v652);
  v661 = (float)((float)(v655 * v659) * (float)LODWORD(v646)) + (float)((float)(v654 * v659) * (float)v660);
  *(float *)&v662 = (float)v651;
  *(float *)&v663 = v651 - *(float *)&v662;
  v664 = v658 + v568;
  LOBYTE(v662) = *(_BYTE *)(v664 + v652);
  v665 = (float)v662;
  v666 = v661 + (float)((float)(v654 * *(float *)&v663) * v665);
  v667 = v655 * *(float *)&v663;
  LOBYTE(v663) = *(_BYTE *)(v664 + v653);
  v668 = v666 + (float)(v667 * (float)v663);
  v669 = (float)(v546 - v550) + (float)(v551 * 0.0);
  if (v552 >= v669)
    v670 = (float)(v546 - v550) + (float)(v551 * 0.0);
  else
    v670 = v552;
  v671 = (float)(v547 - v556) + (float)(v550 * 0.0);
  if (v669 >= 0.0)
    v672 = v670;
  else
    v672 = 0.0;
  if (v558 >= v671)
    v673 = v671;
  else
    v673 = v558;
  v674 = v672;
  if (v671 >= 0.0)
    v675 = v673;
  else
    v675 = 0.0;
  v676 = (v674 + 1);
  v677 = (float)v676 - v672;
  v678 = v672 - (float)v672;
  v679 = v675;
  v680 = v569 + v568 * v679;
  v681 = (float)(v679 + 1) - v675;
  LOBYTE(v665) = *(_BYTE *)(v680 + v676);
  *(float *)&v682 = v678 * v681;
  LOBYTE(v682) = *(_BYTE *)(v680 + v674);
  *(float *)&v683 = (float)((float)(v678 * v681) * (float)LODWORD(v665)) + (float)((float)(v677 * v681) * (float)v682);
  *(float *)&v684 = (float)v675;
  v685 = v675 - *(float *)&v684;
  v686 = v680 + v568;
  LOBYTE(v684) = *(_BYTE *)(v686 + v674);
  v687 = *(float *)&v683 + (float)((float)(v677 * v685) * (float)v684);
  LOBYTE(v683) = *(_BYTE *)(v686 + v676);
  v688 = (int)(float)(v1082 * 255.0);
  v689 = (int)(float)(v1097 * 255.0);
  v690 = (int)(float)(v1111 * 255.0);
  v691 = (int)(float)(v544 * 255.0);
  v692 = (int)(float)((float)((float)((float)((float)((float)((float)(v1131 - (float)v1122)
                                                            * (float)((float)(v1271 + 1) - v1129))
                                                    * (float)v1124)
                                            + (float)((float)((float)((float)v1123 - v1131)
                                                            * (float)((float)(v1271 + 1) - v1129))
                                                    * (float)v1125))
                                    + (float)((float)((float)((float)v1123 - v1131)
                                                    * (float)(v1129 - (float)v1271))
                                            * (float)v1126))
                            + (float)((float)((float)(v1131 - (float)v1122) * (float)(v1129 - (float)v1271))
                                    * (float)v1127))
                    * 255.0);
  v693 = (int)(float)((float)((float)((float)((float)((float)((float)(v1137 - (float)v1130)
                                                            * (float)((float)(v1136 + 1) - v1139))
                                                    * (float)v1132)
                                            + (float)((float)((float)((float)v1128 - v1137)
                                                            * (float)((float)(v1136 + 1) - v1139))
                                                    * (float)v1133))
                                    + (float)((float)((float)((float)v1128 - v1137)
                                                    * (float)(v1139 - (float)v1136))
                                            * (float)v1134))
                            + (float)((float)((float)(v1137 - (float)v1130) * (float)(v1139 - (float)v1136))
                                    * (float)v1135))
                    * 255.0);
  v694 = (int)(float)((float)((float)((float)((float)((float)((float)(v1164 - (float)v1138)
                                                            * (float)((float)(v1145 + 1) - v1166))
                                                    * (float)v1141)
                                            + (float)((float)((float)((float)v1140 - v1164)
                                                            * (float)((float)(v1145 + 1) - v1166))
                                                    * (float)v1143))
                                    + (float)((float)((float)((float)v1140 - v1164)
                                                    * (float)(v1166 - (float)v1145))
                                            * (float)v1144))
                            + (float)((float)((float)(v1164 - (float)v1138) * (float)(v1166 - (float)v1145))
                                    * (float)v1142))
                    * 255.0);
  LODWORD(v676) = (int)(float)((float)((float)((float)((float)((float)((float)(v1167 - (float)v1147)
                                                                     * (float)((float)(v1152 + 1) - v1168))
                                                             * (float)v1148)
                                                     + (float)((float)((float)((float)v1146 - v1167)
                                                                     * (float)((float)(v1152 + 1) - v1168))
                                                             * (float)v1149))
                                             + (float)((float)((float)((float)v1146 - v1167)
                                                             * (float)(v1168 - (float)v1152))
                                                     * (float)v1150))
                                     + (float)((float)((float)(v1167 - (float)v1147)
                                                     * (float)(v1168 - (float)v1152))
                                             * (float)v1151))
                             * 255.0);
  v695 = (int)(float)((float)((float)((float)((float)((float)((float)(v1169 - (float)v1154)
                                                            * (float)((float)(v1163 + 1) - v1171))
                                                    * (float)v1158)
                                            + (float)((float)((float)((float)v1156 - v1169)
                                                            * (float)((float)(v1163 + 1) - v1171))
                                                    * (float)v1160))
                                    + (float)((float)((float)((float)v1156 - v1169)
                                                    * (float)(v1171 - (float)v1163))
                                            * (float)v1161))
                            + (float)((float)((float)(v1169 - (float)v1154) * (float)(v1171 - (float)v1163))
                                    * (float)v1162))
                    * 255.0);
  v696 = (int)(float)((float)((float)((float)((float)((float)((float)(v1180 - (float)v1172)
                                                            * (float)((float)(v1179 + 1) - v1181))
                                                    * (float)v1174)
                                            + (float)((float)((float)((float)v1173 - v1180)
                                                            * (float)((float)(v1179 + 1) - v1181))
                                                    * (float)v1175))
                                    + (float)((float)((float)((float)v1173 - v1180)
                                                    * (float)(v1181 - (float)v1179))
                                            * (float)v1176))
                            + (float)((float)((float)(v1180 - (float)v1172) * (float)(v1181 - (float)v1179))
                                    * (float)v1178))
                    * 255.0);
  v697 = (int)(float)((float)((float)((float)((float)((float)((float)(v1211 - (float)v1182)
                                                            * (float)((float)(v1193 + 1) - v1203))
                                                    * (float)v1184)
                                            + (float)((float)((float)((float)v1183 - v1211)
                                                            * (float)((float)(v1193 + 1) - v1203))
                                                    * (float)v1186))
                                    + (float)((float)((float)((float)v1183 - v1211)
                                                    * (float)(v1203 - (float)v1193))
                                            * (float)v1188))
                            + (float)((float)((float)(v1211 - (float)v1182) * (float)(v1203 - (float)v1193))
                                    * (float)v1190))
                    * 255.0);
  v698 = (int)(float)((float)((float)((float)((float)((float)((float)(v1231 - (float)v1195)
                                                            * (float)((float)(v1209 + 1) - v1233))
                                                    * (float)v1205)
                                            + (float)((float)((float)((float)v1197 - v1231)
                                                            * (float)((float)(v1209 + 1) - v1233))
                                                    * (float)v1207))
                                    + (float)((float)((float)((float)v1197 - v1231)
                                                    * (float)(v1233 - (float)v1209))
                                            * (float)v1199))
                            + (float)((float)((float)(v1231 - (float)v1195) * (float)(v1233 - (float)v1209))
                                    * (float)v1201))
                    * 255.0);
  v699 = (int)(float)((float)((float)((float)((float)((float)((float)(v1253 - (float)v1213)
                                                            * (float)((float)(v1225 + 1) - v1260))
                                                    * (float)v1217)
                                            + (float)((float)((float)((float)v1215 - v1253)
                                                            * (float)((float)(v1225 + 1) - v1260))
                                                    * (float)v1219))
                                    + (float)((float)((float)((float)v1215 - v1253)
                                                    * (float)(v1260 - (float)v1225))
                                            * (float)v1221))
                            + (float)((float)((float)(v1253 - (float)v1213) * (float)(v1260 - (float)v1225))
                                    * (float)v1223))
                    * 255.0);
  v700 = (int)(float)((float)((float)((float)((float)((float)((float)(v1262 - (float)v1227)
                                                            * (float)((float)(v1244 + 1) - v1264))
                                                    * (float)v1236)
                                            + (float)((float)((float)((float)v1229 - v1262)
                                                            * (float)((float)(v1244 + 1) - v1264))
                                                    * (float)v1238))
                                    + (float)((float)((float)((float)v1229 - v1262)
                                                    * (float)(v1264 - (float)v1244))
                                            * (float)v1240))
                            + (float)((float)((float)(v1262 - (float)v1227) * (float)(v1264 - (float)v1244))
                                    * (float)v1242))
                    * 255.0);
  v701 = (int)(float)((float)((float)((float)((float)((float)((float)(v1266 - (float)v1246)
                                                            * (float)((float)(v1258 + 1) - v1268))
                                                    * (float)v1252)
                                            + (float)((float)((float)((float)v1248 - v1266)
                                                            * (float)((float)(v1258 + 1) - v1268))
                                                    * (float)v1255))
                                    + (float)((float)((float)((float)v1248 - v1266)
                                                    * (float)(v1268 - (float)v1258))
                                            * (float)v1256))
                            + (float)((float)((float)(v1266 - (float)v1246) * (float)(v1268 - (float)v1258))
                                    * (float)v1250))
                    * 255.0);
  v702 = v1005 * 255.0;
  v703 = v1026 * 255.0;
  v704 = v581 * 255.0;
  v705 = v605 * 255.0;
  v706 = v627 * 255.0;
  v1234 = v700 > v516;
  v707 = (int)(float)(v1066 * 255.0);
  v708 = (int)(float)(v1049 * 255.0);
  v709 = (int)(float)(v1036 * 255.0);
  LODWORD(v680) = (int)(float)(v1026 * 255.0);
  LODWORD(v686) = (int)(float)(v995 * 255.0);
  v1280 = (int)(float)(v981 * 255.0);
  v1267 = (int)(float)(v967 * 255.0);
  v1277 = (int)(float)(v953 * 255.0);
  v1279 = (int)(float)(v949 * 255.0);
  v1243 = (int)(float)(v955 * 255.0);
  v1239 = (int)(float)(v963 * 255.0);
  v1251 = (int)(float)(v969 * 255.0);
  v1241 = (int)(float)(v977 * 255.0);
  v1276 = (int)(float)(v997 * 255.0);
  v1274 = (int)(float)(v1005 * 255.0);
  v1245 = (int)(float)(v1016 * 255.0);
  v710 = (int)(float)(v1018 * 255.0);
  v1272 = (int)(float)(v1021 * 255.0);
  v1269 = (int)(float)(v1024 * 255.0);
  v1165 = v701 < v700;
  v1159 = v700 < v699;
  v1157 = v700 < v698;
  v1155 = v700 < v697;
  v1153 = v700 < v696;
  v1112 = v680 < v1267;
  v1106 = v686 < v1267;
  v1102 = v1280 < v1267;
  v1098 = v1267 < v1277;
  v1095 = v1267 < v1279;
  v1091 = v1243 < v1251;
  v1089 = v1243 < v1241;
  v1085 = v1239 < v1251;
  v1083 = v1239 < v1241;
  v1078 = v1251 < v1241;
  v1076 = v1251 < (int)(float)(v983 * 255.0);
  v1074 = v1251 < (int)(float)(v990 * 255.0);
  v1072 = v1241 < (int)(float)(v983 * 255.0);
  v1070 = v1241 < (int)(float)(v990 * 255.0);
  v1067 = v1276 < v1274;
  v1064 = v1276 < v1245;
  v1061 = v1276 < v710;
  v1059 = v1276 < v1272;
  v1057 = v1276 < v1269;
  v1052 = v1274 < v1272;
  v1047 = v1245 < v1272;
  v1044 = v710 < v1272;
  v1041 = v1272 < v1269;
  v809 = v700;
  v1010 = v695 > v700;
  v1008 = v676 > v700;
  v1006 = v694 > v700;
  v1003 = v693 > v700;
  v1001 = v692 > v700;
  v999 = v691 > v700;
  v795 = v691;
  v926 = v1267 > v690;
  v919 = v1267 > v689;
  v912 = v1267 > v688;
  v905 = v1267 > v707;
  v898 = v1267 > v708;
  v891 = v1267 > v709;
  v885 = v1251 > v680;
  v883 = v1241 > v680;
  v877 = v1251 > v686;
  v875 = v1241 > v686;
  v869 = v1251 > v1280;
  v867 = v1241 > v1280;
  v863 = v1243 > v1267;
  v861 = v1239 > v1267;
  v859 = v1251 > v1267;
  v856 = v1241 > v1267;
  v854 = (int)(float)(v983 * 255.0) > v1267;
  v852 = (int)(float)(v990 * 255.0) > v1267;
  v848 = v1251 > v1277;
  v846 = v1241 > v1277;
  v840 = v1251 > v1279;
  v838 = v1241 > v1279;
  v834 = v1276 > v1243;
  v829 = v1272 > v1243;
  v826 = v1276 > v1239;
  v825 = v1272 > v1239;
  v824 = v1276 > v1251;
  v823 = v1274 > v1251;
  v822 = v1245 > v1251;
  v821 = v710 > v1251;
  v820 = v1272 > v1251;
  v819 = v1269 > v1251;
  v818 = v1276 > v1241;
  v817 = v1274 > v1241;
  v816 = v1245 > v1241;
  v815 = v710 > v1241;
  v814 = v1272 > v1241;
  v812 = v1269 > v1241;
  v811 = v1276 > (int)(float)(v983 * 255.0);
  v810 = v1272 > (int)(float)(v983 * 255.0);
  v807 = v1276 > (int)(float)(v990 * 255.0);
  v805 = v1272 > (int)(float)(v990 * 255.0);
  v804 = (int)v704 > v1276;
  v803 = (int)v705 > v1276;
  v802 = (int)v706 > v1276;
  v801 = (int)(float)(v647 * 255.0) > v1276;
  v799 = (int)(float)(v668 * 255.0) > v1276;
  v711 = (int)(float)((float)(v687 + (float)((float)(v678 * v685) * (float)v683)) * 255.0);
  v798 = v711 > v1276;
  v796 = v711 > v1274;
  v794 = v711 > v1245;
  v793 = v711 > v710;
  v792 = (int)v704 > v1272;
  v791 = (int)v705 > v1272;
  v790 = (int)v706 > v1272;
  v789 = (int)(float)(v647 * 255.0) > v1272;
  v788 = (int)(float)(v668 * 255.0) > v1272;
  v787 = v711 > v1272;
  v786 = v711 > v1269;
  v785 = v701 < v690;
  v784 = v809 < v689;
  v783 = v699 < v688;
  v782 = v698 < v707;
  v781 = v697 < v708;
  v780 = v701 < v707;
  v779 = v699 < v709;
  v778 = v698 < v690;
  v777 = v697 < v689;
  v776 = v696 < v688;
  v775 = v701 < v1243;
  v774 = v699 < v1251;
  v773 = v698 < v1241;
  v720 = (int)(float)(v990 * 255.0);
  v721 = (int)(float)(v983 * 255.0);
  v772 = v697 < v721;
  v771 = v701 < v1241;
  v769 = v698 < v1243;
  v770 = v699 < v720;
  v767 = v696 < v1251;
  v768 = v697 < v1239;
  v766 = v701 < (int)v704;
  v764 = v698 < (int)(float)(v647 * 255.0);
  v765 = v699 < (int)v706;
  v762 = v696 < v711;
  v763 = v697 < (int)(float)(v668 * 255.0);
  v1265 = v701 < (int)(float)(v647 * 255.0);
  v1261 = v698 < (int)v704;
  v1263 = v699 < v711;
  v1257 = v697 < (int)v705;
  v761 = v695 < v680;
  v760 = v676 < v686;
  v759 = v694 < v1280;
  v758 = v693 < v1267;
  v757 = v692 < v1277;
  v756 = v695 < v1267;
  v754 = v694 < v1279;
  v755 = v676 < v1277;
  v752 = v692 < v686;
  v753 = v693 < v680;
  v751 = v695 < v1276;
  v750 = v676 < v1274;
  v749 = v694 < v1245;
  v748 = v693 < v710;
  v747 = v692 < v1272;
  v813 = v695 < v710;
  v808 = v676 < v1272;
  v806 = v694 < v1269;
  v800 = v693 < v1276;
  v797 = v692 < v1274;
  v745 = v689 < v1239;
  v746 = v690 < v1243;
  v743 = v707 < v1241;
  v744 = v688 < v1251;
  v741 = v689 < v721;
  v742 = v690 < v1241;
  v740 = v688 < v720;
  v739 = v709 < v1251;
  v737 = v689 < (int)v705;
  v738 = v690 < (int)v704;
  v735 = v707 < (int)(float)(v647 * 255.0);
  v736 = v688 < (int)v706;
  v734 = v708 < (int)(float)(v668 * 255.0);
  v732 = v709 < v711;
  v731 = v690 < (int)(float)(v647 * 255.0);
  v728 = v688 < v711;
  v729 = v689 < (int)(float)(v668 * 255.0);
  v726 = v707 < (int)v704;
  v724 = v709 < (int)v706;
  v725 = v708 < (int)v705;
  v723 = v680 < v1276;
  v733 = v686 < v1274;
  v730 = v1267 < v710;
  v727 = v1277 < v1272;
  v1249 = v680 < v710;
  LOBYTE(v1276) = v1267 < v1276;
  LOBYTE(v1272) = v686 < v1272;
  LOBYTE(v1267) = v1251 < (int)v706;
  v1247 = v1241 < (int)(float)(v647 * 255.0);
  v722 = v720 < v711;
  LOBYTE(v1251) = v1251 < v711;
  v1259 = v1241 < (int)v704;
  v712 = (v701 > v516) | (2 * v1234) | (4 * (v699 > v516)) | (8 * (v698 > v516)) | (16 * (v697 > v516)) | (32 * (v696 > v516)) | ((v695 > v516) << 6) | ((v676 > v516) << 7);
  v1254 = (v694 > v516) | (2 * (v693 > v516)) | (4 * (v692 > v516)) | (8 * (v691 > v516)) | (16 * (v690 > v516)) | (32 * (v689 > v516)) | ((v688 > v516) << 6) | ((v707 > v516) << 7);
  LOBYTE(v1241) = (v708 > v516) | (2 * (v709 > v516)) | (4 * (v680 > v516)) | (8
                                                                                           * (v686 > v516)) | (16 * (v1280 > v516)) | (32 * ((int)(float)(v967 * 255.0) > v516)) | ((v1277 > v516) << 6) | ((v1279 > v516) << 7);
  *(_OWORD *)(a1 + 3) = 0u;
  v1237 = *(_BYTE *)(a1 + 3) | (v1243 > v516) | (2 * (v1239 > v516)) | (4 * ((int)(float)(v969 * 255.0) > v516)) | (8 * ((int)(float)(v977 * 255.0) > v516)) | (16 * (v721 > v516)) | (32 * (v720 > v516)) | (((int)(float)(v997 * 255.0) > v516) << 6) | (((int)v702 > v516) << 7);
  v1235 = *(_BYTE *)(a1 + 4) | (v1245 > v516) | (2 * (v710 > v516)) | (4 * ((int)(float)(v1021 * 255.0) > v516)) | (8 * (v1269 > v516)) | (16 * ((int)v704 > v516)) | (32 * ((int)v705 > v516)) | (((int)v706 > v516) << 6) | (((int)(float)(v647 * 255.0) > v516) << 7);
  v1232 = *(_BYTE *)(a1 + 5) | ((int)(float)(v668 * 255.0) > v516) | (2 * (v711 > v516)) | (4 * v1165) | (8 * (v701 < v699)) | (16 * (v701 < v698)) | (32 * (v701 < v697)) | ((v701 < v696) << 6) | (v1159 << 7);
  v1230 = *(_BYTE *)(a1 + 6) | v1157 | (2 * v1155) | (4 * v1153) | (8 * (v699 < v698)) | (16 * (v699 < v697)) | (32 * (v699 < v696)) | ((v698 < v697) << 6) | ((v698 < v696) << 7);
  v1228 = *(_BYTE *)(a1 + 7) | (v697 < v696) | (2 * (v695 < v676)) | (4 * (v695 < v694)) | (8 * (v695 < v693)) | (16 * (v695 < v692)) | (32 * (v695 < v691)) | ((v676 < v694) << 6) | ((v676 < v693) << 7);
  v1226 = *(_BYTE *)(a1 + 8) | (v676 < v692) | (2 * (v676 < v691)) | (4 * (v694 < v693)) | (8 * (v694 < v692)) | (16 * (v694 < v691)) | (32 * (v693 < v692)) | ((v693 < v691) << 6) | ((v692 < v691) << 7);
  v1224 = *(_BYTE *)(a1 + 9) | (v690 < v689) | (2 * (v690 < v688)) | (4 * (v690 < v707)) | (8 * (v690 < v708)) | (16 * (v690 < v709)) | (32 * (v689 < v688)) | ((v689 < v707) << 6) | ((v689 < v708) << 7);
  v1222 = *(_BYTE *)(a1 + 10) | (v689 < v709) | (2 * (v688 < v707)) | (4 * (v688 < v708)) | (8 * (v688 < v709)) | (16 * (v707 < v708)) | (32 * (v707 < v709)) | ((v708 < v709) << 6) | ((v680 < v686) << 7);
  v1220 = *(_BYTE *)(a1 + 11) | (v680 < v1280) | (2 * v1112) | (4 * (v680 < v1277)) | (8 * (v680 < v1279)) | (16 * (v686 < v1280)) | (32 * v1106) | ((v686 < v1277) << 6) | ((v686 < v1279) << 7);
  v1218 = *(_BYTE *)(a1 + 12) | v1102 | (2 * (v1280 < v1277)) | (4 * (v1280 < v1279)) | (8 * v1098) | (16 * v1095) | (32 * (v1277 < v1279)) | ((v1243 < v1239) << 6) | (v1091 << 7);
  v1216 = *(_BYTE *)(a1 + 13) | v1089 | (2 * (v1243 < v721)) | (4 * (v1243 < v720)) | (8 * v1085) | (16 * v1083) | (32 * (v1239 < v721)) | ((v1239 < v720) << 6) | (v1078 << 7);
  v1214 = *(_BYTE *)(a1 + 14) | v1076 | (2 * v1074) | (4 * v1072) | (8 * v1070) | (16 * (v721 < v720)) | (32 * v1067) | (v1064 << 6) | (v1061 << 7);
  v1212 = *(_BYTE *)(a1 + 15) | v1059 | (2 * v1057) | (4 * (v1274 < v1245)) | (8 * (v1274 < v710)) | (16 * v1052) | (32 * (v1274 < v1269)) | ((v1245 < v710) << 6) | (v1047 << 7);
  v1210 = *(_BYTE *)(a1 + 16) | (v1245 < v1269) | (2 * v1044) | (4 * (v710 < v1269)) | (8 * v1041) | (16 * ((int)v704 < (int)v705)) | (32 * ((int)v704 < (int)v706)) | (((int)v704 < (int)(float)(v647 * 255.0)) << 6) | (((int)v704 < (int)(float)(v668 * 255.0)) << 7);
  v1208 = *(_BYTE *)(a1 + 17) | ((int)v704 < v711) | (2 * ((int)v705 < (int)v706)) | (4
                                                                                                  * ((int)v705 < (int)(float)(v647 * 255.0))) | (8 * ((int)v705 < (int)(float)(v668 * 255.0))) | (16 * ((int)v705 < v711)) | (32 * ((int)v706 < (int)(float)(v647 * 255.0))) | (((int)v706 < (int)(float)(v668 * 255.0)) << 6) | (((int)v706 < v711) << 7);
  v1206 = *(_BYTE *)(a1 + 18) | ((int)(float)(v647 * 255.0) < (int)(float)(v668 * 255.0)) | (2 * ((int)(float)(v647 * 255.0) < v711)) | (4 * ((int)(float)(v668 * 255.0) < v711)) | (8 * (v695 > v701)) | (16 * (v676 > v701)) | (32 * (v694 > v701)) | ((v693 > v701) << 6) | ((v692 > v701) << 7);
  *(_OWORD *)(a1 + 19) = 0u;
  v1204 = *(_BYTE *)(a1 + 19) | (v691 > v701) | (2 * v1010) | (4 * v1008) | (8 * v1006) | (16 * v1003) | (32 * v1001) | (v999 << 6) | ((v695 > v699) << 7);
  v1202 = *(_BYTE *)(a1 + 20) | (v676 > v699) | (2 * (v694 > v699)) | (4 * (v693 > v699)) | (8 * (v692 > v699)) | (16 * (v691 > v699)) | (32 * (v695 > v698)) | ((v676 > v698) << 6) | ((v694 > v698) << 7);
  v1200 = *(_BYTE *)(a1 + 21) | (v693 > v698) | (2 * (v692 > v698)) | (4 * (v691 > v698)) | (8 * (v695 > v697)) | (16 * (v676 > v697)) | (32 * (v694 > v697)) | ((v693 > v697) << 6) | ((v692 > v697) << 7);
  v1198 = *(_BYTE *)(a1 + 22) | (v691 > v697) | (2 * (v695 > v696)) | (4 * (v676 > v696)) | (8 * (v694 > v696)) | (16 * (v693 > v696)) | (32 * (v692 > v696)) | ((v691 > v696) << 6) | ((v690 > v695) << 7);
  v1196 = *(_BYTE *)(a1 + 23) | (v689 > v695) | (2 * (v688 > v695)) | (4 * (v707 > v695)) | (8 * (v708 > v695)) | (16 * (v709 > v695)) | (32 * (v690 > v676)) | ((v689 > v676) << 6) | ((v688 > v676) << 7);
  v1194 = *(_BYTE *)(a1 + 24) | (v707 > v676) | (2 * (v708 > v676)) | (4
                                                                                                 * (v709 > v676)) | (8 * (v690 > v694)) | (16 * (v689 > v694)) | (32 * (v688 > v694)) | ((v707 > v694) << 6) | ((v708 > v694) << 7);
  v1191 = *(_BYTE *)(a1 + 25) | (v709 > v694) | (2 * (v690 > v693)) | (4 * (v689 > v693)) | (8 * (v688 > v693)) | (16 * (v707 > v693)) | (32 * (v708 > v693)) | ((v709 > v693) << 6) | ((v690 > v692) << 7);
  v1189 = *(_BYTE *)(a1 + 26) | (v689 > v692) | (2 * (v688 > v692)) | (4 * (v707 > v692)) | (8 * (v708 > v692)) | (16 * (v709 > v692)) | (32 * (v690 > v691)) | ((v689 > v691) << 6) | ((v688 > v691) << 7);
  v1187 = *(_BYTE *)(a1 + 27) | (v707 > v691) | (2 * (v708 > v691)) | (4 * (v709 > v691)) | (8
                                                                                           * (v680 > v690)) | (16 * (v686 > v690)) | (32 * (v1280 > v690)) | (v926 << 6) | ((v1277 > v690) << 7);
  v1185 = *(_BYTE *)(a1 + 28) | (v1279 > v690) | (2 * ((int)v703 > v689)) | (4 * (v686 > v689)) | (8 * (v1280 > v689)) | (16 * v919) | (32 * (v1277 > v689)) | ((v1279 > v689) << 6) | (((int)v703 > v688) << 7);
  v713 = *(_BYTE *)(a1 + 29) | (v686 > v688) | (2 * (v1280 > v688)) | (4 * v912) | (8 * (v1277 > v688)) | (16 * (v1279 > v688)) | (32 * (v680 > v707)) | ((v686 > v707) << 6) | ((v1280 > v707) << 7);
  v714 = *(_BYTE *)(a1 + 30) | v905 | (2 * (v1277 > v707)) | (4 * (v1279 > v707)) | (8 * (v680 > v708)) | (16 * (v686 > v708)) | (32 * (v1280 > v708)) | (v898 << 6) | ((v1277 > v708) << 7);
  LOBYTE(v688) = *(_BYTE *)(a1 + 31) | (v1279 > v708) | (2 * (v680 > v709)) | (4
                                                                                           * (v686 > v709)) | (8 * (v1280 > v709)) | (16 * v891) | (32 * (v1277 > v709)) | ((v1279 > v709) << 6) | ((v1243 > v680) << 7);
  LOBYTE(v689) = *(_BYTE *)(a1 + 32) | (v1239 > v680) | (2 * v885) | (4 * v883) | (8 * (v721 > (int)v703)) | (16 * (v720 > (int)v703)) | (32 * (v1243 > v686)) | ((v1239 > v686) << 6) | (v877 << 7);
  LOBYTE(v691) = *(_BYTE *)(a1 + 33) | v875 | (2 * (v721 > v686)) | (4 * (v720 > v686)) | (8 * (v1243 > v1280)) | (16 * (v1239 > v1280)) | (32 * v869) | (v867 << 6) | ((v721 > v1280) << 7);
  LOBYTE(v697) = *(_BYTE *)(a1 + 34) | (v720 > v1280) | (2 * v863) | (4 * v861) | (8 * v859) | (16 * v856) | (32 * v854) | (v852 << 6) | ((v1243 > v1277) << 7);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 35) = 0u;
  LOBYTE(v692) = *(_BYTE *)(a1 + 35) | (v1239 > v1277) | (2 * v848) | (4 * v846) | (8 * (v721 > v1277)) | (16 * (v720 > v1277)) | (32 * (v1243 > v1279)) | ((v1239 > v1279) << 6) | (v840 << 7);
  LOBYTE(v698) = *(_BYTE *)(a1 + 36) | v838 | (2 * (v721 > v1279)) | (4 * (v720 > v1279)) | (8 * v834) | (16 * (v1274 > v1243)) | (32 * (v1245 > v1243)) | ((v710 > v1243) << 6) | (v829 << 7);
  LOBYTE(v699) = *(_BYTE *)(a1 + 37) | (v1269 > v1243) | (2 * v826) | (4 * (v1274 > v1239)) | (8 * (v1245 > v1239)) | (16 * (v710 > v1239)) | (32 * v825) | ((v1269 > v1239) << 6) | (v824 << 7);
  LOBYTE(v711) = *(_BYTE *)(a1 + 38) | v823 | (2 * v822) | (4 * v821) | (8 * v820) | (16 * v819) | (32 * v818) | (v817 << 6) | (v816 << 7);
  LOBYTE(v701) = *(_BYTE *)(a1 + 39) | v815 | (2 * v814) | (4 * v812) | (8 * v811) | (16 * (v1274 > v721)) | (32 * (v1245 > v721)) | ((v710 > v721) << 6) | (v810 << 7);
  LOBYTE(v693) = *(_BYTE *)(a1 + 40) | (v1269 > v721) | (2 * v807) | (4 * (v1274 > v720)) | (8 * (v1245 > v720)) | (16 * (v710 > v720)) | (32 * v805) | ((v1269 > v720) << 6) | (v804 << 7);
  LOBYTE(v694) = *(_BYTE *)(a1 + 41) | v803 | (2 * v802) | (4 * v801) | (8 * v799) | (16 * v798) | (32
                                                                                                  * ((int)v704 > v1274)) | (((int)v705 > v1274) << 6) | (((int)v706 > v1274) << 7);
  v715 = *(_BYTE *)(a1 + 42) | ((int)(float)(v647 * 255.0) > v1274) | (2 * ((int)(float)(v668 * 255.0) > v1274)) | (4 * v796) | (8 * ((int)v704 > v1245)) | (16 * ((int)v705 > v1245)) | (32 * ((int)v706 > v1245)) | (((int)(float)(v647 * 255.0) > v1245) << 6) | (((int)(float)(v668 * 255.0) > v1245) << 7);
  LOBYTE(v679) = *(_BYTE *)(a1 + 43) | v794 | (2 * ((int)v704 > v710)) | (4 * ((int)v705 > v710)) | (8 * ((int)v706 > v710)) | (16 * ((int)(float)(v647 * 255.0) > v710)) | (32 * ((int)(float)(v668 * 255.0) > v710)) | (v793 << 6) | (v792 << 7);
  LOBYTE(v676) = *(_BYTE *)(a1 + 44) | v791 | (2 * v790) | (4 * v789) | (8 * v788) | (16 * v787) | (32
                                                                                                  * ((int)v704 > v1269)) | (((int)v705 > v1269) << 6) | (((int)v706 > v1269) << 7);
  LOBYTE(v710) = *(_BYTE *)(a1 + 45) | ((int)(float)(v647 * 255.0) > v1269) | (2 * ((int)(float)(v668 * 255.0) > v1269)) | (4 * v786) | (8 * v785) | (16 * v784) | (32 * v783) | (v782 << 6) | (v781 << 7);
  LOBYTE(v680) = *(_BYTE *)(a1 + 46) | (v696 < v709) | (2 * v780) | (4 * (v809 < v708)) | (8 * v779) | (16 * v778) | (32 * v777) | (v776 << 6) | (v775 << 7);
  LOBYTE(v686) = *(_BYTE *)(a1 + 47) | (v809 < v1239) | (2 * v774) | (4 * v773) | (8 * v772) | (16 * (v696 < v720)) | (32 * v771) | ((v809 < v721) << 6) | (v770 << 7);
  LOBYTE(v695) = *(_BYTE *)(a1 + 48) | v769 | (2 * v768) | (4 * v767) | (8 * v766) | (16 * (v809 < (int)v705)) | (32 * v765) | (v764 << 6) | (v763 << 7);
  v716 = *(_BYTE *)(a1 + 49) | v762 | (2 * v1265) | (4 * (v809 < (int)(float)(v668 * 255.0))) | (8 * v1263) | (16 * v1261) | (32 * v1257) | ((v696 < (int)v706) << 6) | (v761 << 7);
  LOBYTE(v690) = *(_BYTE *)(a1 + 50) | v760 | (2 * v759) | (4 * v758) | (8 * v757) | (16 * (v795 < v1279)) | (32 * v756) | (v755 << 6) | (v754 << 7);
  v717 = *(_BYTE *)(a1 + 51) | v753 | (2 * v752) | (4 * (v795 < v1280)) | (8 * v751) | (16 * v750) | (32 * v749) | (v748 << 6) | (v747 << 7);
  v718 = *(_BYTE *)(a1 + 52) | (v795 < v1269) | (2 * v813) | (4 * v808) | (8 * v806) | (16 * v800) | (32 * v797) | ((v795 < v1245) << 6) | (v746 << 7);
  LOBYTE(v709) = *(_BYTE *)(a1 + 53) | v745 | (2 * v744) | (4 * v743) | (8 * (v708 < v721)) | (16 * (v709 < v720)) | (32 * v742) | (v741 << 6) | (v740 << 7);
  LOBYTE(v708) = *(_BYTE *)(a1 + 54) | (v707 < v1243) | (2 * (v708 < v1239)) | (4 * v739) | (8 * v738);
  *(_BYTE *)a1 = v712;
  *(_BYTE *)(a1 + 1) = v1254;
  *(_BYTE *)(a1 + 2) = v1241;
  *(_BYTE *)(a1 + 3) = v1237;
  *(_BYTE *)(a1 + 4) = v1235;
  *(_BYTE *)(a1 + 5) = v1232;
  *(_BYTE *)(a1 + 6) = v1230;
  *(_BYTE *)(a1 + 7) = v1228;
  *(_BYTE *)(a1 + 8) = v1226;
  LOBYTE(v707) = *(_BYTE *)(a1 + 55) | v732 | (2 * v731);
  *(_BYTE *)(a1 + 9) = v1224;
  *(_BYTE *)(a1 + 10) = v1222;
  *(_BYTE *)(a1 + 11) = v1220;
  *(_BYTE *)(a1 + 12) = v1218;
  *(_BYTE *)(a1 + 13) = v1216;
  *(_BYTE *)(a1 + 14) = v1214;
  *(_BYTE *)(a1 + 15) = v1212;
  *(_BYTE *)(a1 + 16) = v1210;
  *(_BYTE *)(a1 + 17) = v1208;
  *(_BYTE *)(a1 + 18) = v1206;
  *(_BYTE *)(a1 + 19) = v1204;
  *(_BYTE *)(a1 + 20) = v1202;
  *(_BYTE *)(a1 + 21) = v1200;
  *(_BYTE *)(a1 + 22) = v1198;
  *(_BYTE *)(a1 + 23) = v1196;
  *(_BYTE *)(a1 + 24) = v1194;
  *(_BYTE *)(a1 + 25) = v1191;
  *(_BYTE *)(a1 + 26) = v1189;
  *(_BYTE *)(a1 + 27) = v1187;
  *(_BYTE *)(a1 + 28) = v1185;
  *(_BYTE *)(a1 + 29) = v713;
  *(_BYTE *)(a1 + 30) = v714;
  *(_BYTE *)(a1 + 31) = v688;
  *(_BYTE *)(a1 + 32) = v689;
  *(_BYTE *)(a1 + 33) = v691;
  *(_BYTE *)(a1 + 34) = v697;
  *(_BYTE *)(a1 + 35) = v692;
  *(_BYTE *)(a1 + 36) = v698;
  *(_BYTE *)(a1 + 37) = v699;
  *(_BYTE *)(a1 + 38) = v711;
  *(_BYTE *)(a1 + 39) = v701;
  *(_BYTE *)(a1 + 40) = v693;
  *(_BYTE *)(a1 + 41) = v694;
  *(_BYTE *)(a1 + 42) = v715;
  *(_BYTE *)(a1 + 43) = v679;
  *(_BYTE *)(a1 + 44) = v676;
  *(_BYTE *)(a1 + 45) = v710;
  *(_BYTE *)(a1 + 46) = v680;
  *(_BYTE *)(a1 + 47) = v686;
  *(_BYTE *)(a1 + 48) = v695;
  *(_BYTE *)(a1 + 49) = v716;
  *(_BYTE *)(a1 + 50) = v690;
  *(_BYTE *)(a1 + 51) = v717;
  *(_BYTE *)(a1 + 52) = v718;
  *(_BYTE *)(a1 + 53) = v709;
  *(_BYTE *)(a1 + 54) = v708 | (16 * v737) | (32 * v736) | (v735 << 6) | (v734 << 7);
  *(_BYTE *)(a1 + 55) = v707 | (4 * v729) | (8 * v728) | (16 * v726) | (32 * v725) | (v724 << 6) | (v723 << 7);
  *(_BYTE *)(a1 + 56) |= v733 | (2 * (v1280 < v1245)) | (4 * v730) | (8 * v727) | (16 * (v1279 < v1269)) | (32 * v1249) | ((_BYTE)v1272 << 6) | ((v1280 < v1269) << 7);
  *(_BYTE *)(a1 + 57) |= v1276 | (2 * (v1277 < v1274)) | (4 * (v1279 < v1245)) | (8 * (v1243 < (int)v704)) | (16 * (v1239 < (int)v705)) | (32 * v1267) | (v1247 << 6) | ((v721 < (int)(float)(v668 * 255.0)) << 7);
  *(_BYTE *)(a1 + 58) |= v722 | (2 * (v1243 < (int)(float)(v647 * 255.0))) | (4 * (v1239 < (int)(float)(v668 * 255.0))) | (8 * v1251) | (16 * v1259) | (32 * (v721 < (int)v705)) | ((v720 < (int)v706) << 6);
  return 1;
}

_QWORD *sub_20E7B6BCC(_QWORD *a1)
{
  void *v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (**v8)(_QWORD);
  BOOL v9;

  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = (void (***)(_QWORD))a1[8];
    v5 = (void *)a1[7];
    if (v4 != v3)
    {
      v6 = v4 - 18;
      v7 = v4 - 18;
      do
      {
        v8 = *v7;
        v7 -= 18;
        (*v8)(v6);
        v9 = v6 == v3;
        v6 = v7;
      }
      while (!v9);
      v5 = (void *)a1[7];
    }
    a1[8] = v3;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_20E7B6C4C(_QWORD *a1)
{
  void *v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (**v8)(_QWORD);
  BOOL v9;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void (***)(_QWORD))a1[6];
  if (v3)
  {
    v4 = (void (***)(_QWORD))a1[7];
    v5 = (void *)a1[6];
    if (v4 != v3)
    {
      v6 = v4 - 18;
      v7 = v4 - 18;
      do
      {
        v8 = *v7;
        v7 -= 18;
        (*v8)(v6);
        v9 = v6 == v3;
        v6 = v7;
      }
      while (!v9);
      v5 = (void *)a1[6];
    }
    a1[7] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_20E7B6CCC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  size_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  size_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  void **v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  std::__shared_weak_count *v65;
  _QWORD *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  char *v85;
  size_t v86;
  char *v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  size_t v92;
  unint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  char *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  size_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  void **v149;
  char *v150;
  size_t v151;
  uint64_t v152;
  size_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  void (***v167)(char *);
  void (**v168)(char *);
  unint64_t *v169;
  unint64_t v170;
  _QWORD *v171;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  char *v178;
  unint64_t v179;
  unint64_t v180;
  size_t v181;
  unint64_t v182;
  char *v183;
  size_t v184;
  unint64_t v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  unsigned __int8 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  char v201;
  void *__p;
  char *v203;
  __int128 v204;

  v2 = a1;
  v3 = (void (***)(_QWORD))a1[6];
  v171 = a1 + 6;
  v4 = (void (***)(_QWORD))a1[7];
  if (v4 != v3)
  {
    v5 = v4 - 18;
    v6 = v4 - 18;
    do
    {
      v7 = *v6;
      v6 -= 18;
      (*v7)(v5);
      v8 = v5 == v3;
      v5 = v6;
    }
    while (!v8);
  }
  v2[7] = v3;
  sub_20E7B7F98(v171, v2[3] * v2[2]);
  if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4) != 0x8E38E38E38E38E39 * ((uint64_t)(v2[8] - v2[6]) >> 4))
    sub_20E80AB8C();
  v9 = v2[2];
  if (v9)
  {
    v10 = v2[3];
    if (v10)
    {
      v175 = 0;
      v177 = v2;
      while (!v10)
      {
LABEL_10:
        if (++v175 >= v9)
          return;
      }
      v11 = 0;
      v174 = *v2 >> v175;
      v173 = v2[1] >> v175;
LABEL_14:
      v12 = v11 + v10 * v175;
      v13 = *a2;
      v14 = *a2 + 112 * v12;
      v15 = (uint64_t *)(v14 + 24);
      if (*(_QWORD *)(v14 + 24) != v174)
        sub_20E80AB60();
      v16 = v13 + 112 * v12;
      v18 = *(_QWORD *)(v16 + 40);
      v17 = (unint64_t *)(v16 + 40);
      if (v18 != v173)
        sub_20E80AB34();
      __p = 0;
      v19 = v13 + 112 * v12;
      v20 = *(_QWORD *)(v19 + 64);
      v21 = *(_QWORD *)(v19 + 72);
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = v13 + 112 * v12;
      v25 = *(_QWORD *)(v24 + 32);
      v26 = *(_BYTE *)v14;
      if (*(_BYTE *)v14)
        v27 = *v15;
      else
        v27 = 0;
      if (*(_QWORD *)(v24 + 16) + *(_QWORD *)(v24 + 8) * *v15 + v27 > v25)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v176 = v11;
      v28 = *v17;
      *(_QWORD *)&v198 = v20;
      *((_QWORD *)&v198 + 1) = v21;
      v192 = v26;
      v195 = *v15;
      v196 = *(_QWORD *)(v24 + 32);
      v197 = *v17;
      v193 = *(_QWORD *)(v24 + 8);
      v194 = *(_QWORD *)(v24 + 16);
      v201 = *(_BYTE *)(v24 + 104);
      v200 = *(_QWORD *)(v24 + 96);
      if (*v17)
      {
        if (v28 >> 61)
          sub_20E78D874();
        v29 = operator new(8 * v28);
        bzero(v29, 8 * v28);
        __p = v29;
        v30 = v177;
        v31 = 0;
        v32 = 0;
        do
        {
          *((_QWORD *)v29 + v32++) = v198 + v31;
          v31 += 2 * v25;
        }
        while (v28 != v32);
      }
      else
      {
        v30 = v177;
      }
      v34 = v30[7];
      v33 = v30[8];
      if (v34 < v33)
      {
        *(_QWORD *)v34 = &off_24C9A8A50;
        *(_BYTE *)(v34 + 8) = 0;
        *(_BYTE *)(v34 + 112) = 0;
        *(_OWORD *)(v34 + 16) = 0u;
        *(_OWORD *)(v34 + 32) = 0u;
        *(_OWORD *)(v34 + 48) = 0u;
        *(_OWORD *)(v34 + 64) = 0u;
        *(_OWORD *)(v34 + 80) = 0u;
        *(_OWORD *)(v34 + 89) = 0u;
        *(_QWORD *)(v34 + 120) = 0;
        *(_QWORD *)(v34 + 128) = 0;
        *(_QWORD *)(v34 + 136) = 0;
        if (v26)
          v35 = v195;
        else
          v35 = 0;
        if (v194 + v193 * v195 + v35 > v25)
        {
          sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
          abort();
        }
        v36 = v198;
        v199 = 0uLL;
        v37 = *(std::__shared_weak_count **)(v34 + 80);
        *(_OWORD *)(v34 + 72) = v36;
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(p_shared_owners);
          while (__stlxr(v39 - 1, p_shared_owners));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        *(_BYTE *)(v34 + 8) = v26;
        *(_QWORD *)(v34 + 32) = v195;
        *(_QWORD *)(v34 + 40) = v25;
        *(_QWORD *)(v34 + 48) = v28;
        *(_QWORD *)(v34 + 16) = v193;
        *(_QWORD *)(v34 + 24) = v194;
        *(_BYTE *)(v34 + 112) = v201;
        *(_QWORD *)(v34 + 104) = v200;
        v40 = v26 | (unint64_t)(2 * v193);
        *(_QWORD *)(v34 + 56) = v40 + v194;
        *(_QWORD *)(v34 + 64) = v40;
        v41 = *(_BYTE **)(v34 + 120);
        v42 = *(char **)(v34 + 128);
        v43 = (v42 - v41) >> 3;
        v44 = v28 - v43;
        if (v28 <= v43)
        {
          v2 = v177;
          if (v28 < v43)
            *(_QWORD *)(v34 + 128) = &v41[8 * v28];
          if (v28)
            goto LABEL_99;
        }
        else
        {
          v45 = *(_QWORD *)(v34 + 136);
          v2 = v177;
          if (v44 <= (v45 - (uint64_t)v42) >> 3)
          {
            bzero(*(void **)(v34 + 128), 8 * v44);
            *(_QWORD *)(v34 + 128) = &v42[8 * v44];
          }
          else
          {
            if (v28 >> 61)
              sub_20E78D874();
            v46 = v45 - (_QWORD)v41;
            v47 = v46 >> 2;
            if (v46 >> 2 <= v28)
              v47 = v28;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
              v47 = 0x1FFFFFFFFFFFFFFFLL;
            if (v47 >> 61)
              sub_20E78D888();
            v189 = v47;
            v48 = (char *)operator new(8 * v47);
            v49 = 8 * v44;
            v50 = v48;
            v51 = &v48[8 * v43];
            v184 = v49;
            bzero(v51, v49);
            if (v42 == v41)
            {
              v53 = v51;
              v54 = v50;
              v55 = v184;
            }
            else
            {
              v52 = v42 - 8 - v41;
              if (v52 < 0x58)
              {
                v53 = v51;
                v54 = v50;
                v55 = v184;
                goto LABEL_95;
              }
              v54 = v50;
              v53 = v51;
              v55 = v184;
              if ((unint64_t)(v41 - v50) < 0x20)
                goto LABEL_189;
              v96 = (v52 >> 3) + 1;
              v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
              v98 = &v42[-v97];
              v53 = &v51[-v97];
              v99 = &v50[8 * v43 - 16];
              v100 = v42 - 16;
              v101 = v96 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v102 = *(_OWORD *)v100;
                *((_OWORD *)v99 - 1) = *((_OWORD *)v100 - 1);
                *(_OWORD *)v99 = v102;
                v99 -= 32;
                v100 -= 32;
                v101 -= 4;
              }
              while (v101);
              v42 = v98;
              if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_189:
                do
                {
LABEL_95:
                  v103 = *((_QWORD *)v42 - 1);
                  v42 -= 8;
                  *((_QWORD *)v53 - 1) = v103;
                  v53 -= 8;
                }
                while (v42 != v41);
              }
              v42 = *(char **)(v34 + 120);
            }
            *(_QWORD *)(v34 + 120) = v53;
            *(_QWORD *)(v34 + 128) = &v51[v55];
            *(_QWORD *)(v34 + 136) = &v54[8 * v189];
            v2 = v177;
            if (v42)
              operator delete(v42);
          }
LABEL_99:
          v104 = 0;
          v105 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)(v34 + 120) + 8 * v105++) = *(_QWORD *)(v34 + 72) + v104;
            v104 += 2 * v25;
          }
          while (v28 != v105);
        }
        v106 = (char *)(v34 + 144);
        v2[7] = v34 + 144;
        goto LABEL_161;
      }
      v56 = 0x8E38E38E38E38E39 * ((uint64_t)(v34 - *v171) >> 4);
      v57 = v56 + 1;
      if (v56 + 1 > 0x1C71C71C71C71C7)
        sub_20E78D874();
      v58 = 0x8E38E38E38E38E39 * ((uint64_t)(v33 - *v171) >> 4);
      if (2 * v58 > v57)
        v57 = 2 * v58;
      if (v58 >= 0xE38E38E38E38E3)
        v59 = 0x1C71C71C71C71C7;
      else
        v59 = v57;
      if (v59)
      {
        if (v59 > 0x1C71C71C71C71C7)
          sub_20E78D888();
        v60 = (char *)operator new(144 * v59);
      }
      else
      {
        v60 = 0;
      }
      v203 = &v60[144 * v56];
      *((_QWORD *)&v204 + 1) = &v60[144 * v59];
      *(_QWORD *)v203 = &off_24C9A8A50;
      v203[112] = 0;
      *((_OWORD *)v203 + 2) = 0u;
      *((_OWORD *)v203 + 3) = 0u;
      *((_OWORD *)v203 + 4) = 0u;
      *((_OWORD *)v203 + 5) = 0u;
      *(_OWORD *)(v203 + 89) = 0u;
      *((_QWORD *)v203 + 16) = 0;
      *((_QWORD *)v203 + 17) = 0;
      v203[8] = 0;
      *((_OWORD *)v203 + 1) = 0u;
      *((_QWORD *)v203 + 15) = 0;
      v61 = (void **)(v203 + 120);
      v62 = v25;
      if (v192)
        v63 = v195;
      else
        v63 = 0;
      v190 = v60;
      if (v194 + v193 * v195 + v63 > v25)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v185 = v56;
      v64 = &v60[144 * v56];
      v65 = (std::__shared_weak_count *)*((_QWORD *)v64 + 10);
      *(_OWORD *)(v64 + 72) = v198;
      v66 = v64 + 72;
      v199 = 0uLL;
      if (v65)
      {
        v67 = (unint64_t *)&v65->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
          v62 = v196;
        }
      }
      v69 = &v190[144 * v185];
      v72 = (char *)*((_QWORD *)v69 + 16);
      v70 = v69 + 128;
      v71 = v72;
      v203[8] = v192;
      *(v70 - 13) = v194;
      *(v70 - 12) = v195;
      *(v70 - 11) = v62;
      *(v70 - 10) = v197;
      *((_QWORD *)v203 + 2) = v193;
      *(v70 - 3) = v200;
      *((_BYTE *)v70 - 16) = v201;
      v73 = v192 | (unint64_t)(2 * v193);
      *(v70 - 9) = v73 + v194;
      *(v70 - 8) = v73;
      v74 = (char *)*v61;
      v75 = v72 - (_BYTE *)*v61;
      v76 = v75 >> 3;
      v77 = v197 - (v75 >> 3);
      if (v197 <= v75 >> 3)
      {
        v2 = v177;
        if (v197 < v75 >> 3)
          *v70 = &v74[8 * v197];
        if (!v197)
          goto LABEL_112;
        goto LABEL_110;
      }
      v78 = &v190[144 * v185];
      v81 = *((_QWORD *)v78 + 17);
      v80 = v78 + 136;
      v79 = v81;
      if (v77 <= (v81 - (uint64_t)v71) >> 3)
      {
        v92 = 8 * v77;
        v93 = v62;
        v94 = v70;
        bzero(v71, v92);
        v62 = v93;
        *v94 = &v71[v92];
        v2 = v177;
LABEL_110:
        v115 = 0;
        v116 = 0;
        do
        {
          *((_QWORD *)*v61 + v116++) = *v66 + v115;
          v115 += 2 * v62;
        }
        while (v197 != v116);
LABEL_112:
        v117 = v203;
        v106 = v203 + 144;
        v118 = (char *)v2[7];
        v183 = (char *)v2[6];
        if (v118 == v183)
        {
          v2[6] = v203;
          v2[7] = v106;
          v2[8] = *((_QWORD *)&v204 + 1);
          if (v118)
            goto LABEL_160;
          goto LABEL_161;
        }
        v119 = 0;
        while (1)
        {
          v120 = v117;
          *((_QWORD *)v117 - 18) = &off_24C9A8A50;
          v117 -= 144;
          v117[8] = 0;
          v117[112] = 0;
          *((_OWORD *)v117 + 1) = 0u;
          *((_OWORD *)v117 + 2) = 0u;
          *((_OWORD *)v117 + 3) = 0u;
          *((_OWORD *)v117 + 4) = 0u;
          *((_OWORD *)v117 + 5) = 0u;
          *(_OWORD *)(v117 + 89) = 0u;
          *((_QWORD *)v117 + 15) = 0;
          *((_QWORD *)v117 + 16) = 0;
          *((_QWORD *)v117 + 17) = 0;
          v121 = *((_QWORD *)v118 - 9);
          v122 = *((_QWORD *)v118 - 8);
          if (v122)
          {
            v123 = (unint64_t *)(v122 + 8);
            do
              v124 = __ldxr(v123);
            while (__stxr(v124 + 1, v123));
          }
          v126 = *((_QWORD *)v118 - 14);
          v125 = *((_QWORD *)v118 - 13);
          v128 = *((_QWORD *)v118 - 16);
          v127 = *((_QWORD *)v118 - 15);
          v129 = *(v118 - 136);
          if (*(v118 - 136))
            v130 = *((_QWORD *)v118 - 14);
          else
            v130 = 0;
          if (v127 + v128 * v126 + v130 > v125)
          {
            sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
            abort();
          }
          v131 = *((_QWORD *)v118 - 12);
          v132 = (std::__shared_weak_count *)*((_QWORD *)v120 - 8);
          *((_QWORD *)v120 - 9) = v121;
          *((_QWORD *)v120 - 8) = v122;
          if (v132)
          {
            v133 = (unint64_t *)&v132->__shared_owners_;
            do
              v134 = __ldaxr(v133);
            while (__stlxr(v134 - 1, v133));
            if (!v134)
            {
              v187 = v125;
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
              v125 = v187;
            }
          }
          *(v120 - 136) = v129;
          *((_QWORD *)v120 - 14) = v126;
          *((_QWORD *)v120 - 13) = v125;
          *((_QWORD *)v120 - 12) = v131;
          *((_QWORD *)v120 - 16) = v128;
          *((_QWORD *)v120 - 15) = v127;
          v135 = *((_QWORD *)v118 - 5);
          *(v120 - 32) = *(v118 - 32);
          *((_QWORD *)v120 - 5) = v135;
          v136 = v129 | (2 * v128);
          *((_QWORD *)v120 - 11) = v136 + v127;
          *((_QWORD *)v120 - 10) = v136;
          v137 = (_BYTE *)*((_QWORD *)v120 - 3);
          v138 = (char *)*((_QWORD *)v120 - 2);
          v139 = (v138 - v137) >> 3;
          v140 = v131 - v139;
          if (v131 <= v139)
          {
            if (v131 < v139)
              *((_QWORD *)v120 - 2) = &v137[8 * v131];
            if (!v131)
              goto LABEL_114;
            goto LABEL_152;
          }
          v141 = *((_QWORD *)v120 - 1);
          if (v140 <= (v141 - (uint64_t)v138) >> 3)
          {
            v152 = 8 * v140;
            v153 = 8 * v140;
            v154 = v125;
            bzero(*((void **)v120 - 2), v153);
            v125 = v154;
            *((_QWORD *)v120 - 2) = &v138[v152];
            goto LABEL_152;
          }
          if (v131 >> 61)
            sub_20E78D874();
          v142 = v141 - (_QWORD)v137;
          v143 = v142 >> 2;
          if (v142 >> 2 <= v131)
            v143 = v131;
          if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
            v143 = 0x1FFFFFFFFFFFFFFFLL;
          if (v143 >> 61)
            sub_20E78D888();
          v188 = v125;
          v179 = v143;
          v144 = (char *)operator new(8 * v143);
          v145 = 8 * v140;
          v178 = v144;
          v146 = &v144[8 * v139];
          v181 = v145;
          bzero(v146, v145);
          if (v138 != v137)
            break;
          v125 = v188;
          *((_QWORD *)v120 - 3) = v146;
          *((_QWORD *)v120 - 2) = &v146[v181];
          *((_QWORD *)v120 - 1) = &v178[8 * v179];
          if (v138)
            goto LABEL_151;
LABEL_152:
          v163 = 0;
          v164 = 0;
          do
          {
            *(_QWORD *)(*((_QWORD *)v120 - 3) + 8 * v164++) = *((_QWORD *)v120 - 9) + v163;
            v163 += 2 * v125;
          }
          while (v131 != v164);
LABEL_114:
          v118 -= 144;
          v119 -= 144;
          if (v118 == v183)
          {
            v2 = v177;
            v118 = (char *)v177[6];
            v165 = (char *)v177[7];
            v177[6] = v117;
            *(_QWORD *)&v204 = v203 + 144;
            *(_OWORD *)(v177 + 7) = v204;
            v106 = v203 + 144;
            if (v165 != v118)
            {
              v166 = v165 - 144;
              v167 = (void (***)(char *))(v165 - 144);
              do
              {
                v168 = *v167;
                v167 -= 18;
                (*v168)(v166);
                v8 = v166 == v118;
                v166 = (char *)v167;
              }
              while (!v8);
            }
            if (v118)
LABEL_160:
              operator delete(v118);
LABEL_161:
            v2[7] = v106;
            if (__p)
              operator delete(__p);
            if (*((_QWORD *)&v199 + 1))
            {
              v169 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v199 + 1) + 16))(*((_QWORD *)&v199 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v199 + 1));
              }
            }
            v11 = v176 + 1;
            v10 = v2[3];
            if (v176 + 1 >= v10)
            {
              v9 = v2[2];
              goto LABEL_10;
            }
            goto LABEL_14;
          }
        }
        v147 = v138 - 8 - v137;
        if (v147 >= 0x58)
        {
          v150 = v178;
          v148 = v146;
          v149 = (void **)(v117 + 120);
          v151 = v181;
          if ((unint64_t)(v137 - v178) >= 0x20)
          {
            v155 = (v147 >> 3) + 1;
            v156 = 8 * (v155 & 0x3FFFFFFFFFFFFFFCLL);
            v157 = &v138[-v156];
            v148 = &v146[-v156];
            v158 = &v178[8 * v139 - 16];
            v159 = v138 - 16;
            v160 = v155 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v161 = *(_OWORD *)v159;
              *((_OWORD *)v158 - 1) = *((_OWORD *)v159 - 1);
              *(_OWORD *)v158 = v161;
              v158 -= 32;
              v159 -= 32;
              v160 -= 4;
            }
            while (v160);
            v138 = v157;
            if (v155 == (v155 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_150:
              v138 = (char *)*v149;
              v125 = v188;
              *((_QWORD *)v120 - 3) = v148;
              *((_QWORD *)v120 - 2) = &v146[v151];
              *((_QWORD *)v120 - 1) = &v150[8 * v179];
              if (!v138)
                goto LABEL_152;
LABEL_151:
              operator delete(v138);
              v125 = v188;
              goto LABEL_152;
            }
          }
        }
        else
        {
          v148 = v146;
          v149 = (void **)(v117 + 120);
          v150 = v178;
          v151 = v181;
        }
        do
        {
          v162 = *((_QWORD *)v138 - 1);
          v138 -= 8;
          *((_QWORD *)v148 - 1) = v162;
          v148 -= 8;
        }
        while (v138 != v137);
        goto LABEL_150;
      }
      if (v197 >> 61)
        sub_20E78D874();
      v182 = v62;
      v82 = v79 - (_QWORD)v74;
      v83 = v82 >> 2;
      if (v82 >> 2 <= v197)
        v83 = v197;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
        v83 = 0x1FFFFFFFFFFFFFFFLL;
      if (v83 >> 61)
        sub_20E78D888();
      v84 = v70;
      v180 = v83;
      v85 = (char *)operator new(8 * v83);
      v86 = 8 * v77;
      v186 = v85;
      v191 = 8 * v77;
      v87 = &v85[8 * v76];
      bzero(v87, v86);
      if (v71 == v74)
      {
        v89 = v87;
        v95 = v180;
        v62 = v182;
        v90 = v186;
        v91 = v191;
        goto LABEL_108;
      }
      v88 = v71 - 8 - v74;
      v62 = v182;
      if (v88 >= 0x58)
      {
        v90 = v186;
        v91 = v191;
        v89 = v87;
        if ((unint64_t)(&v71[-v75] - v186) >= 0x20)
        {
          v107 = (v88 >> 3) + 1;
          v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
          v109 = &v71[-v108];
          v89 = &v87[-v108];
          v110 = &v186[8 * v76 - 16];
          v111 = v71 - 16;
          v112 = v107 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v113 = *(_OWORD *)v111;
            *((_OWORD *)v110 - 1) = *((_OWORD *)v111 - 1);
            *(_OWORD *)v110 = v113;
            v110 -= 32;
            v111 -= 32;
            v112 -= 4;
          }
          while (v112);
          v71 = v109;
          if (v107 == (v107 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_107;
        }
      }
      else
      {
        v89 = v87;
        v90 = v186;
        v91 = v191;
      }
      do
      {
        v114 = *((_QWORD *)v71 - 1);
        v71 -= 8;
        *((_QWORD *)v89 - 1) = v114;
        v89 -= 8;
      }
      while (v71 != v74);
LABEL_107:
      v71 = (char *)*v61;
      v95 = v180;
LABEL_108:
      *v61 = v89;
      *v84 = &v87[v91];
      *v80 = &v90[8 * v95];
      v2 = v177;
      if (v71)
      {
        operator delete(v71);
        v62 = v182;
      }
      goto LABEL_110;
    }
  }
}

void sub_20E7B7F98(_QWORD *a1, unint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void (**v13)(char *);
  BOOL v14;
  __int128 v15;

  v2 = (char *)*a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0x1C71C71C71C71C8)
      sub_20E78D874();
    v4 = a1[1];
    v5 = 144 * a2;
    v6 = (char *)operator new(144 * a2);
    v7 = 0;
    v8 = &v6[v4 - (_QWORD)v2];
    *(_QWORD *)&v15 = v8;
    *((_QWORD *)&v15 + 1) = &v6[v5];
    while ((char *)(v4 + v7) != v2)
    {
      v7 -= 144;
      sub_20E7B820C((uint64_t)&v8[v7], v7 + v4);
    }
    v10 = (char *)*a1;
    v9 = (char *)a1[1];
    *a1 = &v8[v7];
    *(_OWORD *)(a1 + 1) = v15;
    if (v9 != v10)
    {
      v11 = v9 - 144;
      v12 = v9 - 144;
      do
      {
        v13 = *(void (***)(char *))v12;
        v12 -= 144;
        (*v13)(v11);
        v14 = v11 == v10;
        v11 = v12;
      }
      while (!v14);
    }
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_20E7B80F0(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24C9A8A50;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[12];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)a1[10];
      if (v6)
        goto LABEL_8;
      return a1;
    }
  }
  v6 = (std::__shared_weak_count *)a1[10];
  if (!v6)
    return a1;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t sub_20E7B81B8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 144);
    *(_QWORD *)(a1 + 16) = i - 144;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20E7B820C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24C9A8A50;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v3 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)&v10 = *(_QWORD *)(a2 + 72);
  *((_QWORD *)&v10 + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20E7B8338(a1, &v10, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(unsigned __int8 *)(a2 + 8), (uint64_t *)(a2 + 104));
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (!*((_QWORD *)&v10 + 1))
    return a1;
  v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20E7B8308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void *v8;
  va_list va;

  va_start(va, a3);
  v6 = v5;
  sub_20E7858BC((uint64_t)va);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v3 + 128) = v8;
    operator delete(v8);
  }
  sub_20E7ABA04(v4);
  _Unwind_Resume(a1);
}

void sub_20E7B8338(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t *a9)
{
  uint64_t v9;
  char v10;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a8)
    v9 = a3;
  else
    v9 = 0;
  if (a7 + a6 * a3 + v9 > a4)
    sub_20E80ABB8();
  v10 = a8;
  v17 = a8;
  v18 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v19 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v18;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = a7;
  v23 = *a9;
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a9 + 8);
  *(_QWORD *)(a1 + 104) = v23;
  v24 = v17 | (2 * a6);
  *(_QWORD *)(a1 + 56) = v24 + a7;
  *(_QWORD *)(a1 + 64) = v24;
  v25 = (*(_QWORD *)(a1 + 128) - v22) >> 3;
  if (a5 > v25)
  {
    sub_20E7A3248((void **)(a1 + 120), a5 - v25);
LABEL_15:
    v26 = 0;
    v27 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v27++) = *(_QWORD *)(a1 + 72) + v26;
      v26 += 2 * a4;
    }
    while (a5 != v27);
    return;
  }
  if (a5 < v25)
    *(_QWORD *)(a1 + 128) = v22 + 8 * a5;
  if (a5)
    goto LABEL_15;
}

void sub_20E7B8480(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24C9A8A50;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[12];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  JUMPOUT(0x212BC47D4);
}

void sub_20E7B8548(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  _BYTE *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  std::__shared_weak_count *v61;
  _QWORD *v62;
  unint64_t *v63;
  unint64_t v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  char *v80;
  size_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  size_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  size_t v137;
  char *v138;
  unint64_t v139;
  char *v140;
  void **v141;
  char *v142;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  void (***v156)(char *);
  void (**v157)(char *);
  unint64_t *v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  char *v167;
  unint64_t v168;
  unint64_t v169;
  size_t v170;
  char *v171;
  _QWORD *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned __int8 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  char v189;
  void *__p;
  char *v191;
  __int128 v192;

  v2 = a1;
  v3 = (void (***)(_QWORD))a1[6];
  v160 = a1 + 6;
  v4 = (void (***)(_QWORD))a1[7];
  if (v4 != v3)
  {
    v5 = v4 - 18;
    v6 = v4 - 18;
    do
    {
      v7 = *v6;
      v6 -= 18;
      (*v7)(v5);
      v8 = v5 == v3;
      v5 = v6;
    }
    while (!v8);
  }
  v2[7] = v3;
  sub_20E7B9820(v160, v2[3] * v2[2]);
  if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4) != 0x8E38E38E38E38E39 * ((uint64_t)(v2[8] - v2[6]) >> 4))
    sub_20E80AB8C();
  v9 = v2[2];
  if (v9)
  {
    v10 = v2[3];
    if (v10)
    {
      v164 = 0;
      v166 = v2;
      while (!v10)
      {
LABEL_10:
        if (++v164 >= v9)
          return;
      }
      v11 = 0;
      v163 = *v2 >> v164;
      v162 = v2[1] >> v164;
LABEL_14:
      v12 = v11 + v10 * v164;
      v13 = *a2;
      v14 = *a2 + 112 * v12;
      v15 = (uint64_t *)(v14 + 24);
      if (*(_QWORD *)(v14 + 24) != v163)
        sub_20E80AB60();
      v16 = v13 + 112 * v12;
      v18 = *(_QWORD *)(v16 + 40);
      v17 = (unint64_t *)(v16 + 40);
      if (v18 != v162)
        sub_20E80AB34();
      __p = 0;
      v19 = v13 + 112 * v12;
      v20 = *(_QWORD *)(v19 + 64);
      v21 = *(_QWORD *)(v19 + 72);
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = v13 + 112 * v12;
      v25 = *(_QWORD *)(v24 + 32);
      v26 = *(_BYTE *)v14;
      if (*(_BYTE *)v14)
        v27 = *v15;
      else
        v27 = 0;
      if (*(_QWORD *)(v24 + 16) + *(_QWORD *)(v24 + 8) * *v15 + v27 > v25)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v165 = v11;
      v28 = *v17;
      *(_QWORD *)&v186 = v20;
      *((_QWORD *)&v186 + 1) = v21;
      v181 = v26;
      v184 = *v15;
      v185 = *(_QWORD *)(v24 + 32);
      v182 = *(_QWORD *)(v24 + 8);
      v183 = *(_QWORD *)(v24 + 16);
      v189 = *(_BYTE *)(v24 + 104);
      v188 = *(_QWORD *)(v24 + 96);
      if (*v17)
      {
        if (v28 >> 61)
          sub_20E78D874();
        v29 = operator new(8 * v28);
        bzero(v29, 8 * v28);
        __p = v29;
        v30 = v166;
        v31 = 0;
        v32 = 0;
        do
        {
          *((_QWORD *)v29 + v32++) = v186 + v31;
          v31 += v25;
        }
        while (v28 != v32);
      }
      else
      {
        v30 = v166;
      }
      v34 = v30[7];
      v33 = v30[8];
      if (v34 < v33)
      {
        *(_QWORD *)v34 = &off_24C9A8A80;
        *(_BYTE *)(v34 + 8) = 0;
        *(_BYTE *)(v34 + 112) = 0;
        *(_OWORD *)(v34 + 16) = 0u;
        *(_OWORD *)(v34 + 32) = 0u;
        *(_OWORD *)(v34 + 48) = 0u;
        *(_OWORD *)(v34 + 64) = 0u;
        *(_OWORD *)(v34 + 80) = 0u;
        *(_OWORD *)(v34 + 89) = 0u;
        *(_QWORD *)(v34 + 120) = 0;
        *(_QWORD *)(v34 + 128) = 0;
        *(_QWORD *)(v34 + 136) = 0;
        if (v26)
          v35 = v184;
        else
          v35 = 0;
        if (v183 + v182 * v184 + v35 > v25)
        {
          sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
          abort();
        }
        v36 = v186;
        v187 = 0uLL;
        v37 = *(std::__shared_weak_count **)(v34 + 80);
        *(_OWORD *)(v34 + 72) = v36;
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(p_shared_owners);
          while (__stlxr(v39 - 1, p_shared_owners));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        *(_BYTE *)(v34 + 8) = v26;
        *(_QWORD *)(v34 + 32) = v184;
        *(_QWORD *)(v34 + 40) = v25;
        *(_QWORD *)(v34 + 48) = v28;
        *(_QWORD *)(v34 + 16) = v182;
        *(_QWORD *)(v34 + 24) = v183;
        *(_BYTE *)(v34 + 112) = v189;
        *(_QWORD *)(v34 + 104) = v188;
        *(_QWORD *)(v34 + 56) = v182 + v26 + v183;
        *(_QWORD *)(v34 + 64) = v182 + v26;
        v40 = *(_BYTE **)(v34 + 120);
        v41 = *(char **)(v34 + 128);
        v42 = (v41 - v40) >> 3;
        v43 = v28 - v42;
        if (v28 <= v42)
        {
          if (v28 < v42)
            *(_QWORD *)(v34 + 128) = &v40[8 * v28];
          v2 = v166;
          if (v28)
            goto LABEL_100;
        }
        else
        {
          v44 = *(_QWORD *)(v34 + 136);
          if (v43 <= (v44 - (uint64_t)v41) >> 3)
          {
            bzero(*(void **)(v34 + 128), 8 * v43);
            *(_QWORD *)(v34 + 128) = &v41[8 * v43];
            v2 = v166;
          }
          else
          {
            if (v28 >> 61)
              sub_20E78D874();
            v45 = v44 - (_QWORD)v40;
            v46 = v45 >> 2;
            if (v45 >> 2 <= v28)
              v46 = v28;
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
              v46 = 0x1FFFFFFFFFFFFFFFLL;
            if (v46 >> 61)
              sub_20E78D888();
            v177 = v46;
            v171 = (char *)operator new(8 * v46);
            v174 = 8 * v43;
            v47 = &v171[8 * v42];
            bzero(v47, 8 * v43);
            if (v41 == v40)
            {
              v2 = v166;
              *(_QWORD *)(v34 + 120) = v47;
              *(_QWORD *)(v34 + 128) = &v47[v174];
              *(_QWORD *)(v34 + 136) = &v171[8 * v177];
              if (v41)
                goto LABEL_99;
            }
            else
            {
              v48 = v41 - 8 - v40;
              v2 = v166;
              if (v48 < 0x58)
              {
                v49 = &v171[8 * v42];
                v50 = v171;
                v51 = v174;
                goto LABEL_97;
              }
              v50 = v171;
              v51 = v174;
              v49 = &v171[8 * v42];
              if ((unint64_t)(v40 - v171) < 0x20)
                goto LABEL_189;
              v89 = (v48 >> 3) + 1;
              v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
              v91 = &v41[-v90];
              v49 = &v47[-v90];
              v92 = &v171[8 * v42 - 16];
              v93 = v41 - 16;
              v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v95 = *(_OWORD *)v93;
                *((_OWORD *)v92 - 1) = *((_OWORD *)v93 - 1);
                *(_OWORD *)v92 = v95;
                v92 -= 32;
                v93 -= 32;
                v94 -= 4;
              }
              while (v94);
              v41 = v91;
              if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_189:
                do
                {
LABEL_97:
                  v96 = *((_QWORD *)v41 - 1);
                  v41 -= 8;
                  *((_QWORD *)v49 - 1) = v96;
                  v49 -= 8;
                }
                while (v41 != v40);
              }
              v41 = *(char **)(v34 + 120);
              *(_QWORD *)(v34 + 120) = v49;
              *(_QWORD *)(v34 + 128) = &v47[v51];
              *(_QWORD *)(v34 + 136) = &v50[8 * v177];
              if (v41)
LABEL_99:
                operator delete(v41);
            }
          }
LABEL_100:
          v97 = 0;
          v98 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)(v34 + 120) + 8 * v98++) = *(_QWORD *)(v34 + 72) + v97;
            v97 += v25;
          }
          while (v28 != v98);
        }
        v99 = (char *)(v34 + 144);
        v2[7] = v34 + 144;
        goto LABEL_161;
      }
      v52 = 0x8E38E38E38E38E39 * ((uint64_t)(v34 - *v160) >> 4);
      v53 = v52 + 1;
      if (v52 + 1 > 0x1C71C71C71C71C7)
        sub_20E78D874();
      v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v33 - *v160) >> 4);
      if (2 * v54 > v53)
        v53 = 2 * v54;
      if (v54 >= 0xE38E38E38E38E3)
        v55 = 0x1C71C71C71C71C7;
      else
        v55 = v53;
      if (v55)
      {
        if (v55 > 0x1C71C71C71C71C7)
          sub_20E78D888();
        v56 = (char *)operator new(144 * v55);
      }
      else
      {
        v56 = 0;
      }
      v191 = &v56[144 * v52];
      *((_QWORD *)&v192 + 1) = &v56[144 * v55];
      *(_QWORD *)v191 = &off_24C9A8A80;
      v191[112] = 0;
      *((_OWORD *)v191 + 2) = 0u;
      *((_OWORD *)v191 + 3) = 0u;
      *((_OWORD *)v191 + 4) = 0u;
      *((_OWORD *)v191 + 5) = 0u;
      *(_OWORD *)(v191 + 89) = 0u;
      *((_QWORD *)v191 + 16) = 0;
      *((_QWORD *)v191 + 17) = 0;
      v191[8] = 0;
      *((_OWORD *)v191 + 1) = 0u;
      *((_QWORD *)v191 + 15) = 0;
      v57 = (void **)(v191 + 120);
      v58 = v183;
      if (v181)
        v59 = v184;
      else
        v59 = 0;
      if (v183 + v182 * v184 + v59 > v185)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v175 = v56;
      v178 = v52;
      v60 = &v56[144 * v52];
      v61 = (std::__shared_weak_count *)*((_QWORD *)v60 + 10);
      *(_OWORD *)(v60 + 72) = v186;
      v62 = v60 + 72;
      v187 = 0uLL;
      if (v61)
      {
        v63 = (unint64_t *)&v61->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
          v58 = v183;
        }
      }
      v65 = &v175[144 * v178];
      v68 = (char *)*((_QWORD *)v65 + 16);
      v66 = v65 + 128;
      v67 = v68;
      v191[8] = v181;
      *(v66 - 13) = v58;
      *(v66 - 12) = v184;
      *(v66 - 11) = v185;
      *(v66 - 10) = v28;
      *((_QWORD *)v191 + 2) = v182;
      *(v66 - 3) = v188;
      *((_BYTE *)v66 - 16) = v189;
      *(v66 - 9) = v182 + v181 + v58;
      *(v66 - 8) = v182 + v181;
      v69 = (char *)*v57;
      v70 = v68 - (_BYTE *)*v57;
      v71 = v70 >> 3;
      v72 = v28 - (v70 >> 3);
      if (v28 <= v70 >> 3)
      {
        if (v28 < v70 >> 3)
          *v66 = &v69[8 * v28];
        if (!v28)
          goto LABEL_112;
        goto LABEL_110;
      }
      v73 = &v175[144 * v178];
      v76 = *((_QWORD *)v73 + 17);
      v75 = v73 + 136;
      v74 = v76;
      if (v72 <= (v76 - (uint64_t)v67) >> 3)
      {
        v87 = 8 * v72;
        v88 = v66;
        bzero(v67, v87);
        *v88 = &v67[v87];
        goto LABEL_110;
      }
      if (v28 >> 61)
        sub_20E78D874();
      v172 = v75;
      v77 = v74 - (_QWORD)v69;
      v78 = v77 >> 2;
      if (v77 >> 2 <= v28)
        v78 = v28;
      if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
        v78 = 0x1FFFFFFFFFFFFFFFLL;
      if (v78 >> 61)
        sub_20E78D888();
      v79 = v66;
      v169 = v78;
      v80 = (char *)operator new(8 * v78);
      v81 = 8 * v72;
      v176 = v80;
      v179 = 8 * v72;
      v82 = &v80[8 * v71];
      bzero(v82, v81);
      if (v67 == v69)
      {
        *v57 = v82;
        *v79 = &v82[v179];
        *v172 = &v176[8 * v169];
        if (!v67)
        {
LABEL_110:
          v108 = 0;
          v109 = 0;
          do
          {
            *((_QWORD *)*v57 + v109++) = *v62 + v108;
            v108 += v185;
          }
          while (v28 != v109);
LABEL_112:
          v99 = v191 + 144;
          v2 = v166;
          v110 = (char *)v166[7];
          v173 = (char *)v166[6];
          if (v110 == v173)
          {
            v166[6] = v191;
            v166[7] = v99;
            v166[8] = *((_QWORD *)&v192 + 1);
            if (v110)
              goto LABEL_160;
            goto LABEL_161;
          }
          v111 = 0;
          v112 = v191;
          while (1)
          {
            v113 = v112;
            *((_QWORD *)v112 - 18) = &off_24C9A8A80;
            v112 -= 144;
            v112[8] = 0;
            v112[112] = 0;
            *((_OWORD *)v112 + 1) = 0u;
            *((_OWORD *)v112 + 2) = 0u;
            *((_OWORD *)v112 + 3) = 0u;
            *((_OWORD *)v112 + 4) = 0u;
            *((_OWORD *)v112 + 5) = 0u;
            *(_OWORD *)(v112 + 89) = 0u;
            *((_QWORD *)v112 + 15) = 0;
            *((_QWORD *)v112 + 16) = 0;
            *((_QWORD *)v112 + 17) = 0;
            v114 = *((_QWORD *)v110 - 9);
            v115 = *((_QWORD *)v110 - 8);
            if (v115)
            {
              v116 = (unint64_t *)(v115 + 8);
              do
                v117 = __ldxr(v116);
              while (__stxr(v117 + 1, v116));
            }
            v119 = *((_QWORD *)v110 - 14);
            v118 = *((_QWORD *)v110 - 13);
            v121 = *((_QWORD *)v110 - 16);
            v120 = *((_QWORD *)v110 - 15);
            v122 = *(v110 - 136);
            if (*(v110 - 136))
              v123 = *((_QWORD *)v110 - 14);
            else
              v123 = 0;
            if (v120 + v121 * v119 + v123 > v118)
            {
              sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
              abort();
            }
            v180 = v111;
            v124 = *((_QWORD *)v110 - 12);
            v125 = (std::__shared_weak_count *)*((_QWORD *)v113 - 8);
            *((_QWORD *)v113 - 9) = v114;
            *((_QWORD *)v113 - 8) = v115;
            if (v125)
            {
              v126 = (unint64_t *)&v125->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            *(v113 - 136) = v122;
            *((_QWORD *)v113 - 14) = v119;
            *((_QWORD *)v113 - 13) = v118;
            *((_QWORD *)v113 - 12) = v124;
            *((_QWORD *)v113 - 16) = v121;
            *((_QWORD *)v113 - 15) = v120;
            v128 = *((_QWORD *)v110 - 5);
            *(v113 - 32) = *(v110 - 32);
            *((_QWORD *)v113 - 5) = v128;
            *((_QWORD *)v113 - 11) = v121 + v122 + v120;
            *((_QWORD *)v113 - 10) = v121 + v122;
            v129 = (_BYTE *)*((_QWORD *)v113 - 3);
            v130 = (char *)*((_QWORD *)v113 - 2);
            v131 = (v130 - v129) >> 3;
            v132 = v124 - v131;
            if (v124 <= v131)
            {
              if (v124 < v131)
                *((_QWORD *)v113 - 2) = &v129[8 * v124];
              if (!v124)
                goto LABEL_114;
              goto LABEL_152;
            }
            v133 = *((_QWORD *)v113 - 1);
            if (v132 <= (v133 - (uint64_t)v130) >> 3)
            {
              bzero(*((void **)v113 - 2), 8 * v132);
              *((_QWORD *)v113 - 2) = &v130[8 * v132];
              goto LABEL_152;
            }
            if (v124 >> 61)
              sub_20E78D874();
            v134 = v133 - (_QWORD)v129;
            v135 = v134 >> 2;
            if (v134 >> 2 <= v124)
              v135 = v124;
            if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
              v135 = 0x1FFFFFFFFFFFFFFFLL;
            if (v135 >> 61)
              sub_20E78D888();
            v168 = v135;
            v136 = (char *)operator new(8 * v135);
            v137 = 8 * v132;
            v167 = v136;
            v138 = &v136[8 * v131];
            v170 = v137;
            bzero(v138, v137);
            if (v130 != v129)
              break;
            *((_QWORD *)v113 - 3) = v138;
            *((_QWORD *)v113 - 2) = &v138[v170];
            *((_QWORD *)v113 - 1) = &v167[8 * v168];
            if (v130)
              goto LABEL_151;
LABEL_152:
            v152 = 0;
            v153 = 0;
            do
            {
              *(_QWORD *)(*((_QWORD *)v113 - 3) + 8 * v153++) = *((_QWORD *)v113 - 9) + v152;
              v152 += v118;
            }
            while (v124 != v153);
LABEL_114:
            v110 -= 144;
            v111 = v180 - 144;
            if (v110 == v173)
            {
              v110 = (char *)v166[6];
              v154 = (char *)v166[7];
              v166[6] = v112;
              v2 = v166;
              *(_QWORD *)&v192 = v191 + 144;
              *(_OWORD *)(v166 + 7) = v192;
              v99 = v191 + 144;
              if (v154 != v110)
              {
                v155 = v154 - 144;
                v156 = (void (***)(char *))(v154 - 144);
                do
                {
                  v157 = *v156;
                  v156 -= 18;
                  (*v157)(v155);
                  v8 = v155 == v110;
                  v155 = (char *)v156;
                }
                while (!v8);
              }
              if (v110)
LABEL_160:
                operator delete(v110);
LABEL_161:
              v2[7] = v99;
              if (__p)
                operator delete(__p);
              if (*((_QWORD *)&v187 + 1))
              {
                v158 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
                do
                  v159 = __ldaxr(v158);
                while (__stlxr(v159 - 1, v158));
                if (!v159)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v187 + 1) + 16))(*((_QWORD *)&v187 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v187 + 1));
                }
              }
              v11 = v165 + 1;
              v10 = v2[3];
              if (v165 + 1 >= v10)
              {
                v9 = v2[2];
                goto LABEL_10;
              }
              goto LABEL_14;
            }
          }
          v139 = v130 - 8 - v129;
          if (v139 >= 0x58)
          {
            v142 = v167;
            v140 = v138;
            v141 = (void **)(v112 + 120);
            v143 = v170;
            if ((unint64_t)(v129 - v167) >= 0x20)
            {
              v144 = (v139 >> 3) + 1;
              v145 = 8 * (v144 & 0x3FFFFFFFFFFFFFFCLL);
              v146 = &v130[-v145];
              v140 = &v138[-v145];
              v147 = &v167[8 * v131 - 16];
              v148 = v130 - 16;
              v149 = v144 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v150 = *(_OWORD *)v148;
                *((_OWORD *)v147 - 1) = *((_OWORD *)v148 - 1);
                *(_OWORD *)v147 = v150;
                v147 -= 32;
                v148 -= 32;
                v149 -= 4;
              }
              while (v149);
              v130 = v146;
              if (v144 == (v144 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_150:
                v130 = (char *)*v141;
                *((_QWORD *)v113 - 3) = v140;
                *((_QWORD *)v113 - 2) = &v138[v143];
                *((_QWORD *)v113 - 1) = &v142[8 * v168];
                if (!v130)
                  goto LABEL_152;
LABEL_151:
                operator delete(v130);
                goto LABEL_152;
              }
            }
          }
          else
          {
            v140 = v138;
            v141 = (void **)(v112 + 120);
            v142 = v167;
            v143 = v170;
          }
          do
          {
            v151 = *((_QWORD *)v130 - 1);
            v130 -= 8;
            *((_QWORD *)v140 - 1) = v151;
            v140 -= 8;
          }
          while (v130 != v129);
          goto LABEL_150;
        }
LABEL_109:
        operator delete(v67);
        goto LABEL_110;
      }
      v83 = v67 - 8 - v69;
      if (v83 >= 0x58)
      {
        v86 = v176;
        v85 = v179;
        v84 = v82;
        if ((unint64_t)(&v67[-v70] - v176) >= 0x20)
        {
          v100 = (v83 >> 3) + 1;
          v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
          v102 = &v67[-v101];
          v84 = &v82[-v101];
          v103 = &v176[8 * v71 - 16];
          v104 = v67 - 16;
          v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v106 = *(_OWORD *)v104;
            *((_OWORD *)v103 - 1) = *((_OWORD *)v104 - 1);
            *(_OWORD *)v103 = v106;
            v103 -= 32;
            v104 -= 32;
            v105 -= 4;
          }
          while (v105);
          v67 = v102;
          if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_108:
            v67 = (char *)*v57;
            *v57 = v84;
            *v79 = &v82[v85];
            *v172 = &v86[8 * v169];
            if (!v67)
              goto LABEL_110;
            goto LABEL_109;
          }
        }
      }
      else
      {
        v84 = v82;
        v86 = v176;
        v85 = v179;
      }
      do
      {
        v107 = *((_QWORD *)v67 - 1);
        v67 -= 8;
        *((_QWORD *)v84 - 1) = v107;
        v84 -= 8;
      }
      while (v67 != v69);
      goto LABEL_108;
    }
  }
}

void sub_20E7B9820(_QWORD *a1, unint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void (**v13)(char *);
  BOOL v14;
  __int128 v15;

  v2 = (char *)*a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0x1C71C71C71C71C8)
      sub_20E78D874();
    v4 = a1[1];
    v5 = 144 * a2;
    v6 = (char *)operator new(144 * a2);
    v7 = 0;
    v8 = &v6[v4 - (_QWORD)v2];
    *(_QWORD *)&v15 = v8;
    *((_QWORD *)&v15 + 1) = &v6[v5];
    while ((char *)(v4 + v7) != v2)
    {
      v7 -= 144;
      sub_20E7B9A40((uint64_t)&v8[v7], v7 + v4);
    }
    v10 = (char *)*a1;
    v9 = (char *)a1[1];
    *a1 = &v8[v7];
    *(_OWORD *)(a1 + 1) = v15;
    if (v9 != v10)
    {
      v11 = v9 - 144;
      v12 = v9 - 144;
      do
      {
        v13 = *(void (***)(char *))v12;
        v12 -= 144;
        (*v13)(v11);
        v14 = v11 == v10;
        v11 = v12;
      }
      while (!v14);
    }
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_20E7B9978(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24C9A8A80;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[12];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)a1[10];
      if (v6)
        goto LABEL_8;
      return a1;
    }
  }
  v6 = (std::__shared_weak_count *)a1[10];
  if (!v6)
    return a1;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t sub_20E7B9A40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_24C9A8A80;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v3 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)&v10 = *(_QWORD *)(a2 + 72);
  *((_QWORD *)&v10 + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_20E7B9B6C(a1, &v10, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(unsigned __int8 *)(a2 + 8), (uint64_t *)(a2 + 104));
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (!*((_QWORD *)&v10 + 1))
    return a1;
  v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20E7B9B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void *v8;
  va_list va;

  va_start(va, a3);
  v6 = v5;
  sub_20E7858BC((uint64_t)va);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v3 + 128) = v8;
    operator delete(v8);
  }
  sub_20E7ABA04(v4);
  _Unwind_Resume(a1);
}

void sub_20E7B9B6C(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t *a9)
{
  uint64_t v9;
  char v10;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a8)
    v9 = a3;
  else
    v9 = 0;
  if (a7 + a6 * a3 + v9 > a4)
    sub_20E80ABB8();
  v10 = a8;
  v17 = a8;
  v18 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v19 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v18;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = a7;
  v23 = *a9;
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a9 + 8);
  *(_QWORD *)(a1 + 104) = v23;
  *(_QWORD *)(a1 + 56) = v17 + a6 + a7;
  *(_QWORD *)(a1 + 64) = v17 + a6;
  v24 = (*(_QWORD *)(a1 + 128) - v22) >> 3;
  if (a5 > v24)
  {
    sub_20E7A3248((void **)(a1 + 120), a5 - v24);
LABEL_15:
    v25 = 0;
    v26 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v26++) = *(_QWORD *)(a1 + 72) + v25;
      v25 += a4;
    }
    while (a5 != v26);
    return;
  }
  if (a5 < v24)
    *(_QWORD *)(a1 + 128) = v22 + 8 * a5;
  if (a5)
    goto LABEL_15;
}

void sub_20E7B9CB0(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24C9A8A80;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[12];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  JUMPOUT(0x212BC47D4);
}

double sub_20E7B9D78(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  __n128 *v10;
  float *v11;
  float *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 *v17;
  float v18;
  float *v19;
  float v20;
  __n128 v21;
  __int128 v22;
  float v23;
  float *v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __int128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __int128 *v39;
  unint64_t v40;
  float *v41;
  float v42;
  float v43;
  float *v44;
  float v45;
  __int128 v46;
  __int128 v47;
  __n128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __n128 v55;
  __int128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __n128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 *v67;
  unint64_t v68;
  float *v69;
  float v70;
  float v71;
  float *v72;
  float v73;
  __int128 v74;
  __int128 v75;
  __n128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __n128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __n128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  float v91;
  float v92;
  __int128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  uint64_t v100;
  float v101;
  unint64_t v102;
  float *v103;
  float *v104;
  float v105;
  float *v106;
  float v107;
  float *v108;
  __int128 v109;
  __int128 v110;
  float v111;
  float v112;
  __n128 *v113;
  __n128 v114;
  __int128 v115;
  BOOL v116;
  __n128 v117;
  unint64_t v118;
  float v119;
  unint64_t v120;
  float v121;
  float *v122;
  float *v123;
  float v124;
  __int128 v125;
  __int128 v126;
  float v127;
  float v128;
  __n128 *v129;
  __n128 v130;
  __int128 v131;
  __int128 v132;
  unint64_t v133;
  float v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  __n128 v138;
  __n128 *v139;
  float v140;
  float v141;
  __int128 v142;
  float *v143;
  BOOL v145;
  uint64_t v146;
  float *v147;
  uint64_t v148;
  float v149;
  uint64_t v150;
  float *v151;
  __int128 v152;
  __int128 v153;
  __n128 v154;
  __int128 v155;
  __int128 v156;
  __n128 v157;
  __int128 v158;
  __int128 v159;
  float v160;
  float *v161;
  __int128 v162;
  float v163;
  __int128 v164;
  __n128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __n128 v169;
  __int128 v170;
  __int128 v171;
  __n128 v172;
  __int128 v173;
  __int128 v174;
  __n128 v175;
  __int128 v176;
  __int128 v177;
  __n128 v180;
  __n128 v181;
  _BYTE v182[28];
  _BYTE v183[28];
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __int128 v193;
  __n128 v194;
  __int128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  __int128 v206;
  __n128 v207;
  __int128 v208;
  __n128 v209;
  __n128 v210;
  __n128 v211;
  __n128 v212;
  __n128 v213;
  __n128 v214;
  __n128 v215;
  __int128 v216;
  __n128 v217;
  __n128 v218;
  __int128 v219;
  __int128 v220;
  __n128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __n128 v228;
  __n128 v229;
  __n128 v230;
  __n128 v231;
  __n128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  _BYTE v238[28];
  __int128 v239;
  __int128 v240;
  _BYTE v241[28];
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __n128 v246;
  __n128 v247;
  __n128 v248;
  __n128 v249;
  __n128 v250;
  __n128 v251;
  __n128 v252;
  __n128 v253;
  __n128 v254;
  __n128 v255;
  __n128 v256;
  __n128 v257;
  __n128 v258;
  __n128 v259;
  __n128 v260;
  __n128 v261;
  __n128 v262;
  __n128 v263;
  __n128 v264;
  __n128 v265;
  __n128 v266;
  __n128 v267;
  __n128 v268;
  __n128 v269;
  __n128 v270;
  __n128 v271;

LABEL_1:
  v10 = (__n128 *)(a2 - 12);
  v11 = a2 - 24;
  v12 = a2 - 36;
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (uint64_t)a2 - v13;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return a6.n128_f64[0];
      case 2uLL:
        a6.n128_f32[0] = *(a2 - 1);
        if (a6.n128_f32[0] > *(float *)(v13 + 44))
        {
          v235 = *(_OWORD *)(v13 + 16);
          v265 = *(__n128 *)(v13 + 32);
          v203 = *(__n128 *)v13;
          a6 = *(__n128 *)(a2 - 12);
          v132 = *((_OWORD *)a2 - 1);
          *(_OWORD *)(v13 + 16) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v13 + 32) = v132;
          *(__n128 *)v13 = a6;
          a6.n128_u64[0] = v203.n128_u64[0];
          *((_OWORD *)a2 - 2) = v235;
          *((__n128 *)a2 - 1) = v265;
          *((__n128 *)a2 - 3) = v203;
        }
        return a6.n128_f64[0];
      case 3uLL:
        v133 = v13 + 48;
        a6.n128_u32[0] = *(_DWORD *)(v13 + 92);
        v134 = *(a2 - 1);
        if (a6.n128_f32[0] <= *(float *)(v13 + 44))
        {
          if (v134 > a6.n128_f32[0])
          {
            a6 = *(__n128 *)v133;
            v239 = *(_OWORD *)(v13 + 64);
            v153 = *(_OWORD *)(v13 + 80);
            v154 = *v10;
            v155 = *((_OWORD *)a2 - 1);
            *(_OWORD *)(v13 + 64) = *((_OWORD *)a2 - 2);
            *(_OWORD *)(v13 + 80) = v155;
            *(__n128 *)v133 = v154;
            *((_OWORD *)a2 - 2) = v239;
            *((_OWORD *)a2 - 1) = v153;
            *v10 = a6;
            goto LABEL_147;
          }
        }
        else
        {
          if (v134 <= a6.n128_f32[0])
          {
            v242 = *(_OWORD *)(v13 + 16);
            v269 = *(__n128 *)(v13 + 32);
            v209 = *(__n128 *)v13;
            v164 = *(_OWORD *)(v13 + 64);
            *(_OWORD *)v13 = *(_OWORD *)v133;
            *(_OWORD *)(v13 + 16) = v164;
            *(_OWORD *)(v13 + 32) = *(_OWORD *)(v13 + 80);
            *(__n128 *)v133 = v209;
            *(_OWORD *)(v13 + 64) = v242;
            a6.n128_u32[1] = v269.n128_u32[1];
            *(__n128 *)(v13 + 80) = v269;
            a6.n128_f32[0] = *(a2 - 1);
            if (a6.n128_f32[0] <= *(float *)(v13 + 92))
              return a6.n128_f64[0];
            a6 = *(__n128 *)v133;
            v137 = *(_OWORD *)(v13 + 64);
            v138 = *(__n128 *)(v13 + 80);
            v165 = *v10;
            v166 = *((_OWORD *)a2 - 1);
            *(_OWORD *)(v13 + 64) = *((_OWORD *)a2 - 2);
            *(_OWORD *)(v13 + 80) = v166;
            *(__n128 *)v133 = v165;
          }
          else
          {
            v236 = *(_OWORD *)(v13 + 16);
            v266 = *(__n128 *)(v13 + 32);
            v204 = *(__n128 *)v13;
            v135 = *v10;
            v136 = *((_OWORD *)a2 - 1);
            *(_OWORD *)(v13 + 16) = *((_OWORD *)a2 - 2);
            *(_OWORD *)(v13 + 32) = v136;
            *(__n128 *)v13 = v135;
            a6 = v204;
            v137 = v236;
            v138 = v266;
          }
          *((_OWORD *)a2 - 2) = v137;
          *((__n128 *)a2 - 1) = v138;
          *v10 = a6;
        }
        return a6.n128_f64[0];
      case 4uLL:
        v133 = v13 + 48;
        v139 = (__n128 *)(v13 + 96);
        v140 = *(float *)(v13 + 92);
        v141 = *(float *)(v13 + 140);
        if (v140 <= *(float *)(v13 + 44))
        {
          if (v141 > v140)
          {
            v156 = *(_OWORD *)(v13 + 64);
            a6 = *(__n128 *)(v13 + 80);
            v157 = *(__n128 *)v133;
            v158 = *(_OWORD *)(v13 + 112);
            *(__n128 *)v133 = *v139;
            *(_OWORD *)(v13 + 64) = v158;
            *(_OWORD *)(v13 + 80) = *(_OWORD *)(v13 + 128);
            *v139 = v157;
            *(_OWORD *)(v13 + 112) = v156;
            *(__n128 *)(v13 + 128) = a6;
            if (*(float *)(v13 + 92) > *(float *)(v13 + 44))
            {
              v240 = *(_OWORD *)(v13 + 16);
              v268 = *(__n128 *)(v13 + 32);
              v207 = *(__n128 *)v13;
              v159 = *(_OWORD *)(v13 + 64);
              *(_OWORD *)v13 = *(_OWORD *)v133;
              *(_OWORD *)(v13 + 16) = v159;
              *(_OWORD *)(v13 + 32) = *(_OWORD *)(v13 + 80);
              *(__n128 *)v133 = v207;
              *(_OWORD *)(v13 + 64) = v240;
              a6.n128_u32[1] = v268.n128_u32[1];
              *(__n128 *)(v13 + 80) = v268;
            }
          }
        }
        else
        {
          if (v141 <= v140)
          {
            v243 = *(_OWORD *)(v13 + 16);
            v270 = *(__n128 *)(v13 + 32);
            v210 = *(__n128 *)v13;
            v167 = *(_OWORD *)(v13 + 64);
            *(_OWORD *)v13 = *(_OWORD *)v133;
            *(_OWORD *)(v13 + 16) = v167;
            *(_OWORD *)(v13 + 32) = *(_OWORD *)(v13 + 80);
            *(__n128 *)v133 = v210;
            *(_OWORD *)(v13 + 64) = v243;
            *(__n128 *)(v13 + 80) = v270;
            if (v141 <= *(float *)(v13 + 92))
              goto LABEL_144;
            v168 = *(_OWORD *)(v13 + 64);
            a6 = *(__n128 *)(v13 + 80);
            v169 = *(__n128 *)v133;
            v170 = *(_OWORD *)(v13 + 112);
            *(__n128 *)v133 = *v139;
            *(_OWORD *)(v13 + 64) = v170;
            *(_OWORD *)(v13 + 80) = *(_OWORD *)(v13 + 128);
            *v139 = v169;
            *(_OWORD *)(v13 + 112) = v168;
          }
          else
          {
            v237 = *(_OWORD *)(v13 + 16);
            v267 = *(__n128 *)(v13 + 32);
            v205 = *(__n128 *)v13;
            v142 = *(_OWORD *)(v13 + 112);
            *(__n128 *)v13 = *v139;
            *(_OWORD *)(v13 + 16) = v142;
            *(_OWORD *)(v13 + 32) = *(_OWORD *)(v13 + 128);
            *v139 = v205;
            *(_OWORD *)(v13 + 112) = v237;
            a6 = v267;
          }
          *(__n128 *)(v13 + 128) = a6;
        }
LABEL_144:
        a6.n128_f32[0] = *(a2 - 1);
        if (a6.n128_f32[0] > *(float *)(v13 + 140))
        {
          a6 = *v139;
          v244 = *(_OWORD *)(v13 + 112);
          v171 = *(_OWORD *)(v13 + 128);
          v172 = *v10;
          v173 = *((_OWORD *)a2 - 1);
          *(_OWORD *)(v13 + 112) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v13 + 128) = v173;
          *v139 = v172;
          *((_OWORD *)a2 - 2) = v244;
          *((_OWORD *)a2 - 1) = v171;
          *v10 = a6;
          a6.n128_u32[0] = *(_DWORD *)(v13 + 140);
          if (a6.n128_f32[0] > *(float *)(v13 + 92))
          {
            v174 = *(_OWORD *)(v13 + 64);
            a6 = *(__n128 *)(v13 + 80);
            v175 = *(__n128 *)v133;
            v176 = *(_OWORD *)(v13 + 112);
            *(__n128 *)v133 = *v139;
            *(_OWORD *)(v13 + 64) = v176;
            *(_OWORD *)(v13 + 80) = *(_OWORD *)(v13 + 128);
            *v139 = v175;
            *(_OWORD *)(v13 + 112) = v174;
            *(__n128 *)(v13 + 128) = a6;
LABEL_147:
            a6.n128_u32[0] = *(_DWORD *)(v13 + 92);
            if (a6.n128_f32[0] > *(float *)(v13 + 44))
            {
              v245 = *(_OWORD *)(v13 + 16);
              v271 = *(__n128 *)(v13 + 32);
              v211 = *(__n128 *)v13;
              v177 = *(_OWORD *)(v133 + 16);
              *(_OWORD *)v13 = *(_OWORD *)v133;
              *(_OWORD *)(v13 + 16) = v177;
              *(_OWORD *)(v13 + 32) = *(_OWORD *)(v133 + 32);
              *(__n128 *)v133 = v211;
              *(_OWORD *)(v133 + 16) = v245;
              a6.n128_u64[0] = v271.n128_u64[0];
              *(__n128 *)(v133 + 32) = v271;
            }
          }
        }
        return a6.n128_f64[0];
      case 5uLL:
        a6.n128_u64[0] = sub_20E7BB0D4(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 12), a6).n128_u64[0];
        return a6.n128_f64[0];
      default:
        if (v14 > 1151)
        {
          if (!a4)
          {
            if ((float *)v13 != a2)
              sub_20E7BB31C((float *)v13, a2, a2);
            return a6.n128_f64[0];
          }
          v16 = v15 >> 1;
          v17 = (__n128 *)(v13 + 48 * (v15 >> 1));
          v18 = *(a2 - 1);
          if ((unint64_t)v14 < 0x1801)
          {
            v23 = *(float *)(v13 + 44);
            v24 = (float *)(v13 + 44 + 48 * v16);
            if (v23 <= *v24)
            {
              if (v18 > v23)
              {
                v216 = *(_OWORD *)(v13 + 16);
                v250 = *(__n128 *)(v13 + 32);
                v188 = *(__n128 *)v13;
                v31 = *v10;
                v32 = *((_OWORD *)a2 - 1);
                *(_OWORD *)(v13 + 16) = *((_OWORD *)a2 - 2);
                *(_OWORD *)(v13 + 32) = v32;
                *(__n128 *)v13 = v31;
                a6 = v188;
                *((_OWORD *)a2 - 2) = v216;
                *((__n128 *)a2 - 1) = v250;
                *v10 = v188;
                if (*(float *)(v13 + 44) > *v24)
                {
                  v217 = v17[1];
                  v251 = v17[2];
                  v189 = *v17;
                  v33 = *(__n128 *)v13;
                  v34 = *(__n128 *)(v13 + 32);
                  v17[1] = *(__n128 *)(v13 + 16);
                  v17[2] = v34;
                  *v17 = v33;
                  a6 = v189;
                  *(__n128 *)(v13 + 16) = v217;
                  *(__n128 *)(v13 + 32) = v251;
                  *(__n128 *)v13 = v189;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v18 <= v23)
              {
                v221 = v17[1];
                v254 = v17[2];
                v192 = *v17;
                v57 = *(__n128 *)v13;
                v58 = *(__n128 *)(v13 + 32);
                v17[1] = *(__n128 *)(v13 + 16);
                v17[2] = v58;
                *v17 = v57;
                a6 = v192;
                *(__n128 *)(v13 + 16) = v221;
                *(__n128 *)(v13 + 32) = v254;
                *(__n128 *)v13 = v192;
                if (*(a2 - 1) <= *(float *)(v13 + 44))
                  goto LABEL_31;
                v213 = *(__n128 *)(v13 + 16);
                v247 = *(__n128 *)(v13 + 32);
                v185 = *(__n128 *)v13;
                v59 = *v10;
                v60 = *((_OWORD *)a2 - 1);
                *(_OWORD *)(v13 + 16) = *((_OWORD *)a2 - 2);
                *(_OWORD *)(v13 + 32) = v60;
                *(__n128 *)v13 = v59;
              }
              else
              {
                v213 = v17[1];
                v247 = v17[2];
                v185 = *v17;
                v25 = *v10;
                v26 = *(__n128 *)(a2 - 4);
                v17[1] = *(__n128 *)(a2 - 8);
                v17[2] = v26;
                *v17 = v25;
              }
              a6 = v185;
              *((__n128 *)a2 - 2) = v213;
              *((__n128 *)a2 - 1) = v247;
              *v10 = v185;
            }
LABEL_31:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            a6.n128_u32[0] = *(_DWORD *)(v13 + 44);
            if (*(float *)(v13 - 4) > a6.n128_f32[0])
              goto LABEL_56;
            *(_OWORD *)&v183[12] = *(_OWORD *)(v13 + 28);
            v181 = *(__n128 *)v13;
            *(_OWORD *)v183 = *(_OWORD *)(v13 + 16);
            if (a6.n128_f32[0] <= *(a2 - 1))
            {
              v120 = v13 + 48;
              do
              {
                v13 = v120;
                if (v120 >= (unint64_t)a2)
                  break;
                v121 = *(float *)(v120 + 44);
                v120 += 48;
              }
              while (a6.n128_f32[0] <= v121);
            }
            else
            {
              v118 = v13;
              do
              {
                v13 = v118 + 48;
                v119 = *(float *)(v118 + 92);
                v118 += 48;
              }
              while (a6.n128_f32[0] <= v119);
            }
            v122 = a2;
            if (v13 < (unint64_t)a2)
            {
              v123 = a2;
              do
              {
                v122 = v123 - 12;
                v124 = *(v123 - 1);
                v123 -= 12;
              }
              while (a6.n128_f32[0] > v124);
            }
            while (v13 < (unint64_t)v122)
            {
              v234 = *(_OWORD *)(v13 + 16);
              v264 = *(__n128 *)(v13 + 32);
              v202 = *(__n128 *)v13;
              v125 = *(_OWORD *)v122;
              v126 = *((_OWORD *)v122 + 2);
              *(_OWORD *)(v13 + 16) = *((_OWORD *)v122 + 1);
              *(_OWORD *)(v13 + 32) = v126;
              *(_OWORD *)v13 = v125;
              *((_OWORD *)v122 + 1) = v234;
              *((__n128 *)v122 + 2) = v264;
              *(__n128 *)v122 = v202;
              do
              {
                v127 = *(float *)(v13 + 92);
                v13 += 48;
              }
              while (a6.n128_f32[0] <= v127);
              do
              {
                v128 = *(v122 - 1);
                v122 -= 12;
              }
              while (a6.n128_f32[0] > v128);
            }
            v129 = (__n128 *)(v13 - 48);
            if (v13 - 48 != a1)
            {
              v130 = *v129;
              v131 = *(_OWORD *)(v13 - 16);
              *(_OWORD *)(a1 + 16) = *(_OWORD *)(v13 - 32);
              *(_OWORD *)(a1 + 32) = v131;
              *(__n128 *)a1 = v130;
            }
            a5 = 0;
            *(_OWORD *)(v13 - 20) = *(_OWORD *)&v183[12];
            *v129 = v181;
            *(_OWORD *)(v13 - 32) = *(_OWORD *)v183;
            *(_DWORD *)(v13 - 4) = a6.n128_u32[0];
            continue;
          }
          v19 = (float *)(v13 + 44 + 48 * v16);
          v20 = *v19;
          if (*v19 <= *(float *)(v13 + 44))
          {
            if (v18 > v20)
            {
              v214 = v17[1];
              v248 = v17[2];
              v186 = *v17;
              v27 = *v10;
              v28 = *(__n128 *)(a2 - 4);
              v17[1] = *(__n128 *)(a2 - 8);
              v17[2] = v28;
              *v17 = v27;
              *((__n128 *)a2 - 2) = v214;
              *((__n128 *)a2 - 1) = v248;
              *v10 = v186;
              if (*v19 > *(float *)(v13 + 44))
              {
                v215 = *(__n128 *)(v13 + 16);
                v249 = *(__n128 *)(v13 + 32);
                v187 = *(__n128 *)v13;
                v29 = *v17;
                v30 = v17[2];
                *(__n128 *)(v13 + 16) = v17[1];
                *(__n128 *)(v13 + 32) = v30;
                *(__n128 *)v13 = v29;
                v17[1] = v215;
                v17[2] = v249;
                *v17 = v187;
              }
            }
          }
          else
          {
            if (v18 <= v20)
            {
              v218 = *(__n128 *)(v13 + 16);
              v252 = *(__n128 *)(v13 + 32);
              v190 = *(__n128 *)v13;
              v35 = *v17;
              v36 = v17[2];
              *(__n128 *)(v13 + 16) = v17[1];
              *(__n128 *)(v13 + 32) = v36;
              *(__n128 *)v13 = v35;
              v17[1] = v218;
              v17[2] = v252;
              *v17 = v190;
              if (*(a2 - 1) <= *v19)
                goto LABEL_22;
              v212 = v17[1];
              v246 = v17[2];
              v184 = *v17;
              v37 = *v10;
              v38 = *(__n128 *)(a2 - 4);
              v17[1] = *(__n128 *)(a2 - 8);
              v17[2] = v38;
              *v17 = v37;
            }
            else
            {
              v212 = *(__n128 *)(v13 + 16);
              v246 = *(__n128 *)(v13 + 32);
              v184 = *(__n128 *)v13;
              v21 = *v10;
              v22 = *((_OWORD *)a2 - 1);
              *(_OWORD *)(v13 + 16) = *((_OWORD *)a2 - 2);
              *(_OWORD *)(v13 + 32) = v22;
              *(__n128 *)v13 = v21;
            }
            *((__n128 *)a2 - 2) = v212;
            *((__n128 *)a2 - 1) = v246;
            *v10 = v184;
          }
LABEL_22:
          v39 = (__int128 *)(v13 + 48);
          v40 = v13 + 48 * v16;
          v42 = *(float *)(v40 - 4);
          v41 = (float *)(v40 - 4);
          v43 = v42;
          v44 = v41 - 11;
          v45 = *(a2 - 13);
          if (v42 <= *(float *)(v13 + 92))
          {
            if (v45 > v43)
            {
              v219 = *(_OWORD *)(v41 - 7);
              v253 = *(__n128 *)(v41 - 3);
              v191 = *(__n128 *)v44;
              v51 = *(_OWORD *)v11;
              v52 = *((_OWORD *)a2 - 4);
              *(_OWORD *)(v41 - 7) = *((_OWORD *)a2 - 5);
              *(_OWORD *)(v41 - 3) = v52;
              *(_OWORD *)v44 = v51;
              *((_OWORD *)a2 - 5) = v219;
              *((__n128 *)a2 - 4) = v253;
              *(__n128 *)v11 = v191;
              if (*v41 > *(float *)(v13 + 92))
              {
                v53 = *v39;
                v220 = *(_OWORD *)(v13 + 64);
                v54 = *(_OWORD *)(v13 + 80);
                v55 = *(__n128 *)v44;
                v56 = *(_OWORD *)(v41 - 3);
                *(_OWORD *)(v13 + 64) = *(_OWORD *)(v41 - 7);
                *(_OWORD *)(v13 + 80) = v56;
                *v39 = (__int128)v55;
                *(_OWORD *)(v41 - 7) = v220;
                *(_OWORD *)(v41 - 3) = v54;
                *(_OWORD *)v44 = v53;
              }
            }
          }
          else
          {
            if (v45 <= v43)
            {
              v61 = *v39;
              v222 = *(_OWORD *)(v13 + 64);
              v62 = *(_OWORD *)(v13 + 80);
              v63 = *(__n128 *)v44;
              v64 = *(_OWORD *)(v41 - 3);
              *(_OWORD *)(v13 + 64) = *(_OWORD *)(v41 - 7);
              *(_OWORD *)(v13 + 80) = v64;
              *v39 = (__int128)v63;
              *(_OWORD *)(v41 - 7) = v222;
              *(_OWORD *)(v41 - 3) = v62;
              *(_OWORD *)v44 = v61;
              if (*(a2 - 13) <= *v41)
                goto LABEL_36;
              v223 = *(_OWORD *)(v41 - 7);
              v255 = *(__n128 *)(v41 - 3);
              v193 = *(_OWORD *)v44;
              v65 = *(_OWORD *)v11;
              v66 = *((_OWORD *)a2 - 4);
              *(_OWORD *)(v41 - 7) = *((_OWORD *)a2 - 5);
              *(_OWORD *)(v41 - 3) = v66;
              *(_OWORD *)v44 = v65;
              v46 = v193;
              v47 = v223;
              v48 = v255;
            }
            else
            {
              v46 = *v39;
              v47 = *(_OWORD *)(v13 + 64);
              v48 = *(__n128 *)(v13 + 80);
              v49 = *(_OWORD *)v11;
              v50 = *((_OWORD *)a2 - 4);
              *(_OWORD *)(v13 + 64) = *((_OWORD *)a2 - 5);
              *(_OWORD *)(v13 + 80) = v50;
              *v39 = v49;
            }
            *((_OWORD *)a2 - 5) = v47;
            *((__n128 *)a2 - 4) = v48;
            *(_OWORD *)v11 = v46;
          }
LABEL_36:
          v67 = (__int128 *)(v13 + 96);
          v68 = v13 + 48 * v16;
          v70 = *(float *)(v68 + 92);
          v69 = (float *)(v68 + 92);
          v71 = v70;
          v72 = v69 - 11;
          v73 = *(a2 - 25);
          if (v70 <= *(float *)(v13 + 140))
          {
            if (v73 > v71)
            {
              v224 = *(_OWORD *)(v69 - 7);
              v256 = *(__n128 *)(v69 - 3);
              v194 = *(__n128 *)v72;
              v79 = *(_OWORD *)v12;
              v80 = *((_OWORD *)a2 - 7);
              *(_OWORD *)(v69 - 7) = *((_OWORD *)a2 - 8);
              *(_OWORD *)(v69 - 3) = v80;
              *(_OWORD *)v72 = v79;
              *((_OWORD *)a2 - 8) = v224;
              *((__n128 *)a2 - 7) = v256;
              *(__n128 *)v12 = v194;
              if (*v69 > *(float *)(v13 + 140))
              {
                v81 = *v67;
                v225 = *(_OWORD *)(v13 + 112);
                v82 = *(_OWORD *)(v13 + 128);
                v83 = *(__n128 *)v72;
                v84 = *(_OWORD *)(v69 - 3);
                *(_OWORD *)(v13 + 112) = *(_OWORD *)(v69 - 7);
                *(_OWORD *)(v13 + 128) = v84;
                *v67 = (__int128)v83;
                *(_OWORD *)(v69 - 7) = v225;
                *(_OWORD *)(v69 - 3) = v82;
                *(_OWORD *)v72 = v81;
              }
            }
          }
          else
          {
            if (v73 <= v71)
            {
              v85 = *v67;
              v226 = *(_OWORD *)(v13 + 112);
              v86 = *(_OWORD *)(v13 + 128);
              v87 = *(__n128 *)v72;
              v88 = *(_OWORD *)(v69 - 3);
              *(_OWORD *)(v13 + 112) = *(_OWORD *)(v69 - 7);
              *(_OWORD *)(v13 + 128) = v88;
              *v67 = (__int128)v87;
              *(_OWORD *)(v69 - 7) = v226;
              *(_OWORD *)(v69 - 3) = v86;
              *(_OWORD *)v72 = v85;
              if (*(a2 - 25) <= *v69)
                goto LABEL_45;
              v227 = *(_OWORD *)(v69 - 7);
              v257 = *(__n128 *)(v69 - 3);
              v195 = *(_OWORD *)v72;
              v89 = *(_OWORD *)v12;
              v90 = *((_OWORD *)a2 - 7);
              *(_OWORD *)(v69 - 7) = *((_OWORD *)a2 - 8);
              *(_OWORD *)(v69 - 3) = v90;
              *(_OWORD *)v72 = v89;
              v74 = v195;
              v75 = v227;
              v76 = v257;
            }
            else
            {
              v74 = *v67;
              v75 = *(_OWORD *)(v13 + 112);
              v76 = *(__n128 *)(v13 + 128);
              v77 = *(_OWORD *)v12;
              v78 = *((_OWORD *)a2 - 7);
              *(_OWORD *)(v13 + 112) = *((_OWORD *)a2 - 8);
              *(_OWORD *)(v13 + 128) = v78;
              *v67 = v77;
            }
            *((_OWORD *)a2 - 8) = v75;
            *((__n128 *)a2 - 7) = v76;
            *(_OWORD *)v12 = v74;
          }
LABEL_45:
          v91 = *v19;
          v92 = *v69;
          if (*v19 <= *v41)
          {
            if (v92 > v91)
            {
              v229 = v17[1];
              v259 = v17[2];
              v197 = *v17;
              v94 = *(__n128 *)(v69 - 7);
              *v17 = *(__n128 *)v72;
              v17[1] = v94;
              v17[2] = *(__n128 *)(v69 - 3);
              *(__n128 *)(v69 - 7) = v229;
              *(__n128 *)(v69 - 3) = v259;
              *(__n128 *)v72 = v197;
              if (*v19 > *v41)
              {
                v230 = *(__n128 *)(v41 - 7);
                v260 = *(__n128 *)(v41 - 3);
                v198 = *(__n128 *)v44;
                v95 = v17[1];
                *(__n128 *)v44 = *v17;
                *(__n128 *)(v41 - 7) = v95;
                *(__n128 *)(v41 - 3) = v17[2];
                v17[1] = v230;
                v17[2] = v260;
                *v17 = v198;
              }
            }
          }
          else
          {
            if (v92 <= v91)
            {
              v231 = *(__n128 *)(v41 - 7);
              v261 = *(__n128 *)(v41 - 3);
              v199 = *(__n128 *)v44;
              v96 = v17[1];
              *(__n128 *)v44 = *v17;
              *(__n128 *)(v41 - 7) = v96;
              *(__n128 *)(v41 - 3) = v17[2];
              v17[1] = v231;
              v17[2] = v261;
              *v17 = v199;
              if (*v69 <= *v19)
                goto LABEL_54;
              v228 = v17[1];
              v258 = v17[2];
              v196 = *v17;
              v97 = *(__n128 *)(v69 - 7);
              *v17 = *(__n128 *)v72;
              v17[1] = v97;
              v17[2] = *(__n128 *)(v69 - 3);
            }
            else
            {
              v228 = *(__n128 *)(v41 - 7);
              v258 = *(__n128 *)(v41 - 3);
              v196 = *(__n128 *)v44;
              v93 = *(_OWORD *)(v69 - 7);
              *(_OWORD *)v44 = *(_OWORD *)v72;
              *(_OWORD *)(v41 - 7) = v93;
              *(_OWORD *)(v41 - 3) = *(_OWORD *)(v69 - 3);
            }
            *(__n128 *)(v69 - 7) = v228;
            *(__n128 *)(v69 - 3) = v258;
            *(__n128 *)v72 = v196;
          }
LABEL_54:
          v232 = *(__n128 *)(v13 + 16);
          v262 = *(__n128 *)(v13 + 32);
          v200 = *(__n128 *)v13;
          v98 = *v17;
          v99 = v17[2];
          *(__n128 *)(v13 + 16) = v17[1];
          *(__n128 *)(v13 + 32) = v99;
          *(__n128 *)v13 = v98;
          a6 = v200;
          v17[1] = v232;
          v17[2] = v262;
          *v17 = v200;
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          a6.n128_u32[0] = *(_DWORD *)(v13 + 44);
LABEL_56:
          v100 = 0;
          *(_OWORD *)&v182[12] = *(_OWORD *)(v13 + 28);
          v180 = *(__n128 *)v13;
          *(_OWORD *)v182 = *(_OWORD *)(v13 + 16);
          do
          {
            v101 = *(float *)(v13 + v100 + 92);
            v100 += 48;
          }
          while (v101 > a6.n128_f32[0]);
          v102 = v13 + v100;
          v103 = a2;
          if (v100 == 48)
          {
            v106 = a2;
            while (v102 < (unint64_t)v106)
            {
              v104 = v106 - 12;
              v107 = *(v106 - 1);
              v106 -= 12;
              if (v107 > a6.n128_f32[0])
                goto LABEL_64;
            }
            v104 = v106;
            v13 = v102;
          }
          else
          {
            do
            {
              v104 = v103 - 12;
              v105 = *(v103 - 1);
              v103 -= 12;
            }
            while (v105 <= a6.n128_f32[0]);
LABEL_64:
            v13 = v102;
            if (v102 < (unint64_t)v104)
            {
              v108 = v104;
              do
              {
                v233 = *(_OWORD *)(v13 + 16);
                v263 = *(__n128 *)(v13 + 32);
                v201 = *(__n128 *)v13;
                v109 = *(_OWORD *)v108;
                v110 = *((_OWORD *)v108 + 2);
                *(_OWORD *)(v13 + 16) = *((_OWORD *)v108 + 1);
                *(_OWORD *)(v13 + 32) = v110;
                *(_OWORD *)v13 = v109;
                *((_OWORD *)v108 + 1) = v233;
                *((__n128 *)v108 + 2) = v263;
                *(__n128 *)v108 = v201;
                do
                {
                  v111 = *(float *)(v13 + 92);
                  v13 += 48;
                }
                while (v111 > a6.n128_f32[0]);
                do
                {
                  v112 = *(v108 - 1);
                  v108 -= 12;
                }
                while (v112 <= a6.n128_f32[0]);
              }
              while (v13 < (unint64_t)v108);
            }
          }
          v113 = (__n128 *)(v13 - 48);
          if (v13 - 48 != a1)
          {
            v114 = *v113;
            v115 = *(_OWORD *)(v13 - 16);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 32) = v115;
            *(__n128 *)a1 = v114;
          }
          *(_OWORD *)(v13 - 20) = *(_OWORD *)&v182[12];
          *v113 = v180;
          *(_OWORD *)(v13 - 32) = *(_OWORD *)v182;
          *(_DWORD *)(v13 - 4) = a6.n128_u32[0];
          if (v102 < (unint64_t)v104)
            goto LABEL_75;
          v116 = sub_20E7BABA8(a1, v13 - 48, a6);
          if (!sub_20E7BABA8(v13, (uint64_t)a2, v117))
          {
            if (v116)
              continue;
LABEL_75:
            sub_20E7B9D78(a1, v13 - 48, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (float *)(v13 - 48);
          if (v116)
            return a6.n128_f64[0];
          goto LABEL_1;
        }
        v143 = (float *)(v13 + 48);
        v145 = (float *)v13 == a2 || v143 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v145)
          {
            v146 = 0;
            v147 = (float *)v13;
            do
            {
              a6.n128_f32[0] = v147[23];
              v149 = v147[11];
              v147 = v143;
              if (a6.n128_f32[0] > v149)
              {
                *(_OWORD *)&v238[12] = *(_OWORD *)(v143 + 7);
                v206 = *(_OWORD *)v143;
                *(_OWORD *)v238 = *((_OWORD *)v143 + 1);
                v150 = v146;
                do
                {
                  v151 = (float *)(v13 + v150);
                  v152 = *(_OWORD *)(v13 + v150 + 16);
                  *((_OWORD *)v151 + 3) = *(_OWORD *)(v13 + v150);
                  *((_OWORD *)v151 + 4) = v152;
                  *((_OWORD *)v151 + 5) = *(_OWORD *)(v13 + v150 + 32);
                  if (!v150)
                  {
                    v148 = v13;
                    goto LABEL_117;
                  }
                  v150 -= 48;
                }
                while (a6.n128_f32[0] > *(v151 - 1));
                v148 = v13 + v150 + 48;
LABEL_117:
                *(_OWORD *)(v148 + 28) = *(_OWORD *)&v238[12];
                *(_OWORD *)v148 = v206;
                *(_OWORD *)(v148 + 16) = *(_OWORD *)v238;
                *(_DWORD *)(v148 + 44) = a6.n128_u32[0];
              }
              v143 = v147 + 12;
              v146 += 48;
            }
            while (v147 + 12 != a2);
          }
        }
        else if (!v145)
        {
          do
          {
            a6.n128_u32[0] = *(_DWORD *)(a1 + 92);
            v160 = *(float *)(a1 + 44);
            a1 = (uint64_t)v143;
            if (a6.n128_f32[0] > v160)
            {
              *(_OWORD *)&v241[12] = *(_OWORD *)(v143 + 7);
              v208 = *(_OWORD *)v143;
              *(_OWORD *)v241 = *((_OWORD *)v143 + 1);
              v161 = v143;
              do
              {
                v162 = *((_OWORD *)v161 - 2);
                *(_OWORD *)v161 = *((_OWORD *)v161 - 3);
                *((_OWORD *)v161 + 1) = v162;
                *((_OWORD *)v161 + 2) = *((_OWORD *)v161 - 1);
                v163 = *(v161 - 13);
                v161 -= 12;
              }
              while (a6.n128_f32[0] > v163);
              *(_OWORD *)(v161 + 7) = *(_OWORD *)&v241[12];
              *(_OWORD *)v161 = v208;
              *((_OWORD *)v161 + 1) = *(_OWORD *)v241;
              v161[11] = a6.n128_f32[0];
            }
            v143 += 12;
          }
          while ((float *)(a1 + 48) != a2);
        }
        return a6.n128_f64[0];
    }
  }
}

BOOL sub_20E7BABA8(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v4;
  __int128 *v5;
  float v6;
  float v7;
  float v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 *v19;
  float v20;
  float v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  float v28;
  float v29;
  float v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[28];

  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      if (*(float *)(a2 - 4) <= *(float *)(a1 + 44))
        return 1;
      v13 = *(_OWORD *)a1;
      v14 = *(_OWORD *)(a1 + 16);
      v15 = *(_OWORD *)(a1 + 32);
      v17 = *(_OWORD *)(a2 - 32);
      v16 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 16) = v17;
      *(_OWORD *)(a1 + 32) = v16;
      *(_OWORD *)(a2 - 32) = v14;
      *(_OWORD *)(a2 - 16) = v15;
      *(_OWORD *)(a2 - 48) = v13;
      return 1;
    case 3uLL:
      v18 = (__int128 *)(a1 + 48);
      v19 = (__int128 *)(a2 - 48);
      v20 = *(float *)(a1 + 92);
      v21 = *(float *)(a2 - 4);
      if (v20 <= *(float *)(a1 + 44))
      {
        if (v21 > v20)
        {
          v43 = *v18;
          v44 = *(_OWORD *)(a1 + 64);
          v45 = *(_OWORD *)(a1 + 80);
          v47 = *(_OWORD *)(a2 - 32);
          v46 = *(_OWORD *)(a2 - 16);
          *v18 = *v19;
          *(_OWORD *)(a1 + 64) = v47;
          *(_OWORD *)(a1 + 80) = v46;
          *(_OWORD *)(a2 - 32) = v44;
          *(_OWORD *)(a2 - 16) = v45;
          *v19 = v43;
          if (*(float *)(a1 + 92) > *(float *)(a1 + 44))
          {
LABEL_20:
            v49 = *(_OWORD *)(a1 + 16);
            v48 = *(_OWORD *)(a1 + 32);
            v50 = *(_OWORD *)a1;
            v51 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v18;
            *(_OWORD *)(a1 + 16) = v51;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
            *v18 = v50;
            *(_OWORD *)(a1 + 64) = v49;
            *(_OWORD *)(a1 + 80) = v48;
            return 1;
          }
        }
        return 1;
      }
      if (v21 <= v20)
      {
        v74 = *(_OWORD *)(a1 + 16);
        v73 = *(_OWORD *)(a1 + 32);
        v75 = *(_OWORD *)a1;
        v76 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)a1 = *v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
        *v18 = v75;
        *(_OWORD *)(a1 + 64) = v74;
        *(_OWORD *)(a1 + 80) = v73;
        if (*(float *)(a2 - 4) > *(float *)(a1 + 92))
        {
          v22 = *v18;
          v23 = *(_OWORD *)(a1 + 64);
          v24 = *(_OWORD *)(a1 + 80);
          v78 = *(_OWORD *)(a2 - 32);
          v77 = *(_OWORD *)(a2 - 16);
          *v18 = *v19;
          *(_OWORD *)(a1 + 64) = v78;
          *(_OWORD *)(a1 + 80) = v77;
          goto LABEL_39;
        }
        return 1;
      }
      v22 = *(_OWORD *)a1;
      v23 = *(_OWORD *)(a1 + 16);
      v24 = *(_OWORD *)(a1 + 32);
      v26 = *(_OWORD *)(a2 - 32);
      v25 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)a1 = *v19;
      *(_OWORD *)(a1 + 16) = v26;
      *(_OWORD *)(a1 + 32) = v25;
LABEL_39:
      *(_OWORD *)(a2 - 32) = v23;
      *(_OWORD *)(a2 - 16) = v24;
      *v19 = v22;
      return 1;
    case 4uLL:
      v18 = (__int128 *)(a1 + 48);
      v27 = (__int128 *)(a1 + 96);
      v28 = *(float *)(a1 + 92);
      v29 = *(float *)(a1 + 44);
      v30 = *(float *)(a1 + 140);
      if (v28 <= v29)
      {
        if (v30 > v28)
        {
          v53 = *(_OWORD *)(a1 + 64);
          v52 = *(_OWORD *)(a1 + 80);
          v54 = *v18;
          v55 = *(_OWORD *)(a1 + 112);
          *v18 = *v27;
          *(_OWORD *)(a1 + 64) = v55;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
          *v27 = v54;
          *(_OWORD *)(a1 + 112) = v53;
          *(_OWORD *)(a1 + 128) = v52;
          if (*(float *)(a1 + 92) > v29)
          {
            v57 = *(_OWORD *)(a1 + 16);
            v56 = *(_OWORD *)(a1 + 32);
            v58 = *(_OWORD *)a1;
            v59 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v18;
            *(_OWORD *)(a1 + 16) = v59;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
            *v18 = v58;
            *(_OWORD *)(a1 + 64) = v57;
            *(_OWORD *)(a1 + 80) = v56;
          }
        }
      }
      else
      {
        if (v30 <= v28)
        {
          v80 = *(_OWORD *)(a1 + 16);
          v79 = *(_OWORD *)(a1 + 32);
          v81 = *(_OWORD *)a1;
          v82 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)a1 = *v18;
          *(_OWORD *)(a1 + 16) = v82;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
          *v18 = v81;
          *(_OWORD *)(a1 + 64) = v80;
          *(_OWORD *)(a1 + 80) = v79;
          if (v30 <= *(float *)(a1 + 92))
            goto LABEL_43;
          v32 = *(_OWORD *)(a1 + 64);
          v31 = *(_OWORD *)(a1 + 80);
          v33 = *v18;
          v83 = *(_OWORD *)(a1 + 112);
          *v18 = *v27;
          *(_OWORD *)(a1 + 64) = v83;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
        }
        else
        {
          v32 = *(_OWORD *)(a1 + 16);
          v31 = *(_OWORD *)(a1 + 32);
          v33 = *(_OWORD *)a1;
          v34 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
        }
        *v27 = v33;
        *(_OWORD *)(a1 + 112) = v32;
        *(_OWORD *)(a1 + 128) = v31;
      }
LABEL_43:
      if (*(float *)(a2 - 4) <= *(float *)(a1 + 140))
        return 1;
      v84 = (_OWORD *)(a2 - 48);
      v85 = *v27;
      v86 = *(_OWORD *)(a1 + 112);
      v87 = *(_OWORD *)(a1 + 128);
      v89 = *(_OWORD *)(a2 - 32);
      v88 = *(_OWORD *)(a2 - 16);
      *v27 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 112) = v89;
      *(_OWORD *)(a1 + 128) = v88;
      v84[1] = v86;
      v84[2] = v87;
      *v84 = v85;
      if (*(float *)(a1 + 140) <= *(float *)(a1 + 92))
        return 1;
      v91 = *(_OWORD *)(a1 + 64);
      v90 = *(_OWORD *)(a1 + 80);
      v92 = *v18;
      v93 = *(_OWORD *)(a1 + 112);
      *v18 = *v27;
      *(_OWORD *)(a1 + 64) = v93;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
      *v27 = v92;
      *(_OWORD *)(a1 + 112) = v91;
      *(_OWORD *)(a1 + 128) = v90;
      if (*(float *)(a1 + 92) <= *(float *)(a1 + 44))
        return 1;
      goto LABEL_20;
    case 5uLL:
      sub_20E7BB0D4(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v4 = a1 + 96;
      v5 = (__int128 *)(a1 + 48);
      v6 = *(float *)(a1 + 92);
      v7 = *(float *)(a1 + 44);
      v8 = *(float *)(a1 + 140);
      if (v6 <= v7)
      {
        if (v8 > v6)
        {
          v36 = *(_OWORD *)(a1 + 64);
          v35 = *(_OWORD *)(a1 + 80);
          v37 = *v5;
          v38 = *(_OWORD *)(a1 + 112);
          *v5 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 64) = v38;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
          *(_OWORD *)v4 = v37;
          *(_OWORD *)(a1 + 112) = v36;
          *(_OWORD *)(a1 + 128) = v35;
          if (*(float *)(a1 + 92) > v7)
          {
            v40 = *(_OWORD *)(a1 + 16);
            v39 = *(_OWORD *)(a1 + 32);
            v41 = *(_OWORD *)a1;
            v42 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v5;
            *(_OWORD *)(a1 + 16) = v42;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
            *v5 = v41;
            *(_OWORD *)(a1 + 64) = v40;
            *(_OWORD *)(a1 + 80) = v39;
          }
        }
      }
      else
      {
        if (v8 <= v6)
        {
          v61 = *(_OWORD *)(a1 + 16);
          v60 = *(_OWORD *)(a1 + 32);
          v62 = *(_OWORD *)a1;
          v63 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)a1 = *v5;
          *(_OWORD *)(a1 + 16) = v63;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 80);
          *v5 = v62;
          *(_OWORD *)(a1 + 64) = v61;
          *(_OWORD *)(a1 + 80) = v60;
          if (v8 <= *(float *)(a1 + 92))
            goto LABEL_27;
          v10 = *(_OWORD *)(a1 + 64);
          v9 = *(_OWORD *)(a1 + 80);
          v11 = *v5;
          v64 = *(_OWORD *)(a1 + 112);
          *v5 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 64) = v64;
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 128);
        }
        else
        {
          v10 = *(_OWORD *)(a1 + 16);
          v9 = *(_OWORD *)(a1 + 32);
          v11 = *(_OWORD *)a1;
          v12 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *(_OWORD *)v4;
          *(_OWORD *)(a1 + 16) = v12;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
        }
        *(_OWORD *)v4 = v11;
        *(_OWORD *)(a1 + 112) = v10;
        *(_OWORD *)(a1 + 128) = v9;
      }
LABEL_27:
      v65 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v66 = 0;
      v67 = 0;
      while (1)
      {
        v69 = *(float *)(v65 + 44);
        if (v69 > *(float *)(v4 + 44))
        {
          v94 = *(_OWORD *)v65;
          *(_OWORD *)v95 = *(_OWORD *)(v65 + 16);
          *(_OWORD *)&v95[12] = *(_OWORD *)(v65 + 28);
          v70 = v66;
          do
          {
            v71 = a1 + v70;
            v72 = *(_OWORD *)(a1 + v70 + 112);
            *(_OWORD *)(v71 + 144) = *(_OWORD *)(a1 + v70 + 96);
            *(_OWORD *)(v71 + 160) = v72;
            *(_OWORD *)(v71 + 176) = *(_OWORD *)(a1 + v70 + 128);
            if (v70 == -96)
            {
              v68 = a1;
              goto LABEL_30;
            }
            v70 -= 48;
          }
          while (v69 > *(float *)(v71 + 92));
          v68 = a1 + v70 + 144;
LABEL_30:
          *(_OWORD *)v68 = v94;
          *(_OWORD *)(v68 + 16) = *(_OWORD *)v95;
          *(_OWORD *)(v68 + 28) = *(_OWORD *)&v95[12];
          *(float *)(v68 + 44) = v69;
          if (++v67 == 8)
            return v65 + 48 == a2;
        }
        v4 = v65;
        v66 += 48;
        v65 += 48;
        if (v65 == a2)
          return 1;
      }
  }
}

__n128 sub_20E7BB0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  float v6;
  float v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v6 = *(float *)(a2 + 44);
  v7 = *(float *)(a3 + 44);
  if (v6 <= *(float *)(a1 + 44))
  {
    if (v7 > v6)
    {
      result = *(__n128 *)a2;
      v12 = *(_OWORD *)(a2 + 16);
      v13 = *(_OWORD *)(a2 + 32);
      v15 = *(_OWORD *)(a3 + 16);
      v14 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v15;
      *(_OWORD *)(a2 + 32) = v14;
      *(_OWORD *)(a3 + 16) = v12;
      *(_OWORD *)(a3 + 32) = v13;
      *(__n128 *)a3 = result;
      if (*(float *)(a2 + 44) > *(float *)(a1 + 44))
      {
        result = *(__n128 *)a1;
        v16 = *(_OWORD *)(a1 + 16);
        v17 = *(_OWORD *)(a1 + 32);
        v19 = *(_OWORD *)(a2 + 16);
        v18 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v19;
        *(_OWORD *)(a1 + 32) = v18;
        *(_OWORD *)(a2 + 16) = v16;
        *(_OWORD *)(a2 + 32) = v17;
        *(__n128 *)a2 = result;
      }
    }
  }
  else
  {
    if (v7 > v6)
    {
      result = *(__n128 *)a1;
      v8 = *(_OWORD *)(a1 + 16);
      v9 = *(_OWORD *)(a1 + 32);
      v11 = *(_OWORD *)(a3 + 16);
      v10 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v11;
      *(_OWORD *)(a1 + 32) = v10;
LABEL_9:
      *(_OWORD *)(a3 + 16) = v8;
      *(_OWORD *)(a3 + 32) = v9;
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *(__n128 *)a1;
    v20 = *(_OWORD *)(a1 + 16);
    v21 = *(_OWORD *)(a1 + 32);
    v23 = *(_OWORD *)(a2 + 16);
    v22 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v23;
    *(_OWORD *)(a1 + 32) = v22;
    *(_OWORD *)(a2 + 16) = v20;
    *(_OWORD *)(a2 + 32) = v21;
    *(__n128 *)a2 = result;
    if (*(float *)(a3 + 44) > *(float *)(a2 + 44))
    {
      result = *(__n128 *)a2;
      v8 = *(_OWORD *)(a2 + 16);
      v9 = *(_OWORD *)(a2 + 32);
      v25 = *(_OWORD *)(a3 + 16);
      v24 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v25;
      *(_OWORD *)(a2 + 32) = v24;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(float *)(a4 + 44) > *(float *)(a3 + 44))
  {
    result = *(__n128 *)a3;
    v26 = *(_OWORD *)(a3 + 16);
    v27 = *(_OWORD *)(a3 + 32);
    v29 = *(_OWORD *)(a4 + 16);
    v28 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v29;
    *(_OWORD *)(a3 + 32) = v28;
    *(_OWORD *)(a4 + 16) = v26;
    *(_OWORD *)(a4 + 32) = v27;
    *(__n128 *)a4 = result;
    if (*(float *)(a3 + 44) > *(float *)(a2 + 44))
    {
      result = *(__n128 *)a2;
      v30 = *(_OWORD *)(a2 + 16);
      v31 = *(_OWORD *)(a2 + 32);
      v33 = *(_OWORD *)(a3 + 16);
      v32 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v33;
      *(_OWORD *)(a2 + 32) = v32;
      *(_OWORD *)(a3 + 16) = v30;
      *(_OWORD *)(a3 + 32) = v31;
      *(__n128 *)a3 = result;
      if (*(float *)(a2 + 44) > *(float *)(a1 + 44))
      {
        result = *(__n128 *)a1;
        v34 = *(_OWORD *)(a1 + 16);
        v35 = *(_OWORD *)(a1 + 32);
        v37 = *(_OWORD *)(a2 + 16);
        v36 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v37;
        *(_OWORD *)(a1 + 32) = v36;
        *(_OWORD *)(a2 + 16) = v34;
        *(_OWORD *)(a2 + 32) = v35;
        *(__n128 *)a2 = result;
      }
    }
  }
  result.n128_u32[0] = *(_DWORD *)(a5 + 44);
  if (result.n128_f32[0] > *(float *)(a4 + 44))
  {
    result = *(__n128 *)a4;
    v38 = *(_OWORD *)(a4 + 16);
    v39 = *(_OWORD *)(a4 + 32);
    v41 = *(_OWORD *)(a5 + 16);
    v40 = *(_OWORD *)(a5 + 32);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v41;
    *(_OWORD *)(a4 + 32) = v40;
    *(_OWORD *)(a5 + 16) = v38;
    *(_OWORD *)(a5 + 32) = v39;
    *(__n128 *)a5 = result;
    result.n128_u32[0] = *(_DWORD *)(a4 + 44);
    if (result.n128_f32[0] > *(float *)(a3 + 44))
    {
      result = *(__n128 *)a3;
      v42 = *(_OWORD *)(a3 + 16);
      v43 = *(_OWORD *)(a3 + 32);
      v45 = *(_OWORD *)(a4 + 16);
      v44 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v45;
      *(_OWORD *)(a3 + 32) = v44;
      *(_OWORD *)(a4 + 16) = v42;
      *(_OWORD *)(a4 + 32) = v43;
      *(__n128 *)a4 = result;
      result.n128_u32[0] = *(_DWORD *)(a3 + 44);
      if (result.n128_f32[0] > *(float *)(a2 + 44))
      {
        result = *(__n128 *)a2;
        v46 = *(_OWORD *)(a2 + 16);
        v47 = *(_OWORD *)(a2 + 32);
        v49 = *(_OWORD *)(a3 + 16);
        v48 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v49;
        *(_OWORD *)(a2 + 32) = v48;
        *(_OWORD *)(a3 + 16) = v46;
        *(_OWORD *)(a3 + 32) = v47;
        *(__n128 *)a3 = result;
        result.n128_u32[0] = *(_DWORD *)(a2 + 44);
        if (result.n128_f32[0] > *(float *)(a1 + 44))
        {
          result = *(__n128 *)a1;
          v50 = *(_OWORD *)(a1 + 16);
          v51 = *(_OWORD *)(a1 + 32);
          v53 = *(_OWORD *)(a2 + 16);
          v52 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v53;
          *(_OWORD *)(a1 + 32) = v52;
          *(_OWORD *)(a2 + 16) = v50;
          *(_OWORD *)(a2 + 32) = v51;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

float *sub_20E7BB31C(float *a1, float *a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  float *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  float *v18;
  int64_t v19;
  float v20;
  float *v21;
  float *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  BOOL v28;
  uint64_t v29;
  float *v30;
  __int128 v31;
  __int128 v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  float v41;
  float *v42;
  __int128 v43;
  __int128 v44;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  __int128 *v49;
  float v50;
  __int128 *v51;
  __int128 *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[28];
  __int128 v61;
  _BYTE v62[28];
  __int128 v63;
  __int128 v64;
  _BYTE v65[28];

  if (a1 == a2)
    return a3;
  v3 = (char *)a2 - (char *)a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 4);
  if ((char *)a2 - (char *)a1 >= 49 && (unint64_t)v3 >= 0x60)
  {
    v46 = (unint64_t)(v4 - 2) >> 1;
    v47 = v46;
    do
    {
      if (v46 >= v47)
      {
        v48 = (2 * v47) | 1;
        v49 = (__int128 *)&a1[12 * v48];
        if (2 * v47 + 2 < v4 && a1[12 * v48 + 11] > *((float *)v49 + 23))
        {
          v49 += 3;
          v48 = 2 * v47 + 2;
        }
        v50 = a1[12 * v47 + 11];
        if (*((float *)v49 + 11) <= v50)
        {
          v51 = (__int128 *)&a1[12 * v47];
          v59 = *v51;
          *(_OWORD *)v62 = v51[1];
          *(_OWORD *)&v62[12] = *(__int128 *)((char *)v51 + 28);
          do
          {
            v52 = v51;
            v51 = v49;
            v53 = *v49;
            v54 = v49[2];
            v52[1] = v49[1];
            v52[2] = v54;
            *v52 = v53;
            if (v46 < v48)
              break;
            v55 = (2 * v48) | 1;
            v49 = (__int128 *)&a1[12 * v55];
            v56 = 2 * v48 + 2;
            if (v56 < v4 && a1[12 * v55 + 11] > *((float *)v49 + 23))
            {
              v49 += 3;
              v55 = v56;
            }
            v48 = v55;
          }
          while (*((float *)v49 + 11) <= v50);
          *(__int128 *)((char *)v51 + 28) = *(_OWORD *)&v62[12];
          *v51 = v59;
          v51[1] = *(_OWORD *)v62;
          *((float *)v51 + 11) = v50;
        }
      }
      v28 = v47-- <= 0;
    }
    while (!v28);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 96)
    {
      v6 = a2;
      do
      {
        if (v6[11] > a1[11])
        {
          v7 = *(_OWORD *)v6;
          v8 = *((_OWORD *)v6 + 1);
          v9 = *((_OWORD *)v6 + 2);
          v11 = *((_OWORD *)a1 + 1);
          v10 = *((_OWORD *)a1 + 2);
          *(_OWORD *)v6 = *(_OWORD *)a1;
          *((_OWORD *)v6 + 1) = v11;
          *((_OWORD *)v6 + 2) = v10;
          *((_OWORD *)a1 + 1) = v8;
          *((_OWORD *)a1 + 2) = v9;
          *(_OWORD *)a1 = v7;
        }
        v6 += 12;
      }
      while (v6 != a3);
LABEL_25:
      v5 = a3;
      goto LABEL_26;
    }
    v12 = a2;
    while (1)
    {
      if (v12[11] > a1[11])
      {
        v13 = *(_OWORD *)v12;
        v14 = *((_OWORD *)v12 + 1);
        v15 = *((_OWORD *)v12 + 2);
        v17 = *((_OWORD *)a1 + 1);
        v16 = *((_OWORD *)a1 + 2);
        *(_OWORD *)v12 = *(_OWORD *)a1;
        *((_OWORD *)v12 + 1) = v17;
        *((_OWORD *)v12 + 2) = v16;
        *((_OWORD *)a1 + 1) = v14;
        *((_OWORD *)a1 + 2) = v15;
        *(_OWORD *)a1 = v13;
        if ((unint64_t)v4 < 3 || a1[23] <= a1[35])
        {
          v18 = a1 + 12;
          v19 = 1;
          v20 = a1[11];
          if (a1[23] <= v20)
          {
LABEL_19:
            v57 = *(_OWORD *)a1;
            *(_OWORD *)v60 = *((_OWORD *)a1 + 1);
            *(_OWORD *)&v60[12] = *(_OWORD *)(a1 + 7);
            v21 = a1;
            do
            {
              v22 = v21;
              v21 = v18;
              v23 = *(_OWORD *)v18;
              v24 = *((_OWORD *)v18 + 2);
              *((_OWORD *)v22 + 1) = *((_OWORD *)v18 + 1);
              *((_OWORD *)v22 + 2) = v24;
              *(_OWORD *)v22 = v23;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v19)
                break;
              v25 = (2 * v19) | 1;
              v18 = &a1[12 * v25];
              v26 = 2 * v19 + 2;
              if (v26 < v4 && a1[12 * v25 + 11] > v18[23])
              {
                v18 += 12;
                v25 = v26;
              }
              v19 = v25;
            }
            while (v18[11] <= v20);
            *(_OWORD *)(v21 + 7) = *(_OWORD *)&v60[12];
            *(_OWORD *)v21 = v57;
            *((_OWORD *)v21 + 1) = *(_OWORD *)v60;
            v21[11] = v20;
          }
        }
        else
        {
          v18 = a1 + 24;
          v19 = 2;
          v20 = a1[11];
          if (a1[35] <= v20)
            goto LABEL_19;
        }
      }
      v12 += 12;
      if (v12 == a3)
        goto LABEL_25;
    }
  }
LABEL_26:
  if (v3 >= 49)
  {
    v27 = v3 / 0x30uLL;
    do
    {
      v29 = 0;
      v58 = *(_OWORD *)a1;
      v61 = *((_OWORD *)a1 + 1);
      v63 = *((_OWORD *)a1 + 2);
      v30 = a1;
      do
      {
        v33 = v30;
        v34 = v29 + 1;
        v30 += 12 * v29 + 12;
        v35 = 2 * v29;
        v29 = (2 * v29) | 1;
        v36 = v35 + 2;
        if (v36 < v27 && v33[12 * v34 + 11] > v30[23])
        {
          v30 += 12;
          v29 = v36;
        }
        v31 = *(_OWORD *)v30;
        v32 = *((_OWORD *)v30 + 2);
        *((_OWORD *)v33 + 1) = *((_OWORD *)v30 + 1);
        *((_OWORD *)v33 + 2) = v32;
        *(_OWORD *)v33 = v31;
      }
      while (v29 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      a2 -= 12;
      if (v30 == a2)
      {
        *((_OWORD *)v30 + 1) = v61;
        *((_OWORD *)v30 + 2) = v63;
        *(_OWORD *)v30 = v58;
      }
      else
      {
        v37 = *(_OWORD *)a2;
        v38 = *((_OWORD *)a2 + 2);
        *((_OWORD *)v30 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)v30 + 2) = v38;
        *(_OWORD *)v30 = v37;
        *(_OWORD *)a2 = v58;
        *((_OWORD *)a2 + 1) = v61;
        *((_OWORD *)a2 + 2) = v63;
        v39 = (char *)v30 - (char *)a1 + 48;
        if (v39 >= 49)
        {
          v40 = (v39 / 0x30uLL - 2) >> 1;
          v41 = v30[11];
          if (a1[12 * v40 + 11] > v41)
          {
            *(_OWORD *)&v65[12] = *(_OWORD *)(v30 + 7);
            v64 = *(_OWORD *)v30;
            *(_OWORD *)v65 = *((_OWORD *)v30 + 1);
            do
            {
              v42 = v30;
              v30 = &a1[12 * v40];
              v43 = *(_OWORD *)v30;
              v44 = *((_OWORD *)v30 + 2);
              *((_OWORD *)v42 + 1) = *((_OWORD *)v30 + 1);
              *((_OWORD *)v42 + 2) = v44;
              *(_OWORD *)v42 = v43;
              if (!v40)
                break;
              v40 = (v40 - 1) >> 1;
            }
            while (a1[12 * v40 + 11] > v41);
            *(_OWORD *)v30 = v64;
            *((_OWORD *)v30 + 1) = *(_OWORD *)v65;
            *(_OWORD *)(v30 + 7) = *(_OWORD *)&v65[12];
            v30[11] = v41;
          }
        }
      }
      v28 = v27-- <= 2;
    }
    while (!v28);
  }
  return v5;
}

uint64_t sub_20E7BB788(float *a1, float32x2_t *a2, uint64_t a3, float a4, float a5, float a6, float a7, float a8)
{
  float v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  float v19;
  int v20;
  int v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  unsigned int v47;
  float v48;
  unsigned int v49;
  float v50;
  unsigned int v51;
  float v52;
  unsigned int v53;
  float v54;
  float v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  unsigned int v89;
  float v90;
  unsigned int v91;
  float v92;
  unsigned int v93;
  float v94;
  unsigned int v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  uint64_t v104;
  float v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  float v110;
  float v111;
  unsigned int v112;
  float v113;
  float v114;
  unsigned int v115;
  float v116;
  float v117;
  float v118;
  float v119;
  unsigned int v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  float v141;
  unsigned int v142;
  float v143;
  float v144;
  int v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  float v165;
  unsigned int v166;
  float v167;
  float v168;
  int v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  float v189;
  unsigned int v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  uint64_t v197;
  float v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  float v203;
  float v204;
  unsigned int v205;
  float v206;
  float v207;
  unsigned int v208;
  float v209;
  float v210;
  float v211;
  float v212;
  unsigned int v213;
  float v214;
  float v215;
  float v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  float v222;
  float v223;
  float v224;
  float v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int v244;
  uint64_t v245;
  float v246;
  float v247;
  float v248;
  unsigned int v249;
  float v250;
  unsigned int v251;
  float v252;
  unsigned int v253;
  float v254;
  unsigned int v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  float v279;
  unsigned int v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  float v294;
  float v295;
  float v296;
  unsigned int v297;
  float v298;
  unsigned int v299;
  float v300;
  unsigned int v301;
  float v302;
  unsigned int v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  float v325;
  unsigned int v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  uint64_t v336;
  float v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  uint64_t v341;
  float v342;
  float v343;
  unsigned int v344;
  float v345;
  float v346;
  unsigned int v347;
  float v348;
  float v349;
  float v350;
  float v351;
  unsigned int v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  uint64_t v358;
  float v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  float v364;
  float v365;
  unsigned int v366;
  float v367;
  float v368;
  unsigned int v369;
  float v370;
  float v371;
  float v372;
  float v373;
  unsigned int v374;
  float v375;
  float v376;
  float v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  float v383;
  float v384;
  float v385;
  float v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unsigned int v406;
  uint64_t v407;
  float v408;
  float v409;
  float v410;
  unsigned int v411;
  float v412;
  unsigned int v413;
  float v414;
  unsigned int v415;
  float v416;
  unsigned int v417;
  float v418;
  float v419;
  float v420;
  float v421;
  float v422;
  float v423;
  float v424;
  float v425;
  uint64_t v426;
  float v427;
  uint64_t v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  float v432;
  float v433;
  unsigned int v434;
  float v435;
  float v436;
  unsigned int v437;
  float v438;
  float v439;
  float v440;
  float v441;
  unsigned int v442;
  float v443;
  float v444;
  float v445;
  float v446;
  float v447;
  float v448;
  float v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unsigned int v453;
  uint64_t v454;
  float v455;
  float v456;
  float v457;
  float v458;
  float v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  float v463;
  unsigned int v464;
  float v465;
  float v466;
  int v467;
  float v468;
  float v469;
  float v470;
  float v471;
  float v472;
  float v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  unsigned int v477;
  uint64_t v478;
  float v479;
  float v480;
  float v481;
  float v482;
  float v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  float v487;
  unsigned int v488;
  float v489;
  float v490;
  int v491;
  float v492;
  float v493;
  float v494;
  float v495;
  float v496;
  float v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  unsigned int v501;
  uint64_t v502;
  float v503;
  float v504;
  float v505;
  float v506;
  float v507;
  unsigned int v508;
  unsigned int v509;
  unsigned int v510;
  float v511;
  unsigned int v512;
  float v513;
  float v514;
  float v515;
  float v516;
  float v517;
  float v518;
  uint64_t v519;
  float v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  float v525;
  float v526;
  unsigned int v527;
  float v528;
  float v529;
  unsigned int v530;
  float v531;
  float v532;
  float v533;
  float v534;
  unsigned int v535;
  float v536;
  float v537;
  float v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  float v544;
  float v545;
  float v546;
  float v547;
  uint64_t v548;
  _QWORD *v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  unint64_t v553;
  float v554;
  float v555;
  float v556;
  float v557;
  float v558;
  float v559;
  float v560;
  float v561;
  float v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int v566;
  uint64_t v567;
  float v568;
  float v569;
  float v570;
  unsigned int v571;
  float v572;
  unsigned int v573;
  float v574;
  unsigned int v575;
  float v576;
  unsigned int v577;
  float v578;
  float v579;
  float v580;
  float v581;
  float v582;
  float v583;
  float v584;
  float v585;
  float v586;
  float v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unsigned int v591;
  uint64_t v592;
  float v593;
  float v594;
  float v595;
  float v596;
  float v597;
  unsigned int v598;
  unsigned int v599;
  unsigned int v600;
  float v601;
  unsigned int v602;
  float v603;
  float v604;
  float v605;
  float v606;
  float v607;
  float v608;
  float v609;
  float v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unsigned int v614;
  uint64_t v615;
  float v616;
  float v617;
  float v618;
  unsigned int v619;
  float v620;
  unsigned int v621;
  float v622;
  unsigned int v623;
  float v624;
  unsigned int v625;
  float v626;
  float v627;
  float v628;
  float v629;
  float v630;
  float v631;
  float v632;
  float v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  unsigned int v637;
  uint64_t v638;
  float v639;
  float v640;
  float v641;
  float v642;
  float v643;
  unsigned int v644;
  unsigned int v645;
  unsigned int v646;
  float v647;
  unsigned int v648;
  float v649;
  float v650;
  float v651;
  float v652;
  float v653;
  float v654;
  float v655;
  float v656;
  float v657;
  uint64_t v658;
  float v659;
  uint64_t v660;
  uint64_t v661;
  unsigned int v662;
  uint64_t v663;
  float v664;
  float v665;
  unsigned int v666;
  float v667;
  float v668;
  unsigned int v669;
  float v670;
  float v671;
  float v672;
  float v673;
  unsigned int v674;
  float v675;
  float v676;
  float v677;
  float v678;
  float v679;
  uint64_t v680;
  float v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  float v686;
  float v687;
  unsigned int v688;
  float v689;
  float v690;
  unsigned int v691;
  float v692;
  float v693;
  float v694;
  float v695;
  unsigned int v696;
  float v697;
  float v698;
  float v699;
  int v700;
  int v701;
  int v702;
  int v703;
  int v704;
  float v705;
  float v706;
  float v707;
  float v708;
  uint64_t v709;
  _QWORD *v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  unint64_t v714;
  float v715;
  float v716;
  float v717;
  float v718;
  float v719;
  float v720;
  float v721;
  float v722;
  float v723;
  float v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  unsigned int v728;
  uint64_t v729;
  float v730;
  float v731;
  float v732;
  unsigned int v733;
  float v734;
  unsigned int v735;
  float v736;
  unsigned int v737;
  float v738;
  unsigned int v739;
  float v740;
  float v741;
  float v742;
  float v743;
  float v744;
  float v745;
  float v746;
  float v747;
  uint64_t v748;
  float v749;
  uint64_t v750;
  uint64_t v751;
  unsigned int v752;
  uint64_t v753;
  float v754;
  float v755;
  unsigned int v756;
  float v757;
  float v758;
  unsigned int v759;
  float v760;
  float v761;
  float v762;
  float v763;
  unsigned int v764;
  float v765;
  float v766;
  float v767;
  float v768;
  float v769;
  float v770;
  float v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  unsigned int v775;
  uint64_t v776;
  float v777;
  float v778;
  float v779;
  float v780;
  float v781;
  unsigned int v782;
  unsigned int v783;
  unsigned int v784;
  float v785;
  unsigned int v786;
  float v787;
  float v788;
  int v789;
  float v790;
  float v791;
  float v792;
  float v793;
  float v794;
  float v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  unsigned int v799;
  uint64_t v800;
  float v801;
  float v802;
  float v803;
  float v804;
  float v805;
  unsigned int v806;
  unsigned int v807;
  unsigned int v808;
  float v809;
  unsigned int v810;
  float v811;
  float v812;
  int v813;
  float v814;
  float v815;
  float v816;
  float v817;
  float v818;
  float v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  unsigned int v823;
  uint64_t v824;
  float v825;
  float v826;
  float v827;
  float v828;
  float v829;
  unsigned int v830;
  unsigned int v831;
  unsigned int v832;
  float v833;
  unsigned int v834;
  float v835;
  float v836;
  float v837;
  float v838;
  float v839;
  float v840;
  uint64_t v841;
  float v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  float v847;
  float v848;
  unsigned int v849;
  float v850;
  float v851;
  unsigned int v852;
  float v853;
  float v854;
  float v855;
  float v856;
  unsigned int v857;
  float v858;
  float v859;
  float v860;
  int v861;
  int v862;
  int v863;
  int v864;
  int v865;
  float v866;
  float v867;
  float v868;
  float v869;
  uint64_t v870;
  _QWORD *v871;
  uint64_t v872;
  uint64_t v873;
  unint64_t v874;
  unint64_t v875;
  float v876;
  float v877;
  float v878;
  float v879;
  float v880;
  float v881;
  float v882;
  float v883;
  float v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  unsigned int v888;
  uint64_t v889;
  float v890;
  float v891;
  float v892;
  unsigned int v893;
  float v894;
  unsigned int v895;
  float v896;
  unsigned int v897;
  float v898;
  unsigned int v899;
  float v900;
  float v901;
  float v902;
  float v903;
  float v904;
  float v905;
  float v906;
  float v907;
  float v908;
  float v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  unsigned int v913;
  uint64_t v914;
  float v915;
  float v916;
  float v917;
  float v918;
  float v919;
  unsigned int v920;
  unsigned int v921;
  unsigned int v922;
  float v923;
  unsigned int v924;
  float v925;
  float v926;
  float v927;
  float v928;
  float v929;
  float v930;
  float v931;
  float v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  unsigned int v936;
  uint64_t v937;
  float v938;
  float v939;
  float v940;
  unsigned int v941;
  float v942;
  unsigned int v943;
  float v944;
  unsigned int v945;
  float v946;
  unsigned int v947;
  float v948;
  float v949;
  float v950;
  float v951;
  float v952;
  float v953;
  float v954;
  float v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  unsigned int v959;
  uint64_t v960;
  float v961;
  float v962;
  float v963;
  float v964;
  float v965;
  unsigned int v966;
  unsigned int v967;
  unsigned int v968;
  float v969;
  unsigned int v970;
  float v971;
  float v972;
  float v973;
  float v974;
  float v975;
  float v976;
  float v977;
  float v978;
  float v979;
  uint64_t v980;
  float v981;
  uint64_t v982;
  uint64_t v983;
  unsigned int v984;
  uint64_t v985;
  float v986;
  float v987;
  unsigned int v988;
  float v989;
  float v990;
  unsigned int v991;
  float v992;
  float v993;
  float v994;
  float v995;
  unsigned int v996;
  float v997;
  float v998;
  float v999;
  float v1000;
  float v1001;
  uint64_t v1002;
  float v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  float v1008;
  float v1009;
  unsigned int v1010;
  float v1011;
  float v1012;
  unsigned int v1013;
  float v1014;
  float v1015;
  float v1016;
  float v1017;
  unsigned int v1018;
  float v1019;
  int v1020;
  int v1021;
  int v1022;
  int v1023;
  int v1024;
  uint64_t v1025;
  float v1026;
  float v1027;
  float v1028;
  float v1029;
  _QWORD *v1030;
  uint64_t v1031;
  uint64_t v1032;
  unint64_t v1033;
  unint64_t v1034;
  float v1035;
  float v1036;
  float v1037;
  float v1038;
  float v1039;
  float v1040;
  float v1041;
  float v1042;
  float v1043;
  float v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  unsigned int v1048;
  uint64_t v1049;
  float v1050;
  float v1051;
  float v1052;
  float v1053;
  float v1054;
  unsigned int v1055;
  unsigned int v1056;
  float v1057;
  float v1058;
  unsigned int v1059;
  float v1060;
  unsigned int v1061;
  float v1062;
  float v1063;
  float v1064;
  float v1065;
  float v1066;
  float v1067;
  float v1068;
  float v1069;
  float v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  unsigned int v1074;
  uint64_t v1075;
  float v1076;
  float v1077;
  float v1078;
  unsigned int v1079;
  float v1080;
  unsigned int v1081;
  float v1082;
  unsigned int v1083;
  float v1084;
  unsigned int v1085;
  float v1086;
  float v1087;
  int v1088;
  float v1089;
  float v1090;
  float v1091;
  float v1092;
  float v1093;
  float v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  unsigned int v1098;
  uint64_t v1099;
  float v1100;
  float v1101;
  float v1102;
  float v1103;
  float v1104;
  unsigned int v1105;
  unsigned int v1106;
  float v1107;
  float v1108;
  unsigned int v1109;
  float v1110;
  float v1111;
  unsigned int v1112;
  float v1113;
  float v1114;
  float v1115;
  float v1116;
  float v1117;
  uint64_t v1118;
  float v1119;
  uint64_t v1120;
  uint64_t v1121;
  unsigned int v1122;
  uint64_t v1123;
  float v1124;
  float v1125;
  unsigned int v1126;
  float v1127;
  float v1128;
  unsigned int v1129;
  float v1130;
  float v1131;
  float v1132;
  float v1133;
  unsigned int v1134;
  float v1135;
  float v1136;
  float v1137;
  float v1138;
  float v1139;
  float v1140;
  uint64_t v1141;
  float v1142;
  uint64_t v1143;
  uint64_t v1144;
  unsigned int v1145;
  uint64_t v1146;
  float v1147;
  float v1148;
  unsigned int v1149;
  float v1150;
  float v1151;
  unsigned int v1152;
  float v1153;
  float v1154;
  float v1155;
  float v1156;
  unsigned int v1157;
  float v1158;
  float v1159;
  float v1160;
  float v1161;
  float v1162;
  float v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  float v1169;
  float v1170;
  float32x2_t v1171;
  unsigned int v1172;
  float v1173;
  unsigned int v1174;
  float v1175;
  float v1176;
  float v1177;
  unsigned int v1178;
  unsigned int v1179;
  float32x2_t v1180;
  float32x2_t v1181;
  float32x2_t v1182;
  float32x2_t v1183;
  float v1184;
  float v1185;
  float32x2_t v1186;
  int32x2_t v1187;
  float v1188;
  float v1189;
  BOOL v1190;
  float v1191;
  float v1192;
  float v1193;
  __int16 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  __int128 v1200;
  __int128 v1201;
  __int128 v1202;
  _WORD v1203[15];

  memset(v1203, 0, sizeof(v1203));
  v14 = a6 * a8;
  v1202 = 0u;
  v1201 = 0u;
  v1200 = 0u;
  v1199 = 0u;
  v1198 = 0u;
  v1197 = 0u;
  v15 = a3 + 8;
  v16 = *(_DWORD *)(a3 + 24);
  v17 = *(_DWORD *)(a3 + 32);
  v18 = sub_20E7F9528(a3 + 8);
  v19 = (float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v14) & 0x807FFFFF | 0x3F800000) * -0.33333) + 2.0)
                              * COERCE_FLOAT(LODWORD(v14) & 0x807FFFFF | 0x3F800000))
                      + -1.6667)
              + (float)((LODWORD(v14) >> 23) - 127))
      * 0.69315;
  v20 = vcvtms_s32_f32((float)(v19 - *(float *)(a3 + 112)) * *(float *)(a3 + 108));
  if (v20 < 0)
  {
    v21 = 0;
    v22 = 0;
  }
  else if (v18 * v16 <= v20)
  {
    v21 = v16 - 1;
    v22 = v17 - 1;
  }
  else
  {
    v21 = v20 / v18;
    v22 = v20 % v18;
  }
  v23 = a6 * a7;
  v24 = 1.0 / (float)(1 << v21);
  v25 = v24 * a4;
  v26 = v24 * a5;
  v27 = *(_QWORD *)(a3 + 32);
  v28 = (_QWORD *)(*(_QWORD *)(a3 + 56) + 144 * (v27 * v21 + v22));
  v29 = v28[9];
  v31 = v28[4];
  v30 = v28[5];
  v32 = v28[6];
  v33 = v25 + 0.0;
  v34 = (float)v31 + -1.001;
  if (v34 >= v33)
    v34 = v33;
  if (v33 >= 0.0)
    v35 = v34;
  else
    v35 = 0.0;
  v36 = v26 + 0.0;
  v37 = (float)v32 + -1.001;
  if (v37 >= v36)
    v37 = v36;
  if (v36 >= 0.0)
    v38 = v37;
  else
    v38 = 0.0;
  v39 = v35;
  v40 = v38;
  v41 = (v39 + 1);
  v42 = v29 + v30 * v40;
  v43 = v42 + v30;
  v44 = (float)v41 - v35;
  v45 = (float)(v40 + 1) - v38;
  v46 = v44 * v45;
  *(float *)&v47 = v35 - (float)v35;
  v48 = *(float *)&v47 * v45;
  *(float *)&v49 = (float)v38;
  v50 = v38 - *(float *)&v49;
  *(float *)&v51 = v44 * v50;
  v52 = *(float *)&v47 * v50;
  LOBYTE(v47) = *(_BYTE *)(v42 + v39);
  LOBYTE(v49) = *(_BYTE *)(v42 + v41);
  *(float *)&v53 = v48 * (float)v49;
  v54 = *(float *)&v53 + (float)(v46 * (float)v47);
  LOBYTE(v53) = *(_BYTE *)(v43 + v39);
  v55 = v54 + (float)(*(float *)&v51 * (float)v53);
  LOBYTE(v51) = *(_BYTE *)(v43 + v41);
  v1196 = (int)(float)((float)(v55 + (float)(v52 * (float)v51)) * 255.0);
  v56 = *(_DWORD *)(a3 + 24);
  v57 = sub_20E7F9528(v15);
  v58 = vcvtms_s32_f32((float)(v19 - *(float *)(a3 + 112)) * *(float *)(a3 + 108));
  if (v58 < 0)
  {
    v60 = 0;
    v59 = 0;
  }
  else if (v57 * v56 <= v58)
  {
    v59 = v56 - 1;
    v60 = v27 - 1;
  }
  else
  {
    v59 = v58 / v57;
    v60 = v58 % v57;
  }
  v61 = (float)(1 << v59);
  v62 = (float)(1.0 / v61) * a4;
  v63 = (float)(1.0 / v61) * a5;
  v64 = v23 / v61;
  v65 = *(_QWORD *)(a3 + 32);
  v66 = (_QWORD *)(*(_QWORD *)(a3 + 56) + 144 * (v65 * v59 + v60));
  v67 = v66[9];
  v69 = v66[4];
  v68 = v66[5];
  v70 = v66[6];
  v71 = v62 + (float)(v64 * -0.5);
  v72 = v64 * 0.0;
  v73 = v71 + (float)((float)(v64 * 0.0) * 0.70711);
  v74 = (float)v69 + -1.001;
  if (v74 >= v73)
    v75 = v71 + (float)((float)(v64 * 0.0) * 0.70711);
  else
    v75 = (float)v69 + -1.001;
  if (v73 >= 0.0)
    v76 = v75;
  else
    v76 = 0.0;
  v77 = v63 + (float)(v72 * -0.5);
  v78 = v77 + (float)(v64 * 0.70711);
  v79 = (float)v70 + -1.001;
  if (v79 >= v78)
    v80 = v77 + (float)(v64 * 0.70711);
  else
    v80 = (float)v70 + -1.001;
  if (v78 < 0.0)
    v80 = 0.0;
  v81 = v76;
  v82 = v80;
  v83 = (v81 + 1);
  v84 = v82 + 1;
  v85 = v67 + v68 * v82;
  v86 = (float)v83 - v76;
  v87 = (float)v84 - v80;
  v88 = v86 * v87;
  *(float *)&v89 = v76 - (float)v76;
  v90 = *(float *)&v89 * v87;
  *(float *)&v91 = (float)v80;
  v92 = v80 - *(float *)&v91;
  *(float *)&v93 = v86 * v92;
  v94 = *(float *)&v89 * v92;
  LOBYTE(v89) = *(_BYTE *)(v85 + v81);
  LOBYTE(v91) = *(_BYTE *)(v85 + v83);
  *(float *)&v95 = v90 * (float)v91;
  v96 = *(float *)&v95 + (float)(v88 * (float)v89);
  LOBYTE(v95) = *(_BYTE *)(v85 + v68 + v81);
  v97 = v96 + (float)(*(float *)&v93 * (float)v95);
  LOBYTE(v93) = *(_BYTE *)(v85 + v68 + v83);
  HIWORD(v1197) = (int)(float)((float)(v97 + (float)(v94 * (float)v93)) * 255.0);
  v98 = v62 + (float)(v64 * 0.5);
  v99 = v98 + (float)(v72 * 0.70711);
  if (v74 >= v99)
    v100 = v98 + (float)(v72 * 0.70711);
  else
    v100 = v74;
  if (v99 < 0.0)
    v100 = 0.0;
  v101 = v63 + (float)(v72 * 0.5);
  v102 = v101 + (float)(v64 * 0.70711);
  if (v79 >= v102)
    v103 = v101 + (float)(v64 * 0.70711);
  else
    v103 = v79;
  v104 = v100;
  if (v102 >= 0.0)
    v105 = v103;
  else
    v105 = 0.0;
  v106 = v105;
  v107 = (v104 + 1);
  v108 = v106 + 1;
  v109 = v67 + v68 * v106;
  v110 = (float)v107 - v100;
  v111 = (float)v108 - v105;
  *(float *)&v112 = v110 * v111;
  v113 = v100 - (float)v100;
  v114 = v113 * v111;
  *(float *)&v115 = (float)v105;
  v116 = v105 - *(float *)&v115;
  v117 = v110 * v116;
  LOBYTE(v115) = *(_BYTE *)(v109 + v104);
  v118 = v113 * v116;
  v119 = (float)v115;
  LOBYTE(v115) = *(_BYTE *)(v109 + v107);
  *(float *)&v120 = v114 * (float)v115;
  v121 = *(float *)&v120 + (float)(*(float *)&v112 * v119);
  LOBYTE(v120) = *(_BYTE *)(v109 + v68 + v104);
  LOBYTE(v112) = *(_BYTE *)(v109 + v68 + v107);
  LOWORD(v1198) = (int)(float)((float)((float)(v121 + (float)(v117 * (float)v120)) + (float)(v118 * (float)v112)) * 255.0);
  v122 = (float)(v64 + v62) + (float)(v72 * 0.0);
  if (v74 >= v122)
    v123 = (float)(v64 + v62) + (float)(v72 * 0.0);
  else
    v123 = v74;
  if (v122 >= 0.0)
    v124 = v123;
  else
    v124 = 0.0;
  v125 = (float)(v72 + v63) + (float)(v64 * 0.0);
  if (v79 >= v125)
    v126 = (float)(v72 + v63) + (float)(v64 * 0.0);
  else
    v126 = v79;
  if (v125 >= 0.0)
    v127 = v126;
  else
    v127 = 0.0;
  v128 = v124;
  v129 = v127;
  v130 = (v128 + 1);
  v131 = v129 + 1;
  v132 = v67 + v68 * v129;
  v133 = (float)v130 - v124;
  v134 = (float)v131 - v127;
  v135 = v133 * v134;
  v136 = v124 - (float)v124;
  v137 = v136 * v134;
  *(float *)&v138 = (float)v127;
  *(float *)&v139 = v127 - *(float *)&v138;
  *(float *)&v140 = v133 * *(float *)&v139;
  v141 = v136 * *(float *)&v139;
  LOBYTE(v139) = *(_BYTE *)(v132 + v128);
  LOBYTE(v138) = *(_BYTE *)(v132 + v130);
  *(float *)&v142 = v137 * (float)v138;
  v143 = *(float *)&v142 + (float)(v135 * (float)v139);
  LOBYTE(v142) = *(_BYTE *)(v132 + v68 + v128);
  v144 = v143 + (float)(*(float *)&v140 * (float)v142);
  LOBYTE(v140) = *(_BYTE *)(v132 + v68 + v130);
  v145 = (int)(float)((float)(v144 + (float)(v141 * (float)v140)) * 255.0);
  v146 = v98 + (float)(v72 * -0.70711);
  if (v74 >= v146)
    v147 = v146;
  else
    v147 = v74;
  if (v146 >= 0.0)
    v148 = v147;
  else
    v148 = 0.0;
  v149 = v101 + (float)(v64 * -0.70711);
  if (v79 >= v149)
    v150 = v149;
  else
    v150 = v79;
  if (v149 >= 0.0)
    v151 = v150;
  else
    v151 = 0.0;
  v152 = v148;
  v153 = v151;
  WORD1(v1198) = v145;
  v154 = (v152 + 1);
  v155 = v153 + 1;
  v156 = v67 + v68 * v153;
  v157 = (float)v154 - v148;
  v158 = (float)v155 - v151;
  v159 = v157 * v158;
  v160 = v148 - (float)v148;
  v161 = v160 * v158;
  *(float *)&v162 = (float)v151;
  *(float *)&v163 = v151 - *(float *)&v162;
  *(float *)&v164 = v157 * *(float *)&v163;
  v165 = v160 * *(float *)&v163;
  LOBYTE(v163) = *(_BYTE *)(v156 + v152);
  LOBYTE(v162) = *(_BYTE *)(v156 + v154);
  *(float *)&v166 = (float)v162;
  v167 = v161 * *(float *)&v166;
  LOBYTE(v166) = *(_BYTE *)(v156 + v68 + v152);
  v168 = (float)(v167 + (float)(v159 * (float)v163)) + (float)(*(float *)&v164 * (float)v166);
  LOBYTE(v164) = *(_BYTE *)(v156 + v68 + v154);
  v169 = (int)(float)((float)(v168 + (float)(v165 * (float)v164)) * 255.0);
  v170 = v71 + (float)(v72 * -0.70711);
  if (v74 >= v170)
    v171 = v170;
  else
    v171 = v74;
  if (v170 >= 0.0)
    v172 = v171;
  else
    v172 = 0.0;
  v173 = v77 + (float)(v64 * -0.70711);
  if (v79 >= v173)
    v174 = v173;
  else
    v174 = v79;
  if (v173 >= 0.0)
    v175 = v174;
  else
    v175 = 0.0;
  v176 = v172;
  v177 = v175;
  WORD2(v1198) = v169;
  v178 = (v176 + 1);
  v179 = v177 + 1;
  v180 = v67 + v68 * v177;
  v181 = (float)v178 - v172;
  v182 = (float)v179 - v175;
  v183 = v181 * v182;
  v184 = v172 - (float)v172;
  v185 = v184 * v182;
  *(float *)&v186 = (float)v175;
  *(float *)&v187 = v175 - *(float *)&v186;
  *(float *)&v188 = v181 * *(float *)&v187;
  v189 = v184 * *(float *)&v187;
  LOBYTE(v187) = *(_BYTE *)(v180 + v176);
  LOBYTE(v186) = *(_BYTE *)(v180 + v178);
  *(float *)&v190 = (float)v186;
  v191 = v185 * *(float *)&v190;
  LOBYTE(v190) = *(_BYTE *)(v180 + v68 + v176);
  v192 = (float)(v191 + (float)(v183 * (float)v187)) + (float)(*(float *)&v188 * (float)v190);
  LOBYTE(v188) = *(_BYTE *)(v180 + v68 + v178);
  WORD3(v1198) = (int)(float)((float)(v192 + (float)(v189 * (float)v188)) * 255.0);
  v193 = (float)(v62 - v64) + (float)(v72 * 0.0);
  if (v74 >= v193)
    v74 = v193;
  if (v193 >= 0.0)
    v194 = v74;
  else
    v194 = 0.0;
  v195 = (float)(v63 - v72) + (float)(v64 * 0.0);
  if (v79 >= v195)
    v196 = v195;
  else
    v196 = v79;
  v197 = v194;
  if (v195 >= 0.0)
    v198 = v196;
  else
    v198 = 0.0;
  v199 = v198;
  v200 = (v197 + 1);
  v201 = v67 + v68 * v199;
  v202 = v201 + v68;
  v203 = (float)v200 - v194;
  v204 = (float)(v199 + 1) - v198;
  *(float *)&v205 = v203 * v204;
  v206 = v194 - (float)v194;
  v207 = v206 * v204;
  *(float *)&v208 = (float)v198;
  v209 = v198 - *(float *)&v208;
  v210 = v203 * v209;
  LOBYTE(v208) = *(_BYTE *)(v201 + v197);
  v211 = v206 * v209;
  v212 = (float)v208;
  LOBYTE(v208) = *(_BYTE *)(v201 + v200);
  *(float *)&v213 = v207 * (float)v208;
  v214 = *(float *)&v213 + (float)(*(float *)&v205 * v212);
  LOBYTE(v213) = *(_BYTE *)(v202 + v197);
  LOBYTE(v205) = *(_BYTE *)(v202 + v200);
  WORD4(v1198) = (int)(float)((float)((float)(v214 + (float)(v210 * (float)v213)) + (float)(v211 * (float)v205)) * 255.0);
  v215 = v23 * 1.4142;
  v216 = v14 * 1.4142;
  v217 = *(_DWORD *)(a3 + 24);
  v218 = sub_20E7F9528(v15);
  v219 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v216) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v216) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v216) >> 23) - 127))* 0.69315)- *(float *)(a3 + 112))* *(float *)(a3 + 108));
  if (v219 < 0)
  {
    v221 = 0;
    v220 = 0;
  }
  else if (v218 * v217 <= v219)
  {
    v220 = v217 - 1;
    v221 = v65 - 1;
  }
  else
  {
    v220 = v219 / v218;
    v221 = v219 % v218;
  }
  v222 = (float)(1 << v220);
  v223 = (float)(1.0 / v222) * a4;
  v224 = (float)(1.0 / v222) * a5;
  v225 = v215 / v222;
  v226 = *(_QWORD *)(a3 + 32);
  v227 = (_QWORD *)(*(_QWORD *)(a3 + 56) + 144 * (v226 * v220 + v221));
  v228 = v227[9];
  v230 = v227[4];
  v229 = v227[5];
  v231 = v227[6];
  v232 = v223 + (float)(v225 * 0.0);
  v233 = v225 * 0.0;
  v234 = v232 - (float)(v225 * 0.0);
  v235 = (float)v230 + -1.001;
  if (v235 >= v234)
    v236 = v232 - (float)(v225 * 0.0);
  else
    v236 = (float)v230 + -1.001;
  if (v234 >= 0.0)
    v237 = v236;
  else
    v237 = 0.0;
  v238 = v224 + (float)(v233 * 0.0);
  v239 = (float)v231 + -1.001;
  if (v239 >= (float)(v238 - v225))
    v240 = v238 - v225;
  else
    v240 = (float)v231 + -1.001;
  if ((float)(v238 - v225) < 0.0)
    v240 = 0.0;
  v241 = v237;
  v242 = v240;
  v243 = (v241 + 1);
  v244 = v242 + 1;
  v245 = v228 + v229 * v242;
  v246 = (float)v243 - v237;
  v247 = (float)v244 - v240;
  v248 = v246 * v247;
  *(float *)&v249 = v237 - (float)v237;
  v250 = *(float *)&v249 * v247;
  *(float *)&v251 = (float)v240;
  v252 = v240 - *(float *)&v251;
  *(float *)&v253 = v246 * v252;
  v254 = *(float *)&v249 * v252;
  LOBYTE(v249) = *(_BYTE *)(v245 + v241);
  LOBYTE(v251) = *(_BYTE *)(v245 + v243);
  *(float *)&v255 = v250 * (float)v251;
  v256 = *(float *)&v255 + (float)(v248 * (float)v249);
  LOBYTE(v255) = *(_BYTE *)(v245 + v229 + v241);
  v257 = v256 + (float)(*(float *)&v253 * (float)v255);
  LOBYTE(v253) = *(_BYTE *)(v245 + v229 + v243);
  HIWORD(v1198) = (int)(float)((float)(v257 + (float)(v254 * (float)v253)) * 255.0);
  v258 = v223 + (float)(v225 * 0.70711);
  v259 = v258 + (float)(v233 * 0.5);
  if (v235 >= v259)
    v260 = v258 + (float)(v233 * 0.5);
  else
    v260 = v235;
  if (v259 >= 0.0)
    v261 = v260;
  else
    v261 = 0.0;
  v262 = v224 + (float)(v233 * 0.70711);
  v263 = v262 + (float)(v225 * 0.5);
  if (v239 >= v263)
    v264 = v262 + (float)(v225 * 0.5);
  else
    v264 = v239;
  if (v263 >= 0.0)
    v265 = v264;
  else
    v265 = 0.0;
  v266 = v261;
  v267 = v265;
  v268 = (v266 + 1);
  v269 = v267 + 1;
  v270 = v228 + v229 * v267;
  v271 = (float)v268 - v261;
  v272 = (float)v269 - v265;
  v273 = v271 * v272;
  v274 = v261 - (float)v261;
  v275 = v274 * v272;
  *(float *)&v276 = (float)v265;
  *(float *)&v277 = v265 - *(float *)&v276;
  *(float *)&v278 = v271 * *(float *)&v277;
  v279 = v274 * *(float *)&v277;
  LOBYTE(v277) = *(_BYTE *)(v270 + v266);
  LOBYTE(v276) = *(_BYTE *)(v270 + v268);
  *(float *)&v280 = v275 * (float)v276;
  v281 = *(float *)&v280 + (float)(v273 * (float)v277);
  LOBYTE(v280) = *(_BYTE *)(v270 + v229 + v266);
  v282 = v281 + (float)(*(float *)&v278 * (float)v280);
  LOBYTE(v278) = *(_BYTE *)(v270 + v229 + v268);
  LOWORD(v1199) = (int)(float)((float)(v282 + (float)(v279 * (float)v278)) * 255.0);
  v283 = v258 + (float)(v233 * -0.5);
  if (v235 >= v283)
    v284 = v283;
  else
    v284 = v235;
  if (v283 >= 0.0)
    v285 = v284;
  else
    v285 = 0.0;
  v286 = v262 + (float)(v225 * -0.5);
  if (v239 >= v286)
    v287 = v286;
  else
    v287 = v239;
  if (v286 >= 0.0)
    v288 = v287;
  else
    v288 = 0.0;
  v289 = v285;
  v290 = v288;
  v291 = (v289 + 1);
  v292 = v290 + 1;
  v293 = v228 + v229 * v290;
  v294 = (float)v291 - v285;
  v295 = (float)v292 - v288;
  v296 = v294 * v295;
  *(float *)&v297 = v285 - (float)v285;
  v298 = *(float *)&v297 * v295;
  *(float *)&v299 = (float)v288;
  v300 = v288 - *(float *)&v299;
  *(float *)&v301 = v294 * v300;
  v302 = *(float *)&v297 * v300;
  LOBYTE(v297) = *(_BYTE *)(v293 + v289);
  LOBYTE(v299) = *(_BYTE *)(v293 + v291);
  *(float *)&v303 = v298 * (float)v299;
  v304 = *(float *)&v303 + (float)(v296 * (float)v297);
  LOBYTE(v303) = *(_BYTE *)(v293 + v229 + v289);
  v305 = v304 + (float)(*(float *)&v301 * (float)v303);
  LOBYTE(v301) = *(_BYTE *)(v293 + v229 + v291);
  WORD1(v1199) = (int)(float)((float)(v305 + (float)(v302 * (float)v301)) * 255.0);
  v306 = v233 + v232;
  if (v235 >= v306)
    v307 = v306;
  else
    v307 = v235;
  if (v306 >= 0.0)
    v308 = v307;
  else
    v308 = 0.0;
  v309 = v225 + v238;
  if (v239 >= v309)
    v310 = v309;
  else
    v310 = v239;
  if (v309 >= 0.0)
    v311 = v310;
  else
    v311 = 0.0;
  v312 = v308;
  v313 = v311;
  v314 = (v312 + 1);
  v315 = v313 + 1;
  v316 = v228 + v229 * v313;
  v317 = (float)v314 - v308;
  v318 = (float)v315 - v311;
  v319 = v317 * v318;
  v320 = v308 - (float)v308;
  v321 = v320 * v318;
  *(float *)&v322 = (float)v311;
  *(float *)&v323 = v311 - *(float *)&v322;
  *(float *)&v324 = v317 * *(float *)&v323;
  v325 = v320 * *(float *)&v323;
  LOBYTE(v323) = *(_BYTE *)(v316 + v312);
  LOBYTE(v322) = *(_BYTE *)(v316 + v314);
  *(float *)&v326 = v321 * (float)v322;
  v327 = *(float *)&v326 + (float)(v319 * (float)v323);
  LOBYTE(v326) = *(_BYTE *)(v316 + v229 + v312);
  v328 = v327 + (float)(*(float *)&v324 * (float)v326);
  LOBYTE(v324) = *(_BYTE *)(v316 + v229 + v314);
  WORD2(v1199) = (int)(float)((float)(v328 + (float)(v325 * (float)v324)) * 255.0);
  v329 = v223 + (float)(v225 * -0.70711);
  v330 = v329 + (float)(v233 * -0.5);
  if (v235 >= v330)
    v331 = v329 + (float)(v233 * -0.5);
  else
    v331 = v235;
  if (v330 >= 0.0)
    v332 = v331;
  else
    v332 = 0.0;
  v333 = v224 + (float)(v233 * -0.70711);
  v334 = v333 + (float)(v225 * -0.5);
  if (v239 >= v334)
    v335 = v333 + (float)(v225 * -0.5);
  else
    v335 = v239;
  v336 = v332;
  if (v334 >= 0.0)
    v337 = v335;
  else
    v337 = 0.0;
  v338 = v337;
  v339 = (v336 + 1);
  v340 = v338 + 1;
  v341 = v228 + v229 * v338;
  v342 = (float)v339 - v332;
  v343 = (float)v340 - v337;
  *(float *)&v344 = v342 * v343;
  v345 = v332 - (float)v332;
  v346 = v345 * v343;
  *(float *)&v347 = (float)v337;
  v348 = v337 - *(float *)&v347;
  v349 = v342 * v348;
  LOBYTE(v347) = *(_BYTE *)(v341 + v336);
  v350 = v345 * v348;
  v351 = (float)v347;
  LOBYTE(v347) = *(_BYTE *)(v341 + v339);
  *(float *)&v352 = v346 * (float)v347;
  v353 = *(float *)&v352 + (float)(*(float *)&v344 * v351);
  LOBYTE(v352) = *(_BYTE *)(v341 + v229 + v336);
  LOBYTE(v344) = *(_BYTE *)(v341 + v229 + v339);
  WORD3(v1199) = (int)(float)((float)((float)(v353 + (float)(v349 * (float)v352)) + (float)(v350 * (float)v344)) * 255.0);
  v354 = v329 + (float)(v233 * 0.5);
  if (v235 >= v354)
    v235 = v354;
  if (v354 >= 0.0)
    v355 = v235;
  else
    v355 = 0.0;
  v356 = v333 + (float)(v225 * 0.5);
  if (v239 >= v356)
    v357 = v356;
  else
    v357 = v239;
  v358 = v355;
  if (v356 >= 0.0)
    v359 = v357;
  else
    v359 = 0.0;
  v360 = v359;
  v361 = (v358 + 1);
  v362 = v228 + v229 * v360;
  v363 = v362 + v229;
  v364 = (float)v361 - v355;
  v365 = (float)(v360 + 1) - v359;
  *(float *)&v366 = v364 * v365;
  v367 = v355 - (float)v355;
  v368 = v367 * v365;
  *(float *)&v369 = (float)v359;
  v370 = v359 - *(float *)&v369;
  v371 = v364 * v370;
  LOBYTE(v369) = *(_BYTE *)(v362 + v358);
  v372 = v367 * v370;
  v373 = (float)v369;
  LOBYTE(v369) = *(_BYTE *)(v362 + v361);
  *(float *)&v374 = v368 * (float)v369;
  v375 = *(float *)&v374 + (float)(*(float *)&v366 * v373);
  LOBYTE(v374) = *(_BYTE *)(v363 + v358);
  LOBYTE(v366) = *(_BYTE *)(v363 + v361);
  WORD4(v1199) = (int)(float)((float)((float)(v375 + (float)(v371 * (float)v374)) + (float)(v372 * (float)v366)) * 255.0);
  v376 = v215 * 1.4142;
  v377 = v216 * 1.4142;
  v378 = *(_DWORD *)(a3 + 24);
  v379 = sub_20E7F9528(v15);
  v380 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v377) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v377) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v377) >> 23) - 127))* 0.69315)- *(float *)(a3 + 112))* *(float *)(a3 + 108));
  if (v380 < 0)
  {
    v382 = 0;
    v381 = 0;
  }
  else if (v379 * v378 <= v380)
  {
    v381 = v378 - 1;
    v382 = v226 - 1;
  }
  else
  {
    v381 = v380 / v379;
    v382 = v380 % v379;
  }
  v383 = (float)(1 << v381);
  v384 = (float)(1.0 / v383) * a4;
  v385 = (float)(1.0 / v383) * a5;
  v386 = v376 / v383;
  v387 = *(_QWORD *)(a3 + 32);
  v388 = (_QWORD *)(*(_QWORD *)(a3 + 56) + 144 * (v387 * v381 + v382));
  v389 = v388[9];
  v391 = v388[4];
  v390 = v388[5];
  v392 = v388[6];
  v393 = v384 + (float)(v386 * -0.5);
  v394 = v386 * 0.0;
  v395 = v393 + (float)((float)(v386 * 0.0) * 0.70711);
  v396 = (float)v391 + -1.001;
  if (v396 >= v395)
    v397 = v393 + (float)((float)(v386 * 0.0) * 0.70711);
  else
    v397 = (float)v391 + -1.001;
  if (v395 >= 0.0)
    v398 = v397;
  else
    v398 = 0.0;
  v399 = v385 + (float)(v394 * -0.5);
  v400 = v399 + (float)(v386 * 0.70711);
  v401 = (float)v392 + -1.001;
  if (v401 >= v400)
    v402 = v399 + (float)(v386 * 0.70711);
  else
    v402 = (float)v392 + -1.001;
  if (v400 < 0.0)
    v402 = 0.0;
  v403 = v398;
  v404 = v402;
  v405 = (v403 + 1);
  v406 = v404 + 1;
  v407 = v389 + v390 * v404;
  v408 = (float)v405 - v398;
  v409 = (float)v406 - v402;
  v410 = v408 * v409;
  *(float *)&v411 = v398 - (float)v398;
  v412 = *(float *)&v411 * v409;
  *(float *)&v413 = (float)v402;
  v414 = v402 - *(float *)&v413;
  *(float *)&v415 = v408 * v414;
  v416 = *(float *)&v411 * v414;
  LOBYTE(v411) = *(_BYTE *)(v407 + v403);
  LOBYTE(v413) = *(_BYTE *)(v407 + v405);
  *(float *)&v417 = v412 * (float)v413;
  v418 = *(float *)&v417 + (float)(v410 * (float)v411);
  LOBYTE(v417) = *(_BYTE *)(v407 + v390 + v403);
  v419 = v418 + (float)(*(float *)&v415 * (float)v417);
  LOBYTE(v415) = *(_BYTE *)(v407 + v390 + v405);
  HIWORD(v1199) = (int)(float)((float)(v419 + (float)(v416 * (float)v415)) * 255.0);
  v420 = v384 + (float)(v386 * 0.5);
  v421 = v420 + (float)(v394 * 0.70711);
  if (v396 >= v421)
    v422 = v420 + (float)(v394 * 0.70711);
  else
    v422 = v396;
  if (v421 < 0.0)
    v422 = 0.0;
  v423 = v385 + (float)(v394 * 0.5);
  v424 = v423 + (float)(v386 * 0.70711);
  if (v401 >= v424)
    v425 = v423 + (float)(v386 * 0.70711);
  else
    v425 = v401;
  v426 = v422;
  if (v424 >= 0.0)
    v427 = v425;
  else
    v427 = 0.0;
  v428 = v427;
  v429 = (v426 + 1);
  v430 = v428 + 1;
  v431 = v389 + v390 * v428;
  v432 = (float)v429 - v422;
  v433 = (float)v430 - v427;
  *(float *)&v434 = v432 * v433;
  v435 = v422 - (float)v422;
  v436 = v435 * v433;
  *(float *)&v437 = (float)v427;
  v438 = v427 - *(float *)&v437;
  v439 = v432 * v438;
  LOBYTE(v437) = *(_BYTE *)(v431 + v426);
  v440 = v435 * v438;
  v441 = (float)v437;
  LOBYTE(v437) = *(_BYTE *)(v431 + v429);
  *(float *)&v442 = v436 * (float)v437;
  v443 = *(float *)&v442 + (float)(*(float *)&v434 * v441);
  LOBYTE(v442) = *(_BYTE *)(v431 + v390 + v426);
  LOBYTE(v434) = *(_BYTE *)(v431 + v390 + v429);
  LOWORD(v1200) = (int)(float)((float)((float)(v443 + (float)(v439 * (float)v442)) + (float)(v440 * (float)v434)) * 255.0);
  v444 = (float)(v386 + v384) + (float)(v394 * 0.0);
  if (v396 >= v444)
    v445 = (float)(v386 + v384) + (float)(v394 * 0.0);
  else
    v445 = v396;
  if (v444 >= 0.0)
    v446 = v445;
  else
    v446 = 0.0;
  v447 = (float)(v394 + v385) + (float)(v386 * 0.0);
  if (v401 >= v447)
    v448 = (float)(v394 + v385) + (float)(v386 * 0.0);
  else
    v448 = v401;
  if (v447 >= 0.0)
    v449 = v448;
  else
    v449 = 0.0;
  v450 = v446;
  v451 = v449;
  v452 = (v450 + 1);
  v453 = v451 + 1;
  v454 = v389 + v390 * v451;
  v455 = (float)v452 - v446;
  v456 = (float)v453 - v449;
  v457 = v455 * v456;
  v458 = v446 - (float)v446;
  v459 = v458 * v456;
  *(float *)&v460 = (float)v449;
  *(float *)&v461 = v449 - *(float *)&v460;
  *(float *)&v462 = v455 * *(float *)&v461;
  v463 = v458 * *(float *)&v461;
  LOBYTE(v461) = *(_BYTE *)(v454 + v450);
  LOBYTE(v460) = *(_BYTE *)(v454 + v452);
  *(float *)&v464 = v459 * (float)v460;
  v465 = *(float *)&v464 + (float)(v457 * (float)v461);
  LOBYTE(v464) = *(_BYTE *)(v454 + v390 + v450);
  v466 = v465 + (float)(*(float *)&v462 * (float)v464);
  LOBYTE(v462) = *(_BYTE *)(v454 + v390 + v452);
  v467 = (int)(float)((float)(v466 + (float)(v463 * (float)v462)) * 255.0);
  v468 = v420 + (float)(v394 * -0.70711);
  if (v396 >= v468)
    v469 = v468;
  else
    v469 = v396;
  if (v468 >= 0.0)
    v470 = v469;
  else
    v470 = 0.0;
  v471 = v423 + (float)(v386 * -0.70711);
  if (v401 >= v471)
    v472 = v471;
  else
    v472 = v401;
  if (v471 >= 0.0)
    v473 = v472;
  else
    v473 = 0.0;
  v474 = v470;
  v475 = v473;
  WORD1(v1200) = v467;
  v476 = (v474 + 1);
  v477 = v475 + 1;
  v478 = v389 + v390 * v475;
  v479 = (float)v476 - v470;
  v480 = (float)v477 - v473;
  v481 = v479 * v480;
  v482 = v470 - (float)v470;
  v483 = v482 * v480;
  *(float *)&v484 = (float)v473;
  *(float *)&v485 = v473 - *(float *)&v484;
  *(float *)&v486 = v479 * *(float *)&v485;
  v487 = v482 * *(float *)&v485;
  LOBYTE(v485) = *(_BYTE *)(v478 + v474);
  LOBYTE(v484) = *(_BYTE *)(v478 + v476);
  *(float *)&v488 = (float)v484;
  v489 = v483 * *(float *)&v488;
  LOBYTE(v488) = *(_BYTE *)(v478 + v390 + v474);
  v490 = (float)(v489 + (float)(v481 * (float)v485)) + (float)(*(float *)&v486 * (float)v488);
  LOBYTE(v486) = *(_BYTE *)(v478 + v390 + v476);
  v491 = (int)(float)((float)(v490 + (float)(v487 * (float)v486)) * 255.0);
  v492 = v393 + (float)(v394 * -0.70711);
  if (v396 >= v492)
    v493 = v492;
  else
    v493 = v396;
  if (v492 >= 0.0)
    v494 = v493;
  else
    v494 = 0.0;
  v495 = v399 + (float)(v386 * -0.70711);
  if (v401 >= v495)
    v496 = v495;
  else
    v496 = v401;
  if (v495 >= 0.0)
    v497 = v496;
  else
    v497 = 0.0;
  v498 = v494;
  v499 = v497;
  WORD2(v1200) = v491;
  v500 = (v498 + 1);
  v501 = v499 + 1;
  v502 = v389 + v390 * v499;
  v503 = (float)v500 - v494;
  v504 = (float)v501 - v497;
  v505 = v503 * v504;
  v506 = v494 - (float)v494;
  v507 = v506 * v504;
  *(float *)&v508 = (float)v497;
  *(float *)&v509 = v497 - *(float *)&v508;
  *(float *)&v510 = v503 * *(float *)&v509;
  v511 = v506 * *(float *)&v509;
  LOBYTE(v509) = *(_BYTE *)(v502 + v498);
  LOBYTE(v508) = *(_BYTE *)(v502 + v500);
  *(float *)&v512 = (float)v508;
  v513 = v507 * *(float *)&v512;
  LOBYTE(v512) = *(_BYTE *)(v502 + v390 + v498);
  v514 = (float)(v513 + (float)(v505 * (float)v509)) + (float)(*(float *)&v510 * (float)v512);
  LOBYTE(v510) = *(_BYTE *)(v502 + v390 + v500);
  WORD3(v1200) = (int)(float)((float)(v514 + (float)(v511 * (float)v510)) * 255.0);
  v515 = (float)(v384 - v386) + (float)(v394 * 0.0);
  if (v396 >= v515)
    v396 = v515;
  if (v515 >= 0.0)
    v516 = v396;
  else
    v516 = 0.0;
  v517 = (float)(v385 - v394) + (float)(v386 * 0.0);
  if (v401 >= v517)
    v518 = v517;
  else
    v518 = v401;
  v519 = v516;
  if (v517 >= 0.0)
    v520 = v518;
  else
    v520 = 0.0;
  v521 = v520;
  v522 = (v519 + 1);
  v523 = v389 + v390 * v521;
  v524 = v523 + v390;
  v525 = (float)v522 - v516;
  v526 = (float)(v521 + 1) - v520;
  *(float *)&v527 = v525 * v526;
  v528 = v516 - (float)v516;
  v529 = v528 * v526;
  *(float *)&v530 = (float)v520;
  v531 = v520 - *(float *)&v530;
  v532 = v525 * v531;
  LOBYTE(v530) = *(_BYTE *)(v523 + v519);
  v533 = v528 * v531;
  v534 = (float)v530;
  LOBYTE(v530) = *(_BYTE *)(v523 + v522);
  *(float *)&v535 = v529 * (float)v530;
  v536 = *(float *)&v535 + (float)(*(float *)&v527 * v534);
  LOBYTE(v535) = *(_BYTE *)(v524 + v519);
  LOBYTE(v527) = *(_BYTE *)(v524 + v522);
  WORD4(v1200) = (int)(float)((float)((float)(v536 + (float)(v532 * (float)v535)) + (float)(v533 * (float)v527)) * 255.0);
  v537 = v376 * 1.4142;
  v538 = v377 * 1.4142;
  v539 = *(_DWORD *)(a3 + 24);
  v540 = sub_20E7F9528(v15);
  v541 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v538) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v538) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v538) >> 23) - 127))* 0.69315)- *(float *)(a3 + 112))* *(float *)(a3 + 108));
  if (v541 < 0)
  {
    v542 = 0;
    v543 = 0;
  }
  else if (v540 * v539 <= v541)
  {
    v542 = v539 - 1;
    v543 = v387 - 1;
  }
  else
  {
    v542 = v541 / v540;
    v543 = v541 % v540;
  }
  v544 = (float)(1 << v542);
  v545 = (float)(1.0 / v544) * a4;
  v546 = (float)(1.0 / v544) * a5;
  v547 = v537 / v544;
  v548 = *(_QWORD *)(a3 + 32);
  v549 = (_QWORD *)(*(_QWORD *)(a3 + 56) + 144 * (v548 * v542 + v543));
  v550 = v549[9];
  v552 = v549[4];
  v551 = v549[5];
  v553 = v549[6];
  v554 = v545 + (float)(v547 * 0.0);
  v555 = v547 * 0.0;
  v556 = v554 - (float)(v547 * 0.0);
  v557 = (float)v552 + -1.001;
  if (v557 >= v556)
    v558 = v554 - (float)(v547 * 0.0);
  else
    v558 = (float)v552 + -1.001;
  if (v556 >= 0.0)
    v559 = v558;
  else
    v559 = 0.0;
  v560 = v546 + (float)(v555 * 0.0);
  v561 = (float)v553 + -1.001;
  if (v561 >= (float)(v560 - v547))
    v562 = v560 - v547;
  else
    v562 = (float)v553 + -1.001;
  if ((float)(v560 - v547) < 0.0)
    v562 = 0.0;
  v563 = v559;
  v564 = v562;
  v565 = (v563 + 1);
  v566 = v564 + 1;
  v567 = v550 + v551 * v564;
  v568 = (float)v565 - v559;
  v569 = (float)v566 - v562;
  v570 = v568 * v569;
  *(float *)&v571 = v559 - (float)v559;
  v572 = *(float *)&v571 * v569;
  *(float *)&v573 = (float)v562;
  v574 = v562 - *(float *)&v573;
  *(float *)&v575 = v568 * v574;
  v576 = *(float *)&v571 * v574;
  LOBYTE(v571) = *(_BYTE *)(v567 + v563);
  LOBYTE(v573) = *(_BYTE *)(v567 + v565);
  *(float *)&v577 = v572 * (float)v573;
  v578 = *(float *)&v577 + (float)(v570 * (float)v571);
  LOBYTE(v577) = *(_BYTE *)(v567 + v551 + v563);
  v579 = v578 + (float)(*(float *)&v575 * (float)v577);
  LOBYTE(v575) = *(_BYTE *)(v567 + v551 + v565);
  HIWORD(v1200) = (int)(float)((float)(v579 + (float)(v576 * (float)v575)) * 255.0);
  v580 = v545 + (float)(v547 * 0.70711);
  v581 = v580 + (float)(v555 * 0.5);
  if (v557 >= v581)
    v582 = v580 + (float)(v555 * 0.5);
  else
    v582 = v557;
  if (v581 >= 0.0)
    v583 = v582;
  else
    v583 = 0.0;
  v584 = v546 + (float)(v555 * 0.70711);
  v585 = v584 + (float)(v547 * 0.5);
  if (v561 >= v585)
    v586 = v584 + (float)(v547 * 0.5);
  else
    v586 = v561;
  if (v585 >= 0.0)
    v587 = v586;
  else
    v587 = 0.0;
  v588 = v583;
  v589 = v587;
  v590 = (v588 + 1);
  v591 = v589 + 1;
  v592 = v550 + v551 * v589;
  v593 = (float)v590 - v583;
  v594 = (float)v591 - v587;
  v595 = v593 * v594;
  v596 = v583 - (float)v583;
  v597 = v596 * v594;
  *(float *)&v598 = (float)v587;
  *(float *)&v599 = v587 - *(float *)&v598;
  *(float *)&v600 = v593 * *(float *)&v599;
  v601 = v596 * *(float *)&v599;
  LOBYTE(v599) = *(_BYTE *)(v592 + v588);
  LOBYTE(v598) = *(_BYTE *)(v592 + v590);
  *(float *)&v602 = v597 * (float)v598;
  v603 = *(float *)&v602 + (float)(v595 * (float)v599);
  LOBYTE(v602) = *(_BYTE *)(v592 + v551 + v588);
  v604 = v603 + (float)(*(float *)&v600 * (float)v602);
  LOBYTE(v600) = *(_BYTE *)(v592 + v551 + v590);
  LOWORD(v1201) = (int)(float)((float)(v604 + (float)(v601 * (float)v600)) * 255.0);
  v605 = v580 + (float)(v555 * -0.5);
  if (v557 >= v605)
    v606 = v605;
  else
    v606 = v557;
  if (v605 >= 0.0)
    v607 = v606;
  else
    v607 = 0.0;
  v608 = v584 + (float)(v547 * -0.5);
  if (v561 >= v608)
    v609 = v608;
  else
    v609 = v561;
  if (v608 >= 0.0)
    v610 = v609;
  else
    v610 = 0.0;
  v611 = v607;
  v612 = v610;
  v613 = (v611 + 1);
  v614 = v612 + 1;
  v615 = v550 + v551 * v612;
  v616 = (float)v613 - v607;
  v617 = (float)v614 - v610;
  v618 = v616 * v617;
  *(float *)&v619 = v607 - (float)v607;
  v620 = *(float *)&v619 * v617;
  *(float *)&v621 = (float)v610;
  v622 = v610 - *(float *)&v621;
  *(float *)&v623 = v616 * v622;
  v624 = *(float *)&v619 * v622;
  LOBYTE(v619) = *(_BYTE *)(v615 + v611);
  LOBYTE(v621) = *(_BYTE *)(v615 + v613);
  *(float *)&v625 = v620 * (float)v621;
  v626 = *(float *)&v625 + (float)(v618 * (float)v619);
  LOBYTE(v625) = *(_BYTE *)(v615 + v551 + v611);
  v627 = v626 + (float)(*(float *)&v623 * (float)v625);
  LOBYTE(v623) = *(_BYTE *)(v615 + v551 + v613);
  WORD1(v1201) = (int)(float)((float)(v627 + (float)(v624 * (float)v623)) * 255.0);
  v628 = v555 + v554;
  if (v557 >= v628)
    v629 = v628;
  else
    v629 = v557;
  if (v628 >= 0.0)
    v630 = v629;
  else
    v630 = 0.0;
  v631 = v547 + v560;
  if (v561 >= v631)
    v632 = v631;
  else
    v632 = v561;
  if (v631 >= 0.0)
    v633 = v632;
  else
    v633 = 0.0;
  v634 = v630;
  v635 = v633;
  v636 = (v634 + 1);
  v637 = v635 + 1;
  v638 = v550 + v551 * v635;
  v639 = (float)v636 - v630;
  v640 = (float)v637 - v633;
  v641 = v639 * v640;
  v642 = v630 - (float)v630;
  v643 = v642 * v640;
  *(float *)&v644 = (float)v633;
  *(float *)&v645 = v633 - *(float *)&v644;
  *(float *)&v646 = v639 * *(float *)&v645;
  v647 = v642 * *(float *)&v645;
  LOBYTE(v645) = *(_BYTE *)(v638 + v634);
  LOBYTE(v644) = *(_BYTE *)(v638 + v636);
  *(float *)&v648 = v643 * (float)v644;
  v649 = *(float *)&v648 + (float)(v641 * (float)v645);
  LOBYTE(v648) = *(_BYTE *)(v638 + v551 + v634);
  v650 = v649 + (float)(*(float *)&v646 * (float)v648);
  LOBYTE(v646) = *(_BYTE *)(v638 + v551 + v636);
  WORD2(v1201) = (int)(float)((float)(v650 + (float)(v647 * (float)v646)) * 255.0);
  v651 = v545 + (float)(v547 * -0.70711);
  v652 = v651 + (float)(v555 * -0.5);
  if (v557 >= v652)
    v653 = v651 + (float)(v555 * -0.5);
  else
    v653 = v557;
  if (v652 >= 0.0)
    v654 = v653;
  else
    v654 = 0.0;
  v655 = v546 + (float)(v555 * -0.70711);
  v656 = v655 + (float)(v547 * -0.5);
  if (v561 >= v656)
    v657 = v655 + (float)(v547 * -0.5);
  else
    v657 = v561;
  v658 = v654;
  if (v656 >= 0.0)
    v659 = v657;
  else
    v659 = 0.0;
  v660 = v659;
  v661 = (v658 + 1);
  v662 = v660 + 1;
  v663 = v550 + v551 * v660;
  v664 = (float)v661 - v654;
  v665 = (float)v662 - v659;
  *(float *)&v666 = v664 * v665;
  v667 = v654 - (float)v654;
  v668 = v667 * v665;
  *(float *)&v669 = (float)v659;
  v670 = v659 - *(float *)&v669;
  v671 = v664 * v670;
  LOBYTE(v669) = *(_BYTE *)(v663 + v658);
  v672 = v667 * v670;
  v673 = (float)v669;
  LOBYTE(v669) = *(_BYTE *)(v663 + v661);
  *(float *)&v674 = v668 * (float)v669;
  v675 = *(float *)&v674 + (float)(*(float *)&v666 * v673);
  LOBYTE(v674) = *(_BYTE *)(v663 + v551 + v658);
  LOBYTE(v666) = *(_BYTE *)(v663 + v551 + v661);
  WORD3(v1201) = (int)(float)((float)((float)(v675 + (float)(v671 * (float)v674)) + (float)(v672 * (float)v666)) * 255.0);
  v676 = v651 + (float)(v555 * 0.5);
  if (v557 >= v676)
    v557 = v676;
  if (v676 >= 0.0)
    v677 = v557;
  else
    v677 = 0.0;
  v678 = v655 + (float)(v547 * 0.5);
  if (v561 >= v678)
    v679 = v678;
  else
    v679 = v561;
  v680 = v677;
  if (v678 >= 0.0)
    v681 = v679;
  else
    v681 = 0.0;
  v682 = v681;
  v683 = (v680 + 1);
  v684 = v550 + v551 * v682;
  v685 = v684 + v551;
  v686 = (float)v683 - v677;
  v687 = (float)(v682 + 1) - v681;
  *(float *)&v688 = v686 * v687;
  v689 = v677 - (float)v677;
  v690 = v689 * v687;
  *(float *)&v691 = (float)v681;
  v692 = v681 - *(float *)&v691;
  v693 = v686 * v692;
  LOBYTE(v691) = *(_BYTE *)(v684 + v680);
  v694 = v689 * v692;
  v695 = (float)v691;
  LOBYTE(v691) = *(_BYTE *)(v684 + v683);
  *(float *)&v696 = v690 * (float)v691;
  v697 = *(float *)&v696 + (float)(*(float *)&v688 * v695);
  LOBYTE(v696) = *(_BYTE *)(v685 + v680);
  LOBYTE(v688) = *(_BYTE *)(v685 + v683);
  WORD4(v1201) = (int)(float)((float)((float)(v697 + (float)(v693 * (float)v696)) + (float)(v694 * (float)v688)) * 255.0);
  v698 = v537 * 1.4142;
  v699 = v538 * 1.4142;
  v700 = *(_DWORD *)(a3 + 24);
  v701 = sub_20E7F9528(v15);
  v702 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v699) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v699) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v699) >> 23) - 127))* 0.69315)- *(float *)(a3 + 112))* *(float *)(a3 + 108));
  if (v702 < 0)
  {
    v703 = 0;
    v704 = 0;
  }
  else if (v701 * v700 <= v702)
  {
    v703 = v700 - 1;
    v704 = v548 - 1;
  }
  else
  {
    v703 = v702 / v701;
    v704 = v702 % v701;
  }
  v705 = (float)(1 << v703);
  v706 = (float)(1.0 / v705) * a4;
  v707 = (float)(1.0 / v705) * a5;
  v708 = v698 / v705;
  v709 = *(_QWORD *)(a3 + 32);
  v710 = (_QWORD *)(*(_QWORD *)(a3 + 56) + 144 * (v709 * v703 + v704));
  v711 = v710[9];
  v713 = v710[4];
  v712 = v710[5];
  v714 = v710[6];
  v715 = v706 + (float)(v708 * -0.5);
  v716 = v708 * 0.0;
  v717 = v715 + (float)((float)(v708 * 0.0) * 0.70711);
  v718 = (float)v713 + -1.001;
  if (v718 >= v717)
    v719 = v715 + (float)((float)(v708 * 0.0) * 0.70711);
  else
    v719 = (float)v713 + -1.001;
  if (v717 >= 0.0)
    v720 = v719;
  else
    v720 = 0.0;
  v721 = v707 + (float)(v716 * -0.5);
  v722 = v721 + (float)(v708 * 0.70711);
  v723 = (float)v714 + -1.001;
  if (v723 >= v722)
    v724 = v721 + (float)(v708 * 0.70711);
  else
    v724 = (float)v714 + -1.001;
  if (v722 < 0.0)
    v724 = 0.0;
  v725 = v720;
  v726 = v724;
  v727 = (v725 + 1);
  v728 = v726 + 1;
  v729 = v711 + v712 * v726;
  v730 = (float)v727 - v720;
  v731 = (float)v728 - v724;
  v732 = v730 * v731;
  *(float *)&v733 = v720 - (float)v720;
  v734 = *(float *)&v733 * v731;
  *(float *)&v735 = (float)v724;
  v736 = v724 - *(float *)&v735;
  *(float *)&v737 = v730 * v736;
  v738 = *(float *)&v733 * v736;
  LOBYTE(v733) = *(_BYTE *)(v729 + v725);
  LOBYTE(v735) = *(_BYTE *)(v729 + v727);
  *(float *)&v739 = v734 * (float)v735;
  v740 = *(float *)&v739 + (float)(v732 * (float)v733);
  LOBYTE(v739) = *(_BYTE *)(v729 + v712 + v725);
  v741 = v740 + (float)(*(float *)&v737 * (float)v739);
  LOBYTE(v737) = *(_BYTE *)(v729 + v712 + v727);
  HIWORD(v1201) = (int)(float)((float)(v741 + (float)(v738 * (float)v737)) * 255.0);
  v742 = v706 + (float)(v708 * 0.5);
  v743 = v742 + (float)(v716 * 0.70711);
  if (v718 >= v743)
    v744 = v742 + (float)(v716 * 0.70711);
  else
    v744 = v718;
  if (v743 < 0.0)
    v744 = 0.0;
  v745 = v707 + (float)(v716 * 0.5);
  v746 = v745 + (float)(v708 * 0.70711);
  if (v723 >= v746)
    v747 = v745 + (float)(v708 * 0.70711);
  else
    v747 = v723;
  v748 = v744;
  if (v746 >= 0.0)
    v749 = v747;
  else
    v749 = 0.0;
  v750 = v749;
  v751 = (v748 + 1);
  v752 = v750 + 1;
  v753 = v711 + v712 * v750;
  v754 = (float)v751 - v744;
  v755 = (float)v752 - v749;
  *(float *)&v756 = v754 * v755;
  v757 = v744 - (float)v744;
  v758 = v757 * v755;
  *(float *)&v759 = (float)v749;
  v760 = v749 - *(float *)&v759;
  v761 = v754 * v760;
  LOBYTE(v759) = *(_BYTE *)(v753 + v748);
  v762 = v757 * v760;
  v763 = (float)v759;
  LOBYTE(v759) = *(_BYTE *)(v753 + v751);
  *(float *)&v764 = v758 * (float)v759;
  v765 = *(float *)&v764 + (float)(*(float *)&v756 * v763);
  LOBYTE(v764) = *(_BYTE *)(v753 + v712 + v748);
  LOBYTE(v756) = *(_BYTE *)(v753 + v712 + v751);
  LOWORD(v1202) = (int)(float)((float)((float)(v765 + (float)(v761 * (float)v764)) + (float)(v762 * (float)v756)) * 255.0);
  v766 = (float)(v708 + v706) + (float)(v716 * 0.0);
  if (v718 >= v766)
    v767 = (float)(v708 + v706) + (float)(v716 * 0.0);
  else
    v767 = v718;
  if (v766 >= 0.0)
    v768 = v767;
  else
    v768 = 0.0;
  v769 = (float)(v716 + v707) + (float)(v708 * 0.0);
  if (v723 >= v769)
    v770 = (float)(v716 + v707) + (float)(v708 * 0.0);
  else
    v770 = v723;
  if (v769 >= 0.0)
    v771 = v770;
  else
    v771 = 0.0;
  v772 = v768;
  v773 = v771;
  v774 = (v772 + 1);
  v775 = v773 + 1;
  v776 = v711 + v712 * v773;
  v777 = (float)v774 - v768;
  v778 = (float)v775 - v771;
  v779 = v777 * v778;
  v780 = v768 - (float)v768;
  v781 = v780 * v778;
  *(float *)&v782 = (float)v771;
  *(float *)&v783 = v771 - *(float *)&v782;
  *(float *)&v784 = v777 * *(float *)&v783;
  v785 = v780 * *(float *)&v783;
  LOBYTE(v783) = *(_BYTE *)(v776 + v772);
  LOBYTE(v782) = *(_BYTE *)(v776 + v774);
  *(float *)&v786 = v781 * (float)v782;
  v787 = *(float *)&v786 + (float)(v779 * (float)v783);
  LOBYTE(v786) = *(_BYTE *)(v776 + v712 + v772);
  v788 = v787 + (float)(*(float *)&v784 * (float)v786);
  LOBYTE(v784) = *(_BYTE *)(v776 + v712 + v774);
  v789 = (int)(float)((float)(v788 + (float)(v785 * (float)v784)) * 255.0);
  v790 = v742 + (float)(v716 * -0.70711);
  if (v718 >= v790)
    v791 = v790;
  else
    v791 = v718;
  if (v790 >= 0.0)
    v792 = v791;
  else
    v792 = 0.0;
  v793 = v745 + (float)(v708 * -0.70711);
  if (v723 >= v793)
    v794 = v793;
  else
    v794 = v723;
  if (v793 >= 0.0)
    v795 = v794;
  else
    v795 = 0.0;
  v796 = v792;
  v797 = v795;
  WORD1(v1202) = v789;
  v798 = (v796 + 1);
  v799 = v797 + 1;
  v800 = v711 + v712 * v797;
  v801 = (float)v798 - v792;
  v802 = (float)v799 - v795;
  v803 = v801 * v802;
  v804 = v792 - (float)v792;
  v805 = v804 * v802;
  *(float *)&v806 = (float)v795;
  *(float *)&v807 = v795 - *(float *)&v806;
  *(float *)&v808 = v801 * *(float *)&v807;
  v809 = v804 * *(float *)&v807;
  LOBYTE(v807) = *(_BYTE *)(v800 + v796);
  LOBYTE(v806) = *(_BYTE *)(v800 + v798);
  *(float *)&v810 = (float)v806;
  v811 = v805 * *(float *)&v810;
  LOBYTE(v810) = *(_BYTE *)(v800 + v712 + v796);
  v812 = (float)(v811 + (float)(v803 * (float)v807)) + (float)(*(float *)&v808 * (float)v810);
  LOBYTE(v808) = *(_BYTE *)(v800 + v712 + v798);
  v813 = (int)(float)((float)(v812 + (float)(v809 * (float)v808)) * 255.0);
  v814 = v715 + (float)(v716 * -0.70711);
  if (v718 >= v814)
    v815 = v814;
  else
    v815 = v718;
  if (v814 >= 0.0)
    v816 = v815;
  else
    v816 = 0.0;
  v817 = v721 + (float)(v708 * -0.70711);
  if (v723 >= v817)
    v818 = v817;
  else
    v818 = v723;
  if (v817 >= 0.0)
    v819 = v818;
  else
    v819 = 0.0;
  v820 = v816;
  v821 = v819;
  WORD2(v1202) = v813;
  v822 = (v820 + 1);
  v823 = v821 + 1;
  v824 = v711 + v712 * v821;
  v825 = (float)v822 - v816;
  v826 = (float)v823 - v819;
  v827 = v825 * v826;
  v828 = v816 - (float)v816;
  v829 = v828 * v826;
  *(float *)&v830 = (float)v819;
  *(float *)&v831 = v819 - *(float *)&v830;
  *(float *)&v832 = v825 * *(float *)&v831;
  v833 = v828 * *(float *)&v831;
  LOBYTE(v831) = *(_BYTE *)(v824 + v820);
  LOBYTE(v830) = *(_BYTE *)(v824 + v822);
  *(float *)&v834 = (float)v830;
  v835 = v829 * *(float *)&v834;
  LOBYTE(v834) = *(_BYTE *)(v824 + v712 + v820);
  v836 = (float)(v835 + (float)(v827 * (float)v831)) + (float)(*(float *)&v832 * (float)v834);
  LOBYTE(v832) = *(_BYTE *)(v824 + v712 + v822);
  WORD3(v1202) = (int)(float)((float)(v836 + (float)(v833 * (float)v832)) * 255.0);
  v837 = (float)(v706 - v708) + (float)(v716 * 0.0);
  if (v718 >= v837)
    v718 = v837;
  if (v837 >= 0.0)
    v838 = v718;
  else
    v838 = 0.0;
  v839 = (float)(v707 - v716) + (float)(v708 * 0.0);
  if (v723 >= v839)
    v840 = v839;
  else
    v840 = v723;
  v841 = v838;
  if (v839 >= 0.0)
    v842 = v840;
  else
    v842 = 0.0;
  v843 = v842;
  v844 = (v841 + 1);
  v845 = v711 + v712 * v843;
  v846 = v845 + v712;
  v847 = (float)v844 - v838;
  v848 = (float)(v843 + 1) - v842;
  *(float *)&v849 = v847 * v848;
  v850 = v838 - (float)v838;
  v851 = v850 * v848;
  *(float *)&v852 = (float)v842;
  v853 = v842 - *(float *)&v852;
  v854 = v847 * v853;
  LOBYTE(v852) = *(_BYTE *)(v845 + v841);
  v855 = v850 * v853;
  v856 = (float)v852;
  LOBYTE(v852) = *(_BYTE *)(v845 + v844);
  *(float *)&v857 = v851 * (float)v852;
  v858 = *(float *)&v857 + (float)(*(float *)&v849 * v856);
  LOBYTE(v857) = *(_BYTE *)(v846 + v841);
  LOBYTE(v849) = *(_BYTE *)(v846 + v844);
  WORD4(v1202) = (int)(float)((float)((float)(v858 + (float)(v854 * (float)v857)) + (float)(v855 * (float)v849)) * 255.0);
  v859 = v698 * 1.4142;
  v860 = v699 * 1.4142;
  v861 = *(_DWORD *)(a3 + 24);
  v862 = sub_20E7F9528(v15);
  v863 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(LODWORD(v860) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(LODWORD(v860) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((LODWORD(v860) >> 23) - 127))* 0.69315)- *(float *)(a3 + 112))* *(float *)(a3 + 108));
  if (v863 < 0)
  {
    v864 = 0;
    v865 = 0;
  }
  else if (v862 * v861 <= v863)
  {
    v864 = v861 - 1;
    v865 = v709 - 1;
  }
  else
  {
    v864 = v863 / v862;
    v865 = v863 % v862;
  }
  v866 = (float)(1 << v864);
  v867 = (float)(1.0 / v866) * a4;
  v868 = (float)(1.0 / v866) * a5;
  v869 = v859 / v866;
  v870 = *(_QWORD *)(a3 + 32);
  v871 = (_QWORD *)(*(_QWORD *)(a3 + 56) + 144 * (v870 * v864 + v865));
  v872 = v871[9];
  v874 = v871[4];
  v873 = v871[5];
  v875 = v871[6];
  v876 = v867 + (float)(v869 * 0.0);
  v877 = v869 * 0.0;
  v878 = v876 - (float)(v869 * 0.0);
  v879 = (float)v874 + -1.001;
  if (v879 >= v878)
    v880 = v876 - (float)(v869 * 0.0);
  else
    v880 = (float)v874 + -1.001;
  if (v878 >= 0.0)
    v881 = v880;
  else
    v881 = 0.0;
  v882 = v868 + (float)(v877 * 0.0);
  v883 = (float)v875 + -1.001;
  if (v883 >= (float)(v882 - v869))
    v884 = v882 - v869;
  else
    v884 = (float)v875 + -1.001;
  if ((float)(v882 - v869) < 0.0)
    v884 = 0.0;
  v885 = v881;
  v886 = v884;
  v887 = (v885 + 1);
  v888 = v886 + 1;
  v889 = v872 + v873 * v886;
  v890 = (float)v887 - v881;
  v891 = (float)v888 - v884;
  v892 = v890 * v891;
  *(float *)&v893 = v881 - (float)v881;
  v894 = *(float *)&v893 * v891;
  *(float *)&v895 = (float)v884;
  v896 = v884 - *(float *)&v895;
  *(float *)&v897 = v890 * v896;
  v898 = *(float *)&v893 * v896;
  LOBYTE(v893) = *(_BYTE *)(v889 + v885);
  LOBYTE(v895) = *(_BYTE *)(v889 + v887);
  *(float *)&v899 = v894 * (float)v895;
  v900 = *(float *)&v899 + (float)(v892 * (float)v893);
  LOBYTE(v899) = *(_BYTE *)(v889 + v873 + v885);
  v901 = v900 + (float)(*(float *)&v897 * (float)v899);
  LOBYTE(v897) = *(_BYTE *)(v889 + v873 + v887);
  HIWORD(v1202) = (int)(float)((float)(v901 + (float)(v898 * (float)v897)) * 255.0);
  v902 = v867 + (float)(v869 * 0.70711);
  v903 = v902 + (float)(v877 * 0.5);
  if (v879 >= v903)
    v904 = v902 + (float)(v877 * 0.5);
  else
    v904 = v879;
  if (v903 >= 0.0)
    v905 = v904;
  else
    v905 = 0.0;
  v906 = v868 + (float)(v877 * 0.70711);
  v907 = v906 + (float)(v869 * 0.5);
  if (v883 >= v907)
    v908 = v906 + (float)(v869 * 0.5);
  else
    v908 = v883;
  if (v907 >= 0.0)
    v909 = v908;
  else
    v909 = 0.0;
  v910 = v905;
  v911 = v909;
  v912 = (v910 + 1);
  v913 = v911 + 1;
  v914 = v872 + v873 * v911;
  v915 = (float)v912 - v905;
  v916 = (float)v913 - v909;
  v917 = v915 * v916;
  v918 = v905 - (float)v905;
  v919 = v918 * v916;
  *(float *)&v920 = (float)v909;
  *(float *)&v921 = v909 - *(float *)&v920;
  *(float *)&v922 = v915 * *(float *)&v921;
  v923 = v918 * *(float *)&v921;
  LOBYTE(v921) = *(_BYTE *)(v914 + v910);
  LOBYTE(v920) = *(_BYTE *)(v914 + v912);
  *(float *)&v924 = v919 * (float)v920;
  v925 = *(float *)&v924 + (float)(v917 * (float)v921);
  LOBYTE(v924) = *(_BYTE *)(v914 + v873 + v910);
  v926 = v925 + (float)(*(float *)&v922 * (float)v924);
  LOBYTE(v922) = *(_BYTE *)(v914 + v873 + v912);
  v1203[0] = (int)(float)((float)(v926 + (float)(v923 * (float)v922)) * 255.0);
  v927 = v902 + (float)(v877 * -0.5);
  if (v879 >= v927)
    v928 = v927;
  else
    v928 = v879;
  if (v927 >= 0.0)
    v929 = v928;
  else
    v929 = 0.0;
  v930 = v906 + (float)(v869 * -0.5);
  if (v883 >= v930)
    v931 = v930;
  else
    v931 = v883;
  if (v930 >= 0.0)
    v932 = v931;
  else
    v932 = 0.0;
  v933 = v929;
  v934 = v932;
  v935 = (v933 + 1);
  v936 = v934 + 1;
  v937 = v872 + v873 * v934;
  v938 = (float)v935 - v929;
  v939 = (float)v936 - v932;
  v940 = v938 * v939;
  *(float *)&v941 = v929 - (float)v929;
  v942 = *(float *)&v941 * v939;
  *(float *)&v943 = (float)v932;
  v944 = v932 - *(float *)&v943;
  *(float *)&v945 = v938 * v944;
  v946 = *(float *)&v941 * v944;
  LOBYTE(v941) = *(_BYTE *)(v937 + v933);
  LOBYTE(v943) = *(_BYTE *)(v937 + v935);
  *(float *)&v947 = v942 * (float)v943;
  v948 = *(float *)&v947 + (float)(v940 * (float)v941);
  LOBYTE(v947) = *(_BYTE *)(v937 + v873 + v933);
  v949 = v948 + (float)(*(float *)&v945 * (float)v947);
  LOBYTE(v945) = *(_BYTE *)(v937 + v873 + v935);
  v1203[1] = (int)(float)((float)(v949 + (float)(v946 * (float)v945)) * 255.0);
  v950 = v877 + v876;
  if (v879 >= v950)
    v951 = v950;
  else
    v951 = v879;
  if (v950 >= 0.0)
    v952 = v951;
  else
    v952 = 0.0;
  v953 = v869 + v882;
  if (v883 >= v953)
    v954 = v953;
  else
    v954 = v883;
  if (v953 >= 0.0)
    v955 = v954;
  else
    v955 = 0.0;
  v956 = v952;
  v957 = v955;
  v958 = (v956 + 1);
  v959 = v957 + 1;
  v960 = v872 + v873 * v957;
  v961 = (float)v958 - v952;
  v962 = (float)v959 - v955;
  v963 = v961 * v962;
  v964 = v952 - (float)v952;
  v965 = v964 * v962;
  *(float *)&v966 = (float)v955;
  *(float *)&v967 = v955 - *(float *)&v966;
  *(float *)&v968 = v961 * *(float *)&v967;
  v969 = v964 * *(float *)&v967;
  LOBYTE(v967) = *(_BYTE *)(v960 + v956);
  LOBYTE(v966) = *(_BYTE *)(v960 + v958);
  *(float *)&v970 = v965 * (float)v966;
  v971 = *(float *)&v970 + (float)(v963 * (float)v967);
  LOBYTE(v970) = *(_BYTE *)(v960 + v873 + v956);
  v972 = v971 + (float)(*(float *)&v968 * (float)v970);
  LOBYTE(v968) = *(_BYTE *)(v960 + v873 + v958);
  v1203[2] = (int)(float)((float)(v972 + (float)(v969 * (float)v968)) * 255.0);
  v973 = v867 + (float)(v869 * -0.70711);
  v974 = v973 + (float)(v877 * -0.5);
  if (v879 >= v974)
    v975 = v973 + (float)(v877 * -0.5);
  else
    v975 = v879;
  if (v974 >= 0.0)
    v976 = v975;
  else
    v976 = 0.0;
  v977 = v868 + (float)(v877 * -0.70711);
  v978 = v977 + (float)(v869 * -0.5);
  if (v883 >= v978)
    v979 = v977 + (float)(v869 * -0.5);
  else
    v979 = v883;
  v980 = v976;
  if (v978 >= 0.0)
    v981 = v979;
  else
    v981 = 0.0;
  v982 = v981;
  v983 = (v980 + 1);
  v984 = v982 + 1;
  v985 = v872 + v873 * v982;
  v986 = (float)v983 - v976;
  v987 = (float)v984 - v981;
  *(float *)&v988 = v986 * v987;
  v989 = v976 - (float)v976;
  v990 = v989 * v987;
  *(float *)&v991 = (float)v981;
  v992 = v981 - *(float *)&v991;
  v993 = v986 * v992;
  LOBYTE(v991) = *(_BYTE *)(v985 + v980);
  v994 = v989 * v992;
  v995 = (float)v991;
  LOBYTE(v991) = *(_BYTE *)(v985 + v983);
  *(float *)&v996 = v990 * (float)v991;
  v997 = *(float *)&v996 + (float)(*(float *)&v988 * v995);
  LOBYTE(v996) = *(_BYTE *)(v985 + v873 + v980);
  LOBYTE(v988) = *(_BYTE *)(v985 + v873 + v983);
  v1203[3] = (int)(float)((float)((float)(v997 + (float)(v993 * (float)v996)) + (float)(v994 * (float)v988)) * 255.0);
  v998 = v973 + (float)(v877 * 0.5);
  if (v879 >= v998)
    v879 = v998;
  if (v998 >= 0.0)
    v999 = v879;
  else
    v999 = 0.0;
  v1000 = v977 + (float)(v869 * 0.5);
  if (v883 >= v1000)
    v1001 = v1000;
  else
    v1001 = v883;
  v1002 = v999;
  if (v1000 >= 0.0)
    v1003 = v1001;
  else
    v1003 = 0.0;
  v1004 = v1003;
  v1005 = (v1002 + 1);
  v1006 = v872 + v873 * v1004;
  v1007 = v1006 + v873;
  v1008 = (float)v1005 - v999;
  v1009 = (float)(v1004 + 1) - v1003;
  *(float *)&v1010 = v1008 * v1009;
  v1011 = v999 - (float)v999;
  v1012 = v1011 * v1009;
  *(float *)&v1013 = (float)v1003;
  v1014 = v1003 - *(float *)&v1013;
  v1015 = v1008 * v1014;
  LOBYTE(v1013) = *(_BYTE *)(v1006 + v1002);
  v1016 = v1011 * v1014;
  v1017 = (float)v1013;
  LOBYTE(v1013) = *(_BYTE *)(v1006 + v1005);
  *(float *)&v1018 = v1012 * (float)v1013;
  v1019 = *(float *)&v1018 + (float)(*(float *)&v1010 * v1017);
  LOBYTE(v1018) = *(_BYTE *)(v1007 + v1002);
  LOBYTE(v1010) = *(_BYTE *)(v1007 + v1005);
  v1203[4] = (int)(float)((float)((float)(v1019 + (float)(v1015 * (float)v1018)) + (float)(v1016 * (float)v1010)) * 255.0);
  v1020 = *(_DWORD *)(a3 + 24);
  v1021 = sub_20E7F9528(v15);
  v1022 = vcvtms_s32_f32((float)((float)((float)((float)((float)((float)((float)(COERCE_FLOAT(COERCE_UNSIGNED_INT(v860 * 1.4142) & 0x807FFFFF | 0x3F800000)* -0.33333)+ 2.0)* COERCE_FLOAT(COERCE_UNSIGNED_INT(v860 * 1.4142) & 0x807FFFFF | 0x3F800000))+ -1.6667)+ (float)((COERCE_UNSIGNED_INT(v860 * 1.4142) >> 23) - 127))* 0.69315)- *(float *)(a3 + 112))* *(float *)(a3 + 108));
  if (v1022 < 0)
  {
    v1023 = 0;
    v1024 = 0;
  }
  else if (v1021 * v1020 <= v1022)
  {
    v1023 = v1020 - 1;
    v1024 = v870 - 1;
  }
  else
  {
    v1023 = v1022 / v1021;
    v1024 = v1022 % v1021;
  }
  v1025 = 0;
  v1026 = (float)(1 << v1023);
  v1027 = (float)(1.0 / v1026) * a4;
  v1028 = (float)(1.0 / v1026) * a5;
  v1029 = (float)(v859 * 1.4142) / v1026;
  v1030 = (_QWORD *)(*(_QWORD *)(a3 + 56) + 144 * (*(_QWORD *)(a3 + 32) * v1023 + v1024));
  v1031 = v1030[9];
  v1033 = v1030[4];
  v1032 = v1030[5];
  v1034 = v1030[6];
  v1035 = v1027 + (float)(v1029 * -0.5);
  v1036 = v1029 * 0.0;
  v1037 = v1035 + (float)((float)(v1029 * 0.0) * 0.70711);
  v1038 = (float)v1033 + -1.001;
  if (v1038 >= v1037)
    v1039 = v1035 + (float)((float)(v1029 * 0.0) * 0.70711);
  else
    v1039 = (float)v1033 + -1.001;
  if (v1037 >= 0.0)
    v1040 = v1039;
  else
    v1040 = 0.0;
  v1041 = v1028 + (float)(v1036 * -0.5);
  v1042 = v1041 + (float)(v1029 * 0.70711);
  v1043 = (float)v1034 + -1.001;
  if (v1043 >= v1042)
    v1044 = v1041 + (float)(v1029 * 0.70711);
  else
    v1044 = (float)v1034 + -1.001;
  if (v1042 < 0.0)
    v1044 = 0.0;
  v1045 = v1040;
  v1046 = v1044;
  v1047 = (v1045 + 1);
  v1048 = v1046 + 1;
  v1049 = v1031 + v1032 * v1046;
  v1050 = (float)v1047 - v1040;
  v1051 = (float)v1048 - v1044;
  v1052 = v1050 * v1051;
  v1053 = v1040 - (float)v1040;
  v1054 = v1053 * v1051;
  *(float *)&v1055 = (float)v1044;
  *(float *)&v1056 = v1044 - *(float *)&v1055;
  v1057 = v1050 * *(float *)&v1056;
  v1058 = v1053 * *(float *)&v1056;
  LOBYTE(v1056) = *(_BYTE *)(v1049 + v1045);
  LOBYTE(v1055) = *(_BYTE *)(v1049 + v1047);
  *(float *)&v1059 = v1054 * (float)v1055;
  v1060 = *(float *)&v1059 + (float)(v1052 * (float)v1056);
  LOBYTE(v1059) = *(_BYTE *)(v1049 + v1032 + v1045);
  *(float *)&v1061 = (float)v1059;
  v1062 = v1060 + (float)(v1057 * *(float *)&v1061);
  LOBYTE(v1061) = *(_BYTE *)(v1049 + v1032 + v1047);
  v1203[7] = (int)(float)((float)(v1062 + (float)(v1058 * (float)v1061)) * 255.0);
  v1063 = v1027 + (float)(v1029 * 0.5);
  v1064 = v1063 + (float)(v1036 * 0.70711);
  if (v1038 >= v1064)
    v1065 = v1063 + (float)(v1036 * 0.70711);
  else
    v1065 = v1038;
  if (v1064 >= 0.0)
    v1066 = v1065;
  else
    v1066 = 0.0;
  v1067 = v1028 + (float)(v1036 * 0.5);
  v1068 = v1067 + (float)(v1029 * 0.70711);
  if (v1043 >= v1068)
    v1069 = v1067 + (float)(v1029 * 0.70711);
  else
    v1069 = v1043;
  if (v1068 >= 0.0)
    v1070 = v1069;
  else
    v1070 = 0.0;
  v1071 = v1066;
  v1072 = v1070;
  v1073 = (v1071 + 1);
  v1074 = v1072 + 1;
  v1075 = v1031 + v1032 * v1072;
  v1076 = (float)v1073 - v1066;
  v1077 = (float)v1074 - v1070;
  v1078 = v1076 * v1077;
  *(float *)&v1079 = v1066 - (float)v1066;
  v1080 = *(float *)&v1079 * v1077;
  *(float *)&v1081 = (float)v1070;
  v1082 = v1070 - *(float *)&v1081;
  *(float *)&v1083 = v1076 * v1082;
  v1084 = *(float *)&v1079 * v1082;
  LOBYTE(v1079) = *(_BYTE *)(v1075 + v1071);
  LOBYTE(v1081) = *(_BYTE *)(v1075 + v1073);
  *(float *)&v1085 = v1080 * (float)v1081;
  v1086 = *(float *)&v1085 + (float)(v1078 * (float)v1079);
  LOBYTE(v1085) = *(_BYTE *)(v1075 + v1032 + v1071);
  v1087 = v1086 + (float)(*(float *)&v1083 * (float)v1085);
  LOBYTE(v1083) = *(_BYTE *)(v1075 + v1032 + v1073);
  v1088 = (int)(float)((float)(v1087 + (float)(v1084 * (float)v1083)) * 255.0);
  v1089 = (float)(v1029 + v1027) + (float)(v1036 * 0.0);
  if (v1038 >= v1089)
    v1090 = (float)(v1029 + v1027) + (float)(v1036 * 0.0);
  else
    v1090 = v1038;
  if (v1089 >= 0.0)
    v1091 = v1090;
  else
    v1091 = 0.0;
  v1092 = (float)(v1036 + v1028) + (float)(v1029 * 0.0);
  if (v1043 >= v1092)
    v1093 = (float)(v1036 + v1028) + (float)(v1029 * 0.0);
  else
    v1093 = v1043;
  if (v1092 >= 0.0)
    v1094 = v1093;
  else
    v1094 = 0.0;
  v1095 = v1091;
  v1096 = v1094;
  v1203[8] = v1088;
  v1097 = (v1095 + 1);
  v1098 = v1096 + 1;
  v1099 = v1031 + v1032 * v1096;
  v1100 = (float)v1097 - v1091;
  v1101 = (float)v1098 - v1094;
  v1102 = v1100 * v1101;
  v1103 = v1091 - (float)v1091;
  v1104 = v1103 * v1101;
  *(float *)&v1105 = (float)v1094;
  *(float *)&v1106 = v1094 - *(float *)&v1105;
  v1107 = v1100 * *(float *)&v1106;
  v1108 = v1103 * *(float *)&v1106;
  LOBYTE(v1106) = *(_BYTE *)(v1099 + v1095);
  LOBYTE(v1105) = *(_BYTE *)(v1099 + v1097);
  *(float *)&v1109 = (float)v1105;
  v1110 = v1104 * *(float *)&v1109;
  LOBYTE(v1109) = *(_BYTE *)(v1099 + v1032 + v1095);
  v1111 = v1110 + (float)(v1102 * (float)v1106);
  *(float *)&v1112 = (float)v1109;
  LOBYTE(v1112) = *(_BYTE *)(v1099 + v1032 + v1097);
  v1203[9] = (int)(float)((float)((float)(v1111 + (float)(v1107 * (float)v1109)) + (float)(v1108 * (float)v1112)) * 255.0);
  v1113 = v1063 + (float)(v1036 * -0.70711);
  if (v1038 >= v1113)
    v1114 = v1113;
  else
    v1114 = v1038;
  if (v1113 >= 0.0)
    v1115 = v1114;
  else
    v1115 = 0.0;
  v1116 = v1067 + (float)(v1029 * -0.70711);
  if (v1043 >= v1116)
    v1117 = v1116;
  else
    v1117 = v1043;
  v1118 = v1115;
  if (v1116 >= 0.0)
    v1119 = v1117;
  else
    v1119 = 0.0;
  v1120 = v1119;
  v1121 = (v1118 + 1);
  v1122 = v1120 + 1;
  v1123 = v1031 + v1032 * v1120;
  v1124 = (float)v1121 - v1115;
  v1125 = (float)v1122 - v1119;
  *(float *)&v1126 = v1124 * v1125;
  v1127 = v1115 - (float)v1115;
  v1128 = v1127 * v1125;
  *(float *)&v1129 = (float)v1119;
  v1130 = v1119 - *(float *)&v1129;
  v1131 = v1124 * v1130;
  LOBYTE(v1129) = *(_BYTE *)(v1123 + v1118);
  v1132 = v1127 * v1130;
  v1133 = (float)v1129;
  LOBYTE(v1129) = *(_BYTE *)(v1123 + v1121);
  *(float *)&v1134 = v1128 * (float)v1129;
  v1135 = *(float *)&v1134 + (float)(*(float *)&v1126 * v1133);
  LOBYTE(v1134) = *(_BYTE *)(v1123 + v1032 + v1118);
  LOBYTE(v1126) = *(_BYTE *)(v1123 + v1032 + v1121);
  v1203[10] = (int)(float)((float)((float)(v1135 + (float)(v1131 * (float)v1134)) + (float)(v1132 * (float)v1126))
                         * 255.0);
  v1136 = v1035 + (float)(v1036 * -0.70711);
  if (v1038 >= v1136)
    v1137 = v1136;
  else
    v1137 = v1038;
  if (v1136 >= 0.0)
    v1138 = v1137;
  else
    v1138 = 0.0;
  v1139 = v1041 + (float)(v1029 * -0.70711);
  if (v1043 >= v1139)
    v1140 = v1139;
  else
    v1140 = v1043;
  v1141 = v1138;
  if (v1139 >= 0.0)
    v1142 = v1140;
  else
    v1142 = 0.0;
  v1143 = v1142;
  v1144 = (v1141 + 1);
  v1145 = v1143 + 1;
  v1146 = v1031 + v1032 * v1143;
  v1147 = (float)v1144 - v1138;
  v1148 = (float)v1145 - v1142;
  *(float *)&v1149 = v1147 * v1148;
  v1150 = v1138 - (float)v1138;
  v1151 = v1150 * v1148;
  *(float *)&v1152 = (float)v1142;
  v1153 = v1142 - *(float *)&v1152;
  v1154 = v1147 * v1153;
  LOBYTE(v1152) = *(_BYTE *)(v1146 + v1141);
  v1155 = v1150 * v1153;
  v1156 = (float)v1152;
  LOBYTE(v1152) = *(_BYTE *)(v1146 + v1144);
  *(float *)&v1157 = v1151 * (float)v1152;
  v1158 = *(float *)&v1157 + (float)(*(float *)&v1149 * v1156);
  LOBYTE(v1157) = *(_BYTE *)(v1146 + v1032 + v1141);
  LOBYTE(v1149) = *(_BYTE *)(v1146 + v1032 + v1144);
  v1203[11] = (int)(float)((float)((float)(v1158 + (float)(v1154 * (float)v1157)) + (float)(v1155 * (float)v1149))
                         * 255.0);
  v1159 = (float)(v1027 - v1029) + (float)(v1036 * 0.0);
  if (v1038 >= v1159)
    v1038 = v1159;
  if (v1159 >= 0.0)
    v1160 = v1038;
  else
    v1160 = 0.0;
  v1161 = (float)(v1028 - v1036) + (float)(v1029 * 0.0);
  if (v1043 >= v1161)
    v1162 = v1161;
  else
    v1162 = v1043;
  if (v1161 >= 0.0)
    v1163 = v1162;
  else
    v1163 = 0.0;
  v1164 = v1160;
  v1165 = v1163;
  v1166 = (v1164 + 1);
  v1167 = v1031 + v1032 * v1165;
  v1168 = v1167 + v1032;
  v1169 = (float)v1166 - v1160;
  v1170 = (float)(v1165 + 1) - v1163;
  v1171.f32[0] = v1169 * v1170;
  *(float *)&v1172 = v1160 - (float)v1160;
  v1173 = *(float *)&v1172 * v1170;
  *(float *)&v1174 = (float)v1163;
  v1175 = v1163 - *(float *)&v1174;
  v1176 = v1169 * v1175;
  v1177 = *(float *)&v1172 * v1175;
  LOBYTE(v1172) = *(_BYTE *)(v1167 + v1164);
  LOBYTE(v1174) = *(_BYTE *)(v1167 + v1166);
  *(float *)&v1178 = v1173 * (float)v1174;
  *(float *)&v1179 = *(float *)&v1178 + (float)(v1171.f32[0] * (float)v1172);
  LOBYTE(v1178) = *(_BYTE *)(v1168 + v1164);
  v1180.f32[0] = (float)v1178;
  v1181.f32[0] = *(float *)&v1179 + (float)(v1176 * v1180.f32[0]);
  LOBYTE(v1179) = *(_BYTE *)(v1168 + v1166);
  v1182.f32[0] = (float)v1179;
  v1203[12] = (int)(float)((float)(v1181.f32[0] + (float)(v1177 * v1182.f32[0])) * 255.0);
  v1183 = 0;
  do
  {
    v1181.i16[0] = *(&v1196 + a2[v1025].u16[2]);
    v1182.i16[0] = *(&v1196 + a2[v1025 + 2].u16[0]);
    v1180.i16[0] = *(&v1196 + a2[v1025].u16[3]);
    v1171.i16[0] = *(&v1196 + a2[v1025 + 2].u16[1]);
    v1184 = (float)v1181.u32[0] - (float)v1180.u32[0];
    v1185 = (float)v1182.u32[0] - (float)v1171.u32[0];
    v1180 = a2[v1025 + 1];
    v1171 = *(float32x2_t *)((char *)&a2[v1025 + 2] + 4);
    v1181 = vmul_n_f32(v1180, v1184);
    v1182 = vmul_n_f32(v1171, v1185);
    v1183 = vadd_f32(vadd_f32(v1183, v1181), v1182);
    v1025 += 3;
  }
  while (v1025 != 66);
  v1181.i16[0] = *(&v1196 + a2[66].u16[2]);
  v1182.i16[0] = *(&v1196 + a2[66].u16[3]);
  v1186 = vmla_n_f32(v1183, a2[67], (float)v1181.u32[0] - (float)v1182.u32[0]);
  v1187 = vceqz_f32(v1186);
  v1188 = 0.0;
  if ((vand_s8((int8x8_t)vdup_lane_s32(v1187, 1), (int8x8_t)v1187).u8[0] & 1) == 0)
  {
    v1189 = fabsf(v1186.f32[1]) + 0.0000001;
    v1190 = v1186.f32[0] <= 0.0;
    v1191 = (float)(v1186.f32[0] + v1189) / (float)(v1189 - v1186.f32[0]);
    v1186.f32[0] = (float)(v1186.f32[0] - v1189) / (float)(v1186.f32[0] + v1189);
    v1192 = 0.7854;
    if (v1190)
    {
      v1192 = 2.3562;
      v1186.f32[0] = v1191;
    }
    v1186.f32[0] = v1192
                 + (float)((float)((float)((float)(v1186.f32[0] * 0.1821) * v1186.f32[0]) + -0.9675) * v1186.f32[0]);
    if (v1186.f32[1] >= 0.0)
      v1188 = v1186.f32[0];
    else
      v1188 = 6.2832 - v1186.f32[0];
  }
  if (v1188 >= 0.0)
    v1193 = v1188;
  else
    v1193 = 0.0;
  if (v1193 > 6.2832)
    v1193 = 6.2832;
  *a1 = v1193;
  return 1;
}

uint64_t sub_20E7BE1D4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v12;

  *(_QWORD *)a1 = 0x4120000042A00000;
  *(_OWORD *)(a1 + 8) = xmmword_20E80E3D0;
  *(_QWORD *)(a1 + 24) = 0x3E8000000064;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 36) = 0xC800000050;
  *(_BYTE *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = 0x3F96E9DD3F5425F2;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  *(_OWORD *)(a1 + 44) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v3;
  *(float *)(a1 + 60) = (float)(int)*(float *)(a1 + 60);
  *(_DWORD *)(a1 + 112) = 1115684864;
  v6 = *((int *)a2 + 4) * (uint64_t)*((int *)a2 + 3);
  v7 = *((int *)a2 + 5);
  v8 = v6 * v7;
  if ((_DWORD)v6 * (_DWORD)v7)
  {
    sub_20E7C1E68(a1 + 88, v6 * v7);
    v9 = 0;
    do
    {
      v10 = (_QWORD *)(*(_QWORD *)(a1 + 88) + v9);
      v10[1] = *v10;
      v12 = 0;
      sub_20E7C205C((uint64_t)v10, 0x200uLL, (const float *)&v12);
      v9 += 24;
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_20E7BE2E8(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  sub_20E791F00(v2);
  sub_20E791F00(v1);
  _Unwind_Resume(a1);
}

void sub_20E7BE30C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  __n128 v11;
  double v12;
  __n128 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __n128 v19;
  double v20;
  __n128 v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __n128 v27;

  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
  sub_20E7BE428(a1, a2, a3, a4, (float **)a5, a6);
  sub_20E7BE984((float *)a1, a2, (uint64_t)a3, (char **)a5, v11, v12, v13, v14, v15, v16, v17, v18);
  sub_20E7BE984((float *)a1, a2, (uint64_t)a3, (char **)a6, v19, v20, v21, v22, v23, v24, v25, v26);
  if (*(_QWORD *)a6 != *(_QWORD *)(a6 + 8))
    sub_20E7BFC70((char **)a6, 0, 0, *(int *)(a1 + 40), 0, 0);
  if (*(_BYTE *)(a1 + 44))
  {
    v27.n128_u32[0] = *(_DWORD *)(a1 + 112);
    sub_20E7C0B70((uint64_t *)a5, (uint64_t *)(a1 + 88), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(int *)(a1 + 24), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), v27, *(float *)a1, *(float *)(a1 + 48), *(float *)(a1 + 52), *(float *)(a1 + 56), 1, 0);
  }
  else
  {
    sub_20E7C157C((void **)a5, (uint64_t *)(a1 + 64), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 1u);
  }
}

void sub_20E7BE428(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, float **a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float *v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  float v18;
  char *v19;
  unint64_t v20;
  signed int v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  float v28;
  float v29;
  unsigned int v30;
  BOOL v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  BOOL v37;
  float v38;
  unint64_t v39;
  float *v40;
  float *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  float *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  char *v56;
  float *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  float *__p;
  int v64;
  _QWORD *v65;
  int v67;
  uint64_t v68;
  uint64_t v70;
  void *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  int v76;

  v6 = (uint64_t)a5;
  v8 = a3[6];
  v7 = a3[7];
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v9 = a3[2];
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 954437177 * ((unint64_t)(v7 - v8) >> 4) - 1;
    v14 = *a4;
    v65 = a4;
    v64 = v13;
    while (1)
    {
      v15 = 16 * v11;
      if (*(_DWORD *)(v14 + 16 * v11))
        break;
LABEL_4:
      if (++v11 >= v9)
        goto LABEL_55;
    }
    v16 = 0;
    v17 = 2 * v11;
    v18 = (float)(1 << v11);
    __p = (float *)v12;
    v70 = v11;
    v68 = 16 * v11;
    v67 = 2 * v11;
    while (1)
    {
      v20 = *(unsigned int *)(*(_QWORD *)(v14 + 16 * v11 + 8) + 4 * v16);
      v21 = (v20 >> 21) & 1;
      v22 = v21 | v17;
      if (v21 | v17)
        v23 = v22 == v13;
      else
        v23 = 1;
      if (v23)
        goto LABEL_9;
      v24 = v20 & 0x7FF;
      v25 = (v20 >> 11) & 0x3FF;
      v26 = *(_QWORD *)(*(_QWORD *)(a3[6] + 144 * v22 + 120) + 8 * v25);
      v27 = *(unsigned __int16 *)(v26 + 4 * (v20 & 0x7FF));
      v28 = *(float *)(a2 + 4);
      v29 = (float)(v28 * powf(*(float *)(a2 + 104), (float)v21)) * v18;
      v30 = *(unsigned __int16 *)(v26 + 2 * (2 * v24 + 2));
      if (v22 == 1 && *(_BYTE *)(a1 + 32))
      {
        v31 = v27 < v30;
        v76 = 0;
        v75 = 0;
        v32 = (float)v24;
        v33 = (float)(int)v25;
        v34 = (float)v27;
        if (v10 < (float *)v74)
        {
          *v10 = v32;
          v10[1] = v33;
          *((_DWORD *)v10 + 2) = 1;
          v10[3] = v29;
          *((_QWORD *)v10 + 2) = v75;
          *((_DWORD *)v10 + 6) = v76;
          *((_BYTE *)v10 + 28) = v31;
          v11 = v70;
          v6 = (uint64_t)a5;
          *((_DWORD *)v10 + 8) = v70;
          *((_DWORD *)v10 + 9) = v21;
          v10[10] = 0.0;
          v10[11] = v34;
          v10 += 12;
LABEL_52:
          a4 = v65;
          v13 = v64;
          v15 = v68;
          v17 = v67;
          v73 = (char *)v10;
          goto LABEL_9;
        }
        v47 = __p;
        v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)__p) >> 4) + 1;
        v11 = v70;
        if (v48 > 0x555555555555555)
LABEL_61:
          sub_20E78D874();
        if (0x5555555555555556 * ((v74 - (char *)__p) >> 4) > v48)
          v48 = 0x5555555555555556 * ((v74 - (char *)__p) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v74 - (char *)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v49 = 0x555555555555555;
        else
          v49 = v48;
        if (v49)
        {
          if (v49 > 0x555555555555555)
LABEL_60:
            sub_20E78D888();
          v50 = (char *)operator new(48 * v49);
          v11 = v70;
          v47 = __p;
        }
        else
        {
          v50 = 0;
        }
        v57 = (float *)&v50[16 * (((char *)v10 - (char *)__p) >> 4)];
        *v57 = v32;
        v57[1] = v33;
        *((_DWORD *)v57 + 2) = 1;
        v57[3] = v29;
        *((_QWORD *)v57 + 2) = 0;
        v57[6] = 0.0;
        *((_BYTE *)v57 + 28) = v31;
        *((_DWORD *)v57 + 8) = v11;
        *((_DWORD *)v57 + 9) = v21;
        v57[10] = 0.0;
        v57[11] = v34;
        if (v10 == v47)
        {
          v12 = &v50[16 * (((char *)v10 - (char *)__p) >> 4)];
          v6 = (uint64_t)a5;
          v10 = v57 + 12;
          v72 = v57;
          v74 = &v50[48 * v49];
          if (v47)
            goto LABEL_50;
        }
        else
        {
          v58 = &v50[16 * (((char *)v10 - (char *)__p) >> 4)];
          v6 = (uint64_t)a5;
          do
          {
            v59 = *((_OWORD *)v10 - 3);
            v60 = *((_OWORD *)v10 - 1);
            v12 = v58 - 48;
            *((_OWORD *)v58 - 2) = *((_OWORD *)v10 - 2);
            *((_OWORD *)v58 - 1) = v60;
            *((_OWORD *)v58 - 3) = v59;
            v10 -= 12;
            v58 -= 48;
          }
          while (v10 != v47);
          v10 = v57 + 12;
          v72 = v12;
          v74 = &v50[48 * v49];
          if (v47)
LABEL_50:
            operator delete(v47);
        }
        __p = (float *)v12;
        goto LABEL_52;
      }
      v35 = (float)v24;
      v36 = (float)(int)v25;
      v37 = v27 < v30;
      v38 = (float)v27;
      v6 = (uint64_t)a5;
      v40 = a5[1];
      v39 = (unint64_t)a5[2];
      if ((unint64_t)v40 < v39)
      {
        *v40 = v35;
        v40[1] = v36;
        *((_DWORD *)v40 + 2) = v22;
        v40[3] = v29;
        *((_QWORD *)v40 + 2) = 0;
        v40[6] = 0.0;
        *((_BYTE *)v40 + 28) = v37;
        v11 = v70;
        *((_DWORD *)v40 + 8) = v70;
        *((_DWORD *)v40 + 9) = v21;
        v40[10] = 0.0;
        v19 = (char *)(v40 + 12);
        v40[11] = v38;
      }
      else
      {
        v41 = *a5;
        v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40 - (char *)*a5) >> 4);
        v43 = v42 + 1;
        if (v42 + 1 > 0x555555555555555)
          goto LABEL_61;
        v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (_QWORD)v41) >> 4);
        if (2 * v44 > v43)
          v43 = 2 * v44;
        if (v44 >= 0x2AAAAAAAAAAAAAALL)
          v45 = 0x555555555555555;
        else
          v45 = v43;
        if (v45)
        {
          if (v45 > 0x555555555555555)
            goto LABEL_60;
          v46 = (char *)operator new(48 * v45);
        }
        else
        {
          v46 = 0;
        }
        v51 = &v46[48 * v42];
        *(float *)v51 = v35;
        *((float *)v51 + 1) = v36;
        *((_DWORD *)v51 + 2) = v22;
        *((float *)v51 + 3) = v29;
        *((_QWORD *)v51 + 2) = 0;
        *((_DWORD *)v51 + 6) = 0;
        v51[28] = v37;
        v11 = v70;
        *((_DWORD *)v51 + 8) = v70;
        *((_DWORD *)v51 + 9) = v21;
        *((_DWORD *)v51 + 10) = 0;
        *((float *)v51 + 11) = v38;
        v52 = v51;
        if (v40 != v41)
        {
          v6 = (uint64_t)a5;
          do
          {
            v53 = *((_OWORD *)v40 - 3);
            v54 = *((_OWORD *)v40 - 1);
            *((_OWORD *)v52 - 2) = *((_OWORD *)v40 - 2);
            *((_OWORD *)v52 - 1) = v54;
            *((_OWORD *)v52 - 3) = v53;
            v52 -= 48;
            v40 -= 12;
          }
          while (v40 != v41);
          v40 = *a5;
          v55 = &v46[48 * v45];
          v19 = v51 + 48;
          *a5 = (float *)v52;
          a5[1] = (float *)(v51 + 48);
          a5[2] = (float *)v55;
          if (!v40)
            goto LABEL_8;
LABEL_44:
          operator delete(v40);
          goto LABEL_8;
        }
        v6 = (uint64_t)a5;
        v56 = &v46[48 * v45];
        v19 = v51 + 48;
        *a5 = (float *)v51;
        a5[1] = (float *)(v51 + 48);
        a5[2] = (float *)v56;
        if (v40)
          goto LABEL_44;
      }
LABEL_8:
      a4 = v65;
      v13 = v64;
      v15 = v68;
      v17 = v67;
      *(_QWORD *)(v6 + 8) = v19;
LABEL_9:
      ++v16;
      v14 = *a4;
      if (v16 >= *(unsigned int *)(*a4 + v15))
      {
        v9 = a3[2];
        goto LABEL_4;
      }
    }
  }
LABEL_55:
  if (*(_BYTE *)(a1 + 32))
  {
    sub_20E7BFC70((char **)&v72, a6, 1, *(int *)(a1 + 36), 2 * *(int *)(a1 + 40), 0x8000u);
    sub_20E7C352C(v6, *(_QWORD *)(v6 + 8), (char *)v72, v73, 0xAAAAAAAAAAAAAAABLL * ((v73 - (_BYTE *)v72) >> 4));
  }
  if (v72)
  {
    v73 = (char *)v72;
    operator delete(v72);
  }
}

void sub_20E7BE95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E7BE984(float *a1, uint64_t a2, uint64_t a3, char **a4, __n128 a5, double a6, __n128 a7, double a8, double a9, double a10, double a11, double a12)
{
  float v12;
  float v13;
  float v14;
  unsigned int v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  BOOL v48;
  BOOL v50;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  unsigned int v64;
  float v65;
  unsigned int v66;
  float v67;
  unsigned int v68;
  unsigned int v69;
  float v70;
  unsigned int v71;
  float v72;
  unsigned int v73;
  float v74;
  unsigned int v75;
  float v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  float v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  unsigned int v94;
  float v95;
  unsigned int v96;
  float v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  float v101;
  unsigned int v102;
  float v103;
  BOOL v104;
  BOOL v106;
  BOOL v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  float v119;
  float v120;
  float v121;
  unsigned int v122;
  float v123;
  unsigned int v124;
  float v125;
  unsigned int v126;
  unsigned int v127;
  float v128;
  unsigned int v129;
  float v130;
  unsigned int v131;
  float v132;
  unsigned int v133;
  float v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  float v139;
  float v140;
  float v141;
  unsigned int v142;
  float v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  float v148;
  float v149;
  float v150;
  float v151;
  unsigned int v152;
  float v153;
  unsigned int v154;
  float v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  float v159;
  unsigned int v160;
  float v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  float v189;
  uint64_t v190;
  float v191;
  unsigned int v192;
  float v193;
  uint64_t v194;
  unsigned int v195;
  float v196;
  unsigned int v197;
  float v198;
  float v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t v202;
  float v203;
  float v204;
  float v205;
  float v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int v219;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  BOOL v225;
  unsigned int v227;
  BOOL v228;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v235;
  uint64_t v236;
  unsigned int v237;
  BOOL v238;
  BOOL v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  BOOL v244;
  BOOL v245;
  BOOL v248;
  BOOL v250;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  unsigned int v257;
  uint64_t v258;
  unsigned int v259;
  BOOL v260;
  uint64_t v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  BOOL v266;
  uint64_t v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  BOOL v272;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  float v279;
  float v280;
  uint64_t v281;
  float v282;
  float v283;
  float v284;
  uint64_t v285;
  float v286;
  float v287;
  float v288;
  float v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  float v293;
  float v294;
  unsigned int v295;
  unsigned int v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  unsigned int v300;
  unsigned int v301;
  float v302;
  float v303;
  float v304;
  unsigned __int32 v305;
  float v306;
  float v307;
  float v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  unsigned int v312;
  float v313;
  float v314;
  float v315;
  float v316;
  unsigned int v317;
  unsigned int v318;
  float v319;
  float v320;
  float v321;
  float v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  float v326;
  unsigned int v327;
  float v328;
  float v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  float v333;
  unsigned int v334;
  unsigned int v335;
  float v336;
  float v337;
  uint64_t v338;
  uint64_t v339;
  float v340;
  uint64_t v341;
  float v342;
  float v343;
  float v344;
  unsigned int v345;
  float v346;
  float v347;
  float v348;
  unsigned int v349;
  float v350;
  unsigned int v351;
  float v352;
  uint64_t v353;
  unint64_t v354;
  float v355;
  uint64_t v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  uint64_t v363;
  float v364;
  float v365;
  float v366;
  float v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int v370;
  unsigned int v371;
  float v372;
  float v373;
  float v374;
  float v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int v378;
  unsigned int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int v389;
  _QWORD *v390;
  unsigned int v391;
  unint64_t v394;
  float v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  float32x2_t v405;
  float v406;
  int v407;
  float v408;
  float v409;
  float v410;
  float v411;
  float v412;
  float v413;
  float v414;
  unsigned __int32 v415;
  uint64_t v416;

  v416 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24) != 2)
    sub_20E80ABE4();
  v16 = a4;
  v17 = a4[1] - *a4;
  if (v17)
  {
    v18 = 0;
    v394 = 0;
    v19 = v17 / 48;
    if (v19 <= 1)
      v20 = 1;
    else
      v20 = v19;
    while (1)
    {
      v21 = *v16;
      v22 = (uint64_t)&(*v16)[v18];
      v23 = (int)(float)(*(float *)v22 + 0.5);
      v24 = (int)(float)(*(float *)(v22 + 4) + 0.5);
      a5.n128_u32[0] = *(_DWORD *)(v22 + 44);
      v25 = (int)a5.n128_f32[0];
      v26 = *(_DWORD *)(v22 + 8);
      v27 = v26 - 1;
      v28 = *(_QWORD *)(a3 + 48);
      v29 = v26 + 1;
      v30 = *(_QWORD *)(v28 + 144 * v27 + 32);
      if (v30 == *(_QWORD *)(v28 + 144 * v26 + 32))
      {
        v31 = *(_QWORD *)(v28 + 144 * v29 + 32);
        if (v31 < v30)
          break;
      }
      v401 = *v16;
      v403 = (uint64_t)&(*v16)[v18];
      v207 = *(_QWORD *)(v28 + 144 * v29 + 120);
      v208 = v24 - 1;
      v209 = *(_QWORD *)(v207 + 8 * v208);
      v210 = 2 * v24;
      v211 = *(_QWORD *)(v207 + 8 * v24);
      v212 = v24 + 1;
      v213 = *(_QWORD *)(v207 + 8 * v212);
      v214 = 2 * v23;
      v215 = v214 - 2;
      v216 = *(unsigned __int16 *)(v209 + 2 * (v214 - 2));
      v217 = *(unsigned __int16 *)(v209 + 2 * v214);
      v218 = v214 + 2;
      v219 = *(unsigned __int16 *)(v209 + 2 * (v214 + 2));
      if (v216 >= v25 || v217 >= v25 || v219 >= v25)
        goto LABEL_122;
      v222 = *(unsigned __int16 *)(v211 + 2 * v215);
      v223 = *(unsigned __int16 *)(v211 + 4 * v23);
      v224 = *(unsigned __int16 *)(v211 + 2 * v218);
      v225 = v222 >= v25 || v223 >= v25;
      if (v225 || v224 >= v25)
        goto LABEL_122;
      v227 = *(unsigned __int16 *)(v213 + 2 * v214);
      v228 = *(unsigned __int16 *)(v213 + 2 * v215) >= v25 || v227 >= v25;
      if (v228 || *(unsigned __int16 *)(v213 + 2 * v218) >= v25)
        goto LABEL_122;
      v230 = v28 + 144 * (int)v27;
      v396 = *(_QWORD *)(v230 + 40);
      v398 = *(_QWORD *)(v230 + 72);
      v231 = v398 + 2 * (v210 - 2) * (int)v396;
      v232 = 4 * v23;
      v233 = v232 - 4;
      v16 = a4;
      if (*(unsigned __int16 *)(v231 + 2 * (v232 - 4)) >= v25 || *(unsigned __int16 *)(v231 + 2 * v232) >= v25)
        goto LABEL_122;
      v235 = v232 + 4;
      if (*(unsigned __int16 *)(v231 + 2 * ((int)v232 + 4)) >= v25)
        goto LABEL_122;
      v236 = v398 + 2 * v210 * (int)v396;
      v389 = *(unsigned __int16 *)(v236 + 2 * v233);
      v391 = *(unsigned __int16 *)(v236 + 2 * v232);
      v237 = *(unsigned __int16 *)(v236 + 2 * v235);
      v238 = v389 >= v25 || v391 >= v25;
      v239 = v238 || v237 >= v25;
      v16 = a4;
      if (v239
        || ((v240 = v398 + 2 * (v210 + 2) * (int)v396,
             v241 = *(unsigned __int16 *)(v240 + 2 * v233),
             v242 = *(unsigned __int16 *)(v240 + 2 * v232),
             v243 = *(unsigned __int16 *)(v240 + 2 * v235),
             v241 < v25)
          ? (v244 = v242 >= v25)
          : (v244 = 1),
            (v16 = a4, !v244) ? (v245 = v243 >= v25) : (v245 = 1),
            v245))
      {
LABEL_122:
        if (v216 <= v25 || v217 <= v25 || v219 <= v25)
          goto LABEL_7;
        v222 = *(unsigned __int16 *)(v211 + 2 * v215);
        v223 = *(unsigned __int16 *)(v211 + 2 * v214);
        v224 = *(unsigned __int16 *)(v211 + 2 * v218);
        v248 = v222 > v25 && v223 > v25;
        if (!v248 || v224 <= v25)
          goto LABEL_7;
        v227 = *(unsigned __int16 *)(v213 + 2 * v214);
        v250 = *(unsigned __int16 *)(v213 + 2 * v215) > v25 && v227 > v25;
        if (!v250 || *(unsigned __int16 *)(v213 + 2 * v218) <= v25)
          goto LABEL_7;
        v252 = v28 + 144 * (int)v27;
        v275 = *(_QWORD *)(v252 + 72);
        v276 = *(_QWORD *)(v252 + 40);
        v253 = v275 + 2 * (v210 - 2) * (int)v276;
        v254 = 4 * v23;
        v255 = v254 - 4;
        v256 = *(unsigned __int16 *)(v253 + 2 * (v254 - 4));
        v257 = *(unsigned __int16 *)(v253 + 2 * v254);
        v258 = v254 + 4;
        v259 = *(unsigned __int16 *)(v253 + 2 * (v254 + 4));
        v260 = v256 > v25 && v257 > v25;
        if (!v260 || v259 <= v25)
          goto LABEL_7;
        v262 = v275 + 2 * v210 * (int)v276;
        v263 = *(unsigned __int16 *)(v262 + 2 * v255);
        v264 = *(unsigned __int16 *)(v262 + 2 * v254);
        v265 = *(unsigned __int16 *)(v262 + 2 * v258);
        v266 = v263 > v25 && v264 > v25;
        if (!v266 || v265 <= v25)
          goto LABEL_7;
        v268 = v275 + 2 * (v210 + 2) * (int)v276;
        v269 = *(unsigned __int16 *)(v268 + 2 * v255);
        v270 = *(unsigned __int16 *)(v268 + 2 * v254);
        v271 = *(unsigned __int16 *)(v268 + 2 * v258);
        v272 = v269 > v25 && v270 > v25;
        if (!v272 || v271 <= v25)
          goto LABEL_7;
        v274 = a2;
      }
      else
      {
        v274 = a2;
        v276 = v396;
        v275 = v398;
      }
      v277 = *(_QWORD *)(v28 + 144 * v26 + 120);
      v278 = *(_QWORD *)(v277 + 8 * v24);
      a5.n128_u16[0] = *(_WORD *)(v278 + 2 * v214);
      v279 = (float)a5.n128_u32[0];
      v280 = (float)v23;
      a5.n128_f32[0] = (float)v24;
      LOWORD(a8) = *(_WORD *)(v278 + 2 * v215);
      *(float *)&a11 = (float)LODWORD(a8);
      LOWORD(a8) = *(_WORD *)(v278 + 2 * v218);
      v281 = *(_QWORD *)(v277 + 8 * v208);
      LOWORD(a9) = *(_WORD *)(v281 + 2 * v215);
      *(float *)&a12 = (float)LODWORD(a8);
      v282 = (float)LODWORD(a9);
      LOWORD(a8) = *(_WORD *)(v281 + 2 * v214);
      LOWORD(a9) = *(_WORD *)(v281 + 2 * v218);
      v283 = (float)LODWORD(a8);
      v284 = (float)LODWORD(a9);
      v285 = *(_QWORD *)(v277 + 8 * v212);
      LOWORD(a8) = *(_WORD *)(v285 + 2 * v215);
      v286 = (float)LODWORD(a8);
      LOWORD(a8) = *(_WORD *)(v285 + 2 * v214);
      v287 = (float)LODWORD(a8);
      LOWORD(a8) = *(_WORD *)(v285 + 2 * v218);
      v288 = (float)LODWORD(a8);
      *(float *)&a9 = *(float *)&a12 - *(float *)&a11;
      *(float *)&a8 = v287 - v283;
      *(float *)&a12 = (float)(*(float *)&a11 + (float)(v279 * -2.0)) + *(float *)&a12;
      *(float *)&a11 = (float)(v283 + (float)(v279 * -2.0)) + v287;
      LODWORD(v285) = (float)(v280 + v280);
      v289 = (float)((float)(v282 + v288) - (float)(v284 + v286)) * 0.25;
      v290 = (float)(a5.n128_f32[0] + a5.n128_f32[0]);
      v291 = v275 + 2 * v276 * v290;
      v292 = v291 + 2 * v276;
      v293 = (float)(v285 + 1) - (float)(v280 + v280);
      v294 = (float)(v290 + 1) - (float)(a5.n128_f32[0] + a5.n128_f32[0]);
      *(float *)&v295 = (float)(v280 + v280) - (float)v285;
      *(float *)&v296 = (float)(a5.n128_f32[0] + a5.n128_f32[0])
                      - (float)(float)(a5.n128_f32[0] + a5.n128_f32[0]);
      v297 = 2 * (2 * v285);
      LOWORD(v15) = *(_WORD *)(v291 + v297);
      *(float *)&v298 = (float)v15;
      v299 = 2 * (2 * (v285 + 1));
      LOWORD(v12) = *(_WORD *)(v291 + v299);
      *(float *)&v300 = (float)LODWORD(v12);
      *(float *)&v301 = (float)(*(float *)&v295 * v294) * *(float *)&v300;
      v302 = *(float *)&v301 + (float)((float)(v293 * v294) * *(float *)&v298);
      LOWORD(v301) = *(_WORD *)(v292 + v297);
      LOWORD(v298) = *(_WORD *)(v292 + v299);
      v303 = (float)(v302 + (float)((float)(v293 * *(float *)&v296) * (float)v301))
           + (float)((float)(*(float *)&v295 * *(float *)&v296) * (float)v298);
      v304 = (float)v223 - v303;
      *(float *)&v305 = (float)(v303 + (float)(v279 * -2.0)) + (float)v223;
      v306 = (float)(v280 + v280) + -2.0;
      LODWORD(v285) = v306;
      LODWORD(v290) = v306 + 1;
      v307 = (float)v290 - v306;
      v308 = v306 - (float)v306;
      v309 = 2 * (2 * v285);
      LOWORD(v298) = *(_WORD *)(v291 + v309);
      v310 = 2 * (2 * v290);
      LOWORD(v300) = *(_WORD *)(v291 + v310);
      v12 = (float)v300;
      *(float *)&v311 = (float)(v308 * v294) * v12;
      *(float *)&v312 = *(float *)&v311 + (float)((float)(v307 * v294) * (float)v298);
      LOWORD(v311) = *(_WORD *)(v292 + v309);
      v313 = *(float *)&v312 + (float)((float)(*(float *)&v296 * v307) * (float)v311);
      LOWORD(v312) = *(_WORD *)(v292 + v310);
      v314 = (float)(v313 + (float)((float)(v308 * *(float *)&v296) * (float)v312)) + (float)v224;
      v315 = (float)(v280 + v280) + 2.0;
      LODWORD(v309) = v315;
      LODWORD(v310) = v315 + 1;
      v316 = (float)v310 - v315;
      *(float *)&v317 = v316 * v294;
      *(float *)&v318 = (float)v315;
      v319 = v315 - *(float *)&v318;
      v320 = v319 * v294;
      v321 = *(float *)&v296 * v316;
      v322 = v319 * *(float *)&v296;
      v323 = 2 * (2 * v309);
      LOWORD(v296) = *(_WORD *)(v291 + v323);
      *(float *)&v324 = (float)v296;
      v325 = 2 * (2 * v310);
      LOWORD(v318) = *(_WORD *)(v291 + v325);
      v326 = (float)(v320 * (float)v318) + (float)(*(float *)&v317 * *(float *)&v324);
      LOWORD(v324) = *(_WORD *)(v292 + v323);
      *(float *)&v327 = (float)v324;
      LOWORD(v317) = *(_WORD *)(v292 + v325);
      v328 = (float)(v314
                   - (float)((float)((float)(v326 + (float)(v321 * *(float *)&v327)) + (float)(v322 * (float)v317))
                           + (float)v222))
           * 0.25;
      v329 = (float)(a5.n128_f32[0] + a5.n128_f32[0]) + -2.0;
      v330 = v329;
      LODWORD(v325) = v330 + 1;
      v331 = v275 + 2 * v276 * v330;
      v332 = v331 + 2 * v276;
      v333 = (float)v325 - v329;
      *(float *)&v334 = v293 * v333;
      LOWORD(v327) = *(_WORD *)(v331 + v297);
      *(float *)&v335 = (float)v327;
      LOWORD(v317) = *(_WORD *)(v331 + v299);
      v336 = (float)((float)(*(float *)&v295 * v333) * (float)v317) + (float)((float)(v293 * v333) * *(float *)&v335);
      LOWORD(v334) = *(_WORD *)(v332 + v297);
      LOWORD(v335) = *(_WORD *)(v332 + v299);
      v337 = (float)(a5.n128_f32[0] + a5.n128_f32[0]) + 2.0;
      v338 = v337;
      *(float *)&a10 = (float)((float)(v336
                                     + (float)((float)(v293 * (float)(v329 - (float)v329)) * (float)v334))
                             + (float)((float)(*(float *)&v295 * (float)(v329 - (float)v329)) * (float)v335))
                     + (float)v227;
      LODWORD(v325) = v338 + 1;
      v339 = v275 + 2 * v276 * v338;
      v340 = (float)v325;
      v341 = v339 + 2 * v276;
      v342 = v340 - v337;
      v343 = v293 * v342;
      v344 = *(float *)&v295 * v342;
      *(float *)&v345 = (float)v337;
      v346 = v337 - *(float *)&v345;
      v347 = v293 * v346;
      v348 = *(float *)&v295 * v346;
      LOWORD(v295) = *(_WORD *)(v339 + v297);
      LOWORD(v345) = *(_WORD *)(v339 + v299);
      *(float *)&v349 = (float)v345;
      v350 = v344 * *(float *)&v349;
      LOWORD(v349) = *(_WORD *)(v341 + v297);
      *(float *)&v351 = v350 + (float)(v343 * (float)v295);
      v352 = *(float *)&v351 + (float)(v347 * (float)v349);
      LOWORD(v351) = *(_WORD *)(v341 + v299);
      v407 = LODWORD(a12);
      v408 = v289;
      v409 = v328;
      v410 = v289;
      v411 = *(float *)&a11;
      v412 = (float)(*(float *)&a10 - (float)((float)(v352 + (float)(v348 * (float)v351)) + (float)v217)) * 0.25;
      v413 = v328;
      v414 = v412;
      v415 = v305;
      LODWORD(a10) = -0.5;
      *(float *)&a8 = *(float *)&a8 * -0.5;
      v405.f32[0] = *(float *)&a9 * -0.5;
      v405.i32[1] = LODWORD(a8);
      v406 = v304 * -0.5;
      v22 = v403;
      a7.n128_f32[0] = (float)(1 << *(_DWORD *)&v401[v18 + 32]);
      *(float *)&v401[v18] = (float)v23 * a7.n128_f32[0];
      *(float *)(v403 + 4) = a5.n128_f32[0] * a7.n128_f32[0];
      a5.n128_u32[0] = 1.0;
      if (sub_20E7C1C30(v403, v274, a3, (float *)&v407, &v405, 0x8000u, a5.n128_f64[0], *a1, a7.n128_f64[0], a8, a9, a10, a11, a12))goto LABEL_172;
LABEL_7:
      v18 += 48;
      if (!--v20)
      {
        v354 = 0xAAAAAAAAAAAAAAABLL * ((v16[1] - *v16) >> 4);
        if (v394 <= v354)
        {
          if (v394 < v354)
            v16[1] = &(*v16)[48 * v394];
        }
        else
        {
          sub_20E7C37AC(v16, v394 - v354);
        }
        return;
      }
    }
    v32 = (float)v24;
    v33 = (float)v24 * 0.5;
    v34 = v33 + -0.5;
    if ((float)(v33 + -0.5) < 1.0)
      goto LABEL_7;
    v35 = (float)v23;
    v36 = (float)v23 * 0.5;
    v12 = v33 + 0.5;
    v37 = v36 + -0.5;
    v38 = (float)(v33 + 0.5) > (float)(unint64_t)(*(_QWORD *)(v28 + 144 * v29 + 48) - 2) || v37 < 1.0;
    if (v38 || (float)(v36 + 0.5) > (float)(v31 - 2))
      goto LABEL_7;
    v395 = v36 + 0.5;
    v39 = v28 + 144 * (v26 + 1);
    v40 = v28 + 144 * (int)v27;
    v41 = *(_QWORD *)(v40 + 120);
    v390 = (_QWORD *)(v40 + 120);
    v387 = v24 - 1;
    v42 = *(_QWORD *)(v41 + 8 * v387);
    v402 = *(_QWORD *)(v41 + 8 * v24);
    v386 = v24;
    v388 = v24 + 1;
    v397 = *(_QWORD *)(v41 + 8 * v388);
    v43 = 2 * v23;
    v44 = v43 - 2;
    v45 = v43 + 2;
    v400 = v42;
    v46 = *(unsigned __int16 *)(v42 + 2 * (v43 - 2)) >= v25 || *(unsigned __int16 *)(v42 + 2 * v43) >= v25;
    if (v46 || *(unsigned __int16 *)(v42 + 2 * (v43 + 2)) >= v25)
      goto LABEL_46;
    v48 = *(unsigned __int16 *)(v402 + 2 * v44) >= v25 || *(unsigned __int16 *)(v402 + 2 * v43) >= v25;
    if (v48 || *(unsigned __int16 *)(v402 + 2 * v45) >= v25)
      goto LABEL_46;
    v50 = *(unsigned __int16 *)(v397 + 2 * v44) >= v25 || *(unsigned __int16 *)(v397 + 2 * v43) >= v25;
    if (v50 || *(unsigned __int16 *)(v397 + 2 * v45) >= v25)
      goto LABEL_46;
    v52 = (float)v25;
    v53 = v28 + 144 * v29;
    v54 = *(_QWORD *)(v53 + 72);
    v55 = *(_QWORD *)(v53 + 40);
    v56 = v34;
    v57 = v37 + 1;
    v58 = v56 + 1;
    v380 = v56;
    v59 = v54 + 2 * v55 * v56;
    v60 = v59 + 2 * v55;
    v61 = (float)v57 - v37;
    v62 = (float)v58 - v34;
    v63 = v37 - (float)v37;
    *(float *)&a8 = v34 - (float)v34;
    v384 = 2 * v37;
    v385 = 2 * v57;
    LOWORD(v13) = *(_WORD *)(v59 + 2 * v384);
    v13 = (float)LODWORD(v13);
    LOWORD(v14) = *(_WORD *)(v59 + 2 * v385);
    v14 = (float)LODWORD(v14);
    *(float *)&v64 = (float)(v63 * v62) * v14;
    v65 = *(float *)&v64 + (float)((float)(v61 * v62) * v13);
    LOWORD(v64) = *(_WORD *)(v60 + 2 * v384);
    *(float *)&v66 = (float)v64;
    v67 = v65 + (float)((float)(v61 * *(float *)&a8) * *(float *)&v66);
    LOWORD(v66) = *(_WORD *)(v60 + 2 * v385);
    *(float *)&a9 = v67 + (float)((float)(v63 * *(float *)&a8) * (float)v66);
    if (*(float *)&a9 >= (float)v25)
      goto LABEL_46;
    v68 = v36 + 1;
    *(float *)&v69 = (float)v68 - v36;
    v70 = *(float *)&v69 * v62;
    *(float *)&v71 = v36 - (float)v36;
    v14 = *(float *)&v71 * v62;
    v378 = v71;
    v379 = v69;
    v13 = *(float *)&v69 * *(float *)&a8;
    v72 = *(float *)&v71 * *(float *)&a8;
    v376 = 2 * v68;
    v377 = 2 * v36;
    LOWORD(v71) = *(_WORD *)(v59 + 2 * v377);
    LOWORD(v69) = *(_WORD *)(v59 + 2 * v376);
    v372 = v14;
    v373 = v13;
    *(float *)&v73 = v14 * (float)v69;
    v374 = v72;
    v375 = v70;
    v74 = *(float *)&v73 + (float)(v70 * (float)v71);
    LOWORD(v73) = *(_WORD *)(v60 + 2 * v377);
    *(float *)&v75 = (float)v73;
    v76 = v74 + (float)(v13 * *(float *)&v75);
    LOWORD(v75) = *(_WORD *)(v60 + 2 * v376);
    *(float *)&a9 = v76 + (float)(v72 * (float)v75);
    if (*(float *)&a9 >= v52)
      goto LABEL_46;
    v77 = v395 + 1;
    *(float *)&v78 = (float)v77 - v395;
    *(float *)&v79 = *(float *)&v78 * v62;
    *(float *)&v80 = v395 - (float)v395;
    v81 = *(float *)&v80 * v62;
    v370 = v80;
    v371 = v78;
    v82 = *(float *)&v78 * *(float *)&a8;
    *(float *)&a8 = *(float *)&v80 * *(float *)&a8;
    v368 = 2 * v395;
    v369 = 2 * v77;
    LOWORD(v80) = *(_WORD *)(v59 + 2 * v368);
    LOWORD(v78) = *(_WORD *)(v59 + 2 * v369);
    v83 = (float)(v81 * (float)v78) + (float)(*(float *)&v79 * (float)v80);
    LOWORD(v79) = *(_WORD *)(v60 + 2 * v368);
    *(float *)&v84 = (float)v79;
    v85 = v83 + (float)(v82 * *(float *)&v84);
    LOWORD(v84) = *(_WORD *)(v60 + 2 * v369);
    *(float *)&a9 = (float)v84;
    if ((float)(v85 + (float)(*(float *)&a8 * *(float *)&a9)) >= v52)
      goto LABEL_46;
    v86 = v33;
    v87 = v86 + 1;
    v363 = v86;
    v88 = v54 + 2 * v55 * v86;
    v89 = v88 + 2 * v55;
    v90 = (float)v87 - v33;
    *(float *)&a8 = v61 * v90;
    *(float *)&a9 = v63 * v90;
    v91 = v33 - (float)v33;
    v92 = v91 * v61;
    v93 = v63 * v91;
    LOWORD(v61) = *(_WORD *)(v88 + 2 * v384);
    LOWORD(v63) = *(_WORD *)(v88 + 2 * v385);
    v366 = *(float *)&a9;
    v367 = *(float *)&a8;
    *(float *)&v94 = *(float *)&a9 * (float)LODWORD(v63);
    v95 = *(float *)&v94 + (float)(*(float *)&a8 * (float)LODWORD(v61));
    LOWORD(v94) = *(_WORD *)(v89 + 2 * v384);
    *(float *)&v96 = (float)v94;
    v364 = v92;
    v365 = v93;
    v97 = v95 + (float)(v92 * *(float *)&v96);
    LOWORD(v96) = *(_WORD *)(v89 + 2 * v385);
    if ((float)(v97 + (float)(v93 * (float)v96)) >= v52)
      goto LABEL_46;
    HIWORD(v99) = HIWORD(v378);
    HIWORD(v98) = HIWORD(v379);
    *(float *)&a9 = *(float *)&v379 * v90;
    *(float *)&a8 = *(float *)&v379 * v91;
    LOWORD(v98) = *(_WORD *)(v88 + 2 * v377);
    LOWORD(v99) = *(_WORD *)(v88 + 2 * v376);
    v359 = *(float *)&v378 * v90;
    v360 = *(float *)&v379 * v90;
    *(float *)&v100 = (float)(*(float *)&v378 * v90) * (float)v99;
    v101 = *(float *)&v100 + (float)((float)(*(float *)&v379 * v90) * (float)v98);
    LOWORD(v100) = *(_WORD *)(v89 + 2 * v377);
    *(float *)&v102 = (float)v100;
    v361 = *(float *)&v379 * v91;
    v362 = *(float *)&v378 * v91;
    v103 = v101 + (float)((float)(*(float *)&v379 * v91) * *(float *)&v102);
    LOWORD(v102) = *(_WORD *)(v89 + 2 * v376);
    if ((float)(v103 + (float)((float)(*(float *)&v378 * v91) * (float)v102)) >= v52)
      goto LABEL_46;
    v355 = (float)v25;
    v357 = v33 - (float)v33;
    v358 = (float)v87 - v33;
    v381 = v43 + 2;
    v382 = v43 - 2;
    v383 = v43;
    v356 = v28 + 144 * (v26 + 1);
    a5.n128_f32[0] = sub_20E7C3948(v39, v395, v33);
    v44 = v382;
    v43 = v383;
    v45 = v381;
    v39 = v356;
    if (a5.n128_f32[0] >= (float)v25)
      goto LABEL_46;
    a5.n128_f32[0] = sub_20E7C3948(v356, v37, v33 + 0.5);
    v44 = v382;
    v43 = v383;
    v45 = v381;
    v39 = v28 + 144 * (v26 + 1);
    if (a5.n128_f32[0] >= v355)
      goto LABEL_46;
    a5.n128_f32[0] = sub_20E7C3948(v356, v36, v33 + 0.5);
    v44 = v382;
    v43 = v383;
    v45 = v381;
    v39 = v28 + 144 * (v26 + 1);
    if (a5.n128_f32[0] >= v355
      || (a5.n128_f32[0] = sub_20E7C3948(v356, v395, v33 + 0.5),
          v44 = v382,
          v43 = v383,
          v45 = v381,
          v39 = v28 + 144 * (v26 + 1),
          a5.n128_f32[0] >= v355))
    {
LABEL_46:
      v104 = *(unsigned __int16 *)(v400 + 2 * v44) > v25 && *(unsigned __int16 *)(v400 + 2 * v43) > v25;
      if (!v104 || *(unsigned __int16 *)(v400 + 2 * v45) <= v25)
        goto LABEL_7;
      v106 = *(unsigned __int16 *)(v402 + 2 * v44) > v25 && *(unsigned __int16 *)(v402 + 2 * v43) > v25;
      if (!v106 || *(unsigned __int16 *)(v402 + 2 * v45) <= v25)
        goto LABEL_7;
      v382 = v44;
      v383 = v43;
      v381 = v45;
      v108 = *(unsigned __int16 *)(v397 + 2 * v44) > v25 && *(unsigned __int16 *)(v397 + 2 * v43) > v25;
      if (!v108 || *(unsigned __int16 *)(v397 + 2 * v45) <= v25)
        goto LABEL_7;
      v110 = v28 + 144 * v29;
      v111 = *(_QWORD *)(v110 + 72);
      v112 = *(_QWORD *)(v110 + 40);
      v113 = v34;
      v114 = v37 + 1;
      v115 = v113 + 1;
      v380 = v113;
      v116 = v111 + 2 * v112 * v113;
      v117 = v116 + 2 * v112;
      v118 = (float)v114 - v37;
      v119 = (float)v115 - v34;
      v120 = v37 - (float)v37;
      *(float *)&a8 = v34 - (float)v34;
      v121 = (float)v25;
      v384 = 2 * v37;
      v385 = 2 * v114;
      LOWORD(v13) = *(_WORD *)(v116 + 2 * v384);
      v13 = (float)LODWORD(v13);
      LOWORD(v14) = *(_WORD *)(v116 + 2 * v385);
      v14 = (float)LODWORD(v14);
      *(float *)&v122 = (float)(v120 * v119) * v14;
      v123 = *(float *)&v122 + (float)((float)(v118 * v119) * v13);
      LOWORD(v122) = *(_WORD *)(v117 + 2 * v384);
      *(float *)&v124 = (float)v122;
      v125 = v123 + (float)((float)(v118 * *(float *)&a8) * *(float *)&v124);
      LOWORD(v124) = *(_WORD *)(v117 + 2 * v385);
      *(float *)&a9 = v125 + (float)((float)(v120 * *(float *)&a8) * (float)v124);
      if (*(float *)&a9 <= (float)v25)
        goto LABEL_7;
      v126 = v36 + 1;
      *(float *)&v127 = (float)v126 - v36;
      v128 = *(float *)&v127 * v119;
      *(float *)&v129 = v36 - (float)v36;
      v14 = *(float *)&v129 * v119;
      v378 = v129;
      v379 = v127;
      v13 = *(float *)&v127 * *(float *)&a8;
      v130 = *(float *)&v129 * *(float *)&a8;
      v376 = 2 * v126;
      v377 = 2 * v36;
      LOWORD(v129) = *(_WORD *)(v116 + 2 * v377);
      LOWORD(v127) = *(_WORD *)(v116 + 2 * v376);
      v372 = v14;
      v373 = v13;
      *(float *)&v131 = v14 * (float)v127;
      v374 = v130;
      v375 = v128;
      v132 = *(float *)&v131 + (float)(v128 * (float)v129);
      LOWORD(v131) = *(_WORD *)(v117 + 2 * v377);
      *(float *)&v133 = (float)v131;
      v134 = v132 + (float)(v13 * *(float *)&v133);
      LOWORD(v133) = *(_WORD *)(v117 + 2 * v376);
      *(float *)&a9 = v134 + (float)(v130 * (float)v133);
      if (*(float *)&a9 <= v121)
        goto LABEL_7;
      v135 = v395 + 1;
      *(float *)&v136 = (float)v135 - v395;
      *(float *)&v137 = *(float *)&v136 * v119;
      *(float *)&v138 = v395 - (float)v395;
      v139 = *(float *)&v138 * v119;
      v370 = v138;
      v371 = v136;
      v140 = *(float *)&v136 * *(float *)&a8;
      *(float *)&a8 = *(float *)&v138 * *(float *)&a8;
      v368 = 2 * v395;
      v369 = 2 * v135;
      LOWORD(v138) = *(_WORD *)(v116 + 2 * v368);
      LOWORD(v136) = *(_WORD *)(v116 + 2 * v369);
      v141 = (float)(v139 * (float)v136) + (float)(*(float *)&v137 * (float)v138);
      LOWORD(v137) = *(_WORD *)(v117 + 2 * v368);
      *(float *)&v142 = (float)v137;
      v143 = v141 + (float)(v140 * *(float *)&v142);
      LOWORD(v142) = *(_WORD *)(v117 + 2 * v369);
      *(float *)&a9 = (float)v142;
      if ((float)(v143 + (float)(*(float *)&a8 * *(float *)&a9)) <= v121)
        goto LABEL_7;
      v144 = v33;
      v145 = v144 + 1;
      v363 = v144;
      v146 = v111 + 2 * v112 * v144;
      v147 = v146 + 2 * v112;
      v148 = (float)v145 - v33;
      *(float *)&a8 = v118 * v148;
      *(float *)&a9 = v120 * v148;
      v149 = v33 - (float)v33;
      v150 = v149 * v118;
      v151 = v120 * v149;
      LOWORD(v118) = *(_WORD *)(v146 + 2 * v384);
      LOWORD(v120) = *(_WORD *)(v146 + 2 * v385);
      v366 = *(float *)&a9;
      v367 = *(float *)&a8;
      *(float *)&v152 = *(float *)&a9 * (float)LODWORD(v120);
      v153 = *(float *)&v152 + (float)(*(float *)&a8 * (float)LODWORD(v118));
      LOWORD(v152) = *(_WORD *)(v147 + 2 * v384);
      *(float *)&v154 = (float)v152;
      v364 = v150;
      v365 = v151;
      v155 = v153 + (float)(v150 * *(float *)&v154);
      LOWORD(v154) = *(_WORD *)(v147 + 2 * v385);
      if ((float)(v155 + (float)(v151 * (float)v154)) <= v121)
        goto LABEL_7;
      HIWORD(v157) = HIWORD(v378);
      HIWORD(v156) = HIWORD(v379);
      *(float *)&a9 = *(float *)&v379 * v148;
      v357 = v33 - (float)v33;
      v358 = (float)v145 - v33;
      *(float *)&a8 = *(float *)&v379 * v149;
      LOWORD(v156) = *(_WORD *)(v146 + 2 * v377);
      LOWORD(v157) = *(_WORD *)(v146 + 2 * v376);
      v359 = *(float *)&v378 * v148;
      v360 = *(float *)&v379 * v148;
      *(float *)&v158 = (float)(*(float *)&v378 * v148) * (float)v157;
      v159 = *(float *)&v158 + (float)((float)(*(float *)&v379 * v148) * (float)v156);
      LOWORD(v158) = *(_WORD *)(v147 + 2 * v377);
      *(float *)&v160 = (float)v158;
      v361 = *(float *)&v379 * v149;
      v362 = *(float *)&v378 * v149;
      v161 = v159 + (float)((float)(*(float *)&v379 * v149) * *(float *)&v160);
      LOWORD(v160) = *(_WORD *)(v147 + 2 * v376);
      if ((float)(v161 + (float)((float)(*(float *)&v378 * v149) * (float)v160)) <= v121)
        goto LABEL_7;
      v162 = v39;
      if (sub_20E7C3948(v39, v395, v33) <= v121)
        goto LABEL_7;
      if (sub_20E7C3948(v162, v37, v33 + 0.5) <= v121)
        goto LABEL_7;
      if (sub_20E7C3948(v162, v36, v33 + 0.5) <= v121)
        goto LABEL_7;
      a5.n128_f32[0] = sub_20E7C3948(v162, v395, v33 + 0.5);
      if (a5.n128_f32[0] <= v121)
        goto LABEL_7;
    }
    v163 = v28 + 144 * v29;
    v164 = *(_QWORD *)(v163 + 72);
    v165 = *(_QWORD *)(v163 + 40);
    v166 = v164 + 2 * v165 * v363;
    v167 = v166 + 2 * v165;
    a5.n128_u16[0] = *(_WORD *)(v166 + 2 * v376);
    HIWORD(v168) = HIWORD(v359);
    a7.n128_u16[1] = HIWORD(v360);
    LOWORD(v168) = *(_WORD *)(v166 + 2 * v377);
    *(float *)&v169 = (float)v168;
    a5.n128_f32[0] = (float)(v359 * (float)a5.n128_u32[0]) + (float)(v360 * *(float *)&v169);
    LOWORD(v169) = *(_WORD *)(v167 + 2 * v377);
    a7.n128_u16[0] = *(_WORD *)(v167 + 2 * v376);
    a5.n128_f32[0] = a5.n128_f32[0] + (float)(v361 * (float)v169);
    v170 = (float)a7.n128_u32[0];
    a7.n128_u16[1] = HIWORD(v362);
    a5.n128_f32[0] = a5.n128_f32[0] + (float)(v362 * v170);
    WORD1(a10) = HIWORD(v370);
    a7.n128_u16[0] = *(_WORD *)(v166 + 2 * v369);
    a7.n128_f32[0] = (float)a7.n128_u32[0];
    v171 = (float)(*(float *)&v370 * v358) * a7.n128_f32[0];
    a7.n128_u16[0] = *(_WORD *)(v166 + 2 * v368);
    a7.n128_f32[0] = (float)a7.n128_u32[0];
    v172 = v171 + (float)((float)(*(float *)&v371 * v358) * a7.n128_f32[0]);
    a7.n128_u16[0] = *(_WORD *)(v167 + 2 * v368);
    *(float *)&a8 = v357 * *(float *)&v371;
    v173 = v172 + (float)((float)(v357 * *(float *)&v371) * (float)a7.n128_u32[0]);
    a7.n128_f32[0] = *(float *)&v370 * v357;
    LOWORD(a8) = *(_WORD *)(v167 + 2 * v369);
    v174 = v173 + (float)((float)(*(float *)&v370 * v357) * (float)LODWORD(a8));
    a7.n128_u16[0] = *(_WORD *)(v166 + 2 * v385);
    WORD1(a8) = HIWORD(v366);
    LOWORD(a8) = *(_WORD *)(v166 + 2 * v384);
    *(float *)&a8 = (float)LODWORD(a8);
    a7.n128_f32[0] = (float)(v366 * (float)a7.n128_u32[0]) + (float)(v367 * *(float *)&a8);
    v175 = *(_QWORD *)(v28 + 144 * v26 + 120);
    v176 = *(_QWORD *)(v175 + 8 * v386);
    LOWORD(a8) = *(_WORD *)(v167 + 2 * v384);
    *(float *)&a8 = (float)LODWORD(a8);
    a7.n128_f32[0] = a7.n128_f32[0] + (float)(v364 * *(float *)&a8);
    LOWORD(a8) = *(_WORD *)(v167 + 2 * v385);
    a7.n128_f32[0] = a7.n128_f32[0] + (float)(v365 * (float)LODWORD(a8));
    v177 = v12;
    v178 = v177 + 1;
    v179 = v164 + 2 * v165 * v177;
    *(float *)&a8 = (float)v178 - v12;
    HIWORD(v180) = HIWORD(v378);
    *(float *)&a9 = *(float *)&v379 * *(float *)&a8;
    LOWORD(a10) = *(_WORD *)(v179 + 2 * v376);
    *(float *)&a10 = (float)LODWORD(a10);
    *(float *)&a8 = (float)(*(float *)&v378 * *(float *)&a8) * *(float *)&a10;
    LOWORD(a10) = *(_WORD *)(v179 + 2 * v377);
    *(float *)&a8 = *(float *)&a8 + (float)(*(float *)&a9 * (float)LODWORD(a10));
    LOWORD(a9) = *(_WORD *)(v176 + 2 * v383);
    v181 = v179 + 2 * v165;
    *(float *)&a10 = v12 - (float)v12;
    *(float *)&a11 = *(float *)&v379 * *(float *)&a10;
    LOWORD(a12) = *(_WORD *)(v181 + 2 * v377);
    *(float *)&a12 = (float)LODWORD(a12);
    *(float *)&a8 = *(float *)&a8 + (float)((float)(*(float *)&v379 * *(float *)&a10) * *(float *)&a12);
    LOWORD(a11) = *(_WORD *)(v176 + 2 * v382);
    *(float *)&a9 = (float)LODWORD(a9);
    *(float *)&a11 = (float)LODWORD(a11);
    LOWORD(a12) = *(_WORD *)(v176 + 2 * v381);
    v182 = *(_QWORD *)(v175 + 8 * v387);
    *(float *)&a12 = (float)LODWORD(a12);
    *(float *)&a10 = *(float *)&v378 * *(float *)&a10;
    LOWORD(v180) = *(_WORD *)(v181 + 2 * v376);
    *(float *)&v183 = (float)v180;
    *(float *)&a8 = *(float *)&a8 + (float)(*(float *)&a10 * *(float *)&v183);
    LOWORD(a10) = *(_WORD *)(v182 + 2 * v382);
    v184 = v164 + 2 * v165 * v380;
    LOWORD(v183) = *(_WORD *)(v184 + 2 * v376);
    HIWORD(v185) = HIWORD(v372);
    HIWORD(v186) = HIWORD(v373);
    LOWORD(v185) = *(_WORD *)(v184 + 2 * v377);
    *(float *)&v187 = (float)v185;
    HIWORD(v188) = HIWORD(v375);
    v189 = (float)(v372 * (float)v183) + (float)(v375 * *(float *)&v187);
    LOWORD(v187) = *(_WORD *)(v182 + 2 * v383);
    v190 = v184 + 2 * v165;
    LOWORD(v188) = *(_WORD *)(v190 + 2 * v377);
    v191 = (float)v187;
    *(float *)&v192 = (float)v188;
    v193 = v189 + (float)(v373 * *(float *)&v192);
    LOWORD(v192) = *(_WORD *)(v182 + 2 * v381);
    v194 = *(_QWORD *)(v175 + 8 * v388);
    LOWORD(v186) = *(_WORD *)(v190 + 2 * v376);
    *(float *)&v195 = (float)v186;
    v196 = v193 + (float)(v374 * *(float *)&v195);
    LOWORD(v195) = *(_WORD *)(v194 + 2 * v383);
    *(float *)&v197 = (float)v195;
    v198 = *(float *)&a12 - *(float *)&a11;
    *(float *)&a11 = (float)(*(float *)&a11 + (float)(*(float *)&a9 * -2.0)) + *(float *)&a12;
    *(float *)&a12 = *(float *)&v197 - v191;
    v199 = (float)(v191 + (float)(*(float *)&a9 * -2.0)) + *(float *)&v197;
    LOWORD(v197) = *(_WORD *)(v194 + 2 * v381);
    *(float *)&v200 = (float)v197;
    *(float *)&a10 = (float)LODWORD(a10) + *(float *)&v200;
    LOWORD(v200) = *(_WORD *)(v194 + 2 * v382);
    *(float *)&v201 = (float)v192 + (float)v200;
    v202 = *(_QWORD *)(*v390 + 8 * v386);
    *(float *)&a10 = *(float *)&a10 - *(float *)&v201;
    LOWORD(v201) = *(_WORD *)(v202 + 2 * v383);
    v203 = (float)v201;
    *(float *)&a9 = v203 + (float)(*(float *)&a9 * -2.0);
    v204 = a5.n128_f32[0] - v203;
    a5.n128_f32[0] = *(float *)&a9 + a5.n128_f32[0];
    LOWORD(a9) = *(_WORD *)(v202 + 2 * v382);
    *(float *)&a9 = (float)LODWORD(a9);
    v205 = v174 + *(float *)&a9;
    LOWORD(a9) = *(_WORD *)(v202 + 2 * v381);
    a7.n128_f32[0] = a7.n128_f32[0] + (float)LODWORD(a9);
    v206 = v205 - a7.n128_f32[0];
    a7.n128_u16[0] = *(_WORD *)(*(_QWORD *)(*v390 + 8 * v387) + 2 * v383);
    a7.n128_f32[0] = *(float *)&a8 + (float)a7.n128_u32[0];
    LOWORD(a8) = *(_WORD *)(*(_QWORD *)(*v390 + 8 * v388) + 2 * v383);
    a7.n128_f32[0] = a7.n128_f32[0] - (float)(v196 + (float)LODWORD(a8));
    LODWORD(a9) = 0.25;
    *(float *)&a8 = *(float *)&a10 * 0.25;
    v407 = LODWORD(a11);
    v408 = *(float *)&a10 * 0.25;
    v409 = v206 * 0.25;
    v410 = *(float *)&a10 * 0.25;
    v412 = a7.n128_f32[0] * 0.25;
    v413 = v206 * 0.25;
    v411 = v199;
    v414 = a7.n128_f32[0] * 0.25;
    v415 = a5.n128_u32[0];
    a7.n128_u32[0] = -0.5;
    v405.f32[0] = v198 * -0.5;
    v405.f32[1] = *(float *)&a12 * -0.5;
    v406 = v204 * -0.5;
    LODWORD(v202) = 1 << *(_DWORD *)&v21[v18 + 32];
    *(float *)&v21[v18] = v35 * (float)(int)v202;
    *(float *)(v22 + 4) = v32 * (float)(int)v202;
    a5.n128_u32[0] = 1.0;
    if ((sub_20E7C1C30(v22, a2, a3, (float *)&v407, &v405, 0x8000u, a5.n128_f64[0], *a1, a7.n128_f64[0], a8, a9, a10, a11, a12) & 1) == 0)goto LABEL_7;
LABEL_172:
    v353 = (uint64_t)&(*v16)[48 * v394];
    a5 = *(__n128 *)v22;
    a7 = *(__n128 *)(v22 + 32);
    *(_OWORD *)(v353 + 16) = *(_OWORD *)(v22 + 16);
    *(__n128 *)(v353 + 32) = a7;
    *(__n128 *)v353 = a5;
    ++v394;
    goto LABEL_7;
  }
}

void sub_20E7BFC70(char **a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, unsigned int a6)
{
  char *v6;
  char *v7;
  char *v10;
  float v11;
  unint64_t v12;
  char *v13;
  float *v14;
  float v15;
  float v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  float v28;
  float v29;
  char *v30;
  char *v31;
  char *v32;
  float v33;
  unint64_t v34;
  float v35;
  float v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  float v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  float v46;
  float v47;
  char *v48;
  unint64_t v49;
  float v50;
  float v51;
  __int128 v52;
  __int128 v53;
  float v54;
  float v55;
  float v56;
  __int128 v57;
  __int128 v58;
  __int128 *v59;
  char *v60;
  float v61;
  float v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char *v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  float v87;
  unint64_t v88;
  float *v89;
  float *v90;
  float v91;
  float v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  int v103;
  float v104;
  float v105;
  float *v106;
  unint64_t v107;
  unint64_t v108;
  float v109;
  unint64_t v110;
  float v111;
  float v112;
  __int128 v113;
  __int128 v114;
  char *v115;
  float v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  unint64_t v121;
  float v122;
  float v123;
  unint64_t v124;
  unint64_t v125;
  float v126;
  float v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  float v132;
  float v133;
  float v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  __int128 *v138;
  char *v139;
  float v140;
  float v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  char *v149;
  unint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  unint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;

  v6 = *a1;
  v7 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4) <= a4)
    return;
  v10 = &v6[48 * a4];
  if (v10 == v7)
    goto LABEL_89;
  v11 = (float)a6;
  while (1)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 4);
    if (v12 < 2)
      goto LABEL_89;
    if (v12 == 3)
      break;
    if (v12 == 2)
    {
      if (vabds_f32(*((float *)v7 - 1), v11) > vabds_f32(*((float *)v6 + 11), v11))
      {
        v203 = *((_OWORD *)v6 + 1);
        v235 = *((_OWORD *)v6 + 2);
        v173 = *(_OWORD *)v6;
        v68 = *((_OWORD *)v7 - 3);
        v69 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v6 + 1) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v6 + 2) = v69;
        *(_OWORD *)v6 = v68;
        *((_OWORD *)v7 - 2) = v203;
        *((_OWORD *)v7 - 1) = v235;
        *((_OWORD *)v7 - 3) = v173;
      }
      goto LABEL_89;
    }
    if (v7 - v6 <= 383)
    {
      if (v7 - 48 == v6)
        goto LABEL_89;
      while (2)
      {
        v70 = v7;
        if (v6 == v7)
        {
LABEL_81:
          if (v70 != v6)
          {
            v204 = *((_OWORD *)v6 + 1);
            v236 = *((_OWORD *)v6 + 2);
            v174 = *(_OWORD *)v6;
            v72 = *(_OWORD *)v70;
            v73 = *((_OWORD *)v70 + 2);
            *((_OWORD *)v6 + 1) = *((_OWORD *)v70 + 1);
            *((_OWORD *)v6 + 2) = v73;
            *(_OWORD *)v6 = v72;
            *((_OWORD *)v70 + 1) = v204;
            *((_OWORD *)v70 + 2) = v236;
            *(_OWORD *)v70 = v174;
          }
        }
        else
        {
          v71 = v6 + 48;
          if (v6 + 48 != v7)
          {
            v70 = v6;
            do
            {
              if (vabds_f32(*((float *)v71 + 11), v11) > vabds_f32(*((float *)v70 + 11), v11))
                v70 = v71;
              v71 += 48;
            }
            while (v71 != v7);
            goto LABEL_81;
          }
        }
        v6 += 48;
        if (v6 == v7 - 48)
          goto LABEL_89;
        continue;
      }
    }
    v13 = &v6[48 * (v12 >> 1)];
    v14 = (float *)(v7 - 48);
    v15 = vabds_f32(*((float *)v13 + 11), v11);
    v16 = vabds_f32(*((float *)v7 - 1), v11);
    if (v15 > vabds_f32(*((float *)v6 + 11), v11))
    {
      if (v16 <= v15)
      {
        v195 = *((_OWORD *)v6 + 1);
        v227 = *((_OWORD *)v6 + 2);
        v165 = *(_OWORD *)v6;
        v23 = *(_OWORD *)v13;
        v24 = *((_OWORD *)v13 + 2);
        *((_OWORD *)v6 + 1) = *((_OWORD *)v13 + 1);
        *((_OWORD *)v6 + 2) = v24;
        *(_OWORD *)v6 = v23;
        *((_OWORD *)v13 + 1) = v195;
        *((_OWORD *)v13 + 2) = v227;
        *(_OWORD *)v13 = v165;
        if (vabds_f32(*((float *)v7 - 1), v11) > vabds_f32(*((float *)v13 + 11), v11))
        {
          v196 = *((_OWORD *)v13 + 1);
          v228 = *((_OWORD *)v13 + 2);
          v166 = *(_OWORD *)v13;
          v25 = *(_OWORD *)v14;
          v26 = *((_OWORD *)v7 - 1);
          *((_OWORD *)v13 + 1) = *((_OWORD *)v7 - 2);
          *((_OWORD *)v13 + 2) = v26;
          *(_OWORD *)v13 = v25;
          *((_OWORD *)v7 - 2) = v196;
          *((_OWORD *)v7 - 1) = v228;
          *(_OWORD *)v14 = v166;
LABEL_16:
          v27 = 2;
          v28 = vabds_f32(*((float *)v6 + 11), v11);
          v29 = vabds_f32(*((float *)v13 + 11), v11);
          if (v28 <= v29)
            goto LABEL_30;
          goto LABEL_19;
        }
      }
      else
      {
        v192 = *((_OWORD *)v6 + 1);
        v224 = *((_OWORD *)v6 + 2);
        v162 = *(_OWORD *)v6;
        v17 = *(_OWORD *)v14;
        v18 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v6 + 1) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v6 + 2) = v18;
        *(_OWORD *)v6 = v17;
        *((_OWORD *)v7 - 2) = v192;
        *((_OWORD *)v7 - 1) = v224;
        *(_OWORD *)v14 = v162;
      }
LABEL_18:
      v27 = 1;
      v28 = vabds_f32(*((float *)v6 + 11), v11);
      v29 = vabds_f32(*((float *)v13 + 11), v11);
      if (v28 <= v29)
        goto LABEL_30;
      goto LABEL_19;
    }
    if (v16 > v15)
    {
      v193 = *((_OWORD *)v13 + 1);
      v225 = *((_OWORD *)v13 + 2);
      v163 = *(_OWORD *)v13;
      v19 = *(_OWORD *)v14;
      v20 = *((_OWORD *)v7 - 1);
      *((_OWORD *)v13 + 1) = *((_OWORD *)v7 - 2);
      *((_OWORD *)v13 + 2) = v20;
      *(_OWORD *)v13 = v19;
      *((_OWORD *)v7 - 2) = v193;
      *((_OWORD *)v7 - 1) = v225;
      *(_OWORD *)v14 = v163;
      if (vabds_f32(*((float *)v13 + 11), v11) > vabds_f32(*((float *)v6 + 11), v11))
      {
        v194 = *((_OWORD *)v6 + 1);
        v226 = *((_OWORD *)v6 + 2);
        v164 = *(_OWORD *)v6;
        v21 = *(_OWORD *)v13;
        v22 = *((_OWORD *)v13 + 2);
        *((_OWORD *)v6 + 1) = *((_OWORD *)v13 + 1);
        *((_OWORD *)v6 + 2) = v22;
        *(_OWORD *)v6 = v21;
        *((_OWORD *)v13 + 1) = v194;
        *((_OWORD *)v13 + 2) = v226;
        *(_OWORD *)v13 = v164;
        goto LABEL_16;
      }
      goto LABEL_18;
    }
    v27 = 0;
    v28 = vabds_f32(*((float *)v6 + 11), v11);
    v29 = vabds_f32(*((float *)v13 + 11), v11);
    if (v28 <= v29)
    {
LABEL_30:
      v39 = v7 - 48;
      while (1)
      {
        v30 = v39 - 48;
        if (v39 - 48 == v6)
          break;
        v40 = vabds_f32(*((float *)v39 - 1), v11);
        v39 -= 48;
        if (v40 > v29)
        {
          v198 = *((_OWORD *)v6 + 1);
          v230 = *((_OWORD *)v6 + 2);
          v168 = *(_OWORD *)v6;
          v41 = *(_OWORD *)v30;
          v42 = *((_OWORD *)v30 + 2);
          *((_OWORD *)v6 + 1) = *((_OWORD *)v30 + 1);
          *((_OWORD *)v6 + 2) = v42;
          *(_OWORD *)v6 = v41;
          *((_OWORD *)v30 + 1) = v198;
          *((_OWORD *)v30 + 2) = v230;
          *(_OWORD *)v30 = v168;
          ++v27;
          v31 = v6 + 48;
          if (v6 + 48 < v30)
            goto LABEL_20;
          goto LABEL_34;
        }
      }
      v48 = v6 + 48;
      if (v28 <= vabds_f32(*((float *)v7 - 1), v11))
      {
        if (v48 == (char *)v14)
          goto LABEL_89;
        while (v28 <= vabds_f32(*((float *)v48 + 11), v11))
        {
          v48 += 48;
          if (v48 == (char *)v14)
            goto LABEL_89;
        }
        v200 = *((_OWORD *)v48 + 1);
        v232 = *((_OWORD *)v48 + 2);
        v170 = *(_OWORD *)v48;
        v52 = *(_OWORD *)v14;
        v53 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v48 + 1) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v48 + 2) = v53;
        *(_OWORD *)v48 = v52;
        v48 += 48;
        *((_OWORD *)v7 - 2) = v200;
        *((_OWORD *)v7 - 1) = v232;
        *(_OWORD *)v14 = v170;
      }
      if (v48 == (char *)v14)
        goto LABEL_89;
      while (1)
      {
        v54 = vabds_f32(*((float *)v6 + 11), v11);
        v45 = v48 - 48;
        do
        {
          v55 = vabds_f32(*((float *)v45 + 23), v11);
          v45 += 48;
        }
        while (v54 <= v55);
        v48 = v45 + 48;
        do
        {
          v56 = *(v14 - 1);
          v14 -= 12;
        }
        while (v54 > vabds_f32(v56, v11));
        if (v45 >= (char *)v14)
          break;
        v201 = *((_OWORD *)v45 + 1);
        v233 = *((_OWORD *)v45 + 2);
        v171 = *(_OWORD *)v45;
        v57 = *(_OWORD *)v14;
        v58 = *((_OWORD *)v14 + 2);
        *((_OWORD *)v45 + 1) = *((_OWORD *)v14 + 1);
        *((_OWORD *)v45 + 2) = v58;
        *(_OWORD *)v45 = v57;
        *((_OWORD *)v14 + 1) = v201;
        *((_OWORD *)v14 + 2) = v233;
        *(_OWORD *)v14 = v171;
      }
      if (v45 > v10)
        goto LABEL_89;
      goto LABEL_65;
    }
LABEL_19:
    v30 = v7 - 48;
    v31 = v6 + 48;
    if (v6 + 48 >= v7 - 48)
    {
LABEL_34:
      v34 = (unint64_t)v31;
    }
    else
    {
LABEL_20:
      v32 = v31;
      while (1)
      {
        v33 = vabds_f32(*((float *)v13 + 11), v11);
        v34 = (unint64_t)(v32 - 48);
        do
        {
          v35 = vabds_f32(*(float *)(v34 + 92), v11);
          v34 += 48;
        }
        while (v35 > v33);
        v32 = (char *)(v34 + 48);
        do
        {
          v36 = *((float *)v30 - 1);
          v30 -= 48;
        }
        while (vabds_f32(v36, v11) <= v33);
        if (v34 >= (unint64_t)v30)
          break;
        v197 = *(_OWORD *)(v34 + 16);
        v229 = *(_OWORD *)(v34 + 32);
        v167 = *(_OWORD *)v34;
        v37 = *(_OWORD *)v30;
        v38 = *((_OWORD *)v30 + 2);
        *(_OWORD *)(v34 + 16) = *((_OWORD *)v30 + 1);
        *(_OWORD *)(v34 + 32) = v38;
        *(_OWORD *)v34 = v37;
        *((_OWORD *)v30 + 1) = v197;
        *((_OWORD *)v30 + 2) = v229;
        *(_OWORD *)v30 = v167;
        ++v27;
        if ((char *)v34 == v13)
          v13 = v30;
      }
    }
    if ((char *)v34 != v13 && vabds_f32(*((float *)v13 + 11), v11) > vabds_f32(*(float *)(v34 + 44), v11))
    {
      v199 = *(_OWORD *)(v34 + 16);
      v231 = *(_OWORD *)(v34 + 32);
      v169 = *(_OWORD *)v34;
      v43 = *(_OWORD *)v13;
      v44 = *((_OWORD *)v13 + 2);
      *(_OWORD *)(v34 + 16) = *((_OWORD *)v13 + 1);
      *(_OWORD *)(v34 + 32) = v44;
      *(_OWORD *)v34 = v43;
      *((_OWORD *)v13 + 1) = v199;
      *((_OWORD *)v13 + 2) = v231;
      *(_OWORD *)v13 = v169;
      ++v27;
    }
    if ((char *)v34 == v10)
      goto LABEL_89;
    if (!v27)
    {
      if (v34 <= (unint64_t)v10)
      {
        v49 = v34 + 48;
        while ((char *)v49 != v7)
        {
          v50 = vabds_f32(*(float *)(v49 + 44), v11);
          v51 = vabds_f32(*(float *)(v49 - 4), v11);
          v49 += 48;
          if (v50 > v51)
            goto LABEL_40;
        }
      }
      else
      {
        while (v31 != (char *)v34)
        {
          v46 = vabds_f32(*((float *)v31 + 11), v11);
          v47 = vabds_f32(*((float *)v31 - 1), v11);
          v31 += 48;
          if (v46 > v47)
            goto LABEL_40;
        }
      }
      goto LABEL_89;
    }
LABEL_40:
    if (v34 <= (unint64_t)v10)
    {
      v45 = (char *)(v34 + 48);
    }
    else
    {
      v7 = (char *)v34;
      v45 = v6;
    }
LABEL_65:
    v6 = v45;
    if (v7 == v10)
      goto LABEL_89;
  }
  v59 = (__int128 *)(v6 + 48);
  v60 = v7 - 48;
  v61 = vabds_f32(*((float *)v6 + 23), v11);
  v62 = vabds_f32(*((float *)v7 - 1), v11);
  if (v61 <= vabds_f32(*((float *)v6 + 11), v11))
  {
    if (v62 > v61)
    {
      v74 = *v59;
      v205 = *((_OWORD *)v6 + 4);
      v75 = *((_OWORD *)v6 + 5);
      v76 = *(_OWORD *)v60;
      v77 = *((_OWORD *)v7 - 1);
      *((_OWORD *)v6 + 4) = *((_OWORD *)v7 - 2);
      *((_OWORD *)v6 + 5) = v77;
      *v59 = v76;
      *((_OWORD *)v7 - 2) = v205;
      *((_OWORD *)v7 - 1) = v75;
      *(_OWORD *)v60 = v74;
      if (vabds_f32(*((float *)v6 + 23), v11) > vabds_f32(*((float *)v6 + 11), v11))
      {
        v206 = *((_OWORD *)v6 + 1);
        v237 = *((_OWORD *)v6 + 2);
        v175 = *(_OWORD *)v6;
        v78 = *((_OWORD *)v6 + 4);
        *(_OWORD *)v6 = *v59;
        *((_OWORD *)v6 + 1) = v78;
        *((_OWORD *)v6 + 2) = *((_OWORD *)v6 + 5);
        *v59 = v175;
        *((_OWORD *)v6 + 4) = v206;
        *((_OWORD *)v6 + 5) = v237;
      }
    }
  }
  else
  {
    if (v62 <= v61)
    {
      v207 = *((_OWORD *)v6 + 1);
      v238 = *((_OWORD *)v6 + 2);
      v176 = *(_OWORD *)v6;
      v79 = *((_OWORD *)v6 + 4);
      *(_OWORD *)v6 = *v59;
      *((_OWORD *)v6 + 1) = v79;
      *((_OWORD *)v6 + 2) = *((_OWORD *)v6 + 5);
      *v59 = v176;
      *((_OWORD *)v6 + 4) = v207;
      *((_OWORD *)v6 + 5) = v238;
      if (vabds_f32(*((float *)v7 - 1), v11) <= vabds_f32(*((float *)v6 + 23), v11))
        goto LABEL_89;
      v65 = *v59;
      v66 = *((_OWORD *)v6 + 4);
      v67 = *((_OWORD *)v6 + 5);
      v80 = *(_OWORD *)v60;
      v81 = *((_OWORD *)v7 - 1);
      *((_OWORD *)v6 + 4) = *((_OWORD *)v7 - 2);
      *((_OWORD *)v6 + 5) = v81;
      *v59 = v80;
    }
    else
    {
      v202 = *((_OWORD *)v6 + 1);
      v234 = *((_OWORD *)v6 + 2);
      v172 = *(_OWORD *)v6;
      v63 = *(_OWORD *)v60;
      v64 = *((_OWORD *)v7 - 1);
      *((_OWORD *)v6 + 1) = *((_OWORD *)v7 - 2);
      *((_OWORD *)v6 + 2) = v64;
      *(_OWORD *)v6 = v63;
      v65 = v172;
      v66 = v202;
      v67 = v234;
    }
    *((_OWORD *)v7 - 2) = v66;
    *((_OWORD *)v7 - 1) = v67;
    *(_OWORD *)v60 = v65;
  }
LABEL_89:
  if (!a3)
    goto LABEL_182;
  v82 = a5 + a4;
  v84 = *a1;
  v83 = a1[1];
  if (a5 + a4 >= 0xAAAAAAAAAAAAAAABLL * ((v83 - *a1) >> 4))
  {
    v135 = *(_QWORD *)(a2 + 8);
    v136 = &v84[48 * a4];
    v137 = (v83 - v136) >> 4;
    goto LABEL_181;
  }
  v85 = &v84[48 * v82];
  if (v85 == v83)
    goto LABEL_180;
  v86 = (unint64_t)&v84[48 * a4];
  v87 = (float)a6;
  while (2)
  {
    v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v83[-v86] >> 4);
    if (v88 < 2)
      goto LABEL_180;
    if (v88 != 3)
    {
      if (v88 == 2)
      {
        if (vabds_f32(*((float *)v83 - 1), v87) > vabds_f32(*(float *)(v86 + 44), v87))
        {
          v219 = *(_OWORD *)(v86 + 16);
          v250 = *(_OWORD *)(v86 + 32);
          v188 = *(_OWORD *)v86;
          v147 = *((_OWORD *)v83 - 3);
          v148 = *((_OWORD *)v83 - 1);
          *(_OWORD *)(v86 + 16) = *((_OWORD *)v83 - 2);
          *(_OWORD *)(v86 + 32) = v148;
          *(_OWORD *)v86 = v147;
          *((_OWORD *)v83 - 2) = v219;
          *((_OWORD *)v83 - 1) = v250;
          *((_OWORD *)v83 - 3) = v188;
        }
        goto LABEL_180;
      }
      if ((uint64_t)&v83[-v86] <= 383)
      {
        if (v83 - 48 == (char *)v86)
          goto LABEL_180;
        while (2)
        {
          v149 = v83;
          if ((char *)v86 == v83)
          {
LABEL_172:
            if (v149 != (char *)v86)
            {
              v220 = *(_OWORD *)(v86 + 16);
              v251 = *(_OWORD *)(v86 + 32);
              v189 = *(_OWORD *)v86;
              v151 = *(_OWORD *)v149;
              v152 = *((_OWORD *)v149 + 2);
              *(_OWORD *)(v86 + 16) = *((_OWORD *)v149 + 1);
              *(_OWORD *)(v86 + 32) = v152;
              *(_OWORD *)v86 = v151;
              *((_OWORD *)v149 + 1) = v220;
              *((_OWORD *)v149 + 2) = v251;
              *(_OWORD *)v149 = v189;
            }
          }
          else
          {
            v150 = v86 + 48;
            if ((char *)(v86 + 48) != v83)
            {
              v149 = (char *)v86;
              do
              {
                if (vabds_f32(*(float *)(v150 + 44), v87) > vabds_f32(*((float *)v149 + 11), v87))
                  v149 = (char *)v150;
                v150 += 48;
              }
              while ((char *)v150 != v83);
              goto LABEL_172;
            }
          }
          v86 += 48;
          if ((char *)v86 == v83 - 48)
            goto LABEL_180;
          continue;
        }
      }
      v89 = (float *)(v86 + 48 * (v88 >> 1));
      v90 = (float *)(v83 - 48);
      v91 = vabds_f32(v89[11], v87);
      v92 = vabds_f32(*((float *)v83 - 1), v87);
      if (v91 <= vabds_f32(*(float *)(v86 + 44), v87))
      {
        if (v92 <= v91)
        {
          v103 = 0;
          v104 = vabds_f32(*(float *)(v86 + 44), v87);
          v105 = vabds_f32(v89[11], v87);
          if (v104 <= v105)
            goto LABEL_119;
          goto LABEL_108;
        }
        v209 = *((_OWORD *)v89 + 1);
        v240 = *((_OWORD *)v89 + 2);
        v178 = *(_OWORD *)v89;
        v95 = *(_OWORD *)v90;
        v96 = *((_OWORD *)v83 - 1);
        *((_OWORD *)v89 + 1) = *((_OWORD *)v83 - 2);
        *((_OWORD *)v89 + 2) = v96;
        *(_OWORD *)v89 = v95;
        *((_OWORD *)v83 - 2) = v209;
        *((_OWORD *)v83 - 1) = v240;
        *(_OWORD *)v90 = v178;
        if (vabds_f32(v89[11], v87) > vabds_f32(*(float *)(v86 + 44), v87))
        {
          v210 = *(_OWORD *)(v86 + 16);
          v241 = *(_OWORD *)(v86 + 32);
          v179 = *(_OWORD *)v86;
          v97 = *(_OWORD *)v89;
          v98 = *((_OWORD *)v89 + 2);
          *(_OWORD *)(v86 + 16) = *((_OWORD *)v89 + 1);
          *(_OWORD *)(v86 + 32) = v98;
          *(_OWORD *)v86 = v97;
          *((_OWORD *)v89 + 1) = v210;
          *((_OWORD *)v89 + 2) = v241;
          *(_OWORD *)v89 = v179;
          goto LABEL_105;
        }
      }
      else
      {
        if (v92 > v91)
        {
          v208 = *(_OWORD *)(v86 + 16);
          v239 = *(_OWORD *)(v86 + 32);
          v177 = *(_OWORD *)v86;
          v93 = *(_OWORD *)v90;
          v94 = *((_OWORD *)v83 - 1);
          *(_OWORD *)(v86 + 16) = *((_OWORD *)v83 - 2);
          *(_OWORD *)(v86 + 32) = v94;
          *(_OWORD *)v86 = v93;
          *((_OWORD *)v83 - 2) = v208;
          *((_OWORD *)v83 - 1) = v239;
          *(_OWORD *)v90 = v177;
          goto LABEL_107;
        }
        v211 = *(_OWORD *)(v86 + 16);
        v242 = *(_OWORD *)(v86 + 32);
        v180 = *(_OWORD *)v86;
        v99 = *(_OWORD *)v89;
        v100 = *((_OWORD *)v89 + 2);
        *(_OWORD *)(v86 + 16) = *((_OWORD *)v89 + 1);
        *(_OWORD *)(v86 + 32) = v100;
        *(_OWORD *)v86 = v99;
        *((_OWORD *)v89 + 1) = v211;
        *((_OWORD *)v89 + 2) = v242;
        *(_OWORD *)v89 = v180;
        if (vabds_f32(*((float *)v83 - 1), v87) > vabds_f32(v89[11], v87))
        {
          v212 = *((_OWORD *)v89 + 1);
          v243 = *((_OWORD *)v89 + 2);
          v181 = *(_OWORD *)v89;
          v101 = *(_OWORD *)v90;
          v102 = *((_OWORD *)v83 - 1);
          *((_OWORD *)v89 + 1) = *((_OWORD *)v83 - 2);
          *((_OWORD *)v89 + 2) = v102;
          *(_OWORD *)v89 = v101;
          *((_OWORD *)v83 - 2) = v212;
          *((_OWORD *)v83 - 1) = v243;
          *(_OWORD *)v90 = v181;
LABEL_105:
          v103 = 2;
          v104 = vabds_f32(*(float *)(v86 + 44), v87);
          v105 = vabds_f32(v89[11], v87);
          if (v104 <= v105)
          {
LABEL_119:
            v115 = v83 - 48;
            while (1)
            {
              v106 = (float *)(v115 - 48);
              if (v115 - 48 == (char *)v86)
                break;
              v116 = vabds_f32(*((float *)v115 - 1), v87);
              v115 -= 48;
              if (v116 > v105)
              {
                v214 = *(_OWORD *)(v86 + 16);
                v245 = *(_OWORD *)(v86 + 32);
                v183 = *(_OWORD *)v86;
                v117 = *(_OWORD *)v106;
                v118 = *((_OWORD *)v106 + 2);
                *(_OWORD *)(v86 + 16) = *((_OWORD *)v106 + 1);
                *(_OWORD *)(v86 + 32) = v118;
                *(_OWORD *)v86 = v117;
                *((_OWORD *)v106 + 1) = v214;
                *((_OWORD *)v106 + 2) = v245;
                *(_OWORD *)v106 = v183;
                ++v103;
                v107 = v86 + 48;
                if (v86 + 48 < (unint64_t)v106)
                  goto LABEL_109;
                goto LABEL_123;
              }
            }
            v124 = v86 + 48;
            if (v104 <= vabds_f32(*((float *)v83 - 1), v87))
            {
              if ((float *)v124 == v90)
                goto LABEL_180;
              while (v104 <= vabds_f32(*(float *)(v124 + 44), v87))
              {
                v124 += 48;
                if ((float *)v124 == v90)
                  goto LABEL_180;
              }
              v216 = *(_OWORD *)(v124 + 16);
              v247 = *(_OWORD *)(v124 + 32);
              v185 = *(_OWORD *)v124;
              v128 = *(_OWORD *)v90;
              v129 = *((_OWORD *)v83 - 1);
              *(_OWORD *)(v124 + 16) = *((_OWORD *)v83 - 2);
              *(_OWORD *)(v124 + 32) = v129;
              *(_OWORD *)v124 = v128;
              v124 += 48;
              *((_OWORD *)v83 - 2) = v216;
              *((_OWORD *)v83 - 1) = v247;
              *(_OWORD *)v90 = v185;
            }
            if ((float *)v124 == v90)
              goto LABEL_180;
            while (1)
            {
              v132 = vabds_f32(*(float *)(v86 + 44), v87);
              v121 = v124 - 48;
              do
              {
                v133 = vabds_f32(*(float *)(v121 + 92), v87);
                v121 += 48;
              }
              while (v132 <= v133);
              v124 = v121 + 48;
              do
              {
                v134 = *(v90 - 1);
                v90 -= 12;
              }
              while (v132 > vabds_f32(v134, v87));
              if (v121 >= (unint64_t)v90)
                break;
              v217 = *(_OWORD *)(v121 + 16);
              v248 = *(_OWORD *)(v121 + 32);
              v186 = *(_OWORD *)v121;
              v130 = *(_OWORD *)v90;
              v131 = *((_OWORD *)v90 + 2);
              *(_OWORD *)(v121 + 16) = *((_OWORD *)v90 + 1);
              *(_OWORD *)(v121 + 32) = v131;
              *(_OWORD *)v121 = v130;
              *((_OWORD *)v90 + 1) = v217;
              *((_OWORD *)v90 + 2) = v248;
              *(_OWORD *)v90 = v186;
            }
            if (v121 > (unint64_t)v85)
              goto LABEL_180;
LABEL_155:
            v86 = v121;
            if (v83 == v85)
              goto LABEL_180;
            continue;
          }
LABEL_108:
          v106 = (float *)(v83 - 48);
          v107 = v86 + 48;
          if (v86 + 48 >= (unint64_t)(v83 - 48))
          {
LABEL_123:
            v110 = v107;
          }
          else
          {
LABEL_109:
            v108 = v107;
            while (1)
            {
              v109 = vabds_f32(v89[11], v87);
              v110 = v108 - 48;
              do
              {
                v111 = vabds_f32(*(float *)(v110 + 92), v87);
                v110 += 48;
              }
              while (v111 > v109);
              v108 = v110 + 48;
              do
              {
                v112 = *(v106 - 1);
                v106 -= 12;
              }
              while (vabds_f32(v112, v87) <= v109);
              if (v110 >= (unint64_t)v106)
                break;
              v213 = *(_OWORD *)(v110 + 16);
              v244 = *(_OWORD *)(v110 + 32);
              v182 = *(_OWORD *)v110;
              v113 = *(_OWORD *)v106;
              v114 = *((_OWORD *)v106 + 2);
              *(_OWORD *)(v110 + 16) = *((_OWORD *)v106 + 1);
              *(_OWORD *)(v110 + 32) = v114;
              *(_OWORD *)v110 = v113;
              *((_OWORD *)v106 + 1) = v213;
              *((_OWORD *)v106 + 2) = v244;
              *(_OWORD *)v106 = v182;
              ++v103;
              if ((float *)v110 == v89)
                v89 = v106;
            }
          }
          if ((float *)v110 != v89 && vabds_f32(v89[11], v87) > vabds_f32(*(float *)(v110 + 44), v87))
          {
            v215 = *(_OWORD *)(v110 + 16);
            v246 = *(_OWORD *)(v110 + 32);
            v184 = *(_OWORD *)v110;
            v119 = *(_OWORD *)v89;
            v120 = *((_OWORD *)v89 + 2);
            *(_OWORD *)(v110 + 16) = *((_OWORD *)v89 + 1);
            *(_OWORD *)(v110 + 32) = v120;
            *(_OWORD *)v110 = v119;
            *((_OWORD *)v89 + 1) = v215;
            *((_OWORD *)v89 + 2) = v246;
            *(_OWORD *)v89 = v184;
            ++v103;
          }
          if ((char *)v110 == v85)
            goto LABEL_180;
          if (!v103)
          {
            if (v110 <= (unint64_t)v85)
            {
              v125 = v110 + 48;
              while ((char *)v125 != v83)
              {
                v126 = vabds_f32(*(float *)(v125 + 44), v87);
                v127 = vabds_f32(*(float *)(v125 - 4), v87);
                v125 += 48;
                if (v126 > v127)
                  goto LABEL_129;
              }
            }
            else
            {
              while (v107 != v110)
              {
                v122 = vabds_f32(*(float *)(v107 + 44), v87);
                v123 = vabds_f32(*(float *)(v107 - 4), v87);
                v107 += 48;
                if (v122 > v123)
                  goto LABEL_129;
              }
            }
            goto LABEL_180;
          }
LABEL_129:
          if (v110 <= (unint64_t)v85)
          {
            v121 = v110 + 48;
          }
          else
          {
            v83 = (char *)v110;
            v121 = v86;
          }
          goto LABEL_155;
        }
      }
LABEL_107:
      v103 = 1;
      v104 = vabds_f32(*(float *)(v86 + 44), v87);
      v105 = vabds_f32(v89[11], v87);
      if (v104 <= v105)
        goto LABEL_119;
      goto LABEL_108;
    }
    break;
  }
  v138 = (__int128 *)(v86 + 48);
  v139 = v83 - 48;
  v140 = vabds_f32(*(float *)(v86 + 92), v87);
  v141 = vabds_f32(*((float *)v83 - 1), v87);
  if (v140 <= vabds_f32(*(float *)(v86 + 44), v87))
  {
    if (v141 > v140)
    {
      v153 = *v138;
      v221 = *(_OWORD *)(v86 + 64);
      v154 = *(_OWORD *)(v86 + 80);
      v155 = *(_OWORD *)v139;
      v156 = *((_OWORD *)v83 - 1);
      *(_OWORD *)(v86 + 64) = *((_OWORD *)v83 - 2);
      *(_OWORD *)(v86 + 80) = v156;
      *v138 = v155;
      *((_OWORD *)v83 - 2) = v221;
      *((_OWORD *)v83 - 1) = v154;
      *(_OWORD *)v139 = v153;
      if (vabds_f32(*(float *)(v86 + 92), v87) > vabds_f32(*(float *)(v86 + 44), v87))
      {
        v222 = *(_OWORD *)(v86 + 16);
        v252 = *(_OWORD *)(v86 + 32);
        v190 = *(_OWORD *)v86;
        v157 = *(_OWORD *)(v86 + 64);
        *(_OWORD *)v86 = *v138;
        *(_OWORD *)(v86 + 16) = v157;
        *(_OWORD *)(v86 + 32) = *(_OWORD *)(v86 + 80);
        *v138 = v190;
        *(_OWORD *)(v86 + 64) = v222;
        *(_OWORD *)(v86 + 80) = v252;
      }
    }
  }
  else
  {
    if (v141 <= v140)
    {
      v223 = *(_OWORD *)(v86 + 16);
      v253 = *(_OWORD *)(v86 + 32);
      v191 = *(_OWORD *)v86;
      v158 = *(_OWORD *)(v86 + 64);
      *(_OWORD *)v86 = *v138;
      *(_OWORD *)(v86 + 16) = v158;
      *(_OWORD *)(v86 + 32) = *(_OWORD *)(v86 + 80);
      *v138 = v191;
      *(_OWORD *)(v86 + 64) = v223;
      *(_OWORD *)(v86 + 80) = v253;
      if (vabds_f32(*((float *)v83 - 1), v87) <= vabds_f32(*(float *)(v86 + 92), v87))
        goto LABEL_180;
      v144 = *v138;
      v145 = *(_OWORD *)(v86 + 64);
      v146 = *(_OWORD *)(v86 + 80);
      v159 = *(_OWORD *)v139;
      v160 = *((_OWORD *)v83 - 1);
      *(_OWORD *)(v86 + 64) = *((_OWORD *)v83 - 2);
      *(_OWORD *)(v86 + 80) = v160;
      *v138 = v159;
    }
    else
    {
      v218 = *(_OWORD *)(v86 + 16);
      v249 = *(_OWORD *)(v86 + 32);
      v187 = *(_OWORD *)v86;
      v142 = *(_OWORD *)v139;
      v143 = *((_OWORD *)v83 - 1);
      *(_OWORD *)(v86 + 16) = *((_OWORD *)v83 - 2);
      *(_OWORD *)(v86 + 32) = v143;
      *(_OWORD *)v86 = v142;
      v144 = v187;
      v145 = v218;
      v146 = v249;
    }
    *((_OWORD *)v83 - 2) = v145;
    *((_OWORD *)v83 - 1) = v146;
    *(_OWORD *)v139 = v144;
  }
LABEL_180:
  v135 = *(_QWORD *)(a2 + 8);
  v136 = &(*a1)[48 * a4];
  v83 = &(*a1)[48 * v82];
  v137 = (48 * a5) >> 4;
LABEL_181:
  sub_20E7C352C(a2, v135, v136, v83, 0xAAAAAAAAAAAAAAABLL * v137);
LABEL_182:
  v161 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  if (a4 <= v161)
  {
    if (a4 < v161)
      a1[1] = &(*a1)[48 * a4];
  }
  else
  {
    sub_20E7C37AC(a1, a4 - v161);
  }
}

void sub_20E7C0B70(uint64_t *a1, uint64_t *a2, int a3, int a4, signed int a5, unint64_t a6, unint64_t a7, unint64_t a8, __n128 a9, float a10, float a11, float a12, float a13, char a14, char a15)
{
  float v22;
  uint64_t v23;
  __int128 *v24;
  const std::nothrow_t *v25;
  unint64_t v26;
  int *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  float v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  float v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  float v75;
  uint64_t v76;
  float v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  float v82;
  uint64_t v83;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  char *v93;
  __int128 v94;
  __int128 v95;
  char *v96;
  char *v97;
  char *v98;
  void *v99;
  char *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _DWORD **v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _DWORD **v110;
  _DWORD *v111;
  uint64_t v112;
  float v113;
  unsigned int **v114;
  unint64_t *v115;
  unsigned int *v116;
  unsigned int v117;
  float v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int *v124;
  float v125;
  unsigned int v126;
  float v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  float v131;
  float v132;
  uint64_t v133;
  unint64_t v135;
  char *v138;
  char *v139;
  void *__p;
  char *v141;

  if (a3 != 1 || a4 != 1)
    sub_20E80AC3C();
  v22 = a9.n128_f32[0];
  v23 = *a1;
  v24 = (__int128 *)a1[1];
  if ((uint64_t)v24 - *a1 < 6145)
  {
    v27 = 0;
LABEL_9:
    v26 = 0;
  }
  else
  {
    v25 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - v23) >> 4);
    while (1)
    {
      v27 = (int *)operator new(48 * v26, v25);
      if (v27)
        break;
      v28 = v26 > 1;
      v26 >>= 1;
      if (!v28)
        goto LABEL_9;
    }
  }
  sub_20E7C22BC(v23, v24, (uint64_t)&__p, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - v23) >> 4), v27, v26, a9);
  v135 = a6;
  if (v27)
    operator delete(v27);
  v29 = *a2;
  v30 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v30 - *a2) >> 3) != a5)
    sub_20E80AC10();
  if ((float)(a12 + -1.0) >= 0.0)
    v31 = a12 + -1.0;
  else
    v31 = 0.0;
  v32 = (float)a7;
  v33 = (float)a8;
  v35 = *a1;
  v34 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v34 - *a1) >> 4) <= v135 && a15 != 0)
  {
    if (v29 != v30)
    {
      v55 = *a2;
      do
      {
        v56 = *(_QWORD *)(v55 + 8) - *(_QWORD *)v55;
        if (v56 >= 1)
          bzero(*(void **)v55, 4 * (((unint64_t)v56 >> 2) - ((unint64_t)v56 > 3)) + 4);
        v55 += 24;
      }
      while (v55 != v30);
    }
    for (; v35 != v34; v35 += 48)
    {
      v62 = (int)(float)(*(float *)(v35 + 20) / v33) + (int)(float)(*(float *)(v35 + 16) / v32);
      if (a14)
      {
        v63 = *(_DWORD *)(v35 + 32);
        if (v63 >= 0)
          v64 = *(_DWORD *)(v35 + 32);
        else
          v64 = v63 + 1;
        v65 = (float)(v64 >> 1);
        if (v65 > (float)(a5 - 1))
          v65 = (float)(a5 - 1);
        if (v63 < -1)
          v65 = 0.0;
        v62 += (int)v65;
      }
      v58 = (uint64_t *)(v29 + 24 * v62);
      v57 = *v58;
      v59 = (v58[1] - *v58) >> 2;
      v60 = *(float *)(v35 + 44);
      if (v60 < a10)
        v60 = a10;
      v61 = v59 - 1;
      if (v61 >= (unint64_t)(float)((float)(v60 - a10) / v22))
        v61 = (unint64_t)(float)((float)(v60 - a10) / v22);
      ++*(_DWORD *)(v57 + 4 * v61);
    }
    return;
  }
  sub_20E7C32EC(&__p, a2);
  if (a5 < 0)
    sub_20E78D874();
  v37 = v135;
  v38 = operator new(8 * a5);
  bzero(v38, 8 * a5);
  v39 = v135;
  if (a5 >= 2)
  {
    v40 = a5 - 1;
    v41 = (unint64_t *)v38;
    v39 = v135;
    do
    {
      v42 = (unint64_t)(float)((float)v39 * a11);
      if (v42 >= 0x3E8)
        v42 = 1000;
      v39 -= v42;
      if (v42 <= 0x64)
        v43 = 100;
      else
        v43 = v42;
      v44 = v42 + (unint64_t)(float)(v31 * (float)v43);
      if (v44 >= 0x3E8)
        v44 = 1000;
      *v41++ = v44;
      --v40;
    }
    while (v40);
  }
  v45 = 100;
  if (v39 > 0x64)
    v45 = v39;
  *((_QWORD *)v38 + a5 - 1) = v39 + (unint64_t)(float)(v31 * (float)v45);
  if (!a5)
  {
    v68 = 0;
    goto LABEL_68;
  }
  v46 = 0;
  v47 = 0;
  v48 = a5;
  v49 = *a2;
  do
  {
    v50 = *(unsigned int **)(v49 + 24 * v47);
    v51 = *(unsigned int **)(v49 + 24 * v47 + 8);
    if (v51 != v50)
    {
      v52 = v51 - 1;
      if (v52 != v50)
      {
        v53 = *v52;
        do
        {
          v54 = *--v52;
          v53 += v54;
          *v52 = v53;
        }
        while (v52 != v50);
      }
    }
    v46 += *v50;
    ++v47;
  }
  while (v47 != a5);
  if (a13 > 0.0 && v46)
  {
    if (a5 >= 2)
    {
      v103 = 0;
      v104 = 0;
      v67 = a5 & 0xFFFFFFFFFFFFFFFELL;
      v105 = v67;
      v106 = (_DWORD **)*a2;
      do
      {
        LODWORD(v107) = **v106;
        LODWORD(v108) = *v106[3];
        if (v107 >= 0x3E8)
          v107 = 1000;
        else
          v107 = v107;
        if (v108 >= 0x3E8)
          v108 = 1000;
        else
          v108 = v108;
        v103 += v107;
        v104 += v108;
        v106 += 6;
        v105 -= 2;
      }
      while (v105);
      v66 = v104 + v103;
      if (v67 == a5)
        goto LABEL_142;
    }
    else
    {
      v66 = 0;
      v67 = 0;
    }
    v109 = a5 - v67;
    v110 = (_DWORD **)(*a2 + 24 * (int)v67);
    do
    {
      v111 = *v110;
      v110 += 3;
      LODWORD(v112) = *v111;
      if (*v111 >= 0x3E8u)
        v112 = 1000;
      else
        v112 = v112;
      v66 += v112;
      --v109;
    }
    while (v109);
LABEL_142:
    v113 = 1.0;
    if (v66 > v135)
      v113 = (float)v135 / (float)v66;
    v114 = (unsigned int **)*a2;
    v115 = (unint64_t *)v38;
    do
    {
      v116 = *v114;
      v114 += 3;
      v117 = *v116;
      if (*v116 >= 0x3E8)
        v117 = 1000;
      v118 = v113 * (float)v117;
      if ((unint64_t)v118 <= 0x64)
        v119 = 100;
      else
        v119 = (unint64_t)v118;
      *v115 = (unint64_t)(float)((float)((float)(1.0 - a13) * (float)*v115)
                                      + (float)((float)((unint64_t)(float)(v31 * (float)v119)
                                                      + (unint64_t)v118)
                                              * a13));
      ++v115;
      --v48;
    }
    while (v48);
  }
  v68 = operator new(4 * a5);
  bzero(v68, 4 * a5);
  v120 = 0;
  v121 = *a2;
  do
  {
    v122 = v121 + 24 * v120;
    v123 = *(unsigned int **)v122;
    v124 = *(unsigned int **)(v122 + 8);
    v125 = a10;
    if (v123 != v124)
    {
      v126 = (float)*((unint64_t *)v38 + v120);
      v125 = a10;
      if (*v123 > v126)
      {
        v127 = v22 + a10;
        if ((unint64_t)((char *)v124 - (char *)v123) < 5)
        {
LABEL_162:
          v131 = (float)v126 * v22;
          v132 = (float)*(v124 - 1);
        }
        else
        {
          if ((unint64_t)(v124 - v123) <= 2)
            v128 = 2;
          else
            v128 = v124 - v123;
          v129 = v123 + 1;
          v130 = v128 - 1;
          v127 = v22 + a10;
          while (v126 < *v129)
          {
            v127 = v127 + v22;
            ++v129;
            if (!--v130)
              goto LABEL_162;
          }
          v131 = (float)(v126 - *v129) * v22;
          v132 = (float)(*(v129 - 1) - *v129);
        }
        v125 = v127 - (float)(v131 / v132);
      }
    }
    *((float *)v68 + v120) = v125;
    v133 = (char *)v124 - (char *)v123;
    if (v133 >= 1)
      bzero(v123, 4 * (((unint64_t)v133 >> 2) - ((unint64_t)v133 > 3)) + 4);
    ++v120;
  }
  while (v120 != a5);
LABEL_68:
  v138 = 0;
  v139 = 0;
  if (v135)
  {
    if (v135 > 0x555555555555555)
      sub_20E78D874();
    v69 = (char *)operator new(48 * v135);
    v70 = &v69[48 * v135];
    v138 = v69;
    v139 = v70;
    v71 = (char *)*a1;
    v72 = (char *)a1[1];
    if ((char *)*a1 != v72)
    {
      while (1)
      {
LABEL_79:
        v79 = (int)(float)(*((float *)v71 + 5) / v33) + (int)(float)(*((float *)v71 + 4) / v32);
        if (a14)
        {
          v80 = *((_DWORD *)v71 + 8);
          if (v80 >= 0)
            v81 = *((_DWORD *)v71 + 8);
          else
            v81 = v80 + 1;
          v82 = (float)(v81 >> 1);
          if (v82 > (float)(a5 - 1))
            v82 = (float)(a5 - 1);
          if (v80 < -1)
            v82 = 0.0;
          v79 += (int)v82;
        }
        v75 = *((float *)v71 + 11);
        v83 = *((_QWORD *)v38 + v79);
        if (v75 < *((float *)v68 + v79) || v83 == 0)
          goto LABEL_74;
        v85 = v138;
        v86 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v138) >> 4);
        if (v86 >= v37)
          goto LABEL_74;
        *((_QWORD *)v38 + v79) = v83 - 1;
        if (v69 >= v139)
          break;
        v73 = *(_OWORD *)v71;
        v74 = *((_OWORD *)v71 + 2);
        *((_OWORD *)v69 + 1) = *((_OWORD *)v71 + 1);
        *((_OWORD *)v69 + 2) = v74;
        *(_OWORD *)v69 = v73;
        v69 += 48;
LABEL_73:
        v75 = *((float *)v71 + 11);
LABEL_74:
        v76 = *(_QWORD *)(*a2 + 24 * v79);
        if (v75 < a10)
          v75 = a10;
        v77 = (float)(v75 - a10) / v22;
        v78 = ((*(_QWORD *)(*a2 + 24 * v79 + 8) - v76) >> 2) - 1;
        if (v78 >= (unint64_t)v77)
          v78 = (unint64_t)v77;
        ++*(_DWORD *)(v76 + 4 * v78);
        v71 += 48;
        if (v71 == v72)
        {
          v71 = (char *)*a1;
          *a1 = (uint64_t)v138;
          a1[1] = (uint64_t)v69;
          a1[2] = (uint64_t)v139;
          if (v71)
            goto LABEL_113;
          goto LABEL_114;
        }
      }
      v87 = v86 + 1;
      if (v86 + 1 > 0x555555555555555)
        sub_20E78D874();
      if (0x5555555555555556 * ((v139 - v138) >> 4) > v87)
        v87 = 0x5555555555555556 * ((v139 - v138) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((v139 - v138) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v88 = 0x555555555555555;
      else
        v88 = v87;
      if (v88)
      {
        if (v88 > 0x555555555555555)
          sub_20E78D888();
        v89 = (char *)operator new(48 * v88);
      }
      else
      {
        v89 = 0;
      }
      v90 = &v89[16 * ((v69 - v138) >> 4)];
      v91 = *(_OWORD *)v71;
      v92 = *((_OWORD *)v71 + 2);
      *((_OWORD *)v90 + 1) = *((_OWORD *)v71 + 1);
      *((_OWORD *)v90 + 2) = v92;
      *(_OWORD *)v90 = v91;
      if (v69 == v138)
      {
        v69 = v90 + 48;
        v138 = &v89[48 * v86];
        v139 = &v89[48 * v88];
        if (!v85)
          goto LABEL_109;
      }
      else
      {
        v93 = &v89[16 * ((v69 - v138) >> 4)];
        do
        {
          v94 = *((_OWORD *)v69 - 3);
          v95 = *((_OWORD *)v69 - 1);
          v96 = v93 - 48;
          *((_OWORD *)v93 - 2) = *((_OWORD *)v69 - 2);
          *((_OWORD *)v93 - 1) = v95;
          *((_OWORD *)v93 - 3) = v94;
          v69 -= 48;
          v93 -= 48;
        }
        while (v69 != v138);
        v69 = v90 + 48;
        v138 = v96;
        v139 = &v89[48 * v88];
        if (!v85)
          goto LABEL_109;
      }
      operator delete(v85);
LABEL_109:
      v37 = v135;
      goto LABEL_73;
    }
  }
  else
  {
    v70 = 0;
    v69 = 0;
    v71 = (char *)*a1;
    v72 = (char *)a1[1];
    if ((char *)*a1 != v72)
      goto LABEL_79;
  }
  *a1 = (uint64_t)v69;
  a1[1] = (uint64_t)v69;
  a1[2] = (uint64_t)v70;
  if (v71)
LABEL_113:
    operator delete(v71);
LABEL_114:
  if (v68)
    operator delete(v68);
  operator delete(v38);
  v97 = (char *)__p;
  if (__p)
  {
    v98 = v141;
    v99 = __p;
    if (v141 != __p)
    {
      v100 = v141;
      do
      {
        v102 = (void *)*((_QWORD *)v100 - 3);
        v100 -= 24;
        v101 = v102;
        if (v102)
        {
          *((_QWORD *)v98 - 2) = v101;
          operator delete(v101);
        }
        v98 = v100;
      }
      while (v100 != v97);
      v99 = __p;
    }
    v141 = v97;
    operator delete(v99);
  }
}

void sub_20E7C1508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  operator delete(v19);
  sub_20E791F00(&a19);
  _Unwind_Resume(a1);
}

void sub_20E7C157C(void **a1, uint64_t *a2, int a3, int a4, int a5, int a6, unint64_t a7, unint64_t a8, unsigned __int8 a9)
{
  int v14;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  float *v33;
  unint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  _DWORD *v40;
  signed int v41;
  int v42;
  int v43;
  float v44;
  _QWORD *v45;
  float v46;
  char *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  _DWORD *v58;
  unint64_t v59;
  _DWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  char *v72;
  unint64_t v73;
  float **v74;
  float *v75;
  float *v76;
  unint64_t v77;
  unint64_t v78;
  float *v79;
  uint64_t v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 *v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  int v94;
  int v95;
  int v96;
  int v97;
  void **v98;
  char *v100;
  char *v101;
  char *v102;

  v14 = a3;
  v97 = a4 * a3;
  v17 = a4 * a3 * a5;
  v18 = a2[1];
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - *a2) >> 3);
  v95 = a4 * a3 * a5;
  if (v17 <= v19)
  {
    if (v17 >= v19)
    {
      v21 = a2[1];
      v20 = *a2;
      v22 = v21 - *a2;
      if (v21 == *a2)
        goto LABEL_22;
    }
    else
    {
      v21 = *a2 + 24 * (int)v17;
      if (v18 != v21)
      {
        v23 = a2[1];
        do
        {
          v25 = *(void **)(v23 - 24);
          v23 -= 24;
          v24 = v25;
          if (v25)
          {
            *(_QWORD *)(v18 - 16) = v24;
            operator delete(v24);
          }
          v18 = v23;
        }
        while (v23 != v21);
      }
      a2[1] = v21;
      v20 = *a2;
      v22 = v21 - *a2;
      if (v21 == *a2)
        goto LABEL_22;
    }
  }
  else
  {
    sub_20E7C1E68((uint64_t)a2, v17 - v19);
    v20 = *a2;
    v21 = a2[1];
    v22 = v21 - *a2;
    if (v21 == *a2)
      goto LABEL_22;
  }
  v26 = v22 / 24;
  if (v26 <= 1)
    v26 = 1;
  if (v26 >= 2)
  {
    v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
    v28 = (uint64_t *)(v20 + 24);
    v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v30 = *v28;
      *(v28 - 2) = *(v28 - 3);
      v28[1] = v30;
      v28 += 6;
      v29 -= 2;
    }
    while (v29);
    if (v26 == v27)
      goto LABEL_22;
  }
  else
  {
    v27 = 0;
  }
  v31 = v26 - v27;
  v32 = (_QWORD *)(v20 + 24 * v27 + 8);
  do
  {
    *v32 = *(v32 - 1);
    v32 += 3;
    --v31;
  }
  while (v31);
LABEL_22:
  v33 = (float *)a1[1];
  v98 = a1;
  if (v33 == *a1)
  {
    v71 = a2;
    v100 = 0;
    v101 = 0;
    v102 = 0;
    if (v21 != v20)
      goto LABEL_58;
    goto LABEL_92;
  }
  v94 = a6;
  v34 = 0;
  v35 = (float)a4;
  v36 = a9;
  v37 = (float)a7 / (float)v14;
  v38 = (float)(a5 - 1);
  v39 = (float)a8 / v35;
  v33 = (float *)*a1;
  v96 = v14;
  do
  {
    v41 = vcvtms_s32_f32(v33[12 * v34 + 4] / v37) + vcvtms_s32_f32(v33[12 * v34 + 5] / v39) * v14;
    if ((_DWORD)v36)
    {
      v42 = LODWORD(v33[12 * v34 + 8]);
      if (v42 >= 0)
        v43 = LODWORD(v33[12 * v34 + 8]);
      else
        v43 = v42 + 1;
      v44 = (float)(v43 >> 1);
      if (v42 < -1)
        v44 = 0.0;
      if (v44 > v38)
        v44 = v38;
      v41 += v97 * vcvtms_s32_f32(v44);
    }
    v45 = (_QWORD *)(*a2 + 24 * v41);
    v46 = v33[12 * v34 + 11];
    v48 = v45 + 1;
    v47 = (char *)v45[1];
    v49 = v45[2];
    if ((unint64_t)v47 < v49)
    {
      *(float *)v47 = v46;
      *((_DWORD *)v47 + 1) = v34;
      v40 = v47 + 8;
      goto LABEL_25;
    }
    v50 = v36;
    v51 = (char *)*v45;
    v52 = (uint64_t)&v47[-*v45];
    v53 = v52 >> 3;
    v54 = (v52 >> 3) + 1;
    if (v54 >> 61)
      sub_20E78D874();
    v55 = v49 - (_QWORD)v51;
    if (v55 >> 2 > v54)
      v54 = v55 >> 2;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
      v56 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v56 = v54;
    if (v56)
    {
      if (v56 >> 61)
        sub_20E78D888();
      v57 = operator new(8 * v56);
      v58 = &v57[8 * v53];
      *(float *)v58 = v46;
      v58[1] = v34;
      if (v47 == v51)
      {
LABEL_48:
        v60 = v58;
        v36 = v50;
        goto LABEL_55;
      }
    }
    else
    {
      v57 = 0;
      v58 = (_DWORD *)(8 * v53);
      *(float *)v58 = v46;
      v58[1] = v34;
      if (v47 == v51)
        goto LABEL_48;
    }
    v59 = v47 - 8 - v51;
    if (v59 >= 0x58)
    {
      v61 = v47 - &v57[v52];
      v60 = v58;
      v36 = v50;
      if (v61 >= 0x20)
      {
        v62 = (v59 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v64 = &v47[-v63];
        v60 = &v58[v63 / 0xFFFFFFFFFFFFFFFCLL];
        v65 = &v57[8 * v53 - 16];
        v66 = v47 - 16;
        v67 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v68 = *(_OWORD *)v66;
          *(v65 - 1) = *((_OWORD *)v66 - 1);
          *v65 = v68;
          v65 -= 2;
          v66 -= 32;
          v67 -= 4;
        }
        while (v67);
        v47 = v64;
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_54;
      }
    }
    else
    {
      v60 = v58;
      v36 = v50;
    }
    do
    {
      v69 = *((_QWORD *)v47 - 1);
      v47 -= 8;
      *((_QWORD *)v60 - 1) = v69;
      v60 -= 2;
    }
    while (v47 != v51);
LABEL_54:
    v47 = (char *)*v45;
LABEL_55:
    v70 = &v57[8 * v56];
    *v45 = v60;
    v40 = v58 + 2;
    *v48 = v58 + 2;
    v45[2] = v70;
    a1 = v98;
    v14 = v96;
    if (v47)
      operator delete(v47);
LABEL_25:
    *v48 = v40;
    ++v34;
    v33 = (float *)*a1;
  }
  while (v34 < 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4));
  v71 = a2;
  v20 = *a2;
  a6 = v94;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  if (a2[1] != *a2)
  {
LABEL_58:
    v72 = 0;
    v73 = 0;
    while (1)
    {
      v74 = (float **)(v20 + 24 * v73);
      v75 = *v74;
      v76 = v74[1];
      v77 = ((char *)v76 - (char *)*v74) >> 3;
      if (v77 >= a6 / v95)
        v78 = a6 / v95;
      else
        v78 = v77;
      v79 = &v75[2 * v78];
      if (v79 != v76)
        sub_20E791F74(v75, v79, v76);
      if (v78)
        break;
LABEL_59:
      ++v73;
      v20 = *v71;
      if (v73 >= 0xAAAAAAAAAAAAAAABLL * ((v71[1] - *v71) >> 3))
      {
        v33 = (float *)*a1;
        if (*a1)
          goto LABEL_89;
        goto LABEL_90;
      }
    }
    v80 = 0;
    v81 = v72;
    while (2)
    {
      while (1)
      {
        v84 = (__int128 *)((char *)*a1 + 48 * *(int *)(*(_QWORD *)(*v71 + 24 * v73) + 8 * v80 + 4));
        if (v81 >= v102)
          break;
        v82 = *v84;
        v83 = v84[2];
        *((_OWORD *)v81 + 1) = v84[1];
        *((_OWORD *)v81 + 2) = v83;
        *(_OWORD *)v81 = v82;
        v72 = v81 + 48;
        v101 = v81 + 48;
        ++v80;
        v81 += 48;
        if (v80 == v78)
          goto LABEL_59;
      }
      v85 = 0xAAAAAAAAAAAAAAABLL * ((v81 - v100) >> 4) + 1;
      if (v85 > 0x555555555555555)
        sub_20E78D874();
      if (0x5555555555555556 * ((v102 - v100) >> 4) > v85)
        v85 = 0x5555555555555556 * ((v102 - v100) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((v102 - v100) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v86 = 0x555555555555555;
      else
        v86 = v85;
      if (v86)
      {
        if (v86 > 0x555555555555555)
          sub_20E78D888();
        v87 = (char *)operator new(48 * v86);
      }
      else
      {
        v87 = 0;
      }
      v88 = &v87[16 * ((v81 - v100) >> 4)];
      v89 = *v84;
      v90 = v84[2];
      *((_OWORD *)v88 + 1) = v84[1];
      *((_OWORD *)v88 + 2) = v90;
      *(_OWORD *)v88 = v89;
      v91 = v88;
      if (v81 == v100)
      {
        v71 = a2;
        v72 = v88 + 48;
        v100 = &v87[16 * ((v81 - v100) >> 4)];
        v102 = &v87[48 * v86];
        if (v81)
          goto LABEL_83;
      }
      else
      {
        v71 = a2;
        do
        {
          v92 = *((_OWORD *)v81 - 3);
          v93 = *((_OWORD *)v81 - 1);
          *((_OWORD *)v91 - 2) = *((_OWORD *)v81 - 2);
          *((_OWORD *)v91 - 1) = v93;
          *((_OWORD *)v91 - 3) = v92;
          v91 -= 48;
          v81 -= 48;
        }
        while (v81 != v100);
        v81 = v100;
        v72 = v88 + 48;
        v100 = v91;
        v102 = &v87[48 * v86];
        if (v81)
LABEL_83:
          operator delete(v81);
      }
      a1 = v98;
      v101 = v72;
      ++v80;
      v81 = v72;
      if (v80 == v78)
        goto LABEL_59;
      continue;
    }
  }
LABEL_92:
  v72 = 0;
  if (v33)
  {
LABEL_89:
    a1[1] = v33;
    operator delete(v33);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v72 = v101;
  }
LABEL_90:
  *a1 = v100;
  a1[1] = v72;
  a1[2] = v102;
}

void sub_20E7C1C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7C1C30(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float32x2_t *a5, unsigned int a6, double a7, float a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x2_t v21;
  float v22;
  float32x2_t v23;
  float32x2_t v24;
  float32_t v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t result;
  int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;

  v14 = a4[8];
  v16 = *a4;
  v15 = a4[1];
  v17 = a4[2];
  v18 = a4[4];
  v19 = a4[5];
  v20 = (float)((float)((float)((float)((float)((float)(v15 + v15) * v17) * v19) - (float)(v14 * (float)(v15 * v15)))
                      - (float)((float)(v17 * v17) * v18))
              - (float)((float)(v19 * v19) * *a4))
      + (float)(v14 * (float)(v18 * *a4));
  v21.i32[1] = 872415232;
  if (fabsf(v20) <= 0.00000011921)
    return 0;
  v22 = 1.0 / v20;
  v23.f32[0] = (float)((float)(v18 * v14) - (float)(v19 * v19)) * v22;
  v24.f32[0] = v22 * (float)((float)(v17 * a4[7]) - (float)(v15 * v14));
  *(float *)&a11 = (float)((float)(v15 * v19) - (float)(v17 * v18)) * v22;
  v25 = (float)((float)(v16 * v14) - (float)(v17 * v17)) * v22;
  *(float *)&a14 = v22 * (float)((float)(v17 * a4[3]) - (float)(v16 * v19));
  v23.i32[1] = v24.i32[0];
  v26 = *a5;
  v24.f32[1] = v25;
  v21.i32[0] = a5[1].i32[0];
  v27 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v23, COERCE_FLOAT(*a5)), v24, *a5, 1), (float32x2_t)__PAIR64__(LODWORD(a14), LODWORD(a11)), v21.f32[0]);
  if (fabsf(v27.f32[0]) > *(float *)&a7)
    return 0;
  if (fabsf(v27.f32[1]) > *(float *)&a7)
    return 0;
  result = 0;
  v30 = 1 << *(_DWORD *)(a1 + 32);
  *(float *)&a7 = (float)((float)(v16 * v18) - (float)(v15 * v15)) * v22;
  v31 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&a11, v26), *(float32x2_t *)&a14, v26, 1), v21, *(float32x2_t *)&a7).f32[0];
  v32 = vabds_f32(*(float *)(a1 + 44) - (float)a6, vmlas_n_f32((float)(v27.f32[1] * v26.f32[1]) + (float)(v26.f32[0] * v27.f32[0]), v21.f32[0], v31));
  *(float *)(a1 + 44) = v32;
  v33 = *(float *)(a1 + 4);
  v34 = *(float *)a1 + (float)(v27.f32[0] * (float)v30);
  *(float *)(a1 + 16) = v34;
  v35 = v33 + (float)(v27.f32[1] * (float)v30);
  *(float *)(a1 + 20) = v35;
  v36 = v31 + (float)*(int *)(a1 + 8);
  *(float *)(a1 + 24) = v36;
  if (v32 > a8 && v34 >= 0.0)
  {
    result = 0;
    if (v34 < (float)*(unint64_t *)(a2 + 8) && v35 >= 0.0)
    {
      result = 0;
      if (v35 < (float)*(unint64_t *)(a2 + 16) && v36 >= 0.0)
      {
        if (v36 < (float)(0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 4)))
        {
          v37 = *(float *)(a2 + 4);
          *(float *)(a1 + 12) = v37 * powf(*(float *)(a2 + 104), v36);
          return 1;
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_20E7C1E68(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E78D874();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E78D888();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_24:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v19 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v19)
      {
        v20 = v5;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v5 - 2) = v21;
            operator delete(v21);
          }
          v5 = v20;
        }
        while (v20 != v19);
        v5 = v19;
      }
      if (v5)
        goto LABEL_24;
    }
  }
}

void sub_20E7C205C(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + a2;
    if (v12 >> 62)
      sub_20E78D874();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_20E78D888();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
}

__n128 sub_20E7C22BC(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, int *a5, uint64_t a6, __n128 result)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  int *v34;
  __int128 v35;
  unsigned int v36;
  int *v38;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int *v43;
  int *v44;
  int *v45;
  __int128 v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  __n128 v61;
  uint64_t v62;

  if (a4 >= 2)
  {
    v8 = a1;
    if (a4 == 2)
    {
      v9 = *(_DWORD *)(a2 - 1) & ~(*((int *)a2 - 4) >> 31);
      if (v9 >= 7)
        v9 = 7;
      v10 = v9;
      v11 = dword_20E80E9F4[v10];
      v12 = dword_20E80EA14[v10];
      if ((*(_DWORD *)(a1 + 32) & ~(*(int *)(a1 + 32) >> 31)) >= 7)
        v13 = 7;
      else
        v13 = *(_DWORD *)(a1 + 32) & ~(*(int *)(a1 + 32) >> 31);
      result.n128_u32[0] = *(_DWORD *)(a1 + 4);
      if (v11 + v12 * (int)*((float *)a2 - 11) < dword_20E80E9F4[v13] + dword_20E80EA14[v13] * (int)result.n128_f32[0])
      {
        result = *(__n128 *)a1;
        v14 = *(_OWORD *)(a1 + 16);
        v15 = *(_OWORD *)(a1 + 32);
        v17 = *(a2 - 2);
        v16 = *(a2 - 1);
        *(_OWORD *)a1 = *(a2 - 3);
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 32) = v16;
        *(a2 - 2) = v14;
        *(a2 - 1) = v15;
        *(a2 - 3) = (__int128)result;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v38 = a5;
      v40 = a4 >> 1;
      v41 = a1 + 48 * (a4 >> 1);
      v42 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_20E7C26D8(a1, v41, a3, v42, a5);
        v43 = &v38[12 * v40];
        sub_20E7C26D8(v8 + 48 * (a4 >> 1), (uint64_t)a2, a3, a4 - (a4 >> 1), v43);
        v44 = &v38[12 * a4];
        v45 = v43;
        while (v45 != v44)
        {
          v47 = v45[8] & ~(v45[8] >> 31);
          if (v47 >= 7)
            v47 = 7;
          v48 = v38[8] & ~(v38[8] >> 31);
          v49 = v47;
          v50 = dword_20E80E9F4[v49];
          v51 = dword_20E80EA14[v49];
          if (v48 >= 7)
            v48 = 7;
          if (v50 + v51 * (int)*((float *)v45 + 1) >= dword_20E80E9F4[v48]
                                                     + dword_20E80EA14[v48] * (int)*((float *)v38 + 1))
          {
            result = *(__n128 *)v38;
            v46 = *((_OWORD *)v38 + 2);
            *(_OWORD *)(v8 + 16) = *((_OWORD *)v38 + 1);
            *(_OWORD *)(v8 + 32) = v46;
            *(__n128 *)v8 = result;
            v8 += 48;
            v38 += 12;
            if (v38 == v43)
              goto LABEL_40;
          }
          else
          {
            result = *(__n128 *)v45;
            v52 = *((_OWORD *)v45 + 2);
            *(_OWORD *)(v8 + 16) = *((_OWORD *)v45 + 1);
            *(_OWORD *)(v8 + 32) = v52;
            *(__n128 *)v8 = result;
            v8 += 48;
            v45 += 12;
            if (v38 == v43)
            {
LABEL_40:
              if (v45 != v44)
              {
                v53 = 0;
                do
                {
                  v54 = v8 + v53 * 4;
                  result = *(__n128 *)&v45[v53];
                  v55 = *(_OWORD *)&v45[v53 + 8];
                  *(_OWORD *)(v54 + 16) = *(_OWORD *)&v45[v53 + 4];
                  *(_OWORD *)(v54 + 32) = v55;
                  *(__n128 *)v54 = result;
                  v53 += 12;
                }
                while (&v45[v53] != v44);
              }
              return result;
            }
          }
        }
        if (v38 != v43)
        {
          v56 = 0;
          do
          {
            v57 = v8 + v56 * 4;
            result = *(__n128 *)&v38[v56];
            v58 = *(_OWORD *)&v38[v56 + 8];
            *(_OWORD *)(v57 + 16) = *(_OWORD *)&v38[v56 + 4];
            *(_OWORD *)(v57 + 32) = v58;
            *(__n128 *)v57 = result;
            v56 += 12;
          }
          while (&v38[v56] != v43);
        }
      }
      else
      {
        sub_20E7C22BC(a1, v41, a3, v42, a5, a6);
        sub_20E7C22BC(v8 + 48 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v38, a6);
        result.n128_u64[0] = sub_20E7C29A4((int *)v8, (__n128 *)(v8 + 48 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)v38, a6).n128_u64[0];
      }
    }
    else if ((__int128 *)a1 != a2)
    {
      v19 = (_DWORD *)(a1 + 48);
      if ((__int128 *)(a1 + 48) != a2)
      {
        v20 = 0;
        v21 = a1;
        do
        {
          v23 = *(_DWORD *)(v21 + 80);
          v24 = v23 & ~(v23 >> 31);
          if (v24 >= 7)
            v24 = 7;
          v25 = v24;
          if ((*(_DWORD *)(v21 + 32) & ~(*(int *)(v21 + 32) >> 31)) >= 7)
            v26 = 7;
          else
            v26 = *(_DWORD *)(v21 + 32) & ~(*(int *)(v21 + 32) >> 31);
          result.n128_u32[0] = *(_DWORD *)(v21 + 52);
          v27 = dword_20E80E9F4[v25] + dword_20E80EA14[v25] * (int)result.n128_f32[0];
          v28 = v26;
          v29 = dword_20E80E9F4[v28];
          v30 = dword_20E80EA14[v28];
          v31 = v19;
          if (v27 < v29 + v30 * (int)*(float *)(v21 + 4))
          {
            v32 = *v19;
            v61 = *(__n128 *)(v21 + 56);
            v62 = *(_QWORD *)(v21 + 72);
            v59 = *(_QWORD *)(v21 + 84);
            v60 = *(_DWORD *)(v21 + 92);
            v33 = v20;
            do
            {
              v34 = (int *)(v8 + v33);
              v35 = *(_OWORD *)(v8 + v33 + 16);
              *((_OWORD *)v34 + 3) = *(_OWORD *)(v8 + v33);
              *((_OWORD *)v34 + 4) = v35;
              *((_OWORD *)v34 + 5) = *(_OWORD *)(v8 + v33 + 32);
              if (!v33)
              {
                v22 = v8;
                goto LABEL_15;
              }
              v36 = *(v34 - 4) & ~(*(v34 - 4) >> 31);
              if (v36 >= 7)
                v36 = 7;
              v33 -= 48;
            }
            while (v27 < dword_20E80E9F4[v36] + dword_20E80EA14[v36] * (int)*((float *)v34 - 11));
            v22 = v8 + v33 + 48;
LABEL_15:
            *(_DWORD *)v22 = v32;
            *(_DWORD *)(v22 + 4) = result.n128_u32[0];
            result = v61;
            *(__n128 *)(v22 + 8) = v61;
            *(_QWORD *)(v22 + 24) = v62;
            *(_DWORD *)(v22 + 32) = v23;
            *(_QWORD *)(v22 + 36) = v59;
            *(_DWORD *)(v22 + 44) = v60;
          }
          v19 = v31 + 12;
          v20 += 48;
          v21 = (uint64_t)v31;
        }
        while (v31 + 12 != (_DWORD *)a2);
      }
    }
  }
  return result;
}

void sub_20E7C26D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  _OWORD *v5;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  unsigned int v11;
  unsigned int v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;

  if (a4)
  {
    v5 = a5;
    v8 = a1;
    if (a4 == 2)
    {
      v11 = *(_DWORD *)(a2 - 16) & ~(*(int *)(a2 - 16) >> 31);
      if (v11 >= 7)
        v11 = 7;
      v12 = *(_DWORD *)(a1 + 32) & ~(*(int *)(a1 + 32) >> 31);
      if (v12 >= 7)
        v12 = 7;
      v13 = (__int128 *)(a2 - 48);
      if (dword_20E80E9F4[v11] + dword_20E80EA14[v11] * (int)*(float *)(a2 - 44) >= dword_20E80E9F4[v12]
                                                                                   + dword_20E80EA14[v12]
                                                                                   * (int)*(float *)(a1 + 4))
      {
        v20 = *(_OWORD *)a1;
        v21 = *(_OWORD *)(a1 + 32);
        a5[1] = *(_OWORD *)(a1 + 16);
        a5[2] = v21;
        *a5 = v20;
        v16 = *v13;
        v17 = *(_OWORD *)(a2 - 32);
        v18 = *(_OWORD *)(a2 - 16);
      }
      else
      {
        v14 = *v13;
        v15 = *(_OWORD *)(a2 - 16);
        a5[1] = *(_OWORD *)(a2 - 32);
        a5[2] = v15;
        *a5 = v14;
        v16 = *(_OWORD *)a1;
        v17 = *(_OWORD *)(a1 + 16);
        v18 = *(_OWORD *)(a1 + 32);
      }
      a5[4] = v17;
      a5[5] = v18;
      a5[3] = v16;
    }
    else if (a4 == 1)
    {
      v9 = *(_OWORD *)a1;
      v10 = *(_OWORD *)(a1 + 32);
      a5[1] = *(_OWORD *)(a1 + 16);
      a5[2] = v10;
      *a5 = v9;
    }
    else if ((uint64_t)a4 > 8)
    {
      v22 = a4 >> 1;
      v23 = 48 * (a4 >> 1);
      v24 = a1 + v23;
      sub_20E7C22BC(a1, a1 + v23, a3, a4 >> 1, a5, a4 >> 1);
      sub_20E7C22BC(v8 + v23, a2, a3, a4 - v22, &v5[(unint64_t)v23 / 0x10], a4 - v22);
      v25 = v8 + v23;
      while (v25 != a2)
      {
        v28 = *(_DWORD *)(v25 + 32) & ~(*(int *)(v25 + 32) >> 31);
        if (v28 >= 7)
          v28 = 7;
        v29 = *(_DWORD *)(v8 + 32) & ~(*(int *)(v8 + 32) >> 31);
        v30 = v28;
        v31 = dword_20E80E9F4[v30];
        v32 = dword_20E80EA14[v30];
        if (v29 >= 7)
          v29 = 7;
        if (v31 + v32 * (int)*(float *)(v25 + 4) >= dword_20E80E9F4[v29]
                                                   + dword_20E80EA14[v29] * (int)*(float *)(v8 + 4))
        {
          v26 = *(_OWORD *)v8;
          v27 = *(_OWORD *)(v8 + 32);
          v5[1] = *(_OWORD *)(v8 + 16);
          v5[2] = v27;
          *v5 = v26;
          v5 += 3;
          v8 += 48;
          if (v8 == v24)
            goto LABEL_25;
        }
        else
        {
          v33 = *(_OWORD *)v25;
          v34 = *(_OWORD *)(v25 + 32);
          v5[1] = *(_OWORD *)(v25 + 16);
          v5[2] = v34;
          *v5 = v33;
          v5 += 3;
          v25 += 48;
          if (v8 == v24)
          {
LABEL_25:
            if (v25 != a2)
            {
              v35 = 0;
              do
              {
                v36 = &v5[v35 / 0x10];
                v37 = *(_OWORD *)(v25 + v35);
                v38 = *(_OWORD *)(v25 + v35 + 32);
                v36[1] = *(_OWORD *)(v25 + v35 + 16);
                v36[2] = v38;
                *v36 = v37;
                v35 += 48;
              }
              while (v25 + v35 != a2);
            }
            return;
          }
        }
      }
      if (v8 != v24)
      {
        v39 = 0;
        do
        {
          v40 = &v5[v39 / 0x10];
          v41 = *(_OWORD *)(v8 + v39);
          v42 = *(_OWORD *)(v8 + v39 + 32);
          v40[1] = *(_OWORD *)(v8 + v39 + 16);
          v40[2] = v42;
          *v40 = v41;
          v39 += 48;
        }
        while (v8 + v39 != v24);
      }
    }
    else
    {
      sub_20E7C2D5C(a1, a2, (int *)a5);
    }
  }
}

__n128 sub_20E7C29A4(int *a1, __n128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  unint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  __n128 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  char *v29;
  unsigned int v30;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int *v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  char *v40;
  unsigned int v41;
  int v42;
  char *v43;
  char *v44;
  char *v45;
  int *v46;
  __int128 *v47;
  int *v48;
  __n128 v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;
  __n128 v59;
  __n128 v60;
  __n128 v61;

  if (a6)
  {
    while (1)
    {
      if (a6 <= a8 || a5 <= a8)
      {
        sub_20E7C2ECC(a1, (int *)a2, a3, a4, a5, a6, a7);
        return result;
      }
      if (!a5)
        return result;
      v10 = 0;
      v11 = a2[2].n128_u32[0] & ~(a2[2].n128_i32[0] >> 31);
      if (v11 >= 7)
        v11 = 7;
      v12 = dword_20E80E9F4[v11] + dword_20E80EA14[v11] * (int)a2->n128_f32[1];
      v13 = -a5;
      while (1)
      {
        v14 = a1[v10 / 4 + 8] & ~(a1[v10 / 4 + 8] >> 31);
        if (v14 >= 7)
          v14 = 7;
        result.n128_u32[0] = a1[v10 / 4 + 1];
        if (v12 < dword_20E80E9F4[v14] + dword_20E80EA14[v14] * (int)result.n128_f32[0])
          break;
        v10 += 48;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v17 = -v13;
      v55 = a3;
      v56 = a8;
      if (-v13 >= a6)
      {
        if (v13 == -1)
        {
          v48 = &a1[v10 / 4];
          v60 = *(__n128 *)&a1[v10 / 4 + 4];
          v61 = *(__n128 *)&a1[v10 / 4 + 8];
          v59 = *(__n128 *)&a1[v10 / 4];
          v49 = *a2;
          v50 = a2[2];
          *((__n128 *)v48 + 1) = a2[1];
          *((__n128 *)v48 + 2) = v50;
          *(__n128 *)v48 = v49;
          *a2 = v59;
          a2[1] = v60;
          result = v61;
          a2[2] = v61;
          return result;
        }
        if (v13 > 0)
          v17 = 1 - v13;
        v34 = v17 >> 1;
        v33 = (char *)a2;
        if (a2 != (__n128 *)a3)
        {
          v35 = &a1[12 * v34 + v10 / 4];
          v36 = v35[8] & ~(v35[8] >> 31);
          if (v36 >= 7)
            v36 = 7;
          v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 4);
          v38 = dword_20E80E9F4[v36] + dword_20E80EA14[v36] * (int)*((float *)v35 + 1);
          v33 = (char *)a2;
          do
          {
            v39 = v37 >> 1;
            v40 = &v33[48 * (v37 >> 1)];
            v41 = *((_DWORD *)v40 + 8) & ~(*((int *)v40 + 8) >> 31);
            if (v41 >= 7)
              v41 = 7;
            v42 = dword_20E80E9F4[v41] + dword_20E80EA14[v41] * (int)*((float *)v40 + 1);
            v43 = v40 + 48;
            v37 += ~v39;
            if (v42 < v38)
              v33 = v43;
            else
              v37 = v39;
          }
          while (v37);
        }
        v20 = (char *)&a1[12 * v34 + v10 / 4];
        v19 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (char *)a2) >> 4);
      }
      else
      {
        if (a6 >= 0)
          v18 = a6;
        else
          v18 = a6 + 1;
        v19 = v18 >> 1;
        v20 = (char *)a2;
        if ((char *)a2 - (char *)a1 != v10)
        {
          v21 = (char *)&a2[3 * v19];
          v22 = *((_DWORD *)v21 + 8) & ~(*((int *)v21 + 8) >> 31);
          if (v22 >= 7)
            v22 = 7;
          v23 = v22;
          v24 = dword_20E80E9F4[v23];
          v25 = dword_20E80EA14[v23];
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((char *)a2 - (char *)a1 - v10) >> 4);
          v27 = v24 + v25 * (int)*((float *)v21 + 1);
          v20 = (char *)&a1[v10 / 4];
          do
          {
            v28 = v26 >> 1;
            v29 = &v20[48 * (v26 >> 1)];
            v30 = *((_DWORD *)v29 + 8) & ~(*((int *)v29 + 8) >> 31);
            if (v30 >= 7)
              v30 = 7;
            v31 = dword_20E80E9F4[v30] + dword_20E80EA14[v30] * (int)*((float *)v29 + 1);
            v32 = v29 + 48;
            v26 += ~v28;
            if (v27 < v31)
              v26 = v28;
            else
              v20 = v32;
          }
          while (v26);
        }
        v33 = (char *)&a2[3 * v19];
        v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (char *)a1 - v10) >> 4);
      }
      v53 = a6;
      v54 = v19;
      v52 = -v34 - v13;
      v51 = a6 - v19;
      v44 = sub_20E7C30E8(v20, (char *)a2, v33);
      if (v34 + v54 >= v53 - (v34 + v54) - v13)
      {
        v47 = (__int128 *)v44;
        sub_20E7C29A4(v44, v33, v55, a4, v52, v51, a7, v56);
        a2 = (__n128 *)v20;
        a8 = v56;
        a5 = v34;
        a3 = v47;
        a6 = v54;
        a1 = (int *)((char *)a1 + v10);
        if (!v54)
          return result;
      }
      else
      {
        v45 = v20;
        v46 = (int *)v44;
        a8 = v56;
        sub_20E7C29A4(&a1[v10 / 4], v45, v44, a4, v34, v54, a7, v56);
        a2 = (__n128 *)v33;
        a3 = v55;
        a5 = -v34 - v13;
        a6 = v51;
        a1 = v46;
        if (!v51)
          return result;
      }
    }
  }
  return result;
}

__n128 sub_20E7C2D5C(uint64_t a1, uint64_t a2, int *a3)
{
  __n128 result;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int *v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;

  if (a1 != a2)
  {
    result = *(__n128 *)a1;
    v4 = *(_OWORD *)(a1 + 32);
    *((_OWORD *)a3 + 1) = *(_OWORD *)(a1 + 16);
    *((_OWORD *)a3 + 2) = v4;
    *(__n128 *)a3 = result;
    v5 = a1 + 48;
    if (a1 + 48 != a2)
    {
      v6 = 0;
      v7 = a3;
      do
      {
        v9 = a1;
        v10 = v7;
        a1 = v5;
        v7 += 12;
        v11 = *(_DWORD *)(v9 + 80) & ~(*(int *)(v9 + 80) >> 31);
        if (v11 >= 7)
          v11 = 7;
        v12 = v10[8] & ~(v10[8] >> 31);
        v13 = v11;
        if (v12 >= 7)
          v12 = 7;
        v14 = dword_20E80E9F4[v13] + dword_20E80EA14[v13] * (int)*(float *)(v9 + 52);
        v15 = v7;
        if (v14 < dword_20E80E9F4[v12] + dword_20E80EA14[v12] * (int)*((float *)v10 + 1))
        {
          v16 = *((_OWORD *)v10 + 1);
          *(_OWORD *)v7 = *(_OWORD *)v10;
          *((_OWORD *)v7 + 1) = v16;
          *((_OWORD *)v7 + 2) = *((_OWORD *)v10 + 2);
          v15 = a3;
          if (v10 != a3)
          {
            v17 = v6;
            while (1)
            {
              v15 = (int *)((char *)a3 + v17);
              v18 = *(_DWORD *)(v9 + 80) & ~(*(int *)(v9 + 80) >> 31);
              if (v18 >= 7)
                v18 = 7;
              v19 = *(v15 - 4) & ~(*(v15 - 4) >> 31);
              v20 = v18;
              v21 = dword_20E80E9F4[v20];
              v22 = dword_20E80EA14[v20];
              if (v19 >= 7)
                v19 = 7;
              if (v21 + v22 * (int)*(float *)(v9 + 52) >= dword_20E80E9F4[v19]
                                                         + dword_20E80EA14[v19] * (int)*((float *)v15 - 11))
                break;
              v23 = *((_OWORD *)v15 - 2);
              *(_OWORD *)v15 = *((_OWORD *)v15 - 3);
              *((_OWORD *)v15 + 1) = v23;
              *((_OWORD *)v15 + 2) = *((_OWORD *)v15 - 1);
              v17 -= 48;
              if (!v17)
              {
                v15 = a3;
                break;
              }
            }
          }
        }
        result = *(__n128 *)a1;
        v8 = *(_OWORD *)(a1 + 32);
        *((_OWORD *)v15 + 1) = *(_OWORD *)(a1 + 16);
        *((_OWORD *)v15 + 2) = v8;
        *(__n128 *)v15 = result;
        v5 = a1 + 48;
        v6 += 48;
      }
      while (a1 + 48 != a2);
    }
  }
  return result;
}

int *sub_20E7C2ECC(int *result, int *a2, __int128 *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  __int128 *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  BOOL v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;

  if (a5 <= a6)
  {
    if (result != a2)
    {
      v21 = 0;
      do
      {
        v22 = &__src[v21 * 4];
        v23 = *(_OWORD *)&result[v21];
        v24 = *(_OWORD *)&result[v21 + 8];
        *((_OWORD *)v22 + 1) = *(_OWORD *)&result[v21 + 4];
        *((_OWORD *)v22 + 2) = v24;
        *(_OWORD *)v22 = v23;
        v21 += 12;
      }
      while (&result[v21] != a2);
      if (v21 * 4)
      {
        v25 = &__src[v21 * 4];
        v26 = __src;
        while (a2 != (int *)a3)
        {
          v29 = a2[8] & ~(a2[8] >> 31);
          if (v29 >= 7)
            v29 = 7;
          v30 = *((_DWORD *)v26 + 8) & ~(*((int *)v26 + 8) >> 31);
          v31 = v29;
          v32 = dword_20E80E9F4[v31];
          v33 = dword_20E80EA14[v31];
          if (v30 >= 7)
            v30 = 7;
          if (v32 + v33 * (int)*((float *)a2 + 1) >= dword_20E80E9F4[v30]
                                                    + dword_20E80EA14[v30] * (int)*((float *)v26 + 1))
          {
            v27 = *(_OWORD *)v26;
            v28 = *((_OWORD *)v26 + 2);
            *((_OWORD *)result + 1) = *((_OWORD *)v26 + 1);
            *((_OWORD *)result + 2) = v28;
            *(_OWORD *)result = v27;
            result += 12;
            v26 += 48;
            if (v25 == v26)
              return result;
          }
          else
          {
            v34 = *(_OWORD *)a2;
            v35 = *((_OWORD *)a2 + 2);
            *((_OWORD *)result + 1) = *((_OWORD *)a2 + 1);
            *((_OWORD *)result + 2) = v35;
            *(_OWORD *)result = v34;
            result += 12;
            a2 += 12;
            if (v25 == v26)
              return result;
          }
        }
        return (int *)memmove(result, v26, __src - v26 + v21 * 4);
      }
    }
  }
  else if (a2 != (int *)a3)
  {
    v7 = 0;
    do
    {
      v8 = &__src[v7 * 4];
      v9 = *(_OWORD *)&a2[v7];
      v10 = *(_OWORD *)&a2[v7 + 8];
      *((_OWORD *)v8 + 1) = *(_OWORD *)&a2[v7 + 4];
      *((_OWORD *)v8 + 2) = v10;
      *(_OWORD *)v8 = v9;
      v7 += 12;
    }
    while (&a2[v7] != (int *)a3);
    if (v7 * 4)
    {
      v11 = &__src[v7 * 4];
      v12 = a3 - 3;
      while (a2 != result)
      {
        v13 = *((_DWORD *)v11 - 4) & ~(*((int *)v11 - 4) >> 31);
        if (v13 >= 7)
          v13 = 7;
        v14 = *(a2 - 4) & ~(*(a2 - 4) >> 31);
        if (v14 >= 7)
          v14 = 7;
        v15 = dword_20E80E9F4[v13] + dword_20E80EA14[v13] * (int)*((float *)v11 - 11);
        v16 = dword_20E80E9F4[v14] + dword_20E80EA14[v14] * (int)*((float *)a2 - 11);
        v17 = v15 < v16;
        if (v15 >= v16)
          v18 = v11 - 48;
        else
          v18 = (char *)(a2 - 12);
        if (v17)
          a2 -= 12;
        else
          v11 -= 48;
        v19 = *(_OWORD *)v18;
        v20 = *((_OWORD *)v18 + 2);
        v12[1] = *((_OWORD *)v18 + 1);
        v12[2] = v20;
        *v12 = v19;
        v12 -= 3;
        if (v11 == __src)
          return result;
      }
      v36 = 0;
      do
      {
        v37 = &v12[v36 / 0x10];
        v38 = *(_OWORD *)&v11[v36 - 48];
        v39 = *(_OWORD *)&v11[v36 - 16];
        v37[1] = *(_OWORD *)&v11[v36 - 32];
        v37[2] = v39;
        *v37 = v38;
        v36 -= 48;
      }
      while (&v11[v36] != __src);
    }
  }
  return result;
}

char *sub_20E7C30E8(char *__src, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  BOOL v14;
  int64_t v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  char *v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 48 == a2)
    {
      v35 = *(_OWORD *)__src;
      v38 = *((_OWORD *)__src + 1);
      v40 = *((_OWORD *)__src + 2);
      v15 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v15];
      *(_OWORD *)v4 = v35;
      *((_OWORD *)v4 + 1) = v38;
      *((_OWORD *)v4 + 2) = v40;
    }
    else if (a2 + 48 == a3)
    {
      v4 = __src + 48;
      v36 = *((_OWORD *)a3 - 3);
      v39 = *((_OWORD *)a3 - 2);
      v41 = *((_OWORD *)a3 - 1);
      v16 = a3 - 48 - __src;
      if (a3 - 48 != __src)
        memmove(__src + 48, __src, v16);
      *(_OWORD *)__src = v36;
      *((_OWORD *)__src + 1) = v39;
      *((_OWORD *)__src + 2) = v41;
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 4);
      if (v6 == 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4))
      {
        v7 = __src + 48;
        v8 = a2 + 48;
        do
        {
          v9 = *((_OWORD *)v7 - 3);
          v10 = *((_OWORD *)v7 - 2);
          v11 = *((_OWORD *)v7 - 1);
          v13 = *((_OWORD *)v8 - 2);
          v12 = *((_OWORD *)v8 - 1);
          *((_OWORD *)v7 - 3) = *((_OWORD *)v8 - 3);
          *((_OWORD *)v7 - 2) = v13;
          *((_OWORD *)v7 - 1) = v12;
          *((_OWORD *)v8 - 2) = v10;
          *((_OWORD *)v8 - 1) = v11;
          *((_OWORD *)v8 - 3) = v9;
          if (v7 == a2)
            break;
          v7 += 48;
          v14 = v8 == a3;
          v8 += 48;
        }
        while (!v14);
        return a2;
      }
      else
      {
        v17 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4);
        v18 = 0xAAAAAAAAAAAAAAABLL * ((a2 - __src) >> 4);
        do
        {
          v19 = v18;
          v18 = v17;
          v17 = v19 % v17;
        }
        while (v17);
        if (v18)
        {
          v20 = &__src[48 * v18];
          do
          {
            v21 = *((_OWORD *)v20 - 3);
            v22 = *((_OWORD *)v20 - 2);
            v23 = *((_OWORD *)v20 - 1);
            v20 -= 48;
            v37 = v21;
            v42 = v23;
            v24 = &v20[16 * ((a2 - __src) >> 4)];
            v25 = v20;
            do
            {
              v26 = v24;
              v27 = *(_OWORD *)v24;
              v28 = *((_OWORD *)v24 + 2);
              *((_OWORD *)v25 + 1) = *((_OWORD *)v24 + 1);
              *((_OWORD *)v25 + 2) = v28;
              *(_OWORD *)v25 = v27;
              v29 = 0xAAAAAAAAAAAAAAABLL * ((a3 - v24) >> 4);
              v24 += 16 * ((a2 - __src) >> 4);
              v30 = __OFSUB__(v6, v29);
              v32 = v6 - v29;
              v31 = (v32 < 0) ^ v30;
              v33 = &__src[48 * v32];
              if (!v31)
                v24 = v33;
              v25 = v26;
            }
            while (v24 != v20);
            *((_OWORD *)v26 + 1) = v22;
            *((_OWORD *)v26 + 2) = v42;
            *(_OWORD *)v26 = v37;
          }
          while (v20 != __src);
        }
        return &__src[16 * ((a3 - a2) >> 4)];
      }
    }
  }
  return v4;
}

_QWORD *sub_20E7C32EC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E78D874();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_20E7C33C0(v3, v4, v5, v8);
  }
  return a1;
}

void sub_20E7C3394(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
    sub_20E807A88((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E7C33C0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_20E78D874();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20E7C3488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E7C34C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E7C349C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E7C34C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7C34C0(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

char *sub_20E7C352C(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v9;
  uint64_t v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  __int128 *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;

  v5 = *(char **)a1;
  v6 = (a2 - *(_QWORD *)a1) / 48;
  v7 = (char *)(*(_QWORD *)a1 + 48 * v6);
  if (a5 < 1)
    return v7;
  v9 = __src;
  v12 = *(__int128 **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v12) >> 4)) < a5)
  {
    v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 4);
    if (v13 > 0x555555555555555)
      sub_20E78D874();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v5) >> 4);
    v15 = 2 * v14;
    if (2 * v14 <= v13)
      v15 = v13;
    if (v14 >= 0x2AAAAAAAAAAAAAALL)
      v16 = 0x555555555555555;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 > 0x555555555555555)
        sub_20E78D888();
      v17 = (char *)operator new(48 * v16);
    }
    else
    {
      v17 = 0;
    }
    v26 = &v17[48 * v6];
    v27 = 48 * a5;
    v28 = &v26[48 * a5];
    v29 = v26;
    do
    {
      v30 = *(_OWORD *)v9;
      v31 = *((_OWORD *)v9 + 2);
      *((_OWORD *)v29 + 1) = *((_OWORD *)v9 + 1);
      *((_OWORD *)v29 + 2) = v31;
      *(_OWORD *)v29 = v30;
      v29 += 48;
      v9 += 48;
      v27 -= 48;
    }
    while (v27);
    v32 = 48 * v16;
    v33 = *(char **)a1;
    v34 = v26;
    if (*(char **)a1 != v7)
    {
      v35 = v7;
      v34 = v26;
      do
      {
        v36 = *((_OWORD *)v35 - 3);
        v37 = *((_OWORD *)v35 - 1);
        *((_OWORD *)v34 - 2) = *((_OWORD *)v35 - 2);
        *((_OWORD *)v34 - 1) = v37;
        *((_OWORD *)v34 - 3) = v36;
        v34 -= 48;
        v35 -= 48;
      }
      while (v35 != v33);
      v12 = *(__int128 **)(a1 + 8);
    }
    v38 = &v17[v32];
    if (v12 != (__int128 *)v7)
      memmove(v28, v7, (char *)v12 - v7);
    v39 = *(char **)a1;
    *(_QWORD *)a1 = v34;
    *(_QWORD *)(a1 + 8) = &v28[(char *)v12 - v7];
    *(_QWORD *)(a1 + 16) = v38;
    if (v39)
      operator delete(v39);
    return v26;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - v7) >> 4)) >= a5)
  {
    v18 = &__src[48 * a5];
    v20 = *(char **)(a1 + 8);
LABEL_18:
    v21 = &v7[48 * a5];
    v22 = (__int128 *)&v20[-48 * a5];
    v23 = v20;
    if (v22 < v12)
    {
      v23 = v20;
      do
      {
        v24 = *v22;
        v25 = v22[2];
        *((_OWORD *)v23 + 1) = v22[1];
        *((_OWORD *)v23 + 2) = v25;
        *(_OWORD *)v23 = v24;
        v23 += 48;
        v22 += 3;
      }
      while (v22 < v12);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v7[48 * a5], v7, v20 - v21);
    if (v18 != v9)
      memmove(v7, v9, v18 - v9);
    return v7;
  }
  v18 = &__src[16 * (((char *)v12 - v7) >> 4)];
  v19 = a4 - v18;
  if (a4 != v18)
    memmove(*(void **)(a1 + 8), &__src[16 * (((char *)v12 - v7) >> 4)], a4 - v18);
  v20 = (char *)v12 + v19;
  *(_QWORD *)(a1 + 8) = (char *)v12 + v19;
  if ((char *)v12 - v7 >= 1)
    goto LABEL_18;
  return v7;
}

void sub_20E7C37AC(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      sub_20E78D874();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x555555555555555)
        sub_20E78D888();
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[48 * v7];
    v14 = &v11[48 * v10];
    v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 3);
        v18 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v18;
        *((_OWORD *)v13 - 3) = v17;
        v13 -= 48;
        v5 -= 48;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

float sub_20E7C3948(uint64_t a1, float a2, float a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = a2;
  v5 = a3;
  v6 = a2 + 1;
  v7 = *(_QWORD *)(a1 + 72) + 2 * v3 * v5;
  v8 = v7 + 2 * v3;
  v9 = (float)v6 - a2;
  v10 = (float)(v5 + 1) - a3;
  v11 = v9 * v10;
  v12 = a2 - (float)a2;
  v13 = v12 * v10;
  *(float *)&v14 = (float)a3;
  *(float *)&v15 = a3 - *(float *)&v14;
  *(float *)&v16 = v9 * *(float *)&v15;
  v17 = v12 * *(float *)&v15;
  v18 = 4 * v4;
  LOWORD(v15) = *(_WORD *)(v7 + v18);
  v19 = 4 * v6;
  LOWORD(v14) = *(_WORD *)(v7 + v19);
  *(float *)&v20 = v13 * (float)v14;
  v21 = *(float *)&v20 + (float)(v11 * (float)v15);
  LOWORD(v20) = *(_WORD *)(v8 + v18);
  v22 = v21 + (float)(*(float *)&v16 * (float)v20);
  LOWORD(v16) = *(_WORD *)(v8 + v19);
  return v22 + (float)(v17 * (float)v16);
}

uint64_t sub_20E7C39E8(int a1, int a2)
{
  _BOOL4 v3;

  v3 = a1 == 640 && a2 == 480;
  return (a2 == 270 || a2 == 360) && a1 == 480 || v3;
}

uint64_t sub_20E7C3A10()
{
  return 740;
}

uint64_t sub_20E7C3A18(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v4;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v2 = *(_DWORD *)(a2 + 64);
  if (v2 > 3)
    return 0;
  *(_BYTE *)(a1 + 256) = 0xF0C0907u >> (8 * v2);
  v4 = *(unsigned int *)(a1 + 180);
  if ((_DWORD)v4 != *(_DWORD *)(a1 + 184))
    sub_20E80AD18();
  v6 = sub_20E7CB93C(*(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int16 *)(a2 + 50), v4);
  *(_WORD *)(a2 + 50) = v6;
  if (v6 >= 7u)
    sub_20E80ACEC();
  if (!v6)
    sub_20E80AC68();
  if (*(_DWORD *)a2 >> (v6 - 1) < *(_DWORD *)(a1 + 180))
    sub_20E80AC94();
  if (*(_DWORD *)(a2 + 4) >> (v6 - 1) < *(_DWORD *)(a1 + 184))
    sub_20E80ACC0();
  v7 = a1 + 172;
  result = sub_20E7AE438((unsigned int *)(a1 + 172), a2);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)a2;
    v10 = *(unsigned __int16 *)(a2 + 50);
    *(_WORD *)(a1 + 160) = v10;
    v11 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 168) = v11;
    v12 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 16) - v9) >> 2);
    if (v10 <= v12)
    {
      if (v10 < v12)
        *(_QWORD *)(a1 + 16) = v9 + 28 * v10;
    }
    else
    {
      sub_20E798DFC((char **)(a1 + 8), v10 - v12);
      v10 = *(unsigned __int16 *)(a2 + 50);
    }
    v13 = *(_QWORD *)(a1 + 32);
    v14 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 40) - v13) >> 2);
    if (v10 <= v14)
    {
      if (v10 < v14)
        *(_QWORD *)(a1 + 40) = v13 + 28 * v10;
    }
    else
    {
      sub_20E798DFC((char **)(a1 + 32), v10 - v14);
      v10 = *(unsigned __int16 *)(a2 + 50);
    }
    v15 = *(_QWORD *)(a1 + 56);
    v16 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 64) - v15) >> 2);
    if (v10 <= v16)
    {
      if (v10 < v16)
        *(_QWORD *)(a1 + 64) = v15 + 28 * v10;
    }
    else
    {
      sub_20E798DFC((char **)(a1 + 56), v10 - v16);
      v10 = *(unsigned __int16 *)(a2 + 50);
    }
    v17 = *(_QWORD *)(a1 + 80);
    v18 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 88) - v17) >> 2);
    if (v10 <= v18)
    {
      if (v10 < v18)
        *(_QWORD *)(a1 + 88) = v17 + 28 * v10;
    }
    else
    {
      sub_20E798DFC((char **)(a1 + 80), v10 - v18);
      v10 = *(unsigned __int16 *)(a2 + 50);
    }
    v19 = *(_QWORD *)(a1 + 104);
    v20 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 112) - v19) >> 2);
    if (v10 <= v20)
    {
      if (v10 < v20)
        *(_QWORD *)(a1 + 112) = v19 + 28 * v10;
    }
    else
    {
      sub_20E798DFC((char **)(a1 + 104), v10 - v20);
      v10 = *(unsigned __int16 *)(a2 + 50);
    }
    v21 = *(_QWORD *)(a1 + 128);
    v22 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 136) - v21) >> 2);
    if (v10 <= v22)
    {
      if (v10 < v22)
        *(_QWORD *)(a1 + 136) = v21 + 28 * v10;
    }
    else
    {
      sub_20E798DFC((char **)(a1 + 128), v10 - v22);
      v10 = *(unsigned __int16 *)(a2 + 50);
    }
    v23 = *(_QWORD *)(a1 + 232);
    v24 = (_QWORD *)(a1 + 232);
    v25 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 240) - v23) >> 5);
    if (v10 <= v25)
    {
      if (v10 < v25)
        *(_QWORD *)(a1 + 240) = v23 + 160 * v10;
    }
    else
    {
      sub_20E7C4638((char **)(a1 + 232), v10 - v25);
      LODWORD(v10) = *(unsigned __int16 *)(a2 + 50);
    }
    if ((_DWORD)v10)
    {
      v26 = 0;
      v27 = 0;
      do
      {
        sub_20E7AE528(v7, a2, v27++, *v24 + v26);
        v26 += 160;
      }
      while (v27 < *(unsigned __int16 *)(a2 + 50));
    }
    return 1;
  }
  return result;
}

uint64_t sub_20E7C3D50(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (*(unsigned __int16 *)(a1 + 160) <= a7)
    sub_20E80AD70();
  v13 = a7;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  bzero(a2, v14);
  *a2 = -1;
  a2[1] = a3 | 0x80000000;
  *((_QWORD *)a2 + 1) = 0;
  v15 = (uint64_t)(a2 + 38);
  a2[38] |= 0x7FFFFFFFu;
  v16 = a2[59];
  *((_QWORD *)a2 + 18) = 0x100000007;
  a2[59] = v16 | 0x7FFFFFFF;
  a2[80] |= 0x7FFFFFFFu;
  a2[101] |= 0x7FFFFFFFu;
  a2[122] |= 0x7FFFFFFFu;
  a2[143] |= 0x7FFFFFFFu;
  a2[164] |= 0x7FFFFFFFu;
  if ((_DWORD)v13)
  {
    v17 = *(_QWORD *)(a1 + 56);
    if (!*(_BYTE *)(v17 + 28 * (v13 - 1)))
      sub_20E80AD44();
    sub_20E7C56D4(v15, *(_DWORD *)(v17 + 28 * (v13 - 1) + 4), *(_DWORD *)(v17 + 28 * (v13 - 1) + 8), *(_DWORD *)(v17 + 28 * (v13 - 1) + 12), 4, 1, *(_DWORD *)(a1 + 168) + *(_DWORD *)(v17 + 28 * (v13 - 1) + 16));
    v18 = *(_BYTE **)(a1 + 8);
    if (v18[28 * v13])
      goto LABEL_5;
  }
  else
  {
    sub_20E7C56D4(v15, a4, a5, a6, 8, 0, 0);
    v18 = *(_BYTE **)(a1 + 8);
    if (*v18)
LABEL_5:
      sub_20E7C56D4((uint64_t)(a2 + 122), *(_DWORD *)&v18[28 * v13 + 4], *(_DWORD *)&v18[28 * v13 + 8], *(_DWORD *)&v18[28 * v13 + 12], 8, 1, *(_DWORD *)(a1 + 168) + *(_DWORD *)&v18[28 * v13 + 16]);
  }
  v19 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v19 + 28 * v13))
    sub_20E7C56D4((uint64_t)(a2 + 143), *(_DWORD *)(v19 + 28 * v13 + 4), *(_DWORD *)(v19 + 28 * v13 + 8), *(_DWORD *)(v19 + 28 * v13 + 12), 8, 1, *(_DWORD *)(a1 + 168) + *(_DWORD *)(v19 + 28 * v13 + 16));
  v20 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v20 + 28 * v13))
    sub_20E7C56D4((uint64_t)(a2 + 59), *(_DWORD *)(v20 + 28 * v13 + 4), *(_DWORD *)(v20 + 28 * v13 + 8), *(_DWORD *)(v20 + 28 * v13 + 12), 4, 1, *(_DWORD *)(a1 + 168) + *(_DWORD *)(v20 + 28 * v13 + 16));
  v21 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v21 + 28 * v13))
    sub_20E7C56D4((uint64_t)(a2 + 101), *(_DWORD *)(v21 + 28 * v13 + 4), *(_DWORD *)(v21 + 28 * v13 + 8), *(_DWORD *)(v21 + 28 * v13 + 12), 4, 1, *(_DWORD *)(a1 + 168) + *(_DWORD *)(v21 + 28 * v13 + 16));
  sub_20E7C56D4((uint64_t)(a2 + 80), *(_DWORD *)(*(_QWORD *)(a1 + 104) + 28 * v13 + 4), *(_DWORD *)(*(_QWORD *)(a1 + 104) + 28 * v13 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 104) + 28 * v13 + 12), 8, 1, *(_DWORD *)(a1 + 168) + *(_DWORD *)(*(_QWORD *)(a1 + 104) + 28 * v13 + 16));
  return sub_20E7C56D4((uint64_t)(a2 + 164), *(_DWORD *)(*(_QWORD *)(a1 + 128) + 28 * v13 + 4), *(_DWORD *)(*(_QWORD *)(a1 + 128) + 28 * v13 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 128) + 28 * v13 + 12), 8, 1, *(_DWORD *)(a1 + 168) + *(_DWORD *)(*(_QWORD *)(a1 + 128) + 28 * v13 + 16));
}

uint64_t sub_20E7C4000(_QWORD *a1, int a2, unsigned int a3)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      result = a1[1] + 28 * a3;
      break;
    case 1:
      result = a1[4] + 28 * a3;
      break;
    case 2:
      result = a1[7] + 28 * a3;
      break;
    case 3:
      result = a1[10] + 28 * a3;
      break;
    case 4:
      result = a1[13] + 28 * a3;
      break;
    case 5:
      result = a1[16] + 28 * a3;
      break;
    default:
      sub_20E80AD9C();
  }
  return result;
}

uint64_t sub_20E7C40C0()
{
  return 64;
}

uint64_t sub_20E7C40C8()
{
  return 256;
}

__n128 sub_20E7C40D0(uint32x2_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  v4 = a1[32].u8[0];
  *(_DWORD *)a2 = -1;
  *(_DWORD *)(a2 + 4) = v4;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_QWORD *)(a2 + 12) = 0x200000100;
  *(uint32x2_t *)(a2 + 20) = vshl_u32(a1[19], (uint32x2_t)vneg_s32(vdup_n_s32(a3)));
  *(_DWORD *)(a2 + 28) = a4;
  *(_DWORD *)(a2 + 32) = 1;
  v5 = *(_QWORD *)&a1[29] + 160 * a3;
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)(a4 == 4) << 34);
  v6 = *(_OWORD *)(v5 + 32);
  v7 = *(_OWORD *)(v5 + 48);
  v8 = *(_OWORD *)(v5 + 64);
  *(_OWORD *)(a2 + 156) = *(_OWORD *)(v5 + 80);
  *(_OWORD *)(a2 + 140) = v8;
  *(_OWORD *)(a2 + 124) = v7;
  *(_OWORD *)(a2 + 108) = v6;
  v9 = *(_OWORD *)(v5 + 96);
  v10 = *(_OWORD *)(v5 + 112);
  v11 = *(_OWORD *)(v5 + 128);
  *(_OWORD *)(a2 + 220) = *(_OWORD *)(v5 + 144);
  *(_OWORD *)(a2 + 204) = v11;
  *(_OWORD *)(a2 + 188) = v10;
  *(_OWORD *)(a2 + 172) = v9;
  result = *(__n128 *)v5;
  *(_OWORD *)(a2 + 92) = *(_OWORD *)(v5 + 16);
  *(__n128 *)(a2 + 76) = result;
  return result;
}

uint64_t sub_20E7C4188(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;

  v6 = *(_QWORD *)(a1 + 232);
  v7 = *(_QWORD *)(a1 + 240);
  for (i = *(_DWORD *)(v6 + 72); v6 != v7; v6 += 160)
  {
    if (*(_DWORD *)(v6 + 72) != i)
      sub_20E80AE20();
  }
  if (!*(_WORD *)(a1 + 160))
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  LODWORD(v12) = 0;
  v13 = 4 * i;
  do
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + v10);
    if ((v17 & 0x40000000000) != 0)
    {
      if (a2 >> v11 == -1)
        sub_20E80ADC8();
      v18 = ((a2 >> v11) & 1) + (a2 >> v11);
      if ((v18 & 1) != 0)
        sub_20E80ADF4();
      LODWORD(v12) = sub_20E7C59A4(*(_QWORD *)(a1 + 8) + v9, v18, a3 >> v11, v12, 8) + v12;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + v10);
    }
    if ((~v17 & 0x80200000000) == 0)
    {
      if (a2 >> v11 == -1)
        sub_20E80ADC8();
      v19 = ((a2 >> v11) & 1) + (a2 >> v11);
      if ((v19 & 1) != 0)
        sub_20E80ADF4();
      LODWORD(v12) = sub_20E7C59A4(*(_QWORD *)(a1 + 32) + v9, v19, a3 >> v11, v12, 8) + v12;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + v10);
    }
    if ((~v17 & 0x300000000) == 0)
    {
      LODWORD(v12) = sub_20E7C59A4(*(_QWORD *)(a1 + 56) + v9, a2 >> (v11 + 1), a3 >> (v11 + 1), v12, 4) + v12;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + v10);
    }
    if ((v17 & 0x8000) != 0)
      LODWORD(v12) = sub_20E7C5958(*(_QWORD *)(a1 + 80) + v9, a2 >> v11, a3 >> v11, v12) + v12;
    v14 = sub_20E7C5A20(v13, v12, 64, *(_QWORD *)(a1 + 104) + v9) + v12;
    v15 = *(_QWORD *)(a1 + 128) + v9;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
    v12 = sub_20E7C59A4(v15, (v16 + 63) & 0xFFFFFFC0, 1, v14, 8) + v14;
    ++v11;
    v10 += 160;
    v9 += 28;
  }
  while (v11 < *(unsigned __int16 *)(a1 + 160));
  return v12;
}

uint64_t sub_20E7C4388(uint64_t a1, int a2)
{
  return ((24 * a2 + 63) & 0xFFFFFFC0) + (a2 << 6) + 576;
}

void sub_20E7C43A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 52) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a3 + 92) = *(_DWORD *)a2;
  *(_WORD *)a3 = *(_WORD *)(a2 + 8);
  *(_WORD *)(a3 + 2) = *(_WORD *)(a2 + 10);
  *(_WORD *)(a3 + 4) = *(_WORD *)(a2 + 12);
  *(_WORD *)(a3 + 6) = *(_WORD *)(a2 + 14);
  *(_WORD *)(a3 + 8) = *(_WORD *)(a2 + 16);
  *(_WORD *)(a3 + 10) = *(_WORD *)(a2 + 18);
  *(_WORD *)(a3 + 12) = *(_WORD *)(a2 + 20);
  *(_WORD *)(a3 + 14) = *(_WORD *)(a2 + 22);
  *(_WORD *)(a3 + 16) = *(_WORD *)(a2 + 24);
  *(_WORD *)(a3 + 18) = *(_WORD *)(a2 + 26);
  *(_WORD *)(a3 + 20) = *(_WORD *)(a2 + 28);
  *(_WORD *)(a3 + 22) = *(_WORD *)(a2 + 30);
  *(_WORD *)(a3 + 24) = *(_WORD *)(a2 + 32);
  *(_WORD *)(a3 + 26) = *(_WORD *)(a2 + 34);
  *(_WORD *)(a3 + 28) = *(_WORD *)(a2 + 36);
  *(_WORD *)(a3 + 30) = *(_WORD *)(a2 + 38);
  *(_WORD *)(a3 + 32) = *(_WORD *)(a2 + 40);
  *(_WORD *)(a3 + 34) = *(_WORD *)(a2 + 42);
  *(_WORD *)(a3 + 36) = *(_WORD *)(a2 + 44);
  *(_WORD *)(a3 + 38) = *(_WORD *)(a2 + 46);
  *(_WORD *)(a3 + 40) = *(_WORD *)(a2 + 48);
  *(_WORD *)(a3 + 42) = *(_WORD *)(a2 + 50);
  *(_WORD *)(a3 + 44) = *(_WORD *)(a2 + 52);
  *(_WORD *)(a3 + 46) = *(_WORD *)(a2 + 54);
  *(_WORD *)(a3 + 48) = *(_WORD *)(a2 + 56);
}

void sub_20E7C4480()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyEngine.cpp", 324, "0 && \"Update config not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E7C44AC()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyEngine.cpp", 328, "0 && \"Get Kp Limit Per Scale not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E7C44D8()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyEngine.cpp", 333, "0 && \"Update Dynamic Threshold is not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

uint64_t sub_20E7C4504()
{
  return 0;
}

uint64_t sub_20E7C450C()
{
  return 0;
}

void sub_20E7C4514()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwKeyEngine.cpp", 341, "0 && \"Update TID counter init value is not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

void sub_20E7C4544(_QWORD *a1)
{
  sub_20E7C459C(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E7C4580()
{
  return 0;
}

uint64_t sub_20E7C4590()
{
  return 0;
}

uint64_t sub_20E7C459C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &off_24C9A8AB0;
  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return nullsub_13(a1);
}

void sub_20E7C4638(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 5) >= a2)
  {
    if (a2)
    {
      v12 = 160 * ((160 * a2 - 160) / 0xA0) + 160;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 5);
    v8 = v7 + a2;
    if (v7 + a2 > 0x199999999999999)
      sub_20E78D874();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 5);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xCCCCCCCCCCCCCCLL)
      v10 = 0x199999999999999;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x199999999999999)
        sub_20E78D888();
      v11 = (char *)operator new(160 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[160 * v7];
    v14 = &v11[160 * v10];
    v15 = 160 * ((160 * a2 - 160) / 0xA0) + 160;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 9);
        *((_OWORD *)v13 - 10) = *((_OWORD *)v5 - 10);
        *((_OWORD *)v13 - 9) = v17;
        v18 = *((_OWORD *)v5 - 8);
        v19 = *((_OWORD *)v5 - 7);
        v20 = *((_OWORD *)v5 - 5);
        *((_OWORD *)v13 - 6) = *((_OWORD *)v5 - 6);
        *((_OWORD *)v13 - 5) = v20;
        *((_OWORD *)v13 - 8) = v18;
        *((_OWORD *)v13 - 7) = v19;
        v21 = *((_OWORD *)v5 - 4);
        v22 = *((_OWORD *)v5 - 3);
        v23 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v23;
        *((_OWORD *)v13 - 4) = v21;
        *((_OWORD *)v13 - 3) = v22;
        v13 -= 160;
        v5 -= 160;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

_BYTE *sub_20E7C47EC(_BYTE *result, _DWORD *a2)
{
  BOOL v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v2 = (*a2 - 7) >= 3;
  result[6] = 0;
  if (v2)
    v3 = 13;
  else
    v3 = 11;
  if (v2)
    v4 = 14;
  else
    v4 = 12;
  result[42] = v3;
  result[78] = v4;
  if (v2)
    v5 = 15;
  else
    v5 = 13;
  if (v2)
    v6 = 12;
  else
    v6 = 10;
  result[114] = v5;
  result[186] = v6;
  if (v2)
    v7 = 16;
  else
    v7 = 14;
  if (v2)
    v8 = 17;
  else
    v8 = 15;
  if (v2)
    v9 = 18;
  else
    v9 = 16;
  result[222] = v7;
  result[258] = v8;
  if (v2)
    v10 = 19;
  else
    v10 = 17;
  result[294] = v9;
  result[330] = v10;
  return result;
}

double sub_20E7C4880(uint64_t a1)
{
  double result;

  *(_WORD *)(a1 + 4) = 256;
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 33) = 0;
  *(_BYTE *)(a1 + 41) = 1;
  *(_WORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 69) = 0;
  *(_BYTE *)(a1 + 77) = 1;
  *(_WORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 105) = 0;
  *(_BYTE *)(a1 + 113) = 1;
  *(_WORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_WORD *)(a1 + 188) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 213) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 221) = 1;
  *(_WORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 249) = 0;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 257) = 1;
  *(_WORD *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 293) = 1;
  *(_WORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 329) = 1;
  *(_WORD *)(a1 + 332) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_BYTE *)(a1 + 42) = 13;
  *(_BYTE *)(a1 + 78) = 14;
  *(_BYTE *)(a1 + 114) = 15;
  *(_BYTE *)(a1 + 186) = 12;
  *(_BYTE *)(a1 + 222) = 16;
  *(_BYTE *)(a1 + 258) = 17;
  *(_BYTE *)(a1 + 294) = 18;
  *(_BYTE *)(a1 + 330) = 19;
  *(_WORD *)(a1 + 184) = 256;
  *(_QWORD *)(a1 + 285) = 0;
  *(_QWORD *)(a1 + 316) = 0;
  *(_QWORD *)(a1 + 321) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 308) = 0;
  return result;
}

uint64_t sub_20E7C49A4(uint64_t result, unsigned int a2, uint64_t a3, char a4)
{
  uint64_t v4;

  if (a2 >= 4)
    sub_20E80AE4C();
  v4 = result + 36 * a2;
  *(_BYTE *)(v4 + 4) = 1;
  *(_BYTE *)(v4 + 5) = a4;
  *(_DWORD *)(v4 + 12) = HIDWORD(a3);
  *(_DWORD *)(v4 + 16) = a3;
  *(_WORD *)(v4 + 8) = 8;
  return result;
}

uint64_t sub_20E7C49E4(uint64_t result, unsigned int a2, uint64_t a3, char a4, int a5, unsigned int a6, int a7)
{
  unsigned int v7;
  uint64_t v8;

  v7 = (a5 + a6 - 1) / a6;
  v8 = result + 36 * a2;
  *(_BYTE *)(v8 + 184) = 1;
  *(_BYTE *)(v8 + 185) = a4;
  *(_DWORD *)(v8 + 192) = HIDWORD(a3);
  *(_DWORD *)(v8 + 196) = a3;
  *(_DWORD *)(v8 + 208) = v7;
  *(_DWORD *)(v8 + 212) = a6;
  *(_DWORD *)(v8 + 200) = v7 * a6;
  *(_DWORD *)(v8 + 204) = a6;
  *(_DWORD *)(v8 + 216) = a7;
  *(_WORD *)(v8 + 188) = 8;
  return result;
}

uint64_t sub_20E7C4A28(_DWORD *a1)
{
  const std::ios_base *v1;
  const std::locale::facet *v2;
  uint64_t v3;
  _DWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  const std::ios_base *v27;
  const std::locale::facet *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char v55[24];
  void *v56;
  char v57;
  _QWORD v58[2];
  _QWORD v59[11];
  char v60;
  uint64_t v61;
  _BYTE v62[12];
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  uint8_t v69[4];
  uint64_t v70;
  _BYTE v71[16];
  uint8_t v72[4];
  _QWORD v73[5];

  *(_QWORD *)((char *)&v73[2] + 4) = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B71C();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B63C();
  sub_20E78F30C((uint64_t)v58, 16);
  v1 = (const std::ios_base *)((char *)v58 + *(_QWORD *)(v58[0] - 24));
  if (v1[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v1);
    v2 = std::locale::use_facet((const std::locale *)v62, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 32);
    std::locale::~locale((std::locale *)v62);
  }
  v3 = 0;
  v1[1].__fmtflags_ = 48;
  v4 = a1 + 43;
  do
  {
    sub_20E78F4CC(v59, (uint64_t)"GRF ", 4);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = sub_20E78F4CC(v5, (uint64_t)" = 0x", 5);
    v7 = *v6;
    *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 24) = 8;
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = sub_20E78F4CC(v8, (uint64_t)"\t\tVRF ", 6);
    *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 2;
    v10 = (_QWORD *)std::ostream::operator<<();
    sub_20E78F4CC(v10, (uint64_t)" = (", 4);
    v11 = sub_20E78F4CC(v59, (uint64_t)"0x", 2);
    v12 = *v11;
    *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v11 + *(_QWORD *)(v12 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v59, (uint64_t)", ", 2);
    v13 = sub_20E78F4CC(v59, (uint64_t)"0x", 2);
    v14 = *v13;
    *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v13 + *(_QWORD *)(v14 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v59, (uint64_t)", ", 2);
    v15 = sub_20E78F4CC(v59, (uint64_t)"0x", 2);
    v16 = *v15;
    *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v15 + *(_QWORD *)(v16 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v59, (uint64_t)", ", 2);
    v17 = sub_20E78F4CC(v59, (uint64_t)"0x", 2);
    v18 = *v17;
    *(_DWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v17 + *(_QWORD *)(v18 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v59, (uint64_t)", ", 2);
    v19 = sub_20E78F4CC(v59, (uint64_t)"0x", 2);
    v20 = *v19;
    *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v19 + *(_QWORD *)(v20 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v59, (uint64_t)", ", 2);
    v21 = sub_20E78F4CC(v59, (uint64_t)"0x", 2);
    v22 = *v21;
    *(_DWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 8) = *(_DWORD *)((_BYTE *)v21 + *(_QWORD *)(*v21 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v21 + *(_QWORD *)(v22 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v59, (uint64_t)", ", 2);
    v23 = sub_20E78F4CC(v59, (uint64_t)"0x", 2);
    v24 = *v23;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(*v23 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v23 + *(_QWORD *)(v24 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v59, (uint64_t)", ", 2);
    v25 = sub_20E78F4CC(v59, (uint64_t)"0x", 2);
    v26 = *v25;
    *(_DWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 8) = *(_DWORD *)((_BYTE *)v25 + *(_QWORD *)(*v25 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v25 + *(_QWORD *)(v26 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v59, (uint64_t)")", 1);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str();
      sub_20E80B5CC(&v57, &v56, v72, v73);
    }
    HIBYTE(v66) = 0;
    v62[0] = 0;
    std::stringbuf::str();
    if (SHIBYTE(v66) < 0)
      operator delete(*(void **)v62);
    ++v3;
    v4 += 8;
  }
  while (v3 != 32);
  std::ios_base::clear((std::ios_base *)((char *)v58 + *(_QWORD *)(v58[0] - 24)), 0);
  v27 = (const std::ios_base *)((char *)v58 + *(_QWORD *)(v58[0] - 24));
  if (v27[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v27);
    v28 = std::locale::use_facet((const std::locale *)v62, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 32);
    std::locale::~locale((std::locale *)v62);
  }
  v27[1].__fmtflags_ = 48;
  v29 = sub_20E78F4CC(v59, (uint64_t)"RET = 0x", 8);
  v30 = *v29;
  *(_DWORD *)((char *)v29 + *(_QWORD *)(*v29 - 24) + 8) = *(_DWORD *)((_BYTE *)v29 + *(_QWORD *)(*v29 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(uint64_t *)((char *)v29 + *(_QWORD *)(v30 - 24) + 24) = 8;
  std::ostream::operator<<();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    std::stringbuf::str();
    sub_20E80B560(v55, (uint64_t)v71, v31);
  }
  HIBYTE(v66) = 0;
  v62[0] = 0;
  std::stringbuf::str();
  if (SHIBYTE(v66) < 0)
    operator delete(*(void **)v62);
  std::ios_base::clear((std::ios_base *)((char *)v58 + *(_QWORD *)(v58[0] - 24)), 0);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B4F4();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B488();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B41C();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B3B0();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B33C();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B2C8();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B25C();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B1E8();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B174();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B100();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B094();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80B020();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80AF88();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80AEFC();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80AEBC(v69, &v70, v32);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80AE78(v69, &v70, v33);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v36 = a1[332];
    v37 = a1[331];
    v38 = a1[330];
    *(_DWORD *)v62 = 134218752;
    *(_QWORD *)&v62[4] = 2;
    v63 = 1024;
    v64 = v37;
    v65 = 1024;
    v66 = v38;
    v67 = 1024;
    v68 = v36;
    _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "RMA%zu base 0x%08x_%08x, size %d", v62, 0x1Eu);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
LABEL_53:
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        goto LABEL_54;
      goto LABEL_62;
    }
  }
  else if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    goto LABEL_53;
  }
  v39 = a1[335];
  v40 = a1[334];
  v41 = a1[333];
  *(_DWORD *)v62 = 134218752;
  *(_QWORD *)&v62[4] = 3;
  v63 = 1024;
  v64 = v40;
  v65 = 1024;
  v66 = v41;
  v67 = 1024;
  v68 = v39;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "RMA%zu base 0x%08x_%08x, size %d", v62, 0x1Eu);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_54:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_55;
    goto LABEL_63;
  }
LABEL_62:
  v42 = a1[338];
  v43 = a1[337];
  v44 = a1[336];
  *(_DWORD *)v62 = 134218752;
  *(_QWORD *)&v62[4] = 0;
  v63 = 1024;
  v64 = v43;
  v65 = 1024;
  v66 = v44;
  v67 = 1024;
  v68 = v42;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "WMA%zu start 0x%08x_%08x, size %d", v62, 0x1Eu);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_55:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_56;
LABEL_64:
    v48 = a1[344];
    v49 = a1[343];
    v50 = a1[342];
    *(_DWORD *)v62 = 134218752;
    *(_QWORD *)&v62[4] = 2;
    v63 = 1024;
    v64 = v49;
    v65 = 1024;
    v66 = v50;
    v67 = 1024;
    v68 = v48;
    _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "WMA%zu start 0x%08x_%08x, size %d", v62, 0x1Eu);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_57;
    goto LABEL_65;
  }
LABEL_63:
  v45 = a1[341];
  v46 = a1[340];
  v47 = a1[339];
  *(_DWORD *)v62 = 134218752;
  *(_QWORD *)&v62[4] = 1;
  v63 = 1024;
  v64 = v46;
  v65 = 1024;
  v66 = v47;
  v67 = 1024;
  v68 = v45;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "WMA%zu start 0x%08x_%08x, size %d", v62, 0x1Eu);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    goto LABEL_64;
LABEL_56:
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    goto LABEL_57;
LABEL_65:
  v51 = a1[347];
  v52 = a1[346];
  v53 = a1[345];
  *(_DWORD *)v62 = 134218752;
  *(_QWORD *)&v62[4] = 3;
  v63 = 1024;
  v64 = v52;
  v65 = 1024;
  v66 = v53;
  v67 = 1024;
  v68 = v51;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "WMA%zu start 0x%08x_%08x, size %d", v62, 0x1Eu);
LABEL_57:
  v58[0] = *MEMORY[0x24BEDB7F0];
  v34 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v58 + *(_QWORD *)(v58[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v59[0] = v34;
  v59[1] = MEMORY[0x24BEDB848] + 16;
  if (v60 < 0)
    operator delete((void *)v59[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC4774](&v61);
}

void sub_20E7C5640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E78F444((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7C56BC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t sub_20E7C56D4(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, __int16 a5, int a6, int a7)
{
  unsigned int v7;

  if (a2 >= 0x10000)
    sub_20E80B7DC();
  if (a3 >= 0x10000)
    sub_20E80B7B0();
  if (a4 >= 0x10000)
    sub_20E80B784();
  if (a6 < 0)
    sub_20E80B758();
  v7 = *(_DWORD *)result & 0x80000000 | a6;
  *(_WORD *)(result + 14) = a5;
  *(_WORD *)(result + 10) = a3;
  *(_WORD *)(result + 12) = a2;
  *(_WORD *)(result + 8) = a4;
  *(_DWORD *)result = v7;
  *(_DWORD *)(result + 4) = a7;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t CVHWAGetFeatureDetectionSupported_0()
{
  if ((sub_20E7CB218() & 1) != 0
    || (sub_20E7CB30C() & 1) != 0
    || (sub_20E7CB378() & 1) != 0
    || (sub_20E7CB440() & 1) != 0
    || (sub_20E7CB4B8() & 1) != 0
    || (sub_20E7CB530() & 1) != 0
    || sub_20E7CB574()
    || (sub_20E7CB5A4() & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_20E7CB5E8();
  }
}

uint64_t CVHWAGetFeatureMatchingSupported_0()
{
  if ((sub_20E7CB530() & 1) != 0 || sub_20E7CB574() || (sub_20E7CB5A4() & 1) != 0)
    return 1;
  else
    return sub_20E7CB5E8();
}

uint64_t CVHWAGetFeatureDetectionFlowSupported_0(int a1)
{
  if (a1 == 2)
  {
    if ((sub_20E7CB4B8() & 1) != 0 || (sub_20E7CB530() & 1) != 0 || sub_20E7CB574() || (sub_20E7CB5A4() & 1) != 0)
      return 1;
    return sub_20E7CB5E8();
  }
  else
  {
    if (a1 == 1)
    {
      if ((sub_20E7CB218() & 1) == 0
        && (sub_20E7CB30C() & 1) == 0
        && (sub_20E7CB378() & 1) == 0
        && (sub_20E7CB440() & 1) == 0)
      {
        return sub_20E7CB4B8();
      }
      return 1;
    }
    return 0;
  }
}

uint64_t sub_20E7C5844()
{
  if (sub_20E7CB574() || (sub_20E7CB5A4() & 1) != 0)
    return 1;
  else
    return sub_20E7CB5E8();
}

uint64_t sub_20E7C5870(int *a1)
{
  int v2;
  uint64_t result;

  if ((sub_20E7CB218() & 1) != 0)
  {
    v2 = 0;
  }
  else if ((sub_20E7CB30C() & 1) != 0)
  {
    v2 = 1;
  }
  else if ((sub_20E7CB378() & 1) != 0)
  {
    v2 = 2;
  }
  else if ((sub_20E7CB440() & 1) != 0)
  {
    v2 = 3;
  }
  else if ((sub_20E7CB4B8() & 1) != 0)
  {
    v2 = 4;
  }
  else if ((sub_20E7CB530() & 1) != 0)
  {
    v2 = 6;
  }
  else if (sub_20E7CB574())
  {
    v2 = 7;
  }
  else if ((sub_20E7CB5A4() & 1) != 0)
  {
    v2 = 8;
  }
  else
  {
    result = sub_20E7CB5E8();
    if (!(_DWORD)result)
      return result;
    v2 = 9;
  }
  *a1 = v2;
  return 1;
}

double sub_20E7C5920(uint64_t a1, int a2, int a3)
{
  double result;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = 3;
  *(_QWORD *)&result = 0x4000000000;
  *(_QWORD *)(a1 + 36) = 0x4000000000;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = ((a2 + 63) & 0xFFFFFFC0) + 64;
  *(_DWORD *)(a1 + 52) = a3;
  return result;
}

uint64_t sub_20E7C5958(uint64_t a1, int a2, int a3, int a4)
{
  unsigned int v4;

  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 2 * a2;
  *(_DWORD *)(a1 + 8) = a3;
  v4 = (4 * a2 + 63) & 0xFFFFFFC0;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = a4;
  return v4 * a3;
}

uint64_t sub_20E7C5980(uint64_t a1, int a2, int a3, int a4)
{
  unsigned int v4;

  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 2 * a2;
  *(_DWORD *)(a1 + 8) = a3;
  v4 = (2 * a2 + 63) & 0xFFFFFFC0;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = a4;
  return v4 * a3;
}

uint64_t sub_20E7C59A4(uint64_t a1, int a2, int a3, int a4, int a5)
{
  unsigned int v5;

  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 4) = a2;
  *(_DWORD *)(a1 + 8) = a3;
  v5 = ((a2 << (a5 == 4)) + 63) & 0xFFFFFFC0;
  *(_DWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = a4;
  return v5 * a3;
}

uint64_t sub_20E7C59D0(unsigned int a1, int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;

  v3 = (a1 + 63) & 0xFFFFFFC0;
  v4 = (a1 + 65471) / 0xFFC0;
  if (a1 >= 0xFFC1)
    v3 = 65472;
  else
    v4 = 1;
  *(_BYTE *)a3 = 1;
  *(_DWORD *)(a3 + 4) = v3;
  *(_DWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 12) = v3;
  *(_DWORD *)(a3 + 16) = a2;
  return v3 * v4;
}

uint64_t sub_20E7C5A20(unsigned int a1, int a2, int a3, uint64_t a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = (a3 + sqrt((double)a1) - 1) & -a3;
  if (v4 >= 0x10000)
    sub_20E80B834();
  v5 = (a1 + v4 - 1) / v4;
  if (v5 * v4 < a1)
    sub_20E80B808();
  *(_BYTE *)a4 = 1;
  *(_DWORD *)(a4 + 4) = v4;
  *(_DWORD *)(a4 + 8) = v5;
  v6 = (v4 + 63) & 0xFFFFFFC0;
  *(_DWORD *)(a4 + 12) = v6;
  *(_DWORD *)(a4 + 16) = a2;
  return v5 * v6;
}

uint64_t sub_20E7C5A90()
{
  return 0;
}

double sub_20E7C5A98(uint64_t a1, int a2)
{
  double result;

  *(_QWORD *)a1 = &off_24C9A8BF0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_WORD *)(a1 + 28) = 2;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_BYTE *)(a1 + 196) = 0;
  *(_WORD *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_BYTE *)(a1 + 252) = 0;
  *(_WORD *)(a1 + 260) = 0;
  *(_DWORD *)(a1 + 284) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_WORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_BYTE *)(a1 + 308) = 0;
  *(_WORD *)(a1 + 316) = 0;
  *(_DWORD *)(a1 + 340) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_BYTE *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_BYTE *)(a1 + 364) = 0;
  *(_WORD *)(a1 + 372) = 0;
  *(_DWORD *)(a1 + 396) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_BYTE *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 420) = 0;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_WORD *)(a1 + 428) = 0;
  *(_DWORD *)(a1 + 452) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_BYTE *)(a1 + 448) = 0;
  *(_WORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_BYTE *)(a1 + 476) = 0;
  *(_WORD *)(a1 + 484) = 0;
  *(_DWORD *)(a1 + 508) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_BYTE *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 532) = 0;
  *(_OWORD *)(a1 + 516) = 0u;
  *(_WORD *)(a1 + 540) = 0;
  *(_DWORD *)(a1 + 564) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_BYTE *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 572) = 0u;
  *(_BYTE *)(a1 + 588) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 660) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 680) = xmmword_20E80DEC0;
  *(_OWORD *)(a1 + 696) = xmmword_20E80DED0;
  *(_OWORD *)(a1 + 712) = xmmword_20E80DEE0;
  *(_OWORD *)(a1 + 728) = xmmword_20E80DEF0;
  *(_DWORD *)(a1 + 744) = 4;
  *(_WORD *)(a1 + 748) = 5;
  *(_QWORD *)(a1 + 752) = 0xFFFF0000003FLL;
  *(_OWORD *)(a1 + 760) = xmmword_20E80DF00;
  *(_QWORD *)(a1 + 776) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 784) = 511;
  *(_QWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_BYTE *)(a1 + 816) = 29;
  *(_QWORD *)(a1 + 824) = 0;
  if (a2 != 9)
  {
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 48, "0 && \"unsupported platform\"", (void (*)(void *))sub_20E803DA4);
    abort();
  }
  *(_QWORD *)(a1 + 824) = 0x323000000;
  *(_QWORD *)&result = 0x323300000;
  *(_OWORD *)(a1 + 656) = xmmword_20E80EAE0;
  *(_BYTE *)(a1 + 816) = 29;
  return result;
}

void sub_20E7C5CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v11;

  if (*a10)
  {
    *(_QWORD *)(v10 + 800) = *a10;
    MEMORY[0x212BC47C8]();
  }
  sub_20E78A2E4(v11);
  nullsub_13(v10);
  _Unwind_Resume(a1);
}

BOOL sub_20E7C5D2C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned int v5;
  int v6;
  int v7;
  char *v8;
  unint64_t v9;

  if (*(_BYTE *)(a2 + 68) != 2)
    return 0;
  *(_WORD *)(a2 + 50) = sub_20E7E78F8(*(_DWORD *)a2, *(_DWORD *)(a2 + 4));
  result = sub_20E799E38(a1 + 680, a2);
  if (result)
  {
    result = sub_20E7C5E74(a1, a2);
    if (result)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
      v5 = *(unsigned __int16 *)(a2 + 50);
      *(_WORD *)(a1 + 16) = v5;
      v6 = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 24) = v6;
      v7 = *(unsigned __int8 *)(a2 + 68);
      *(_BYTE *)(a1 + 28) = v7;
      sub_20E798BD8(a1 + 32, v5, v7);
      if (*(_BYTE *)(a1 + 28) == 2)
      {
        v8 = *(char **)(a1 + 792);
        v9 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(_QWORD *)(a1 + 800) - (_QWORD)v8) >> 7);
        if (*(char **)(a1 + 800) == v8)
        {
          sub_20E78D69C((char **)(a1 + 792), 1 - v9);
          v8 = *(char **)(a1 + 792);
        }
        else if (v9 >= 2)
        {
          *(_QWORD *)(a1 + 800) = v8 + 6528;
        }
        sub_20E7C62D4(a1 + 680, a2, v8, a1 + 600, a1 + 32);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_20E7C5E74(uint64_t a1, uint64_t a2)
{
  __CVBuffer *v4;
  int Width;
  int Height;
  int BytesPerRow;
  _BOOL8 result;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __CVBuffer *v14;
  _QWORD *v15;
  uint64_t (*v16)(_QWORD, _QWORD);
  void *BaseAddress;
  uint8_t *v18;
  uint64_t v19;
  CVPixelBufferRef pixelBuffer;
  uint8_t buf[4];
  int v22;
  uint8_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a2 + 92))
    return *(_QWORD *)(a2 + 168) == 0;
  if (*(_BYTE *)(a2 + 165) != 1)
  {
    pixelBuffer = 0;
    *(_DWORD *)(a1 + 608) = (unsigned __int16)word_254A40CB4;
    v9 = dword_254A40CC8;
    if (!dword_254A40CC8)
    {
      v11 = 96;
LABEL_24:
      if (v11 < dword_254A412B4)
        sub_20E80B860();
      if (sub_20E805430(v11, 1u, 0x4C303038u, &pixelBuffer, 16, 16, 0, 1, 0))
        return 0;
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      v14 = pixelBuffer;
      v15 = operator new(0x20uLL);
      v16 = MEMORY[0x24BDC53B0];
      *v15 = &off_24C9A86E0;
      v15[1] = v16;
      v15[2] = v14;
      *((_DWORD *)v15 + 6) = 0;
      v23 = (uint8_t *)v15;
      BaseAddress = CVPixelBufferGetBaseAddress(v14);
      memcpy(BaseAddress, &unk_254A40CAC, dword_254A412B4);
      *(_QWORD *)(a1 + 600) = pixelBuffer;
      *(_BYTE *)(a1 + 29) = 1;
      if (!v23)
        sub_20E78D5A0();
      (*(void (**)(uint8_t *))(*(_QWORD *)v23 + 48))(v23);
      v18 = v23;
      if (v23 == buf)
      {
        v19 = 4;
        v18 = buf;
      }
      else
      {
        if (!v23)
          return 1;
        v19 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
      return 1;
    }
    v10 = aText_0;
    v11 = 96;
    while (1)
    {
      if (!strncmp(v10, "ro", 7uLL))
      {
        *(_DWORD *)(a1 + 624) = *(_DWORD *)(v10 - 5);
        v12 = *(unsigned int *)(v10 - 9);
        *(_DWORD *)(a1 + 628) = v12;
        *(_DWORD *)(a1 + 632) = 1;
      }
      else
      {
        if (strncmp(v10, "text", 7uLL))
          goto LABEL_19;
        *(_DWORD *)(a1 + 612) = *(_DWORD *)(v10 - 5);
        *(_DWORD *)(a1 + 616) = 64;
        v13 = *(_DWORD *)(v10 - 9) + 63;
        *(_DWORD *)(a1 + 620) = v13 >> 6;
        v12 = v13 & 0xFFFFFFC0;
      }
      v11 += v12;
LABEL_19:
      v10 += 16;
      if (!--v9)
        goto LABEL_24;
    }
  }
  v4 = *(__CVBuffer **)(a2 + 168);
  if (!v4)
    return 1;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Lacc config and metadata received\n", buf, 2u);
    v4 = *(__CVBuffer **)(a2 + 168);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    Width = CVPixelBufferGetWidth(v4);
    *(_DWORD *)buf = 67109120;
    v22 = Width;
    _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "width = %d", buf, 8u);
    v4 = *(__CVBuffer **)(a2 + 168);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    Height = CVPixelBufferGetHeight(v4);
    *(_DWORD *)buf = 67109120;
    v22 = Height;
    _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "height = %d", buf, 8u);
    v4 = *(__CVBuffer **)(a2 + 168);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    BytesPerRow = CVPixelBufferGetBytesPerRow(v4);
    *(_DWORD *)buf = 67109120;
    v22 = BytesPerRow;
    _os_log_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "stride = %d", buf, 8u);
    v4 = *(__CVBuffer **)(a2 + 168);
  }
  *(_QWORD *)(a1 + 600) = v4;
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 624) = 0x4000000000;
  *(_DWORD *)(a1 + 632) = 64;
  *(_QWORD *)(a1 + 612) = 0x4000001000;
  *(_DWORD *)(a1 + 620) = (*(_DWORD *)(a2 + 180) + 63) >> 6;
  result = 1;
  *(_BYTE *)(a1 + 29) = 1;
  return result;
}

void sub_20E7C62A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E78AB68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E7C62B8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E785844(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20E7C62D4(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  int v10;
  double result;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  bzero(a3, 0x1980uLL);
  *(_DWORD *)(a4 + 72) = (*(_QWORD *)a4 != 0) << 12;
  v10 = *(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16);
  sub_20E7C83B4(a1, a2, a3 + 64, a4, a5);
  v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFFC | (v10 != 0);
  *((_DWORD *)a3 + 1) = v12;
  if (v10)
  {
    *(_BYTE *)(a5 + 472) = 1;
    *(_DWORD *)(a5 + 476) = 0;
    if (sub_20E7C59A4(a5 + 452, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(_DWORD *)(a4 + 12), 8) != v10)
      sub_20E8065B4();
    v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFF3 | 4;
    *((_DWORD *)a3 + 1) = v12;
    *((_QWORD *)a3 + 797) = *(_QWORD *)(a4 + 56);
    *((_DWORD *)a3 + 1596) = v10;
  }
  v13 = *(_DWORD *)(a4 + 28);
  v14 = *(_DWORD *)(a4 + 32);
  v15 = v14 * v13;
  if (v14 * v13)
  {
    *(_BYTE *)(a5 + 500) = 1;
    *(_DWORD *)(a5 + 504) = 0;
    if (sub_20E7C59A4(a5 + 480, v13, v14, *(_DWORD *)(a4 + 24), 8) != v15)
      sub_20E806588();
    v12 = *((_DWORD *)a3 + 1) & 0xFFFFFFCF | 0x10;
    *((_DWORD *)a3 + 1) = v12;
    *(_QWORD *)(a3 + 6388) = *(_QWORD *)(a4 + 64);
    *((_DWORD *)a3 + 1599) = v15;
  }
  v16 = *(_DWORD *)(a4 + 40);
  v17 = *(_DWORD *)(a4 + 44);
  v18 = v17 * v16;
  if (v17 * v16)
  {
    *(_BYTE *)(a5 + 528) = 1;
    *(_DWORD *)(a5 + 532) = *(_DWORD *)(a4 + 72);
    if (sub_20E7C59A4(a5 + 508, v16, v17, *(_DWORD *)(a4 + 36), 8) != v18)
      sub_20E80655C();
    *(_DWORD *)(a4 + 72) += v18;
    v19 = *(_QWORD *)(a4 + 64) + *(unsigned int *)(a5 + 532);
    v12 = *((_DWORD *)a3 + 1) & 0xFFFFFF3F | 0x40;
    *((_DWORD *)a3 + 1) = v12;
    *((_QWORD *)a3 + 800) = v19;
    *((_DWORD *)a3 + 1602) = v18;
  }
  if (*(_BYTE *)(a5 + 360))
  {
    v20 = *(_QWORD *)(a4 + 64) + *(unsigned int *)(a5 + 364);
    v12 = v12 & 0xFFFFF3FF | 0x400;
    *((_DWORD *)a3 + 1) = v12;
    *((_QWORD *)a3 + 803) = v20;
    *((_DWORD *)a3 + 1608) = *(_DWORD *)(a5 + 348) * *(_DWORD *)(a5 + 352);
  }
  if (*(_BYTE *)(a5 + 388))
  {
    v21 = *(_QWORD *)(a4 + 64) + *(unsigned int *)(a5 + 392);
    *((_DWORD *)a3 + 1) = v12 & 0xFFFFCFFF | 0x1000;
    *(_QWORD *)(a3 + 6436) = v21;
    *((_DWORD *)a3 + 1611) = *(_DWORD *)(a5 + 376) * *(_DWORD *)(a5 + 380);
  }
  if (v10)
  {
    *((_DWORD *)a3 + 1334) = *(_DWORD *)(a4 + 8);
    *((_DWORD *)a3 + 1335) = 0x80000000;
    *((_QWORD *)a3 + 668) = 0;
    *(_QWORD *)&result = 0x600000006;
    *((_QWORD *)a3 + 651) = 0x600000006;
    *((_DWORD *)a3 + 1295) = 0x80000;
  }
  return result;
}

uint64_t sub_20E7C6530()
{
  return 3776;
}

uint64_t sub_20E7C6538()
{
  return 6528;
}

uint64_t sub_20E7C6540()
{
  return 1664;
}

double sub_20E7C6548(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _DWORD *v6;
  unsigned int v7;
  int v8;
  double result;

  v6 = *(_DWORD **)(a1 + 792);
  v7 = *(unsigned __int16 *)(a1 + 16);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  *(_QWORD *)&result = sub_20E7C65A8(v6, v7, v8, a2, a3, (_QWORD *)(a1 + 32)).n128_u64[0];
  return result;
}

__n128 sub_20E7C65A8(_DWORD *a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, _QWORD *a6)
{
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  __n128 result;
  uint64_t v27;

  if (a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v27 = a2;
    do
    {
      v13 = 3 << (v10 & 0xFE);
      if ((v13 & a1[101]) != 0)
      {
        v14 = *a6 + v9;
        v15 = sub_20E7E7940(a4, v12);
        v16 = sub_20E7E7940(a5, v12);
        v11 += sub_20E7C5980(v14, v15, v16, v11);
      }
      if ((v13 & a1[102]) != 0)
      {
        v17 = a6[9] + v9;
        v18 = sub_20E7E7940(a4, v12);
        v19 = sub_20E7E7940(a5, v12);
        v11 += sub_20E7C5958(v17, v18, v19, v11);
      }
      ++v12;
      v10 += 2;
      v9 += 28;
    }
    while (v27 != v12);
  }
  else
  {
    v11 = 0;
  }
  if (a1[545])
  {
    v20 = a6;
    v11 += sub_20E7C5A20(0x186A00u, v11, 64, (uint64_t)(a6 + 32));
    if (!a1[103])
      goto LABEL_12;
    goto LABEL_11;
  }
  v20 = a6;
  if (a1[103])
LABEL_11:
    v11 += sub_20E7C5A20(8 * a1[486], v11, 64, (uint64_t)v20 + 284);
LABEL_12:
  v21 = (((unint64_t)a1[544] >> 2) & 3) - 1;
  if (v21 <= 2)
  {
    v22 = dword_20E80EB50[v21];
    v23 = sub_20E7C59D0(a1[486] * v22, v11, (uint64_t)v20 + 172) + v11;
    v11 = sub_20E7C59D0(a1[486] * v22, v23, (uint64_t)(v20 + 18)) + v23;
  }
  v24 = sub_20E7C59A4(v20[15], (a3 + 63) & 0xFFFFFFC0, 1, v11, 8) + v11;
  if (*((_BYTE *)v20 + 340))
  {
    *((_DWORD *)v20 + 89) = v24;
    v24 += *((_DWORD *)v20 + 87) * *((_DWORD *)v20 + 88);
  }
  if (*((_BYTE *)v20 + 368))
  {
    *((_DWORD *)v20 + 96) = v24;
    v20[41] = *(_QWORD *)((char *)v20 + 356);
    result = *(__n128 *)((char *)v20 + 340);
    *(__n128 *)(v20 + 39) = result;
    *((_BYTE *)v20 + 332) = 0;
    *((_DWORD *)v20 + 84) = 0;
  }
  return result;
}

uint64_t sub_20E7C6800(uint64_t a1, int a2)
{
  return ((8 * a2 + 63) & 0xFFFFFFC0) + ((4 * a2 + 63) & 0xFFFFFFC0) + 576;
}

void *sub_20E7C6824(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  const void *v4;
  int v5;

  if (a4 != 8)
    sub_20E80B88C();
  if (a3 || (v4 = *(const void **)(a1 + 792), *(_QWORD *)(a1 + 800) - (_QWORD)v4 != 6528))
    sub_20E806664();
  v5 = *(unsigned __int8 *)(a1 + 816);
  *a2 = -1;
  a2[1] = v5;
  a2[3] = 6528;
  return memcpy(a2 + 4, v4, 0x1980uLL);
}

uint64_t sub_20E7C687C(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7)
{
  size_t v13;

  if (a7)
    sub_20E80B8B8();
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  return sub_20E78AF94(a2, v13, a3, a4, a5, a6, *(_DWORD *)(a1 + 24), (unsigned int *)(a1 + 32));
}

__n128 sub_20E7C68F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint16x4_t *v14;
  uint32x4_t *v15;
  uint32x4_t v16;
  uint32x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  __int128 v25;
  __int128 v26;
  __n128 result;
  __int128 v28;

  v3 = 0;
  *(_QWORD *)(a3 + 92) = *(uint64_t *)((char *)a2 + 100);
  v4 = *a2;
  *(_WORD *)(a3 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)a3 = v4;
  v5 = *(uint64_t *)((char *)a2 + 10);
  *(_WORD *)(a3 + 18) = *((_WORD *)a2 + 9);
  *(_QWORD *)(a3 + 10) = v5;
  v6 = *(uint64_t *)((char *)a2 + 20);
  *(_WORD *)(a3 + 28) = *((_WORD *)a2 + 14);
  *(_QWORD *)(a3 + 20) = v6;
  v7 = *(uint64_t *)((char *)a2 + 30);
  *(_WORD *)(a3 + 38) = *((_WORD *)a2 + 19);
  *(_QWORD *)(a3 + 30) = v7;
  v8 = a2[5];
  *(_WORD *)(a3 + 48) = *((_WORD *)a2 + 24);
  *(_QWORD *)(a3 + 40) = v8;
  v9 = *(_OWORD *)((char *)a2 + 52);
  v10 = *(_OWORD *)((char *)a2 + 68);
  *(_QWORD *)(a3 + 84) = *(uint64_t *)((char *)a2 + 84);
  *(_OWORD *)(a3 + 68) = v10;
  *(_OWORD *)(a3 + 52) = v9;
  v11 = *(_OWORD *)((char *)a2 + 126);
  *(_WORD *)(a3 + 124) = *((_WORD *)a2 + 71);
  *(_OWORD *)(a3 + 108) = v11;
  v12 = *(_OWORD *)((char *)a2 + 108);
  *(_WORD *)(a3 + 142) = *((_WORD *)a2 + 62);
  *(_OWORD *)(a3 + 126) = v12;
  v13 = *((_OWORD *)a2 + 82);
  *(_OWORD *)(a3 + 144) = *((_OWORD *)a2 + 81);
  *(_OWORD *)(a3 + 160) = v13;
  v14 = (uint16x4_t *)(a2 + 49);
  do
  {
    v15 = *(uint32x4_t **)(a3 + 240 + v3);
    v16 = vmovl_u16(v14[-14]);
    *v15 = vmovl_u16(v14[-15]);
    v15[1] = v16;
    v17 = vmovl_u16(v14[-12]);
    v15[2] = vmovl_u16(v14[-13]);
    v15[3] = v17;
    v18 = vmovl_u16(v14[-10]);
    v15[4] = vmovl_u16(v14[-11]);
    v15[5] = v18;
    v19 = vmovl_u16(v14[-8]);
    v15[6] = vmovl_u16(v14[-9]);
    v15[7] = v19;
    v20 = vmovl_u16(v14[-6]);
    v15[8] = vmovl_u16(v14[-7]);
    v15[9] = v20;
    v21 = vmovl_u16(v14[-4]);
    v15[10] = vmovl_u16(v14[-5]);
    v15[11] = v21;
    v22 = vmovl_u16(v14[-2]);
    v15[12] = vmovl_u16(v14[-3]);
    v15[13] = v22;
    v23 = vmovl_u16(v14[-1]);
    v24 = vmovl_u16(*v14);
    v3 += 24;
    v14 += 16;
    v15[14] = v23;
    v15[15] = v24;
  }
  while (v3 != 192);
  *(_WORD *)(a3 + 176) = *((_WORD *)a2 + 664);
  *(_DWORD *)(a3 + 436) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a3 + 180) = *((_OWORD *)a2 + 100);
  *(_OWORD *)(a3 + 196) = *((_OWORD *)a2 + 101);
  *(_OWORD *)(a3 + 212) = *((_OWORD *)a2 + 102);
  *(_QWORD *)(a3 + 228) = a2[206];
  *(_DWORD *)(a3 + 236) = *((_DWORD *)a2 + 414);
  *(_DWORD *)(a3 + 432) = *((_DWORD *)a2 + 866);
  *(_DWORD *)(a3 + 440) = *((_DWORD *)a2 + 23);
  v25 = *(_OWORD *)((char *)a2 + 1660);
  v26 = *(_OWORD *)((char *)a2 + 1676);
  *(_DWORD *)(a3 + 512) = *((_DWORD *)a2 + 423);
  *(_OWORD *)(a3 + 480) = v25;
  *(_OWORD *)(a3 + 496) = v26;
  result = *((__n128 *)a2 + 106);
  v28 = *((_OWORD *)a2 + 107);
  *(_DWORD *)(a3 + 548) = *((_DWORD *)a2 + 432);
  *(__n128 *)(a3 + 516) = result;
  *(_OWORD *)(a3 + 532) = v28;
  return result;
}

uint64_t sub_20E7C6AA4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t result;
  int v4;

  switch(a2)
  {
    case 0:
      result = *(_QWORD *)(a1 + 32) + 28 * a3;
      break;
    case 1:
      if (*(_BYTE *)(a1 + 28) != 1)
        sub_20E80B910();
      result = *(_QWORD *)(a1 + 56) + 28 * a3;
      break;
    case 2:
      if (*(_BYTE *)(a1 + 28) != 1)
        sub_20E80B93C();
      result = *(_QWORD *)(a1 + 80) + 28 * a3;
      break;
    case 3:
      result = *(_QWORD *)(a1 + 104) + 28 * a3;
      break;
    case 4:
      if (*(_BYTE *)(a1 + 28) != 1)
        sub_20E80B968();
      result = *(_QWORD *)(a1 + 128) + 28 * a3;
      break;
    case 5:
      v4 = *(unsigned __int8 *)(a1 + 28);
      if (v4 != 1 && (a3 || v4 != 2))
        sub_20E80B994();
      result = *(_QWORD *)(a1 + 152) + 28 * a3;
      break;
    case 6:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E80B9EC();
      if (a3)
        sub_20E80B9C0();
      result = a1 + 176;
      break;
    case 7:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E80BA44();
      if (a3)
        sub_20E80BA18();
      result = a1 + 204;
      break;
    case 8:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E80BA9C();
      if (a3)
        sub_20E80BA70();
      result = a1 + 232;
      break;
    case 9:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E80BAF4();
      if (a3)
        sub_20E80BAC8();
      result = a1 + 260;
      break;
    case 10:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E80BB4C();
      if (a3)
        sub_20E80BB20();
      result = a1 + 288;
      break;
    case 11:
      if (*(_BYTE *)(a1 + 28) != 2)
        sub_20E80BBA4();
      if (a3)
        sub_20E80BB78();
      result = a1 + 316;
      break;
    case 12:
      if (a3)
        sub_20E80BBD0();
      result = a1 + 372;
      break;
    case 13:
      if (a3)
        sub_20E80BBFC();
      result = a1 + 400;
      break;
    default:
      sub_20E80B8E4();
  }
  return result;
}

uint64_t sub_20E7C6C98(uint64_t result, int32x4_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int16x8_t *v6;
  int32x4_t *v7;
  unint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint64_t v11;
  __int16 *v12;
  __int16 *v13;
  __int16 v14;

  if (*(_BYTE *)(result + 28) != 2)
    sub_20E80BC28();
  v2 = *(unsigned __int16 *)(result + 16);
  v3 = 2 * v2 - 2;
  if (2 * (_DWORD)v2 != 2)
  {
    v4 = *(_QWORD *)(result + 792);
    if (v3 < 0x10)
    {
      v5 = 0;
LABEL_8:
      v11 = v5 - 2 * v2 + 2;
      v12 = (__int16 *)(v4 + 2 * v5 + 2354);
      v13 = &a2->i16[4 * v5];
      do
      {
        v14 = *v13;
        v13 += 4;
        v12[9] = v14;
        *v12++ = v14;
      }
      while (!__CFADD__(v11++, 1));
      return result;
    }
    v5 = v3 & 0xFFFFFFFFFFFFFFF0;
    v6 = (int16x8_t *)(v4 + 2388);
    v7 = a2 + 4;
    v8 = v3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v9 = vuzp1q_s16((int16x8_t)vuzp1q_s32(v7[-4], v7[-3]), (int16x8_t)vuzp1q_s32(v7[-2], v7[-1]));
      v10 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v7, v7[1]), (int16x8_t)vuzp1q_s32(v7[2], v7[3]));
      v6[-1] = v9;
      *v6 = v10;
      *(int16x8_t *)((char *)v6 - 34) = v9;
      *(int16x8_t *)((char *)v6 - 18) = v10;
      v6 += 2;
      v7 += 8;
      v8 -= 16;
    }
    while (v8);
    if (v5 != v3)
      goto LABEL_8;
  }
  return result;
}

void sub_20E7C6D60()
{
  sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/HWFeatureDetection/src/HwTahiti-D93.cpp", 430, "0 && \"Update config not supported\"", (void (*)(void *))sub_20E803DA4);
  abort();
}

__n128 sub_20E7C6D8C@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  __n128 v4;
  __n128 v5;
  uint64_t v6;
  __n128 result;

  v2 = (_QWORD *)(*(_QWORD *)(a1 + 792) + 2188);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 792) + 2196);
  v4.n128_u64[0] = *v2;
  v4.n128_u64[1] = HIDWORD(*v2);
  v5 = v4;
  v4.n128_u64[0] = v3;
  v4.n128_u64[1] = HIDWORD(v3);
  *a2 = v5;
  a2[1] = v4;
  v5.n128_u64[0] = v2[2];
  v6 = v2[3];
  v4.n128_u64[0] = v5.n128_u32[0];
  v4.n128_u64[1] = v5.n128_u32[1];
  result = v4;
  v4.n128_u64[0] = v6;
  v4.n128_u64[1] = HIDWORD(v6);
  a2[2] = result;
  a2[3] = v4;
  return result;
}

uint64_t sub_20E7C6DB8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 600);
}

uint64_t sub_20E7C6DC0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 29);
}

uint64_t sub_20E7C6DC8(uint64_t result, int a2)
{
  if (*(_BYTE *)(result + 28) != 2)
    sub_20E80BC54();
  *(_DWORD *)(*(_QWORD *)(result + 792) + 3908) = a2;
  return result;
}

void sub_20E7C6DF0(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
}

double sub_20E7C6DFC(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  double result;

  v3 = *a2;
  *(_DWORD *)(a3 + 8) = 2;
  *(_DWORD *)(a3 + 12) = v3;
  if (*a2 == 1)
  {
    v6 = 0x20000;
    v4 = 0x80000;
    v5 = 0x200000;
    goto LABEL_5;
  }
  if (*a2 == 2)
  {
    v4 = 98304;
    v5 = 0x400000;
    v6 = 98304;
LABEL_5:
    *(_QWORD *)&result = v4 | 0x10000000000000;
    *(_QWORD *)a3 = *(_QWORD *)(a1 + 824) + v5;
    *(_DWORD *)(a3 + 16) = 0;
    *(double *)(a3 + 20) = result;
    *(_DWORD *)(a3 + 28) = v6;
    return result;
  }
  result = 0.0;
  *(_QWORD *)a3 = -1;
  *(_DWORD *)(a3 + 16) = -1;
  *(_QWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 28) = 0;
  return result;
}

double sub_20E7C6E84(uint64_t a1, uint64_t a2)
{
  double result;

  if (!a2)
    sub_20E806AB0();
  *(_OWORD *)a2 = xmmword_20E80EAF0;
  *(_QWORD *)&result = 0x198000000000;
  *(_QWORD *)(a2 + 16) = 0x198000000000;
  return result;
}

double sub_20E7C6EB4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  return sub_20E7C6ED0(a2 + *(unsigned int *)(a2 + 4) + 16, a3, 1, 1);
}

double sub_20E7C6ED0(uint64_t a1, unsigned __int8 *a2, int a3, char a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  double result;
  int v18;

  if ((sub_20E7CB5E8() & 1) == 0)
    sub_20E80BC80();
  if (!a3 || (a4 & 1) == 0)
    sub_20E806B60();
  v8 = *a2;
  if (v8 >= 4)
    sub_20E806B34();
  v9 = *(_DWORD *)(a1 + 4) & 0xFFFFFFFC | v8;
  *(_DWORD *)(a1 + 4) = v9;
  *(_DWORD *)(a1 + 64) &= ~1u;
  *(_QWORD *)(a1 + 128) |= 1uLL;
  *(_DWORD *)(a1 + 3840) |= 1u;
  v10 = a2[2];
  if (v10 >= 3)
    goto LABEL_32;
  if (a2[6] >= 3u)
    goto LABEL_33;
  v11 = a2[3];
  if (v11 > 2)
    goto LABEL_32;
  if (a2[7] > 2u)
    goto LABEL_33;
  if (a2[4] > 2u)
    goto LABEL_32;
  if (a2[8] > 2u)
    goto LABEL_33;
  if (a2[5] > 2u)
LABEL_32:
    sub_20E806B08();
  if (a2[9] > 2u)
LABEL_33:
    sub_20E806ADC();
  if (a2[2])
  {
    v9 = v9 & 0xFFFFFFF3 | (4 * (v10 & 3));
    *(_DWORD *)(a1 + 4) = v9;
    *(_QWORD *)(a1 + 6376) = *((_QWORD *)a2 + 162);
    *(_DWORD *)(a1 + 6384) = *((_DWORD *)a2 + 326);
    v11 = a2[3];
  }
  if (v11)
  {
    v9 = v9 & 0xFFFFFFCF | (16 * (v11 & 3));
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 6388) = *((_DWORD *)a2 + 327);
    *(_QWORD *)(a1 + 6392) = *((_QWORD *)a2 + 164);
  }
  if (a2[4])
  {
    v9 = v9 & 0xFFFFFF3F | ((a2[4] & 3) << 6);
    *(_DWORD *)(a1 + 4) = v9;
    *(_QWORD *)(a1 + 6400) = *((_QWORD *)a2 + 165);
    *(_DWORD *)(a1 + 6408) = *((_DWORD *)a2 + 332);
  }
  if (a2[5])
  {
    v9 = v9 & 0xFFFFFCFF | ((a2[5] & 3) << 8);
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 6412) = *((_DWORD *)a2 + 333);
    *(_QWORD *)(a1 + 6416) = *((_QWORD *)a2 + 167);
  }
  if (a2[6])
  {
    v9 = v9 & 0xFFFFF3FF | ((a2[6] & 3) << 10);
    *(_DWORD *)(a1 + 4) = v9;
    *(_QWORD *)(a1 + 6424) = *((_QWORD *)a2 + 168);
    *(_DWORD *)(a1 + 6432) = *((_DWORD *)a2 + 338);
  }
  if (a2[7])
  {
    v9 = v9 & 0xFFFFCFFF | ((a2[7] & 3) << 12);
    *(_DWORD *)(a1 + 4) = v9;
    *(_DWORD *)(a1 + 6436) = *((_DWORD *)a2 + 339);
    *(_QWORD *)(a1 + 6440) = *((_QWORD *)a2 + 170);
  }
  if (a2[8])
  {
    v9 = v9 & 0xFFFF3FFF | ((a2[8] & 3) << 14);
    *(_DWORD *)(a1 + 4) = v9;
    *(_QWORD *)(a1 + 6448) = *((_QWORD *)a2 + 171);
    *(_DWORD *)(a1 + 6456) = *((_DWORD *)a2 + 344);
  }
  if (a2[9])
  {
    *(_DWORD *)(a1 + 4) = v9 & 0xFFFCFFFF | ((a2[9] & 3) << 16);
    *(_DWORD *)(a1 + 6460) = *((_DWORD *)a2 + 345);
    *(_QWORD *)(a1 + 6464) = *((_QWORD *)a2 + 173);
  }
  v12 = 0;
  v13 = a2 + 144;
  v14 = a1 + 4032;
  v15 = -128;
  do
  {
    *(_DWORD *)(v14 + v15 + 1152) = *(_DWORD *)&v13[v15 - 4];
    v16 = (_DWORD *)(v14 + v12);
    *v16 = *(_DWORD *)&v13[v12];
    v16[1] = *(_DWORD *)&v13[v12 + 4];
    v16[2] = *(_DWORD *)&v13[v12 + 8];
    v16[3] = *(_DWORD *)&v13[v12 + 12];
    v16[4] = *(_DWORD *)&v13[v12 + 16];
    v16[5] = *(_DWORD *)&v13[v12 + 20];
    v16[6] = *(_DWORD *)&v13[v12 + 24];
    v16[7] = *(_DWORD *)&v13[v12 + 28];
    v12 += 32;
    v15 += 4;
  }
  while (v15);
  *(_DWORD *)(a1 + 5200) = *((_DWORD *)a2 + 292);
  *(_DWORD *)(a1 + 5340) = *((_DWORD *)a2 + 293);
  *(_DWORD *)(a1 + 5344) = *((_DWORD *)a2 + 294);
  *(_DWORD *)(a1 + 5348) = *((_DWORD *)a2 + 295);
  *(_DWORD *)(a1 + 5204) = a2[1184];
  result = *(double *)(a2 + 1188);
  *(double *)(a1 + 5208) = result;
  *(_DWORD *)(a1 + 5216) = a2[1196];
  *(_DWORD *)(a1 + 5220) = *((_DWORD *)a2 + 300);
  *(_DWORD *)(a1 + 5236) = a2[1216];
  *(_DWORD *)(a1 + 5252) = *((_DWORD *)a2 + 306);
  *(_DWORD *)(a1 + 5268) = *((_DWORD *)a2 + 310);
  *(_DWORD *)(a1 + 5284) = a2[1256];
  *(_DWORD *)(a1 + 5300) = *((_DWORD *)a2 + 316);
  *(_DWORD *)(a1 + 5224) = *((_DWORD *)a2 + 301);
  *(_DWORD *)(a1 + 5240) = a2[1217];
  *(_DWORD *)(a1 + 5256) = *((_DWORD *)a2 + 307);
  *(_DWORD *)(a1 + 5272) = *((_DWORD *)a2 + 311);
  *(_DWORD *)(a1 + 5288) = a2[1257];
  *(_DWORD *)(a1 + 5304) = *((_DWORD *)a2 + 317);
  *(_DWORD *)(a1 + 5228) = *((_DWORD *)a2 + 302);
  *(_DWORD *)(a1 + 5244) = a2[1218];
  *(_DWORD *)(a1 + 5260) = *((_DWORD *)a2 + 308);
  *(_DWORD *)(a1 + 5276) = *((_DWORD *)a2 + 312);
  *(_DWORD *)(a1 + 5292) = a2[1258];
  *(_DWORD *)(a1 + 5308) = *((_DWORD *)a2 + 318);
  *(_DWORD *)(a1 + 5232) = *((_DWORD *)a2 + 303);
  *(_DWORD *)(a1 + 5248) = a2[1219];
  *(_DWORD *)(a1 + 5264) = *((_DWORD *)a2 + 309);
  *(_DWORD *)(a1 + 5280) = *((_DWORD *)a2 + 313);
  *(_DWORD *)(a1 + 5296) = a2[1259];
  v18 = *((_DWORD *)a2 + 323);
  *(_DWORD *)(a1 + 5316) = *((_DWORD *)a2 + 320);
  *(_DWORD *)(a1 + 5320) = a2[1284];
  *(_DWORD *)(a1 + 5324) = a2[1286];
  *(_DWORD *)(a1 + 5328) = a2[1287];
  *(_DWORD *)(a1 + 5332) = a2[1288];
  *(_DWORD *)(a1 + 5336) = v18;
  return result;
}

double sub_20E7C7258(uint64_t a1, uint64_t a2)
{
  double result;

  if (!a2)
    sub_20E806BB8();
  *(_OWORD *)a2 = xmmword_20E80DF40;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)&result = 0x100000012;
  *(_QWORD *)(a2 + 152) = 0x100000012;
  *(_DWORD *)(a2 + 160) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 244) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 328) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 412) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 496) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 580) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 664) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 748) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 832) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 916) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1000) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1084) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1168) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1252) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1336) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1420) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1504) |= 0x7FFFFFFFu;
  *(_DWORD *)(a2 + 1588) |= 0x7FFFFFFFu;
  return result;
}

void sub_20E7C7364(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = a2 + *(unsigned int *)(a2 + 4);
  if (*(unsigned __int8 *)(v4 + 144) <= *(unsigned __int8 *)(a3 + 2))
    sub_20E806BE4();
  if (*(_BYTE *)a3)
  {
    v5 = v4 + 84 * *(unsigned __int8 *)(a3 + 2);
    *(_DWORD *)(v5 + 152) = *(_DWORD *)(v5 + 152) & 0x80000000 | a4 & 0x7FFFFFFF;
    *(_WORD *)(v5 + 166) = *(_WORD *)(a3 + 4);
    v6 = *(_DWORD *)(a3 + 24);
    *(_WORD *)(v5 + 164) = *(_DWORD *)(a3 + 20);
    *(_WORD *)(v5 + 162) = v6;
    v7 = *(_DWORD *)(a3 + 32);
    *(_WORD *)(v5 + 160) = *(_DWORD *)(a3 + 28);
    *(_DWORD *)(v5 + 156) = v7;
  }
}

uint64_t sub_20E7C73CC(uint64_t a1, _OWORD *a2, unint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[8];

  v3 = a2[201];
  v8[4] = a2[200];
  v8[5] = v3;
  v4 = a2[203];
  v8[6] = a2[202];
  v8[7] = v4;
  v5 = a2[197];
  v8[0] = a2[196];
  v8[1] = v5;
  v6 = a2[199];
  v8[2] = a2[198];
  v8[3] = v6;
  if (a3 >= 0x20)
    sub_20E806C10();
  return *((unsigned int *)v8 + a3);
}

uint64_t sub_20E7C7434(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v5;
  int v6;
  uint64_t result;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  if (!a4)
    sub_20E806D9C();
  *a5 = 0;
  if (a3 <= 0x7F)
  {
    v5 = *(_DWORD *)((char *)a2 + (a3 & 0xFFFFFFFFFFFFFFFCLL) + 3136);
LABEL_7:
    *(_DWORD *)a4 = v5;
    *a5 = 4;
    return 1;
  }
  if (a3 == 2004)
  {
    *a5 = 4;
    v6 = a2[834];
LABEL_11:
    *(_DWORD *)a4 = v6;
    return 1;
  }
  if (a3 == 2000)
  {
    v5 = a2[835];
    goto LABEL_7;
  }
  if (a3 - 2008 <= 0xB)
  {
    *a5 = 4;
    v6 = *(_DWORD *)((char *)a2 + (((_DWORD)a3 + 1336) & 0xFFFFFFFC));
    goto LABEL_11;
  }
  if (a3 - 6000 <= 0x3FF)
  {
    *a5 = 32;
    v8 = (_OWORD *)((char *)a2 + ((a3 - 6000) & 0xFFFFFFFFFFFFFFE0) + ((8 * (_DWORD)a3 - 13952) & 0xFFFFFFE0));
    v9 = v8[1];
    *(_OWORD *)a4 = *v8;
    *(_OWORD *)(a4 + 16) = v9;
    return 1;
  }
  result = 0;
  *((_QWORD *)&v10 + 1) = a3;
  *(_QWORD *)&v10 = a3 - 10000;
  switch((unint64_t)(v10 >> 2))
  {
    case 0uLL:
      *a5 = 4;
      v6 = a2[848];
      goto LABEL_11;
    case 1uLL:
      *a5 = 4;
      v6 = a2[850];
      goto LABEL_11;
    case 2uLL:
      *a5 = 4;
      v6 = a2[854];
      goto LABEL_11;
    case 5uLL:
      *a5 = 4;
      v6 = a2[857];
      goto LABEL_11;
    case 7uLL:
      *a5 = 4;
      v6 = a2[856];
      goto LABEL_11;
    case 0xDuLL:
      *a5 = 4;
      v6 = a2[846];
      goto LABEL_11;
    case 0xEuLL:
      *a5 = 4;
      v6 = a2[847];
      goto LABEL_11;
    case 0xFuLL:
      *a5 = 4;
      v6 = a2[849];
      goto LABEL_11;
    case 0x10uLL:
      *a5 = 4;
      v6 = a2[851];
      goto LABEL_11;
    case 0x11uLL:
      *a5 = 4;
      v6 = a2[852];
      goto LABEL_11;
    case 0x12uLL:
      *a5 = 4;
      v6 = a2[853];
      goto LABEL_11;
    case 0x13uLL:
      *a5 = 4;
      v6 = a2[855];
      goto LABEL_11;
    case 0x14uLL:
      *a5 = 4;
      v6 = a2[858];
      goto LABEL_11;
    case 0x15uLL:
      *a5 = 4;
      v6 = a2[859];
      goto LABEL_11;
    default:
      return result;
  }
  return result;
}

uint64_t sub_20E7C7610(uint64_t a1, _DWORD *a2)
{
  return sub_20E7C7618(a2);
}

uint64_t sub_20E7C7618(_DWORD *a1)
{
  uint64_t v1;
  _DWORD *v2;
  char *v3;
  const std::locale::facet *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  void *v44;
  char v45;
  _QWORD v46[2];
  _QWORD v47[11];
  char v48;
  uint64_t v49;
  std::locale v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  uint8_t buf[4];
  _QWORD v58[5];

  *(_QWORD *)((char *)&v58[2] + 4) = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807678();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80760C();
  sub_20E78F30C((uint64_t)v46, 16);
  v1 = 0;
  v2 = a1 + 535;
  do
  {
    v3 = (char *)v46 + *(_QWORD *)(v46[0] - 24);
    if (*((_DWORD *)v3 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(v46[0] - 24)));
      v4 = std::locale::use_facet(&v50, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
      std::locale::~locale(&v50);
    }
    *((_DWORD *)v3 + 36) = 48;
    sub_20E78F4CC(v47, (uint64_t)"GRF ", 4);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = sub_20E78F4CC(v5, (uint64_t)" = 0x", 5);
    v7 = *v6;
    *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 24) = 8;
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = sub_20E78F4CC(v8, (uint64_t)"\t\t", 2);
    *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 2;
    v10 = (_QWORD *)std::ostream::operator<<();
    sub_20E78F4CC(v10, (uint64_t)" = (", 4);
    v11 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v12 = *v11;
    *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v11 + *(_QWORD *)(v12 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v13 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v14 = *v13;
    *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v13 + *(_QWORD *)(v14 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v15 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v16 = *v15;
    *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v15 + *(_QWORD *)(v16 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v17 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v18 = *v17;
    *(_DWORD *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v17 + *(_QWORD *)(v18 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v19 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v20 = *v19;
    *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v19 + *(_QWORD *)(v20 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v21 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v22 = *v21;
    *(_DWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 8) = *(_DWORD *)((_BYTE *)v21 + *(_QWORD *)(*v21 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v21 + *(_QWORD *)(v22 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v23 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v24 = *v23;
    *(_DWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(*v23 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v23 + *(_QWORD *)(v24 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)", ", 2);
    v25 = sub_20E78F4CC(v47, (uint64_t)"0x", 2);
    v26 = *v25;
    *(_DWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 8) = *(_DWORD *)((_BYTE *)v25 + *(_QWORD *)(*v25 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(uint64_t *)((char *)v25 + *(_QWORD *)(v26 - 24) + 24) = 8;
    std::ostream::operator<<();
    sub_20E78F4CC(v47, (uint64_t)")", 1);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str();
      sub_20E807594(&v45, &v44, buf, v58);
    }
    BYTE1(v56) = 0;
    LOBYTE(v50.__locale_) = 0;
    std::stringbuf::str();
    if (SBYTE1(v56) < 0)
      operator delete(v50.__locale_);
    ++v1;
    v2 += 8;
  }
  while (v1 != 32);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v29 = a1[816];
    v30 = a1[823];
    v50.__locale_ = (std::locale::__imp *)67109888;
    v51 = 1024;
    v52 = v29;
    v53 = 1024;
    v54 = 0;
    v55 = 1024;
    v56 = v30;
    _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      goto LABEL_61;
    }
  }
  else if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    goto LABEL_15;
  }
  v31 = a1[817];
  v32 = a1[824];
  v50.__locale_ = (std::locale::__imp *)0x104000400;
  v51 = 1024;
  v52 = v31;
  v53 = 1024;
  v54 = 1;
  v55 = 1024;
  v56 = v32;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_16:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_17;
    goto LABEL_62;
  }
LABEL_61:
  v33 = a1[818];
  v34 = a1[825];
  v50.__locale_ = (std::locale::__imp *)0x204000400;
  v51 = 1024;
  v52 = v33;
  v53 = 1024;
  v54 = 2;
  v55 = 1024;
  v56 = v34;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    goto LABEL_63;
  }
LABEL_62:
  v35 = a1[819];
  v36 = a1[826];
  v50.__locale_ = (std::locale::__imp *)0x304000400;
  v51 = 1024;
  v52 = v35;
  v53 = 1024;
  v54 = 3;
  v55 = 1024;
  v56 = v36;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_18:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    goto LABEL_64;
  }
LABEL_63:
  v37 = a1[820];
  v38 = a1[827];
  v50.__locale_ = (std::locale::__imp *)0x404000400;
  v51 = 1024;
  v52 = v37;
  v53 = 1024;
  v54 = 4;
  v55 = 1024;
  v56 = v38;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_19:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    goto LABEL_65;
  }
LABEL_64:
  v39 = a1[821];
  v40 = a1[828];
  v50.__locale_ = (std::locale::__imp *)0x504000400;
  v51 = 1024;
  v52 = v39;
  v53 = 1024;
  v54 = 5;
  v55 = 1024;
  v56 = v40;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
LABEL_20:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_65:
  v41 = a1[822];
  v42 = a1[829];
  v50.__locale_ = (std::locale::__imp *)0x604000400;
  v51 = 1024;
  v52 = v41;
  v53 = 1024;
  v54 = 6;
  v55 = 1024;
  v56 = v42;
  _os_log_error_impl(&dword_20E77A000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "PRF %d = %d\t\tVRP %d = %02x", (uint8_t *)&v50, 0x1Au);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
LABEL_21:
    sub_20E807504();
LABEL_22:
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807490();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80741C();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E8073B0();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807344();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E8072D8();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E80726C();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807200();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807194();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807128();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E8070BC();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E807050();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E806FE4();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E806F78();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E806F0C();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E806EA0();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E806E34();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    sub_20E806DC8();
  v46[0] = *MEMORY[0x24BEDB7F0];
  v27 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v47[0] = v27;
  v47[1] = MEMORY[0x24BEDB848] + 16;
  if (v48 < 0)
    operator delete((void *)v47[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC4774](&v49);
}

void sub_20E7C811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E78F444((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7C8130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::locale::~locale((std::locale *)(v6 - 160));
  sub_20E78F444((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7C8150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  if (*(char *)(v6 - 137) < 0)
  {
    operator delete(*(void **)(v6 - 160));
    sub_20E78F444((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_20E78F444((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7C81C4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  int v5;

  v4 = (((unint64_t)*(unsigned int *)(a3 + 2192) >> 2) & 3) - 1;
  if (v4 >= 3)
    sub_20E80BCAC();
  v5 = dword_20E80EB50[v4];
  *(_DWORD *)(a4 + 4) = *(unsigned __int16 *)(a1 + 16);
  *(_DWORD *)(a4 + 8) = v5;
  return sub_20E78CECC(a2, a3, a4);
}

uint64_t sub_20E7C820C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_20E78D244(a2, a3, a4);
}

void *sub_20E7C821C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  __int32 v12;

  v5 = a2 + a3[2].u32[1];
  v6 = *(int32x2_t *)(v5 + 100);
  a3[29] = vadd_s32(a3[29], v6);
  v7 = a3[30].u32[0];
  v8 = a3[30].u32[1];
  if ((_DWORD)v7 == (_DWORD)v8)
  {
    v9 = a3[31].u32[0];
    v10 = a3[31].u32[1];
    if ((_DWORD)v9 == (_DWORD)v10)
      goto LABEL_3;
  }
  else
  {
    v12 = v6.i32[1];
    result = memcpy((void *)(a2 + v7), (const void *)(a2 + v8), (a3[1].i32[0] * v6.i32[0]));
    v6.i32[1] = v12;
    v9 = a3[31].u32[0];
    v10 = a3[31].u32[1];
    if ((_DWORD)v9 == (_DWORD)v10)
    {
LABEL_3:
      if (!a3[32].i8[0])
        return result;
      goto LABEL_4;
    }
  }
  result = memcpy((void *)(a2 + v9), (const void *)(a2 + v10), (a3[1].i32[0] * v6.i32[1]));
  if (!a3[32].i8[0])
    return result;
LABEL_4:
  *(_DWORD *)(v5 + 100) = a3[29].i32[0];
  *(_DWORD *)(v5 + 104) = a3[29].i32[1];
  return result;
}

void sub_20E7C82E8(_QWORD *a1)
{
  sub_20E7C8314(a1);
  JUMPOUT(0x212BC47D4);
}

uint64_t sub_20E7C830C()
{
  return 0x3FFFLL;
}

uint64_t sub_20E7C8314(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &off_24C9A8BF0;
  v2 = a1[99];
  if (v2)
  {
    a1[100] = v2;
    MEMORY[0x212BC47C8]();
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  return nullsub_13(a1);
}

void sub_20E7C83B4(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  __int16 v27;

  bzero(a3, 0xF80uLL);
  *(_DWORD *)a3 = *(unsigned __int8 *)(a2 + 92);
  v10 = *(_DWORD *)a2;
  v11 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2 >= 0x280u)
    v10 = 640;
  *((_DWORD *)a3 + 1) = v10;
  *((_DWORD *)a3 + 2) = v11;
  *((_DWORD *)a3 + 3) = 8;
  sub_20E7C86A0(a1, a2, (unint64_t *)a3 + 8, a4, a5);
  v12 = *((_DWORD *)a3 + 944);
  if (*(_BYTE *)(a2 + 92))
  {
    *((_DWORD *)a3 + 944) = v12 & 0xFFFFFFFE;
    *((_DWORD *)a3 + 960) = *((_DWORD *)a3 + 960) & 0xFFFFC000 | sub_20E79B4C8(*(_DWORD *)(a2 + 24)) & 0x3FFF;
    v13 = *((_DWORD *)a3 + 944) & 0xFFFE00FF | ((sub_20E79B4E8(*(_DWORD *)(a2 + 24)) & 0x1FF) << 8);
    *((_DWORD *)a3 + 944) = v13;
    *((_DWORD *)a3 + 944) = v13 & 0xFCFFFFFF | ((*(_BYTE *)(a2 + 132) & 3) << 24);
    *(_QWORD *)(a3 + 3780) = *((_QWORD *)a3 + 301);
    *(_QWORD *)(a3 + 3804) = *((_QWORD *)a3 + 302);
    *((_DWORD *)a3 + 947) = sub_20E79B50C(*(unsigned __int8 *)(a2 + 132)) << 7;
    *((_DWORD *)a3 + 948) = 32 * sub_20E79D1F8(*(unsigned __int8 *)(a2 + 132));
    v14 = *((_DWORD *)a3 + 945) & 0x7FFFF;
    *((_DWORD *)a3 + 949) = v14 + 384;
    *((_DWORD *)a3 + 950) = v14 + 512;
    *((_DWORD *)a3 + 953) = *((_DWORD *)a3 + 606);
    v15 = *(unsigned int *)(a4 + 72);
    v16 = *(_QWORD *)(a4 + 64) + v15;
    *((_QWORD *)a3 + 477) = v16;
    v17 = v16 + 4 * (*((_DWORD *)a3 + 960) & 0x3FFF);
    LODWORD(v15) = 4 * (*((_DWORD *)a3 + 960) & 0x3FFF) + v15;
    *(_DWORD *)(a4 + 72) = v15;
    *((_QWORD *)a3 + 478) = v17;
    v18 = 16 * (*((_DWORD *)a3 + 960) & 0x3FFF);
    LODWORD(v15) = 16 * (*((_DWORD *)a3 + 960) & 0x3FFF) + v15;
    *(_DWORD *)(a4 + 72) = v15;
    *((_QWORD *)a3 + 479) = v17 + v18;
    *(_BYTE *)(a5 + 388) = 1;
    *(_DWORD *)(a5 + 392) = v15;
    *(_DWORD *)(a4 + 72) += sub_20E7C5A20(32 * (*((_DWORD *)a3 + 960) & 0x3FFFu) + 32, 0, 64, a5 + 368);
    *((_DWORD *)a3 + 960) &= 0xC0FFFFFF;
    *((_DWORD *)a3 + 961) = 1;
    v19 = *(float32x4_t *)(a2 + 96);
    v20 = *(float32x4_t *)(a2 + 112);
    *(uint32x4_t *)(a3 + 3848) = vcvtq_u32_f32(v19);
    v21.i64[0] = 0x300000003;
    v21.i64[1] = 0x300000003;
    *(int8x16_t *)(a3 + 3884) = vandq_s8((int8x16_t)vcvtq_n_u32_f32(vabsq_f32(v19), 0x12uLL), v21);
    *(uint32x4_t *)(a3 + 3864) = vcvtq_u32_f32(v20);
    *(int8x16_t *)(a3 + 3900) = vandq_s8((int8x16_t)vcvtq_n_u32_f32(vabsq_f32(v20), 0x12uLL), v21);
    v19.i32[0] = *(_DWORD *)(a2 + 128);
    *((_DWORD *)a3 + 970) = v19.f32[0];
    *((_DWORD *)a3 + 979) = vcvts_n_u32_f32(fabsf(v19.f32[0]), 0x12uLL) & 0x3FFFF;
    v22 = *((_DWORD *)a3 + 982);
    v23 = *((_QWORD *)a3 + 490);
    *((_QWORD *)a3 + 490) = v23 & 0xFFFFFFFFC000E000;
    v24 = v23 & 0xFFFFE000C000E000 | ((unint64_t)(*(_DWORD *)a2 & 0x1FFF) << 32);
    *((_QWORD *)a3 + 490) = v24;
    v25 = v24 & 0xC000FFFFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(a2 + 4) & 0x3FFF) << 48);
    *((_QWORD *)a3 + 490) = v25;
    v26 = vcvtas_u32_f32((float)(*(float *)(a2 + 136) * 256.0) / 360.0) | v22 & 0xFFFFFF00;
    *((_QWORD *)a3 + 490) = v25;
    *((_DWORD *)a3 + 982) = v26;
    v27 = vcvtas_u32_f32(*(float *)(a2 + 140) * 512.0);
    *((_QWORD *)a3 + 490) = v25;
    *((_DWORD *)a3 + 982) = v26 & 0xFEC000FF | ((v27 & 0x3FFF) << 8);
    *((_DWORD *)a3 + 983) = (float)(*(float *)(a2 + 144)
                                                * (float)((float)(*(float *)(a2 + 144) * (float)*(unsigned int *)a2)
                                                        * (float)*(unsigned int *)a2));
    *((_DWORD *)a3 + 984) = *(_DWORD *)(a2 + 148);
  }
  else
  {
    *((_DWORD *)a3 + 944) = v12 | 1;
  }
}

void sub_20E7C86A0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  int v20;
  char v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  __int128 v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int64x2_t v35;
  uint64_t v36;
  char *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int32x4_t v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int32x4_t *v46;
  int v47;
  int v48;
  int v49;
  _QWORD *v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int32x4_t *v63;
  int32x4_t *v64;
  unint64_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  unint64_t v70;
  uint64_t *v71;
  _DWORD *v72;
  uint64_t v73;
  unsigned int v74;
  const __int16 *v75;
  unint64_t v76;
  int16x8_t v77;
  int16x8_t *v78;
  int16x8_t v79;
  int16x8_t v80;
  unint64_t v81;
  uint64_t v82;
  __int16 *v83;
  const char *v85;
  unint64_t v86;
  uint8x16_t v87;
  uint16x8_t v88;
  int8x16_t v89;
  int8x16_t v90;
  uint16x8_t v91;
  int8x16_t v92;
  int8x16_t v93;
  char *v94;
  unint64_t v95;
  unsigned __int128 v96;
  int8x16_t v97;
  unsigned __int128 v98;
  unsigned __int128 v99;
  unint64_t v100;
  uint8x8_t v101;
  uint16x8_t v102;
  int8x16_t v103;
  int8x16_t v104;
  uint64_t v105;
  unint64_t v106;
  int8x16_t v107;
  unsigned __int128 v108;
  int v109;
  int v110;
  unint64_t v111;
  char *v112;
  unint64_t v113;
  const char *v114;
  uint8x16_t v115;
  uint16x8_t v116;
  int8x16_t v117;
  int8x16_t v118;
  uint16x8_t v119;
  int8x16_t v120;
  int8x16_t v122;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  unint64_t v132;
  int8x16_t *v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  unint64_t v137;
  const char *v138;
  uint8x8_t v139;
  uint16x8_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v146;
  int8x16_t *v147;
  unint64_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  char *v153;
  unsigned int v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  unsigned int v158;
  int v159;
  int8x16_t *v160;
  int8x16_t v161;
  int8x16_t v162;
  unsigned __int128 v163;
  int8x16_t v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  double v179;
  uint32x4_t v180;
  unsigned int v181;
  unsigned int v182;
  int8x16_t v183;
  int32x4_t v184;
  int8x16_t v185;
  int32x4_t v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  int8x8_t v191;
  int32x2_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  int8x16_t v201;
  int8x16_t v202;
  unint64_t *v203;
  int v204;
  int v205;
  int8x16_t v206;
  int32x4_t v207;
  int v208;
  int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  int8x16_t v213;
  int32x4_t v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  int8x8_t v219;
  int32x2_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int *v223;
  int8x16_t *v224;
  int8x16_t v225;
  int8x16_t v226;
  uint64_t v227;
  int8x16_t v228;
  int8x16_t v229;
  unsigned int v230;
  int v231;
  unint64_t v232;
  uint64_t v233;
  _OWORD *v234;
  int8x16_t v235;
  unint64_t v236;
  int8x16_t *v237;
  int8x16_t v238;
  int8x16_t v239;
  unint64_t v240;
  _DWORD *v241;
  unsigned int v242[17];
  unsigned int v243[17];
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  _DWORD v253[151];
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  _DWORD v263[159];
  int v264;
  int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  __int32 v272;
  __int32 v273;
  __int32 v274;
  __int32 v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  _DWORD v285[5];
  int v286;
  _QWORD v287[4];
  _QWORD v288[5];

  v5 = *(unsigned __int16 *)(a2 + 50);
  if ((v5 & 0xFFFE) != 4)
    sub_20E807794();
  if (sub_20E7E78F8(*(_DWORD *)a2, *(_DWORD *)(a2 + 4)) != v5)
    sub_20E807768();
  v11 = *(unsigned __int16 *)(a2 + 50);
  v12 = 2 * v11;
  bzero(a3, 0xE80uLL);
  *a3 = 4128;
  v13 = *(_DWORD *)a2;
  v14 = *(_DWORD *)(a2 + 4);
  *(_OWORD *)((char *)a3 + 12) = 0u;
  if (v13 >= 0x280)
    LOWORD(v13) = 640;
  *((_WORD *)a3 + 4) = v13;
  *((_WORD *)a3 + 5) = v14;
  *(unint64_t *)((char *)a3 + 268) = 0;
  *(_OWORD *)((char *)a3 + 236) = 0uLL;
  *(_OWORD *)((char *)a3 + 252) = 0uLL;
  *(_OWORD *)((char *)a3 + 204) = 0uLL;
  *(_OWORD *)((char *)a3 + 220) = 0uLL;
  *(_OWORD *)((char *)a3 + 172) = 0uLL;
  *(_OWORD *)((char *)a3 + 188) = 0uLL;
  *(_OWORD *)((char *)a3 + 140) = 0uLL;
  *(_OWORD *)((char *)a3 + 156) = 0uLL;
  *(_OWORD *)((char *)a3 + 108) = 0uLL;
  *(_OWORD *)((char *)a3 + 124) = 0uLL;
  *(_OWORD *)((char *)a3 + 76) = 0uLL;
  *(_OWORD *)((char *)a3 + 92) = 0uLL;
  *(_OWORD *)((char *)a3 + 44) = 0uLL;
  *(_OWORD *)((char *)a3 + 60) = 0uLL;
  *(_OWORD *)((char *)a3 + 28) = 0uLL;
  if (*(_WORD *)(a2 + 50) == 5)
    v15 = 1023;
  else
    v15 = 255;
  if (*(_BYTE *)(a2 + 84))
    v16 = v15;
  else
    v16 = 0;
  *((_DWORD *)a3 + 69) = v16;
  if (*(_WORD *)(a2 + 50) == 5)
    v17 = 1023;
  else
    v17 = 255;
  if (*(_BYTE *)(a2 + 85))
    v18 = v17;
  else
    v18 = 0;
  *((_DWORD *)a3 + 70) = v18;
  v19 = *(_BYTE *)(a2 + 86);
  if (*(_WORD *)(a2 + 50) == 5)
    v20 = 510;
  else
    v20 = 126;
  if (!*(_BYTE *)(a2 + 86))
    v20 = 0;
  *((_DWORD *)a3 + 71) = v20;
  v21 = v19 | *(_BYTE *)(a2 + 87) | *(_BYTE *)(a2 + 88) | *(_BYTE *)(a2 + 89) | *(_BYTE *)(a2 + 153) | *(_BYTE *)(a2 + 92);
  if (*(_WORD *)(a2 + 50) == 5)
    v22 = 510;
  else
    v22 = 126;
  if (v21)
    v23 = v22;
  else
    v23 = 0;
  *((_DWORD *)a3 + 72) = v23;
  if ((_DWORD)v11)
  {
    if (v12 <= 1)
      v24 = 1;
    else
      v24 = 2 * v11;
    if (v24 >= 8)
    {
      v26 = (char *)a3 + 292;
      v27 = (int64x2_t)xmmword_20E80DF50;
      v28 = (int64x2_t)xmmword_20E80DF60;
      v29 = (int64x2_t)xmmword_20E80DF70;
      v30 = (int64x2_t)xmmword_20E80DF80;
      v25 = v24 & 0x1FFF8;
      *(_QWORD *)&v31 = 0x3000300030003;
      *((_QWORD *)&v31 + 1) = 0x3000300030003;
      v32 = (int8x16_t)vdupq_n_s64(1uLL);
      v33.i64[0] = 0x20002000200020;
      v33.i64[1] = 0x20002000200020;
      v34.i64[0] = 0x10001000100010;
      v34.i64[1] = 0x10001000100010;
      v35 = vdupq_n_s64(8uLL);
      v36 = v24 & 0x1FFF8;
      do
      {
        *(_OWORD *)v26 = v31;
        *(int8x16_t *)(v26 + 124) = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v30, v32)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v29, v32))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v28, v32)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v27, v32)))), v34, v33);
        v28 = vaddq_s64(v28, v35);
        v29 = vaddq_s64(v29, v35);
        v30 = vaddq_s64(v30, v35);
        v27 = vaddq_s64(v27, v35);
        v26 += 16;
        v36 -= 8;
      }
      while (v36);
      if (v24 == v25)
        goto LABEL_41;
    }
    else
    {
      v25 = 0;
    }
    do
    {
      v37 = (char *)a3 + 2 * v25;
      *((_WORD *)v37 + 146) = 3;
      if ((v25 & 1) != 0)
        v38 = 32;
      else
        v38 = 16;
      *((_WORD *)v37 + 208) = v38;
      ++v25;
    }
    while (v24 != v25);
  }
LABEL_41:
  *((_DWORD *)a3 + 78) = 0;
  v39 = *(unsigned __int16 *)(a1 + 68);
  if (*(_WORD *)(a1 + 68))
  {
    v40 = 0;
    v41 = *(unsigned __int16 *)(a2 + 20);
    v42 = vdupq_n_s32(v41);
    v43 = (_OWORD *)((char *)a3 + 316);
    do
    {
      if (v39 >= 8)
      {
        v45 = (unsigned __int16)v39 & 0xFFF8;
        v46 = (int32x4_t *)v43;
        do
        {
          *v46 = v42;
          v46[1] = v42;
          v46 += 2;
          v45 -= 8;
        }
        while (v45);
        v44 = (unsigned __int16)v39 & 0xFFF8;
        if (v44 == v39)
          goto LABEL_43;
      }
      else
      {
        v44 = 0;
      }
      do
        *((_DWORD *)v43 + v44++) = v41;
      while (v39 != v44);
LABEL_43:
      ++v40;
      v43 = (_OWORD *)((char *)v43 + 20);
    }
    while (v40 != v39);
  }
  *((_DWORD *)a3 + 454) = *(_DWORD *)(a2 + 24);
  *((_DWORD *)a3 + 455) = 2047;
  *((_DWORD *)a3 + 456) = sub_20E7E7940(*(_DWORD *)a2, 0);
  v47 = sub_20E7E7940(*(_DWORD *)a2, 1u);
  *((_DWORD *)a3 + 457) = v47;
  *((_DWORD *)a3 + 458) = v47;
  v48 = sub_20E7E7940(*(_DWORD *)a2, 2u);
  *((_DWORD *)a3 + 459) = v48;
  *((_DWORD *)a3 + 460) = v48;
  v49 = sub_20E7E7940(*(_DWORD *)a2, 3u);
  *((_DWORD *)a3 + 461) = v49;
  if (*(_WORD *)(a2 + 50) == 5)
  {
    *((_DWORD *)a3 + 462) = v49;
    *((_DWORD *)a3 + 463) = sub_20E7E7940(*(_DWORD *)a2, 4u);
  }
  *((_DWORD *)a3 + 480) = 1023;
  *(_OWORD *)((char *)a3 + 1924) = xmmword_20E80DF90;
  *((_DWORD *)a3 + 485) = 9437297;
  if (v11 >= 2)
  {
    v50 = a3 + 243;
    v51 = 2;
    do
    {
      *(_OWORD *)v50 = xmmword_20E80DFA0;
      *((_DWORD *)v50 + 4) = 9830514;
      v51 += 2;
      v50 = (_QWORD *)((char *)v50 + 20);
    }
    while (v51 < v12);
  }
  v52 = *((_DWORD *)a3 + 512);
  v53 = v52 & 0xFFFFFFFD;
  *((_DWORD *)a3 + 512) = v52 & 0xFFFFFFFD;
  if (*(_BYTE *)(a2 + 88))
    _ZF = *(_BYTE *)(a2 + 89) == 0;
  else
    _ZF = 1;
  if (!_ZF)
    sub_20E80773C();
  v55 = v52 & 0xFFFFFFF1;
  *((_DWORD *)a3 + 512) = v55;
  if (*(_BYTE *)(a2 + 89))
  {
    v55 = v53 | 0xC;
  }
  else if (*(_BYTE *)(a2 + 88))
  {
    if (*(_BYTE *)(a2 + 91))
    {
      if (*(_BYTE *)(a2 + 91) == 1)
        v55 |= 8u;
    }
    else
    {
      v55 |= 4u;
    }
  }
  *((_DWORD *)a3 + 512) = v55 & 0xFFE0018F | 0x88000;
  if (*(_WORD *)(a2 + 50) == 5)
    v56 = 510;
  else
    v56 = 126;
  if (*(_BYTE *)(a2 + 87))
    v57 = v56;
  else
    v57 = 0;
  *((_DWORD *)a3 + 513) = v57;
  v58 = *(unsigned int *)(a2 + 28);
  v287[0] = v58;
  v287[1] = v58;
  v287[2] = v58;
  v287[3] = v58;
  v288[0] = v58;
  v288[1] = v58;
  v288[2] = v58;
  v288[3] = v58;
  if (*(_BYTE *)(a2 + 76))
    sub_20E7E75AC(v58, 2 * v11, v287);
  v59 = v12 - 1;
  if (v12 != 2)
  {
    v60 = 2;
    if (v59 > 2)
      v60 = v12 - 1;
    if (v60 < 9)
    {
      v61 = 1;
LABEL_83:
      v70 = v60 - v61;
      v71 = &v287[v61 - 1];
      v72 = (_DWORD *)a3 + v61 + 514;
      do
      {
        v73 = *v71++;
        *v72++ = v73;
        --v70;
      }
      while (v70);
      goto LABEL_85;
    }
    v62 = (v60 - 1) & 0xFFFFFFFFFFFFFFF8;
    v61 = v62 | 1;
    v63 = (int32x4_t *)v288;
    v64 = (int32x4_t *)((char *)a3 + 2060);
    v65 = v62;
    do
    {
      v67 = v63[-2];
      v66 = v63[-1];
      v69 = *v63;
      v68 = v63[1];
      v63 += 4;
      *v64 = vuzp1q_s32(v67, v66);
      v64[1] = vuzp1q_s32(v69, v68);
      v64 += 2;
      v65 -= 8;
    }
    while (v65);
    if (v60 - 1 != v62)
      goto LABEL_83;
  }
LABEL_85:
  v74 = *((_DWORD *)a3 + 523) & 0xFFFFFC00 | *(_DWORD *)a2 & 0x3FF;
  *((_DWORD *)a3 + 523) = v74;
  *((_DWORD *)a3 + 523) = v74 & 0xE000FFFF | ((*(_DWORD *)(a2 + 4) & 0x1FFF) << 16);
  *((_OWORD *)a3 + 131) = xmmword_20E80DFB0;
  *((_OWORD *)a3 + 132) = xmmword_20E80DFC0;
  *((_OWORD *)a3 + 133) = xmmword_20E80DFD0;
  *((_OWORD *)a3 + 134) = xmmword_20E80DFE0;
  a3[270] = 0x1D002E00230039;
  v75 = (const __int16 *)(a2 + 20);
  if (v59 > 7 && ((unint64_t)a3 + 2188 >= a2 + 22 || v75 >= (const __int16 *)a3 + 2 * v11 + 1120))
  {
    v76 = v59 & 0xFFFFFFFFFFFFFFF8;
    v77 = vld1q_dup_s16(v75);
    v78 = (int16x8_t *)((char *)a3 + 2242);
    v79.i64[0] = 0x1000100010001;
    v79.i64[1] = 0x1000100010001;
    v80.i64[0] = -1;
    v80.i64[1] = -1;
    v81 = v59 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      *(int16x8_t *)((char *)v78 - 54) = v79;
      *(int16x8_t *)((char *)v78 - 36) = v80;
      *v78 = v77;
      *(int16x8_t *)((char *)v78++ - 18) = v77;
      v81 -= 8;
    }
    while (v81);
  }
  else
  {
    v76 = 0;
  }
  v82 = v76 - v12 + 1;
  v83 = (__int16 *)a3 + v76 + 1121;
  do
  {
    *(v83 - 27) = 1;
    *(v83 - 18) = -1;
    *v83 = *v75;
    *(v83 - 9) = *v75;
    ++v83;
    _CF = __CFADD__(v82++, 1);
  }
  while (!_CF);
  v85 = (const char *)(a2 + 22);
  if (v59 >= 8 && ((unint64_t)a3 + 2260 >= a2 + 23 || v85 >= (const char *)&a3[v11 + 282]))
  {
    if (v59 >= 0x10)
    {
      v86 = v59 & 0xFFFFFFFFFFFFFFF0;
      v87 = (uint8x16_t)vld1q_dup_s8(v85);
      v88 = vmovl_high_u8(v87);
      v89 = (int8x16_t)vmovl_high_u16(v88);
      v90 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v88.i8);
      v91 = vmovl_u8(*(uint8x8_t *)v87.i8);
      v92 = (int8x16_t)vmovl_high_u16(v91);
      v93 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v91.i8);
      v94 = (char *)a3 + 2260;
      v95 = v59 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v96 = *((_OWORD *)v94 + 2) & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00);
        v97.i64[0] = __PAIR64__(HIDWORD(*(_QWORD *)v94), *(_OWORD *)v94) & 0xFFFFFF00FFFFFF00;
        v97.i32[2] = *((_QWORD *)v94 + 1) & 0xFFFFFF00;
        v97.i32[3] = HIDWORD(*(_QWORD *)v94) & 0xFFFFFF00;
        v98 = *((_OWORD *)v94 + 1) & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00);
        v99 = *((_OWORD *)v94 + 3) & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00);
        *(int8x16_t *)v94 = vorrq_s8(v97, v93);
        *((int8x16_t *)v94 + 1) = vorrq_s8((int8x16_t)v98, v92);
        *((int8x16_t *)v94 + 2) = vorrq_s8((int8x16_t)v96, v90);
        *((int8x16_t *)v94 + 3) = vorrq_s8((int8x16_t)v99, v89);
        v94 += 64;
        v95 -= 16;
      }
      while (v95);
      if ((v59 & 8) == 0)
        goto LABEL_105;
    }
    else
    {
      v86 = 0;
    }
    v100 = v86;
    v86 = v59 & 0xFFFFFFFFFFFFFFF8;
    v101 = (uint8x8_t)vld1_dup_s8(v85);
    v102 = vmovl_u8(v101);
    v103 = (int8x16_t)vmovl_high_u16(v102);
    v104 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v102.i8);
    v105 = (uint64_t)a3 + 4 * v100 + 2260;
    v106 = v100 - (v59 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v107.i64[0] = __PAIR64__(HIDWORD(*(_QWORD *)v105), *(_OWORD *)v105) & 0xFFFFFF00FFFFFF00;
      v107.i32[2] = *(_QWORD *)(v105 + 8) & 0xFFFFFF00;
      v107.i32[3] = HIDWORD(*(_QWORD *)v105) & 0xFFFFFF00;
      v108 = *(_OWORD *)(v105 + 16) & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00);
      *(int8x16_t *)v105 = vorrq_s8(v107, v104);
      *(int8x16_t *)(v105 + 16) = vorrq_s8((int8x16_t)v108, v103);
      v105 += 32;
      v106 += 8;
    }
    while (v106);
  }
  else
  {
    v86 = 0;
  }
  do
LABEL_105:
    *((_BYTE *)a3 + 4 * v86++ + 2260) = *v85;
  while (v59 != v86);
  *(_OWORD *)(a3 + 287) = xmmword_20E80DFF0;
  a3[289] = 0;
  v109 = *(unsigned __int16 *)(a2 + 50);
  if (v109 == 5)
    v110 = 15;
  else
    v110 = 7;
  *((_DWORD *)a3 + 580) = v110;
  if (v109 != 1)
  {
    v111 = 0;
    v112 = (char *)a3 + 2326;
    do
    {
      *(_DWORD *)(v112 - 2) = 19267693;
      ++v111;
      v112 += 4;
    }
    while (v111 < (unint64_t)*(unsigned __int16 *)(a2 + 50) - 1);
  }
  if (v59 >= 8)
  {
    if ((unint64_t)a3 + 436 >= a2 + 48 || a2 + 43 >= (unint64_t)&a3[v11 + 54])
    {
      if (v59 >= 0x10)
      {
        v113 = v59 & 0xFFFFFFFFFFFFFFF0;
        v114 = (const char *)(a2 + 43);
        v115 = (uint8x16_t)vld1q_dup_s8(v114);
        v116 = vmovl_high_u8(v115);
        v117 = (int8x16_t)vmovl_high_u16(v116);
        v118 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v116.i8);
        v119 = vmovl_u8(*(uint8x8_t *)v115.i8);
        v120 = (int8x16_t)vmovl_high_u16(v119);
        _Q1 = vdupq_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)(a2 + 46), (int8x8_t)0x3F003F003F003FLL), 0);
        v122 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v119.i8);
        __asm { SHLL2           V6.4S, V1.8H, #0x10 }
        v126 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
        v127 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
        v128 = vorrq_s8(_Q6, v117);
        v129 = vorrq_s8(_Q6, v120);
        v130 = vorrq_s8(v126, v122);
        v131 = vorrq_s8(v126, v118);
        v132 = v59 & 0xFFFFFFFFFFFFFFF0;
        v133 = (int8x16_t *)((char *)a3 + 436);
        do
        {
          v134 = vorrq_s8(v128, vandq_s8(v133[3], v127));
          v135 = vorrq_s8(v129, vandq_s8(v133[1], v127));
          v136 = vorrq_s8(v131, vandq_s8(v133[2], v127));
          *v133 = vorrq_s8(v130, vandq_s8(*v133, v127));
          v133[1] = v135;
          v133[2] = v136;
          v133[3] = v134;
          v133 += 4;
          v132 -= 16;
        }
        while (v132);
        if ((v59 & 8) == 0)
          goto LABEL_124;
      }
      else
      {
        v113 = 0;
      }
      v137 = v113;
      v113 = v59 & 0xFFFFFFFFFFFFFFF8;
      v138 = (const char *)(a2 + 43);
      v139 = (uint8x8_t)vld1_dup_s8(v138);
      v140 = vmovl_u8(v139);
      v141 = (int8x16_t)vmovl_high_u16(v140);
      v142 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v140.i8);
      v143.i64[0] = 0x3F003F003F003FLL;
      v143.i64[1] = 0x3F003F003F003FLL;
      _Q0 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vandq_s8(*(int8x16_t *)(a2 + 46), v143), 0);
      __asm { SHLL2           V3.4S, V0.8H, #0x10 }
      v146 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
      v147 = (int8x16_t *)((char *)a3 + 4 * v137 + 436);
      v148 = v137 - (v59 & 0xFFFFFFFFFFFFFFF8);
      v149 = (int8x16_t)vdupq_n_s32(0xFFC0FFFE);
      v150 = vorrq_s8(_Q3, v141);
      v151 = vorrq_s8(v146, v142);
      do
      {
        v152 = vorrq_s8(v150, vandq_s8(v147[1], v149));
        *v147 = vorrq_s8(v151, vandq_s8(*v147, v149));
        v147[1] = v152;
        v147 += 2;
        v148 += 8;
      }
      while (v148);
    }
    else
    {
      v113 = 0;
    }
  }
  else
  {
    v113 = 0;
  }
  do
  {
LABEL_124:
    v153 = (char *)a3 + 4 * v113;
    v154 = *((_DWORD *)v153 + 109) & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 43);
    *((_DWORD *)v153 + 109) = v154;
    *((_DWORD *)v153 + 109) = v154 & 0xFFC0FFFF | ((*(_WORD *)(a2 + 46) & 0x3F) << 16);
    ++v113;
  }
  while (v59 != v113);
  *((_DWORD *)a3 + 585) = *((_DWORD *)a3 + 585) & 0xFFFFFFFE | ((*(unsigned __int8 *)(a2 + 92) | *(unsigned __int8 *)(a2 + 153)) != 0);
  if (*(unsigned __int8 *)(a2 + 92) | *(unsigned __int8 *)(a2 + 153))
  {
    v155 = *((_DWORD *)a3 + 585) & 0xFFFE00FF | ((sub_20E79B4E8(*(_DWORD *)(a2 + 24)) & 0x1FF) << 8);
    *((_DWORD *)a3 + 585) = v155;
    *((_DWORD *)a3 + 585) = v155 & 0xF8FFFFFF | ((*(_BYTE *)(a2 + 132) & 3) << 24);
    *((_DWORD *)a3 + 590) = sub_20E79B554(*(_DWORD *)(a2 + 24));
    v156 = *(unsigned int *)(a4 + 72);
    v157 = *(_QWORD *)(a4 + 64) + v156;
    a3[293] = v157;
    *(_BYTE *)(a5 + 360) = 1;
    *(_DWORD *)(a5 + 364) = v156;
    v158 = sub_20E79D214(*(_DWORD *)(a2 + 24), *(unsigned __int8 *)(a2 + 132));
    if (sub_20E7C5A20(v158, 0, 64, a5 + 340) >= 0x4B001)
      sub_20E807710();
    v159 = *(_DWORD *)(a4 + 72) + 307200;
    a3[294] = v157 + 307200;
    *(_DWORD *)(a4 + 72) = v159 + (*((_DWORD *)a3 + 590) << 6);
  }
  *(int8x16_t *)(a3 + 179) = vandq_s8(*(int8x16_t *)(a3 + 179), (int8x16_t)xmmword_20E80E000);
  *((_OWORD *)a3 + 111) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 111), (int8x16_t)vdupq_n_s32(0xE000F000)) | __PAIR128__(0x10001000100010, 0x10001000100010);
  a3[181] &= 0xFFFFFFF0FFFFFFF0;
  *((int8x16_t *)a3 + 112) = vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 112), (int8x16_t)xmmword_20E80E010), (int8x16_t)xmmword_20E80E020);
  v160 = (int8x16_t *)((char *)a3 + 1436);
  a3[226] = (unint64_t)vorr_s8(vand_s8((int8x8_t)a3[226], (int8x8_t)vdup_n_s32(0xFFFF8080)), (int8x8_t)vdup_n_s32(0x101u));
  v161 = (int8x16_t)vdupq_n_s32(0xF000F800);
  *((_OWORD *)a3 + 91) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 91), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 368) = a3[184] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1476) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1476), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 373) = *((_DWORD *)a3 + 373) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 187) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 187), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 378) = a3[189] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1516) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1516), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 383) = *((_DWORD *)a3 + 383) & 0xF000F800 | 0x50005;
  *((_OWORD *)a3 + 96) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 96), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 388) = a3[194] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1556) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1556), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 393) = *((_DWORD *)a3 + 393) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 197) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 197), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 398) = a3[199] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1596) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1596), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 403) = *((_DWORD *)a3 + 403) & 0xF000F800 | 0x50005;
  *((_OWORD *)a3 + 101) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 101), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 408) = a3[204] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1636) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1636), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 413) = *((_DWORD *)a3 + 413) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 207) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 207), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 418) = a3[209] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1676) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1676), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 423) = *((_DWORD *)a3 + 423) & 0xF000F800 | 0x50005;
  *((_OWORD *)a3 + 106) = *(_OWORD *)&vandq_s8(*((int8x16_t *)a3 + 106), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 428) = a3[214] & 0xF000F800 | 0x50005;
  *(_OWORD *)((char *)a3 + 1716) = *(_OWORD *)&vandq_s8(*(int8x16_t *)((char *)a3 + 1716), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 433) = *((_DWORD *)a3 + 433) & 0xF000F800 | 0x50005;
  *(_OWORD *)(a3 + 217) = *(_OWORD *)&vandq_s8(*(int8x16_t *)(a3 + 217), v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *((_DWORD *)a3 + 438) = a3[219] & 0xF000F800 | 0x50005;
  v162 = *(int8x16_t *)((char *)a3 + 1756);
  v163 = *(_OWORD *)&vandq_s8(v162, v161) | __PAIR128__(0x5000500050005, 0x5000500050005);
  *(_OWORD *)((char *)a3 + 1756) = v163;
  *((_DWORD *)a3 + 443) = *((_DWORD *)a3 + 443) & 0xF000F800 | 0x50005;
  if (*(_DWORD *)a2 <= 0x280u)
  {
    *a3 = *a3 & 0xFFFFFFE0FFFFFFFFLL | 0x100000000;
    v164 = (int8x16_t)vdupq_n_s32(0xC000E000);
    *((int8x16_t *)a3 + 116) = vandq_s8(*((int8x16_t *)a3 + 116), v164);
    *((int8x16_t *)a3 + 117) = vandq_s8(*((int8x16_t *)a3 + 117), v164);
    *((int8x16_t *)a3 + 118) = vandq_s8(*((int8x16_t *)a3 + 118), v164);
    *((int8x16_t *)a3 + 119) = vandq_s8(*((int8x16_t *)a3 + 119), v164);
    sub_20E78F074(a1, a2, (uint64_t)a3, 1);
    *((_DWORD *)a3 + 358) = a3[179] & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 42);
    if (*(_BYTE *)(a2 + 42))
    {
      bzero(v243, 0x824uLL);
      v165 = *((_DWORD *)a3 + 118);
      v242[0] = 1;
      v244 = v165 & 0x7FF;
      v166 = *((_DWORD *)a3 + 198);
      v255 = 5 * (HIWORD(v166) & 0x1FFF);
      v167 = (a3[139] & 0x3FF) + 5 * (v166 & 0x3FF);
      v168 = *((_DWORD *)a3 + 119);
      v245 = HIWORD(v165) & 0x1FFF;
      v246 = v168 & 0x7FF;
      v169 = HIWORD(v168) & 0x1FFF;
      v170 = *((_DWORD *)a3 + 199);
      v257 = 5 * (HIWORD(v170) & 0x1FFF);
      v256 = (*((_DWORD *)a3 + 279) & 0x3FF) + 5 * (v170 & 0x3FF);
      v171 = *((_DWORD *)a3 + 120);
      v247 = v169;
      v248 = v171 & 0x7FF;
      v172 = HIWORD(v171) & 0x1FFF;
      v173 = *((_DWORD *)a3 + 200);
      v259 = 5 * (HIWORD(v173) & 0x1FFF);
      v258 = (a3[140] & 0x3FF) + 5 * (v173 & 0x3FF);
      v174 = *((_DWORD *)a3 + 121);
      v249 = v172;
      v250 = v174 & 0x7FF;
      v175 = HIWORD(v174) & 0x1FFF;
      v176 = *((_DWORD *)a3 + 201);
      v261 = 5 * (HIWORD(v176) & 0x1FFF);
      v260 = (*((_DWORD *)a3 + 281) & 0x3FF) + 5 * (v176 & 0x3FF);
      v177 = *((_DWORD *)a3 + 122);
      v251 = v175;
      v252 = v177 & 0x7FF;
      v254 = v167;
      v253[0] = HIWORD(v177) & 0x1FFF;
      v178 = *((_DWORD *)a3 + 202);
      v263[0] = 5 * (HIWORD(v178) & 0x1FFF);
      v262 = (a3[141] & 0x3FF) + 5 * (v178 & 0x3FF);
      sub_20E7E797C(0x280u, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), 1, v242, v179, v180);
      v181 = v266;
      v182 = v267;
      v183.i64[0] = __PAIR64__(v278, v276);
      v184.i64[0] = __PAIR64__(v279, v277);
      v185.i64[0] = __PAIR64__(v263[153], v263[151]);
      v186.i64[0] = __PAIR64__(v263[154], v263[152]);
      v187 = v268;
      v188 = v269;
      v189 = v270;
      v190 = v271;
      v191.i32[0] = v272;
      v192.i32[0] = v273;
      v183.i64[1] = __PAIR64__(v282, v280);
      v193.i64[0] = 0xF0000000FLL;
      v193.i64[1] = 0xF0000000FLL;
      v184.i64[1] = __PAIR64__(v283, v281);
      v185.i32[2] = v263[155];
      v186.i32[2] = v263[156];
      *((int8x16_t *)a3 + 111) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v184, 0x10uLL) & __PAIR128__(0x1FFFFFFF1FFFFFFFLL, 0x1FFFFFFF1FFFFFFFLL)), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 111), (int8x16_t)vdupq_n_s32(0xE000F000)), vandq_s8(v183, v193)));
      v194.i64[0] = 0xF0000000FLL;
      v194.i64[1] = 0xF0000000FLL;
      *v160 = vbslq_s8(v194, *v160, *(int8x16_t *)&v285[1]);
      v185.i32[3] = v263[157];
      v184.i64[0] = 0x700000007;
      v184.i64[1] = 0x700000007;
      v186.i32[3] = v263[158];
      *((int8x16_t *)a3 + 91) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v186, 0x10uLL) & __PAIR128__(0xFFFFFFF0FFFFFFFLL, 0xFFFFFFF0FFFFFFFLL)), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 91), (int8x16_t)vdupq_n_s32(0xF000F800)), vandq_s8(v185, (int8x16_t)v184)));
      v191.i32[1] = v274;
      v192.i32[1] = v275;
      a3[226] = (unint64_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v192, 8uLL), (int8x8_t)0x7F0000007F00), vorr_s8(vand_s8((int8x8_t)a3[226], (int8x8_t)vdup_n_s32(0xFFFF8080)), vand_s8(v191, (int8x8_t)0x7F0000007FLL)));
      v195.i64[0] = __PAIR64__(v181, v284);
      v186.i64[0] = __PAIR64__(v182, v285[0]);
      v195.i64[1] = __PAIR64__(v189, v187);
      v186.i64[1] = __PAIR64__(v190, v188);
      *((int8x16_t *)a3 + 112) = vorrq_s8(vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)v186, (uint32x4_t)xmmword_20E80E040), (int8x16_t)xmmword_20E80E050), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 112), (int8x16_t)xmmword_20E80E010), vandq_s8(v195, (int8x16_t)xmmword_20E80E030)));
      *((_DWORD *)a3 + 363) = *((_DWORD *)a3 + 363) & 0xFFFFFFF0 | v286 & 0xF;
      *((_DWORD *)a3 + 368) = ((v265 & 0xFFF) << 16) | a3[184] & 0xF000F800 | v264 & 0x7FF;
    }
    return;
  }
  sub_20E7E797C(0x280u, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int8 *)(a2 + 42), v242, *(double *)&v163, (uint32x4_t)v162);
  v196 = v242[0] & 0x1F;
  v197 = *a3 & 0xFFFFFFE0FFFFFFFFLL | ((unint64_t)(v242[0] & 0x1F) << 32);
  *a3 = v197;
  v198 = HIDWORD(v197) & 0x1F;
  if (v196)
  {
    v199 = 0;
    v200 = 0;
    v201.i64[0] = 0x700000007;
    v201.i64[1] = 0x700000007;
    v202 = (int8x16_t)vdupq_n_s32(0xE000F800);
    v203 = a3;
    do
    {
      *(_DWORD *)((char *)a3 + v200 * 4 + 1856) = *(_DWORD *)((_BYTE *)a3 + v200 * 4 + 1856) & 0xFFFFE000 | v242[v200 + 1] & 0x1FFF;
      v204 = *(int *)((char *)&v254 + v199);
      *((_DWORD *)v203 + 198) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v255 + v199)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v255 + v199)) >> 63)) & 0x1FFF) << 16) | v203[99] & 0xE000FC00 | (v204 / 5) & 0x3FF;
      *((_DWORD *)v203 + 278) = v203[139] & 0xFFFFFC00 | (v204 % 5) & 0x3FF;
      v205 = *(int *)((char *)&v256 + v199);
      *((_DWORD *)v203 + 199) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v257 + v199)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v257 + v199)) >> 63)) & 0x1FFF) << 16) | *((_DWORD *)v203 + 199) & 0xE000FC00 | (v205 / 5) & 0x3FF;
      *((_DWORD *)v203 + 279) = *((_DWORD *)v203 + 279) & 0xFFFFFC00 | (v205 % 5) & 0x3FF;
      v206.i32[0] = *(int *)((char *)&v244 + v199);
      v207.i32[0] = *(int *)((char *)&v245 + v199);
      v206.i32[1] = *(int *)((char *)&v246 + v199);
      v207.i32[1] = *(int *)((char *)&v247 + v199);
      v208 = *(int *)((char *)&v258 + v199);
      v206.i32[2] = *(int *)((char *)&v248 + v199);
      v207.i32[2] = *(int *)((char *)&v249 + v199);
      *((_DWORD *)v203 + 200) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v259 + v199)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v259 + v199)) >> 63)) & 0x1FFF) << 16) | v203[100] & 0xE000FC00 | (v208 / 5) & 0x3FF;
      *((_DWORD *)v203 + 280) = v203[140] & 0xFFFFFC00 | (v208 % 5) & 0x3FF;
      v206.i32[3] = *(int *)((char *)&v250 + v199);
      v207.i32[3] = *(int *)((char *)&v251 + v199);
      *(int8x16_t *)(v203 + 59) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v207, 0x10uLL) & __PAIR128__(0x1FFFFFFF1FFFFFFFLL, 0x1FFFFFFF1FFFFFFFLL)), vorrq_s8(vandq_s8(*(int8x16_t *)(v203 + 59), v202), vandq_s8(v206, v201)));
      v209 = *(int *)((char *)&v260 + v199);
      *((_DWORD *)v203 + 201) = ((((unsigned __int16)((unint64_t)(1717986919 * *(int *)((char *)&v261 + v199)) >> 33)
                                 + ((unint64_t)(1717986919 * *(int *)((char *)&v261 + v199)) >> 63)) & 0x1FFF) << 16) | *((_DWORD *)v203 + 201) & 0xE000FC00 | (v209 / 5) & 0x3FF;
      *((_DWORD *)v203 + 281) = *((_DWORD *)v203 + 281) & 0xFFFFFC00 | (v209 % 5) & 0x3FF;
      *((_DWORD *)v203 + 122) = ((v253[v199 / 4] & 0x1FFF) << 16) | v203[61] & 0xE000F800 | v253[v199 / 4 - 1] & 0x7FF;
      v210 = v263[v199 / 4 - 1];
      *((_DWORD *)v203 + 202) = ((((unsigned __int16)((unint64_t)(1717986919 * (int)v263[v199 / 4]) >> 33)
                                 + ((unint64_t)(1717986919 * (int)v263[v199 / 4]) >> 63)) & 0x1FFF) << 16) | v203[101] & 0xE000FC00 | (v210 / 5) & 0x3FF;
      *((_DWORD *)v203 + 282) = v203[141] & 0xFFFFFC00 | (v210 % 5) & 0x3FF;
      ++v200;
      v199 += 40;
      v203 = (unint64_t *)((char *)v203 + 20);
    }
    while (40 * v198 != v199);
  }
  *((_DWORD *)a3 + 358) = a3[179] & 0xFFFFFFFE | *(unsigned __int8 *)(a2 + 42);
  if (*(_BYTE *)(a2 + 42))
  {
    v211 = v266;
    v212 = v267;
    v213.i64[0] = __PAIR64__(v278, v276);
    v214.i64[0] = __PAIR64__(v279, v277);
    v215 = v268;
    v216 = v269;
    v217 = v270;
    v218 = v271;
    v219.i32[0] = v272;
    v220.i32[0] = v273;
    v213.i64[1] = __PAIR64__(v282, v280);
    v221.i64[0] = 0xF0000000FLL;
    v221.i64[1] = 0xF0000000FLL;
    v214.i64[1] = __PAIR64__(v283, v281);
    *((int8x16_t *)a3 + 111) = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v214, 0x10uLL) & __PAIR128__(0x1FFFFFFF1FFFFFFFLL, 0x1FFFFFFF1FFFFFFFLL)), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 111), (int8x16_t)vdupq_n_s32(0xE000F000)), vandq_s8(v213, v221)));
    v222.i64[0] = 0xF0000000FLL;
    v222.i64[1] = 0xF0000000FLL;
    *v160 = vbslq_s8(v222, *v160, *(int8x16_t *)&v285[1]);
    v219.i32[1] = v274;
    v220.i32[1] = v275;
    a3[226] = (unint64_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v220, 8uLL), (int8x8_t)0x7F0000007F00), vorr_s8(vand_s8((int8x8_t)a3[226], (int8x8_t)vdup_n_s32(0xFFFF8080)), vand_s8(v219, (int8x8_t)0x7F0000007FLL)));
    v213.i64[0] = __PAIR64__(v211, v284);
    v214.i64[0] = __PAIR64__(v212, v285[0]);
    v213.i64[1] = __PAIR64__(v217, v215);
    v214.i64[1] = __PAIR64__(v218, v216);
    *((int8x16_t *)a3 + 112) = vorrq_s8(vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)v214, (uint32x4_t)xmmword_20E80E040), (int8x16_t)xmmword_20E80E050), vorrq_s8(vandq_s8(*((int8x16_t *)a3 + 112), (int8x16_t)xmmword_20E80E010), vandq_s8(v213, (int8x16_t)xmmword_20E80E030)));
    *((_DWORD *)a3 + 363) = *((_DWORD *)a3 + 363) & 0xFFFFFFF0 | v286 & 0xF;
    if (v196)
    {
      v223 = &v265;
      v224 = (int8x16_t *)(a3 + 184);
      v225.i64[0] = 0x700000007;
      v225.i64[1] = 0x700000007;
      v226 = (int8x16_t)vdupq_n_s32(0xF000F800);
      v227 = HIDWORD(v197) & 0x1F;
      do
      {
        v228.i32[0] = *(v223 - 9);
        v228.i32[1] = *(v223 - 7);
        v228.i32[2] = *(v223 - 5);
        v228.i32[3] = *(v223 - 3);
        v229 = vorrq_s8(vandq_s8(v224[-1], v226), vandq_s8(v228, v225));
        v228.i32[0] = *(v223 - 8);
        v228.i32[1] = *(v223 - 6);
        v228.i32[2] = *(v223 - 4);
        v228.i32[3] = *(v223 - 2);
        v224[-1] = vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32((int32x4_t)v228, 0x10uLL) & __PAIR128__(0xFFFFFFF0FFFFFFFLL, 0xFFFFFFF0FFFFFFFLL)), v229);
        v230 = v224->i32[0] & 0xF000F800 | *(v223 - 1) & 0x7FF;
        v231 = *v223;
        v223 += 10;
        v224->i32[0] = ((v231 & 0xFFF) << 16) | v230;
        v224 = (int8x16_t *)((char *)v224 + 20);
        --v227;
      }
      while (v227);
    }
  }
  *((_DWORD *)a3 + 592) = a3[296] & 0xE0000000 | (2 * (a3[1] & 0x3FFF)) & 0x7FFF | ((*((_WORD *)a3 + 5) & 0x3FFF) << 15) | 1;
  *((_DWORD *)a3 + 593) = v196;
  if (v198)
  {
    if (v198 < 8)
    {
      v232 = 0;
LABEL_144:
      v240 = v232 - v198;
      v241 = (_DWORD *)a3 + v232 + 464;
      do
      {
        v241[131] = *v241 & 0x1FFF;
        ++v241;
        _CF = __CFADD__(v240++, 1);
      }
      while (!_CF);
      return;
    }
    v233 = HIDWORD(v197) & 7;
    v232 = v198 - v233;
    v234 = a3 + 232;
    v235.i64[0] = 0x1F0000001FLL;
    v235.i64[1] = 0x1F0000001FLL;
    v236 = v198 - v233;
    do
    {
      v237 = (int8x16_t *)((char *)v234 + 524);
      v238 = *(int8x16_t *)v234;
      v239 = *((int8x16_t *)v234 + 1);
      v234 += 2;
      *v237 = vandq_s8(v238, v235);
      v237[1] = vandq_s8(v239, v235);
      v236 -= 8;
    }
    while (v236);
    if (v233)
      goto LABEL_144;
  }
}

uint64_t sub_20E7C9C70(__CVBuffer *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char __dst,int a46,int a47,int a48,int a49)
{
  unsigned int *BaseAddress;
  unsigned int *v52;
  size_t BytesPerRow;
  size_t Height;
  uint64_t v55;
  uint64_t result;
  size_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 vars0;

  STACK[0x4D8] = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 2;
  BaseAddress = (unsigned int *)CVPixelBufferGetBaseAddress(a1);
  if (!BaseAddress)
    return 1;
  v52 = BaseAddress;
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  Height = CVPixelBufferGetHeight(a1);
  v55 = v52[2];
  if (v55 < 2)
    return 5;
  v57 = Height;
  memcpy(&__dst, v52 + 8, 8 * v55);
  v58 = LODWORD(STACK[0x4C8]);
  result = 5;
  if ((_DWORD)v58)
  {
    v59 = v57 * BytesPerRow;
    if (v59 >= v58)
    {
      v60 = LODWORD(STACK[0x4C0]);
      if ((_DWORD)v60)
      {
        if (v59 >= v60 && v58 + 576 <= v59)
        {
          vars0 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          sub_20E7CA99C((uint64_t)v52 + v58, (uint64_t)&v65);
          if (!sub_20E7CA540((uint64_t)&v65))
            return 6;
          *(_QWORD *)(a2 + 32) = *(_QWORD *)((char *)&v66 + 4);
          v61 = (unsigned __int16)v66;
          *(_WORD *)a2 = v66;
          if ((v61 - 7) < 0xFFFFFFFA)
            return 6;
          v62 = (unsigned __int16)v65;
          v63 = DWORD1(v65);
          *(_DWORD *)(a2 + 4) = DWORD1(v65);
          *(_DWORD *)(a2 + 8) = 0;
          *(_DWORD *)(a2 + 12) = 0;
          *(_BYTE *)(a2 + 18) = 0;
          *(_BYTE *)(a2 + 16) = 0;
          *(_BYTE *)(a2 + 17) = 0;
          *(_BYTE *)(a2 + 19) = 0;
          *(_QWORD *)(a2 + 24) = 0;
          if (v63 <= v62)
          {
            if ((_DWORD)v63)
            {
              if ((DWORD2(v65) + v60) + 24 * (unint64_t)v63 > v59)
                return 5;
              v64 = (char *)v52 + v60;
              *(_QWORD *)(a2 + 136) = &v64[DWORD2(v65)];
              if ((unint64_t)(HIDWORD(v65) + v60) + (v63 << 6) > v59)
                return 5;
              *(_QWORD *)(a2 + 144) = &v64[HIDWORD(v65)];
            }
            else
            {
              *(_QWORD *)(a2 + 136) = 0;
              *(_QWORD *)(a2 + 144) = 0;
            }
            *(_QWORD *)(a2 + 152) = 0;
            result = 0;
            *(_QWORD *)(a2 + 160) = 0;
          }
          else
          {
            return 6;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CVHWAFeatureExtractionExtractKeyPoints_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0x10000;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return v12;
}

uint64_t CVHWAFeatureExtractionExtractDescriptors_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0x1000000;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return *((_QWORD *)&v12 + 1);
}

uint64_t CVHWAFeatureExtractionExtractNumberOfOctaves_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return v2[0];
}

uint64_t CVHWAFeatureExtractionExtractNumberOfKeypoints_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return v3;
}

uint64_t CVHWAFeatureExtractionExtractNumberOfPrunedKeypointsAtTopLevel_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return v4;
}

uint64_t CVHWAFeatureExtractionExtractInputImageWidth_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return DWORD2(v5);
}

uint64_t CVHWAFeatureExtractionExtractInputImageHeight_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return HIDWORD(v5);
}

uint64_t CVHWAFeatureExtractionExtractMatchedPairs_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 1;
  v14 = 0;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return v13;
}

uint64_t CVHWAFeatureExtractionExtractNumberOfFeatureMatches_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return HIDWORD(v3);
}

uint64_t CVHWAFeatureExtractionExtractTids_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 256;
  v14 = 0;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return *((_QWORD *)&v13 + 1);
}

uint64_t CVHWAFeatureExtractionExtractFeatureMatchingEnabled_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return BYTE6(v4);
}

uint64_t CVHWAFeatureExtractionExtractGaussianOutputEnabled_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return BYTE4(v4);
}

uint64_t CVHWAFeatureExtractionExtractFlowType_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return BYTE5(v4);
}

uint64_t CVHWAFeatureExtractionExtractLaccEnabled_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return HIBYTE(v4);
}

uint64_t CVHWAFeatureExtractionExtractFrameId_0(uint64_t a1)
{
  _WORD v2[2];
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0;
  v2[0] = 0;
  v4 = 0;
  v3 = 0;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  sub_20E7CA5CC(a1, &v14, (uint64_t)v2);
  return v5;
}

BOOL sub_20E7CA540(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 84);
  if (!*(_BYTE *)(a1 + 84))
    return 0;
  if (v1 != 1)
  {
    if (v1 != 2)
      return 1;
    v2 = *(_DWORD *)(a1 + 20);
    if (v2 >= 0xA0)
    {
      v3 = *(_BYTE *)(a1 + 124) ? 4097 : 641;
      if (v2 < v3 && (*(_DWORD *)(a1 + 24) - 8193) >= 0xFFFFE09F)
        return 1;
    }
    return 0;
  }
  return (*(_DWORD *)(a1 + 20) - 1281) >= 0xFFFFFB1B
      && (*(_DWORD *)(a1 + 24) - 1025) >= 0xFFFFFC1B;
}

uint64_t sub_20E7CA5CC(uint64_t result, _BYTE *a2, uint64_t a3)
{
  __CVBuffer *v5;
  _DWORD *v6;
  size_t BytesPerRow;
  size_t Height;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  __int128 v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  _DWORD v32[7];
  __int128 v33;
  uint64_t v34;
  _BYTE v35[28];
  _BYTE vars0[20];
  __int128 v37;

  if (result)
  {
    v5 = (__CVBuffer *)result;
    *(_WORD *)a3 = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *(_OWORD *)(a3 + 136) = 0u;
    result = (uint64_t)CVPixelBufferGetBaseAddress((CVPixelBufferRef)result);
    if (result)
    {
      v6 = (_DWORD *)result;
      BytesPerRow = CVPixelBufferGetBytesPerRow(v5);
      Height = CVPixelBufferGetHeight(v5);
      if (v6[2] < 2u)
        return 0;
      v9 = Height;
      result = 0;
      v10 = v6[12];
      if ((_DWORD)v10)
      {
        v11 = v9 * BytesPerRow;
        if (v11 >= v10)
        {
          result = 0;
          v12 = v6[10];
          if ((_DWORD)v12)
          {
            if (v11 >= v12)
            {
              v13 = (char *)v6 + v10;
              v37 = 0u;
              *(_OWORD *)&v35[12] = 0u;
              *(_OWORD *)vars0 = 0u;
              v14 = *(unsigned __int16 *)((char *)v6 + v10);
              v32[0] = *(_DWORD *)((char *)v6 + v10);
              v15 = *(unsigned int *)((char *)v6 + v10 + 4);
              v16 = *(unsigned int *)((char *)v6 + v10 + 8);
              v32[1] = *(_DWORD *)((char *)v6 + v10 + 4);
              v32[2] = v16;
              v17 = *(unsigned int *)((char *)v6 + v10 + 12);
              v18 = *(_DWORD *)((char *)v6 + v10 + 16);
              v32[3] = *(_DWORD *)((char *)v6 + v10 + 12);
              v32[4] = v18;
              v19 = *(_DWORD *)((char *)v6 + v10 + 20);
              v20 = *(_DWORD *)((char *)v6 + v10 + 24);
              v32[5] = v19;
              v32[6] = v20;
              v21 = *(_OWORD *)((char *)v6 + v10 + 28);
              v34 = *(_QWORD *)((char *)v6 + v10 + 44);
              v33 = v21;
              *(_QWORD *)&v35[16] = *(_QWORD *)((char *)v6 + v10 + 68);
              *(_OWORD *)v35 = *(_OWORD *)((char *)v6 + v10 + 52);
              v22 = *(_DWORD *)((char *)v6 + v10 + 80);
              *(_DWORD *)&v35[24] = *(_DWORD *)((char *)v6 + v10 + 76);
              *(_DWORD *)vars0 = v22;
              if (HIWORD(v32[0]) != 1)
              {
                if (HIWORD(v32[0]))
                  return 0;
                *(_WORD *)&vars0[4] = 257;
                goto LABEL_24;
              }
              *(_OWORD *)&vars0[4] = *(_OWORD *)(v13 + 84);
              v37 = *((_OWORD *)v13 + 7);
              v23 = vars0[4];
              if (!vars0[4])
                return 0;
              if (vars0[4] == 1)
              {
LABEL_24:
                result = 0;
                if (v19 - 1281 < 0xFFFFFB1B || (v20 - 1025) < 0xFFFFFC1B)
                  return result;
                v23 = 1;
                goto LABEL_27;
              }
              if (vars0[4] != 2)
              {
LABEL_27:
                *(_DWORD *)(a3 + 32) = v19;
                *(_DWORD *)(a3 + 36) = v20;
                *(_WORD *)a3 = v18;
                if ((unsigned __int16)v18 - 7 < 0xFFFFFFFA)
                  return 0;
                goto LABEL_28;
              }
              if (v19 < 0xA0)
                return 0;
              result = 0;
              if (BYTE12(v37))
                v24 = 4097;
              else
                v24 = 641;
              if (v19 < v24 && (v20 - 8193) >= 0xFFFFE09F)
              {
                v23 = 2;
                *(_DWORD *)(a3 + 32) = v19;
                *(_DWORD *)(a3 + 36) = v20;
                *(_WORD *)a3 = v18;
                if ((unsigned __int16)v18 - 7 < 0xFFFFFFFA)
                  return 0;
LABEL_28:
                v25 = *(unsigned int *)&vars0[8];
                *(_DWORD *)(a3 + 4) = v15;
                *(_DWORD *)(a3 + 8) = v25;
                *(_DWORD *)(a3 + 12) = v22;
                v26 = vars0[6];
                *(_BYTE *)(a3 + 18) = vars0[6] != 0;
                *(_BYTE *)(a3 + 16) = vars0[5] != 0;
                *(_BYTE *)(a3 + 17) = v23;
                *(_BYTE *)(a3 + 19) = vars0[7] != 0;
                *(_QWORD *)(a3 + 24) = *(_QWORD *)((char *)&v37 + 4);
                if (v15 > v14)
                  return 0;
                if (v23 == 1)
                  v27 = v10;
                else
                  v27 = v12;
                if (a2[2])
                {
                  if (!(_DWORD)v15)
                  {
                    v28 = 0;
                    *(_QWORD *)(a3 + 136) = 0;
                    if (!a2[3])
                      goto LABEL_44;
                    goto LABEL_43;
                  }
                  if (v27 + v16 + 24 * (unint64_t)v15 > v11)
                    return 0;
                  *(_QWORD *)(a3 + 136) = (char *)v6 + v27 + v16;
                }
                if (!a2[3])
                {
LABEL_44:
                  if (!*a2 || (result = sub_20E7CAA5C(v5, v12, (uint64_t)v32, (unsigned __int16 *)a3), (_DWORD)result))
                  {
                    if (a2[4])
                    {
                      v29 = 0;
                      if (v26 && *(_DWORD *)(a3 + 8))
                      {
                        if (v10 + 8 * v25 + *(unsigned int *)&vars0[12] > v11)
                          return 0;
                        v29 = &v13[*(unsigned int *)&vars0[12]];
                      }
                      *(_QWORD *)(a3 + 152) = v29;
                    }
                    if (a2[5])
                    {
                      if (v26 && (v30 = *(unsigned int *)(a3 + 4), (_DWORD)v30))
                      {
                        if (v10 + 4 * v30 > v11)
                          return 0;
                        v31 = (char *)v6 + v10;
                      }
                      else
                      {
                        v31 = 0;
                      }
                      *(_QWORD *)(a3 + 160) = v31;
                    }
                    return 1;
                  }
                  return result;
                }
                if ((_DWORD)v15)
                {
                  if ((unint64_t)(v27 + v17) + (v15 << 6) > v11)
                    return 0;
                  v28 = (char *)v6 + v27 + v17;
                }
                else
                {
                  v28 = 0;
                }
LABEL_43:
                *(_QWORD *)(a3 + 144) = v28;
                goto LABEL_44;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 sub_20E7CA99C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  __n128 result;

  *(_OWORD *)(a2 + 544) = 0u;
  *(_OWORD *)(a2 + 560) = 0u;
  *(_OWORD *)(a2 + 512) = 0u;
  *(_OWORD *)(a2 + 528) = 0u;
  *(_OWORD *)(a2 + 480) = 0u;
  *(_OWORD *)(a2 + 496) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 464) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_WORD *)a2 = *(_WORD *)a1;
  v2 = *(unsigned __int16 *)(a1 + 2);
  *(_WORD *)(a2 + 2) = v2;
  *(_OWORD *)(a2 + 4) = *(_OWORD *)(a1 + 4);
  *(_QWORD *)(a2 + 20) = *(_QWORD *)(a1 + 20);
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(a1 + 28);
  *(_QWORD *)(a2 + 44) = *(_QWORD *)(a1 + 44);
  *(_OWORD *)(a2 + 52) = *(_OWORD *)(a1 + 52);
  *(_QWORD *)(a2 + 68) = *(_QWORD *)(a1 + 68);
  result.n128_u64[0] = *(_QWORD *)(a1 + 76);
  *(_QWORD *)(a2 + 76) = result.n128_u64[0];
  if (v2 == 1)
  {
    *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 84);
    *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 100);
    result = *(__n128 *)(a1 + 112);
    *(__n128 *)(a2 + 112) = result;
  }
  else if (!v2)
  {
    *(_WORD *)(a2 + 84) = 257;
  }
  return result;
}

uint64_t sub_20E7CAA5C(__CVBuffer *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t result;
  uint64_t v9;
  size_t BytesPerRow;
  size_t Height;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int *v16;
  CVPixelBufferRef *i;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __CVBuffer **v23;
  __CVBuffer *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  size_t v28;

  result = (uint64_t)CVPixelBufferGetBaseAddress(a1);
  if (result)
  {
    v9 = result;
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    Height = CVPixelBufferGetHeight(a1);
    v12 = *(unsigned __int8 *)(a3 + 84);
    if (*(_BYTE *)(a3 + 84))
    {
      v25 = *((_DWORD *)a4 + 9);
      v26 = *((_DWORD *)a4 + 8);
      if (v12 != 1)
      {
        if (v12 == 2)
        {
          v13 = *(_DWORD *)(a3 + 20);
          if (v13 < 0xA0)
            return 0;
          v14 = *(_BYTE *)(a3 + 124) ? 4097 : 641;
          if (v13 >= v14 || (*(_DWORD *)(a3 + 24) - 8193) < 0xFFFFE09F)
            return 0;
        }
LABEL_14:
        if (!*a4)
          return 1;
        v15 = 0;
        v27 = v9 + a2;
        v28 = Height * BytesPerRow;
        v16 = (unsigned int *)(a3 + 52);
        for (i = (CVPixelBufferRef *)(a4 + 24); ; i += 2)
        {
          v18 = v26 >> v15;
          v19 = v25 >> v15;
          v20 = *(v16 - 6);
          v21 = (((_DWORD)v18 + 63) & 0xFFFFFFC0) * v19 + a2;
          if (v21 + v20 > v28)
            break;
          if (v21 + (unint64_t)*v16 > v28)
            break;
          if (CVPixelBufferCreateWithBytes(0, v26 >> v15, v25 >> v15, 0x4C303038u, (void *)(v27 + v20), ((_DWORD)v18 + 63) & 0xFFFFFFC0, (CVPixelBufferReleaseBytesCallback)j__CVPixelBufferRelease, a1, 0, i - 1))
          {
            break;
          }
          if (!*(i - 1))
            break;
          CVPixelBufferRetain(a1);
          if (CVPixelBufferCreateWithBytes(0, v18, v19, 0x4C303038u, (void *)(v27 + *v16), ((_DWORD)v18 + 63) & 0xFFFFFFC0, (CVPixelBufferReleaseBytesCallback)j__CVPixelBufferRelease, a1, 0, i))
          {
            if (!*i)
              break;
          }
          CVPixelBufferRetain(a1);
          ++v15;
          ++v16;
          result = 1;
          if (v15 >= *a4)
            return result;
        }
        if (*a4)
        {
          v22 = 0;
          v23 = (__CVBuffer **)(a4 + 24);
          do
          {
            CVPixelBufferRelease(*(v23 - 1));
            v24 = *v23;
            v23 += 2;
            CVPixelBufferRelease(v24);
            ++v22;
          }
          while (v22 < *a4);
        }
        return 0;
      }
      if ((*(_DWORD *)(a3 + 20) - 1281) >= 0xFFFFFB1B
        && (*(_DWORD *)(a3 + 24) - 1025) >= 0xFFFFFC1B)
      {
        goto LABEL_14;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_20E7CACB4(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int32 *v22;
  uint64_t v23;
  float *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  __int32 *v28;
  int32x2_t v29;
  float *v30;
  uint64_t v31;
  int v32;
  int v33;
  float *v34;
  _DWORD *v35;
  int *v36;
  int v37;
  float32x2x2_t v38;
  float32x2x2_t v39;

  if (*(_BYTE *)(result + 12))
  {
    v3 = *(_DWORD *)(result + 8);
    if (v3 == 2)
    {
      if (!a2)
        return result;
      v9 = *(_QWORD *)(result + 584);
      if (a2 >= 4)
      {
        v10 = a2 & 0xFFFFFFFC;
        v28 = (__int32 *)(v9 + 120);
        v29 = (int32x2_t)0x100000000;
        v30 = (float *)(a3 + 16);
        v31 = v10;
        do
        {
          v39.val[0] = (float32x2_t)vadd_s32(v29, (int32x2_t)0x200000002);
          v39.val[1].i32[0] = *v28;
          v39.val[1].i32[1] = v28[13];
          v32 = *(v28 - 26);
          v33 = *(v28 - 13);
          v34 = v30 - 4;
          vst2_f32(v34, *(float32x2x2_t *)v29.i8);
          vst2_f32(v30, v39);
          v29 = vadd_s32(v29, (int32x2_t)0x400000004);
          v28 += 52;
          v30 += 8;
          v31 -= 4;
        }
        while (v31);
        if (v10 == a2)
          return result;
      }
      else
      {
        v10 = 0;
      }
      v35 = (_DWORD *)(a3 + 8 * v10 + 4);
      v36 = (int *)(v9 + 52 * v10 + 16);
      do
      {
        *(v35 - 1) = v10;
        v37 = *v36;
        v36 += 13;
        *v35 = v37;
        v35 += 2;
        ++v10;
      }
      while (a2 != v10);
      return result;
    }
    if (v3 == 3 && a2 != 0)
    {
      v5 = *(_QWORD *)(result + 584);
      if (a2 == 1)
      {
        v6 = 0;
LABEL_25:
        v25 = (_DWORD *)(a3 + 8 * v6 + 4);
        v26 = (_DWORD *)(v5 + 52 * v6 + 36);
        v27 = a2 - v6;
        do
        {
          *(v25 - 1) = *v26;
          *v25 = *(v26 - 5);
          v25 += 2;
          v26 += 13;
          --v27;
        }
        while (v27);
        return result;
      }
      v6 = a2 & 0xFFFFFFFE;
      v22 = (__int32 *)(v5 + 68);
      v23 = v6;
      v24 = (float *)a3;
      do
      {
        v38.val[0].i32[0] = *(v22 - 8);
        v38.val[0].i32[1] = v22[5];
        v38.val[1].i32[0] = *(v22 - 13);
        v38.val[1].i32[1] = *v22;
        vst2_f32(v24, v38);
        v24 += 4;
        v22 += 26;
        v23 -= 2;
      }
      while (v23);
      if (v6 != a2)
        goto LABEL_25;
    }
  }
  else
  {
    if (!*(_DWORD *)(result + 8))
      sub_20E80BCD8();
    if (a2)
    {
      v7 = *(_QWORD *)(result + 488);
      if (a2 >= 8)
      {
        v8 = a2 & 0xFFFFFFF8;
        v11 = (_OWORD *)(a3 + 32);
        v12 = (__int128 *)(v7 + 32);
        v13 = v8;
        do
        {
          v15 = *(v12 - 2);
          v14 = *(v12 - 1);
          v17 = *v12;
          v16 = v12[1];
          v12 += 4;
          *(v11 - 2) = v15;
          *(v11 - 1) = v14;
          *v11 = v17;
          v11[1] = v16;
          v11 += 4;
          v13 -= 8;
        }
        while (v13);
        if (v8 == a2)
          return result;
      }
      else
      {
        v8 = 0;
      }
      v18 = (_QWORD *)(a3 + 8 * v8);
      v19 = (uint64_t *)(v7 + 8 * v8);
      v20 = a2 - v8;
      do
      {
        v21 = *v19++;
        *v18++ = v21;
        --v20;
      }
      while (v20);
    }
  }
  return result;
}

uint64_t sub_20E7CAEA4(int64x2_t *a1, CVPixelBufferRef *a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _DWORD *BaseAddress;
  _DWORD *v12;
  unsigned int v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float v19;
  float v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  int *v32;
  unint64_t v33;
  int v34;
  uint64_t result;
  uint64_t v36;
  __int128 *v37;
  _OWORD *v38;
  unint64_t v39;
  __int128 v40;
  unint64_t v41;
  CVPixelBufferRef pixelBufferOut;

  v4 = a1[28].i64[0] - a1[27].i64[1];
  v5 = a1[20].i64[0];
  v6 = sub_20E7E26F0((uint64_t)a1);
  v7 = (24 * (v4 >> 8) + ((v4 >> 2) & 0xFFFFFFC0) + 127) & 0xFFFFFFC0;
  v8 = (8 * v6 + 576);
  v9 = a1[14].u8[8];
  v41 = v4 >> 8;
  pixelBufferOut = 0;
  if (v9)
    v10 = 4 * (v4 >> 8);
  else
    v10 = 0;
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (v10 + v8 + v7), 1uLL, 0x4C303038u, 0, &pixelBufferOut))
  {
    sub_20E80BD30();
  }
  CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBufferOut);
  if (!BaseAddress)
    sub_20E80BD04();
  v12 = BaseAddress;
  v13 = (24 * (v4 >> 8) + 63) & 0xFFFFFFC0;
  BaseAddress[2] = 3;
  BaseAddress[10] = 64;
  BaseAddress[12] = v7;
  v14 = (char *)BaseAddress + v7;
  bzero((char *)BaseAddress + v7, 0x240uLL);
  *((_WORD *)v14 + 1) = 1;
  v14[84] = 2;
  *((_DWORD *)v14 + 29) = v5 & 0xFFFFFFF;
  *((_DWORD *)v14 + 30) = HIDWORD(v5);
  v14[124] = a1->i32[2] == 3;
  *(int32x2_t *)(v14 + 20) = vmovn_s64(a1[1]);
  *(_WORD *)v14 = a1[5].i64[0];
  *((_DWORD *)v14 + 22) = v6;
  v15 = a1[14].u8[8];
  v14[86] = v15;
  *(_QWORD *)(v14 + 4) = v41;
  *((_DWORD *)v14 + 3) = v13;
  *((_DWORD *)v14 + 4) = 6;
  if ((_DWORD)v41)
  {
    v16 = a1[27].i64[1];
    v17 = (v4 >> 8);
    v18 = (float *)(v12 + 21);
    do
    {
      *(v18 - 5) = (float)*(unsigned int *)v16 * 0.015625;
      *(v18 - 4) = (float)*(unsigned int *)(v16 + 4) * 0.015625;
      v19 = (float)*(unsigned int *)(v16 + 12) * 3.14159265 * 0.0078125;
      *(v18 - 3) = v19;
      v20 = pow(1.41421356, (float)((float)*(unsigned int *)(v16 + 8) * 0.0625));
      *(v18 - 2) = v20;
      *v18 = (float)*(unsigned int *)(v16 + 28);
      *((_BYTE *)v18 - 4) = *(_BYTE *)(v16 + 24) != 0;
      v16 += 256;
      v18 += 6;
      --v17;
    }
    while (v17);
    v21 = 0;
    v22 = (_OWORD *)((char *)v12 + v13 + 64);
    do
    {
      v23 = (_OWORD *)(a1[27].i64[1] + v21);
      v24 = v23[8];
      v25 = v23[9];
      v26 = v23[11];
      v22[2] = v23[10];
      v22[3] = v26;
      *v22 = v24;
      v22[1] = v25;
      v22 += 4;
      v21 += 256;
    }
    while ((unint64_t)(v4 >> 8) << 8 != v21);
    v15 = v14[86];
    v7 = (24 * (v4 >> 8) + ((v4 >> 2) & 0xFFFFFFC0) + 127) & 0xFFFFFFC0;
  }
  if (v15)
  {
    v27 = *((_DWORD *)v14 + 22);
    if (v27)
    {
      *((_DWORD *)v14 + 23) = 576;
      sub_20E7CACB4((uint64_t)a1, v27, (uint64_t)(v14 + 576));
    }
    if ((_DWORD)v41 && !a1->i8[12])
    {
      *((_DWORD *)v14 + 24) = v8;
      v28 = a1[29].i64[0];
      v29 = (v4 >> 8);
      if (v29 < 8 || (unint64_t)v12 + v7 + v8 - v28 < 0x20)
      {
        v30 = 0;
LABEL_20:
        v31 = (_DWORD *)((char *)&v12[v30] + v8 + v7);
        v32 = (int *)(v28 + 4 * v30);
        v33 = v29 - v30;
        do
        {
          v34 = *v32++;
          *v31++ = v34;
          --v33;
        }
        while (v33);
        goto LABEL_22;
      }
      v36 = (v4 >> 8) & 7;
      v30 = v29 - v36;
      v37 = (__int128 *)(v28 + 16);
      v38 = (_OWORD *)((char *)v12 + v7 + v8 + 16);
      v39 = v29 - v36;
      do
      {
        v40 = *v37;
        *(v38 - 1) = *(v37 - 1);
        *v38 = v40;
        v37 += 2;
        v38 += 2;
        v39 -= 8;
      }
      while (v39);
      if (v36)
        goto LABEL_20;
    }
  }
LABEL_22:
  result = CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
  *a2 = pixelBufferOut;
  return result;
}

uint64_t sub_20E7CB218()
{
  unint64_t v0;
  int64x2_t v1;
  uint8x16_t v2;
  __int32 v3;

  v0 = MGGetProductType();
  v1 = vdupq_n_s64(v0);
  v2 = (uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EB70), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EB80)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EB90), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EBA0))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EBB0), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EBC0)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EBD0), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EBE0))));
  v2.i8[0] = vmaxvq_u8(v2);
  v3 = v2.i32[0];
  *(int16x4_t *)v2.i8 = vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EBF0), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EC00)));
  v2.i16[0] = vmaxv_u16(*(uint16x4_t *)v2.i8);
  return (v3 | v2.i32[0]) & 1 | (v0 == 3599094683) | (v0 == 3863625342);
}

uint64_t sub_20E7CB30C()
{
  unint64_t v0;
  int64x2_t v1;

  v0 = MGGetProductType();
  v1 = vdupq_n_s64(v0);
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EC10), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EC20)))) & 1 | (v0 == 3397214291) | (v0 == 3215673114);
}

uint64_t sub_20E7CB378()
{
  unint64_t v0;
  int64x2_t v1;

  v0 = MGGetProductType();
  v1 = vdupq_n_s64(v0);
  return vmaxvq_u8((uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EC30), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EC40)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EC50), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EC60))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EC70), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EC80)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80EC90), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80ECA0))))) & 1 | (v0 == 4242862982) | (v0 == 1878257790);
}

uint64_t sub_20E7CB440()
{
  unint64_t v0;
  int64x2_t v1;

  v0 = MGGetProductType();
  v1 = vdupq_n_s64(v0);
  return vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80ECB0), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80ECC0)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80ECD0), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80ECE0))))) & 1 | (v0 == 2021146989);
}

uint64_t sub_20E7CB4B8()
{
  unint64_t v0;
  int64x2_t v1;

  v0 = MGGetProductType();
  v1 = vdupq_n_s64(v0);
  return vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80ECF0), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80ED00)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80ED10), (int32x4_t)vceqq_s64(v1, (int64x2_t)xmmword_20E80ED20))))) & 1 | (v0 == 2089455188);
}

uint64_t sub_20E7CB530()
{
  int64x2_t v0;

  v0 = vdupq_n_s64(MGGetProductType());
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_20E80ED30), (int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_20E80ED40)))) & 1;
}

BOOL sub_20E7CB574()
{
  uint64_t v0;

  v0 = MGGetProductType();
  return v0 == 133314240 || v0 == 2941181571;
}

uint64_t sub_20E7CB5A4()
{
  int64x2_t v0;

  v0 = vdupq_n_s64(MGGetProductType());
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_20E80ED50), (int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_20E80ED60)))) & 1;
}

uint64_t sub_20E7CB5E8()
{
  int64x2_t v0;

  v0 = vdupq_n_s64(MGGetProductType());
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_20E80ED70), (int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_20E80ED80)))) & 1;
}

uint64_t CVHWAGetLaccMatchSupported_0()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64x2_t v5;

  v0 = MGGetProductType();
  if (v0 > 2940697644)
  {
    if (v0 == 2940697645 || v0 == 3825599860)
      return 1;
  }
  else if (v0 == 2688879999 || v0 == 2793418701)
  {
    return 1;
  }
  v2 = MGGetProductType();
  if (v2 == 133314240 || v2 == 2941181571)
    return 1;
  v3 = MGGetProductType();
  if (v3 <= 2619317133)
  {
    if (v3 != 555503454)
    {
      v4 = 2487868872;
      goto LABEL_14;
    }
    return 1;
  }
  if (v3 == 2619317134)
    return 1;
  v4 = 3241053352;
LABEL_14:
  if (v3 == v4)
    return 1;
  v5 = vdupq_n_s64(MGGetProductType());
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v5, (int64x2_t)xmmword_20E80ED70), (int32x4_t)vceqq_s64(v5, (int64x2_t)xmmword_20E80ED80)))) & 1;
}

uint64_t sub_20E7CB758(uint64_t result, unsigned int *a2, signed int *a3, signed int a4, int a5)
{
  signed int v5;
  int v6;
  int v7;
  int v8;

  if ((int)result <= 0)
    sub_20E80BE38();
  if ((a5 & a4) == 0xFFFFFFFF || !a4 && a5 == (_DWORD)result)
  {
    v5 = result / 5;
    *a2 = (result % 5) >> 1;
    *a3 = result / 5;
    a4 = *a2;
  }
  else
  {
    if (a5 > (int)result || a4 < 0 || (v6 = a5 - a4, a5 <= a4))
      sub_20E80BDE0();
    if (v6 >= 16)
      v7 = (v6 + 4) / 5;
    else
      v7 = 4;
    if (v7 >= (unsigned __int16)(result / 5))
      v7 = (unsigned __int16)(result / 5);
    *a3 = v7;
    *a2 = a4;
    v5 = *a3;
    v8 = 5 * *a3 + a4;
    if (v8 >= (int)result)
    {
      a4 = result - 5 * *a3;
      *a2 = a4;
      v5 = *a3;
      v8 = 5 * *a3 + a4;
    }
    if (v8 < a5)
      sub_20E80BE0C();
  }
  if (a4 < 0)
    sub_20E80BDB4();
  if (5 * v5 + a4 > (int)result)
    sub_20E80BD5C();
  if (v5 <= 3)
    sub_20E80BD88();
  return result;
}

uint64_t sub_20E7CB878(int a1, int a2, int a3)
{
  float v5;
  float v6;
  float v7;
  double v8;

  v5 = log2f(256.0 / (float)a1);
  v6 = log2f((float)(a3 * a2));
  v7 = log2f((float)a2) + -1.0;
  v8 = fmin((double)(int)fmin(fmin((double)(int)(float)(v5 + -1.0), (double)(int)(float)(v6 + -1.0)), (double)((int)v7 - ((float)((float)(int)v7 - v7) == 0.0))), 4.0);
  if ((int)v8 >= 0)
    return (1 << (int)v8);
  else
    return 0;
}

uint64_t sub_20E7CB93C(unsigned int a1, unsigned int a2, int a3, unint64_t a4)
{
  float v6;
  int v7;
  int v8;
  uint64_t result;

  v6 = (float)a4;
  v7 = (int)fmaxf(log2f((float)a2 / (float)a4) + 1.0, 0.0);
  v8 = (int)fmaxf(log2f((float)a1 / v6) + 1.0, 0.0);
  if (v8 >= v7)
    v8 = v7;
  if (v8 <= a3)
    result = v8;
  else
    result = a3;
  if ((int)result > a3)
    sub_20E80BE64();
  return result;
}

uint64_t sub_20E7CB9CC(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  int64x2_t *v16;
  uint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  int64x2_t v24;
  int64x2_t *v25;
  int64x2_t v26;
  uint64_t v27;
  int64x2_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _OWORD *v39;
  _QWORD *v40;
  char *v41;
  unint64_t v42;
  _BYTE *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  _OWORD *v49;
  unint64_t *v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  int v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  int v79;
  unsigned int v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t *v83;

  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *a2;
  v9 = -1030792151 * ((a2[1] - *a2) >> 3) - 1;
  v10 = operator new(0x180uLL);
  *v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  v10[8] = 0u;
  v10[9] = 0u;
  v10[10] = 0u;
  v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  v10[15] = 0u;
  v10[16] = 0u;
  v10[17] = 0u;
  v10[18] = 0u;
  v10[19] = 0u;
  v10[20] = 0u;
  v10[21] = 0u;
  v10[22] = 0u;
  v10[23] = 0u;
  if ((_DWORD)v9)
  {
    v79 = a4;
    v80 = v7;
    v11 = 0;
    v81 = v6;
    v82 = v9;
    while (1)
    {
      v13 = *v6 + 200 * v11;
      if (*(_DWORD *)(v13 + 16) == 0x3FFF)
        goto LABEL_5;
      v14 = (*(_DWORD *)(v13 + 12) >> 5) + 8 * *(unsigned __int8 *)(v13 + 24);
      v15 = (char *)v10 + 24 * v14;
      v16 = *(int64x2_t **)v15;
      v17 = (uint64_t *)(v15 + 8);
      v18 = (unint64_t *)*((_QWORD *)v15 + 1);
      v19 = v11 >> 5;
      if (*(unint64_t **)v15 != v18)
        break;
LABEL_17:
      v30 = (char *)v10 + 24 * v14;
      v33 = *((_QWORD *)v30 + 2);
      v31 = v30 + 16;
      v32 = v33;
      if ((unint64_t)v18 >= v33)
      {
        v83 = (uint64_t *)(v15 + 8);
        v34 = (char *)v18 - (char *)v16;
        v35 = ((char *)v18 - (char *)v16) >> 3;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61)
          sub_20E78D874();
        v37 = v32 - (_QWORD)v16;
        if (v37 >> 2 > v36)
          v36 = v37 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          if (v38 >> 61)
            sub_20E78D888();
          v39 = v10;
          v40 = v31;
          v41 = v15;
          v42 = v38;
          v43 = operator new(8 * v38);
          v15 = v41;
          v31 = v40;
          v38 = v42;
          v10 = v39;
          v35 = ((char *)v18 - (char *)v16) >> 3;
          v34 = (char *)v18 - (char *)v16;
          v44 = (unint64_t *)&v43[8 * v35];
          *v44 = v19;
          v12 = (uint64_t)(v44 + 1);
          if (v16 != (int64x2_t *)v18)
          {
LABEL_27:
            v45 = (char *)(v18 - 1) - (char *)v16;
            if (v45 < 0x58)
            {
              v6 = v81;
              v9 = v82;
              goto LABEL_35;
            }
            v6 = v81;
            v9 = v82;
            if ((unint64_t)((char *)v18 - &v43[v34]) < 0x20)
              goto LABEL_92;
            v46 = (v45 >> 3) + 1;
            v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
            v48 = &v18[v47 / 0xFFFFFFFFFFFFFFF8];
            v44 = (unint64_t *)((char *)v44 - v47);
            v49 = &v43[8 * v35 - 16];
            v50 = v18 - 2;
            v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v52 = *(_OWORD *)v50;
              *(v49 - 1) = *((_OWORD *)v50 - 1);
              *v49 = v52;
              v49 -= 2;
              v50 -= 4;
              v51 -= 4;
            }
            while (v51);
            v18 = v48;
            if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_92:
              do
              {
LABEL_35:
                v53 = *--v18;
                *--v44 = v53;
              }
              while (v18 != (unint64_t *)v16);
            }
LABEL_36:
            *(_QWORD *)v15 = v44;
            v17 = v83;
            *v83 = v12;
            *v31 = &v43[8 * v38];
            if (v16)
              operator delete(v16);
            goto LABEL_4;
          }
        }
        else
        {
          v43 = 0;
          v44 = (unint64_t *)(8 * v35);
          *(_QWORD *)(8 * v35) = v19;
          v12 = 8 * v35 + 8;
          if (v16 != (int64x2_t *)v18)
            goto LABEL_27;
        }
        v6 = v81;
        v9 = v82;
        goto LABEL_36;
      }
      *v18 = v19;
      v12 = (uint64_t)(v18 + 1);
LABEL_4:
      *v17 = v12;
LABEL_5:
      if (++v11 == v9)
      {
        v8 = *v6;
        a4 = v79;
        v7 = v80;
        goto LABEL_40;
      }
    }
    v20 = (char *)v18 - (char *)v16 - 8;
    if (v20 >= 0x18)
    {
      v23 = (v20 >> 3) + 1;
      v22 = (unint64_t *)v16 + (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v24 = vdupq_n_s64(v19);
      v25 = v16 + 1;
      v26 = 0uLL;
      v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      v28 = 0uLL;
      do
      {
        v26 = vsubq_s64(v26, vceqq_s64(v25[-1], v24));
        v28 = vsubq_s64(v28, vceqq_s64(*v25, v24));
        v25 += 2;
        v27 -= 4;
      }
      while (v27);
      v21 = vaddvq_s64(vaddq_s64(v28, v26));
      if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_16;
    }
    else
    {
      v21 = 0;
      v22 = *(unint64_t **)v15;
    }
    do
    {
      v29 = *v22++;
      if (v29 == v19)
        ++v21;
    }
    while (v22 != v18);
LABEL_16:
    if (v21)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_40:
  v54 = 0;
  v55 = 3 * (a4 + a3);
  if (v7 > (v55 ^ 0x7FFFFFFFu))
    v7 = 1;
  do
  {
    v56 = (char *)v10 + 24 * v54;
    v57 = *(_QWORD **)v56;
    v58 = (_QWORD *)*((_QWORD *)v56 + 1);
    while (v57 != v58)
    {
      v59 = (_DWORD *)(v8 + 128 + 6400 * (*v57 & 0x7FFFFFFLL));
      v60 = 32;
      do
      {
        if (*((_BYTE *)v59 - 104))
          v61 = a3;
        else
          v61 = 0;
        if (*(v59 - 28) == 0x3FFF)
          break;
        if (!*v59)
          *v59 = 3 * (*(v59 - 24) + v61) + v7;
        v59 += 50;
        --v60;
      }
      while (v60);
      ++v57;
    }
    ++v54;
  }
  while (v54 != 16);
  v62 = (void *)*((_QWORD *)v10 + 45);
  if (v62)
  {
    *((_QWORD *)v10 + 46) = v62;
    operator delete(v62);
  }
  v63 = (void *)*((_QWORD *)v10 + 42);
  if (v63)
  {
    *((_QWORD *)v10 + 43) = v63;
    operator delete(v63);
  }
  v64 = (void *)*((_QWORD *)v10 + 39);
  if (v64)
  {
    *((_QWORD *)v10 + 40) = v64;
    operator delete(v64);
  }
  v65 = (void *)*((_QWORD *)v10 + 36);
  if (v65)
  {
    *((_QWORD *)v10 + 37) = v65;
    operator delete(v65);
  }
  v66 = (void *)*((_QWORD *)v10 + 33);
  if (v66)
  {
    *((_QWORD *)v10 + 34) = v66;
    operator delete(v66);
  }
  v67 = (void *)*((_QWORD *)v10 + 30);
  if (v67)
  {
    *((_QWORD *)v10 + 31) = v67;
    operator delete(v67);
  }
  v68 = (void *)*((_QWORD *)v10 + 27);
  if (v68)
  {
    *((_QWORD *)v10 + 28) = v68;
    operator delete(v68);
  }
  v69 = (void *)*((_QWORD *)v10 + 24);
  if (v69)
  {
    *((_QWORD *)v10 + 25) = v69;
    operator delete(v69);
  }
  v70 = (void *)*((_QWORD *)v10 + 21);
  if (v70)
  {
    *((_QWORD *)v10 + 22) = v70;
    operator delete(v70);
  }
  v71 = (void *)*((_QWORD *)v10 + 18);
  if (v71)
  {
    *((_QWORD *)v10 + 19) = v71;
    operator delete(v71);
  }
  v72 = (void *)*((_QWORD *)v10 + 15);
  if (v72)
  {
    *((_QWORD *)v10 + 16) = v72;
    operator delete(v72);
  }
  v73 = (void *)*((_QWORD *)v10 + 12);
  if (v73)
  {
    *((_QWORD *)v10 + 13) = v73;
    operator delete(v73);
  }
  v74 = (void *)*((_QWORD *)v10 + 9);
  if (v74)
  {
    *((_QWORD *)v10 + 10) = v74;
    operator delete(v74);
  }
  v75 = (void *)*((_QWORD *)v10 + 6);
  if (v75)
  {
    *((_QWORD *)v10 + 7) = v75;
    operator delete(v75);
  }
  v76 = (void *)*((_QWORD *)v10 + 3);
  if (v76)
  {
    *((_QWORD *)v10 + 4) = v76;
    operator delete(v76);
  }
  v77 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *((_QWORD *)v10 + 1) = v77;
    operator delete(v77);
  }
  operator delete(v10);
  return v7 + v55;
}

void sub_20E7CBED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7CBEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7CBF00()
{
  JUMPOUT(0x212BC47D4);
}

int32x2_t sub_20E7CBF14(uint64_t a1, int a2, int a3, _QWORD *a4, _DWORD *a5, _QWORD *a6, _QWORD *a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v22;
  unsigned int v23;
  int32x2_t result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  *(_QWORD *)(a1 + 432) = 0x400000004;
  *(_OWORD *)(a1 + 400) = xmmword_20E80EDD0;
  *(_OWORD *)(a1 + 416) = unk_20E80EDE0;
  *(_QWORD *)(a1 + 576) = 0x3C00000024;
  *(_OWORD *)(a1 + 544) = xmmword_20E80EDF8;
  *(_OWORD *)(a1 + 560) = unk_20E80EE08;
  *(_BYTE *)(a1 + 1012) = 1;
  v7 = a2 + 2;
  if (a2 >= -1)
    v7 = a2 + 1;
  v8 = v7 >> 1;
  v9 = a3 + 2;
  if (a3 >= -1)
    v9 = a3 + 1;
  v10 = v9 >> 1;
  *(_DWORD *)(a1 + 164) = a3;
  *(_DWORD *)(a1 + 168) = v10;
  v11 = v8 + 2;
  if (v8 >= -1)
    v11 = v8 + 1;
  v12 = v11 >> 1;
  *(_DWORD *)(a1 + 188) = v8;
  *(_DWORD *)(a1 + 192) = v12;
  v13 = v10 + 2;
  if (v10 >= -1)
    v13 = v10 + 1;
  v14 = v13 >> 1;
  v15 = v12 + 2;
  if (v12 >= -1)
    v15 = v12 + 1;
  v16 = v15 >> 1;
  v17 = v14 + 2;
  if (v14 >= -1)
    v17 = v14 + 1;
  v18 = v17 >> 1;
  *(_DWORD *)(a1 + 172) = v14;
  *(_DWORD *)(a1 + 176) = v18;
  v19 = v16 + 2;
  if (v16 >= -1)
    v19 = v16 + 1;
  *(_DWORD *)(a1 + 196) = v16;
  *(_DWORD *)(a1 + 200) = v19 >> 1;
  v20 = v18 + 2;
  if (v18 >= -1)
    v20 = v18 + 1;
  *(_DWORD *)(a1 + 180) = v20 >> 1;
  *(_DWORD *)(a1 + 184) = a2;
  v22 = a2 < 321 || a3 < 321;
  *(_BYTE *)(a1 + 160) = v22;
  if (v22)
    v23 = 8;
  else
    v23 = 10;
  *(_DWORD *)(a1 + 204) = v23;
  *(_DWORD *)(a1 + 208) = v23 >> 1;
  result = vadd_s32(vdup_n_s32(v23), (int32x2_t)-2);
  *(int32x2_t *)(a1 + 212) = result;
  *(_QWORD *)a1 = *a4;
  v25 = a5[1];
  *(_DWORD *)(a1 + 40) = *a5 / 5;
  *(_DWORD *)(a1 + 44) = v25;
  *(_QWORD *)(a1 + 80) = *a6;
  *(_QWORD *)(a1 + 120) = *a7;
  *(_QWORD *)(a1 + 8) = a4[1];
  v26 = a5[3];
  *(_DWORD *)(a1 + 48) = a5[2] / 5;
  *(_DWORD *)(a1 + 52) = v26;
  *(_QWORD *)(a1 + 88) = a6[1];
  *(_QWORD *)(a1 + 128) = a7[1];
  *(_QWORD *)(a1 + 16) = a4[2];
  v27 = a5[5];
  *(_DWORD *)(a1 + 56) = a5[4] / 5;
  *(_DWORD *)(a1 + 60) = v27;
  *(_QWORD *)(a1 + 96) = a6[2];
  *(_QWORD *)(a1 + 136) = a7[2];
  *(_QWORD *)(a1 + 24) = a4[3];
  v28 = a5[7];
  *(_DWORD *)(a1 + 64) = a5[6] / 5;
  *(_DWORD *)(a1 + 68) = v28;
  *(_QWORD *)(a1 + 104) = a6[3];
  *(_QWORD *)(a1 + 144) = a7[3];
  *(_QWORD *)(a1 + 32) = a4[4];
  v29 = a5[9];
  *(_DWORD *)(a1 + 72) = a5[8] / 5;
  *(_DWORD *)(a1 + 76) = v29;
  *(_QWORD *)(a1 + 112) = a6[4];
  *(_QWORD *)(a1 + 152) = a7[4];
  return result;
}

double sub_20E7CC138(uint64_t a1)
{
  unint64_t v1;
  int32x2_t v2;
  int32x4_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  double result;

  v1 = 0;
  *(_DWORD *)(a1 + 124) = 1;
  *(_DWORD *)(a1 + 132) = 1;
  v2 = vdup_n_s32(0x989680u);
  *(int32x2_t *)(a1 + 992) = v2;
  *(_DWORD *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 148) = 1;
  *(int32x2_t *)(a1 + 1000) = v2;
  v3.i64[0] = -1;
  v3.i64[1] = -1;
  *(int32x4_t *)(a1 + 444) = v3;
  *(int32x4_t *)(a1 + 300) = v3;
  *(_DWORD *)(a1 + 156) = 1;
  *(_DWORD *)(a1 + 1008) = 10000000;
  *(_DWORD *)(a1 + 460) = -1;
  *(_DWORD *)(a1 + 316) = -1;
  v3.i64[0] = 0x100000001;
  v3.i64[1] = 0x100000001;
  v4 = vsubq_s32(v3, *(int32x4_t *)(a1 + 560));
  *(int32x4_t *)(a1 + 464) = vsubq_s32(v3, *(int32x4_t *)(a1 + 544));
  *(int32x4_t *)(a1 + 480) = v4;
  v5 = vsubq_s32(v3, *(int32x4_t *)(a1 + 400));
  v6 = vsubq_s32(v3, *(int32x4_t *)(a1 + 416));
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(int32x4_t *)(a1 + 320) = v5;
  *(int32x4_t *)(a1 + 336) = v6;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(int32x2_t *)(a1 + 496) = vsub_s32((int32x2_t)0x100000001, *(int32x2_t *)(a1 + 576));
  *(int32x2_t *)(a1 + 352) = vsub_s32((int32x2_t)0x100000001, *(int32x2_t *)(a1 + 432));
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  v7 = 588;
  v8 = 712;
  *(_DWORD *)(a1 + 440) = 0;
  do
  {
    v9 = v1 >> 1;
    v10 = (_DWORD *)(a1 + 8 * (v1 >> 1));
    v11 = a1 + 4 * v1;
    *(_DWORD *)(v11 + 260) = v10[21];
    *(_DWORD *)(v11 + 220) = v10[31];
    v12 = (_DWORD *)(a1 + v7);
    *v12 = 0;
    v13 = v10[1];
    v12[10] = v13;
    v14 = v10[1] + v10[11] - 1;
    if (v14 >= *(_DWORD *)(a1 + 4 * (v1 >> 1) + 164) - 1)
      v14 = *(_DWORD *)(a1 + 4 * (v1 >> 1) + 164) - 1;
    v15 = a1 + v8;
    *(_QWORD *)v15 = 0;
    v12[20] = v14;
    result = (double)(v13 << v9);
    *(double *)(v15 + 80) = result;
    *(double *)(v15 + 160) = (double)(v14 << v9);
    v12[91] = 10000000;
    ++v1;
    v7 += 4;
    v8 += 8;
  }
  while (v1 != 10);
  return result;
}

void sub_20E7CC288(_DWORD *a1)
{
  int v2;
  int v3;
  uint64_t i;
  double *v5;
  double v6;
  int v7;
  double v8;
  unsigned int v9;
  int v10;
  double v11;
  double v12;
  int v13;
  _DWORD *v14;
  int v15;

  memset_pattern16(a1 + 126, &unk_20E80EE20, 0x28uLL);
  v2 = a1[53];
  if (v2 >= 2)
  {
    v3 = 0;
    for (i = 1; i < v2; ++i)
    {
      v5 = (double *)&a1[2 * i];
      v6 = v5[89];
      if (v6 <= v5[109])
      {
        v7 = 1;
        v8 = v6 - (double)(1 << (i >> 1));
        do
        {
          v9 = v3 + v7;
          if (a1[54] >= v3 + v7)
            v10 = v3 + v7;
          else
            v10 = a1[54];
          v11 = floor(v8 / (double)(1 << (v10 >> 1)) * 128.0 + 0.5) * 0.0078125;
          if ((v9 & 1) != 0)
            v12 = 1.9375;
          else
            v12 = 0.9375;
          v13 = vcvtmd_s64_f64(floor((v11- floor(floor(pow(1.41421356, v12) * 4096.0 + 0.5)* 0.000244140625* (double)(1 << ((v9 >> 1) - (v10 >> 1) + 1))* 128.0+ 0.5)* 0.0078125)* 64.0+ 0.5)* 0.015625);
          v14 = &a1[v10];
          v15 = v13 & ~(v13 >> 31);
          if (v15 >= v14[126])
            v15 = v14[126];
          v14[126] = v15;
          ++v7;
        }
        while (v7 != 8);
        v2 = a1[53];
      }
      ++v3;
    }
  }
}

uint64_t sub_20E7CC444(_DWORD *a1)
{
  uint64_t v2;
  uint64_t i;
  _DWORD *v4;
  int v5;
  int32x2_t v6;
  int32x2_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t v21;
  int32x4_t *v22;
  int32x4_t v23;
  uint64_t v24;
  int32x4_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  uint64_t v31;

  sub_20E7CC288(a1);
  memset_pattern16(a1 + 90, &unk_20E80EE20, 0x28uLL);
  v2 = a1[53];
  if ((int)v2 >= 2)
  {
    for (i = 1; i != v2; a1[i + 90] = v13)
    {
      while (1)
      {
        v4 = &a1[i];
        v5 = v4[147];
        if (v5 <= v4[167])
          break;
        if (++i == v2)
          goto LABEL_19;
      }
      if ((i & 1) != 0)
      {
        if (v5 >= 1)
          v9 = v5 - 1;
        else
          v9 = v4[147];
        v10 = v9 >> 1;
        v7 = vdup_n_s32(v5 - 1);
        if (v5 >= 0)
          v11 = v4[147];
        else
          v11 = v5 + 1;
        v12 = (v11 >> 1) - 1;
        if ((v5 & 1) != 0)
          v8 = v10;
        else
          v8 = v12;
      }
      else
      {
        v6.i32[0] = 2 * v5;
        v6.i32[1] = v4[147];
        v7 = vadd_s32(v6, (int32x2_t)-2);
        v8 = v7.i32[1];
      }
      *(int32x2_t *)&a1[i + 89] = vmin_s32(vmax_s32(v7, 0), *(int32x2_t *)&a1[i + 89]);
      ++i;
      v13 = v8 & ~(v8 >> 31);
      if (v13 >= a1[i + 90])
        v13 = a1[i + 90];
    }
  }
LABEL_19:
  v14 = a1[111] + 1;
  a1[111] = v14;
  v15 = a1[52];
  if ((int)v15 > 1)
  {
    v16 = v15 - 1;
    v17 = a1 + 112;
    do
    {
      v19 = v14 - 5;
      v18 = v14 < 5;
      v20 = v14 - 4;
      if (!v18)
        v20 = v19;
      v14 = v20 >> 1;
      if (v14 < 0)
        v14 = -1;
      *v17++ = v14;
      --v16;
    }
    while (v16);
  }
  if ((int)v15 >= 1)
  {
    if (v15 < 8)
    {
      v21 = 0;
LABEL_32:
      v26 = v15 - v21;
      v27 = &a1[v21 + 111];
      do
      {
        *(v27 - 36) = (*v27 & ~(*v27 >> 31)) - 1;
        ++v27;
        --v26;
      }
      while (v26);
      goto LABEL_34;
    }
    v21 = v15 & 0x7FFFFFF8;
    v22 = (int32x4_t *)(a1 + 75);
    v23.i64[0] = -1;
    v23.i64[1] = -1;
    v24 = v15 & 0xFFFFFFF8;
    do
    {
      v25 = vaddq_s32(vmaxq_s32(v22[10], (int32x4_t)0), v23);
      *v22 = vaddq_s32(vmaxq_s32(v22[9], (int32x4_t)0), v23);
      v22[1] = v25;
      v22 += 2;
      v24 -= 8;
    }
    while (v24);
    if (v21 != v15)
      goto LABEL_32;
  }
LABEL_34:
  v28 = a1[54];
  if ((int)v28 >= 1)
  {
    for (j = 0; j != v28; ++j)
      a1[j + 117] = a1[((j + 1) >> 1) + 111] - a1[j + 137] + 1;
  }
  if ((v28 & 0x80000000) == 0)
  {
    v30 = 0;
    v31 = v28 + 1;
    do
    {
      a1[v30 + 80] = a1[(v30 >> 1) + 75] - a1[v30 + 100] + 1;
      ++v30;
    }
    while (v31 != v30);
  }
  return 1;
}

uint64_t sub_20E7CC674(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v1 = *(unsigned int *)(a1 + 212);
  if ((int)v1 < 1)
  {
    v3 = 0;
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v4 = 592;
    do
    {
      v6 = v2 + 1;
      v7 = *(_DWORD *)(a1 + v4);
      v8 = *(_DWORD *)(a1 + v4 + 80);
      if (v7 <= v8)
      {
        if (v7 >= -1)
          v9 = v7 + 1;
        else
          v9 = v7 + 2;
        v10 = v9 >> 1;
        if (v7 >= 0)
          v11 = *(_DWORD *)(a1 + v4);
        else
          v11 = v7 + 1;
        v12 = v11 >> 1;
        if ((v7 & 1) != 0)
          v13 = v10;
        else
          v13 = v12 + 1;
        v14 = 2 * v7 + 2;
        v15 = v7 + 1;
        if ((v6 & 1) != 0)
        {
          v14 = v7 + 1;
          v16 = v13;
        }
        else
        {
          v16 = v7 + 1;
        }
        v17 = v2 >> 1;
        v18 = v6 >> 1;
        if (*(_BYTE *)(a1 + 1012))
        {
          v19 = a1 + 164;
          if (v14 >= *(_DWORD *)(a1 + 164 + 4 * v17) - 1)
            v14 = *(_DWORD *)(a1 + 164 + 4 * v17) - 1;
          if (v15 >= *(_DWORD *)(v19 + 4 * v18) - 1)
            v15 = *(_DWORD *)(v19 + 4 * v18) - 1;
          v20 = *(_DWORD *)(v19 + 4 * ((v2 + 2) >> 1)) - 1;
          if (v16 >= v20)
            v16 = v20;
        }
        if (*(_DWORD *)(a1 + 4 * v17 + 300) >= v14
          && *(_DWORD *)(a1 + 4 * v18 + 300) >= v15
          && *(_DWORD *)(a1 + 4 * ((v2 + 2) >> 1) + 300) >= v16)
        {
          v5 = v7 + 1;
          *(_DWORD *)(a1 + v4) = v7 + 1;
          v21 = a1 + 4 * v2;
          if (v7 + 1 == *(_DWORD *)(v21 + 224) + *(_DWORD *)(v21 + 264) || v7 >= v8)
          {
            if (v7 >= v8)
              v5 = 1000000;
            *(_DWORD *)(v21 + 264) = v5;
          }
          v3 = 1;
        }
      }
      v4 += 4;
      v2 = v6;
    }
    while (v1 != v6);
  }
  return v3 & 1;
}

BOOL sub_20E7CC7C4(uint64_t a1, int a2, double a3)
{
  int v3;
  int v4;
  int v5;
  int v8;
  double v9;
  int v10;
  int v11;
  signed int v12;
  _BOOL8 result;
  int v15;
  int v16;
  double v17;
  double v18;
  signed int v19;
  uint64_t v20;

  if (a2 >= 0)
    v3 = a2;
  else
    v3 = a2 + 1;
  v4 = v3 >> 1;
  v5 = (int)a3 >> v4;
  if (v5 >= *(_DWORD *)(a1 + 4 * a2 + 588) || v5 >= *(_DWORD *)(a1 + 4 * a2 + 260))
    return 0;
  v8 = 0;
  v9 = *(double *)(a1 + 8 * a2 + 712) + (double)(1 << v4);
  v10 = *(_DWORD *)(a1 + 216);
  v11 = *(unsigned __int8 *)(a1 + 1012);
  do
  {
    v15 = a2 + v8;
    if (v10 >= a2 + v8)
      v16 = a2 + v8;
    else
      v16 = v10;
    v17 = floor(v9 / (double)(1 << (v16 >> 1)) * 128.0 + 0.5) * 0.0078125;
    if ((v15 & 1) != 0)
      v18 = 1.9375;
    else
      v18 = 0.9375;
    v19 = vcvtpd_s64_f64(floor((v17+ floor(floor(pow(1.41421356, v18) * 4096.0 + 0.5)* 0.000244140625* (double)(1 << ((v15 >> 1) - (v16 >> 1) + 1))* 128.0+ 0.5)* 0.0078125)* 64.0+ 0.5)* 0.015625);
    v20 = (uint64_t)v16 >> 1;
    if (v11 && *(_DWORD *)(a1 + 4 * v20 + 164) - 1 < v19)
      v19 = *(_DWORD *)(a1 + 4 * v20 + 164) - 1;
    v12 = *(_DWORD *)(a1 + 4 * v20 + 444);
    result = v12 >= v19;
  }
  while (v12 >= v19 && v8++ != 6);
  return result;
}

uint64_t sub_20E7CC984(uint64_t a1, uint64_t **a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unsigned int v33;
  double v34;
  _DWORD *v35;
  int v36;
  int v37;

  if (*(int *)(a1 + 212) >= 1)
  {
    v4 = 0;
    v5 = 1;
    while (1)
    {
      v10 = a1 + 8 * v5;
      v11 = *(double *)(v10 + 712);
      if (v11 <= *(double *)(v10 + 872) && sub_20E7CC7C4(a1, v5, *(double *)(v10 + 712)))
        break;
LABEL_6:
      if (v5++ >= *(int *)(a1 + 212))
        return v4 & 1;
    }
    if (v11 < *(double *)(a1 + 8 * v5 + 792))
    {
LABEL_35:
      v33 = v5 >> 1;
      v34 = *(double *)(v10 + 712) + (double)(1 << (v5 >> 1));
      *(double *)(v10 + 712) = v34;
      v35 = (_DWORD *)(a1 + 4 * v5);
      v36 = v35[147];
      if (v36 <= v35[167])
      {
        v37 = v36 + ~((int)v34 >> v33);
        if (v37 >= v35[238])
          v37 = v35[238];
        v35[238] = v37;
      }
      v6 = a1 + 4 * (v5 & 0xFFFFFFFE);
      v7 = *(_DWORD *)(v6 + 956);
      v8 = *(_DWORD *)(v6 + 952);
      if (v7 < v8)
        v8 = v7;
      *(_DWORD *)(a1 + 4 * v33 + 992) = v8;
      v4 = 1;
      goto LABEL_6;
    }
    v12 = (int)v11;
    v14 = a2[1];
    v13 = (unint64_t)a2[2];
    if ((unint64_t)v14 < v13)
    {
      *v14 = v12 | (v5 << 32);
      v15 = (uint64_t)(v14 + 1);
LABEL_34:
      a2[1] = (uint64_t *)v15;
      goto LABEL_35;
    }
    v16 = *a2;
    v17 = (char *)v14 - (char *)*a2;
    v18 = v17 >> 3;
    v19 = (v17 >> 3) + 1;
    if (v19 >> 61)
      sub_20E78D874();
    v20 = v13 - (_QWORD)v16;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        sub_20E78D888();
      v22 = operator new(8 * v21);
      v23 = (uint64_t *)&v22[8 * v18];
      *v23 = v12 | (v5 << 32);
      v15 = (uint64_t)(v23 + 1);
      if (v14 != v16)
      {
LABEL_22:
        v24 = (char *)(v14 - 1) - (char *)v16;
        if (v24 < 0x58)
          goto LABEL_45;
        if ((unint64_t)((char *)v14 - &v22[v17]) < 0x20)
          goto LABEL_45;
        v25 = (v24 >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v27 = &v14[v26 / 0xFFFFFFFFFFFFFFF8];
        v23 = (uint64_t *)((char *)v23 - v26);
        v28 = &v22[8 * v18 - 16];
        v29 = v14 - 2;
        v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          *v28 = v31;
          v28 -= 2;
          v29 -= 4;
          v30 -= 4;
        }
        while (v30);
        v14 = v27;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_45:
          do
          {
            v32 = *--v14;
            *--v23 = v32;
          }
          while (v14 != v16);
        }
        v14 = *a2;
        *a2 = v23;
        a2[1] = (uint64_t *)v15;
        a2[2] = (uint64_t *)&v22[8 * v21];
        if (!v14)
          goto LABEL_34;
LABEL_33:
        operator delete(v14);
        goto LABEL_34;
      }
    }
    else
    {
      v22 = 0;
      v23 = (uint64_t *)(8 * v18);
      *(_QWORD *)(8 * v18) = v12 | (v5 << 32);
      v15 = 8 * v18 + 8;
      if (v14 != v16)
        goto LABEL_22;
    }
    *a2 = v23;
    a2[1] = (uint64_t *)v15;
    a2[2] = (uint64_t *)&v22[8 * v21];
    if (!v14)
      goto LABEL_34;
    goto LABEL_33;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_20E7CCC24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;

  sub_20E7CC138(a1);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  while (1)
  {
    v4 = *(unsigned int *)(a1 + 212);
    if ((int)v4 < 1)
      break;
    if (*(double *)(a1 + 720) > *(double *)(a1 + 880))
    {
      v5 = 0;
      do
      {
        v6 = v5;
        if ((v4 + 1) - 2 == v5)
          break;
        v7 = a1 + 8 * v5;
        v8 = *(double *)(v7 + 728);
        v9 = *(double *)(v7 + 888);
        v5 = v6 + 1;
      }
      while (v8 > v9);
      if (v6 + 1 >= v4)
        break;
    }
    sub_20E7CC444((_DWORD *)a1);
    sub_20E7CC674(a1);
    sub_20E7CC984(a1, (uint64_t **)a2);
  }
}

void sub_20E7CCCCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E7CCCE8(uint64_t a1, __int128 *a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_20E7E2B60(a1, a2);
  *result = &off_24C9A8D60;
  return result;
}

void sub_20E7CCD08(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int *v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  char **v51;
  _QWORD *v52;
  char *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  char *v64;
  __int128 v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  void *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  __int128 **v94;
  __int128 *v95;
  __int128 *v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char *v106;
  void *v107;
  void *v108;
  uint64_t v112;
  char **v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD v120[8];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  char *v129;
  char *v130;
  uint64_t v131;
  _DWORD v132[27];
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  if (!a7)
  {
    v9 = *(_QWORD *)(a6 + 8) - *(_QWORD *)a6;
    if (v9 >= 1)
      bzero(*(void **)a6, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
    v10 = *(void **)(a6 + 24);
    v11 = *(_QWORD *)(a6 + 32) - (_QWORD)v10;
    if (v11 >= 1)
      bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
    v12 = *(void **)(a6 + 48);
    v13 = *(_QWORD *)(a6 + 56) - (_QWORD)v12;
    if (v13 >= 1)
      bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
    v14 = *(void **)(a6 + 72);
    v15 = *(_QWORD *)(a6 + 80) - (_QWORD)v14;
    if (v15 >= 1)
      bzero(v14, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
    v16 = *(void **)(a6 + 96);
    v17 = *(_QWORD *)(a6 + 104) - (_QWORD)v16;
    if (v17 >= 1)
      bzero(v16, 4 * (((unint64_t)v17 >> 2) - ((unint64_t)v17 > 3)) + 4);
    v18 = *(void **)(a6 + 120);
    v19 = *(_QWORD *)(a6 + 128) - (_QWORD)v18;
    if (v19 >= 1)
      bzero(v18, 4 * (((unint64_t)v19 >> 2) - ((unint64_t)v19 > 3)) + 4);
    v20 = *(void **)(a6 + 144);
    v21 = *(_QWORD *)(a6 + 152) - (_QWORD)v20;
    if (v21 >= 1)
      bzero(v20, 4 * (((unint64_t)v21 >> 2) - ((unint64_t)v21 > 3)) + 4);
    v22 = *(void **)(a6 + 168);
    v23 = *(_QWORD *)(a6 + 176) - (_QWORD)v22;
    if (v23 >= 1)
      bzero(v22, 4 * (((unint64_t)v23 >> 2) - ((unint64_t)v23 > 3)) + 4);
  }
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v24 = *(int *)(a1 + 16);
  if ((_DWORD)v24 != 2)
    sub_20E7C1E68((uint64_t)&v129, v24 - 2);
  v25 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 4);
  v117 = a1;
  if ((int)v25 >= 3)
  {
    v112 = (v25 - 1);
    v26 = 1;
    v115 = a4;
    while (1)
    {
      v118 = v26 - 1;
      v27 = (_QWORD *)(*a3 + 24 * (v26 - 1));
      v28 = v27[1] - *v27;
      if (v28)
        break;
LABEL_22:
      if (++v26 == v112)
        goto LABEL_60;
    }
    v29 = 0;
    v30 = v28 / 20;
    v116 = (_QWORD *)(a6 + 24 * v118);
    if (v30 <= 1)
      v31 = 1;
    else
      v31 = v30;
    while (1)
    {
      v39 = *v27 + 20 * v29;
      v40 = *(unsigned int *)(v39 + 8);
      if (v26 != v40)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKPValidatorAndRefiner.cpp", 63, "scale == kp_scale && \"scale mismatch\"", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      v41 = *(unsigned __int8 *)(v39 + 12);
      v42 = *(_DWORD *)(v39 + 16);
      v43 = (int)v40 >> 1;
      v44 = (int *)(*v27 + 20 * v29);
      v45 = *v44 >> v43;
      v46 = v44[1] >> v43;
      if (!sub_20E7E2D2C(a1, v45, v46, v26, *(_BYTE *)(v39 + 12) != 0, a2, v132))
        goto LABEL_29;
      v47 = v42 >= 0 ? v42 : -v42;
      if (*(_QWORD *)(a4 + 8 * v118) > v47)
        goto LABEL_29;
      sub_20E7E2E08(a1, v132, v45, v46, v26, v41 != 0, (uint64_t)&v121);
      if (!v48)
        goto LABEL_29;
      LODWORD(v49) = HIDWORD(v122) >> 5;
      if (HIDWORD(v122) >> 5 >= 0x3F)
        v49 = 63;
      else
        v49 = v49;
      v50 = *(_DWORD *)(*v116 + 4 * v49);
      if (v50 <= 0xFFE)
        *(_DWORD *)(*v116 + 4 * v49) = v50 + 1;
      v51 = (char **)&v129[24 * v118];
      v52 = v51 + 1;
      v53 = v51[1];
      v55 = v51 + 2;
      v54 = (unint64_t)v51[2];
      if ((unint64_t)v53 < v54)
      {
        v32 = v121;
        v33 = v122;
        v34 = v124;
        *((_OWORD *)v53 + 2) = v123;
        *((_OWORD *)v53 + 3) = v34;
        *(_OWORD *)v53 = v32;
        *((_OWORD *)v53 + 1) = v33;
        v35 = v125;
        v36 = v126;
        v37 = v128;
        *((_OWORD *)v53 + 6) = v127;
        *((_OWORD *)v53 + 7) = v37;
        *((_OWORD *)v53 + 4) = v35;
        *((_OWORD *)v53 + 5) = v36;
        v38 = v53 + 128;
      }
      else
      {
        v56 = *v51;
        v57 = (v53 - *v51) >> 7;
        v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) >> 57)
          sub_20E78D874();
        v59 = v54 - (_QWORD)v56;
        if (v59 >> 6 > v58)
          v58 = v59 >> 6;
        if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFF80)
          v60 = 0x1FFFFFFFFFFFFFFLL;
        else
          v60 = v58;
        if (v60)
        {
          v114 = (char **)&v129[24 * v118];
          if (v60 >> 57)
            sub_20E78D888();
          v61 = v31;
          v62 = v51 + 1;
          v63 = v60;
          v64 = (char *)operator new(v60 << 7);
          v60 = v63;
          v52 = v62;
          v31 = v61;
          v51 = v114;
        }
        else
        {
          v64 = 0;
        }
        v65 = v126;
        v66 = &v64[128 * v57];
        *((_OWORD *)v66 + 4) = v125;
        *((_OWORD *)v66 + 5) = v65;
        v67 = v128;
        *((_OWORD *)v66 + 6) = v127;
        *((_OWORD *)v66 + 7) = v67;
        v68 = v122;
        *(_OWORD *)v66 = v121;
        *((_OWORD *)v66 + 1) = v68;
        v69 = v124;
        *((_OWORD *)v66 + 2) = v123;
        *((_OWORD *)v66 + 3) = v69;
        v70 = v66;
        if (v53 != v56)
        {
          a1 = v117;
          do
          {
            v71 = *((_OWORD *)v53 - 8);
            v72 = *((_OWORD *)v53 - 7);
            v73 = *((_OWORD *)v53 - 5);
            *((_OWORD *)v70 - 6) = *((_OWORD *)v53 - 6);
            *((_OWORD *)v70 - 5) = v73;
            *((_OWORD *)v70 - 8) = v71;
            *((_OWORD *)v70 - 7) = v72;
            v74 = *((_OWORD *)v53 - 4);
            v75 = *((_OWORD *)v53 - 3);
            v76 = *((_OWORD *)v53 - 1);
            *((_OWORD *)v70 - 2) = *((_OWORD *)v53 - 2);
            *((_OWORD *)v70 - 1) = v76;
            *((_OWORD *)v70 - 4) = v74;
            *((_OWORD *)v70 - 3) = v75;
            v70 -= 128;
            v53 -= 128;
          }
          while (v53 != v56);
          v53 = *v51;
          *v51 = v70;
          v38 = v66 + 128;
          *v52 = v66 + 128;
          *v55 = &v64[128 * v60];
          if (!v53)
            goto LABEL_28;
LABEL_59:
          operator delete(v53);
          goto LABEL_28;
        }
        a1 = v117;
        *v51 = v66;
        v38 = v66 + 128;
        *v52 = v66 + 128;
        *v55 = &v64[128 * v60];
        if (v53)
          goto LABEL_59;
      }
LABEL_28:
      *v52 = v38;
      a4 = v115;
LABEL_29:
      if (++v29 == v31)
        goto LABEL_22;
    }
  }
LABEL_60:
  if (*(_BYTE *)(a1 + 160))
    sub_20E7CD568(a1, (uint64_t *)&v129, a7);
  v77 = *(uint64_t **)(a1 + 8);
  v77[17] = 0;
  v77[18] = 0;
  v78 = v77[1];
  if (v78 <= 1)
    v78 = 1;
  v77[19] = v78 - 1;
  v79 = (void *)v77[20];
  v80 = v77[21] - (_QWORD)v79;
  if (v80 >= 1)
    bzero(v79, 8 * (((unint64_t)v80 >> 3) - ((unint64_t)v80 > 7)) + 8);
  v77[23] = 0;
  v77[24] = 0;
  v81 = *v77;
  if (*v77)
  {
    v82 = v77[25];
    if (v81 == 1)
    {
      v83 = 0;
LABEL_72:
      v87 = v81 - v83;
      v88 = (_QWORD *)(v82 + 24 * v83 + 8);
      do
      {
        *v88 = *(v88 - 1);
        v88 += 3;
        --v87;
      }
      while (v87);
      goto LABEL_74;
    }
    v83 = v81 & 0xFFFFFFFFFFFFFFFELL;
    v84 = (uint64_t *)(v82 + 24);
    v85 = v81 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v86 = *v84;
      *(v84 - 2) = *(v84 - 3);
      v84[1] = v86;
      v84 += 6;
      v85 -= 2;
    }
    while (v85);
    if (v81 != v83)
      goto LABEL_72;
  }
LABEL_74:
  v89 = (void *)v77[28];
  v90 = v77[29] - (_QWORD)v89;
  if (v90 >= 1)
    bzero(v89, 8 * (((unint64_t)v90 >> 3) - ((unint64_t)v90 > 7)) + 8);
  v92 = (uint64_t)v129;
  v91 = v130;
  if (v130 == v129)
  {
    v92 = (uint64_t)v130;
  }
  else
  {
    v93 = 0;
    do
    {
      v94 = (__int128 **)(v92 + 24 * v93);
      v95 = *v94;
      v96 = v94[1];
      if (*v94 != v96)
      {
        v97 = *(_QWORD *)(*(_QWORD *)(v117 + 8) + 224);
        v98 = *(_QWORD *)(a5 + 8 * v93);
        if (*(_QWORD *)(v97 + 8 * v93) < v98)
        {
          do
          {
            if (*(_QWORD *)(v97 + 8 * v93) < v98)
            {
              v99 = *(_QWORD **)(v117 + 8);
              v100 = v95[3];
              v102 = *v95;
              v101 = v95[1];
              v120[2] = v95[2];
              v120[3] = v100;
              v120[0] = v102;
              v120[1] = v101;
              v103 = v95[7];
              v105 = v95[4];
              v104 = v95[5];
              v120[6] = v95[6];
              v120[7] = v103;
              v120[4] = v105;
              v120[5] = v104;
              sub_20E7CE580(v99, v120, v93, *((unsigned int *)v95 + 10), 1);
            }
            v95 += 8;
          }
          while (v95 != v96);
          v92 = (uint64_t)v129;
          v91 = v130;
        }
      }
      ++v93;
    }
    while (v93 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v91[-v92] >> 3));
  }
  if (v92)
  {
    if (v91 != (char *)v92)
    {
      v106 = v91;
      do
      {
        v108 = (void *)*((_QWORD *)v106 - 3);
        v106 -= 24;
        v107 = v108;
        if (v108)
        {
          *((_QWORD *)v91 - 2) = v107;
          operator delete(v107);
        }
        v91 = v106;
      }
      while (v106 != (char *)v92);
      v91 = v129;
    }
    v130 = (char *)v92;
    operator delete(v91);
  }
}

void sub_20E7CD4C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E791F00((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_20E7CD4DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E791F00((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_20E7CD4F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E791F00((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_20E7CD504(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E791F00((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_20E7CD518(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E791F00((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_20E7CD52C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E791F00((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_20E7CD540(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E791F00((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_20E7CD554(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E791F00((void **)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_20E7CD568(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int *v15;
  int v16;
  _BYTE *v17;
  void **v18;
  unint64_t v19;
  unint64_t v20;
  void **v21;
  void *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  void *v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  char **v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char **v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  size_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  char *v51;
  char *v52;
  void *v53;
  void *v54;
  char *v55;
  char *v56;
  void *v57;
  void *v58;
  char **v59;
  char **v60;
  char *v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char **v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  size_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  char *v79;
  char *v80;
  void *v81;
  void *v82;
  char *v83;
  char *v84;
  void *v85;
  void *v86;
  uint64_t i;
  char *v88;
  uint64_t v89;
  char **v90;
  char **v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  _OWORD *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  int v114;
  char *v115;
  uint64_t v116;
  char **v117;
  char **v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  _OWORD *v137;
  char *v138;
  uint64_t v139;
  __int128 v140;
  int v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  BOOL v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  _DWORD *v163;
  unint64_t v164;
  _DWORD *v165;
  unint64_t v166;
  _DWORD *v167;
  _DWORD *v168;
  int v169;
  int v170;
  uint64_t v171;
  void **v172;
  void **v173;
  void *v174;
  void **v175;
  void *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  void *v181;
  void *v182;
  void **v183;
  void **v184;
  void **v185;
  void *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  void *v191;
  void *v192;
  unint64_t v193;
  uint64_t v194;
  __int128 *v195;
  __int128 *v196;
  unint64_t v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 *v204;
  __int128 *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char *v210;
  char *v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  char *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  _QWORD *v231;
  _QWORD *v232;
  void *v233;
  void *v234;
  void *v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v240;
  unint64_t v241;
  uint64_t *v242;
  int v243;
  unint64_t v244;
  unsigned int v245;
  int v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  int v253;
  void *__p;
  void **v255;
  uint64_t v256;
  __int128 v257;
  __int128 *v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;

  v259 = 0;
  v260 = 0;
  v261 = 0;
  v6 = *a2;
  v5 = a2[1];
  if (v5 != *a2)
  {
    sub_20E7CEC4C((uint64_t)&v259, 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3));
    v6 = *a2;
    v5 = a2[1];
  }
  if (v5 != v6)
  {
    v7 = 0;
    v237 = a1 + 204;
    v238 = a1 + 164;
    v236 = a3;
    v242 = a2;
    do
    {
      v241 = v7 + 1;
      v12 = 8 * ((v7 + 1) >> 1);
      v13 = *(unsigned int *)(v238 + v12 + 4);
      v252 = *(unsigned int *)(v238 + v12);
      v14 = *(_DWORD *)(v237 + v12);
      v253 = *(_DWORD *)(v237 + v12 + 4);
      v15 = (int *)(*(_QWORD *)(a1 + 264) + 40 * v236 + v12);
      v245 = v15[1];
      v246 = *v15;
      v16 = *(_DWORD *)(a1 + 244 + 4 * ((v7 + 1) >> 1));
      v257 = 0uLL;
      v258 = 0;
      __p = 0;
      v255 = 0;
      v256 = 0;
      if ((_DWORD)v13)
      {
        sub_20E7CEE34((uint64_t)&v257, v13);
        v17 = __p;
        v18 = v255;
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
      v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - v17) >> 3);
      v244 = v13;
      v243 = v14;
      if (v13 <= v19)
      {
        if (v13 < v19)
        {
          v20 = v7;
          v13 = (unint64_t)&v17[24 * v13];
          if (v18 != (void **)v13)
          {
            v21 = v18;
            do
            {
              v24 = (char *)*(v21 - 3);
              v21 -= 3;
              v23 = v24;
              if (v24)
              {
                v25 = (char *)*(v18 - 2);
                v22 = v23;
                if (v25 != v23)
                {
                  v26 = (char *)*(v18 - 2);
                  do
                  {
                    v28 = (void *)*((_QWORD *)v26 - 3);
                    v26 -= 24;
                    v27 = v28;
                    if (v28)
                    {
                      *((_QWORD *)v25 - 2) = v27;
                      operator delete(v27);
                    }
                    v25 = v26;
                  }
                  while (v26 != v23);
                  v22 = *v21;
                }
                *(v18 - 2) = v23;
                operator delete(v22);
              }
              v18 = v21;
            }
            while (v21 != (void **)v13);
          }
          v255 = (void **)v13;
          v7 = v20;
          LODWORD(v13) = v244;
          v14 = v243;
        }
      }
      else
      {
        sub_20E7CEE34((uint64_t)&__p, v13 - v19);
      }
      v240 = v7;
      v29 = 1 << v16;
      if ((_DWORD)v13)
      {
        v30 = 0;
        v249 = 1 << v16;
        v250 = 4 * v29 - 4;
        do
        {
          v31 = (char **)(v257 + 24 * v30);
          v32 = v31 + 1;
          v33 = v31[1];
          v34 = *v31;
          v35 = 0xAAAAAAAAAAAAAAABLL * ((v33 - *v31) >> 3);
          v36 = v252 - v35;
          v251 = v30;
          if (v252 <= v35)
          {
            if (v252 < v35)
            {
              v55 = &v34[24 * v252];
              if (v33 != v55)
              {
                v56 = v31[1];
                do
                {
                  v58 = (void *)*((_QWORD *)v56 - 3);
                  v56 -= 24;
                  v57 = v58;
                  if (v58)
                  {
                    *((_QWORD *)v33 - 2) = v57;
                    operator delete(v57);
                  }
                  v33 = v56;
                }
                while (v56 != v55);
              }
              *v32 = v55;
            }
          }
          else
          {
            v37 = v257 + 24 * v30;
            v40 = *(_QWORD *)(v37 + 16);
            v39 = (char **)(v37 + 16);
            v38 = v40;
            if (0xAAAAAAAAAAAAAAABLL * ((v40 - (uint64_t)v33) >> 3) >= v36)
            {
              bzero(v33, 24 * ((24 * v36 - 24) / 0x18) + 24);
              *v32 = &v33[24 * ((24 * v36 - 24) / 0x18) + 24];
            }
            else
            {
              v41 = 0xAAAAAAAAAAAAAAABLL * ((v38 - (uint64_t)v34) >> 3);
              v42 = 2 * v41;
              if (2 * v41 <= v252)
                v42 = v252;
              if (v41 >= 0x555555555555555)
                v43 = 0xAAAAAAAAAAAAAAALL;
              else
                v43 = v42;
              if (v43 > 0xAAAAAAAAAAAAAAALL)
LABEL_225:
                sub_20E78D888();
              v44 = (char *)operator new(24 * v43);
              v45 = &v44[24 * v35];
              v46 = &v44[24 * v43];
              v47 = 24 * ((24 * v36 - 24) / 0x18) + 24;
              bzero(v45, v47);
              v48 = &v45[v47];
              if (v33 == v34)
              {
                *v31 = v45;
                *v32 = v48;
                *v39 = v46;
                v30 = v251;
              }
              else
              {
                do
                {
                  v49 = v45;
                  *((_QWORD *)v45 - 2) = 0;
                  *((_QWORD *)v45 - 1) = 0;
                  v50 = *(_OWORD *)(v33 - 24);
                  v33 -= 24;
                  *(_OWORD *)(v45 - 24) = v50;
                  v45 -= 24;
                  *((_QWORD *)v49 - 1) = *((_QWORD *)v33 + 2);
                  *(_QWORD *)v33 = 0;
                  *((_QWORD *)v33 + 1) = 0;
                  *((_QWORD *)v33 + 2) = 0;
                }
                while (v33 != v34);
                v33 = *v31;
                v51 = *v32;
                *v31 = v45;
                *v32 = v48;
                *v39 = v46;
                v30 = v251;
                if (v51 != v33)
                {
                  v52 = v51;
                  do
                  {
                    v54 = (void *)*((_QWORD *)v52 - 3);
                    v52 -= 24;
                    v53 = v54;
                    if (v54)
                    {
                      *((_QWORD *)v51 - 2) = v53;
                      operator delete(v53);
                    }
                    v51 = v52;
                  }
                  while (v52 != v33);
                }
              }
              if (v33)
                operator delete(v33);
            }
          }
          v59 = (char **)((char *)__p + 24 * v30);
          v60 = v59 + 1;
          v61 = v59[1];
          v62 = *v59;
          v63 = 0xAAAAAAAAAAAAAAABLL * ((v61 - *v59) >> 3);
          v64 = v252 - v63;
          if (v252 <= v63)
          {
            if (v252 < v63)
            {
              v83 = &v62[24 * v252];
              if (v61 != v83)
              {
                v84 = v59[1];
                do
                {
                  v86 = (void *)*((_QWORD *)v84 - 3);
                  v84 -= 24;
                  v85 = v86;
                  if (v86)
                  {
                    *((_QWORD *)v61 - 2) = v85;
                    operator delete(v85);
                  }
                  v61 = v84;
                }
                while (v84 != v83);
              }
              *v60 = v83;
            }
          }
          else
          {
            v65 = (char *)__p + 24 * v30;
            v68 = *((_QWORD *)v65 + 2);
            v67 = (char **)(v65 + 16);
            v66 = v68;
            if (0xAAAAAAAAAAAAAAABLL * ((v68 - (uint64_t)v61) >> 3) >= v64)
            {
              bzero(v61, 24 * ((24 * v64 - 24) / 0x18) + 24);
              *v60 = &v61[24 * ((24 * v64 - 24) / 0x18) + 24];
            }
            else
            {
              v69 = 0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v62) >> 3);
              v70 = 2 * v69;
              if (2 * v69 <= v252)
                v70 = v252;
              if (v69 >= 0x555555555555555)
                v71 = 0xAAAAAAAAAAAAAAALL;
              else
                v71 = v70;
              if (v71 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_225;
              v72 = (char *)operator new(24 * v71);
              v73 = &v72[24 * v63];
              v74 = &v72[24 * v71];
              v75 = 24 * ((24 * v64 - 24) / 0x18) + 24;
              bzero(v73, v75);
              v76 = &v73[v75];
              if (v61 == v62)
              {
                *v59 = v73;
                *v60 = v76;
                *v67 = v74;
                v30 = v251;
              }
              else
              {
                v30 = v251;
                do
                {
                  v77 = v73;
                  *((_QWORD *)v73 - 2) = 0;
                  *((_QWORD *)v73 - 1) = 0;
                  v78 = *(_OWORD *)(v61 - 24);
                  v61 -= 24;
                  *(_OWORD *)(v73 - 24) = v78;
                  v73 -= 24;
                  *((_QWORD *)v77 - 1) = *((_QWORD *)v61 + 2);
                  *(_QWORD *)v61 = 0;
                  *((_QWORD *)v61 + 1) = 0;
                  *((_QWORD *)v61 + 2) = 0;
                }
                while (v61 != v62);
                v61 = *v59;
                v79 = *v60;
                *v59 = v73;
                *v60 = v76;
                *v67 = v74;
                if (v79 != v61)
                {
                  v80 = v79;
                  do
                  {
                    v82 = (void *)*((_QWORD *)v80 - 3);
                    v80 -= 24;
                    v81 = v82;
                    if (v82)
                    {
                      *((_QWORD *)v79 - 2) = v81;
                      operator delete(v81);
                    }
                    v79 = v80;
                  }
                  while (v80 != v61);
                }
              }
              if (v61)
                operator delete(v61);
            }
          }
          v29 = v249;
          if ((_DWORD)v252)
          {
            for (i = 0; i != v252; ++i)
            {
              v89 = *(_QWORD *)(v257 + 24 * v30);
              v90 = (char **)(v89 + 24 * i);
              v91 = v90 + 1;
              v92 = v90[1];
              v93 = *v90;
              v94 = v92 - *v90;
              v95 = v94 >> 2;
              v96 = v29 - (v94 >> 2);
              if (v29 <= v94 >> 2)
              {
                if (v29 < v94 >> 2)
                  *v91 = &v93[4 * v29];
              }
              else
              {
                v97 = v89 + 24 * i;
                v100 = *(_QWORD *)(v97 + 16);
                v99 = (_QWORD *)(v97 + 16);
                v98 = v100;
                if (v96 <= (v100 - (uint64_t)v92) >> 2)
                {
                  v115 = &v92[4 * v96];
                  memset(v92, 255, ((v250 - v94) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                  *v91 = v115;
                  v30 = v251;
                }
                else
                {
                  v101 = v98 - (_QWORD)v93;
                  v102 = (v98 - (uint64_t)v93) >> 1;
                  if (v102 <= v29)
                    v102 = v29;
                  if (v101 >= 0x7FFFFFFFFFFFFFFCLL)
                    v103 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v103 = v102;
                  if (v103 >> 62)
                    sub_20E78D888();
                  v104 = operator new(4 * v103);
                  v247 = v103;
                  v105 = &v104[4 * v95];
                  memset(v105, 255, ((v250 - v94) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                  if (v92 != v93)
                  {
                    v106 = v92 - 4 - v93;
                    if (v106 < 0x2C)
                      goto LABEL_230;
                    if ((unint64_t)(&v92[-v94] - v104) < 0x20)
                      goto LABEL_230;
                    v107 = (v106 >> 2) + 1;
                    v108 = 4 * (v107 & 0x7FFFFFFFFFFFFFF8);
                    v109 = &v92[-v108];
                    v105 -= v108;
                    v110 = &v104[4 * v95 - 16];
                    v111 = v92 - 16;
                    v112 = v107 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v113 = *(_OWORD *)v111;
                      *(v110 - 1) = *((_OWORD *)v111 - 1);
                      *v110 = v113;
                      v110 -= 2;
                      v111 -= 32;
                      v112 -= 8;
                    }
                    while (v112);
                    v92 = v109;
                    if (v107 != (v107 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_230:
                      do
                      {
                        v114 = *((_DWORD *)v92 - 1);
                        v92 -= 4;
                        *((_DWORD *)v105 - 1) = v114;
                        v105 -= 4;
                      }
                      while (v92 != v93);
                    }
                  }
                  *v90 = v105;
                  v29 = v249;
                  *v91 = &v104[4 * v249];
                  *v99 = &v104[4 * v247];
                  v30 = v251;
                  if (v93)
                    operator delete(v93);
                }
              }
              v116 = *((_QWORD *)__p + 3 * v30);
              v117 = (char **)(v116 + 24 * i);
              v118 = v117 + 1;
              v119 = v117[1];
              v120 = *v117;
              v121 = v119 - *v117;
              v122 = v121 >> 2;
              v123 = v29 - (v121 >> 2);
              if (v29 <= v121 >> 2)
              {
                if (v29 < v121 >> 2)
                  *v118 = &v120[4 * v29];
              }
              else
              {
                v124 = v116 + 24 * i;
                v127 = *(_QWORD *)(v124 + 16);
                v126 = (_QWORD *)(v124 + 16);
                v125 = v127;
                if (v123 <= (v127 - (uint64_t)v119) >> 2)
                {
                  v88 = &v119[4 * v123];
                  memset(v119, 255, ((v250 - v121) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                  *v118 = v88;
                  v30 = v251;
                }
                else
                {
                  v128 = v125 - (_QWORD)v120;
                  v129 = (v125 - (uint64_t)v120) >> 1;
                  if (v129 <= v29)
                    v129 = v29;
                  if (v128 >= 0x7FFFFFFFFFFFFFFCLL)
                    v130 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v130 = v129;
                  if (v130 >> 62)
                    sub_20E78D888();
                  v131 = operator new(4 * v130);
                  v248 = v130;
                  v132 = &v131[4 * v122];
                  memset(v132, 255, ((v250 - v121) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                  if (v119 != v120)
                  {
                    v133 = v119 - 4 - v120;
                    if (v133 < 0x2C)
                      goto LABEL_231;
                    if ((unint64_t)(v119 - &v131[v121]) < 0x20)
                      goto LABEL_231;
                    v134 = (v133 >> 2) + 1;
                    v135 = 4 * (v134 & 0x7FFFFFFFFFFFFFF8);
                    v136 = &v119[-v135];
                    v132 -= v135;
                    v137 = &v131[4 * v122 - 16];
                    v138 = v119 - 16;
                    v139 = v134 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v140 = *(_OWORD *)v138;
                      *(v137 - 1) = *((_OWORD *)v138 - 1);
                      *v137 = v140;
                      v137 -= 2;
                      v138 -= 32;
                      v139 -= 8;
                    }
                    while (v139);
                    v119 = v136;
                    if (v134 != (v134 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_231:
                      do
                      {
                        v141 = *((_DWORD *)v119 - 1);
                        v119 -= 4;
                        *((_DWORD *)v132 - 1) = v141;
                        v132 -= 4;
                      }
                      while (v119 != v120);
                    }
                  }
                  *v117 = v132;
                  v29 = v249;
                  *v118 = &v131[4 * v249];
                  *v126 = &v131[4 * v248];
                  v30 = v251;
                  if (v120)
                    operator delete(v120);
                }
              }
            }
          }
          ++v30;
          LODWORD(v13) = v244;
          v14 = v243;
        }
        while (v30 != v244);
      }
      v9 = v242;
      sub_20E7CE834((uint64_t)&v259[3 * v240], (uint64_t)(*(_QWORD *)(*v242 + 24 * v240 + 8) - *(_QWORD *)(*v242 + 24 * v240)) >> 7, 0);
      v142 = (uint64_t *)(*v242 + 24 * v240);
      v143 = *v142;
      if (v142[1] != *v142)
      {
        v144 = 0;
        v145 = (v29 - 1);
        if ((_DWORD)v252)
          v146 = (_DWORD)v13 == 0;
        else
          v146 = 1;
        v147 = v146;
        v148 = 4 * (v29 - 1);
        do
        {
          if ((v147 & 1) != 0)
          {
LABEL_133:
            *(_QWORD *)(v259[3 * v240] + ((v144 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v144;
            v149 = *v242;
            v143 = *(_QWORD *)(*v242 + 24 * v240);
          }
          else
          {
            v150 = 0;
            v151 = v143 + (v144 << 7);
            v152 = *(_DWORD *)(v151 + 36);
            v153 = *(_DWORD *)(v151 + 40);
            while (1)
            {
              v154 = v150 + 1;
              if (v152 >= v246 + v150 * v14 && v152 < v246 + (v150 + 1) * v14)
                break;
LABEL_137:
              ++v150;
              if (v154 >= v252)
                goto LABEL_133;
            }
            v156 = 0;
            v157 = 0;
            v158 = v245;
            while (v153 < v158 || v153 >= v253 + v158)
            {
              ++v157;
              v156 += 24;
              v158 += v253;
              if (v157 >= v13)
                goto LABEL_137;
            }
            v159 = 0;
            *(_DWORD *)(*(_QWORD *)(*v242 + 24 * v240) + (v144 << 7) + 44) = v150;
            *(_DWORD *)(*(_QWORD *)(*v242 + 24 * v240) + (v144 << 7) + 48) = v157;
            v160 = *(_QWORD *)(*(_QWORD *)(v257 + v156) + 24 * v150);
            v149 = *v242;
            v143 = *(_QWORD *)(*v242 + 24 * v240);
            v161 = *(_DWORD *)(v143 + (v144 << 7) + 28);
            while (v161 <= *(_DWORD *)(v160 + 4 * v159))
            {
              if (v29 == ++v159)
              {
                *(_QWORD *)(v259[3 * v240] + ((v144 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v144;
                goto LABEL_134;
              }
            }
            v162 = *(_QWORD *)(*(_QWORD *)((char *)__p + v156) + 24 * v150);
            v163 = (_DWORD *)(v162 + 4 * v145);
            v164 = *v163;
            if ((_DWORD)v164 != -1)
              *(_QWORD *)(v259[3 * v240] + ((v164 >> 3) & 0x1FFFFFF8)) |= 1 << v164;
            if (v159 < v145)
            {
              v165 = (_DWORD *)(v160 + v148);
              v166 = (v29 - 1);
              v167 = (_DWORD *)(v160 + v148);
              v168 = (_DWORD *)(v162 + 4 * v145);
              do
              {
                --v166;
                v169 = *--v167;
                *v165 = v169;
                v170 = *--v168;
                *v163 = v170;
                v165 = v167;
                v163 = v168;
              }
              while (v166 > v159);
            }
            v171 = 4 * v159;
            *(_DWORD *)(v160 + v171) = v161;
            *(_DWORD *)(v162 + v171) = v144;
          }
LABEL_134:
          ++v144;
        }
        while (v144 < (*(_QWORD *)(v149 + 24 * v240 + 8) - v143) >> 7);
      }
      v172 = (void **)__p;
      if (__p)
      {
        v173 = v255;
        v174 = __p;
        if (v255 != __p)
        {
          v175 = v255;
          do
          {
            v178 = (char *)*(v175 - 3);
            v175 -= 3;
            v177 = v178;
            if (v178)
            {
              v179 = (char *)*(v173 - 2);
              v176 = v177;
              if (v179 != v177)
              {
                v180 = (char *)*(v173 - 2);
                do
                {
                  v182 = (void *)*((_QWORD *)v180 - 3);
                  v180 -= 24;
                  v181 = v182;
                  if (v182)
                  {
                    *((_QWORD *)v179 - 2) = v181;
                    operator delete(v181);
                  }
                  v179 = v180;
                }
                while (v180 != v177);
                v176 = *v175;
              }
              *(v173 - 2) = v177;
              operator delete(v176);
            }
            v173 = v175;
          }
          while (v175 != v172);
          v174 = __p;
          v9 = v242;
        }
        v255 = v172;
        operator delete(v174);
      }
      v183 = (void **)v257;
      if ((_QWORD)v257)
      {
        v184 = (void **)*((_QWORD *)&v257 + 1);
        v8 = (void *)v257;
        if (*((_QWORD *)&v257 + 1) != (_QWORD)v257)
        {
          v185 = (void **)*((_QWORD *)&v257 + 1);
          do
          {
            v188 = (char *)*(v185 - 3);
            v185 -= 3;
            v187 = v188;
            if (v188)
            {
              v189 = (char *)*(v184 - 2);
              v186 = v187;
              if (v189 != v187)
              {
                v190 = (char *)*(v184 - 2);
                do
                {
                  v192 = (void *)*((_QWORD *)v190 - 3);
                  v190 -= 24;
                  v191 = v192;
                  if (v192)
                  {
                    *((_QWORD *)v189 - 2) = v191;
                    operator delete(v191);
                  }
                  v189 = v190;
                }
                while (v190 != v187);
                v186 = *v185;
              }
              *(v184 - 2) = v187;
              operator delete(v186);
            }
            v184 = v185;
          }
          while (v185 != v183);
          v8 = (void *)v257;
          v9 = v242;
        }
        *((_QWORD *)&v257 + 1) = v183;
        operator delete(v8);
      }
      v10 = *v9;
      v11 = v9[1];
      v7 = v241;
    }
    while (v241 < 0xAAAAAAAAAAAAAAABLL * ((v11 - *v9) >> 3));
    v257 = 0uLL;
    v258 = 0;
    if (v11 != v10)
    {
      v193 = 0;
      do
      {
        v194 = *(_QWORD *)(v10 + 24 * v193);
        if (*(_QWORD *)(v10 + 24 * v193 + 8) == v194)
        {
          v195 = 0;
          v225 = 0;
        }
        else
        {
          v195 = 0;
          v196 = 0;
          v197 = 0;
          do
          {
            if (((*(_QWORD *)(v259[3 * v193] + ((v197 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v197) & 1) == 0)
            {
              v204 = (__int128 *)(v194 + (v197 << 7));
              if (v196 < v258)
              {
                v198 = *v204;
                v199 = v204[1];
                v200 = v204[3];
                v196[2] = v204[2];
                v196[3] = v200;
                *v196 = v198;
                v196[1] = v199;
                v201 = v204[4];
                v202 = v204[5];
                v203 = v204[7];
                v196[6] = v204[6];
                v196[7] = v203;
                v196[4] = v201;
                v196[5] = v202;
                v195 = v196 + 8;
              }
              else
              {
                v205 = (__int128 *)v257;
                v206 = (uint64_t)((uint64_t)v196 - v257) >> 7;
                v207 = v206 + 1;
                if ((unint64_t)(v206 + 1) >> 57)
                  sub_20E78D874();
                v208 = (uint64_t)v258 - v257;
                if ((uint64_t)((uint64_t)v258 - v257) >> 6 > v207)
                  v207 = v208 >> 6;
                if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFF80)
                  v209 = 0x1FFFFFFFFFFFFFFLL;
                else
                  v209 = v207;
                if (v209)
                {
                  if (v209 >> 57)
                    sub_20E78D888();
                  v210 = (char *)operator new(v209 << 7);
                }
                else
                {
                  v210 = 0;
                }
                v211 = &v210[128 * v206];
                v212 = *v204;
                v213 = v204[1];
                v214 = v204[3];
                *((_OWORD *)v211 + 2) = v204[2];
                *((_OWORD *)v211 + 3) = v214;
                *(_OWORD *)v211 = v212;
                *((_OWORD *)v211 + 1) = v213;
                v215 = v204[4];
                v216 = v204[5];
                v217 = v204[7];
                *((_OWORD *)v211 + 6) = v204[6];
                *((_OWORD *)v211 + 7) = v217;
                *((_OWORD *)v211 + 4) = v215;
                *((_OWORD *)v211 + 5) = v216;
                v218 = v211;
                if (v196 != v205)
                {
                  do
                  {
                    v219 = *(v196 - 8);
                    v220 = *(v196 - 7);
                    v221 = *(v196 - 5);
                    *((_OWORD *)v218 - 6) = *(v196 - 6);
                    *((_OWORD *)v218 - 5) = v221;
                    *((_OWORD *)v218 - 8) = v219;
                    *((_OWORD *)v218 - 7) = v220;
                    v222 = *(v196 - 4);
                    v223 = *(v196 - 3);
                    v224 = *(v196 - 1);
                    *((_OWORD *)v218 - 2) = *(v196 - 2);
                    *((_OWORD *)v218 - 1) = v224;
                    *((_OWORD *)v218 - 4) = v222;
                    *((_OWORD *)v218 - 3) = v223;
                    v218 -= 128;
                    v196 -= 8;
                  }
                  while (v196 != v205);
                  v196 = v205;
                }
                v195 = (__int128 *)(v211 + 128);
                *(_QWORD *)&v257 = v218;
                *((_QWORD *)&v257 + 1) = v211 + 128;
                v258 = (__int128 *)&v210[128 * v209];
                if (v196)
                  operator delete(v196);
              }
              *((_QWORD *)&v257 + 1) = v195;
              v10 = *v242;
              v196 = v195;
            }
            ++v197;
            v194 = *(_QWORD *)(v10 + 24 * v193);
          }
          while (v197 < (*(_QWORD *)(v10 + 24 * v193 + 8) - v194) >> 7);
          v225 = v257;
        }
        v226 = 126 - 2 * __clz((uint64_t)((uint64_t)v195 - v225) >> 7);
        __p = sub_20E7CEA9C;
        if (v195 == (__int128 *)v225)
          v227 = 0;
        else
          v227 = v226;
        sub_20E7CF160(v225, v195, (uint64_t (**)(__n128 *, __n128 *))&__p, v227, 1);
        v228 = *v242;
        v229 = *v242 + 24 * v193;
        v230 = *(void **)v229;
        if (*(_QWORD *)v229)
        {
          *(_QWORD *)(v228 + 24 * v193 + 8) = v230;
          operator delete(v230);
          *(_QWORD *)v229 = 0;
          *(_QWORD *)(v229 + 8) = 0;
          *(_QWORD *)(v229 + 16) = 0;
        }
        *(_OWORD *)v229 = v257;
        *(_QWORD *)(v228 + 24 * v193 + 16) = v258;
        v257 = 0uLL;
        v258 = 0;
        ++v193;
        v10 = *v242;
      }
      while (v193 < 0xAAAAAAAAAAAAAAABLL * ((v242[1] - *v242) >> 3));
    }
  }
  v231 = v259;
  if (v259)
  {
    v232 = v260;
    v233 = v259;
    if (v260 != v259)
    {
      do
      {
        v235 = (void *)*(v232 - 3);
        v232 -= 3;
        v234 = v235;
        if (v235)
          operator delete(v234);
      }
      while (v232 != v231);
      v233 = v259;
    }
    v260 = v231;
    operator delete(v233);
  }
}

void sub_20E7CE4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v28;

  v28 = *(_QWORD *)(v26 - 112);
  if (v28)
    sub_20E80BF14(v26 - 104, v28);
  _Unwind_Resume(exception_object);
}

void sub_20E7CE580(_QWORD *a1, _OWORD *a2, unint64_t a3, unint64_t a4, int a5)
{
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  unint64_t v20;
  char **v21;
  char *v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  __int128 v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  if (a1[24] >= a3)
  {
    v12 = a1[23];
    if (v12 >= a4)
      goto LABEL_5;
LABEL_8:
    v13 = a1[17];
    v14 = a1[18];
    v16 = a1[19];
    v15 = a1[20];
    a1[23] = v12 + 1;
    a1[18] = v14 + v13;
    a1[19] = v16 + 1;
    *(_QWORD *)(v15 + 8 * v16) = v13;
    v17 = a1[18];
    for (i = a1[19] % a1[a3 + 1]; ; i = a1[19] % a1[a3 + 1])
    {
      a1[19] = i;
      a1[17] = 0;
      v19 = v17 - *(_QWORD *)(v15 + 8 * i);
      a1[18] = v19;
      v20 = a1[23];
      if (v20 >= a4)
        break;
      a1[23] = v20 + 1;
      a1[18] = v19;
      a1[19] = i + 1;
      *(_QWORD *)(v15 + 8 * i) = 0;
      v17 = a1[18];
    }
    if (v19 >= a1[a3 + 9])
      return;
    goto LABEL_12;
  }
  a1[24] = a3;
  v10 = (void *)a1[20];
  v11 = a1[21] - (_QWORD)v10;
  if (v11 >= 1)
    bzero(v10, 8 * (((unint64_t)v11 >> 3) - ((unint64_t)v11 > 7)) + 8);
  v12 = 0;
  a1[23] = 0;
  a1[18] = 0;
  a1[19] = 0;
  a1[17] = 0;
  if (a4)
    goto LABEL_8;
LABEL_5:
  if (a1[17] + a1[18] >= a1[a3 + 9])
    return;
LABEL_12:
  if (a5)
  {
    v21 = (char **)(a1[25] + 24 * a3);
    v23 = v21 + 1;
    v22 = v21[1];
    v24 = (unint64_t)v21[2];
    if ((unint64_t)v22 >= v24)
    {
      v32 = *v21;
      v33 = (v22 - *v21) >> 7;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 57)
        sub_20E78D874();
      v35 = v24 - (_QWORD)v32;
      if (v35 >> 6 > v34)
        v34 = v35 >> 6;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFF80)
        v36 = 0x1FFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
      {
        if (v36 >> 57)
          sub_20E78D888();
        v37 = (char *)operator new(v36 << 7);
      }
      else
      {
        v37 = 0;
      }
      v38 = a2[5];
      v39 = &v37[128 * v33];
      *((_OWORD *)v39 + 4) = a2[4];
      *((_OWORD *)v39 + 5) = v38;
      v40 = a2[7];
      *((_OWORD *)v39 + 6) = a2[6];
      *((_OWORD *)v39 + 7) = v40;
      v41 = a2[1];
      *(_OWORD *)v39 = *a2;
      *((_OWORD *)v39 + 1) = v41;
      v42 = a2[2];
      v43 = a2[3];
      v31 = v39 + 128;
      *((_OWORD *)v39 + 2) = v42;
      *((_OWORD *)v39 + 3) = v43;
      if (v22 != v32)
      {
        do
        {
          v44 = *((_OWORD *)v22 - 8);
          v45 = *((_OWORD *)v22 - 7);
          v46 = *((_OWORD *)v22 - 5);
          *((_OWORD *)v39 - 6) = *((_OWORD *)v22 - 6);
          *((_OWORD *)v39 - 5) = v46;
          *((_OWORD *)v39 - 8) = v44;
          *((_OWORD *)v39 - 7) = v45;
          v47 = *((_OWORD *)v22 - 4);
          v48 = *((_OWORD *)v22 - 3);
          v49 = *((_OWORD *)v22 - 1);
          *((_OWORD *)v39 - 2) = *((_OWORD *)v22 - 2);
          *((_OWORD *)v39 - 1) = v49;
          *((_OWORD *)v39 - 4) = v47;
          *((_OWORD *)v39 - 3) = v48;
          v39 -= 128;
          v22 -= 128;
        }
        while (v22 != v32);
        v22 = *v21;
      }
      *v21 = v39;
      *v23 = v31;
      v21[2] = &v37[128 * v36];
      if (v22)
        operator delete(v22);
    }
    else
    {
      v25 = *a2;
      v26 = a2[1];
      v27 = a2[3];
      *((_OWORD *)v22 + 2) = a2[2];
      *((_OWORD *)v22 + 3) = v27;
      *(_OWORD *)v22 = v25;
      *((_OWORD *)v22 + 1) = v26;
      v28 = a2[4];
      v29 = a2[5];
      v30 = a2[7];
      *((_OWORD *)v22 + 6) = a2[6];
      *((_OWORD *)v22 + 7) = v30;
      *((_OWORD *)v22 + 4) = v28;
      *((_OWORD *)v22 + 5) = v29;
      v31 = v22 + 128;
    }
    *v23 = v31;
  }
  ++a1[17];
  ++*(_QWORD *)(a1[28] + 8 * a3);
}

void sub_20E7CE834(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *__dst;
  __int128 v23;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(_QWORD *)(a1 + 8) = a2;
    return;
  }
  v6 = __len;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    __dst = 0;
    v23 = 0uLL;
    if ((a2 & 0x8000000000000000) != 0)
      sub_20E78D874();
    v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
      v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    sub_20E7CF060((uint64_t)&__dst, v11);
    v12 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v23 = v13 + v5;
    v15 = __dst;
    if (v13 < 1)
    {
      LODWORD(v16) = 0;
    }
    else
    {
      v14 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40)
        memmove(__dst, v12, 8 * v14);
      v15 += v14;
      v16 = v13 & 0x3F;
      if (v16)
        *v15 = *v15 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v16) | *((_QWORD *)v12 + v14) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v16);
      v12 = *(void **)a1;
    }
    *(_QWORD *)a1 = __dst;
    __dst = v12;
    v17 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v23;
    v23 = v17;
    if (v12)
      operator delete(v12);
  }
  else
  {
    v15 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v4 >> 6));
    v16 = *(_QWORD *)(a1 + 8) & 0x3FLL;
    *(_QWORD *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if ((_DWORD)v16)
      {
        if ((64 - v16) >= v5)
          v18 = v5;
        else
          v18 = (64 - v16);
        *v15++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v18)) & (-1 << v16);
        v5 -= v18;
      }
      v19 = v5 >> 6;
      if (v5 >= 0x40)
        memset(v15, 255, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v20 = v15[v19] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_43:
        v15[v19] = v20;
      }
    }
    else
    {
      if ((_DWORD)v16)
      {
        if ((64 - v16) >= v5)
          v21 = v5;
        else
          v21 = (64 - v16);
        *v15++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v21)) & (-1 << v16));
        v5 -= v21;
      }
      v19 = v5 >> 6;
      if (v5 >= 0x40)
        bzero(v15, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v20 = v15[v19] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_43;
      }
    }
  }
}

void sub_20E7CEA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20E7CEA9C(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;

  v2 = a1[10];
  v3 = a2[10];
  v4 = v2 >= v3;
  if (v2 == v3)
  {
    if (a1[11] == a2[11])
    {
      v5 = a1[7];
      v6 = a2[7];
      if (v5 != v6)
        return v5 > v6;
    }
    v4 = a1[9] >= a2[9];
  }
  return !v4;
}

_QWORD *sub_20E7CEAE8(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;

  *a1 = &off_24C9A8F88;
  v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[1];
  a1[1] = 0;
  if (v3)
    sub_20E7CEBA0((uint64_t)(a1 + 1), v3);
  return a1;
}

void sub_20E7CEB3C(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;

  *a1 = &off_24C9A8F88;
  v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[1];
  a1[1] = 0;
  if (v3)
    sub_20E7CEBA0((uint64_t)(a1 + 1), v3);
  JUMPOUT(0x212BC47D4);
}

void sub_20E7CEBA0(uint64_t a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  if (a2)
  {
    v3 = (void *)a2[28];
    if (v3)
    {
      a2[29] = v3;
      operator delete(v3);
    }
    v4 = a2[25];
    if (v4)
    {
      v5 = a2[26];
      v6 = (void *)a2[25];
      if (v5 != v4)
      {
        v7 = a2[26];
        do
        {
          v9 = *(void **)(v7 - 24);
          v7 -= 24;
          v8 = v9;
          if (v9)
          {
            *(_QWORD *)(v5 - 16) = v8;
            operator delete(v8);
          }
          v5 = v7;
        }
        while (v7 != v4);
        v6 = (void *)a2[25];
      }
      a2[26] = v4;
      operator delete(v6);
    }
    v10 = (void *)a2[20];
    if (v10)
    {
      a2[21] = v10;
      operator delete(v10);
    }
    JUMPOUT(0x212BC47D4);
  }
}

void sub_20E7CEC4C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E78D874();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E78D888();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_24:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = *(v5 - 3);
        v5 -= 3;
        *((_QWORD *)v13 - 3) = v17;
        v13 -= 24;
        *((_QWORD *)v13 + 1) = v5[1];
        *((_QWORD *)v13 + 2) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v18 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v18)
      {
        do
        {
          v20 = (void *)*(v5 - 3);
          v5 -= 3;
          v19 = v20;
          if (v20)
            operator delete(v19);
        }
        while (v5 != v18);
        v5 = v18;
      }
      if (v5)
        goto LABEL_24;
    }
  }
}

void sub_20E7CEE34(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  void **v19;
  void **v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;

  v5 = *(void ***)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (void **)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(void ***)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E78D874();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E78D888();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_30:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v19 = *(void ***)a1;
      v5 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v19)
      {
        v20 = v5;
        do
        {
          v23 = (char *)*(v20 - 3);
          v20 -= 3;
          v22 = v23;
          if (v23)
          {
            v24 = (char *)*(v5 - 2);
            v21 = v22;
            if (v24 != v22)
            {
              v25 = (char *)*(v5 - 2);
              do
              {
                v27 = (void *)*((_QWORD *)v25 - 3);
                v25 -= 24;
                v26 = v27;
                if (v27)
                {
                  *((_QWORD *)v24 - 2) = v26;
                  operator delete(v26);
                }
                v24 = v25;
              }
              while (v25 != v22);
              v21 = *v20;
            }
            *(v5 - 2) = v22;
            operator delete(v21);
          }
          v5 = v20;
        }
        while (v20 != v19);
        v5 = v19;
      }
      if (v5)
        goto LABEL_30;
    }
  }
}

void sub_20E7CF060(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_20E78D874();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    v8 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v8 = 0;
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v5[v6 >> 6];
      v12 = v4;
      v13 = v5;
      do
      {
        v14 = 1 << v9;
        if (((*v13 >> v10) & 1) != 0)
          v15 = *v12 | v14;
        else
          v15 = *v12 & ~v14;
        *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v12 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v7 || v13 != v11);
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5)
      operator delete(v5);
  }
}

void sub_20E7CF160(unint64_t a1, __int128 *a2, uint64_t (**a3)(__n128 *, __n128 *), uint64_t a4, char a5)
{
  __int128 *v8;
  __n128 *v9;
  __n128 *v10;
  unint64_t n128_u64;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 *v15;
  uint64_t (*v16)(__n128 *, __n128 *);
  char v17;
  int v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  int v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __n128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  __n128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __n128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __n128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __n128 *v153;
  __n128 *v154;
  char v155;
  int v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __n128 v211;
  __n128 v212;
  __n128 v213;
  __n128 v214;
  __n128 v215;
  __n128 v216;
  __n128 v217;
  __n128 v218;
  __n128 v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  __n128 v223;
  __n128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __n128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __n128 v237;
  __n128 v238;
  __n128 v239;
  __n128 v240;
  __n128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __n128 v247;
  __n128 v248;
  __n128 v249;
  __n128 v250;
  __n128 v251;
  __n128 v252;
  __n128 v253;
  __n128 v254;
  __n128 v255;
  __n128 v256;
  __n128 v257;
  __n128 v258;
  __n128 v259;
  __n128 v260;
  __n128 v261;
  __n128 v262;
  __n128 v263;
  __n128 v264;
  __n128 v265;
  __n128 v266;
  __n128 v267;
  __n128 v268;
  __n128 v269;
  __n128 v270;
  __n128 *v271;
  __n128 *v272;
  char v273;
  int v274;
  __n128 v275;
  __n128 v276;
  __n128 v277;
  __n128 v278;
  __n128 v279;
  __n128 v280;
  __n128 v281;
  __n128 v282;
  __n128 v283;
  __n128 v284;
  __n128 v285;
  __n128 v286;
  __n128 v287;
  __n128 v288;
  __n128 v289;
  __n128 v290;
  __n128 v291;
  __n128 v292;
  __n128 v293;
  __n128 v294;
  __n128 v295;
  __n128 v296;
  __n128 v297;
  __n128 v298;
  __n128 v299;
  __n128 v300;
  __n128 v301;
  __n128 v302;
  __n128 v303;
  __n128 v304;
  __n128 v305;
  __n128 v306;
  __n128 v307;
  __n128 v308;
  __n128 v309;
  __n128 v310;
  __n128 v311;
  __n128 v312;
  __n128 v313;
  __n128 v314;
  __n128 v315;
  __n128 v316;
  __n128 v317;
  __n128 v318;
  __n128 v319;
  __n128 v320;
  __n128 v321;
  __n128 v322;
  __n128 v323;
  __n128 v324;
  __n128 v325;
  __n128 v326;
  __n128 v327;
  __n128 v328;
  __n128 v329;
  __n128 v330;
  __n128 v331;
  __n128 v332;
  __n128 v333;
  __n128 v334;
  __n128 v335;
  __n128 v336;
  __n128 v337;
  __n128 v338;
  __n128 v339;
  __n128 v340;
  __n128 v341;
  __n128 v342;
  __n128 v343;
  __n128 v344;
  __n128 v345;
  __n128 v346;
  __n128 v347;
  __n128 v348;
  __n128 v349;
  __n128 v350;
  __n128 v351;
  __n128 v352;
  char v353;
  int v354;
  __n128 v355;
  __n128 v356;
  __n128 v357;
  __n128 v358;
  __n128 v359;
  __n128 v360;
  __n128 v361;
  __n128 v362;
  __n128 v363;
  __n128 v364;
  __n128 v365;
  __n128 v366;
  __n128 v367;
  __n128 v368;
  __n128 v369;
  __n128 v370;
  __n128 v371;
  __n128 v372;
  __n128 v373;
  __n128 v374;
  __n128 v375;
  __n128 v376;
  __n128 v377;
  __n128 v378;
  __n128 v379;
  __n128 v380;
  __n128 v381;
  __n128 v382;
  __n128 v383;
  __n128 v384;
  __n128 v385;
  __n128 v386;
  __n128 v387;
  __n128 v388;
  __n128 v389;
  __n128 v390;
  __n128 v391;
  __n128 v392;
  __n128 v393;
  __n128 v394;
  __n128 v395;
  __n128 v396;
  __n128 v397;
  __n128 v398;
  __n128 v399;
  __n128 v400;
  __n128 v401;
  __n128 v402;
  __n128 v403;
  __n128 v404;
  __n128 v405;
  __n128 v406;
  __n128 v407;
  __n128 v408;
  __n128 v409;
  __n128 v410;
  __n128 v411;
  __n128 v412;
  __n128 v413;
  __n128 v414;
  __n128 v415;
  __n128 v416;
  __n128 v417;
  __n128 v418;
  __n128 v419;
  __n128 v420;
  __n128 v421;
  __n128 v422;
  __n128 v423;
  __n128 v424;
  __n128 v425;
  __n128 v426;
  __n128 v427;
  __n128 v428;
  __n128 v429;
  __n128 v430;
  __n128 v431;
  __n128 v432;
  __n128 v433;
  __n128 v434;
  __n128 v435;
  __n128 v436;
  __n128 v437;
  __n128 v438;
  __n128 v439;
  __n128 v440;
  __n128 v441;
  __n128 v442;
  __n128 v443;
  __n128 v444;
  __n128 v445;
  __n128 v446;
  uint64_t v447;
  __n128 v448;
  __n128 v449;
  __n128 v450;
  __n128 v451;
  __n128 v452;
  __n128 v453;
  unint64_t v454;
  __int128 *v455;
  __n128 *v456;
  __n128 *v457;
  __n128 v458;
  __n128 v459;
  __n128 v460;
  __n128 v461;
  __n128 v462;
  __n128 v463;
  __n128 v464;
  __n128 v465;
  __n128 v466;
  __n128 v467;
  __n128 v468;
  __n128 v469;
  __n128 v470;
  __n128 v471;
  __n128 v472;
  __n128 v473;
  __n128 v474;
  __n128 v475;
  __n128 *v476;
  __n128 v477;
  __n128 v478;
  __n128 v479;
  __n128 v480;
  __n128 v481;
  __n128 v482;
  __n128 v483;
  __n128 v484;
  __n128 v485;
  __n128 v486;
  __n128 v487;
  __n128 v488;
  BOOL v489;
  __n128 v490;
  __n128 v491;
  __n128 v492;
  __n128 v493;
  __n128 v494;
  __n128 v495;
  __n128 *v496;
  int v497;
  __int128 *v498;
  __n128 v499;
  __n128 v500;
  __n128 v501;
  __n128 v502;
  __n128 v503;
  __n128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __n128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __n128 *v517;
  __n128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __n128 v524;
  __n128 v525;
  __n128 v526;
  __n128 v527;
  __n128 v528;
  __n128 v529;
  __n128 *v530;
  char v531;
  int v532;
  __n128 v533;
  __n128 v534;
  __n128 v535;
  __n128 v536;
  __n128 v537;
  __n128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __n128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __n128 *v551;
  __n128 *v552;
  __n128 v553;
  __n128 v554;
  __n128 v555;
  __n128 v556;
  __n128 v557;
  __n128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __n128 v570;
  __n128 v571;
  __n128 v572;
  __n128 v573;
  __n128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __n128 v580;
  __n128 v581;
  __n128 v582;
  __n128 v583;
  __n128 v584;
  __n128 v585;
  __n128 v586;
  __n128 v587;
  __n128 v588;
  __n128 v589;
  __n128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __n128 v596;
  __n128 v597;
  __n128 v598;
  __n128 v599;
  __n128 v600;
  __n128 v601;
  __int128 *v602;
  BOOL v604;
  uint64_t v605;
  _OWORD *v606;
  _OWORD *v607;
  __n128 v608;
  __n128 v609;
  __n128 v610;
  __n128 v611;
  __n128 v612;
  __n128 v613;
  __n128 *v614;
  __n128 v615;
  __n128 v616;
  __n128 v617;
  __n128 v618;
  __n128 v619;
  __n128 v620;
  uint64_t v621;
  _OWORD *v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __n128 v627;
  __n128 v628;
  __n128 v629;
  __n128 v630;
  __n128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __n128 v643;
  __n128 v644;
  __n128 v645;
  __n128 v646;
  __n128 v647;
  __n128 v648;
  __n128 v649;
  __n128 v650;
  __n128 v651;
  __n128 v652;
  __n128 v653;
  __n128 v654;
  __n128 v655;
  __n128 v656;
  __n128 v657;
  __n128 v658;
  __n128 *v659;
  __n128 *v660;
  __n128 v661;
  __n128 v662;
  __n128 v663;
  __n128 v664;
  __n128 v665;
  __n128 v666;
  __n128 *v667;
  __n128 v668;
  __n128 v669;
  __n128 v670;
  __n128 v671;
  char v672;
  __n128 v673;
  __n128 v674;
  __n128 v675;
  __n128 v676;
  __n128 v677;
  __n128 v678;
  __n128 v679;
  __n128 v680;
  __n128 v681;
  __n128 v682;
  __n128 v683;
  __n128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __n128 v689;
  __n128 v690;
  __n128 v691;
  __n128 v692;
  __n128 v693;
  __n128 v694;
  __n128 v695;
  __n128 v696;
  __n128 v697;
  __n128 v698;
  __n128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 *v705;
  __n128 v708;
  __n128 v709;
  __n128 v710;
  __n128 v711;
  __n128 v712;
  __n128 v713;
  __n128 v714;
  __n128 v715;
  __n128 v716;
  __n128 v717;
  __int128 v718;
  __n128 v719;
  __n128 v720;
  __n128 v721;
  __int128 v722;
  __n128 v723;
  uint64_t v724;

  v724 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v8 = a2 - 8;
  v9 = (__n128 *)(a2 - 16);
  v10 = (__n128 *)(a2 - 24);
  n128_u64 = a1;
  v705 = a2;
  while (2)
  {
    a1 = n128_u64;
    v12 = (uint64_t)a2 - n128_u64;
    v13 = (uint64_t)((uint64_t)a2 - n128_u64) >> 7;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__n128 *)v8, (__n128 *)n128_u64))
          goto LABEL_104;
        return;
      case 3uLL:
        v530 = (__n128 *)(n128_u64 + 128);
        v531 = (*a3)((__n128 *)(n128_u64 + 128), (__n128 *)n128_u64);
        v532 = (*a3)((__n128 *)v8, (__n128 *)(n128_u64 + 128));
        if ((v531 & 1) != 0)
        {
          if (v532)
          {
LABEL_104:
            v533 = *(__n128 *)n128_u64;
            v534 = *(__n128 *)(n128_u64 + 16);
            v535 = *(__n128 *)(n128_u64 + 48);
            v718 = *(_OWORD *)(n128_u64 + 32);
            v719 = v535;
            v716 = v533;
            v717 = v534;
            v536 = *(__n128 *)(n128_u64 + 64);
            v537 = *(__n128 *)(n128_u64 + 80);
            v538 = *(__n128 *)(n128_u64 + 112);
            v722 = *(_OWORD *)(n128_u64 + 96);
            v723 = v538;
            v720 = v536;
            v721 = v537;
            v539 = v8[7];
            v541 = v8[4];
            v540 = v8[5];
            *(_OWORD *)(n128_u64 + 96) = v8[6];
            *(_OWORD *)(n128_u64 + 112) = v539;
            *(_OWORD *)(n128_u64 + 64) = v541;
            *(_OWORD *)(n128_u64 + 80) = v540;
            v542 = (__n128)*v8;
            v543 = v8[1];
            v544 = v8[3];
            *(_OWORD *)(n128_u64 + 32) = v8[2];
            *(_OWORD *)(n128_u64 + 48) = v544;
            *(__n128 *)n128_u64 = v542;
            *(_OWORD *)(n128_u64 + 16) = v543;
LABEL_105:
            v545 = (__int128)v716;
            v546 = (__int128)v717;
            v547 = (__int128)v719;
            v8[2] = v718;
            v8[3] = v547;
            *v8 = v545;
            v8[1] = v546;
            v548 = (__int128)v720;
            v549 = (__int128)v721;
            v550 = (__int128)v723;
            v8[6] = v722;
            v8[7] = v550;
            v8[4] = v548;
            v8[5] = v549;
            return;
          }
          v679 = *(__n128 *)n128_u64;
          v680 = *(__n128 *)(n128_u64 + 16);
          v681 = *(__n128 *)(n128_u64 + 48);
          v718 = *(_OWORD *)(n128_u64 + 32);
          v719 = v681;
          v716 = v679;
          v717 = v680;
          v682 = *(__n128 *)(n128_u64 + 64);
          v683 = *(__n128 *)(n128_u64 + 80);
          v684 = *(__n128 *)(n128_u64 + 112);
          v722 = *(_OWORD *)(n128_u64 + 96);
          v723 = v684;
          v720 = v682;
          v721 = v683;
          v685 = *(_OWORD *)(n128_u64 + 208);
          *(_OWORD *)(n128_u64 + 64) = *(_OWORD *)(n128_u64 + 192);
          *(_OWORD *)(n128_u64 + 80) = v685;
          v686 = *(_OWORD *)(n128_u64 + 240);
          *(_OWORD *)(n128_u64 + 96) = *(_OWORD *)(n128_u64 + 224);
          *(_OWORD *)(n128_u64 + 112) = v686;
          v687 = *(_OWORD *)(n128_u64 + 144);
          *(__n128 *)n128_u64 = *v530;
          *(_OWORD *)(n128_u64 + 16) = v687;
          v688 = *(_OWORD *)(n128_u64 + 176);
          *(_OWORD *)(n128_u64 + 32) = *(_OWORD *)(n128_u64 + 160);
          *(_OWORD *)(n128_u64 + 48) = v688;
          v689 = v716;
          v690 = v717;
          v691 = v719;
          *(_OWORD *)(n128_u64 + 160) = v718;
          *(__n128 *)(n128_u64 + 176) = v691;
          *v530 = v689;
          *(__n128 *)(n128_u64 + 144) = v690;
          v692 = v720;
          v693 = v721;
          v694 = v723;
          *(_OWORD *)(n128_u64 + 224) = v722;
          *(__n128 *)(n128_u64 + 240) = v694;
          *(__n128 *)(n128_u64 + 192) = v692;
          *(__n128 *)(n128_u64 + 208) = v693;
          if ((*a3)((__n128 *)v8, (__n128 *)(n128_u64 + 128)))
          {
            v695 = *(__n128 *)(n128_u64 + 208);
            v720 = *(__n128 *)(n128_u64 + 192);
            v721 = v695;
            v696 = *(__n128 *)(n128_u64 + 240);
            v722 = *(_OWORD *)(n128_u64 + 224);
            v723 = v696;
            v697 = *(__n128 *)(n128_u64 + 144);
            v716 = *v530;
            v717 = v697;
            v698 = *(__n128 *)(n128_u64 + 176);
            v718 = *(_OWORD *)(n128_u64 + 160);
            v719 = v698;
            v699 = (__n128)*v8;
            v700 = v8[1];
            v701 = v8[3];
            *(_OWORD *)(n128_u64 + 160) = v8[2];
            *(_OWORD *)(n128_u64 + 176) = v701;
            *v530 = v699;
            *(_OWORD *)(n128_u64 + 144) = v700;
            v703 = v8[6];
            v702 = v8[7];
            v704 = v8[5];
            *(_OWORD *)(n128_u64 + 192) = v8[4];
            *(_OWORD *)(n128_u64 + 208) = v704;
            *(_OWORD *)(n128_u64 + 224) = v703;
            *(_OWORD *)(n128_u64 + 240) = v702;
            goto LABEL_105;
          }
        }
        else if (v532)
        {
          v627 = *(__n128 *)(n128_u64 + 208);
          v720 = *(__n128 *)(n128_u64 + 192);
          v721 = v627;
          v628 = *(__n128 *)(n128_u64 + 240);
          v722 = *(_OWORD *)(n128_u64 + 224);
          v723 = v628;
          v629 = *(__n128 *)(n128_u64 + 144);
          v716 = *v530;
          v717 = v629;
          v630 = *(__n128 *)(n128_u64 + 176);
          v718 = *(_OWORD *)(n128_u64 + 160);
          v719 = v630;
          v631 = (__n128)*v8;
          v632 = v8[1];
          v633 = v8[3];
          *(_OWORD *)(n128_u64 + 160) = v8[2];
          *(_OWORD *)(n128_u64 + 176) = v633;
          *v530 = v631;
          *(_OWORD *)(n128_u64 + 144) = v632;
          v635 = v8[6];
          v634 = v8[7];
          v636 = v8[5];
          *(_OWORD *)(n128_u64 + 192) = v8[4];
          *(_OWORD *)(n128_u64 + 208) = v636;
          *(_OWORD *)(n128_u64 + 224) = v635;
          *(_OWORD *)(n128_u64 + 240) = v634;
          v637 = (__int128)v716;
          v638 = (__int128)v717;
          v639 = (__int128)v719;
          v8[2] = v718;
          v8[3] = v639;
          *v8 = v637;
          v8[1] = v638;
          v640 = (__int128)v720;
          v641 = (__int128)v721;
          v642 = (__int128)v723;
          v8[6] = v722;
          v8[7] = v642;
          v8[4] = v640;
          v8[5] = v641;
          goto LABEL_132;
        }
        return;
      case 4uLL:
        sub_20E7D0F48((__n128 *)n128_u64, (__n128 *)(n128_u64 + 128), (__n128 *)(n128_u64 + 256), (__n128 *)v8, a3);
        return;
      case 5uLL:
        v530 = (__n128 *)(n128_u64 + 128);
        v551 = (__n128 *)(n128_u64 + 256);
        v552 = (__n128 *)(n128_u64 + 384);
        v553 = sub_20E7D0F48((__n128 *)n128_u64, (__n128 *)(n128_u64 + 128), (__n128 *)(n128_u64 + 256), (__n128 *)(n128_u64 + 384), a3);
        if (((unsigned int (*)(__int128 *, unint64_t, __n128))*a3)(v8, n128_u64 + 384, v553))
        {
          v554 = *(__n128 *)(n128_u64 + 464);
          v720 = *(__n128 *)(n128_u64 + 448);
          v721 = v554;
          v555 = *(__n128 *)(n128_u64 + 496);
          v722 = *(_OWORD *)(n128_u64 + 480);
          v723 = v555;
          v556 = *(__n128 *)(n128_u64 + 400);
          v716 = *v552;
          v717 = v556;
          v557 = *(__n128 *)(n128_u64 + 432);
          v718 = *(_OWORD *)(n128_u64 + 416);
          v719 = v557;
          v558 = (__n128)*v8;
          v559 = v8[1];
          v560 = v8[3];
          *(_OWORD *)(n128_u64 + 416) = v8[2];
          *(_OWORD *)(n128_u64 + 432) = v560;
          *v552 = v558;
          *(_OWORD *)(n128_u64 + 400) = v559;
          v562 = v8[6];
          v561 = v8[7];
          v563 = v8[5];
          *(_OWORD *)(n128_u64 + 448) = v8[4];
          *(_OWORD *)(n128_u64 + 464) = v563;
          *(_OWORD *)(n128_u64 + 480) = v562;
          *(_OWORD *)(n128_u64 + 496) = v561;
          v564 = (__int128)v716;
          v565 = (__int128)v717;
          v566 = (__int128)v719;
          v8[2] = v718;
          v8[3] = v566;
          *v8 = v564;
          v8[1] = v565;
          v567 = (__int128)v720;
          v568 = (__int128)v721;
          v569 = (__int128)v723;
          v8[6] = v722;
          v8[7] = v569;
          v8[4] = v567;
          v8[5] = v568;
          if ((*a3)((__n128 *)(n128_u64 + 384), (__n128 *)(n128_u64 + 256)))
          {
            v570 = *(__n128 *)(n128_u64 + 336);
            v720 = *(__n128 *)(n128_u64 + 320);
            v721 = v570;
            v571 = *(__n128 *)(n128_u64 + 368);
            v722 = *(_OWORD *)(n128_u64 + 352);
            v723 = v571;
            v572 = *(__n128 *)(n128_u64 + 272);
            v716 = *v551;
            v717 = v572;
            v573 = *(__n128 *)(n128_u64 + 304);
            v718 = *(_OWORD *)(n128_u64 + 288);
            v719 = v573;
            v574 = *v552;
            v575 = *(_OWORD *)(n128_u64 + 400);
            v576 = *(_OWORD *)(n128_u64 + 432);
            *(_OWORD *)(n128_u64 + 288) = *(_OWORD *)(n128_u64 + 416);
            *(_OWORD *)(n128_u64 + 304) = v576;
            *v551 = v574;
            *(_OWORD *)(n128_u64 + 272) = v575;
            v577 = *(_OWORD *)(n128_u64 + 448);
            v578 = *(_OWORD *)(n128_u64 + 464);
            v579 = *(_OWORD *)(n128_u64 + 496);
            *(_OWORD *)(n128_u64 + 352) = *(_OWORD *)(n128_u64 + 480);
            *(_OWORD *)(n128_u64 + 368) = v579;
            *(_OWORD *)(n128_u64 + 320) = v577;
            *(_OWORD *)(n128_u64 + 336) = v578;
            v580 = v716;
            v581 = v717;
            v582 = v719;
            *(_OWORD *)(n128_u64 + 416) = v718;
            *(__n128 *)(n128_u64 + 432) = v582;
            *v552 = v580;
            *(__n128 *)(n128_u64 + 400) = v581;
            v583 = v720;
            v584 = v721;
            v585 = v723;
            *(_OWORD *)(n128_u64 + 480) = v722;
            *(__n128 *)(n128_u64 + 496) = v585;
            *(__n128 *)(n128_u64 + 448) = v583;
            *(__n128 *)(n128_u64 + 464) = v584;
            if ((*a3)((__n128 *)(n128_u64 + 256), (__n128 *)(n128_u64 + 128)))
            {
              v586 = *(__n128 *)(n128_u64 + 208);
              v720 = *(__n128 *)(n128_u64 + 192);
              v721 = v586;
              v587 = *(__n128 *)(n128_u64 + 240);
              v722 = *(_OWORD *)(n128_u64 + 224);
              v723 = v587;
              v588 = *(__n128 *)(n128_u64 + 144);
              v716 = *v530;
              v717 = v588;
              v589 = *(__n128 *)(n128_u64 + 176);
              v718 = *(_OWORD *)(n128_u64 + 160);
              v719 = v589;
              v590 = *v551;
              v591 = *(_OWORD *)(n128_u64 + 272);
              v592 = *(_OWORD *)(n128_u64 + 304);
              *(_OWORD *)(n128_u64 + 160) = *(_OWORD *)(n128_u64 + 288);
              *(_OWORD *)(n128_u64 + 176) = v592;
              *v530 = v590;
              *(_OWORD *)(n128_u64 + 144) = v591;
              v593 = *(_OWORD *)(n128_u64 + 320);
              v594 = *(_OWORD *)(n128_u64 + 336);
              v595 = *(_OWORD *)(n128_u64 + 368);
              *(_OWORD *)(n128_u64 + 224) = *(_OWORD *)(n128_u64 + 352);
              *(_OWORD *)(n128_u64 + 240) = v595;
              *(_OWORD *)(n128_u64 + 192) = v593;
              *(_OWORD *)(n128_u64 + 208) = v594;
              v596 = v716;
              v597 = v717;
              v598 = v719;
              *(_OWORD *)(n128_u64 + 288) = v718;
              *(__n128 *)(n128_u64 + 304) = v598;
              *v551 = v596;
              *(__n128 *)(n128_u64 + 272) = v597;
              v599 = v720;
              v600 = v721;
              v601 = v723;
              *(_OWORD *)(n128_u64 + 352) = v722;
              *(__n128 *)(n128_u64 + 368) = v601;
              *(__n128 *)(n128_u64 + 320) = v599;
              *(__n128 *)(n128_u64 + 336) = v600;
LABEL_132:
              if ((*a3)(v530, (__n128 *)n128_u64))
              {
                v643 = *(__n128 *)n128_u64;
                v644 = *(__n128 *)(n128_u64 + 16);
                v645 = *(__n128 *)(n128_u64 + 48);
                v718 = *(_OWORD *)(n128_u64 + 32);
                v719 = v645;
                v716 = v643;
                v717 = v644;
                v646 = *(__n128 *)(n128_u64 + 64);
                v647 = *(__n128 *)(n128_u64 + 80);
                v648 = *(__n128 *)(n128_u64 + 112);
                v722 = *(_OWORD *)(n128_u64 + 96);
                v723 = v648;
                v720 = v646;
                v721 = v647;
                v649 = v530[5];
                *(__n128 *)(n128_u64 + 64) = v530[4];
                *(__n128 *)(n128_u64 + 80) = v649;
                v650 = v530[7];
                *(__n128 *)(n128_u64 + 96) = v530[6];
                *(__n128 *)(n128_u64 + 112) = v650;
                v651 = v530[1];
                *(__n128 *)n128_u64 = *v530;
                *(__n128 *)(n128_u64 + 16) = v651;
                v652 = v530[3];
                *(__n128 *)(n128_u64 + 32) = v530[2];
                *(__n128 *)(n128_u64 + 48) = v652;
                v653 = v716;
                v654 = v717;
                v655 = v719;
                v530[2] = (__n128)v718;
                v530[3] = v655;
                *v530 = v653;
                v530[1] = v654;
                v656 = v720;
                v657 = v721;
                v658 = v723;
                v530[6] = (__n128)v722;
                v530[7] = v658;
                v530[4] = v656;
                v530[5] = v657;
              }
            }
          }
        }
        return;
      default:
        if (v12 > 3071)
        {
          if (!a4)
          {
            if ((__int128 *)n128_u64 != a2)
              sub_20E7D1334((__int128 *)n128_u64, a2, a2, (unsigned int (**)(__int128 *, __int128 *))a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = (__n128 *)(n128_u64 + (v13 >> 1 << 7));
          v16 = *a3;
          if ((unint64_t)v12 <= 0x4000)
          {
            v31 = v16((__n128 *)n128_u64, v15);
            v32 = (*a3)((__n128 *)v8, (__n128 *)n128_u64);
            if ((v31 & 1) == 0)
            {
              if (v32)
              {
                v81 = *(__n128 *)n128_u64;
                v82 = *(__n128 *)(n128_u64 + 16);
                v83 = *(__n128 *)(n128_u64 + 48);
                v718 = *(_OWORD *)(n128_u64 + 32);
                v719 = v83;
                v716 = v81;
                v717 = v82;
                v84 = *(__n128 *)(n128_u64 + 64);
                v85 = *(__n128 *)(n128_u64 + 80);
                v86 = *(__n128 *)(n128_u64 + 112);
                v722 = *(_OWORD *)(n128_u64 + 96);
                v723 = v86;
                v720 = v84;
                v721 = v85;
                v87 = v8[7];
                v89 = v8[4];
                v88 = v8[5];
                *(_OWORD *)(n128_u64 + 96) = v8[6];
                *(_OWORD *)(n128_u64 + 112) = v87;
                *(_OWORD *)(n128_u64 + 64) = v89;
                *(_OWORD *)(n128_u64 + 80) = v88;
                v90 = (__n128)*v8;
                v91 = v8[1];
                v92 = v8[3];
                *(_OWORD *)(n128_u64 + 32) = v8[2];
                *(_OWORD *)(n128_u64 + 48) = v92;
                *(__n128 *)n128_u64 = v90;
                *(_OWORD *)(n128_u64 + 16) = v91;
                v93 = (__int128)v716;
                v94 = (__int128)v717;
                v95 = (__int128)v719;
                v8[2] = v718;
                v8[3] = v95;
                *v8 = v93;
                v8[1] = v94;
                v96 = (__int128)v720;
                v97 = (__int128)v721;
                v98 = (__int128)v723;
                v8[6] = v722;
                v8[7] = v98;
                v8[4] = v96;
                v8[5] = v97;
                if ((*a3)((__n128 *)n128_u64, v15))
                {
                  v99 = *v15;
                  v100 = v15[1];
                  v101 = v15[3];
                  v718 = (__int128)v15[2];
                  v719 = v101;
                  v716 = v99;
                  v717 = v100;
                  v102 = v15[4];
                  v103 = v15[5];
                  v104 = v15[7];
                  v722 = (__int128)v15[6];
                  v723 = v104;
                  v720 = v102;
                  v721 = v103;
                  v105 = *(__n128 *)(n128_u64 + 112);
                  v107 = *(__n128 *)(n128_u64 + 64);
                  v106 = *(__n128 *)(n128_u64 + 80);
                  v15[6] = *(__n128 *)(n128_u64 + 96);
                  v15[7] = v105;
                  v15[4] = v107;
                  v15[5] = v106;
                  v108 = *(__n128 *)n128_u64;
                  v109 = *(__n128 *)(n128_u64 + 16);
                  v110 = *(__n128 *)(n128_u64 + 48);
                  v15[2] = *(__n128 *)(n128_u64 + 32);
                  v15[3] = v110;
                  *v15 = v108;
                  v15[1] = v109;
                  v111 = v716;
                  v112 = v717;
                  v113 = v719;
                  *(_OWORD *)(n128_u64 + 32) = v718;
                  *(__n128 *)(n128_u64 + 48) = v113;
                  *(__n128 *)n128_u64 = v111;
                  *(__n128 *)(n128_u64 + 16) = v112;
                  v114 = v720;
                  v115 = v721;
                  v116 = v723;
                  *(_OWORD *)(n128_u64 + 96) = v722;
                  *(__n128 *)(n128_u64 + 112) = v116;
                  *(__n128 *)(n128_u64 + 64) = v114;
                  *(__n128 *)(n128_u64 + 80) = v115;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_57;
                  goto LABEL_56;
                }
              }
              goto LABEL_32;
            }
            if (v32)
            {
              v33 = *v15;
              v34 = v15[1];
              v35 = v15[3];
              v718 = (__int128)v15[2];
              v719 = v35;
              v716 = v33;
              v717 = v34;
              v36 = v15[4];
              v37 = v15[5];
              v38 = v15[7];
              v722 = (__int128)v15[6];
              v723 = v38;
              v720 = v36;
              v721 = v37;
              v39 = v8[7];
              v41 = v8[4];
              v40 = v8[5];
              v15[6] = (__n128)v8[6];
              v15[7] = (__n128)v39;
              v15[4] = (__n128)v41;
              v15[5] = (__n128)v40;
              v42 = (__n128)*v8;
              v43 = v8[1];
              v44 = v8[3];
              v15[2] = (__n128)v8[2];
              v15[3] = (__n128)v44;
              *v15 = v42;
              v15[1] = (__n128)v43;
            }
            else
            {
              v201 = *v15;
              v202 = v15[1];
              v203 = v15[3];
              v718 = (__int128)v15[2];
              v719 = v203;
              v716 = v201;
              v717 = v202;
              v204 = v15[4];
              v205 = v15[5];
              v206 = v15[7];
              v722 = (__int128)v15[6];
              v723 = v206;
              v720 = v204;
              v721 = v205;
              v207 = *(__n128 *)(n128_u64 + 112);
              v209 = *(__n128 *)(n128_u64 + 64);
              v208 = *(__n128 *)(n128_u64 + 80);
              v15[6] = *(__n128 *)(n128_u64 + 96);
              v15[7] = v207;
              v15[4] = v209;
              v15[5] = v208;
              v210 = *(__n128 *)n128_u64;
              v211 = *(__n128 *)(n128_u64 + 16);
              v212 = *(__n128 *)(n128_u64 + 48);
              v15[2] = *(__n128 *)(n128_u64 + 32);
              v15[3] = v212;
              *v15 = v210;
              v15[1] = v211;
              v213 = v716;
              v214 = v717;
              v215 = v719;
              *(_OWORD *)(n128_u64 + 32) = v718;
              *(__n128 *)(n128_u64 + 48) = v215;
              *(__n128 *)n128_u64 = v213;
              *(__n128 *)(n128_u64 + 16) = v214;
              v216 = v720;
              v217 = v721;
              v218 = v723;
              *(_OWORD *)(n128_u64 + 96) = v722;
              *(__n128 *)(n128_u64 + 112) = v218;
              *(__n128 *)(n128_u64 + 64) = v216;
              *(__n128 *)(n128_u64 + 80) = v217;
              if (!(*a3)((__n128 *)v8, (__n128 *)n128_u64))
                goto LABEL_32;
              v219 = *(__n128 *)n128_u64;
              v220 = *(__n128 *)(n128_u64 + 16);
              v221 = *(__n128 *)(n128_u64 + 48);
              v718 = *(_OWORD *)(n128_u64 + 32);
              v719 = v221;
              v716 = v219;
              v717 = v220;
              v222 = *(__n128 *)(n128_u64 + 64);
              v223 = *(__n128 *)(n128_u64 + 80);
              v224 = *(__n128 *)(n128_u64 + 112);
              v722 = *(_OWORD *)(n128_u64 + 96);
              v723 = v224;
              v720 = v222;
              v721 = v223;
              v225 = v8[7];
              v227 = v8[4];
              v226 = v8[5];
              *(_OWORD *)(n128_u64 + 96) = v8[6];
              *(_OWORD *)(n128_u64 + 112) = v225;
              *(_OWORD *)(n128_u64 + 64) = v227;
              *(_OWORD *)(n128_u64 + 80) = v226;
              v228 = (__n128)*v8;
              v229 = v8[1];
              v230 = v8[3];
              *(_OWORD *)(n128_u64 + 32) = v8[2];
              *(_OWORD *)(n128_u64 + 48) = v230;
              *(__n128 *)n128_u64 = v228;
              *(_OWORD *)(n128_u64 + 16) = v229;
            }
            v231 = (__int128)v716;
            v232 = (__int128)v717;
            v233 = (__int128)v719;
            v8[2] = v718;
            v8[3] = v233;
            *v8 = v231;
            v8[1] = v232;
            v234 = (__int128)v720;
            v235 = (__int128)v721;
            v236 = (__int128)v723;
            v8[6] = v722;
            v8[7] = v236;
            v8[4] = v234;
            v8[5] = v235;
LABEL_32:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_57;
            goto LABEL_56;
          }
          v17 = v16(v15, (__n128 *)n128_u64);
          v18 = (*a3)((__n128 *)v8, v15);
          if ((v17 & 1) != 0)
          {
            if (v18)
            {
              v19 = *(__n128 *)n128_u64;
              v20 = *(__n128 *)(n128_u64 + 16);
              v21 = *(__n128 *)(n128_u64 + 48);
              v718 = *(_OWORD *)(n128_u64 + 32);
              v719 = v21;
              v716 = v19;
              v717 = v20;
              v22 = *(__n128 *)(n128_u64 + 64);
              v23 = *(__n128 *)(n128_u64 + 80);
              v24 = *(__n128 *)(n128_u64 + 112);
              v722 = *(_OWORD *)(n128_u64 + 96);
              v723 = v24;
              v720 = v22;
              v721 = v23;
              v25 = v8[7];
              v27 = v8[4];
              v26 = v8[5];
              *(_OWORD *)(n128_u64 + 96) = v8[6];
              *(_OWORD *)(n128_u64 + 112) = v25;
              *(_OWORD *)(n128_u64 + 64) = v27;
              *(_OWORD *)(n128_u64 + 80) = v26;
              v28 = (__n128)*v8;
              v29 = v8[1];
              v30 = v8[3];
              *(_OWORD *)(n128_u64 + 32) = v8[2];
              *(_OWORD *)(n128_u64 + 48) = v30;
              *(__n128 *)n128_u64 = v28;
              *(_OWORD *)(n128_u64 + 16) = v29;
            }
            else
            {
              v117 = *(__n128 *)n128_u64;
              v118 = *(__n128 *)(n128_u64 + 16);
              v119 = *(__n128 *)(n128_u64 + 48);
              v718 = *(_OWORD *)(n128_u64 + 32);
              v719 = v119;
              v716 = v117;
              v717 = v118;
              v120 = *(__n128 *)(n128_u64 + 64);
              v121 = *(__n128 *)(n128_u64 + 80);
              v122 = *(__n128 *)(n128_u64 + 112);
              v722 = *(_OWORD *)(n128_u64 + 96);
              v723 = v122;
              v720 = v120;
              v721 = v121;
              v123 = v15[7];
              v125 = v15[4];
              v124 = v15[5];
              *(__n128 *)(n128_u64 + 96) = v15[6];
              *(__n128 *)(n128_u64 + 112) = v123;
              *(__n128 *)(n128_u64 + 64) = v125;
              *(__n128 *)(n128_u64 + 80) = v124;
              v126 = *v15;
              v127 = v15[1];
              v128 = v15[3];
              *(__n128 *)(n128_u64 + 32) = v15[2];
              *(__n128 *)(n128_u64 + 48) = v128;
              *(__n128 *)n128_u64 = v126;
              *(__n128 *)(n128_u64 + 16) = v127;
              v129 = v716;
              v130 = v717;
              v131 = v719;
              v15[2] = (__n128)v718;
              v15[3] = v131;
              *v15 = v129;
              v15[1] = v130;
              v132 = v720;
              v133 = v721;
              v134 = v723;
              v15[6] = (__n128)v722;
              v15[7] = v134;
              v15[4] = v132;
              v15[5] = v133;
              if (!(*a3)((__n128 *)v8, v15))
                goto LABEL_23;
              v135 = *v15;
              v136 = v15[1];
              v137 = v15[3];
              v718 = (__int128)v15[2];
              v719 = v137;
              v716 = v135;
              v717 = v136;
              v138 = v15[4];
              v139 = v15[5];
              v140 = v15[7];
              v722 = (__int128)v15[6];
              v723 = v140;
              v720 = v138;
              v721 = v139;
              v141 = v8[7];
              v143 = v8[4];
              v142 = v8[5];
              v15[6] = (__n128)v8[6];
              v15[7] = (__n128)v141;
              v15[4] = (__n128)v143;
              v15[5] = (__n128)v142;
              v144 = (__n128)*v8;
              v145 = v8[1];
              v146 = v8[3];
              v15[2] = (__n128)v8[2];
              v15[3] = (__n128)v146;
              *v15 = v144;
              v15[1] = (__n128)v145;
            }
            v147 = (__int128)v716;
            v148 = (__int128)v717;
            v149 = (__int128)v719;
            v8[2] = v718;
            v8[3] = v149;
            *v8 = v147;
            v8[1] = v148;
            v150 = (__int128)v720;
            v151 = (__int128)v721;
            v152 = (__int128)v723;
            v8[6] = v722;
            v8[7] = v152;
            v8[4] = v150;
            v8[5] = v151;
          }
          else if (v18)
          {
            v45 = *v15;
            v46 = v15[1];
            v47 = v15[3];
            v718 = (__int128)v15[2];
            v719 = v47;
            v716 = v45;
            v717 = v46;
            v48 = v15[4];
            v49 = v15[5];
            v50 = v15[7];
            v722 = (__int128)v15[6];
            v723 = v50;
            v720 = v48;
            v721 = v49;
            v51 = v8[7];
            v53 = v8[4];
            v52 = v8[5];
            v15[6] = (__n128)v8[6];
            v15[7] = (__n128)v51;
            v15[4] = (__n128)v53;
            v15[5] = (__n128)v52;
            v54 = (__n128)*v8;
            v55 = v8[1];
            v56 = v8[3];
            v15[2] = (__n128)v8[2];
            v15[3] = (__n128)v56;
            *v15 = v54;
            v15[1] = (__n128)v55;
            v57 = (__int128)v716;
            v58 = (__int128)v717;
            v59 = (__int128)v719;
            v8[2] = v718;
            v8[3] = v59;
            *v8 = v57;
            v8[1] = v58;
            v60 = (__int128)v720;
            v61 = (__int128)v721;
            v62 = (__int128)v723;
            v8[6] = v722;
            v8[7] = v62;
            v8[4] = v60;
            v8[5] = v61;
            if ((*a3)(v15, (__n128 *)n128_u64))
            {
              v63 = *(__n128 *)n128_u64;
              v64 = *(__n128 *)(n128_u64 + 16);
              v65 = *(__n128 *)(n128_u64 + 48);
              v718 = *(_OWORD *)(n128_u64 + 32);
              v719 = v65;
              v716 = v63;
              v717 = v64;
              v66 = *(__n128 *)(n128_u64 + 64);
              v67 = *(__n128 *)(n128_u64 + 80);
              v68 = *(__n128 *)(n128_u64 + 112);
              v722 = *(_OWORD *)(n128_u64 + 96);
              v723 = v68;
              v720 = v66;
              v721 = v67;
              v69 = v15[7];
              v71 = v15[4];
              v70 = v15[5];
              *(__n128 *)(n128_u64 + 96) = v15[6];
              *(__n128 *)(n128_u64 + 112) = v69;
              *(__n128 *)(n128_u64 + 64) = v71;
              *(__n128 *)(n128_u64 + 80) = v70;
              v72 = *v15;
              v73 = v15[1];
              v74 = v15[3];
              *(__n128 *)(n128_u64 + 32) = v15[2];
              *(__n128 *)(n128_u64 + 48) = v74;
              *(__n128 *)n128_u64 = v72;
              *(__n128 *)(n128_u64 + 16) = v73;
              v75 = v716;
              v76 = v717;
              v77 = v719;
              v15[2] = (__n128)v718;
              v15[3] = v77;
              *v15 = v75;
              v15[1] = v76;
              v78 = v720;
              v79 = v721;
              v80 = v723;
              v15[6] = (__n128)v722;
              v15[7] = v80;
              v15[4] = v78;
              v15[5] = v79;
            }
          }
LABEL_23:
          v153 = (__n128 *)(n128_u64 + 128);
          v154 = (__n128 *)(a1 + (v14 << 7) - 128);
          v155 = (*a3)(v154, (__n128 *)(a1 + 128));
          v156 = (*a3)(v9, v154);
          if ((v155 & 1) != 0)
          {
            if (v156)
            {
              v157 = *(__n128 *)(a1 + 208);
              v720 = *(__n128 *)(a1 + 192);
              v721 = v157;
              v158 = *(__n128 *)(a1 + 240);
              v722 = *(_OWORD *)(a1 + 224);
              v723 = v158;
              v159 = *(__n128 *)(a1 + 144);
              v716 = *v153;
              v717 = v159;
              v160 = *(__n128 *)(a1 + 176);
              v718 = *(_OWORD *)(a1 + 160);
              v719 = v160;
              v161 = *v9;
              v162 = v9[1];
              v163 = v9[3];
              *(__n128 *)(a1 + 160) = v9[2];
              *(__n128 *)(a1 + 176) = v163;
              *v153 = v161;
              *(__n128 *)(a1 + 144) = v162;
              v165 = v9[6];
              v164 = v9[7];
              v166 = v9[5];
              *(__n128 *)(a1 + 192) = v9[4];
              *(__n128 *)(a1 + 208) = v166;
              *(__n128 *)(a1 + 224) = v165;
              *(__n128 *)(a1 + 240) = v164;
            }
            else
            {
              v237 = *(__n128 *)(a1 + 208);
              v720 = *(__n128 *)(a1 + 192);
              v721 = v237;
              v238 = *(__n128 *)(a1 + 240);
              v722 = *(_OWORD *)(a1 + 224);
              v723 = v238;
              v239 = *(__n128 *)(a1 + 144);
              v716 = *v153;
              v717 = v239;
              v240 = *(__n128 *)(a1 + 176);
              v718 = *(_OWORD *)(a1 + 160);
              v719 = v240;
              v241 = *v154;
              v242 = *(_OWORD *)(a1 + (v14 << 7) - 112);
              v243 = *(_OWORD *)(a1 + (v14 << 7) - 80);
              *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + (v14 << 7) - 96);
              *(_OWORD *)(a1 + 176) = v243;
              *v153 = v241;
              *(_OWORD *)(a1 + 144) = v242;
              v245 = *(_OWORD *)(a1 + (v14 << 7) - 32);
              v244 = *(_OWORD *)(a1 + (v14 << 7) - 16);
              v246 = *(_OWORD *)(a1 + (v14 << 7) - 48);
              *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + (v14 << 7) - 64);
              *(_OWORD *)(a1 + 208) = v246;
              *(_OWORD *)(a1 + 224) = v245;
              *(_OWORD *)(a1 + 240) = v244;
              v247 = v716;
              v248 = v717;
              v249 = v719;
              *(_OWORD *)(a1 + (v14 << 7) - 96) = v718;
              *(__n128 *)(a1 + (v14 << 7) - 80) = v249;
              *v154 = v247;
              *(__n128 *)(a1 + (v14 << 7) - 112) = v248;
              v250 = v720;
              v251 = v721;
              v252 = v723;
              *(_OWORD *)(a1 + (v14 << 7) - 32) = v722;
              *(__n128 *)(a1 + (v14 << 7) - 16) = v252;
              *(__n128 *)(a1 + (v14 << 7) - 64) = v250;
              *(__n128 *)(a1 + (v14 << 7) - 48) = v251;
              if (!(*a3)(v9, (__n128 *)(a1 + (v14 << 7) - 128)))
                goto LABEL_37;
              v253 = *v154;
              v254 = *(__n128 *)(a1 + (v14 << 7) - 112);
              v255 = *(__n128 *)(a1 + (v14 << 7) - 80);
              v718 = *(_OWORD *)(a1 + (v14 << 7) - 96);
              v719 = v255;
              v716 = v253;
              v717 = v254;
              v256 = *(__n128 *)(a1 + (v14 << 7) - 64);
              v257 = *(__n128 *)(a1 + (v14 << 7) - 48);
              v258 = *(__n128 *)(a1 + (v14 << 7) - 16);
              v722 = *(_OWORD *)(a1 + (v14 << 7) - 32);
              v723 = v258;
              v720 = v256;
              v721 = v257;
              v259 = v9[7];
              v261 = v9[4];
              v260 = v9[5];
              *(__n128 *)(a1 + (v14 << 7) - 32) = v9[6];
              *(__n128 *)(a1 + (v14 << 7) - 16) = v259;
              *(__n128 *)(a1 + (v14 << 7) - 64) = v261;
              *(__n128 *)(a1 + (v14 << 7) - 48) = v260;
              v262 = *v9;
              v263 = v9[1];
              v264 = v9[3];
              *(__n128 *)(a1 + (v14 << 7) - 96) = v9[2];
              *(__n128 *)(a1 + (v14 << 7) - 80) = v264;
              *v154 = v262;
              *(__n128 *)(a1 + (v14 << 7) - 112) = v263;
            }
            v265 = v716;
            v266 = v717;
            v267 = v719;
            v9[2] = (__n128)v718;
            v9[3] = v267;
            *v9 = v265;
            v9[1] = v266;
            v268 = v720;
            v269 = v721;
            v270 = v723;
            v9[6] = (__n128)v722;
            v9[7] = v270;
            v9[4] = v268;
            v9[5] = v269;
          }
          else if (v156)
          {
            v167 = *v154;
            v168 = *(__n128 *)(a1 + (v14 << 7) - 112);
            v169 = *(__n128 *)(a1 + (v14 << 7) - 80);
            v718 = *(_OWORD *)(a1 + (v14 << 7) - 96);
            v719 = v169;
            v716 = v167;
            v717 = v168;
            v170 = *(__n128 *)(a1 + (v14 << 7) - 64);
            v171 = *(__n128 *)(a1 + (v14 << 7) - 48);
            v172 = *(__n128 *)(a1 + (v14 << 7) - 16);
            v722 = *(_OWORD *)(a1 + (v14 << 7) - 32);
            v723 = v172;
            v720 = v170;
            v721 = v171;
            v173 = v9[7];
            v175 = v9[4];
            v174 = v9[5];
            *(__n128 *)(a1 + (v14 << 7) - 32) = v9[6];
            *(__n128 *)(a1 + (v14 << 7) - 16) = v173;
            *(__n128 *)(a1 + (v14 << 7) - 64) = v175;
            *(__n128 *)(a1 + (v14 << 7) - 48) = v174;
            v176 = *v9;
            v177 = v9[1];
            v178 = v9[3];
            *(__n128 *)(a1 + (v14 << 7) - 96) = v9[2];
            *(__n128 *)(a1 + (v14 << 7) - 80) = v178;
            *v154 = v176;
            *(__n128 *)(a1 + (v14 << 7) - 112) = v177;
            v179 = v716;
            v180 = v717;
            v181 = v719;
            v9[2] = (__n128)v718;
            v9[3] = v181;
            *v9 = v179;
            v9[1] = v180;
            v182 = v720;
            v183 = v721;
            v184 = v723;
            v9[6] = (__n128)v722;
            v9[7] = v184;
            v9[4] = v182;
            v9[5] = v183;
            if ((*a3)((__n128 *)(a1 + (v14 << 7) - 128), (__n128 *)(a1 + 128)))
            {
              v185 = *(__n128 *)(a1 + 208);
              v720 = *(__n128 *)(a1 + 192);
              v721 = v185;
              v186 = *(__n128 *)(a1 + 240);
              v722 = *(_OWORD *)(a1 + 224);
              v723 = v186;
              v187 = *(__n128 *)(a1 + 144);
              v716 = *v153;
              v717 = v187;
              v188 = *(__n128 *)(a1 + 176);
              v718 = *(_OWORD *)(a1 + 160);
              v719 = v188;
              v189 = *v154;
              v190 = *(_OWORD *)(a1 + (v14 << 7) - 112);
              v191 = *(_OWORD *)(a1 + (v14 << 7) - 80);
              *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + (v14 << 7) - 96);
              *(_OWORD *)(a1 + 176) = v191;
              *v153 = v189;
              *(_OWORD *)(a1 + 144) = v190;
              v193 = *(_OWORD *)(a1 + (v14 << 7) - 32);
              v192 = *(_OWORD *)(a1 + (v14 << 7) - 16);
              v194 = *(_OWORD *)(a1 + (v14 << 7) - 48);
              *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + (v14 << 7) - 64);
              *(_OWORD *)(a1 + 208) = v194;
              *(_OWORD *)(a1 + 224) = v193;
              *(_OWORD *)(a1 + 240) = v192;
              v195 = v716;
              v196 = v717;
              v197 = v719;
              *(_OWORD *)(a1 + (v14 << 7) - 96) = v718;
              *(__n128 *)(a1 + (v14 << 7) - 80) = v197;
              *v154 = v195;
              *(__n128 *)(a1 + (v14 << 7) - 112) = v196;
              v198 = v720;
              v199 = v721;
              v200 = v723;
              *(_OWORD *)(a1 + (v14 << 7) - 32) = v722;
              *(__n128 *)(a1 + (v14 << 7) - 16) = v200;
              *(__n128 *)(a1 + (v14 << 7) - 64) = v198;
              *(__n128 *)(a1 + (v14 << 7) - 48) = v199;
            }
          }
LABEL_37:
          v271 = (__n128 *)(a1 + 256);
          v272 = (__n128 *)(a1 + (v14 << 7) + 128);
          v273 = (*a3)(v272, (__n128 *)(a1 + 256));
          v274 = (*a3)(v10, v272);
          if ((v273 & 1) != 0)
          {
            if (v274)
            {
              v275 = *(__n128 *)(a1 + 336);
              v720 = *(__n128 *)(a1 + 320);
              v721 = v275;
              v276 = *(__n128 *)(a1 + 368);
              v722 = *(_OWORD *)(a1 + 352);
              v723 = v276;
              v277 = *(__n128 *)(a1 + 272);
              v716 = *v271;
              v717 = v277;
              v278 = *(__n128 *)(a1 + 304);
              v718 = *(_OWORD *)(a1 + 288);
              v719 = v278;
              v279 = *v10;
              v280 = v10[1];
              v281 = v10[3];
              *(__n128 *)(a1 + 288) = v10[2];
              *(__n128 *)(a1 + 304) = v281;
              *v271 = v279;
              *(__n128 *)(a1 + 272) = v280;
              v283 = v10[6];
              v282 = v10[7];
              v284 = v10[5];
              *(__n128 *)(a1 + 320) = v10[4];
              *(__n128 *)(a1 + 336) = v284;
              *(__n128 *)(a1 + 352) = v283;
              *(__n128 *)(a1 + 368) = v282;
            }
            else
            {
              v319 = *(__n128 *)(a1 + 336);
              v720 = *(__n128 *)(a1 + 320);
              v721 = v319;
              v320 = *(__n128 *)(a1 + 368);
              v722 = *(_OWORD *)(a1 + 352);
              v723 = v320;
              v321 = *(__n128 *)(a1 + 272);
              v716 = *v271;
              v717 = v321;
              v322 = *(__n128 *)(a1 + 304);
              v718 = *(_OWORD *)(a1 + 288);
              v719 = v322;
              v323 = *v272;
              v324 = v272[1];
              v325 = v272[3];
              *(__n128 *)(a1 + 288) = v272[2];
              *(__n128 *)(a1 + 304) = v325;
              *v271 = v323;
              *(__n128 *)(a1 + 272) = v324;
              v327 = v272[6];
              v326 = v272[7];
              v328 = v272[5];
              *(__n128 *)(a1 + 320) = v272[4];
              *(__n128 *)(a1 + 336) = v328;
              *(__n128 *)(a1 + 352) = v327;
              *(__n128 *)(a1 + 368) = v326;
              v329 = v716;
              v330 = v717;
              v331 = v719;
              v272[2] = (__n128)v718;
              v272[3] = v331;
              *v272 = v329;
              v272[1] = v330;
              v332 = v720;
              v333 = v721;
              v334 = v723;
              v272[6] = (__n128)v722;
              v272[7] = v334;
              v272[4] = v332;
              v272[5] = v333;
              if (!(*a3)(v10, v272))
                goto LABEL_46;
              v335 = *v272;
              v336 = v272[1];
              v337 = v272[3];
              v718 = (__int128)v272[2];
              v719 = v337;
              v716 = v335;
              v717 = v336;
              v338 = v272[4];
              v339 = v272[5];
              v340 = v272[7];
              v722 = (__int128)v272[6];
              v723 = v340;
              v720 = v338;
              v721 = v339;
              v341 = v10[7];
              v343 = v10[4];
              v342 = v10[5];
              v272[6] = v10[6];
              v272[7] = v341;
              v272[4] = v343;
              v272[5] = v342;
              v344 = *v10;
              v345 = v10[1];
              v346 = v10[3];
              v272[2] = v10[2];
              v272[3] = v346;
              *v272 = v344;
              v272[1] = v345;
            }
            v347 = v716;
            v348 = v717;
            v349 = v719;
            v10[2] = (__n128)v718;
            v10[3] = v349;
            *v10 = v347;
            v10[1] = v348;
            v350 = v720;
            v351 = v721;
            v352 = v723;
            v10[6] = (__n128)v722;
            v10[7] = v352;
            v10[4] = v350;
            v10[5] = v351;
          }
          else if (v274)
          {
            v285 = *v272;
            v286 = v272[1];
            v287 = v272[3];
            v718 = (__int128)v272[2];
            v719 = v287;
            v716 = v285;
            v717 = v286;
            v288 = v272[4];
            v289 = v272[5];
            v290 = v272[7];
            v722 = (__int128)v272[6];
            v723 = v290;
            v720 = v288;
            v721 = v289;
            v291 = v10[7];
            v293 = v10[4];
            v292 = v10[5];
            v272[6] = v10[6];
            v272[7] = v291;
            v272[4] = v293;
            v272[5] = v292;
            v294 = *v10;
            v295 = v10[1];
            v296 = v10[3];
            v272[2] = v10[2];
            v272[3] = v296;
            *v272 = v294;
            v272[1] = v295;
            v297 = v716;
            v298 = v717;
            v299 = v719;
            v10[2] = (__n128)v718;
            v10[3] = v299;
            *v10 = v297;
            v10[1] = v298;
            v300 = v720;
            v301 = v721;
            v302 = v723;
            v10[6] = (__n128)v722;
            v10[7] = v302;
            v10[4] = v300;
            v10[5] = v301;
            if ((*a3)(v272, (__n128 *)(a1 + 256)))
            {
              v303 = *(__n128 *)(a1 + 336);
              v720 = *(__n128 *)(a1 + 320);
              v721 = v303;
              v304 = *(__n128 *)(a1 + 368);
              v722 = *(_OWORD *)(a1 + 352);
              v723 = v304;
              v305 = *(__n128 *)(a1 + 272);
              v716 = *v271;
              v717 = v305;
              v306 = *(__n128 *)(a1 + 304);
              v718 = *(_OWORD *)(a1 + 288);
              v719 = v306;
              v307 = *v272;
              v308 = v272[1];
              v309 = v272[3];
              *(__n128 *)(a1 + 288) = v272[2];
              *(__n128 *)(a1 + 304) = v309;
              *v271 = v307;
              *(__n128 *)(a1 + 272) = v308;
              v311 = v272[6];
              v310 = v272[7];
              v312 = v272[5];
              *(__n128 *)(a1 + 320) = v272[4];
              *(__n128 *)(a1 + 336) = v312;
              *(__n128 *)(a1 + 352) = v311;
              *(__n128 *)(a1 + 368) = v310;
              v313 = v716;
              v314 = v717;
              v315 = v719;
              v272[2] = (__n128)v718;
              v272[3] = v315;
              *v272 = v313;
              v272[1] = v314;
              v316 = v720;
              v317 = v721;
              v318 = v723;
              v272[6] = (__n128)v722;
              v272[7] = v318;
              v272[4] = v316;
              v272[5] = v317;
            }
          }
LABEL_46:
          v353 = (*a3)(v15, v154);
          v354 = (*a3)(v272, v15);
          if ((v353 & 1) != 0)
          {
            if (v354)
            {
              v355 = *v154;
              v356 = v154[1];
              v357 = v154[3];
              v718 = (__int128)v154[2];
              v719 = v357;
              v716 = v355;
              v717 = v356;
              v358 = v154[4];
              v359 = v154[5];
              v360 = v154[7];
              v722 = (__int128)v154[6];
              v723 = v360;
              v720 = v358;
              v721 = v359;
              v361 = v272[5];
              v154[4] = v272[4];
              v154[5] = v361;
              v362 = v272[7];
              v154[6] = v272[6];
              v154[7] = v362;
              v363 = v272[1];
              *v154 = *v272;
              v154[1] = v363;
              v364 = v272[3];
              v154[2] = v272[2];
              v154[3] = v364;
            }
            else
            {
              v397 = *v154;
              v398 = v154[1];
              v399 = v154[3];
              v718 = (__int128)v154[2];
              v719 = v399;
              v716 = v397;
              v717 = v398;
              v400 = v154[4];
              v401 = v154[5];
              v402 = v154[7];
              v722 = (__int128)v154[6];
              v723 = v402;
              v720 = v400;
              v721 = v401;
              v403 = v15[5];
              v154[4] = v15[4];
              v154[5] = v403;
              v404 = v15[7];
              v154[6] = v15[6];
              v154[7] = v404;
              v405 = v15[1];
              *v154 = *v15;
              v154[1] = v405;
              v406 = v15[3];
              v154[2] = v15[2];
              v154[3] = v406;
              v407 = v716;
              v408 = v717;
              v409 = v719;
              v15[2] = (__n128)v718;
              v15[3] = v409;
              *v15 = v407;
              v15[1] = v408;
              v410 = v720;
              v411 = v721;
              v412 = v723;
              v15[6] = (__n128)v722;
              v15[7] = v412;
              v15[4] = v410;
              v15[5] = v411;
              if (!(*a3)(v272, v15))
                goto LABEL_55;
              v413 = *v15;
              v414 = v15[1];
              v415 = v15[3];
              v718 = (__int128)v15[2];
              v719 = v415;
              v716 = v413;
              v717 = v414;
              v416 = v15[4];
              v417 = v15[5];
              v418 = v15[7];
              v722 = (__int128)v15[6];
              v723 = v418;
              v720 = v416;
              v721 = v417;
              v419 = v272[5];
              v15[4] = v272[4];
              v15[5] = v419;
              v420 = v272[7];
              v15[6] = v272[6];
              v15[7] = v420;
              v421 = v272[1];
              *v15 = *v272;
              v15[1] = v421;
              v422 = v272[3];
              v15[2] = v272[2];
              v15[3] = v422;
            }
            v423 = v716;
            v424 = v717;
            v425 = v719;
            v272[2] = (__n128)v718;
            v272[3] = v425;
            *v272 = v423;
            v272[1] = v424;
            v426 = v720;
            v427 = v721;
            v428 = v723;
            v272[6] = (__n128)v722;
            v272[7] = v428;
            v272[4] = v426;
            v272[5] = v427;
          }
          else if (v354)
          {
            v365 = *v15;
            v366 = v15[1];
            v367 = v15[3];
            v718 = (__int128)v15[2];
            v719 = v367;
            v716 = v365;
            v717 = v366;
            v368 = v15[4];
            v369 = v15[5];
            v370 = v15[7];
            v722 = (__int128)v15[6];
            v723 = v370;
            v720 = v368;
            v721 = v369;
            v371 = v272[5];
            v15[4] = v272[4];
            v15[5] = v371;
            v372 = v272[7];
            v15[6] = v272[6];
            v15[7] = v372;
            v373 = v272[1];
            *v15 = *v272;
            v15[1] = v373;
            v374 = v272[3];
            v15[2] = v272[2];
            v15[3] = v374;
            v375 = v716;
            v376 = v717;
            v377 = v719;
            v272[2] = (__n128)v718;
            v272[3] = v377;
            *v272 = v375;
            v272[1] = v376;
            v378 = v720;
            v379 = v721;
            v380 = v723;
            v272[6] = (__n128)v722;
            v272[7] = v380;
            v272[4] = v378;
            v272[5] = v379;
            if ((*a3)(v15, v154))
            {
              v381 = *v154;
              v382 = v154[1];
              v383 = v154[3];
              v718 = (__int128)v154[2];
              v719 = v383;
              v716 = v381;
              v717 = v382;
              v384 = v154[4];
              v385 = v154[5];
              v386 = v154[7];
              v722 = (__int128)v154[6];
              v723 = v386;
              v720 = v384;
              v721 = v385;
              v387 = v15[5];
              v154[4] = v15[4];
              v154[5] = v387;
              v388 = v15[7];
              v154[6] = v15[6];
              v154[7] = v388;
              v389 = v15[1];
              *v154 = *v15;
              v154[1] = v389;
              v390 = v15[3];
              v154[2] = v15[2];
              v154[3] = v390;
              v391 = v716;
              v392 = v717;
              v393 = v719;
              v15[2] = (__n128)v718;
              v15[3] = v393;
              *v15 = v391;
              v15[1] = v392;
              v394 = v720;
              v395 = v721;
              v396 = v723;
              v15[6] = (__n128)v722;
              v15[7] = v396;
              v15[4] = v394;
              v15[5] = v395;
            }
          }
LABEL_55:
          v429 = *(__n128 *)a1;
          v430 = *(__n128 *)(a1 + 16);
          v431 = *(__n128 *)(a1 + 48);
          v718 = *(_OWORD *)(a1 + 32);
          v719 = v431;
          v716 = v429;
          v717 = v430;
          v432 = *(__n128 *)(a1 + 64);
          v433 = *(__n128 *)(a1 + 80);
          v434 = *(__n128 *)(a1 + 112);
          v722 = *(_OWORD *)(a1 + 96);
          v723 = v434;
          v720 = v432;
          v721 = v433;
          v435 = v15[7];
          v437 = v15[4];
          v436 = v15[5];
          *(__n128 *)(a1 + 96) = v15[6];
          *(__n128 *)(a1 + 112) = v435;
          *(__n128 *)(a1 + 64) = v437;
          *(__n128 *)(a1 + 80) = v436;
          v438 = *v15;
          v439 = v15[1];
          v440 = v15[3];
          *(__n128 *)(a1 + 32) = v15[2];
          *(__n128 *)(a1 + 48) = v440;
          *(__n128 *)a1 = v438;
          *(__n128 *)(a1 + 16) = v439;
          v441 = v716;
          v442 = v717;
          v443 = v719;
          v15[2] = (__n128)v718;
          v15[3] = v443;
          *v15 = v441;
          v15[1] = v442;
          v444 = v720;
          v445 = v721;
          v446 = v723;
          v15[6] = (__n128)v722;
          v15[7] = v446;
          v15[4] = v444;
          v15[5] = v445;
          a2 = v705;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_57;
LABEL_56:
          if (((*a3)((__n128 *)(a1 - 128), (__n128 *)a1) & 1) == 0)
          {
            v490 = *(__n128 *)a1;
            v491 = *(__n128 *)(a1 + 16);
            v492 = *(__n128 *)(a1 + 48);
            v710 = *(__n128 *)(a1 + 32);
            v711 = v492;
            v708 = v490;
            v709 = v491;
            v493 = *(__n128 *)(a1 + 64);
            v494 = *(__n128 *)(a1 + 80);
            v495 = *(__n128 *)(a1 + 112);
            v714 = *(__n128 *)(a1 + 96);
            v715 = v495;
            v712 = v493;
            v713 = v494;
            if (((*a3)(&v708, (__n128 *)v8) & 1) != 0)
            {
              n128_u64 = a1;
              do
                n128_u64 += 128;
              while (((*a3)(&v708, (__n128 *)n128_u64) & 1) == 0);
            }
            else
            {
              v496 = (__n128 *)(a1 + 128);
              do
              {
                n128_u64 = (unint64_t)v496;
                if (v496 >= (__n128 *)a2)
                  break;
                v497 = (*a3)(&v708, v496);
                v496 = (__n128 *)(n128_u64 + 128);
              }
              while (!v497);
            }
            v498 = a2;
            if (n128_u64 < (unint64_t)a2)
            {
              v498 = a2;
              do
                v498 -= 8;
              while (((*a3)(&v708, (__n128 *)v498) & 1) != 0);
            }
            while (n128_u64 < (unint64_t)v498)
            {
              v499 = *(__n128 *)n128_u64;
              v500 = *(__n128 *)(n128_u64 + 16);
              v501 = *(__n128 *)(n128_u64 + 48);
              v718 = *(_OWORD *)(n128_u64 + 32);
              v719 = v501;
              v716 = v499;
              v717 = v500;
              v502 = *(__n128 *)(n128_u64 + 64);
              v503 = *(__n128 *)(n128_u64 + 80);
              v504 = *(__n128 *)(n128_u64 + 112);
              v722 = *(_OWORD *)(n128_u64 + 96);
              v723 = v504;
              v720 = v502;
              v721 = v503;
              v505 = v498[7];
              v507 = v498[4];
              v506 = v498[5];
              *(_OWORD *)(n128_u64 + 96) = v498[6];
              *(_OWORD *)(n128_u64 + 112) = v505;
              *(_OWORD *)(n128_u64 + 64) = v507;
              *(_OWORD *)(n128_u64 + 80) = v506;
              v508 = (__n128)*v498;
              v509 = v498[1];
              v510 = v498[3];
              *(_OWORD *)(n128_u64 + 32) = v498[2];
              *(_OWORD *)(n128_u64 + 48) = v510;
              *(__n128 *)n128_u64 = v508;
              *(_OWORD *)(n128_u64 + 16) = v509;
              v511 = (__int128)v716;
              v512 = (__int128)v717;
              v513 = (__int128)v719;
              v498[2] = v718;
              v498[3] = v513;
              *v498 = v511;
              v498[1] = v512;
              v514 = (__int128)v720;
              v515 = (__int128)v721;
              v516 = (__int128)v723;
              v498[6] = v722;
              v498[7] = v516;
              v498[4] = v514;
              v498[5] = v515;
              do
                n128_u64 += 128;
              while (!(*a3)(&v708, (__n128 *)n128_u64));
              do
                v498 -= 8;
              while (((*a3)(&v708, (__n128 *)v498) & 1) != 0);
            }
            v517 = (__n128 *)(n128_u64 - 128);
            if (n128_u64 - 128 != a1)
            {
              v518 = *v517;
              v519 = *(_OWORD *)(n128_u64 - 112);
              v520 = *(_OWORD *)(n128_u64 - 80);
              *(_OWORD *)(a1 + 32) = *(_OWORD *)(n128_u64 - 96);
              *(_OWORD *)(a1 + 48) = v520;
              *(__n128 *)a1 = v518;
              *(_OWORD *)(a1 + 16) = v519;
              v521 = *(_OWORD *)(n128_u64 - 64);
              v522 = *(_OWORD *)(n128_u64 - 48);
              v523 = *(_OWORD *)(n128_u64 - 16);
              *(_OWORD *)(a1 + 96) = *(_OWORD *)(n128_u64 - 32);
              *(_OWORD *)(a1 + 112) = v523;
              *(_OWORD *)(a1 + 64) = v521;
              *(_OWORD *)(a1 + 80) = v522;
            }
            a5 = 0;
            v524 = v708;
            v525 = v709;
            v526 = v711;
            *(__n128 *)(n128_u64 - 96) = v710;
            *(__n128 *)(n128_u64 - 80) = v526;
            *v517 = v524;
            *(__n128 *)(n128_u64 - 112) = v525;
            v527 = v712;
            v528 = v713;
            v529 = v715;
            *(__n128 *)(n128_u64 - 32) = v714;
            *(__n128 *)(n128_u64 - 16) = v529;
            *(__n128 *)(n128_u64 - 64) = v527;
            *(__n128 *)(n128_u64 - 48) = v528;
            continue;
          }
LABEL_57:
          v447 = 0;
          v448 = *(__n128 *)a1;
          v449 = *(__n128 *)(a1 + 16);
          v450 = *(__n128 *)(a1 + 48);
          v710 = *(__n128 *)(a1 + 32);
          v711 = v450;
          v708 = v448;
          v709 = v449;
          v451 = *(__n128 *)(a1 + 64);
          v452 = *(__n128 *)(a1 + 80);
          v453 = *(__n128 *)(a1 + 112);
          v714 = *(__n128 *)(a1 + 96);
          v715 = v453;
          v712 = v451;
          v713 = v452;
          do
            v447 += 128;
          while (((*a3)((__n128 *)(v447 + a1), &v708) & 1) != 0);
          v454 = a1 + v447;
          v455 = a2;
          if (v447 == 128)
          {
            v455 = a2;
            do
            {
              if (v454 >= (unint64_t)v455)
                break;
              v455 -= 8;
            }
            while (((*a3)((__n128 *)v455, &v708) & 1) == 0);
          }
          else
          {
            do
              v455 -= 8;
            while (!(*a3)((__n128 *)v455, &v708));
          }
          if (v454 < (unint64_t)v455)
          {
            v456 = (__n128 *)(a1 + v447);
            v457 = (__n128 *)v455;
            do
            {
              v458 = *v456;
              v459 = v456[1];
              v460 = v456[3];
              v718 = (__int128)v456[2];
              v719 = v460;
              v716 = v458;
              v717 = v459;
              v461 = v456[4];
              v462 = v456[5];
              v463 = v456[7];
              v722 = (__int128)v456[6];
              v723 = v463;
              v720 = v461;
              v721 = v462;
              v464 = v457[7];
              v466 = v457[4];
              v465 = v457[5];
              v456[6] = v457[6];
              v456[7] = v464;
              v456[4] = v466;
              v456[5] = v465;
              v467 = *v457;
              v468 = v457[1];
              v469 = v457[3];
              v456[2] = v457[2];
              v456[3] = v469;
              *v456 = v467;
              v456[1] = v468;
              v470 = v716;
              v471 = v717;
              v472 = v719;
              v457[2] = (__n128)v718;
              v457[3] = v472;
              *v457 = v470;
              v457[1] = v471;
              v473 = v720;
              v474 = v721;
              v475 = v723;
              v457[6] = (__n128)v722;
              v457[7] = v475;
              v457[4] = v473;
              v457[5] = v474;
              do
                v456 += 8;
              while (((*a3)(v456, &v708) & 1) != 0);
              do
                v457 -= 8;
              while (!(*a3)(v457, &v708));
            }
            while (v456 < v457);
            v476 = v456 - 8;
            if (v476 == (__n128 *)a1)
              goto LABEL_75;
LABEL_74:
            v477 = *v476;
            v478 = v476[1];
            v479 = v476[3];
            *(__n128 *)(a1 + 32) = v476[2];
            *(__n128 *)(a1 + 48) = v479;
            *(__n128 *)a1 = v477;
            *(__n128 *)(a1 + 16) = v478;
            v480 = v476[4];
            v481 = v476[5];
            v482 = v476[7];
            *(__n128 *)(a1 + 96) = v476[6];
            *(__n128 *)(a1 + 112) = v482;
            *(__n128 *)(a1 + 64) = v480;
            *(__n128 *)(a1 + 80) = v481;
            goto LABEL_75;
          }
          v476 = (__n128 *)(v454 - 128);
          if (v454 - 128 != a1)
            goto LABEL_74;
LABEL_75:
          v483 = v708;
          v484 = v709;
          v485 = v711;
          v476[2] = v710;
          v476[3] = v485;
          *v476 = v483;
          v476[1] = v484;
          v486 = v712;
          v487 = v713;
          v488 = v715;
          v476[6] = v714;
          v476[7] = v488;
          v476[4] = v486;
          v476[5] = v487;
          if (v454 < (unint64_t)v455)
            goto LABEL_78;
          v489 = sub_20E7D06D4((__n128 *)a1, v476, a3);
          n128_u64 = (unint64_t)v476[8].n128_u64;
          if (!sub_20E7D06D4(v476 + 8, (__n128 *)a2, a3))
          {
            if (v489)
              continue;
LABEL_78:
            sub_20E7CF160(a1, v476, a3, a4, a5 & 1);
            a5 = 0;
            n128_u64 = (unint64_t)v476[8].n128_u64;
            continue;
          }
          a2 = (__int128 *)v476;
          if (v489)
            return;
          goto LABEL_2;
        }
        v602 = (__int128 *)(n128_u64 + 128);
        v604 = (__int128 *)n128_u64 == a2 || v602 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v604)
          {
            v605 = 0;
            v606 = (_OWORD *)n128_u64;
            do
            {
              v614 = (__n128 *)v606;
              v606 = v602;
              if ((*a3)((__n128 *)v602, v614))
              {
                v615 = *(__n128 *)v606;
                v616 = *((__n128 *)v606 + 1);
                v617 = *((__n128 *)v606 + 3);
                v718 = v606[2];
                v719 = v617;
                v716 = v615;
                v717 = v616;
                v618 = *((__n128 *)v606 + 4);
                v619 = *((__n128 *)v606 + 5);
                v620 = *((__n128 *)v606 + 7);
                v722 = v606[6];
                v723 = v620;
                v720 = v618;
                v721 = v619;
                v621 = v605;
                do
                {
                  v622 = (_OWORD *)(n128_u64 + v621);
                  v623 = *(_OWORD *)(n128_u64 + v621 + 80);
                  v622[12] = *(_OWORD *)(n128_u64 + v621 + 64);
                  v622[13] = v623;
                  v624 = *(_OWORD *)(n128_u64 + v621 + 112);
                  v622[14] = *(_OWORD *)(n128_u64 + v621 + 96);
                  v622[15] = v624;
                  v625 = *(_OWORD *)(n128_u64 + v621 + 16);
                  v622[8] = *(_OWORD *)(n128_u64 + v621);
                  v622[9] = v625;
                  v626 = *(_OWORD *)(n128_u64 + v621 + 48);
                  v622[10] = *(_OWORD *)(n128_u64 + v621 + 32);
                  v622[11] = v626;
                  if (!v621)
                  {
                    v607 = (_OWORD *)n128_u64;
                    goto LABEL_121;
                  }
                  v621 -= 128;
                }
                while (((*a3)(&v716, (__n128 *)(v621 + n128_u64)) & 1) != 0);
                v607 = (_OWORD *)(n128_u64 + v621 + 128);
LABEL_121:
                v608 = v716;
                v609 = v717;
                v610 = v719;
                v607[2] = v718;
                v607[3] = v610;
                *v607 = v608;
                v607[1] = v609;
                v611 = v720;
                v612 = v721;
                v613 = v723;
                v607[6] = v722;
                v607[7] = v613;
                v607[4] = v611;
                v607[5] = v612;
              }
              v602 = v606 + 8;
              v605 += 128;
            }
            while (v606 + 8 != a2);
          }
        }
        else if (!v604)
        {
          v659 = (__n128 *)(n128_u64 - 128);
          do
          {
            v660 = (__n128 *)a1;
            a1 = (unint64_t)v602;
            if ((*a3)((__n128 *)v602, v660))
            {
              v661 = *(__n128 *)a1;
              v662 = *(__n128 *)(a1 + 16);
              v663 = *(__n128 *)(a1 + 48);
              v718 = *(_OWORD *)(a1 + 32);
              v719 = v663;
              v716 = v661;
              v717 = v662;
              v664 = *(__n128 *)(a1 + 64);
              v665 = *(__n128 *)(a1 + 80);
              v666 = *(__n128 *)(a1 + 112);
              v722 = *(_OWORD *)(a1 + 96);
              v723 = v666;
              v720 = v664;
              v721 = v665;
              v667 = v659;
              do
              {
                v668 = v667[13];
                v667[20] = v667[12];
                v667[21] = v668;
                v669 = v667[15];
                v667[22] = v667[14];
                v667[23] = v669;
                v670 = v667[9];
                v667[16] = v667[8];
                v667[17] = v670;
                v671 = v667[11];
                v667[18] = v667[10];
                v667[19] = v671;
                v672 = (*a3)(&v716, v667);
                v667 -= 8;
              }
              while ((v672 & 1) != 0);
              v673 = v716;
              v674 = v717;
              v675 = v719;
              v667[18] = (__n128)v718;
              v667[19] = v675;
              v667[16] = v673;
              v667[17] = v674;
              v676 = v720;
              v677 = v721;
              v678 = v723;
              v667[22] = (__n128)v722;
              v667[23] = v678;
              v667[20] = v676;
              v667[21] = v677;
            }
            v602 = (__int128 *)(a1 + 128);
            v659 += 8;
          }
          while ((__int128 *)(a1 + 128) != a2);
        }
        return;
    }
  }
}

BOOL sub_20E7D06D4(__n128 *a1, __n128 *a2, uint64_t (**a3)(__n128 *, __n128 *))
{
  uint64_t v6;
  _BOOL8 result;
  __n128 *v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 *v23;
  __n128 *v24;
  char v25;
  int v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 *v37;
  __n128 *v38;
  char v39;
  int v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 *v51;
  __n128 *v52;
  __n128 *v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  __n128 *v195;
  uint64_t v196;
  int v197;
  __n128 *v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  __n128 v206;
  uint64_t v207;
  __n128 *v208;
  __n128 v209;
  __n128 v210;
  __n128 v211;
  __n128 v212;
  __n128 v213;
  __n128 v214;
  __n128 v215;
  __n128 v216;
  __n128 v217;
  __n128 v218;
  __n128 v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  __n128 v223;
  __n128 v224;
  __n128 v225;
  __n128 v226;
  __n128 v227;
  __n128 v228;
  __n128 v229;
  __n128 v230;
  __n128 v231;
  __n128 v232;
  __n128 v233;
  __n128 v234;
  __n128 v235;
  __n128 v236;
  __n128 v237;
  __n128 v238;
  __n128 v239;
  __n128 v240;
  __n128 v241;
  __n128 v242;
  __n128 v243;
  __n128 v244;
  __n128 v245;
  __n128 v246;
  __n128 v247;
  __n128 v248;
  __n128 v249;
  __n128 v250;
  uint64_t v251;

  v251 = *MEMORY[0x24BDAC8D0];
  v6 = ((char *)a2 - (char *)a1) >> 7;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 8;
      if (!(*a3)(a2 - 8, a1))
        return 1;
      v9 = a1[5];
      v247 = a1[4];
      v248 = v9;
      v10 = a1[7];
      v249 = a1[6];
      v250 = v10;
      v11 = a1[1];
      v243 = *a1;
      v244 = v11;
      v12 = a1[3];
      v245 = a1[2];
      v246 = v12;
      v13 = a2[-4];
      v14 = a2[-3];
      v15 = a2[-1];
      a1[6] = a2[-2];
      a1[7] = v15;
      a1[4] = v13;
      a1[5] = v14;
      v16 = *v8;
      v17 = a2[-7];
      v18 = a2[-5];
      a1[2] = a2[-6];
      a1[3] = v18;
      *a1 = v16;
      a1[1] = v17;
      v19 = v246;
      a2[-6] = v245;
      a2[-5] = v19;
      v20 = v244;
      *v8 = v243;
      a2[-7] = v20;
      v21 = v250;
      a2[-2] = v249;
      a2[-1] = v21;
      v22 = v248;
      result = 1;
      a2[-4] = v247;
      a2[-3] = v22;
      return result;
    case 3:
      v37 = a1 + 8;
      v38 = a2 - 8;
      v39 = (*a3)(a1 + 8, a1);
      v40 = (*a3)(v38, a1 + 8);
      if ((v39 & 1) == 0)
      {
        if (!v40)
          return 1;
        v133 = a1[13];
        v247 = a1[12];
        v248 = v133;
        v134 = a1[15];
        v249 = a1[14];
        v250 = v134;
        v135 = a1[9];
        v243 = *v37;
        v244 = v135;
        v136 = a1[11];
        v245 = a1[10];
        v246 = v136;
        v137 = v38[4];
        v138 = v38[5];
        v139 = v38[7];
        a1[14] = v38[6];
        a1[15] = v139;
        a1[12] = v137;
        a1[13] = v138;
        v140 = *v38;
        v141 = v38[1];
        v142 = v38[3];
        a1[10] = v38[2];
        a1[11] = v142;
        *v37 = v140;
        a1[9] = v141;
        v143 = v246;
        v38[2] = v245;
        v38[3] = v143;
        v144 = v244;
        *v38 = v243;
        v38[1] = v144;
        v145 = v250;
        v38[6] = v249;
        v38[7] = v145;
        v146 = v248;
        v38[4] = v247;
        v38[5] = v146;
        goto LABEL_20;
      }
      if (v40)
      {
        v41 = a1[5];
        v247 = a1[4];
        v248 = v41;
        v42 = a1[7];
        v249 = a1[6];
        v250 = v42;
        v43 = a1[1];
        v243 = *a1;
        v244 = v43;
        v44 = a1[3];
        v245 = a1[2];
        v246 = v44;
        v45 = v38[4];
        v46 = v38[5];
        v47 = v38[7];
        a1[6] = v38[6];
        a1[7] = v47;
        a1[4] = v45;
        a1[5] = v46;
        v48 = *v38;
        v49 = v38[1];
        v50 = v38[3];
        a1[2] = v38[2];
        a1[3] = v50;
        *a1 = v48;
        a1[1] = v49;
      }
      else
      {
        v213 = a1[5];
        v247 = a1[4];
        v248 = v213;
        v214 = a1[7];
        v249 = a1[6];
        v250 = v214;
        v215 = a1[1];
        v243 = *a1;
        v244 = v215;
        v216 = a1[3];
        v245 = a1[2];
        v246 = v216;
        v217 = *v37;
        v218 = a1[9];
        v219 = a1[11];
        a1[2] = a1[10];
        a1[3] = v219;
        *a1 = v217;
        a1[1] = v218;
        v220 = a1[12];
        v221 = a1[13];
        v222 = a1[15];
        a1[6] = a1[14];
        a1[7] = v222;
        a1[4] = v220;
        a1[5] = v221;
        v223 = v243;
        v224 = v244;
        v225 = v246;
        a1[10] = v245;
        a1[11] = v225;
        *v37 = v223;
        a1[9] = v224;
        v226 = v247;
        v227 = v248;
        v228 = v250;
        a1[14] = v249;
        a1[15] = v228;
        a1[12] = v226;
        a1[13] = v227;
        if (!(*a3)(v38, a1 + 8))
          return 1;
        v229 = a1[13];
        v247 = a1[12];
        v248 = v229;
        v230 = a1[15];
        v249 = a1[14];
        v250 = v230;
        v231 = a1[9];
        v243 = *v37;
        v244 = v231;
        v232 = a1[11];
        v245 = a1[10];
        v246 = v232;
        v233 = v38[4];
        v234 = v38[5];
        v235 = v38[7];
        a1[14] = v38[6];
        a1[15] = v235;
        a1[12] = v233;
        a1[13] = v234;
        v236 = *v38;
        v237 = v38[1];
        v238 = v38[3];
        a1[10] = v38[2];
        a1[11] = v238;
        *v37 = v236;
        a1[9] = v237;
      }
      v239 = v246;
      v38[2] = v245;
      v38[3] = v239;
      v240 = v244;
      *v38 = v243;
      v38[1] = v240;
      v241 = v250;
      v38[6] = v249;
      v38[7] = v241;
      v242 = v248;
      result = 1;
      v38[4] = v247;
      v38[5] = v242;
      return result;
    case 4:
      sub_20E7D0F48(a1, a1 + 8, a1 + 16, a2 - 8, a3);
      return 1;
    case 5:
      v37 = a1 + 8;
      v51 = a1 + 16;
      v52 = a1 + 24;
      v53 = a2 - 8;
      v54 = sub_20E7D0F48(a1, a1 + 8, a1 + 16, a1 + 24, a3);
      if (!((unsigned int (*)(__n128 *, __n128 *, __n128))*a3)(v53, &a1[24], v54))
        return 1;
      v55 = a1[29];
      v247 = a1[28];
      v248 = v55;
      v56 = a1[31];
      v249 = a1[30];
      v250 = v56;
      v57 = a1[25];
      v243 = *v52;
      v244 = v57;
      v58 = a1[27];
      v245 = a1[26];
      v246 = v58;
      v59 = v53[4];
      v60 = v53[5];
      v61 = v53[7];
      a1[30] = v53[6];
      a1[31] = v61;
      a1[28] = v59;
      a1[29] = v60;
      v62 = *v53;
      v63 = v53[1];
      v64 = v53[3];
      a1[26] = v53[2];
      a1[27] = v64;
      *v52 = v62;
      a1[25] = v63;
      v65 = v246;
      v53[2] = v245;
      v53[3] = v65;
      v66 = v244;
      *v53 = v243;
      v53[1] = v66;
      v67 = v250;
      v53[6] = v249;
      v53[7] = v67;
      v68 = v248;
      v53[4] = v247;
      v53[5] = v68;
      if (!(*a3)(a1 + 24, a1 + 16))
        return 1;
      v69 = a1[21];
      v247 = a1[20];
      v248 = v69;
      v70 = a1[23];
      v249 = a1[22];
      v250 = v70;
      v71 = a1[17];
      v243 = *v51;
      v244 = v71;
      v72 = a1[19];
      v245 = a1[18];
      v246 = v72;
      v73 = *v52;
      v74 = a1[25];
      v75 = a1[27];
      a1[18] = a1[26];
      a1[19] = v75;
      *v51 = v73;
      a1[17] = v74;
      v76 = a1[28];
      v77 = a1[29];
      v78 = a1[31];
      a1[22] = a1[30];
      a1[23] = v78;
      a1[20] = v76;
      a1[21] = v77;
      v79 = v243;
      v80 = v244;
      v81 = v246;
      a1[26] = v245;
      a1[27] = v81;
      *v52 = v79;
      a1[25] = v80;
      v82 = v247;
      v83 = v248;
      v84 = v250;
      a1[30] = v249;
      a1[31] = v84;
      a1[28] = v82;
      a1[29] = v83;
      if (!(*a3)(a1 + 16, a1 + 8))
        return 1;
      v85 = a1[13];
      v247 = a1[12];
      v248 = v85;
      v86 = a1[15];
      v249 = a1[14];
      v250 = v86;
      v87 = a1[9];
      v243 = *v37;
      v244 = v87;
      v88 = a1[11];
      v245 = a1[10];
      v246 = v88;
      v89 = *v51;
      v90 = a1[17];
      v91 = a1[19];
      a1[10] = a1[18];
      a1[11] = v91;
      *v37 = v89;
      a1[9] = v90;
      v92 = a1[20];
      v93 = a1[21];
      v94 = a1[23];
      a1[14] = a1[22];
      a1[15] = v94;
      a1[12] = v92;
      a1[13] = v93;
      v95 = v243;
      v96 = v244;
      v97 = v246;
      a1[18] = v245;
      a1[19] = v97;
      *v51 = v95;
      a1[17] = v96;
      v98 = v247;
      v99 = v248;
      v100 = v250;
      a1[22] = v249;
      a1[23] = v100;
      a1[20] = v98;
      a1[21] = v99;
LABEL_20:
      if (!(*a3)(v37, a1))
        return 1;
      v147 = a1[5];
      v247 = a1[4];
      v248 = v147;
      v148 = a1[7];
      v249 = a1[6];
      v250 = v148;
      v149 = a1[1];
      v243 = *a1;
      v244 = v149;
      v150 = a1[3];
      v245 = a1[2];
      v246 = v150;
      v151 = *v37;
      v152 = v37[1];
      v153 = v37[3];
      a1[2] = v37[2];
      a1[3] = v153;
      *a1 = v151;
      a1[1] = v152;
      v154 = v37[4];
      v155 = v37[5];
      v156 = v37[7];
      a1[6] = v37[6];
      a1[7] = v156;
      a1[4] = v154;
      a1[5] = v155;
      v157 = v243;
      v158 = v244;
      v159 = v246;
      v37[2] = v245;
      v37[3] = v159;
      *v37 = v157;
      v37[1] = v158;
      v160 = v247;
      v161 = v248;
      v162 = v250;
      v37[6] = v249;
      v37[7] = v162;
      result = 1;
      v37[4] = v160;
      v37[5] = v161;
      return result;
    default:
      v23 = a1 + 16;
      v24 = a1 + 8;
      v25 = (*a3)(a1 + 8, a1);
      v26 = (*a3)(a1 + 16, a1 + 8);
      if ((v25 & 1) != 0)
      {
        if (v26)
        {
          v27 = a1[5];
          v247 = a1[4];
          v248 = v27;
          v28 = a1[7];
          v249 = a1[6];
          v250 = v28;
          v29 = a1[1];
          v243 = *a1;
          v244 = v29;
          v30 = a1[3];
          v245 = a1[2];
          v246 = v30;
          v31 = *v23;
          v32 = a1[17];
          v33 = a1[19];
          a1[2] = a1[18];
          a1[3] = v33;
          *a1 = v31;
          a1[1] = v32;
          v34 = a1[20];
          v35 = a1[21];
          v36 = a1[23];
          a1[6] = a1[22];
          a1[7] = v36;
          a1[4] = v34;
          a1[5] = v35;
        }
        else
        {
          v163 = a1[5];
          v247 = a1[4];
          v248 = v163;
          v164 = a1[7];
          v249 = a1[6];
          v250 = v164;
          v165 = a1[1];
          v243 = *a1;
          v244 = v165;
          v166 = a1[3];
          v245 = a1[2];
          v246 = v166;
          v167 = *v24;
          v168 = a1[9];
          v169 = a1[11];
          a1[2] = a1[10];
          a1[3] = v169;
          *a1 = v167;
          a1[1] = v168;
          v170 = a1[12];
          v171 = a1[13];
          v172 = a1[15];
          a1[6] = a1[14];
          a1[7] = v172;
          a1[4] = v170;
          a1[5] = v171;
          v173 = v243;
          v174 = v244;
          v175 = v246;
          a1[10] = v245;
          a1[11] = v175;
          *v24 = v173;
          a1[9] = v174;
          v176 = v247;
          v177 = v248;
          v178 = v250;
          a1[14] = v249;
          a1[15] = v178;
          a1[12] = v176;
          a1[13] = v177;
          if (!(*a3)(a1 + 16, a1 + 8))
            goto LABEL_25;
          v179 = a1[13];
          v247 = a1[12];
          v248 = v179;
          v180 = a1[15];
          v249 = a1[14];
          v250 = v180;
          v181 = a1[9];
          v243 = *v24;
          v244 = v181;
          v182 = a1[11];
          v245 = a1[10];
          v246 = v182;
          v183 = *v23;
          v184 = a1[17];
          v185 = a1[19];
          a1[10] = a1[18];
          a1[11] = v185;
          *v24 = v183;
          a1[9] = v184;
          v186 = a1[20];
          v187 = a1[21];
          v188 = a1[23];
          a1[14] = a1[22];
          a1[15] = v188;
          a1[12] = v186;
          a1[13] = v187;
        }
        v189 = v243;
        v190 = v244;
        v191 = v246;
        a1[18] = v245;
        a1[19] = v191;
        *v23 = v189;
        a1[17] = v190;
        v192 = v247;
        v193 = v248;
        v194 = v250;
        a1[22] = v249;
        a1[23] = v194;
        a1[20] = v192;
        a1[21] = v193;
      }
      else if (v26)
      {
        v101 = a1[13];
        v247 = a1[12];
        v248 = v101;
        v102 = a1[15];
        v249 = a1[14];
        v250 = v102;
        v103 = a1[9];
        v243 = *v24;
        v244 = v103;
        v104 = a1[11];
        v245 = a1[10];
        v246 = v104;
        v105 = *v23;
        v106 = a1[17];
        v107 = a1[19];
        a1[10] = a1[18];
        a1[11] = v107;
        *v24 = v105;
        a1[9] = v106;
        v108 = a1[20];
        v109 = a1[21];
        v110 = a1[23];
        a1[14] = a1[22];
        a1[15] = v110;
        a1[12] = v108;
        a1[13] = v109;
        v111 = v243;
        v112 = v244;
        v113 = v246;
        a1[18] = v245;
        a1[19] = v113;
        *v23 = v111;
        a1[17] = v112;
        v114 = v247;
        v115 = v248;
        v116 = v250;
        a1[22] = v249;
        a1[23] = v116;
        a1[20] = v114;
        a1[21] = v115;
        if ((*a3)(a1 + 8, a1))
        {
          v117 = a1[5];
          v247 = a1[4];
          v248 = v117;
          v118 = a1[7];
          v249 = a1[6];
          v250 = v118;
          v119 = a1[1];
          v243 = *a1;
          v244 = v119;
          v120 = a1[3];
          v245 = a1[2];
          v246 = v120;
          v121 = *v24;
          v122 = a1[9];
          v123 = a1[11];
          a1[2] = a1[10];
          a1[3] = v123;
          *a1 = v121;
          a1[1] = v122;
          v124 = a1[12];
          v125 = a1[13];
          v126 = a1[15];
          a1[6] = a1[14];
          a1[7] = v126;
          a1[4] = v124;
          a1[5] = v125;
          v127 = v243;
          v128 = v244;
          v129 = v246;
          a1[10] = v245;
          a1[11] = v129;
          *v24 = v127;
          a1[9] = v128;
          v130 = v247;
          v131 = v248;
          v132 = v250;
          a1[14] = v249;
          a1[15] = v132;
          a1[12] = v130;
          a1[13] = v131;
        }
      }
LABEL_25:
      v195 = a1 + 24;
      if (&a1[24] == a2)
        return 1;
      v196 = 0;
      v197 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v195, v23))
    {
      v203 = v195[5];
      v247 = v195[4];
      v248 = v203;
      v204 = v195[7];
      v249 = v195[6];
      v250 = v204;
      v205 = v195[1];
      v243 = *v195;
      v244 = v205;
      v206 = v195[3];
      v207 = v196;
      v245 = v195[2];
      v246 = v206;
      do
      {
        v208 = (__n128 *)((char *)a1 + v207);
        v209 = *(__n128 *)((char *)a1 + v207 + 336);
        v208[28] = *(__n128 *)((char *)a1 + v207 + 320);
        v208[29] = v209;
        v210 = *(__n128 *)((char *)a1 + v207 + 368);
        v208[30] = *(__n128 *)((char *)a1 + v207 + 352);
        v208[31] = v210;
        v211 = *(__n128 *)((char *)a1 + v207 + 272);
        v208[24] = *(__n128 *)((char *)a1 + v207 + 256);
        v208[25] = v211;
        v212 = *(__n128 *)((char *)a1 + v207 + 304);
        v208[26] = *(__n128 *)((char *)a1 + v207 + 288);
        v208[27] = v212;
        if (v207 == -256)
        {
          v198 = a1;
          goto LABEL_28;
        }
        v207 -= 128;
      }
      while (((*a3)(&v243, v208 + 8) & 1) != 0);
      v198 = (__n128 *)((char *)a1 + v207 + 384);
LABEL_28:
      v199 = v248;
      v198[4] = v247;
      v198[5] = v199;
      v200 = v250;
      v198[6] = v249;
      v198[7] = v200;
      v201 = v244;
      *v198 = v243;
      v198[1] = v201;
      v202 = v246;
      ++v197;
      v198[2] = v245;
      v198[3] = v202;
      if (v197 == 8)
        return &v195[8] == a2;
    }
    v23 = v195;
    v196 += 128;
    v195 += 8;
    if (v195 == a2)
      return 1;
  }
}

__n128 sub_20E7D0F48(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, uint64_t (**a5)(__n128 *, __n128 *))
{
  char v10;
  int v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 result;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;

  v10 = (*a5)(a2, a1);
  v11 = (*a5)(a3, a2);
  if ((v10 & 1) != 0)
  {
    if (v11)
    {
      v89 = a1[4];
      v96 = a1[5];
      v103 = a1[6];
      v110 = a1[7];
      v61 = *a1;
      v68 = a1[1];
      v75 = a1[2];
      v82 = a1[3];
      v12 = a3[4];
      v13 = a3[5];
      v14 = a3[7];
      a1[6] = a3[6];
      a1[7] = v14;
      a1[4] = v12;
      a1[5] = v13;
      v15 = *a3;
      v16 = a3[1];
      v17 = a3[3];
      a1[2] = a3[2];
      a1[3] = v17;
      *a1 = v15;
      a1[1] = v16;
LABEL_9:
      a3[2] = v75;
      a3[3] = v82;
      *a3 = v61;
      a3[1] = v68;
      a3[6] = v103;
      a3[7] = v110;
      a3[4] = v89;
      a3[5] = v96;
      goto LABEL_10;
    }
    v92 = a1[4];
    v99 = a1[5];
    v106 = a1[6];
    v113 = a1[7];
    v64 = *a1;
    v71 = a1[1];
    v78 = a1[2];
    v85 = a1[3];
    v30 = a2[4];
    v31 = a2[5];
    v32 = a2[7];
    a1[6] = a2[6];
    a1[7] = v32;
    a1[4] = v30;
    a1[5] = v31;
    v33 = *a2;
    v34 = a2[1];
    v35 = a2[3];
    a1[2] = a2[2];
    a1[3] = v35;
    *a1 = v33;
    a1[1] = v34;
    a2[2] = v78;
    a2[3] = v85;
    *a2 = v64;
    a2[1] = v71;
    a2[6] = v106;
    a2[7] = v113;
    a2[4] = v92;
    a2[5] = v99;
    if ((*a5)(a3, a2))
    {
      v89 = a2[4];
      v96 = a2[5];
      v103 = a2[6];
      v110 = a2[7];
      v61 = *a2;
      v68 = a2[1];
      v75 = a2[2];
      v82 = a2[3];
      v36 = a3[4];
      v37 = a3[5];
      v38 = a3[7];
      a2[6] = a3[6];
      a2[7] = v38;
      a2[4] = v36;
      a2[5] = v37;
      v39 = *a3;
      v40 = a3[1];
      v41 = a3[3];
      a2[2] = a3[2];
      a2[3] = v41;
      *a2 = v39;
      a2[1] = v40;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    v90 = a2[4];
    v97 = a2[5];
    v104 = a2[6];
    v111 = a2[7];
    v62 = *a2;
    v69 = a2[1];
    v76 = a2[2];
    v83 = a2[3];
    v18 = a3[4];
    v19 = a3[5];
    v20 = a3[7];
    a2[6] = a3[6];
    a2[7] = v20;
    a2[4] = v18;
    a2[5] = v19;
    v21 = *a3;
    v22 = a3[1];
    v23 = a3[3];
    a2[2] = a3[2];
    a2[3] = v23;
    *a2 = v21;
    a2[1] = v22;
    a3[2] = v76;
    a3[3] = v83;
    *a3 = v62;
    a3[1] = v69;
    a3[6] = v104;
    a3[7] = v111;
    a3[4] = v90;
    a3[5] = v97;
    if ((*a5)(a2, a1))
    {
      v91 = a1[4];
      v98 = a1[5];
      v105 = a1[6];
      v112 = a1[7];
      v63 = *a1;
      v70 = a1[1];
      v77 = a1[2];
      v84 = a1[3];
      v24 = a2[4];
      v25 = a2[5];
      v26 = a2[7];
      a1[6] = a2[6];
      a1[7] = v26;
      a1[4] = v24;
      a1[5] = v25;
      v27 = *a2;
      v28 = a2[1];
      v29 = a2[3];
      a1[2] = a2[2];
      a1[3] = v29;
      *a1 = v27;
      a1[1] = v28;
      a2[2] = v77;
      a2[3] = v84;
      *a2 = v63;
      a2[1] = v70;
      a2[6] = v105;
      a2[7] = v112;
      a2[4] = v91;
      a2[5] = v98;
    }
  }
LABEL_10:
  if ((*a5)(a4, a3))
  {
    v93 = a3[4];
    v100 = a3[5];
    v107 = a3[6];
    v114 = a3[7];
    v65 = *a3;
    v72 = a3[1];
    v79 = a3[2];
    v86 = a3[3];
    v43 = a4[4];
    v44 = a4[5];
    v45 = a4[7];
    a3[6] = a4[6];
    a3[7] = v45;
    a3[4] = v43;
    a3[5] = v44;
    v46 = *a4;
    v47 = a4[1];
    v48 = a4[3];
    a3[2] = a4[2];
    a3[3] = v48;
    *a3 = v46;
    a3[1] = v47;
    a4[2] = v79;
    a4[3] = v86;
    *a4 = v65;
    a4[1] = v72;
    a4[6] = v107;
    a4[7] = v114;
    a4[4] = v93;
    a4[5] = v100;
    if ((*a5)(a3, a2))
    {
      v94 = a2[4];
      v101 = a2[5];
      v108 = a2[6];
      v115 = a2[7];
      v66 = *a2;
      v73 = a2[1];
      v80 = a2[2];
      v87 = a2[3];
      v49 = a3[4];
      v50 = a3[5];
      v51 = a3[7];
      a2[6] = a3[6];
      a2[7] = v51;
      a2[4] = v49;
      a2[5] = v50;
      v52 = *a3;
      v53 = a3[1];
      v54 = a3[3];
      a2[2] = a3[2];
      a2[3] = v54;
      *a2 = v52;
      a2[1] = v53;
      a3[2] = v80;
      a3[3] = v87;
      *a3 = v66;
      a3[1] = v73;
      a3[6] = v108;
      a3[7] = v115;
      a3[4] = v94;
      a3[5] = v101;
      if ((*a5)(a2, a1))
      {
        v95 = a1[4];
        v102 = a1[5];
        v109 = a1[6];
        v116 = a1[7];
        v67 = *a1;
        v74 = a1[1];
        v81 = a1[2];
        v88 = a1[3];
        v55 = a2[4];
        v56 = a2[5];
        v57 = a2[7];
        a1[6] = a2[6];
        a1[7] = v57;
        a1[4] = v55;
        a1[5] = v56;
        v58 = *a2;
        v59 = a2[1];
        v60 = a2[3];
        a1[2] = a2[2];
        a1[3] = v60;
        *a1 = v58;
        a1[1] = v59;
        a2[2] = v81;
        a2[3] = v88;
        *a2 = v67;
        a2[1] = v74;
        a2[6] = v109;
        a2[7] = v116;
        result = v102;
        a2[4] = v95;
        a2[5] = v102;
      }
    }
  }
  return result;
}

__int128 *sub_20E7D1334(__int128 *a1, __int128 *a2, __int128 *a3, unsigned int (**a4)(__int128 *, __int128 *))
{
  __int128 *v5;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 *v46;
  int64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  unsigned int v53;
  __int128 *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  __int128 *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  __int128 *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  int64_t v102;
  int64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 *v111;
  __int128 *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  uint64_t v127;
  uint64_t v128;
  __int128 *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  if (a1 == a2)
    return a3;
  v5 = a2;
  v128 = ((char *)a2 - (char *)a1) >> 7;
  v126 = a3;
  v127 = (char *)a2 - (char *)a1;
  if ((char *)a2 - (char *)a1 >= 129 && (unint64_t)v127 >= 0x100)
  {
    v102 = (unint64_t)(v128 - 2) >> 1;
    v103 = v102;
    do
    {
      if (v102 >= v103)
      {
        v110 = (2 * v103) | 1;
        v111 = &a1[8 * v110];
        if (2 * v103 + 2 < v128 && (*a4)(&a1[8 * v110], v111 + 8))
        {
          v111 += 8;
          v110 = 2 * v103 + 2;
        }
        v112 = &a1[8 * v103];
        if ((((uint64_t (*)(__int128 *, __int128 *))*a4)(v111, v112) & 1) == 0)
        {
          v113 = v112[5];
          v142 = v112[4];
          v143 = v113;
          v114 = v112[7];
          v144 = v112[6];
          v145 = v114;
          v115 = v112[1];
          v138 = *v112;
          v139 = v115;
          v116 = v112[3];
          v140 = v112[2];
          v141 = v116;
          do
          {
            v117 = v111;
            v118 = *v111;
            v119 = v111[1];
            v120 = v111[3];
            v112[2] = v111[2];
            v112[3] = v120;
            *v112 = v118;
            v112[1] = v119;
            v121 = v111[4];
            v122 = v111[5];
            v123 = v111[7];
            v112[6] = v111[6];
            v112[7] = v123;
            v112[4] = v121;
            v112[5] = v122;
            if (v102 < v110)
              break;
            v124 = (2 * v110) | 1;
            v111 = &a1[8 * v124];
            v125 = 2 * v110 + 2;
            if (v125 < v128 && (*a4)(&a1[8 * v124], v111 + 8))
            {
              v111 += 8;
              v124 = v125;
            }
            v112 = v117;
            v110 = v124;
          }
          while (!(*a4)(v111, &v138));
          v104 = v138;
          v105 = v139;
          v106 = v141;
          v117[2] = v140;
          v117[3] = v106;
          *v117 = v104;
          v117[1] = v105;
          v107 = v142;
          v108 = v143;
          v109 = v145;
          v117[6] = v144;
          v117[7] = v109;
          v117[4] = v107;
          v117[5] = v108;
        }
      }
      v63 = v103-- <= 0;
    }
    while (!v63);
  }
  a3 = v5;
  v7 = v126;
  v8 = v127;
  if (v5 != v126)
  {
    if (v127 < 256)
    {
      v9 = v5;
      do
      {
        if (((unsigned int (*)(__int128 *, __int128 *, __int128 *))*a4)(v9, a1, a3))
        {
          v10 = v9[5];
          v142 = v9[4];
          v143 = v10;
          v11 = v9[7];
          v144 = v9[6];
          v145 = v11;
          v12 = v9[1];
          v138 = *v9;
          v139 = v12;
          v13 = v9[3];
          v140 = v9[2];
          v141 = v13;
          v14 = a1[4];
          v15 = a1[5];
          v16 = a1[7];
          v9[6] = a1[6];
          v9[7] = v16;
          v9[4] = v14;
          v9[5] = v15;
          v17 = *a1;
          v18 = a1[1];
          v19 = a1[3];
          v9[2] = a1[2];
          v9[3] = v19;
          *v9 = v17;
          v9[1] = v18;
          v20 = v141;
          a1[2] = v140;
          a1[3] = v20;
          v21 = v139;
          *a1 = v138;
          a1[1] = v21;
          v22 = v145;
          a1[6] = v144;
          a1[7] = v22;
          v23 = v143;
          a1[4] = v142;
          a1[5] = v23;
        }
        v9 += 8;
      }
      while (v9 != v126);
LABEL_28:
      a3 = v7;
      goto LABEL_29;
    }
    v24 = a1 + 8;
    v25 = v5;
    while (1)
    {
      if (((unsigned int (*)(__int128 *, __int128 *, __int128 *))*a4)(v25, a1, a3))
      {
        v32 = v25[5];
        v142 = v25[4];
        v143 = v32;
        v33 = v25[7];
        v144 = v25[6];
        v145 = v33;
        v34 = v25[1];
        v138 = *v25;
        v139 = v34;
        v35 = v25[3];
        v140 = v25[2];
        v141 = v35;
        v36 = a1[4];
        v37 = a1[5];
        v38 = a1[7];
        v25[6] = a1[6];
        v25[7] = v38;
        v25[4] = v36;
        v25[5] = v37;
        v39 = *a1;
        v40 = a1[1];
        v41 = a1[3];
        v25[2] = a1[2];
        v25[3] = v41;
        *v25 = v39;
        v25[1] = v40;
        v42 = v141;
        a1[2] = v140;
        a1[3] = v42;
        v43 = v139;
        *a1 = v138;
        a1[1] = v43;
        v44 = v145;
        a1[6] = v144;
        a1[7] = v44;
        v45 = v143;
        a1[4] = v142;
        a1[5] = v45;
        if (v8 == 256)
        {
          v46 = v24;
          v47 = 1;
          if ((((uint64_t (*)(__int128 *, __int128 *))*a4)(v24, a1) & 1) == 0)
            goto LABEL_21;
        }
        else
        {
          v46 = a1 + 16;
          if ((*a4)(v24, a1 + 16))
          {
            v47 = 2;
          }
          else
          {
            v46 = v24;
            v47 = 1;
          }
          if ((((uint64_t (*)(__int128 *, __int128 *))*a4)(v46, a1) & 1) == 0)
          {
LABEL_21:
            v48 = a1[5];
            v142 = a1[4];
            v143 = v48;
            v49 = a1[7];
            v144 = a1[6];
            v145 = v49;
            v50 = a1[1];
            v138 = *a1;
            v139 = v50;
            v51 = a1[3];
            v52 = a1;
            v140 = a1[2];
            v141 = v51;
            do
            {
              v54 = v46;
              v55 = *v46;
              v56 = v46[1];
              v57 = v46[3];
              v52[2] = v46[2];
              v52[3] = v57;
              *v52 = v55;
              v52[1] = v56;
              v58 = v46[4];
              v59 = v46[5];
              v60 = v46[7];
              v52[6] = v46[6];
              v52[7] = v60;
              v52[4] = v58;
              v52[5] = v59;
              if ((uint64_t)((unint64_t)(v128 - 2) >> 1) < v47)
                break;
              v61 = (2 * v47) | 1;
              v46 = &a1[8 * v61];
              if (2 * v47 + 2 < v128 && (*a4)(&a1[8 * v61], v46 + 8))
              {
                v46 += 8;
                v61 = 2 * v47 + 2;
              }
              v53 = (*a4)(v46, &v138);
              v52 = v54;
              v47 = v61;
            }
            while (!v53);
            v26 = v138;
            v27 = v139;
            v28 = v141;
            v54[2] = v140;
            v54[3] = v28;
            *v54 = v26;
            v54[1] = v27;
            v29 = v142;
            v30 = v143;
            v31 = v145;
            v54[6] = v144;
            v54[7] = v31;
            v54[4] = v29;
            v54[5] = v30;
            v7 = v126;
            v8 = v127;
            v24 = a1 + 8;
          }
        }
      }
      v25 += 8;
      if (v25 == v7)
        goto LABEL_28;
    }
  }
LABEL_29:
  if (v8 >= 129)
  {
    v129 = a3;
    v62 = (unint64_t)v8 >> 7;
    do
    {
      v64 = 0;
      v134 = a1[4];
      v135 = a1[5];
      v136 = a1[6];
      v137 = a1[7];
      v130 = *a1;
      v131 = a1[1];
      v65 = a1;
      v132 = a1[2];
      v133 = a1[3];
      do
      {
        v72 = &v65[8 * v64 + 8];
        v73 = (2 * v64) | 1;
        v74 = 2 * v64 + 2;
        if (v74 < v62 && (*a4)(&v65[8 * v64 + 8], &v65[8 * v64 + 16]))
        {
          v72 += 8;
          v73 = v74;
        }
        v66 = *v72;
        v67 = v72[1];
        v68 = v72[3];
        v65[2] = v72[2];
        v65[3] = v68;
        *v65 = v66;
        v65[1] = v67;
        v69 = v72[4];
        v70 = v72[5];
        v71 = v72[7];
        v65[6] = v72[6];
        v65[7] = v71;
        v65[4] = v69;
        v65[5] = v70;
        v65 = v72;
        v64 = v73;
      }
      while (v73 <= (uint64_t)((unint64_t)(v62 - 2) >> 1));
      v5 -= 8;
      if (v72 == v5)
      {
        v72[2] = v132;
        v72[3] = v133;
        *v72 = v130;
        v72[1] = v131;
        v72[6] = v136;
        v72[7] = v137;
        v72[4] = v134;
        v72[5] = v135;
      }
      else
      {
        v75 = *v5;
        v76 = v5[1];
        v77 = v5[3];
        v72[2] = v5[2];
        v72[3] = v77;
        *v72 = v75;
        v72[1] = v76;
        v78 = v5[4];
        v79 = v5[5];
        v80 = v5[7];
        v72[6] = v5[6];
        v72[7] = v80;
        v72[4] = v78;
        v72[5] = v79;
        v5[4] = v134;
        v5[5] = v135;
        v5[6] = v136;
        v5[7] = v137;
        *v5 = v130;
        v5[1] = v131;
        v81 = (char *)v72 - (char *)a1 + 128;
        v5[2] = v132;
        v5[3] = v133;
        if (v81 >= 129)
        {
          v82 = (((unint64_t)v81 >> 7) - 2) >> 1;
          v83 = &a1[8 * v82];
          if ((*a4)(v83, v72))
          {
            v84 = *v72;
            v85 = v72[1];
            v86 = v72[3];
            v140 = v72[2];
            v141 = v86;
            v138 = v84;
            v139 = v85;
            v87 = v72[4];
            v88 = v72[5];
            v89 = v72[7];
            v144 = v72[6];
            v145 = v89;
            v142 = v87;
            v143 = v88;
            do
            {
              v90 = v83;
              v91 = *v83;
              v92 = v83[1];
              v93 = v83[3];
              v72[2] = v83[2];
              v72[3] = v93;
              *v72 = v91;
              v72[1] = v92;
              v94 = v83[4];
              v95 = v83[5];
              v96 = v83[7];
              v72[6] = v83[6];
              v72[7] = v96;
              v72[4] = v94;
              v72[5] = v95;
              if (!v82)
                break;
              v82 = (v82 - 1) >> 1;
              v83 = &a1[8 * v82];
              v72 = v90;
            }
            while ((((uint64_t (*)(__int128 *, __int128 *))*a4)(v83, &v138) & 1) != 0);
            v97 = v143;
            v90[4] = v142;
            v90[5] = v97;
            v98 = v145;
            v90[6] = v144;
            v90[7] = v98;
            v99 = v139;
            *v90 = v138;
            v90[1] = v99;
            v100 = v141;
            v90[2] = v140;
            v90[3] = v100;
          }
        }
      }
      v63 = v62-- <= 2;
    }
    while (!v63);
    return v129;
  }
  return a3;
}

uint64_t sub_20E7D19B4(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_20E7D19E0(void *__p)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = v1;
  operator delete(__p);
}

_QWORD *sub_20E7D19E8(uint64_t a1, _OWORD *a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_20E7E86AC(a1, a2);
  *result = &off_24C9A8DA0;
  return result;
}

void sub_20E7D1A08(_DWORD *a1, unsigned int *a2, int *a3, _DWORD *a4)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  v6 = (unint64_t)*a2 >> 6;
  v7 = (unint64_t)a2[1] >> 6;
  v8 = a1[9];
  v9 = a1[10];
  if (v8 < 0)
    v10 = -(-v8 >> 14);
  else
    v10 = v8 >> 14;
  if (v8 < 0)
    v8 = -v8;
  v11 = (16 * (v8 & 0x3FFFu)) | (unint64_t)((uint64_t)v10 << 18);
  if (v9 < 0)
    v12 = -(-v9 >> 14);
  else
    v12 = v9 >> 14;
  if (v9 < 0)
    v9 = -v9;
  v13 = (16 * (v9 & 0x3FFFu)) | (unint64_t)((uint64_t)v12 << 18);
  v14 = a1[11];
  v15 = a1[12];
  if (v14 < 0)
    v16 = -(-v14 >> 14);
  else
    v16 = v14 >> 14;
  if (v14 < 0)
    v14 = -v14;
  v17 = (16 * (v14 & 0x3FFFu)) | (unint64_t)((uint64_t)v16 << 18);
  if (v15 < 0)
    v18 = -(-v15 >> 14);
  else
    v18 = v15 >> 14;
  if (v15 < 0)
    v15 = -v15;
  v19 = (16 * (v15 & 0x3FFFu)) | (unint64_t)((uint64_t)v18 << 18);
  v20 = a1[13];
  v21 = a1[14];
  if (v20 < 0)
    v22 = -(-v20 >> 14);
  else
    v22 = v20 >> 14;
  if (v20 < 0)
    v20 = -v20;
  v23 = (16 * (v20 & 0x3FFFu)) | (unint64_t)((uint64_t)v22 << 18);
  if (v21 < 0)
    v24 = -(-v21 >> 14);
  else
    v24 = v21 >> 14;
  if (v21 < 0)
    v21 = -v21;
  v25 = (16 * (v21 & 0x3FFFu)) | (unint64_t)((uint64_t)v24 << 18);
  v26 = a1[15];
  v27 = a1[16];
  if (v26 < 0)
    v28 = -(-v26 >> 14);
  else
    v28 = v26 >> 14;
  if (v26 < 0)
    v26 = -v26;
  v29 = (16 * (v26 & 0x3FFFu)) | (unint64_t)((uint64_t)v28 << 18);
  if (v27 < 0)
    v30 = -(-v27 >> 14);
  else
    v30 = v27 >> 14;
  if (v27 < 0)
    v27 = -v27;
  v31 = (16 * (v27 & 0x3FFFu)) | (unint64_t)((uint64_t)v30 << 18);
  v32 = a1[17];
  if (v32 < 0)
    v33 = -(-v32 >> 14);
  else
    v33 = v32 >> 14;
  if (v32 < 0)
    v32 = -v32;
  v34 = v13 * v7 + v11 * v6 + v17;
  v35 = v23 * v7 + v19 * v6 + v25;
  v36 = v31 * v7 + v29 * v6 + ((16 * (v32 & 0x3FFFu)) | (unint64_t)((uint64_t)v33 << 18));
  if (v36)
  {
    v37 = sub_20E7F9714(18, (double)v34);
    v38 = sub_20E7F9714(18, (double)v35);
    v39 = sub_20E7F9714(18, (double)v36);
    sub_20E7F9814(v39);
    v41 = v37 * v40;
    v42 = v38 * v40;
    v43 = (uint64_t)sub_20E7F9714(18, v41);
    v44 = (uint64_t)sub_20E7F9714(18, v42);
  }
  else
  {
    if (v34 <= 0)
      v43 = -(uint64_t)((unint64_t)-v34 >> 18);
    else
      v43 = (unint64_t)v34 >> 18;
    v44 = (unint64_t)v35 >> 18;
    if (v35 <= 0)
      v44 = -(uint64_t)((unint64_t)-v35 >> 18);
  }
  if ((int)v43 >= 4095)
    v45 = 4095;
  else
    v45 = v43;
  if (v45 <= -4096)
    v45 = -4096;
  if ((int)v44 >= 0x1FFF)
    LODWORD(v44) = 0x1FFF;
  if ((int)v44 <= -8192)
    LODWORD(v44) = -8192;
  *a3 = v45;
  *a4 = v44;
}

uint64_t sub_20E7D1C80(uint64_t result, int *a2, uint64_t a3, unsigned int *a4, int32x4_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  unsigned int v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;

  v5 = *(unsigned int *)(result + 548);
  if (v5 > 0x10)
    sub_20E80BF88();
  if (!(_DWORD)v5)
  {
    *a4 = 0;
    goto LABEL_12;
  }
  if (v5 < 8)
  {
    v6 = 0;
    v7 = 0;
LABEL_15:
    v18 = v5 - v6;
    v19 = 4 * v6 + 132;
    v20 = (int *)((char *)a2 + v19);
    v21 = (int *)(a3 + v19);
    do
    {
      v23 = *v21++;
      v22 = v23;
      v24 = *v20++;
      v25 = v24 ^ v22;
      if (v25)
      {
        a5.i32[0] = v25;
        *(int8x8_t *)a5.i8 = vcnt_s8(*(int8x8_t *)a5.i8);
        a5.i16[0] = vaddlv_u8(*(uint8x8_t *)a5.i8);
        v7 += a5.i32[0];
      }
      --v18;
    }
    while (v18);
    goto LABEL_9;
  }
  v6 = v5 & 0x18;
  v8 = (int32x4_t)veorq_s8(*(int8x16_t *)(a2 + 33), *(int8x16_t *)(a3 + 132));
  v9 = (int32x4_t)veorq_s8(*(int8x16_t *)(a2 + 37), *(int8x16_t *)(a3 + 148));
  v10 = (int32x4_t)vbicq_s8((int8x16_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)v8))), (int8x16_t)vceqzq_s32(v8));
  v11 = (int32x4_t)vbicq_s8((int8x16_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)v9))), (int8x16_t)vceqzq_s32(v9));
  if ((v5 & 0xFFFFFFF8) != 8)
  {
    v12 = (int32x4_t)veorq_s8(*(int8x16_t *)(a2 + 41), *(int8x16_t *)(a3 + 164));
    v13 = (int32x4_t)veorq_s8(*(int8x16_t *)(a2 + 45), *(int8x16_t *)(a3 + 180));
    v10 = vaddq_s32(v10, (int32x4_t)vbicq_s8((int8x16_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)v12))), (int8x16_t)vceqzq_s32(v12)));
    v11 = vaddq_s32(v11, (int32x4_t)vbicq_s8((int8x16_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)v13))), (int8x16_t)vceqzq_s32(v13)));
  }
  a5 = vaddq_s32(v11, v10);
  v7 = vaddvq_s32(a5);
  if (v6 != v5)
    goto LABEL_15;
LABEL_9:
  *a4 = v7;
  if (v7 >= 0x1D8)
    sub_20E80BF5C();
  if (v7 > *(_DWORD *)(result + 20))
  {
    ++*(_DWORD *)(result + 584);
    return result;
  }
LABEL_12:
  ++*(_DWORD *)(result + 580);
  v14 = *a4;
  v15 = *(unsigned int *)(a3 + 196);
  v16 = *(_QWORD *)(result + 496);
  v17 = (unsigned int *)(v16 + 16 * v15);
  if (*a4 < *v17)
  {
    if (v17[1] == 0xFFFFF)
      ++*(_DWORD *)(result + 596);
    else
      ++*(_DWORD *)(result + 600);
    *v17 = *a4;
    v17[1] = (*(_QWORD *)(result + 608) + (unint64_t)(16 * a2[49])) >> 4;
    *(_DWORD *)(v16 + 16 * v15 + 8) = a2[5];
LABEL_26:
    *(_DWORD *)(v16 + 16 * v15 + 12) = (a2[3] >> 5) + 8 * *((unsigned __int8 *)a2 + 24);
    goto LABEL_27;
  }
  if (v14 == *v17)
  {
    v26 = v16 + 16 * v15;
    v27 = (_DWORD *)(v26 + 8);
    if (a2[5] < *(_DWORD *)(v26 + 8))
    {
      v29 = *(_DWORD *)(v26 + 4);
      v28 = (_DWORD *)(v26 + 4);
      if (v29 == 0xFFFFF)
      {
        ++*(_DWORD *)(result + 596);
        v14 = *a4;
      }
      *v17 = v14;
      *v28 = (*(_QWORD *)(result + 608) + (unint64_t)(16 * a2[49])) >> 4;
      *v27 = a2[5];
      goto LABEL_26;
    }
  }
LABEL_27:
  v30 = *a4;
  v31 = a2[49];
  v32 = *(_QWORD *)(result + 472);
  v33 = (unsigned int *)(v32 + 36 * v31);
  if (*a4 < *v33)
  {
    v34 = v32 + 36 * v31;
    v36 = *(_DWORD *)(v34 + 4);
    v35 = (_DWORD *)(v34 + 4);
    if (v36 == 0xFFFFF)
      ++*(_DWORD *)(result + 588);
    else
      ++*(_DWORD *)(result + 592);
    *v33 = *a4;
    *v35 = *(_DWORD *)(result + 616) + 4 * v15;
    v44 = v32 + 36 * v31;
    *(_DWORD *)(v44 + 8) = *(_DWORD *)(a3 + 20);
    v43 = *a2;
LABEL_37:
    *(_DWORD *)(v44 + 12) = v43;
    v45 = a2[32];
    *(_DWORD *)(v44 + 16) = a2[1];
    *(_DWORD *)(v44 + 20) = v45;
    *(_DWORD *)(v44 + 24) = v31;
    *(_DWORD *)(v44 + 28) = a2[8];
    *(_BYTE *)(v44 + 32) = *((_BYTE *)a2 + 24);
    return result;
  }
  if (v30 == *v33)
  {
    v37 = v32 + 36 * v31;
    v39 = *(_DWORD *)(v37 + 8);
    v38 = (_DWORD *)(v37 + 8);
    if (*(_DWORD *)(a3 + 20) < v39)
    {
      v40 = v32 + 36 * v31;
      v42 = *(_DWORD *)(v40 + 4);
      v41 = (_DWORD *)(v40 + 4);
      if (v42 == 0xFFFFF)
      {
        ++*(_DWORD *)(result + 588);
        v30 = *a4;
      }
      *v33 = v30;
      *v41 = *(_DWORD *)(result + 616) + 4 * v15;
      *v38 = *(_DWORD *)(a3 + 20);
      v43 = *a2;
      v44 = v32 + 36 * v31;
      goto LABEL_37;
    }
  }
  return result;
}

void sub_20E7D1FF0(_QWORD *a1)
{
  sub_20E7D2014(a1);
  JUMPOUT(0x212BC47D4);
}

_QWORD *sub_20E7D2014(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  *a1 = &off_24C9A9010;
  v2 = (void *)a1[65];
  if (v2)
  {
    a1[66] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[62];
  if (v3)
  {
    a1[63] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[59];
  if (v4)
  {
    a1[60] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[56];
  if (v5)
  {
    a1[57] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[53];
  if (v6)
  {
    a1[54] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[50];
  if (v7)
  {
    a1[51] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[47];
  if (v8)
  {
    a1[48] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[44];
  if (v9)
  {
    a1[45] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[41];
  if (v10)
  {
    a1[42] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[38];
  if (v11)
  {
    a1[39] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[35];
  if (v12)
  {
    a1[36] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[32];
  if (v13)
  {
    a1[33] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[29];
  if (v14)
  {
    a1[30] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[26];
  if (v15)
  {
    a1[27] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[23];
  if (v16)
  {
    a1[24] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[20];
  if (v17)
  {
    a1[21] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[17];
  if (v18)
  {
    a1[18] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[14];
  if (v19)
  {
    a1[15] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[11];
  if (v20)
  {
    a1[12] = v20;
    operator delete(v20);
  }
  return a1;
}

uint64_t sub_20E7D2174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v49;
  uint64_t v50;
  _BYTE v51[1024];

  v4 = sub_20E7EE2D4(a1, a2);
  *(_QWORD *)v4 = &off_24C9A8DE8;
  *(_DWORD *)(v4 + 5312) = 0xFFFFF;
  v5 = (uint64_t *)(v4 + 5320);
  *(_QWORD *)(v4 + 5608) = 0;
  v6 = v4 + 5584;
  *(_OWORD *)(v4 + 5320) = 0u;
  *(_OWORD *)(v4 + 5336) = 0u;
  *(_OWORD *)(v4 + 5352) = 0u;
  *(_OWORD *)(v4 + 5368) = 0u;
  *(_OWORD *)(v4 + 5384) = 0u;
  *(_OWORD *)(v4 + 5400) = 0u;
  *(_OWORD *)(v4 + 5416) = 0u;
  *(_OWORD *)(v4 + 5432) = 0u;
  *(_OWORD *)(v4 + 5448) = 0u;
  *(_OWORD *)(v4 + 5464) = 0u;
  *(_OWORD *)(v4 + 5480) = 0u;
  *(_OWORD *)(v4 + 5496) = 0u;
  *(_OWORD *)(v4 + 5512) = 0u;
  *(_OWORD *)(v4 + 5528) = 0u;
  *(_OWORD *)(v4 + 5544) = 0u;
  *(_OWORD *)(v4 + 5560) = 0u;
  *(_OWORD *)(v4 + 5576) = 0u;
  *(_OWORD *)(v4 + 5592) = 0u;
  v7 = *(_QWORD *)(v4 + 64);
  if (v7)
    sub_20E7C1E68(v4 + 5320, v7);
  if (*(_BYTE *)(a1 + 56))
  {
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 5592);
    v10 = *(_QWORD *)(a1 + 5584);
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
    if (v8 <= v11)
    {
      if (v8 < v11)
      {
        v12 = v10 + 24 * v8;
        if (v9 != v12)
        {
          v13 = *(_QWORD *)(a1 + 5592);
          do
          {
            v15 = *(void **)(v13 - 24);
            v13 -= 24;
            v14 = v15;
            if (v15)
            {
              *(_QWORD *)(v9 - 16) = v14;
              operator delete(v14);
            }
            v9 = v13;
          }
          while (v13 != v12);
        }
        *(_QWORD *)(a1 + 5592) = v12;
      }
    }
    else
    {
      sub_20E7C1E68(v6, v8 - v11);
    }
  }
  if (*(_QWORD *)(a1 + 64) == 1)
  {
    v16 = *(_QWORD *)(a1 + 104);
    v17 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 112) - v16) >> 3);
    if (*(_QWORD *)(a1 + 112) == v16)
    {
      sub_20E7D5644((char **)(a1 + 104), 1 - v17);
    }
    else if (v17 >= 2)
    {
      *(_QWORD *)(a1 + 112) = v16 + 40;
    }
    v18 = *(int **)(a1 + 128);
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - (_QWORD)v18) >> 3);
    if (*(int **)(a1 + 136) == v18)
    {
      sub_20E7D5644((char **)(a1 + 128), 1 - v19);
      v18 = *(int **)(a1 + 128);
    }
    else if (v19 >= 2)
    {
      *(_QWORD *)(a1 + 136) = v18 + 10;
    }
    v20 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(v20 + 32) = 0;
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    v21 = *(_DWORD **)(a1 + 80);
    v22 = *(_DWORD *)(a1 + 8);
    *v18 = v22;
    v23 = *(_DWORD *)(a1 + 16);
    if (v22 >= -1)
      v24 = v22 + 1;
    else
      v24 = v22 + 2;
    v25 = v24 >> 1;
    v18[1] = v23;
    v18[2] = v25;
    if (v23 >= -1)
      v26 = v23 + 1;
    else
      v26 = v23 + 2;
    v27 = v26 >> 1;
    if (v25 >= -1)
      v28 = v25 + 1;
    else
      v28 = v25 + 2;
    v29 = v28 >> 1;
    v18[3] = v27;
    v18[4] = v29;
    if (v27 >= -1)
      v30 = v27 + 1;
    else
      v30 = v27 + 2;
    v31 = v30 >> 1;
    if (v29 >= -1)
      v32 = v29 + 1;
    else
      v32 = v29 + 2;
    v33 = v32 >> 1;
    v18[5] = v31;
    v18[6] = v33;
    if (v31 >= -1)
      v34 = v31 + 1;
    else
      v34 = v31 + 2;
    v35 = v34 >> 1;
    if (v33 >= -1)
      v36 = v33 + 1;
    else
      v36 = v33 + 2;
    v18[7] = v35;
    v18[8] = v36 >> 1;
    v37 = v35 + 2;
    if (v35 >= -1)
      v37 = v35 + 1;
    v18[9] = v37 >> 1;
    v38 = *(_QWORD *)(a1 + 88) - (_QWORD)v21;
    if (v38)
    {
      if (v38 >= 5)
        *(_QWORD *)(a1 + 88) = v21 + 1;
    }
    else
    {
      sub_20E78F7D4(a1 + 80, 1uLL);
      v21 = *(_DWORD **)(a1 + 80);
    }
    *v21 = 0;
  }
  if (*(_BYTE *)(a1 + 152))
  {
    if (!*(_QWORD *)(a2 + 56))
      return a1;
    goto LABEL_61;
  }
  v39 = *(_QWORD *)(a1 + 200);
  v40 = *(_QWORD *)(a1 + 64);
  v41 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 208) - v39) >> 3);
  if (v40 <= v41)
  {
    if (v40 < v41)
      *(_QWORD *)(a1 + 208) = v39 + 40 * v40;
  }
  else
  {
    sub_20E7D5644((char **)(a1 + 200), v40 - v41);
    v40 = *(_QWORD *)(a1 + 64);
  }
  if (v40)
  {
    v42 = *(char **)(a1 + 200);
    do
    {
      memset_pattern16(v42, &unk_20E80EEF0, 0x28uLL);
      v42 += 40;
      --v40;
    }
    while (v40);
  }
  memset_pattern16((void *)(a1 + 156), &unk_20E80EF00, 0x28uLL);
  if (*(_QWORD *)(a2 + 56))
  {
LABEL_61:
    v43 = 0;
    v44 = 1;
    do
    {
      sub_20E7CC134((uint64_t)v51, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), (_QWORD *)(*(_QWORD *)(a1 + 104) + 40 * v43), (_DWORD *)(*(_QWORD *)(a1 + 128) + 40 * v43), (_QWORD *)(*(_QWORD *)(a1 + 200) + 40 * v43), (_QWORD *)(a1 + 156));
      sub_20E7CCC24((uint64_t)v51, (uint64_t)&v49);
      v45 = *v5;
      v46 = *v5 + 24 * v43;
      v47 = *(void **)v46;
      if (*(_QWORD *)v46)
      {
        *(_QWORD *)(v45 + 24 * v43 + 8) = v47;
        operator delete(v47);
        *(_QWORD *)v46 = 0;
        *(_QWORD *)(v46 + 8) = 0;
        *(_QWORD *)(v46 + 16) = 0;
      }
      *(_OWORD *)v46 = v49;
      *(_QWORD *)(v45 + 24 * v43 + 16) = v50;
      v43 = v44++;
    }
    while (*(_QWORD *)(a2 + 56) > v43);
  }
  return a1;
}

void sub_20E7D2570(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  sub_20E791F00(v3);
  v5 = (void *)v1[695];
  if (v5)
  {
    v1[696] = v5;
    operator delete(v5);
    v6 = (void *)v1[692];
    if (!v6)
    {
LABEL_3:
      v7 = (void *)v1[689];
      if (!v7)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v6 = (void *)v1[692];
    if (!v6)
      goto LABEL_3;
  }
  v1[693] = v6;
  operator delete(v6);
  v7 = (void *)v1[689];
  if (!v7)
  {
LABEL_4:
    v8 = (void *)v1[686];
    if (!v8)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  v1[690] = v7;
  operator delete(v7);
  v8 = (void *)v1[686];
  if (!v8)
  {
LABEL_5:
    v9 = (void *)v1[683];
    if (!v9)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  v1[687] = v8;
  operator delete(v8);
  v9 = (void *)v1[683];
  if (!v9)
  {
LABEL_6:
    v10 = (void *)v1[680];
    if (!v10)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  v1[684] = v9;
  operator delete(v9);
  v10 = (void *)v1[680];
  if (!v10)
  {
LABEL_7:
    v11 = (void *)v1[677];
    if (!v11)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  v1[681] = v10;
  operator delete(v10);
  v11 = (void *)v1[677];
  if (!v11)
  {
LABEL_8:
    v12 = (void *)v1[674];
    if (!v12)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  v1[678] = v11;
  operator delete(v11);
  v12 = (void *)v1[674];
  if (!v12)
  {
LABEL_9:
    v13 = (void *)v1[671];
    if (!v13)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v1[675] = v12;
  operator delete(v12);
  v13 = (void *)v1[671];
  if (!v13)
  {
LABEL_10:
    v14 = (void *)v1[668];
    if (!v14)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v1[672] = v13;
  operator delete(v13);
  v14 = (void *)v1[668];
  if (!v14)
  {
LABEL_11:
    sub_20E791F00(v2);
    sub_20E7D269C((uint64_t)v1);
    _Unwind_Resume(a1);
  }
LABEL_21:
  v1[669] = v14;
  operator delete(v14);
  sub_20E791F00(v2);
  sub_20E7D269C((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E7D269C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &off_24C9A9050;
  sub_20E7938D0(a1 + 488, *(_QWORD **)(a1 + 496));
  sub_20E7D5084((void **)(a1 + 224));
  v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(_QWORD *)(a1 + 208) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(_QWORD *)(a1 + 136) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 104);
  if (v4)
  {
    *(_QWORD *)(a1 + 112) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 80);
  if (v5)
  {
    *(_QWORD *)(a1 + 88) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_20E7D2724(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  int v41;
  unint64_t v42;
  _BYTE *v43;
  _DWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  char *v55;
  int v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  int v63;
  void *v64;
  _DWORD *v65;
  unint64_t v66;
  char *v67;
  int v68;
  char *v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD *v92;
  uint64_t *v93;
  char **v94;
  __int128 *v95;
  char *v96;
  _QWORD *v97;
  unint64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  size_t v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  __int128 *v136;
  char *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  _BYTE *v147;
  int v148;
  char *v149;
  char *v150;
  void *v151;
  char *v152;
  void *v153;
  void *v154;
  _QWORD *v155;
  _QWORD *v156;
  void *v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  unsigned int v161;
  unint64_t v162;
  _DWORD *v163;
  unsigned int v164;
  uint64_t *v165;
  void **v166;
  uint64_t *v167;
  _QWORD *v168;
  _QWORD *v170;
  unint64_t v171;
  void *__p;
  uint64_t v173;
  char *v174;
  void *v175;
  char *v176;
  _QWORD *v177;
  _QWORD *v178;

  if (*(_QWORD *)(a1 + 64) <= (unint64_t)a3)
    sub_20E80BFB4();
  v6 = a2;
  sub_20E7D32F0(&v177, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  sub_20E7D32F0(&v175, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3));
  v7 = *v6;
  v8 = v6[1];
  v167 = a4;
  if (v8 == *v6)
  {
    v7 = v6[1];
  }
  else
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = &v177[v9 / 8];
      v12 = (uint64_t)(*(_QWORD *)(v7 + v9 + 8) - *(_QWORD *)(v7 + v9)) >> 7;
      LOBYTE(__p) = 0;
      v13 = v11[1] - *v11;
      if (v12 <= v13)
      {
        if (v12 < v13)
          v11[1] = *v11 + v12;
      }
      else
      {
        sub_20E7D57E8(v11, v12 - v13, (const char *)&__p);
        v7 = *v6;
        v12 = (uint64_t)(*(_QWORD *)(*v6 + v9 + 8) - *(_QWORD *)(*v6 + v9)) >> 7;
      }
      v14 = (unint64_t *)((char *)v175 + v9);
      LOBYTE(__p) = 0;
      v15 = *(_QWORD *)((char *)v175 + v9);
      v16 = *(_QWORD *)((char *)v175 + v9 + 8) - v15;
      if (v12 <= v16)
      {
        if (v12 < v16)
          v14[1] = v15 + v12;
      }
      else
      {
        sub_20E7D57E8(v14, v12 - v16, (const char *)&__p);
        v7 = *v6;
      }
      *(_QWORD *)(a1 + v9 + 5352) = *(_QWORD *)(a1 + v9 + 5344);
      ++v10;
      v8 = v6[1];
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3));
  }
  __p = 0;
  v173 = 0;
  v174 = 0;
  v161 = a3;
  v17 = *(_QWORD *)(a1 + 5320) + 24 * a3;
  v18 = *(_DWORD **)v17;
  v163 = *(_DWORD **)(v17 + 8);
  v168 = v6;
  if (*(_DWORD **)v17 != v163)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = v18[1];
      v24 = v23 - 1;
      v25 = *(_QWORD *)(v7 + 24 * (v23 - 1));
      if (*(_QWORD *)(v7 + 24 * (v23 - 1) + 8) != v25)
      {
        v26 = (*v18 & 0x1FFFu) >> (v23 >> 1);
        if (*(_DWORD *)(v25 + 40) <= v26)
          break;
      }
LABEL_16:
      v18 += 2;
      if (v18 == v163)
      {
        v8 = v6[1];
        goto LABEL_78;
      }
    }
    v27 = 0;
    v28 = a1 + 24 * v24;
    v166 = (void **)(v28 + 5344);
    v29 = (uint64_t *)(v28 + 5352);
    v170 = (_QWORD *)(v28 + 5360);
    v164 = (*v18 & 0x1FFFu) >> (v23 >> 1);
    v165 = (uint64_t *)(v28 + 5352);
    while (1)
    {
      if (*(_BYTE *)(v177[3 * v24] + v27))
        goto LABEL_64;
      if (v22 < *(_DWORD *)(a1 + 5312))
        break;
      *(_BYTE *)(*((_QWORD *)v175 + 3 * v24) + v27) = 1;
LABEL_63:
      *(_BYTE *)(v177[3 * v24] + v27) = 1;
      v7 = *v6;
LABEL_64:
      ++v27;
      v72 = *(_QWORD *)(v7 + 24 * v24);
      if (v27 >= (*(_QWORD *)(v7 + 24 * v24 + 8) - v72) >> 7 || *(_DWORD *)(v72 + (v27 << 7) + 40) > v26)
        goto LABEL_16;
    }
    v30 = (char *)*v29;
    if ((unint64_t)*v29 < *v170)
    {
      *(_DWORD *)v30 = v22;
      *v29 = (uint64_t)(v30 + 4);
      if (v21 < v20)
      {
LABEL_24:
        *(_DWORD *)v21 = v27;
        v31 = (uint64_t)(v21 + 4);
LABEL_62:
        ++v22;
        v173 = v31;
        v21 = (char *)v31;
        v6 = v168;
        goto LABEL_63;
      }
LABEL_47:
      v58 = (char *)(v21 - v19);
      v59 = (v21 - v19) >> 2;
      v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 62)
        sub_20E78D874();
      if ((v20 - v19) >> 1 > v60)
        v60 = (v20 - v19) >> 1;
      if ((unint64_t)(v20 - v19) >= 0x7FFFFFFFFFFFFFFCLL)
        v61 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      if (v61)
      {
        if (v61 >> 62)
          sub_20E78D888();
        v62 = v21;
        v63 = v22;
        v64 = operator new(4 * v61);
        v22 = v63;
        v21 = v62;
        v65 = (char *)v64 + 4 * v59;
        *v65 = v27;
        v31 = (uint64_t)(v65 + 1);
        if (v21 != v19)
        {
LABEL_56:
          v66 = v21 - 4 - v19;
          if (v66 < 0xBC
            || &v58[(_QWORD)v64 - 4 - (v66 & 0xFFFFFFFFFFFFFFFCLL)] > &v58[(_QWORD)v64 - 4]
            || &v21[-(v66 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v21 - 4
            || (unint64_t)(v21 - &v58[(_QWORD)v64]) < 0x20)
          {
            v67 = v21;
            v29 = v165;
          }
          else
          {
            v73 = (v66 >> 2) + 1;
            v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
            v67 = &v21[-v74];
            v65 = (_DWORD *)((char *)v65 - v74);
            v75 = (char *)v64 + 4 * v59 - 16;
            v76 = v21 - 16;
            v77 = v73 & 0x7FFFFFFFFFFFFFF8;
            v29 = v165;
            do
            {
              v78 = *(_OWORD *)v76;
              *(v75 - 1) = *((_OWORD *)v76 - 1);
              *v75 = v78;
              v75 -= 2;
              v76 -= 32;
              v77 -= 8;
            }
            while (v77);
            if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_59:
              v20 = (char *)v64 + 4 * v61;
              __p = v65;
              v173 = v31;
              v174 = v20;
              if (!v19)
              {
LABEL_61:
                v19 = (char *)v65;
                v26 = v164;
                goto LABEL_62;
              }
LABEL_60:
              v69 = v20;
              v70 = v19;
              v71 = v22;
              operator delete(v70);
              v20 = v69;
              v22 = v71;
              goto LABEL_61;
            }
          }
          do
          {
            v68 = *((_DWORD *)v67 - 1);
            v67 -= 4;
            *--v65 = v68;
          }
          while (v67 != v19);
          goto LABEL_59;
        }
      }
      else
      {
        v64 = 0;
        v65 = (_DWORD *)(4 * v59);
        *(_DWORD *)(4 * v59) = v27;
        v31 = 4 * v59 + 4;
        if (v21 != v19)
          goto LABEL_56;
      }
      v29 = v165;
      v20 = (char *)v64 + 4 * v61;
      __p = v65;
      v173 = v31;
      v174 = v20;
      if (!v19)
        goto LABEL_61;
      goto LABEL_60;
    }
    v32 = (char *)*v166;
    v33 = v30 - (_BYTE *)*v166;
    v34 = v33 >> 2;
    v35 = (v33 >> 2) + 1;
    if (v35 >> 62)
      sub_20E78D874();
    v36 = *v170 - (_QWORD)v32;
    if (v36 >> 1 > v35)
      v35 = v36 >> 1;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
      v37 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    v162 = (unint64_t)v20;
    if (v37)
    {
      if (v37 >> 62)
        sub_20E78D888();
      v38 = v19;
      v39 = v18;
      v40 = v21;
      v41 = v22;
      v42 = v37;
      v43 = operator new(4 * v37);
      v22 = v41;
      v21 = v40;
      v37 = v42;
      v18 = v39;
      v19 = v38;
      v34 = v33 >> 2;
      v44 = &v43[4 * (v33 >> 2)];
      *v44 = v41;
      v45 = (uint64_t)(v44 + 1);
      if (v30 == v32)
      {
LABEL_44:
        v29 = v165;
        *v166 = v44;
        *v165 = v45;
        *v170 = &v43[4 * v37];
        if (v32)
        {
          v55 = v32;
          v56 = v22;
          v57 = v21;
          operator delete(v55);
          v21 = v57;
          v22 = v56;
        }
        v26 = v164;
        v20 = (char *)v162;
        *v165 = v45;
        if ((unint64_t)v21 < v162)
          goto LABEL_24;
        goto LABEL_47;
      }
    }
    else
    {
      v43 = 0;
      v44 = (_DWORD *)(4 * v34);
      *(_DWORD *)(4 * v34) = v22;
      v45 = 4 * v34 + 4;
      if (v30 == v32)
        goto LABEL_44;
    }
    v46 = v30 - 4 - v32;
    if (v46 < 0x2C)
      goto LABEL_162;
    if ((unint64_t)(v30 - &v43[v33]) < 0x20)
      goto LABEL_162;
    v47 = (v46 >> 2) + 1;
    v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    v49 = &v30[-v48];
    v44 = (_DWORD *)((char *)v44 - v48);
    v50 = &v43[4 * v34 - 16];
    v51 = (__int128 *)(v30 - 16);
    v52 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v53 = *v51;
      *(v50 - 1) = *(v51 - 1);
      *v50 = v53;
      v50 -= 2;
      v51 -= 2;
      v52 -= 8;
    }
    while (v52);
    v30 = v49;
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_162:
      do
      {
        v54 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *--v44 = v54;
      }
      while (v30 != v32);
    }
    goto LABEL_44;
  }
LABEL_78:
  v79 = v167;
  sub_20E7D33B8(v167, 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3));
  v80 = *v6;
  v81 = v6[1];
  if (v81 == *v6)
    goto LABEL_111;
  v82 = 0;
  v83 = 0;
  do
  {
    v84 = *(_QWORD *)(v80 + 24 * v82);
    if (*(_QWORD *)(v80 + 24 * v82 + 8) != v84)
    {
      v85 = 0;
      while (1)
      {
        if (*(_BYTE *)(*((_QWORD *)v175 + 3 * v82) + v85))
          goto LABEL_86;
        v94 = (char **)(*v79 + 24 * v82);
        v95 = (__int128 *)(v84 + (v85 << 7));
        v97 = v94 + 1;
        v96 = v94[1];
        v99 = v94 + 2;
        v98 = (unint64_t)v94[2];
        if ((unint64_t)v96 >= v98)
          break;
        v86 = *v95;
        v87 = v95[1];
        v88 = v95[3];
        *((_OWORD *)v96 + 2) = v95[2];
        *((_OWORD *)v96 + 3) = v88;
        *(_OWORD *)v96 = v86;
        *((_OWORD *)v96 + 1) = v87;
        v89 = v95[4];
        v90 = v95[5];
        v91 = v95[7];
        *((_OWORD *)v96 + 6) = v95[6];
        *((_OWORD *)v96 + 7) = v91;
        *((_OWORD *)v96 + 4) = v89;
        *((_OWORD *)v96 + 5) = v90;
        v92 = v96 + 128;
LABEL_85:
        *v97 = v92;
        ++v83;
        v80 = *v6;
LABEL_86:
        ++v85;
        v93 = (uint64_t *)(v80 + 24 * v82);
        v84 = *v93;
        if (v85 >= (v93[1] - *v93) >> 7)
        {
          v81 = v6[1];
          goto LABEL_81;
        }
      }
      v100 = *v94;
      v101 = (v96 - *v94) >> 7;
      v102 = v101 + 1;
      if ((unint64_t)(v101 + 1) >> 57)
        sub_20E78D874();
      v103 = v98 - (_QWORD)v100;
      if (v103 >> 6 > v102)
        v102 = v103 >> 6;
      if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFF80)
        v104 = 0x1FFFFFFFFFFFFFFLL;
      else
        v104 = v102;
      v171 = v83;
      if (v104)
      {
        if (v104 >> 57)
          sub_20E78D888();
        v105 = (char *)operator new(v104 << 7);
      }
      else
      {
        v105 = 0;
      }
      v106 = &v105[128 * v101];
      v107 = *v95;
      v108 = v95[1];
      v109 = v95[3];
      *((_OWORD *)v106 + 2) = v95[2];
      *((_OWORD *)v106 + 3) = v109;
      *(_OWORD *)v106 = v107;
      *((_OWORD *)v106 + 1) = v108;
      v110 = v95[4];
      v111 = v95[5];
      v112 = v95[7];
      *((_OWORD *)v106 + 6) = v95[6];
      *((_OWORD *)v106 + 7) = v112;
      *((_OWORD *)v106 + 4) = v110;
      *((_OWORD *)v106 + 5) = v111;
      v113 = v106;
      if (v96 == v100)
      {
        v6 = v168;
        *v94 = v106;
        v92 = v106 + 128;
        *v97 = v106 + 128;
        *v99 = &v105[128 * v104];
        if (!v96)
          goto LABEL_104;
      }
      else
      {
        v6 = v168;
        do
        {
          v114 = *((_OWORD *)v96 - 8);
          v115 = *((_OWORD *)v96 - 7);
          v116 = *((_OWORD *)v96 - 5);
          *((_OWORD *)v113 - 6) = *((_OWORD *)v96 - 6);
          *((_OWORD *)v113 - 5) = v116;
          *((_OWORD *)v113 - 8) = v114;
          *((_OWORD *)v113 - 7) = v115;
          v117 = *((_OWORD *)v96 - 4);
          v118 = *((_OWORD *)v96 - 3);
          v119 = *((_OWORD *)v96 - 1);
          *((_OWORD *)v113 - 2) = *((_OWORD *)v96 - 2);
          *((_OWORD *)v113 - 1) = v119;
          *((_OWORD *)v113 - 4) = v117;
          *((_OWORD *)v113 - 3) = v118;
          v113 -= 128;
          v96 -= 128;
        }
        while (v96 != v100);
        v96 = *v94;
        *v94 = v113;
        v92 = v106 + 128;
        *v97 = v106 + 128;
        *v99 = &v105[128 * v104];
        if (!v96)
          goto LABEL_104;
      }
      operator delete(v96);
LABEL_104:
      v79 = v167;
      v83 = v171;
      goto LABEL_85;
    }
LABEL_81:
    ++v82;
  }
  while (v82 < 0xAAAAAAAAAAAAAAABLL * ((v81 - v80) >> 3));
  *(_DWORD *)(a1 + 5312) -= v83;
  if (!v83)
  {
LABEL_111:
    v123 = 0;
    v124 = 0;
    v122 = 0;
    v125 = *v79;
    v128 = v79[1];
    v127 = v128 - *v79;
    if (v128 == *v79)
      goto LABEL_120;
    goto LABEL_112;
  }
  if (v83 >> 57)
    sub_20E78D874();
  v120 = v83 << 7;
  v121 = v83;
  v122 = (char *)operator new(v83 << 7);
  v123 = v121;
  bzero(v122, v120);
  v124 = &v122[v120];
  v125 = *v79;
  v126 = v79[1];
  v127 = v126 - *v79;
  if (v126 != *v79)
  {
LABEL_112:
    v129 = 0;
    v130 = v127 / 24;
    if (v130 <= 1)
      v130 = 1;
    do
    {
      v131 = (uint64_t *)(v125 + 24 * v129);
      v132 = *v131;
      if (v131[1] != *v131)
      {
        v133 = 0;
        v134 = 0;
        v135 = *(_QWORD *)(a1 + 24 * v129 + 5344);
        do
        {
          v136 = (__int128 *)(v132 + v133);
          v137 = &v122[128 * (unint64_t)*(unsigned int *)(v135 + 4 * v134)];
          v138 = *v136;
          v139 = v136[1];
          v140 = v136[3];
          *((_OWORD *)v137 + 2) = v136[2];
          *((_OWORD *)v137 + 3) = v140;
          *(_OWORD *)v137 = v138;
          *((_OWORD *)v137 + 1) = v139;
          v141 = v136[4];
          v142 = v136[5];
          v143 = v136[7];
          *((_OWORD *)v137 + 6) = v136[6];
          *((_OWORD *)v137 + 7) = v143;
          *((_OWORD *)v137 + 4) = v141;
          *((_OWORD *)v137 + 5) = v142;
          ++v134;
          v132 = *v131;
          v133 += 128;
        }
        while (v134 < (v131[1] - *v131) >> 7);
      }
      ++v129;
    }
    while (v129 != v130);
  }
LABEL_120:
  if (*(_BYTE *)(a1 + 56))
  {
    v144 = *(_QWORD *)(a1 + 5584) + 24 * v161;
    v145 = (uint64_t)(*(_QWORD *)(v144 + 8) - *(_QWORD *)v144) >> 8;
    if (v123 <= v145)
    {
      if (v123 < v145)
        *(_QWORD *)(v144 + 8) = *(_QWORD *)v144 + (v123 << 8);
    }
    else
    {
      sub_20E7D54E4((char **)v144, v123 - v145);
    }
  }
  if (v124 == v122)
  {
    if (v122)
      goto LABEL_132;
  }
  else
  {
    v146 = 0;
    v147 = v122 + 24;
    do
    {
      if (*v147)
      {
        v148 = *(_DWORD *)(a1 + 5608);
        *(_DWORD *)(a1 + 5608) = v148 + 1;
      }
      else
      {
        v148 = *(_DWORD *)(a1 + 5612);
        *(_DWORD *)(a1 + 5612) = v148 + 1;
      }
      *(_DWORD *)(*(_QWORD *)(*v79 + 24 * *((unsigned int *)v147 - 1))
                + ((unint64_t)*((unsigned int *)__p + v146++) << 7)
                + 32) = v148;
      v147 += 128;
    }
    while (v146 < (v124 - v122) >> 7);
LABEL_132:
    operator delete(v122);
  }
  if (__p)
    operator delete(__p);
  v149 = (char *)v175;
  if (v175)
  {
    v150 = v176;
    v151 = v175;
    if (v176 != v175)
    {
      v152 = v176;
      do
      {
        v154 = (void *)*((_QWORD *)v152 - 3);
        v152 -= 24;
        v153 = v154;
        if (v154)
        {
          *((_QWORD *)v150 - 2) = v153;
          operator delete(v153);
        }
        v150 = v152;
      }
      while (v152 != v149);
      v151 = v175;
    }
    v176 = v149;
    operator delete(v151);
  }
  v155 = v177;
  if (v177)
  {
    v156 = v178;
    v157 = v177;
    if (v178 != v177)
    {
      v158 = v178;
      do
      {
        v160 = (void *)*(v158 - 3);
        v158 -= 3;
        v159 = v160;
        if (v160)
        {
          *(v156 - 2) = v159;
          operator delete(v159);
        }
        v156 = v158;
      }
      while (v158 != v155);
      v157 = v177;
    }
    v178 = v155;
    operator delete(v157);
  }
}

void sub_20E7D323C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void **v27;
  uint64_t v28;

  if (v26)
    operator delete(v26);
  sub_20E791F00(v27);
  if (__p)
    operator delete(__p);
  sub_20E791F00(&a26);
  sub_20E791F00((void **)(v28 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_20E7D32F0(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E78D874();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20E7D3398(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_20E80BFE0((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E7D33B8(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E78D874();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20E7D3460(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_20E80BFE0((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

void sub_20E7D3480(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double v43;
  double v44;
  int v45;
  char **v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  __int128 v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _QWORD *v74;
  _OWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  _OWORD *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  __int128 v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _OWORD *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  __int128 *v138;
  __int128 *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  _OWORD *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 *v158;
  unint64_t v159;
  __int128 *v160;
  __int128 *v161;
  unint64_t v162;
  _OWORD *v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _OWORD *v176;
  _OWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  char *v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  unint64_t v209;
  unint64_t v210;
  __int128 *v211;
  __int128 *v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  char *v221;
  char *v222;
  void *v223;
  char *v224;
  void *v225;
  void *v226;
  int v227[2];
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  int v231;
  unint64_t v232;
  unint64_t v233;
  _QWORD *v235;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  double v243;
  double v244;
  double v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  void *__p;
  char *v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  _OWORD v265[2];
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290[4];
  _OWORD v291[4];
  uint64_t v292;

  v292 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v227 = a5;
  if (*(_QWORD *)(a1 + 64) <= (unint64_t)a5)
    sub_20E80C02C();
  v5 = a1;
  v273 = 0;
  v271 = 0u;
  v272 = 0u;
  v269 = 0u;
  v270 = 0u;
  v267 = 0u;
  v268 = 0u;
  v266 = 0u;
  v264 = 0u;
  memset(v265, 0, 28);
  v262 = 0u;
  v263 = 0u;
  v260 = 0u;
  v261 = 0u;
  v258 = 0u;
  v259 = 0u;
  v256 = 0u;
  v257 = 0u;
  if (a5)
  {
    sub_20E7D2724(a1, a2, a5, (uint64_t *)&__p);
  }
  else
  {
    *(_DWORD *)(a1 + 5312) = *(_DWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 5608) = 0;
    v6 = *(_QWORD *)(a1 + 368);
    v7 = *(_QWORD *)(a1 + 376) - v6;
    if (v7)
    {
      v8 = v7 / 24;
      if (v8 <= 1)
        v8 = 1;
      v9 = (_QWORD *)(*(_QWORD *)(a1 + 224) + 8);
      v10 = (_QWORD *)(*(_QWORD *)(a1 + 416) + 8);
      v11 = (_QWORD *)(*(_QWORD *)(a1 + 248) + 8);
      v12 = (_QWORD *)(*(_QWORD *)(a1 + 392) + 8);
      v13 = (_QWORD *)(*(_QWORD *)(a1 + 272) + 8);
      v14 = (_QWORD *)(v6 + 8);
      v15 = (_QWORD *)(*(_QWORD *)(a1 + 296) + 8);
      v16 = (_QWORD *)(*(_QWORD *)(a1 + 344) + 8);
      v17 = (_QWORD *)(*(_QWORD *)(a1 + 320) + 8);
      do
      {
        *v9 = *(v9 - 1);
        v9 += 3;
        *v11 = *(v11 - 1);
        v11 += 3;
        *v13 = *(v13 - 1);
        v13 += 3;
        *v15 = *(v15 - 1);
        v15 += 3;
        *v17 = *(v17 - 1);
        v17 += 3;
        *v16 = *(v16 - 1);
        v16 += 3;
        *v14 = *(v14 - 1);
        v14 += 3;
        *v12 = *(v12 - 1);
        v12 += 3;
        *v10 = *(v10 - 1);
        v10 += 3;
        --v8;
      }
      while (v8);
    }
    sub_20E7D2724(a1, a2, 0, (uint64_t *)&__p);
  }
  v18 = *(_DWORD *)(v5 + 24);
  v242 = v5;
  if ((v18 - 3) <= 0xFFFFFFFD)
  {
    v235 = (_QWORD *)(v5 + 224);
    v231 = *(_DWORD *)(*(_QWORD *)(v5 + 80) + 4 * *(_QWORD *)v227) << 6;
    v19 = 1;
    do
    {
      v20 = v19 - 1;
      v21 = *((_QWORD *)__p + 3 * v19 - 2) - *((_QWORD *)__p + 3 * v19 - 3);
      if (v21)
      {
        v22 = 0;
        v23 = v21 >> 7;
        v24 = v5 + 24 * v20;
        v229 = (_QWORD *)(v24 + 5344);
        v228 = (_QWORD *)(v24 + 5352);
        if (v23 <= 1)
          v23 = 1;
        v233 = v23;
        v238 = v19;
        v240 = v19 - 1;
        do
        {
          v36 = (__int128 *)(*((_QWORD *)__p + 3 * v20) + (v22 << 7));
          v37 = v36[3];
          v39 = *v36;
          v38 = v36[1];
          v248 = v36[2];
          v249 = v37;
          v246 = v39;
          v247 = v38;
          v40 = v36[6];
          v42 = v36[4];
          v41 = v36[5];
          v253 = v36[7];
          v251 = v41;
          v252 = v40;
          v250 = v42;
          LODWORD(v40) = v246;
          v43 = (double)(unint64_t)v40 * 0.015625;
          v44 = (double)__PAIR64__(DWORD1(v253), DWORD1(v246)) * 0.015625;
          v45 = DWORD2(v246);
          sub_20E7F05D8(v5, a3, SDWORD2(v246), v19, (unsigned int *)&v266, v43, v44);
          v46 = (char **)(*v235 + 24 * v20);
          v47 = v46 + 1;
          v48 = v46[1];
          v49 = (unint64_t)v46[2];
          if ((unint64_t)v48 >= v49)
          {
            v57 = *v46;
            v58 = 0xEEEEEEEEEEEEEEEFLL * ((v48 - *v46) >> 3);
            v59 = v58 + 1;
            if (v58 + 1 > 0x222222222222222)
              sub_20E78D874();
            v60 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v49 - (_QWORD)v57) >> 3);
            if (2 * v60 > v59)
              v59 = 2 * v60;
            if (v60 >= 0x111111111111111)
              v61 = 0x222222222222222;
            else
              v61 = v59;
            if (v61)
            {
              if (v61 > 0x222222222222222)
                sub_20E78D888();
              v62 = (char *)operator new(120 * v61);
            }
            else
            {
              v62 = 0;
            }
            v63 = v271;
            v64 = &v62[120 * v58];
            *((_OWORD *)v64 + 4) = v270;
            *((_OWORD *)v64 + 5) = v63;
            *((_OWORD *)v64 + 6) = v272;
            *((_QWORD *)v64 + 14) = v273;
            v65 = v267;
            *(_OWORD *)v64 = v266;
            *((_OWORD *)v64 + 1) = v65;
            v66 = v269;
            *((_OWORD *)v64 + 2) = v268;
            *((_OWORD *)v64 + 3) = v66;
            v67 = v64;
            if (v48 != v57)
            {
              do
              {
                v68 = *(_OWORD *)(v48 - 120);
                v69 = *(_OWORD *)(v48 - 104);
                v70 = *(_OWORD *)(v48 - 88);
                *(_OWORD *)(v67 - 72) = *(_OWORD *)(v48 - 72);
                *(_OWORD *)(v67 - 88) = v70;
                *(_OWORD *)(v67 - 104) = v69;
                *(_OWORD *)(v67 - 120) = v68;
                v71 = *(_OWORD *)(v48 - 56);
                v72 = *(_OWORD *)(v48 - 40);
                v73 = *(_OWORD *)(v48 - 24);
                *((_QWORD *)v67 - 1) = *((_QWORD *)v48 - 1);
                *(_OWORD *)(v67 - 24) = v73;
                *(_OWORD *)(v67 - 40) = v72;
                *(_OWORD *)(v67 - 56) = v71;
                v67 -= 120;
                v48 -= 120;
              }
              while (v48 != v57);
              v48 = *v46;
            }
            *v46 = v67;
            v56 = v64 + 120;
            *v47 = v64 + 120;
            v46[2] = &v62[120 * v61];
            if (v48)
              operator delete(v48);
          }
          else
          {
            v50 = v266;
            v51 = v267;
            v52 = v269;
            *((_OWORD *)v48 + 2) = v268;
            *((_OWORD *)v48 + 3) = v52;
            *(_OWORD *)v48 = v50;
            *((_OWORD *)v48 + 1) = v51;
            v53 = v270;
            v54 = v271;
            v55 = v272;
            *((_QWORD *)v48 + 14) = v273;
            *((_OWORD *)v48 + 5) = v54;
            *((_OWORD *)v48 + 6) = v55;
            *((_OWORD *)v48 + 4) = v53;
            v56 = v48 + 120;
          }
          *v47 = v56;
          v244 = 0.0;
          v245 = 0.0;
          v243 = 0.0;
          sub_20E7F0958(v242, &v266, &v245, &v244, &v243);
          if ((int)v245 >= 0x1000)
          {
            sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 196, "orientation >= 0 && orientation < 256 && \"orientation overflow\"", (void (*)(void *))sub_20E803DA4);
            abort();
          }
          HIDWORD(v246) = (int)v245 >> 4;
          LODWORD(v246) = v246 + v231;
          LOWORD(v247) = sub_20E7EF470(v242, DWORD2(v246)) & 0x3FFF;
          LODWORD(v247) = (unsigned __int16)v247;
          sub_20E7F0B88(v242, a3, v45, v238, (unsigned int *)&v256, v43, v44, v244, v243);
          v74 = (_QWORD *)(*(_QWORD *)(v242 + 248) + 24 * v240);
          v76 = v74 + 1;
          v75 = (_OWORD *)v74[1];
          v77 = v74[2];
          if ((unint64_t)v75 >= v77)
          {
            v87 = (_OWORD *)*v74;
            v88 = 0x82FA0BE82FA0BE83 * (((uint64_t)v75 - *v74) >> 2);
            v89 = v88 + 1;
            if (v88 + 1 > 0x17D05F417D05F41)
              sub_20E78D874();
            v90 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v77 - (_QWORD)v87) >> 2);
            if (2 * v90 > v89)
              v89 = 2 * v90;
            if (v90 >= 0xBE82FA0BE82FA0)
              v91 = 0x17D05F417D05F41;
            else
              v91 = v89;
            if (v91)
            {
              if (v91 > 0x17D05F417D05F41)
                sub_20E78D888();
              v92 = (char *)operator new(172 * v91);
            }
            else
            {
              v92 = 0;
            }
            v93 = v265[0];
            v94 = &v92[172 * v88];
            *((_OWORD *)v94 + 8) = v264;
            *((_OWORD *)v94 + 9) = v93;
            *(_OWORD *)(v94 + 156) = *(_OWORD *)((char *)v265 + 12);
            v95 = v261;
            *((_OWORD *)v94 + 4) = v260;
            *((_OWORD *)v94 + 5) = v95;
            v96 = v263;
            *((_OWORD *)v94 + 6) = v262;
            *((_OWORD *)v94 + 7) = v96;
            v97 = v257;
            *(_OWORD *)v94 = v256;
            *((_OWORD *)v94 + 1) = v97;
            v98 = v259;
            *((_OWORD *)v94 + 2) = v258;
            *((_OWORD *)v94 + 3) = v98;
            v99 = v94;
            if (v75 != v87)
            {
              do
              {
                v100 = *(_OWORD *)((char *)v75 - 172);
                v101 = *(_OWORD *)((char *)v75 - 156);
                *(_OWORD *)((char *)v99 - 140) = *(_OWORD *)((char *)v75 - 140);
                *(_OWORD *)((char *)v99 - 156) = v101;
                *(_OWORD *)((char *)v99 - 172) = v100;
                v102 = *(_OWORD *)((char *)v75 - 124);
                v103 = *(_OWORD *)((char *)v75 - 108);
                v104 = *(_OWORD *)((char *)v75 - 92);
                *(_OWORD *)((char *)v99 - 76) = *(_OWORD *)((char *)v75 - 76);
                *(_OWORD *)((char *)v99 - 92) = v104;
                *(_OWORD *)((char *)v99 - 108) = v103;
                *(_OWORD *)((char *)v99 - 124) = v102;
                v105 = *(_OWORD *)((char *)v75 - 60);
                v106 = *(_OWORD *)((char *)v75 - 44);
                v107 = *(_OWORD *)((char *)v75 - 28);
                *(v99 - 1) = *(v75 - 1);
                *(_OWORD *)((char *)v99 - 28) = v107;
                *(_OWORD *)((char *)v99 - 44) = v106;
                *(_OWORD *)((char *)v99 - 60) = v105;
                v99 = (_OWORD *)((char *)v99 - 172);
                v75 = (_OWORD *)((char *)v75 - 172);
              }
              while (v75 != v87);
              v75 = (_OWORD *)*v74;
            }
            *v74 = v99;
            v86 = v94 + 172;
            *v76 = v94 + 172;
            v74[2] = &v92[172 * v91];
            if (v75)
              operator delete(v75);
          }
          else
          {
            v78 = v256;
            v79 = v258;
            v75[1] = v257;
            v75[2] = v79;
            *v75 = v78;
            v80 = v259;
            v81 = v260;
            v82 = v262;
            v75[5] = v261;
            v75[6] = v82;
            v75[3] = v80;
            v75[4] = v81;
            v83 = v263;
            v84 = v264;
            v85 = v265[0];
            *(_OWORD *)((char *)v75 + 156) = *(_OWORD *)((char *)v265 + 12);
            v75[8] = v84;
            v75[9] = v85;
            v75[7] = v83;
            v86 = (char *)v75 + 172;
          }
          *v76 = v86;
          v5 = v242;
          sub_20E7EF494(v242, (uint64_t)&v256, v291);
          sub_20E7F3010((uint64_t)v290, (unsigned __int8 *)v291);
          v20 = v240;
          sub_20E7D4534(v235, &v246, v291, v290, v240);
          v19 = v238;
          if (*(_BYTE *)(v242 + 56))
          {
            if (v22 >= (uint64_t)(*v228 - *v229) >> 2)
              sub_20E7D5A9C();
            v108 = *(unsigned int *)(*v229 + 4 * v22);
            v109 = *(_QWORD *)(*(_QWORD *)(v242 + 5584) + 24 * v227[0]);
            if (v108 >= (*(_QWORD *)(*(_QWORD *)(v242 + 5584) + 24 * v227[0] + 8) - v109) >> 8)
            {
              sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 214, "reorder_index < kp_desc_desmatch_[stripe_id].size()", (void (*)(void *))sub_20E803DA4);
              abort();
            }
            v278 = v250;
            v279 = v251;
            v280 = v252;
            v281 = v253;
            v274 = v246;
            v275 = v247;
            v276 = v248;
            v277 = v249;
            v284 = v291[2];
            v285 = v291[3];
            v282 = v291[0];
            v283 = v291[1];
            v286 = v290[0];
            v287 = v290[1];
            v288 = v290[2];
            v289 = v290[3];
            v25 = (_OWORD *)(v109 + (v108 << 8));
            v26 = v249;
            v25[2] = v248;
            v25[3] = v26;
            v27 = v279;
            v25[4] = v278;
            v25[5] = v27;
            v28 = v275;
            *v25 = v274;
            v25[1] = v28;
            v29 = v281;
            v25[6] = v280;
            v25[7] = v29;
            v30 = v282;
            v31 = v283;
            v32 = v285;
            v25[10] = v284;
            v25[11] = v32;
            v25[8] = v30;
            v25[9] = v31;
            v33 = v286;
            v34 = v287;
            v35 = v289;
            v25[14] = v288;
            v25[15] = v35;
            v25[12] = v33;
            v25[13] = v34;
          }
          ++v22;
        }
        while (v22 != v233);
        v18 = *(_DWORD *)(v242 + 24);
      }
      ++v19;
    }
    while (v19 < v18 - 1);
  }
  if (*(_QWORD *)(v5 + 64) - 1 != *(_QWORD *)v227)
    goto LABEL_123;
  v110 = *(_QWORD *)(v5 + 368);
  v111 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 376) - v110) >> 3);
  if (v111 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 400) - *(_QWORD *)(v5 + 392)) >> 3)
    || v111 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 424) - *(_QWORD *)(v5 + 416)) >> 3))
  {
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 228, "kp.size() == desc.size() && kp.size() == desc_reorder.size()", (void (*)(void *))sub_20E803DA4);
    abort();
  }
  v112 = v18 - 2;
  v113 = *(_QWORD *)(v5 + 440);
  *(_QWORD *)(v5 + 448) = v113;
  v114 = *(_QWORD *)(v5 + 464);
  *(_QWORD *)(v5 + 472) = v114;
  a4[11] = a4[10];
  a4[17] = a4[16];
  v115 = a4[4];
  a4[14] = a4[13];
  a4[5] = v115;
  v241 = a4 + 10;
  a4[8] = a4[7];
  if (!(_DWORD)v112)
  {
    v117 = 0;
    v118 = 0;
    v129 = (*(_QWORD *)(v5 + 448) - v113) >> 8;
    goto LABEL_82;
  }
  v116 = 0;
  v117 = 0;
  v118 = 0;
  do
  {
    v119 = (uint64_t *)(v110 + 24 * v116);
    v120 = *v119;
    v121 = v119[1];
    if (v120 == v121)
      goto LABEL_64;
    v122 = v121 - v120 - 128;
    if (v122 < 0x80)
    {
      v123 = v120;
      do
      {
LABEL_75:
        v118 += *(unsigned __int8 *)(v123 + 24);
        if (!*(_BYTE *)(v123 + 24))
          ++v117;
        v123 += 128;
      }
      while (v123 != v121);
      goto LABEL_64;
    }
    v124 = 0;
    v125 = 0;
    v126 = (v122 >> 7) + 1;
    v123 = v120 + ((v126 & 0x3FFFFFFFFFFFFFELL) << 7);
    v127 = (_BYTE *)(v120 + 152);
    v128 = v126 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      if (!*(v127 - 128))
        ++v117;
      v118 += *(v127 - 128);
      v125 += *v127;
      if (!*v127)
        ++v124;
      v127 += 256;
      v128 -= 2;
    }
    while (v128);
    v118 += v125;
    v117 += v124;
    if (v126 != (v126 & 0x3FFFFFFFFFFFFFELL))
      goto LABEL_75;
LABEL_64:
    ++v116;
  }
  while (v116 != v112);
  v129 = (*(_QWORD *)(v5 + 448) - v113) >> 8;
  if (v118 > v129)
  {
    sub_20E7D54E4((char **)(v5 + 440), v118 - v129);
    v114 = *(_QWORD *)(v5 + 464);
    goto LABEL_84;
  }
LABEL_82:
  if (v129 > v118)
    *(_QWORD *)(v5 + 448) = v113 + (v118 << 8);
LABEL_84:
  v130 = (*(_QWORD *)(v5 + 472) - v114) >> 8;
  if (v117 <= v130)
  {
    if (v117 < v130)
      *(_QWORD *)(v5 + 472) = v114 + (v117 << 8);
  }
  else
  {
    sub_20E7D54E4((char **)(v5 + 464), v117 - v130);
  }
  v131 = a4[10];
  if (v117 + v118 < (a4[11] - v131) >> 8)
    a4[11] = v131 + ((v117 + v118) << 8);
  if ((_DWORD)v112)
  {
    v132 = 0;
    v133 = *(_QWORD *)(v5 + 368);
    v237 = v118;
    v232 = v117;
    v230 = v112;
    do
    {
      v134 = *(_QWORD *)(v133 + 24 * v132);
      v135 = *(_QWORD *)(v133 + 24 * v132 + 8);
      v136 = (v135 - v134) >> 7;
      if (v136 != (uint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 392) + 24 * v132 + 8)
                           - *(_QWORD *)(*(_QWORD *)(v5 + 392) + 24 * v132)) >> 6
        || v136 != (uint64_t)(*(_QWORD *)(*(_QWORD *)(v5 + 416) + 24 * v132 + 8)
                           - *(_QWORD *)(*(_QWORD *)(v5 + 416) + 24 * v132)) >> 6)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 253, "kp[scale].size() == desc[scale].size() && kp[scale].size() == desc_reorder[scale].size()", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      if (v135 != v134)
      {
        v137 = 0;
        v239 = v132;
        do
        {
          v158 = (__int128 *)(v134 + (v137 << 7));
          v159 = v137 << 6;
          v160 = (__int128 *)(*(_QWORD *)(*(_QWORD *)(v5 + 392) + 24 * v132) + (v137 << 6));
          v161 = (__int128 *)(*(_QWORD *)(*(_QWORD *)(v5 + 416) + 24 * v132) + (v137 << 6));
          v163 = (_OWORD *)a4[11];
          v162 = a4[12];
          if ((unint64_t)v163 >= v162)
          {
            v177 = (_OWORD *)*v241;
            v178 = ((uint64_t)v163 - *v241) >> 8;
            v179 = v178 + 1;
            if ((unint64_t)(v178 + 1) >> 56)
              sub_20E78D874();
            v180 = v162 - (_QWORD)v177;
            if (v180 >> 7 > v179)
              v179 = v180 >> 7;
            if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFF00)
              v181 = 0xFFFFFFFFFFFFFFLL;
            else
              v181 = v179;
            if (v181)
            {
              if (HIBYTE(v181))
                sub_20E78D888();
              v182 = (char *)operator new(v181 << 8);
            }
            else
            {
              v182 = 0;
            }
            v183 = &v182[256 * v178];
            v184 = *v158;
            v185 = v158[1];
            v186 = v158[3];
            *((_OWORD *)v183 + 2) = v158[2];
            *((_OWORD *)v183 + 3) = v186;
            *(_OWORD *)v183 = v184;
            *((_OWORD *)v183 + 1) = v185;
            v187 = v158[4];
            v188 = v158[5];
            v189 = v158[7];
            *((_OWORD *)v183 + 6) = v158[6];
            *((_OWORD *)v183 + 7) = v189;
            *((_OWORD *)v183 + 4) = v187;
            *((_OWORD *)v183 + 5) = v188;
            v190 = *v160;
            v191 = v160[1];
            v192 = v160[3];
            *((_OWORD *)v183 + 10) = v160[2];
            *((_OWORD *)v183 + 11) = v192;
            *((_OWORD *)v183 + 8) = v190;
            *((_OWORD *)v183 + 9) = v191;
            v193 = *v161;
            v194 = v161[1];
            v195 = v161[3];
            *((_OWORD *)v183 + 14) = v161[2];
            *((_OWORD *)v183 + 15) = v195;
            *((_OWORD *)v183 + 12) = v193;
            *((_OWORD *)v183 + 13) = v194;
            v196 = v183;
            if (v163 != v177)
            {
              do
              {
                v197 = *(v163 - 16);
                v198 = *(v163 - 15);
                v199 = *(v163 - 13);
                *((_OWORD *)v196 - 14) = *(v163 - 14);
                *((_OWORD *)v196 - 13) = v199;
                *((_OWORD *)v196 - 16) = v197;
                *((_OWORD *)v196 - 15) = v198;
                v200 = *(v163 - 12);
                v201 = *(v163 - 11);
                v202 = *(v163 - 9);
                *((_OWORD *)v196 - 10) = *(v163 - 10);
                *((_OWORD *)v196 - 9) = v202;
                *((_OWORD *)v196 - 12) = v200;
                *((_OWORD *)v196 - 11) = v201;
                v203 = *(v163 - 8);
                v204 = *(v163 - 7);
                v205 = *(v163 - 5);
                *((_OWORD *)v196 - 6) = *(v163 - 6);
                *((_OWORD *)v196 - 5) = v205;
                *((_OWORD *)v196 - 8) = v203;
                *((_OWORD *)v196 - 7) = v204;
                v206 = *(v163 - 4);
                v207 = *(v163 - 3);
                v208 = *(v163 - 1);
                *((_OWORD *)v196 - 2) = *(v163 - 2);
                *((_OWORD *)v196 - 1) = v208;
                *((_OWORD *)v196 - 4) = v206;
                *((_OWORD *)v196 - 3) = v207;
                v196 -= 256;
                v163 -= 16;
              }
              while (v163 != v177);
              v163 = (_OWORD *)*v241;
            }
            v176 = v183 + 256;
            a4[10] = v196;
            a4[11] = v183 + 256;
            a4[12] = &v182[256 * v181];
            if (v163)
              operator delete(v163);
            v118 = v237;
            v132 = v239;
          }
          else
          {
            v164 = *v158;
            v165 = v158[1];
            v166 = v158[3];
            v163[2] = v158[2];
            v163[3] = v166;
            *v163 = v164;
            v163[1] = v165;
            v167 = v158[4];
            v168 = v158[5];
            v169 = v158[7];
            v163[6] = v158[6];
            v163[7] = v169;
            v163[4] = v167;
            v163[5] = v168;
            v170 = *v160;
            v171 = v160[1];
            v172 = v160[3];
            v163[10] = v160[2];
            v163[11] = v172;
            v163[8] = v170;
            v163[9] = v171;
            v173 = *v161;
            v174 = v161[1];
            v175 = v161[3];
            v163[14] = v161[2];
            v163[15] = v175;
            v163[12] = v173;
            v163[13] = v174;
            v176 = v163 + 16;
          }
          a4[11] = v176;
          v5 = v242;
          v209 = *(_QWORD *)(*(_QWORD *)(v242 + 368) + 24 * v132) + (v137 << 7);
          v210 = *(unsigned int *)(v209 + 32);
          if (*(_BYTE *)(v209 + 24))
          {
            if (v118 <= v210)
            {
              sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 258, "min_idx < minima_cnt", (void (*)(void *))sub_20E803DA4);
              abort();
            }
            v211 = (__int128 *)(*(_QWORD *)(*(_QWORD *)(v242 + 392) + 24 * v132) + v159);
            v212 = (__int128 *)(*(_QWORD *)(*(_QWORD *)(v242 + 416) + 24 * v132) + v159);
            v213 = *(_OWORD *)(v209 + 80);
            v278 = *(_OWORD *)(v209 + 64);
            v279 = v213;
            v214 = *(_OWORD *)(v209 + 112);
            v280 = *(_OWORD *)(v209 + 96);
            v281 = v214;
            v215 = *(_OWORD *)(v209 + 16);
            v274 = *(_OWORD *)v209;
            v275 = v215;
            v216 = *(_OWORD *)(v209 + 48);
            v276 = *(_OWORD *)(v209 + 32);
            v277 = v216;
            v217 = v211[3];
            v284 = v211[2];
            v285 = v217;
            v218 = v211[1];
            v282 = *v211;
            v283 = v218;
            v219 = v212[1];
            v286 = *v212;
            v287 = v219;
            v220 = v212[3];
            v288 = v212[2];
            v289 = v220;
            v148 = *(_QWORD *)(v242 + 440);
          }
          else
          {
            if (v232 <= v210)
            {
              sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/CollKeyPointToDescriptor.cpp", 262, "max_idx < maxima_cnt", (void (*)(void *))sub_20E803DA4);
              abort();
            }
            v138 = (__int128 *)(*(_QWORD *)(*(_QWORD *)(v242 + 392) + 24 * v132) + v159);
            v139 = (__int128 *)(*(_QWORD *)(*(_QWORD *)(v242 + 416) + 24 * v132) + v159);
            v140 = *(_OWORD *)(v209 + 80);
            v278 = *(_OWORD *)(v209 + 64);
            v279 = v140;
            v141 = *(_OWORD *)(v209 + 112);
            v280 = *(_OWORD *)(v209 + 96);
            v281 = v141;
            v142 = *(_OWORD *)(v209 + 16);
            v274 = *(_OWORD *)v209;
            v275 = v142;
            v143 = *(_OWORD *)(v209 + 48);
            v276 = *(_OWORD *)(v209 + 32);
            v277 = v143;
            v144 = v138[3];
            v284 = v138[2];
            v285 = v144;
            v145 = v138[1];
            v282 = *v138;
            v283 = v145;
            v146 = v139[1];
            v286 = *v139;
            v287 = v146;
            v147 = v139[3];
            v288 = v139[2];
            v289 = v147;
            v148 = *(_QWORD *)(v242 + 464);
          }
          v149 = (_OWORD *)(v148 + (v210 << 8));
          v150 = v277;
          v149[2] = v276;
          v149[3] = v150;
          v151 = v275;
          *v149 = v274;
          v149[1] = v151;
          v152 = v281;
          v149[6] = v280;
          v149[7] = v152;
          v153 = v279;
          v149[4] = v278;
          v149[5] = v153;
          v154 = v285;
          v149[10] = v284;
          v149[11] = v154;
          v155 = v283;
          v149[8] = v282;
          v149[9] = v155;
          v156 = v289;
          v149[14] = v288;
          v149[15] = v156;
          v157 = v287;
          v149[12] = v286;
          v149[13] = v157;
          ++v137;
          v133 = *(_QWORD *)(v242 + 368);
          v134 = *(_QWORD *)(v133 + 24 * v132);
        }
        while (v137 < (*(_QWORD *)(v133 + 24 * v132 + 8) - v134) >> 7);
        v112 = v230;
      }
      ++v132;
    }
    while (v132 != v112);
  }
  sub_20E7D5B24(a4 + 4, *(char **)(v5 + 464), *(char **)(v5 + 472), (uint64_t)(*(_QWORD *)(v5 + 472) - *(_QWORD *)(v5 + 464)) >> 8);
  sub_20E7D5B24(a4 + 7, *(char **)(v5 + 440), *(char **)(v5 + 448), (uint64_t)(*(_QWORD *)(v5 + 448) - *(_QWORD *)(v5 + 440)) >> 8);
LABEL_123:
  v221 = (char *)__p;
  if (__p)
  {
    v222 = v255;
    v223 = __p;
    if (v255 != __p)
    {
      v224 = v255;
      do
      {
        v226 = (void *)*((_QWORD *)v224 - 3);
        v224 -= 24;
        v225 = v226;
        if (v226)
        {
          *((_QWORD *)v222 - 2) = v225;
          operator delete(v225);
        }
        v222 = v224;
      }
      while (v224 != v221);
      v223 = __p;
    }
    v255 = v221;
    operator delete(v223);
  }
}

void sub_20E7D43F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D4404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D4418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D4430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D4444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D4458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D446C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D4480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D4494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D44A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D44BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D44D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D44E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D44F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D450C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D4520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  sub_20E791F00(&a42);
  _Unwind_Resume(a1);
}

void sub_20E7D4534(_QWORD *a1, _OWORD *a2, _OWORD *a3, __int128 *a4, uint64_t a5)
{
  uint64_t v5;
  char **v9;
  char *v10;
  _QWORD *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char **v38;
  char *v39;
  _QWORD *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char **v58;
  char *v59;
  _QWORD *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _QWORD *v79;

  v5 = a5;
  v9 = (char **)(a1[18] + 24 * a5);
  v11 = v9 + 1;
  v10 = v9[1];
  v12 = (unint64_t)v9[2];
  v79 = a1;
  if ((unint64_t)v10 >= v12)
  {
    v20 = *v9;
    v21 = (v10 - *v9) >> 7;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 57)
      sub_20E78D874();
    v23 = v12 - (_QWORD)v20;
    if (v23 >> 6 > v22)
      v22 = v23 >> 6;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFF80)
      v24 = 0x1FFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 57)
        goto LABEL_55;
      v25 = (char *)operator new(v24 << 7);
    }
    else
    {
      v25 = 0;
    }
    v26 = a2[5];
    v27 = &v25[128 * v21];
    *((_OWORD *)v27 + 4) = a2[4];
    *((_OWORD *)v27 + 5) = v26;
    v28 = a2[7];
    *((_OWORD *)v27 + 6) = a2[6];
    *((_OWORD *)v27 + 7) = v28;
    v29 = a2[1];
    *(_OWORD *)v27 = *a2;
    *((_OWORD *)v27 + 1) = v29;
    v30 = a2[2];
    v31 = a2[3];
    v19 = v27 + 128;
    *((_OWORD *)v27 + 2) = v30;
    *((_OWORD *)v27 + 3) = v31;
    if (v10 != v20)
    {
      do
      {
        v32 = *((_OWORD *)v10 - 8);
        v33 = *((_OWORD *)v10 - 7);
        v34 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v27 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v27 - 5) = v34;
        *((_OWORD *)v27 - 8) = v32;
        *((_OWORD *)v27 - 7) = v33;
        v35 = *((_OWORD *)v10 - 4);
        v36 = *((_OWORD *)v10 - 3);
        v37 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v27 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v27 - 1) = v37;
        *((_OWORD *)v27 - 4) = v35;
        *((_OWORD *)v27 - 3) = v36;
        v27 -= 128;
        v10 -= 128;
      }
      while (v10 != v20);
      v10 = *v9;
    }
    *v9 = v27;
    *v11 = v19;
    v9[2] = &v25[128 * v24];
    v5 = a5;
    if (v10)
      operator delete(v10);
    a1 = v79;
  }
  else
  {
    v13 = *a2;
    v14 = a2[1];
    v15 = a2[3];
    *((_OWORD *)v10 + 2) = a2[2];
    *((_OWORD *)v10 + 3) = v15;
    *(_OWORD *)v10 = v13;
    *((_OWORD *)v10 + 1) = v14;
    v16 = a2[4];
    v17 = a2[5];
    v18 = a2[7];
    *((_OWORD *)v10 + 6) = a2[6];
    *((_OWORD *)v10 + 7) = v18;
    *((_OWORD *)v10 + 4) = v16;
    *((_OWORD *)v10 + 5) = v17;
    v19 = v10 + 128;
  }
  *v11 = v19;
  v38 = (char **)(a1[21] + 24 * v5);
  v40 = v38 + 1;
  v39 = v38[1];
  v41 = (unint64_t)v38[2];
  if ((unint64_t)v39 >= v41)
  {
    v46 = *v38;
    v47 = (v39 - *v38) >> 6;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 58)
      sub_20E78D874();
    v49 = v41 - (_QWORD)v46;
    if (v49 >> 5 > v48)
      v48 = v49 >> 5;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFC0)
      v50 = 0x3FFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      if (v50 >> 58)
        goto LABEL_55;
      v51 = (char *)operator new(v50 << 6);
    }
    else
    {
      v51 = 0;
    }
    v52 = &v51[64 * v47];
    v53 = a3[1];
    *(_OWORD *)v52 = *a3;
    *((_OWORD *)v52 + 1) = v53;
    v54 = a3[3];
    *((_OWORD *)v52 + 2) = a3[2];
    *((_OWORD *)v52 + 3) = v54;
    v45 = v52 + 64;
    if (v39 != v46)
    {
      do
      {
        v55 = *((_OWORD *)v39 - 4);
        v56 = *((_OWORD *)v39 - 3);
        v57 = *((_OWORD *)v39 - 1);
        *((_OWORD *)v52 - 2) = *((_OWORD *)v39 - 2);
        *((_OWORD *)v52 - 1) = v57;
        *((_OWORD *)v52 - 4) = v55;
        *((_OWORD *)v52 - 3) = v56;
        v52 -= 64;
        v39 -= 64;
      }
      while (v39 != v46);
      v39 = *v38;
    }
    *v38 = v52;
    *v40 = v45;
    v38[2] = &v51[64 * v50];
    if (v39)
      operator delete(v39);
    a1 = v79;
  }
  else
  {
    v42 = *a3;
    v43 = a3[1];
    v44 = a3[3];
    *((_OWORD *)v39 + 2) = a3[2];
    *((_OWORD *)v39 + 3) = v44;
    *(_OWORD *)v39 = v42;
    *((_OWORD *)v39 + 1) = v43;
    v45 = v39 + 64;
  }
  *v40 = v45;
  v58 = (char **)(a1[24] + 24 * v5);
  v60 = v58 + 1;
  v59 = v58[1];
  v61 = (unint64_t)v58[2];
  if ((unint64_t)v59 < v61)
  {
    v62 = *a4;
    v63 = a4[1];
    v64 = a4[3];
    *((_OWORD *)v59 + 2) = a4[2];
    *((_OWORD *)v59 + 3) = v64;
    *(_OWORD *)v59 = v62;
    *((_OWORD *)v59 + 1) = v63;
    v65 = v59 + 64;
    goto LABEL_54;
  }
  v66 = *v58;
  v67 = (v59 - *v58) >> 6;
  v68 = v67 + 1;
  if ((unint64_t)(v67 + 1) >> 58)
    sub_20E78D874();
  v69 = v61 - (_QWORD)v66;
  if (v69 >> 5 > v68)
    v68 = v69 >> 5;
  if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFC0)
    v70 = 0x3FFFFFFFFFFFFFFLL;
  else
    v70 = v68;
  if (!v70)
  {
    v71 = 0;
    goto LABEL_49;
  }
  if (v70 >> 58)
LABEL_55:
    sub_20E78D888();
  v71 = (char *)operator new(v70 << 6);
LABEL_49:
  v72 = &v71[64 * v67];
  v73 = a4[1];
  *(_OWORD *)v72 = *a4;
  *((_OWORD *)v72 + 1) = v73;
  v74 = a4[3];
  *((_OWORD *)v72 + 2) = a4[2];
  *((_OWORD *)v72 + 3) = v74;
  v65 = v72 + 64;
  if (v59 != v66)
  {
    do
    {
      v75 = *((_OWORD *)v59 - 4);
      v76 = *((_OWORD *)v59 - 3);
      v77 = *((_OWORD *)v59 - 1);
      *((_OWORD *)v72 - 2) = *((_OWORD *)v59 - 2);
      *((_OWORD *)v72 - 1) = v77;
      *((_OWORD *)v72 - 4) = v75;
      *((_OWORD *)v72 - 3) = v76;
      v72 -= 64;
      v59 -= 64;
    }
    while (v59 != v66);
    v59 = *v58;
  }
  *v58 = v72;
  *v60 = v65;
  v58[2] = &v71[64 * v70];
  if (v59)
    operator delete(v59);
LABEL_54:
  *v60 = v65;
}

void sub_20E7D48C4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  __int128 *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _DWORD *v56;
  int *v57;
  int v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 *v62;
  _OWORD *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t i;
  __int32 v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t __n;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  _OWORD v98[4];
  _OWORD v99[4];
  _OWORD v100[4];
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  __int128 __dst;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _BYTE v111[84];
  uint64_t v112;

  v3 = a1;
  v112 = *MEMORY[0x24BDAC8D0];
  v91 = a1[6];
  v96 = a1[4];
  v97 = a1[5];
  v89 = (v96 & 0xFFFFFFFFFFFFFFE0) + 128;
  v4 = v89 * v97;
  v5 = *(char **)(a2 + 152);
  v6 = *(char **)(a2 + 160);
  v7 = (_QWORD *)(a2 + 152);
  v8 = (v6 - v5) >> 2;
  if (v89 * v97 <= v8)
  {
    if (v4 < v8)
    {
      v6 = &v5[4 * v4];
      *(_QWORD *)(a2 + 160) = v6;
    }
  }
  else
  {
    sub_20E78F7D4((uint64_t)v7, v89 * v97 - v8);
    v5 = *(char **)(a2 + 152);
    v6 = *(char **)(a2 + 160);
  }
  v9 = v6 - v5;
  if (v9 >= 1)
    bzero(v5, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  memset(v100, 0, sizeof(v100));
  memset(v99, 0, sizeof(v99));
  memset(v98, 0, sizeof(v98));
  v10 = *(_QWORD *)(a2 + 176);
  v11 = *(_QWORD *)(a2 + 184);
  v12 = (void **)(a2 + 176);
  v13 = 0x8F5C28F5C28F5C29 * ((v11 - v10) >> 3);
  if (32 * v97 <= v13)
  {
    if (32 * v97 < v13)
    {
      v11 = v10 + 6400 * v97;
      *(_QWORD *)(a2 + 184) = v11;
    }
  }
  else
  {
    sub_20E7D5C6C((void **)(a2 + 176), 32 * v97 - v13);
    v10 = *(_QWORD *)(a2 + 176);
    v11 = *(_QWORD *)(a2 + 184);
  }
  memset(&v111[12], 0, 72);
  v14 = v11 - v10;
  if (v14 >= 1)
  {
    v15 = v14 / 0xC8uLL + 1;
    v16 = v10 + 20;
    do
    {
      *(_DWORD *)(v16 - 4) = 0x3FFF;
      v17 = __dst;
      v18 = v106;
      v19 = v108;
      *(_OWORD *)(v16 + 32) = v107;
      *(_OWORD *)(v16 + 48) = v19;
      *(_OWORD *)v16 = v17;
      *(_OWORD *)(v16 + 16) = v18;
      v20 = v109;
      v21 = v110;
      v22 = *(_OWORD *)&v111[16];
      *(_OWORD *)(v16 + 96) = *(_OWORD *)v111;
      *(_OWORD *)(v16 + 112) = v22;
      *(_OWORD *)(v16 + 64) = v20;
      *(_OWORD *)(v16 + 80) = v21;
      v23 = *(_OWORD *)&v111[32];
      v24 = *(_OWORD *)&v111[48];
      v25 = *(_OWORD *)&v111[64];
      *(_DWORD *)(v16 + 176) = *(_DWORD *)&v111[80];
      *(_OWORD *)(v16 + 144) = v24;
      *(_OWORD *)(v16 + 160) = v25;
      *(_OWORD *)(v16 + 128) = v23;
      --v15;
      v16 += 200;
    }
    while (v15 > 1);
  }
  v26 = v3[8];
  if (!v26)
  {
    v30 = 0;
    goto LABEL_60;
  }
  v95 = v3;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = v96 >> 5;
  if (v96 >> 5 <= 1)
    v32 = 1;
  else
    v32 = v96 >> 5;
  __n = 4 * v32;
  v93 = v32;
  v90 = v32 & 0x7FFFFFFFFFFFFF8;
  v94 = v7;
  do
  {
    v33 = *(_QWORD *)(v3[698] + 24 * v27 + 8) - *(_QWORD *)(v3[698] + 24 * v27);
    if (v33)
    {
      v88 = v29;
      v34 = 0;
      if ((unint64_t)(v33 >> 8) <= 1)
        v35 = 1;
      else
        v35 = v33 >> 8;
      while (1)
      {
        v36 = (__int128 *)(*(_QWORD *)(v3[698] + 24 * v27) + (v34 << 8));
        v37 = *((unsigned __int8 *)v36 + 12);
        v38 = *(_DWORD *)v36 & 0x3FFFF | ((unint64_t)(*((_DWORD *)v36 + 1) & 0x7FFFF) << 32) | (*((_DWORD *)v36 + 4) << 18);
        v39 = ((unint64_t)(*((_DWORD *)v36 + 5) & 7) << 60) | ((unint64_t)*((unsigned __int8 *)v36 + 24) << 63) | v38 | (v37 << 52);
        v41 = *((_DWORD *)v36 + 7);
        v40 = *((_DWORD *)v36 + 8);
        v42 = (v39 >> 60) & 8 | (v37 >> 5);
        v43 = v101.u32[v42];
        if ((_DWORD)v43)
        {
          if ((v28 & 1) == 0)
          {
            v44 = *((_DWORD *)v99 + v42);
            goto LABEL_35;
          }
LABEL_25:
          v28 = 1;
          if (++v34 == v35)
            goto LABEL_19;
        }
        else
        {
          if (v28 & 1 | (v30 >= v97))
            goto LABEL_25;
          v45 = *((unsigned int *)v100 + v42);
          if (v91 <= v45)
            goto LABEL_25;
          v46 = 4 * v42;
          v44 = v30 * v89;
          *(_DWORD *)((char *)v99 + v46) = v30 * v89;
          *(_DWORD *)((char *)v98 + v46) = 32 * v30++;
          *(_DWORD *)((char *)v100 + v46) = v45 + 1;
LABEL_35:
          v47 = v44 + 2 * v43;
          v48 = *v7;
          *(_DWORD *)(*v7 + 4 * v47) = v38;
          *(_DWORD *)(v48 + 4 * (v47 + 1)) = HIDWORD(v39);
          *(_DWORD *)(v48 + 4 * (v43 + v44 + 64)) = v41 & 0x7FFF | ((v40 & 0x1FFF) << 16);
          *(_DWORD *)(v48 + 4 * (v43 + v44 + 96)) = 0;
          if (v31 == 16)
            v49 = v36 + 8;
          else
            v49 = v36 + 12;
          if (v96 > 0x1F)
          {
            v51 = v31 * v43;
            v52 = v44;
            if (v93 < 0xC || (v53 = v48 + 4 * (v51 + v44), (unint64_t)(v53 - (_QWORD)v49 + 512) < 0x20))
            {
              v54 = 0;
              goto LABEL_43;
            }
            v62 = v49 + 1;
            v63 = (_OWORD *)(v53 + 528);
            v64 = v90;
            do
            {
              v65 = *v62;
              *(v63 - 1) = *(v62 - 1);
              *v63 = v65;
              v62 += 2;
              v63 += 2;
              v64 -= 8;
            }
            while (v64);
            v54 = v90;
            if (v93 != v90)
            {
LABEL_43:
              v55 = v93 - v54;
              v56 = (_DWORD *)(v48 + 4 * (v54 + v51 + v52) + 512);
              v57 = (int *)v49 + v54;
              do
              {
                v58 = *v57++;
                *v56++ = v58;
                --v55;
              }
              while (v55);
            }
            v50 = v30;
            v107 = 0u;
            v108 = 0u;
            __dst = 0u;
            v106 = 0u;
            memcpy(&__dst, v49, __n);
            goto LABEL_46;
          }
          v50 = v30;
          v107 = 0u;
          v108 = 0u;
          __dst = 0u;
          v106 = 0u;
LABEL_46:
          v59 = *(_QWORD *)(a2 + 176) + 200 * (*((_DWORD *)v98 + v42) + v43);
          memmove((void *)v59, v36, 0x80uLL);
          *(_DWORD *)(v59 + 128) = 0;
          v60 = v106;
          *(_OWORD *)(v59 + 132) = __dst;
          *(_OWORD *)(v59 + 148) = v60;
          v61 = v108;
          *(_OWORD *)(v59 + 164) = v107;
          *(_OWORD *)(v59 + 180) = v61;
          *(_DWORD *)(v59 + 196) = 0;
          v101.i32[v42] = v43 + 1;
          v30 = v50;
          v3 = v95;
          if ((_DWORD)v43 == 31)
          {
            if (v30 > v97)
              sub_20E80C084();
            v101.i32[v42] = 0;
          }
          v28 = 0;
          v31 = v96 >> 5;
          v7 = v94;
          if (++v34 == v35)
          {
LABEL_19:
            v26 = v3[8];
            v29 = v88;
            break;
          }
        }
      }
    }
    v27 = ++v29;
  }
  while (v26 > v29);
  if (v30 > v97)
  {
    v12 = (void **)(a2 + 176);
    if ((vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v101), (int16x8_t)vceqzq_s32(v102)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v103), (int16x8_t)vceqzq_s32(v104))))) & 1) != 0)sub_20E80C058();
    goto LABEL_55;
  }
  v12 = (void **)(a2 + 176);
LABEL_60:
  for (i = 0; i != 16; ++i)
  {
    v70 = v101.i32[i];
    if (v70)
    {
      v71 = *v7;
      v72 = *(_DWORD *)((char *)v99 + i * 4) + 2 * v70;
      *(_DWORD *)(*v7 + 4 * v72) = -1;
      *(_DWORD *)(v71 + 4 * (v72 + 1)) = -1;
      memset(&v111[12], 0, 72);
      v73 = (uint64_t)*v12 + 200 * (*(_DWORD *)((char *)v98 + i * 4) + v70);
      v74 = v107;
      *(_OWORD *)(v73 + 68) = v108;
      *(_OWORD *)(v73 + 52) = v74;
      v75 = __dst;
      *(_OWORD *)(v73 + 36) = v106;
      *(_OWORD *)(v73 + 20) = v75;
      v76 = *(_OWORD *)v111;
      *(_OWORD *)(v73 + 132) = *(_OWORD *)&v111[16];
      *(_OWORD *)(v73 + 116) = v76;
      v77 = v109;
      *(_OWORD *)(v73 + 100) = v110;
      *(_OWORD *)(v73 + 84) = v77;
      *(_OWORD *)(v73 + 180) = *(_OWORD *)&v111[64];
      v78 = *(_OWORD *)&v111[32];
      *(_OWORD *)(v73 + 164) = *(_OWORD *)&v111[48];
      *(_DWORD *)(v73 + 16) = 0x3FFF;
      *(_DWORD *)(v73 + 196) = *(_DWORD *)&v111[80];
      *(_OWORD *)(v73 + 148) = v78;
    }
  }
LABEL_55:
  if (v30 < v97)
  {
    v66 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(v66 + 4 * v30 * v89) = -1;
    v67 = (v30 * v89) | 2;
    v68 = (*(_QWORD *)(a2 + 160) - v66) >> 2;
    if (v67 <= v68)
    {
      if (v67 < v68)
        *(_QWORD *)(a2 + 160) = v66 + 4 * v67;
    }
    else
    {
      sub_20E78F7D4((uint64_t)v7, v67 - v68);
    }
    memset(&v111[12], 0, 72);
    v79 = *(_QWORD *)(a2 + 176) + 6400 * v30;
    v80 = v107;
    *(_OWORD *)(v79 + 68) = v108;
    *(_OWORD *)(v79 + 52) = v80;
    v81 = __dst;
    *(_OWORD *)(v79 + 36) = v106;
    *(_OWORD *)(v79 + 20) = v81;
    v82 = *(_OWORD *)v111;
    *(_OWORD *)(v79 + 132) = *(_OWORD *)&v111[16];
    *(_OWORD *)(v79 + 116) = v82;
    v83 = v109;
    *(_OWORD *)(v79 + 100) = v110;
    *(_OWORD *)(v79 + 84) = v83;
    *(_OWORD *)(v79 + 180) = *(_OWORD *)&v111[64];
    v84 = *(_OWORD *)&v111[32];
    *(_OWORD *)(v79 + 164) = *(_OWORD *)&v111[48];
    *(_DWORD *)(v79 + 16) = 0x3FFF;
    *(_DWORD *)(v79 + 196) = *(_DWORD *)&v111[80];
    *(_OWORD *)(v79 + 148) = v84;
    v85 = (32 * v30) | 1;
    v86 = *(_QWORD *)(a2 + 176);
    v87 = 0x8F5C28F5C28F5C29 * ((*(_QWORD *)(a2 + 184) - v86) >> 3);
    if (v85 <= v87)
    {
      if (v85 < v87)
        *(_QWORD *)(a2 + 184) = v86 + 200 * v85;
    }
    else
    {
      sub_20E7D5C6C(v12, v85 - v87);
    }
  }
}

void sub_20E7D5060(_QWORD *a1)
{
  sub_20E7D5378(a1);
  JUMPOUT(0x212BC47D4);
}

void **sub_20E7D5084(void **a1)
{
  void *v2;
  void *v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;
  char *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  void *v15;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  void *v21;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  void *v30;
  char *v31;
  void *v32;
  void *v33;
  char *v34;
  char *v35;
  void *v36;
  char *v37;
  void *v38;
  void *v39;
  char *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  void *v45;
  char *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  void *v51;
  char *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  void *v57;

  v2 = a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  v3 = a1[27];
  if (v3)
  {
    a1[28] = v3;
    operator delete(v3);
  }
  v4 = (char *)a1[24];
  if (v4)
  {
    v5 = (char *)a1[25];
    v6 = a1[24];
    if (v5 != v4)
    {
      v7 = (char *)a1[25];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = a1[24];
    }
    a1[25] = v4;
    operator delete(v6);
  }
  v10 = (char *)a1[21];
  if (v10)
  {
    v11 = (char *)a1[22];
    v12 = a1[21];
    if (v11 != v10)
    {
      v13 = (char *)a1[22];
      do
      {
        v15 = (void *)*((_QWORD *)v13 - 3);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *((_QWORD *)v11 - 2) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = a1[21];
    }
    a1[22] = v10;
    operator delete(v12);
  }
  v16 = (char *)a1[18];
  if (v16)
  {
    v17 = (char *)a1[19];
    v18 = a1[18];
    if (v17 != v16)
    {
      v19 = (char *)a1[19];
      do
      {
        v21 = (void *)*((_QWORD *)v19 - 3);
        v19 -= 24;
        v20 = v21;
        if (v21)
        {
          *((_QWORD *)v17 - 2) = v20;
          operator delete(v20);
        }
        v17 = v19;
      }
      while (v19 != v16);
      v18 = a1[18];
    }
    a1[19] = v16;
    operator delete(v18);
  }
  v22 = (char *)a1[15];
  if (v22)
  {
    v23 = (char *)a1[16];
    v24 = a1[15];
    if (v23 != v22)
    {
      v25 = (char *)a1[16];
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        v25 -= 24;
        v26 = v27;
        if (v27)
        {
          *((_QWORD *)v23 - 2) = v26;
          operator delete(v26);
        }
        v23 = v25;
      }
      while (v25 != v22);
      v24 = a1[15];
    }
    a1[16] = v22;
    operator delete(v24);
  }
  v28 = (char *)a1[12];
  if (v28)
  {
    v29 = (char *)a1[13];
    v30 = a1[12];
    if (v29 != v28)
    {
      v31 = (char *)a1[13];
      do
      {
        v33 = (void *)*((_QWORD *)v31 - 3);
        v31 -= 24;
        v32 = v33;
        if (v33)
        {
          *((_QWORD *)v29 - 2) = v32;
          operator delete(v32);
        }
        v29 = v31;
      }
      while (v31 != v28);
      v30 = a1[12];
    }
    a1[13] = v28;
    operator delete(v30);
  }
  v34 = (char *)a1[9];
  if (v34)
  {
    v35 = (char *)a1[10];
    v36 = a1[9];
    if (v35 != v34)
    {
      v37 = (char *)a1[10];
      do
      {
        v39 = (void *)*((_QWORD *)v37 - 3);
        v37 -= 24;
        v38 = v39;
        if (v39)
        {
          *((_QWORD *)v35 - 2) = v38;
          operator delete(v38);
        }
        v35 = v37;
      }
      while (v37 != v34);
      v36 = a1[9];
    }
    a1[10] = v34;
    operator delete(v36);
  }
  v40 = (char *)a1[6];
  if (v40)
  {
    v41 = (char *)a1[7];
    v42 = a1[6];
    if (v41 != v40)
    {
      v43 = (char *)a1[7];
      do
      {
        v45 = (void *)*((_QWORD *)v43 - 3);
        v43 -= 24;
        v44 = v45;
        if (v45)
        {
          *((_QWORD *)v41 - 2) = v44;
          operator delete(v44);
        }
        v41 = v43;
      }
      while (v43 != v40);
      v42 = a1[6];
    }
    a1[7] = v40;
    operator delete(v42);
  }
  v46 = (char *)a1[3];
  if (v46)
  {
    v47 = (char *)a1[4];
    v48 = a1[3];
    if (v47 != v46)
    {
      v49 = (char *)a1[4];
      do
      {
        v51 = (void *)*((_QWORD *)v49 - 3);
        v49 -= 24;
        v50 = v51;
        if (v51)
        {
          *((_QWORD *)v47 - 2) = v50;
          operator delete(v50);
        }
        v47 = v49;
      }
      while (v49 != v46);
      v48 = a1[3];
    }
    a1[4] = v46;
    operator delete(v48);
  }
  v52 = (char *)*a1;
  if (*a1)
  {
    v53 = (char *)a1[1];
    v54 = *a1;
    if (v53 != v52)
    {
      v55 = (char *)a1[1];
      do
      {
        v57 = (void *)*((_QWORD *)v55 - 3);
        v55 -= 24;
        v56 = v57;
        if (v57)
        {
          *((_QWORD *)v53 - 2) = v56;
          operator delete(v56);
        }
        v53 = v55;
      }
      while (v55 != v52);
      v54 = *a1;
    }
    a1[1] = v52;
    operator delete(v54);
  }
  return a1;
}

uint64_t sub_20E7D5378(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;

  *a1 = &off_24C9A8DE8;
  v2 = a1[698];
  if (v2)
  {
    v3 = a1[699];
    v4 = (void *)a1[698];
    if (v3 != v2)
    {
      v5 = a1[699];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[698];
    }
    a1[699] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[695];
  if (v8)
  {
    a1[696] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[692];
  if (v9)
  {
    a1[693] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[689];
  if (v10)
  {
    a1[690] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[686];
  if (v11)
  {
    a1[687] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[683];
  if (v12)
  {
    a1[684] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[680];
  if (v13)
  {
    a1[681] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[677];
  if (v14)
  {
    a1[678] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[674];
  if (v15)
  {
    a1[675] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[671];
  if (v16)
  {
    a1[672] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[668];
  if (v17)
  {
    a1[669] = v17;
    operator delete(v17);
  }
  v18 = a1[665];
  if (v18)
  {
    v19 = a1[666];
    v20 = (void *)a1[665];
    if (v19 != v18)
    {
      v21 = a1[666];
      do
      {
        v23 = *(void **)(v21 - 24);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *(_QWORD *)(v19 - 16) = v22;
          operator delete(v22);
        }
        v19 = v21;
      }
      while (v21 != v18);
      v20 = (void *)a1[665];
    }
    a1[666] = v18;
    operator delete(v20);
  }
  return sub_20E7D269C((uint64_t)a1);
}

void sub_20E7D54E4(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 8)
  {
    if (a2)
    {
      v12 = a2 << 8;
      bzero(a1[1], a2 << 8);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 8;
    v8 = v7 + a2;
    if ((v7 + a2) >> 56)
      sub_20E78D874();
    v9 = v4 - v6;
    if (v9 >> 7 > v8)
      v8 = v9 >> 7;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF00)
      v10 = 0xFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (HIBYTE(v10))
        sub_20E78D888();
      v11 = (char *)operator new(v10 << 8);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[256 * v7];
    v14 = a2 << 8;
    v15 = &v11[256 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 16);
        v18 = *((_OWORD *)v5 - 15);
        v19 = *((_OWORD *)v5 - 13);
        *((_OWORD *)v13 - 14) = *((_OWORD *)v5 - 14);
        *((_OWORD *)v13 - 13) = v19;
        *((_OWORD *)v13 - 16) = v17;
        *((_OWORD *)v13 - 15) = v18;
        v20 = *((_OWORD *)v5 - 12);
        v21 = *((_OWORD *)v5 - 11);
        v22 = *((_OWORD *)v5 - 9);
        *((_OWORD *)v13 - 10) = *((_OWORD *)v5 - 10);
        *((_OWORD *)v13 - 9) = v22;
        *((_OWORD *)v13 - 12) = v20;
        *((_OWORD *)v13 - 11) = v21;
        v23 = *((_OWORD *)v5 - 8);
        v24 = *((_OWORD *)v5 - 7);
        v25 = *((_OWORD *)v5 - 5);
        *((_OWORD *)v13 - 6) = *((_OWORD *)v5 - 6);
        *((_OWORD *)v13 - 5) = v25;
        *((_OWORD *)v13 - 8) = v23;
        *((_OWORD *)v13 - 7) = v24;
        v26 = *((_OWORD *)v5 - 4);
        v27 = *((_OWORD *)v5 - 3);
        v28 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v28;
        *((_OWORD *)v13 - 4) = v26;
        *((_OWORD *)v13 - 3) = v27;
        v13 -= 256;
        v5 -= 256;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_20E7D5644(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x666666666666666)
      sub_20E78D874();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x333333333333333)
      v10 = 0x666666666666666;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x666666666666666)
        sub_20E78D888();
      v11 = (char *)operator new(40 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[40 * v7];
    v14 = &v11[40 * v10];
    v15 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 40);
        v18 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v18;
        *(_OWORD *)(v13 - 40) = v17;
        v13 -= 40;
        v5 -= 40;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_20E7D57E8(unint64_t *a1, unint64_t a2, const char *a3)
{
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  unint64_t v24;
  int8x8_t v25;
  int8x8_t *v26;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t *v29;
  unint64_t v30;
  int8x8_t v31;
  int8x8_t *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  __int128 *v36;
  char *v37;
  unint64_t v38;
  __int128 v39;
  char v40;

  v7 = a1[1];
  v6 = a1[2];
  v8 = (char *)v7;
  if (v6 - v7 >= a2)
  {
    if (!a2)
    {
LABEL_55:
      a1[1] = (unint64_t)v8;
      return;
    }
    v18 = (char *)(v7 + a2);
    if (a2 >= 8 && (v7 >= (unint64_t)(a3 + 1) || v18 <= a3))
    {
      if (a2 < 0x20)
      {
        v20 = 0;
        goto LABEL_36;
      }
      v20 = a2 & 0xFFFFFFFFFFFFFFE0;
      v28 = vld1q_dup_s8(a3);
      v29 = (int8x16_t *)(v7 + 16);
      v30 = a2 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29[-1] = v28;
        *v29 = v28;
        v29 += 2;
        v30 -= 32;
      }
      while (v30);
      if (v20 == a2)
        goto LABEL_54;
      if ((a2 & 0x18) != 0)
      {
LABEL_36:
        v8 = (char *)(v7 + (a2 & 0xFFFFFFFFFFFFFFF8));
        v31 = vld1_dup_s8(a3);
        v32 = (int8x8_t *)(v7 + v20);
        v33 = v20 - (a2 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *v32++ = v31;
          v33 += 8;
        }
        while (v33);
        if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2)
          goto LABEL_54;
        goto LABEL_53;
      }
      v8 = (char *)(v7 + v20);
    }
    do
LABEL_53:
      *v8++ = *a3;
    while (v8 != v18);
LABEL_54:
    v8 = (char *)(v7 + a2);
    goto LABEL_55;
  }
  v9 = (char *)*a1;
  v10 = v7 - *a1;
  v11 = v10 + a2;
  if ((uint64_t)(v10 + a2) < 0)
    sub_20E78D874();
  v12 = v6 - (_QWORD)v9;
  if (2 * v12 > v11)
    v11 = 2 * v12;
  if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    v14 = (char *)operator new(v13);
    v15 = (unint64_t)&v14[v10];
    v16 = &v14[v10 + a2];
    v17 = &v14[v10];
    if (a2 < 8)
      goto LABEL_41;
  }
  else
  {
    v14 = 0;
    v15 = v7 - *a1;
    v16 = (char *)(v10 + a2);
    v17 = (char *)v15;
    if (a2 < 8)
      goto LABEL_41;
  }
  if (v15 >= (unint64_t)(a3 + 1) || (v17 = (char *)v15, v16 <= a3))
  {
    if (a2 < 0x20)
    {
      v21 = 0;
      goto LABEL_28;
    }
    v21 = a2 & 0xFFFFFFFFFFFFFFE0;
    v22 = vld1q_dup_s8(a3);
    v23 = (int8x16_t *)&v14[v10 + 16];
    v24 = a2 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v23[-1] = v22;
      *v23 = v22;
      v23 += 2;
      v24 -= 32;
    }
    while (v24);
    if (v21 == a2)
      goto LABEL_42;
    if ((a2 & 0x18) != 0)
    {
LABEL_28:
      v17 = (char *)(v15 + (a2 & 0xFFFFFFFFFFFFFFF8));
      v25 = vld1_dup_s8(a3);
      v26 = (int8x8_t *)&v14[v21 + v7 - (_QWORD)v9];
      v27 = v21 - (a2 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *v26++ = v25;
        v27 += 8;
      }
      while (v27);
      if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2)
        goto LABEL_42;
      goto LABEL_41;
    }
    v17 = (char *)(v15 + v21);
  }
  do
LABEL_41:
    *v17++ = *a3;
  while (v17 != v16);
LABEL_42:
  v34 = (char *)*a1;
  v35 = v7 - *a1;
  if (v7 != *a1)
  {
    if (v35 < 0x20)
      goto LABEL_60;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_60;
    v8 = (char *)(v7 - (v35 & 0xFFFFFFFFFFFFFFE0));
    v15 -= v35 & 0xFFFFFFFFFFFFFFE0;
    v36 = (__int128 *)(v7 - 16);
    v37 = &v14[v7 - 16 - (_QWORD)v9];
    v38 = v35 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v39 = *v36;
      *((_OWORD *)v37 - 1) = *(v36 - 1);
      *(_OWORD *)v37 = v39;
      v37 -= 32;
      v36 -= 2;
      v38 -= 32;
    }
    while (v38);
    if (v35 != (v35 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_60:
      do
      {
        v40 = *--v8;
        *(_BYTE *)--v15 = v40;
      }
      while (v8 != v34);
    }
    v8 = (char *)*a1;
  }
  *a1 = v15;
  a1[1] = (unint64_t)v16;
  a1[2] = (unint64_t)&v14[v13];
  if (v8)
    operator delete(v8);
}

void sub_20E7D5A9C()
{
  sub_20E7D5AB0("vector");
}

void sub_20E7D5AB0(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_20E7D5B00(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C9A8140, MEMORY[0x24BEDAB00]);
}

void sub_20E7D5AEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_20E7D5B00(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

_QWORD *sub_20E7D5B24(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 8)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (HIBYTE(__sz))
      goto LABEL_22;
    v10 = v8 >> 7;
    if (v8 >> 7 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFF00;
    v12 = 0xFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (HIBYTE(v12))
LABEL_22:
      sub_20E78D874();
    v13 = v12 << 8;
    result = operator new(v12 << 8);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memmove(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 8;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[256 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v17 << 8);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20E7D5C6C(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0x8F5C28F5C28F5C29 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[200 * a2];
      v12 = 200 * a2;
      v13 = v5 + 128;
      do
      {
        *((_QWORD *)v13 + 8) = 0;
        *((_OWORD *)v13 + 2) = 0uLL;
        *((_OWORD *)v13 + 3) = 0uLL;
        *(_OWORD *)v13 = 0uLL;
        *((_OWORD *)v13 + 1) = 0uLL;
        *((_DWORD *)v13 - 28) = 0x3FFF;
        v13 += 200;
        v12 -= 200;
      }
      while (v12);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v5;
    }
  }
  else
  {
    v6 = 0x8F5C28F5C28F5C29 * ((v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x147AE147AE147AELL)
      sub_20E78D874();
    v8 = 0x8F5C28F5C28F5C29 * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xA3D70A3D70A3D7)
      v9 = 0x147AE147AE147AELL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x147AE147AE147AELL)
        sub_20E78D888();
      v10 = (char *)operator new(200 * v9);
    }
    else
    {
      v10 = 0;
    }
    v14 = &v10[200 * v6];
    v15 = 200 * a2;
    v16 = &v14[200 * a2];
    v17 = v14 + 128;
    do
    {
      *((_QWORD *)v17 + 8) = 0;
      *((_OWORD *)v17 + 2) = 0uLL;
      *((_OWORD *)v17 + 3) = 0uLL;
      *(_OWORD *)v17 = 0uLL;
      *((_OWORD *)v17 + 1) = 0uLL;
      *((_DWORD *)v17 - 28) = 0x3FFF;
      v17 += 200;
      v15 -= 200;
    }
    while (v15);
    v18 = &v10[200 * v9];
    v20 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *(_OWORD *)(v14 - 200) = *(_OWORD *)(v19 - 200);
        v21 = *(_OWORD *)(v19 - 184);
        v22 = *(_OWORD *)(v19 - 168);
        v23 = *(_OWORD *)(v19 - 152);
        *(_OWORD *)(v14 - 136) = *(_OWORD *)(v19 - 136);
        *(_OWORD *)(v14 - 152) = v23;
        *(_OWORD *)(v14 - 168) = v22;
        *(_OWORD *)(v14 - 184) = v21;
        v24 = *(_OWORD *)(v19 - 120);
        v25 = *(_OWORD *)(v19 - 104);
        v26 = *(_OWORD *)(v19 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v19 - 72);
        *(_OWORD *)(v14 - 88) = v26;
        *(_OWORD *)(v14 - 104) = v25;
        *(_OWORD *)(v14 - 120) = v24;
        v27 = *(_OWORD *)(v19 - 56);
        v28 = *(_OWORD *)(v19 - 40);
        v29 = *(_OWORD *)(v19 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v19 - 1);
        *(_OWORD *)(v14 - 24) = v29;
        *(_OWORD *)(v14 - 40) = v28;
        *(_OWORD *)(v14 - 56) = v27;
        v14 -= 200;
        v19 -= 200;
      }
      while (v19 != v20);
      v19 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
}

void sub_20E7D5E84(void *__p)
{
  operator delete(__p);
}

uint64_t sub_20E7D5E90(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_20E7D5EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5, char *__s)
{
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  size_t v17;
  std::string::size_type v18;
  std::string *p_dst;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  void *v29;
  char v30;
  char *p_p;
  uint64_t v32;
  uint64_t v33;
  FILE *v34;
  FILE *v35;
  uint64_t v36;
  unsigned __int16 **v37;
  unsigned __int16 **v38;
  int v39;
  size_t v40;
  std::string::size_type v41;
  std::string *v42;
  uint64_t v43;
  uint64_t v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  void *v52;
  char v53;
  char *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  FILE *v57;
  FILE *v58;
  uint64_t *v59;
  std::string v60;
  std::string __dst;
  std::string __ptr;
  std::string v63;
  unint64_t v64;
  void *__p;
  __int128 v66;
  _QWORD v67[5];

  v67[2] = *MEMORY[0x24BDAC8D0];
  result = sub_20E7D66E0(*(_QWORD **)(a1 + 48), __s);
  if (!(_DWORD)result)
    return result;
  result = sub_20E7D6B48(*(_QWORD **)(a1 + 56), __s);
  if (!(_DWORD)result)
    return result;
  result = sub_20E7D6FB0(*(_QWORD *)(a1 + 64), __s);
  if (!(_DWORD)result)
    return result;
  result = sub_20E7D73E0(*(_QWORD **)(a2 + 248), __s);
  if (!(_DWORD)result)
    return result;
  v13 = *(_QWORD *)(a2 + 256);
  v15 = *(uint64_t **)(v13 + 200);
  v14 = *(uint64_t **)(v13 + 208);
  __p = 0;
  v66 = 0uLL;
  v16 = 1;
  v64 = 1;
  v59 = v14;
  if (v15 == v14)
  {
LABEL_44:
    if (SHIBYTE(v66) < 0)
      goto LABEL_45;
    goto LABEL_46;
  }
  do
  {
    v17 = strlen(__s);
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      sub_20E7857BC();
    v18 = v17;
    if (v17 >= 0x17)
    {
      v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v20 = v17 | 7;
      v21 = v20 + 1;
      p_dst = (std::string *)operator new(v20 + 1);
      __dst.__r_.__value_.__l.__size_ = v18;
      __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_13:
      memcpy(p_dst, __s, v18);
      goto LABEL_14;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v17;
    p_dst = &__dst;
    if (v17)
      goto LABEL_13;
LABEL_14:
    p_dst->__r_.__value_.__s.__data_[v18] = 0;
    v22 = std::string::append(&__dst, "/DesGenKPC");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v64, &v60);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v60;
    else
      v24 = (std::string *)v60.__r_.__value_.__r.__words[0];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    else
      size = v60.__r_.__value_.__l.__size_;
    v26 = std::string::append(&__ptr, (const std::string::value_type *)v24, size);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v63, "Out.rslt");
    v29 = (void *)v28->__r_.__value_.__r.__words[0];
    v67[0] = v28->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v67 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
    v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v66) < 0)
      operator delete(__p);
    __p = v29;
    *(_QWORD *)&v66 = v67[0];
    *(_QWORD *)((char *)&v66 + 7) = *(_QWORD *)((char *)v67 + 7);
    HIBYTE(v66) = v30;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v63.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_24:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_39;
        goto LABEL_25;
      }
    }
    else if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_39:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_40;
    }
LABEL_25:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_40:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_26:
    v63.__r_.__value_.__r.__words[0] = 0;
    if (v66 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (sub_20E7FB618((FILE **)&v63, p_p, "wb"))
      goto LABEL_41;
    v32 = *v15;
    v33 = v15[1];
    if (*v15 != v33)
    {
      while (1)
      {
        __ptr.__r_.__value_.__r.__words[0] = 0;
        __ptr.__r_.__value_.__r.__words[0] = *(_DWORD *)v32 & 0x3FF | ((*(_DWORD *)(v32 + 4) & 0x1FFF) << 10) & 0xF87FFFFF | ((*(_DWORD *)(v32 + 8) & 0xF) << 23) | ((unint64_t)*(unsigned __int8 *)(v32 + 12) << 43) | ((unint64_t)*(unsigned __int16 *)(v32 + 16) << 27);
        if (fwrite(&__ptr, 8uLL, 1uLL, (FILE *)v63.__r_.__value_.__l.__data_) != 1)
          break;
        v32 += 20;
        if (v32 == v33)
          goto LABEL_33;
      }
LABEL_41:
      v35 = (FILE *)v63.__r_.__value_.__r.__words[0];
      v63.__r_.__value_.__r.__words[0] = 0;
      if (v35)
        fclose(v35);
      v16 = 0;
      goto LABEL_44;
    }
LABEL_33:
    ++v64;
    v34 = (FILE *)v63.__r_.__value_.__r.__words[0];
    v63.__r_.__value_.__r.__words[0] = 0;
    if (v34)
      fclose(v34);
    v15 += 3;
  }
  while (v15 != v59);
  v16 = 1;
  if ((SHIBYTE(v66) & 0x80000000) == 0)
    goto LABEL_46;
LABEL_45:
  operator delete(__p);
LABEL_46:
  if (!v16)
    return 0;
  v36 = *(_QWORD *)(a3 + 8);
  v38 = *(unsigned __int16 ***)(v36 + 200);
  v37 = *(unsigned __int16 ***)(v36 + 208);
  __p = 0;
  v66 = 0uLL;
  v39 = 1;
  v64 = 1;
  if (v38 == v37)
  {
LABEL_86:
    if (SHIBYTE(v66) < 0)
      goto LABEL_87;
    goto LABEL_88;
  }
  while (2)
  {
    v40 = strlen(__s);
    if (v40 > 0x7FFFFFFFFFFFFFF7)
      sub_20E7857BC();
    v41 = v40;
    if (v40 >= 0x17)
    {
      v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v43 = v40 | 7;
      v44 = v43 + 1;
      v42 = (std::string *)operator new(v43 + 1);
      __dst.__r_.__value_.__l.__size_ = v41;
      __dst.__r_.__value_.__r.__words[2] = v44 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      goto LABEL_55;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v40;
    v42 = &__dst;
    if (v40)
LABEL_55:
      memcpy(v42, __s, v41);
    v42->__r_.__value_.__s.__data_[v41] = 0;
    v45 = std::string::append(&__dst, "/DesGenKP0Mem");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v64, &v60);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v60;
    else
      v47 = (std::string *)v60.__r_.__value_.__r.__words[0];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    else
      v48 = v60.__r_.__value_.__l.__size_;
    v49 = std::string::append(&__ptr, (const std::string::value_type *)v47, v48);
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = std::string::append(&v63, "Out.rslt");
    v52 = (void *)v51->__r_.__value_.__r.__words[0];
    v67[0] = v51->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v67 + 7) = *(std::string::size_type *)((char *)&v51->__r_.__value_.__r.__words[1] + 7);
    v53 = HIBYTE(v51->__r_.__value_.__r.__words[2]);
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v66) < 0)
      operator delete(__p);
    __p = v52;
    *(_QWORD *)&v66 = v67[0];
    *(_QWORD *)((char *)&v66 + 7) = *(_QWORD *)((char *)v67 + 7);
    HIBYTE(v66) = v53;
    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_66;
LABEL_80:
      operator delete(v60.__r_.__value_.__l.__data_);
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_81;
LABEL_67:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_68;
LABEL_82:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_68;
    }
    operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_80;
LABEL_66:
    if ((SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_67;
LABEL_81:
    operator delete(__ptr.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_82;
LABEL_68:
    v63.__r_.__value_.__r.__words[0] = 0;
    if (v66 >= 0)
      v54 = (char *)&__p;
    else
      v54 = (char *)__p;
    if (sub_20E7FB618((FILE **)&v63, v54, "wb"))
      goto LABEL_83;
    v55 = *v38;
    v56 = v38[1];
    if (*v38 != v56)
    {
      while (1)
      {
        __ptr.__r_.__value_.__r.__words[0] = 0;
        __ptr.__r_.__value_.__r.__words[0] = *v55 | (*((_DWORD *)v55 + 1) << 16) | ((unint64_t)*((unsigned __int8 *)v55 + 12) << 32) | ((unint64_t)*((unsigned __int8 *)v55 + 8) << 40) | ((unint64_t)(*((_DWORD *)v55 + 7) & 0x7FFF) << 48) | ((unint64_t)*((unsigned __int8 *)v55 + 24) << 63);
        if (fwrite(&__ptr, 1uLL, 8uLL, (FILE *)v63.__r_.__value_.__l.__data_) != 8)
          break;
        v55 += 64;
        if (v55 == v56)
          goto LABEL_75;
      }
LABEL_83:
      v58 = (FILE *)v63.__r_.__value_.__r.__words[0];
      v63.__r_.__value_.__r.__words[0] = 0;
      if (v58)
        fclose(v58);
      v39 = 0;
      goto LABEL_86;
    }
LABEL_75:
    ++v64;
    v57 = (FILE *)v63.__r_.__value_.__r.__words[0];
    v63.__r_.__value_.__r.__words[0] = 0;
    if (v57)
      fclose(v57);
    v38 += 3;
    if (v38 != v37)
      continue;
    break;
  }
  v39 = 1;
  if ((SHIBYTE(v66) & 0x80000000) == 0)
    goto LABEL_88;
LABEL_87:
  operator delete(__p);
LABEL_88:
  if (!v39)
    return 0;
  result = sub_20E7D7848(*(double ***)(a4 + 272), *(double ***)(a4 + 280), (double ***)(a4 + 296), __s);
  if ((_DWORD)result)
  {
    result = sub_20E7D86A0((_QWORD *)(a4 + 368), *(uint64_t **)(a4 + 320), *(uint64_t **)(a4 + 328), (uint64_t **)(a4 + 344), __s);
    if ((_DWORD)result)
    {
      result = sub_20E7D9070(*(char ***)(a4 + 224), *(char ***)(a4 + 232), (char ***)(a4 + 248), __s);
      if ((_DWORD)result)
      {
        result = sub_20E7D9770(*(unsigned __int16 ***)(a4 + 368), *(unsigned __int16 ***)(a4 + 376), __s);
        if ((_DWORD)result)
        {
          result = sub_20E7D9B88(*(char ***)(a4 + 392), *(char ***)(a4 + 400), __s);
          if ((_DWORD)result)
          {
            result = sub_20E7D9F54(*(char ***)(a4 + 416), *(char ***)(a4 + 424), __s);
            if ((_DWORD)result)
              return sub_20E7DA320(a5, 0x8E38E38E38E38E39* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) - *(_QWORD *)(*(_QWORD *)(a1 + 48) + 48)) >> 4), __s);
          }
        }
      }
    }
  }
  return result;
}

void sub_20E7D65BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,FILE *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7D66E0(_QWORD *a1, char *__s)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *p_p;
  char v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  FILE *v39;
  uint64_t v40;
  std::string v42;
  std::string __dst;
  std::string __ptr;
  std::string v45;
  unint64_t v46;
  void *__p;
  __int128 v48;
  _QWORD v49[5];

  v49[2] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v48 = 0uLL;
  v2 = a1[2];
  if (!v2 || (v4 = a1[3]) == 0)
  {
LABEL_51:
    v40 = 1;
    if (SHIBYTE(v48) < 0)
      goto LABEL_52;
    return v40;
  }
  v6 = 0;
  while (!v4)
  {
LABEL_4:
    if (++v6 >= v2)
      goto LABEL_51;
  }
  v7 = 0;
  while (1)
  {
    v46 = v7 + v4 * v6;
    v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E7857BC();
    v9 = v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      p_dst = (std::string *)operator new(v11 + 1);
      __dst.__r_.__value_.__l.__size_ = v9;
      __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_14:
      memcpy(p_dst, __s, v9);
      goto LABEL_15;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (v8)
      goto LABEL_14;
LABEL_15:
    p_dst->__r_.__value_.__s.__data_[v9] = 0;
    v13 = std::string::append(&__dst, "/DesGenGP");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v46, &v42);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v42;
    else
      v15 = (std::string *)v42.__r_.__value_.__r.__words[0];
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    else
      size = v42.__r_.__value_.__l.__size_;
    v17 = std::string::append(&__ptr, (const std::string::value_type *)v15, size);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v45, "Out.rslt");
    v20 = (void *)v19->__r_.__value_.__r.__words[0];
    v49[0] = v19->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v48) < 0)
      operator delete(__p);
    __p = v20;
    *(_QWORD *)&v48 = v49[0];
    *(_QWORD *)((char *)&v48 + 7) = *(_QWORD *)((char *)v49 + 7);
    HIBYTE(v48) = v21;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_34;
        goto LABEL_26;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_34:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_35;
    }
LABEL_26:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
LABEL_35:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_27:
    v22 = a1[3];
    v23 = a1[6];
    v45.__r_.__value_.__r.__words[0] = 0;
    if (v48 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (sub_20E7FB618((FILE **)&v45, p_p, "wb"))
      goto LABEL_31;
    v26 = v7 + v22 * v6;
    v27 = v23 + 144 * v26;
    v30 = *(_QWORD *)(v27 + 48);
    v29 = (unint64_t *)(v27 + 48);
    v28 = v30;
    if (v30)
    {
      v31 = v23 + 144 * v26;
      v33 = *(_QWORD *)(v31 + 32);
      v32 = (uint64_t *)(v31 + 32);
      if (v33)
      {
        v34 = 0;
        v35 = v32 + 1;
        v36 = *(_QWORD *)(v23 + 144 * v26 + 72);
        v37 = 1;
        while (!v37)
        {
LABEL_39:
          ++v34;
          v36 += *v35;
          v25 = 1;
          if (v34 >= v28)
            goto LABEL_46;
        }
        v38 = 0;
        while (1)
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
          LODWORD(__ptr.__r_.__value_.__l.__data_) = *(unsigned __int8 *)(v36 + v38);
          if (fwrite(&__ptr, 4uLL, 1uLL, (FILE *)v45.__r_.__value_.__l.__data_) != 1)
            break;
          ++v38;
          v37 = *v32;
          if (v38 >= *v32)
          {
            v28 = *v29;
            v35 = v32 + 1;
            goto LABEL_39;
          }
        }
LABEL_31:
        v25 = 0;
        goto LABEL_46;
      }
    }
    v25 = 1;
LABEL_46:
    v39 = (FILE *)v45.__r_.__value_.__r.__words[0];
    v45.__r_.__value_.__r.__words[0] = 0;
    if (v39)
      fclose(v39);
    if ((v25 & 1) == 0)
      break;
    ++v7;
    v4 = a1[3];
    if (v7 >= v4)
    {
      v2 = a1[2];
      goto LABEL_4;
    }
  }
  v40 = 0;
  if (SHIBYTE(v48) < 0)
LABEL_52:
    operator delete(__p);
  return v40;
}

void sub_20E7D6A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,FILE *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7D6B48(_QWORD *a1, char *__s)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *p_p;
  char v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  FILE *v39;
  uint64_t v40;
  std::string v42;
  std::string __dst;
  std::string __ptr;
  std::string v45;
  unint64_t v46;
  void *__p;
  __int128 v48;
  _QWORD v49[5];

  v49[2] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v48 = 0uLL;
  v2 = a1[2];
  if (!v2 || (v4 = a1[3]) == 0)
  {
LABEL_51:
    v40 = 1;
    if (SHIBYTE(v48) < 0)
      goto LABEL_52;
    return v40;
  }
  v6 = 0;
  while (!v4)
  {
LABEL_4:
    if (++v6 >= v2)
      goto LABEL_51;
  }
  v7 = 0;
  while (1)
  {
    v46 = v7 + v4 * v6;
    v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E7857BC();
    v9 = v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      p_dst = (std::string *)operator new(v11 + 1);
      __dst.__r_.__value_.__l.__size_ = v9;
      __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_14:
      memcpy(p_dst, __s, v9);
      goto LABEL_15;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (v8)
      goto LABEL_14;
LABEL_15:
    p_dst->__r_.__value_.__s.__data_[v9] = 0;
    v13 = std::string::append(&__dst, "/DesGenBlur");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v46, &v42);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v42;
    else
      v15 = (std::string *)v42.__r_.__value_.__r.__words[0];
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    else
      size = v42.__r_.__value_.__l.__size_;
    v17 = std::string::append(&__ptr, (const std::string::value_type *)v15, size);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v45, "Out.rslt");
    v20 = (void *)v19->__r_.__value_.__r.__words[0];
    v49[0] = v19->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v48) < 0)
      operator delete(__p);
    __p = v20;
    *(_QWORD *)&v48 = v49[0];
    *(_QWORD *)((char *)&v48 + 7) = *(_QWORD *)((char *)v49 + 7);
    HIBYTE(v48) = v21;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_34;
        goto LABEL_26;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_34:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_35;
    }
LABEL_26:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
LABEL_35:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_27:
    v22 = a1[3];
    v23 = a1[6];
    v45.__r_.__value_.__r.__words[0] = 0;
    if (v48 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (sub_20E7FB618((FILE **)&v45, p_p, "wb"))
      goto LABEL_31;
    v26 = v7 + v22 * v6;
    v27 = v23 + 144 * v26;
    v30 = *(_QWORD *)(v27 + 48);
    v29 = (unint64_t *)(v27 + 48);
    v28 = v30;
    if (v30)
    {
      v31 = v23 + 144 * v26;
      v33 = *(_QWORD *)(v31 + 32);
      v32 = (uint64_t *)(v31 + 32);
      if (v33)
      {
        v34 = 0;
        v35 = v32 + 1;
        v36 = *(_QWORD *)(v23 + 144 * v26 + 72);
        v37 = 1;
        while (!v37)
        {
LABEL_39:
          ++v34;
          v36 += 2 * *v35;
          v25 = 1;
          if (v34 >= v28)
            goto LABEL_46;
        }
        v38 = 0;
        while (1)
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
          LODWORD(__ptr.__r_.__value_.__l.__data_) = *(unsigned __int16 *)(v36 + 2 * v38);
          if (fwrite(&__ptr, 4uLL, 1uLL, (FILE *)v45.__r_.__value_.__l.__data_) != 1)
            break;
          ++v38;
          v37 = *v32;
          if (v38 >= *v32)
          {
            v28 = *v29;
            v35 = v32 + 1;
            goto LABEL_39;
          }
        }
LABEL_31:
        v25 = 0;
        goto LABEL_46;
      }
    }
    v25 = 1;
LABEL_46:
    v39 = (FILE *)v45.__r_.__value_.__r.__words[0];
    v45.__r_.__value_.__r.__words[0] = 0;
    if (v39)
      fclose(v39);
    if ((v25 & 1) == 0)
      break;
    ++v7;
    v4 = a1[3];
    if (v7 >= v4)
    {
      v2 = a1[2];
      goto LABEL_4;
    }
  }
  v40 = 0;
  if (SHIBYTE(v48) < 0)
LABEL_52:
    operator delete(__p);
  return v40;
}

void sub_20E7D6EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,FILE *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7D6FB0(uint64_t a1, char *__s)
{
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  void *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  char *p_p;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  FILE *v32;
  FILE *v33;
  uint64_t v34;
  std::string v36;
  std::string __dst;
  std::string __ptr;
  std::string v39;
  unint64_t v40;
  void *__p;
  __int128 v42;
  _QWORD v43[5];

  v43[2] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v42 = 0uLL;
  v40 = 0;
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_48:
    v34 = 1;
    if (SHIBYTE(v42) < 0)
      goto LABEL_46;
    return v34;
  }
  while (1)
  {
    v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E7857BC();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v7 = v4 | 7;
      v8 = v7 + 1;
      p_dst = (std::string *)operator new(v7 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_9:
      memcpy(p_dst, __s, v5);
      goto LABEL_10;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
    p_dst = &__dst;
    if (v4)
      goto LABEL_9;
LABEL_10:
    p_dst->__r_.__value_.__s.__data_[v5] = 0;
    v9 = std::string::append(&__dst, "/DesGen3x3");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v40, &v36);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v36;
    else
      v11 = (std::string *)v36.__r_.__value_.__r.__words[0];
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    else
      size = v36.__r_.__value_.__l.__size_;
    v13 = std::string::append(&__ptr, (const std::string::value_type *)v11, size);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v39, "Out.rslt");
    v16 = (void *)v15->__r_.__value_.__r.__words[0];
    v43[0] = v15->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v43 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
    v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v42) < 0)
      operator delete(__p);
    __p = v16;
    *(_QWORD *)&v42 = v43[0];
    *(_QWORD *)((char *)&v42 + 7) = *(_QWORD *)((char *)v43 + 7);
    HIBYTE(v42) = v17;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_20:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_41;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_41:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_42;
    }
LABEL_21:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_22;
LABEL_42:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_22:
    v18 = v40;
    v19 = *(_QWORD *)(a1 + 48);
    v39.__r_.__value_.__r.__words[0] = 0;
    if (v42 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (sub_20E7FB618((FILE **)&v39, p_p, "wb"))
      goto LABEL_43;
    v21 = v19 + 144 * v18;
    v24 = *(_QWORD *)(v21 + 48);
    v23 = (unint64_t *)(v21 + 48);
    v22 = v24;
    if (v24)
    {
      v25 = v19 + 144 * v18;
      v27 = *(_QWORD *)(v25 + 32);
      v26 = (uint64_t *)(v25 + 32);
      if (v27)
        break;
    }
LABEL_35:
    v32 = (FILE *)v39.__r_.__value_.__r.__words[0];
    v39.__r_.__value_.__r.__words[0] = 0;
    if (v32)
      fclose(v32);
    if (++v40 >= *(_QWORD *)(a1 + 16))
      goto LABEL_48;
  }
  v28 = 0;
  v29 = *(_QWORD *)(v19 + 144 * v18 + 72);
  v30 = 1;
  while (!v30)
  {
LABEL_29:
    ++v28;
    v29 += v26[1];
    if (v28 >= v22)
      goto LABEL_35;
  }
  v31 = 0;
  while (1)
  {
    LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
    LODWORD(__ptr.__r_.__value_.__l.__data_) = *(unsigned __int8 *)(v29 + v31);
    if (fwrite(&__ptr, 4uLL, 1uLL, (FILE *)v39.__r_.__value_.__l.__data_) != 1)
      break;
    ++v31;
    v30 = *v26;
    if (v31 >= *v26)
    {
      v22 = *v23;
      goto LABEL_29;
    }
  }
LABEL_43:
  v33 = (FILE *)v39.__r_.__value_.__r.__words[0];
  v39.__r_.__value_.__r.__words[0] = 0;
  if (v33)
    fclose(v33);
  v34 = 0;
  if (SHIBYTE(v42) < 0)
LABEL_46:
    operator delete(__p);
  return v34;
}

void sub_20E7D7310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,FILE *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7D73E0(_QWORD *a1, char *__s)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *p_p;
  char v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  FILE *v39;
  uint64_t v40;
  std::string v42;
  std::string __dst;
  std::string __ptr;
  std::string v45;
  unint64_t v46;
  void *__p;
  __int128 v48;
  _QWORD v49[5];

  v49[2] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v48 = 0uLL;
  v2 = a1[2];
  if (!v2 || (v4 = a1[3]) == 0)
  {
LABEL_51:
    v40 = 1;
    if (SHIBYTE(v48) < 0)
      goto LABEL_52;
    return v40;
  }
  v6 = 0;
  while (!v4)
  {
LABEL_4:
    if (++v6 >= v2)
      goto LABEL_51;
  }
  v7 = 0;
  while (1)
  {
    v46 = v7 + v4 * v6;
    v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E7857BC();
    v9 = v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      p_dst = (std::string *)operator new(v11 + 1);
      __dst.__r_.__value_.__l.__size_ = v9;
      __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_14:
      memcpy(p_dst, __s, v9);
      goto LABEL_15;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (v8)
      goto LABEL_14;
LABEL_15:
    p_dst->__r_.__value_.__s.__data_[v9] = 0;
    v13 = std::string::append(&__dst, "/DesGenRM");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v46, &v42);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v42;
    else
      v15 = (std::string *)v42.__r_.__value_.__r.__words[0];
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    else
      size = v42.__r_.__value_.__l.__size_;
    v17 = std::string::append(&__ptr, (const std::string::value_type *)v15, size);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v45, "Out.rslt");
    v20 = (void *)v19->__r_.__value_.__r.__words[0];
    v49[0] = v19->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v48) < 0)
      operator delete(__p);
    __p = v20;
    *(_QWORD *)&v48 = v49[0];
    *(_QWORD *)((char *)&v48 + 7) = *(_QWORD *)((char *)v49 + 7);
    HIBYTE(v48) = v21;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_34;
        goto LABEL_26;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_34:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_35;
    }
LABEL_26:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
LABEL_35:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_27:
    v22 = a1[3];
    v23 = a1[6];
    v45.__r_.__value_.__r.__words[0] = 0;
    if (v48 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (sub_20E7FB618((FILE **)&v45, p_p, "wb"))
      goto LABEL_31;
    v26 = v7 + v22 * v6;
    v27 = v23 + 144 * v26;
    v30 = *(_QWORD *)(v27 + 48);
    v29 = (unint64_t *)(v27 + 48);
    v28 = v30;
    if (v30)
    {
      v31 = v23 + 144 * v26;
      v33 = *(_QWORD *)(v31 + 32);
      v32 = (uint64_t *)(v31 + 32);
      if (v33)
      {
        v34 = 0;
        v35 = v32 + 1;
        v36 = *(_QWORD *)(v23 + 144 * v26 + 72);
        v37 = 1;
        while (!v37)
        {
LABEL_39:
          ++v34;
          v36 += 2 * *v35;
          v25 = 1;
          if (v34 >= v28)
            goto LABEL_46;
        }
        v38 = 0;
        while (1)
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
          LODWORD(__ptr.__r_.__value_.__l.__data_) = *(__int16 *)(v36 + 2 * v38);
          if (fwrite(&__ptr, 4uLL, 1uLL, (FILE *)v45.__r_.__value_.__l.__data_) != 1)
            break;
          ++v38;
          v37 = *v32;
          if (v38 >= *v32)
          {
            v28 = *v29;
            v35 = v32 + 1;
            goto LABEL_39;
          }
        }
LABEL_31:
        v25 = 0;
        goto LABEL_46;
      }
    }
    v25 = 1;
LABEL_46:
    v39 = (FILE *)v45.__r_.__value_.__r.__words[0];
    v45.__r_.__value_.__r.__words[0] = 0;
    if (v39)
      fclose(v39);
    if ((v25 & 1) == 0)
      break;
    ++v7;
    v4 = a1[3];
    if (v7 >= v4)
    {
      v2 = a1[2];
      goto LABEL_4;
    }
  }
  v40 = 0;
  if (SHIBYTE(v48) < 0)
LABEL_52:
    operator delete(__p);
  return v40;
}

void sub_20E7D7774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,FILE *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20E7D7848(double **a1, double **a2, double ***a3, char *__s)
{
  double **v6;
  const std::string::value_type *v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  const std::string::value_type *v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  void *v21;
  char v22;
  char *v23;
  double *v24;
  double *v25;
  _BOOL8 v26;
  double **v27;
  double **v28;
  const std::string::value_type *v29;
  size_t v30;
  std::string::size_type v31;
  std::string *v32;
  const std::string::value_type *v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  void *v43;
  char v44;
  char *v45;
  int v46;
  double *v47;
  double *v48;
  FILE *v49;
  FILE *v50;
  std::string __p;
  std::string __dst;
  std::string v55;
  std::string __ptr;
  FILE *v57;
  FILE *__stream;
  unint64_t v59;
  void *v60;
  __int128 v61;
  void *v62;
  __int128 v63;
  _QWORD v64[5];

  v64[2] = *MEMORY[0x24BDAC8D0];
  v62 = 0;
  v63 = 0uLL;
  v60 = 0;
  v61 = 0uLL;
  __stream = 0;
  v59 = 1;
  v57 = 0;
  if (a1 != a2)
  {
    v6 = a1;
    v7 = "/DesGenCoordXFirst";
    while (1)
    {
      v8 = strlen(__s);
      if (v8 > 0x7FFFFFFFFFFFFFF7)
        sub_20E7857BC();
      v9 = v8;
      if (v8 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
      p_dst = &__dst;
      if (v8)
        goto LABEL_11;
LABEL_12:
      p_dst->__r_.__value_.__s.__data_[v9] = 0;
      v14 = std::string::append(&__dst, v7);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      sub_20E7DB1A0(&v59, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v18 = std::string::append(&v55, (const std::string::value_type *)p_p, size);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      __ptr.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append(&__ptr, "Out.rslt");
      v21 = (void *)v20->__r_.__value_.__r.__words[0];
      v64[0] = v20->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v63) < 0)
        operator delete(v62);
      v62 = v21;
      *(_QWORD *)&v63 = v64[0];
      *(_QWORD *)((char *)&v63 + 7) = *(_QWORD *)((char *)v64 + 7);
      HIBYTE(v63) = v22;
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__ptr.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_22:
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_33;
          goto LABEL_23;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_22;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_33:
        operator delete(v55.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_24;
        goto LABEL_34;
      }
LABEL_23:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
LABEL_34:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
      if (v63 >= 0)
        v23 = (char *)&v62;
      else
        v23 = (char *)v62;
      if (sub_20E7FB618(&__stream, v23, "wb"))
      {
        v26 = 0;
        goto LABEL_70;
      }
      v24 = *v6;
      v25 = v6[1];
      if (*v6 != v25)
      {
        do
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*v24, 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[1], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[2], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[3], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[4], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[5], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[6], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[7], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[8], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[9], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[10], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[11], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[12], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[13], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[14], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[15], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[16], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[17], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[18], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[19], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[20], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[21], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[22], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[23], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[24], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[25], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[26], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[27], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[28], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v24[29], 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          v24 += 30;
        }
        while (v24 != v25);
      }
      ++v59;
      v6 += 3;
      if (v6 == a2)
        goto LABEL_35;
    }
    v11 = v7;
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    v7 = v11;
LABEL_11:
    memcpy(p_dst, __s, v9);
    goto LABEL_12;
  }
LABEL_35:
  v26 = 1;
  v59 = 1;
  v27 = *a3;
  v28 = a3[1];
  if (*a3 == v28)
  {
LABEL_70:
    v49 = v57;
    v57 = 0;
    if (!v49)
      goto LABEL_72;
    goto LABEL_71;
  }
  v29 = "/DesGenCoordYFirst";
  do
  {
    v30 = strlen(__s);
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      sub_20E7857BC();
    v31 = v30;
    if (v30 >= 0x17)
    {
      v33 = v29;
      v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v34 = v30 | 7;
      v35 = v34 + 1;
      v32 = (std::string *)operator new(v34 + 1);
      __dst.__r_.__value_.__l.__size_ = v31;
      __dst.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      v29 = v33;
LABEL_45:
      memcpy(v32, __s, v31);
      goto LABEL_46;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30;
    v32 = &__dst;
    if (v30)
      goto LABEL_45;
LABEL_46:
    v32->__r_.__value_.__s.__data_[v31] = 0;
    v36 = std::string::append(&__dst, v29);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v59, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &__p;
    else
      v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v39 = __p.__r_.__value_.__l.__size_;
    v40 = std::string::append(&v55, (const std::string::value_type *)v38, v39);
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    v42 = std::string::append(&__ptr, "Out.rslt");
    v43 = (void *)v42->__r_.__value_.__r.__words[0];
    v64[0] = v42->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
    v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v61) < 0)
      operator delete(v60);
    v60 = v43;
    *(_QWORD *)&v61 = v64[0];
    *(_QWORD *)((char *)&v61 + 7) = *(_QWORD *)((char *)v64 + 7);
    HIBYTE(v61) = v44;
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_56:
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_67;
        goto LABEL_57;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_56;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_67:
      operator delete(v55.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_58;
      goto LABEL_68;
    }
LABEL_57:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_58;
LABEL_68:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_58:
    if (v61 >= 0)
      v45 = (char *)&v60;
    else
      v45 = (char *)v60;
    v46 = sub_20E7FB618(&v57, v45, "wb");
    v26 = v46 == 0;
    if (v46)
      goto LABEL_70;
    v47 = *v27;
    v48 = v27[1];
    if (*v27 != v48)
    {
      do
      {
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*v47, 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[1], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[2], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[3], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[4], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[5], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[6], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[7], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[8], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[9], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[10], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[11], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[12], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[13], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[14], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[15], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[16], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[17], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[18], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[19], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[20], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[21], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[22], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[23], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[24], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[25], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[26], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[27], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[28], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(v47[29], 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, v57);
        v47 += 30;
      }
      while (v47 != v48);
    }
    ++v59;
    v27 += 3;
  }
  while (v27 != v28);
  v26 = 1;
  v49 = v57;
  v57 = 0;
  if (v49)
LABEL_71:
    fclose(v49);
LABEL_72:
  v50 = __stream;
  __stream = 0;
  if (v50)
    fclose(v50);
  if (SHIBYTE(v61) < 0)
  {
    operator delete(v60);
    if ((SHIBYTE(v63) & 0x80000000) == 0)
      return v26;
LABEL_78:
    operator delete(v62);
    return v26;
  }
  if (SHIBYTE(v63) < 0)
    goto LABEL_78;
  return v26;
}

void sub_20E7D8538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,FILE *a37,FILE *a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  FILE *v46;

  if (a37)
  {
    fclose(a37);
    v46 = a38;
    if (a38)
    {
LABEL_8:
      fclose(v46);
      if (a45 < 0)
      {
LABEL_9:
        operator delete(__p);
        if (*(char *)(v45 - 121) < 0)
        {
LABEL_10:
          operator delete(*(void **)(v45 - 144));
          _Unwind_Resume(exception_object);
        }
LABEL_5:
        _Unwind_Resume(exception_object);
      }
LABEL_4:
      if (*(char *)(v45 - 121) < 0)
        goto LABEL_10;
      goto LABEL_5;
    }
  }
  else
  {
    v46 = a38;
    if (a38)
      goto LABEL_8;
  }
  if (a45 < 0)
    goto LABEL_9;
  goto LABEL_4;
}

uint64_t sub_20E7D86A0(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t **a4, const char *a5)
{
  uint64_t *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  void **v18;
  char v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  double v27;
  uint64_t j;
  uint64_t *v29;
  size_t v30;
  std::string::size_type v31;
  std::string *p_dst;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  __int128 v36;
  std::string *p_p;
  std::string::size_type size;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  void *v42;
  char v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  double v51;
  uint64_t i;
  FILE *v53;
  FILE *v54;
  uint64_t v57;
  uint64_t *v59;
  std::string __p;
  std::string __dst;
  std::string v64;
  std::string __ptr;
  FILE *v66;
  FILE *__stream;
  unint64_t v68;
  void *v69;
  __int128 v70;
  void **v71;
  __int128 v72;
  _QWORD v73[5];

  v73[2] = *MEMORY[0x24BDAC8D0];
  v71 = 0;
  v72 = 0uLL;
  v69 = 0;
  v70 = 0uLL;
  __stream = 0;
  v68 = 1;
  v66 = 0;
  if (a2 == a3)
  {
LABEL_38:
    v57 = 1;
    v68 = 1;
    v29 = *a4;
    v59 = a4[1];
    if (*a4 == v59)
      goto LABEL_76;
    while (1)
    {
      v30 = strlen(a5);
      if (v30 > 0x7FFFFFFFFFFFFFF7)
        sub_20E7857BC();
      v31 = v30;
      if (v30 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30;
      p_dst = &__dst;
      if (v30)
        goto LABEL_48;
LABEL_49:
      p_dst->__r_.__value_.__s.__data_[v31] = 0;
      v35 = std::string::append(&__dst, "/DesGenCoordYSecond");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      sub_20E7DB1A0(&v68, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v39 = std::string::append(&v64, (const std::string::value_type *)p_p, size);
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      __ptr.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v41 = std::string::append(&__ptr, "Out.rslt");
      v42 = (void *)v41->__r_.__value_.__r.__words[0];
      v73[0] = v41->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v73 + 7) = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
      v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v70) < 0)
        operator delete(v69);
      v69 = v42;
      *(_QWORD *)&v70 = v73[0];
      *(_QWORD *)((char *)&v70 + 7) = *(_QWORD *)((char *)v73 + 7);
      HIBYTE(v70) = v43;
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__ptr.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_59:
          if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_60;
          goto LABEL_73;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_59;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_60:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_74;
        goto LABEL_61;
      }
LABEL_73:
      operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_74:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_61:
      if (v70 >= 0)
        v44 = (char *)&v69;
      else
        v44 = (char *)v69;
      if (sub_20E7FB618(&v66, v44, "wb"))
      {
        v57 = 0;
        v53 = v66;
        v66 = 0;
        if (v53)
          goto LABEL_77;
        goto LABEL_78;
      }
      v46 = v68;
      v47 = *v29;
      v48 = v29[1];
      if (*v29 != v48)
      {
        v49 = 0;
        v50 = (_QWORD *)(*a1 + 24 * v68 - 24);
        v51 = (double)(1 << ((v68 >> 1) + 6));
        do
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
          LODWORD(v45) = *(_DWORD *)(*v50 + (v49 << 7) + 4);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(floor((double)v45 / v51 * 64.0 + 0.5) * 0.015625, 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, v66);
          for (i = 40; i != 376; i += 48)
          {
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v47 + i - 40), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v66);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v47 + i - 32), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v66);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v47 + i - 24), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v66);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v47 + i - 16), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v66);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v47 + i - 8), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v66);
            LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v47 + i), 6uLL);
            fwrite(&__ptr, 4uLL, 1uLL, v66);
          }
          ++v49;
          v47 += 336;
        }
        while (v47 != v48);
        v46 = v68;
      }
      v68 = v46 + 1;
      v29 += 3;
      if (v29 == v59)
      {
        v57 = 1;
        v53 = v66;
        v66 = 0;
        if (v53)
          goto LABEL_77;
        goto LABEL_78;
      }
    }
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    p_dst = (std::string *)operator new(v33 + 1);
    __dst.__r_.__value_.__l.__size_ = v31;
    __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_48:
    memcpy(p_dst, a5, v31);
    goto LABEL_49;
  }
  v5 = a2;
  while (1)
  {
    v6 = strlen(a5);
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20E7857BC();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v7;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
LABEL_11:
      memcpy(v8, a5, v7);
      goto LABEL_12;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
    v8 = &__dst;
    if (v6)
      goto LABEL_11;
LABEL_12:
    v8->__r_.__value_.__s.__data_[v7] = 0;
    v11 = std::string::append(&__dst, "/DesGenCoordXSecond");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v68, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &__p;
    else
      v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v14 = __p.__r_.__value_.__l.__size_;
    v15 = std::string::append(&v64, (const std::string::value_type *)v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&__ptr, "Out.rslt");
    v18 = (void **)v17->__r_.__value_.__r.__words[0];
    v73[0] = v17->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v73 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
    v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v72) < 0)
      operator delete(v71);
    v71 = v18;
    *(_QWORD *)&v72 = v73[0];
    *(_QWORD *)((char *)&v72 + 7) = *(_QWORD *)((char *)v73 + 7);
    HIBYTE(v72) = v19;
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_22:
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_36;
        goto LABEL_23;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_36:
      operator delete(v64.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_37;
    }
LABEL_23:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_37:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
    v20 = v72 >= 0 ? (char *)&v71 : (char *)v71;
    if (sub_20E7FB618(&__stream, v20, "wb"))
      break;
    v22 = v68;
    v23 = *v5;
    v24 = v5[1];
    if (*v5 != v24)
    {
      v25 = 0;
      v26 = (_QWORD *)(*a1 + 24 * v68 - 24);
      v27 = (double)(1 << ((v68 >> 1) + 6));
      do
      {
        LODWORD(__ptr.__r_.__value_.__l.__data_) = 0;
        LODWORD(v21) = *(_DWORD *)(*v26 + (v25 << 7));
        LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(floor((double)v21 / v27 * 64.0 + 0.5) * 0.015625, 6uLL);
        fwrite(&__ptr, 4uLL, 1uLL, __stream);
        for (j = 40; j != 376; j += 48)
        {
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v23 + j - 40), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v23 + j - 32), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v23 + j - 24), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v23 + j - 16), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v23 + j - 8), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
          LODWORD(__ptr.__r_.__value_.__l.__data_) = vcvtd_n_s64_f64(*(double *)(v23 + j), 6uLL);
          fwrite(&__ptr, 4uLL, 1uLL, __stream);
        }
        ++v25;
        v23 += 336;
      }
      while (v23 != v24);
      v22 = v68;
    }
    v68 = v22 + 1;
    v5 += 3;
    if (v5 == a3)
      goto LABEL_38;
  }
  v57 = 0;
LABEL_76:
  v53 = v66;
  v66 = 0;
  if (v53)
LABEL_77:
    fclose(v53);
LABEL_78:
  v54 = __stream;
  __stream = 0;
  if (v54)
    fclose(v54);
  if (SHIBYTE(v70) < 0)
  {
    operator delete(v69);
    if ((SHIBYTE(v72) & 0x80000000) == 0)
      return v57;
LABEL_84:
    operator delete(v71);
    return v57;
  }
  if (SHIBYTE(v72) < 0)
    goto LABEL_84;
  return v57;
}

void sub_20E7D8F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,FILE *a41,FILE *a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;
  FILE *v50;

  if (a41)
  {
    fclose(a41);
    v50 = a42;
    if (a42)
    {
LABEL_8:
      fclose(v50);
      if (a49 < 0)
      {
LABEL_9:
        operator delete(__p);
        if (*(char *)(v49 - 137) < 0)
        {
LABEL_10:
          operator delete(*(void **)(v49 - 160));
          _Unwind_Resume(exception_object);
        }
LABEL_5:
        _Unwind_Resume(exception_object);
      }
LABEL_4:
      if (*(char *)(v49 - 137) < 0)
        goto LABEL_10;
      goto LABEL_5;
    }
  }
  else
  {
    v50 = a42;
    if (a42)
      goto LABEL_8;
  }
  if (a49 < 0)
    goto LABEL_9;
  goto LABEL_4;
}

BOOL sub_20E7D9070(char **a1, char **a2, char ***a3, char *__s)
{
  char **v6;
  const std::string::value_type *v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  const std::string::value_type *v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  void *v21;
  char v22;
  char *v23;
  char *v24;
  char *v25;
  _BOOL8 v26;
  char **v27;
  char **v28;
  const std::string::value_type *v29;
  size_t v30;
  std::string::size_type v31;
  std::string *v32;
  const std::string::value_type *v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  void *v43;
  char v44;
  char *v45;
  int v46;
  char *v47;
  char *v48;
  FILE *v49;
  FILE *v50;
  std::string __p;
  std::string __dst;
  std::string v55;
  std::string v56;
  FILE *v57;
  FILE *__stream;
  unint64_t v59;
  void *v60;
  __int128 v61;
  void *v62;
  __int128 v63;
  _QWORD v64[5];

  v64[2] = *MEMORY[0x24BDAC8D0];
  v62 = 0;
  v63 = 0uLL;
  v60 = 0;
  v61 = 0uLL;
  __stream = 0;
  v59 = 1;
  v57 = 0;
  if (a1 != a2)
  {
    v6 = a1;
    v7 = "/DesGenRetinaFirst";
    while (1)
    {
      v8 = strlen(__s);
      if (v8 > 0x7FFFFFFFFFFFFFF7)
        sub_20E7857BC();
      v9 = v8;
      if (v8 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
      p_dst = &__dst;
      if (v8)
        goto LABEL_11;
LABEL_12:
      p_dst->__r_.__value_.__s.__data_[v9] = 0;
      v14 = std::string::append(&__dst, v7);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      sub_20E7DB1A0(&v59, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v18 = std::string::append(&v55, (const std::string::value_type *)p_p, size);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append(&v56, "Out.rslt");
      v21 = (void *)v20->__r_.__value_.__r.__words[0];
      v64[0] = v20->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v63) < 0)
        operator delete(v62);
      v62 = v21;
      *(_QWORD *)&v63 = v64[0];
      *(_QWORD *)((char *)&v63 + 7) = *(_QWORD *)((char *)v64 + 7);
      HIBYTE(v63) = v22;
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v56.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_22:
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_33;
          goto LABEL_23;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_22;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_33:
        operator delete(v55.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_24;
        goto LABEL_34;
      }
LABEL_23:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
LABEL_34:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
      if (v63 >= 0)
        v23 = (char *)&v62;
      else
        v23 = (char *)v62;
      if (sub_20E7FB618(&__stream, v23, "wb"))
      {
        v26 = 0;
        goto LABEL_70;
      }
      v24 = *v6;
      v25 = v6[1];
      if (*v6 != v25)
      {
        do
        {
          fwrite(v24, 4uLL, 0x1EuLL, __stream);
          v24 += 120;
        }
        while (v24 != v25);
      }
      ++v59;
      v6 += 3;
      if (v6 == a2)
        goto LABEL_35;
    }
    v11 = v7;
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    v7 = v11;
LABEL_11:
    memcpy(p_dst, __s, v9);
    goto LABEL_12;
  }
LABEL_35:
  v26 = 1;
  v59 = 1;
  v27 = *a3;
  v28 = a3[1];
  if (*a3 == v28)
  {
LABEL_70:
    v49 = v57;
    v57 = 0;
    if (!v49)
      goto LABEL_72;
    goto LABEL_71;
  }
  v29 = "/DesGenRetinaSecond";
  do
  {
    v30 = strlen(__s);
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      sub_20E7857BC();
    v31 = v30;
    if (v30 >= 0x17)
    {
      v33 = v29;
      v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v34 = v30 | 7;
      v35 = v34 + 1;
      v32 = (std::string *)operator new(v34 + 1);
      __dst.__r_.__value_.__l.__size_ = v31;
      __dst.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      v29 = v33;
LABEL_45:
      memcpy(v32, __s, v31);
      goto LABEL_46;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30;
    v32 = &__dst;
    if (v30)
      goto LABEL_45;
LABEL_46:
    v32->__r_.__value_.__s.__data_[v31] = 0;
    v36 = std::string::append(&__dst, v29);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v59, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &__p;
    else
      v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v39 = __p.__r_.__value_.__l.__size_;
    v40 = std::string::append(&v55, (const std::string::value_type *)v38, v39);
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    v42 = std::string::append(&v56, "Out.rslt");
    v43 = (void *)v42->__r_.__value_.__r.__words[0];
    v64[0] = v42->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
    v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v61) < 0)
      operator delete(v60);
    v60 = v43;
    *(_QWORD *)&v61 = v64[0];
    *(_QWORD *)((char *)&v61 + 7) = *(_QWORD *)((char *)v64 + 7);
    HIBYTE(v61) = v44;
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v56.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_56:
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_67;
        goto LABEL_57;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_56;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_67:
      operator delete(v55.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_58;
      goto LABEL_68;
    }
LABEL_57:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_58;
LABEL_68:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_58:
    if (v61 >= 0)
      v45 = (char *)&v60;
    else
      v45 = (char *)v60;
    v46 = sub_20E7FB618(&v57, v45, "wb");
    v26 = v46 == 0;
    if (v46)
      goto LABEL_70;
    v47 = *v27;
    v48 = v27[1];
    if (*v27 != v48)
    {
      do
      {
        fwrite(v47, 4uLL, 0x2BuLL, v57);
        v47 += 172;
      }
      while (v47 != v48);
    }
    ++v59;
    v27 += 3;
  }
  while (v27 != v28);
  v26 = 1;
  v49 = v57;
  v57 = 0;
  if (v49)
LABEL_71:
    fclose(v49);
LABEL_72:
  v50 = __stream;
  __stream = 0;
  if (v50)
    fclose(v50);
  if (SHIBYTE(v61) < 0)
  {
    operator delete(v60);
    if ((SHIBYTE(v63) & 0x80000000) == 0)
      return v26;
LABEL_78:
    operator delete(v62);
    return v26;
  }
  if (SHIBYTE(v63) < 0)
    goto LABEL_78;
  return v26;
}

void sub_20E7D9608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,FILE *a37,FILE *a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  FILE *v46;

  if (a37)
  {
    fclose(a37);
    v46 = a38;
    if (a38)
    {
LABEL_8:
      fclose(v46);
      if (a45 < 0)
      {
LABEL_9:
        operator delete(__p);
        if (*(char *)(v45 - 121) < 0)
        {
LABEL_10:
          operator delete(*(void **)(v45 - 144));
          _Unwind_Resume(exception_object);
        }
LABEL_5:
        _Unwind_Resume(exception_object);
      }
LABEL_4:
      if (*(char *)(v45 - 121) < 0)
        goto LABEL_10;
      goto LABEL_5;
    }
  }
  else
  {
    v46 = a38;
    if (a38)
      goto LABEL_8;
  }
  if (a45 < 0)
    goto LABEL_9;
  goto LABEL_4;
}

uint64_t sub_20E7D9770(unsigned __int16 **a1, unsigned __int16 **a2, char *__s)
{
  uint64_t v3;
  unsigned __int16 **v6;
  const std::string::value_type *v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  const std::string::value_type *v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  void *v21;
  char v22;
  char *p_p;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  FILE *v26;
  FILE *v27;
  std::string v29;
  std::string __dst;
  std::string __ptr;
  std::string v32;
  unint64_t v33;
  void *__p;
  __int128 v35;
  _QWORD v36[5];

  v36[2] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v35 = 0uLL;
  v3 = 1;
  v33 = 1;
  if (a1 == a2)
  {
LABEL_41:
    if (SHIBYTE(v35) < 0)
      goto LABEL_42;
    return v3;
  }
  v6 = a1;
  v7 = "/DesGenKPMem";
  do
  {
    v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E7857BC();
    v9 = v8;
    if (v8 >= 0x17)
    {
      v11 = v7;
      v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v12 = v8 | 7;
      v13 = v12 + 1;
      p_dst = (std::string *)operator new(v12 + 1);
      __dst.__r_.__value_.__l.__size_ = v9;
      __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      v7 = v11;
LABEL_10:
      memcpy(p_dst, __s, v9);
      goto LABEL_11;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (v8)
      goto LABEL_10;
LABEL_11:
    p_dst->__r_.__value_.__s.__data_[v9] = 0;
    v14 = std::string::append(&__dst, v7);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v33, &v29);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v29;
    else
      v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    else
      size = v29.__r_.__value_.__l.__size_;
    v18 = std::string::append(&__ptr, (const std::string::value_type *)v16, size);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v32, "Out.rslt");
    v21 = (void *)v20->__r_.__value_.__r.__words[0];
    v36[0] = v20->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v36 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0)
      operator delete(__p);
    __p = v21;
    *(_QWORD *)&v35 = v36[0];
    *(_QWORD *)((char *)&v35 + 7) = *(_QWORD *)((char *)v36 + 7);
    HIBYTE(v35) = v22;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v32.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_21:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_36;
        goto LABEL_22;
      }
    }
    else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_36:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_23;
      goto LABEL_37;
    }
LABEL_22:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_37:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_23:
    v32.__r_.__value_.__r.__words[0] = 0;
    if (v35 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (sub_20E7FB618((FILE **)&v32, p_p, "wb"))
      goto LABEL_38;
    v24 = *v6;
    v25 = v6[1];
    if (*v6 != v25)
    {
      while (1)
      {
        __ptr.__r_.__value_.__r.__words[0] = 0;
        __ptr.__r_.__value_.__r.__words[0] = *v24 | (*((_DWORD *)v24 + 1) << 16) | ((unint64_t)*((unsigned __int8 *)v24 + 12) << 32) | ((unint64_t)*((unsigned __int8 *)v24 + 8) << 40) | ((unint64_t)(*((_DWORD *)v24 + 7) & 0x7FFF) << 48) | ((unint64_t)*((unsigned __int8 *)v24 + 24) << 63);
        if (fwrite(&__ptr, 1uLL, 8uLL, (FILE *)v32.__r_.__value_.__l.__data_) != 8)
          break;
        v24 += 64;
        if (v24 == v25)
          goto LABEL_30;
      }
LABEL_38:
      v27 = (FILE *)v32.__r_.__value_.__r.__words[0];
      v32.__r_.__value_.__r.__words[0] = 0;
      if (v27)
        fclose(v27);
      v3 = 0;
      goto LABEL_41;
    }
LABEL_30:
    ++v33;
    v26 = (FILE *)v32.__r_.__value_.__r.__words[0];
    v32.__r_.__value_.__r.__words[0] = 0;
    if (v26)
      fclose(v26);
    v6 += 3;
  }
  while (v6 != a2);
  v3 = 1;
  if ((SHIBYTE(v35) & 0x80000000) == 0)
    return v3;
LABEL_42:
  operator delete(__p);
  return v3;
}

void sub_20E7D9AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,FILE *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20E7D9B88(char **a1, char **a2, char *__s)
{
  _BOOL8 v3;
  char **v6;
  size_t v7;
  std::string::size_type v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  void *v19;
  char v20;
  char *p_p;
  int v22;
  char *v23;
  char *v24;
  FILE *v25;
  std::string v27;
  std::string __dst;
  std::string v29;
  std::string v30;
  FILE *__stream;
  unint64_t v32;
  void *__p;
  __int128 v34;
  _QWORD v35[5];

  v35[2] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v34 = 0uLL;
  v3 = 1;
  __stream = 0;
  v32 = 1;
  if (a1 == a2)
    goto LABEL_37;
  v6 = a1;
  do
  {
    v7 = strlen(__s);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E7857BC();
    v8 = v7;
    if (v7 >= 0x17)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v8;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_11:
      memcpy(p_dst, __s, v8);
      goto LABEL_12;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7;
    p_dst = &__dst;
    if (v7)
      goto LABEL_11;
LABEL_12:
    p_dst->__r_.__value_.__s.__data_[v8] = 0;
    v12 = std::string::append(&__dst, "/DesGenDescLong");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v32, &v27);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v27;
    else
      v14 = (std::string *)v27.__r_.__value_.__r.__words[0];
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    else
      size = v27.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v29, (const std::string::value_type *)v14, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v30, "Out.rslt");
    v19 = (void *)v18->__r_.__value_.__r.__words[0];
    v35[0] = v18->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v35 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v34) < 0)
      operator delete(__p);
    __p = v19;
    *(_QWORD *)&v34 = v35[0];
    *(_QWORD *)((char *)&v34 + 7) = *(_QWORD *)((char *)v35 + 7);
    HIBYTE(v34) = v20;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_22:
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_33;
      }
    }
    else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_34;
      goto LABEL_24;
    }
LABEL_33:
    operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_34:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
    if (v34 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    v22 = sub_20E7FB618(&__stream, p_p, "wb");
    v3 = v22 == 0;
    if (v22)
      break;
    v23 = *v6;
    v24 = v6[1];
    if (*v6 != v24)
    {
      do
      {
        fwrite(v23, 4uLL, 0x10uLL, __stream);
        v23 += 64;
      }
      while (v23 != v24);
    }
    ++v32;
    v6 += 3;
  }
  while (v6 != a2);
  v25 = __stream;
  __stream = 0;
  if (v25)
    fclose(v25);
LABEL_37:
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
  return v3;
}

void sub_20E7D9E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,FILE *a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a35)
  {
    fclose(a35);
    if (a42 < 0)
    {
LABEL_6:
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  else if (a42 < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20E7D9F54(char **a1, char **a2, char *__s)
{
  _BOOL8 v3;
  char **v6;
  size_t v7;
  std::string::size_type v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  void *v19;
  char v20;
  char *p_p;
  int v22;
  char *v23;
  char *v24;
  FILE *v25;
  std::string v27;
  std::string __dst;
  std::string v29;
  std::string v30;
  FILE *__stream;
  unint64_t v32;
  void *__p;
  __int128 v34;
  _QWORD v35[5];

  v35[2] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v34 = 0uLL;
  v3 = 1;
  __stream = 0;
  v32 = 1;
  if (a1 == a2)
    goto LABEL_37;
  v6 = a1;
  do
  {
    v7 = strlen(__s);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E7857BC();
    v8 = v7;
    if (v7 >= 0x17)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v8;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_11:
      memcpy(p_dst, __s, v8);
      goto LABEL_12;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7;
    p_dst = &__dst;
    if (v7)
      goto LABEL_11;
LABEL_12:
    p_dst->__r_.__value_.__s.__data_[v8] = 0;
    v12 = std::string::append(&__dst, "/DesGenDescShort");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v32, &v27);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v27;
    else
      v14 = (std::string *)v27.__r_.__value_.__r.__words[0];
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    else
      size = v27.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v29, (const std::string::value_type *)v14, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v30, "Out.rslt");
    v19 = (void *)v18->__r_.__value_.__r.__words[0];
    v35[0] = v18->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v35 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v34) < 0)
      operator delete(__p);
    __p = v19;
    *(_QWORD *)&v34 = v35[0];
    *(_QWORD *)((char *)&v34 + 7) = *(_QWORD *)((char *)v35 + 7);
    HIBYTE(v34) = v20;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_22:
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_33;
      }
    }
    else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_34;
      goto LABEL_24;
    }
LABEL_33:
    operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_34:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
    if (v34 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    v22 = sub_20E7FB618(&__stream, p_p, "wb");
    v3 = v22 == 0;
    if (v22)
      break;
    v23 = *v6;
    v24 = v6[1];
    if (*v6 != v24)
    {
      do
      {
        fwrite(v23, 4uLL, 8uLL, __stream);
        v23 += 64;
      }
      while (v23 != v24);
    }
    ++v32;
    v6 += 3;
  }
  while (v6 != a2);
  v25 = __stream;
  __stream = 0;
  if (v25)
    fclose(v25);
LABEL_37:
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
  return v3;
}

void sub_20E7DA230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,FILE *a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a35)
  {
    fclose(a35);
    if (a42 < 0)
    {
LABEL_6:
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  else if (a42 < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20E7DA320(const void **a1, uint64_t a2, char *__s)
{
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  FILE *v17;
  std::string __dst;
  void *__p[2];
  int64_t v21;
  FILE *__stream;

  __stream = 0;
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E7857BC();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v11 = std::string::append(&__dst, "/DesGenHistogramOut.rslt");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v21 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v21 >= 0)
    v13 = (char *)__p;
  else
    v13 = (char *)__p[0];
  v14 = sub_20E7FB618(&__stream, v13, "wb");
  if (!v14)
  {
    v15 = 64;
    do
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      fwrite(&__dst, 4uLL, 1uLL, __stream);
      --v15;
    }
    while (v15);
    if ((unint64_t)(a2 - 1) >= 2)
    {
      v16 = a2 - 2;
      do
      {
        fwrite(*a1, 4uLL, 0x40uLL, __stream);
        a1 += 3;
        --v16;
      }
      while (v16);
    }
  }
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  v17 = __stream;
  __stream = 0;
  if (v17)
    fclose(v17);
  return v14 == 0;
}

void sub_20E7DA4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,FILE *a22)
{
  if (a21 < 0)
    operator delete(__p);
  if (a22)
    fclose(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7DA510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5, char *__s)
{
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  size_t v17;
  std::string::size_type v18;
  std::string *p_dst;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  void *v29;
  char v30;
  char *p_p;
  uint64_t v32;
  uint64_t v33;
  FILE *v34;
  FILE *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  size_t v40;
  std::string::size_type v41;
  std::string *v42;
  uint64_t v43;
  uint64_t v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  void *v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  FILE *v58;
  FILE *v59;
  uint64_t *v60;
  std::string v61;
  std::string __dst;
  std::string __ptr;
  std::string v64;
  unint64_t v65;
  void *__p;
  __int128 v67;
  _QWORD v68[5];

  v68[2] = *MEMORY[0x24BDAC8D0];
  result = sub_20E7D66E0(*(_QWORD **)(a1 + 48), __s);
  if (!(_DWORD)result)
    return result;
  result = sub_20E7D6B48(*(_QWORD **)(a1 + 56), __s);
  if (!(_DWORD)result)
    return result;
  result = sub_20E7D6FB0(*(_QWORD *)(a1 + 64), __s);
  if (!(_DWORD)result)
    return result;
  result = sub_20E7D73E0(*(_QWORD **)(a2 + 248), __s);
  if (!(_DWORD)result)
    return result;
  v13 = *(_QWORD *)(a2 + 256);
  v15 = *(uint64_t **)(v13 + 200);
  v14 = *(uint64_t **)(v13 + 208);
  __p = 0;
  v67 = 0uLL;
  v16 = 1;
  v65 = 1;
  v60 = v14;
  if (v15 == v14)
  {
LABEL_44:
    if (SHIBYTE(v67) < 0)
      goto LABEL_45;
    goto LABEL_46;
  }
  do
  {
    v17 = strlen(__s);
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      sub_20E7857BC();
    v18 = v17;
    if (v17 >= 0x17)
    {
      v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v20 = v17 | 7;
      v21 = v20 + 1;
      p_dst = (std::string *)operator new(v20 + 1);
      __dst.__r_.__value_.__l.__size_ = v18;
      __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_13:
      memcpy(p_dst, __s, v18);
      goto LABEL_14;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v17;
    p_dst = &__dst;
    if (v17)
      goto LABEL_13;
LABEL_14:
    p_dst->__r_.__value_.__s.__data_[v18] = 0;
    v22 = std::string::append(&__dst, "/DesGenKPC");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v65, &v61);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v61;
    else
      v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    else
      size = v61.__r_.__value_.__l.__size_;
    v26 = std::string::append(&__ptr, (const std::string::value_type *)v24, size);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v64, "Out.rslt");
    v29 = (void *)v28->__r_.__value_.__r.__words[0];
    v68[0] = v28->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v68 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
    v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v67) < 0)
      operator delete(__p);
    __p = v29;
    *(_QWORD *)&v67 = v68[0];
    *(_QWORD *)((char *)&v67 + 7) = *(_QWORD *)((char *)v68 + 7);
    HIBYTE(v67) = v30;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v64.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_24:
        if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_39;
        goto LABEL_25;
      }
    }
    else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_39:
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_40;
    }
LABEL_25:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_40:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_26:
    v64.__r_.__value_.__r.__words[0] = 0;
    if (v67 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (sub_20E7FB618((FILE **)&v64, p_p, "wb"))
      goto LABEL_41;
    v32 = *v15;
    v33 = v15[1];
    if (*v15 != v33)
    {
      while (1)
      {
        __ptr.__r_.__value_.__r.__words[0] = 0;
        __ptr.__r_.__value_.__r.__words[0] = *(_DWORD *)v32 & 0xFFF | ((*(_DWORD *)(v32 + 4) & 0x1FFF) << 12) & 0xE1FFFFFF | ((*(_DWORD *)(v32 + 8) & 0xF) << 25) | ((unint64_t)*(unsigned __int8 *)(v32 + 12) << 45) | ((unint64_t)*(unsigned __int16 *)(v32 + 16) << 29);
        if (fwrite(&__ptr, 8uLL, 1uLL, (FILE *)v64.__r_.__value_.__l.__data_) != 1)
          break;
        v32 += 20;
        if (v32 == v33)
          goto LABEL_33;
      }
LABEL_41:
      v35 = (FILE *)v64.__r_.__value_.__r.__words[0];
      v64.__r_.__value_.__r.__words[0] = 0;
      if (v35)
        fclose(v35);
      v16 = 0;
      goto LABEL_44;
    }
LABEL_33:
    ++v65;
    v34 = (FILE *)v64.__r_.__value_.__r.__words[0];
    v64.__r_.__value_.__r.__words[0] = 0;
    if (v34)
      fclose(v34);
    v15 += 3;
  }
  while (v15 != v60);
  v16 = 1;
  if ((SHIBYTE(v67) & 0x80000000) == 0)
    goto LABEL_46;
LABEL_45:
  operator delete(__p);
LABEL_46:
  if (!v16)
    return 0;
  v36 = *(_QWORD *)(a3 + 8);
  v38 = *(uint64_t **)(v36 + 200);
  v37 = *(uint64_t **)(v36 + 208);
  __p = 0;
  v67 = 0uLL;
  v39 = 1;
  v65 = 1;
  if (v38 == v37)
  {
LABEL_86:
    if (SHIBYTE(v67) < 0)
      goto LABEL_87;
    goto LABEL_88;
  }
  while (2)
  {
    v40 = strlen(__s);
    if (v40 > 0x7FFFFFFFFFFFFFF7)
      sub_20E7857BC();
    v41 = v40;
    if (v40 >= 0x17)
    {
      v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v43 = v40 | 7;
      v44 = v43 + 1;
      v42 = (std::string *)operator new(v43 + 1);
      __dst.__r_.__value_.__l.__size_ = v41;
      __dst.__r_.__value_.__r.__words[2] = v44 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      goto LABEL_55;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v40;
    v42 = &__dst;
    if (v40)
LABEL_55:
      memcpy(v42, __s, v41);
    v42->__r_.__value_.__s.__data_[v41] = 0;
    v45 = std::string::append(&__dst, "/DesGenKP0Mem");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v65, &v61);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v61;
    else
      v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    else
      v48 = v61.__r_.__value_.__l.__size_;
    v49 = std::string::append(&__ptr, (const std::string::value_type *)v47, v48);
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = std::string::append(&v64, "Out.rslt");
    v52 = (void *)v51->__r_.__value_.__r.__words[0];
    v68[0] = v51->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v68 + 7) = *(std::string::size_type *)((char *)&v51->__r_.__value_.__r.__words[1] + 7);
    v53 = HIBYTE(v51->__r_.__value_.__r.__words[2]);
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v67) < 0)
      operator delete(__p);
    __p = v52;
    *(_QWORD *)&v67 = v68[0];
    *(_QWORD *)((char *)&v67 + 7) = *(_QWORD *)((char *)v68 + 7);
    HIBYTE(v67) = v53;
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_66;
LABEL_80:
      operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_81;
LABEL_67:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_68;
LABEL_82:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_68;
    }
    operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_80;
LABEL_66:
    if ((SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_67;
LABEL_81:
    operator delete(__ptr.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_82;
LABEL_68:
    __ptr.__r_.__value_.__r.__words[0] = 0;
    if (v67 >= 0)
      v54 = (char *)&__p;
    else
      v54 = (char *)__p;
    if (sub_20E7FB618((FILE **)&__ptr, v54, "wb"))
      goto LABEL_83;
    v55 = *v38;
    v56 = v38[1];
    if (*v38 != v56)
    {
      while (1)
      {
        LODWORD(v64.__r_.__value_.__r.__words[1]) = 0;
        v64.__r_.__value_.__r.__words[0] = 0;
        v57 = *(_DWORD *)(v55 + 28) & 0x7FFF | ((*(_DWORD *)(v55 + 32) & 0x1FFF) << 16);
        v64.__r_.__value_.__r.__words[0] = *(_DWORD *)v55 & 0x3FFFFLL | ((unint64_t)(*(_DWORD *)(v55 + 4) & 0x7FFFF) << 32) | ((unint64_t)*(unsigned __int8 *)(v55 + 12) << 52) | ((unint64_t)*(_DWORD *)(v55 + 8) << 23) | ((unint64_t)(*(_DWORD *)(v55 + 20) & 7) << 60) | ((unint64_t)*(unsigned __int8 *)(v55 + 24) << 63);
        LODWORD(v64.__r_.__value_.__r.__words[1]) = v57;
        if (fwrite(&v64, 1uLL, 0xCuLL, (FILE *)__ptr.__r_.__value_.__l.__data_) != 12)
          break;
        v55 += 128;
        if (v55 == v56)
          goto LABEL_75;
      }
LABEL_83:
      v59 = (FILE *)__ptr.__r_.__value_.__r.__words[0];
      __ptr.__r_.__value_.__r.__words[0] = 0;
      if (v59)
        fclose(v59);
      v39 = 0;
      goto LABEL_86;
    }
LABEL_75:
    ++v65;
    v58 = (FILE *)__ptr.__r_.__value_.__r.__words[0];
    __ptr.__r_.__value_.__r.__words[0] = 0;
    if (v58)
      fclose(v58);
    v38 += 3;
    if (v38 != v37)
      continue;
    break;
  }
  v39 = 1;
  if ((SHIBYTE(v67) & 0x80000000) == 0)
    goto LABEL_88;
LABEL_87:
  operator delete(__p);
LABEL_88:
  if (!v39)
    return 0;
  result = sub_20E7D7848(*(double ***)(a4 + 272), *(double ***)(a4 + 280), (double ***)(a4 + 296), __s);
  if ((_DWORD)result)
  {
    result = sub_20E7D86A0((_QWORD *)(a4 + 368), *(uint64_t **)(a4 + 320), *(uint64_t **)(a4 + 328), (uint64_t **)(a4 + 344), __s);
    if ((_DWORD)result)
    {
      result = sub_20E7D9070(*(char ***)(a4 + 224), *(char ***)(a4 + 232), (char ***)(a4 + 248), __s);
      if ((_DWORD)result)
      {
        result = sub_20E7DAD70(*(uint64_t **)(a4 + 368), *(uint64_t **)(a4 + 376), __s);
        if ((_DWORD)result)
        {
          result = sub_20E7D9B88(*(char ***)(a4 + 392), *(char ***)(a4 + 400), __s);
          if ((_DWORD)result)
          {
            result = sub_20E7D9F54(*(char ***)(a4 + 416), *(char ***)(a4 + 424), __s);
            if ((_DWORD)result)
              return sub_20E7DA320(a5, 0x8E38E38E38E38E39* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) - *(_QWORD *)(*(_QWORD *)(a1 + 48) + 48)) >> 4), __s);
          }
        }
      }
    }
  }
  return result;
}

void sub_20E7DAC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,FILE *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7DAD70(uint64_t *a1, uint64_t *a2, char *__s)
{
  uint64_t v3;
  uint64_t *v6;
  const std::string::value_type *v7;
  size_t v8;
  std::string::size_type v9;
  std::string *p_dst;
  const std::string::value_type *v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  void *v21;
  char v22;
  char *p_p;
  uint64_t v24;
  uint64_t v25;
  int v26;
  FILE *v27;
  FILE *v28;
  std::string v30;
  std::string __dst;
  std::string v32;
  std::string __ptr;
  unint64_t v34;
  void *__p;
  __int128 v36;
  _QWORD v37[5];

  v37[2] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v36 = 0uLL;
  v3 = 1;
  v34 = 1;
  if (a1 == a2)
  {
LABEL_41:
    if (SHIBYTE(v36) < 0)
      goto LABEL_42;
    return v3;
  }
  v6 = a1;
  v7 = "/DesGenKPMem";
  do
  {
    v8 = strlen(__s);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E7857BC();
    v9 = v8;
    if (v8 >= 0x17)
    {
      v11 = v7;
      v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v12 = v8 | 7;
      v13 = v12 + 1;
      p_dst = (std::string *)operator new(v12 + 1);
      __dst.__r_.__value_.__l.__size_ = v9;
      __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      v7 = v11;
LABEL_10:
      memcpy(p_dst, __s, v9);
      goto LABEL_11;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (v8)
      goto LABEL_10;
LABEL_11:
    p_dst->__r_.__value_.__s.__data_[v9] = 0;
    v14 = std::string::append(&__dst, v7);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_20E7DB1A0(&v34, &v30);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v30;
    else
      v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    else
      size = v30.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v32, (const std::string::value_type *)v16, size);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __ptr.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&__ptr, "Out.rslt");
    v21 = (void *)v20->__r_.__value_.__r.__words[0];
    v37[0] = v20->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v37 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36) < 0)
      operator delete(__p);
    __p = v21;
    *(_QWORD *)&v36 = v37[0];
    *(_QWORD *)((char *)&v36 + 7) = *(_QWORD *)((char *)v37 + 7);
    HIBYTE(v36) = v22;
    if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__ptr.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_21:
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_36;
        goto LABEL_22;
      }
    }
    else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_36:
      operator delete(v32.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_23;
      goto LABEL_37;
    }
LABEL_22:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_37:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_23:
    v32.__r_.__value_.__r.__words[0] = 0;
    if (v36 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (sub_20E7FB618((FILE **)&v32, p_p, "wb"))
      goto LABEL_38;
    v24 = *v6;
    v25 = v6[1];
    if (*v6 != v25)
    {
      while (1)
      {
        LODWORD(__ptr.__r_.__value_.__r.__words[1]) = 0;
        __ptr.__r_.__value_.__r.__words[0] = 0;
        v26 = *(_DWORD *)(v24 + 28) & 0x7FFF | ((*(_DWORD *)(v24 + 32) & 0x1FFF) << 16);
        __ptr.__r_.__value_.__r.__words[0] = *(_DWORD *)v24 & 0x3FFFFLL | ((unint64_t)(*(_DWORD *)(v24 + 4) & 0x7FFFF) << 32) | ((unint64_t)*(unsigned __int8 *)(v24 + 12) << 52) | ((unint64_t)*(_DWORD *)(v24 + 8) << 23) | ((unint64_t)(*(_DWORD *)(v24 + 20) & 7) << 60) | ((unint64_t)*(unsigned __int8 *)(v24 + 24) << 63);
        LODWORD(__ptr.__r_.__value_.__r.__words[1]) = v26;
        if (fwrite(&__ptr, 1uLL, 0xCuLL, (FILE *)v32.__r_.__value_.__l.__data_) != 12)
          break;
        v24 += 128;
        if (v24 == v25)
          goto LABEL_30;
      }
LABEL_38:
      v28 = (FILE *)v32.__r_.__value_.__r.__words[0];
      v32.__r_.__value_.__r.__words[0] = 0;
      if (v28)
        fclose(v28);
      v3 = 0;
      goto LABEL_41;
    }
LABEL_30:
    ++v34;
    v27 = (FILE *)v32.__r_.__value_.__r.__words[0];
    v32.__r_.__value_.__r.__words[0] = 0;
    if (v27)
      fclose(v27);
    v6 += 3;
  }
  while (v6 != a2);
  v3 = 1;
  if ((SHIBYTE(v36) & 0x80000000) == 0)
    return v3;
LABEL_42:
  operator delete(__p);
  return v3;
}

void sub_20E7DB0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,FILE *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E7DB1A0(unint64_t *a1@<X0>, std::string *a2@<X8>)
{
  char *v3;
  int64x2_t v4;
  int8x16_t v5;
  char *v6;
  void **v7;
  void *v8;
  void *__p;
  char *v10;
  uint64_t v11;
  std::string v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::to_string(&v12, *a1);
  v3 = sub_20E7DB344(&__p, (uint64_t)&v12);
  v10 = v3;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    v3 = v10;
  }
  *((_BYTE *)&v12.__r_.__value_.__s + 23) = 0;
  v12.__r_.__value_.__s.__data_[0] = 0;
  sub_20E7DB4AC((uint64_t)__p, (uint64_t)v3, (uint64_t)&v12, a2, v4, v5);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v6 = (char *)__p;
  if (__p)
  {
    v7 = (void **)v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != (void **)v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
}

void sub_20E7DB298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_20E7DB2D4((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_20E7DB2D4((void **)&a9);
  _Unwind_Resume(a1);
}

void **sub_20E7DB2D4(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_20E7DB344(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E78D874();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E78D888();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 24;
    }
    while (v12 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

void sub_20E7DB4AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>, int64x2_t a5@<Q3>, int8x16_t a6@<Q5>)
{
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int64x2_t v22;
  int8x16_t v23;
  int64x2_t v24;
  const double *v25;
  const double *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  int32x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  uint64_t i;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  int v43;
  const std::string::value_type *v44;
  std::string::size_type v45;

  v10 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  if (v10 <= 1)
    v11 = 1;
  else
    v11 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  v12 = v11 - 1;
  v13 = *(unsigned __int8 *)(a3 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a3 + 8);
  v14 = v13 * v12;
  v15 = a2 - a1;
  if (a2 == a1)
  {
    v16 = 0;
  }
  else
  {
    if ((unint64_t)(v15 - 24) >= 0x60)
    {
      v18 = (v15 - 24) / 0x18uLL + 1;
      v19 = v18 & 3;
      if ((v18 & 3) == 0)
        v19 = 4;
      v20 = v18 - v19;
      v17 = a1 + 24 * v20;
      v21 = (unsigned __int8 *)(a1 + 47);
      v22 = 0uLL;
      v23.i64[0] = 255;
      v23.i64[1] = 255;
      v24 = 0uLL;
      do
      {
        a5.i8[0] = *(v21 - 24);
        a5.i8[4] = *v21;
        a6.i8[0] = v21[24];
        a6.i8[4] = v21[48];
        v25 = (const double *)(v21 - 39);
        v26 = (const double *)(v21 + 9);
        v27 = (unsigned __int128)vld3q_f64(v25);
        v28 = (unsigned __int128)vld3q_f64(v26);
        v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v29.i32[0];
        v30.i64[1] = v29.i32[1];
        v31 = v30;
        v32 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v32.i32[0];
        v30.i64[1] = v32.i32[1];
        v33 = v30;
        v30.i64[0] = a5.u32[0];
        v30.i64[1] = a5.u32[1];
        v34 = vbicq_s8(v30, v31);
        v30.i64[0] = a6.u32[0];
        v30.i64[1] = a6.u32[1];
        a5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v31), vandq_s8(v34, v23));
        a6 = vandq_s8((int8x16_t)v28, v33);
        v22 = vaddq_s64(a5, v22);
        v24 = vaddq_s64((int64x2_t)vorrq_s8(a6, vandq_s8(vbicq_s8(v30, v33), v23)), v24);
        v21 += 96;
        v20 -= 4;
      }
      while (v20);
      v16 = vaddvq_s64(vaddq_s64(v24, v22));
    }
    else
    {
      v16 = 0;
      v17 = a1;
    }
    do
    {
      v35 = *(unsigned __int8 *)(v17 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v17 + 8);
      v16 += v35;
      v17 += 24;
    }
    while (v17 != a2);
  }
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a4, v16 + v14);
  if (v15 >= 1)
  {
    v36 = *(char *)(a1 + 23);
    v37 = v36 >= 0 ? (const std::string::value_type *)a1 : *(const std::string::value_type **)a1;
    v38 = v36 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
    std::string::append(a4, v37, v38);
    if ((unint64_t)v10 >= 2)
    {
      for (i = a1 + 24; i != a2; i += 24)
      {
        v40 = *(char *)(a3 + 23);
        if (v40 >= 0)
          v41 = (const std::string::value_type *)a3;
        else
          v41 = *(const std::string::value_type **)a3;
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(a3 + 23);
        else
          v42 = *(_QWORD *)(a3 + 8);
        std::string::append(a4, v41, v42);
        v43 = *(char *)(i + 23);
        if (v43 >= 0)
          v44 = (const std::string::value_type *)i;
        else
          v44 = *(const std::string::value_type **)i;
        if (v43 >= 0)
          v45 = *(unsigned __int8 *)(i + 23);
        else
          v45 = *(_QWORD *)(i + 8);
        std::string::append(a4, v44, v45);
      }
    }
  }
}

void sub_20E7DB6D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E7DB6F4(uint64_t result, int a2)
{
  *(_QWORD *)result = &off_24C9A8E30;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_20E7DB708(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  void **v13;
  int64x2_t *v14;
  unint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  void **v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  _BYTE *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  _OWORD *v45;
  unint64_t *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  uint64_t i;
  void **v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  int v75;
  uint64_t v76;
  int v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  _QWORD *v95;
  void **v96;
  uint64_t v97;
  uint64_t *v98;
  __int128 v99;
  __int128 v100;
  int v101;
  uint64_t v102;

  v2 = a2;
  v102 = *MEMORY[0x24BDAC8D0];
  if (*(int *)(a1 + 8) > 2147446783)
    LODWORD(v3) = 1;
  else
    LODWORD(v3) = *(_DWORD *)(a1 + 8);
  v4 = *a2;
  v5 = -1030792151 * ((a2[1] - *a2) >> 3) - 1;
  v6 = (void **)operator new(0x180uLL);
  v7 = v6;
  v8 = 0uLL;
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_OWORD *)v6 + 18) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  if (!(_DWORD)v5)
    goto LABEL_43;
  v9 = 0;
  v96 = v6;
  v97 = v5;
  v95 = v2;
  do
  {
    v11 = *v2 + 200 * v9;
    if (*(_DWORD *)(v11 + 16) == 0x3FFF)
      goto LABEL_8;
    v12 = (*(_DWORD *)(v11 + 12) >> 5) + 8 * *(unsigned __int8 *)(v11 + 24);
    v13 = &v7[3 * v12];
    v14 = (int64x2_t *)*v13;
    v16 = (uint64_t *)(v13 + 1);
    v15 = (unint64_t *)v13[1];
    v17 = v9 >> 5;
    if (*v13 == v15)
      goto LABEL_20;
    v18 = (char *)v15 - (char *)v14 - 8;
    if (v18 >= 0x18)
    {
      v21 = (v18 >> 3) + 1;
      v20 = (unint64_t *)v14 + (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v22 = vdupq_n_s64(v17);
      v23 = v14 + 1;
      v24 = 0uLL;
      v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      v26 = 0uLL;
      do
      {
        v24 = vsubq_s64(v24, vceqq_s64(v23[-1], v22));
        v26 = vsubq_s64(v26, vceqq_s64(*v23, v22));
        v23 += 2;
        v25 -= 4;
      }
      while (v25);
      v19 = vaddvq_s64(vaddq_s64(v26, v24));
      if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_19;
    }
    else
    {
      v19 = 0;
      v20 = (unint64_t *)*v13;
    }
    do
    {
      v27 = *v20++;
      if (v27 == v17)
        ++v19;
    }
    while (v20 != v15);
LABEL_19:
    if (!v19)
    {
LABEL_20:
      v28 = &v7[3 * v12];
      v31 = (unint64_t)v28[2];
      v29 = v28 + 2;
      v30 = v31;
      if ((unint64_t)v15 >= v31)
      {
        v98 = (uint64_t *)(v13 + 1);
        v32 = ((char *)v15 - (char *)v14) >> 3;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
          sub_20E78D874();
        v34 = v30 - (_QWORD)v14;
        if (v34 >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          if (v35 >> 61)
            sub_20E78D888();
          v36 = v29;
          v37 = (char *)v13;
          v38 = v35;
          v39 = operator new(8 * v35);
          v8 = 0uLL;
          v13 = (void **)v37;
          v29 = v36;
          v35 = v38;
          v40 = (unint64_t *)&v39[8 * v32];
          *v40 = v17;
          v10 = (uint64_t)(v40 + 1);
          if (v14 != (int64x2_t *)v15)
          {
LABEL_30:
            v41 = (char *)(v15 - 1) - (char *)v14;
            if (v41 < 0x58)
            {
              v2 = v95;
              v7 = v96;
              v5 = v97;
              goto LABEL_38;
            }
            v2 = v95;
            v7 = v96;
            v5 = v97;
            if ((unint64_t)((char *)v14 - v39) < 0x20)
              goto LABEL_103;
            v42 = (v41 >> 3) + 1;
            v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
            v44 = &v15[v43 / 0xFFFFFFFFFFFFFFF8];
            v40 = (unint64_t *)((char *)v40 - v43);
            v45 = &v39[8 * v32 - 16];
            v46 = v15 - 2;
            v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v48 = *(_OWORD *)v46;
              *(v45 - 1) = *((_OWORD *)v46 - 1);
              *v45 = v48;
              v45 -= 2;
              v46 -= 4;
              v47 -= 4;
            }
            while (v47);
            v15 = v44;
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_103:
              do
              {
LABEL_38:
                v49 = *--v15;
                *--v40 = v49;
              }
              while (v15 != (unint64_t *)v14);
            }
LABEL_39:
            *v13 = v40;
            v16 = v98;
            *v98 = v10;
            *v29 = &v39[8 * v35];
            if (v14)
            {
              operator delete(v14);
              v8 = 0uLL;
            }
LABEL_7:
            *v16 = v10;
            goto LABEL_8;
          }
        }
        else
        {
          v39 = 0;
          v40 = (unint64_t *)(8 * v32);
          *(_QWORD *)(8 * v32) = v17;
          v10 = 8 * v32 + 8;
          if (v14 != (int64x2_t *)v15)
            goto LABEL_30;
        }
        v2 = v95;
        v7 = v96;
        v5 = v97;
        goto LABEL_39;
      }
      *v15 = v17;
      v10 = (uint64_t)(v15 + 1);
      goto LABEL_7;
    }
LABEL_8:
    ++v9;
  }
  while (v9 != v5);
  v4 = *v2;
LABEL_43:
  for (i = 0; i != 16; ++i)
  {
    v101 = 0;
    v99 = v8;
    v100 = v8;
    v51 = &v7[3 * i];
    v52 = *v51;
    v53 = v51[1];
    if (v52 == v53)
    {
      v66 = 0;
      v65 = 0;
      v64 = 0;
      v62 = 0;
      v63 = 0;
      v60 = 0;
      v61 = 0;
      v54 = 0;
      v67 = 0;
    }
    else
    {
      v54 = 0;
      v55 = v52;
      do
      {
LABEL_47:
        v56 = 0;
        v57 = 32 * *v55;
        do
        {
          v58 = v4 + 200 * (v57 + v56);
          if (*(_DWORD *)(v58 + 16) == 0x3FFF)
          {
            v54 += v56;
            if (++v55 == v53)
              goto LABEL_51;
            goto LABEL_47;
          }
          v59 = 4 * (*(_DWORD *)(v58 + 20) + 1);
          ++*(_DWORD *)((char *)&v99 + v59);
          ++v56;
        }
        while (v56 != 32);
        v54 += 32;
        ++v55;
      }
      while (v55 != v53);
LABEL_51:
      v61 = DWORD2(v99);
      v60 = HIDWORD(v99);
      v63 = v100;
      v62 = DWORD1(v100);
      v64 = DWORD2(v100);
      v65 = HIDWORD(v100);
      v66 = v101;
      v67 = DWORD1(v99) + v99;
    }
    DWORD1(v99) = v67;
    DWORD2(v99) = v61 + v67;
    HIDWORD(v99) = v60 + v61 + v67;
    LODWORD(v100) = v63 + HIDWORD(v99);
    DWORD1(v100) = v62 + v63 + HIDWORD(v99);
    DWORD2(v100) = v64 + DWORD1(v100);
    HIDWORD(v100) = v65 + v64 + DWORD1(v100);
    v101 = v66 + HIDWORD(v100);
    if (v52 == v53)
    {
      v69 = 0;
    }
    else
    {
      v68 = 0;
      do
      {
        v70 = 0;
        v71 = 32 * *v52;
        v69 = v68 + 32;
        while (1)
        {
          v72 = v4 + 200 * (v71 + v70);
          if (*(_DWORD *)(v72 + 16) == 0x3FFF)
            break;
          v73 = v4 + 200 * (v71 + v70);
          v75 = *(_DWORD *)(v73 + 128);
          v74 = (_DWORD *)(v73 + 128);
          if (!v75)
          {
            v76 = 4 * *(unsigned int *)(v72 + 20);
            v77 = *(_DWORD *)((char *)&v99 + v76);
            *v74 = 3 * v77 + v3;
            *(_DWORD *)((char *)&v99 + v76) = v77 + 1;
          }
          if (++v70 == 32)
            goto LABEL_56;
        }
        v69 = v68 + v70;
LABEL_56:
        ++v52;
        v68 = v69;
      }
      while (v52 != v53);
    }
    if (v54 != v69)
    {
      sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/DescriptorTidAssignment.cpp", 106, "total_count == assigned_tids && \"total count should be same\"", (void (*)(void *))sub_20E803DA4);
      abort();
    }
    v3 = (3 * v54 + v3);
  }
  v78 = v7[45];
  if (v78)
  {
    v7[46] = v78;
    operator delete(v78);
  }
  v79 = v7[42];
  if (v79)
  {
    v7[43] = v79;
    operator delete(v79);
  }
  v80 = v7[39];
  if (v80)
  {
    v7[40] = v80;
    operator delete(v80);
  }
  v81 = v7[36];
  if (v81)
  {
    v7[37] = v81;
    operator delete(v81);
  }
  v82 = v7[33];
  if (v82)
  {
    v7[34] = v82;
    operator delete(v82);
  }
  v83 = v7[30];
  if (v83)
  {
    v7[31] = v83;
    operator delete(v83);
  }
  v84 = v7[27];
  if (v84)
  {
    v7[28] = v84;
    operator delete(v84);
  }
  v85 = v7[24];
  if (v85)
  {
    v7[25] = v85;
    operator delete(v85);
  }
  v86 = v7[21];
  if (v86)
  {
    v7[22] = v86;
    operator delete(v86);
  }
  v87 = v7[18];
  if (v87)
  {
    v7[19] = v87;
    operator delete(v87);
  }
  v88 = v7[15];
  if (v88)
  {
    v7[16] = v88;
    operator delete(v88);
  }
  v89 = v7[12];
  if (v89)
  {
    v7[13] = v89;
    operator delete(v89);
  }
  v90 = v7[9];
  if (v90)
  {
    v7[10] = v90;
    operator delete(v90);
  }
  v91 = v7[6];
  if (v91)
  {
    v7[7] = v91;
    operator delete(v91);
  }
  v92 = v7[3];
  if (v92)
  {
    v7[4] = v92;
    operator delete(v92);
  }
  v93 = *v7;
  if (*v7)
  {
    v7[1] = v93;
    operator delete(v93);
  }
  operator delete(v7);
  return v3;
}

void sub_20E7DBD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7DBD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7DBD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E791F00((void **)va);
  _Unwind_Resume(a1);
}

void sub_20E7DBDB0()
{
  JUMPOUT(0x212BC47D4);
}

int64x2_t *sub_20E7DBDC4(int64x2_t *a1, int64x2_t *a2)
{
  uint64_t *i64;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  int64x2_t v8;
  int64x2_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void *v15;
  void (***v16)(_QWORD);
  void (***v17)(_QWORD);
  void (**v18)(_QWORD);
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  void (***v23)(_QWORD);
  void (***v24)(_QWORD);
  void *v25;
  void (***v26)(_QWORD);
  void (***v27)(_QWORD);
  void (**v28)(_QWORD);
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  void (***v32)(_QWORD);
  void (***v33)(_QWORD);
  void *v34;
  void (***v35)(_QWORD);
  void (***v36)(_QWORD);
  void (**v37)(_QWORD);
  uint64_t v38;
  int64x2_t v39;
  int64x2_t v40;
  uint64_t v41;
  int64x2_t v42;
  int64x2_t v43;
  uint64_t v44;
  _QWORD *v45;
  int64x2_t v47;

  *a1 = (int64x2_t)xmmword_20E80E520;
  a1[1] = vdupq_n_s64(3uLL);
  a1[2].i64[0] = 1;
  a1[3].i64[0] = 0;
  i64 = a1[3].i64;
  a1[3].i64[1] = 0;
  v5 = &a1[3].i64[1];
  a1[4].i64[0] = 0;
  v6 = a1[4].i64;
  a1[2].i16[4] = 0;
  a1[4].i64[1] = (uint64_t)&off_24C9A8E68;
  v7 = &a1[4].i64[1];
  a1[5].i8[0] = 0;
  a1[11].i8[8] = 0;
  *(int64x2_t *)((char *)&a1[5] + 8) = 0u;
  *(int64x2_t *)((char *)&a1[6] + 8) = 0u;
  *(int64x2_t *)((char *)&a1[7] + 8) = 0u;
  *(int64x2_t *)((char *)&a1[8] + 8) = 0u;
  *(int64x2_t *)((char *)&a1[9] + 8) = 0u;
  *(int64x2_t *)((char *)&a1[10] + 1) = 0u;
  a1[12].i64[1] = 0;
  a1[13].i64[0] = 0;
  a1[12].i64[0] = 0;
  v8 = *a2;
  v9 = a2[2];
  a1[1] = a2[1];
  a1[2] = v9;
  *a1 = v8;
  if (!sub_20E7E1C4C((unint64_t *)a2))
  {
    sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/Hardware/src/GaussianPyramidGenerator.cpp", 34, "IsGaussianPyramidGeneratorConfigValid(config) && \"Invalid configuration\"", (void (*)(void *))sub_20E803DA4);
    abort();
  }
  v10 = operator new();
  *(_OWORD *)v10 = xmmword_20E80E520;
  *(int64x2_t *)(v10 + 16) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v10 + 32) = 1;
  *(_QWORD *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 41) = 0;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  v11 = (_QWORD *)*i64;
  *i64 = v10;
  if (v11)
  {
    v12 = (void *)v11[9];
    if (v12)
    {
      v11[10] = v12;
      operator delete(v12);
    }
    v13 = (void (***)(_QWORD))v11[6];
    if (v13)
    {
      v14 = (void (***)(_QWORD))v11[7];
      v15 = (void *)v11[6];
      if (v14 != v13)
      {
        v16 = v14 - 18;
        v17 = v14 - 18;
        do
        {
          v18 = *v17;
          v17 -= 18;
          (*v18)(v16);
          v19 = v16 == v13;
          v16 = v17;
        }
        while (!v19);
        v15 = (void *)v11[6];
      }
      v11[7] = v13;
      operator delete(v15);
    }
    MEMORY[0x212BC47D4](v11, 0x1020C4024B85F43);
  }
  v20 = operator new();
  *(_OWORD *)v20 = xmmword_20E80E520;
  *(int64x2_t *)(v20 + 16) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v20 + 32) = 1;
  *(_QWORD *)(v20 + 40) = 0;
  *(_BYTE *)(v20 + 41) = 0;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 80) = 0u;
  v21 = (_QWORD *)*v5;
  *v5 = v20;
  if (v21)
  {
    v22 = (void *)v21[9];
    if (v22)
    {
      v21[10] = v22;
      operator delete(v22);
    }
    v23 = (void (***)(_QWORD))v21[6];
    if (v23)
    {
      v24 = (void (***)(_QWORD))v21[7];
      v25 = (void *)v21[6];
      if (v24 != v23)
      {
        v26 = v24 - 18;
        v27 = v24 - 18;
        do
        {
          v28 = *v27;
          v27 -= 18;
          (*v28)(v26);
          v19 = v26 == v23;
          v26 = v27;
        }
        while (!v19);
        v25 = (void *)v21[6];
      }
      v21[7] = v23;
      operator delete(v25);
    }
    MEMORY[0x212BC47D4](v21, 0x1020C4024B85F43);
  }
  v29 = operator new();
  *(_OWORD *)v29 = xmmword_20E80E520;
  *(int64x2_t *)(v29 + 16) = vdupq_n_s64(3uLL);
  *(_QWORD *)(v29 + 32) = 1;
  *(_QWORD *)(v29 + 40) = 0;
  *(_BYTE *)(v29 + 41) = 0;
  *(_OWORD *)(v29 + 48) = 0u;
  *(_OWORD *)(v29 + 64) = 0u;
  *(_OWORD *)(v29 + 80) = 0u;
  v30 = (_QWORD *)*v6;
  *v6 = v29;
  if (v30)
  {
    v31 = (void *)v30[9];
    if (v31)
    {
      v30[10] = v31;
      operator delete(v31);
    }
    v32 = (void (***)(_QWORD))v30[6];
    if (v32)
    {
      v33 = (void (***)(_QWORD))v30[7];
      v34 = (void *)v30[6];
      if (v33 != v32)
      {
        v35 = v33 - 18;
        v36 = v33 - 18;
        do
        {
          v37 = *v36;
          v36 -= 18;
          (*v37)(v35);
          v19 = v35 == v32;
          v35 = v36;
        }
        while (!v19);
        v34 = (void *)v30[6];
      }
      v30[7] = v32;
      operator delete(v34);
    }
    MEMORY[0x212BC47D4](v30, 0x1020C4024B85F43);
  }
  v38 = a1[3].i64[0];
  v39 = *a1;
  v40 = a1[1];
  *(int64x2_t *)(v38 + 26) = *(int64x2_t *)((char *)a1 + 26);
  *(int64x2_t *)v38 = v39;
  *(int64x2_t *)(v38 + 16) = v40;
  sub_20E7DF0A4((vImagePixelCount *)v38);
  v41 = a1[3].i64[1];
  v42 = *a1;
  v43 = a1[1];
  *(int64x2_t *)(v41 + 26) = *(int64x2_t *)((char *)a1 + 26);
  *(int64x2_t *)v41 = v42;
  *(int64x2_t *)(v41 + 16) = v43;
  sub_20E7E034C((vImagePixelCount *)v41);
  v44 = a2[1].i64[0];
  v47 = a2[2];
  v45 = (_QWORD *)*v6;
  *(uint64x2_t *)v45 = vshrq_n_u64((uint64x2_t)vaddq_s64(*a2, vdupq_n_s64(1uLL)), 1uLL);
  v45[2] = v44 - 1;
  v45[3] = 1;
  *((_WORD *)v45 + 20) = v47.i16[4];
  v45[4] = v47.i64[0];
  sub_20E7DF0A4(v45);
  sub_20E7DC1C4(v7, a1->i64[0], a1->i64[0], 3uLL, 1, 0, 0);
  return a1;
}

void sub_20E7DC194(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  sub_20E7DC338(v4);
  sub_20E7DC400(v3);
  sub_20E7DC400(v2);
  sub_20E7DC400(v1);
  _Unwind_Resume(a1);
}

void sub_20E7DC1C4(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;

  a1[4] = a2;
  a1[5] = a3;
  a1[6] = a4;
  a1[2] = a5;
  v14 = operator new[]();
  *(_QWORD *)&v21 = v14;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24C9A8F38;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v14;
  *((_QWORD *)&v21 + 1) = v15;
  LOBYTE(v19) = 0;
  v20 = 0;
  sub_20E7E163C((uint64_t)a1, &v21, a2, a3, a4, a5, a6, a7, &v19);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20E7DC2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E7858BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E7DC300(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  MEMORY[0x212BC47A4](v1, 0x1000C8052888210);
  __cxa_rethrow();
}

void sub_20E7DC324(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20E7DC338(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24C9A8E68;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[12];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)a1[10];
      if (v6)
        goto LABEL_8;
      return a1;
    }
  }
  v6 = (std::__shared_weak_count *)a1[10];
  if (!v6)
    return a1;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

_QWORD *sub_20E7DC400(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void *v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (**v9)(_QWORD);
  BOOL v10;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[9];
    if (v3)
    {
      v2[10] = v3;
      operator delete(v3);
    }
    v4 = (void (***)(_QWORD))v2[6];
    if (v4)
    {
      v5 = (void (***)(_QWORD))v2[7];
      v6 = (void *)v2[6];
      if (v5 != v4)
      {
        v7 = v5 - 18;
        v8 = v5 - 18;
        do
        {
          v9 = *v8;
          v8 -= 18;
          (*v9)(v7);
          v10 = v7 == v4;
          v7 = v8;
        }
        while (!v10);
        v6 = (void *)v2[6];
      }
      v2[7] = v4;
      operator delete(v6);
    }
    MEMORY[0x212BC47D4](v2, 0x1020C4024B85F43);
  }
  return a1;
}

unsigned __int8 *sub_20E7DC4B0(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int8x16_t v22;
  unsigned __int8 *result;
  int v24;
  __int16 v25;
  __int128 v26;
  __int16 v27;
  __int128 v28;
  __int16 v29;

  v29 = 0;
  v28 = xmmword_20E80EFA0;
  v26 = xmmword_20E80EFB2;
  v27 = 3;
  v13 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  sub_20E7DC5F0(*(int8x16_t **)(a2 + 72), *(unsigned int **)(a1 + 144), *(_WORD **)(*(_QWORD *)(v12 + 48) + 72), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 40), *(_QWORD *)(a2 + 48), (unsigned __int16 *)&v28, 1.5131222e-306, a4, a5, a6, a7, a8, a9, a10);
  sub_20E7E1BE0(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 72), *(_QWORD *)(*(_QWORD *)(v13 + 48) + 72), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 32), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 40), *(_QWORD *)(*(_QWORD *)(v13 + 48) + 40), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 48));
  sub_20E7DC5F0(*(int8x16_t **)(a2 + 72), *(unsigned int **)(a1 + 144), *(_WORD **)(*(_QWORD *)(v12 + 48) + 216), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 184), *(_QWORD *)(a2 + 48), (unsigned __int16 *)&v26, v15, v16, v17, v18, v19, v20, v21, v22);
  result = (unsigned __int8 *)sub_20E7E1BE0(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 216), *(_QWORD *)(*(_QWORD *)(v13 + 48) + 216), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 176), *(_QWORD *)(*(_QWORD *)(v12 + 48) + 184), *(_QWORD *)(*(_QWORD *)(v13 + 48) + 184), *(_QWORD *)(a2 + 48));
  if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16) >= 2uLL)
  {
    v25 = 109;
    v24 = 19267693;
    return sub_20E7DDD30(*(unsigned __int8 **)(a2 + 72), *(unsigned int **)(a1 + 144), *(_QWORD *)(*(_QWORD *)(v14 + 48) + 72), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 40), *(_DWORD *)(*(_QWORD *)(v14 + 48) + 40), *(_DWORD *)(a2 + 48), (const __int16 *)&v24);
  }
  return result;
}

uint64_t sub_20E7DC5F0(int8x16_t *a1, unsigned int *a2, _WORD *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, int8x16_t a16)
{
  int32x4_t v16;
  int32x4_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t result;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  _WORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int8x16_t *v54;
  int32x4_t *v55;
  int32x4_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int8x16_t v69;
  unint64_t v70;
  int8x16_t *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  int32x4_t *v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  unint64_t v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  unsigned int *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  unint64_t v111;
  unsigned __int8 *v112;
  int8x16_t v113;
  int8x16_t v114;
  int32x4_t v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unint64_t v121;
  int8x16_t *v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  uint16x8_t v132;
  unint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unint64_t v136;
  int8x16_t *v137;
  unsigned int *v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int8x16_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int8x16_t v154;
  uint32x4_t v155;
  uint32x4_t v156;
  uint8x16_t v157;
  uint16x8_t v158;
  uint16x8_t v159;
  uint64_t v160;
  int8x16_t *v161;
  unint64_t v162;
  unsigned __int8 *v163;
  unsigned __int8 *v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  unsigned int *v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  uint32x4_t v180;
  unint64_t v181;
  int8x16_t *v182;
  int8x16_t *v183;
  int8x16_t *v184;
  unsigned int *v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  int v194;
  int v195;
  int v196;
  unsigned int v197;
  int v198;
  int v199;
  int v200;
  unsigned int v201;
  int v202;
  unsigned __int8 *v203;
  int8x16_t v204;
  int8x16_t v205;
  int32x4_t v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unint64_t v212;
  int8x16_t *v213;
  unsigned __int8 *v214;
  unsigned __int8 *v215;
  unsigned __int8 *v216;
  unsigned __int8 *v217;
  unsigned __int8 *v218;
  unsigned __int8 *v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int16x8_t v223;
  uint16x8_t v224;
  unint64_t v225;
  unint64_t v226;
  int8x16_t *v227;
  unsigned int *v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int8x16_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int8x16_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int8x16_t v240;
  uint32x4_t v241;
  uint32x4_t v242;
  uint32x4_t v243;
  uint8x16_t v244;
  uint8x16_t v245;
  uint16x8_t v246;
  uint16x8_t v247;
  uint32x4_t v248;
  uint32x4_t v249;
  uint8x16_t v250;
  uint16x8_t v251;
  uint16x8_t v252;
  int8x16_t *v253;
  uint16x8_t v254;
  unint64_t v255;
  unsigned __int8 *v256;
  unsigned __int8 *v257;
  unsigned __int8 *v258;
  unsigned __int8 *v259;
  unsigned __int8 *v260;
  unsigned __int8 *v261;
  unsigned int *v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  uint32x4_t v271;
  uint16x8_t v272;
  uint32x4_t v273;
  uint32x4_t v274;
  unint64_t v275;
  int8x16_t *v276;
  int8x16_t *v277;
  unsigned int *v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  int v288;
  int v289;
  unsigned int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  int v295;
  int8x16_t v296;
  int8x16_t v297;
  int32x4_t v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unint64_t v304;
  int8x16_t *v305;
  unsigned __int8 *v306;
  unsigned __int8 *v307;
  unsigned __int8 *v308;
  unsigned __int8 *v309;
  unsigned __int8 *v310;
  unsigned __int8 *v311;
  unsigned __int8 *v312;
  int32x4_t v313;
  int32x4_t v314;
  int16x8_t v315;
  int16x8_t v316;
  uint16x8_t v317;
  unsigned __int8 *v318;
  unint64_t v319;
  unint64_t v320;
  uint16x8_t v321;
  unsigned int *v322;
  int8x16_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int32x4_t v327;
  int8x16_t v328;
  int32x4_t v329;
  int8x16_t v330;
  uint32x4_t v331;
  uint32x4_t v332;
  uint32x4_t v333;
  uint8x16_t v334;
  uint8x16_t v335;
  uint16x8_t v336;
  uint16x8_t v337;
  uint32x4_t v338;
  uint32x4_t v339;
  uint32x4_t v340;
  uint8x16_t v341;
  uint32x4_t v342;
  uint8x16_t v343;
  uint16x8_t v344;
  uint16x8_t v345;
  uint32x4_t v346;
  uint32x4_t v347;
  uint8x16_t v348;
  uint16x8_t v349;
  uint16x8_t v350;
  int8x16_t *v351;
  uint16x8_t v352;
  uint16x8_t v353;
  unint64_t v354;
  unsigned int *v355;
  int32x4_t v356;
  int32x4_t v357;
  int32x4_t v358;
  int32x4_t v359;
  uint32x4_t v360;
  uint16x8_t v361;
  uint32x4_t v362;
  uint32x4_t v363;
  uint16x8_t v364;
  uint32x4_t v365;
  uint32x4_t v366;
  unint64_t v367;
  unsigned int *v368;
  int8x16_t *v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  unsigned int v377;
  int v378;
  int v379;
  int v380;
  unsigned int v381;
  int v382;
  int v383;
  int v384;
  unsigned int v385;
  int v386;
  _WORD *v387;
  uint64_t v388;
  uint64_t v389;
  __int8 *v390;
  __int8 *v391;
  __int8 *v392;
  __int8 *v393;
  __int8 *v394;
  __int8 *v395;
  __int8 *v396;
  unsigned __int16 *v397;
  __int8 *v398;
  uint64_t v399;
  int8x16_t *v400;
  int8x16_t *v401;
  int8x16_t *v402;
  int8x16_t *v403;
  int8x16_t *v404;
  int8x16_t *v405;
  int8x16_t *v406;
  int8x16_t *v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  int8x16_t *v412;
  unsigned int v413;
  unint64_t v414;
  unsigned __int8 *v415;
  int16x8_t v416;
  int16x8_t v417;
  int16x8_t v418;
  int16x8_t v419;
  uint16x8_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  uint32x4_t *v424;
  uint8x16_t v425;
  uint8x16_t v426;
  uint16x8_t v427;
  uint16x8_t v428;
  uint16x8_t v429;
  uint8x16_t v430;
  uint8x16_t v431;
  uint16x8_t v432;
  uint16x8_t v433;
  uint16x8_t v434;
  uint32x4_t v435;
  uint32x4_t v436;
  uint32x4_t v437;
  uint32x4_t v438;
  uint32x4_t v439;
  uint8x16_t v440;
  uint32x4_t v441;
  uint8x16_t v442;
  uint16x8_t v443;
  uint16x8_t v444;
  uint16x8_t v445;
  uint32x4_t v446;
  uint32x4_t v447;
  uint32x4_t v448;
  uint32x4_t v449;
  uint8x16_t v450;
  uint8x16_t v451;
  uint16x8_t v452;
  uint16x8_t v453;
  uint16x8_t v454;
  uint32x4_t v455;
  uint32x4_t v456;
  uint32x4_t v457;
  uint32x4_t v458;
  uint8x16_t v459;
  uint16x8_t v460;
  uint16x8_t v461;
  uint32x4_t *v462;
  uint16x8_t v463;
  uint16x8_t v464;
  uint16x8_t v465;
  uint16x8_t v466;
  uint32x4_t v467;
  uint32x4_t v468;
  uint32x4_t v469;
  uint16x8_t v470;
  uint16x8_t v471;
  uint32x4_t v472;
  uint32x4_t v473;
  uint16x8_t v474;
  uint16x8_t v475;
  uint32x4_t v476;
  uint32x4_t v477;
  uint16x8_t v478;
  unint64_t v479;
  unsigned int *v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  unsigned int v488;
  int v489;
  int v490;
  int v491;
  unsigned int v492;
  int v493;
  int v494;
  int v495;
  unsigned int v496;
  int v497;
  uint64_t v498;
  uint64_t v499;
  int8x16_t *v500;
  int8x16_t *v501;
  uint8x16_t *v502;
  uint8x16_t *v503;
  uint8x16_t *v504;
  uint8x16_t *v505;
  unint64_t v506;
  _WORD *v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  uint8x16_t *v511;
  uint8x16_t *v512;
  uint8x16_t *v513;
  uint8x16_t *v514;
  unsigned int v515;
  unsigned int v516;
  unsigned int v517;
  unsigned int v518;
  unsigned int v519;
  unint64_t v520;
  unsigned __int8 *v521;
  unsigned __int8 *v522;
  unsigned __int8 *v523;
  unsigned __int8 *v524;
  unsigned __int8 *v525;
  unsigned __int8 *v526;
  unsigned __int8 *v527;
  unsigned __int8 *v528;
  unsigned __int8 *v529;
  int16x8_t v530;
  int16x8_t v531;
  int16x8_t v532;
  int16x8_t v533;
  uint16x8_t v534;
  unint64_t v535;
  unint64_t v536;
  uint8x16_t *v537;
  uint8x16_t *v538;
  uint8x16_t *v539;
  uint8x16_t *v540;
  uint8x16_t *v541;
  uint8x16_t *v542;
  uint8x16_t *v543;
  uint8x16_t *v544;
  uint8x16_t *v545;
  uint32x4_t *v546;
  uint8x16_t v547;
  uint8x16_t v548;
  uint8x16_t v549;
  uint16x8_t v550;
  uint16x8_t v551;
  uint8x16_t v552;
  uint8x16_t v553;
  uint8x16_t v554;
  uint16x8_t v555;
  uint16x8_t v556;
  uint16x8_t v557;
  uint16x8_t v558;
  uint32x4_t v559;
  uint32x4_t v560;
  uint32x4_t v561;
  uint32x4_t v562;
  uint32x4_t v563;
  uint32x4_t v564;
  uint8x16_t v565;
  uint8x16_t v566;
  uint8x16_t v567;
  uint16x8_t v568;
  uint16x8_t v569;
  uint16x8_t v570;
  uint32x4_t v571;
  uint32x4_t v572;
  uint32x4_t v573;
  uint8x16_t v574;
  uint8x16_t v575;
  uint32x4_t v576;
  uint8x16_t v577;
  uint16x8_t v578;
  uint16x8_t v579;
  uint16x8_t v580;
  uint32x4_t v581;
  uint32x4_t v582;
  uint32x4_t v583;
  uint32x4_t v584;
  uint8x16_t v585;
  uint16x8_t v586;
  uint16x8_t v587;
  unint64_t v588;
  uint8x16_t *v589;
  uint8x16_t *v590;
  uint8x16_t *v591;
  uint8x16_t *v592;
  uint8x16_t *v593;
  int8x16_t *v594;
  uint8x16_t *v595;
  uint32x4_t *v596;
  uint16x8_t v597;
  uint16x8_t v598;
  uint16x8_t v599;
  uint16x8_t v600;
  uint32x4_t v601;
  uint32x4_t v602;
  uint32x4_t v603;
  uint16x8_t v604;
  uint16x8_t v605;
  uint32x4_t v606;
  uint32x4_t v607;
  uint16x8_t v608;
  uint16x8_t v609;
  uint32x4_t v610;
  uint32x4_t v611;
  uint16x8_t v612;
  unint64_t v613;
  unsigned int *v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  unsigned int v622;
  int v623;
  int v624;
  int v625;
  unsigned int v626;
  int v627;
  int v628;
  int v629;
  unsigned int v630;
  int v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  unint64_t v635;
  unint64_t v636;
  uint64_t v637;
  unint64_t v638;
  uint64_t v640;
  _WORD *v642;
  _WORD *v643;
  _WORD *v644;
  unint64_t v645;
  _WORD *v647;
  _WORD *v648;
  int8x16_t *v649;
  int8x16_t *v650;
  uint64_t v651;
  uint8x16_t *v652;
  _WORD *v653;
  uint8x16_t *v654;
  uint64_t v655;
  uint64_t v656;
  uint8x16_t *v657;
  uint8x16_t *v659;
  unsigned __int8 *v660;
  uint64_t v661;
  uint8x16_t *v662;
  _QWORD v664[5];

  v18 = a8;
  v19 = a7;
  v20 = a6;
  v21 = a4;
  v22 = a3;
  v23 = a7 * a6;
  v24 = (int)a5;
  v25 = &a1->u8[(int)a5];
  v649 = a1;
  v26 = a4;
  v27 = 2 * v20;
  v640 = v20;
  v645 = a4;
  v632 = (int)a5;
  v655 = v23;
  if (!a4)
  {
    sub_20E7E183C(a3, a2, 0, a8);
    sub_20E7E183C((_WORD *)((char *)v22 + v27), a2, 0, v18);
    sub_20E7E183C((_WORD *)((char *)v22 + v27 + v27), a2, 0, v18);
    result = sub_20E7E183C((_WORD *)((char *)v22 + v27 + v27 + v27), a2, 0, v18);
    goto LABEL_64;
  }
  v651 = 2 * v20;
  v28 = &v25[(int)a5];
  v29 = &v28[(int)a5];
  v30 = &v29[(int)a5];
  v31 = &v30[(int)a5];
  v32 = *a8;
  v33 = a8[1];
  v34 = a8[2];
  v35 = a8[3];
  v36 = a8[4];
  v660 = v31;
  if (a4 < 8uLL)
  {
    v37 = 0;
    v38 = (unsigned __int8 *)a1;
    v39 = &v29[(int)a5];
    v40 = &v25[(int)a5 + (int)a5];
    v41 = &v25[(int)a5];
    v42 = &a1->u8[(int)a5];
    goto LABEL_16;
  }
  v45 = vdupq_n_s32(v32);
  v46 = vdupq_n_s32(v33);
  v47 = vdupq_n_s32(v34);
  v48 = vdupq_n_s32(v35);
  v49 = vdupq_n_s32(v36);
  if (a4 >= 0x10uLL)
  {
    v52 = a4 & 0xF;
    v37 = a4 - v52;
    a16.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    v53 = v37;
    v54 = v649;
    v55 = (int32x4_t *)a2;
    do
    {
      v56 = (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_20E80EF40);
      v16 = (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_20E80EF50);
      v57 = (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_20E80EF60);
      v58 = *(int8x16_t *)((char *)v54 + 4 * v24);
      v17 = (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_20E80EF70);
      v59 = *(int8x16_t *)((char *)v54 + 3 * v24);
      v60 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_20E80EF70), v17), v45), vaddq_s32((int32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_20E80EF70), v17), v46);
      v61 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_20E80EF60), v57), v45), vaddq_s32((int32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_20E80EF60), v57), v46);
      v62 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_20E80EF50), v16), v45), vaddq_s32((int32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_20E80EF50), v16), v46);
      v63 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_20E80EF40), v56), v45), vaddq_s32((int32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_20E80EF40), v56), v46);
      v64 = *(int8x16_t *)((char *)v54 + 2 * v24);
      v65 = (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_20E80EF70);
      v66 = vmlaq_s32(v63, vaddq_s32((int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_20E80EF40), v56), v47);
      v67 = vmlaq_s32(v62, vaddq_s32((int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_20E80EF50), v16), v47);
      v68 = vmlaq_s32(v61, vaddq_s32((int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_20E80EF60), v57), v47);
      v69 = *(int8x16_t *)((char *)v54 + v24);
      v55[2] = vmlaq_s32(vmlaq_s32(v68, vaddq_s32((int32x4_t)vqtbl1q_s8(v69, (int8x16_t)xmmword_20E80EF60), v57), v48), v49, v57);
      v55[3] = vmlaq_s32(vmlaq_s32(vmlaq_s32(v60, vaddq_s32(v65, v17), v47), vaddq_s32((int32x4_t)vqtbl1q_s8(v69, (int8x16_t)xmmword_20E80EF70), v17), v48), v49, v17);
      *v55 = vmlaq_s32(vmlaq_s32(v66, vaddq_s32((int32x4_t)vqtbl1q_s8(v69, (int8x16_t)xmmword_20E80EF40), v56), v48), v49, v56);
      v55[1] = vmlaq_s32(vmlaq_s32(v67, vaddq_s32((int32x4_t)vqtbl1q_s8(v69, (int8x16_t)xmmword_20E80EF50), v16), v48), v49, v16);
      v55 += 4;
      ++v54;
      v53 -= 16;
    }
    while (v53);
    if (!v52)
      goto LABEL_18;
    if (v52 < 8)
    {
      v38 = &v649->u8[v37];
      v42 = &v25[v37];
      v41 = &v28[v37];
      v40 = &v29[v37];
      v39 = &v30[v37];
LABEL_16:
      v88 = v26 - v37;
      v89 = v38;
      v90 = v38;
      v91 = v38;
      v92 = v38;
      v93 = &a2[v37];
      do
      {
        v95 = *v38++;
        v94 = v95;
        v96 = *v39++;
        v97 = (v96 + v94) * v32;
        v99 = *v89++;
        v98 = v99;
        v100 = *v40++;
        v101 = v97 + (v100 + v98) * v33;
        v103 = *v90++;
        v102 = v103;
        v104 = *v41++;
        v105 = v101 + (v104 + v102) * v34;
        v107 = *v92++;
        v106 = v107;
        v108 = *v42++;
        v109 = v105 + (v108 + v106) * v35;
        v110 = *v91++;
        *v93++ = v109 + v110 * v36;
        --v88;
      }
      while (v88);
      goto LABEL_18;
    }
    v50 = a3;
    v51 = v26 - (v21 & 0xF);
    LOBYTE(v21) = a4;
  }
  else
  {
    v50 = a3;
    v51 = 0;
  }
  v37 = v26 - (v21 & 7);
  v38 = &v649->u8[v37];
  v39 = &v30[v37];
  v40 = &v29[v37];
  v41 = &v28[v37];
  v42 = &v25[v37];
  v70 = v37;
  v71 = v649;
  v72 = &v29[v24];
  v73 = v29;
  v74 = v28;
  v75 = v25;
  v76 = (int32x4_t *)&a2[v51];
  do
  {
    a16.i64[0] = *(uint64_t *)((char *)v71->i64 + v51);
    v77 = (int32x4_t)vqtbl1q_s8(a16, (int8x16_t)xmmword_20E80EF40);
    a16 = vqtbl1q_s8(a16, (int8x16_t)xmmword_20E80EF50);
    v16.i64[0] = *(_QWORD *)&v72[v51];
    v78 = (int32x4_t)vqtbl1q_s8((int8x16_t)v16, (int8x16_t)xmmword_20E80EF40);
    v17.i64[0] = *(_QWORD *)&v73[v51];
    v79 = (int32x4_t)vqtbl1q_s8((int8x16_t)v17, (int8x16_t)xmmword_20E80EF40);
    v80 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v17, (int8x16_t)xmmword_20E80EF50), (int32x4_t)a16);
    v81 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v16, (int8x16_t)xmmword_20E80EF50), (int32x4_t)a16), v45), v80, v46);
    v82 = vmlaq_s32(vmulq_s32(vaddq_s32(v78, v77), v45), vaddq_s32(v79, v77), v46);
    v80.i64[0] = *(_QWORD *)&v74[v51];
    v83 = (int32x4_t)vqtbl1q_s8((int8x16_t)v80, (int8x16_t)xmmword_20E80EF50);
    v84 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v80, (int8x16_t)xmmword_20E80EF40), v77);
    v85 = vmlaq_s32(v82, v84, v47);
    v86 = vmlaq_s32(v81, vaddq_s32(v83, (int32x4_t)a16), v47);
    v84.i64[0] = *(_QWORD *)&v75[v51];
    v87 = (int32x4_t)vqtbl1q_s8((int8x16_t)v84, (int8x16_t)xmmword_20E80EF40);
    v17 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v84, (int8x16_t)xmmword_20E80EF50), (int32x4_t)a16);
    v16 = vmlaq_s32(vmlaq_s32(v86, v17, v48), v49, (int32x4_t)a16);
    *v76 = vmlaq_s32(vmlaq_s32(v85, vaddq_s32(v87, v77), v48), v49, v77);
    v76[1] = v16;
    v76 += 2;
    v75 += 8;
    v74 += 8;
    v73 += 8;
    v72 += 8;
    v71 = (int8x16_t *)((char *)v71 + 8);
    v70 -= 8;
  }
  while (v51 != v70);
  v22 = v50;
  v31 = v660;
  if ((v21 & 7) != 0)
    goto LABEL_16;
LABEL_18:
  v111 = v26;
  v112 = &v31[v632];
  sub_20E7E183C(v22, a2, a4, v18);
  v116 = *v18;
  v117 = v18[1];
  v118 = v18[2];
  v119 = v18[3];
  v120 = v18[4];
  v653 = v22;
  if (v111 < 8)
  {
    v121 = 0;
    v122 = v649;
    v123 = v31;
    v124 = v30;
    v125 = v29;
    v126 = v28;
    v127 = v25;
    v21 = a4;
    goto LABEL_31;
  }
  v128 = vdupq_n_s32(v116);
  v129 = vdupq_n_s32(v117);
  v130 = vdupq_n_s32(v118);
  v131 = vdupq_n_s32(v119);
  v132 = (uint16x8_t)vdupq_n_s16(v120);
  if (v111 >= 0x10)
  {
    v135 = a4 & 0xF;
    v121 = v111 - v135;
    v113.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    v136 = v111 - v135;
    v137 = v649;
    v138 = a2;
    do
    {
      v139 = (int32x4_t)vqtbl1q_s8(*v137, (int8x16_t)xmmword_20E80EF40);
      v140 = (int32x4_t)vqtbl1q_s8(*v137, (int8x16_t)xmmword_20E80EF50);
      v141 = (int32x4_t)vqtbl1q_s8(*v137, (int8x16_t)xmmword_20E80EF60);
      v142 = (int32x4_t)vqtbl1q_s8(*v137, (int8x16_t)xmmword_20E80EF70);
      v143 = *(int8x16_t *)((char *)v137 + 5 * v632);
      v144 = *(int8x16_t *)((char *)v137 + 4 * v632);
      v145 = (int32x4_t)vqtbl1q_s8(v144, (int8x16_t)xmmword_20E80EF40);
      v146 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v143, (int8x16_t)xmmword_20E80EF70), v142), v128), vaddq_s32((int32x4_t)vqtbl1q_s8(v144, (int8x16_t)xmmword_20E80EF70), v142), v129);
      v147 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v143, (int8x16_t)xmmword_20E80EF60), v141), v128), vaddq_s32((int32x4_t)vqtbl1q_s8(v144, (int8x16_t)xmmword_20E80EF60), v141), v129);
      v148 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v143, (int8x16_t)xmmword_20E80EF50), v140), v128), vaddq_s32((int32x4_t)vqtbl1q_s8(v144, (int8x16_t)xmmword_20E80EF50), v140), v129);
      v149 = *(int8x16_t *)((char *)v137 + 3 * v632);
      v150 = vmlaq_s32(vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v143, (int8x16_t)xmmword_20E80EF40), v139), v128), vaddq_s32(v145, v139), v129), vaddq_s32((int32x4_t)vqtbl1q_s8(v149, (int8x16_t)xmmword_20E80EF40), v139), v130);
      v151 = vmlaq_s32(v148, vaddq_s32((int32x4_t)vqtbl1q_s8(v149, (int8x16_t)xmmword_20E80EF50), v140), v130);
      v152 = vmlaq_s32(v147, vaddq_s32((int32x4_t)vqtbl1q_s8(v149, (int8x16_t)xmmword_20E80EF60), v141), v130);
      v153 = vmlaq_s32(v146, vaddq_s32((int32x4_t)vqtbl1q_s8(v149, (int8x16_t)xmmword_20E80EF70), v142), v130);
      v154 = *(int8x16_t *)((char *)v137 + 2 * v632);
      v155 = (uint32x4_t)vmlaq_s32(v151, vaddq_s32((int32x4_t)vqtbl1q_s8(v154, (int8x16_t)xmmword_20E80EF50), v140), v131);
      v156 = (uint32x4_t)vmlaq_s32(v150, vaddq_s32((int32x4_t)vqtbl1q_s8(v154, (int8x16_t)xmmword_20E80EF40), v139), v131);
      v157 = *(uint8x16_t *)((char *)v137 + v632);
      v158 = vmovl_high_u8(v157);
      v159 = vmovl_u8(*(uint8x8_t *)v157.i8);
      v114 = (int8x16_t)vmlal_u16(v156, *(uint16x4_t *)v132.i8, *(uint16x4_t *)v159.i8);
      v115 = (int32x4_t)vmlal_u16((uint32x4_t)vmlaq_s32(v152, vaddq_s32((int32x4_t)vqtbl1q_s8(v154, (int8x16_t)xmmword_20E80EF60), v141), v131), *(uint16x4_t *)v132.i8, *(uint16x4_t *)v158.i8);
      *((int32x4_t *)v138 + 2) = v115;
      *((uint32x4_t *)v138 + 3) = vmlal_high_u16((uint32x4_t)vmlaq_s32(v153, vaddq_s32((int32x4_t)vqtbl1q_s8(v154, (int8x16_t)xmmword_20E80EF70), v142), v131), v132, v158);
      *(int8x16_t *)v138 = v114;
      *((uint32x4_t *)v138 + 1) = vmlal_high_u16(v155, v132, v159);
      v138 += 16;
      ++v137;
      v136 -= 16;
    }
    while (v136);
    v134 = v660;
    v21 = a4;
    if ((a4 & 0xF) == 0)
      goto LABEL_33;
    if (v135 < 8)
    {
      v122 = (int8x16_t *)((char *)v649 + v121);
      v127 = &v25[v121];
      v126 = &v28[v121];
      v125 = &v29[v121];
      v124 = &v30[v121];
      v123 = &v660[v121];
LABEL_31:
      v181 = v645 - v121;
      v182 = v122;
      v183 = v122;
      v184 = v122;
      v185 = &a2[v121];
      do
      {
        v187 = v122->u8[0];
        v122 = (int8x16_t *)((char *)v122 + 1);
        v186 = v187;
        v188 = *v123++;
        v189 = (v188 + v186) * v116;
        v191 = v182->u8[0];
        v182 = (int8x16_t *)((char *)v182 + 1);
        v190 = v191;
        v192 = *v124++;
        v193 = v189 + (v192 + v190) * v117;
        v195 = v183->u8[0];
        v183 = (int8x16_t *)((char *)v183 + 1);
        v194 = v195;
        v196 = *v125++;
        v197 = v193 + (v196 + v194) * v118;
        v199 = v184->u8[0];
        v184 = (int8x16_t *)((char *)v184 + 1);
        v198 = v199;
        v200 = *v126++;
        v201 = v197 + (v200 + v198) * v119;
        v202 = *v127++;
        *v185++ = v201 + v202 * v120;
        --v181;
      }
      while (v181);
      goto LABEL_33;
    }
    v133 = v111 - v135;
  }
  else
  {
    v133 = 0;
    v134 = v660;
    LOBYTE(v21) = a4;
  }
  v160 = v21 & 7;
  v121 = v645 - v160;
  v161 = v649;
  v122 = (int8x16_t *)((char *)v649 + v121);
  v123 = &v660[v121];
  v124 = &v30[v121];
  v125 = &v29[v121];
  v126 = &v28[v121];
  v127 = &v25[v121];
  v162 = v121;
  v163 = v30;
  v164 = v29;
  v165 = v28;
  v166 = v25;
  v167 = &a2[v133];
  do
  {
    v113.i64[0] = *(uint64_t *)((char *)v161->i64 + v133);
    v168 = (int32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_20E80EF40);
    v169 = (int32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_20E80EF50);
    v114.i64[0] = *(_QWORD *)&v134[v133];
    v170 = (int32x4_t)vqtbl1q_s8(v114, (int8x16_t)xmmword_20E80EF40);
    v115.i64[0] = *(_QWORD *)&v163[v133];
    v171 = (int32x4_t)vqtbl1q_s8((int8x16_t)v115, (int8x16_t)xmmword_20E80EF40);
    v172 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v115, (int8x16_t)xmmword_20E80EF50), v169);
    v173 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v114, (int8x16_t)xmmword_20E80EF50), v169), v128), v172, v129);
    v174 = vmlaq_s32(vmulq_s32(vaddq_s32(v170, v168), v128), vaddq_s32(v171, v168), v129);
    v172.i64[0] = *(_QWORD *)&v164[v133];
    v175 = (int32x4_t)vqtbl1q_s8((int8x16_t)v172, (int8x16_t)xmmword_20E80EF50);
    v176 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v172, (int8x16_t)xmmword_20E80EF40), v168);
    v177 = vmlaq_s32(v174, v176, v130);
    v178 = vmlaq_s32(v173, vaddq_s32(v175, v169), v130);
    v176.i64[0] = *(_QWORD *)&v165[v133];
    v179 = (int32x4_t)vqtbl1q_s8((int8x16_t)v176, (int8x16_t)xmmword_20E80EF40);
    v115 = (int32x4_t)vqtbl1q_s8((int8x16_t)v176, (int8x16_t)xmmword_20E80EF50);
    v180 = (uint32x4_t)vmlaq_s32(v178, vaddq_s32(v115, v169), v131);
    v113 = (int8x16_t)vmovl_u8(*(uint8x8_t *)&v166[v133]);
    v114 = (int8x16_t)vmlal_high_u16(v180, v132, (uint16x8_t)v113);
    *(uint32x4_t *)v167 = vmlal_u16((uint32x4_t)vmlaq_s32(v177, vaddq_s32(v179, v168), v131), *(uint16x4_t *)v132.i8, *(uint16x4_t *)v113.i8);
    *((int8x16_t *)v167 + 1) = v114;
    v167 += 8;
    v166 += 8;
    v165 += 8;
    v164 += 8;
    v163 += 8;
    v134 += 8;
    v161 = (int8x16_t *)((char *)v161 + 8);
    v162 -= 8;
  }
  while (v133 != v162);
  v18 = a8;
  v21 = a4;
  if (v160)
    goto LABEL_31;
LABEL_33:
  v203 = &v112[v632];
  v642 = &v653[v20];
  sub_20E7E183C(v642, a2, v21, v18);
  v207 = *v18;
  v208 = v18[1];
  v209 = v18[2];
  v210 = v18[3];
  v211 = v18[4];
  if (v645 < 8)
  {
    v212 = 0;
    v213 = v649;
    v214 = &v31[v632];
    v215 = v660;
    v216 = v30;
    v217 = v29;
    v218 = v28;
    v219 = v25;
    goto LABEL_46;
  }
  v220 = vdupq_n_s32(v207);
  v221 = vdupq_n_s32(v208);
  v222 = vdupq_n_s32(v209);
  v223 = (int16x8_t)vdupq_n_s32(v210);
  v224 = (uint16x8_t)vdupq_n_s16(v211);
  if (v645 >= 0x10)
  {
    v212 = v645 - (v21 & 0xF);
    v204.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    v205 = (int8x16_t)vuzp1q_s16(v223, v223);
    v226 = v212;
    v227 = v649;
    v228 = a2;
    do
    {
      v229 = (int32x4_t)vqtbl1q_s8(*v227, (int8x16_t)xmmword_20E80EF40);
      v230 = (int32x4_t)vqtbl1q_s8(*v227, (int8x16_t)xmmword_20E80EF50);
      v231 = (int32x4_t)vqtbl1q_s8(*v227, (int8x16_t)xmmword_20E80EF60);
      v232 = *(int8x16_t *)((char *)v227 + 6 * v632);
      v233 = (int32x4_t)vqtbl1q_s8(*v227, (int8x16_t)xmmword_20E80EF70);
      v234 = (int32x4_t)vqtbl1q_s8(v232, (int8x16_t)xmmword_20E80EF40);
      v235 = *(int8x16_t *)((char *)v227 + 5 * v632);
      v236 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v232, (int8x16_t)xmmword_20E80EF70), v233), v220), vaddq_s32((int32x4_t)vqtbl1q_s8(v235, (int8x16_t)xmmword_20E80EF70), v233), v221);
      v237 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v232, (int8x16_t)xmmword_20E80EF60), v231), v220), vaddq_s32((int32x4_t)vqtbl1q_s8(v235, (int8x16_t)xmmword_20E80EF60), v231), v221);
      v238 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v232, (int8x16_t)xmmword_20E80EF50), v230), v220), vaddq_s32((int32x4_t)vqtbl1q_s8(v235, (int8x16_t)xmmword_20E80EF50), v230), v221);
      v239 = vmlaq_s32(vmulq_s32(vaddq_s32(v234, v229), v220), vaddq_s32((int32x4_t)vqtbl1q_s8(v235, (int8x16_t)xmmword_20E80EF40), v229), v221);
      v240 = *(int8x16_t *)((char *)v227 + 4 * v632);
      v241 = (uint32x4_t)vmlaq_s32(v239, vaddq_s32((int32x4_t)vqtbl1q_s8(v240, (int8x16_t)xmmword_20E80EF40), v229), v222);
      v242 = (uint32x4_t)vmlaq_s32(v238, vaddq_s32((int32x4_t)vqtbl1q_s8(v240, (int8x16_t)xmmword_20E80EF50), v230), v222);
      v243 = (uint32x4_t)vmlaq_s32(v237, vaddq_s32((int32x4_t)vqtbl1q_s8(v240, (int8x16_t)xmmword_20E80EF60), v231), v222);
      v244 = *(uint8x16_t *)((char *)v227 + v632);
      v245 = *(uint8x16_t *)((char *)v227 + 3 * v632);
      v246 = vaddl_u8(*(uint8x8_t *)v245.i8, *(uint8x8_t *)v244.i8);
      v247 = vaddl_high_u8(v245, v244);
      v248 = vmlal_high_u16((uint32x4_t)vmlaq_s32(v236, vaddq_s32((int32x4_t)vqtbl1q_s8(v240, (int8x16_t)xmmword_20E80EF70), v233), v222), v247, (uint16x8_t)v205);
      v249 = vmlal_u16(v243, *(uint16x4_t *)v247.i8, *(uint16x4_t *)v205.i8);
      v250 = *(uint8x16_t *)((char *)v227 + 2 * v632);
      v251 = vmovl_high_u8(v250);
      v252 = vmovl_u8(*(uint8x8_t *)v250.i8);
      *((uint32x4_t *)v228 + 2) = vmlal_u16(v249, *(uint16x4_t *)v224.i8, *(uint16x4_t *)v251.i8);
      *((uint32x4_t *)v228 + 3) = vmlal_high_u16(v248, v224, v251);
      v206 = (int32x4_t)vmlal_high_u16(vmlal_high_u16(v242, v246, (uint16x8_t)v205), v224, v252);
      *(uint32x4_t *)v228 = vmlal_u16(vmlal_u16(v241, *(uint16x4_t *)v246.i8, *(uint16x4_t *)v205.i8), *(uint16x4_t *)v224.i8, *(uint16x4_t *)v252.i8);
      *((int32x4_t *)v228 + 1) = v206;
      v228 += 16;
      ++v227;
      v226 -= 16;
    }
    while (v226);
    if ((v21 & 0xF) == 0)
      goto LABEL_48;
    if ((v21 & 0xFu) < 8uLL)
    {
      v219 = &v25[v212];
      v218 = &v28[v212];
      v217 = &v29[v212];
      v216 = &v30[v212];
      v215 = &v660[v212];
      v214 = &v112[v212];
      v213 = (int8x16_t *)((char *)v649 + v212);
LABEL_46:
      v275 = v645 - v212;
      v276 = v213;
      v277 = v213;
      v278 = &a2[v212];
      do
      {
        v280 = v213->u8[0];
        v213 = (int8x16_t *)((char *)v213 + 1);
        v279 = v280;
        v281 = *v214++;
        v282 = (v281 + v279) * v207;
        v284 = v276->u8[0];
        v276 = (int8x16_t *)((char *)v276 + 1);
        v283 = v284;
        v285 = *v215++;
        v286 = v282 + (v285 + v283) * v208;
        v288 = v277->u8[0];
        v277 = (int8x16_t *)((char *)v277 + 1);
        v287 = v288;
        v289 = *v216++;
        v290 = v286 + (v289 + v287) * v209;
        v292 = *v219++;
        v291 = v292;
        v293 = *v217++;
        v294 = v290 + (v293 + v291) * v210;
        v295 = *v218++;
        *v278++ = v294 + v295 * v211;
        --v275;
      }
      while (v275);
      goto LABEL_48;
    }
    v225 = v645 - (v21 & 0xF);
  }
  else
  {
    v225 = 0;
  }
  v637 = v21 & 7;
  v212 = v645 - v637;
  v253 = v649;
  v213 = (int8x16_t *)((char *)v649 + v212);
  v214 = &v112[v212];
  v215 = &v660[v212];
  v216 = &v30[v212];
  v217 = &v29[v212];
  v218 = &v28[v212];
  v219 = &v25[v212];
  v254 = (uint16x8_t)vuzp1q_s16(v223, v223);
  v255 = v212;
  v256 = &v31[v632];
  v257 = v660;
  v258 = v30;
  v259 = v29;
  v260 = v28;
  v261 = v25;
  v262 = &a2[v225];
  do
  {
    v204.i64[0] = *(uint64_t *)((char *)v253->i64 + v225);
    v263 = (int32x4_t)vqtbl1q_s8(v204, (int8x16_t)xmmword_20E80EF40);
    v264 = (int32x4_t)vqtbl1q_s8(v204, (int8x16_t)xmmword_20E80EF50);
    v205.i64[0] = *(_QWORD *)&v256[v225];
    v265 = (int32x4_t)vqtbl1q_s8(v205, (int8x16_t)xmmword_20E80EF40);
    v206.i64[0] = *(_QWORD *)&v257[v225];
    v266 = (int32x4_t)vqtbl1q_s8((int8x16_t)v206, (int8x16_t)xmmword_20E80EF40);
    v267 = vaddq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v206, (int8x16_t)xmmword_20E80EF50), v264);
    v268 = vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v205, (int8x16_t)xmmword_20E80EF50), v264), v220), v267, v221);
    v269 = vmlaq_s32(vmulq_s32(vaddq_s32(v265, v263), v220), vaddq_s32(v266, v263), v221);
    v267.i64[0] = *(_QWORD *)&v258[v225];
    v270 = (int32x4_t)vqtbl1q_s8((int8x16_t)v267, (int8x16_t)xmmword_20E80EF50);
    v206 = (int32x4_t)vqtbl1q_s8((int8x16_t)v267, (int8x16_t)xmmword_20E80EF40);
    v271 = (uint32x4_t)vmlaq_s32(v268, vaddq_s32(v270, v264), v222);
    v272 = vaddl_u8(*(uint8x8_t *)&v259[v225], *(uint8x8_t *)&v261[v225]);
    v273 = vmlal_high_u16(v271, v272, v254);
    v274 = vmlal_u16((uint32x4_t)vmlaq_s32(v269, vaddq_s32(v206, v263), v222), *(uint16x4_t *)v272.i8, *(uint16x4_t *)v254.i8);
    v204 = (int8x16_t)vmovl_u8(*(uint8x8_t *)&v260[v225]);
    v205 = (int8x16_t)vmlal_high_u16(v273, v224, (uint16x8_t)v204);
    *(uint32x4_t *)v262 = vmlal_u16(v274, *(uint16x4_t *)v224.i8, *(uint16x4_t *)v204.i8);
    *((int8x16_t *)v262 + 1) = v205;
    v262 += 8;
    v261 += 8;
    v260 += 8;
    v259 += 8;
    v258 += 8;
    v257 += 8;
    v256 += 8;
    v253 = (int8x16_t *)((char *)v253 + 8);
    v255 -= 8;
  }
  while (v225 != v255);
  v18 = a8;
  v20 = v640;
  v21 = a4;
  if (v637)
    goto LABEL_46;
LABEL_48:
  sub_20E7E183C(&v642[v20], a2, v21, v18);
  v299 = *v18;
  v300 = v18[1];
  v301 = v18[2];
  v302 = v18[3];
  v303 = v18[4];
  v643 = &v642[v20];
  if (v645 < 8)
  {
    v304 = 0;
    v305 = v649;
    v306 = v25;
    v307 = &v112[v632];
    v308 = v112;
    v309 = v660;
    v310 = v30;
    v311 = v29;
    v312 = v28;
    goto LABEL_61;
  }
  v313 = vdupq_n_s32(v299);
  v314 = vdupq_n_s32(v300);
  v315 = (int16x8_t)vdupq_n_s32(v301);
  v316 = (int16x8_t)vdupq_n_s32(v302);
  v317 = (uint16x8_t)vdupq_n_s16(v303);
  v318 = v660;
  if (v645 < 0x10)
  {
    v319 = 0;
LABEL_58:
    v304 = v645 - (v21 & 7);
    v351 = v649;
    v305 = (int8x16_t *)((char *)v649 + v304);
    v306 = &v25[v304];
    v307 = &v203[v304];
    v308 = &v112[v304];
    v309 = &v660[v304];
    v310 = &v30[v304];
    v311 = &v29[v304];
    v312 = &v28[v304];
    v352 = (uint16x8_t)vuzp1q_s16(v315, v315);
    v353 = (uint16x8_t)vuzp1q_s16(v316, v316);
    v354 = v304;
    v355 = &a2[v319];
    do
    {
      v296.i64[0] = *(uint64_t *)((char *)v351->i64 + v319);
      v356 = (int32x4_t)vqtbl1q_s8(v296, (int8x16_t)xmmword_20E80EF40);
      v357 = (int32x4_t)vqtbl1q_s8(v296, (int8x16_t)xmmword_20E80EF50);
      v297.i64[0] = *(_QWORD *)&v203[v319];
      v358 = (int32x4_t)vqtbl1q_s8(v297, (int8x16_t)xmmword_20E80EF40);
      v298.i64[0] = *(_QWORD *)&v112[v319];
      v359 = (int32x4_t)vqtbl1q_s8((int8x16_t)v298, (int8x16_t)xmmword_20E80EF40);
      v298 = (int32x4_t)vqtbl1q_s8((int8x16_t)v298, (int8x16_t)xmmword_20E80EF50);
      v360 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v297, (int8x16_t)xmmword_20E80EF50), v357), v313), vaddq_s32(v298, v357), v314);
      v361 = vaddl_u8(*(uint8x8_t *)&v318[v319], *(uint8x8_t *)&v25[v319]);
      v362 = vmlal_u16((uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32(v358, v356), v313), vaddq_s32(v359, v356), v314), *(uint16x4_t *)v361.i8, *(uint16x4_t *)v352.i8);
      v363 = vmlal_high_u16(v360, v361, v352);
      v364 = vaddl_u8(*(uint8x8_t *)&v30[v319], *(uint8x8_t *)&v28[v319]);
      v365 = vmlal_high_u16(v363, v364, v353);
      v366 = vmlal_u16(v362, *(uint16x4_t *)v364.i8, *(uint16x4_t *)v353.i8);
      v296 = (int8x16_t)vmovl_u8(*(uint8x8_t *)&v29[v319]);
      v297 = (int8x16_t)vmlal_high_u16(v365, v317, (uint16x8_t)v296);
      *(uint32x4_t *)v355 = vmlal_u16(v366, *(uint16x4_t *)v317.i8, *(uint16x4_t *)v296.i8);
      *((int8x16_t *)v355 + 1) = v297;
      v355 += 8;
      v28 += 8;
      v29 += 8;
      v30 += 8;
      v318 += 8;
      v112 += 8;
      v203 += 8;
      v25 += 8;
      v351 = (int8x16_t *)((char *)v351 + 8);
      v354 -= 8;
    }
    while (v319 != v354);
    if ((v21 & 7) == 0)
      goto LABEL_63;
    goto LABEL_61;
  }
  v320 = 0;
  v304 = v645 - (v21 & 0xF);
  v296.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
  v297 = (int8x16_t)vuzp1q_s16(v315, v315);
  v321 = (uint16x8_t)vuzp1q_s16(v316, v316);
  v322 = a2;
  do
  {
    v323 = v649[v320 / 0x10];
    v324 = (int32x4_t)vqtbl1q_s8(v323, (int8x16_t)xmmword_20E80EF40);
    v325 = (int32x4_t)vqtbl1q_s8(v323, (int8x16_t)xmmword_20E80EF50);
    v326 = (int32x4_t)vqtbl1q_s8(v323, (int8x16_t)xmmword_20E80EF60);
    v327 = (int32x4_t)vqtbl1q_s8(v323, (int8x16_t)xmmword_20E80EF70);
    v328 = *(int8x16_t *)&v203[v320];
    v329 = vaddq_s32((int32x4_t)vqtbl1q_s8(v328, (int8x16_t)xmmword_20E80EF70), v327);
    v330 = *(int8x16_t *)&v112[v320];
    v331 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v328, (int8x16_t)xmmword_20E80EF60), v326), v313), vaddq_s32((int32x4_t)vqtbl1q_s8(v330, (int8x16_t)xmmword_20E80EF60), v326), v314);
    v332 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v328, (int8x16_t)xmmword_20E80EF50), v325), v313), vaddq_s32((int32x4_t)vqtbl1q_s8(v330, (int8x16_t)xmmword_20E80EF50), v325), v314);
    v333 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v328, (int8x16_t)xmmword_20E80EF40), v324), v313), vaddq_s32((int32x4_t)vqtbl1q_s8(v330, (int8x16_t)xmmword_20E80EF40), v324), v314);
    v334 = *(uint8x16_t *)&v25[v320];
    v335 = *(uint8x16_t *)&v660[v320];
    v336 = vaddl_high_u8(v335, v334);
    v337 = vaddl_u8(*(uint8x8_t *)v335.i8, *(uint8x8_t *)v334.i8);
    v338 = vmlal_u16(v333, *(uint16x4_t *)v337.i8, *(uint16x4_t *)v297.i8);
    v339 = vmlal_high_u16(v332, v337, (uint16x8_t)v297);
    v340 = vmlal_u16(v331, *(uint16x4_t *)v336.i8, *(uint16x4_t *)v297.i8);
    v341 = *(uint8x16_t *)&v28[v320];
    v342 = vmlal_high_u16((uint32x4_t)vmlaq_s32(vmulq_s32(v329, v313), vaddq_s32((int32x4_t)vqtbl1q_s8(v330, (int8x16_t)xmmword_20E80EF70), v327), v314), v336, (uint16x8_t)v297);
    v343 = *(uint8x16_t *)&v30[v320];
    v344 = vaddl_u8(*(uint8x8_t *)v343.i8, *(uint8x8_t *)v341.i8);
    v345 = vaddl_high_u8(v343, v341);
    v346 = vmlal_high_u16(v342, v345, v321);
    v347 = vmlal_u16(v340, *(uint16x4_t *)v345.i8, *(uint16x4_t *)v321.i8);
    v348 = *(uint8x16_t *)&v29[v320];
    v349 = vmovl_high_u8(v348);
    v350 = vmovl_u8(*(uint8x8_t *)v348.i8);
    v298 = (int32x4_t)vmlal_u16(vmlal_u16(v338, *(uint16x4_t *)v344.i8, *(uint16x4_t *)v321.i8), *(uint16x4_t *)v317.i8, *(uint16x4_t *)v350.i8);
    *((uint32x4_t *)v322 + 2) = vmlal_u16(v347, *(uint16x4_t *)v317.i8, *(uint16x4_t *)v349.i8);
    *((uint32x4_t *)v322 + 3) = vmlal_high_u16(v346, v317, v349);
    *(int32x4_t *)v322 = v298;
    *((uint32x4_t *)v322 + 1) = vmlal_high_u16(vmlal_high_u16(v339, v344, v321), v317, v350);
    v322 += 16;
    v320 += 16;
  }
  while (v304 != v320);
  if ((v21 & 0xF) == 0)
    goto LABEL_63;
  if ((v21 & 0xFu) >= 8uLL)
  {
    v319 = v645 - (v21 & 0xF);
    goto LABEL_58;
  }
  v312 = &v28[v304];
  v311 = &v29[v304];
  v310 = &v30[v304];
  v309 = &v660[v304];
  v308 = &v112[v304];
  v307 = &v203[v304];
  v306 = &v25[v304];
  v305 = (int8x16_t *)((char *)v649 + v304);
LABEL_61:
  v367 = v645 - v304;
  v368 = &a2[v304];
  v369 = v305;
  do
  {
    v371 = v305->u8[0];
    v305 = (int8x16_t *)((char *)v305 + 1);
    v370 = v371;
    v372 = *v307++;
    v373 = (v372 + v370) * v299;
    v375 = v369->u8[0];
    v369 = (int8x16_t *)((char *)v369 + 1);
    v374 = v375;
    v376 = *v308++;
    v377 = v373 + (v376 + v374) * v300;
    v379 = *v306++;
    v378 = v379;
    v380 = *v309++;
    v381 = v377 + (v380 + v378) * v301;
    v383 = *v312++;
    v382 = v383;
    v384 = *v310++;
    v385 = v381 + (v384 + v382) * v302;
    v386 = *v311++;
    *v368++ = v385 + v386 * v303;
    --v367;
  }
  while (v367);
LABEL_63:
  result = sub_20E7E183C(&v643[v20], a2, v21, v18);
  v27 = v651;
  v22 = v653;
  v19 = a7;
LABEL_64:
  v644 = &v22[v655];
  v387 = (_WORD *)((char *)&v22[v27] + v27 + v27);
  v388 = v19 - 4;
  if ((unint64_t)(v19 - 4) < 5)
  {
    v647 = (_WORD *)((char *)&v22[v27] + v27 + v27);
  }
  else
  {
    if (v21)
    {
      v647 = (_WORD *)((char *)&v22[v27] + v27 + v27);
      v389 = a5;
      v634 = v21 & 0xF;
      v635 = v645 - v634;
      v633 = v21 & 7;
      v390 = &v649->i8[3 * a5];
      v391 = &v649->i8[4 * a5];
      v392 = &v649->i8[5 * a5];
      v393 = &v649->i8[6 * a5];
      v394 = &v649->i8[7 * a5];
      v395 = &v649->i8[8 * a5];
      v396 = &v649->i8[2 * a5];
      v397 = v18;
      v398 = &v649->i8[a5];
      v399 = 4;
      v656 = v388;
      while (1)
      {
        v400 = v649;
        v401 = (int8x16_t *)((char *)v649 + v389);
        v402 = (int8x16_t *)((char *)v649 + 8 * a5);
        v403 = (int8x16_t *)((char *)v649 + 7 * a5);
        v404 = (int8x16_t *)((char *)v649 + 6 * a5);
        v405 = (int8x16_t *)((char *)v649 + 5 * a5);
        v406 = (int8x16_t *)((char *)v649 + 4 * a5);
        v407 = (int8x16_t *)((char *)v649 + 3 * a5);
        v408 = *v397;
        v409 = v397[1];
        v410 = v397[2];
        v411 = v397[3];
        v412 = (int8x16_t *)((char *)v649 + 2 * a5);
        v413 = v397[4];
        v649 = v401;
        v661 = v399;
        if (v645 >= 8)
        {
          v416 = (int16x8_t)vdupq_n_s32(v408);
          v417 = (int16x8_t)vdupq_n_s32(v409);
          v418 = (int16x8_t)vdupq_n_s32(v410);
          v419 = (int16x8_t)vdupq_n_s32(v411);
          v420 = (uint16x8_t)vdupq_n_s16(v413);
          v421 = v645 - v633;
          if (v645 < 0x10)
          {
            v422 = 0;
LABEL_77:
            v415 = &v400->u8[v421];
            v401 = (int8x16_t *)((char *)v649 + v421);
            v412 = (int8x16_t *)((char *)v412 + v421);
            v402 = (int8x16_t *)((char *)v402 + v421);
            v403 = (int8x16_t *)((char *)v403 + v421);
            v404 = (int8x16_t *)((char *)v404 + v421);
            v405 = (int8x16_t *)((char *)v405 + v421);
            v406 = (int8x16_t *)((char *)v406 + v421);
            v407 = (int8x16_t *)((char *)v407 + v421);
            v462 = (uint32x4_t *)&a2[v422];
            do
            {
              v463 = vaddl_u8(*(uint8x8_t *)&v395[v422], *(uint8x8_t *)&v400->i8[v422]);
              v464 = (uint16x8_t)vuzp1q_s16(v416, v416);
              v465 = vaddl_u8(*(uint8x8_t *)&v394[v422], *(uint8x8_t *)&v398[v422]);
              v466 = (uint16x8_t)vuzp1q_s16(v417, v417);
              v467 = vmull_u16(*(uint16x4_t *)v465.i8, *(uint16x4_t *)v466.i8);
              v468 = vmlal_high_u16(vmull_high_u16(v465, v466), v463, v464);
              v469 = vmlal_u16(v467, *(uint16x4_t *)v463.i8, *(uint16x4_t *)v464.i8);
              v470 = vaddl_u8(*(uint8x8_t *)&v393[v422], *(uint8x8_t *)&v396[v422]);
              v471 = (uint16x8_t)vuzp1q_s16(v418, v418);
              v472 = vmlal_u16(v469, *(uint16x4_t *)v470.i8, *(uint16x4_t *)v471.i8);
              v473 = vmlal_high_u16(v468, v470, v471);
              v474 = vaddl_u8(*(uint8x8_t *)&v392[v422], *(uint8x8_t *)&v390[v422]);
              v475 = (uint16x8_t)vuzp1q_s16(v419, v419);
              v476 = vmlal_high_u16(v473, v474, v475);
              v477 = vmlal_u16(v472, *(uint16x4_t *)v474.i8, *(uint16x4_t *)v475.i8);
              v478 = vmovl_u8(*(uint8x8_t *)&v391[v422]);
              *v462 = vmlal_u16(v477, *(uint16x4_t *)v420.i8, *(uint16x4_t *)v478.i8);
              v462[1] = vmlal_high_u16(v476, v420, v478);
              v462 += 2;
              v422 += 8;
            }
            while (v421 != v422);
            v414 = v421;
            if (!v633)
              goto LABEL_67;
            goto LABEL_80;
          }
          v423 = 0;
          v424 = (uint32x4_t *)a2;
          do
          {
            v425 = (uint8x16_t)v400[v423 / 0x10];
            v426 = *(uint8x16_t *)&v395[v423];
            v427 = vaddl_high_u8(v426, v425);
            v428 = vaddl_u8(*(uint8x8_t *)v426.i8, *(uint8x8_t *)v425.i8);
            v429 = (uint16x8_t)vuzp1q_s16(v416, v416);
            v430 = *(uint8x16_t *)&v398[v423];
            v431 = *(uint8x16_t *)&v394[v423];
            v432 = vaddl_u8(*(uint8x8_t *)v431.i8, *(uint8x8_t *)v430.i8);
            v433 = vaddl_high_u8(v431, v430);
            v434 = (uint16x8_t)vuzp1q_s16(v417, v417);
            v435 = vmull_u16(*(uint16x4_t *)v433.i8, *(uint16x4_t *)v434.i8);
            v436 = vmull_u16(*(uint16x4_t *)v432.i8, *(uint16x4_t *)v434.i8);
            v437 = vmlal_high_u16(vmull_high_u16(v432, v434), v428, v429);
            v438 = vmlal_high_u16(vmull_high_u16(v433, v434), v427, v429);
            v439 = vmlal_u16(v436, *(uint16x4_t *)v428.i8, *(uint16x4_t *)v429.i8);
            v440 = *(uint8x16_t *)&v396[v423];
            v441 = vmlal_u16(v435, *(uint16x4_t *)v427.i8, *(uint16x4_t *)v429.i8);
            v442 = *(uint8x16_t *)&v393[v423];
            v443 = vaddl_u8(*(uint8x8_t *)v442.i8, *(uint8x8_t *)v440.i8);
            v444 = vaddl_high_u8(v442, v440);
            v445 = (uint16x8_t)vuzp1q_s16(v418, v418);
            v446 = vmlal_u16(v441, *(uint16x4_t *)v444.i8, *(uint16x4_t *)v445.i8);
            v447 = vmlal_u16(v439, *(uint16x4_t *)v443.i8, *(uint16x4_t *)v445.i8);
            v448 = vmlal_high_u16(v438, v444, v445);
            v449 = vmlal_high_u16(v437, v443, v445);
            v450 = *(uint8x16_t *)&v390[v423];
            v451 = *(uint8x16_t *)&v392[v423];
            v452 = vaddl_high_u8(v451, v450);
            v453 = vaddl_u8(*(uint8x8_t *)v451.i8, *(uint8x8_t *)v450.i8);
            v454 = (uint16x8_t)vuzp1q_s16(v419, v419);
            v455 = vmlal_high_u16(v449, v453, v454);
            v456 = vmlal_high_u16(v448, v452, v454);
            v457 = vmlal_u16(v447, *(uint16x4_t *)v453.i8, *(uint16x4_t *)v454.i8);
            v458 = vmlal_u16(v446, *(uint16x4_t *)v452.i8, *(uint16x4_t *)v454.i8);
            v459 = *(uint8x16_t *)&v391[v423];
            v460 = vmovl_u8(*(uint8x8_t *)v459.i8);
            v461 = vmovl_high_u8(v459);
            *v424 = vmlal_u16(v457, *(uint16x4_t *)v420.i8, *(uint16x4_t *)v460.i8);
            v424[1] = vmlal_high_u16(v455, v420, v460);
            v424[2] = vmlal_u16(v458, *(uint16x4_t *)v420.i8, *(uint16x4_t *)v461.i8);
            v424[3] = vmlal_high_u16(v456, v420, v461);
            v423 += 16;
            v424 += 4;
          }
          while (v635 != v423);
          if (!v634)
            goto LABEL_67;
          v421 = v645 - v633;
          v422 = v645 - v634;
          if (v634 >= 8)
            goto LABEL_77;
          v407 = (int8x16_t *)((char *)v407 + v635);
          v406 = (int8x16_t *)((char *)v406 + v635);
          v405 = (int8x16_t *)((char *)v405 + v635);
          v404 = (int8x16_t *)((char *)v404 + v635);
          v403 = (int8x16_t *)((char *)v403 + v635);
          v402 = (int8x16_t *)((char *)v402 + v635);
          v412 = (int8x16_t *)((char *)v412 + v635);
          v401 = (int8x16_t *)((char *)v649 + v635);
          v415 = &v400->u8[v635];
          v414 = v645 - v634;
        }
        else
        {
          v414 = 0;
          v415 = (unsigned __int8 *)v400;
        }
LABEL_80:
        v479 = v645 - v414;
        v480 = &a2[v414];
        do
        {
          v482 = *v415++;
          v481 = v482;
          v483 = v402->u8[0];
          v402 = (int8x16_t *)((char *)v402 + 1);
          v484 = (v483 + v481) * v408;
          v486 = v401->u8[0];
          v401 = (int8x16_t *)((char *)v401 + 1);
          v485 = v486;
          v487 = v403->u8[0];
          v403 = (int8x16_t *)((char *)v403 + 1);
          v488 = v484 + (v487 + v485) * v409;
          v490 = v412->u8[0];
          v412 = (int8x16_t *)((char *)v412 + 1);
          v489 = v490;
          v491 = v404->u8[0];
          v404 = (int8x16_t *)((char *)v404 + 1);
          v492 = v488 + (v491 + v489) * v410;
          v494 = v407->u8[0];
          v407 = (int8x16_t *)((char *)v407 + 1);
          v493 = v494;
          v495 = v405->u8[0];
          v405 = (int8x16_t *)((char *)v405 + 1);
          v496 = v492 + (v495 + v493) * v411;
          v497 = v406->u8[0];
          v406 = (int8x16_t *)((char *)v406 + 1);
          *v480++ = v496 + v497 * v413;
          --v479;
        }
        while (v479);
LABEL_67:
        v397 = a8;
        result = sub_20E7E183C(v647, a2, a4, a8);
        v647 += v640;
        v389 = a5;
        v399 = v661 + 1;
        v390 += a5;
        v391 += a5;
        v392 += a5;
        v393 += a5;
        v394 += a5;
        v395 += a5;
        v396 += a5;
        v398 += a5;
        if (v661 + 1 == v656)
          goto LABEL_88;
      }
    }
    v498 = v19 - 8;
    v499 = (v19 - 8) * a5;
    do
    {
      result = sub_20E7E183C(v387, a2, 0, v18);
      v387 = (_WORD *)((char *)v387 + v27);
      --v498;
    }
    while (v498);
    v647 = v387;
    v649 = (int8x16_t *)((char *)v649 + v499);
  }
  v397 = v18;
LABEL_88:
  v500 = v649;
  v501 = (int8x16_t *)((char *)v649 + v632);
  v502 = (uint8x16_t *)&v649->i8[v632 + v632];
  v659 = (uint8x16_t *)((char *)v502 + v632);
  v662 = v502;
  v503 = (uint8x16_t *)((char *)v502 + v632 + v632);
  v654 = (uint8x16_t *)((char *)v503 + v632);
  v657 = v503;
  v504 = (uint8x16_t *)((char *)v503 + v632 + v632);
  v505 = (uint8x16_t *)((char *)v504 + v632);
  v652 = v504;
  v664[0] = (char *)v504 + v632;
  v664[1] = (char *)v504 + v632;
  v664[2] = (char *)v504 + v632;
  v664[3] = (char *)v504 + v632;
  v506 = v645;
  v507 = v647;
  v508 = a4;
  v509 = v640;
  if (v647 < v644)
  {
    v510 = 0;
    v636 = v645 - (a4 & 0xF);
    v638 = v645 - (a4 & 7);
    while (1)
    {
      v511 = (uint8x16_t *)v500;
      v500 = v501;
      v512 = v659;
      v513 = v662;
      v659 = v657;
      v662 = v512;
      v514 = v654;
      v654 = v652;
      v657 = v514;
      v652 = v505;
      v505 = (uint8x16_t *)v664[v510];
      v501 = (int8x16_t *)v513;
      if (v508)
        break;
LABEL_90:
      ++v510;
      result = sub_20E7E183C(v507, a2, v508, v397);
      v507 += v509;
      if (v507 >= v644)
        return result;
    }
    v515 = *v397;
    v516 = v397[1];
    v517 = v397[2];
    v518 = v397[3];
    v519 = v397[4];
    if (v506 < 8)
    {
      v520 = 0;
      v521 = (unsigned __int8 *)v511;
      v522 = (unsigned __int8 *)v500;
      v523 = (unsigned __int8 *)v662;
      v524 = (unsigned __int8 *)v664[v510];
      v525 = (unsigned __int8 *)v652;
      v526 = (unsigned __int8 *)v654;
      v527 = (unsigned __int8 *)v657;
      v528 = (unsigned __int8 *)v659;
      v529 = (unsigned __int8 *)v662;
      goto LABEL_104;
    }
    v530 = (int16x8_t)vdupq_n_s32(v515);
    v531 = (int16x8_t)vdupq_n_s32(v516);
    v532 = (int16x8_t)vdupq_n_s32(v517);
    v533 = (int16x8_t)vdupq_n_s32(v518);
    v534 = (uint16x8_t)vdupq_n_s16(v519);
    if (v506 >= 0x10)
    {
      v536 = v645 - (a4 & 0xF);
      v537 = v511;
      v538 = (uint8x16_t *)v500;
      v539 = v662;
      v540 = (uint8x16_t *)v664[v510];
      v541 = v652;
      v542 = v654;
      v543 = v657;
      v544 = v659;
      v545 = v662;
      v546 = (uint32x4_t *)a2;
      do
      {
        v547 = *v537++;
        v548 = v547;
        v549 = *v540++;
        v550 = vaddl_high_u8(v549, v548);
        v551 = vaddl_u8(*(uint8x8_t *)v549.i8, *(uint8x8_t *)v548.i8);
        v552 = *v538++;
        v553 = v552;
        v554 = *v541++;
        v555 = (uint16x8_t)vuzp1q_s16(v530, v530);
        v556 = vaddl_u8(*(uint8x8_t *)v554.i8, *(uint8x8_t *)v553.i8);
        v557 = vaddl_high_u8(v554, v553);
        v558 = (uint16x8_t)vuzp1q_s16(v531, v531);
        v559 = vmull_u16(*(uint16x4_t *)v557.i8, *(uint16x4_t *)v558.i8);
        v560 = vmull_u16(*(uint16x4_t *)v556.i8, *(uint16x4_t *)v558.i8);
        v561 = vmlal_high_u16(vmull_high_u16(v556, v558), v551, v555);
        v562 = vmlal_high_u16(vmull_high_u16(v557, v558), v550, v555);
        v563 = vmlal_u16(v560, *(uint16x4_t *)v551.i8, *(uint16x4_t *)v555.i8);
        v564 = vmlal_u16(v559, *(uint16x4_t *)v550.i8, *(uint16x4_t *)v555.i8);
        v565 = *v539++;
        v566 = v565;
        v567 = *v542++;
        v568 = vaddl_u8(*(uint8x8_t *)v567.i8, *(uint8x8_t *)v566.i8);
        v569 = vaddl_high_u8(v567, v566);
        v570 = (uint16x8_t)vuzp1q_s16(v532, v532);
        v571 = vmlal_u16(v564, *(uint16x4_t *)v569.i8, *(uint16x4_t *)v570.i8);
        v572 = vmlal_u16(v563, *(uint16x4_t *)v568.i8, *(uint16x4_t *)v570.i8);
        v573 = vmlal_high_u16(v562, v569, v570);
        v574 = *v545++;
        v575 = v574;
        v576 = vmlal_high_u16(v561, v568, v570);
        v577 = *v543++;
        v578 = vaddl_high_u8(v577, v575);
        v579 = vaddl_u8(*(uint8x8_t *)v577.i8, *(uint8x8_t *)v575.i8);
        v580 = (uint16x8_t)vuzp1q_s16(v533, v533);
        v581 = vmlal_high_u16(v576, v579, v580);
        v582 = vmlal_high_u16(v573, v578, v580);
        v583 = vmlal_u16(v572, *(uint16x4_t *)v579.i8, *(uint16x4_t *)v580.i8);
        v584 = vmlal_u16(v571, *(uint16x4_t *)v578.i8, *(uint16x4_t *)v580.i8);
        v585 = *v544++;
        v586 = vmovl_u8(*(uint8x8_t *)v585.i8);
        v587 = vmovl_high_u8(v585);
        *v546 = vmlal_u16(v583, *(uint16x4_t *)v534.i8, *(uint16x4_t *)v586.i8);
        v546[1] = vmlal_high_u16(v581, v534, v586);
        v546[2] = vmlal_u16(v584, *(uint16x4_t *)v534.i8, *(uint16x4_t *)v587.i8);
        v546[3] = vmlal_high_u16(v582, v534, v587);
        v546 += 4;
        v536 -= 16;
      }
      while (v536);
      if ((a4 & 0xF) == 0)
        goto LABEL_90;
      v535 = v645 - (a4 & 0xF);
      if ((a4 & 0xF) < 8uLL)
      {
        v520 = v645 - (a4 & 0xF);
        v529 = &v662->u8[v636];
        v528 = &v659->u8[v636];
        v527 = &v657->u8[v636];
        v526 = &v654->u8[v636];
        v525 = &v652->u8[v636];
        v524 = &v505->u8[v636];
        v523 = &v662->u8[v636];
        v522 = &v500->u8[v636];
        v521 = &v511->u8[v636];
LABEL_104:
        v613 = v506 - v520;
        v614 = &a2[v520];
        do
        {
          v616 = *v521++;
          v615 = v616;
          v617 = *v524++;
          v618 = (v617 + v615) * v515;
          v620 = *v522++;
          v619 = v620;
          v621 = *v525++;
          v622 = v618 + (v621 + v619) * v516;
          v624 = *v523++;
          v623 = v624;
          v625 = *v526++;
          v626 = v622 + (v625 + v623) * v517;
          v628 = *v529++;
          v627 = v628;
          v629 = *v527++;
          v630 = v626 + (v629 + v627) * v518;
          v631 = *v528++;
          *v614++ = v630 + v631 * v519;
          --v613;
        }
        while (v613);
        goto LABEL_90;
      }
    }
    else
    {
      v535 = 0;
    }
    v648 = v507;
    v650 = v500;
    v588 = v645 - (a4 & 7);
    v521 = &v511->u8[v638];
    v522 = &v500->u8[v638];
    v523 = &v662->u8[v638];
    v524 = &v505->u8[v638];
    v590 = v652;
    v589 = v654;
    v525 = &v652->u8[v638];
    v526 = &v654->u8[v638];
    v592 = v657;
    v591 = v659;
    v527 = &v657->u8[v638];
    v528 = &v659->u8[v638];
    v593 = v662;
    v529 = &v662->u8[v638];
    v594 = v500;
    v595 = v505;
    v596 = (uint32x4_t *)&a2[v535];
    do
    {
      v597 = vaddl_u8(*(uint8x8_t *)&v595->i8[v535], *(uint8x8_t *)&v511->i8[v535]);
      v598 = (uint16x8_t)vuzp1q_s16(v530, v530);
      v599 = vaddl_u8(*(uint8x8_t *)&v590->i8[v535], *(uint8x8_t *)&v594->i8[v535]);
      v600 = (uint16x8_t)vuzp1q_s16(v531, v531);
      v601 = vmull_u16(*(uint16x4_t *)v599.i8, *(uint16x4_t *)v600.i8);
      v602 = vmlal_high_u16(vmull_high_u16(v599, v600), v597, v598);
      v603 = vmlal_u16(v601, *(uint16x4_t *)v597.i8, *(uint16x4_t *)v598.i8);
      v604 = vaddl_u8(*(uint8x8_t *)&v589->i8[v535], *(uint8x8_t *)&v513->i8[v535]);
      v605 = (uint16x8_t)vuzp1q_s16(v532, v532);
      v606 = vmlal_u16(v603, *(uint16x4_t *)v604.i8, *(uint16x4_t *)v605.i8);
      v607 = vmlal_high_u16(v602, v604, v605);
      v608 = vaddl_u8(*(uint8x8_t *)&v592->i8[v535], *(uint8x8_t *)&v593->i8[v535]);
      v609 = (uint16x8_t)vuzp1q_s16(v533, v533);
      v610 = vmlal_high_u16(v607, v608, v609);
      v611 = vmlal_u16(v606, *(uint16x4_t *)v608.i8, *(uint16x4_t *)v609.i8);
      v612 = vmovl_u8(*(uint8x8_t *)&v591->i8[v535]);
      *v596 = vmlal_u16(v611, *(uint16x4_t *)v534.i8, *(uint16x4_t *)v612.i8);
      v596[1] = vmlal_high_u16(v610, v534, v612);
      v596 += 2;
      v593 = (uint8x16_t *)((char *)v593 + 8);
      v591 = (uint8x16_t *)((char *)v591 + 8);
      v592 = (uint8x16_t *)((char *)v592 + 8);
      v589 = (uint8x16_t *)((char *)v589 + 8);
      v590 = (uint8x16_t *)((char *)v590 + 8);
      v595 = (uint8x16_t *)((char *)v595 + 8);
      v513 = (uint8x16_t *)((char *)v513 + 8);
      v594 = (int8x16_t *)((char *)v594 + 8);
      v511 = (uint8x16_t *)((char *)v511 + 8);
      v588 -= 8;
    }
    while (v535 != v588);
    v520 = v645 - (a4 & 7);
    v397 = a8;
    v509 = v640;
    v508 = a4;
    v506 = v645;
    v507 = v648;
    v500 = v650;
    if ((a4 & 7) == 0)
      goto LABEL_90;
    goto LABEL_104;
  }
  return result;
}

unsigned __int8 *sub_20E7DDD30(unsigned __int8 *result, unsigned int *a2, unint64_t a3, int a4, int a5, unsigned int a6, int a7, const __int16 *a8)
{
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint32x4_t *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int16x8_t v22;
  uint32x4_t *v23;
  const char *v24;
  uint16x8_t v25;
  uint16x8_t v26;
  int32x4_t v27;
  const char *v28;
  unsigned __int128 v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned __int8 *v36;
  uint32x4_t *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int16x8_t v45;
  uint32x4_t *v46;
  const char *v47;
  uint16x8_t v48;
  uint16x8_t v49;
  int32x4_t v50;
  const char *v51;
  unsigned __int128 v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  BOOL v60;
  BOOL v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  const __int16 *v66;
  uint16x4_t v67;
  unsigned int *v68;
  int32x4_t v69;
  uint16x4_t v70;
  int32x4_t v71;
  _QWORD *v72;
  int32x4_t *v73;
  uint64_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  uint32x4_t v80;
  uint64_t v81;
  _BYTE *v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int32x4_t v97;
  unsigned int v98;
  unint64_t v99;
  unsigned int *v100;
  int v101;
  unsigned __int8 *v102;
  unsigned int v103;
  unsigned int v104;
  uint32x4_t *v105;
  uint16x8_t v106;
  uint64_t v107;
  BOOL v108;
  const char *v109;
  uint32x4_t *v110;
  int16x8_t v111;
  unint64_t v112;
  const char *v113;
  unsigned __int128 v114;
  uint16x8_t v115;
  uint16x8_t v116;
  uint16x8_t v117;
  uint16x8_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int *v123;
  unsigned __int8 *v124;
  uint32x4_t *v125;
  uint64_t v126;
  BOOL v127;
  const char *v128;
  uint32x4_t *v129;
  int16x8_t v130;
  unint64_t v131;
  const char *v132;
  unsigned __int128 v133;
  uint16x8_t v134;
  uint16x8_t v135;
  uint16x8_t v136;
  uint16x8_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int *v142;
  unsigned int *v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  unint64_t v149;
  BOOL v151;
  BOOL v153;
  BOOL v155;
  BOOL v156;
  uint64_t v157;
  const __int16 *v158;
  uint16x4_t v159;
  uint16x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t *v163;
  int32x4_t *v164;
  int32x4_t *v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  uint64_t v174;
  const __int16 *v175;
  uint16x4_t v176;
  int32x4_t v177;
  uint16x4_t v178;
  int32x4_t v179;
  int32x4_t *v180;
  int32x4_t *v181;
  int32x4_t *v182;
  unsigned int *v183;
  uint64_t v184;
  unsigned __int8 *v185;
  unsigned int v186;
  unsigned int v187;
  uint32x4_t *v188;
  unint64_t v189;
  unsigned __int8 *v190;
  unint64_t v191;
  BOOL v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int16x8_t v197;
  uint32x4_t *v198;
  const char *v199;
  uint16x8_t v200;
  uint16x8_t v201;
  int32x4_t v202;
  const char *v203;
  unsigned __int128 v204;
  uint16x8_t v205;
  uint16x8_t v206;
  uint16x8_t v207;
  int32x4_t *v208;
  uint64_t v209;
  int32x4_t *v210;
  unsigned int *v211;
  uint64_t v212;
  _BYTE *v213;
  __int32 v214;
  int v215;
  int v216;
  unint64_t v217;
  BOOL v219;
  BOOL v221;
  BOOL v222;
  uint64_t v223;
  const __int16 *v224;
  uint16x4_t v225;
  int32x4_t v226;
  uint16x4_t v227;
  int32x4_t v228;
  _QWORD *v229;
  int32x4_t *v230;
  int32x4_t *v231;
  uint64_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  uint32x4_t v240;
  const __int16 *v241;
  uint16x4_t v242;
  int32x4_t v243;
  uint16x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  uint64_t v247;
  int32x4_t *v248;
  int8x16_t *v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  const __int16 *v254;
  uint16x4_t v255;
  int32x4_t v256;
  uint16x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  uint64_t v260;
  int32x4_t *v261;
  int32x4_t *v262;
  int8x16_t *v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  uint64_t v268;
  int v269;
  unsigned int v270;
  int v271;
  uint64_t v272;
  unsigned __int8 *v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  unsigned int v286;
  _QWORD v287[4];
  int8x16x2_t v288;
  int8x16x2_t v289;
  int8x16x2_t v290;
  int8x16x2_t v291;
  int8x16x2_t v292;
  int8x16x2_t v293;
  int8x16x2_t v294;
  int8x16x2_t v295;
  int8x16x4_t v296;
  int8x16x4_t v297;
  int8x16x4_t v298;

  v8 = a4;
  v9 = (a4 + 1) >> 1;
  v10 = &a2[v9];
  v287[0] = a2;
  v287[1] = v10;
  v286 = a4 + 1;
  v11 = &a2[(a4 + 1) & 0xFFFFFFFE];
  v287[2] = v11;
  v282 = (unint64_t)(result + 1);
  v12 = *(unsigned __int16 *)a8;
  v13 = *((unsigned __int16 *)a8 + 1);
  *a2 = (v13 * *result + 2 * result[1] * v12 + 256) >> 9;
  v14 = (uint32x4_t *)(a2 + 1);
  v15 = (a4 - 1);
  if (v15 < 3)
  {
    v33 = 2 * v12;
    if (a4 == 3)
LABEL_19:
      v14->i32[0] = (result[v15] * v13 + v33 * result[a4 - 2] + 256) >> 9;
  }
  else
  {
    v16 = v15 - 3;
    if (v15 - 3 >= 0x20
      && (v14 < (uint32x4_t *)&result[(v16 & 0xFFFFFFFFFFFFFFFELL) + 4]
        ? (v17 = v282 >= (unint64_t)a2 + ((2 * v16) & 0x7FFFFFFFFFFFFFFCLL) + 8)
        : (v17 = 1),
          v17))
    {
      v18 = (v16 >> 1) + 1;
      v19 = v18 & 0xF;
      if ((v18 & 0xF) == 0)
        v19 = 16;
      v20 = v18 - v19;
      v21 = 2 * v20 + 2;
      v22 = (int16x8_t)vdupq_n_s32(v12);
      v23 = (uint32x4_t *)((char *)v14 + 4 * v20);
      v24 = (const char *)(result + 2);
      v25 = (uint16x8_t)vuzp1q_s16(v22, v22);
      v26 = (uint16x8_t)vdupq_n_s16(v13);
      v27.i64[0] = 0x10000000100;
      v27.i64[1] = 0x10000000100;
      do
      {
        v28 = v24 - 1;
        v29 = (unsigned __int128)vld2q_s8(v28);
        v289 = vld2q_s8(v24);
        v24 += 32;
        v30 = vaddl_high_u8((uint8x16_t)v289.val[1], (uint8x16_t)v29);
        v31 = vaddl_u8(*(uint8x8_t *)v289.val[1].i8, *(uint8x8_t *)&v29);
        v32 = vmovl_u8(*(uint8x8_t *)v289.val[0].i8);
        v289.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v289.val[0]);
        v14[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v289.val[0].i8), *(uint16x4_t *)v30.i8, *(uint16x4_t *)v25.i8), v27), 9uLL);
        v14[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v26, (uint16x8_t)v289.val[0]), v30, v25), v27), 9uLL);
        *v14 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v32.i8), *(uint16x4_t *)v31.i8, *(uint16x4_t *)v25.i8), v27), 9uLL);
        v14[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v26, v32), v31, v25), v27), 9uLL);
        v14 += 4;
        v20 -= 16;
      }
      while (v20);
      v14 = v23;
    }
    else
    {
      v21 = 2;
    }
    v34 = 0;
    do
    {
      v14->i32[0] = ((result[(v21 + v34) | 1] + result[v21 - 1 + v34]) * v12 + result[v21 + v34] * v13 + 256) >> 9;
      v14 = (uint32x4_t *)((char *)v14 + 4);
      v34 += 2;
    }
    while (v21 + v34 < v15);
    v35 = v21 + v34;
    v33 = 2 * v12;
    if (v35 == (_DWORD)v15)
      goto LABEL_19;
  }
  v36 = &result[a5];
  *v10 = (*v36 * v13 + v33 * v36[1] + 256) >> 9;
  v37 = (uint32x4_t *)(v10 + 1);
  if (v15 < 3)
  {
    if (a4 == 3)
LABEL_35:
      v37->i32[0] = (v36[v15] * v13 + v33 * v36[v8 - 2] + 256) >> 9;
  }
  else
  {
    v38 = v15 - 3;
    if (v15 - 3 >= 0x20
      && ((v39 = v38 >> 1, v40 = &result[a5], v37 >= (uint32x4_t *)&v40[(v38 & 0xFFFFFFFFFFFFFFFELL) + 4])
       || v40 + 1 >= (unsigned __int8 *)&a2[v39 + 2 + v9]))
    {
      v42 = v39 + 1;
      v43 = (v39 + 1) & 0xF;
      if (!v43)
        v43 = 16;
      v44 = v42 - v43;
      v41 = 2 * v44 + 2;
      v45 = (int16x8_t)vdupq_n_s32(v12);
      v46 = (uint32x4_t *)((char *)v37 + 4 * v44);
      v47 = (const char *)(v40 + 2);
      v48 = (uint16x8_t)vuzp1q_s16(v45, v45);
      v49 = (uint16x8_t)vdupq_n_s16(v13);
      v50.i64[0] = 0x10000000100;
      v50.i64[1] = 0x10000000100;
      do
      {
        v51 = v47 - 1;
        v52 = (unsigned __int128)vld2q_s8(v51);
        v290 = vld2q_s8(v47);
        v47 += 32;
        v53 = vaddl_high_u8((uint8x16_t)v290.val[1], (uint8x16_t)v52);
        v54 = vaddl_u8(*(uint8x8_t *)v290.val[1].i8, *(uint8x8_t *)&v52);
        v55 = vmovl_u8(*(uint8x8_t *)v290.val[0].i8);
        v290.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v290.val[0]);
        v37[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v290.val[0].i8), *(uint16x4_t *)v53.i8, *(uint16x4_t *)v48.i8), v50), 9uLL);
        v37[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v49, (uint16x8_t)v290.val[0]), v53, v48), v50), 9uLL);
        *v37 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v49.i8, *(uint16x4_t *)v55.i8), *(uint16x4_t *)v54.i8, *(uint16x4_t *)v48.i8), v50), 9uLL);
        v37[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v49, v55), v54, v48), v50), 9uLL);
        v37 += 4;
        v44 -= 16;
      }
      while (v44);
      v37 = v46;
    }
    else
    {
      v41 = 2;
    }
    v56 = 0;
    do
    {
      v37->i32[0] = ((v36[(v41 + v56) | 1] + v36[v41 - 1 + v56]) * v12 + v36[v41 + v56] * v13 + 256) >> 9;
      v37 = (uint32x4_t *)((char *)v37 + 4);
      v56 += 2;
    }
    while (v41 + v56 < v15);
    if ((_DWORD)v41 + (_DWORD)v56 == (_DWORD)v15)
      goto LABEL_35;
  }
  if (v286 >= 2)
  {
    if (v286 >= 0x10)
    {
      v57 = 0;
      v58 = a3 + v9;
      v60 = (unint64_t)&a2[2 * v9] > a3 && (unint64_t)v10 < v58;
      v62 = (unint64_t)(a8 + 2) > a3 && v58 > (unint64_t)a8;
      v63 = v58 > (unint64_t)a2 && (unint64_t)v10 > a3;
      if (!v63 && !v60 && !v62)
      {
        v64 = 4 * v9;
        if (v286 >= 0x20)
        {
          v241 = a8;
          v242 = (uint16x4_t)vld1_dup_s16(v241++);
          v57 = v9 & 0x7FFFFFF0;
          v243 = (int32x4_t)vmovl_u16(v242);
          v244 = (uint16x4_t)vld1_dup_s16(v241);
          v245 = (int32x4_t)vmovl_u16(v244);
          v246.i64[0] = 0x10000000100;
          v246.i64[1] = 0x10000000100;
          v247 = v57;
          v248 = (int32x4_t *)a2;
          v249 = (int8x16_t *)a3;
          do
          {
            v250 = vmulq_s32(*(int32x4_t *)((char *)&v248[3] + v64), v243);
            v251 = vmulq_s32(*(int32x4_t *)((char *)v248 + 4 * v9), v243);
            v252 = vmulq_s32(*(int32x4_t *)((char *)&v248[1] + v64), v243);
            v253 = vmulq_s32(*(int32x4_t *)((char *)&v248[2] + v64), v243);
            v297.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v253, v253), v248[2], v245), v246), 9uLL);
            v297.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v252, v252), v248[1], v245), v246), 9uLL);
            v297.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v251, v251), *v248, v245), v246), 9uLL);
            v297.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v250, v250), v248[3], v245), v246), 9uLL);
            *v249++ = vqtbl4q_s8(v297, (int8x16_t)xmmword_20E80EF80);
            v248 += 4;
            v247 -= 16;
          }
          while (v247);
          if (v57 == v9)
            goto LABEL_66;
          if ((v9 & 8) == 0)
          {
            v68 = &a2[v57];
            v10 += v57;
LABEL_64:
            v81 = v9 - v57;
            v82 = (_BYTE *)(a3 + v57);
            do
            {
              v83 = *v10++;
              v84 = v83 * *(unsigned __int16 *)a8;
              v85 = *v68++;
              *v82++ = (v85 * *((unsigned __int16 *)a8 + 1) + 2 * v84 + 256) >> 9;
              --v81;
            }
            while (v81);
            goto LABEL_66;
          }
        }
        else
        {
          v57 = 0;
        }
        v65 = v57;
        v57 = v9 & 0x7FFFFFF8;
        v66 = a8;
        v67 = (uint16x4_t)vld1_dup_s16(v66++);
        v10 += v57;
        v68 = &a2[v57];
        v69 = (int32x4_t)vmovl_u16(v67);
        v70 = (uint16x4_t)vld1_dup_s16(v66);
        v71 = (int32x4_t)vmovl_u16(v70);
        v72 = (_QWORD *)(a3 + v65);
        v73 = (int32x4_t *)&a2[v65];
        v74 = v65 - v57;
        v75.i64[0] = 0x10000000100;
        v75.i64[1] = 0x10000000100;
        do
        {
          v76 = vmulq_s32(*(int32x4_t *)((char *)v73 + 4 * v9), v69);
          v77 = vmulq_s32(*(int32x4_t *)((char *)&v73[1] + v64), v69);
          v79 = *v73;
          v78 = v73[1];
          v73 += 2;
          v80 = (uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v76, v76), v79, v71), v75);
          v294.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v77, v77), v78, v71), v75), 9uLL);
          v294.val[0] = (int8x16_t)vshrq_n_u32(v80, 9uLL);
          *v72++ = vqtbl2q_s8(v294, (int8x16_t)xmmword_20E80EF90).u64[0];
          v74 += 8;
        }
        while (v74);
        if (v57 == v9)
          goto LABEL_66;
        goto LABEL_64;
      }
    }
    else
    {
      v57 = 0;
    }
    v68 = a2;
    goto LABEL_64;
  }
LABEL_66:
  v86 = a6;
  v87 = a3 + a6;
  v285 = (a7 - 1);
  if (v285 < 3)
  {
    v99 = 2;
    if (a7 == 3)
      goto LABEL_154;
    return result;
  }
  v269 = a7;
  v270 = a6;
  v88 = 0;
  v271 = v8;
  v284 = (v8 - 2);
  v278 = v9 + a6;
  v277 = v9;
  v281 = ((2 * (v15 - 3)) & 0xFFFFFFFFFFFFFFFCLL) + 8;
  v89 = 2 * a5;
  v90 = 3 * a5;
  v280 = (unint64_t)&result[((v15 - 3) & 0xFFFFFFFFFFFFFFFELL) + 4];
  v283 = v15 - 3;
  v91 = ((v15 - 3) >> 1) + 1;
  v92 = v91 & 0xF;
  if ((v91 & 0xF) == 0)
    v92 = 16;
  v93 = v91 - v92;
  v275 = 2 * v93 + 2;
  v276 = v93;
  v274 = 4 * v93;
  v94 = v9 & 0x7FFFFFF0;
  v268 = v94;
  v95 = v9 & 0x7FFFFFF8;
  v272 = v95;
  v273 = result + 2;
  v96 = 2;
  v97.i64[0] = 0x10000000100;
  v97.i64[1] = 0x10000000100;
  v98 = 2 * a5;
  v99 = 2;
  do
  {
    v100 = v11;
    v101 = v89 * v88;
    v102 = &result[(v96 * a5)];
    v103 = *(unsigned __int16 *)a8;
    v104 = *((unsigned __int16 *)a8 + 1);
    *v100 = (v104 * *v102 + 2 * v102[1] * v103 + 256) >> 9;
    v105 = (uint32x4_t *)(v100 + 1);
    v106 = (uint16x8_t)vdupq_n_s16(v104);
    if (v15 < 3)
    {
      if ((_DWORD)v15 != 2)
        goto LABEL_82;
    }
    else
    {
      if (v283 >= 0x20
        && ((v107 = (v89 + v101), (unint64_t)v105 < v280 + v107)
          ? (v108 = v282 + v107 >= (unint64_t)v100 + v281)
          : (v108 = 1),
            v108))
      {
        v109 = (const char *)&v273[v98];
        v110 = (uint32x4_t *)((char *)v105 + v274);
        v111 = (int16x8_t)vdupq_n_s32(v103);
        v112 = v276;
        do
        {
          v113 = v109 - 1;
          v114 = (unsigned __int128)vld2q_s8(v113);
          v291 = vld2q_s8(v109);
          v109 += 32;
          v115 = vaddl_high_u8((uint8x16_t)v291.val[1], (uint8x16_t)v114);
          v116 = vaddl_u8(*(uint8x8_t *)v291.val[1].i8, *(uint8x8_t *)&v114);
          v117 = (uint16x8_t)vuzp1q_s16(v111, v111);
          v118 = vmovl_u8(*(uint8x8_t *)v291.val[0].i8);
          v291.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v291.val[0]);
          v105[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v291.val[0].i8), *(uint16x4_t *)v115.i8, *(uint16x4_t *)v117.i8), v97), 9uLL);
          v105[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v106, (uint16x8_t)v291.val[0]), v115, v117), v97), 9uLL);
          *v105 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v118.i8), *(uint16x4_t *)v116.i8, *(uint16x4_t *)v117.i8), v97), 9uLL);
          v105[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v106, v118), v116, v117), v97), 9uLL);
          v105 += 4;
          v112 -= 16;
        }
        while (v112);
        v119 = v275;
        v105 = v110;
      }
      else
      {
        v119 = 2;
      }
      v121 = 0;
      do
      {
        v105->i32[0] = ((v102[(v119 + v121) | 1] + result[v98 - 1 + v119 + v121]) * v103
                      + result[v98 + v119 + v121] * v104
                      + 256) >> 9;
        v105 = (uint32x4_t *)((char *)v105 + 4);
        v121 += 2;
      }
      while (v119 + v121 < v15);
      if ((_DWORD)v119 + (_DWORD)v121 != (_DWORD)v15)
      {
LABEL_82:
        v120 = 2 * v103;
        goto LABEL_88;
      }
    }
    v120 = 2 * v103;
    v105->i32[0] = (v102[v15] * v104 + 2 * v103 * v102[v284] + 256) >> 9;
LABEL_88:
    if (v99 == 2)
      v122 = 0;
    else
      v122 = v99 + 1;
    v123 = (unsigned int *)v287[v122];
    v124 = &result[(v96 | 1) * a5];
    *v123 = (*v124 * v104 + v120 * v124[1] + 256) >> 9;
    v125 = (uint32x4_t *)(v123 + 1);
    if (v15 < 3)
    {
      if ((_DWORD)v15 == 2)
        goto LABEL_107;
    }
    else
    {
      if (v283 >= 0x20
        && ((v126 = (v101 + 3 * a5), (unint64_t)v125 < v280 + v126)
          ? (v127 = v282 + v126 >= (unint64_t)v123 + v281)
          : (v127 = 1),
            v127))
      {
        v128 = (const char *)&v273[v90];
        v129 = (uint32x4_t *)((char *)v125 + v274);
        v130 = (int16x8_t)vdupq_n_s32(v103);
        v131 = v276;
        do
        {
          v132 = v128 - 1;
          v133 = (unsigned __int128)vld2q_s8(v132);
          v292 = vld2q_s8(v128);
          v128 += 32;
          v134 = vaddl_high_u8((uint8x16_t)v292.val[1], (uint8x16_t)v133);
          v135 = vaddl_u8(*(uint8x8_t *)v292.val[1].i8, *(uint8x8_t *)&v133);
          v136 = (uint16x8_t)vuzp1q_s16(v130, v130);
          v137 = vmovl_u8(*(uint8x8_t *)v292.val[0].i8);
          v292.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v292.val[0]);
          v125[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v292.val[0].i8), *(uint16x4_t *)v134.i8, *(uint16x4_t *)v136.i8), v97), 9uLL);
          v125[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v106, (uint16x8_t)v292.val[0]), v134, v136), v97), 9uLL);
          *v125 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v106.i8, *(uint16x4_t *)v137.i8), *(uint16x4_t *)v135.i8, *(uint16x4_t *)v136.i8), v97), 9uLL);
          v125[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v106, v137), v135, v136), v97), 9uLL);
          v125 += 4;
          v131 -= 16;
        }
        while (v131);
        v138 = v275;
        v125 = v129;
      }
      else
      {
        v138 = 2;
      }
      v139 = 0;
      do
      {
        v125->i32[0] = ((v124[(v138 + v139) | 1] + result[v90 - 1 + v138 + v139]) * v103
                      + result[v90 + v138 + v139] * v104
                      + 256) >> 9;
        v125 = (uint32x4_t *)((char *)v125 + 4);
        v139 += 2;
      }
      while (v138 + v139 < v15);
      if ((_DWORD)v138 + (_DWORD)v139 == (_DWORD)v15)
LABEL_107:
        v125->i32[0] = (v124[v15] * v104 + v120 * v124[v284] + 256) >> 9;
    }
    v99 = (v99 + 2) % 3;
    v11 = (unsigned int *)v287[v99];
    if (v286 < 2)
      goto LABEL_70;
    if (v286 < 0x10)
    {
      v140 = 0;
LABEL_111:
      v141 = (unsigned int *)v287[v99];
      v142 = v100;
      v143 = v123;
      do
      {
LABEL_112:
        v145 = *v141++;
        v144 = v145;
        v146 = *v143++;
        v147 = v146 + v144;
        v148 = *v142++;
        *(_BYTE *)(v87 + v140++) = (v148 * *((unsigned __int16 *)a8 + 1)
                                  + v147 * *(unsigned __int16 *)a8
                                  + 256) >> 9;
      }
      while (v9 != v140);
      goto LABEL_70;
    }
    v140 = 0;
    v149 = a3 + v278 + v88 * v86;
    v151 = v87 < (unint64_t)&v123[v277] && (unint64_t)v123 < v149;
    v153 = v87 < (unint64_t)(a8 + 2) && v149 > (unint64_t)a8;
    v155 = v87 < (unint64_t)&v100[v277] && (unint64_t)v100 < v149;
    v156 = (unint64_t)v11 >= v149 || v87 >= (unint64_t)&v11[v277];
    if (!v156 || v151 || v153 || v155)
      goto LABEL_111;
    if (v286 >= 0x20)
    {
      v174 = 0;
      v175 = a8;
      v176 = (uint16x4_t)vld1_dup_s16(v175++);
      v177 = (int32x4_t)vmovl_u16(v176);
      v178 = (uint16x4_t)vld1_dup_s16(v175);
      v179 = (int32x4_t)vmovl_u16(v178);
      v180 = (int32x4_t *)v287[v99];
      v181 = (int32x4_t *)v100;
      v182 = (int32x4_t *)v123;
      do
      {
        v296.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v181[2], v179), vaddq_s32(v182[2], v180[2]), v177), v97), 9uLL);
        v296.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v181[1], v179), vaddq_s32(v182[1], v180[1]), v177), v97), 9uLL);
        v296.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(*v181, v179), vaddq_s32(*v182, *v180), v177), v97), 9uLL);
        v296.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v181[3], v179), vaddq_s32(v182[3], v180[3]), v177), v97), 9uLL);
        *(int8x16_t *)(v87 + v174) = vqtbl4q_s8(v296, (int8x16_t)xmmword_20E80EF80);
        v174 += 16;
        v182 += 4;
        v181 += 4;
        v180 += 4;
      }
      while (v94 != v174);
      if (v94 == v9)
        goto LABEL_70;
      v157 = v9 & 0x7FFFFFF0;
      if ((v9 & 8) == 0)
      {
        v143 = &v123[v268];
        v142 = &v100[v268];
        v141 = &v11[v268];
        v140 = v9 & 0x7FFFFFF0;
        goto LABEL_112;
      }
    }
    else
    {
      v157 = 0;
    }
    v141 = &v11[v272];
    v142 = &v100[v272];
    v143 = &v123[v272];
    v158 = a8;
    v159 = (uint16x4_t)vld1_dup_s16(v158++);
    v160 = (uint16x4_t)vld1_dup_s16(v158);
    v161 = (int32x4_t)vmovl_u16(v159);
    v162 = (int32x4_t)vmovl_u16(v160);
    v163 = (int32x4_t *)&v123[v157];
    v164 = (int32x4_t *)&v100[v157];
    v165 = (int32x4_t *)&v11[v157];
    do
    {
      v166 = *v165;
      v167 = v165[1];
      v165 += 2;
      v168 = *v163;
      v169 = v163[1];
      v163 += 2;
      v170 = vaddq_s32(v169, v167);
      v171 = vaddq_s32(v168, v166);
      v173 = *v164;
      v172 = v164[1];
      v164 += 2;
      v288.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v172, v162), v170, v161), v97), 9uLL);
      v288.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmulq_s32(v173, v162), v171, v161), v97), 9uLL);
      *(_QWORD *)(v87 + v157) = vqtbl2q_s8(v288, (int8x16_t)xmmword_20E80EF90).u64[0];
      v157 += 8;
    }
    while (v95 != v157);
    v140 = v9 & 0x7FFFFFF8;
    if (v95 != v9)
      goto LABEL_112;
LABEL_70:
    v96 += 2;
    v87 += v86;
    ++v88;
    v98 += v89;
    v90 += v89;
  }
  while (v96 < v285);
  a6 = v270;
  v8 = v271;
  a7 = v269;
  if ((_DWORD)v96 != (_DWORD)v285)
    return result;
LABEL_154:
  if (v87 >= a3 + ((a7 + 1) >> 1) * a6)
    sub_20E80C0B0();
  v183 = (unsigned int *)v287[v99];
  v184 = (v285 * a5);
  v185 = &result[v184];
  v186 = *(unsigned __int16 *)a8;
  v187 = *((unsigned __int16 *)a8 + 1);
  *v183 = (v187 * result[v184] + 2 * result[v184 + 1] * v186 + 256) >> 9;
  v188 = (uint32x4_t *)(v183 + 1);
  if (v15 < 3)
  {
    if ((_DWORD)v15 == 2)
      goto LABEL_173;
  }
  else
  {
    v189 = v15 - 3;
    if (v15 - 3 >= 0x20
      && ((v190 = &result[v184],
           v191 = (unint64_t)&result[v184 + 1],
           v188 < (uint32x4_t *)&v190[(v189 & 0xFFFFFFFFFFFFFFFELL) + 4])
        ? (v192 = v191 >= (unint64_t)v183 + ((2 * v189) & 0x7FFFFFFFFFFFFFFCLL) + 8)
        : (v192 = 1),
          v192))
    {
      v193 = (v189 >> 1) + 1;
      v194 = v193 & 0xF;
      if ((v193 & 0xF) == 0)
        v194 = 16;
      v195 = v193 - v194;
      v196 = 2 * v195 + 2;
      v197 = (int16x8_t)vdupq_n_s32(v186);
      v198 = (uint32x4_t *)((char *)v188 + 4 * v195);
      v199 = (const char *)(v190 + 2);
      v200 = (uint16x8_t)vuzp1q_s16(v197, v197);
      v201 = (uint16x8_t)vdupq_n_s16(v187);
      v202.i64[0] = 0x10000000100;
      v202.i64[1] = 0x10000000100;
      do
      {
        v203 = v199 - 1;
        v204 = (unsigned __int128)vld2q_s8(v203);
        v293 = vld2q_s8(v199);
        v199 += 32;
        v205 = vaddl_high_u8((uint8x16_t)v293.val[1], (uint8x16_t)v204);
        v206 = vaddl_u8(*(uint8x8_t *)v293.val[1].i8, *(uint8x8_t *)&v204);
        v207 = vmovl_u8(*(uint8x8_t *)v293.val[0].i8);
        v293.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v293.val[0]);
        v188[2] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v201.i8, *(uint16x4_t *)v293.val[0].i8), *(uint16x4_t *)v205.i8, *(uint16x4_t *)v200.i8), v202), 9uLL);
        v188[3] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v201, (uint16x8_t)v293.val[0]), v205, v200), v202), 9uLL);
        *v188 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v201.i8, *(uint16x4_t *)v207.i8), *(uint16x4_t *)v206.i8, *(uint16x4_t *)v200.i8), v202), 9uLL);
        v188[1] = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16(v201, v207), v206, v200), v202), 9uLL);
        v188 += 4;
        v195 -= 16;
      }
      while (v195);
      v188 = v198;
    }
    else
    {
      v196 = 2;
    }
    result = 0;
    do
    {
      v188->i32[0] = ((v185[(unint64_t)&result[v196] | 1] + v185[v196 - 1 + (_QWORD)result]) * v186
                    + v185[v196 + (_QWORD)result] * v187
                    + 256) >> 9;
      v188 = (uint32x4_t *)((char *)v188 + 4);
      result += 2;
    }
    while ((unint64_t)&result[v196] < v15);
    if ((_DWORD)v196 + (_DWORD)result == (_DWORD)v15)
LABEL_173:
      v188->i32[0] = (v185[v15] * v187 + 2 * v186 * v185[v8 - 2] + 256) >> 9;
  }
  if (v286 >= 2)
  {
    v208 = (int32x4_t *)v287[(v99 + 2) % 3];
    if (v286 < 0x10)
    {
      v209 = 0;
      goto LABEL_177;
    }
    v209 = 0;
    v217 = v87 + v9;
    v219 = v87 < (unint64_t)(a8 + 2) && v217 > (unint64_t)a8;
    v221 = v87 < (unint64_t)&v183[v9] && (unint64_t)v183 < v217;
    v222 = (unint64_t)v208 >= v217 || v87 >= (unint64_t)v208 + 4 * v9;
    if (!v222 || v219 || v221)
    {
LABEL_177:
      v210 = v208;
      v211 = v183;
    }
    else if (v286 >= 0x20)
    {
      v254 = a8;
      v255 = (uint16x4_t)vld1_dup_s16(v254++);
      v209 = v9 & 0x7FFFFFF0;
      v256 = (int32x4_t)vmovl_u16(v255);
      v257 = (uint16x4_t)vld1_dup_s16(v254);
      v258 = (int32x4_t)vmovl_u16(v257);
      v259.i64[0] = 0x10000000100;
      v259.i64[1] = 0x10000000100;
      v260 = v209;
      v261 = v208;
      v262 = (int32x4_t *)v183;
      v263 = (int8x16_t *)v87;
      do
      {
        v264 = vmulq_s32(v261[3], v256);
        v265 = vmulq_s32(v261[2], v256);
        v266 = vmulq_s32(*v261, v256);
        v267 = vmulq_s32(v261[1], v256);
        v298.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v267, v267), v262[1], v258), v259), 9uLL);
        v298.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v266, v266), *v262, v258), v259), 9uLL);
        v298.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v265, v265), v262[2], v258), v259), 9uLL);
        v298.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v264, v264), v262[3], v258), v259), 9uLL);
        *v263++ = vqtbl4q_s8(v298, (int8x16_t)xmmword_20E80EF80);
        v262 += 4;
        v261 += 4;
        v260 -= 16;
      }
      while (v260);
      if (v209 == v9)
        return result;
      if ((v9 & 8) != 0)
        goto LABEL_202;
      v211 = &v183[v209];
      v210 = (int32x4_t *)((char *)v208 + 4 * v209);
    }
    else
    {
      v209 = 0;
LABEL_202:
      v223 = v209;
      v209 = v9 & 0x7FFFFFF8;
      v210 = (int32x4_t *)((char *)v208 + 4 * v209);
      v211 = &v183[v209];
      v224 = a8;
      v225 = (uint16x4_t)vld1_dup_s16(v224++);
      v226 = (int32x4_t)vmovl_u16(v225);
      v227 = (uint16x4_t)vld1_dup_s16(v224);
      v228 = (int32x4_t)vmovl_u16(v227);
      v229 = (_QWORD *)(v87 + v223);
      v230 = (int32x4_t *)&v183[v223];
      v231 = (int32x4_t *)((char *)v208 + 4 * v223);
      v232 = v223 - v209;
      v233.i64[0] = 0x10000000100;
      v233.i64[1] = 0x10000000100;
      do
      {
        v235 = *v231;
        v234 = v231[1];
        v231 += 2;
        v236 = vmulq_s32(v235, v226);
        v237 = vmulq_s32(v234, v226);
        v239 = *v230;
        v238 = v230[1];
        v230 += 2;
        v240 = (uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v236, v236), v239, v228), v233);
        v295.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vaddq_s32(v237, v237), v238, v228), v233), 9uLL);
        v295.val[0] = (int8x16_t)vshrq_n_u32(v240, 9uLL);
        *v229++ = vqtbl2q_s8(v295, (int8x16_t)xmmword_20E80EF90).u64[0];
        v232 += 8;
      }
      while (v232);
      if (v209 == v9)
        return result;
    }
    v212 = v9 - v209;
    v213 = (_BYTE *)(v87 + v209);
    do
    {
      v214 = v210->i32[0];
      v210 = (int32x4_t *)((char *)v210 + 4);
      v215 = v214 * *(unsigned __int16 *)a8;
      v216 = *v211++;
      *v213++ = (v216 * *((unsigned __int16 *)a8 + 1) + 2 * v215 + 256) >> 9;
      --v212;
    }
    while (v212);
  }
  return result;
}

unint64_t *sub_20E7DEDD8(unint64_t *result, double a2, double a3, double a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  double v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int8x16_t v26;
  unint64_t v27;
  int v28;
  __int16 v29;
  __int128 v30;
  __int16 v31;
  __int128 v32;
  __int16 v33;

  v33 = 0;
  v32 = xmmword_20E80EFC4;
  v31 = 2;
  v9 = 1.60212244e-306;
  v30 = xmmword_20E80EFD6;
  v10 = (_QWORD *)result[6];
  if (v10[2] >= 2uLL)
  {
    v11 = result;
    v12 = 0;
    v13 = *result;
    v14 = result[1];
    v15 = 1;
    v17 = result[7];
    v16 = result[8];
    do
    {
      v14 = (v14 + 1) >> 1;
      v13 = (v13 + 1) >> 1;
      v18 = 144 * v10[3] * v15;
      sub_20E7DC5F0(*(int8x16_t **)(*(_QWORD *)(v16 + 48) + v12 + 72), (unsigned int *)v11[18], *(_WORD **)(*(_QWORD *)(v17 + 48) + v18 + 72), v13, *(_QWORD *)(*(_QWORD *)(v16 + 48) + v12 + 40), *(_QWORD *)(*(_QWORD *)(v17 + 48) + v18 + 40), v14, (unsigned __int16 *)&v32, v9, a3, a4, a5, a6, a7, a8, a9);
      sub_20E7E1BE0(*(_QWORD *)(*(_QWORD *)(v17 + 48) + v18 + 72), *(_QWORD *)(v10[6] + v18 + 72), v13, *(_QWORD *)(*(_QWORD *)(v17 + 48) + v18 + 40), *(_QWORD *)(v10[6] + v18 + 40), v14);
      v18 += 144;
      sub_20E7DC5F0(*(int8x16_t **)(*(_QWORD *)(v16 + 48) + v12 + 72), (unsigned int *)v11[18], *(_WORD **)(*(_QWORD *)(v17 + 48) + v18 + 72), v13, *(_QWORD *)(*(_QWORD *)(v16 + 48) + v12 + 40), *(_QWORD *)(*(_QWORD *)(v17 + 48) + v18 + 40), v14, (unsigned __int16 *)&v30, v19, v20, v21, v22, v23, v24, v25, v26);
      result = (unint64_t *)sub_20E7E1BE0(*(_QWORD *)(*(_QWORD *)(v17 + 48) + v18 + 72), *(_QWORD *)(v10[6] + v18 + 72), v13, *(_QWORD *)(*(_QWORD *)(v17 + 48) + v18 + 40), *(_QWORD *)(v10[6] + v18 + 40), v14);
      v27 = v10[2];
      if (v15 < v27 - 1)
      {
        v29 = 109;
        v28 = 19267693;
        result = (unint64_t *)sub_20E7DDD30(*(unsigned __int8 **)(*(_QWORD *)(v16 + 48) + v12 + 72), (unsigned int *)v11[18], *(_QWORD *)(*(_QWORD *)(v16 + 48) + v12 + 216), v13, *(_DWORD *)(*(_QWORD *)(v16 + 48) + v12 + 40), *(_DWORD *)(*(_QWORD *)(v16 + 48) + v12 + 184), v14, (const __int16 *)&v28);
        v27 = v10[2];
      }
      ++v15;
      v12 += 144;
    }
    while (v15 < v27);
  }
  return result;
}

unint64_t *sub_20E7DEFB8(unint64_t *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int8x16_t v18;

  sub_20E7DC4B0((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return sub_20E7DEDD8(a1, v11, v12, v13, v14, v15, v16, v17, v18);
}

void sub_20E7DEFDC(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24C9A8E68;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[12];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  JUMPOUT(0x212BC47D4);
}

void sub_20E7DF0A4(vImagePixelCount *a1)
{
  vImagePixelCount v1;
  vImagePixelCount *v2;
  uint64_t v3;
  vImagePixelCount v4;
  vImagePixelCount v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *data;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  size_t rowBytes;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  vImagePixelCount v30;
  vImagePixelCount v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BYTE *v35;
  char *v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  size_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  size_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  char *v59;
  char *v60;
  _BYTE *v61;
  vImagePixelCount *v62;
  void **v63;
  char *v64;
  std::__shared_weak_count *v65;
  _QWORD *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  char *v84;
  size_t v85;
  char *v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  size_t v91;
  size_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  vImagePixelCount v117;
  char *v118;
  uint64_t v119;
  vImagePixelCount v120;
  vImagePixelCount v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  char *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  size_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  char *v149;
  size_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  char *v164;
  vImagePixelCount v165;
  char *v166;
  void (***v167)(char *);
  void (**v168)(char *);
  BOOL v169;
  uint64_t v170;
  vImagePixelCount *v171;
  _QWORD *v172;
  _QWORD *v173;
  vImagePixelCount v174;
  vImagePixelCount v175;
  uint64_t __sz;
  unint64_t v178;
  char *v179;
  unint64_t v180;
  unint64_t v181;
  size_t v182;
  _QWORD *v183;
  char *v184;
  size_t v185;
  char *v186;
  char *v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  vImagePixelCount v192;
  vImagePixelCount v193;
  size_t v194;
  unint64_t v195;
  __int128 v196;
  uint64_t v197;
  void *__p;
  std::__shared_weak_count *v199;
  vImage_Buffer buf;
  char *v201;
  vImagePixelCount v202;
  __int128 v203;
  vImagePixelCount *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;

  v1 = a1[2];
  if (v1)
  {
    v2 = a1;
    if (a1[3])
    {
      v3 = 0;
      v173 = a1 + 9;
      v171 = a1 + 8;
      v172 = a1 + 6;
      v4 = *a1;
      v5 = a1[1];
      v6 = 1;
      while (!v6)
      {
LABEL_5:
        v7 = *((unsigned __int8 *)v2 + 41);
        v5 = (v5 + v7) >> 1;
        v4 = (v4 + v7) >> 1;
        if (++v3 >= v1)
          return;
      }
      v170 = v3;
      v8 = 0;
      v175 = v4;
      __sz = 8 * v5;
      v174 = v5;
LABEL_9:
      vImageBuffer_Init(&buf, v5, v4, 8u, 0);
      data = (std::__shared_weak_count_vtbl *)buf.data;
      v10 = (std::__shared_weak_count *)operator new();
      v10->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9A8E98;
      v10->__shared_weak_owners_ = 0;
      v10[1].__vftable = data;
      v199 = v10;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      rowBytes = buf.rowBytes;
      __p = 0;
      if (v2[4] * v4 > buf.rowBytes)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      *(_QWORD *)&v196 = data;
      *((_QWORD *)&v196 + 1) = v10;
      v193 = v4;
      v194 = buf.rowBytes;
      v192 = v2[4];
      LOBYTE(v197) = 0;
      v195 = v5;
      if (v5)
      {
        if (v5 >> 61)
          sub_20E78D874();
        v14 = operator new(__sz);
        bzero(v14, __sz);
        v15 = 0;
        v16 = 0;
        __p = v14;
        do
        {
          *((_QWORD *)v14 + v16++) = v196 + v15;
          v15 += rowBytes;
        }
        while (v5 != v16);
      }
      v18 = (_OWORD *)v2[10];
      v17 = v2[11];
      if ((unint64_t)v18 < v17)
      {
        v19 = *(_OWORD *)&buf.width;
        *v18 = *(_OWORD *)&buf.data;
        v18[1] = v19;
        v20 = v18 + 2;
        goto LABEL_29;
      }
      v21 = (_OWORD *)*v173;
      v22 = ((uint64_t)v18 - *v173) >> 5;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 59)
        sub_20E78D874();
      v24 = v17 - (_QWORD)v21;
      if (v24 >> 4 > v23)
        v23 = v24 >> 4;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
        v25 = 0x7FFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 59)
          goto LABEL_180;
        v26 = (char *)operator new(32 * v25);
        v27 = *(_OWORD *)&buf.width;
        v28 = &v26[32 * v22];
        *(_OWORD *)v28 = *(_OWORD *)&buf.data;
        *((_OWORD *)v28 + 1) = v27;
        v29 = (uint64_t)v28;
        if (v18 == v21)
        {
LABEL_27:
          v20 = v28 + 32;
          v2[9] = v29;
          v2[10] = (vImagePixelCount)(v28 + 32);
          v2[11] = (vImagePixelCount)&v26[32 * v25];
          if (!v18)
            goto LABEL_29;
          goto LABEL_28;
        }
      }
      else
      {
        v26 = 0;
        v56 = *(_OWORD *)&buf.width;
        v28 = (char *)(32 * v22);
        *(_OWORD *)v28 = *(_OWORD *)&buf.data;
        *((_OWORD *)v28 + 1) = v56;
        v29 = 32 * v22;
        if (v18 == v21)
          goto LABEL_27;
      }
      do
      {
        v57 = *(v18 - 1);
        *(_OWORD *)(v29 - 32) = *(v18 - 2);
        *(_OWORD *)(v29 - 16) = v57;
        v29 -= 32;
        v18 -= 2;
      }
      while (v18 != v21);
      v18 = (_OWORD *)*v173;
      v20 = v28 + 32;
      v2[9] = v29;
      v2[10] = (vImagePixelCount)(v28 + 32);
      v2[11] = (vImagePixelCount)&v26[32 * v25];
      if (!v18)
      {
LABEL_29:
        v2[10] = (vImagePixelCount)v20;
        v31 = v2[7];
        v30 = v2[8];
        v178 = v8;
        if (v31 < v30)
        {
          *(_QWORD *)v31 = &off_24C9A8A80;
          *(_BYTE *)(v31 + 8) = 0;
          *(_BYTE *)(v31 + 112) = 0;
          *(_OWORD *)(v31 + 16) = 0u;
          *(_OWORD *)(v31 + 32) = 0u;
          *(_OWORD *)(v31 + 48) = 0u;
          *(_OWORD *)(v31 + 64) = 0u;
          *(_OWORD *)(v31 + 80) = 0u;
          *(_OWORD *)(v31 + 89) = 0u;
          *(_QWORD *)(v31 + 120) = 0;
          *(_QWORD *)(v31 + 128) = 0;
          *(_QWORD *)(v31 + 136) = 0;
          if (v192 * v193 > v194)
          {
            sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
            abort();
          }
          v32 = *(std::__shared_weak_count **)(v31 + 80);
          *(_OWORD *)(v31 + 72) = v196;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          *(_BYTE *)(v31 + 8) = 0;
          *(_QWORD *)(v31 + 32) = v193;
          *(_QWORD *)(v31 + 40) = v194;
          *(_QWORD *)(v31 + 48) = v5;
          *(_QWORD *)(v31 + 16) = v192;
          *(_QWORD *)(v31 + 24) = 0;
          *(_BYTE *)(v31 + 112) = 0;
          *(_QWORD *)(v31 + 104) = v197;
          *(_QWORD *)(v31 + 56) = v192;
          *(_QWORD *)(v31 + 64) = v192;
          v35 = *(_BYTE **)(v31 + 120);
          v36 = *(char **)(v31 + 128);
          v37 = (v36 - v35) >> 3;
          v38 = v5 >= v37;
          v39 = v5 - v37;
          if (v5 <= v37)
          {
            v2 = a1;
            v5 = v174;
            v4 = v175;
            if (!v38)
              *(_QWORD *)(v31 + 128) = &v35[8 * v195];
            if (v195)
              goto LABEL_99;
          }
          else
          {
            v40 = *(_QWORD *)(v31 + 136);
            if (v39 <= (v40 - (uint64_t)v36) >> 3)
            {
              v91 = 8 * v39;
              bzero(*(void **)(v31 + 128), v91);
              *(_QWORD *)(v31 + 128) = &v36[v91];
              v2 = a1;
              v5 = v174;
              v4 = v175;
            }
            else
            {
              if (v5 >> 61)
                sub_20E78D874();
              v41 = v40 - (_QWORD)v35;
              v42 = v41 >> 2;
              if (v41 >> 2 <= v5)
                v42 = v5;
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
                v42 = 0x1FFFFFFFFFFFFFFFLL;
              if (v42 >> 61)
                sub_20E78D888();
              v188 = v42;
              v43 = (char *)operator new(8 * v42);
              v44 = 8 * v39;
              v45 = v43;
              v46 = &v43[8 * v37];
              v185 = v44;
              bzero(v46, v44);
              if (v36 == v35)
              {
                v48 = v46;
                v2 = a1;
                v49 = v45;
                v50 = v185;
              }
              else
              {
                v47 = v36 - 8 - v35;
                if (v47 < 0x58)
                {
                  v48 = v46;
                  v2 = a1;
                  v49 = v45;
                  v50 = v185;
                  goto LABEL_95;
                }
                v49 = v45;
                v48 = v46;
                v2 = a1;
                v50 = v185;
                if ((unint64_t)(v35 - v45) < 0x20)
                  goto LABEL_191;
                v94 = (v47 >> 3) + 1;
                v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
                v96 = &v36[-v95];
                v48 = &v46[-v95];
                v97 = &v45[8 * v37 - 16];
                v98 = v36 - 16;
                v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v100 = *(_OWORD *)v98;
                  *((_OWORD *)v97 - 1) = *((_OWORD *)v98 - 1);
                  *(_OWORD *)v97 = v100;
                  v97 -= 32;
                  v98 -= 32;
                  v99 -= 4;
                }
                while (v99);
                v36 = v96;
                if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_191:
                  do
                  {
LABEL_95:
                    v101 = *((_QWORD *)v36 - 1);
                    v36 -= 8;
                    *((_QWORD *)v48 - 1) = v101;
                    v48 -= 8;
                  }
                  while (v36 != v35);
                }
                v36 = *(char **)(v31 + 120);
              }
              *(_QWORD *)(v31 + 120) = v48;
              *(_QWORD *)(v31 + 128) = &v46[v50];
              *(_QWORD *)(v31 + 136) = &v49[8 * v188];
              v5 = v174;
              v4 = v175;
              if (v36)
                operator delete(v36);
            }
LABEL_99:
            v102 = 0;
            v103 = 0;
            do
            {
              *(_QWORD *)(*(_QWORD *)(v31 + 120) + 8 * v103++) = *(_QWORD *)(v31 + 72) + v102;
              v102 += v194;
            }
            while (v195 != v103);
          }
          v2[7] = v31 + 144;
          v2[7] = v31 + 144;
          v104 = __p;
          if (!__p)
            goto LABEL_103;
LABEL_102:
          operator delete(v104);
          goto LABEL_103;
        }
        v51 = 0x8E38E38E38E38E39 * ((uint64_t)(v31 - *v172) >> 4);
        v52 = v51 + 1;
        if (v51 + 1 > 0x1C71C71C71C71C7)
          sub_20E78D874();
        v53 = 0x8E38E38E38E38E39 * ((uint64_t)(v30 - *v172) >> 4);
        if (2 * v53 > v52)
          v52 = 2 * v53;
        if (v53 >= 0xE38E38E38E38E3)
          v54 = 0x1C71C71C71C71C7;
        else
          v54 = v52;
        v204 = v171;
        if (v54)
        {
          if (v54 > 0x1C71C71C71C71C7)
LABEL_180:
            sub_20E78D888();
          v55 = (char *)operator new(144 * v54);
        }
        else
        {
          v55 = 0;
        }
        v58 = &v55[144 * v51];
        v201 = v55;
        v202 = (vImagePixelCount)v58;
        *(_QWORD *)&v203 = v58;
        *((_QWORD *)&v203 + 1) = &v55[144 * v54];
        *(_QWORD *)v58 = &off_24C9A8A80;
        v59 = v58;
        v58[112] = 0;
        *((_OWORD *)v58 + 2) = 0u;
        *((_OWORD *)v58 + 3) = 0u;
        *((_OWORD *)v58 + 4) = 0u;
        *((_OWORD *)v58 + 5) = 0u;
        *(_OWORD *)(v58 + 89) = 0u;
        v60 = v58;
        *((_QWORD *)v58 + 16) = 0;
        *((_QWORD *)v58 + 17) = 0;
        v58[8] = 0;
        v61 = v58 + 8;
        *((_OWORD *)v59 + 1) = 0u;
        v62 = (vImagePixelCount *)(v59 + 16);
        *((_QWORD *)v60 + 15) = 0;
        v63 = (void **)(v60 + 120);
        if (v192 * v193 > v194)
        {
          sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
          abort();
        }
        v186 = v55;
        v189 = v51;
        v64 = &v55[144 * v51];
        v65 = (std::__shared_weak_count *)*((_QWORD *)v64 + 10);
        *(_OWORD *)(v64 + 72) = v196;
        v66 = v64 + 72;
        if (v65)
        {
          v67 = (unint64_t *)&v65->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v69 = &v186[144 * v189];
        v72 = (char *)*((_QWORD *)v69 + 16);
        v70 = v69 + 128;
        v71 = v72;
        *v61 = 0;
        *(v70 - 13) = 0;
        *(v70 - 12) = v193;
        *(v70 - 11) = v194;
        *(v70 - 10) = v5;
        *v62 = v192;
        *(v70 - 3) = v197;
        *((_BYTE *)v70 - 16) = 0;
        *(v70 - 9) = v192;
        *(v70 - 8) = v192;
        v73 = (char *)*v63;
        v74 = v72 - (_BYTE *)*v63;
        v75 = v74 >> 3;
        v76 = v195 - (v74 >> 3);
        if (v195 <= v74 >> 3)
        {
          if (v195 < v74 >> 3)
            *v70 = &v73[8 * v195];
          if (!v195)
            goto LABEL_117;
          goto LABEL_115;
        }
        v77 = &v186[144 * v189];
        v80 = *((_QWORD *)v77 + 17);
        v79 = v77 + 136;
        v78 = v80;
        if (v76 <= (v80 - (uint64_t)v71) >> 3)
        {
          v92 = 8 * v76;
          v93 = v70;
          bzero(v71, v92);
          *v93 = &v71[v92];
          goto LABEL_115;
        }
        if (v195 >> 61)
          sub_20E78D874();
        v183 = v79;
        v81 = v78 - (_QWORD)v73;
        v82 = v81 >> 2;
        if (v81 >> 2 <= v195)
          v82 = v195;
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
          v82 = 0x1FFFFFFFFFFFFFFFLL;
        if (v82 >> 61)
          sub_20E78D888();
        v83 = v70;
        v181 = v82;
        v84 = (char *)operator new(8 * v82);
        v85 = 8 * v76;
        v187 = v84;
        v190 = 8 * v76;
        v86 = &v84[8 * v75];
        bzero(v86, v85);
        if (v71 == v73)
        {
          *v63 = v86;
          *v83 = &v86[v190];
          *v183 = &v187[8 * v181];
          if (!v71)
          {
LABEL_115:
            v115 = 0;
            v116 = 0;
            do
            {
              *((_QWORD *)*v63 + v116++) = *v66 + v115;
              v115 += v194;
            }
            while (v195 != v116);
LABEL_117:
            v117 = v203 + 144;
            *(_QWORD *)&v203 = v203 + 144;
            v2 = a1;
            v118 = (char *)a1[7];
            v184 = (char *)a1[6];
            if (v118 == v184)
            {
              a1[6] = v202;
              a1[7] = v117;
              a1[8] = *((_QWORD *)&v203 + 1);
              if (v118)
                goto LABEL_169;
              goto LABEL_170;
            }
            v119 = 0;
            v120 = v202;
            while (1)
            {
              v121 = v120;
              *(_QWORD *)(v120 - 144) = &off_24C9A8A80;
              v120 -= 144;
              *(_BYTE *)(v120 + 8) = 0;
              *(_BYTE *)(v120 + 112) = 0;
              *(_OWORD *)(v120 + 16) = 0u;
              *(_OWORD *)(v120 + 32) = 0u;
              *(_OWORD *)(v120 + 48) = 0u;
              *(_OWORD *)(v120 + 64) = 0u;
              *(_OWORD *)(v120 + 80) = 0u;
              *(_OWORD *)(v120 + 89) = 0u;
              *(_QWORD *)(v120 + 120) = 0;
              *(_QWORD *)(v120 + 128) = 0;
              *(_QWORD *)(v120 + 136) = 0;
              v122 = *((_QWORD *)v118 - 9);
              v205 = v122;
              v123 = (std::__shared_weak_count *)*((_QWORD *)v118 - 8);
              v206 = v123;
              if (v123)
              {
                v124 = (unint64_t *)&v123->__shared_owners_;
                do
                  v125 = __ldxr(v124);
                while (__stxr(v125 + 1, v124));
              }
              v126 = *((_QWORD *)v118 - 14);
              v127 = *((_QWORD *)v118 - 13);
              v129 = *((_QWORD *)v118 - 16);
              v128 = *((_QWORD *)v118 - 15);
              v130 = *(v118 - 136);
              if (*(v118 - 136))
                v131 = *((_QWORD *)v118 - 14);
              else
                v131 = 0;
              if (v128 + v129 * v126 + v131 > v127)
              {
                sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
                abort();
              }
              v191 = v119;
              v132 = *((_QWORD *)v118 - 12);
              v205 = 0;
              v206 = 0;
              v133 = *(std::__shared_weak_count **)(v121 - 64);
              *(_QWORD *)(v121 - 72) = v122;
              *(_QWORD *)(v121 - 64) = v123;
              if (v133)
              {
                v134 = (unint64_t *)&v133->__shared_owners_;
                do
                  v135 = __ldaxr(v134);
                while (__stlxr(v135 - 1, v134));
                if (!v135)
                {
                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                  std::__shared_weak_count::__release_weak(v133);
                }
              }
              *(_BYTE *)(v121 - 136) = v130;
              *(_QWORD *)(v121 - 112) = v126;
              *(_QWORD *)(v121 - 104) = v127;
              *(_QWORD *)(v121 - 96) = v132;
              *(_QWORD *)(v121 - 128) = v129;
              *(_QWORD *)(v121 - 120) = v128;
              v136 = *((_QWORD *)v118 - 5);
              *(_BYTE *)(v121 - 32) = *(v118 - 32);
              *(_QWORD *)(v121 - 40) = v136;
              *(_QWORD *)(v121 - 88) = v129 + v130 + v128;
              *(_QWORD *)(v121 - 80) = v129 + v130;
              v137 = *(_BYTE **)(v121 - 24);
              v138 = *(char **)(v121 - 16);
              v139 = (v138 - v137) >> 3;
              v140 = v132 - v139;
              if (v132 <= v139)
              {
                if (v132 < v139)
                  *(_QWORD *)(v121 - 16) = &v137[8 * v132];
                if (!v132)
                  goto LABEL_159;
                goto LABEL_157;
              }
              v141 = *(_QWORD *)(v121 - 8);
              if (v140 <= (v141 - (uint64_t)v138) >> 3)
              {
                bzero(*(void **)(v121 - 16), 8 * v140);
                *(_QWORD *)(v121 - 16) = &v138[8 * v140];
                goto LABEL_157;
              }
              if (v132 >> 61)
                sub_20E78D874();
              v142 = v141 - (_QWORD)v137;
              v143 = v142 >> 2;
              if (v142 >> 2 <= v132)
                v143 = v132;
              if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
                v143 = 0x1FFFFFFFFFFFFFFFLL;
              if (v143 >> 61)
                sub_20E78D888();
              v180 = v143;
              v144 = (char *)operator new(8 * v143);
              v145 = 8 * v140;
              v179 = v144;
              v146 = &v144[8 * v139];
              v182 = v145;
              bzero(v146, v145);
              if (v138 != v137)
                break;
              *(_QWORD *)(v121 - 24) = v146;
              *(_QWORD *)(v121 - 16) = &v146[v182];
              *(_QWORD *)(v121 - 8) = &v179[8 * v180];
              if (v138)
                goto LABEL_156;
LABEL_157:
              v159 = 0;
              v160 = 0;
              do
              {
                *(_QWORD *)(*(_QWORD *)(v121 - 24) + 8 * v160++) = *(_QWORD *)(v121 - 72) + v159;
                v159 += v127;
              }
              while (v132 != v160);
LABEL_159:
              v161 = v206;
              if (v206)
              {
                v162 = (unint64_t *)&v206->__shared_owners_;
                do
                  v163 = __ldaxr(v162);
                while (__stlxr(v163 - 1, v162));
                if (!v163)
                {
                  ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                  std::__shared_weak_count::__release_weak(v161);
                }
              }
              v118 -= 144;
              v119 = v191 - 144;
              if (v118 == v184)
              {
                v118 = (char *)a1[6];
                v164 = (char *)a1[7];
                a1[6] = v120;
                v2 = a1;
                v165 = v203;
                *(_OWORD *)(a1 + 7) = v203;
                v117 = v165;
                if (v164 != v118)
                {
                  v166 = v164 - 144;
                  v167 = (void (***)(char *))(v164 - 144);
                  do
                  {
                    v168 = *v167;
                    v167 -= 18;
                    (*v168)(v166);
                    v169 = v166 == v118;
                    v166 = (char *)v167;
                  }
                  while (!v169);
                }
                if (v118)
LABEL_169:
                  operator delete(v118);
LABEL_170:
                v5 = v174;
                v4 = v175;
                v8 = v178;
                v2[7] = v117;
                v104 = __p;
                if (__p)
                  goto LABEL_102;
LABEL_103:
                if (v199)
                {
                  v105 = (unint64_t *)&v199->__shared_owners_;
                  do
                    v106 = __ldaxr(v105);
                  while (__stlxr(v106 - 1, v105));
                  if (!v106)
                  {
                    ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                    std::__shared_weak_count::__release_weak(v199);
                  }
                }
                ++v8;
                v6 = v2[3];
                if (v8 >= v6)
                {
                  v1 = v2[2];
                  v3 = v170;
                  goto LABEL_5;
                }
                goto LABEL_9;
              }
            }
            v147 = v138 - 8 - v137;
            if (v147 >= 0x58)
            {
              v149 = v179;
              v148 = v146;
              v150 = v182;
              if ((unint64_t)(v137 - v179) >= 0x20)
              {
                v151 = (v147 >> 3) + 1;
                v152 = 8 * (v151 & 0x3FFFFFFFFFFFFFFCLL);
                v153 = &v138[-v152];
                v148 = &v146[-v152];
                v154 = &v179[8 * v139 - 16];
                v155 = v138 - 16;
                v156 = v151 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v157 = *(_OWORD *)v155;
                  *((_OWORD *)v154 - 1) = *((_OWORD *)v155 - 1);
                  *(_OWORD *)v154 = v157;
                  v154 -= 32;
                  v155 -= 32;
                  v156 -= 4;
                }
                while (v156);
                v138 = v153;
                if (v151 == (v151 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_155:
                  v138 = *(char **)(v120 + 120);
                  *(_QWORD *)(v121 - 24) = v148;
                  *(_QWORD *)(v121 - 16) = &v146[v150];
                  *(_QWORD *)(v121 - 8) = &v149[8 * v180];
                  if (!v138)
                    goto LABEL_157;
LABEL_156:
                  operator delete(v138);
                  goto LABEL_157;
                }
              }
            }
            else
            {
              v148 = v146;
              v149 = v179;
              v150 = v182;
            }
            do
            {
              v158 = *((_QWORD *)v138 - 1);
              v138 -= 8;
              *((_QWORD *)v148 - 1) = v158;
              v148 -= 8;
            }
            while (v138 != v137);
            goto LABEL_155;
          }
LABEL_114:
          operator delete(v71);
          goto LABEL_115;
        }
        v87 = v71 - 8 - v73;
        if (v87 >= 0x58)
        {
          v90 = v187;
          v89 = v190;
          v88 = v86;
          if ((unint64_t)(&v71[-v74] - v187) >= 0x20)
          {
            v107 = (v87 >> 3) + 1;
            v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
            v109 = &v71[-v108];
            v88 = &v86[-v108];
            v110 = &v187[8 * v75 - 16];
            v111 = v71 - 16;
            v112 = v107 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *(_OWORD *)v111;
              *((_OWORD *)v110 - 1) = *((_OWORD *)v111 - 1);
              *(_OWORD *)v110 = v113;
              v110 -= 32;
              v111 -= 32;
              v112 -= 4;
            }
            while (v112);
            v71 = v109;
            if (v107 == (v107 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_113:
              v71 = (char *)*v63;
              *v63 = v88;
              *v83 = &v86[v89];
              *v183 = &v90[8 * v181];
              if (!v71)
                goto LABEL_115;
              goto LABEL_114;
            }
          }
        }
        else
        {
          v88 = v86;
          v90 = v187;
          v89 = v190;
        }
        do
        {
          v114 = *((_QWORD *)v71 - 1);
          v71 -= 8;
          *((_QWORD *)v88 - 1) = v114;
          v88 -= 8;
        }
        while (v71 != v73);
        goto LABEL_113;
      }
LABEL_28:
      operator delete(v18);
      goto LABEL_29;
    }
  }
}

void sub_20E7DFFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void **v33;
  uint64_t v34;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;

  v36 = *v33;
  if (*v33)
  {
    *(_QWORD *)(a29 + 144 * a30 + 128) = v36;
    operator delete(v36);
  }
  v37 = *(std::__shared_weak_count **)(a29 + 144 * a30 + 96);
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(std::__shared_weak_count **)(a29 + 144 * a30 + 80);
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  sub_20E7B81B8(v34 - 144);
  sub_20E7B9978(&a33);
  sub_20E7858BC(v34 - 192);
  _Unwind_Resume(a1);
}

void sub_20E7E0154(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  free(v1);
  __cxa_rethrow();
}

void sub_20E7E0168(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20E7E0198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  uint64_t v49;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;

  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  v51 = a45;
  if (a45)
  {
    p_shared_owners = (unint64_t *)&a45->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = a43;
  if (a43)
  {
    v55 = (unint64_t *)&a43->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  sub_20E7858BC((uint64_t)&a31);
  sub_20E7858BC(v49 - 192);
  _Unwind_Resume(a1);
}

void sub_20E7E0234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v37;

  sub_20E7858BC(v34 - 104);
  v37 = *a29;
  if (*a29)
  {
    *(_QWORD *)(v33 - 16) = v37;
    operator delete(v37);
  }
  sub_20E7ABA04(a27);
  if (v33 != a11)
  {
    do
    {
      (**(void (***)(uint64_t))(a11 + a30))(a11 + a30);
      a30 += 144;
    }
    while (a30);
  }
  sub_20E7B81B8(v34 - 144);
  sub_20E7B9978(&a33);
  sub_20E7858BC(v34 - 192);
  _Unwind_Resume(a1);
}

void sub_20E7E02B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC47D4);
}

void sub_20E7E02D4(uint64_t a1)
{
  free(*(void **)(a1 + 24));
}

uint64_t sub_20E7E02DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio16image_processing17ScaleSpacePyramidIhE23MakevImage_BufferSharedEPvEUlPhE_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidIhE23MakevImage_BufferSharedEPvEUlPhE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio16image_processing17ScaleSpacePyramidIhE23MakevImage_BufferSharedEPvEUlPhE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio16image_processing17ScaleSpacePyramidIhE23MakevImage_BufferSharedEPvEUlPhE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E7E034C(vImagePixelCount *a1)
{
  vImagePixelCount v1;
  vImagePixelCount *v2;
  uint64_t v3;
  vImagePixelCount v4;
  vImagePixelCount v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  std::__shared_weak_count_vtbl *data;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  vImagePixelCount v31;
  vImagePixelCount v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _BYTE *v36;
  char *v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  size_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  size_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  char *v60;
  char *v61;
  _BYTE *v62;
  vImagePixelCount *v63;
  void **v64;
  size_t v65;
  char *v66;
  std::__shared_weak_count *v67;
  _QWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  char *v86;
  size_t v87;
  char *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  size_t v92;
  size_t v93;
  size_t v94;
  size_t v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  vImagePixelCount v108;
  void *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  vImagePixelCount v122;
  char *v123;
  uint64_t v124;
  vImagePixelCount v125;
  vImagePixelCount v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  char *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  size_t v151;
  char *v152;
  unint64_t v153;
  char *v154;
  char *v155;
  size_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  char *v171;
  vImagePixelCount v172;
  char *v173;
  void (***v174)(char *);
  void (**v175)(char *);
  BOOL v176;
  uint64_t v177;
  vImagePixelCount *v178;
  _QWORD *v179;
  _QWORD *v180;
  vImagePixelCount v181;
  vImagePixelCount v182;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  size_t v190;
  size_t v191;
  char *v192;
  size_t v193;
  char *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  size_t v199;
  vImagePixelCount v200;
  vImagePixelCount v201;
  size_t v202;
  unint64_t v203;
  __int128 v204;
  uint64_t v205;
  void *__p;
  std::__shared_weak_count *v207;
  vImage_Buffer buf;
  char *v209;
  vImagePixelCount v210;
  __int128 v211;
  vImagePixelCount *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;

  v1 = a1[2];
  if (v1)
  {
    v2 = a1;
    if (a1[3])
    {
      v3 = 0;
      v180 = a1 + 9;
      v178 = a1 + 8;
      v179 = a1 + 6;
      v4 = *a1;
      v5 = a1[1];
      v6 = 1;
      while (!v6)
      {
LABEL_5:
        v7 = *((unsigned __int8 *)v2 + 41);
        v5 = (v5 + v7) >> 1;
        v4 = (v4 + v7) >> 1;
        if (++v3 >= v1)
          return;
      }
      v177 = v3;
      v8 = 0;
      v9 = 8 * v5;
      v181 = v5;
      v182 = v4;
      v184 = 8 * v5;
LABEL_9:
      vImageBuffer_Init(&buf, v5, v4, 0x10u, 0);
      data = (std::__shared_weak_count_vtbl *)buf.data;
      v11 = (std::__shared_weak_count *)operator new();
      v11->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9A8EE8;
      v11->__shared_weak_owners_ = 0;
      v11[1].__vftable = data;
      v207 = v11;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = buf.rowBytes >> 1;
      __p = 0;
      if (v2[4] * v4 > buf.rowBytes >> 1)
      {
        sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
        abort();
      }
      *(_QWORD *)&v204 = data;
      *((_QWORD *)&v204 + 1) = v11;
      v201 = v4;
      v202 = buf.rowBytes >> 1;
      v200 = v2[4];
      LOBYTE(v205) = 0;
      v203 = v5;
      if (v5)
      {
        if (v5 >> 61)
          sub_20E78D874();
        v15 = operator new(v9);
        bzero(v15, v9);
        v16 = 0;
        v17 = 0;
        __p = v15;
        do
        {
          *((_QWORD *)v15 + v17++) = v204 + v16;
          v16 += 2 * v14;
        }
        while (v5 != v17);
      }
      v19 = (_OWORD *)v2[10];
      v18 = v2[11];
      if ((unint64_t)v19 < v18)
      {
        v20 = *(_OWORD *)&buf.width;
        *v19 = *(_OWORD *)&buf.data;
        v19[1] = v20;
        v21 = v19 + 2;
        goto LABEL_29;
      }
      v22 = (_OWORD *)*v180;
      v23 = ((uint64_t)v19 - *v180) >> 5;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 59)
        sub_20E78D874();
      v25 = v18 - (_QWORD)v22;
      if (v25 >> 4 > v24)
        v24 = v25 >> 4;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
        v26 = 0x7FFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        if (v26 >> 59)
          goto LABEL_180;
        v27 = (char *)operator new(32 * v26);
        v28 = *(_OWORD *)&buf.width;
        v29 = &v27[32 * v23];
        *(_OWORD *)v29 = *(_OWORD *)&buf.data;
        *((_OWORD *)v29 + 1) = v28;
        v30 = (uint64_t)v29;
        if (v19 == v22)
        {
LABEL_27:
          v21 = v29 + 32;
          v2[9] = v30;
          v2[10] = (vImagePixelCount)(v29 + 32);
          v2[11] = (vImagePixelCount)&v27[32 * v26];
          if (!v19)
            goto LABEL_29;
          goto LABEL_28;
        }
      }
      else
      {
        v27 = 0;
        v57 = *(_OWORD *)&buf.width;
        v29 = (char *)(32 * v23);
        *(_OWORD *)v29 = *(_OWORD *)&buf.data;
        *((_OWORD *)v29 + 1) = v57;
        v30 = 32 * v23;
        if (v19 == v22)
          goto LABEL_27;
      }
      do
      {
        v58 = *(v19 - 1);
        *(_OWORD *)(v30 - 32) = *(v19 - 2);
        *(_OWORD *)(v30 - 16) = v58;
        v30 -= 32;
        v19 -= 2;
      }
      while (v19 != v22);
      v19 = (_OWORD *)*v180;
      v21 = v29 + 32;
      v2[9] = v30;
      v2[10] = (vImagePixelCount)(v29 + 32);
      v2[11] = (vImagePixelCount)&v27[32 * v26];
      if (!v19)
      {
LABEL_29:
        v2[10] = (vImagePixelCount)v21;
        v32 = v2[7];
        v31 = v2[8];
        v185 = v8;
        if (v32 < v31)
        {
          *(_QWORD *)v32 = &off_24C9A8A50;
          *(_BYTE *)(v32 + 8) = 0;
          *(_BYTE *)(v32 + 112) = 0;
          *(_OWORD *)(v32 + 16) = 0u;
          *(_OWORD *)(v32 + 32) = 0u;
          *(_OWORD *)(v32 + 48) = 0u;
          *(_OWORD *)(v32 + 64) = 0u;
          *(_OWORD *)(v32 + 80) = 0u;
          *(_OWORD *)(v32 + 89) = 0u;
          *(_QWORD *)(v32 + 120) = 0;
          *(_QWORD *)(v32 + 128) = 0;
          *(_QWORD *)(v32 + 136) = 0;
          if (v200 * v201 > v202)
          {
            sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
            abort();
          }
          v33 = *(std::__shared_weak_count **)(v32 + 80);
          *(_OWORD *)(v32 + 72) = v204;
          if (v33)
          {
            v34 = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          *(_BYTE *)(v32 + 8) = 0;
          *(_QWORD *)(v32 + 32) = v201;
          *(_QWORD *)(v32 + 40) = v202;
          *(_QWORD *)(v32 + 48) = v5;
          *(_QWORD *)(v32 + 16) = v200;
          *(_QWORD *)(v32 + 24) = 0;
          *(_BYTE *)(v32 + 112) = 0;
          *(_QWORD *)(v32 + 104) = v205;
          *(_QWORD *)(v32 + 56) = 2 * v200;
          *(_QWORD *)(v32 + 64) = 2 * v200;
          v36 = *(_BYTE **)(v32 + 120);
          v37 = *(char **)(v32 + 128);
          v38 = (v37 - v36) >> 3;
          v39 = v5 >= v38;
          v40 = v5 - v38;
          if (v5 <= v38)
          {
            v4 = v182;
            v2 = a1;
            v5 = v181;
            if (!v39)
              *(_QWORD *)(v32 + 128) = &v36[8 * v203];
            if (v203)
              goto LABEL_98;
          }
          else
          {
            v41 = *(_QWORD *)(v32 + 136);
            if (v40 <= (v41 - (uint64_t)v37) >> 3)
            {
              v93 = 8 * v40;
              bzero(*(void **)(v32 + 128), v93);
              *(_QWORD *)(v32 + 128) = &v37[v93];
              v4 = v182;
              v2 = a1;
              v5 = v181;
            }
            else
            {
              if (v5 >> 61)
                sub_20E78D874();
              v42 = v41 - (_QWORD)v36;
              v43 = v42 >> 2;
              if (v42 >> 2 <= v5)
                v43 = v5;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                v43 = 0x1FFFFFFFFFFFFFFFLL;
              if (v43 >> 61)
                sub_20E78D888();
              v197 = v43;
              v44 = (char *)operator new(8 * v43);
              v45 = 8 * v40;
              v46 = v44;
              v47 = &v44[8 * v38];
              v193 = v45;
              bzero(v47, v45);
              if (v37 == v36)
              {
                v49 = v47;
                v2 = a1;
                v50 = v46;
                v51 = v193;
              }
              else
              {
                v48 = v37 - 8 - v36;
                if (v48 < 0x58)
                {
                  v49 = v47;
                  v2 = a1;
                  v50 = v46;
                  v51 = v193;
                  goto LABEL_94;
                }
                v50 = v46;
                v49 = v47;
                v2 = a1;
                v51 = v193;
                if ((unint64_t)(v36 - v46) < 0x20)
                  goto LABEL_191;
                v98 = (v48 >> 3) + 1;
                v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
                v100 = &v37[-v99];
                v49 = &v47[-v99];
                v101 = &v46[8 * v38 - 16];
                v102 = v37 - 16;
                v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v104 = *(_OWORD *)v102;
                  *((_OWORD *)v101 - 1) = *((_OWORD *)v102 - 1);
                  *(_OWORD *)v101 = v104;
                  v101 -= 32;
                  v102 -= 32;
                  v103 -= 4;
                }
                while (v103);
                v37 = v100;
                if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_191:
                  do
                  {
LABEL_94:
                    v105 = *((_QWORD *)v37 - 1);
                    v37 -= 8;
                    *((_QWORD *)v49 - 1) = v105;
                    v49 -= 8;
                  }
                  while (v37 != v36);
                }
                v37 = *(char **)(v32 + 120);
              }
              *(_QWORD *)(v32 + 120) = v49;
              *(_QWORD *)(v32 + 128) = &v47[v51];
              *(_QWORD *)(v32 + 136) = &v50[8 * v197];
              v5 = v181;
              v4 = v182;
              if (v37)
                operator delete(v37);
            }
LABEL_98:
            v106 = 0;
            v107 = 0;
            do
            {
              *(_QWORD *)(*(_QWORD *)(v32 + 120) + 8 * v107++) = *(_QWORD *)(v32 + 72) + v106;
              v106 += 2 * v202;
            }
            while (v203 != v107);
          }
          v108 = v32 + 144;
          v2[7] = v32 + 144;
          v9 = v184;
          v2[7] = v108;
          v109 = __p;
          if (!__p)
            goto LABEL_102;
LABEL_101:
          operator delete(v109);
          goto LABEL_102;
        }
        v52 = 0x8E38E38E38E38E39 * ((uint64_t)(v32 - *v179) >> 4);
        v53 = v52 + 1;
        if (v52 + 1 > 0x1C71C71C71C71C7)
          sub_20E78D874();
        v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v31 - *v179) >> 4);
        if (2 * v54 > v53)
          v53 = 2 * v54;
        if (v54 >= 0xE38E38E38E38E3)
          v55 = 0x1C71C71C71C71C7;
        else
          v55 = v53;
        v212 = v178;
        if (v55)
        {
          if (v55 > 0x1C71C71C71C71C7)
LABEL_180:
            sub_20E78D888();
          v56 = (char *)operator new(144 * v55);
        }
        else
        {
          v56 = 0;
        }
        v59 = &v56[144 * v52];
        v209 = v56;
        v210 = (vImagePixelCount)v59;
        *(_QWORD *)&v211 = v59;
        *((_QWORD *)&v211 + 1) = &v56[144 * v55];
        *(_QWORD *)v59 = &off_24C9A8A50;
        v60 = v59;
        v59[112] = 0;
        *((_OWORD *)v59 + 2) = 0u;
        *((_OWORD *)v59 + 3) = 0u;
        *((_OWORD *)v59 + 4) = 0u;
        *((_OWORD *)v59 + 5) = 0u;
        *(_OWORD *)(v59 + 89) = 0u;
        v61 = v59;
        *((_QWORD *)v59 + 16) = 0;
        *((_QWORD *)v59 + 17) = 0;
        v59[8] = 0;
        v62 = v59 + 8;
        *((_OWORD *)v60 + 1) = 0u;
        v63 = (vImagePixelCount *)(v60 + 16);
        *((_QWORD *)v61 + 15) = 0;
        v64 = (void **)(v61 + 120);
        v65 = v202;
        if (v200 * v201 > v202)
        {
          sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
          abort();
        }
        v194 = v56;
        v198 = v52;
        v66 = &v56[144 * v52];
        v67 = (std::__shared_weak_count *)*((_QWORD *)v66 + 10);
        *(_OWORD *)(v66 + 72) = v204;
        v68 = v66 + 72;
        if (v67)
        {
          v69 = (unint64_t *)&v67->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
            v65 = v202;
          }
        }
        v71 = &v194[144 * v198];
        v74 = (char *)*((_QWORD *)v71 + 16);
        v72 = v71 + 128;
        v73 = v74;
        *v62 = 0;
        *(v72 - 13) = 0;
        *(v72 - 12) = v201;
        *(v72 - 11) = v65;
        *(v72 - 10) = v203;
        *v63 = v200;
        *(v72 - 3) = v205;
        *((_BYTE *)v72 - 16) = 0;
        *(v72 - 9) = 2 * v200;
        *(v72 - 8) = 2 * v200;
        v75 = (char *)*v64;
        v76 = v74 - (_BYTE *)*v64;
        v77 = v76 >> 3;
        v78 = v203 - (v76 >> 3);
        if (v203 <= v76 >> 3)
        {
          if (v203 < v76 >> 3)
            *v72 = &v75[8 * v203];
          v9 = v184;
          if (!v203)
            goto LABEL_117;
          goto LABEL_115;
        }
        v79 = &v194[144 * v198];
        v82 = *((_QWORD *)v79 + 17);
        v81 = v79 + 136;
        v80 = v82;
        if (v78 <= (v82 - (uint64_t)v73) >> 3)
        {
          v94 = 8 * v78;
          v95 = v65;
          v96 = v72;
          bzero(v73, v94);
          v65 = v95;
          *v96 = &v73[v94];
          v9 = v184;
LABEL_115:
          v120 = 0;
          v121 = 0;
          do
          {
            *((_QWORD *)*v64 + v121++) = *v68 + v120;
            v120 += 2 * v65;
          }
          while (v203 != v121);
LABEL_117:
          v122 = v211 + 144;
          *(_QWORD *)&v211 = v211 + 144;
          v2 = a1;
          v123 = (char *)a1[7];
          v192 = (char *)a1[6];
          if (v123 == v192)
          {
            a1[6] = v210;
            a1[7] = v122;
            a1[8] = *((_QWORD *)&v211 + 1);
            if (v123)
              goto LABEL_169;
            goto LABEL_170;
          }
          v124 = 0;
          v125 = v210;
          while (1)
          {
            v126 = v125;
            *(_QWORD *)(v125 - 144) = &off_24C9A8A50;
            v125 -= 144;
            *(_BYTE *)(v125 + 8) = 0;
            *(_BYTE *)(v125 + 112) = 0;
            *(_OWORD *)(v125 + 16) = 0u;
            *(_OWORD *)(v125 + 32) = 0u;
            *(_OWORD *)(v125 + 48) = 0u;
            *(_OWORD *)(v125 + 64) = 0u;
            *(_OWORD *)(v125 + 80) = 0u;
            *(_OWORD *)(v125 + 89) = 0u;
            *(_QWORD *)(v125 + 120) = 0;
            *(_QWORD *)(v125 + 128) = 0;
            *(_QWORD *)(v125 + 136) = 0;
            v127 = *((_QWORD *)v123 - 9);
            v213 = v127;
            v128 = (std::__shared_weak_count *)*((_QWORD *)v123 - 8);
            v214 = v128;
            if (v128)
            {
              v129 = (unint64_t *)&v128->__shared_owners_;
              do
                v130 = __ldxr(v129);
              while (__stxr(v130 + 1, v129));
            }
            v132 = *((_QWORD *)v123 - 14);
            v131 = *((_QWORD *)v123 - 13);
            v134 = *((_QWORD *)v123 - 16);
            v133 = *((_QWORD *)v123 - 15);
            v135 = *(v123 - 136);
            if (*(v123 - 136))
              v136 = *((_QWORD *)v123 - 14);
            else
              v136 = 0;
            if (v133 + v134 * v132 + v136 > v131)
            {
              sub_20E803BF4("/Library/Caches/com.apple.xbs/Sources/AppleCVHWA/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 308, "widthStep >= minimum_width_step && \"widthStep must be at least as big as minimum_width_step.\"", (void (*)(void *))sub_20E803DA4);
              abort();
            }
            v137 = *((_QWORD *)v123 - 12);
            v213 = 0;
            v214 = 0;
            v138 = *(std::__shared_weak_count **)(v126 - 64);
            *(_QWORD *)(v126 - 72) = v127;
            *(_QWORD *)(v126 - 64) = v128;
            if (v138)
            {
              v139 = (unint64_t *)&v138->__shared_owners_;
              do
                v140 = __ldaxr(v139);
              while (__stlxr(v140 - 1, v139));
              if (!v140)
              {
                v195 = v131;
                ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                std::__shared_weak_count::__release_weak(v138);
                v131 = v195;
              }
            }
            *(_BYTE *)(v126 - 136) = v135;
            *(_QWORD *)(v126 - 112) = v132;
            *(_QWORD *)(v126 - 104) = v131;
            *(_QWORD *)(v126 - 96) = v137;
            *(_QWORD *)(v126 - 128) = v134;
            *(_QWORD *)(v126 - 120) = v133;
            v141 = *((_QWORD *)v123 - 5);
            *(_BYTE *)(v126 - 32) = *(v123 - 32);
            *(_QWORD *)(v126 - 40) = v141;
            v142 = v135 | (2 * v134);
            *(_QWORD *)(v126 - 88) = v142 + v133;
            *(_QWORD *)(v126 - 80) = v142;
            v143 = *(_BYTE **)(v126 - 24);
            v144 = *(char **)(v126 - 16);
            v145 = (v144 - v143) >> 3;
            v146 = v137 - v145;
            if (v137 <= v145)
            {
              if (v137 < v145)
                *(_QWORD *)(v126 - 16) = &v143[8 * v137];
              if (!v137)
                goto LABEL_159;
              goto LABEL_157;
            }
            v147 = *(_QWORD *)(v126 - 8);
            if (v146 <= (v147 - (uint64_t)v144) >> 3)
            {
              v157 = v131;
              bzero(*(void **)(v126 - 16), 8 * v146);
              v131 = v157;
              *(_QWORD *)(v126 - 16) = &v144[8 * v146];
              goto LABEL_157;
            }
            if (v137 >> 61)
              sub_20E78D874();
            v148 = v147 - (_QWORD)v143;
            v149 = v148 >> 2;
            if (v148 >> 2 <= v137)
              v149 = v137;
            if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8)
              v149 = 0x1FFFFFFFFFFFFFFFLL;
            if (v149 >> 61)
              sub_20E78D888();
            v196 = v131;
            v188 = v149;
            v150 = (char *)operator new(8 * v149);
            v151 = 8 * v146;
            v186 = v150;
            v152 = &v150[8 * v145];
            v190 = v151;
            bzero(v152, v151);
            if (v144 != v143)
              break;
            v131 = v196;
            *(_QWORD *)(v126 - 24) = v152;
            *(_QWORD *)(v126 - 16) = &v152[v190];
            *(_QWORD *)(v126 - 8) = &v186[8 * v188];
            if (v144)
              goto LABEL_156;
LABEL_157:
            v166 = 0;
            v167 = 0;
            do
            {
              *(_QWORD *)(*(_QWORD *)(v126 - 24) + 8 * v167++) = *(_QWORD *)(v126 - 72) + v166;
              v166 += 2 * v131;
            }
            while (v137 != v167);
LABEL_159:
            v168 = v214;
            if (v214)
            {
              v169 = (unint64_t *)&v214->__shared_owners_;
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
            v123 -= 144;
            v124 -= 144;
            if (v123 == v192)
            {
              v123 = (char *)a1[6];
              v171 = (char *)a1[7];
              a1[6] = v125;
              v2 = a1;
              v172 = v211;
              *(_OWORD *)(a1 + 7) = v211;
              v122 = v172;
              if (v171 != v123)
              {
                v173 = v171 - 144;
                v174 = (void (***)(char *))(v171 - 144);
                do
                {
                  v175 = *v174;
                  v174 -= 18;
                  (*v175)(v173);
                  v176 = v173 == v123;
                  v173 = (char *)v174;
                }
                while (!v176);
              }
              v9 = v184;
              if (v123)
LABEL_169:
                operator delete(v123);
LABEL_170:
              v5 = v181;
              v4 = v182;
              v8 = v185;
              v2[7] = v122;
              v109 = __p;
              if (__p)
                goto LABEL_101;
LABEL_102:
              if (v207)
              {
                v110 = (unint64_t *)&v207->__shared_owners_;
                do
                  v111 = __ldaxr(v110);
                while (__stlxr(v111 - 1, v110));
                if (!v111)
                {
                  ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                  std::__shared_weak_count::__release_weak(v207);
                }
              }
              ++v8;
              v6 = v2[3];
              if (v8 >= v6)
              {
                v1 = v2[2];
                v3 = v177;
                goto LABEL_5;
              }
              goto LABEL_9;
            }
          }
          v153 = v144 - 8 - v143;
          v131 = v196;
          if (v153 >= 0x58)
          {
            v155 = v186;
            v154 = v152;
            v156 = v190;
            if ((unint64_t)(v143 - v186) >= 0x20)
            {
              v158 = (v153 >> 3) + 1;
              v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
              v160 = &v144[-v159];
              v154 = &v152[-v159];
              v161 = &v186[8 * v145 - 16];
              v162 = v144 - 16;
              v163 = v158 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v164 = *(_OWORD *)v162;
                *((_OWORD *)v161 - 1) = *((_OWORD *)v162 - 1);
                *(_OWORD *)v161 = v164;
                v161 -= 32;
                v162 -= 32;
                v163 -= 4;
              }
              while (v163);
              v144 = v160;
              if (v158 == (v158 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_155:
                v144 = *(char **)(v125 + 120);
                *(_QWORD *)(v126 - 24) = v154;
                *(_QWORD *)(v126 - 16) = &v152[v156];
                *(_QWORD *)(v126 - 8) = &v155[8 * v188];
                if (!v144)
                  goto LABEL_157;
LABEL_156:
                operator delete(v144);
                v131 = v196;
                goto LABEL_157;
              }
            }
          }
          else
          {
            v154 = v152;
            v155 = v186;
            v156 = v190;
          }
          do
          {
            v165 = *((_QWORD *)v144 - 1);
            v144 -= 8;
            *((_QWORD *)v154 - 1) = v165;
            v154 -= 8;
          }
          while (v144 != v143);
          goto LABEL_155;
        }
        if (v203 >> 61)
          sub_20E78D874();
        v191 = v65;
        v83 = v80 - (_QWORD)v75;
        v84 = v83 >> 2;
        if (v83 >> 2 <= v203)
          v84 = v203;
        if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
          v84 = 0x1FFFFFFFFFFFFFFFLL;
        if (v84 >> 61)
          sub_20E78D888();
        v85 = v72;
        v187 = v84;
        v189 = v81;
        v86 = (char *)operator new(8 * v84);
        v87 = 8 * v78;
        v88 = v86;
        v89 = &v86[8 * v77];
        v199 = v87;
        bzero(v89, v87);
        if (v73 == v75)
        {
          v91 = v89;
          v65 = v191;
          v97 = v187;
          v92 = v199;
          goto LABEL_113;
        }
        v90 = v73 - 8 - v75;
        v65 = v191;
        if (v90 >= 0x58)
        {
          v91 = v89;
          v92 = v199;
          if ((unint64_t)(&v73[-v76] - v88) >= 0x20)
          {
            v112 = (v90 >> 3) + 1;
            v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
            v114 = &v73[-v113];
            v91 = &v89[-v113];
            v115 = &v88[8 * v77 - 16];
            v116 = v73 - 16;
            v117 = v112 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v118 = *(_OWORD *)v116;
              *((_OWORD *)v115 - 1) = *((_OWORD *)v116 - 1);
              *(_OWORD *)v115 = v118;
              v115 -= 32;
              v116 -= 32;
              v117 -= 4;
            }
            while (v117);
            v73 = v114;
            if (v112 == (v112 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_112;
          }
        }
        else
        {
          v91 = v89;
          v92 = v199;
        }
        do
        {
          v119 = *((_QWORD *)v73 - 1);
          v73 -= 8;
          *((_QWORD *)v91 - 1) = v119;
          v91 -= 8;
        }
        while (v73 != v75);
LABEL_112:
        v73 = (char *)*v64;
        v97 = v187;
LABEL_113:
        *v64 = v91;
        *v85 = &v89[v92];
        *v189 = &v88[8 * v97];
        v9 = v184;
        if (v73)
        {
          operator delete(v73);
          v65 = v191;
        }
        goto LABEL_115;
      }
LABEL_28:
      operator delete(v19);
      goto LABEL_29;
    }
  }
}

