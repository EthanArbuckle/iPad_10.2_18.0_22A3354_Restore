uint64_t sub_1AE745FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v38 = AssociatedTypeWitness;
    v9 = *(_QWORD *)(v37 + 64);
    v10 = swift_getAssociatedTypeWitness();
    v36 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v36 + 64) <= v9)
      v11 = v9;
    else
      v11 = *(_QWORD *)(v36 + 64);
    if (v11 + 1 > 0x21)
      v12 = v11 + 1;
    else
      v12 = 33;
    if (v12 + 1 > ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
      v13 = v12 + 1;
    else
      v13 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    v14 = *(unsigned __int8 *)(a1 + v13);
    if (v14 >= 2)
    {
      if (v13 <= 3)
        v15 = v13;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 1)
    {
      v16 = *(unsigned __int8 *)(a1 + v12);
      if (v16 >= 3)
      {
        if (v12 <= 3)
          v17 = v12;
        else
          v17 = 4;
        __asm { BR              X12 }
      }
      if (v16 == 2)
      {
        swift_bridgeObjectRelease();
      }
      else if (v16 == 1)
      {
        sub_1AE745C58(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
      }
      else
      {
        v23 = *(unsigned __int8 *)(a1 + v11);
        if (v23 >= 2)
        {
          if (v11 <= 3)
            v24 = v11;
          else
            v24 = 4;
          __asm { BR              X12 }
        }
        if (v23 == 1)
          (*(void (**)(uint64_t, uint64_t))(v36 + 8))(a1, v10);
        else
          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(a1, v38);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    }
    v18 = *(unsigned __int8 *)(a2 + v13);
    if (v18 >= 2)
    {
      if (v13 <= 3)
        v19 = v13;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    if (v18 == 1)
    {
      v20 = *(unsigned __int8 *)(a2 + v12);
      if (v20 >= 3)
      {
        if (v12 <= 3)
          v21 = v12;
        else
          v21 = 4;
        __asm { BR              X12 }
      }
      if (v20 == 2)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_BYTE *)(a1 + v12) = 2;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v20 == 1)
        {
          v25 = *(_QWORD *)a2;
          v26 = *(_QWORD *)(a2 + 8);
          v27 = *(_QWORD *)(a2 + 16);
          v28 = *(_QWORD *)(a2 + 24);
          v29 = *(_BYTE *)(a2 + 32);
          sub_1AE745934(v25, v26, v27, v28, v29);
          *(_QWORD *)a1 = v25;
          *(_QWORD *)(a1 + 8) = v26;
          *(_QWORD *)(a1 + 16) = v27;
          *(_QWORD *)(a1 + 24) = v28;
          v22 = 1;
          *(_BYTE *)(a1 + 32) = v29;
          *(_BYTE *)(a1 + v12) = 1;
          goto LABEL_61;
        }
        v30 = *(unsigned __int8 *)(a2 + v11);
        if (v30 >= 2)
        {
          if (v11 <= 3)
            v31 = v11;
          else
            v31 = 4;
          __asm { BR              X12 }
        }
        v32 = v30 == 1;
        v33 = v37;
        if (v30 == 1)
        {
          v33 = v36;
          v34 = v10;
        }
        else
        {
          v34 = v38;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(a1, a2, v34);
        *(_BYTE *)(a1 + v11) = v32;
        *(_BYTE *)(a1 + v12) = 0;
      }
      v22 = 1;
      goto LABEL_61;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
    v22 = 0;
    *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
LABEL_61:
    *(_BYTE *)(a1 + v13) = v22;
  }
  return a1;
}

uint64_t sub_1AE7464D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v28 = AssociatedTypeWitness;
  v9 = *(_QWORD *)(v27 + 64);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_QWORD *)(v11 + 64) <= v9)
    v12 = v9;
  else
    v12 = *(_QWORD *)(v11 + 64);
  if (v12 + 1 > 0x21)
    v13 = v12 + 1;
  else
    v13 = 33;
  if (v13 + 1 > ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v14 = v13 + 1;
  else
    v14 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v15 = *(unsigned __int8 *)(a2 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  if (v15 == 1)
  {
    v17 = *(unsigned __int8 *)(a2 + v13);
    if (v17 >= 3)
    {
      if (v13 <= 3)
        v18 = v13;
      else
        v18 = 4;
      __asm { BR              X13 }
    }
    if (v17 == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v21 = 2;
    }
    else if (v17 == 1)
    {
      v20 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v20;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      v21 = 1;
    }
    else
    {
      v22 = *(unsigned __int8 *)(a2 + v12);
      if (v22 >= 2)
      {
        if (v12 <= 3)
          v23 = v12;
        else
          v23 = 4;
        __asm { BR              X13 }
      }
      v24 = v22 == 1;
      if (v22 == 1)
      {
        v25 = v10;
      }
      else
      {
        v11 = v27;
        v25 = v28;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(a1, a2, v25);
      v21 = 0;
      *(_BYTE *)(a1 + v12) = v24;
    }
    *(_BYTE *)(a1 + v13) = v21;
    v19 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
    v19 = 0;
    *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  }
  *(_BYTE *)(a1 + v14) = v19;
  return a1;
}

uint64_t sub_1AE7467C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v34 = AssociatedTypeWitness;
    v9 = *(_QWORD *)(v33 + 64);
    v10 = swift_getAssociatedTypeWitness();
    v32 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v32 + 64) > v9)
      v9 = *(_QWORD *)(v32 + 64);
    if (v9 + 1 > 0x21)
      v11 = v9 + 1;
    else
      v11 = 33;
    if (v11 + 1 > ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
      v12 = v11 + 1;
    else
      v12 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    v13 = *(unsigned __int8 *)(a1 + v12);
    if (v13 >= 2)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 1)
    {
      v15 = *(unsigned __int8 *)(a1 + v11);
      if (v15 >= 3)
      {
        if (v11 <= 3)
          v16 = v11;
        else
          v16 = 4;
        __asm { BR              X12 }
      }
      if (v15 == 2)
      {
        swift_bridgeObjectRelease();
      }
      else if (v15 == 1)
      {
        sub_1AE745C58(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
      }
      else
      {
        v22 = *(unsigned __int8 *)(a1 + v9);
        if (v22 >= 2)
        {
          if (v9 <= 3)
            v23 = v9;
          else
            v23 = 4;
          __asm { BR              X12 }
        }
        if (v22 == 1)
          (*(void (**)(uint64_t, uint64_t))(v32 + 8))(a1, v10);
        else
          (*(void (**)(uint64_t, uint64_t))(v33 + 8))(a1, v34);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    }
    v17 = *(unsigned __int8 *)(a2 + v12);
    if (v17 >= 2)
    {
      if (v12 <= 3)
        v18 = v12;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      v19 = *(unsigned __int8 *)(a2 + v11);
      if (v19 >= 3)
      {
        if (v11 <= 3)
          v20 = v11;
        else
          v20 = 4;
        __asm { BR              X12 }
      }
      if (v19 == 2)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v25 = 2;
      }
      else if (v19 == 1)
      {
        v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        v25 = 1;
      }
      else
      {
        v26 = *(unsigned __int8 *)(a2 + v9);
        if (v26 >= 2)
        {
          if (v9 <= 3)
            v27 = v9;
          else
            v27 = 4;
          __asm { BR              X12 }
        }
        v28 = v26 == 1;
        v29 = v33;
        if (v26 == 1)
        {
          v29 = v32;
          v30 = v10;
        }
        else
        {
          v30 = v34;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(a1, a2, v30);
        v25 = 0;
        *(_BYTE *)(a1 + v9) = v28;
      }
      *(_BYTE *)(a1 + v11) = v25;
      v21 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      v21 = 0;
      *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
    }
    *(_BYTE *)(a1 + v12) = v21;
  }
  return a1;
}

uint64_t sub_1AE746C90(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v5 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6)
    v7 = v6;
  if (v7 + 1 > 0x21)
    v8 = v7 + 1;
  else
    v8 = 33;
  if (v8 + 1 > v5)
    v9 = v8 + 1;
  else
    v9 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_27;
  v10 = v9 + 1;
  v11 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    v14 = ((a2 + ~(-1 << v11) - 254) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v14 < 2)
    {
LABEL_27:
      v16 = *(unsigned __int8 *)(a1 + v9);
      if (v16 >= 2)
        return (v16 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_27;
LABEL_20:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if ((_DWORD)v10)
  {
    if (v10 > 3)
      LODWORD(v10) = 4;
    __asm { BR              X11 }
  }
  return (v15 + 255);
}

void sub_1AE746E4C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v7 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v9 <= v8)
    v9 = v8;
  if (v9 + 1 > 0x21)
    v10 = v9 + 1;
  else
    v10 = 33;
  if (v10 + 1 > v7)
    v11 = v10 + 1;
  else
    v11 = v7;
  v12 = v11 + 1;
  v13 = 8 * (v11 + 1);
  if (a3 < 0xFF)
  {
    v14 = 0u;
  }
  else if (v12 <= 3)
  {
    v16 = ((a3 + ~(-1 << v13) - 254) >> v13) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v15 = a2 - 255;
  if (v12 < 4)
  {
    if ((_DWORD)v11 != -1)
    {
      v17 = v15 & ~(-1 << v13);
      bzero(a1, v12);
      if ((_DWORD)v12 == 3)
      {
        *(_WORD *)a1 = v17;
        a1[2] = BYTE2(v17);
      }
      else if ((_DWORD)v12 == 2)
      {
        *(_WORD *)a1 = v17;
      }
      else
      {
        *a1 = v17;
      }
    }
  }
  else
  {
    bzero(a1, v11 + 1);
    *(_DWORD *)a1 = v15;
  }
  __asm { BR              X10 }
}

uint64_t sub_1AE747078(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4)
    v5 = v4;
  if (v5 + 1 > 0x21)
    v6 = v5 + 1;
  else
    v6 = 33;
  if (v6 + 1 > v3)
    v7 = v6 + 1;
  else
    v7 = v3;
  result = *(unsigned __int8 *)(a1 + v7);
  if (result >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1AE7471A4(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  if (a2 > 1)
  {
    v10 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    v11 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v12 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v12 <= v11)
      v12 = v11;
    if (v12 + 1 > 0x21)
      v13 = v12 + 1;
    else
      v13 = 33;
    if (v13 + 1 > v10)
      v14 = v13 + 1;
    else
      v14 = v10;
    v15 = a2 - 2;
    if (v14 < 4)
    {
      v16 = v15 >> (8 * v14);
      v17 = v15 & ~(-1 << (8 * v14));
      a1[v14] = v16 + 2;
      bzero(a1, v14);
      if ((_DWORD)v14 == 3)
      {
        *(_WORD *)a1 = v17;
        a1[2] = BYTE2(v17);
      }
      else if ((_DWORD)v14 == 2)
      {
        *(_WORD *)a1 = v17;
      }
      else
      {
        *a1 = v17;
      }
    }
    else
    {
      a1[v14] = 2;
      bzero(a1, v14);
      *(_DWORD *)a1 = v15;
    }
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v6 > v7)
      v7 = v6;
    if (v7 + 1 > 0x21)
      v8 = v7 + 1;
    else
      v8 = 33;
    if (v8 + 1 > ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
      v9 = v8 + 1;
    else
      v9 = ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    a1[v9] = a2;
  }
}

void type metadata accessor for InferenceMessageRemoteServerResponse()
{
  JUMPOUT(0x1AF454AECLL);
}

uint64_t sub_1AE74739C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x73736563637573 && a2 == 0xE700000000000000;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1AE747480(char a1)
{
  if ((a1 & 1) != 0)
    return 0x726F727265;
  else
    return 0x73736563637573;
}

void sub_1AE7474B4()
{
  sub_1AE50A004();
}

void sub_1AE747520(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  MEMORY[0x1AF454B70](&unk_1AE954EA0, a1);
  sub_1AE4F9160();
  *(_QWORD *)(v8 - 352) = a1;
  *(_QWORD *)(v8 - 360) = v10;
  v11 = sub_1AE926CF4();
  sub_1AE4F9050(v11, v8 - 48);
  sub_1AE50031C(v12);
  MEMORY[0x1E0C80A78](v13);
  sub_1AE4FCEE4();
  *(_QWORD *)(v8 - 328) = v14;
  v16 = type metadata accessor for InferenceMessageResponseError(0, v6, v7, v15);
  sub_1AE4F9050(v16, v8 - 56);
  sub_1AE50031C(v17);
  MEMORY[0x1E0C80A78](v18);
  sub_1AE4FCEE4();
  *(_QWORD *)(v8 - 248) = v19;
  *(_QWORD *)(v8 - 160) = v5;
  *(_QWORD *)(v8 - 152) = v6;
  *(_QWORD *)(v8 - 144) = v3;
  *(_QWORD *)(v8 - 136) = v4;
  *(_QWORD *)(v8 - 128) = v7;
  *(_QWORD *)(v8 - 120) = v2;
  *(_QWORD *)(v8 - 112) = *(_QWORD *)(v8 - 224);
  *(_QWORD *)(v8 - 104) = v1;
  *(_QWORD *)(v8 - 96) = *(_QWORD *)(v8 - 232);
  sub_1AE748858();
}

void sub_1AE7475D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  MEMORY[0x1AF454B70](&unk_1AE954E50, a1);
  sub_1AE4F9160();
  *(_QWORD *)(v9 - 408) = a1;
  *(_QWORD *)(v9 - 416) = v11;
  v12 = sub_1AE926CF4();
  sub_1AE4F9050(v12, v9 - 112);
  sub_1AE50031C(v13);
  MEMORY[0x1E0C80A78](v14);
  sub_1AE4FCEE4();
  *(_QWORD *)(v9 - 392) = v15;
  v16 = sub_1AE5090A8();
  v20 = type metadata accessor for InferenceMessageResponse(v16, v17, v18, v19);
  sub_1AE4F9050(v20, v9 - 120);
  sub_1AE50031C(v21);
  MEMORY[0x1E0C80A78](v22);
  sub_1AE4FCEE4();
  *(_QWORD *)(v9 - 272) = v23;
  *(_QWORD *)(v9 - 280) = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v24);
  *(_QWORD *)(v9 - 160) = v6;
  *(_QWORD *)(v9 - 152) = v7;
  *(_QWORD *)(v9 - 144) = *(_QWORD *)(v9 - 72);
  *(_QWORD *)(v9 - 136) = v5;
  *(_QWORD *)(v9 - 296) = v5;
  v25 = *(_QWORD *)(v9 - 216);
  *(_QWORD *)(v9 - 128) = v8;
  *(_QWORD *)(v9 - 120) = v25;
  *(_QWORD *)(v9 - 112) = v3;
  *(_QWORD *)(v9 - 104) = v4;
  *(_QWORD *)(v9 - 336) = v4;
  *(_QWORD *)(v9 - 96) = v2;
  sub_1AE748864();
}

void sub_1AE7476CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  MEMORY[0x1AF454B70](&unk_1AE954E00, a1);
  v12 = sub_1AE926CF4();
  sub_1AE50031C(*(_QWORD *)(v12 - 8));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&a9 - v14;
  v16 = *(_QWORD **)(v11 - 264);
  v17 = v16[4];
  sub_1AE4F9858(v16, v16[3]);
  sub_1AE926F4C();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 - 280) + 16))(v10, *(_QWORD *)(v11 - 256), v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = *(_QWORD *)(v11 - 344);
    sub_1AE74884C(*(_QWORD *)(v11 - 248), v10, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v18 + 32));
    *(_BYTE *)(v11 - 160) = 1;
    sub_1AE5095C8();
    v19 = *(_QWORD *)(v11 - 224);
    *(_QWORD *)(v11 - 192) = *(_QWORD *)(v11 - 216);
    *(_QWORD *)(v11 - 184) = v19;
    v20 = *(_QWORD *)(v11 - 232);
    *(_QWORD *)(v11 - 176) = *(_QWORD *)(v11 - 336);
    *(_QWORD *)(v11 - 168) = v20;
    MEMORY[0x1AF454B70](&protocol conformance descriptor for <> InferenceMessageResponseError<A>, v17, v11 - 192);
    sub_1AE4FDEC8();
    sub_1AE4FB824(v11 - 64);
    (*(void (**)(_QWORD, uint64_t))(v18 + 8))(*(_QWORD *)(v11 - 248), v17);
  }
  else
  {
    v21 = *(_QWORD *)(v11 - 400);
    sub_1AE74884C(*(_QWORD *)(v11 - 272), v10, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v21 + 32));
    *(_BYTE *)(v11 - 160) = 0;
    sub_1AE5095C8();
    v22 = *(_QWORD *)(v11 - 296);
    *(_QWORD *)(v11 - 208) = *(_QWORD *)(v11 - 72);
    *(_QWORD *)(v11 - 200) = v22;
    MEMORY[0x1AF454B70](&unk_1AE9554A0, v17, v11 - 208);
    sub_1AE4FDEC8();
    sub_1AE4FB824(v11 - 128);
    (*(void (**)(_QWORD, uint64_t))(v21 + 8))(*(_QWORD *)(v11 - 272), v17);
  }
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 288) + 8))(v15, v12);
  sub_1AE4F667C();
}

void sub_1AE7478F4()
{
  sub_1AE50A004();
}

void sub_1AE747964(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x1AF454B70](&unk_1AE954EA0, a1);
  sub_1AE4F9160();
  *(_QWORD *)(v5 - 320) = a1;
  *(_QWORD *)(v5 - 328) = v7;
  v8 = sub_1AE926C28();
  sub_1AE4F9050(v8, v5 - 136);
  sub_1AE50031C(v9);
  MEMORY[0x1E0C80A78](v10);
  sub_1AE4FCEE4();
  sub_1AE4F9518(v11);
  *(_QWORD *)(v5 - 128) = v4;
  *(_QWORD *)(v5 - 120) = *(_QWORD *)(v5 - 72);
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 104) = v2;
  *(_QWORD *)(v5 - 96) = v1;
  sub_1AE748858();
}

void sub_1AE7479D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x1AF454B70](&unk_1AE954E50, a1);
  sub_1AE4F9160();
  *(_QWORD *)(v5 - 344) = a1;
  *(_QWORD *)(v5 - 352) = v7;
  v8 = sub_1AE926C28();
  sub_1AE4F9050(v8, v5 - 176);
  sub_1AE50031C(v9);
  MEMORY[0x1E0C80A78](v10);
  sub_1AE4FCEE4();
  sub_1AE4F9518(v11);
  *(_QWORD *)(v5 - 128) = *(_QWORD *)(v5 - 248);
  *(_QWORD *)(v5 - 120) = v4;
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 104) = v2;
  *(_QWORD *)(v5 - 96) = v1;
  sub_1AE748864();
}

void sub_1AE747A40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v9 - 272) = MEMORY[0x1AF454B70](&unk_1AE954E00, a1);
  sub_1AE5090A8();
  v10 = sub_1AE926C28();
  sub_1AE4F9050(v10, v9 - 32);
  sub_1AE50031C(v11);
  MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v9 - 424) = v2;
  *(_QWORD *)(v9 - 160) = v2;
  *(_QWORD *)(v9 - 152) = v8;
  *(_QWORD *)(v9 - 416) = v8;
  *(_QWORD *)(v9 - 280) = v7;
  *(_QWORD *)(v9 - 144) = v7;
  *(_QWORD *)(v9 - 136) = v5;
  *(_QWORD *)(v9 - 400) = v5;
  *(_QWORD *)(v9 - 128) = v4;
  *(_QWORD *)(v9 - 120) = *(_QWORD *)(v9 - 72);
  *(_QWORD *)(v9 - 112) = v6;
  *(_QWORD *)(v9 - 376) = v6;
  *(_QWORD *)(v9 - 408) = v3;
  *(_QWORD *)(v9 - 104) = v3;
  *(_QWORD *)(v9 - 96) = v1;
  *(_QWORD *)(v9 - 384) = v1;
  type metadata accessor for InferenceMessageRemoteServerResponse();
}

void sub_1AE747AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);

  v11 = sub_1AE4F9050(a1, v10 - 48);
  *(_QWORD *)(v10 - 440) = v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&a9 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&a9 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&a9 - v19;
  v21 = *(_QWORD **)(v10 - 256);
  sub_1AE4F9858(v21, v21[3]);
  v22 = *(_QWORD *)(v10 - 264);
  sub_1AE926F34();
  if (v22)
    goto LABEL_8;
  *(_QWORD *)(v10 - 464) = v18;
  *(_QWORD *)(v10 - 456) = v15;
  *(_QWORD *)(v10 - 472) = v20;
  v23 = *(_QWORD *)(v10 - 280);
  v24 = *(_QWORD *)(v10 - 248);
  *(_QWORD *)(v10 - 272) = 0;
  v25 = *(_QWORD *)(v10 - 288);
  *(_QWORD *)(v10 - 264) = v9;
  *(_QWORD *)(v10 - 192) = sub_1AE926C1C();
  sub_1AE5090A8();
  v26 = sub_1AE9262B0();
  MEMORY[0x1AF454B70](MEMORY[0x1E0DEAF38], v26);
  *(_QWORD *)(v10 - 160) = sub_1AE9267FC();
  *(_QWORD *)(v10 - 152) = v27;
  *(_QWORD *)(v10 - 144) = v28;
  *(_QWORD *)(v10 - 136) = v29;
  sub_1AE5090A8();
  v30 = sub_1AE9267F0();
  MEMORY[0x1AF454B70](MEMORY[0x1E0DEBF88], v30);
  sub_1AE9264C0();
  v31 = *(unsigned __int8 *)(v10 - 192);
  if (v31 == 2
    || (v33 = *(_OWORD *)(v10 - 160),
        v32 = *(_OWORD *)(v10 - 144),
        *(_OWORD *)(v10 - 496) = v33,
        *(_OWORD *)(v10 - 192) = v33,
        *(_OWORD *)(v10 - 176) = v32,
        (sub_1AE926544() & 1) == 0))
  {
    v35 = sub_1AE926988();
    swift_allocError();
    v36 = v25;
    v38 = v37;
    sub_1AE501548(&qword_1EED99C38);
    *v38 = *(_QWORD *)(v10 - 304);
    v39 = *(_QWORD *)(v10 - 264);
    sub_1AE926B5C();
    sub_1AE92697C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v38, *MEMORY[0x1E0DEC450], v35);
    swift_willThrow();
    sub_1AE50ACB8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 296) + 8))(v39, v36);
    v21 = *(_QWORD **)(v10 - 256);
LABEL_8:
    v51 = (uint64_t)v21;
    goto LABEL_9;
  }
  if ((v31 & 1) != 0)
  {
    *(_BYTE *)(v10 - 192) = 1;
    sub_1AE508C2C();
    v47 = type metadata accessor for InferenceMessageResponseError(0, *(_QWORD *)(v10 - 416), v24, v46);
    v48 = *(_QWORD *)(v10 - 376);
    *(_QWORD *)(v10 - 224) = *(_QWORD *)(v10 - 72);
    *(_QWORD *)(v10 - 216) = v48;
    v49 = *(_QWORD *)(v10 - 384);
    *(_QWORD *)(v10 - 208) = *(_QWORD *)(v10 - 408);
    *(_QWORD *)(v10 - 200) = v49;
    MEMORY[0x1AF454B70](&protocol conformance descriptor for <> InferenceMessageResponseError<A>, v47, v10 - 224);
    v50 = *(_QWORD *)(v10 - 456);
    v45 = *(_QWORD *)(v10 - 392);
    sub_1AE4F6BFC();
    sub_1AE4FD334(v10 - 104);
    sub_1AE50ACB8();
    v55 = sub_1AE748870();
    v56(v55, v25);
    v52 = *(_QWORD *)(v10 - 304);
    swift_storeEnumTagMultiPayload();
    v53 = sub_1AE4FCA04();
    v54 = v50;
  }
  else
  {
    *(_BYTE *)(v10 - 192) = 0;
    v34 = *(_QWORD *)(v10 - 264);
    sub_1AE508C2C();
    v42 = type metadata accessor for InferenceMessageResponse(0, *(_QWORD *)(v10 - 424), v40, v41);
    v43 = *(_QWORD *)(v10 - 400);
    *(_QWORD *)(v10 - 240) = v23;
    *(_QWORD *)(v10 - 232) = v43;
    MEMORY[0x1AF454B70](&unk_1AE9554E0, v42, v10 - 240);
    v44 = *(_QWORD *)(v10 - 464);
    sub_1AE4F6BFC();
    v45 = *(_QWORD *)(v10 - 296);
    sub_1AE501DF0(v10 - 112);
    sub_1AE50ACB8();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v34, v25);
    v52 = *(_QWORD *)(v10 - 304);
    swift_storeEnumTagMultiPayload();
    v53 = sub_1AE4FCA04();
    v54 = v44;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v45)(v53, v54, v52);
  ((void (*)(_QWORD, uint64_t, uint64_t))v45)(*(_QWORD *)(v10 - 448), v25, v52);
  v51 = *(_QWORD *)(v10 - 256);
LABEL_9:
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v51);
  sub_1AE4F667C();
}

BOOL sub_1AE747FEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1AE512960(*a1, *a2);
}

uint64_t sub_1AE748034()
{
  return sub_1AE54AD48();
}

uint64_t sub_1AE748070()
{
  return sub_1AE541644();
}

uint64_t sub_1AE7480B0()
{
  sub_1AE926EC8();
  sub_1AE541644();
  return sub_1AE926F10();
}

uint64_t sub_1AE74810C()
{
  char *v0;

  return sub_1AE747480(*v0);
}

uint64_t sub_1AE748148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE74739C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE748194()
{
  return sub_1AE50D624();
}

uint64_t sub_1AE7481D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1AE541760();
  *a1 = result;
  return result;
}

uint64_t sub_1AE74821C(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE954E00, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE748250(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE954E00, a1);
  return sub_1AE926FA0();
}

uint64_t sub_1AE748284(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_1AE748348(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_sSo18GDVUChangeBookmarkC20IntelligencePlatformE20supportsSecureCodingSbyFZ_0);
}

uint64_t sub_1AE748294()
{
  return sub_1AE7483CC();
}

uint64_t sub_1AE7482A0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_1AE748404(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AE53664C);
}

uint64_t sub_1AE7482AC(uint64_t a1)
{
  return sub_1AE748468(a1);
}

uint64_t sub_1AE7482BC(uint64_t a1)
{
  return sub_1AE7484E4(a1);
}

uint64_t sub_1AE7482C8@<X0>(_BYTE *a1@<X8>)
{
  return sub_1AE748514(a1);
}

uint64_t sub_1AE7482D4(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE954EA0, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE748308(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE954EA0, a1);
  return sub_1AE926FA0();
}

uint64_t sub_1AE74833C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_1AE748348(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AE748810);
}

uint64_t sub_1AE748348(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10]) & 1;
}

uint64_t sub_1AE748388()
{
  return sub_1AE5366F4();
}

uint64_t sub_1AE7483C0()
{
  return sub_1AE7483CC();
}

uint64_t sub_1AE7483CC()
{
  uint64_t (*v0)(void);

  sub_1AE50A520();
  return v0();
}

uint64_t sub_1AE7483F8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_1AE748404(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AE748834);
}

uint64_t sub_1AE748404(uint64_t a1, _QWORD *a2, uint64_t a3, void (*a4)(_BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _BYTE v7[72];

  sub_1AE926EC8();
  a4(v7, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a2[9], a2[10]);
  return sub_1AE926F10();
}

uint64_t sub_1AE74845C(uint64_t a1)
{
  return sub_1AE748468(a1);
}

uint64_t sub_1AE748468(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  v1 = sub_1AE500E5C(a1);
  return v2(v1);
}

uint64_t sub_1AE748488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE542CC8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1AE7484D8(uint64_t a1)
{
  return sub_1AE7484E4(a1);
}

uint64_t sub_1AE7484E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  v1 = sub_1AE500E5C(a1);
  return v2(v1);
}

uint64_t sub_1AE748508@<X0>(_BYTE *a1@<X8>)
{
  return sub_1AE748514(a1);
}

uint64_t sub_1AE748514@<X0>(_BYTE *a1@<X8>)
{
  uint64_t (*v2)(void);
  uint64_t result;

  sub_1AE50A520();
  result = v2();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1AE748554(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE954E50, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE748588(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE954E50, a1);
  return sub_1AE926FA0();
}

void sub_1AE7485BC()
{
  sub_1AE7478F4();
}

void sub_1AE7485F4()
{
  sub_1AE7474B4();
}

void type metadata accessor for InferenceMessageRemoteServerResponse.ErrorCodingKeys()
{
  JUMPOUT(0x1AF454AECLL);
}

void type metadata accessor for InferenceMessageRemoteServerResponse.SuccessCodingKeys()
{
  JUMPOUT(0x1AF454AECLL);
}

void type metadata accessor for InferenceMessageRemoteServerResponse.CodingKeys()
{
  JUMPOUT(0x1AF454AECLL);
}

uint64_t sub_1AE74862C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1AE748634(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AE748680 + 4 * byte_1AE954AD0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AE7486B4 + 4 * byte_1AE954ACB[v4]))();
}

uint64_t sub_1AE7486B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7486BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE7486C4);
  return result;
}

uint64_t sub_1AE7486D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE7486D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AE7486DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7486E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7486F4(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AE748734 + 4 * byte_1AE954AD5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AE748754 + 4 * byte_1AE954ADA[v4]))();
}

_BYTE *sub_1AE748734(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AE748754(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AE74875C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AE748764(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AE74876C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AE748774(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_1AE748780()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE748790()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE7487A0()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE7487B0()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE7487C0()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE7487D0()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE7487E0()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE7487F0()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE748800()
{
  JUMPOUT(0x1AF454B70);
}

uint64_t sub_1AE748810()
{
  return _sSo18GDVUChangeBookmarkC20IntelligencePlatformE20supportsSecureCodingSbyFZ_0();
}

uint64_t sub_1AE74881C()
{
  return sub_1AE50D624();
}

uint64_t sub_1AE748828()
{
  return sub_1AE541B68();
}

uint64_t sub_1AE748834()
{
  return sub_1AE53664C();
}

uint64_t sub_1AE748840()
{
  return _sSo18GDVUChangeBookmarkC20IntelligencePlatformE20supportsSecureCodingSbyFZ_0();
}

uint64_t sub_1AE74884C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 256));
}

void sub_1AE748858()
{
  type metadata accessor for InferenceMessageRemoteServerResponse.SuccessCodingKeys();
}

void sub_1AE748864()
{
  type metadata accessor for InferenceMessageRemoteServerResponse.CodingKeys();
}

uint64_t sub_1AE748870()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE748884()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1AE7488F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) == 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7)
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
    v12 = *(_QWORD *)(v11 + 16);
    *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
    *(_QWORD *)(v10 + 16) = v12;
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  return v4;
}

uint64_t sub_1AE7489C0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE748A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  v9 = *(_BYTE *)(v8 + 24);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_BYTE *)(v7 + 24) = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1AE748A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  *(_QWORD *)(v7 + 16) = v9;
  return a1;
}

uint64_t sub_1AE748AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *(_OWORD *)((char *)v8 + 9);
  *v7 = *v8;
  *(_OWORD *)((char *)v7 + 9) = v9;
  return a1;
}

uint64_t sub_1AE748B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  *(_QWORD *)(v7 + 16) = v9;
  return a1;
}

uint64_t sub_1AE748BDC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFF)
    {
      v15 = *(_QWORD *)(((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
    else
    {
      return _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(a1, v6, v4);
    }
  }
  else
  {
    v9 = ((v8 + 7) & 0xFFFFFFF8) + 25;
    v10 = (a2 - v7 + 255) >> (8 * v9);
    if (v9 < 4)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1AE748C64 + 4 * byte_1AE954EF0[v13]))();
  }
}

void sub_1AE748CF4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 25;
  if (v6 >= a3)
  {
    v10 = 0u;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
  }
  if (v6 < a2)
  {
    v11 = ~v6 + a2;
    v12 = (~(_BYTE)v6 + a2);
    if (v7 >= 4)
      v13 = v11;
    else
      v13 = v12;
    bzero(a1, v7);
    if ((_DWORD)v7 == 1)
      *a1 = v13;
    else
      *(_DWORD *)a1 = v13;
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void sub_1AE748E0C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1AE748E88);
}

void sub_1AE748E14(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1AE748E1CLL);
  JUMPOUT(0x1AE748E88);
}

void sub_1AE748E5C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1AE748E88);
}

void sub_1AE748E64()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1AE748E88);
}

uint64_t sub_1AE748E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!(_DWORD)a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) != 0)
      JUMPOUT(0x1AE748E78);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x1AE748E88);
  }
  return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v6, a2, a3, a4);
}

uint64_t type metadata accessor for InferenceMessageRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceMessageRequest);
}

uint64_t sub_1AE748EAC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v14 = *(_QWORD *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a7, a1, a4);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 56))(a5, a6);
  v17 = v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
  result = type metadata accessor for InferenceMessageRequest(0, a4, v18, v19);
  v21 = a7 + *(int *)(result + 28);
  *(_QWORD *)v21 = v15;
  *(_QWORD *)(v21 + 8) = v17;
  *(_QWORD *)(v21 + 16) = a2;
  *(_BYTE *)(v21 + 24) = a3 & 1;
  return result;
}

uint64_t sub_1AE748F58(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x7475706E69 && a2 == 0xE500000000000000;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697469646461 && a2 == 0xEE006F666E496C61)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1AE749060(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F697469646461;
  else
    return 0x7475706E69;
}

void sub_1AE7490A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  sub_1AE4F67EC();
  v19 = v2;
  v20 = v1;
  v17 = v3;
  v18 = v0;
  v5 = v4;
  v7 = type metadata accessor for InferenceMessageRequest.CodingKeys(255, *(_QWORD *)(v3 + 16), v6, v2);
  MEMORY[0x1AF454B70](&unk_1AE9551EC, v7);
  v8 = sub_1AE926CF4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v17 - v10;
  sub_1AE4F9858(v5, v5[3]);
  v12 = v18;
  sub_1AE926F4C();
  LOBYTE(v21) = 0;
  v13 = v20;
  sub_1AE926CC4();
  if (!v13)
  {
    v14 = (__int128 *)(v12 + *(int *)(v17 + 28));
    v15 = *v14;
    v16 = *((_QWORD *)v14 + 2);
    LOBYTE(v14) = *((_BYTE *)v14 + 24);
    v21 = v15;
    v22 = v16;
    v23 = (char)v14;
    sub_1AE749DEC();
    sub_1AE926CC4();
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_1AE4F667C();
}

void sub_1AE7491FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  __int128 v38;
  uint64_t v39;
  char v40;

  sub_1AE4F67EC();
  v37 = (_QWORD *)v0;
  v2 = v1;
  v4 = v3;
  v29 = v5;
  v31 = *(_QWORD *)(v1 - 8);
  v32 = v6;
  MEMORY[0x1E0C80A78](v3);
  sub_1AE4F666C();
  v33 = v8 - v7;
  v12 = type metadata accessor for InferenceMessageRequest.CodingKeys(255, v9, v10, v11);
  MEMORY[0x1AF454B70](&unk_1AE9551EC, v12);
  v36 = sub_1AE926C28();
  v30 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v14 = (char *)&v28 - v13;
  v35 = v2;
  v17 = type metadata accessor for InferenceMessageRequest(0, v2, v15, v16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v28 - v19;
  sub_1AE4F9858(v4, v4[3]);
  v34 = v14;
  v21 = (uint64_t)v37;
  sub_1AE926F34();
  if (v21)
  {
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v4);
  }
  else
  {
    v22 = v31;
    v37 = v4;
    LOBYTE(v38) = 0;
    v23 = v33;
    v24 = v35;
    sub_1AE926BEC();
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v20, v23, v24);
    sub_1AE749DB0();
    sub_1AE926BEC();
    sub_1AE4FEF48();
    v25 = v39;
    v26 = v40;
    v27 = &v20[*(int *)(v17 + 28)];
    *(_OWORD *)v27 = v38;
    *((_QWORD *)v27 + 2) = v25;
    v27[24] = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v29, v20, v17);
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v37);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  sub_1AE4F667C();
}

uint64_t sub_1AE749444(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x6361667265746E69 && a2 == 0xEB00000000644965;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7645746E65726170 && a2 == 0xED00006449746E65)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1AE74956C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7645746E65726170;
  else
    return 0x6361667265746E69;
}

void sub_1AE7495B8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1AE4F67EC();
  v2 = v1;
  v3 = sub_1AE501548(&qword_1EEDA1CC0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  sub_1AE4F666C();
  v7 = v6 - v5;
  sub_1AE4F9858(v2, v2[3]);
  sub_1AE74A104();
  sub_1AE926F4C();
  sub_1AE926C88();
  if (!v0)
    sub_1AE926C7C();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  sub_1AE4F667C();
}

uint64_t sub_1AE7496C8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1AE4F67EC();
  v2 = v1;
  v3 = sub_1AE501548(&qword_1EEDA1CB0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = v2[4];
  sub_1AE4F9858(v2, v2[3]);
  sub_1AE74A104();
  sub_1AE5037E4();
  if (v0)
  {
    sub_1AE4F90EC();
  }
  else
  {
    v5 = sub_1AE926BB0();
    swift_bridgeObjectRetain();
    sub_1AE926BA4();
    sub_1AE4FE920(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v2);
    sub_1AE4F66E8();
  }
  return v5;
}

uint64_t sub_1AE749820(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6E6F697469646461 && a2 == 0xEE006F666E496C61)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1AE7498C8()
{
  return 0x6E6F697469646461;
}

void sub_1AE7498EC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1AE4F67EC();
  v1 = v0;
  v2 = sub_1AE501548(&qword_1EEDA1CD8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  sub_1AE4F666C();
  v6 = v5 - v4;
  sub_1AE4F9858(v1, v1[3]);
  sub_1AE74A140();
  sub_1AE926F4C();
  sub_1AE749DEC();
  sub_1AE926CC4();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  sub_1AE4F667C();
}

_QWORD *sub_1AE7499E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v3 = sub_1AE501548(&qword_1EEDA1CC8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = sub_1AE4F9858(a1, a1[3]);
  sub_1AE74A140();
  sub_1AE5037E4();
  if (v1)
  {
    sub_1AE4F90EC();
  }
  else
  {
    sub_1AE749DB0();
    sub_1AE926BEC();
    sub_1AE4FE920(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    v5 = v7;
    sub_1AE4F90EC();
  }
  return v5;
}

BOOL sub_1AE749AF4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1AE512960(*a1, *a2);
}

uint64_t sub_1AE749B04()
{
  return sub_1AE54AD48();
}

uint64_t sub_1AE749B14()
{
  return sub_1AE541644();
}

uint64_t sub_1AE749B24()
{
  sub_1AE926EC8();
  sub_1AE541644();
  return sub_1AE926F10();
}

uint64_t sub_1AE749B68()
{
  char *v0;

  return sub_1AE749060(*v0);
}

uint64_t sub_1AE749B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE748F58(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE749BA0()
{
  return sub_1AE50D624();
}

uint64_t sub_1AE749BC4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1AE541760();
  *a1 = result;
  return result;
}

uint64_t sub_1AE749BEC(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE9551EC, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE749C20(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE9551EC, a1);
  return sub_1AE926FA0();
}

void sub_1AE749C54()
{
  sub_1AE7491FC();
}

void sub_1AE749C70()
{
  sub_1AE7490A0();
}

uint64_t sub_1AE749C88()
{
  char *v0;

  return sub_1AE74956C(*v0);
}

uint64_t sub_1AE749C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE749444(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE749CB4()
{
  sub_1AE74A104();
  return sub_1AE926F94();
}

uint64_t sub_1AE749CDC()
{
  sub_1AE74A104();
  return sub_1AE926FA0();
}

uint64_t sub_1AE749D04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;

  result = sub_1AE7496C8();
  if (!v1)
  {
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 24) = v6 & 1;
  }
  return result;
}

void sub_1AE749D38()
{
  sub_1AE7495B8();
}

uint64_t sub_1AE749D58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for InferenceMessageRequest.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceMessageRequest.CodingKeys);
}

unint64_t sub_1AE749DB0()
{
  unint64_t result;

  result = qword_1EEDA1C20;
  if (!qword_1EEDA1C20)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9551C4, &type metadata for InferenceFullRequestAdditionalInfo);
    atomic_store(result, (unint64_t *)&qword_1EEDA1C20);
  }
  return result;
}

unint64_t sub_1AE749DEC()
{
  unint64_t result;

  result = qword_1EEDA1C28[0];
  if (!qword_1EEDA1C28[0])
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95519C, &type metadata for InferenceFullRequestAdditionalInfo);
    atomic_store(result, qword_1EEDA1C28);
  }
  return result;
}

ValueMetadata *type metadata accessor for InferenceFullRequestBase()
{
  return &type metadata for InferenceFullRequestBase;
}

uint64_t _s20IntelligencePlatform34InferenceFullRequestAdditionalInfoVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s20IntelligencePlatform34InferenceFullRequestAdditionalInfoVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t _s20IntelligencePlatform34InferenceFullRequestAdditionalInfoVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t _s20IntelligencePlatform34InferenceFullRequestAdditionalInfoVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1AE749F6C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InferenceFullRequestAdditionalInfo()
{
  return &type metadata for InferenceFullRequestAdditionalInfo;
}

void sub_1AE749FC0()
{
  JUMPOUT(0x1AF454B70);
}

uint64_t sub_1AE749FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE749820(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1AE749FFC()
{
  sub_1AE74A140();
  return sub_1AE926F94();
}

uint64_t sub_1AE74A024()
{
  sub_1AE74A140();
  return sub_1AE926FA0();
}

uint64_t sub_1AE74A04C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *sub_1AE74A090@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = sub_1AE7499E4(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }
  return result;
}

void sub_1AE74A0C4()
{
  sub_1AE7498EC();
}

void sub_1AE74A0E4()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74A0F4()
{
  JUMPOUT(0x1AF454B70);
}

unint64_t sub_1AE74A104()
{
  unint64_t result;

  result = qword_1EEDA1CB8;
  if (!qword_1EEDA1CB8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9553FC, &type metadata for InferenceFullRequestAdditionalInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA1CB8);
  }
  return result;
}

unint64_t sub_1AE74A140()
{
  unint64_t result;

  result = qword_1EEDA1CD0;
  if (!qword_1EEDA1CD0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9553AC, &type metadata for InferenceFullRequestBase.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA1CD0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InferenceFullRequestBase.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AE74A1BC + 4 * byte_1AE954EFF[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AE74A1DC + 4 * byte_1AE954F04[v4]))();
}

_BYTE *sub_1AE74A1BC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AE74A1DC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AE74A1E4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AE74A1EC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AE74A1F4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AE74A1FC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for InferenceFullRequestBase.CodingKeys()
{
  return &type metadata for InferenceFullRequestBase.CodingKeys;
}

uint64_t _s20IntelligencePlatform34InferenceFullRequestAdditionalInfoV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AE74A264 + 4 * byte_1AE954F0E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AE74A298 + 4 * byte_1AE954F09[v4]))();
}

uint64_t sub_1AE74A298(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE74A2A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE74A2A8);
  return result;
}

uint64_t sub_1AE74A2B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE74A2BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AE74A2C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE74A2C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InferenceFullRequestAdditionalInfo.CodingKeys()
{
  return &type metadata for InferenceFullRequestAdditionalInfo.CodingKeys;
}

unint64_t sub_1AE74A2E8()
{
  unint64_t result;

  result = qword_1EEDA1CE0;
  if (!qword_1EEDA1CE0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9552CC, &type metadata for InferenceFullRequestAdditionalInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA1CE0);
  }
  return result;
}

unint64_t sub_1AE74A328()
{
  unint64_t result;

  result = qword_1EEDA1CE8;
  if (!qword_1EEDA1CE8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE955384, &type metadata for InferenceFullRequestBase.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA1CE8);
  }
  return result;
}

unint64_t sub_1AE74A368()
{
  unint64_t result;

  result = qword_1EEDA1CF0;
  if (!qword_1EEDA1CF0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9552F4, &type metadata for InferenceFullRequestBase.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA1CF0);
  }
  return result;
}

unint64_t sub_1AE74A3A8()
{
  unint64_t result;

  result = qword_1EEDA1CF8;
  if (!qword_1EEDA1CF8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95531C, &type metadata for InferenceFullRequestBase.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA1CF8);
  }
  return result;
}

unint64_t sub_1AE74A3E8()
{
  unint64_t result;

  result = qword_1EEDA1D00;
  if (!qword_1EEDA1D00)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95523C, &type metadata for InferenceFullRequestAdditionalInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA1D00);
  }
  return result;
}

unint64_t sub_1AE74A428()
{
  unint64_t result;

  result = qword_1EEDA1D08[0];
  if (!qword_1EEDA1D08[0])
  {
    result = MEMORY[0x1AF454B70](&unk_1AE955264, &type metadata for InferenceFullRequestAdditionalInfo.CodingKeys);
    atomic_store(result, qword_1EEDA1D08);
  }
  return result;
}

uint64_t sub_1AE74A464()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1AE74A4DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_1AE74A58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1AE74A5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1AE74A644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1AE74A6A0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 >= a2)
  {
    if ((_DWORD)v6)
      return _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(a1, v6, v4);
    return 0;
  }
  if (((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v7 = 2;
  else
    v7 = a2 - v6 + 1;
  if (v7 >= 0x10000)
    v8 = 4;
  else
    v8 = 2;
  if (v7 < 0x100)
    v8 = 1;
  if (v7 >= 2)
    v9 = v8;
  else
    v9 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1AE74A710 + 4 * byte_1AE955450[v9]))();
}

void sub_1AE74A764(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    v12 = 0u;
  }
  else
  {
    v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
  }
  if (a2 > v7)
  {
    if ((_DWORD)v8)
    {
      v13 = ~v7 + a2;
      bzero(a1, v8);
      *a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

uint64_t sub_1AE74A844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  *(_BYTE *)(v4 + v5) = 0;
  if ((_DWORD)a2)
    return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v4, a2, a3, a4);
  return result;
}

void sub_1AE74A880(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x1AE74A888);
  JUMPOUT(0x1AE74A868);
}

uint64_t type metadata accessor for InferenceMessageResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceMessageResponse);
}

uint64_t sub_1AE74A8AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a4, a1);
  result = type metadata accessor for InferenceMessageResponse(0, a3, v7, v8);
  *(_QWORD *)(a4 + *(int *)(result + 28)) = a2;
  return result;
}

uint64_t sub_1AE74A900(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x74757074756FLL && a2 == 0xE600000000000000;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449746E657665 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1AE74A9E4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6449746E657665;
  else
    return 0x74757074756FLL;
}

void sub_1AE74AA18(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v12[4];
  char v13;
  char v14;

  v12[2] = a4;
  v12[0] = a2;
  v6 = type metadata accessor for InferenceMessageResponse.CodingKeys(255, *(_QWORD *)(a2 + 16), a3, a4);
  MEMORY[0x1AF454B70](&unk_1AE9555F8, v6);
  v7 = sub_1AE926CF4();
  sub_1AE500E80();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v12 - v9;
  sub_1AE4F9858(a1, a1[3]);
  sub_1AE926F4C();
  v14 = 0;
  v11 = v12[3];
  sub_1AE926CC4();
  if (!v11)
  {
    v13 = 1;
    sub_1AE926CDC();
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v7);
  sub_1AE4F667C();
}

void sub_1AE74AB44(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  char v37;

  v27 = a4;
  v29 = *(_QWORD *)(a2 - 8);
  v30 = a3;
  MEMORY[0x1E0C80A78](a1);
  v31 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for InferenceMessageResponse.CodingKeys(255, v8, v9, v10);
  MEMORY[0x1AF454B70](&unk_1AE9555F8, v11);
  v32 = sub_1AE926C28();
  v28 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v13 = (char *)&v26 - v12;
  v33 = a2;
  v16 = type metadata accessor for InferenceMessageResponse(0, a2, v14, v15);
  sub_1AE500E80();
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v26 - v18;
  sub_1AE4F9858(a1, a1[3]);
  v34 = v13;
  v20 = v35;
  sub_1AE926F34();
  if (v20)
  {
    sub_1AE4F9260();
  }
  else
  {
    v35 = v4;
    v21 = v19;
    v22 = v29;
    v37 = 0;
    v23 = v31;
    sub_1AE926BEC();
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v21, v23, v33);
    v36 = 1;
    v24 = sub_1AE926C04();
    sub_1AE4FBDB8();
    *(_QWORD *)&v21[*(int *)(v16 + 28)] = v24;
    v25 = v35;
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v27, v21, v16);
    sub_1AE4F9260();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v21, v16);
  }
  sub_1AE4F667C();
}

uint64_t sub_1AE74AD60()
{
  char *v0;

  return sub_1AE74A9E4(*v0);
}

uint64_t sub_1AE74AD70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE74A900(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE74AD98(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE9555F8, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE74ADCC(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE9555F8, a1);
  return sub_1AE926FA0();
}

void sub_1AE74AE00(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1AE74AB44(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

void sub_1AE74AE1C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_1AE74AA18(a1, a2, a3, *(_QWORD *)(a3 - 16));
}

uint64_t type metadata accessor for InferenceMessageResponse.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceMessageResponse.CodingKeys);
}

uint64_t sub_1AE74AE40(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AE74AE8C + 4 * byte_1AE955464[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AE74AEC0 + 4 * byte_1AE95545F[v4]))();
}

uint64_t sub_1AE74AEC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE74AEC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE74AED0);
  return result;
}

uint64_t sub_1AE74AEDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE74AEE4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AE74AEE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE74AEF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1AE74AEFC()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74AF0C()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74AF1C()
{
  JUMPOUT(0x1AF454B70);
}

uint64_t sub_1AE74AF2C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x726F7272456E7572 && a2 == 0xE800000000000000;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F72724574696E69 && a2 == 0xE900000000000072)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1AE74B024(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6F72724574696E69;
  else
    return 0x726F7272456E7572;
}

uint64_t sub_1AE74B060(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x4565636976726573 && a2 == 0xEC000000726F7272;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x7245726576726573 && a2 == 0xEB00000000726F72;
    if (v6 || (sub_1AE926D60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x456E776F6E6B6E75 && a2 == 0xEC000000726F7272)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_1AE74B1F0(char a1)
{
  if (!a1)
    return 0x4565636976726573;
  if (a1 == 1)
    return 0x7245726576726573;
  return 0x456E776F6E6B6E75;
}

uint64_t sub_1AE74B254()
{
  return sub_1AE54AD48();
}

uint64_t sub_1AE74B264()
{
  sub_1AE926EC8();
  sub_1AE541644();
  return sub_1AE926F10();
}

uint64_t sub_1AE74B2A8()
{
  char *v0;

  return sub_1AE74B024(*v0);
}

uint64_t sub_1AE74B2B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE74AF2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE74B2E4()
{
  return sub_1AE50D624();
}

uint64_t sub_1AE74B308(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE9560E0, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE74B33C(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE9560E0, a1);
  return sub_1AE926FA0();
}

void sub_1AE74B370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1AE74B67C(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD))sub_1AE536754);
}

uint64_t sub_1AE74B37C(uint64_t a1, uint64_t a2)
{
  return sub_1AE74B6B8(a1, a2, (uint64_t (*)(_QWORD, _QWORD))sub_1AE54EF20);
}

uint64_t sub_1AE74B388(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE956180, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE74B3BC(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE956180, a1);
  return sub_1AE926FA0();
}

uint64_t sub_1AE74B3F0(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE956130, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE74B424(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE956130, a1);
  return sub_1AE926FA0();
}

uint64_t sub_1AE74B458()
{
  char *v0;

  return sub_1AE74B1F0(*v0);
}

uint64_t sub_1AE74B464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE74B060(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE74B490(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE955FA0, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE74B4C4(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE955FA0, a1);
  return sub_1AE926FA0();
}

uint64_t sub_1AE74B4F8()
{
  return _sSo18GDVUChangeBookmarkC20IntelligencePlatformE20supportsSecureCodingSbyFZ_0();
}

void sub_1AE74B500()
{
  sub_1AE54D004();
}

uint64_t sub_1AE74B51C()
{
  return sub_1AE53664C();
}

void sub_1AE74B528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1AE74B67C(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD))sub_1AE53664C);
}

uint64_t sub_1AE74B534()
{
  return sub_1AE541B68();
}

uint64_t sub_1AE74B540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE542CC8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1AE74B570(uint64_t a1, uint64_t a2)
{
  return sub_1AE74B6B8(a1, a2, (uint64_t (*)(_QWORD, _QWORD))sub_1AE50D624);
}

uint64_t sub_1AE74B57C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _sSo18GDVUChangeBookmarkC20IntelligencePlatformE20supportsSecureCodingSbyFZ_0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1AE74B5AC(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE956040, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE74B5E0(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE956040, a1);
  return sub_1AE926FA0();
}

uint64_t sub_1AE74B614(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE955FF0, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE74B648(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE955FF0, a1);
  return sub_1AE926FA0();
}

void sub_1AE74B67C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, _QWORD, _QWORD))
{
  _BYTE v6[72];

  sub_1AE926EC8();
  a4(v6, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  sub_1AE926F10();
  sub_1AE4F6650();
}

uint64_t sub_1AE74B6B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  return a3(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1AE74B6D8(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE956090, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE74B70C(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE956090, a1);
  return sub_1AE926FA0();
}

void InferenceMessageResponseError.ServiceError<>.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  sub_1AE4F67EC();
  v68 = v0;
  v69 = v1;
  v64 = v2;
  v65 = v3;
  v5 = v4;
  v7 = v6;
  v8 = sub_1AE74F55C();
  inited = type metadata accessor for InferenceMessageResponseError.ServiceError.InitErrorCodingKeys(v8, v9, v10, v11);
  MEMORY[0x1AF454B70](&unk_1AE956180, inited);
  sub_1AE4F9160();
  v59 = inited;
  v57 = v13;
  v14 = sub_1AE926CF4();
  v62 = *(_QWORD *)(v14 - 8);
  v63 = v14;
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v15);
  sub_1AE4FCEE4();
  v60 = v16;
  v61 = sub_1AE50A010();
  v58 = *(_QWORD *)(v61 - 8);
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v17);
  sub_1AE4FCEE4();
  v56 = v18;
  v19 = sub_1AE74F55C();
  v23 = type metadata accessor for InferenceMessageResponseError.ServiceError.RunErrorCodingKeys(v19, v20, v21, v22);
  MEMORY[0x1AF454B70](&unk_1AE956130, v23);
  sub_1AE4F9160();
  v51 = v23;
  v49 = v24;
  v25 = sub_1AE926CF4();
  v54 = *(_QWORD *)(v25 - 8);
  v55 = v25;
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v26);
  v52 = (char *)&v47 - v27;
  v53 = sub_1AE50A010();
  v50 = *(_QWORD *)(v53 - 8);
  sub_1AE4FE978();
  v29 = MEMORY[0x1E0C80A78](v28);
  v48 = (char *)&v47 - v30;
  v31 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v47 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_1AE74F55C();
  v38 = type metadata accessor for InferenceMessageResponseError.ServiceError.CodingKeys(v34, v35, v36, v37);
  MEMORY[0x1AF454B70](&unk_1AE9560E0, v38);
  v39 = sub_1AE926CF4();
  v66 = *(_QWORD *)(v39 - 8);
  v67 = v39;
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v40);
  v42 = (char *)&v47 - v41;
  sub_1AE4F9858(v7, v7[3]);
  sub_1AE926F4C();
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v33, v68, v5);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v43 = v58;
    v44 = v56;
    (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v56, v33, v61);
    v45 = v60;
    sub_1AE74F58C();
    sub_1AE74F584();
    sub_1AE74F56C();
    v46 = v62;
  }
  else
  {
    v43 = v50;
    v44 = (uint64_t)v48;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v48, v33, v53);
    v45 = (uint64_t)v52;
    sub_1AE74F58C();
    sub_1AE74F584();
    sub_1AE74F56C();
    v46 = v54;
  }
  sub_1AE4FBA8C(v45, *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
  sub_1AE4FB7D0(v44, *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8));
  (*(void (**)(char *, char *))(v66 + 8))(v42, v33);
  sub_1AE4F667C();
}

uint64_t type metadata accessor for InferenceMessageResponseError.ServiceError.InitErrorCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceMessageResponseError.ServiceError.InitErrorCodingKeys);
}

uint64_t type metadata accessor for InferenceMessageResponseError.ServiceError.RunErrorCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceMessageResponseError.ServiceError.RunErrorCodingKeys);
}

uint64_t type metadata accessor for InferenceMessageResponseError.ServiceError.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceMessageResponseError.ServiceError.CodingKeys);
}

void InferenceMessageResponseError.ServiceError<>.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1AE4F67EC();
  type metadata accessor for InferenceMessageResponseError.ServiceError.InitErrorCodingKeys(255, v0, v1, v2);
  sub_1AE500CDC();
}

void sub_1AE74BAD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1AE4F9160();
  *(_QWORD *)(v1 - 224) = v2;
  *(_QWORD *)(v1 - 216) = v0;
  v3 = sub_1AE926C28();
  sub_1AE4F9050(v3, v1 - 40);
  *(_QWORD *)(v1 - 264) = v4;
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4FCEE4();
  *(_QWORD *)(v1 - 208) = v6;
  v7 = sub_1AE74F5A0();
  type metadata accessor for InferenceMessageResponseError.ServiceError.RunErrorCodingKeys(v7, v8, v9, v10);
  sub_1AE500CDC();
}

void sub_1AE74BB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1AE4F9160();
  *(_QWORD *)(v10 - 248) = v11;
  *(_QWORD *)(v10 - 240) = v9;
  v12 = sub_1AE926C28();
  sub_1AE4F9050(v12, v10 - 48);
  *(_QWORD *)(v10 - 272) = v13;
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)(v10 - 232) = (char *)&a9 - v15;
  v16 = sub_1AE74F5A0();
  type metadata accessor for InferenceMessageResponseError.ServiceError.CodingKeys(v16, v17, v18, v19);
  sub_1AE500CDC();
}

void sub_1AE74BB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v13 = sub_1AE926C28();
  *(_QWORD *)(v12 - 176) = v13;
  *(_QWORD *)(v12 - 192) = *(_QWORD *)(v13 - 8);
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&a9 - v15;
  *(_QWORD *)(v12 - 256) = v9;
  *(_QWORD *)(v12 - 168) = v10;
  v18 = type metadata accessor for InferenceMessageResponseError.ServiceError(0, v9, v10, v17);
  *(_QWORD *)(v12 - 184) = v18;
  *(_QWORD *)(v12 - 312) = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  sub_1AE74F540();
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&a9 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&a9 - v23;
  sub_1AE4F9858(v11, v11[3]);
  v25 = *(_QWORD *)(v12 - 72);
  sub_1AE926F34();
  if (!v25)
  {
    *(_QWORD *)(v12 - 344) = v22;
    *(_QWORD *)(v12 - 336) = v9;
    *(_QWORD *)(v12 - 352) = v24;
    *(_QWORD *)(v12 - 328) = 0;
    *(_QWORD *)(v12 - 320) = v11;
    *(_QWORD *)(v12 - 72) = v16;
    *(_QWORD *)(v12 - 160) = sub_1AE926C1C();
    sub_1AE9262B0();
    sub_1AE5032DC();
  }
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v11);
  sub_1AE4F667C();
}

uint64_t type metadata accessor for InferenceMessageResponseError.ServiceError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceMessageResponseError.ServiceError);
}

void sub_1AE74C028()
{
  InferenceMessageResponseError.ServiceError<>.init(from:)();
}

void sub_1AE74C04C()
{
  InferenceMessageResponseError.ServiceError<>.encode(to:)();
}

void InferenceMessageResponseError<>.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1AE4F67EC();
  v0 = sub_1AE4F6C08();
  type metadata accessor for InferenceMessageResponseError.UnknownErrorCodingKeys(v0, v1, v2, v3);
  sub_1AE500CDC();
}

void sub_1AE74C0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1AE4F9160();
  *(_QWORD *)(v10 - 240) = v9;
  *(_QWORD *)(v10 - 256) = v11;
  v12 = sub_1AE926CF4();
  *(_QWORD *)(v10 - 224) = v12;
  *(_QWORD *)(v10 - 360) = *(_QWORD *)(v12 - 8);
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v13);
  *(_QWORD *)(v10 - 232) = (char *)&a9 - v14;
  v15 = sub_1AE4F6C08();
  type metadata accessor for InferenceMessageResponseError.ServerErrorCodingKeys(v15, v16, v17, v18);
  sub_1AE500CDC();
}

void sub_1AE74C110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1AE4F9160();
  *(_QWORD *)(v1 - 280) = v0;
  *(_QWORD *)(v1 - 288) = v2;
  v3 = sub_1AE926CF4();
  *(_QWORD *)(v1 - 248) = v3;
  *(_QWORD *)(v1 - 264) = *(_QWORD *)(v3 - 8);
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4FCEE4();
  *(_QWORD *)(v1 - 272) = v5;
  v6 = sub_1AE4F6C08();
  type metadata accessor for InferenceMessageResponseError.ServiceErrorCodingKeys(v6, v7, v8, v9);
  sub_1AE500CDC();
}

void sub_1AE74C174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;

  sub_1AE4F9160();
  *(_QWORD *)(v14 - 336) = v9;
  *(_QWORD *)(v14 - 344) = v15;
  v16 = sub_1AE926CF4();
  sub_1AE4F9050(v16, v14 - 40);
  *(_QWORD *)(v14 - 352) = v17;
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v18);
  sub_1AE4FCEE4();
  *(_QWORD *)(v14 - 312) = v19;
  v21 = type metadata accessor for InferenceMessageResponseError.ServiceError(0, v11, v12, v20);
  sub_1AE4F9050(v21, v14 - 48);
  *(_QWORD *)(v14 - 320) = v22;
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v23);
  sub_1AE4FCEE4();
  *(_QWORD *)(v14 - 328) = v24;
  v25 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1AE4F6C08();
  v33 = type metadata accessor for InferenceMessageResponseError.CodingKeys(v29, v30, v31, v32);
  MEMORY[0x1AF454B70](&unk_1AE955FA0, v33);
  sub_1AE5090A8();
  v34 = sub_1AE926CF4();
  *(_QWORD *)(v14 - 184) = *(_QWORD *)(v34 - 8);
  *(_QWORD *)(v14 - 176) = v34;
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)&a9 - v36;
  sub_1AE4F9858(v10, v10[3]);
  sub_1AE926F4C();
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 16))(v28, *(_QWORD *)(v14 - 72), v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v47 = *(_QWORD *)(v14 - 352);
    v48 = *(_QWORD *)(v14 - 320);
    v49 = *(_QWORD *)(v14 - 328);
    v50 = *(_QWORD *)(v14 - 304);
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v49, v28, v50);
    *(_BYTE *)(v14 - 128) = 0;
    v51 = *(_QWORD *)(v14 - 312);
    sub_1AE74F584();
    v52 = *(_QWORD *)(v14 - 208);
    *(_QWORD *)(v14 - 160) = *(_QWORD *)(v14 - 216);
    *(_QWORD *)(v14 - 152) = v52;
    v53 = *(_QWORD *)(v14 - 192);
    *(_QWORD *)(v14 - 144) = *(_QWORD *)(v14 - 200);
    *(_QWORD *)(v14 - 136) = v53;
    MEMORY[0x1AF454B70](&protocol conformance descriptor for <> InferenceMessageResponseError<A>.ServiceError, v50, v14 - 160);
    sub_1AE926CC4();
    sub_1AE4FB7D0(v51, *(uint64_t (**)(uint64_t, uint64_t))(v47 + 8));
    sub_1AE4F77C0(v49, *(uint64_t (**)(uint64_t, uint64_t))(v48 + 8));
    v54 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 184) + 8);
    v55 = (uint64_t)v37;
LABEL_6:
    sub_1AE4FBA8C(v55, v54);
    goto LABEL_7;
  }
  v39 = (uint64_t)v37;
  if (EnumCaseMultiPayload != 1)
  {
    *(_BYTE *)(v14 - 128) = 2;
    sub_1AE926C34();
    sub_1AE926C88();
    swift_bridgeObjectRelease();
    sub_1AE5033B0(v14 - 104);
    v54 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 184) + 8);
    v55 = (uint64_t)v37;
    goto LABEL_6;
  }
  v40 = *(_QWORD *)v28;
  v41 = *((_QWORD *)v28 + 1);
  v43 = *((_QWORD *)v28 + 2);
  v42 = *((_QWORD *)v28 + 3);
  v44 = v28[32];
  *(_BYTE *)(v14 - 128) = 1;
  v45 = *(_QWORD *)(v14 - 272);
  sub_1AE926C34();
  *(_QWORD *)(v14 - 72) = v40;
  *(_QWORD *)(v14 - 128) = v40;
  *(_QWORD *)(v14 - 120) = v41;
  *(_QWORD *)(v14 - 200) = v41;
  *(_QWORD *)(v14 - 112) = v43;
  *(_QWORD *)(v14 - 104) = v42;
  *(_DWORD *)(v14 - 192) = v44;
  *(_BYTE *)(v14 - 96) = v44;
  sub_1AE74C544();
  v46 = *(_QWORD *)(v14 - 248);
  sub_1AE926CC4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 264) + 8))(v45, v46);
  sub_1AE4FB7D0(v39, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 184) + 8));
  sub_1AE745C58(*(_QWORD *)(v14 - 72), *(_QWORD *)(v14 - 200), v43, v42, *(_DWORD *)(v14 - 192));
LABEL_7:
  sub_1AE4F667C();
}

uint64_t type metadata accessor for InferenceMessageResponseError.UnknownErrorCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceMessageResponseError.UnknownErrorCodingKeys);
}

uint64_t type metadata accessor for InferenceMessageResponseError.ServerErrorCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceMessageResponseError.ServerErrorCodingKeys);
}

uint64_t type metadata accessor for InferenceMessageResponseError.ServiceErrorCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceMessageResponseError.ServiceErrorCodingKeys);
}

uint64_t type metadata accessor for InferenceMessageResponseError.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceMessageResponseError.CodingKeys);
}

unint64_t sub_1AE74C544()
{
  unint64_t result;

  result = qword_1EEDA1D90;
  if (!qword_1EEDA1D90)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServerErrorInfo, &type metadata for InferenceServerErrorInfo);
    atomic_store(result, (unint64_t *)&qword_1EEDA1D90);
  }
  return result;
}

void InferenceMessageResponseError<>.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1AE4F67EC();
  type metadata accessor for InferenceMessageResponseError.UnknownErrorCodingKeys(255, v0, v1, v2);
  sub_1AE5032DC();
}

void sub_1AE74C5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1AE4F9160();
  *(_QWORD *)(v10 - 272) = v9;
  v12 = sub_1AE74F5C8(v11, v10 - 24);
  sub_1AE4F9050(v12, v10 - 136);
  *(_QWORD *)(v10 - 400) = v13;
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v14);
  v16 = sub_1AE501E04((uint64_t)&a9 - v15);
  type metadata accessor for InferenceMessageResponseError.ServerErrorCodingKeys(v16, v17, v18, v19);
  sub_1AE5032DC();
}

void sub_1AE74C640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1AE4F9160();
  *(_QWORD *)(v1 - 296) = v0;
  v3 = sub_1AE74F5C8(v2, v1 - 56);
  sub_1AE4F9050(v3, v1 - 152);
  *(_QWORD *)(v1 - 416) = v4;
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4FCEE4();
  v7 = sub_1AE501E04(v6);
  type metadata accessor for InferenceMessageResponseError.ServiceErrorCodingKeys(v7, v8, v9, v10);
  sub_1AE5032DC();
}

void sub_1AE74C698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  sub_1AE4F9160();
  *(_QWORD *)(v13 - 320) = v10;
  v15 = sub_1AE74F5C8(v14, v13 - 72);
  sub_1AE4F9050(v15, v13 - 168);
  *(_QWORD *)(v13 - 432) = v16;
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v17);
  sub_1AE4FCEE4();
  v19 = sub_1AE501E04(v18);
  v23 = type metadata accessor for InferenceMessageResponseError.CodingKeys(v19, v20, v21, v22);
  MEMORY[0x1AF454B70](&unk_1AE955FA0, v23);
  sub_1AE5090A8();
  v24 = sub_1AE926C28();
  *(_QWORD *)(v13 - 240) = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v13 - 232) = v24;
  sub_1AE4FE978();
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&a9 - v26;
  *(_QWORD *)(v13 - 384) = v11;
  *(_QWORD *)(v13 - 376) = v9;
  v29 = type metadata accessor for InferenceMessageResponseError(0, v11, v9, v28);
  *(_QWORD *)(v13 - 248) = v29;
  *(_QWORD *)(v13 - 336) = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  sub_1AE74F540();
  v31 = MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&a9 - v32;
  v34 = MEMORY[0x1E0C80A78](v31);
  v36 = (char *)&a9 - v35;
  MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&a9 - v37;
  v39 = v12;
  v40 = v12[3];
  *(_QWORD *)(v13 - 216) = v39;
  sub_1AE4F9858(v39, v40);
  *(_QWORD *)(v13 - 224) = v27;
  v41 = *(_QWORD *)(v13 - 72);
  sub_1AE926F34();
  if (!v41)
  {
    *(_QWORD *)(v13 - 464) = v11;
    *(_QWORD *)(v13 - 448) = v36;
    *(_QWORD *)(v13 - 456) = v33;
    *(_QWORD *)(v13 - 440) = v38;
    *(_QWORD *)(v13 - 72) = 0;
    *(_QWORD *)(v13 - 176) = sub_1AE926C1C();
    sub_1AE5090A8();
    sub_1AE9262B0();
    sub_1AE500CDC();
  }
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(*(_QWORD *)(v13 - 216));
  sub_1AE4F667C();
}

void sub_1AE74CAFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  sub_1AE926BEC();
  v2 = v1 - 176;
  if (v0)
  {
    sub_1AE74F52C(v2);
    JUMPOUT(0x1AE74CB40);
  }
  sub_1AE74F52C(v2);
  sub_1AE4FB844();
  v3 = sub_1AE74F5B4();
  v4(v3);
  swift_storeEnumTagMultiPayload();
  sub_1AE74F4F0();
  JUMPOUT(0x1AE74CC14);
}

uint64_t type metadata accessor for InferenceMessageResponseError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceMessageResponseError);
}

unint64_t sub_1AE74CC84()
{
  unint64_t result;

  result = qword_1EEDA1D98[0];
  if (!qword_1EEDA1D98[0])
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServerErrorInfo, &type metadata for InferenceServerErrorInfo);
    atomic_store(result, qword_1EEDA1D98);
  }
  return result;
}

void sub_1AE74CCC0()
{
  InferenceMessageResponseError<>.init(from:)();
}

void sub_1AE74CCE4()
{
  InferenceMessageResponseError<>.encode(to:)();
}

uint64_t sub_1AE74CD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for InferenceMessageResponseError.ServiceError(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_1AE74CD80(unint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  if (v9 + 1 > 0x21)
    v10 = v9 + 1;
  else
    v10 = 33;
  v11 = *(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80);
  if ((v11 & 0x1000F8) != 0 || (unint64_t)(v10 + 1) > 0x18)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v13 + (((v11 & 0xF8 | 7u) + 16) & ~(unint64_t)(v11 & 0xF8 | 7u));
    swift_retain();
  }
  else
  {
    v14 = *(unsigned __int8 *)(a2 + v10);
    if (v14 >= 3)
      v14 = *(_DWORD *)a2 + 3;
    if (v14 == 2)
    {
      v20 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v20;
      *(_BYTE *)(a1 + v10) = 2;
      swift_bridgeObjectRetain();
    }
    else if (v14 == 1)
    {
      v15 = *(_QWORD *)a2;
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(_QWORD *)(a2 + 16);
      v18 = *(_QWORD *)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_1AE745934(v15, v16, v17, v18, v19);
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = v18;
      *(_BYTE *)(a1 + 32) = v19;
      *(_BYTE *)(a1 + v10) = 1;
    }
    else
    {
      v21 = *(unsigned __int8 *)(a2 + v9);
      if (v21 >= 2)
      {
        if (v9 <= 3)
          v22 = v9;
        else
          v22 = 4;
        __asm { BR              X13 }
      }
      v23 = v21 == 1;
      if (v21 == 1)
      {
        v24 = v7;
      }
      else
      {
        v8 = v5;
        v24 = AssociatedTypeWitness;
      }
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v24);
      *(_BYTE *)(a1 + v9) = v23;
      *(_BYTE *)(a1 + v10) = 0;
    }
  }
  return a1;
}

uint64_t sub_1AE74CF84(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 <= v4)
    v7 = v4;
  v8 = 33;
  if (v7 + 1 > 0x21)
    v8 = v7 + 1;
  v9 = *(unsigned __int8 *)(a1 + v8);
  if (v9 >= 3)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X15 }
  }
  if (v9 == 2)
    return swift_bridgeObjectRelease();
  if (v9 == 1)
    return sub_1AE745C58(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  v12 = *(unsigned __int8 *)(a1 + v7);
  if (v12 >= 2)
  {
    if (v7 <= 3)
      v13 = v7;
    else
      v13 = 4;
    __asm { BR              X14 }
  }
  if (v12 == 1)
  {
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    v15 = a1;
  }
  else
  {
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    v15 = a1;
    v5 = AssociatedTypeWitness;
  }
  return v14(v15, v5);
}

uint64_t sub_1AE74D17C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  if (v9 + 1 > 0x21)
    v10 = v9 + 1;
  else
    v10 = 33;
  v11 = *(unsigned __int8 *)(a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  if (v11 == 2)
  {
    v18 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v18;
    *(_BYTE *)(a1 + v10) = 2;
    swift_bridgeObjectRetain();
  }
  else if (v11 == 1)
  {
    v13 = *(_QWORD *)a2;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = *(_BYTE *)(a2 + 32);
    sub_1AE745934(v13, v14, v15, v16, v17);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v16;
    *(_BYTE *)(a1 + 32) = v17;
    *(_BYTE *)(a1 + v10) = 1;
  }
  else
  {
    v19 = *(unsigned __int8 *)(a2 + v9);
    if (v19 >= 2)
    {
      if (v9 <= 3)
        v20 = v9;
      else
        v20 = 4;
      __asm { BR              X13 }
    }
    v21 = v19 == 1;
    if (v19 == 1)
    {
      v22 = v7;
    }
    else
    {
      v8 = v5;
      v22 = AssociatedTypeWitness;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v22);
    *(_BYTE *)(a1 + v9) = v21;
    *(_BYTE *)(a1 + v10) = 0;
  }
  return a1;
}

uint64_t sub_1AE74D394(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v8 + 64) <= v6)
      v9 = v6;
    else
      v9 = *(_QWORD *)(v8 + 64);
    if (v9 + 1 > 0x21)
      v10 = v9 + 1;
    else
      v10 = 33;
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 2)
    {
      swift_bridgeObjectRelease();
    }
    else if (v11 == 1)
    {
      sub_1AE745C58(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
    }
    else
    {
      v13 = *(unsigned __int8 *)(a1 + v9);
      if (v13 >= 2)
      {
        if (v9 <= 3)
          v14 = v9;
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      if (v13 == 1)
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
      else
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 3)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + v10) = 2;
      swift_bridgeObjectRetain();
    }
    else if (v15 == 1)
    {
      v17 = *(_QWORD *)a2;
      v18 = *(_QWORD *)(a2 + 8);
      v19 = *(_QWORD *)(a2 + 16);
      v20 = *(_QWORD *)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_1AE745934(v17, v18, v19, v20, v21);
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v18;
      *(_QWORD *)(a1 + 16) = v19;
      *(_QWORD *)(a1 + 24) = v20;
      *(_BYTE *)(a1 + 32) = v21;
      *(_BYTE *)(a1 + v10) = 1;
    }
    else
    {
      v22 = *(unsigned __int8 *)(a2 + v9);
      if (v22 >= 2)
      {
        if (v9 <= 3)
          v23 = v9;
        else
          v23 = 4;
        __asm { BR              X12 }
      }
      v24 = v22 == 1;
      if (v22 == 1)
        v25 = v8;
      else
        v25 = v5;
      if (v22 == 1)
        v26 = v7;
      else
        v26 = AssociatedTypeWitness;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(a1, a2, v26);
      *(_BYTE *)(a1 + v9) = v24;
      *(_BYTE *)(a1 + v10) = 0;
    }
  }
  return a1;
}

uint64_t sub_1AE74D704(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  if (v9 + 1 > 0x21)
    v10 = v9 + 1;
  else
    v10 = 33;
  v11 = *(unsigned __int8 *)(a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  if (v11 == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v14 = 2;
  }
  else if (v11 == 1)
  {
    v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v14 = 1;
  }
  else
  {
    v15 = *(unsigned __int8 *)(a2 + v9);
    if (v15 >= 2)
    {
      if (v9 <= 3)
        v16 = v9;
      else
        v16 = 4;
      __asm { BR              X13 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
    {
      v18 = v7;
    }
    else
    {
      v8 = v5;
      v18 = AssociatedTypeWitness;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, v18);
    v14 = 0;
    *(_BYTE *)(a1 + v9) = v17;
  }
  *(_BYTE *)(a1 + v10) = v14;
  return a1;
}

uint64_t sub_1AE74D8F4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v8 + 64) <= v6)
      v9 = v6;
    else
      v9 = *(_QWORD *)(v8 + 64);
    if (v9 + 1 > 0x21)
      v10 = v9 + 1;
    else
      v10 = 33;
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 2)
    {
      swift_bridgeObjectRelease();
    }
    else if (v11 == 1)
    {
      sub_1AE745C58(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
    }
    else
    {
      v13 = *(unsigned __int8 *)(a1 + v9);
      if (v13 >= 2)
      {
        if (v9 <= 3)
          v14 = v9;
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      if (v13 == 1)
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
      else
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 3)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v18 = 2;
    }
    else if (v15 == 1)
    {
      v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      v18 = 1;
    }
    else
    {
      v19 = *(unsigned __int8 *)(a2 + v9);
      if (v19 >= 2)
      {
        if (v9 <= 3)
          v20 = v9;
        else
          v20 = 4;
        __asm { BR              X12 }
      }
      v21 = v19 == 1;
      if (v19 == 1)
        v22 = v8;
      else
        v22 = v5;
      if (v19 == 1)
        v23 = v7;
      else
        v23 = AssociatedTypeWitness;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(a1, a2, v23);
      v18 = 0;
      *(_BYTE *)(a1 + v9) = v21;
    }
    *(_BYTE *)(a1 + v10) = v18;
  }
  return a1;
}

uint64_t sub_1AE74DC34(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4)
    v5 = v4;
  v6 = 33;
  if (v5 + 1 > 0x21)
    v6 = v5 + 1;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_23;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 253) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 < 2)
    {
LABEL_23:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 3)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_23;
LABEL_16:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v12 + 254);
}

void sub_1AE74DDC4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6)
    v7 = v6;
  if (v7 + 1 > 0x21)
    v8 = v7 + 1;
  else
    v8 = 33;
  v9 = v8 + 1;
  v10 = 8 * (v8 + 1);
  if (a3 < 0xFE)
  {
    v11 = 0u;
  }
  else if (v9 <= 3)
  {
    v13 = ((a3 + ~(-1 << v10) - 253) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v12 = a2 - 254;
  if (v9 < 4)
  {
    if ((_DWORD)v8 != -1)
    {
      v14 = v12 & ~(-1 << v10);
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v8 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t sub_1AE74DFCC(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v3 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2)
    v3 = v2;
  if (v3 + 1 > 0x21)
    v4 = v3 + 1;
  else
    v4 = 33;
  result = *(unsigned __int8 *)(a1 + v4);
  if (result >= 3)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1AE74E0D4(_BYTE *a1, unsigned int a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  if (a2 > 2)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v8 <= v7)
      v8 = v7;
    if (v8 + 1 > 0x21)
      v9 = v8 + 1;
    else
      v9 = 33;
    v10 = a2 - 3;
    if (v9 < 4)
    {
      v11 = v10 >> (8 * v9);
      v12 = v10 & ~(-1 << (8 * v9));
      a1[v9] = v11 + 3;
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
    else
    {
      a1[v9] = 3;
      bzero(a1, v9);
      *(_DWORD *)a1 = v10;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v4 > v5)
      v5 = v4;
    if (v5 + 1 > 0x21)
      v6 = v5 + 1;
    else
      v6 = 33;
    a1[v6] = a2;
  }
}

uint64_t sub_1AE74E25C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1AE74E318(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = (*(_BYTE *)(v8 + 80) | *(_BYTE *)(v5 + 80));
  if (v10 <= 7 && v9 + 1 <= 0x18 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) == 0)
  {
    v14 = *((unsigned __int8 *)a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    if (v14 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      *((_BYTE *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v9) = 0;
    }
  }
  else
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1AE74E4A8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 <= v4)
    v7 = v4;
  v8 = *(unsigned __int8 *)(a1 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X14 }
  }
  if (v8 == 1)
  {
    v10 = v5;
  }
  else
  {
    v6 = v3;
    v10 = AssociatedTypeWitness;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v10);
}

uint64_t sub_1AE74E5C0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = v7;
  }
  else
  {
    v8 = v5;
    v13 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v13);
  *(_BYTE *)(a1 + v9) = v12;
  return a1;
}

uint64_t sub_1AE74E6F0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) <= v6)
      v10 = v6;
    else
      v10 = *(_QWORD *)(v9 + 64);
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v7 - 8);
    else
      v13 = v5;
    if (v11 == 1)
      v14 = v7;
    else
      v14 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v9;
    else
      v18 = v5;
    if (v15 == 1)
      v19 = v8;
    else
      v19 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a1, a2, v19);
    *(_BYTE *)(a1 + v10) = v17;
  }
  return a1;
}

uint64_t sub_1AE74E8B4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v12 = v10 == 1;
  if (v10 == 1)
  {
    v13 = v7;
  }
  else
  {
    v8 = v5;
    v13 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, v13);
  *(_BYTE *)(a1 + v9) = v12;
  return a1;
}

uint64_t sub_1AE74E9E4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) <= v6)
      v10 = v6;
    else
      v10 = *(_QWORD *)(v9 + 64);
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
      v13 = *(_QWORD *)(v7 - 8);
    else
      v13 = v5;
    if (v11 == 1)
      v14 = v7;
    else
      v14 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    v17 = v15 == 1;
    if (v15 == 1)
      v18 = v9;
    else
      v18 = v5;
    if (v15 == 1)
      v19 = v8;
    else
      v19 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(a1, a2, v19);
    *(_BYTE *)(a1 + v10) = v17;
  }
  return a1;
}

uint64_t sub_1AE74EBA8(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v4)
    v6 = v4;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v11 < 2)
    {
LABEL_22:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 2)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_22;
LABEL_15:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v12 + 255);
}

void sub_1AE74ED28(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6)
    v7 = v6;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if (a3 < 0xFF)
  {
    v10 = 0u;
  }
  else if (v8 <= 3)
  {
    v12 = ((a3 + ~(-1 << v9) - 254) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v11 = a2 - 255;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v13 = v11 & ~(-1 << v9);
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if ((_DWORD)v8 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t sub_1AE74EF20(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v3 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2)
    v3 = v2;
  result = *(unsigned __int8 *)(a1 + v3);
  if (result >= 2)
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1AE74F018(_BYTE *a1, unsigned int a2)
{
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t AssociatedTypeWitness;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  if (a2 > 1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v6)
      v8 = v6;
    else
      v8 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
    v9 = a2 - 2;
    if (v8 < 4)
    {
      v10 = v9 >> (8 * v8);
      v11 = v9 & ~(-1 << (8 * v8));
      a1[v8] = v10 + 2;
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if ((_DWORD)v8 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v8] = 2;
      bzero(a1, v8);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v4 > v5)
      v5 = v4;
    a1[v5] = a2;
  }
}

uint64_t sub_1AE74F180(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AE74F1CC + 4 * byte_1AE9556EE[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AE74F200 + 4 * byte_1AE9556E9[v4]))();
}

uint64_t sub_1AE74F200(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE74F208(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE74F210);
  return result;
}

uint64_t sub_1AE74F21C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE74F224);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AE74F228(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE74F230(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE74F240(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AE74F28C + 4 * byte_1AE9556F8[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AE74F2C0 + 4 * byte_1AE9556F3[v4]))();
}

uint64_t sub_1AE74F2C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE74F2C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE74F2D0);
  return result;
}

uint64_t sub_1AE74F2DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE74F2E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AE74F2E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE74F2F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE74F2FC(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AE74F33C + 4 * byte_1AE9556FD[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AE74F35C + 4 * byte_1AE955702[v4]))();
}

_BYTE *sub_1AE74F33C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AE74F35C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AE74F364(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AE74F36C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AE74F374(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AE74F37C(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_1AE74F388()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F398()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F3A8()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F3B8()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F3C8()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F3D8()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F3E8()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F3F8()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F408()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F418()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F428()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F438()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F448()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F458()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F468()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F478()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F488()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F498()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F4A8()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F4B8()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE74F4C8()
{
  JUMPOUT(0x1AF454B70);
}

uint64_t sub_1AE74F4F0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 440);
}

uint64_t sub_1AE74F510()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 352);
}

uint64_t sub_1AE74F52C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_1AE74F55C()
{
  return 255;
}

uint64_t sub_1AE74F56C()
{
  return sub_1AE926CC4();
}

uint64_t sub_1AE74F584()
{
  return sub_1AE926C34();
}

uint64_t sub_1AE74F5A0()
{
  return 255;
}

uint64_t sub_1AE74F5B4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE74F5C8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = a1;
  return sub_1AE926C28();
}

id InferenceMLModel.modelDescription.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_modelDescription);
}

uint64_t InferenceMLModel.prediction<A>(from:context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  sub_1AE4F9070();
  return swift_task_switch();
}

uint64_t sub_1AE74F610()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9E9B0]), sel_init);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_1AE74F68C;
  return sub_1AE9266AC();
}

uint64_t sub_1AE74F68C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;

  sub_1AE4F6A90();
  v4 = *v3;
  *v5 = v4;
  *(_QWORD *)(v2 + 48) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_1AE4F9070();
    return sub_1AE4F77A8();
  }
  else
  {

    return sub_1AE4F942C(v0, *(uint64_t (**)(void))(v4 + 8));
  }
}

uint64_t sub_1AE74F6EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t InferenceMLModel.__allocating_init<A>(domainId:assetId:configuration:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;

  v9[20] = a8;
  v9[21] = v8;
  v9[18] = a6;
  v9[19] = a7;
  v9[16] = a4;
  v9[17] = a5;
  v9[14] = a2;
  v9[15] = a3;
  v9[13] = a1;
  v9[22] = *(_QWORD *)(a7 - 8);
  v9[23] = sub_1AE500330();
  sub_1AE4F9070();
  return sub_1AE4F90B4();
}

uint64_t sub_1AE74F770()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  void (*v10)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];
  char v27;
  uint64_t v28;
  _UNKNOWN **v29;
  uint64_t v30;
  id v31;

  v24 = v0[22];
  v25 = v0[23];
  v1 = v0[20];
  v23 = v0[19];
  v2 = v0[18];
  v31 = (id)v0[17];
  v3 = *(_QWORD *)((*(uint64_t (**)(void))(v1 + 8))() + 16);
  swift_unownedRetainStrong();
  swift_release();
  sub_1AE57C238(v3 + 32, (uint64_t)(v0 + 2));
  swift_release();
  v4 = type metadata accessor for AssetRegistry();
  v6 = v0[5];
  v5 = v0[6];
  v7 = sub_1AE4F9858(v0 + 2, v6);
  v0[10] = v6;
  v8 = *(_QWORD *)(v5 + 8);
  v0[11] = v8;
  v9 = sub_1AE52F6A8(v0 + 7);
  v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v10(v9, v7, v6);
  v26[0] = (uint64_t)sub_1AE532BE4;
  v26[1] = 0;
  v27 = 0;
  v11 = sub_1AE500330();
  v10((uint64_t *)v11, v9, v6);
  v12 = sub_1AE53F3A8(v11, v26, v4, v6, v8);
  v0[24] = v12;
  swift_task_dealloc();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)(v0 + 7));
  v0[12] = v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v25, v2, v23);
  swift_retain();
  v13 = v31;
  v14 = (_QWORD *)swift_task_alloc();
  v0[25] = v14;
  *v14 = v0;
  v14[1] = sub_1AE74F934;
  v15 = v0[23];
  v16 = v0[19];
  v17 = v0[16];
  v18 = v0[17];
  v19 = v0[14];
  v20 = v0[15];
  v21 = v0[13];
  v30 = v0[20];
  v28 = v16;
  v29 = &protocol witness table for AssetRegistry;
  return sub_1AE74FA7C((uint64_t)(v0 + 12), v21, v19, v20, v17, v18, v15, v4);
}

uint64_t sub_1AE74F934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  sub_1AE4F6A90();
  *v4 = *v3;
  *(_QWORD *)(v2 + 208) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    *(_QWORD *)(v2 + 216) = v0;
    swift_retain();
  }
  sub_1AE4F9070();
  return sub_1AE4F77A8();
}

uint64_t sub_1AE74F994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(void **)(v0 + 136);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  swift_release();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 16);
  sub_1AE4F67E4();
  return sub_1AE5037FC(*(_QWORD *)(v0 + 216), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE74FA0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(void **)(v0 + 136);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 16);
  sub_1AE4F90A0();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE74FA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9[9] = v22;
  v9[10] = v8;
  v9[7] = a8;
  v9[8] = v20;
  v9[5] = a6;
  v9[6] = a7;
  v9[3] = a3;
  v9[4] = a5;
  v9[2] = a1;
  v9[11] = *(_QWORD *)(v20 - 8);
  v9[12] = swift_task_alloc();
  v15 = sub_1AE924780();
  v9[13] = v15;
  v9[14] = *(_QWORD *)(v15 - 8);
  v9[15] = swift_task_alloc();
  sub_1AE501548(&qword_1EED93EF0);
  v16 = swift_task_alloc();
  v9[16] = v16;
  v9[17] = type metadata accessor for AssetRegistryAsset(0);
  v9[18] = swift_task_alloc();
  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v21 + 16)
                                                                                     + *(_QWORD *)(v21 + 16));
  v17 = (_QWORD *)swift_task_alloc();
  v9[19] = v17;
  *v17 = v9;
  v17[1] = sub_1AE74FBD4;
  return v19(v16, a4, a5, a2, a3, a8);
}

uint64_t sub_1AE74FBD4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1AE4FB74C();
  *v2 = *v1;
  *(_QWORD *)(v3 + 160) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AE4F9070();
  return sub_1AE4F77A8();
}

uint64_t sub_1AE74FC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  void *v15;

  v3 = *(_QWORD *)(v1 + 128);
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v3, 1, *(_QWORD *)(v1 + 136)) == 1)
  {
    sub_1AE50A538();
    sub_1AE50A024(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    sub_1AE750470(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8));
    sub_1AE652A0C(v3);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1AE4F90A0();
    sub_1AE4F67E4();
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 144);
    v7 = *(_QWORD *)(v1 + 112);
    v6 = *(_QWORD *)(v1 + 120);
    v9 = *(_QWORD *)(v1 + 96);
    v8 = *(_QWORD *)(v1 + 104);
    v10 = *(_QWORD *)(v1 + 88);
    v11 = *(_QWORD *)(v1 + 64);
    v12 = *(_QWORD *)(v1 + 48);
    v15 = *(void **)(v1 + 40);
    sub_1AE652A4C(v3, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
    v13 = v15;
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 168) = v14;
    *v14 = v1;
    v14[1] = sub_1AE74FD98;
    return sub_1AE74FF5C(*(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 64));
  }
}

uint64_t sub_1AE74FD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  sub_1AE4F6A90();
  *v4 = *v3;
  *(_QWORD *)(v2 + 176) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v2 + 184) = v0;
  sub_1AE4F9070();
  return sub_1AE4F77A8();
}

uint64_t sub_1AE74FDF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 16);

  sub_1AE750470(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v5, v4);
  sub_1AE652A90(v2);
  sub_1AE4FD348();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  sub_1AE4F67DC();
  return sub_1AE5037FC(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE74FE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v3);
  sub_1AE50A024(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8));
  sub_1AE4FD348();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  sub_1AE4F67DC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1AE74FEF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 144);
  sub_1AE50A538();
  sub_1AE50A024(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1AE750470(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8));
  sub_1AE652A90(v3);
  sub_1AE4FD348();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  sub_1AE4F67DC();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1AE74FF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  swift_allocObject();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1AE74FFEC;
  return sub_1AE750038(a1, a2, a3, a4);
}

uint64_t sub_1AE74FFEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  sub_1AE4FB74C();
  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_1AE750038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = v4;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  v5[13] = *v4;
  return swift_task_switch();
}

uint64_t sub_1AE750060()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (void *)v0[9];
  sub_1AE750434();
  if (v1)
  {
    v1;
    v2 = (_QWORD *)swift_task_alloc();
    v0[14] = v2;
    sub_1AE509AE4(v2, (uint64_t)sub_1AE750124);
  }
  else
  {
    v0[16] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9E958]), sel_init);
    v3 = (_QWORD *)swift_task_alloc();
    v0[17] = v3;
    sub_1AE509AE4(v3, (uint64_t)sub_1AE75017C);
  }
  return sub_1AE9266B8();
}

uint64_t sub_1AE750124()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  sub_1AE4FB74C();
  v3[2] = v1;
  v3[3] = v2;
  v3[4] = v0;
  *v4 = *v1;
  v3[15] = v0;
  swift_task_dealloc();
  sub_1AE4F9070();
  return sub_1AE4F90B4();
}

uint64_t sub_1AE75017C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;

  sub_1AE4FB74C();
  v3[5] = v1;
  v3[6] = v2;
  v3[7] = v0;
  v4 = (void *)v3[16];
  *v5 = *v1;
  v3[18] = v0;
  swift_task_dealloc();

  sub_1AE4F9070();
  return swift_task_switch();
}

uint64_t sub_1AE7501E0()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (void *)v0[9];

  sub_1AE4FDD8C(v0[10], v0[11]);
  v2 = sub_1AE4FD9B0();
  sub_1AE50ABCC(v2);
  v3 = sub_1AE5090B4();
  return sub_1AE4F942C(v3, v4);
}

uint64_t sub_1AE75022C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_1AE4FDD8C(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  v1 = sub_1AE4FD9B0();
  sub_1AE50ABCC(v1);
  v2 = sub_1AE5090B4();
  return sub_1AE4F942C(v2, v3);
}

uint64_t sub_1AE75026C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 72);

  sub_1AE4FDD8C(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  v2 = sub_1AE4FD9B0();
  sub_1AE5055C4(v2);
  sub_1AE5099E8();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE7502C4()
{
  uint64_t v0;
  uint64_t v1;

  sub_1AE4FDD8C(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  v1 = sub_1AE4FD9B0();
  sub_1AE5055C4(v1);
  sub_1AE5099E8();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v0 + 8));
}

id InferenceMLModel.prediction<A>(from:context:)(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = *(void **)(v1 + 16);
  v8[0] = 0;
  v4 = objc_msgSend(v3, sel_predictionFromFeatures_error_, a1, v8);
  if (v4)
  {
    v5 = v8[0];
  }
  else
  {
    v6 = v8[0];
    sub_1AE9246B4();

    swift_willThrow();
  }
  return v4;
}

uint64_t InferenceMLModel.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t InferenceMLModel.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InferenceMLModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for InferenceMLModel()
{
  return swift_lookUpClassMethod();
}

unint64_t sub_1AE750434()
{
  unint64_t result;

  result = qword_1ED30F9E0;
  if (!qword_1ED30F9E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED30F9E0);
  }
  return result;
}

uint64_t sub_1AE750470@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

void InferenceServerParameters.init(supportServerMode:)(_BYTE *a1@<X8>)
{
  sub_1AE508FD8(a1);
}

_QWORD *InferenceServer.__allocating_init(parameters:)(char *a1)
{
  return sub_1AE743F3C(*a1, (uint64_t)&type metadata for InferenceServiceDefinitionList);
}

uint64_t InferenceActor.MyActor.deinit()
{
  uint64_t v0;

  swift_defaultActor_destroy();
  return v0;
}

uint64_t InferenceActor.MyActor.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

void InferenceActor.MyActor.unownedExecutor.getter()
{
  sub_1AE4F67D4();
}

void sub_1AE7504E8()
{
  InferenceActor.MyActor.unownedExecutor.getter();
}

uint64_t sub_1AE750500()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for InferenceActor.MyActor();
  v0 = swift_allocObject();
  result = swift_defaultActor_initialize();
  qword_1EED93F38 = v0;
  return result;
}

uint64_t static InferenceActor.shared.getter()
{
  if (qword_1ED30EF48 != -1)
    swift_once();
  return swift_retain();
}

void InferenceServerParameters.supportServerMode.getter(_BYTE *a1@<X8>)
{
  sub_1AE508FD8(a1);
}

void sub_1AE75058C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[40];

  v6 = type metadata accessor for InferenceServerConfigManager();
  sub_1AE57C238(a1, (uint64_t)v8);
  swift_retain();
  sub_1AE753BD4((uint64_t)v8, a2);
  a3[3] = v6;
  a3[4] = &off_1E5DC1140;
  *a3 = v7;
}

uint64_t sub_1AE750610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 192))
  {
    v1 = *(_QWORD *)(v0 + 192);
  }
  else
  {
    v2 = v0;
    sub_1AE924408();
    swift_allocObject();
    v1 = sub_1AE9243FC();
    *(_QWORD *)(v2 + 192) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void static InferenceServer.defaultParameters.getter(_BYTE *a1@<X8>)
{
  sub_1AE508FD8(a1);
}

uint64_t InferenceServer.__allocating_init<A>(parameters:serviceDefinitionListType:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(__int128 *__return_ptr);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  char v19;

  v17 = a2;
  v16 = a3;
  v6 = *a1;
  sub_1AE9243C0();
  swift_allocObject();
  v7 = sub_1AE9243B4();
  v8 = v7;
  v19 = v6;
  if (qword_1ED31A1F0 != -1)
    v7 = swift_once();
  v9 = (void (*)(__int128 *__return_ptr))qword_1ED31B4D0;
  v10 = unk_1ED31B4D8;
  MEMORY[0x1E0C80A78](v7);
  v15[2] = v8;
  v15[3] = v4;
  type metadata accessor for InferenceServerLifecycleManagerNoOp();
  sub_1AE4F66BC();
  v11 = sub_1AE757EEC();
  v18[3] = type metadata accessor for InferenceServerCacheManagerNoOp();
  v18[4] = &off_1E5DC37E0;
  v18[0] = sub_1AE4F66BC();
  swift_retain();
  sub_1AE7508A8(&v19, (void (*)(__int128 *__return_ptr))sub_1AE744130, v8, v9, v10, (void (*)(__int128 *__return_ptr, uint64_t *))sub_1AE7534E4, (uint64_t)v15, v11, (uint64_t)&off_1E5DC53E0, (uint64_t)v18, MEMORY[0x1E0DEE9D8], v17, v8, v16, a4);
  v13 = v12;
  swift_release();
  return v13;
}

uint64_t sub_1AE750824@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = type metadata accessor for InferenceSupportLocalBackendBasic();
  sub_1AE4F66BC();
  v6 = swift_retain();
  result = sub_1AE766A54(v6, v7, a1);
  if (!v2)
  {
    a2[3] = v5;
    a2[4] = (uint64_t)&off_1E5DC4B90;
    *a2 = result;
  }
  return result;
}

void sub_1AE750894(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_1AE75058C(a1, a2, a3);
}

void sub_1AE7508A8(char *a1, void (*a2)(__int128 *__return_ptr), uint64_t a3, void (*a4)(__int128 *__return_ptr), uint64_t a5, void (*a6)(__int128 *__return_ptr, uint64_t *), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v21;

  sub_1AE4F66BC();
  sub_1AE75095C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, v21, a15);
  sub_1AE506D24();
}

void sub_1AE75095C(char *a1, void (*a2)(__int128 *__return_ptr), uint64_t a3, void (*a4)(__int128 *__return_ptr), uint64_t a5, void (*a6)(__int128 *__return_ptr, uint64_t *), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[6];
  char v31;

  v17 = (_QWORD *)v15;
  v21 = *a1;
  *(_QWORD *)(v15 + 192) = 0;
  sub_1AE6554EC();
  *(_QWORD *)(v15 + 16) = sub_1AE925C98();
  *(_BYTE *)(v15 + 24) = v21;
  if (v21 < 0)
  {
    v31 = v21 & 1;
    a4(&v27);
    if (!v16)
    {
      v22 = v28;
      v23 = v29;
      sub_1AE4F9858(&v27, v28);
      v30[3] = v22;
      v30[4] = *(_QWORD *)(v23 + 16);
      v24 = sub_1AE52F6A8(v30);
      sub_1AE5071A0((uint64_t)v24);
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v27);
      goto LABEL_7;
    }
  }
  else
  {
    a2(&v27);
    if (!v16)
    {
      sub_1AE50AF58(&v27, (uint64_t)v30);
LABEL_7:
      sub_1AE57C238((uint64_t)v30, (uint64_t)(v17 + 4));
      a6(&v27, v30);
      sub_1AE50AF58(&v27, (uint64_t)(v17 + 16));
      v17[9] = a8;
      v17[10] = a9;
      sub_1AE57C238(a10, (uint64_t)(v17 + 11));
      v17[21] = a11;
      v17[22] = a12;
      v17[23] = a15;
      v17[25] = a13;
      swift_unknownObjectRetain();
      swift_retain();
      v25 = swift_retain();
      sub_1AE757E74(v25, (uint64_t)&off_1E5DB7110);
      sub_1AE4FE92C();
      sub_1AE4F77C8();
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(a10);
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v30);
      goto LABEL_8;
    }
  }
  sub_1AE4FE92C();
  sub_1AE4F77C8();
  swift_bridgeObjectRelease();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(a10);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for InferenceServer();
  swift_deallocPartialClassInstance();
LABEL_8:
  sub_1AE506D24();
}

uint64_t sub_1AE750B94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1AE753A78();
  v19 = v1;
  v3 = v2;
  v5 = v4;
  v17 = v6;
  v18 = v7;
  *(_QWORD *)(v0 + 72) = v4;
  *(_QWORD *)(v0 + 80) = v2;
  v9 = *v8;
  v10 = v8[1];
  v12 = v8[2];
  v11 = v8[3];
  v13 = v8[4];
  v14 = v8[5];
  if (qword_1ED30EF48 != -1)
    swift_once();
  *(_QWORD *)(v0 + 88) = qword_1EED93F38;
  *(_QWORD *)(v0 + 16) = v9;
  *(_QWORD *)(v0 + 24) = v10;
  *(_QWORD *)(v0 + 32) = v12;
  *(_QWORD *)(v0 + 40) = v11;
  *(_QWORD *)(v0 + 48) = v13;
  *(_QWORD *)(v0 + 56) = v14;
  *(_QWORD *)(v0 + 64) = 0;
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v15;
  *v15 = v0;
  v15[1] = sub_1AE750C60;
  return sub_1AE4FDEE0(v17, (_OWORD *)(v0 + 16), v18, v19, (uint64_t *)(v0 + 64), v5, v3);
}

uint64_t sub_1AE750C60()
{
  uint64_t v0;
  uint64_t v1;

  sub_1AE4F952C();
  if (v0)
    return sub_1AE4FD190();
  else
    return sub_1AE4FC8E4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1AE750CA4()
{
  uint64_t v0;
  void *v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1AE753ADC();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for InferenceMessageResponseError(0, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceMessageResponseError<A>, v5);
  swift_allocError();
  sub_1AE744A38(v1, v6);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1AE750D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1AE753A78();
  v21 = v1;
  v3 = v2;
  v19 = v4;
  v20 = v5;
  v18 = v6;
  *(_QWORD *)(v0 + 72) = v2;
  *(_QWORD *)(v0 + 80) = v1;
  v9 = *v7;
  v8 = v7[1];
  v10 = v7[2];
  v11 = v7[3];
  v13 = v7[4];
  v12 = v7[5];
  v15 = *v14;
  if (qword_1ED30EF48 != -1)
    swift_once();
  *(_QWORD *)(v0 + 88) = qword_1EED93F38;
  *(_QWORD *)(v0 + 16) = v9;
  *(_QWORD *)(v0 + 24) = v8;
  *(_QWORD *)(v0 + 32) = v10;
  *(_QWORD *)(v0 + 40) = v11;
  *(_QWORD *)(v0 + 48) = v13;
  *(_QWORD *)(v0 + 56) = v12;
  *(_QWORD *)(v0 + 64) = v15;
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v16;
  *v16 = v0;
  v16[1] = sub_1AE750E5C;
  return sub_1AE4FDEE0(v18, (_OWORD *)(v0 + 16), v19, v20, (uint64_t *)(v0 + 64), v3, v21);
}

uint64_t sub_1AE750E5C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1AE4F952C();
  if (v0)
    return sub_1AE4FD190();
  else
    return sub_1AE4FC8E4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1AE750EA0(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  *(_QWORD *)(v8 + 144) = a6;
  *(_QWORD *)(v8 + 152) = a7;
  *(_QWORD *)(v8 + 128) = a3;
  *(_QWORD *)(v8 + 136) = a4;
  *(_QWORD *)(v8 + 112) = a1;
  *(_QWORD *)(v8 + 120) = a2;
  v9 = a2[1];
  *(_OWORD *)(v8 + 16) = *a2;
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = a2[2];
  v10 = *a5;
  *(_QWORD *)(v8 + 160) = v7;
  *(_QWORD *)(v8 + 168) = v10;
  if (qword_1ED30EF48 != -1)
    swift_once();
  *(_QWORD *)(v8 + 176) = qword_1EED93F38;
  return sub_1AE4F90B4();
}

uint64_t sub_1AE750F20()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  v1 = *(__int128 **)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 168);
  sub_1AE751F8C(v1, &v9);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  sub_1AE753AC0();
  v6 = swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v6;
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(v0 + 144);
  *(_QWORD *)(v6 + 32) = v3;
  *(_QWORD *)(v6 + 40) = v4;
  *(_QWORD *)(v6 + 48) = v0 + 16;
  *(_QWORD *)(v6 + 56) = v5;
  *(_QWORD *)(v6 + 64) = v2;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v7;
  *v7 = v0;
  v7[1] = sub_1AE751000;
  return sub_1AE7521E4(*(_QWORD *)(v0 + 112), (_OWORD *)(v0 + 64), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), (uint64_t)&unk_1EEDA22B0, v6, *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
}

uint64_t sub_1AE751000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_1AE505574();
  sub_1AE5062E4(v3);
  *(_QWORD *)(v0 + 200) = v1;
  swift_task_dealloc();
  if (v1)
    return sub_1AE4FD190();
  swift_task_dealloc();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1AE75105C()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_1AE4F90A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE751088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8[29] = a8;
  v8[30] = v14;
  v8[27] = a6;
  v8[28] = a7;
  v8[25] = a4;
  v8[26] = a5;
  v8[23] = a2;
  v8[24] = a3;
  v8[22] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[31] = type metadata accessor for InferenceMessageResponse(255, AssociatedTypeWitness, v10, v11);
  v8[32] = swift_getTupleTypeMetadata2();
  v8[33] = swift_task_alloc();
  v8[34] = swift_task_alloc();
  v8[35] = swift_task_alloc();
  v12 = sub_1AE92670C();
  v8[36] = v12;
  v8[37] = *(_QWORD *)(v12 - 8);
  v8[38] = swift_task_alloc();
  if (qword_1ED30EF48 != -1)
    swift_once();
  v8[39] = qword_1EED93F38;
  return swift_task_switch();
}

uint64_t sub_1AE7511C0()
{
  uint64_t v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_OWORD **)(v0 + 208);
  sub_1AE4F9858((_QWORD *)(*(_QWORD *)(v0 + 192) + 88), *(_QWORD *)(*(_QWORD *)(v0 + 192) + 112));
  v3 = v1[1];
  v2 = v1[2];
  *(_OWORD *)(v0 + 16) = *v1;
  *(_OWORD *)(v0 + 32) = v3;
  *(_OWORD *)(v0 + 48) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 320) = v4;
  *v4 = v0;
  v4[1] = sub_1AE751248;
  return sub_1AE753AE8(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 200), v0 + 16, *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
}

uint64_t sub_1AE751248()
{
  sub_1AE50A54C();
  return sub_1AE4FD190();
}

uint64_t sub_1AE75128C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;

  v1 = v0[38];
  v2 = v0[31];
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v1, 1, v2) != 1)
  {
    v6 = v0[23];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v0[22], v1, v2);
    *(_QWORD *)v6 = 0;
    *(_WORD *)(v6 + 8) = 256;
    sub_1AE753A40();
    sub_1AE4F90C0();
    sub_1AE4F90A0();
    sub_1AE4F67E4();
    v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  v3 = v0[41];
  v4 = (_OWORD *)v0[26];
  (*(void (**)(uint64_t, _QWORD))(v0[37] + 8))(v1, v0[36]);
  sub_1AE7517D0(v4);
  if (v3)
  {
    swift_task_dealloc();
    sub_1AE4F90C0();
    sub_1AE4F90A0();
    sub_1AE4F67DC();
    v5 = (uint64_t (*)(void))sub_1AE506C78();
    return v5();
  }
  v8 = v0[28];
  v10 = v0[24];
  v9 = v0[25];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for InferenceMessageRequest(0, AssociatedTypeWitness, v12, v13);
  v0[42] = v14;
  v0[16] = v14;
  v0[17] = &off_1E5DBDC10;
  v15 = sub_1AE52F6A8(v0 + 13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v15, v9, v14);
  v0[18] = v10;
  v0[19] = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = (_QWORD *)swift_task_alloc();
  v0[43] = v16;
  sub_1AE506298(v16, (uint64_t)sub_1AE751480);
  return sub_1AE752008((uint64_t)(v0 + 8), (uint64_t)(v0 + 13), v0 + 18);
}

uint64_t sub_1AE751440()
{
  uint64_t v0;

  sub_1AE753A14();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  sub_1AE4F67DC();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE751480()
{
  uint64_t v0;
  uint64_t v1;

  sub_1AE4F6C18();
  if (!v1)
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 104);
  return sub_1AE4FD190();
}

void sub_1AE7514D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 192);
  *(_DWORD *)(v0 + 376) = *(_DWORD *)(*(_QWORD *)(v0 + 256) + 48);
  sub_1AE4F9858((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
  *(_QWORD *)(v0 + 160) = v2;
  *(_QWORD *)(v0 + 168) = v1;
  v3 = (_QWORD *)sub_1AE4FC56C();
  *(_QWORD *)(v0 + 360) = v3;
  *v3 = v0;
  v3[1] = sub_1AE7515B4;
  sub_1AE4FBB68();
  __asm { BR              X8 }
}

uint64_t sub_1AE7515B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1AE505574();
  sub_1AE5062E4(v2);
  *(_QWORD *)(v0 + 368) = v1;
  swift_task_dealloc();
  return sub_1AE4FD190();
}

uint64_t sub_1AE751608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t (*v28)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  sub_1AE50706C();
  v15 = *(int *)(v14 + 376);
  v17 = *(_QWORD *)(v14 + 272);
  v16 = *(_QWORD *)(v14 + 280);
  v19 = *(_QWORD *)(v14 + 256);
  v18 = *(_QWORD *)(v14 + 264);
  v37 = v19;
  v20 = *(_QWORD *)(v14 + 248);
  v21 = *(_QWORD *)(v14 + 184);
  v38 = *(_QWORD *)(v14 + 176);
  swift_release();
  v22 = (uint64_t *)(v16 + v15);
  swift_bridgeObjectRelease();
  v23 = v17 + *(int *)(v19 + 48);
  v24 = *(_QWORD *)(v20 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v17, v16, v20);
  v25 = *v22;
  LOBYTE(v22) = *((_BYTE *)v22 + 8);
  *(_QWORD *)v23 = v25;
  *(_BYTE *)(v23 + 8) = (_BYTE)v22;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
  v26(v38, v17, v20);
  v27 = v18 + *(int *)(v37 + 48);
  v26(v18, v16, v20);
  *(_QWORD *)v27 = v25;
  *(_BYTE *)(v27 + 8) = (_BYTE)v22;
  *(_QWORD *)v21 = v25;
  *(_WORD *)(v21 + 8) = v22;
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v18, v20);
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v14 + 64);
  sub_1AE753A40();
  sub_1AE4F90C0();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  sub_1AE4FBB68();
  return v28(v28, v29, v30, v31, v32, v33, v34, v35, v37, v38, v14 + 64, a12, a13, a14);
}

uint64_t sub_1AE751710()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  sub_1AE4F90EC();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 64);
  sub_1AE753A14();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  sub_1AE4F67DC();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE751778()
{
  uint64_t v0;

  swift_release();
  sub_1AE4F6648();
  sub_1AE64AA5C();
  sub_1AE753A14();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  sub_1AE4F67DC();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1AE7517D0(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[3];
  unsigned __int8 v68;
  _BYTE v69[48];

  sub_1AE4FD358(a1);
  sub_1AE753A70();
  sub_1AE4F6708();
  sub_1AE51627C();
  swift_bridgeObjectRelease();
  v2 = sub_1AE5D88E4((uint64_t)v69);
  if (v68 == 255)
  {
    sub_1AE501E1C(v2, &qword_1EED94360, v4, v5, v6, v7, v8, v9, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
      v52,
      v53,
      v54,
      v55,
      *((uint64_t *)&v55 + 1),
      v56,
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65);
    sub_1AE753AAC();
    v18 = sub_1AE751E7C(v67, &v41);
    if (v1)
      goto LABEL_6;
    v20 = v18;
    v21 = v19;
    v65 = v18;
    v66 = v19;
    sub_1AE508360();
    v41 = v22;
    v42 = v23;
    sub_1AE7537EC((uint64_t)v67, (uint64_t)&v43);
    sub_1AE4F6804();
    sub_1AE751B9C(&v55, v20, v21, (uint64_t)&v43, (uint64_t)&v60);
    sub_1AE753828((uint64_t)&v43);
    v24 = swift_bridgeObjectRelease();
    if (!v63)
    {
      sub_1AE753AA4(v24, &qword_1EEDA2298, v25, v26, v27, v28, v29, v30, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
        v52,
        v53,
        v54,
        v55,
        *((uint64_t *)&v55 + 1),
        v56,
        v57,
        v58,
        v59,
        v60);
      v32 = v65;
      v31 = v66;
      v41 = v65;
      v42 = v66;
      sub_1AE7537EC((uint64_t)v67, (uint64_t)&v43);
      sub_1AE75385C();
      sub_1AE4F6778();
      *(_QWORD *)v33 = v32;
      *(_QWORD *)(v33 + 8) = v31;
      *(_BYTE *)(v33 + 16) = 0;
      sub_1AE4F6730();
      v34 = swift_willThrow();
      sub_1AE501E1C(v34, &qword_1EED946B8, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
        v52,
        v53,
        v54,
        v55,
        *((uint64_t *)&v55 + 1),
        v56,
        v57,
        v58,
        v59,
        v60,
        v61,
        v62,
        v63,
        v64,
        v65);
      sub_1AE753828((uint64_t)&v43);
      goto LABEL_6;
    }
    sub_1AE501E1C(v24, &qword_1EED946B8, v25, v26, v27, v28, v29, v30, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
      v52,
      v53,
      v54,
      v55,
      *((uint64_t *)&v55 + 1),
      v56,
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65);
    v17 = (__int128 *)&v60;
  }
  else
  {
    v10 = sub_1AE4F7958(v2, v3, v4, v5, v6, v7, v8, v9, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
            v52,
            v53,
            v54,
            v55,
            *((uint64_t *)&v55 + 1),
            v56,
            v57,
            v58,
            v59,
            v60,
            v61,
            v62,
            v63,
            v64,
            v65);
    sub_1AE501E1C(v10, &qword_1EED94360, v11, v12, v13, v14, v15, v16, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
      v52,
      v53,
      v54,
      v55,
      *((uint64_t *)&v55 + 1),
      v56,
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65);
    sub_1AE7641F4((uint64_t *)&v55);
    sub_1AE753898((uint64_t)&v41);
    v17 = &v55;
  }
  sub_1AE753A50(v17);
LABEL_6:
  sub_1AE5090C8();
}

void sub_1AE751998(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  unsigned __int8 v67;
  _BYTE v68[48];

  sub_1AE4FD358(a1);
  sub_1AE753A70();
  swift_bridgeObjectRetain();
  sub_1AE51627C();
  swift_bridgeObjectRelease();
  v2 = sub_1AE5D88E4((uint64_t)v68);
  if (v67 == 255)
  {
    sub_1AE501E1C(v2, &qword_1EED94360, v4, v5, v6, v7, v8, v9, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
      v52,
      v53,
      v54,
      v55,
      *((uint64_t *)&v55 + 1),
      v56,
      *((uint64_t *)&v56 + 1),
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64);
    v55 = 0u;
    v56 = 0u;
    v57 = 0;
  }
  else
  {
    v10 = sub_1AE4F7958(v2, v3, v4, v5, v6, v7, v8, v9, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
            v52,
            v53,
            v54,
            v55,
            *((uint64_t *)&v55 + 1),
            v56,
            *((uint64_t *)&v56 + 1),
            v57,
            v58,
            v59,
            v60,
            v61,
            v62,
            v63,
            v64);
    sub_1AE501E1C(v10, &qword_1EED94360, v11, v12, v13, v14, v15, v16, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
      v52,
      v53,
      v54,
      v55,
      *((uint64_t *)&v55 + 1),
      v56,
      *((uint64_t *)&v56 + 1),
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64);
    sub_1AE764294((uint64_t)&v55);
    sub_1AE753898((uint64_t)&v41);
    if (*((_QWORD *)&v56 + 1))
    {
      v17 = &v55;
      goto LABEL_4;
    }
  }
  sub_1AE52982C((uint64_t)&v55, &qword_1EED945D0);
  sub_1AE753AAC();
  v18 = sub_1AE751E7C(v66, &v41);
  if (v1)
    goto LABEL_8;
  v20 = v18;
  v21 = v19;
  v64 = v18;
  v65 = v19;
  sub_1AE508360();
  v41 = v22;
  v42 = v23;
  sub_1AE7537EC((uint64_t)v66, (uint64_t)&v43);
  swift_bridgeObjectRetain();
  sub_1AE751D58(&v55, v20, v21, (uint64_t)&v43, (uint64_t)&v59);
  sub_1AE753828((uint64_t)&v43);
  v24 = swift_bridgeObjectRelease();
  if (!v62)
  {
    sub_1AE753AA4(v24, &qword_1EED945D0, v25, v26, v27, v28, v29, v30, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
      v52,
      v53,
      v54,
      v55,
      *((uint64_t *)&v55 + 1),
      v56,
      *((uint64_t *)&v56 + 1),
      v57,
      v58,
      v59);
    v32 = v64;
    v31 = v65;
    v41 = v64;
    v42 = v65;
    sub_1AE7537EC((uint64_t)v66, (uint64_t)&v43);
    sub_1AE75385C();
    sub_1AE4F6778();
    *(_QWORD *)v33 = v32;
    *(_QWORD *)(v33 + 8) = v31;
    *(_BYTE *)(v33 + 16) = 1;
    sub_1AE4F6730();
    v34 = swift_willThrow();
    sub_1AE501E1C(v34, &qword_1EED946B8, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
      v52,
      v53,
      v54,
      v55,
      *((uint64_t *)&v55 + 1),
      v56,
      *((uint64_t *)&v56 + 1),
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64);
    sub_1AE753828((uint64_t)&v43);
    goto LABEL_8;
  }
  sub_1AE501E1C(v24, &qword_1EED946B8, v25, v26, v27, v28, v29, v30, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51,
    v52,
    v53,
    v54,
    v55,
    *((uint64_t *)&v55 + 1),
    v56,
    *((uint64_t *)&v56 + 1),
    v57,
    v58,
    v59,
    v60,
    v61,
    v62,
    v63,
    v64);
  v17 = (__int128 *)&v59;
LABEL_4:
  sub_1AE753A50(v17);
LABEL_8:
  sub_1AE5090C8();
}

uint64_t sub_1AE751B9C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  _BYTE v46[96];
  _OWORD v47[3];

  v10 = a1[1];
  v47[0] = *a1;
  v47[1] = v10;
  v47[2] = a1[2];
  v45[0] = a2;
  v45[1] = a3;
  sub_1AE7537EC(a4, (uint64_t)v46);
  sub_1AE508360();
  *(_QWORD *)&v22 = a2;
  *((_QWORD *)&v22 + 1) = a3;
  sub_1AE7537EC((uint64_t)v46, (uint64_t)&v23);
  sub_1AE4F6804();
  sub_1AE751D58(&v35, a2, a3, (uint64_t)&v23, (uint64_t)&v40);
  v11 = sub_1AE753828((uint64_t)&v23);
  if (!v6)
  {
    if (v41)
    {
      sub_1AE50AF58(&v40, (uint64_t)v42);
      v18 = v43;
      v19 = v44;
      sub_1AE4F9858(v42, v43);
      *(_QWORD *)(a5 + 24) = v18;
      *(_QWORD *)(a5 + 32) = *(_QWORD *)(v19 + 8);
      v20 = sub_1AE52F6A8((uint64_t *)a5);
      sub_1AE5071A0((uint64_t)v20);
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v42);
    }
    else
    {
      sub_1AE753AA4(v11, &qword_1EED945D0, v12, v13, v14, v15, v16, v17, v22, *((uint64_t *)&v22 + 1), v23, v24, v25, v26, v27, v28, v29, v30, v31,
        v32,
        v33,
        v34,
        v35,
        *((uint64_t *)&v35 + 1),
        v36,
        v37,
        v38,
        v39,
        v40);
      sub_1AE7621B8(*(_QWORD *)(v5 + 176), *(_QWORD *)(v5 + 184), (uint64_t)&v22);
      if (v24)
      {
        sub_1AE50AF58(&v22, (uint64_t)&v35);
        sub_1AE57C238((uint64_t)&v35, (uint64_t)&v22);
        LOBYTE(v26) = 0;
        sub_1AE506A08();
        sub_1AE753A70();
        sub_1AE7420A8((uint64_t)&v22, (uint64_t)v47);
        swift_endAccess();
        sub_1AE753A50(&v35);
      }
      else
      {
        sub_1AE52982C((uint64_t)&v22, &qword_1EEDA2298);
        *(_QWORD *)(a5 + 32) = 0;
        *(_OWORD *)a5 = 0u;
        *(_OWORD *)(a5 + 16) = 0u;
      }
    }
  }
  return sub_1AE52982C((uint64_t)v45, &qword_1EED946B8);
}

uint64_t sub_1AE751D58@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  char v15;
  _QWORD v16[2];
  uint64_t v17;
  _OWORD v18[3];

  v7 = v6;
  v9 = a1[1];
  v18[0] = *a1;
  v18[1] = v9;
  v18[2] = a1[2];
  v16[0] = a2;
  v16[1] = a3;
  sub_1AE7537EC(a4, (uint64_t)&v17);
  v10 = *(_QWORD *)(v5 + 176);
  v11 = *(_QWORD *)(v5 + 184);
  sub_1AE4F6708();
  sub_1AE762270(v10, v11, (uint64_t)&v13);
  if (!v7)
  {
    if (v14)
    {
      sub_1AE753A50(&v13);
      sub_1AE57C238(a5, (uint64_t)&v13);
      v15 = 1;
      sub_1AE506A08();
      sub_1AE753A70();
      sub_1AE7420A8((uint64_t)&v13, (uint64_t)v18);
      swift_endAccess();
    }
    else
    {
      sub_1AE52982C((uint64_t)&v13, &qword_1EED945D0);
      *(_QWORD *)(a5 + 32) = 0;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
    }
  }
  return sub_1AE52982C((uint64_t)v16, &qword_1EED946B8);
}

uint64_t sub_1AE751E7C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[6];
  uint64_t v18;

  v4 = v2;
  v7 = *a2;
  v6 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v11 = a2[4];
  v10 = a2[5];
  sub_1AE4F9858(v4 + 16, v4[19]);
  v17[0] = v7;
  v17[1] = v6;
  v17[2] = v8;
  v17[3] = v9;
  v17[4] = v11;
  v17[5] = v10;
  v18 = v10;
  result = sub_1AE754E5C((uint64_t)v17);
  if (!v3)
  {
    v16 = result;
    sub_1AE501548(&qword_1EED947F0);
    v13 = sub_1AE4F66BC();
    *(_OWORD *)(v13 + 16) = xmmword_1AE934250;
    v14 = *(_QWORD *)(v4[10] + 8);
    *(_QWORD *)(v13 + 32) = v4[9];
    *(_QWORD *)(v13 + 40) = v14;
    *a1 = v7;
    a1[1] = v6;
    a1[2] = v8;
    a1[3] = v9;
    v15 = v18;
    a1[4] = v11;
    a1[5] = v15;
    sub_1AE57C238((uint64_t)(v4 + 16), (uint64_t)(a1 + 6));
    a1[11] = v13;
    sub_1AE4F6804();
    sub_1AE4F6730();
    swift_bridgeObjectRetain();
    sub_1AE753AD4();
    return v16;
  }
  return result;
}

__n128 sub_1AE751F8C(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = a1[1];
  v8 = *a1;
  v3 = *((_QWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 5);
  v5 = *a2;
  sub_1AE4F9858((_QWORD *)(v2 + 128), *(_QWORD *)(v2 + 152));
  v9[0] = v8;
  v9[1] = v7;
  v10 = v3;
  v11 = v4;
  v12 = v5;
  sub_1AE754CF4((uint64_t)v9, &v12);
  return result;
}

uint64_t sub_1AE752008(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[4] = a1;
  v3[5] = a2;
  v4 = a3[1];
  v3[6] = *a3;
  v3[7] = v4;
  if (qword_1ED30EF48 != -1)
    swift_once();
  v3[8] = qword_1EED93F38;
  return sub_1AE4F90B4();
}

uint64_t sub_1AE752070()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v22)(uint64_t, _QWORD *, uint64_t, uint64_t);

  v2 = (_QWORD *)v0[4];
  v1 = (_QWORD *)v0[5];
  v3 = v1[3];
  v4 = v1[4];
  sub_1AE4F9858(v1, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = v2[3];
  v13 = v2[4];
  sub_1AE4F9858(v2, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 40))(v5, v7, v9, v11, v12, v13);
  v15 = v0[6];
  v14 = v0[7];
  sub_1AE4F76D8();
  v17 = v2[3];
  v16 = v2[4];
  v18 = (_QWORD *)sub_1AE753ADC();
  sub_1AE4F9858(v18, v19);
  v0[2] = v15;
  v0[3] = v14;
  v20 = (_QWORD *)sub_1AE4FC56C();
  v0[9] = v20;
  sub_1AE506298(v20, (uint64_t)sub_1AE752184);
  return v22(1, v0 + 2, v17, v16);
}

uint64_t sub_1AE752184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_1AE505574();
  sub_1AE5062E4(v3);
  *(_QWORD *)(v0 + 80) = v1;
  swift_task_dealloc();
  if (v1)
    return sub_1AE4FD190();
  else
    return sub_1AE4FC8E4(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1AE7521D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1AE7521E4(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  *(_QWORD *)(v9 + 128) = a8;
  *(_QWORD *)(v9 + 136) = v8;
  *(_QWORD *)(v9 + 112) = a6;
  *(_QWORD *)(v9 + 120) = a7;
  *(_QWORD *)(v9 + 96) = a4;
  *(_QWORD *)(v9 + 104) = a5;
  *(_QWORD *)(v9 + 80) = a1;
  *(_QWORD *)(v9 + 88) = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for InferenceMessageResponse(0, AssociatedTypeWitness, v12, v13);
  *(_QWORD *)(v9 + 144) = v14;
  *(_QWORD *)(v9 + 152) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v9 + 160) = sub_1AE4FC554();
  v15 = sub_1AE924918();
  *(_QWORD *)(v9 + 168) = v15;
  *(_QWORD *)(v9 + 176) = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v9 + 184) = sub_1AE4FC554();
  v16 = a2[1];
  *(_OWORD *)(v9 + 16) = *a2;
  *(_OWORD *)(v9 + 32) = v16;
  *(_OWORD *)(v9 + 48) = a2[2];
  if (qword_1ED30EF48 != -1)
    swift_once();
  *(_QWORD *)(v9 + 192) = qword_1EED93F38;
  return sub_1AE4FD190();
}

uint64_t sub_1AE7522C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1AE753A78();
  v18 = v1;
  v19 = v2;
  v17 = v0;
  v3 = *(_QWORD *)(v0 + 136);
  sub_1AE92490C();
  v4 = *(char **)(v3 + 168);
  *(_QWORD *)(v0 + 200) = v4;
  v15 = v4;
  v5 = *((_QWORD *)v4 + 2);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v0 + 184);
      v9 = *(_QWORD *)(v0 + 120);
      v8 = *(_QWORD *)(v0 + 128);
      v11 = *(_QWORD *)(v0 + 88);
      v10 = *(_QWORD *)(v0 + 96);
      v12 = &v15[16 * v6++];
      v16 = *((_OWORD *)v12 + 2);
      sub_1AE753AD4();
      sub_1AE752560((uint64_t)&v16, v7, (_OWORD *)(v0 + 16), v11, v10, v9, v8);
      swift_unknownObjectRelease();
    }
    while (v5 != v6);
    swift_bridgeObjectRelease();
  }
  v13 = (_QWORD *)sub_1AE4FC56C();
  *(_QWORD *)(v0 + 208) = v13;
  *v13 = v0;
  v13[1] = sub_1AE7523C4;
  return ((uint64_t (*)(_QWORD, uint64_t))v15)(*(_QWORD *)(v0 + 160), v0 + 64);
}

uint64_t sub_1AE7523C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1AE505574();
  sub_1AE5062E4(v2);
  *(_QWORD *)(v0 + 216) = v1;
  swift_task_dealloc();
  return sub_1AE4FD190();
}

uint64_t sub_1AE752414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(unsigned __int8 *)(v0 + 72);
  v4 = *(unsigned __int8 *)(v0 + 73);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 32))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
  v5 = *(_QWORD *)(v1 + 16);
  if (v5)
  {
    v6 = (__int128 *)(*(_QWORD *)(v0 + 200) + 32);
    swift_bridgeObjectRetain();
    v14 = v3 | (v4 << 8);
    v15 = v2;
    do
    {
      v16 = *(_QWORD *)(v0 + 184);
      v8 = *(_QWORD *)(v0 + 120);
      v7 = *(_QWORD *)(v0 + 128);
      v10 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 96);
      v11 = *(_QWORD *)(v0 + 80);
      v12 = *v6++;
      v17 = v12;
      sub_1AE753AD4();
      sub_1AE752608((uint64_t)&v17, v16, (_OWORD *)(v0 + 16), v10, v9, v11, v15, v14, v8, v7);
      swift_unknownObjectRelease();
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  sub_1AE5099D4(*(_QWORD *)(v0 + 176));
  sub_1AE4F90C0();
  sub_1AE4F90A0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1AE752524()
{
  uint64_t v0;

  sub_1AE5099D4(*(_QWORD *)(v0 + 176));
  sub_1AE4F90C0();
  sub_1AE4F90A0();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE752560(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t ObjectType;
  __int128 v15;
  _OWORD v17[3];

  v13 = *(_QWORD *)(a1 + 8);
  ObjectType = swift_getObjectType();
  v15 = a3[1];
  v17[0] = *a3;
  v17[1] = v15;
  v17[2] = a3[2];
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))(a2, v17, a4, a5, a6, a7, ObjectType, v13);
}

uint64_t sub_1AE752608(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t ObjectType;
  __int128 v17;
  uint64_t v21;
  __int16 v22;
  _OWORD v23[3];

  v15 = *(_QWORD *)(a1 + 8);
  ObjectType = swift_getObjectType();
  v17 = a3[1];
  v23[0] = *a3;
  v23[1] = v17;
  v23[2] = a3[2];
  v21 = a7;
  v22 = a8 & 0x1FF;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 24))(a2, v23, a4, a5, a6, &v21, a9, a10, ObjectType, v15);
}

uint64_t sub_1AE7526C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v12;

  *(_QWORD *)(v8 + 80) = a8;
  *(_QWORD *)(v8 + 88) = v12;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 72) = a7;
  *(_QWORD *)(v8 + 48) = a4;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 40) = a3;
  v10 = sub_1AE924918();
  *(_QWORD *)(v8 + 96) = v10;
  *(_QWORD *)(v8 + 104) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 112) = swift_task_alloc();
  *(_OWORD *)(v8 + 120) = *(_OWORD *)a1;
  *(_QWORD *)(v8 + 136) = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(v8 + 144) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v8 + 160) = *(_QWORD *)(a1 + 40);
  if (qword_1ED30EF48 != -1)
    swift_once();
  *(_QWORD *)(v8 + 168) = qword_1EED93F38;
  return swift_task_switch();
}

uint64_t sub_1AE752788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  void (*v11)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 48);
  sub_1AE92490C();
  v2 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v0 + 176) = v2;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      v6 = *(_QWORD *)(v0 + 152);
      v5 = *(_QWORD *)(v0 + 160);
      v14 = *(_OWORD *)(v0 + 120);
      v15 = *(_OWORD *)(v0 + 136);
      v7 = *(_QWORD *)(v0 + 112);
      v8 = *(_QWORD *)(v0 + 32);
      v16 = *(_QWORD *)(v0 + 40);
      v9 = *v4;
      ObjectType = swift_getObjectType();
      v17[0] = v14;
      v17[1] = v15;
      v18 = v6;
      v19 = v5;
      v11 = *(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16);
      swift_unknownObjectRetain();
      v11(v7, v17, v8, v16, ObjectType, v9);
      swift_unknownObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v12;
  *v12 = v0;
  v12[1] = sub_1AE7528B4;
  return sub_1AE753018(v0 + 16, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
}

uint64_t sub_1AE7528B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1AE505574();
  v0[24] = v2;
  v0[25] = v3;
  v0[26] = v1;
  swift_task_dealloc();
  return sub_1AE4FD190();
}

uint64_t sub_1AE752914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void (*v10)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t);
  int v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;

  if ((*(_BYTE *)(v1 + 26) & 1) == 0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 176) + 16);
    if (v2)
    {
      v14 = *(_QWORD *)(v1 + 16);
      v3 = *(unsigned __int16 *)(v1 + 24);
      v13 = *(_WORD *)(v1 + 24);
      v4 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
      v12 = (v3 >> 8) & 1;
      do
      {
        v18 = *(_QWORD *)(v1 + 192);
        v19 = *(_QWORD *)(v1 + 200);
        v5 = *(_QWORD *)(v1 + 152);
        v6 = *(_QWORD *)(v1 + 160);
        v15 = *(_OWORD *)(v1 + 120);
        v16 = *(_OWORD *)(v1 + 136);
        v17 = *(_QWORD *)(v1 + 112);
        v8 = *(_QWORD *)(v1 + 32);
        v7 = *(_QWORD *)(v1 + 40);
        v0 = *v4;
        ObjectType = swift_getObjectType();
        v20[0] = v15;
        v20[1] = v16;
        v21 = v5;
        v22 = v6;
        v23 = v14;
        v24 = v13;
        v25 = v12;
        v10 = *(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v0 + 32);
        swift_unknownObjectRetain();
        v10(v17, v20, v8, v7, v18, v19, &v23, ObjectType, v0);
        swift_unknownObjectRelease();
        v4 += 2;
        --v2;
      }
      while (v2);
      swift_bridgeObjectRelease();
    }
  }
  sub_1AE753A24();
  swift_release();
  sub_1AE4F954C();
  sub_1AE5D88E4(v0);
  sub_1AE4F6648();
  sub_1AE4F90C0();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 200));
}

uint64_t sub_1AE752A70()
{
  uint64_t v0;
  uint64_t v1;

  sub_1AE753A24();
  swift_release();
  sub_1AE4F954C();
  sub_1AE5D88E4(v0);
  sub_1AE4F6648();
  sub_1AE4F90C0();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t InferenceServer.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 32);
  swift_unknownObjectRelease();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 88);
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 128);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t InferenceServer.__deallocating_deinit()
{
  InferenceServer.deinit();
  return swift_deallocClassInstance();
}

uint64_t InferenceServer.runRequest(instanceQualifiedId:requestData:clientEntitlementInfo:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  sub_1AE50706C();
  v1[26] = v0;
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v10 = *v9;
  if (qword_1ED30EF48 != -1)
    swift_once();
  v1[27] = qword_1EED93F38;
  v1[2] = v3;
  v1[3] = v4;
  v1[4] = v5;
  v1[5] = v6;
  v1[6] = v7;
  v1[7] = v8;
  v1[23] = v10;
  v11 = (_QWORD *)swift_task_alloc();
  v1[28] = v11;
  sub_1AE506298(v11, (uint64_t)sub_1AE752BF8);
  sub_1AE4FBB68();
  return sub_1AE752E48(v12, v13, v14, v15);
}

uint64_t sub_1AE752BF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  sub_1AE753A58();
  sub_1AE5062E4(v2);
  *(_QWORD *)(v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
    return sub_1AE4FDD5C();
  v4 = sub_1AE753A94();
  return v5(v4);
}

uint64_t sub_1AE752C60()
{
  uint64_t v0;
  void *v1;
  id v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  void *v13;
  id v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  unsigned __int8 v25;

  v1 = *(void **)(v0 + 232);
  *(_QWORD *)(v0 + 200) = v1;
  v2 = v1;
  sub_1AE501548((uint64_t *)&unk_1ED319C60);
  sub_1AE501548(&qword_1EED9ED28);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v3 = (__int128 *)sub_1AE753ADC();
    sub_1AE50AF58(v3, v4);
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 136);
    sub_1AE4F9858((_QWORD *)(v0 + 104), v5);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 32))(v24, v5, v6);
    v7 = v24[0];
    v8 = v24[1];
    v9 = v24[2];
    v10 = v24[3];
    v11 = v25 | 0x100;
    v12 = _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 104);
  }
  else
  {
    v13 = *(void **)(v0 + 232);
    *(_OWORD *)(v0 + 64) = 0u;
    *(_OWORD *)(v0 + 80) = 0u;
    *(_QWORD *)(v0 + 96) = 0;
    sub_1AE52982C(v0 + 64, &qword_1EED9ED30);
    *(_QWORD *)(v0 + 192) = v13;
    v14 = v13;
    sub_1AE753ADC();
    v12 = sub_1AE925EA8();
    v7 = v12;
    v8 = v15;
    v9 = 0;
    v10 = 0;
    v11 = 512;
  }
  v16 = (void *)MEMORY[0x1AF454348](v12);
  sub_1AE750610();
  v22 = v8;
  v23 = v7;
  *(_QWORD *)(v0 + 144) = v7;
  *(_QWORD *)(v0 + 152) = v8;
  *(_QWORD *)(v0 + 160) = v9;
  *(_QWORD *)(v0 + 168) = v10;
  *(_WORD *)(v0 + 176) = v11;
  *(_BYTE *)(v0 + 178) = 1;
  sub_1AE501548(&qword_1EEDA2258);
  sub_1AE7534FC();
  v17 = sub_1AE9243F0();
  v19 = v18;
  v20 = *(void **)(v0 + 232);
  swift_release();
  objc_autoreleasePoolPop(v16);
  sub_1AE753540(v23, v22, v9, v10, v11, 1);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_1AE752E48(_OWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(v5 + 128) = a3;
  *(_QWORD *)(v5 + 136) = v4;
  *(_QWORD *)(v5 + 112) = a1;
  *(_QWORD *)(v5 + 120) = a2;
  v6 = a1[1];
  *(_OWORD *)(v5 + 16) = *a1;
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = a1[2];
  *(_QWORD *)(v5 + 144) = *a4;
  if (qword_1ED30EF48 != -1)
    swift_once();
  *(_QWORD *)(v5 + 152) = qword_1EED93F38;
  return swift_task_switch();
}

uint64_t sub_1AE752ECC()
{
  _QWORD *v0;
  __int128 *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[10];

  v1 = (__int128 *)v0[14];
  v9[0] = v0[18];
  sub_1AE751F8C(v1, v9);
  v3 = v0[15];
  v2 = v0[16];
  sub_1AE753AC0();
  swift_retain();
  sub_1AE54C814(v3, v2);
  sub_1AE73DE14((uint64_t)(v0 + 2));
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[20] = v4;
  *v4 = v0;
  v4[1] = sub_1AE752FB0;
  v5 = v0[17];
  v6 = v0[15];
  v7 = v0[16];
  v9[8] = v0[18];
  return sub_1AE7526C4((uint64_t)(v0 + 8), v6, v7, v5, v5, v6, v7, (uint64_t)(v0 + 2));
}

uint64_t sub_1AE752FB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_1AE753A58();
  sub_1AE5062E4(v2);
  *(_QWORD *)(v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
    return sub_1AE4FDD5C();
  v4 = sub_1AE753A94();
  return sub_1AE50A030(v4, v5, v6);
}

uint64_t sub_1AE75300C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1AE753018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[33] = a5;
  v6[34] = a6;
  v6[31] = a3;
  v6[32] = a4;
  v6[29] = a1;
  v6[30] = a2;
  if (qword_1ED30EF48 != -1)
    swift_once();
  v6[35] = qword_1EED93F38;
  return swift_task_switch();
}

uint64_t sub_1AE753088()
{
  return swift_task_switch();
}

uint64_t sub_1AE75309C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  sub_1AE50706C();
  sub_1AE751998(*(_OWORD **)(v0 + 264));
  v1 = *(_QWORD *)(v0 + 240);
  v2 = (void *)MEMORY[0x1AF454348]();
  *(_QWORD *)(v0 + 288) = *(_QWORD *)(v1 + 200);
  sub_1AE7539B0();
  sub_1AE9243A8();
  v16 = *(_QWORD *)(v0 + 240);
  v17 = *(_QWORD *)(v0 + 272);
  objc_autoreleasePoolPop(v2);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 296) = v4;
  *(_QWORD *)(v0 + 304) = v3;
  v5 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 312) = v5;
  LOBYTE(v1) = *(_BYTE *)(v0 + 160);
  *(_BYTE *)(v0 + 161) = v1;
  v7 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v8 = sub_1AE4F9858((_QWORD *)(v0 + 16), v7);
  *(_QWORD *)(v0 + 120) = v7;
  *(_QWORD *)(v0 + 128) = *(_QWORD *)(v6 + 8);
  v9 = sub_1AE52F6A8((uint64_t *)(v0 + 96));
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v9, v8, v7);
  *(_QWORD *)(v0 + 80) = &type metadata for InferenceFullRequestBase;
  *(_QWORD *)(v0 + 88) = &off_1E5DBE4C8;
  v10 = swift_allocObject();
  *(_QWORD *)(v0 + 56) = v10;
  *(_QWORD *)(v10 + 16) = v4;
  *(_QWORD *)(v10 + 24) = v3;
  *(_QWORD *)(v10 + 32) = v5;
  *(_BYTE *)(v10 + 40) = v1;
  *(_QWORD *)(v0 + 200) = v16;
  *(_QWORD *)(v0 + 208) = v17;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1AE4F6708();
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 320) = v11;
  sub_1AE506298(v11, (uint64_t)sub_1AE75323C);
  sub_1AE4FBB68();
  return sub_1AE752008(v12, v13, v14);
}

uint64_t sub_1AE75323C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1AE50A54C();
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 56);
    sub_1AE64AA5C();
  }
  return sub_1AE4FD190();
}

void sub_1AE7532A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[34];
  v2 = v0[30];
  sub_1AE4F9858(v0 + 2, v0[5]);
  v0[27] = v2;
  v0[28] = v1;
  v0[42] = sub_1AE750610();
  v3 = (_QWORD *)sub_1AE4FC56C();
  v0[43] = v3;
  *v3 = v0;
  v3[1] = sub_1AE753364;
  __asm { BR              X8 }
}

uint64_t sub_1AE753364()
{
  uint64_t v0;

  sub_1AE4F6C18();
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return sub_1AE4FD190();
}

uint64_t sub_1AE7533D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  BOOL v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v1 = *(_QWORD *)(v0 + 232);
  swift_release();
  sub_1AE4F6648();
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_BYTE *)(v0 + 192);
  v4 = v3 < 0;
  v5 = v3 & 1;
  if (v4)
  {
    v2 = 0;
    v5 = 0;
  }
  *(_QWORD *)v1 = v2;
  *(_WORD *)(v1 + 8) = v5;
  *(_BYTE *)(v1 + 10) = v4;
  sub_1AE64AA5C();
  v6 = sub_1AE753A94();
  return sub_1AE50A030(v6, v7, v8);
}

uint64_t sub_1AE753444()
{
  uint64_t v0;

  swift_release();
  sub_1AE4F76D8();
  sub_1AE4F90EC();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 96);
  sub_1AE64AA5C();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE7534A0()
{
  uint64_t v0;

  swift_release();
  sub_1AE4F6648();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 16);
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1AE7534E4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_1AE75058C(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_1AE7534FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEDA2260;
  if (!qword_1EEDA2260)
  {
    v1 = sub_1AE523CF0(&qword_1EEDA2258);
    result = MEMORY[0x1AF454B70](&unk_1AE954B40, v1);
    atomic_store(result, (unint64_t *)&qword_1EEDA2260);
  }
  return result;
}

uint64_t sub_1AE753540(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, char a6)
{
  if ((a6 & 1) != 0)
    return sub_1AE753550(a1, a2, a3, a4, a5, SHIBYTE(a5));
  else
    return sub_1AE50BDB4(a1, a2);
}

uint64_t sub_1AE753550(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  if (a6 == 2)
    return swift_bridgeObjectRelease();
  if (a6 == 1)
    return sub_1AE745C58(result, a2, a3, a4, a5);
  return result;
}

unint64_t sub_1AE753578()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEDA2268;
  if (!qword_1EEDA2268)
  {
    v1 = type metadata accessor for InferenceActor.MyActor();
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceActor.MyActor, v1);
    atomic_store(result, &qword_1EEDA2268);
  }
  return result;
}

uint64_t type metadata accessor for InferenceActor.MyActor()
{
  return objc_opt_self();
}

void type metadata accessor for InferenceActor()
{
  sub_1AE4F67D4();
}

uint64_t method lookup function for InferenceActor.MyActor()
{
  return swift_lookUpClassMethod();
}

void type metadata accessor for InferenceServerParameters()
{
  sub_1AE4F67D4();
}

uint64_t _s20IntelligencePlatform25InferenceServerParametersV17SupportServerModeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;

  if (!a2)
  {
    v5 = -1;
    return v5 + 1;
  }
  if (a2 >= 0x7F)
  {
    if (a2 + 129 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 129) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 130;
    return v5 + 1;
  }
LABEL_17:
  v5 = (*a1 & 0x7E | (*a1 >> 7)) ^ 0x7F;
  if (v5 >= 0x7E)
    v5 = -1;
  return v5 + 1;
}

uint64_t _s20IntelligencePlatform25InferenceServerParametersV17SupportServerModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 129 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 129) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x7F)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x7E)
    return ((uint64_t (*)(void))((char *)&loc_1AE7536E0 + 4 * byte_1AE956235[v4]))();
  *a1 = a2 - 127;
  return ((uint64_t (*)(void))((char *)sub_1AE753714 + 4 * byte_1AE956230[v4]))();
}

uint64_t sub_1AE753714(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE75371C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE753724);
  return result;
}

uint64_t sub_1AE75373C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE753744);
  *(_BYTE *)result = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
  return result;
}

uint64_t sub_1AE753748(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE753750(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE75375C(unsigned __int8 *a1)
{
  return *a1 >> 7;
}

_BYTE *sub_1AE753768(_BYTE *result)
{
  *result &= ~0x80u;
  return result;
}

_BYTE *sub_1AE753778(_BYTE *result, char a2)
{
  *result = *result & 1 | (a2 << 7);
  return result;
}

void type metadata accessor for InferenceServerParameters.SupportServerMode()
{
  sub_1AE4F67D4();
}

void type metadata accessor for InferenceServerParameters.SupportServerMode.LocalOptions()
{
  sub_1AE4F67D4();
}

void type metadata accessor for InferenceServerParameters.SupportServerMode.RemoteOptions()
{
  sub_1AE4F67D4();
}

uint64_t type metadata accessor for InferenceServer()
{
  return objc_opt_self();
}

uint64_t method lookup function for InferenceServer()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for InferenceServer._DummyError()
{
  return &type metadata for InferenceServer._DummyError;
}

uint64_t sub_1AE7537EC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for InferenceServiceInstanceBuilderParameters(a2, a1);
  return a2;
}

uint64_t sub_1AE753828(uint64_t a1)
{
  destroy for InferenceServiceInstanceBuilderParameters(a1);
  return a1;
}

unint64_t sub_1AE75385C()
{
  unint64_t result;

  result = qword_1EEDA22A0;
  if (!qword_1EEDA22A0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9586D8, &type metadata for InferenceServiceInstanceBuilderError);
    atomic_store(result, &qword_1EEDA22A0);
  }
  return result;
}

uint64_t sub_1AE753898(uint64_t a1)
{
  destroy for InferenceServiceInstanceEnum();
  return a1;
}

uint64_t sub_1AE7538CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[4];
  v8 = v2[5];
  v9 = v2[6];
  v10 = v2[7];
  v11 = v2[8];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_1AE753970;
  return sub_1AE751088(a1, a2, v7, v8, v9, v10, v11, v6);
}

uint64_t sub_1AE753970()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return sub_1AE4F90A8(*(uint64_t (**)(void))(v2 + 8));
}

unint64_t sub_1AE7539B0()
{
  unint64_t result;

  result = qword_1EEDA22C8;
  if (!qword_1EEDA22C8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE955174, &type metadata for InferenceFullRequestBase);
    atomic_store(result, &qword_1EEDA22C8);
  }
  return result;
}

uint64_t sub_1AE7539EC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AE753A14()
{
  return swift_task_dealloc();
}

uint64_t sub_1AE753A24()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[14], v0[12]);
}

uint64_t sub_1AE753A40()
{
  return swift_task_dealloc();
}

uint64_t sub_1AE753A50(__int128 *a1)
{
  uint64_t v1;

  return sub_1AE50AF58(a1, v1);
}

void sub_1AE753A58()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_1AE753A70()
{
  uint64_t v0;

  return sub_1AE73DE14(v0 - 112);
}

uint64_t sub_1AE753A94()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE753AA4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  return sub_1AE52982C((uint64_t)&a29, a2);
}

__n128 sub_1AE753AAC()
{
  uint64_t v0;

  return *(__n128 *)(v0 - 80);
}

__n128 sub_1AE753AC0()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)v0;
  *(_OWORD *)(v1 + 80) = v2;
  result = *(__n128 *)(v0 + 32);
  *(__n128 *)(v1 + 96) = result;
  return result;
}

uint64_t sub_1AE753AD4()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1AE753ADC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE753AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a1;
  if (qword_1ED30EF48 != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t sub_1AE753B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for InferenceMessageResponse(0, AssociatedTypeWitness, v3, v4);
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v1, 1, 1, v5);
  return sub_1AE4F90A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t type metadata accessor for InferenceServerCacheManagerNoOp()
{
  return objc_opt_self();
}

void sub_1AE753BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[5];
  _QWORD v23[5];

  v3 = type metadata accessor for InferenceServerConfigLoader();
  sub_1AE57C238(a1, (uint64_t)v23);
  sub_1AE753D80(v23);
  v5 = v4;
  v6 = type metadata accessor for InferenceServerConfigManagerCacheNoOp();
  v7 = sub_1AE4F66BC();
  v23[3] = v3;
  v23[4] = &off_1E5DC06F0;
  v22[4] = &off_1E5DC61E0;
  v23[0] = v5;
  v22[3] = v6;
  v22[0] = v7;
  v8 = (_QWORD *)sub_1AE4F66BC();
  v9 = sub_1AE595318((uint64_t)v23, v3);
  MEMORY[0x1E0C80A78](v9);
  sub_1AE4F666C();
  v12 = (uint64_t *)(v11 - v10);
  (*(void (**)(uint64_t))(v13 + 16))(v11 - v10);
  v14 = sub_1AE595318((uint64_t)v22, v6);
  MEMORY[0x1E0C80A78](v14);
  sub_1AE4F666C();
  v17 = (uint64_t *)(v16 - v15);
  (*(void (**)(uint64_t))(v18 + 16))(v16 - v15);
  v19 = *v12;
  v20 = *v17;
  v8[5] = v3;
  v8[6] = &off_1E5DC06F0;
  v8[2] = v19;
  v8[10] = v6;
  v8[11] = &off_1E5DC61E0;
  v8[7] = v20;
  v8[12] = a2;
  swift_retain();
  swift_retain();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v22);
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v23);
  swift_release();
  swift_release();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(a1);
  sub_1AE4F8180();
}

uint64_t sub_1AE753D64@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 2;
  return sub_1AE74598C(v2, v3);
}

void sub_1AE753D80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[2];
  char v18;
  uint64_t v19[4];
  uint64_t v20;

  v2 = type metadata accessor for AssetRegistry();
  v4 = a1[3];
  v3 = a1[4];
  v5 = sub_1AE4F9858(a1, v4);
  v19[3] = v4;
  v20 = *(_QWORD *)(v3 + 8);
  v6 = v20;
  v7 = sub_1AE52F6A8(v19);
  v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
  v8(v7, v5, v4);
  type metadata accessor for TrialAssetManager.RefreshPolicy.AutoRefreshForAllRequestedNamespacesInfo();
  sub_1AE4F66BC();
  sub_1AE899514();
  v10 = v9;
  v17[0] = v9;
  type metadata accessor for AssetRegistry.TrialAssetManagerPolicy.PersistentInfo.PersistentContent();
  sub_1AE4F66BC();
  v11 = sub_1AE532C30(v17, (uint64_t)sub_1AE532D14, 0);
  sub_1AE501548((uint64_t *)&unk_1ED319F08);
  sub_1AE4F66BC();
  swift_retain();
  v12 = sub_1AE50B7A4(v11);
  v17[0] = v10;
  v17[1] = v12;
  v18 = 1;
  MEMORY[0x1E0C80A78](v12);
  sub_1AE4F666C();
  v15 = v14 - v13;
  v8((uint64_t *)(v14 - v13), v7, v4);
  v16 = sub_1AE53F3A8(v15, v17, v2, v4, v6);
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v19);
  *(_QWORD *)(sub_1AE4F66BC() + 16) = v16;
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)a1);
  sub_1AE4F8180();
}

uint64_t sub_1AE753EF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  sub_1AE4F67EC();
  v40 = v3;
  v41 = v4;
  v39 = (char *)v1;
  v6 = v5;
  v7 = sub_1AE924390();
  v8 = *(_QWORD *)(v7 - 8);
  v33[3] = v7;
  v33[4] = v8;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v9);
  sub_1AE4F9024();
  v33[2] = v10;
  v38 = sub_1AE924780();
  v35 = *(_QWORD *)(v38 - 8);
  sub_1AE4F6630();
  v12 = MEMORY[0x1E0C80A78](v11);
  v34 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v37 = (char *)v33 - v14;
  v36 = type metadata accessor for AssetRegistryAsset(0);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v15);
  sub_1AE4FB7E8();
  sub_1AE501548(&qword_1EED93EF8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v16);
  sub_1AE4F6744();
  v17 = type metadata accessor for AssetRegistryAssetLocalAvailabilityInfo(0);
  sub_1AE4F6630();
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)v33 - v22;
  v24 = *v6;
  v25 = v6[1];
  v26 = (uint64_t)v39;
  AssetRegistry.locallyAvailableAsset(for:in:)();
  if (!v26)
  {
    v33[0] = v25;
    v33[1] = v24;
    v27 = v36;
    v28 = (uint64_t)v37;
    v39 = v23;
    if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v2, 1, v17) == 1)
    {
      sub_1AE7558AC(v2);
    }
    else
    {
      v29 = (uint64_t)v39;
      sub_1AE75596C(v2, (uint64_t)v39, type metadata accessor for AssetRegistryAssetLocalAvailabilityInfo);
      sub_1AE755928(v29, (uint64_t)v21);
      if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v21, 1, v27) != 1)
      {
        v31 = v0;
        sub_1AE75596C((uint64_t)v21, v0, type metadata accessor for AssetRegistryAsset);
        v32 = (uint64_t)v34;
        sub_1AE92472C();
        sub_1AE924738();
        sub_1AE50A040(v32);
        v0 = sub_1AE9247B0();
        sub_1AE50A040(v28);
        sub_1AE7559B0(v31, type metadata accessor for AssetRegistryAsset);
        sub_1AE7559B0((uint64_t)v39, type metadata accessor for AssetRegistryAssetLocalAvailabilityInfo);
        return v0;
      }
      v0 = (uint64_t)type metadata accessor for AssetRegistryAssetLocalAvailabilityInfo;
      sub_1AE7559B0(v29, type metadata accessor for AssetRegistryAssetLocalAvailabilityInfo);
      sub_1AE7559B0((uint64_t)v21, type metadata accessor for AssetRegistryAssetLocalAvailabilityInfo);
    }
    sub_1AE7558EC();
    sub_1AE4F6778();
    sub_1AE4F6928();
  }
  return v0;
}

BOOL static InferenceServiceLoadInstanceError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t InferenceServiceLoadInstanceError.hash(into:)()
{
  return sub_1AE926ED4();
}

uint64_t sub_1AE7542AC(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x80000001AE983F50 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001AE983F70)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1AE754394()
{
  return 0xD000000000000012;
}

unint64_t sub_1AE7543C8()
{
  return sub_1AE754394();
}

uint64_t sub_1AE7543D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE7542AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE7543F4()
{
  sub_1AE754650();
  return sub_1AE926F94();
}

uint64_t sub_1AE75441C()
{
  sub_1AE754650();
  return sub_1AE926FA0();
}

uint64_t sub_1AE754444()
{
  sub_1AE75468C();
  return sub_1AE926F94();
}

uint64_t sub_1AE75446C()
{
  sub_1AE75468C();
  return sub_1AE926FA0();
}

uint64_t sub_1AE754494()
{
  sub_1AE7546C8();
  return sub_1AE926F94();
}

uint64_t sub_1AE7544BC()
{
  sub_1AE7546C8();
  return sub_1AE926FA0();
}

void InferenceServiceLoadInstanceError.encode(to:)()
{
  char *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1AE4F67EC();
  v3 = v2;
  v4 = sub_1AE501548(&qword_1EEDA22D8);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4F666C();
  v8 = v7 - v6;
  v9 = sub_1AE501548(&qword_1EEDA22E0);
  v17 = *(_QWORD *)(v9 - 8);
  v18 = v9;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v10);
  sub_1AE4F666C();
  v13 = v12 - v11;
  v14 = sub_1AE501548(&qword_1EEDA22E8);
  v21 = *(_QWORD *)(v14 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v15);
  sub_1AE4F6744();
  v16 = *v0;
  sub_1AE4F9858(v3, v3[3]);
  sub_1AE754650();
  sub_1AE926F4C();
  if ((v16 & 1) != 0)
  {
    sub_1AE5095D4();
    sub_1AE4F6974();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v8, v20);
  }
  else
  {
    sub_1AE7546C8();
    sub_1AE4F6974();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v13, v18);
  }
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v1, v14);
  sub_1AE4F667C();
}

unint64_t sub_1AE754650()
{
  unint64_t result;

  result = qword_1EEDA22F0;
  if (!qword_1EEDA22F0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9569E8, &type metadata for InferenceServiceLoadInstanceError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA22F0);
  }
  return result;
}

unint64_t sub_1AE75468C()
{
  unint64_t result;

  result = qword_1EEDA22F8;
  if (!qword_1EEDA22F8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956998, &type metadata for InferenceServiceLoadInstanceError.InstanceIdNotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA22F8);
  }
  return result;
}

unint64_t sub_1AE7546C8()
{
  unint64_t result;

  result = qword_1EEDA2300;
  if (!qword_1EEDA2300)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956948, &type metadata for InferenceServiceLoadInstanceError.MissingEntitlementCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2300);
  }
  return result;
}

void InferenceServiceLoadInstanceError.hashValue.getter()
{
  sub_1AE4F76E0();
  sub_1AE4F6694();
  sub_1AE4F905C();
  sub_1AE4F6650();
}

void InferenceServiceLoadInstanceError.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;

  sub_1AE4F67EC();
  v3 = v2;
  v31 = v4;
  v29 = sub_1AE501548(&qword_1EEDA2308);
  v33 = *(_QWORD *)(v29 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4F9024();
  v32 = v6;
  v30 = sub_1AE501548(&qword_1EEDA2310);
  v7 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  sub_1AE4FB7E8();
  v8 = sub_1AE501548(&qword_1EEDA2318);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  sub_1AE4F666C();
  v12 = v11 - v10;
  sub_1AE4F9858(v3, v3[3]);
  sub_1AE754650();
  sub_1AE926F34();
  if (v1)
    goto LABEL_9;
  v27 = v0;
  v28 = v3;
  v13 = sub_1AE926C1C();
  v14 = *(_QWORD *)(v13 + 16);
  v15 = v8;
  if (!v14)
  {
    v22 = v12;
LABEL_8:
    v23 = sub_1AE926988();
    sub_1AE4F6778();
    v25 = v24;
    sub_1AE501548(&qword_1EED99C38);
    *v25 = &type metadata for InferenceServiceLoadInstanceError;
    sub_1AE926B5C();
    sub_1AE92697C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x1E0DEC450], v23);
    swift_willThrow();
    sub_1AE4FBA84();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v22, v15);
    v3 = v28;
LABEL_9:
    v26 = (uint64_t)v3;
    goto LABEL_10;
  }
  v16 = *(_BYTE *)(v13 + 32);
  sub_1AE50AF34(1, v14, v13, v13 + 32, 0, (2 * v14) | 1);
  v18 = v17;
  v20 = v19;
  swift_bridgeObjectRelease();
  if (v18 != v20 >> 1)
  {
    v22 = v12;
    v15 = v8;
    goto LABEL_8;
  }
  if ((v16 & 1) != 0)
  {
    sub_1AE5095D4();
    sub_1AE926B50();
    v21 = v31;
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v29);
  }
  else
  {
    sub_1AE7546C8();
    sub_1AE926B50();
    v21 = v31;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v27, v30);
  }
  sub_1AE4FBA84();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  *v21 = v16;
  v26 = (uint64_t)v28;
LABEL_10:
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v26);
  sub_1AE4F667C();
}

void sub_1AE754AA0(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
}

void sub_1AE754AB8()
{
  InferenceServiceLoadInstanceError.init(from:)();
}

void sub_1AE754ACC()
{
  InferenceServiceLoadInstanceError.encode(to:)();
}

void sub_1AE754AE0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  void *v14;
  __int128 v15;

  v4 = v2;
  v6 = *a1;
  v7 = a1[1];
  v15 = *((_OWORD *)a1 + 1);
  v8 = a1[4];
  sub_1AE4F9858((_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 40));
  v9 = sub_1AE753EF8();
  if (!v3)
  {
    v11 = v10;
    if (v10 >> 60 == 15)
    {
      sub_1AE7554B8();
      swift_allocError();
      *v12 = 1;
      swift_willThrow();
    }
    else
    {
      v13 = v9;
      v14 = (void *)MEMORY[0x1AF454348]();
      sub_1AE755870();
      sub_1AE9243A8();
      objc_autoreleasePoolPop(v14);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v11;
      *(_QWORD *)(a2 + 16) = v6;
      *(_QWORD *)(a2 + 24) = v7;
      *(_OWORD *)(a2 + 32) = v15;
      *(_QWORD *)(a2 + 48) = v8;
    }
  }
}

void sub_1AE754CF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE *v13;
  uint64_t v14[7];
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[5];

  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *a2;
  v15[0] = *(_OWORD *)a1;
  v15[1] = v3;
  v16 = v4;
  v17 = v5;
  sub_1AE754AE0((uint64_t *)v15, (uint64_t)v14);
  if (!v2)
  {
    v8 = v14[2];
    v7 = v14[3];
    v10 = v14[4];
    v9 = v14[5];
    v11 = v14[6];
    sub_1AE50BDB4(v14[0], v14[1]);
    v18[0] = v8;
    v18[1] = v7;
    v18[2] = v10;
    v18[3] = v9;
    v18[4] = v11;
    v12 = sub_1AE754DC4(v18, v6);
    sub_1AE4F76D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      sub_1AE7554B8();
      sub_1AE4F6778();
      *v13 = 0;
      sub_1AE4F6928();
    }
  }
}

uint64_t sub_1AE754DC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;

  if (a2)
  {
    v3 = a1[4];
    v5 = *a1;
    v4 = a1[1];
    swift_bridgeObjectRetain();
    sub_1AE551594(v5, v4, a2);
    LOBYTE(v5) = v6;
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
    {
      v7 = 1;
    }
    else if (v3)
    {
      v8 = swift_bridgeObjectRetain();
      v9 = sub_1AE7552A8(v8, a2);
      swift_bridgeObjectRelease();
      v7 = v9 ^ 1;
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v7 = 1;
  }
  return v7 & 1;
}

uint64_t sub_1AE754E5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v6[5];
  _OWORD v7[2];
  uint64_t v8;

  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v8 = v4;
  sub_1AE754AE0((uint64_t *)v7, (uint64_t)v6);
  if (!v2)
  {
    v1 = v6[4];
    sub_1AE50BDB4(v6[0], v6[1]);
    sub_1AE4F76D8();
    swift_bridgeObjectRelease();
  }
  return v1;
}

void sub_1AE754EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  char v29;
  _QWORD *v30;
  BOOL v31;
  _QWORD *v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40[2];
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_1AE4F67EC();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v38 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v44 = v2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for InferenceServiceConfig(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v33 - v13;
  v15 = *(_QWORD *)v6;
  v16 = *(_QWORD *)(v6 + 8);
  v17 = *(_OWORD *)(v6 + 16);
  v18 = *(_QWORD *)(v6 + 32);
  v19 = *(_QWORD *)(v6 + 40);
  v40[0] = *(_QWORD *)v6;
  v40[1] = v16;
  v41 = v17;
  v42 = v18;
  v43 = v19;
  sub_1AE754AE0(v40, (uint64_t)&v39);
  if (!v0)
  {
    v34 = v16;
    v35 = v15;
    v36 = v12;
    v37 = v11;
    v20 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = sub_1AE4F76D8();
    v22 = (void *)MEMORY[0x1AF454348](v21);
    sub_1AE755180();
    v33[1] = v20;
    objc_autoreleasePoolPop(v22);
    v23 = v38;
    (*(void (**)(_QWORD *, char *, uint64_t))(v36 + 32))(v38, v14, v37);
    v24 = v23[2];
    v25 = v23[3];
    v26 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 56);
    swift_bridgeObjectRetain();
    if (v24 == v26(v4, v44) && v25 == v27)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v29 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
        sub_1AE755834();
        sub_1AE4F6778();
        *v30 = 0;
LABEL_16:
        sub_1AE4F6928();
        sub_1AE755CE4();
        (*(void (**)(_QWORD *, uint64_t))(v36 + 8))(v23, v37);
        goto LABEL_17;
      }
    }
    v31 = *v23 == v35 && v23[1] == v34;
    if (!v31 && (sub_1AE926D60() & 1) == 0)
    {
      sub_1AE755834();
      sub_1AE4F6778();
      *v32 = 1;
      goto LABEL_16;
    }
    sub_1AE755CE4();
  }
LABEL_17:
  sub_1AE4F667C();
}

uint64_t sub_1AE755180()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = type metadata accessor for InferenceServiceConfig(0, AssociatedTypeWitness, AssociatedConformanceWitness, v2);
  MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceConfig<A>, v3);
  return sub_1AE9243A8();
}

uint64_t sub_1AE75525C()
{
  uint64_t v0;

  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 16);
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 56);
  swift_release();
  return v0;
}

uint64_t sub_1AE755288()
{
  sub_1AE75525C();
  return swift_deallocClassInstance();
}

uint64_t sub_1AE7552A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  unint64_t i;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v22;

  if (!*(_QWORD *)(a2 + 16))
    return 1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 1;
  v22 = a1 + 32;
  v4 = a2 + 56;
  swift_bridgeObjectRetain();
  v5 = 0;
  while (!*(_QWORD *)(a2 + 16))
  {
LABEL_20:
    if (++v5 == v2)
    {
      v20 = 1;
      goto LABEL_24;
    }
  }
  v6 = (uint64_t *)(v22 + 16 * v5);
  v8 = *v6;
  v7 = v6[1];
  sub_1AE926EC8();
  swift_bridgeObjectRetain();
  sub_1AE925F14();
  v9 = sub_1AE926F10();
  v10 = -1 << *(_BYTE *)(a2 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v12 = *(_QWORD *)(a2 + 48);
  v13 = (_QWORD *)(v12 + 16 * v11);
  v14 = *v13 == v8 && v13[1] == v7;
  if (!v14 && (sub_1AE926D60() & 1) == 0)
  {
    v15 = ~v10;
    for (i = v11 + 1; ; i = v17 + 1)
    {
      v17 = i & v15;
      if (((*(_QWORD *)(v4 + (((i & v15) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v15)) & 1) == 0)
        break;
      v18 = (_QWORD *)(v12 + 16 * v17);
      v19 = *v18 == v8 && v18[1] == v7;
      if (v19 || (sub_1AE926D60() & 1) != 0)
        goto LABEL_23;
    }
    goto LABEL_19;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  v20 = 0;
LABEL_24:
  swift_bridgeObjectRelease();
  return v20;
}

unint64_t sub_1AE755430(uint64_t a1)
{
  unint64_t result;

  result = sub_1AE59A56C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AE755458()
{
  unint64_t result;

  result = qword_1EEDA2320;
  if (!qword_1EEDA2320)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceLoadInstanceError, &type metadata for InferenceServiceLoadInstanceError);
    atomic_store(result, (unint64_t *)&qword_1EEDA2320);
  }
  return result;
}

unint64_t sub_1AE755494(uint64_t a1)
{
  unint64_t result;

  result = sub_1AE7554B8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AE7554B8()
{
  unint64_t result;

  result = qword_1EEDA2328;
  if (!qword_1EEDA2328)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceLoadInstanceError, &type metadata for InferenceServiceLoadInstanceError);
    atomic_store(result, (unint64_t *)&qword_1EEDA2328);
  }
  return result;
}

unint64_t sub_1AE7554F4(uint64_t a1)
{
  unint64_t result;

  result = sub_1AE6707EC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for InferenceServerConfigLoader()
{
  return objc_opt_self();
}

void type metadata accessor for InferenceServiceLoadInstanceError()
{
  sub_1AE4F67D4();
}

uint64_t type metadata accessor for InferenceServerConfigManager()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for InferenceServerConfigManagerCacheNoOp()
{
  return objc_opt_self();
}

uint64_t _s20IntelligencePlatform33InferenceServiceLoadInstanceErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AE7555D4 + 4 * byte_1AE9564B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AE755608 + 4 * byte_1AE9564B0[v4]))();
}

uint64_t sub_1AE755608(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE755610(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE755618);
  return result;
}

uint64_t sub_1AE755624(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE75562CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AE755630(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE755638(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InferenceServiceLoadInstanceError.CodingKeys()
{
  return &type metadata for InferenceServiceLoadInstanceError.CodingKeys;
}

ValueMetadata *type metadata accessor for InferenceServiceLoadInstanceError.MissingEntitlementCodingKeys()
{
  return &type metadata for InferenceServiceLoadInstanceError.MissingEntitlementCodingKeys;
}

ValueMetadata *type metadata accessor for InferenceServiceLoadInstanceError.InstanceIdNotFoundCodingKeys()
{
  return &type metadata for InferenceServiceLoadInstanceError.InstanceIdNotFoundCodingKeys;
}

unint64_t sub_1AE755678()
{
  unint64_t result;

  result = qword_1EEDA2330;
  if (!qword_1EEDA2330)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9568F0, &type metadata for InferenceServiceLoadInstanceError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2330);
  }
  return result;
}

unint64_t sub_1AE7556B8()
{
  unint64_t result;

  result = qword_1EEDA2338;
  if (!qword_1EEDA2338)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956810, &type metadata for InferenceServiceLoadInstanceError.MissingEntitlementCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2338);
  }
  return result;
}

unint64_t sub_1AE7556F8()
{
  unint64_t result;

  result = qword_1EEDA2340;
  if (!qword_1EEDA2340)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956838, &type metadata for InferenceServiceLoadInstanceError.MissingEntitlementCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2340);
  }
  return result;
}

unint64_t sub_1AE755738()
{
  unint64_t result;

  result = qword_1EEDA2348;
  if (!qword_1EEDA2348)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9567C0, &type metadata for InferenceServiceLoadInstanceError.InstanceIdNotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2348);
  }
  return result;
}

unint64_t sub_1AE755778()
{
  unint64_t result;

  result = qword_1EEDA2350;
  if (!qword_1EEDA2350)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9567E8, &type metadata for InferenceServiceLoadInstanceError.InstanceIdNotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2350);
  }
  return result;
}

unint64_t sub_1AE7557B8()
{
  unint64_t result;

  result = qword_1EEDA2358;
  if (!qword_1EEDA2358)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956860, &type metadata for InferenceServiceLoadInstanceError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2358);
  }
  return result;
}

unint64_t sub_1AE7557F8()
{
  unint64_t result;

  result = qword_1EEDA2360;
  if (!qword_1EEDA2360)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956888, &type metadata for InferenceServiceLoadInstanceError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2360);
  }
  return result;
}

unint64_t sub_1AE755834()
{
  unint64_t result;

  result = qword_1EEDA2368;
  if (!qword_1EEDA2368)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956B50, &unk_1E5DC07C8);
    atomic_store(result, (unint64_t *)&qword_1EEDA2368);
  }
  return result;
}

unint64_t sub_1AE755870()
{
  unint64_t result;

  result = qword_1EED94340;
  if (!qword_1EED94340)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE957718, &type metadata for InferenceServiceConfigBase);
    atomic_store(result, (unint64_t *)&qword_1EED94340);
  }
  return result;
}

uint64_t sub_1AE7558AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1AE501548(&qword_1EED93EF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1AE7558EC()
{
  unint64_t result;

  result = qword_1EEDA2370;
  if (!qword_1EEDA2370)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956B10, &unk_1E5DC0670);
    atomic_store(result, (unint64_t *)&qword_1EEDA2370);
  }
  return result;
}

uint64_t sub_1AE755928(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AssetRegistryAssetLocalAvailabilityInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AE75596C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1AE7559B0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1AE7559EC(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AE755A2C + 4 * byte_1AE9564BA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AE755A4C + 4 * byte_1AE9564BF[v4]))();
}

_BYTE *sub_1AE755A2C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AE755A4C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AE755A54(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AE755A5C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AE755A64(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AE755A6C(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for InferenceServerConfigLoader.InferenceServerConfigLoaderError()
{
  sub_1AE4F67D4();
}

_QWORD *sub_1AE755A84(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void sub_1AE755AC0(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **sub_1AE755AD8(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
      v7 = v4;
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    v5 = v4;
    v6 = *a1;
    *a1 = v4;

  }
  return a1;
}

void **sub_1AE755B64(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t sub_1AE755BC4(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t sub_1AE755C20(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

void type metadata accessor for InferenceServiceConfigError()
{
  sub_1AE4F67D4();
}

unint64_t sub_1AE755C7C(uint64_t a1)
{
  unint64_t result;

  result = sub_1AE755834();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AE755CA4()
{
  unint64_t result;

  result = qword_1EEDA2378;
  if (!qword_1EEDA2378)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956AE8, &unk_1E5DC0670);
    atomic_store(result, (unint64_t *)&qword_1EEDA2378);
  }
  return result;
}

uint64_t sub_1AE755CE4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1AE50BDB4(*(_QWORD *)(v1 - 232), v0);
}

unint64_t static InferenceServerEntitlementInfo.configEntitlement.getter()
{
  return 0xD000000000000040;
}

uint64_t InferenceServerEntitlementInfo.init(clientEntitlements:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

_QWORD *assignWithCopy for InferenceServerEntitlementInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for InferenceServerEntitlementInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceServerEntitlementInfo(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InferenceServerEntitlementInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for InferenceServerEntitlementInfo()
{
  return &type metadata for InferenceServerEntitlementInfo;
}

_QWORD *initializeBufferWithCopyOfBuffer for InferenceServerEntitlementInfo.InferenceServerEntitlementList(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for InferenceServerEntitlementInfo.InferenceServerEntitlementList(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for InferenceServerEntitlementInfo.InferenceServerEntitlementList(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for InferenceServerEntitlementInfo.InferenceServerEntitlementList()
{
  return &type metadata for InferenceServerEntitlementInfo.InferenceServerEntitlementList;
}

uint64_t sub_1AE755ED8()
{
  return sub_1AE755EFC((uint64_t)&type metadata for EntitlementCheckError, &qword_1EEDA24B8);
}

uint64_t sub_1AE755EFC(uint64_t a1, uint64_t *a2)
{
  sub_1AE501548(a2);
  return sub_1AE50A048();
}

uint64_t sub_1AE755F24()
{
  swift_getMetatypeMetadata();
  return sub_1AE50A048();
}

uint64_t sub_1AE755F48()
{
  uint64_t v0;

  return sub_1AE755F80(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_1AE755F50(void *a1)
{
  id v1;

  v1 = a1;
  return sub_1AE925EA8();
}

uint64_t sub_1AE755F80(uint64_t a1, unint64_t a2)
{
  sub_1AE74598C(a1, a2);
  return sub_1AE925EA8();
}

uint64_t sub_1AE755FB0(void *a1)
{
  sub_1AE757E18(a1);
  return sub_1AE925EA8();
}

uint64_t sub_1AE755FE0()
{
  return sub_1AE925EA8();
}

uint64_t sub_1AE756010()
{
  return sub_1AE925EA8();
}

uint64_t sub_1AE75601C()
{
  sub_1AE509358();
  return sub_1AE925EA8();
}

uint64_t sub_1AE756054()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1AE925EA8();
}

uint64_t sub_1AE7560A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1);
  sub_1AE4F666C();
  (*(void (**)(uint64_t))(v3 + 16))(v2 - v1);
  return sub_1AE925EA8();
}

uint64_t sub_1AE756104()
{
  return sub_1AE755EFC((uint64_t)&type metadata for InferenceServiceLoadInstanceError, &qword_1EEDA24B0);
}

uint64_t sub_1AE756128()
{
  return sub_1AE755FE0();
}

uint64_t sub_1AE756130()
{
  return sub_1AE755EFC((uint64_t)&unk_1E5DC07C8, &qword_1EEDA24D0);
}

uint64_t sub_1AE756154()
{
  void **v0;

  return sub_1AE755FB0(*v0);
}

uint64_t sub_1AE75615C@<X0>(uint64_t a1@<X8>)
{
  void **v1;

  return sub_1AE7561F0(*v1, a1);
}

uint64_t sub_1AE756164@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t result;
  uint64_t v9;

  sub_1AE501548(&qword_1EEDA24A8);
  v4 = sub_1AE925EA8();
  v6 = v5;
  v7 = a1;
  result = sub_1AE925EA8();
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = v9;
  *(_BYTE *)(a2 + 32) = 3;
  return result;
}

uint64_t sub_1AE7561F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_1AE501548(&qword_1EEDA24D0);
  v4 = sub_1AE925EA8();
  v6 = v5;
  sub_1AE757E18(a1);
  result = sub_1AE925EA8();
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 32) = 3;
  return result;
}

uint64_t sub_1AE75627C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  sub_1AE501548(&qword_1EEDA24C8);
  v2 = sub_1AE925EA8();
  v4 = v3;
  result = sub_1AE925EA8();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = 3;
  return result;
}

uint64_t sub_1AE7562EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  sub_1AE501548(&qword_1EEDA24C0);
  v2 = sub_1AE925EA8();
  v4 = v3;
  sub_1AE509358();
  result = sub_1AE925EA8();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = 3;
  return result;
}

uint64_t sub_1AE756394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = (*(uint64_t (**)(void))(a2 + 16))();
  v8 = v7;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 24) = v10;
  *(_BYTE *)(a3 + 32) = 3;
  return result;
}

uint64_t sub_1AE75640C()
{
  return sub_1AE755EFC((uint64_t)&type metadata for FileLoaderError, &qword_1EEDA24A8);
}

uint64_t sub_1AE756430()
{
  void **v0;

  return sub_1AE755F50(*v0);
}

uint64_t sub_1AE756438@<X0>(uint64_t a1@<X8>)
{
  void **v1;

  return sub_1AE756164(*v1, a1);
}

uint64_t sub_1AE756440(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x4574736575716572 && a2 == 0xEC000000726F7272;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001AE983FE0 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001AE984000 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x727245726568746FLL && a2 == 0xEA0000000000726FLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v7 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1AE75660C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AE756648 + 4 * byte_1AE956BD0[a1]))(0x4574736575716572, 0xEC000000726F7272);
}

unint64_t sub_1AE756648()
{
  return 0xD000000000000011;
}

unint64_t sub_1AE756664()
{
  return 0xD000000000000015;
}

uint64_t sub_1AE756684()
{
  return 0x727245726568746FLL;
}

uint64_t sub_1AE7566A0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1AE75679C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7470697263736564;
  else
    return 0x6E69616D6F64;
}

void sub_1AE7567D8()
{
  sub_1AE926EC8();
  sub_1AE4F6818();
  sub_1AE926F10();
  sub_1AE4F6650();
}

uint64_t sub_1AE756808()
{
  unsigned __int8 *v0;

  return sub_1AE75660C(*v0);
}

uint64_t sub_1AE756810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE756440(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE756834()
{
  sub_1AE756DB0();
  return sub_1AE926F94();
}

uint64_t sub_1AE75685C()
{
  sub_1AE756DB0();
  return sub_1AE926FA0();
}

void sub_1AE756884()
{
  sub_1AE7567D8();
}

uint64_t sub_1AE75689C()
{
  sub_1AE756E28();
  return sub_1AE926F94();
}

uint64_t sub_1AE7568C4()
{
  sub_1AE756E28();
  return sub_1AE926FA0();
}

uint64_t sub_1AE7568EC()
{
  sub_1AE756EA0();
  return sub_1AE926F94();
}

uint64_t sub_1AE756914()
{
  sub_1AE756EA0();
  return sub_1AE926FA0();
}

uint64_t sub_1AE75693C()
{
  char *v0;

  return sub_1AE75679C(*v0);
}

uint64_t sub_1AE756944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE7566A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE756968()
{
  sub_1AE756DEC();
  return sub_1AE926F94();
}

uint64_t sub_1AE756990()
{
  sub_1AE756DEC();
  return sub_1AE926FA0();
}

void sub_1AE7569B8()
{
  sub_1AE926EC8();
  sub_1AE4F6818();
  sub_1AE926F10();
  sub_1AE4F6650();
}

uint64_t sub_1AE7569E4()
{
  sub_1AE756F18();
  return sub_1AE926F94();
}

uint64_t sub_1AE756A0C()
{
  sub_1AE756F18();
  return sub_1AE926FA0();
}

void InferenceServerErrorInfo.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1AE501548(&qword_1EEDA2380);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v3);
  sub_1AE4F9024();
  sub_1AE501548(&qword_1EEDA2388);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F9024();
  sub_1AE501548(&qword_1EEDA2390);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4F6744();
  sub_1AE501548(&qword_1EEDA2398);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v6);
  sub_1AE4F666C();
  sub_1AE501548(&qword_1EEDA23A0);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v7);
  sub_1AE4F666C();
  v8 = *(unsigned __int8 *)(v1 + 32);
  sub_1AE4F9858(a1, a1[3]);
  sub_1AE756DB0();
  sub_1AE926F4C();
  __asm { BR              X9 }
}

void sub_1AE756BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 - 112) = 0;
  sub_1AE756F18();
  v4 = *(_QWORD *)(v3 - 72);
  sub_1AE926C34();
  v5 = *(_QWORD *)(v3 - 144);
  *(_QWORD *)(v3 - 112) = *(_QWORD *)(v3 - 136);
  *(_QWORD *)(v3 - 104) = v5;
  v6 = *(_QWORD *)(v3 - 160);
  *(_QWORD *)(v3 - 96) = *(_QWORD *)(v3 - 152);
  *(_QWORD *)(v3 - 88) = v6;
  sub_1AE756F54();
  sub_1AE757E48();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 232) + 8))(v2, v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 128) + 8))(v1, v4);
  sub_1AE4F667C();
}

unint64_t sub_1AE756DB0()
{
  unint64_t result;

  result = qword_1EEDA23A8;
  if (!qword_1EEDA23A8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE957230, &type metadata for InferenceServerErrorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA23A8);
  }
  return result;
}

unint64_t sub_1AE756DEC()
{
  unint64_t result;

  result = qword_1EEDA23B0;
  if (!qword_1EEDA23B0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9571E0, &type metadata for InferenceServerErrorInfo.OtherErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA23B0);
  }
  return result;
}

unint64_t sub_1AE756E28()
{
  unint64_t result;

  result = qword_1EEDA23B8;
  if (!qword_1EEDA23B8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE957190, &type metadata for InferenceServerErrorInfo.EntitlementCheckErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA23B8);
  }
  return result;
}

unint64_t sub_1AE756E64()
{
  unint64_t result;

  result = qword_1EEDA23C0;
  if (!qword_1EEDA23C0)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for EntitlementCheckError, &type metadata for EntitlementCheckError);
    atomic_store(result, (unint64_t *)&qword_1EEDA23C0);
  }
  return result;
}

unint64_t sub_1AE756EA0()
{
  unint64_t result;

  result = qword_1EEDA23C8;
  if (!qword_1EEDA23C8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE957140, &type metadata for InferenceServerErrorInfo.LoadInstanceErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA23C8);
  }
  return result;
}

unint64_t sub_1AE756EDC()
{
  unint64_t result;

  result = qword_1EEDA23D0;
  if (!qword_1EEDA23D0)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceLoadInstanceError, &type metadata for InferenceServiceLoadInstanceError);
    atomic_store(result, (unint64_t *)&qword_1EEDA23D0);
  }
  return result;
}

unint64_t sub_1AE756F18()
{
  unint64_t result;

  result = qword_1EEDA23D8;
  if (!qword_1EEDA23D8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9570F0, &type metadata for InferenceServerErrorInfo.RequestErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA23D8);
  }
  return result;
}

unint64_t sub_1AE756F54()
{
  unint64_t result;

  result = qword_1EEDA23E0;
  if (!qword_1EEDA23E0)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceInstanceRequestError, &type metadata for InferenceServiceInstanceRequestError);
    atomic_store(result, (unint64_t *)&qword_1EEDA23E0);
  }
  return result;
}

void InferenceServerErrorInfo.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1AE501548(&qword_1EEDA23E8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v2);
  sub_1AE4F9024();
  sub_1AE501548(&qword_1EEDA23F0);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v3);
  sub_1AE4F9024();
  sub_1AE501548(&qword_1EEDA23F8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F9024();
  v5 = sub_1AE501548(&qword_1EEDA2400);
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4F6744();
  v6 = sub_1AE501548(&qword_1EEDA2408);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  sub_1AE4F666C();
  v10 = v9 - v8;
  v22 = (uint64_t)a1;
  sub_1AE4F9858(a1, a1[3]);
  sub_1AE756DB0();
  sub_1AE926F34();
  if (!v23)
  {
    v24 = v7;
    v11 = v10;
    v12 = sub_1AE926C1C();
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      v14 = *(unsigned __int8 *)(v12 + 32);
      sub_1AE50AF34(1, v13, v12, v12 + 32, 0, (2 * v13) | 1);
      v16 = v15;
      v18 = v17;
      swift_bridgeObjectRelease();
      if (v16 == v18 >> 1)
        __asm { BR              X9 }
      v11 = v10;
    }
    v19 = sub_1AE926988();
    swift_allocError();
    v21 = v20;
    sub_1AE501548(&qword_1EED99C38);
    *v21 = &type metadata for InferenceServerErrorInfo;
    sub_1AE926B5C();
    sub_1AE92697C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x1E0DEC450], v19);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v11, v6);
  }
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v22);
  sub_1AE4F667C();
}

void sub_1AE7574F4(_QWORD *a1)
{
  InferenceServerErrorInfo.init(from:)(a1);
}

void sub_1AE757508(_QWORD *a1)
{
  InferenceServerErrorInfo.encode(to:)(a1);
}

uint64_t sub_1AE75751C()
{
  return sub_1AE755EFC((uint64_t)&type metadata for InferenceServiceInstanceRequestError, &qword_1EEDA24A0);
}

uint64_t sub_1AE757540()
{
  return sub_1AE756054();
}

uint64_t sub_1AE75754C()
{
  return sub_1AE755EFC((uint64_t)&unk_1E5DC5558, &qword_1EEDA24C8);
}

uint64_t sub_1AE757578()
{
  return sub_1AE755F24();
}

uint64_t sub_1AE757594()
{
  return sub_1AE755EFC((uint64_t)&type metadata for InferenceServiceInstanceBuilderError, &qword_1EEDA24C0);
}

uint64_t sub_1AE7575B8()
{
  return sub_1AE75601C();
}

uint64_t sub_1AE7575C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1AE7562EC(a1);
}

unint64_t sub_1AE7575D0()
{
  unint64_t result;

  result = qword_1EEDA2410;
  if (!qword_1EEDA2410)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for EntitlementCheckError, &type metadata for EntitlementCheckError);
    atomic_store(result, (unint64_t *)&qword_1EEDA2410);
  }
  return result;
}

unint64_t sub_1AE75760C()
{
  unint64_t result;

  result = qword_1EEDA2418;
  if (!qword_1EEDA2418)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceLoadInstanceError, &type metadata for InferenceServiceLoadInstanceError);
    atomic_store(result, (unint64_t *)&qword_1EEDA2418);
  }
  return result;
}

unint64_t sub_1AE757648()
{
  unint64_t result;

  result = qword_1EEDA2420;
  if (!qword_1EEDA2420)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceInstanceRequestError, &type metadata for InferenceServiceInstanceRequestError);
    atomic_store(result, (unint64_t *)&qword_1EEDA2420);
  }
  return result;
}

uint64_t destroy for InferenceServerErrorInfo(uint64_t a1)
{
  return sub_1AE745C58(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for InferenceServerErrorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1AE745934(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for InferenceServerErrorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1AE745934(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1AE745C58(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for InferenceServerErrorInfo(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_1AE745C58(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceServerErrorInfo(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 33))
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 3)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for InferenceServerErrorInfo()
{
  return &type metadata for InferenceServerErrorInfo;
}

uint64_t storeEnumTagSinglePayload for InferenceServerErrorInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1AE75784C + 4 * byte_1AE956BE1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1AE757880 + 4 * byte_1AE956BDC[v4]))();
}

uint64_t sub_1AE757880(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE757888(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE757890);
  return result;
}

uint64_t sub_1AE75789C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE7578A4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1AE7578A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7578B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InferenceServerErrorInfo.CodingKeys()
{
  return &type metadata for InferenceServerErrorInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for InferenceServerErrorInfo.RequestErrorCodingKeys()
{
  return &type metadata for InferenceServerErrorInfo.RequestErrorCodingKeys;
}

ValueMetadata *type metadata accessor for InferenceServerErrorInfo.LoadInstanceErrorCodingKeys()
{
  return &type metadata for InferenceServerErrorInfo.LoadInstanceErrorCodingKeys;
}

uint64_t _s20IntelligencePlatform24InferenceServerErrorInfoO22RequestErrorCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AE757930 + 4 * byte_1AE956BE6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AE757950 + 4 * byte_1AE956BEB[v4]))();
}

_BYTE *sub_1AE757930(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AE757950(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AE757958(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AE757960(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AE757968(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AE757970(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for InferenceServerErrorInfo.EntitlementCheckErrorCodingKeys()
{
  return &type metadata for InferenceServerErrorInfo.EntitlementCheckErrorCodingKeys;
}

uint64_t storeEnumTagSinglePayload for InferenceServerErrorInfo.OtherErrorCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AE7579D8 + 4 * byte_1AE956BF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AE757A0C + 4 * byte_1AE956BF0[v4]))();
}

uint64_t sub_1AE757A0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE757A14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE757A1CLL);
  return result;
}

uint64_t sub_1AE757A28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE757A30);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AE757A34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE757A3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InferenceServerErrorInfo.OtherErrorCodingKeys()
{
  return &type metadata for InferenceServerErrorInfo.OtherErrorCodingKeys;
}

unint64_t sub_1AE757A5C()
{
  unint64_t result;

  result = qword_1EEDA2428;
  if (!qword_1EEDA2428)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956DE8, &type metadata for InferenceServerErrorInfo.OtherErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2428);
  }
  return result;
}

unint64_t sub_1AE757A9C()
{
  unint64_t result;

  result = qword_1EEDA2430;
  if (!qword_1EEDA2430)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956EA0, &type metadata for InferenceServerErrorInfo.EntitlementCheckErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2430);
  }
  return result;
}

unint64_t sub_1AE757ADC()
{
  unint64_t result;

  result = qword_1EEDA2438;
  if (!qword_1EEDA2438)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956F58, &type metadata for InferenceServerErrorInfo.LoadInstanceErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2438);
  }
  return result;
}

unint64_t sub_1AE757B1C()
{
  unint64_t result;

  result = qword_1EEDA2440;
  if (!qword_1EEDA2440)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE957010, &type metadata for InferenceServerErrorInfo.RequestErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2440);
  }
  return result;
}

unint64_t sub_1AE757B5C()
{
  unint64_t result;

  result = qword_1EEDA2448;
  if (!qword_1EEDA2448)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9570C8, &type metadata for InferenceServerErrorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2448);
  }
  return result;
}

unint64_t sub_1AE757B9C()
{
  unint64_t result;

  result = qword_1EEDA2450;
  if (!qword_1EEDA2450)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956F80, &type metadata for InferenceServerErrorInfo.RequestErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2450);
  }
  return result;
}

unint64_t sub_1AE757BDC()
{
  unint64_t result;

  result = qword_1EEDA2458;
  if (!qword_1EEDA2458)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956FA8, &type metadata for InferenceServerErrorInfo.RequestErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2458);
  }
  return result;
}

unint64_t sub_1AE757C1C()
{
  unint64_t result;

  result = qword_1EEDA2460;
  if (!qword_1EEDA2460)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956EC8, &type metadata for InferenceServerErrorInfo.LoadInstanceErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2460);
  }
  return result;
}

unint64_t sub_1AE757C5C()
{
  unint64_t result;

  result = qword_1EEDA2468;
  if (!qword_1EEDA2468)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956EF0, &type metadata for InferenceServerErrorInfo.LoadInstanceErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2468);
  }
  return result;
}

unint64_t sub_1AE757C9C()
{
  unint64_t result;

  result = qword_1EEDA2470;
  if (!qword_1EEDA2470)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956E10, &type metadata for InferenceServerErrorInfo.EntitlementCheckErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2470);
  }
  return result;
}

unint64_t sub_1AE757CDC()
{
  unint64_t result;

  result = qword_1EEDA2478;
  if (!qword_1EEDA2478)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956E38, &type metadata for InferenceServerErrorInfo.EntitlementCheckErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2478);
  }
  return result;
}

unint64_t sub_1AE757D1C()
{
  unint64_t result;

  result = qword_1EEDA2480;
  if (!qword_1EEDA2480)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956D58, &type metadata for InferenceServerErrorInfo.OtherErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2480);
  }
  return result;
}

unint64_t sub_1AE757D5C()
{
  unint64_t result;

  result = qword_1EEDA2488;
  if (!qword_1EEDA2488)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE956D80, &type metadata for InferenceServerErrorInfo.OtherErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2488);
  }
  return result;
}

unint64_t sub_1AE757D9C()
{
  unint64_t result;

  result = qword_1EEDA2490;
  if (!qword_1EEDA2490)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE957038, &type metadata for InferenceServerErrorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2490);
  }
  return result;
}

unint64_t sub_1AE757DDC()
{
  unint64_t result;

  result = qword_1EEDA2498;
  if (!qword_1EEDA2498)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE957060, &type metadata for InferenceServerErrorInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2498);
  }
  return result;
}

id sub_1AE757E18(id result)
{
  if ((unint64_t)result >= 3)
    return result;
  return result;
}

uint64_t sub_1AE757E28()
{
  return swift_unknownObjectRelease();
}

unint64_t sub_1AE757E30()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 3;
  return sub_1AE756DEC();
}

unint64_t sub_1AE757E3C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 112) = 1;
  return sub_1AE756EA0();
}

uint64_t sub_1AE757E48()
{
  return sub_1AE926CC4();
}

uint64_t sub_1AE757E50()
{
  uint64_t v0;

  sub_1AE757F90(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t sub_1AE757E74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(os_unfair_lock_s **)(v4 + 24);
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  *(_QWORD *)(*(_QWORD *)(v4 + 16) + 24) = a2;
  swift_unknownObjectWeakAssign();
  os_unfair_lock_unlock(v5);
  return swift_unknownObjectRelease();
}

uint64_t sub_1AE757EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0;
  type metadata accessor for InferenceServerLifecycleManagerNoOp.DelegateHolder();
  v2 = sub_1AE4F9148();
  *(_QWORD *)(v2 + 24) = 0;
  swift_unknownObjectWeakInit();
  sub_1AE501548(&qword_1ED319DB8);
  sub_1AE4F9148();
  *(_QWORD *)(v1 + 16) = sub_1AE50B7A4(v2);
  return v1;
}

uint64_t type metadata accessor for InferenceServerLifecycleManagerNoOp()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for InferenceServerLifecycleManagerNoOp.DelegateHolder()
{
  return objc_opt_self();
}

uint64_t sub_1AE757F90(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t static InferenceServiceCachePolicy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) != 1)
    return (v4 & 1) == 0 && v2 == v3;
  v5 = *(_QWORD *)&v3 == 0;
  if (v3 == 0.0)
    v6 = *(unsigned __int8 *)(a2 + 8);
  else
    v6 = 0;
  if (v5)
    v4 = 0;
  if (v2 == 0.0)
    return v6;
  else
    return v4;
}

ValueMetadata *type metadata accessor for InferenceServiceCachePolicy()
{
  return &type metadata for InferenceServiceCachePolicy;
}

uint64_t InferenceServiceConfig.instanceId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1AE4F66CC();
  return v1;
}

uint64_t InferenceServiceConfig.definitionId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1AE4F66CC();
  return v1;
}

uint64_t InferenceServiceConfig.entitlementGroups.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t InferenceServiceConfig.parameters.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t sub_1AE758090(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x65636E6174736E69 && a2 == 0xEA00000000006449;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6974696E69666564 && a2 == 0xEC00000064496E6FLL;
    if (v6 || (sub_1AE926D60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x80000001AE9840F0 || (sub_1AE926D60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0x6574656D61726170 && a2 == 0xEA00000000007372)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      v8 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 3;
      else
        return 4;
    }
  }
}

uint64_t sub_1AE758260(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AE758298 + 4 * byte_1AE957430[a1]))(0x65636E6174736E69, 0xEA00000000006449);
}

uint64_t sub_1AE758298()
{
  return 0x6974696E69666564;
}

unint64_t sub_1AE7582B8()
{
  return 0xD000000000000011;
}

uint64_t sub_1AE7582D4()
{
  return 0x6574656D61726170;
}

uint64_t sub_1AE7582EC()
{
  unsigned __int8 *v0;

  return sub_1AE758260(*v0);
}

uint64_t sub_1AE7582F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE758090(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE758324@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1AE542730();
  *a1 = result;
  return result;
}

uint64_t sub_1AE758350(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE957640, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE758384(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE957640, a1);
  return sub_1AE926FA0();
}

void InferenceServiceConfig.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v6 = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = v6;
  v7 = type metadata accessor for InferenceServiceConfig.CodingKeys(255, v6, v15, a4);
  MEMORY[0x1AF454B70](&unk_1AE957640, v7);
  v8 = sub_1AE926CF4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - v10;
  sub_1AE4F9858(a1, a1[3]);
  v12 = v17;
  sub_1AE926F4C();
  v23 = 0;
  v13 = v18;
  sub_1AE926C88();
  if (!v13)
  {
    v22 = 1;
    sub_1AE926C88();
    v19 = *(_QWORD *)(v12 + 32);
    v21 = 2;
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE75889C(&qword_1EEDA04C8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1AE926C70();
    v20 = 3;
    sub_1AE926CC4();
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_1AE4F667C();
}

uint64_t type metadata accessor for InferenceServiceConfig.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceServiceConfig.CodingKeys);
}

void InferenceServiceConfig.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;

  v30 = a4;
  v29 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  sub_1AE4F666C();
  v32 = v8 - v7;
  v12 = type metadata accessor for InferenceServiceConfig.CodingKeys(255, v9, v10, v11);
  MEMORY[0x1AF454B70](&unk_1AE957640, v12);
  v36 = sub_1AE926C28();
  v31 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v14 = (char *)&v27 - v13;
  v33 = a3;
  v34 = a2;
  v16 = type metadata accessor for InferenceServiceConfig(0, a2, a3, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (uint64_t *)((char *)&v27 - v18);
  sub_1AE4F9858(a1, a1[3]);
  v35 = v14;
  v20 = v37;
  sub_1AE926F34();
  if (v20)
  {
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)a1);
  }
  else
  {
    v37 = v17;
    v28 = v16;
    v21 = v34;
    v22 = v32;
    v42 = 0;
    *v19 = sub_1AE4FBDDC();
    v19[1] = v23;
    v41 = 1;
    v19[2] = sub_1AE4FBDDC();
    v19[3] = v24;
    sub_1AE501548(&qword_1ED319DE0);
    v40 = 2;
    sub_1AE75889C(&qword_1ED318F18, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_1AE926B98();
    v27 = 0;
    v19[4] = v38;
    v39 = 3;
    sub_1AE926BEC();
    sub_1AE500E94();
    v25 = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))((char *)v19 + *(int *)(v28 + 44), v22, v21);
    v26 = v37;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v37 + 16))(v30, v19, v25);
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)a1);
    (*(void (**)(uint64_t *, uint64_t))(v26 + 8))(v19, v25);
  }
  sub_1AE4F667C();
}

uint64_t type metadata accessor for InferenceServiceConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceServiceConfig);
}

uint64_t sub_1AE75889C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_1AE523CF0(&qword_1ED319DE0);
    v8 = a2;
    result = MEMORY[0x1AF454B70](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AE7588FC(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  BOOL v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_1AE926D60(), result = 0, (v5 & 1) != 0))
  {
    v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (v8 = sub_1AE926D60(), result = 0, (v8 & 1) != 0))
    {
      v9 = (_QWORD *)a1[4];
      v10 = (_QWORD *)a2[4];
      if (v9)
      {
        if (v10)
        {
          sub_1AE5E97A0(v9, v10);
          if ((v11 & 1) != 0)
            return 1;
        }
      }
      else if (!v10)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1AE758998(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v7;

  v2 = a1 == 0x65636E6174736E69 && a2 == 0xEA00000000006449;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6974696E69666564 && a2 == 0xEC00000064496E6FLL;
    if (v6 || (sub_1AE926D60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x80000001AE9840F0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v7 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_1AE758B08(char a1)
{
  if (!a1)
    return 0x65636E6174736E69;
  if (a1 == 1)
    return 0x6974696E69666564;
  return 0xD000000000000011;
}

uint64_t sub_1AE758B70(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11[8];
  _BYTE v12[8];

  v3 = v1;
  v5 = sub_1AE501548(&qword_1EEDA24E0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4F666C();
  v9 = v8 - v7;
  sub_1AE4F9858(a1, a1[3]);
  sub_1AE759AF0();
  sub_1AE926F4C();
  v11[0] = 0;
  sub_1AE503828();
  if (!v2)
  {
    v11[0] = 1;
    sub_1AE503828();
    sub_1AE759B2C(v3 + 32, (uint64_t)v12);
    sub_1AE759B2C((uint64_t)v12, (uint64_t)v11);
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE75889C(&qword_1EEDA04C8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1AE926C70();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void sub_1AE758CD0(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = sub_1AE501548(&qword_1EED947A0);
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4F666C();
  sub_1AE4F9858(a1, a1[3]);
  sub_1AE759AF0();
  sub_1AE926F34();
  if (v2)
  {
    sub_1AE4F90EC();
  }
  else
  {
    v6 = sub_1AE4FD380();
    v8 = v7;
    v13 = v6;
    swift_bridgeObjectRetain();
    v9 = sub_1AE4FD380();
    v11 = v10;
    v12 = v9;
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE75889C(&qword_1ED318F18, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    swift_bridgeObjectRetain();
    sub_1AE926B98();
    sub_1AE4FEF6C();
    sub_1AE4F66CC();
    sub_1AE4F90EC();
    sub_1AE4F9038();
    swift_bridgeObjectRelease();
    sub_1AE4F66E8();
    *a2 = v13;
    a2[1] = v8;
    a2[2] = v12;
    a2[3] = v11;
    a2[4] = v14;
  }
  sub_1AE4F667C();
}

void sub_1AE758EB4(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  InferenceServiceConfig.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

void sub_1AE758ED0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  InferenceServiceConfig.encode(to:)(a1, a2, a3, a4);
}

uint64_t sub_1AE758EE4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceConfig<A>);
  result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceConfig<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1AE758F28()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1AE758FAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 40) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v12;
    v11[1] = v12[1];
    v13 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v16 = ((unint64_t)v14 + v6 + 8) & ~v6;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(v15, v16, v4);
  }
  return a1;
}

uint64_t sub_1AE7590C0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_1AE759124(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v5[1] = v6[1];
  v7 = (_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(v12, v13, v9);
  return a1;
}

_QWORD *sub_1AE7591E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))(((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

_OWORD *sub_1AE7592BC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = (_QWORD *)(((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_QWORD *sub_1AE759334(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))(((unint64_t)v9 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t sub_1AE7593E4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  unint64_t v16;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_22;
  v10 = ((v8 + 40) & ~v8) + *(_QWORD *)(v5 + 64);
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_22:
      if ((v6 & 0x80000000) != 0)
        return _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & ~v8, v6, v4);
      v16 = *(_QWORD *)(a1 + 8);
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_22;
LABEL_15:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if (!(_DWORD)v10)
    return v7 + v15 + 1;
  if (v10 > 3)
    LODWORD(v10) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1AE7594B8 + 4 * byte_1AE957434[(v10 - 1)]))();
}

void sub_1AE759534(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  char v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  v8 = 8 * v7;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << v8)) >> v8) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v12 = v10 & ~(-1 << v8);
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_1AE759734(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1AE759780 + 4 * byte_1AE957447[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1AE7597B4 + 4 * byte_1AE957442[v4]))();
}

uint64_t sub_1AE7597B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7597BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE7597C4);
  return result;
}

uint64_t sub_1AE7597D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE7597D8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1AE7597DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7597E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1AE7597F0()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE759800()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE759810()
{
  JUMPOUT(0x1AF454B70);
}

uint64_t destroy for ExecStep()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ExecStep(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for InferenceServiceConfigBase(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ExecStep(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for InferenceServiceConfigBase()
{
  return &type metadata for InferenceServiceConfigBase;
}

uint64_t sub_1AE75998C()
{
  char *v0;

  return sub_1AE758B08(*v0);
}

uint64_t sub_1AE759994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE758998(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE7599B8()
{
  sub_1AE759AF0();
  return sub_1AE926F94();
}

uint64_t sub_1AE7599E0()
{
  sub_1AE759AF0();
  return sub_1AE926FA0();
}

double sub_1AE759A0C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1AE758CD0(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1AE759A50(_QWORD *a1)
{
  return sub_1AE758B70(a1);
}

unint64_t sub_1AE759A88(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AE755870();
  result = sub_1AE759AB4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1AE759AB4()
{
  unint64_t result;

  result = qword_1EEDA24D8;
  if (!qword_1EEDA24D8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9576AC, &type metadata for InferenceServiceConfigBase);
    atomic_store(result, (unint64_t *)&qword_1EEDA24D8);
  }
  return result;
}

unint64_t sub_1AE759AF0()
{
  unint64_t result;

  result = qword_1EED94328;
  if (!qword_1EED94328)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9577F8, &type metadata for InferenceServiceConfigBase.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EED94328);
  }
  return result;
}

uint64_t sub_1AE759B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1AE501548(&qword_1EEDA24E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for InferenceServiceConfigBase.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AE759BC0 + 4 * byte_1AE957451[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AE759BF4 + 4 * byte_1AE95744C[v4]))();
}

uint64_t sub_1AE759BF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE759BFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE759C04);
  return result;
}

uint64_t sub_1AE759C10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE759C18);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AE759C1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE759C24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InferenceServiceConfigBase.CodingKeys()
{
  return &type metadata for InferenceServiceConfigBase.CodingKeys;
}

unint64_t sub_1AE759C44()
{
  unint64_t result;

  result = qword_1EEDA24F0;
  if (!qword_1EEDA24F0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9577D0, &type metadata for InferenceServiceConfigBase.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA24F0);
  }
  return result;
}

unint64_t sub_1AE759C84()
{
  unint64_t result;

  result = qword_1EED94338;
  if (!qword_1EED94338)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE957740, &type metadata for InferenceServiceConfigBase.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EED94338);
  }
  return result;
}

unint64_t sub_1AE759CC4()
{
  unint64_t result;

  result = qword_1EED94330;
  if (!qword_1EED94330)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE957768, &type metadata for InferenceServiceConfigBase.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EED94330);
  }
  return result;
}

uint64_t InferenceServiceContextProtocol.model(for:in:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  v8[10] = *(_QWORD *)(a6 - 8);
  v8[11] = sub_1AE500330();
  sub_1AE4F9070();
  return swift_task_switch();
}

uint64_t sub_1AE759D54()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  _QWORD *v4;

  v1 = v0[10];
  v2 = (void *)v0[6];
  sub_1AE75A4A4(v0[7], v0[8]);
  type metadata accessor for InferenceMLModel();
  sub_1AE4FBDE8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  v4 = (_QWORD *)sub_1AE4F7738();
  v0[12] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = sub_1AE759E14;
  return InferenceMLModel.__allocating_init<A>(domainId:assetId:configuration:context:)(v0[4], v0[5], v0[2], v0[3], v0[6], v0[11], v0[7], v0[8]);
}

uint64_t sub_1AE759E14(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 104) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_1AE4F9070();
    return swift_task_switch();
  }
  else
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
  }
}

uint64_t sub_1AE759E98()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t InferenceServiceRunContext.run<A>(with:on:interface:parentEventId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v9 + 120) = a8;
  *(_QWORD *)(v9 + 128) = v8;
  *(_QWORD *)(v9 + 104) = a5;
  *(_QWORD *)(v9 + 112) = a7;
  *(_BYTE *)(v9 + 304) = a6;
  *(_QWORD *)(v9 + 88) = a2;
  *(_QWORD *)(v9 + 96) = a4;
  *(_QWORD *)(v9 + 80) = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v9 + 136) = AssociatedTypeWitness;
  *(_QWORD *)(v9 + 144) = *(_QWORD *)(AssociatedTypeWitness - 8);
  *(_QWORD *)(v9 + 152) = sub_1AE500330();
  v14 = type metadata accessor for InferenceMessageRequest(0, AssociatedTypeWitness, v12, v13);
  *(_QWORD *)(v9 + 160) = v14;
  *(_QWORD *)(v9 + 168) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v9 + 176) = sub_1AE500330();
  v15 = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v9 + 184) = v15;
  v18 = type metadata accessor for InferenceMessageResponse(0, v15, v16, v17);
  *(_QWORD *)(v9 + 192) = v18;
  *(_QWORD *)(v9 + 200) = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v9 + 208) = sub_1AE4F7738();
  *(_QWORD *)(v9 + 216) = sub_1AE4F7738();
  *(_OWORD *)(v9 + 224) = *(_OWORD *)a3;
  *(_QWORD *)(v9 + 240) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v9 + 248) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(v9 + 264) = *(_QWORD *)(a3 + 40);
  sub_1AE4F9070();
  return swift_task_switch();
}

uint64_t sub_1AE75A004()
{
  uint64_t v0;
  char v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_BYTE *)(v0 + 304);
  sub_1AE75A418();
  if ((v1 & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 128);
    v2 = (uint64_t *)(v3 + 24);
  }
  else
  {
    v2 = (uint64_t *)(v0 + 104);
    v3 = *(_QWORD *)(v0 + 128);
  }
  v18 = *v2;
  v4 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 264);
  v13 = *(_OWORD *)(v0 + 224);
  v14 = *(_OWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 136);
  v16 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 272) = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16);
  swift_unownedRetainStrong();
  *(_OWORD *)(v0 + 16) = v13;
  *(_OWORD *)(v0 + 32) = v14;
  *(_QWORD *)(v0 + 48) = v4;
  *(_QWORD *)(v0 + 56) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v9, v8);
  sub_1AE748EAC(v7, v18, 0, v8, v16, v17, v15);
  sub_1AE75A404((_QWORD *)(v0 + 64));
  v10 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 280) = v10;
  *(_QWORD *)(v0 + 72) = v10;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 288) = v11;
  *v11 = v0;
  v11[1] = sub_1AE75A160;
  return sub_1AE750D8C();
}

uint64_t sub_1AE75A160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1AE4F9070();
  return sub_1AE4FDD5C();
}

uint64_t sub_1AE75A1F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 80);
  sub_1AE4FBDE8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  sub_1AE762A50(v1, v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE75A294()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1AE75A2F0(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  sub_1AE505750();
  sub_1AE4F9094();
  *(_BYTE *)(*(_QWORD *)(v3 + 16) + 16) = a1;
  os_unfair_lock_unlock((os_unfair_lock_t)v1);
}

uint64_t sub_1AE75A340(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1;
  v3 = a1[1];
  *(_QWORD *)(v1 + 16) = *a1;
  *(_QWORD *)(v1 + 24) = v3;
  swift_unownedRetain();
  swift_release();
  type metadata accessor for InferenceServiceContextMemberVariables.BoolClass();
  v4 = sub_1AE4F66BC();
  *(_BYTE *)(v4 + 16) = 1;
  sub_1AE501548(&qword_1EED93F40);
  sub_1AE4F66BC();
  *(_QWORD *)(v2 + 32) = sub_1AE50B7A4(v4);
  return v2;
}

uint64_t InferenceServiceContextMemberVariables.deinit()
{
  uint64_t v0;

  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t InferenceServiceContextMemberVariables.__deallocating_deinit()
{
  InferenceServiceContextMemberVariables.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1AE75A404@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 24);
  return swift_bridgeObjectRetain();
}

void sub_1AE75A418()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 32);
  v2 = *(os_unfair_lock_s **)(v1 + 24);
  swift_retain();
  os_unfair_lock_lock(v2);
  sub_1AE4F9094();
  sub_1AE4FCA44();
  swift_release();
  if ((_DWORD)v1 == 1)
  {
    sub_1AE4FD30C();
  }
  else
  {
    sub_1AE4FEF7C();
    __break(1u);
  }
}

void sub_1AE75A4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)((*(uint64_t (**)(void))(a2 + 8))() + 32);
  sub_1AE505750();
  sub_1AE4F9094();
  sub_1AE4FCA44();
  swift_release();
  if ((_DWORD)v2 == 1)
  {
    sub_1AE4FD30C();
  }
  else
  {
    sub_1AE4FEF7C();
    __break(1u);
  }
}

uint64_t InferenceServiceContextProtocol.viewService()()
{
  if (qword_1ED31A1F0 != -1)
    swift_once();
  return qword_1ED31B4E0();
}

uint64_t InferenceServiceContextProtocol.asset(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;

  v8[18] = a7;
  v8[19] = v7;
  v8[16] = a5;
  v8[17] = a6;
  v8[14] = a3;
  v8[15] = a4;
  v8[12] = a1;
  v8[13] = a2;
  sub_1AE4F9070();
  return swift_task_switch();
}

uint64_t sub_1AE75A5A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  void (*v10)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14[2];
  char v15;

  v1 = v0[18];
  v2 = v0[17];
  v3 = type metadata accessor for AssetRegistry();
  v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v1) + 16);
  swift_unownedRetainStrong();
  swift_release();
  sub_1AE57C238(v4 + 32, (uint64_t)(v0 + 2));
  swift_release();
  v5 = v0[5];
  v6 = v0[6];
  v7 = sub_1AE4F9858(v0 + 2, v5);
  v0[10] = v5;
  v8 = *(_QWORD *)(v6 + 8);
  v0[11] = v8;
  v9 = sub_1AE52F6A8(v0 + 7);
  v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v10(v9, v7, v5);
  v14[0] = (uint64_t)sub_1AE532BE4;
  v14[1] = 0;
  v15 = 0;
  v11 = sub_1AE500330();
  v10((uint64_t *)v11, v9, v5);
  v0[20] = sub_1AE53F3A8(v11, v14, v3, v5, v8);
  swift_task_dealloc();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)(v0 + 7));
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)(v0 + 2));
  v12 = (_QWORD *)swift_task_alloc();
  v0[21] = v12;
  *v12 = v0;
  v12[1] = sub_1AE75A718;
  return AssetRegistry.asset(for:in:)(v0[12], v0[13], v0[14], v0[15], v0[16]);
}

uint64_t sub_1AE75A718()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1AE4F9070();
    return sub_1AE4FDD5C();
  }
  else
  {
    swift_release();
    return sub_1AE4FC8E4(*(uint64_t (**)(void))(v2 + 8));
  }
}

uint64_t sub_1AE75A780()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1AE75A7B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  sub_1AE4F6C38();
  v1 = sub_1AE4F66BC();
  sub_1AE50A578(v1, v2, v3, v4, v5, v6, v7, v8, v10);
  *(_QWORD *)(v0 + 16) = v0;
  return v0;
}

uint64_t InferenceServiceInitContext.__deallocating_deinit()
{
  return sub_1AE75A944();
}

uint64_t InferenceServiceRunContext._vars.getter()
{
  return swift_retain();
}

uint64_t sub_1AE75A800(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  sub_1AE4F6C38();
  v4 = sub_1AE4F66BC();
  sub_1AE50A578(v4, v5, v6, v7, v8, v9, v10, v11, v13);
  *(_QWORD *)(v2 + 16) = v2;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t InferenceServiceRunContext.parentEventId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

void InferenceServiceRunContext.provide<A>(feedback:for:using:)(void *a1, uint64_t a2)
{
  id v4;
  uint64_t AssociatedTypeWitness;
  uint64_t (**AssociatedConformanceWitness)(uint64_t, uint64_t);

  sub_1AE75A418();
  v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FeedbackService()), sel_init);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = (uint64_t (**)(uint64_t, uint64_t))swift_getAssociatedConformanceWitness();
  FeedbackService.record<A>(feedback:for:)(a1, a2, 0, AssociatedTypeWitness, AssociatedConformanceWitness);

}

uint64_t InferenceServiceRunContext.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t InferenceServiceRunContext.__deallocating_deinit()
{
  return sub_1AE75A944();
}

uint64_t sub_1AE75A944()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1AE75A974()
{
  return InferenceServiceRunContext._vars.getter();
}

uint64_t type metadata accessor for InferenceServiceContextMemberVariables()
{
  return objc_opt_self();
}

uint64_t method lookup function for InferenceServiceContextMemberVariables()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for InferenceServiceContextMemberVariables.BoolClass()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of InferenceServiceContextProtocol._vars.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for InferenceServiceInitContext()
{
  return objc_opt_self();
}

uint64_t method lookup function for InferenceServiceInitContext()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for InferenceServiceRunContext()
{
  return objc_opt_self();
}

uint64_t method lookup function for InferenceServiceRunContext()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for InferenceServiceRunContextMemberVariables()
{
  return &type metadata for InferenceServiceRunContextMemberVariables;
}

uint64_t dispatch thunk of static InferenceServiceDefinition.definitionId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of static InferenceServiceDefinition.buildRunner(config:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 64) + *(_QWORD *)(a5 + 64));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_1AE56794C;
  return v13(a1, a2, a3, a4, a5);
}

void static InferenceServiceDefinitionList.definitions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1AE501548((uint64_t *)&unk_1EED94800);
  v0 = sub_1AE5035B4();
  *(_OWORD *)(v0 + 16) = xmmword_1AE93D190;
  v1 = sub_1AE501548(&qword_1EED94520);
  v2 = sub_1AE500350();
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = sub_1AE75ABAC();
  *(_QWORD *)(v0 + 32) = v2;
  v3 = sub_1AE501548(&qword_1EED94540);
  v4 = sub_1AE500350();
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = sub_1AE75AE04();
  *(_QWORD *)(v0 + 72) = v4;
  v5 = sub_1AE501548(&qword_1EED94530);
  v6 = sub_1AE500350();
  *(_QWORD *)(v0 + 136) = v5;
  *(_QWORD *)(v0 + 144) = sub_1AE75B0A4();
  *(_QWORD *)(v0 + 112) = v6;
  sub_1AE4F6624();
}

unint64_t sub_1AE75ABAC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[8];

  result = qword_1EED94518;
  if (!qword_1EED94518)
  {
    v1 = sub_1AE523CF0(&qword_1EED94520);
    v2[0] = sub_1AE75AC9C();
    v2[1] = sub_1AE75ACD8();
    v2[2] = sub_1AE512FA0(&qword_1EED94468, (uint64_t (*)(uint64_t))type metadata accessor for PersonMatcherInferenceInterface.Output, (uint64_t)&protocol conformance descriptor for PersonMatcherInferenceInterface.Output);
    v2[3] = sub_1AE512FA0(&qword_1EED94460, (uint64_t (*)(uint64_t))type metadata accessor for PersonMatcherInferenceInterface.Output, (uint64_t)&protocol conformance descriptor for PersonMatcherInferenceInterface.Output);
    v2[4] = sub_1AE75AD14();
    v2[5] = sub_1AE75AD50();
    v2[6] = sub_1AE75AD8C();
    v2[7] = sub_1AE75ADC8();
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for <> InferenceServiceDefinitionWrapper<A>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EED94518);
  }
  return result;
}

unint64_t sub_1AE75AC9C()
{
  unint64_t result;

  result = qword_1EED94438;
  if (!qword_1EED94438)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for PersonMatcherInferenceInterface.Input, &type metadata for PersonMatcherInferenceInterface.Input);
    atomic_store(result, (unint64_t *)&qword_1EED94438);
  }
  return result;
}

unint64_t sub_1AE75ACD8()
{
  unint64_t result;

  result = qword_1EED94430;
  if (!qword_1EED94430)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for PersonMatcherInferenceInterface.Input, &type metadata for PersonMatcherInferenceInterface.Input);
    atomic_store(result, (unint64_t *)&qword_1EED94430);
  }
  return result;
}

unint64_t sub_1AE75AD14()
{
  unint64_t result;

  result = qword_1EED94458;
  if (!qword_1EED94458)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for PersonMatcherInferenceInterface.Errors.InitError, &type metadata for PersonMatcherInferenceInterface.Errors.InitError);
    atomic_store(result, (unint64_t *)&qword_1EED94458);
  }
  return result;
}

unint64_t sub_1AE75AD50()
{
  unint64_t result;

  result = qword_1EED94450;
  if (!qword_1EED94450)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for PersonMatcherInferenceInterface.Errors.InitError, &type metadata for PersonMatcherInferenceInterface.Errors.InitError);
    atomic_store(result, (unint64_t *)&qword_1EED94450);
  }
  return result;
}

unint64_t sub_1AE75AD8C()
{
  unint64_t result;

  result = qword_1EED94448;
  if (!qword_1EED94448)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for PersonMatcherInferenceInterface.Errors.RunError, &type metadata for PersonMatcherInferenceInterface.Errors.RunError);
    atomic_store(result, (unint64_t *)&qword_1EED94448);
  }
  return result;
}

unint64_t sub_1AE75ADC8()
{
  unint64_t result;

  result = qword_1EED94440;
  if (!qword_1EED94440)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for PersonMatcherInferenceInterface.Errors.RunError, &type metadata for PersonMatcherInferenceInterface.Errors.RunError);
    atomic_store(result, (unint64_t *)&qword_1EED94440);
  }
  return result;
}

unint64_t sub_1AE75AE04()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[8];

  result = qword_1EED94538;
  if (!qword_1EED94538)
  {
    v1 = sub_1AE523CF0(&qword_1EED94540);
    v2[0] = sub_1AE75AEC4();
    v2[1] = sub_1AE75AF00();
    v2[2] = sub_1AE75AF3C();
    v2[3] = sub_1AE75AF78();
    v2[4] = sub_1AE75AFB4();
    v2[5] = sub_1AE75AFF0();
    v2[6] = sub_1AE75B02C();
    v2[7] = sub_1AE75B068();
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for <> InferenceServiceDefinitionWrapper<A>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EED94538);
  }
  return result;
}

unint64_t sub_1AE75AEC4()
{
  unint64_t result;

  result = qword_1EED94370;
  if (!qword_1EED94370)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LifeEventsInferenceInterface.Input, &type metadata for LifeEventsInferenceInterface.Input);
    atomic_store(result, (unint64_t *)&qword_1EED94370);
  }
  return result;
}

unint64_t sub_1AE75AF00()
{
  unint64_t result;

  result = qword_1EED94368;
  if (!qword_1EED94368)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LifeEventsInferenceInterface.Input, &type metadata for LifeEventsInferenceInterface.Input);
    atomic_store(result, (unint64_t *)&qword_1EED94368);
  }
  return result;
}

unint64_t sub_1AE75AF3C()
{
  unint64_t result;

  result = qword_1EED943A0[0];
  if (!qword_1EED943A0[0])
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LifeEventsInferenceInterface.Output, &type metadata for LifeEventsInferenceInterface.Output);
    atomic_store(result, qword_1EED943A0);
  }
  return result;
}

unint64_t sub_1AE75AF78()
{
  unint64_t result;

  result = qword_1EED94398;
  if (!qword_1EED94398)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LifeEventsInferenceInterface.Output, &type metadata for LifeEventsInferenceInterface.Output);
    atomic_store(result, (unint64_t *)&qword_1EED94398);
  }
  return result;
}

unint64_t sub_1AE75AFB4()
{
  unint64_t result;

  result = qword_1EED94390;
  if (!qword_1EED94390)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LifeEventsInferenceInterface.Errors.InitError, &type metadata for LifeEventsInferenceInterface.Errors.InitError);
    atomic_store(result, (unint64_t *)&qword_1EED94390);
  }
  return result;
}

unint64_t sub_1AE75AFF0()
{
  unint64_t result;

  result = qword_1EED94388;
  if (!qword_1EED94388)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LifeEventsInferenceInterface.Errors.InitError, &type metadata for LifeEventsInferenceInterface.Errors.InitError);
    atomic_store(result, (unint64_t *)&qword_1EED94388);
  }
  return result;
}

unint64_t sub_1AE75B02C()
{
  unint64_t result;

  result = qword_1EED94380;
  if (!qword_1EED94380)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LifeEventsInferenceInterface.Errors.RunError, &type metadata for LifeEventsInferenceInterface.Errors.RunError);
    atomic_store(result, (unint64_t *)&qword_1EED94380);
  }
  return result;
}

unint64_t sub_1AE75B068()
{
  unint64_t result;

  result = qword_1EED94378;
  if (!qword_1EED94378)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LifeEventsInferenceInterface.Errors.RunError, &type metadata for LifeEventsInferenceInterface.Errors.RunError);
    atomic_store(result, (unint64_t *)&qword_1EED94378);
  }
  return result;
}

unint64_t sub_1AE75B0A4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[8];

  result = qword_1EED94528;
  if (!qword_1EED94528)
  {
    v1 = sub_1AE523CF0(&qword_1EED94530);
    v2[0] = sub_1AE75B194();
    v2[1] = sub_1AE75B1D0();
    v2[2] = sub_1AE512FA0(&qword_1EED945B0, (uint64_t (*)(uint64_t))type metadata accessor for LocationEmbedderInferenceInterface.Output, (uint64_t)&protocol conformance descriptor for LocationEmbedderInferenceInterface.Output);
    v2[3] = sub_1AE512FA0(&qword_1EED945A8, (uint64_t (*)(uint64_t))type metadata accessor for LocationEmbedderInferenceInterface.Output, (uint64_t)&protocol conformance descriptor for LocationEmbedderInferenceInterface.Output);
    v2[4] = sub_1AE75B20C();
    v2[5] = sub_1AE75B248();
    v2[6] = sub_1AE75B284();
    v2[7] = sub_1AE75B2C0();
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for <> InferenceServiceDefinitionWrapper<A>, v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EED94528);
  }
  return result;
}

unint64_t sub_1AE75B194()
{
  unint64_t result;

  result = qword_1EED94580;
  if (!qword_1EED94580)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LocationEmbedderInferenceInterface.Input, &type metadata for LocationEmbedderInferenceInterface.Input);
    atomic_store(result, (unint64_t *)&qword_1EED94580);
  }
  return result;
}

unint64_t sub_1AE75B1D0()
{
  unint64_t result;

  result = qword_1EED94578;
  if (!qword_1EED94578)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LocationEmbedderInferenceInterface.Input, &type metadata for LocationEmbedderInferenceInterface.Input);
    atomic_store(result, (unint64_t *)&qword_1EED94578);
  }
  return result;
}

unint64_t sub_1AE75B20C()
{
  unint64_t result;

  result = qword_1EED945A0;
  if (!qword_1EED945A0)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LocationEmbedderInferenceInterface.Errors.InitError, &type metadata for LocationEmbedderInferenceInterface.Errors.InitError);
    atomic_store(result, (unint64_t *)&qword_1EED945A0);
  }
  return result;
}

unint64_t sub_1AE75B248()
{
  unint64_t result;

  result = qword_1EED94598;
  if (!qword_1EED94598)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LocationEmbedderInferenceInterface.Errors.InitError, &type metadata for LocationEmbedderInferenceInterface.Errors.InitError);
    atomic_store(result, (unint64_t *)&qword_1EED94598);
  }
  return result;
}

unint64_t sub_1AE75B284()
{
  unint64_t result;

  result = qword_1EED94590;
  if (!qword_1EED94590)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LocationEmbedderInferenceInterface.Errors.RunError, &type metadata for LocationEmbedderInferenceInterface.Errors.RunError);
    atomic_store(result, (unint64_t *)&qword_1EED94590);
  }
  return result;
}

unint64_t sub_1AE75B2C0()
{
  unint64_t result;

  result = qword_1EED94588;
  if (!qword_1EED94588)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for LocationEmbedderInferenceInterface.Errors.RunError, &type metadata for LocationEmbedderInferenceInterface.Errors.RunError);
    atomic_store(result, (unint64_t *)&qword_1EED94588);
  }
  return result;
}

void static InferenceServiceDefinitionList.localOnlyDefinitions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1AE501548(&qword_1EED947F8);
  v0 = sub_1AE5035B4();
  *(_OWORD *)(v0 + 16) = xmmword_1AE93D190;
  v1 = sub_1AE4F69EC();
  v2 = sub_1AE500350();
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = sub_1AE4FEF98(&qword_1EED94558);
  *(_QWORD *)(v0 + 32) = v2;
  v3 = sub_1AE4F69EC();
  v4 = sub_1AE500350();
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = sub_1AE4FEF98(&qword_1EED94568);
  *(_QWORD *)(v0 + 72) = v4;
  v5 = sub_1AE4F69EC();
  v6 = sub_1AE500350();
  *(_QWORD *)(v0 + 136) = v5;
  *(_QWORD *)(v0 + 144) = sub_1AE4FEF98(&qword_1EED94548);
  *(_QWORD *)(v0 + 112) = v6;
  sub_1AE4F6624();
}

uint64_t sub_1AE75B3C8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1AE523CF0(a2);
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceDefinitionWrapper<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for InferenceServiceDefinitionList()
{
  return &type metadata for InferenceServiceDefinitionList;
}

uint64_t dispatch thunk of static InferenceServiceDefinitionListProtocol.definitions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static InferenceServiceDefinitionListProtocol.localOnlyDefinitions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void sub_1AE75B430(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  if (*(_QWORD *)((*(uint64_t (**)(void))(a2 + 8))() + 16))
  {
    sub_1AE501E24(MEMORY[0x1E0DEE9D8]);
    sub_1AE521DC0();
    sub_1AE50383C();
    do
    {
      sub_1AE4FBDF8(v4);
      sub_1AE4F9858(&v18, v20);
      *(_QWORD *)&v22 = sub_1AE75B620();
      *((_QWORD *)&v22 + 1) = v5;
      sub_1AE50AF58(&v18, v2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v25 = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1AE4FD390();
        sub_1AE521DC0();
        v3 = v25;
      }
      v15 = *(_QWORD *)(v3 + 24);
      if (*(_QWORD *)(v3 + 16) >= v15 >> 1)
      {
        sub_1AE4FDEFC(v15);
        sub_1AE521DC0();
        v3 = v25;
      }
      sub_1AE50035C(isUniquelyReferenced_nonNull_native, v7, v8, v9, v10, v11, v12, v13, v17, v18, *((uint64_t *)&v18 + 1), v19, v20, v21, v14, v22, v23, v24);
    }
    while (!v16);
    sub_1AE4F6648();
  }
  else
  {
    sub_1AE4F6648();
  }
  sub_1AE62C100();
  sub_1AE4FE9F8();
}

void sub_1AE75B520(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  if (*(_QWORD *)((*(uint64_t (**)(void))(a2 + 16))() + 16))
  {
    sub_1AE501E24(MEMORY[0x1E0DEE9D8]);
    sub_1AE521DEC();
    sub_1AE50383C();
    do
    {
      sub_1AE4FBDF8(v4);
      sub_1AE4F9858(&v18, v20);
      *(_QWORD *)&v22 = sub_1AE75B620();
      *((_QWORD *)&v22 + 1) = v5;
      sub_1AE50AF58(&v18, v2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v25 = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1AE4FD390();
        sub_1AE521DEC();
        v3 = v25;
      }
      v15 = *(_QWORD *)(v3 + 24);
      if (*(_QWORD *)(v3 + 16) >= v15 >> 1)
      {
        sub_1AE4FDEFC(v15);
        sub_1AE521DEC();
        v3 = v25;
      }
      sub_1AE50035C(isUniquelyReferenced_nonNull_native, v7, v8, v9, v10, v11, v12, v13, v17, v18, *((uint64_t *)&v18 + 1), v19, v20, v21, v14, v22, v23, v24);
    }
    while (!v16);
    sub_1AE4F6648();
  }
  else
  {
    sub_1AE4F6648();
  }
  sub_1AE62C1A0();
  sub_1AE4FE9F8();
}

uint64_t InferenceServiceDefinitionWrapper.__allocating_init(definitionType:)()
{
  return swift_allocObject();
}

uint64_t sub_1AE75B620()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t InferenceServiceDefinitionWrapper.init(definitionType:)()
{
  uint64_t v0;

  return v0;
}

uint64_t InferenceServiceDefinitionWrapper.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t InferenceServiceDefinitionWrapper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1AE75B6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a3 - 24);
}

uint64_t sub_1AE75B6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a3 - 32);
}

uint64_t sub_1AE75B6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a3 - 40);
}

uint64_t sub_1AE75B6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a3 - 48);
}

uint64_t sub_1AE75B6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a3 - 56);
}

uint64_t sub_1AE75B6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(a3 - 64);
}

uint64_t sub_1AE75B6EC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceDefinitionWrapper<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1AE75B718()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for InferenceServiceDefinitionWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceServiceDefinitionWrapper);
}

uint64_t method lookup function for InferenceServiceDefinitionWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InferenceServiceDefinitionWrapper.__allocating_init(definitionType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

void __swiftcall InferenceServiceInstanceQualifiedID.init(service:asset:domain:)(IntelligencePlatform::InferenceServiceInstanceQualifiedID *__return_ptr retstr, Swift::String service, Swift::String asset, Swift::String domain)
{
  retstr->serviceInstanceId = service;
  retstr->assetRegistryAssetId = asset;
  retstr->assetRegistryAssetDomain = domain;
}

void sub_1AE75B77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_1AE926328();
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(a1, 1, v5) == 1)
  {
    sub_1AE50290C(a1);
  }
  else
  {
    sub_1AE92631C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1AE505390();
    sub_1AE9262EC();
    swift_unknownObjectRelease();
  }
  swift_task_create();
  sub_1AE640FB0();
}

uint64_t sub_1AE75B894@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = a2 & result;
  return result;
}

BOOL sub_1AE75B8A4(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_1AE75B8B0(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

void InferenceServiceInstanceQualifiedID.serviceInstanceId.getter()
{
  sub_1AE4F66CC();
  sub_1AE4F7714();
  sub_1AE4F6664();
}

void InferenceServiceInstanceQualifiedID.assetRegistryAssetId.getter()
{
  sub_1AE4F66CC();
  sub_1AE4F7714();
  sub_1AE4F6664();
}

void InferenceServiceInstanceQualifiedID.assetRegistryAssetDomain.getter()
{
  sub_1AE4F66CC();
  sub_1AE4F7714();
  sub_1AE4F6664();
}

void InferenceServiceInstanceQualifiedID.description.getter()
{
  sub_1AE762014();
  sub_1AE50ACD8();
  sub_1AE4F6708();
  sub_1AE762074();
  sub_1AE4F76D8();
  sub_1AE50ACD8();
  sub_1AE4F66C4();
  sub_1AE4F6A14();
  sub_1AE4F665C();
  sub_1AE501BAC();
}

uint64_t InferenceServiceInstanceQualifiedID.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1AE925F14();
  swift_bridgeObjectRelease();
  sub_1AE4F6804();
  sub_1AE925F14();
  sub_1AE4F67AC();
  sub_1AE4F66CC();
  sub_1AE925F14();
  return swift_bridgeObjectRelease();
}

uint64_t static InferenceServiceInstanceQualifiedID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t result;
  BOOL v13;
  char v14;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = *a1 == *a2 && a1[1] == a2[1];
  if (v10 || (v11 = sub_1AE926D60(), result = 0, (v11 & 1) != 0))
  {
    v13 = v2 == v6 && v4 == v7;
    if (v13 || (v14 = sub_1AE926D60(), result = 0, (v14 & 1) != 0))
    {
      if (v3 == v8 && v5 == v9)
        return 1;
      else
        return sub_1AE926D60();
    }
  }
  return result;
}

uint64_t sub_1AE75BADC(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001AE984390 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001AE97F0B0 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001AE9843B0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_1AE75BC1C(char a1)
{
  unint64_t result;

  result = 0xD000000000000011;
  if (a1)
  {
    if (a1 == 1)
      return 0xD000000000000014;
    else
      return 0xD000000000000018;
  }
  return result;
}

unint64_t sub_1AE75BC7C()
{
  char *v0;

  return sub_1AE75BC1C(*v0);
}

uint64_t sub_1AE75BC84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE75BADC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE75BCA8()
{
  sub_1AE75BE24();
  return sub_1AE926F94();
}

uint64_t sub_1AE75BCD0()
{
  sub_1AE75BE24();
  return sub_1AE926FA0();
}

void InferenceServiceInstanceQualifiedID.encode(to:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1AE4F67EC();
  v2 = v1;
  v3 = sub_1AE501548(&qword_1EED99598);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  sub_1AE4F666C();
  v7 = v6 - v5;
  sub_1AE4F9858(v2, v2[3]);
  sub_1AE75BE24();
  sub_1AE926F4C();
  sub_1AE926C88();
  if (!v0)
  {
    sub_1AE762094();
    sub_1AE762094();
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  sub_1AE4F667C();
}

unint64_t sub_1AE75BE24()
{
  unint64_t result;

  result = qword_1EED99358;
  if (!qword_1EED99358)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95842C, &type metadata for InferenceServiceInstanceQualifiedID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EED99358);
  }
  return result;
}

void InferenceServiceInstanceQualifiedID.hashValue.getter()
{
  sub_1AE4F76E0();
  sub_1AE4F66C4();
  sub_1AE4FC630();
  sub_1AE4F665C();
  sub_1AE4F6708();
  sub_1AE66F8CC();
  sub_1AE4F76D8();
  sub_1AE4F66CC();
  sub_1AE762064();
  swift_bridgeObjectRelease();
  sub_1AE4F905C();
  sub_1AE4FE988();
}

void InferenceServiceInstanceQualifiedID.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1AE4F67EC();
  v3 = v2;
  v5 = v4;
  sub_1AE501548(&qword_1EEDA2518);
  sub_1AE4FB800();
  MEMORY[0x1E0C80A78](v6);
  sub_1AE4F666C();
  sub_1AE4F9858(v3, v3[3]);
  sub_1AE75BE24();
  sub_1AE926F34();
  if (v0)
  {
    sub_1AE4F90EC();
  }
  else
  {
    v7 = sub_1AE7620CC();
    v9 = v8;
    v19 = v7;
    swift_bridgeObjectRetain();
    v10 = sub_1AE7620CC();
    v12 = v11;
    v17 = v10;
    sub_1AE4F66CC();
    v18 = v12;
    v13 = sub_1AE926BB0();
    v15 = v14;
    v16 = v13;
    sub_1AE5062F8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    swift_bridgeObjectRetain();
    sub_1AE4F66CC();
    sub_1AE4F66E8();
    *v5 = v19;
    v5[1] = v9;
    v5[2] = v17;
    v5[3] = v18;
    v5[4] = v16;
    v5[5] = v15;
    sub_1AE4F90EC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1AE4F667C();
}

uint64_t sub_1AE75C070(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000014 && a2 == 0x80000001AE9843D0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_1AE75C0F4()
{
  return 0xD000000000000014;
}

uint64_t sub_1AE75C110(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001AE9843F0 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001AE984410)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1AE75C1F8(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000015;
  else
    return 0xD000000000000010;
}

void sub_1AE75C238()
{
  InferenceServiceInstanceQualifiedID.init(from:)();
}

void sub_1AE75C24C()
{
  InferenceServiceInstanceQualifiedID.encode(to:)();
}

void sub_1AE75C268()
{
  sub_1AE926EC8();
  sub_1AE4F66C4();
  sub_1AE4FC630();
  sub_1AE4F665C();
  sub_1AE4F6708();
  sub_1AE66F8CC();
  sub_1AE4F76D8();
  sub_1AE4F66CC();
  sub_1AE762064();
  swift_bridgeObjectRelease();
  sub_1AE4F905C();
  sub_1AE4FE988();
}

void sub_1AE75C2D0()
{
  sub_1AE75CA38();
}

uint64_t sub_1AE75C2E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE75C070(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1AE75C310()
{
  sub_1AE75C530();
  return sub_1AE926F94();
}

uint64_t sub_1AE75C338()
{
  sub_1AE75C530();
  return sub_1AE926FA0();
}

unint64_t sub_1AE75C360()
{
  char *v0;

  return sub_1AE75C1F8(*v0);
}

uint64_t sub_1AE75C368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE75C110(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE75C38C()
{
  sub_1AE75C56C();
  return sub_1AE926F94();
}

uint64_t sub_1AE75C3B4()
{
  sub_1AE75C56C();
  return sub_1AE926FA0();
}

void InferenceServiceInstanceRequestError.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1AE4F67EC();
  v3 = v2;
  v4 = sub_1AE501548(&qword_1EEDA2520);
  v7 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F90C8();
  v5 = sub_1AE501548(&qword_1EEDA2528);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4F6744();
  sub_1AE4F9858(v3, v3[3]);
  sub_1AE75C530();
  sub_1AE5638F8();
  sub_1AE75C56C();
  sub_1AE926C34();
  sub_1AE926C88();
  if (!v0)
    sub_1AE926C88();
  sub_1AE4FDC10(v1, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  sub_1AE4FD0AC(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_1AE4F667C();
}

unint64_t sub_1AE75C530()
{
  unint64_t result;

  result = qword_1EEDA2530;
  if (!qword_1EEDA2530)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9583DC, &type metadata for InferenceServiceInstanceRequestError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2530);
  }
  return result;
}

unint64_t sub_1AE75C56C()
{
  unint64_t result;

  result = qword_1EEDA2538;
  if (!qword_1EEDA2538)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95838C, &type metadata for InferenceServiceInstanceRequestError.IncorrectInterfaceIdCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2538);
  }
  return result;
}

void InferenceServiceInstanceRequestError.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;

  sub_1AE4F67EC();
  v4 = v3;
  v31 = v5;
  sub_1AE501548(&qword_1EEDA2540);
  sub_1AE4FB800();
  MEMORY[0x1E0C80A78](v6);
  sub_1AE4F666C();
  v9 = v8 - v7;
  v10 = sub_1AE501548(&qword_1EEDA2548);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  sub_1AE4F6744();
  sub_1AE4F9858(v4, v4[3]);
  sub_1AE75C530();
  sub_1AE926F34();
  if (v0)
    goto LABEL_6;
  v30 = v4;
  v32 = v11;
  v12 = sub_1AE926C1C();
  v13 = *(_QWORD *)(v12 + 16);
  v14 = v10;
  v15 = v1;
  if (!v13
    || (sub_1AE50AF34(1, v13, v12, v12 + 32, 0, (2 * v13) | 1),
        v17 = v16,
        v19 = v18,
        swift_bridgeObjectRelease(),
        v17 != v19 >> 1))
  {
    v20 = sub_1AE926988();
    sub_1AE4F6778();
    v22 = v21;
    sub_1AE501548(&qword_1EED99C38);
    *v22 = &type metadata for InferenceServiceInstanceRequestError;
    sub_1AE926B5C();
    sub_1AE92697C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x1E0DEC450], v20);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v1, v10);
    v4 = v30;
LABEL_6:
    v28 = (uint64_t)v4;
    goto LABEL_7;
  }
  sub_1AE75C56C();
  sub_1AE926B50();
  v29 = sub_1AE762114();
  v24 = v23;
  v25 = sub_1AE762114();
  v27 = v26;
  sub_1AE4FDC10(v9, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v15, v14);
  v28 = (uint64_t)v30;
  *v31 = v29;
  v31[1] = v24;
  v31[2] = v25;
  v31[3] = v27;
LABEL_7:
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v28);
  sub_1AE4F667C();
}

uint64_t sub_1AE75C8B8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = 0;
  swift_bridgeObjectRetain();
  return sub_1AE4FBC60();
}

void sub_1AE75C8E8()
{
  InferenceServiceInstanceRequestError.init(from:)();
}

void sub_1AE75C8FC()
{
  InferenceServiceInstanceRequestError.encode(to:)();
}

unint64_t static InferenceServiceInstanceRunEvent.type.getter()
{
  return 0xD000000000000035;
}

uint64_t InferenceServiceInstanceRunEvent.instanceQualifiedId.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  swift_bridgeObjectRetain();
  sub_1AE4FB75C();
  return sub_1AE4FBC60();
}

void InferenceServiceInstanceRunEvent.variant.getter()
{
  sub_1AE762014();
  sub_1AE50ACD8();
  sub_1AE4F6708();
  sub_1AE762074();
  sub_1AE4F76D8();
  sub_1AE50ACD8();
  sub_1AE4F66C4();
  sub_1AE4F6A14();
  sub_1AE4F665C();
  sub_1AE501BAC();
}

uint64_t sub_1AE75C9B4(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000013 && a2 == 0x80000001AE984330)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void sub_1AE75CA38()
{
  sub_1AE4F76E0();
  sub_1AE4F6818();
  sub_1AE4F905C();
  sub_1AE640FB0();
}

unint64_t sub_1AE75CA60()
{
  return 0xD000000000000013;
}

uint64_t sub_1AE75CA80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE75C9B4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1AE75CAA8()
{
  sub_1AE761060();
  return sub_1AE926F94();
}

uint64_t sub_1AE75CAD0()
{
  sub_1AE761060();
  return sub_1AE926FA0();
}

void InferenceServiceInstanceRunEvent.encode(to:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  sub_1AE4F67EC();
  v1 = v0;
  v2 = sub_1AE501548(&qword_1EED99590);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  sub_1AE4F6744();
  sub_1AE4F9858(v1, v1[3]);
  sub_1AE761060();
  sub_1AE5638F8();
  sub_1AE76109C();
  sub_1AE926CC4();
  sub_1AE4FD0AC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_1AE4F667C();
}

void InferenceServiceInstanceRunEvent.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  sub_1AE4F67EC();
  v3 = v2;
  v5 = v4;
  v6 = sub_1AE501548(&qword_1EEDA2550);
  sub_1AE4FB800();
  MEMORY[0x1E0C80A78](v7);
  sub_1AE4F666C();
  v10 = v9 - v8;
  sub_1AE4F9858(v3, v3[3]);
  sub_1AE761060();
  sub_1AE926F34();
  if (!v0)
  {
    sub_1AE7610D8();
    sub_1AE926BEC();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v10, v6);
    *(_OWORD *)v5 = v11;
    *(_OWORD *)(v5 + 16) = v12;
    *(_QWORD *)(v5 + 32) = v13;
    *(_QWORD *)(v5 + 40) = v14;
  }
  sub_1AE4F90EC();
  sub_1AE4F667C();
}

unint64_t sub_1AE75CCC4()
{
  static InferenceServiceInstanceRunEvent.type.getter();
  return 0xD000000000000035;
}

void sub_1AE75CCE4()
{
  InferenceServiceInstanceRunEvent.init(from:)();
}

void sub_1AE75CCF8()
{
  InferenceServiceInstanceRunEvent.encode(to:)();
}

void sub_1AE75CD0C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[13];

  sub_1AE762144();
  v4 = sub_1AE5069D8();
  v5 = sub_1AE50A4D0();
  v7 = type metadata accessor for InferenceServiceInstance(0, v4, v5, v6);
  sub_1AE7537EC(a1, (uint64_t)v8);
  sub_1AE75CFBC(v4, v8);
  *(_QWORD *)(a2 + 24) = v7;
  sub_1AE50608C();
  sub_1AE505E1C();
  sub_1AE507F34();
  sub_1AE50A4D0();
  sub_1AE50A4D0();
  sub_1AE507F34();
  sub_1AE50A4D0();
  sub_1AE50A4D0();
  sub_1AE507F34();
  swift_getAssociatedConformanceWitness();
  sub_1AE762008();
  sub_1AE50A4D0();
  sub_1AE50A4D0();
  sub_1AE762008();
  sub_1AE50A4D0();
  sub_1AE50A4D0();
  sub_1AE5032DC();
}

uint64_t sub_1AE75CF90(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;

  v1[4] = result;
  *v1 = v2;
  return result;
}

void sub_1AE75CFBC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = swift_allocObject();
  sub_1AE75D22C(v3, a2);
  sub_1AE4F6664();
}

void sub_1AE75CFF4(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[12];

  v4 = sub_1AE50608C();
  sub_1AE4F7714();
  sub_1AE505E1C();
  v5 = sub_1AE7621A0();
  v9 = type metadata accessor for InferenceServiceInstance(v5, v6, v7, v8);
  sub_1AE7537EC(a1, (uint64_t)v11);
  sub_1AE75CFBC(v4, v11);
  a2[3] = v9;
  a2[4] = &off_1E5DBEA30;
  *a2 = v10;
}

uint64_t sub_1AE75D0A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v4 = *v1;
  v19 = *(_QWORD *)(*v1 + 80);
  swift_getAssociatedTypeWitness();
  v5 = sub_1AE7620FC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v19 - v8;
  v10 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v19 - v11;
  v13 = (uint64_t)v1 + *(_QWORD *)(v4 + 120);
  sub_1AE4F9094();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v13, v5);
  v14 = sub_1AE761F9C((uint64_t)v9);
  if (v14 == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v16 = 0;
    v17 = 0;
  }
  else
  {
    sub_1AE4FB908((uint64_t)v12, (uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v20, v2, AssociatedConformanceWitness);
    result = sub_1AE509FA4((uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    v16 = v20;
    v17 = v21;
  }
  *(_QWORD *)a1 = v16;
  *(_BYTE *)(a1 + 8) = v17;
  *(_BYTE *)(a1 + 9) = v14 == 1;
  return result;
}

void sub_1AE75D22C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (uint64_t)v2 + *(_QWORD *)(*v2 + 120);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1AE508140(v4, v6, v7, AssociatedTypeWitness);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 128)) = 0;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = a2[4];
  v12 = a2[5];
  v2[2] = *a2;
  v2[3] = v8;
  v2[4] = v9;
  v2[5] = v10;
  v2[6] = v11;
  v2[7] = v12;
  sub_1AE52419C((uint64_t)(a2 + 6), (uint64_t)(v2 + 8));
  v2[13] = a2[11];
  sub_1AE4F66C4();
  swift_bridgeObjectRetain();
  sub_1AE4F6708();
  sub_1AE4F6804();
  sub_1AE75F214();
  sub_1AE753828((uint64_t)a2);
  sub_1AE640FB0();
}

void sub_1AE75D310()
{
  sub_1AE4F76E0();
  sub_1AE926ED4();
  sub_1AE4F905C();
  sub_1AE640FB0();
}

void sub_1AE75D344()
{
  sub_1AE75D310();
}

uint64_t sub_1AE75D34C()
{
  sub_1AE926EC8();
  sub_1AE541644();
  return sub_1AE926F10();
}

uint64_t sub_1AE75D388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v35;

  *(_QWORD *)(v9 + 72) = a7;
  *(_QWORD *)(v9 + 80) = v8;
  *(_BYTE *)(v9 + 300) = a8;
  *(_QWORD *)(v9 + 56) = a5;
  *(_QWORD *)(v9 + 64) = a6;
  *(_QWORD *)(v9 + 40) = a2;
  *(_QWORD *)(v9 + 48) = a4;
  *(_QWORD *)(v9 + 32) = a1;
  v10 = *v8;
  v11 = sub_1AE761F90();
  *(_QWORD *)(v9 + 88) = sub_1AE762150(v11, v12, v13, v14);
  v15 = sub_1AE762198();
  *(_QWORD *)(v9 + 96) = v15;
  *(_QWORD *)(v9 + 104) = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v9 + 112) = sub_1AE4FC554();
  *(_QWORD *)(v9 + 120) = *(_QWORD *)(v10 + 88);
  *(_QWORD *)(v9 + 128) = *(_QWORD *)(v10 + 80);
  sub_1AE762144();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v16 = sub_1AE761F90();
  *(_QWORD *)(v9 + 136) = sub_1AE762150(v16, v17, v18, v19);
  v20 = sub_1AE76218C();
  *(_QWORD *)(v9 + 144) = v20;
  *(_QWORD *)(v9 + 152) = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v9 + 160) = sub_1AE76215C();
  *(_QWORD *)(v9 + 168) = sub_1AE76215C();
  *(_QWORD *)(v9 + 176) = sub_1AE76215C();
  v21 = sub_1AE761F90();
  v24 = type metadata accessor for InferenceMessageRequest(255, v21, v22, v23);
  *(_QWORD *)(v9 + 184) = v24;
  v25 = sub_1AE762180();
  *(_QWORD *)(v9 + 192) = v25;
  *(_QWORD *)(v9 + 200) = *(_QWORD *)(v25 - 8);
  *(_QWORD *)(v9 + 208) = sub_1AE4FC554();
  v26 = sub_1AE761F90();
  v30 = sub_1AE761F84(v26, v27, v28, v29);
  *(_QWORD *)(v9 + 216) = v30;
  *(_QWORD *)(v9 + 224) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(v9 + 232) = sub_1AE4FC554();
  *(_QWORD *)(v9 + 240) = *(_QWORD *)(v24 - 8);
  v31 = sub_1AE4FC554();
  v32 = *v35;
  v33 = v35[1];
  *(_QWORD *)(v9 + 248) = v31;
  *(_QWORD *)(v9 + 256) = v32;
  *(_QWORD *)(v9 + 264) = v33;
  if (qword_1ED30EF48 != -1)
    swift_once();
  *(_QWORD *)(v9 + 272) = qword_1EED93F38;
  return swift_task_switch();
}

uint64_t sub_1AE75D5A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1AE75EDF0(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  sub_1AE4F94EC(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 48), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 16));
  if (!sub_1AE761FA8())
  {
    v14 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 128);
    sub_1AE508140(*(_QWORD *)(v0 + 208), v1, v2, *(_QWORD *)(v0 + 184));
    sub_1AE5071B4(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
    type metadata accessor for InferenceServiceInstance.RunErrorLocalConversion(0, v15, v16, v17);
    sub_1AE5032DC();
  }
  v4 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 144);
  sub_1AE4FCF34(v7, 0);
  sub_1AE4FB908(v5, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
  v10 = *(int *)(v9 + 48);
  *(_DWORD *)(v0 + 296) = v10;
  v11 = v8 + v10;
  *(_QWORD *)(v0 + 16) = v4;
  *(_QWORD *)(v0 + 24) = v3;
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 280) = v12;
  *v12 = v0;
  v12[1] = sub_1AE75D734;
  return sub_1AE75D9FC(*(_QWORD *)(v0 + 176), v11, *(_QWORD *)(v0 + 248), (uint64_t *)(v0 + 16));
}

uint64_t sub_1AE75D734()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1AE505574();
  sub_1AE5062E4(v2);
  *(_QWORD *)(v0 + 288) = v1;
  swift_task_dealloc();
  return sub_1AE4FD190();
}

uint64_t sub_1AE75D788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  sub_1AE761F40();
  v1 = *(_QWORD *)(v0 + 176);
  v2 = v1 + *(int *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 168) + *(int *)(*(_QWORD *)(v0 + 144) + 48);
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 136) - 8);
  sub_1AE4F94EC(*(_QWORD *)(v0 + 168), v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  v5 = *(_BYTE *)(v2 + 8);
  *(_QWORD *)v3 = *(_QWORD *)v2;
  *(_BYTE *)(v3 + 8) = v5;
  if (sub_1AE761FA8())
  {
    v8 = *(_QWORD *)(v0 + 248);
    v34 = *(int *)(v0 + 296);
    v9 = *(_QWORD *)(v0 + 176);
    v30 = *(_QWORD *)(v0 + 184);
    v31 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 160);
    v32 = *(_QWORD *)(v0 + 144);
    v33 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 112);
    v12 = *(_QWORD *)(v0 + 88);
    v14 = *(_QWORD *)(v0 + 32);
    v13 = *(_QWORD *)(v0 + 40);
    sub_1AE4FCF34(v11, 0);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v8, v30);
    sub_1AE4FB908(v14, v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32));
    v15 = v10 + *(int *)(v32 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10, v9, v33);
    v16 = *(_QWORD *)(v9 + v34);
    v17 = *(_BYTE *)(v2 + 8);
    *(_QWORD *)v15 = v16;
    *(_BYTE *)(v15 + 8) = v17;
    *(_QWORD *)v13 = v16;
    *(_BYTE *)(v13 + 8) = v17;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v10, v33);
    sub_1AE53F9C0();
    sub_1AE76216C();
    sub_1AE762164();
    sub_1AE4F67DC();
    swift_task_dealloc();
    sub_1AE4F90A0();
    swift_task_dealloc();
    v18 = (uint64_t (*)(void))sub_1AE5094FC();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 240);
    v35 = *(_QWORD *)(v0 + 184);
    v36 = *(_QWORD *)(v0 + 248);
    v20 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 120);
    v21 = *(_QWORD *)(v0 + 128);
    v23 = *(_QWORD *)(v0 + 104);
    v24 = *(_QWORD *)(v0 + 112);
    v25 = *(_QWORD *)(v0 + 96);
    sub_1AE508140(v24, v6, v7, *(_QWORD *)(v0 + 88));
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
    v27 = type metadata accessor for InferenceServiceInstance.RunErrorLocalConversion(0, v21, v22, v26);
    MEMORY[0x1AF454B70](&unk_1AE9585DC, v27);
    sub_1AE4F6778();
    *v28 = 1;
    sub_1AE4F6928();
    sub_1AE762050(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v36, v35);
    swift_task_dealloc();
    sub_1AE4F90C0();
    sub_1AE4F90A0();
    sub_1AE4F67E4();
    sub_1AE4F67DC();
    sub_1AE4FCE7C();
    sub_1AE53F870();
    v18 = *(uint64_t (**)(void))(v0 + 8);
  }
  return sub_1AE4FBE04(v18);
}

uint64_t sub_1AE75D998()
{
  uint64_t v0;

  sub_1AE76205C(*(_QWORD *)(v0 + 240));
  sub_1AE761F5C();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  sub_1AE4F67DC();
  sub_1AE4FCE7C();
  sub_1AE4FD9A8();
  sub_1AE53F870();
  return sub_1AE761FF0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE75D9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5[20] = a3;
  v5[21] = v4;
  v5[18] = a1;
  v5[19] = a2;
  v5[22] = sub_1AE5069D8();
  sub_1AE50A4D0();
  sub_1AE762144();
  sub_1AE762008();
  sub_1AE50A9B8();
  v5[23] = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[24] = AssociatedTypeWitness;
  v8 = sub_1AE762180();
  v5[25] = v8;
  v5[26] = *(_QWORD *)(v8 - 8);
  v5[27] = sub_1AE4FC554();
  v5[28] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[29] = sub_1AE4FC554();
  v9 = swift_checkMetadataState();
  v5[30] = v9;
  v5[31] = *(_QWORD *)(v9 - 8);
  v5[32] = sub_1AE4F67C0();
  v5[33] = sub_1AE4F7738();
  v5[34] = sub_1AE5069D8();
  v5[35] = sub_1AE50A4D0();
  v10 = swift_getAssociatedTypeWitness();
  v5[36] = v10;
  v5[37] = *(_QWORD *)(v10 - 8);
  v5[38] = sub_1AE4F67C0();
  v5[39] = sub_1AE4F7738();
  v11 = sub_1AE9248DC();
  v5[40] = v11;
  v5[41] = *(_QWORD *)(v11 - 8);
  v5[42] = sub_1AE4FC554();
  v12 = sub_1AE92670C();
  v5[43] = v12;
  v5[44] = *(_QWORD *)(v12 - 8);
  v13 = sub_1AE4FC554();
  v14 = *a4;
  v15 = a4[1];
  v5[45] = v13;
  v5[46] = v14;
  v5[47] = v15;
  if (qword_1ED30EF48 != -1)
    swift_once();
  v5[48] = qword_1EED93F38;
  return sub_1AE4FDD5C();
}

uint64_t sub_1AE75DC38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(ValueMetadata *, unint64_t, unint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;

  v2 = *(_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 168) + *(_QWORD *)(**(_QWORD **)(v0 + 168) + 120);
  sub_1AE4F9094();
  sub_1AE4F94EC(v1, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  LODWORD(v3) = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v1, 1, v3);
  sub_1AE5071B4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((_DWORD)v3 == 1)
  {
    sub_1AE761AA8();
    sub_1AE4F6778();
    sub_1AE4F6928();
    sub_1AE761F24();
    sub_1AE4F90A0();
    sub_1AE4F67E4();
    sub_1AE4F67DC();
    sub_1AE4FCE7C();
    sub_1AE4FD9A8();
    sub_1AE53F870();
    sub_1AE53F9C0();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v30 = (_QWORD *)(v0 + 16);
    v31 = (_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 160);
    sub_1AE92691C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1AE50ACD8();
    swift_bridgeObjectRetain();
    sub_1AE925F74();
    swift_bridgeObjectRelease();
    sub_1AE50ACD8();
    sub_1AE4F66C4();
    sub_1AE925F74();
    sub_1AE4F665C();
    sub_1AE5FBA48();
    sub_1AE4F6648();
    sub_1AE925F74();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v11 = v6 + *(int *)(sub_1AE761F84(AssociatedTypeWitness, v8, v9, v10) + 28);
    v27 = *(_QWORD *)(v11 + 16);
    v26 = *(unsigned __int8 *)(v11 + 24);
    if (qword_1ED30EE80 != -1)
      swift_once();
    v25 = *(_QWORD *)(v0 + 336);
    v28 = *(_QWORD *)(v0 + 328);
    v29 = *(_QWORD *)(v0 + 320);
    sub_1AE4F9094();
    sub_1AE52419C((uint64_t)&qword_1ED318D20, (uint64_t)v30);
    v13 = *(_QWORD *)(v0 + 40);
    v12 = *(_QWORD *)(v0 + 48);
    sub_1AE4F9858(v30, v13);
    v14 = *(uint64_t (**)(ValueMetadata *, unint64_t, unint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v12 + 8);
    v15 = sub_1AE761AE4();
    v16 = v14(&type metadata for InferenceServiceInstanceRunEvent, 0xD000000000000019, 0x80000001AE984450, &type metadata for InferenceServiceInstanceRunEvent, v15, v13, v12);
    *(_QWORD *)(v0 + 392) = v16;
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v30);
    sub_1AE52419C((uint64_t)&qword_1ED318D20, (uint64_t)v31);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 88);
    sub_1AE4F9858(v31, v17);
    sub_1AE9248AC();
    if (v26)
      v19 = 0;
    else
      v19 = v27;
    v20 = sub_1AE65CB04(v19);
    (*(void (**)(ValueMetadata *, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v18 + 16))(&type metadata for InferenceServiceInstanceRunEvent, v25, v16, 0xD000000000000019, 0x80000001AE984450, v20, &type metadata for InferenceServiceInstanceRunEvent, v15, v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v25, v29);
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v31);
    swift_bridgeObjectRelease();
    if (swift_dynamicCastMetatype())
    {
      v21 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 432) = v21;
      *v21 = v0;
      v21[1] = sub_1AE75E388;
      return sub_1AE75E700(*(_QWORD *)(v0 + 256), v16, *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376), *(uint64_t **)(v0 + 168), *(_QWORD *)(v0 + 160));
    }
    else
    {
      sub_1AE92691C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1AE50ACD8();
      sub_1AE4FB75C();
      sub_1AE5FBA48();
      sub_1AE4F6648();
      sub_1AE50ACD8();
      sub_1AE4FB75C();
      sub_1AE5FBA48();
      sub_1AE4F6648();
      sub_1AE5FBA48();
      sub_1AE4F6648();
      sub_1AE925F74();
      sub_1AE505390();
      *(_QWORD *)(v0 + 400) = swift_getAssociatedConformanceWitness();
      static EventLogger.startInterval<A>(ofType:named:parent:)();
      v23 = v22;
      *(_QWORD *)(v0 + 408) = v22;
      sub_1AE4F6648();
      v24 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 416) = v24;
      *v24 = v0;
      v24[1] = sub_1AE75E12C;
      return sub_1AE75E700(*(_QWORD *)(v0 + 264), v23, *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376), *(uint64_t **)(v0 + 168), *(_QWORD *)(v0 + 160));
    }
  }
}

uint64_t sub_1AE75E12C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1AE505574();
  sub_1AE5062E4(v2);
  *(_QWORD *)(v0 + 424) = v1;
  swift_task_dealloc();
  return sub_1AE4FD190();
}

uint64_t sub_1AE75E17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t (*v34)(void);

  sub_1AE761F40();
  v19 = v17[27];
  (*(void (**)(_QWORD))(v17[23] + 40))(v17[30]);
  if (sub_1AE761F9C(v19) == 1)
  {
    sub_1AE76205C(v17[26]);
    if (qword_1ED31BCB0 != -1)
      swift_once();
    v20 = sub_1AE925B6C();
    sub_1AE4FB608(v20, (uint64_t)qword_1ED31BC90);
    v21 = sub_1AE925B54();
    v22 = sub_1AE9265F8();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1AE4F2000, v21, v22, "InferenceServiceInstance: runHelper: shouldLogCustomEvent but result.runEvent is nil", v23, 2u);
      MEMORY[0x1AF454C78](v23, -1, -1);
    }

  }
  else
  {
    v24 = v17[28];
    sub_1AE500EA0(v17[29], v17[27], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 32));
    static EventLogger.endInterval<A>(with:_:)();
    sub_1AE762120(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
  }
  v25 = v17[31];
  sub_1AE761F78();
  sub_1AE761F78();
  sub_1AE5071B4(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  v26 = v17[51];
  v27 = v17[49];
  v28 = v17[38];
  v29 = v17[36];
  sub_1AE505E3C();
  v31 = v17[18];
  v30 = v17[19];
  v32 = sub_1AE505390();
  v33(v32);
  sub_1AE74A8AC(v28, v26, v29, v31);
  *(_QWORD *)v30 = a16;
  *(_BYTE *)(v30 + 8) = a17;
  sub_1AE75E584(v27, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1AE4FCE7C();
  sub_1AE4FD9A8();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1AE76216C();
  sub_1AE762164();
  v34 = (uint64_t (*)(void))sub_1AE5094FC();
  return sub_1AE4FBE04(v34);
}

uint64_t sub_1AE75E388()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1AE505574();
  sub_1AE5062E4(v2);
  *(_QWORD *)(v0 + 440) = v1;
  swift_task_dealloc();
  return sub_1AE4FD190();
}

uint64_t sub_1AE75E3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);

  sub_1AE761F40();
  v19 = v17[31];
  sub_1AE761F78();
  sub_1AE761F78();
  sub_1AE5071B4(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
  v20 = v17[49];
  v22 = v17[38];
  v21 = v17[39];
  v23 = v17[36];
  sub_1AE505E3C();
  v25 = v17[18];
  v24 = v17[19];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v22, v21, v23);
  sub_1AE74A8AC(v22, v20, v23, v25);
  *(_QWORD *)v24 = a16;
  *(_BYTE *)(v24 + 8) = a17;
  sub_1AE75E584(v20, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1AE4F67DC();
  sub_1AE4FCE7C();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1AE76216C();
  sub_1AE762164();
  v27 = (uint64_t (*)(void))sub_1AE5094FC();
  return sub_1AE4FBE04(v27);
}

uint64_t sub_1AE75E4BC()
{
  uint64_t v0;

  sub_1AE76212C();
  sub_1AE761F24();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  sub_1AE4F67DC();
  sub_1AE4FCE7C();
  sub_1AE4FD9A8();
  sub_1AE53F870();
  sub_1AE53F9C0();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE75E520()
{
  uint64_t v0;

  sub_1AE76212C();
  sub_1AE761F24();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  sub_1AE4F67DC();
  sub_1AE4FCE7C();
  sub_1AE4FD9A8();
  sub_1AE53F870();
  sub_1AE53F9C0();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE75E584(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, char *, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[6];

  v20 = sub_1AE9248DC();
  v4 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  v12 = a2[7];
  v24[0] = v7;
  v24[1] = v8;
  v24[2] = v9;
  v24[3] = v10;
  v24[4] = v11;
  v24[5] = v12;
  v13 = qword_1ED30EE80;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13 != -1)
    swift_once();
  swift_beginAccess();
  sub_1AE52419C((uint64_t)&qword_1ED318D20, (uint64_t)v21);
  v14 = v22;
  v15 = v23;
  sub_1AE4F9858(v21, v22);
  sub_1AE9248AC();
  v16 = *(void (**)(uint64_t, char *, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v15 + 24);
  v17 = sub_1AE761AE4();
  v16(a1, v6, v24, &type metadata for InferenceServiceInstanceRunEvent, v17, v14, v15);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v20);
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE75E700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6[102] = a6;
  v6[101] = a5;
  v6[100] = a4;
  v6[99] = a3;
  v6[93] = a2;
  v6[87] = a1;
  v7 = *a5;
  v6[103] = *(_QWORD *)(*a5 + 88);
  v6[104] = *(_QWORD *)(v7 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for InferenceMessageRequest(0, AssociatedTypeWitness, v9, v10);
  v6[105] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[106] = v12;
  v6[107] = *(_QWORD *)(v12 + 64);
  v6[108] = swift_task_alloc();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v13 = swift_getAssociatedTypeWitness();
  v6[109] = v13;
  v6[110] = *(_QWORD *)(v13 - 8);
  v6[111] = swift_task_alloc();
  if (qword_1ED30EF48 != -1)
    swift_once();
  v6[112] = qword_1EED93F38;
  return swift_task_switch();
}

uint64_t sub_1AE75E8A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[10];
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  sub_1AE761F40();
  v19 = v1;
  v20 = v2;
  v18 = v0;
  v3 = v0[108];
  v4 = v0[106];
  v5 = v0[105];
  v16 = v0[104];
  v14 = v0[107];
  v15 = v0[103];
  v6 = v0[102];
  v7 = v0[101];
  v8 = v0[100];
  v9 = v0[93];
  v17[0] = v0[99];
  v17[1] = v8;
  type metadata accessor for InferenceServiceRunContext();
  swift_allocObject();
  sub_1AE4F66CC();
  swift_retain();
  v10 = sub_1AE75A800((uint64_t)v17, v9);
  v0[113] = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  v11 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v12 = (char *)swift_allocObject();
  v0[114] = v12;
  *((_QWORD *)v12 + 2) = v16;
  *((_QWORD *)v12 + 3) = v15;
  *((_QWORD *)v12 + 4) = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(&v12[v11], v3, v5);
  *(_QWORD *)&v12[(v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8] = v10;
  swift_retain();
  sub_1AE4F66E0();
  swift_asyncLet_begin();
  return swift_asyncLet_get_throwing();
}

uint64_t sub_1AE75EA20()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 920) = v0;
  if (v0)
    return swift_asyncLet_finish();
  else
    return sub_1AE4FD0B8();
}

uint64_t sub_1AE75EA50()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[110] + 16))(v0[87], v0[111], v0[109]);
  sub_1AE4F66E0();
  sub_1AE75A2F0(0);
  sub_1AE4FC564();
  return swift_asyncLet_finish();
}

uint64_t sub_1AE75EAC8()
{
  return sub_1AE4FD0B8();
}

uint64_t sub_1AE75EAD8()
{
  uint64_t (*v0)(void);

  sub_1AE76203C();
  sub_1AE4FC564();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  v0 = (uint64_t (*)(void))sub_1AE5094FC();
  return sub_1AE4FC8D4(v0);
}

uint64_t sub_1AE75EB0C()
{
  return sub_1AE4FD0B8();
}

uint64_t sub_1AE75EB1C()
{
  uint64_t v0;

  sub_1AE76203C();
  sub_1AE4FC564();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  return sub_1AE4FC8D4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE75EB54(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v5 = *a2;
  v4[9] = *(_QWORD *)(*a2 + 88);
  v4[10] = *(_QWORD *)(v5 + 80);
  v4[11] = swift_getAssociatedTypeWitness();
  v6 = sub_1AE92670C();
  v4[12] = v6;
  v4[13] = *(_QWORD *)(v6 - 8);
  v4[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1AE75EBEC()
{
  if (qword_1ED30EF48 != -1)
    swift_once();
  return sub_1AE4F90B4();
}

uint64_t sub_1AE75EC44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[13];
  v1 = v0[14];
  v3 = v0[6] + *(_QWORD *)(*(_QWORD *)v0[6] + 120);
  sub_1AE4F9094();
  sub_1AE4F94EC(v1, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  return sub_1AE4FDD5C();
}

uint64_t sub_1AE75ECB0()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v3;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t);

  result = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v0[14], 1, v0[11]);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v3 = (_QWORD *)sub_1AE4FC56C();
    v0[15] = v3;
    *v3 = v0;
    v3[1] = sub_1AE75ED50;
    return v4(v0[5], v0[7], v0[8], v0[11], AssociatedConformanceWitness);
  }
  return result;
}

uint64_t sub_1AE75ED50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  sub_1AE505574();
  sub_1AE5062E4(v2);
  *(_QWORD *)(v0 + 128) = v1;
  swift_task_dealloc();
  if (v1)
    return sub_1AE4FD190();
  sub_1AE5099D4(*(_QWORD *)(*(_QWORD *)(v0 + 88) - 8));
  sub_1AE4F90C0();
  v4 = (uint64_t (*)(void))sub_1AE5094FC();
  return sub_1AE4FC8E4(v4);
}

uint64_t sub_1AE75EDB8()
{
  uint64_t v0;

  sub_1AE5099D4(*(_QWORD *)(*(_QWORD *)(v0 + 88) - 8));
  sub_1AE4F90C0();
  return sub_1AE4F90A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE75EDF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  sub_1AE7621A0();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  if (sub_1AE762174() == a1 && v4 == a2)
    return swift_bridgeObjectRelease();
  v6 = sub_1AE926D60();
  result = sub_1AE4F66E8();
  if ((v6 & 1) == 0)
  {
    sub_1AE4FB75C();
    v8 = sub_1AE762174();
    v10 = v9;
    sub_1AE761178();
    sub_1AE4F6778();
    *v11 = a1;
    v11[1] = a2;
    v11[2] = v8;
    v11[3] = v10;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1AE75EEFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 16);
  if (v1)
  {
    sub_1AE4FB75C();
    v2 = 32;
    do
    {
      swift_unknownObjectRetain();
      sub_1AE75EFC0();
      swift_unknownObjectRelease();
      v2 += 16;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1AE75EFC0()
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AE75D0A0((uint64_t)&v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE75F040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = v3;
  *(_QWORD *)(v4 + 16) = a2;
  v6 = sub_1AE924918();
  *(_QWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 56) = sub_1AE4FC554();
  *(_OWORD *)(v4 + 64) = *(_OWORD *)a1;
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(a1 + 16);
  if (qword_1ED30EF48 != -1)
    swift_once();
  *(_QWORD *)(v4 + 88) = qword_1EED93F38;
  return sub_1AE4FD190();
}

uint64_t sub_1AE75F0D4()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(int **)(v0 + 16);
  sub_1AE92490C();
  v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v2;
  *v2 = v0;
  v2[1] = sub_1AE75F12C;
  return sub_1AE4F90A8(v4);
}

uint64_t sub_1AE75F12C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1AE505574();
  sub_1AE5062E4(v2);
  *(_QWORD *)(v0 + 104) = v1;
  swift_task_dealloc();
  return sub_1AE4FD190();
}

uint64_t sub_1AE75F17C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  sub_1AE75EEFC();
  sub_1AE509FA4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1AE4F90A0();
  v3 = (uint64_t (*)(void))sub_1AE5094FC();
  return sub_1AE761FF0(v3);
}

uint64_t sub_1AE75F1E0()
{
  uint64_t v0;

  sub_1AE5099D4(*(_QWORD *)(v0 + 48));
  sub_1AE4F90C0();
  return sub_1AE4F90A8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1AE75F214()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1AE4F67EC();
  v3 = v2;
  v4 = sub_1AE924918();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F90C8();
  v6 = sub_1AE92490C();
  v3(v6);
  if (!v0)
    sub_1AE75EEFC();
  sub_1AE4FDC10(v1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_1AE4F667C();
}

uint64_t sub_1AE75F2BC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[7] = a1;
  v3[8] = v2;
  v4 = a2[1];
  v3[9] = *a2;
  v3[10] = v4;
  if (qword_1ED30EF48 != -1)
    swift_once();
  v3[11] = qword_1EED93F38;
  return sub_1AE4F90B4();
}

uint64_t sub_1AE75F324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  sub_1AE75D0A0(v0 + 40);
  v5 = 256;
  if (!*(_BYTE *)(v0 + 49))
    v5 = 0;
  v6 = v5 | *(unsigned __int8 *)(v0 + 48);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 24) = v6;
  *(_QWORD *)(v0 + 32) = v4;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v7;
  v7[2] = v3;
  v7[3] = v4;
  v7[4] = v2;
  v7[5] = v1;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v8;
  *v8 = v0;
  v8[1] = sub_1AE75F3DC;
  return sub_1AE75F040(v0 + 16, (uint64_t)&unk_1EEDA2610, (uint64_t)v7);
}

uint64_t sub_1AE75F3DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_1AE505574();
  sub_1AE5062E4(v3);
  *(_QWORD *)(v0 + 112) = v1;
  swift_task_dealloc();
  if (v1)
    return sub_1AE4FD190();
  swift_task_dealloc();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1AE75F438()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_1AE4F90A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE75F464(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v4[9] = *a1;
  if (qword_1ED30EF48 != -1)
    swift_once();
  v4[10] = qword_1EED93F38;
  return swift_task_switch();
}

uint64_t sub_1AE75F4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(void);

  v4[4] = v4[5];
  v5 = v4[6];
  v6 = type metadata accessor for InferenceServiceInstance(0, *(_QWORD *)(v4[9] + 80), *(_QWORD *)(v4[9] + 88), a4);
  if ((sub_1AE7642F0(v6, (uint64_t)&off_1E5DBEA30) & 1) != 0)
  {
    if ((v5 & 1) == 0)
      sub_1AE75FF28();
  }
  else if ((v5 & 1) != 0)
  {
    v7 = v4[8];
    v4[2] = v4[7];
    v4[3] = v7;
    v8 = (_QWORD *)swift_task_alloc();
    v4[11] = (uint64_t)v8;
    *v8 = v4;
    v8[1] = sub_1AE75F584;
    return sub_1AE75F5E4(v4 + 2);
  }
  v10 = (uint64_t (*)(void))sub_1AE5094FC();
  return sub_1AE4FC8E4(v10);
}

uint64_t sub_1AE75F584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_1AE505574();
  sub_1AE5062E4(v3);
  *(_QWORD *)(v0 + 96) = v1;
  swift_task_dealloc();
  if (v1)
    return sub_1AE4FD190();
  else
    return sub_1AE4FC8E4(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1AE75F5D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1AE75F5E4(uint64_t *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2[5] = v1;
  v4 = *v1;
  sub_1AE501548(&qword_1ED318B50);
  v2[6] = sub_1AE4FC554();
  v2[7] = *(_QWORD *)(v4 + 88);
  v2[8] = *(_QWORD *)(v4 + 80);
  sub_1AE50608C();
  sub_1AE505E1C();
  v5 = sub_1AE7621A0();
  v9 = type metadata accessor for InferenceServiceConfig(v5, v6, v7, v8);
  v2[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[10] = v10;
  v2[11] = *(_QWORD *)(v10 + 64);
  v2[12] = sub_1AE7620DC();
  v2[13] = swift_task_alloc();
  v2[14] = sub_1AE50608C();
  v11 = sub_1AE762198();
  v2[15] = v11;
  v2[16] = *(_QWORD *)(v11 - 8);
  v12 = sub_1AE4FC554();
  v13 = *a1;
  v14 = a1[1];
  v2[17] = v12;
  v2[18] = v13;
  v2[19] = v14;
  if (qword_1ED30EF48 != -1)
    swift_once();
  v2[20] = qword_1EED93F38;
  return swift_task_switch();
}

uint64_t sub_1AE75F73C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int8x16_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 40) + *(_QWORD *)(**(_QWORD **)(v0 + 40) + 120);
  sub_1AE4F9094();
  sub_1AE4F94EC(v1, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  LODWORD(v3) = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v1, 1, v3);
  sub_1AE5071B4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((_DWORD)v3 == 1)
  {
    sub_1AE4F9858((_QWORD *)(*(_QWORD *)(v0 + 40) + 64), *(_QWORD *)(*(_QWORD *)(v0 + 40) + 88));
    sub_1AE4FB75C();
    sub_1AE4F6708();
    sub_1AE4F6804();
    sub_1AE754EDC();
    v5 = *(_QWORD *)(v0 + 40);
    sub_1AE4F67AC();
    sub_1AE4F76D8();
    sub_1AE4F6648();
    v6 = *(_QWORD *)(*(_QWORD *)v5 + 128);
    *(_QWORD *)(v0 + 168) = v6;
    v7 = *(_QWORD *)(v5 + v6);
    if (v7)
      goto LABEL_4;
    v28 = *(_QWORD *)(v0 + 144);
    v29 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 72);
    v25 = v11;
    v26 = v9;
    v13 = *(_QWORD *)(v0 + 40);
    v12 = *(_QWORD *)(v0 + 48);
    v30 = v12;
    v14 = sub_1AE926328();
    v27 = *(int8x16_t *)(v0 + 56);
    sub_1AE508140(v12, v15, v16, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v8, v11);
    v17 = qword_1EED93F38;
    v18 = sub_1AE753578();
    v19 = (*(unsigned __int8 *)(v10 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v20 = (int8x16_t *)swift_allocObject();
    v20[1].i64[0] = v17;
    v20[1].i64[1] = v18;
    v20[2] = vextq_s8(v27, v27, 8uLL);
    v20[3].i64[0] = v28;
    v20[3].i64[1] = v29;
    v20[4].i64[0] = v13;
    (*(void (**)(__int8 *, uint64_t, uint64_t))(v10 + 32))(&v20->i8[v19], v26, v25);
    sub_1AE4F6804();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1AE75B77C(v30, (uint64_t)&unk_1EEDA2600, (uint64_t)v20);
    *(_QWORD *)(v5 + v6) = v21;
    swift_release();
    v7 = *(_QWORD *)(v5 + v6);
    if (v7)
    {
LABEL_4:
      *(_QWORD *)(v0 + 176) = v7;
      sub_1AE4F66E0();
      v22 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 184) = v22;
      sub_1AE501548((uint64_t *)&unk_1ED319C60);
      *v22 = v0;
      v22[1] = sub_1AE75FA24;
      return sub_1AE926334();
    }
    sub_1AE761FC0();
    sub_1AE762138();
  }
  sub_1AE7620EC();
  sub_1AE4F90C0();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  v24 = (uint64_t (*)(void))sub_1AE5094FC();
  return v24();
}

uint64_t sub_1AE75FA24()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1AE505574();
  sub_1AE5062E4(v2);
  *(_QWORD *)(v0 + 192) = v1;
  swift_task_dealloc();
  swift_release();
  return sub_1AE4FD190();
}

uint64_t sub_1AE75FA80()
{
  uint64_t (*v0)(void);

  sub_1AE761FC0();
  sub_1AE762138();
  sub_1AE7620EC();
  sub_1AE4F90C0();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  v0 = (uint64_t (*)(void))sub_1AE5094FC();
  return sub_1AE4FC8D4(v0);
}

uint64_t sub_1AE75FABC()
{
  uint64_t v0;

  sub_1AE76205C(*(_QWORD *)(v0 + 80));
  swift_task_dealloc();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  sub_1AE4F67DC();
  return sub_1AE4FC8E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE75FB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v8 = *a6;
  v7[9] = *(_QWORD *)(*a6 + 88);
  v7[10] = *(_QWORD *)(v8 + 80);
  v7[11] = swift_getAssociatedTypeWitness();
  v9 = sub_1AE92670C();
  v7[12] = v9;
  v7[13] = *(_QWORD *)(v9 - 8);
  v7[14] = swift_task_alloc();
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  if (qword_1ED30EF48 != -1)
    swift_once();
  v7[17] = qword_1EED93F38;
  return swift_task_switch();
}

uint64_t sub_1AE75FBF8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD, uint64_t);

  type metadata accessor for InferenceServiceInitContext();
  swift_allocObject();
  sub_1AE4F66CC();
  swift_retain();
  v1 = sub_1AE75A7B4();
  v0[18] = v1;
  v2 = (_QWORD *)sub_1AE4FC56C();
  v0[19] = v2;
  *v2 = v0;
  v2[1] = sub_1AE75FCA8;
  return v4(v0[16], v0[8], v1);
}

uint64_t sub_1AE75FCA8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1AE505574();
  sub_1AE5062E4(v2);
  *(_QWORD *)(v0 + 160) = v1;
  swift_task_dealloc();
  return sub_1AE4FD190();
}

uint64_t sub_1AE75FCF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);

  v1 = v0[15];
  v3 = v0[13];
  v2 = v0[14];
  v4 = v0[7];
  sub_1AE4FCF34(v0[16], 0);
  v5 = sub_1AE505390();
  sub_1AE500EA0(v5, v6, v7);
  v8 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 120);
  sub_1AE4FFE80();
  sub_1AE500EA0(v8, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40));
  swift_endAccess();
  sub_1AE4F66E0();
  sub_1AE75A2F0(0);
  sub_1AE4FC564();
  sub_1AE500EA0(v2, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  if (sub_1AE761F9C(v2))
  {
    swift_release();
    v9 = sub_1AE50A9B8();
    v10(v9);
  }
  else
  {
    v11 = v0[13];
    v12 = v0[11];
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v12, AssociatedConformanceWitness);
    v15 = v0[14];
    if (v14)
    {
      v16 = v0[7];
      sub_1AE762120(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
      swift_retain();
      sub_1AE761050((uint64_t)sub_1AE761A3C, v16);
      swift_release();
      sub_1AE4FC564();
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t))(v11 + 8))(v15);
    }
  }
  swift_task_dealloc();
  sub_1AE4F90C0();
  sub_1AE4F90A0();
  v17 = (uint64_t (*)(void))sub_1AE5094FC();
  return sub_1AE761FFC(v17);
}

uint64_t sub_1AE75FE8C()
{
  uint64_t v0;

  swift_release();
  sub_1AE4F90C0();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  return sub_1AE4FC8D4(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1AE75FED0()
{
  sub_1AE75F214();
}

uint64_t sub_1AE75FF28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  _BYTE v12[24];

  v1 = *v0;
  swift_getAssociatedTypeWitness();
  v2 = sub_1AE7620FC();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v12[-v7];
  v9 = (uint64_t)v0 + *(_QWORD *)(v1 + 120);
  sub_1AE4F9094();
  sub_1AE4F94EC((uint64_t)v8, v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  v10 = sub_1AE761F9C((uint64_t)v8);
  result = sub_1AE4FDC10((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  if (v10 != 1)
  {
    sub_1AE4FCF34((uint64_t)v6, 1);
    sub_1AE4FFE80();
    sub_1AE4F94EC(v9, (uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40));
    return swift_endAccess();
  }
  return result;
}

void sub_1AE760044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1AE4F665C();
  sub_1AE4F6648();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 64);
  swift_bridgeObjectRelease();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_getAssociatedTypeWitness();
  v2 = sub_1AE762198();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  sub_1AE4F6624();
}

uint64_t sub_1AE7600E0()
{
  sub_1AE760044();
  return swift_deallocClassInstance();
}

uint64_t sub_1AE760104@<X0>(uint64_t a1@<X8>)
{
  return sub_1AE75D0A0(a1);
}

uint64_t sub_1AE760124(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1AE6146CC;
  return sub_1AE75F2BC(a1, a2);
}

uint64_t sub_1AE760184(uint64_t a1, uint64_t a2)
{
  return sub_1AE75EDF0(a1, a2);
}

uint64_t sub_1AE7601A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  char v13;
  _QWORD *v14;
  uint64_t v15;

  v13 = a8 & 1;
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v14;
  *v14 = v8;
  v14[1] = sub_1AE6146CC;
  return sub_1AE75D388(a1, a2, v15, a4, a5, a6, a7, v13);
}

void sub_1AE760250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v18 + 224) = a17;
  *(_QWORD *)(v18 + 232) = v17;
  *(_QWORD *)(v18 + 208) = a15;
  *(_QWORD *)(v18 + 216) = a16;
  *(_QWORD *)(v18 + 192) = a13;
  *(_QWORD *)(v18 + 200) = a14;
  *(_QWORD *)(v18 + 176) = a11;
  *(_QWORD *)(v18 + 184) = a12;
  *(_QWORD *)(v18 + 168) = a10;
  *(_OWORD *)(v18 + 152) = a9;
  *(_BYTE *)(v18 + 424) = a7;
  *(_QWORD *)(v18 + 136) = a5;
  *(_QWORD *)(v18 + 144) = a6;
  *(_QWORD *)(v18 + 120) = a3;
  *(_QWORD *)(v18 + 128) = a4;
  *(_QWORD *)(v18 + 104) = a1;
  *(_QWORD *)(v18 + 112) = a2;
  v19 = *v17;
  *(_QWORD *)(v18 + 240) = *(_QWORD *)(*v17 + 88);
  *(_QWORD *)(v18 + 248) = *(_QWORD *)(v19 + 80);
  sub_1AE50608C();
  sub_1AE505E1C();
  v20 = sub_1AE50608C();
  v21 = sub_1AE762144();
  *(_QWORD *)(v18 + 256) = type metadata accessor for InferenceMessageResponse(v21, v22, v23, v24);
  *(_QWORD *)(v18 + 264) = sub_1AE76218C();
  *(_QWORD *)(v18 + 272) = sub_1AE7620DC();
  *(_QWORD *)(v18 + 280) = swift_task_alloc();
  v25 = sub_1AE50608C();
  v26 = sub_1AE505E1C();
  *(_QWORD *)(v18 + 16) = v20;
  *(_QWORD *)(v18 + 24) = v25;
  *(_QWORD *)(v18 + 32) = a12;
  *(_QWORD *)(v18 + 40) = a13;
  *(_QWORD *)(v18 + 48) = v26;
  *(_QWORD *)(v18 + 56) = a14;
  *(_QWORD *)(v18 + 64) = a15;
  *(_QWORD *)(v18 + 72) = a16;
  *(_QWORD *)(v18 + 80) = a17;
  sub_1AE7621A0();
  type metadata accessor for InferenceMessageRemoteServerResponse();
}

void sub_1AE760400(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[34] = a1;
  v1[35] = *(_QWORD *)(a1 - 8);
  v1[36] = sub_1AE4FC554();
  v1[37] = type metadata accessor for InferenceMessageResponseError(255, v2, v3, v4);
  sub_1AE5032DC();
}

uint64_t sub_1AE760438()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;

  v2 = sub_1AE926F28();
  v1[38] = v2;
  v1[39] = *(_QWORD *)(v2 - 8);
  v1[40] = sub_1AE4F67C0();
  v1[41] = sub_1AE4F7738();
  v1[42] = sub_1AE4F7738();
  v3 = sub_1AE50608C();
  v7 = sub_1AE761F84(v3, v4, v5, v6);
  v1[43] = v7;
  v1[44] = *(_QWORD *)(v7 - 8);
  v8 = sub_1AE4FC554();
  v9 = *v12;
  v10 = v12[1];
  v1[45] = v8;
  v1[46] = v9;
  v1[47] = v10;
  if (qword_1ED30EF48 != -1)
    swift_once();
  *(_QWORD *)(v0 + 400) = qword_1EED93F38;
  return swift_task_switch();
}

uint64_t sub_1AE76050C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v1 = sub_1AE75EDF0(v0[16], v0[17]);
  v11 = v0[30];
  v12 = v0[31];
  v2 = v0[22];
  v4 = v0[20];
  v3 = v0[21];
  v6 = v0[14];
  v5 = v0[15];
  v13 = (void *)MEMORY[0x1AF454348](v1);
  sub_1AE7609C4(v4, v6, v5, v12, v11, v3, v2);
  v0[51] = 0;
  v8 = v0[48];
  v7 = v0[49];
  objc_autoreleasePoolPop(v13);
  v0[11] = v8;
  v0[12] = v7;
  v9 = (_QWORD *)swift_task_alloc();
  v0[52] = (uint64_t)v9;
  *v9 = v0;
  v9[1] = sub_1AE760684;
  return sub_1AE760AD4(v0[44], v0[47], v0 + 11);
}

uint64_t sub_1AE760684()
{
  swift_task_dealloc();
  return sub_1AE4F90B4();
}

void sub_1AE7606D4()
{
  _QWORD *v0;
  int EnumCaseMultiPayload;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  sub_1AE4F94EC(v0[43], v0[44], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0[41] + 16));
  sub_1AE50A9B8();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v2 = v0[43];
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0[39] - 8) + 32))(v0[38], v2);
  }
  else
  {
    v3 = v0[38];
    v5 = v0[34];
    v4 = v0[35];
    v6 = *(int *)(v0[33] + 48);
    v7 = v4 + v6;
    v8 = v2 + v6;
    sub_1AE76210C(v4, v2);
    v9 = *(_BYTE *)(v8 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_BYTE *)(v7 + 8) = v9;
    sub_1AE76210C(v5, v4);
    sub_1AE76210C(v3, v5);
  }
  v10 = swift_storeEnumTagMultiPayload();
  MEMORY[0x1AF454348](v10);
  sub_1AE50A9B8();
  sub_1AE760E08();
}

uint64_t sub_1AE7607F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v11 = v9[46];
  v12 = v9[44];
  if (v8)
  {
    v14 = v9[37];
    v13 = v9[38];
    sub_1AE7621AC(a1, a2, a3, a4, a5, a6, a7, a8, v38, v39, v40, v41, v42, v43);
    v15 = sub_1AE4F7714();
    v16(v15);
    sub_1AE762050(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v10);
    sub_1AE761FD8();
    sub_1AE4F90C0();
    sub_1AE4F90A0();
    sub_1AE4F67DC();
    sub_1AE4FCE7C();
    sub_1AE4FD9A8();
    sub_1AE53F870();
    v17 = (uint64_t (*)(void))v9[1];
  }
  else
  {
    v18 = v9[42];
    v44 = v9[41];
    v20 = v9[37];
    v19 = v9[38];
    sub_1AE7621AC(a1, a2, a3, a4, a5, a6, a7, a8, v38, v39, v40, v41, v42, v43);
    sub_1AE762050(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v10);
    sub_1AE4FB908(v18, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 32));
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v22 = v9[42];
    if (EnumCaseMultiPayload == 1)
    {
      v23 = v9[40];
      v24 = v9[41];
      v25 = v9[13];
      *(_QWORD *)v25 = v46;
      *(_QWORD *)(v25 + 8) = v47;
      *(_QWORD *)(v25 + 16) = 0;
      *(_BYTE *)(v25 + 24) = 0x80;
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    }
    else
    {
      v26 = v9[34];
      v27 = v9[35];
      v28 = v9[32];
      v29 = v9[33];
      v30 = v9[13];
      v31 = *(int *)(v29 + 48);
      v32 = v27 + v31;
      v33 = (uint64_t *)(v22 + v31);
      v45 = *(_QWORD *)(v28 - 8);
      v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32);
      v34(v27, v22, v28);
      v35 = *v33;
      LOBYTE(v33) = *((_BYTE *)v33 + 8);
      *(_QWORD *)v32 = v35;
      *(_BYTE *)(v32 + 8) = (_BYTE)v33;
      v36 = v26 + *(int *)(v29 + 48);
      v34(v26, v27, v28);
      *(_QWORD *)v36 = v35;
      *(_BYTE *)(v36 + 8) = (_BYTE)v33;
      *(_QWORD *)v30 = v46;
      *(_QWORD *)(v30 + 8) = v47;
      *(_QWORD *)(v30 + 16) = v35;
      *(_BYTE *)(v30 + 24) = (_BYTE)v33;
      sub_1AE509FA4(v26, *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8));
    }
    swift_task_dealloc();
    sub_1AE4F90C0();
    sub_1AE4F90A0();
    sub_1AE4F67E4();
    sub_1AE4F67DC();
    sub_1AE4FCE7C();
    sub_1AE4FD9A8();
    v17 = (uint64_t (*)(void))sub_1AE5094FC();
  }
  return v17();
}

uint64_t sub_1AE7609C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for InferenceMessageRequest(0, AssociatedTypeWitness, v10, v11);
  v14[0] = a6;
  v14[1] = a7;
  MEMORY[0x1AF454B70](&unk_1AE954FE0, v12, v14);
  return sub_1AE9243A8();
}

uint64_t sub_1AE760AD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  _QWORD *v13;

  v3[4] = a1;
  v6 = *a3;
  v7 = a3[1];
  if (qword_1ED30EF48 != -1)
    swift_once();
  v3[5] = qword_1EED93F38;
  v3[6] = swift_getAssociatedTypeWitness();
  v3[7] = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for InferenceMessageResponse(255, AssociatedTypeWitness, v9, v10);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v3[8] = TupleTypeMetadata2;
  v12 = a1 + *(int *)(TupleTypeMetadata2 + 48);
  v3[2] = v6;
  v3[3] = v7;
  v13 = (_QWORD *)swift_task_alloc();
  v3[9] = (uint64_t)v13;
  *v13 = v3;
  v13[1] = sub_1AE760C48;
  return sub_1AE75D9FC(a1, v12, a2, v3 + 2);
}

uint64_t sub_1AE760C48()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1AE505574();
  sub_1AE5062E4(v2);
  *(_QWORD *)(v0 + 80) = v1;
  swift_task_dealloc();
  return sub_1AE4FD190();
}

uint64_t sub_1AE760C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1AE5069D8();
  v1 = sub_1AE50A4D0();
  v5 = sub_1AE7620BC(v1, v2, v3, v4);
  MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceMessageResponseError<A>, v5);
  sub_1AE762028();
  swift_storeEnumTagMultiPayload();
  return sub_1AE500C20(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE760D38()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 32);
  swift_checkMetadataState();
  sub_1AE744A38(v1, v2);

  sub_1AE5069D8();
  v3 = sub_1AE50A4D0();
  v7 = sub_1AE7620BC(v3, v4, v5, v6);
  MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceMessageResponseError<A>, v7);
  sub_1AE762028();
  swift_storeEnumTagMultiPayload();
  return sub_1AE500C20(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1AE760E08()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for InferenceMessageRemoteServerResponse();
}

uint64_t sub_1AE760F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;

  MEMORY[0x1AF454B70](&unk_1AE954B40, a1);
  v2 = *(_QWORD *)(v1 - 72);
  result = sub_1AE9243F0();
  if (!v2)
  {
    *v5 = result;
    v5[1] = v4;
  }
  return result;
}

void sub_1AE760F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v25;
  __int128 v32;

  v25 = a7 & 1;
  v19 = *(_QWORD *)(a12 - 48);
  v20 = *(_QWORD *)(a12 - 40);
  v22 = *(_QWORD *)(a12 - 64);
  v21 = *(_QWORD *)(a12 - 56);
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v18 + 16) = v23;
  *v23 = v18;
  v23[1] = sub_1AE4FC490;
  *((_QWORD *)&v32 + 1) = v19;
  *(_QWORD *)&v32 = v20;
  sub_1AE760250(a1, a2, a3, a4, a5, a6, v25, a8, v32, v21, v22, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_1AE761050(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_release();
}

unint64_t sub_1AE761060()
{
  unint64_t result;

  result = qword_1EED99338;
  if (!qword_1EED99338)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95833C, &type metadata for InferenceServiceInstanceRunEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EED99338);
  }
  return result;
}

unint64_t sub_1AE76109C()
{
  unint64_t result;

  result = qword_1EED99370;
  if (!qword_1EED99370)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceInstanceQualifiedID, &type metadata for InferenceServiceInstanceQualifiedID);
    atomic_store(result, (unint64_t *)&qword_1EED99370);
  }
  return result;
}

unint64_t sub_1AE7610D8()
{
  unint64_t result;

  result = qword_1EEDA2558;
  if (!qword_1EEDA2558)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceInstanceQualifiedID, &type metadata for InferenceServiceInstanceQualifiedID);
    atomic_store(result, (unint64_t *)&qword_1EEDA2558);
  }
  return result;
}

unint64_t sub_1AE761118()
{
  unint64_t result;

  result = qword_1ED31AB70;
  if (!qword_1ED31AB70)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceInstanceQualifiedID, &type metadata for InferenceServiceInstanceQualifiedID);
    atomic_store(result, (unint64_t *)&qword_1ED31AB70);
  }
  return result;
}

unint64_t sub_1AE761154(uint64_t a1)
{
  unint64_t result;

  result = sub_1AE761178();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AE761178()
{
  unint64_t result;

  result = qword_1EEDA2560;
  if (!qword_1EEDA2560)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceInstanceRequestError, &type metadata for InferenceServiceInstanceRequestError);
    atomic_store(result, &qword_1EEDA2560);
  }
  return result;
}

unint64_t sub_1AE7611B4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AE7611E0();
  result = sub_1AE76121C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1AE7611E0()
{
  unint64_t result;

  result = qword_1EED94488;
  if (!qword_1EED94488)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceInstanceRunEvent, &type metadata for InferenceServiceInstanceRunEvent);
    atomic_store(result, (unint64_t *)&qword_1EED94488);
  }
  return result;
}

unint64_t sub_1AE76121C()
{
  unint64_t result;

  result = qword_1EED94480;
  if (!qword_1EED94480)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceInstanceRunEvent, &type metadata for InferenceServiceInstanceRunEvent);
    atomic_store(result, (unint64_t *)&qword_1EED94480);
  }
  return result;
}

void type metadata accessor for InferenceServiceInstanceQualifiedID()
{
  sub_1AE4F67D4();
}

void type metadata accessor for InferenceServiceInstanceRequestError()
{
  sub_1AE4F67D4();
}

void _s20IntelligencePlatform35InferenceServiceInstanceQualifiedIDVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  sub_1AE4F66CC();
  sub_1AE4F66C4();
  sub_1AE4F6624();
}

void _s20IntelligencePlatform35InferenceServiceInstanceQualifiedIDVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  sub_1AE4F665C();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  sub_1AE4F665C();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  sub_1AE4F6648();
  sub_1AE4F6624();
}

void _s20IntelligencePlatform35InferenceServiceInstanceQualifiedIDVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  sub_1AE4F6664();
}

void type metadata accessor for InferenceServiceInstanceRunEvent()
{
  sub_1AE4F67D4();
}

uint64_t sub_1AE7613A0()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  result = sub_1AE92670C();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for InferenceServiceInstance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceServiceInstance);
}

ValueMetadata *type metadata accessor for InferenceServiceInstanceRunEvent.CodingKeys()
{
  return &type metadata for InferenceServiceInstanceRunEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for InferenceServiceInstanceRequestError.CodingKeys()
{
  return &type metadata for InferenceServiceInstanceRequestError.CodingKeys;
}

ValueMetadata *type metadata accessor for InferenceServiceInstanceRequestError.IncorrectInterfaceIdCodingKeys()
{
  return &type metadata for InferenceServiceInstanceRequestError.IncorrectInterfaceIdCodingKeys;
}

uint64_t storeEnumTagSinglePayload for InferenceServiceInstanceQualifiedID.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AE7614E8 + 4 * byte_1AE957C45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AE76151C + 4 * byte_1AE957C40[v4]))();
}

uint64_t sub_1AE76151C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE761524(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE76152CLL);
  return result;
}

uint64_t sub_1AE761538(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE761540);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AE761544(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE76154C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InferenceServiceInstanceQualifiedID.CodingKeys()
{
  return &type metadata for InferenceServiceInstanceQualifiedID.CodingKeys;
}

unint64_t sub_1AE76156C()
{
  unint64_t result;

  result = qword_1EEDA2590;
  if (!qword_1EEDA2590)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE958060, &type metadata for InferenceServiceInstanceQualifiedID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2590);
  }
  return result;
}

unint64_t sub_1AE7615AC()
{
  unint64_t result;

  result = qword_1EEDA2598;
  if (!qword_1EEDA2598)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE958118, &type metadata for InferenceServiceInstanceRequestError.IncorrectInterfaceIdCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2598);
  }
  return result;
}

unint64_t sub_1AE7615EC()
{
  unint64_t result;

  result = qword_1EEDA25A0;
  if (!qword_1EEDA25A0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9581D0, &type metadata for InferenceServiceInstanceRequestError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA25A0);
  }
  return result;
}

unint64_t sub_1AE76162C()
{
  unint64_t result;

  result = qword_1EEDA25A8[0];
  if (!qword_1EEDA25A8[0])
  {
    result = MEMORY[0x1AF454B70](&unk_1AE958288, &type metadata for InferenceServiceInstanceRunEvent.CodingKeys);
    atomic_store(result, qword_1EEDA25A8);
  }
  return result;
}

unint64_t sub_1AE76166C()
{
  unint64_t result;

  result = qword_1EED99348;
  if (!qword_1EED99348)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9581F8, &type metadata for InferenceServiceInstanceRunEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EED99348);
  }
  return result;
}

unint64_t sub_1AE7616AC()
{
  unint64_t result;

  result = qword_1EED99340;
  if (!qword_1EED99340)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE958220, &type metadata for InferenceServiceInstanceRunEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EED99340);
  }
  return result;
}

unint64_t sub_1AE7616EC()
{
  unint64_t result;

  result = qword_1EEDA25C8;
  if (!qword_1EEDA25C8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE958088, &type metadata for InferenceServiceInstanceRequestError.IncorrectInterfaceIdCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA25C8);
  }
  return result;
}

unint64_t sub_1AE76172C()
{
  unint64_t result;

  result = qword_1EEDA25D0;
  if (!qword_1EEDA25D0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9580B0, &type metadata for InferenceServiceInstanceRequestError.IncorrectInterfaceIdCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA25D0);
  }
  return result;
}

unint64_t sub_1AE76176C()
{
  unint64_t result;

  result = qword_1EEDA25D8;
  if (!qword_1EEDA25D8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE958140, &type metadata for InferenceServiceInstanceRequestError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA25D8);
  }
  return result;
}

unint64_t sub_1AE7617AC()
{
  unint64_t result;

  result = qword_1EEDA25E0;
  if (!qword_1EEDA25E0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE958168, &type metadata for InferenceServiceInstanceRequestError.CodingKeys);
    atomic_store(result, &qword_1EEDA25E0);
  }
  return result;
}

unint64_t sub_1AE7617EC()
{
  unint64_t result;

  result = qword_1EED99368;
  if (!qword_1EED99368)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE957FD0, &type metadata for InferenceServiceInstanceQualifiedID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EED99368);
  }
  return result;
}

unint64_t sub_1AE76182C()
{
  unint64_t result;

  result = qword_1EED99360;
  if (!qword_1EED99360)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE957FF8, &type metadata for InferenceServiceInstanceQualifiedID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EED99360);
  }
  return result;
}

uint64_t sub_1AE761868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1AE50608C();
  v2 = sub_1AE505E1C();
  v4 = type metadata accessor for InferenceServiceConfig(0, v1, v2, v3);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = (v5 + 72) & ~v5;
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AE4FDC10(v0 + v6 + *(int *)(v4 + 44), *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8));
  return swift_deallocObject();
}

uint64_t sub_1AE76195C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = sub_1AE5069D8();
  v3 = sub_1AE50A4D0();
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InferenceServiceConfig(0, v2, v3, v4) - 8) + 80);
  v6 = v0[6];
  v7 = v0[7];
  v8 = (uint64_t *)v0[8];
  v9 = (uint64_t)v0 + ((v5 + 72) & ~v5);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v10;
  v11 = sub_1AE7620A4(v10);
  return sub_1AE75FB14(v11, v12, v13, v6, v7, v8, v9);
}

void sub_1AE761A3C()
{
  sub_1AE75FED0();
}

uint64_t sub_1AE761A44()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = (_QWORD *)v0[2];
  v3 = v0[3];
  v5 = v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1AE6146CC;
  return sub_1AE75F464(v2, v3, v5, v4);
}

unint64_t sub_1AE761AA8()
{
  unint64_t result;

  result = qword_1EEDA2618;
  if (!qword_1EEDA2618)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95861C, &unk_1E5DC5558);
    atomic_store(result, &qword_1EEDA2618);
  }
  return result;
}

unint64_t sub_1AE761AE4()
{
  unint64_t result;

  result = qword_1EED94490[0];
  if (!qword_1EED94490[0])
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceServiceInstanceRunEvent, &type metadata for InferenceServiceInstanceRunEvent);
    atomic_store(result, qword_1EED94490);
  }
  return result;
}

uint64_t sub_1AE761B20()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InferenceMessageRequest(0, AssociatedTypeWitness, v2, v3)- 8)+ 80);
  v5 = (v4 + 40) & ~v4;
  swift_release();
  sub_1AE4FDC10(v0 + v5, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AE761C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  sub_1AE5069D8();
  sub_1AE50A4D0();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = sub_1AE761F84(AssociatedTypeWitness, v3, v4, v5);
  v7 = *(_QWORD *)(v0
                 + ((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
                   + ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
                   + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  v9 = sub_1AE7620A4(v8);
  return sub_1AE75EB54(v9, v10, v11, v7);
}

uint64_t type metadata accessor for InferenceServiceInstance.RunErrorLocalConversion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceServiceInstance.RunErrorLocalConversion);
}

uint64_t _s20IntelligencePlatform36InferenceServiceInstanceRequestErrorO30IncorrectInterfaceIdCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AE761D78 + 4 * byte_1AE957C4F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AE761DAC + 4 * byte_1AE957C4A[v4]))();
}

uint64_t sub_1AE761DAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE761DB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE761DBCLL);
  return result;
}

uint64_t sub_1AE761DC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE761DD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AE761DD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE761DDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t _s20IntelligencePlatform32InferenceServiceInstanceRunEventV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1AE761E28 + 4 * byte_1AE957C54[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1AE761E48 + 4 * byte_1AE957C59[v4]))();
}

_BYTE *sub_1AE761E28(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1AE761E48(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AE761E50(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AE761E58(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1AE761E60(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1AE761E68(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for InferenceServiceInstanceRunnerError()
{
  sub_1AE4F67D4();
}

unint64_t sub_1AE761E80(uint64_t a1)
{
  unint64_t result;

  result = sub_1AE761AA8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1AE761EA8()
{
  unint64_t result;

  result = qword_1EEDA26B8;
  if (!qword_1EEDA26B8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE958530, &unk_1E5DC5558);
    atomic_store(result, (unint64_t *)&qword_1EEDA26B8);
  }
  return result;
}

uint64_t sub_1AE761EE4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1AF454B70](&unk_1AE9585DC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1AE761F10()
{
  JUMPOUT(0x1AF454B70);
}

uint64_t sub_1AE761F24()
{
  return swift_task_dealloc();
}

uint64_t sub_1AE761F5C()
{
  return swift_task_dealloc();
}

uint64_t sub_1AE761F78()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_1AE761F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for InferenceMessageRequest(0, a1, a3, a4);
}

uint64_t sub_1AE761F90()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_1AE761F9C(uint64_t a1)
{
  uint64_t v1;

  return _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(a1, 1, v1);
}

uint64_t sub_1AE761FA8()
{
  return swift_dynamicCast();
}

uint64_t sub_1AE761FC0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[10] + 8))(v0[13], v0[9]);
}

uint64_t sub_1AE761FD8()
{
  return swift_task_dealloc();
}

uint64_t sub_1AE761FF0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1AE761FFC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1AE762008()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_1AE762014()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE762028()
{
  return sub_1AE926F28();
}

uint64_t sub_1AE76203C()
{
  return swift_release();
}

uint64_t sub_1AE762050@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1AE76205C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_1AE762064()
{
  return sub_1AE925F14();
}

uint64_t sub_1AE762074()
{
  return sub_1AE925F74();
}

uint64_t sub_1AE762084(uint64_t result)
{
  _QWORD *v1;

  *v1 &= result;
  return result;
}

uint64_t sub_1AE762094()
{
  return sub_1AE926C88();
}

uint64_t sub_1AE7620A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1AE7620BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for InferenceMessageResponseError(255, v4, a1, a4);
}

uint64_t sub_1AE7620CC()
{
  return sub_1AE926BB0();
}

uint64_t sub_1AE7620DC()
{
  return swift_task_alloc();
}

uint64_t sub_1AE7620EC()
{
  return swift_task_dealloc();
}

uint64_t sub_1AE7620FC()
{
  return sub_1AE92670C();
}

uint64_t sub_1AE76210C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1AE762114()
{
  return sub_1AE926BB0();
}

uint64_t sub_1AE762120@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1AE76212C()
{
  uint64_t v0;

  return sub_1AE75E584(*(_QWORD *)(v0 + 392), *(_QWORD **)(v0 + 168));
}

uint64_t sub_1AE762138()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + v1) = 0;
  return swift_release();
}

uint64_t sub_1AE762144()
{
  return 255;
}

uint64_t sub_1AE762150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for InferenceMessageResponse(255, a1, a3, a4);
}

uint64_t sub_1AE76215C()
{
  return swift_task_alloc();
}

uint64_t sub_1AE762164()
{
  return swift_task_dealloc();
}

uint64_t sub_1AE76216C()
{
  return swift_task_dealloc();
}

uint64_t sub_1AE762174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_1AE762180()
{
  return sub_1AE92670C();
}

uint64_t sub_1AE76218C()
{
  return swift_getTupleTypeMetadata2();
}

uint64_t sub_1AE762198()
{
  return sub_1AE92670C();
}

uint64_t sub_1AE7621A0()
{
  return 0;
}

void sub_1AE7621AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  objc_autoreleasePoolPop(a14);
}

void sub_1AE7621B8(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[4];

  sub_1AE75B520(a1, a2);
  sub_1AE503854();
  v4 = sub_1AE500EA8();
  sub_1AE516244(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
    sub_1AE50AF58(&v7, (uint64_t)v9);
    sub_1AE4F9858(v9, v9[3]);
    sub_1AE4FEFA0();
    sub_1AE75CFF4(v5, v6);
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v9);
  }
  else
  {
    sub_1AE52982C((uint64_t)&v7, &qword_1EEDA26C0);
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  sub_1AE500388();
}

void sub_1AE762270(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[4];

  sub_1AE75B430(a1, a2);
  sub_1AE503854();
  v4 = sub_1AE500EA8();
  sub_1AE516244(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
    sub_1AE50AF58(&v7, (uint64_t)v9);
    sub_1AE4F9858(v9, v9[3]);
    sub_1AE4FEFA0();
    sub_1AE75CD0C(v5, v6);
  }
  sub_1AE52982C((uint64_t)&v7, &qword_1EED94650);
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_1AE500388();
}

ValueMetadata *type metadata accessor for InferenceServiceInstanceBuilderError()
{
  return &type metadata for InferenceServiceInstanceBuilderError;
}

uint64_t destroy for InferenceServiceInstanceBuilderParameters(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(a1 + 48);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InferenceServiceInstanceBuilderParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = a2 + 48;
  v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(a1 + 48, v7, v9);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for InferenceServiceInstanceBuilderParameters(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1AE65F6C8(a1 + 6, a2 + 6);
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for InferenceServiceInstanceBuilderParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(a1 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for InferenceServiceInstanceBuilderParameters()
{
  return &type metadata for InferenceServiceInstanceBuilderParameters;
}

unint64_t sub_1AE76254C(uint64_t a1)
{
  unint64_t result;

  result = sub_1AE75385C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void InferenceServiceInstanceClient.unsafeSyncRun(with:parentEventId:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  dispatch_semaphore_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  dispatch_semaphore_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v64 = a4;
  v60 = a3;
  v59 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v8 = sub_1AE509AF8();
  type metadata accessor for InferenceOutput(255, v8, v9, v10);
  sub_1AE523CF0((uint64_t *)&unk_1ED319C60);
  v54 = sub_1AE926F28();
  v11 = sub_1AE92670C();
  v12 = *(_QWORD *)(v11 - 8);
  v55 = v11;
  v56 = v12;
  sub_1AE4FBCEC();
  v14 = MEMORY[0x1E0C80A78](v13);
  v58 = (char *)&v49 - v15;
  v63 = *(_QWORD *)(v54 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v61 = (uint64_t)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v62 = (uint64_t)&v49 - v18;
  v50 = v6;
  v19 = sub_1AE509AF8();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v49 - v22;
  v24 = sub_1AE501548(&qword_1ED318B50);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v26;
  v52 = dispatch_semaphore_create(0);
  type metadata accessor for InferenceServiceInstanceClient._UnsafeOutputClass(0, v6, v7, v27);
  v51 = sub_1AE762FBC();
  v28 = sub_1AE926328();
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v26, 1, 1, v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, a1, v19);
  v29 = (*(unsigned __int8 *)(v20 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v30 = v29 + v21;
  v31 = (v29 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = 0;
  v33[3] = 0;
  v33[4] = v50;
  v33[5] = v7;
  v34 = v52;
  v35 = v57;
  v33[6] = v52;
  v33[7] = v35;
  v36 = (char *)v33 + v29;
  v37 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v38 = v54;
  v39 = v55;
  v40 = v23;
  v41 = v56;
  v42 = v19;
  v43 = v51;
  v37(v36, v40, v42);
  v44 = (char *)v33 + v31;
  *(_QWORD *)v44 = v59;
  v44[8] = v60 & 1;
  *(_QWORD *)((char *)v33 + v32) = v43;
  v45 = v34;
  swift_retain();
  swift_retain();
  sub_1AE7634CC((uint64_t)v53, (uint64_t)&unk_1EEDA26D0, (uint64_t)v33);
  swift_release();
  sub_1AE926688();
  swift_beginAccess();
  v46 = (uint64_t)v58;
  (*(void (**)(void))(v41 + 16))();
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v46, 1, v38) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v46, v39);
    sub_1AE926AB4();
    __break(1u);
  }
  else
  {
    v48 = v62;
    v47 = v63;
    sub_1AE6149B4(v62, v46, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 32));
    sub_1AE6149B4(v61, v48, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 16));
    sub_1AE762974(v38, (uint64_t)&v65, v64);
    sub_1AE50ABBC();
    swift_release();

    sub_1AE4F667C();
  }
}

uint64_t type metadata accessor for InferenceOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceOutput);
}

uint64_t type metadata accessor for InferenceServiceInstanceClient._UnsafeOutputClass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceServiceInstanceClient._UnsafeOutputClass);
}

uint64_t sub_1AE762974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  sub_1AE6149B4(a2, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32));
  return swift_willThrowTypedImpl();
}

void sub_1AE762A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  sub_1AE762B0C(a1, a2, a3);
  sub_1AE4F6624();
}

void sub_1AE762A50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1, a2);
  v8 = type metadata accessor for InferenceMessageResponse(0, a2, v6, v7);
  v9 = *(_QWORD *)(a1 + *(int *)(v8 + 28));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  *(_QWORD *)(a3 + *(int *)(type metadata accessor for InferenceOutput(0, a2, v10, v11) + 28)) = v9;
  sub_1AE4F6624();
}

void InferenceServiceInstanceClient.instanceQualifiedId.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  sub_1AE4F9858(v0 + 2, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
  sub_1AE4F6624();
}

void sub_1AE762B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v6;

  v3[5] = a2;
  v3[6] = a3;
  v6 = sub_1AE52F6A8(v3 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v6, a1, a2);
  sub_1AE4F6624();
}

uint64_t InferenceServiceInstanceClient.run(with:parentEventId:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)(v5 + 144) = a4;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = *v4;
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(*v4 + 88);
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(v6 + 80);
  v7 = sub_1AE50A584();
  *(_QWORD *)(v5 + 64) = v7;
  *(_QWORD *)(v5 + 72) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 80) = sub_1AE4FC554();
  v10 = type metadata accessor for InferenceMessageRequest(0, v7, v8, v9);
  *(_QWORD *)(v5 + 88) = v10;
  *(_QWORD *)(v5 + 96) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 + 104) = sub_1AE4FC554();
  v11 = sub_1AE50A584();
  *(_QWORD *)(v5 + 112) = v11;
  type metadata accessor for InferenceMessageResponse(0, v11, v12, v13);
  *(_QWORD *)(v5 + 120) = sub_1AE4FC554();
  return sub_1AE501E3C();
}

uint64_t sub_1AE762C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD **)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 24);
  v8 = *(_BYTE *)(v0 + 144) & 1;
  v10 = v5[5];
  v9 = v5[6];
  sub_1AE4F9858(v5 + 2, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v7, v3);
  sub_1AE748EAC(v1, v6, v8, v3, v4, v14, v13);
  v15 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v9 + 32) + *(_QWORD *)(v9 + 32));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v11;
  *v11 = v0;
  v11[1] = sub_1AE762D14;
  return v15(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 56), v10, v9);
}

uint64_t sub_1AE762D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return sub_1AE501E3C();
}

uint64_t sub_1AE762D8C()
{
  uint64_t v0;

  sub_1AE762A50(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 16));
  swift_task_dealloc();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1AE762DE8()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  sub_1AE4F90A0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void InferenceServiceInstanceClient.provide(feedback:for:)(void *a1, uint64_t a2)
{
  id v4;
  uint64_t AssociatedTypeWitness;
  uint64_t (**AssociatedConformanceWitness)(uint64_t, uint64_t);

  v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FeedbackService()), sel_init);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = (uint64_t (**)(uint64_t, uint64_t))swift_getAssociatedConformanceWitness();
  FeedbackService.record<A>(feedback:for:)(a1, a2, 0, AssociatedTypeWitness, AssociatedConformanceWitness);

}

uint64_t sub_1AE762EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for InferenceOutput(255, AssociatedTypeWitness, v3, v4);
  sub_1AE523CF0((uint64_t *)&unk_1ED319C60);
  sub_1AE926F28();
  v5 = sub_1AE92670C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v1, v5);
  return v0;
}

uint64_t sub_1AE762F9C()
{
  sub_1AE762EFC();
  return swift_deallocClassInstance();
}

uint64_t sub_1AE762FBC()
{
  swift_allocObject();
  return sub_1AE762FEC();
}

uint64_t sub_1AE762FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for InferenceOutput(255, AssociatedTypeWitness, v3, v4);
  sub_1AE523CF0((uint64_t *)&unk_1ED319C60);
  v5 = sub_1AE926F28();
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v1, 1, 1, v5);
  return v0;
}

uint64_t sub_1AE763080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  _QWORD *v8;
  char v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v8[8] = a4;
  v8[9] = v20;
  v11 = a8 & 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for InferenceOutput(255, AssociatedTypeWitness, v13, v14);
  v8[10] = v15;
  sub_1AE523CF0((uint64_t *)&unk_1ED319C60);
  v8[11] = sub_1AE926F28();
  v16 = sub_1AE92670C();
  v8[12] = v16;
  v8[13] = *(_QWORD *)(v16 - 8);
  v8[14] = swift_task_alloc();
  v8[15] = swift_task_alloc();
  v8[16] = *(_QWORD *)(v15 - 8);
  v17 = swift_task_alloc();
  v8[17] = v17;
  v18 = (_QWORD *)swift_task_alloc();
  v8[18] = v18;
  *v18 = v8;
  v18[1] = sub_1AE7631BC;
  return InferenceServiceInstanceClient.run(with:parentEventId:)(v17, a6, a7, v11);
}

uint64_t sub_1AE7631BC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1AE763220()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 80));
  swift_storeEnumTagMultiPayload();
  sub_1AE503860();
  sub_1AE4FDF14();
  sub_1AE50575C();
  swift_endAccess();
  sub_1AE4F6C44();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  swift_task_dealloc();
  return sub_1AE500EBC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE7632A8()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 120) = *(_QWORD *)(v0 + 152);
  swift_storeEnumTagMultiPayload();
  sub_1AE503860();
  sub_1AE4FDF14();
  sub_1AE50575C();
  swift_endAccess();
  sub_1AE4F6C44();
  sub_1AE4F90A0();
  sub_1AE4F67E4();
  swift_task_dealloc();
  return sub_1AE500EBC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE763328()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AE7633DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[6];
  v10 = v1[7];
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + v6);
  v13 = *((_BYTE *)v1 + v6 + 8);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_1AE605120;
  return sub_1AE763080(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1AE7634CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1AE926328();
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(a1, 1, v6) == 1)
  {
    sub_1AE50290C(a1);
  }
  else
  {
    sub_1AE92631C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1AE9262EC();
    swift_unknownObjectRelease();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t InferenceServiceInstanceClient.deinit()
{
  uint64_t v0;

  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 16);
  return v0;
}

uint64_t InferenceServiceInstanceClient.__deallocating_deinit()
{
  uint64_t v0;

  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t InferenceOutput.output.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t InferenceOutput.eventId.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 28));
}

uint64_t sub_1AE76366C(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE958998, a1);
  return sub_1AE926F94();
}

uint64_t sub_1AE7636A0(uint64_t a1)
{
  MEMORY[0x1AF454B70](&unk_1AE958998, a1);
  return sub_1AE926FA0();
}

void InferenceOutput<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v12[4];
  char v13;
  char v14;

  v12[2] = a4;
  v12[0] = a2;
  v5 = type metadata accessor for InferenceOutput.CodingKeys(255, *(_QWORD *)(a2 + 16), a3, a4);
  MEMORY[0x1AF454B70](&unk_1AE958998, v5);
  v6 = sub_1AE926CF4();
  v7 = *(_QWORD *)(v6 - 8);
  sub_1AE4FBCEC();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v12 - v9;
  sub_1AE4F9858(a1, a1[3]);
  sub_1AE926F4C();
  v14 = 0;
  v11 = v12[3];
  sub_1AE926CC4();
  if (!v11)
  {
    v13 = 1;
    sub_1AE926CDC();
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_1AE4F667C();
}

uint64_t type metadata accessor for InferenceOutput.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceOutput.CodingKeys);
}

void InferenceOutput<>.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  char v38;

  v28 = a4;
  v30 = *(_QWORD *)(a2 - 8);
  v31 = a3;
  MEMORY[0x1E0C80A78](a1);
  v32 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for InferenceOutput.CodingKeys(255, v7, v8, v9);
  MEMORY[0x1AF454B70](&unk_1AE958998, v10);
  v33 = sub_1AE926C28();
  v29 = *(_QWORD *)(v33 - 8);
  sub_1AE4FBCEC();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v27 - v12;
  v34 = a2;
  v16 = type metadata accessor for InferenceOutput(0, a2, v14, v15);
  v17 = *(_QWORD *)(v16 - 8);
  sub_1AE4FBCEC();
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v27 - v19;
  sub_1AE4F9858(a1, a1[3]);
  v35 = v13;
  v21 = v36;
  sub_1AE926F34();
  if (v21)
  {
    sub_1AE4F9260();
  }
  else
  {
    v36 = v17;
    v22 = v20;
    v23 = v30;
    v38 = 0;
    v24 = v32;
    sub_1AE926BEC();
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v22, v24, v34);
    v37 = 1;
    v25 = sub_1AE926C04();
    sub_1AE4FBDB8();
    *(_QWORD *)&v22[*(int *)(v16 + 28)] = v25;
    v26 = v36;
    (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(v28, v22, v16);
    sub_1AE4F9260();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v16);
  }
  sub_1AE4F667C();
}

void sub_1AE763A34(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  InferenceOutput<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

void sub_1AE763A50(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  InferenceOutput<>.encode(to:)(a1, a2, a3, *(_QWORD *)(a3 - 16));
}

uint64_t sub_1AE763A68()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for InferenceServiceInstanceClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceServiceInstanceClient);
}

uint64_t method lookup function for InferenceServiceInstanceClient()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1AE763AC0()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for InferenceOutput(255, AssociatedTypeWitness, v1, v2);
  sub_1AE523CF0((uint64_t *)&unk_1ED319C60);
  sub_1AE926F28();
  result = sub_1AE92670C();
  if (v4 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1AE763B80(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 >= a2)
  {
    if ((_DWORD)v6)
      return _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(a1, v6, v4);
    return 0;
  }
  if (((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v7 = 2;
  else
    v7 = a2 - v6 + 1;
  if (v7 >= 0x10000)
    v8 = 4;
  else
    v8 = 2;
  if (v7 < 0x100)
    v8 = 1;
  if (v7 >= 2)
    v9 = v8;
  else
    v9 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1AE763BF0 + 4 * byte_1AE958720[v9]))();
}

void sub_1AE763C44(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    v12 = 0u;
  }
  else
  {
    v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
  }
  if (a2 > v7)
  {
    if ((_DWORD)v8)
    {
      v13 = ~v7 + a2;
      bzero(a1, v8);
      *a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

uint64_t sub_1AE763D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  *(_BYTE *)(v4 + v5) = 0;
  if ((_DWORD)a2)
    return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v4, a2, a3, a4);
  return result;
}

void sub_1AE763D60(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x1AE763D68);
  JUMPOUT(0x1AE763D48);
}

uint64_t sub_1AE763D80(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AE763DCC + 4 * byte_1AE958734[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AE763E00 + 4 * byte_1AE95872F[v4]))();
}

uint64_t sub_1AE763E00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE763E08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE763E10);
  return result;
}

uint64_t sub_1AE763E1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE763E24);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AE763E28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE763E30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1AE763E3C()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE763E4C()
{
  JUMPOUT(0x1AF454B70);
}

void sub_1AE763E5C()
{
  JUMPOUT(0x1AF454B70);
}

uint64_t sub_1AE763E6C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1AE763ED0;
  return v6(a1);
}

uint64_t sub_1AE763ED0()
{
  uint64_t v0;

  sub_1AE4FFC38();
  return sub_1AE4F90A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE763EF8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AE763F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1AE4FC490;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EEDA2760 + dword_1EEDA2760))(a1, v4);
}

uint64_t initializeWithCopy for InferenceServiceInstanceEnum(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  char v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
  }
  (**(void (***)(uint64_t))(v4 - 8))(a1);
  *(_BYTE *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithCopy for InferenceServiceInstanceEnum(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  char v6;

  if (a1 != a2)
  {
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(a1);
    v4 = *(unsigned __int8 *)(a2 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    if (v4 == 1)
    {
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

__n128 initializeWithTake for InferenceServiceInstanceEnum(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for InferenceServiceInstanceEnum(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;

  if (a1 != a2)
  {
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(a1);
    v4 = *(unsigned __int8 *)(a2 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = v4 == 1;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceServiceInstanceEnum(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for InferenceServiceInstanceEnum(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_1AE76419C(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_1AE7641B8(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for InferenceServiceInstanceEnum()
{
  return &type metadata for InferenceServiceInstanceEnum;
}

uint64_t sub_1AE7641F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  __int128 v11[2];
  char v12;

  sub_1AE5241DC(v1, (uint64_t)v11);
  if ((v12 & 1) == 0)
    return sub_1AE50AF58(v11, (uint64_t)a1);
  sub_1AE50AF58(v11, (uint64_t)v8);
  v3 = v9;
  v4 = v10;
  v5 = sub_1AE4F9858(v8, v9);
  a1[3] = v3;
  a1[4] = *(_QWORD *)(v4 + 8);
  v6 = sub_1AE52F6A8(a1);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v6, v5, v3);
  return _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v8);
}

uint64_t sub_1AE764294@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v4[2];
  char v5;

  sub_1AE5241DC(v1, (uint64_t)v4);
  if ((v5 & 1) != 0)
    return sub_1AE50AF58(v4, a1);
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return sub_1AE753898((uint64_t)v4);
}

uint64_t sub_1AE7642F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 24))(&v3);
  return ~v4 & 1;
}

void InferenceServiceRunnerCost.init(retentionCachePolicy:)(uint64_t a1@<X8>)
{
  sub_1AE501DB8(a1);
}

uint64_t InferenceServiceRunnerExtendedResponseWithEvent.init(output:runEvent:resultCachePolicy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v12 = *a3;
  v13 = *((_BYTE *)a3 + 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a7, a1, a4);
  v14 = type metadata accessor for InferenceServiceRunnerExtendedResponseWithEvent(0, a4, a5, a6);
  v15 = a7 + *(int *)(v14 + 44);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v15, a2, a5);
  result = _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v15, 0, 1, a5);
  v17 = a7 + *(int *)(v14 + 48);
  *(_QWORD *)v17 = v12;
  *(_BYTE *)(v17 + 8) = v13;
  return result;
}

uint64_t type metadata accessor for InferenceServiceRunnerExtendedResponseWithEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceServiceRunnerExtendedResponseWithEvent);
}

uint64_t InferenceServiceRunnerFixedCost.wrappedCost.getter()
{
  return 0;
}

uint64_t (*sub_1AE76440C(_QWORD *a1))()
{
  *a1 = 0;
  return j_j__s20IntelligencePlatform17TrialAssetManagerC13RefreshPolicyOwxx;
}

uint64_t (*InferenceServiceRunnerFixedCost.wrappedCost.modify(_QWORD *a1))()
{
  *a1 = 0;
  return j__s20IntelligencePlatform17TrialAssetManagerC13RefreshPolicyOwxx;
}

unint64_t static _InferenceServiceRunnerNoEventLog.type.getter()
{
  return 0xD000000000000036;
}

uint64_t sub_1AE764450()
{
  sub_1AE764564();
  return sub_1AE926F94();
}

uint64_t sub_1AE764478()
{
  sub_1AE764564();
  return sub_1AE926FA0();
}

uint64_t _InferenceServiceRunnerNoEventLog.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_1AE501548(&qword_1EEDA2770);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AE4F9858(a1, a1[3]);
  sub_1AE764564();
  sub_1AE926F4C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1AE764564()
{
  unint64_t result;

  result = qword_1EEDA2778;
  if (!qword_1EEDA2778)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE958E04, &type metadata for _InferenceServiceRunnerNoEventLog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2778);
  }
  return result;
}

uint64_t _InferenceServiceRunnerNoEventLog.init(from:)(uint64_t a1)
{
  return _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(a1);
}

unint64_t sub_1AE7645C4()
{
  static _InferenceServiceRunnerNoEventLog.type.getter();
  return 0xD000000000000036;
}

uint64_t sub_1AE7645E0(uint64_t a1)
{
  return _InferenceServiceRunnerNoEventLog.init(from:)(a1);
}

uint64_t sub_1AE7645F4(_QWORD *a1)
{
  return _InferenceServiceRunnerNoEventLog.encode(to:)(a1);
}

void InferenceServiceRunnerExtendedResponse.init(output:resultCachePolicy:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a4, a1);
  v10 = a4 + *(int *)(type metadata accessor for InferenceServiceRunnerExtendedResponse(0, a3, v8, v9) + 28);
  *(_QWORD *)v10 = v6;
  *(_BYTE *)(v10 + 8) = v7;
  sub_1AE4F6624();
}

uint64_t type metadata accessor for InferenceServiceRunnerExtendedResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceServiceRunnerExtendedResponse);
}

uint64_t InferenceServiceRunnerExtendedResponse.output.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

void InferenceServiceRunnerExtendedResponse.runEvent.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void InferenceServiceRunnerExtendedResponse.resultCachePolicy.getter(uint64_t a1@<X8>)
{
  sub_1AE5003AC(a1);
}

void sub_1AE7646A0(_BYTE *a1@<X8>)
{
  InferenceServiceRunnerExtendedResponse.runEvent.getter(a1);
}

uint64_t InferenceServiceRunnerExtendedResponseWithEvent.runEvent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = sub_1AE92670C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

void InferenceServiceRunnerExtendedResponseWithEvent.resultCachePolicy.getter(uint64_t a1@<X8>)
{
  sub_1AE5003AC(a1);
}

void InferenceServiceRunnerCost.retentionCachePolicy.getter(uint64_t a1@<X8>)
{
  sub_1AE501DB8(a1);
}

uint64_t static InferenceServiceRunnerCost.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  char v5;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v2 == 0.0)
    {
      if (*(_BYTE *)(a2 + 8))
        return *(_QWORD *)&v3 == 0;
    }
    else if (*(_BYTE *)(a2 + 8))
    {
      return *(_QWORD *)&v3 != 0;
    }
  }
  else
  {
    if (v2 == v3)
      v5 = *(_BYTE *)(a2 + 8);
    else
      v5 = 1;
    if ((v5 & 1) == 0)
      return 1;
  }
  return 0;
}

uint64_t sub_1AE76477C()
{
  uint64_t v0;

  v0 = swift_retain();
  return InferenceServiceRunnerFixedCost.wrappedCost.setter(v0);
}

void InferenceServiceRunnerDynamicCost.setCost(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a1;
  v4 = *(_BYTE *)(a1 + 8);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 40))(a2))
  {
    sub_1AE76493C(v3, v4);
    swift_release();
  }
  else
  {
    sub_1AE4F6624();
  }
}

uint64_t sub_1AE7647F4(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  MEMORY[0x1E0C80A78](a1);
  v2 = (char *)&v5 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - v1);
  return sub_1AE764998((uint64_t)v2);
}

uint64_t sub_1AE764868(uint64_t a1, char a2)
{
  uint64_t v2;
  void (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v5 = a1;
  v6 = a2 & 1;
  v3 = *(void (**)(uint64_t *))(v2 + 32);
  swift_retain();
  v3(&v5);
  return swift_release();
}

uint64_t sub_1AE7648AC(uint64_t a1)
{
  void (*v2)(uint64_t);

  v2 = (void (*)(uint64_t))sub_1AE764BA8();
  v2(a1);
  return swift_release();
}

uint64_t sub_1AE7648E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 88);
  sub_1AE4F9094();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_1AE76493C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_BYTE *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return sub_1AE764868(v5, v6);
}

uint64_t sub_1AE764998(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _BYTE v11[24];

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = v1 + *(_QWORD *)(v7 + 88);
  sub_1AE4F9094();
  sub_1AE4F94EC((uint64_t)v6, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  swift_beginAccess();
  sub_1AE4F94EC(v8, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24));
  swift_endAccess();
  sub_1AE7648AC((uint64_t)v6);
  v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v9(a1, v3);
  return ((uint64_t (*)(_BYTE *, uint64_t))v9)(v6, v3);
}

void (*sub_1AE764A74(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 80);
  v3[4] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[5] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[6] = malloc(v7);
  v8 = malloc(v7);
  v3[7] = v8;
  v9 = (uint64_t)v1 + *(_QWORD *)(v4 + 88);
  sub_1AE4F9094();
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v3[8] = v10;
  sub_1AE4F94EC((uint64_t)v8, v9, v10);
  return sub_1AE764B1C;
}

void sub_1AE764B1C(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *(void **)(v2 + 56);
    v5 = *(_QWORD *)(v2 + 40);
    v4 = *(void **)(v2 + 48);
    v6 = *(_QWORD *)(v2 + 32);
    (*(void (**)(void *, void *, uint64_t))(v2 + 64))(v4, v3, v6);
    sub_1AE764998((uint64_t)v4);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v3, v6);
  }
  else
  {
    v4 = *(void **)(v2 + 48);
    v3 = *(void **)(v2 + 56);
    sub_1AE764998((uint64_t)v3);
  }
  free(v3);
  free(v4);
  free((void *)v2);
}

uint64_t sub_1AE764BA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_retain();
  return v1;
}

uint64_t InferenceServiceDidSet.__allocating_init(wrappedValue:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  InferenceServiceDidSet.init(wrappedValue:)(a1);
  return v2;
}

uint64_t *InferenceServiceDidSet.init(wrappedValue:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = (uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 96));
  v5 = swift_allocObject();
  v6 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(v5 + 16) = v6;
  *v4 = nullsub_1;
  v4[1] = v5;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 88), a1);
  return v1;
}

uint64_t sub_1AE764C94()
{
  return swift_deallocObject();
}

uint64_t InferenceServiceDidSet.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_release();
  return v0;
}

uint64_t InferenceServiceDidSet.__deallocating_deinit()
{
  InferenceServiceDidSet.deinit();
  return swift_deallocClassInstance();
}

unint64_t sub_1AE764D08(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1AE764D34();
  result = sub_1AE764D70();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1AE764D34()
{
  unint64_t result;

  result = qword_1EEDA2780;
  if (!qword_1EEDA2780)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for _InferenceServiceRunnerNoEventLog, &type metadata for _InferenceServiceRunnerNoEventLog);
    atomic_store(result, (unint64_t *)&qword_1EEDA2780);
  }
  return result;
}

unint64_t sub_1AE764D70()
{
  unint64_t result;

  result = qword_1EEDA2788;
  if (!qword_1EEDA2788)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for _InferenceServiceRunnerNoEventLog, &type metadata for _InferenceServiceRunnerNoEventLog);
    atomic_store(result, (unint64_t *)&qword_1EEDA2788);
  }
  return result;
}

unint64_t sub_1AE764DB0()
{
  unint64_t result;

  result = qword_1EEDA2790;
  if (!qword_1EEDA2790)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for _InferenceServiceRunnerNoEventLog, &type metadata for _InferenceServiceRunnerNoEventLog);
    atomic_store(result, (unint64_t *)&qword_1EEDA2790);
  }
  return result;
}

uint64_t sub_1AE764DEC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

void sub_1AE764DF4(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1AE764E00()
{
  return 16;
}

__n128 sub_1AE764E0C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1AE764E18@<X0>(uint64_t a1@<X8>)
{
  return sub_1AE7648E0(a1);
}

uint64_t sub_1AE764E3C()
{
  return 8;
}

_QWORD *sub_1AE764E48(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for _InferenceServiceRunnerNoEventLog()
{
  return &type metadata for _InferenceServiceRunnerNoEventLog;
}

uint64_t dispatch thunk of InferenceServiceRunner.wrappedCost.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of InferenceServiceRunner.wrappedCost.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of InferenceServiceRunner.wrappedCost.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of InferenceServiceRunner.run(input:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 64) + *(_QWORD *)(a5 + 64));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_1AE56794C;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of InferenceServiceRunnerExtendedResponseProtocol.runEvent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of InferenceServiceRunnerExtendedResponseProtocol.resultCachePolicy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_1AE764F28()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1AE764F9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = *(_BYTE *)(v10 + 8);
    v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v12 = *(_QWORD *)v10;
    *(_BYTE *)(v12 + 8) = v11;
  }
  return v4;
}

uint64_t sub_1AE765054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t sub_1AE7650B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t sub_1AE76511C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t sub_1AE765180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t sub_1AE7651E4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 >= a2)
  {
    if ((_DWORD)v6)
      return _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(a1, v6, v4);
    return 0;
  }
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  v8 = (a2 - v6 + 255) >> (8 * v7);
  if (v7 < 4)
    v9 = v8 + 1;
  else
    v9 = 2;
  if (v9 >= 0x10000)
    v10 = 4;
  else
    v10 = 2;
  if (v9 < 0x100)
    v10 = 1;
  if (v9 >= 2)
    v11 = v10;
  else
    v11 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1AE765260 + 4 * byte_1AE958AB0[v11]))();
}

void sub_1AE7652C4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v7 >= a3)
  {
    v12 = 0u;
  }
  else
  {
    v9 = (a3 - v7 + 255) >> (8 * v8);
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
  }
  if (v7 < a2)
  {
    if (v8 >= 4)
      v13 = ~v7 + a2;
    else
      v13 = (~(_BYTE)v7 + a2);
    bzero(a1, v8);
    if ((_DWORD)v8 == 1)
      *a1 = v13;
    else
      *(_DWORD *)a1 = v13;
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

void sub_1AE7653D0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1AE7653D8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1AE7653E0);
}

void sub_1AE7653F8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1AE765400()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1AE765408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!(_DWORD)a2)
    JUMPOUT(0x1AE765410);
  return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v5, a2, a3, a4);
}

uint64_t sub_1AE765428()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = sub_1AE92670C();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1AE7654BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  int v13;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8;
  v10 = *(_QWORD *)(v6 + 64) + v8;
  if (*(_DWORD *)(v7 + 84))
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = *(_QWORD *)(v7 + 64) + 1;
  v12 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  v13 = (*(_DWORD *)(v6 + 80) | v8) & 0x100000;
  if (v12 > 7 || v13 != 0 || ((v11 + (v10 & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7)));
    swift_retain();
  }
  else
  {
    v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v18 = (const void *)(((unint64_t)a2 + v10) & v17);
    if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v18, 1, v5))
    {
      memcpy((void *)(((unint64_t)v4 + v10) & v17), v18, v11);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v7 + 16))(((unint64_t)v4 + v10) & v17, v18, v5);
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(((unint64_t)v4 + v10) & v17, 0, 1, v5);
    }
    v20 = ((unint64_t)v18 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v21 = *(_QWORD *)v20;
    v22 = ((((unint64_t)v4 + v10) & v17) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)(v22 + 8) = *(_BYTE *)(v20 + 8);
    *(_QWORD *)v22 = v21;
  }
  return v4;
}

uint64_t sub_1AE76561C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  result = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v8, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))(v8, v6);
  return result;
}

uint64_t sub_1AE7656A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (void *)((v11 + a1) & ~v10);
  v13 = (const void *)((v11 + a2) & ~v10);
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v13, 1, v8))
  {
    v14 = *(_DWORD *)(v9 + 84);
    v15 = *(_QWORD *)(v9 + 64);
    if (v14)
      v16 = v15;
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v12, v13, v8);
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v12, 0, 1, v8);
    v14 = *(_DWORD *)(v9 + 84);
    v15 = *(_QWORD *)(v9 + 64);
  }
  if (v14)
    v17 = v15;
  else
    v17 = v15 + 1;
  v18 = (uint64_t)v12 + v17 + 7;
  v19 = ((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  v18 &= 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = v20;
  return a1;
}

uint64_t sub_1AE7657A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (void *)((v11 + a1) & ~v10);
  v13 = (const void *)((v11 + a2) & ~v10);
  v14 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v12, 1, v8);
  v15 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v13, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v12, v13, v8);
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v12, 0, 1, v8);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(v12, v13, v8);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v16 = *(_QWORD *)(v9 + 64);
  else
    v16 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v12, v13, v16);
LABEL_10:
  if (*(_DWORD *)(v9 + 84))
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  v18 = (uint64_t)v12 + v17 + 7;
  v19 = ((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_BYTE *)(v19 + 8);
  v18 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v20;
  return a1;
}

uint64_t sub_1AE7658E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (void *)((v11 + a1) & ~v10);
  v13 = (const void *)((v11 + a2) & ~v10);
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v13, 1, v8))
  {
    v14 = *(_DWORD *)(v9 + 84);
    v15 = *(_QWORD *)(v9 + 64);
    if (v14)
      v16 = v15;
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v12, v13, v8);
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v12, 0, 1, v8);
    v14 = *(_DWORD *)(v9 + 84);
    v15 = *(_QWORD *)(v9 + 64);
  }
  if (v14)
    v17 = v15;
  else
    v17 = v15 + 1;
  v18 = (uint64_t)v12 + v17 + 7;
  v19 = ((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  v18 &= 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = v20;
  return a1;
}

uint64_t sub_1AE7659E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (void *)((v11 + a1) & ~v10);
  v13 = (const void *)((v11 + a2) & ~v10);
  v14 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v12, 1, v8);
  v15 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v13, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v12, v13, v8);
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v12, 0, 1, v8);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(v12, v13, v8);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v16 = *(_QWORD *)(v9 + 64);
  else
    v16 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v12, v13, v16);
LABEL_10:
  if (*(_DWORD *)(v9 + 84))
    v17 = *(_QWORD *)(v9 + 64);
  else
    v17 = *(_QWORD *)(v9 + 64) + 1;
  v18 = (uint64_t)v12 + v17 + 7;
  v19 = ((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_BYTE *)(v19 + 8);
  v18 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v20;
  return a1;
}

uint64_t sub_1AE765B28(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= v7)
    v11 = *(_DWORD *)(v6 + 84);
  else
    v11 = v10;
  if ((_DWORD)v9)
    v12 = 7;
  else
    v12 = 8;
  if (!a2)
    return 0;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = v13 + v14;
  if (v11 < a2)
  {
    v16 = ((v12 + *(_QWORD *)(v8 + 64) + (v15 & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 9;
    v17 = (a2 - v11 + 255) >> (8 * v16);
    if (v16 < 4)
      v18 = v17 + 1;
    else
      v18 = 2;
    if (v18 >= 0x10000)
      v19 = 4;
    else
      v19 = 2;
    if (v18 < 0x100)
      v19 = 1;
    if (v18 >= 2)
      v20 = v19;
    else
      v20 = 0;
    __asm { BR              X3 }
  }
  if (!v11)
    return 0;
  if (v7 >= v10)
    return _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(a1, v7, v5);
  v21 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((v15 + a1) & ~v14, v9, v4);
  if (v21 >= 2)
    return v21 - 1;
  else
    return 0;
}

void sub_1AE765C80(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = v9 - 1;
  if (!v9)
    v10 = 0;
  if (v10 <= *(_DWORD *)(v7 + 84))
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = v10;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = *(_QWORD *)(v7 + 64) + v12;
  v14 = *(_QWORD *)(v8 + 64);
  if (!v9)
    ++v14;
  v15 = ((v14 + (v13 & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v11 < a3)
  {
    v16 = (a3 - v11 + 255) >> (8 * v15);
    if (v15 <= 3)
      v17 = v16 + 1;
    else
      v17 = 2;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v6 = v18;
    else
      v6 = 0;
  }
  if (v11 < a2)
  {
    if (v15 >= 4)
      v19 = ~v11 + a2;
    else
      v19 = (~(_BYTE)v11 + a2);
    bzero(a1, v15);
    if ((_DWORD)v15 == 1)
      *a1 = v19;
    else
      *(_DWORD *)a1 = v19;
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void sub_1AE765DC0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1AE765DC8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1AE765DD0);
}

void sub_1AE765E40()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_1AE765E58()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1AE765E60()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

void sub_1AE765E68(unsigned int a1@<W1>, size_t a2@<X8>)
{
  void *v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (a1)
  {
    if (v4 >= v6)
      JUMPOUT(0x1AE765E48);
    v2 = (void *)((v7 + v8) & v5);
    if (v6 >= a1)
      JUMPOUT(0x1AE765E74);
    if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v3 = a2;
      else
        v3 = 4;
      bzero(v2, a2);
      __asm { BR              X10 }
    }
  }
}

void sub_1AE765E90()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1AE765EA0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

uint64_t storeEnumTagSinglePayload for InferenceServiceRunnerCost(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for InferenceServiceRunnerCost()
{
  return &type metadata for InferenceServiceRunnerCost;
}

uint64_t sub_1AE765F00()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for InferenceServiceDidSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceServiceDidSet);
}

uint64_t method lookup function for InferenceServiceDidSet()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InferenceServiceDidSet.wrappedValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of InferenceServiceDidSet.wrappedValue.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of InferenceServiceDidSet.wrappedValue.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of InferenceServiceDidSet.__allocating_init(wrappedValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

ValueMetadata *type metadata accessor for _InferenceServiceRunnerNoEventLog.CodingKeys()
{
  return &type metadata for _InferenceServiceRunnerNoEventLog.CodingKeys;
}

unint64_t sub_1AE765FD4()
{
  unint64_t result;

  result = qword_1EEDA28A0;
  if (!qword_1EEDA28A0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE958DB4, &type metadata for _InferenceServiceRunnerNoEventLog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA28A0);
  }
  return result;
}

unint64_t sub_1AE766014()
{
  unint64_t result;

  result = qword_1EEDA28A8;
  if (!qword_1EEDA28A8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE958DDC, &type metadata for _InferenceServiceRunnerNoEventLog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA28A8);
  }
  return result;
}

uint64_t sub_1AE766050()
{
  return sub_1AE65FD08();
}

uint64_t (*sub_1AE766070(_QWORD *a1))()
{
  *a1 = 0;
  return j__s20IntelligencePlatform17TrialAssetManagerC13RefreshPolicyOwxx;
}

uint64_t InferenceSupportRemoteBackendType.hash(into:)()
{
  return sub_1AE926ED4();
}

BOOL static InferenceSupportRemoteBackendType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t InferenceSupportRemoteBackendType.hashValue.getter()
{
  sub_1AE926EC8();
  sub_1AE926ED4();
  return sub_1AE926F10();
}

_QWORD *static InferenceSupportRemoteBackend.assetRegistryRemoteBackendType.getter@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(a1 + 24))(&v4);
  *a2 = v4;
  return result;
}

unint64_t sub_1AE766158()
{
  unint64_t result;

  result = qword_1EEDA28B0;
  if (!qword_1EEDA28B0)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for InferenceSupportRemoteBackendType, &type metadata for InferenceSupportRemoteBackendType);
    atomic_store(result, (unint64_t *)&qword_1EEDA28B0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InferenceSupportRemoteBackendType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AE7661E0 + 4 * byte_1AE958E65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AE766214 + 4 * byte_1AE958E60[v4]))();
}

uint64_t sub_1AE766214(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE76621C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE766224);
  return result;
}

uint64_t sub_1AE766230(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE766238);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AE76623C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE766244(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InferenceSupportRemoteBackendType()
{
  return &type metadata for InferenceSupportRemoteBackendType;
}

uint64_t dispatch thunk of static InferenceSupportRemoteBackend.inferenceSupportRemoteBackendType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_1AE766268@<X0>(unsigned __int8 *a1@<X1>, uint64_t *a2@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t result;
  unsigned __int8 v6;

  v3 = *a1;
  v4 = type metadata accessor for InferenceSupportRemoteBackendXPC();
  v6 = v3;
  result = sub_1AE766B28(v4, &v6);
  *a2 = result;
  return result;
}

id sub_1AE7662B4()
{
  if (qword_1ED31C9B0 != -1)
    swift_once();
  return (id)qword_1ED31C9A0;
}

_QWORD *InferenceSupportBackendHelper.CreateBackend.init<A>(createRemoteBackend:getViewService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v14;
  _QWORD *result;
  uint64_t v16;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 24))(&v16, a5, a6);
  v14 = v16;
  result = (_QWORD *)swift_allocObject();
  result[2] = a5;
  result[3] = a6;
  result[4] = a1;
  result[5] = a2;
  *(_BYTE *)a7 = v14;
  *(_QWORD *)(a7 + 8) = sub_1AE766870;
  *(_QWORD *)(a7 + 16) = result;
  *(_QWORD *)(a7 + 24) = a3;
  *(_QWORD *)(a7 + 32) = a4;
  return result;
}

void sub_1AE7663A8()
{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  void (*v2)(char *__return_ptr);

  if (qword_1ED31A1E8 != -1)
    swift_once();
  v1 = off_1ED31B4C0;
  sub_1AE4FB7B0();
  sub_1AE4F9094();
  v2 = *(void (**)(char *__return_ptr))(v1[2] + 16);
  sub_1AE4F66E0();
  os_unfair_lock_unlock(v0);
  v2(&byte_1ED31B4C8);
  sub_1AE4FC564();
  sub_1AE4FCDE0();
}

uint64_t static InferenceSupportBackendHelper.createCreateBackend.getter()
{
  os_unfair_lock_s *v0;
  _QWORD *v1;
  uint64_t v2;

  if (qword_1ED31A1E8 != -1)
    swift_once();
  v1 = off_1ED31B4C0;
  sub_1AE4FB7B0();
  sub_1AE4F9094();
  v2 = *(_QWORD *)(v1[2] + 16);
  swift_retain();
  os_unfair_lock_unlock(v0);
  return v2;
}

uint64_t static InferenceSupportBackendHelper.createBackend.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED31A1F0 != -1)
    swift_once();
  v2 = qword_1ED31B4D0;
  v3 = qword_1ED31B4E8;
  *(_BYTE *)a1 = byte_1ED31B4C8;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = unk_1ED31B4D8;
  *(_QWORD *)(a1 + 32) = v3;
  swift_retain();
  return swift_retain();
}

void *sub_1AE766528()
{
  uint64_t v0;
  void *result;

  type metadata accessor for InferenceSupportBackendHelper._CreateCreateBackend();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = sub_1AE766590;
  *(_QWORD *)(v0 + 24) = 0;
  sub_1AE501548(qword_1ED31B438);
  swift_allocObject();
  result = (void *)sub_1AE50B7A4(v0);
  off_1ED31B4C0 = result;
  return result;
}

void sub_1AE766590(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = sub_1AE7669F4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = sub_1AE7662B4;
  *(_QWORD *)(a1 + 32) = 0;
}

void static InferenceSupportBackendHelper.createCreateBackend.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  if (qword_1ED31A1E8 != -1)
    swift_once();
  v4 = off_1ED31B4C0;
  swift_retain();
  sub_1AE503890();
  sub_1AE4F9094();
  v5 = v4[2];
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  swift_retain();
  sub_1AE4F6700();
  sub_1AE4FDF34();
  swift_release_n();
  sub_1AE4FCDE0();
}

void (*static InferenceSupportBackendHelper.createCreateBackend.modify(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = malloc(0x58uLL);
  *a1 = v2;
  if (qword_1ED31A1E8 != -1)
    swift_once();
  v3 = off_1ED31B4C0;
  sub_1AE503890();
  sub_1AE4F9094();
  v4 = v3[2];
  v6 = *(_QWORD *)(v4 + 16);
  v5 = *(_QWORD *)(v4 + 24);
  swift_retain();
  sub_1AE4FDF34();
  v2[9] = v6;
  v2[10] = v5;
  return sub_1AE7666F4;
}

void sub_1AE7666F4(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  sub_1AE4F66E0();
  if ((a2 & 1) != 0)
  {
    sub_1AE4F66E0();
    sub_1AE503890();
    sub_1AE4F9094();
    sub_1AE4FEFB4();
    sub_1AE4F6700();
    sub_1AE4FDF34();
    swift_release_n();
  }
  else
  {
    sub_1AE503890();
    sub_1AE4F9094();
    sub_1AE4FEFB4();
    sub_1AE4F6700();
    sub_1AE4FDF34();
    sub_1AE4FC564();
  }
  sub_1AE4FC564();
  free(v3);
}

void InferenceSupportBackendHelper.CreateBackend.remoteBackendType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_1AE7667B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v12(v9);
  if (!v4)
  {
    a4[3] = a2;
    a4[4] = a3;
    v14 = sub_1AE52F6A8(a4);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v8 + 32))(v14, v11, a2);
  }
  return result;
}

uint64_t sub_1AE76684C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AE766870@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1AE7667B4(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

ValueMetadata *type metadata accessor for InferenceSupportBackendHelper()
{
  return &type metadata for InferenceSupportBackendHelper;
}

uint64_t type metadata accessor for InferenceSupportBackendHelper._CreateCreateBackend()
{
  return objc_opt_self();
}

uint64_t destroy for InferenceSupportBackendHelper.CreateBackend()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for InferenceSupportBackendHelper.CreateBackend(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for InferenceSupportBackendHelper.CreateBackend(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for InferenceSupportBackendHelper.CreateBackend(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for InferenceSupportBackendHelper.CreateBackend()
{
  return &type metadata for InferenceSupportBackendHelper.CreateBackend;
}

uint64_t sub_1AE7669F4@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 v6;

  v6 = *a1;
  result = sub_1AE766268(&v6, &v5);
  if (!v2)
  {
    result = type metadata accessor for InferenceSupportRemoteBackendXPC();
    a2[3] = result;
    a2[4] = &off_1E5DC4220;
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1AE766A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = v3;
  v7 = type metadata accessor for AssetRegistryLocalBackendBasic();
  v8 = sub_1AE54A974(v7, a3);
  if (v4)
    swift_deallocPartialClassInstance();
  else
    *(_QWORD *)(v5 + 16) = v8;
  return v5;
}

uint64_t sub_1AE766AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1AE54AA04(a1, a2, a3, a4, a5);
}

uint64_t type metadata accessor for InferenceSupportLocalBackendBasic()
{
  return objc_opt_self();
}

uint64_t sub_1AE766B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1AE766AC8(a1, a2, a3, a4, a5);
}

uint64_t sub_1AE766B28(uint64_t a1, unsigned __int8 *a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v7;

  v7 = *a2;
  v2 = objc_msgSend(objc_allocWithZone((Class)GDXPCInferenceSupportService), sel_init);
  sub_1AE924408();
  sub_1AE4FCE84();
  v3 = sub_1AE9243FC();
  sub_1AE9243C0();
  sub_1AE4FCE84();
  v4 = sub_1AE9243B4();
  v5 = swift_allocObject();
  sub_1AE76706C(v5, &v7, v2, v3, v4);
  return v5;
}

void sub_1AE766BD8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  id v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1AF454348]();
  LOBYTE(v50) = *(_BYTE *)(v1 + 24);
  sub_1AE53C938();
  v5 = sub_1AE9243F0();
  if (v2)
  {
    objc_autoreleasePoolPop(v4);
    return;
  }
  v47 = a1;
  v7 = v5;
  v8 = v4;
  v9 = v6;
  objc_autoreleasePoolPop(v8);
  v10 = *(void **)(v1 + 16);
  v11 = v9;
  v12 = (void *)sub_1AE925E18();
  v13 = (void *)sub_1AE925E18();
  v14 = (void *)sub_1AE92481C();
  *(_QWORD *)&v50 = 0;
  v15 = objc_msgSend(v10, sel_assetEntryResultDataForAssetId_inDomainId_remoteOptionsData_error_, v12, v13, v14, &v50);

  v16 = (id)v50;
  if (!v15)
  {
    v22 = v16;
    v23 = (void *)sub_1AE9246B4();

    swift_willThrow();
    sub_1AE54C7D8();
    swift_allocError();
    *v24 = v23;
    v25 = v23;
    swift_willThrow();
    sub_1AE50BDB4(v7, v11);

    return;
  }
  v48 = v7;
  v49 = v11;
  v17 = sub_1AE924834();
  v19 = v18;

  sub_1AE54C814(v17, v19);
  v20 = swift_retain();
  v21 = (void *)MEMORY[0x1AF454348](v20);
  sub_1AE501548(&qword_1EED9B8A0);
  sub_1AE7671A0();
  sub_1AE9243A8();
  objc_autoreleasePoolPop(v21);
  v26 = v50;
  v27 = v51;
  v28 = v53;
  v29 = v54;
  v46 = v52;
  if ((v55 & 1) != 0)
  {
    v44 = v53;
    swift_release();
    sub_1AE50BDB4(v17, v19);
    v50 = v26;
    LOBYTE(v51) = v27;
    sub_1AE547444(v26, *((uint64_t *)&v26 + 1), v27);
    sub_1AE547444(v26, *((uint64_t *)&v26 + 1), v27);
    sub_1AE545928();
    if (sub_1AE926D30())
    {
      v30 = v44;
      v31 = v46;
      sub_1AE54ABBC(v26, *((uint64_t *)&v26 + 1), v27, v46, v44, v29, 1);
    }
    else
    {
      swift_allocError();
      v33 = v51;
      *(_OWORD *)v34 = v50;
      *(_BYTE *)(v34 + 16) = v33;
      v30 = v44;
      v31 = v46;
    }
    swift_willThrow();
    sub_1AE54ABBC(v26, *((uint64_t *)&v26 + 1), v27, v31, v30, v29, 1);
    sub_1AE50BDB4(v17, v19);
    sub_1AE50BDB4(v48, v49);
    v36 = *((_QWORD *)&v26 + 1);
    v35 = v26;
    v37 = v27;
    v38 = v31;
    v39 = v30;
    v40 = v29;
    v41 = 1;
  }
  else
  {
    if ((v52 & 0x80) != 0)
    {
      swift_release();
      sub_1AE50BDB4(v17, v19);
    }
    else
    {
      v43 = v54;
      v45 = v53;
      v42 = v51;
      LOBYTE(v52) = v52 & 1;
      AssetRegistryAssetLocation.LocalAsset.verifyValidity()();
      swift_release();
      sub_1AE50BDB4(v17, v19);
      if (v32)
      {
        sub_1AE54ABBC(v26, *((uint64_t *)&v26 + 1), v42, v46, v45, v43, 0);
        sub_1AE50BDB4(v17, v19);
        sub_1AE50BDB4(v48, v11);
        return;
      }
      v29 = v43;
      v28 = v45;
    }
    *(_OWORD *)v47 = v26;
    *(_QWORD *)(v47 + 16) = v27;
    *(_WORD *)(v47 + 24) = v46;
    *(_BYTE *)(v47 + 26) = BYTE2(v46);
    *(_QWORD *)(v47 + 32) = v28;
    *(_QWORD *)(v47 + 40) = v29;
    sub_1AE536B1C(v26, *((uint64_t *)&v26 + 1), v27, v46);
    swift_bridgeObjectRetain();
    sub_1AE50BDB4(v17, v19);
    sub_1AE50BDB4(v48, v11);
    v36 = *((_QWORD *)&v26 + 1);
    v35 = v26;
    v37 = v27;
    v38 = v46;
    v39 = v28;
    v40 = v29;
    v41 = 0;
  }
  sub_1AE54ABBC(v35, v36, v37, v38, v39, v40, v41);
}

_QWORD *sub_1AE76706C(uint64_t a1, unsigned __int8 *a2, void *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  id v11;

  v6 = v5;
  v10 = *a2;
  v6[2] = a3;
  sub_1AE501548(&qword_1EED94CA0);
  swift_allocObject();
  v6[3] = sub_1AE54BEF8(v10, a3, a4, a5);
  v6[4] = a5;
  v11 = a3;
  swift_retain();
  return v6;
}

void sub_1AE7670F4(uint64_t a1@<X8>)
{
  sub_1AE766BD8(a1);
}

uint64_t sub_1AE767114()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1AE767140()
{
  sub_1AE767114();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InferenceSupportRemoteBackendXPC()
{
  return objc_opt_self();
}

void sub_1AE767180(uint64_t a1@<X8>)
{
  sub_1AE7670F4(a1);
}

unint64_t sub_1AE7671A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EED9B8A8;
  if (!qword_1EED9B8A8)
  {
    v1 = sub_1AE523CF0(&qword_1EED9B8A0);
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for AssetRegistryResult<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1EED9B8A8);
  }
  return result;
}

uint64_t InitializationResourcesManager.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = sub_1AE925C98();
  return v0;
}

uint64_t sub_1AE767240@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v16;
  char v17[32];
  uint64_t v18[3];
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_1AE92670C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v17[-v9 - 8];
  swift_beginAccess();
  sub_1AE4FEFC8();
  v11 = v19;
  sub_1AE575148((uint64_t)v18);
  if (!v11)
  {
    v16 = v8;
    v12 = v7;
    v13 = a3;
    v14 = *(void (**)(uint64_t, uint64_t))(a2 + 40);
    v19 = AssociatedTypeWitness;
    sub_1AE52F6A8(v18);
    v14(a1, a2);
    a3 = v13;
    v7 = v12;
    v8 = v16;
    swift_beginAccess();
    sub_1AE741EA0((uint64_t)v18);
    swift_endAccess();
  }
  sub_1AE4FEFC8();
  sub_1AE76749C((uint64_t)v18, (uint64_t)v17);
  sub_1AE501548((uint64_t *)&unk_1ED31C440);
  if (swift_dynamicCast())
  {
    sub_1AE4FCF34((uint64_t)v10, 0);
    sub_1AE575148((uint64_t)v18);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a3, v10, AssociatedTypeWitness);
  }
  else
  {
    sub_1AE4FCF34((uint64_t)v10, 1);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    result = sub_1AE926AB4();
    __break(1u);
  }
  return result;
}

uint64_t InitializationResourcesManager.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = sub_1AE925C98();
  return v0;
}

uint64_t sub_1AE76749C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1AE501548((uint64_t *)&unk_1ED31C440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t InitializationResourcesManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t InitializationResourcesManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InitializationResourcesManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for InitializationResourcesManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InitializationResourcesManager.getOrInit<A>(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of InitializationResourcesManager.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for IntentArgContextGenerator()
{
  return &type metadata for IntentArgContextGenerator;
}

uint64_t sub_1AE767574()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  static EntityPredicate.name.getter();
  result = swift_bridgeObjectRelease();
  qword_1EEE11FB0 = v1;
  *(_QWORD *)algn_1EEE11FB8 = v2;
  return result;
}

uint64_t sub_1AE7675B4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  _QWORD v24[4];
  uint64_t v25;

  result = MEMORY[0x1E0DEE9E8];
  if (!*(_QWORD *)(a2 + 8))
    return result;
  v3 = *(_QWORD *)(a2 + 16);
  v25 = MEMORY[0x1E0DEE9E8];
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 56);
  v21 = (unint64_t)(v4 + 63) >> 6;
  v22 = v3;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_5:
  v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v23 = v7;
  for (i = v8 | (v7 << 6); ; i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v22 + 48) + 32 * i);
    v15 = *v14;
    v16 = v14[1];
    v17 = qword_1EED99860;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    if (v17 != -1)
      swift_once();
    v24[0] = v15;
    v24[1] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AE500ED4();
    sub_1AE5003C4();
    sub_1AE925F74();
    sub_1AE4F67AC();
    sub_1AE5003C4();
    sub_1AE500ED4();
    sub_1AE4F67AC();
    sub_1AE5003C4();
    sub_1AE925F74();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AE4F67AC();
    sub_1AE5568E0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AE4F67AC();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v7 = v23;
    if (v6)
      goto LABEL_5;
LABEL_6:
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v10 >= v21)
      goto LABEL_24;
    v11 = *(_QWORD *)(v20 + 8 * v10);
    v12 = v7 + 1;
    if (!v11)
    {
      v12 = v7 + 2;
      if (v7 + 2 >= v21)
        goto LABEL_24;
      v11 = *(_QWORD *)(v20 + 8 * v12);
      if (!v11)
      {
        v12 = v7 + 3;
        if (v7 + 3 >= v21)
          goto LABEL_24;
        v11 = *(_QWORD *)(v20 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_19:
    v6 = (v11 - 1) & v11;
    v23 = v12;
  }
  v13 = v7 + 4;
  if (v7 + 4 >= v21)
  {
LABEL_24:
    swift_release();
    v24[0] = *(_QWORD *)(v22 + 16);
    v18 = sub_1AE926D18();
    KnosisInternalFact.init(sid:pid:oid:)(0x746E65746E69, 0xE600000000000000, 0x746E756F43677261, 0xE800000000000000, v18, v19, v24);
    sub_1AE5568E0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AE4F67AC();
    swift_bridgeObjectRelease();
    return v25;
  }
  v11 = *(_QWORD *)(v20 + 8 * v13);
  if (v11)
  {
    v12 = v7 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v21)
      goto LABEL_24;
    v11 = *(_QWORD *)(v20 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_19;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1AE767920(uint64_t a1, uint64_t a2)
{
  return sub_1AE7675B4(a1, a2);
}

double IPFastEnumerationIterator.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = a1;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 81) = 0u;
  return result;
}

void IPFastEnumerationIterator.next()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[64];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(v1 + 80);
  if (__OFADD__(v3, 1))
    __break(1u);
  if (*(_QWORD *)(v1 + 88) >= v3 + 1)
  {
    if ((*(_BYTE *)(v1 + 96) & 1) == 0)
    {
      v10 = *(uint64_t **)(v1 + 24);
LABEL_18:
      if (v10)
      {
        v16 = v10[v3];
        if (v16)
        {
          swift_unknownObjectRetain();
          *(_QWORD *)(a1 + 24) = swift_getObjectType();
          *(_QWORD *)a1 = v16;
        }
        else
        {
          *(_OWORD *)a1 = 0u;
          *(_OWORD *)(a1 + 16) = 0u;
        }
        v15 = v3 + 1;
        goto LABEL_24;
      }
      goto LABEL_28;
    }
    if (v3)
    {
LABEL_29:
      sub_1AE926AB4();
      __break(1u);
      return;
    }
    v14 = *(_QWORD *)(v1 + 8);
  }
  else
  {
    *(_QWORD *)(v1 + 80) = 0;
    v4 = *(_OWORD *)(v1 + 32);
    *(_OWORD *)v18 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)&v18[16] = v4;
    v5 = *(_OWORD *)(v1 + 64);
    *(_OWORD *)&v18[32] = *(_OWORD *)(v1 + 48);
    *(_OWORD *)&v18[48] = v5;
    v6 = *(void **)v1;
    v17 = *(_QWORD *)(v1 + 8);
    v7 = objc_msgSend(v6, sel_countByEnumeratingWithState_objects_count_, v18, &v17, 1);
    *(_QWORD *)(v1 + 88) = v7;
    v8 = *(_QWORD *)&v18[56];
    v9 = *(uint64_t **)&v18[8];
    *(_OWORD *)(v1 + 24) = *(_OWORD *)&v18[8];
    v10 = v9;
    if (v9)
      v11 = &v17 == v9;
    else
      v11 = 0;
    v12 = v11;
    *(_BYTE *)(v1 + 96) = v12;
    *(_OWORD *)(v1 + 40) = *(_OWORD *)&v18[24];
    *(_OWORD *)(v1 + 56) = *(_OWORD *)&v18[40];
    *(_QWORD *)(v1 + 72) = v8;
    v14 = v17;
    v13 = *(_QWORD *)v18;
    *(_QWORD *)(v1 + 8) = v17;
    *(_QWORD *)(v1 + 16) = v13;
    if (!v7)
    {
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return;
    }
    if ((v12 & 1) == 0)
    {
      v3 = 0;
      goto LABEL_18;
    }
  }
  if (!v14)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  swift_unknownObjectRetain();
  *(_QWORD *)(a1 + 24) = swift_getObjectType();
  *(_QWORD *)a1 = v14;
  v15 = 1;
LABEL_24:
  *(_QWORD *)(v1 + 80) = v15;
}

id NSEnumerator.makeIPFastEnumerationIterator()@<X0>(uint64_t a1@<X8>)
{
  void *v1;

  *(_QWORD *)a1 = v1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  return v1;
}

uint64_t initializeWithCopy for IPFastEnumerationIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IPFastEnumerationIterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for IPFastEnumerationIterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for IPFastEnumerationIterator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 97))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IPFastEnumerationIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 97) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IPFastEnumerationIterator()
{
  return &type metadata for IPFastEnumerationIterator;
}

uint64_t sub_1AE767D50(__int128 *a1, uint64_t a2, _OWORD *a3, id a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __n128 *v11;
  __int128 v12;
  __int128 v14;

  v14 = *a1;
  v8 = *((_QWORD *)a1 + 2);
  v9 = *((_QWORD *)a1 + 3);
  v10 = *((_BYTE *)a1 + 32);
  sub_1AE501548(&qword_1ED319608);
  v11 = (__n128 *)sub_1AE4F66BC();
  sub_1AE506378(v11, (__n128)xmmword_1AE959180);
  static EntityPredicate.name.getter();
  static EntityPredicate.url.getter();
  static EntityPredicate.lastUpdated.getter();
  static EntityPredicate.sameAs.getter();
  static EntityPredicate.creationDate.getter();
  static EntityPredicate.imputedCreationDate.getter();
  static EntityPredicate.imputedLastUpdated.getter();
  static EntityPredicate.identifierId.getter();
  static EntityPredicate.identifierType.getter();
  static EntityPredicate.relationshipLabel.getter();
  static EntityPredicate.locationLabel.getter();
  *(_QWORD *)(v4 + 80) = v8;
  *(_QWORD *)(v4 + 88) = v9;
  *(_BYTE *)(v4 + 96) = v10;
  *(_QWORD *)(v4 + 16) = v11;
  *(_QWORD *)(v4 + 24) = a2;
  v12 = a3[1];
  *(_OWORD *)(v4 + 32) = *a3;
  *(_OWORD *)(v4 + 48) = v12;
  *(_OWORD *)(v4 + 64) = v14;
  if (!a4)
    a4 = (id)v12;
  *(_QWORD *)(v4 + 104) = a4;
  return v4;
}

__n128 *sub_1AE767E54()
{
  __n128 *v0;

  sub_1AE501548(&qword_1ED319608);
  v0 = (__n128 *)sub_1AE4F66BC();
  sub_1AE506378(v0, (__n128)xmmword_1AE934250);
  return v0;
}

uint64_t sub_1AE767E94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46[5];
  uint64_t v47;
  uint64_t v48[3];
  uint64_t v49;
  uint64_t v50;

  v4 = a1[3];
  v5 = a1[4];
  sub_1AE4F9858(a1, v4);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v49 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v50 = AssociatedConformanceWitness;
  sub_1AE52F6A8(v48);
  v6(v4, v5);
  v9 = BaseEntityFactObjectProtocol.asDouble.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v10 & 1) != 0)
  {
    sub_1AE769C80(v9, v10, v11, v12, v13, v14, v15);
    if (qword_1EED99828 != -1)
      swift_once();
    v17 = sub_1AE925B6C();
    sub_1AE4FB608(v17, (uint64_t)qword_1EED9F7E8);
    sub_1AE57C238((uint64_t)a1, (uint64_t)v48);
    v18 = sub_1AE925B54();
    v19 = sub_1AE9265EC();
    v20 = os_log_type_enabled(v18, v19);
    if (v20)
    {
      v27 = (uint8_t *)sub_1AE4F66A0();
      v47 = sub_1AE4F66A0();
      *(_DWORD *)v27 = 136642819;
      sub_1AE57C238((uint64_t)v48, (uint64_t)v46);
      sub_1AE501548((uint64_t *)&unk_1EED9E228);
      v28 = sub_1AE925EA8();
      sub_1AE520ED4(v28, v29, (uint64_t)&v47, v30, v31, v32, v33, v34, v45, v46[0], v46[1], v46[2], v46[3], v46[4], v47, v48[0], v48[1], v48[2], v49,
        v50);
      v46[0] = v35;
      sub_1AE92676C();
      v36 = sub_1AE4F6728();
      sub_1AE769C80(v36, v37, v38, v39, v40, v41, v42);
      _os_log_impl(&dword_1AE4F2000, v18, v19, "Failed to parse %{sensitive}s.", v27, 0xCu);
      swift_arrayDestroy();
      sub_1AE4F9064();
    }
    sub_1AE769C80(v20, v21, v22, v23, v24, v25, v26);

    v16 = 1;
  }
  else
  {
    sub_1AE769C80(v9, v10, v11, v12, v13, v14, v15);
    sub_1AE924858();
    v16 = 0;
  }
  v43 = sub_1AE4F675C();
  return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(a2, v16, 1, v43);
}

void sub_1AE768100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;

  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AE4F675C();
  sub_1AE50609C();
  MEMORY[0x1E0C80A78](v6);
  v7 = (_QWORD *)sub_1AE507AE4();
  sub_1AE767E94(v7, v8);
  sub_1AE4FCF0C((uint64_t)v5);
  if (v9)
  {
    sub_1AE52982C((uint64_t)v5, &qword_1ED30EB60);
  }
  else
  {
    sub_1AE5071C0();
    v10 = *(void **)(v0 + 40);
    v11 = (void *)sub_1AE769CA4();
    v12 = sub_1AE50A44C(v10, sel_stringFromDate_);

    sub_1AE925E3C();
    sub_1AE4F7964();
    sub_1AE4FDC10(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  sub_1AE4FCDD0();
}

void sub_1AE7681E8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30[5];
  uint64_t v31;
  uint64_t v32[3];
  uint64_t v33;
  uint64_t v34;

  v29 = a2;
  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v30[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_1AE4F9858(a1, v7);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v34 = AssociatedConformanceWitness;
  sub_1AE52F6A8(v32);
  v9(v7, v8);
  BaseEntityFactObjectProtocol.asDateFromJSON(decodeWith:)(*(_QWORD *)(v2 + 32), AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v6);
  v12 = sub_1AE4F675C();
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v6, 1, v12) == 1)
  {
    v13 = v29;
    sub_1AE52982C((uint64_t)v6, &qword_1ED30EB60);
    sub_1AE506A18();
    if (qword_1EED99828 != -1)
      swift_once();
    v14 = sub_1AE925B6C();
    sub_1AE4FB608(v14, (uint64_t)qword_1EED9F7E8);
    sub_1AE57C238((uint64_t)a1, (uint64_t)v32);
    v15 = sub_1AE925B54();
    v16 = sub_1AE9265EC();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)sub_1AE4F66A0();
      v31 = sub_1AE4F66A0();
      *(_DWORD *)v17 = 136642819;
      sub_1AE57C238((uint64_t)v32, (uint64_t)v30);
      sub_1AE501548((uint64_t *)&unk_1EED9E228);
      v18 = sub_1AE925EA8();
      sub_1AE520ED4(v18, v19, (uint64_t)&v31, v20, v21, v22, v23, v24, v29, v30[0], v30[1], v30[2], v30[3], v30[4], v31, v32[0], v32[1], v32[2], v33,
        v34);
      v30[0] = v25;
      sub_1AE92676C();
      sub_1AE4F6710();
      sub_1AE506A18();
      _os_log_impl(&dword_1AE4F2000, v15, v16, "Failed to parse %{sensitive}s.", v17, 0xCu);
      swift_arrayDestroy();
      sub_1AE4F9064();
    }
    sub_1AE506A18();

    v28 = v13;
    v27 = 1;
  }
  else
  {
    v26 = v29;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v29, v6, v12);
    sub_1AE506A18();
    v27 = 0;
    v28 = v26;
  }
  sub_1AE4FCF34(v28, v27);
  sub_1AE4F8180();
}

uint64_t sub_1AE7684A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  char v8;
  double v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v14[5];

  v2 = a1[3];
  v3 = a1[4];
  sub_1AE4F9858(a1, v2);
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14[3] = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14[4] = AssociatedConformanceWitness;
  sub_1AE52F6A8(v14);
  v4(v2, v3);
  v7 = BaseEntityFactObjectProtocol.asDouble.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v8 & 1) != 0)
  {
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v14);
    return 0;
  }
  v9 = *(double *)&v7;
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v14);
  v10 = objc_msgSend(*(id *)(v1 + 56), sel_stringFromTimeInterval_, v9);
  if (!v10)
    return 0;
  v11 = v10;
  v12 = sub_1AE925E3C();

  return v12;
}

void sub_1AE7685DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;

  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AE4F675C();
  sub_1AE50609C();
  MEMORY[0x1E0C80A78](v6);
  v7 = (_QWORD *)sub_1AE507AE4();
  sub_1AE7681E8(v7, v8);
  sub_1AE4FCF0C((uint64_t)v5);
  if (v9)
  {
    sub_1AE52982C((uint64_t)v5, &qword_1ED30EB60);
  }
  else
  {
    sub_1AE5071C0();
    v10 = *(void **)(v0 + 40);
    v11 = (void *)sub_1AE769CA4();
    v12 = sub_1AE50A44C(v10, sel_stringFromDate_);

    sub_1AE925E3C();
    sub_1AE4F7964();
    sub_1AE4FDC10(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  sub_1AE4FCDD0();
}

void sub_1AE7686C4(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  char v33;
  char v35;
  char v37;
  char v39;
  char v41;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v62;
  char v64;
  uint64_t v66;
  uint64_t v67;
  char v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  char v95;
  uint64_t v96;
  char v98;
  uint64_t v99;
  char v101;
  uint64_t v102;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v116;
  uint64_t *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[2];
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;

  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F686C();
  v148 = v5;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v6);
  sub_1AE4F6A60();
  v147 = v7;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v8);
  sub_1AE4F6A60();
  v145 = v9;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v10);
  sub_1AE4F6A60();
  v149 = v11;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v12);
  sub_1AE4F6A60();
  v150 = v13;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v144 - v15;
  v154 = sub_1AE4F675C();
  v152 = *(_QWORD *)(v154 - 8);
  MEMORY[0x1E0C80A78](v154);
  sub_1AE4F686C();
  v146 = v17;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v18);
  v151 = (uint64_t)v144 - v19;
  v20 = a1[3];
  v21 = a1[4];
  sub_1AE4F9858(a1, v20);
  v22 = *(void (**)(uint64_t, uint64_t))(v21 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v160 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v161 = AssociatedConformanceWitness;
  sub_1AE52F6A8(&v158);
  v22(v20, v21);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  if (!v26)
  {
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v158);
    sub_1AE4FDF3C();
LABEL_43:
    sub_1AE769C88();
    goto LABEL_44;
  }
  v27 = v26;
  v28 = v25;
  v153 = a2;
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v158);
  sub_1AE4FEFD4();
  v30 = v158;
  v29 = v159;
  v31 = v160;
  static EntityPredicate.dateOfBirth.getter();
  sub_1AE501E4C();
  v32 = v32 && AssociatedTypeWitness == v29;
  if (v32)
    goto LABEL_35;
  v33 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F6718();
  if ((v33 & 1) != 0)
  {
LABEL_7:
    sub_1AE4F76D8();
    sub_1AE4F9038();
    sub_1AE4F6710();
LABEL_36:
    sub_1AE7685DC();
    goto LABEL_37;
  }
  static EntityPredicate.dateOfDeath.getter();
  sub_1AE501E4C();
  if (v32 && AssociatedTypeWitness == v29)
    goto LABEL_35;
  v35 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F6718();
  if ((v35 & 1) != 0)
    goto LABEL_7;
  static EntityPredicate.nonGregorianBirthday.getter();
  sub_1AE501E4C();
  if (v32 && AssociatedTypeWitness == v29)
    goto LABEL_35;
  v37 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F6718();
  if ((v37 & 1) != 0)
    goto LABEL_7;
  static EntityPredicate.anniversary.getter();
  sub_1AE501E4C();
  if (v32 && AssociatedTypeWitness == v29)
    goto LABEL_35;
  v39 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F6718();
  if ((v39 & 1) != 0)
    goto LABEL_7;
  static EntityPredicate.inferredBirthday.getter();
  sub_1AE501E4C();
  if (v32 && AssociatedTypeWitness == v29)
  {
LABEL_35:
    sub_1AE4F76D8();
    sub_1AE4F6710();
    sub_1AE4F6648();
    sub_1AE4FD924();
    goto LABEL_36;
  }
  v41 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F6718();
  if ((v41 & 1) != 0)
    goto LABEL_7;
  static EntityPredicate.duration.getter();
  sub_1AE501E4C();
  if (v32 && AssociatedTypeWitness == v29)
  {
    sub_1AE4F76D8();
    sub_1AE4F6710();
    sub_1AE4F6648();
    sub_1AE4FD924();
    goto LABEL_46;
  }
  v43 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F6718();
  if ((v43 & 1) != 0)
  {
    sub_1AE4F76D8();
    sub_1AE4F9038();
    sub_1AE4F6710();
LABEL_46:
    v44 = sub_1AE7684A8(a1);
LABEL_37:
    v46 = v153;
    if (v45)
    {
      v47 = v44;
      v48 = v45;
      v49 = (int *)sub_1AE4FDF3C();
LABEL_39:
      sub_1AE769C88();
      v50 = v154;
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v51, v52, v53, v154);
      sub_1AE769C88();
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v54, v55, v56, v50);
      *v46 = v47;
      v46[1] = v48;
LABEL_40:
      *(uint64_t *)((char *)v46 + v49[7]) = MEMORY[0x1E0DEE9D8];
      v57 = (uint64_t)v46;
LABEL_41:
      v58 = 0;
      v59 = 1;
      v60 = (uint64_t)v49;
LABEL_44:
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v57, v58, v59, v60);
      sub_1AE4F8180();
      return;
    }
    goto LABEL_42;
  }
  static EntityPredicate.startTime.getter();
  sub_1AE501E4C();
  if (v32 && AssociatedTypeWitness == v29)
    goto LABEL_75;
  v144[1] = v31;
  v62 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F6718();
  if ((v62 & 1) != 0)
  {
LABEL_52:
    sub_1AE4FCA54();
    sub_1AE4F9038();
    sub_1AE4F6710();
LABEL_76:
    v70 = v155;
    sub_1AE7681E8(a1, (uint64_t)v16);
    sub_1AE4FCF0C((uint64_t)v16);
    if (!v32)
    {
      sub_1AE4F94EC(v151, (uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 32));
      v72 = *(void **)(v70 + 104);
      v73 = (void *)sub_1AE769CA4();
      v74 = sub_1AE50A44C(v72, sel_stringFromDate_);

      v75 = sub_1AE925E3C();
      v77 = v76;

      sub_1AE4FEFD4();
      v78 = v158;
      v79 = v159;
      static EntityPredicate.startTime.getter();
      if (v78 == v156 && v79 == v157)
      {
        sub_1AE4F66E8();
        sub_1AE4F6710();
        sub_1AE4FD924();
      }
      else
      {
        v81 = sub_1AE4FB6F0();
        sub_1AE4F66E8();
        sub_1AE4F9038();
        sub_1AE4F6710();
        sub_1AE4F6718();
        if ((v81 & 1) == 0)
        {
          v82 = 1;
          goto LABEL_89;
        }
      }
      sub_1AE4F94EC(v150, v151, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 16));
      v82 = 0;
LABEL_89:
      sub_1AE769CAC(v150, v82, 1);
      sub_1AE4FEFD4();
      v83 = v158;
      v84 = v159;
      static EntityPredicate.endTime.getter();
      if (v83 == v156 && v84 == v157)
      {
        sub_1AE4F66E8();
        sub_1AE4F81B8();
        sub_1AE4FD924();
      }
      else
      {
        v86 = sub_1AE4FB6F0();
        sub_1AE4F66E8();
        sub_1AE4F9038();
        sub_1AE4F81B8();
        sub_1AE4F6710();
        if ((v86 & 1) == 0)
        {
          v87 = 1;
          v88 = v149;
LABEL_97:
          sub_1AE769CAC(v88, v87, 1);
          sub_1AE4FDC10(v151, *(uint64_t (**)(uint64_t, uint64_t))(v152 + 8));
          v46 = v153;
          *v153 = v75;
          v46[1] = v77;
          v49 = (int *)sub_1AE4FDF3C();
          v89 = (uint64_t)v46 + v49[5];
          v90 = v150;
LABEL_98:
          sub_1AE5298B4(v90, v89);
          sub_1AE5298B4(v88, (uint64_t)v46 + v49[6]);
          goto LABEL_40;
        }
      }
      v88 = v149;
      sub_1AE4F94EC(v149, v151, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 16));
      v87 = 0;
      goto LABEL_97;
    }
    v71 = (uint64_t)v16;
LABEL_79:
    sub_1AE52982C(v71, &qword_1ED30EB60);
LABEL_42:
    sub_1AE4FDF3C();
    goto LABEL_43;
  }
  static EntityPredicate.endTime.getter();
  sub_1AE501E4C();
  if (v32 && AssociatedTypeWitness == v29)
    goto LABEL_75;
  v64 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F6718();
  if ((v64 & 1) != 0)
    goto LABEL_52;
  static EntityPredicate.occurrenceDate.getter();
  sub_1AE501E4C();
  if (v32 && AssociatedTypeWitness == v29)
  {
LABEL_75:
    swift_bridgeObjectRelease();
    sub_1AE4F6710();
    sub_1AE4F6648();
    sub_1AE4FD924();
    goto LABEL_76;
  }
  v66 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F6718();
  if ((v66 & 1) != 0)
    goto LABEL_52;
  if (!_Records_GDEntityPredicate_records)
    goto LABEL_217;
  v67 = *((_QWORD *)_Records_GDEntityPredicate_records + 466);
  v151 = 2674;
  if (v67 >= 2674)
  {
    __break(1u);
    goto LABEL_205;
  }
  AssociatedTypeWitness = 3558;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 467) >= 3558)
  {
LABEL_205:
    __break(1u);
    __break(1u);
LABEL_206:
    __break(1u);
    goto LABEL_207;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_219:
    __break(1u);
    goto LABEL_220;
  }
  sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
    goto LABEL_222;
  }
  sub_1AE4FD3A8();
  sub_1AE769C74();
  if (v32 && v66 == v29)
    goto LABEL_145;
  v69 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F665C();
  if ((v69 & 1) != 0)
  {
LABEL_74:
    sub_1AE4FCA54();
    sub_1AE4F9038();
    sub_1AE4F6710();
    goto LABEL_146;
  }
  if (!_Records_GDEntityPredicate_records)
    goto LABEL_223;
  sub_1AE50881C();
  if (v92 == v93)
    goto LABEL_206;
  if (*(uint64_t *)(v91 + 3784) >= 3558)
  {
LABEL_207:
    __break(1u);
LABEL_208:
    sub_1AE4F6710();
    sub_1AE4FCA54();
    goto LABEL_172;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_224:
    __break(1u);
    goto LABEL_225;
  }
  sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_225:
    __break(1u);
LABEL_226:
    __break(1u);
    goto LABEL_227;
  }
  sub_1AE4FD3A8();
  sub_1AE769C74();
  if (v32 && v66 == v29)
    goto LABEL_145;
  v95 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F665C();
  if ((v95 & 1) != 0)
    goto LABEL_74;
  if (!_Records_GDEntityPredicate_records)
    goto LABEL_228;
  sub_1AE50881C();
  if (v92 == v93)
  {
    __break(1u);
LABEL_209:
    __break(1u);
    __break(1u);
LABEL_210:
    __break(1u);
    goto LABEL_211;
  }
  if (*(uint64_t *)(v96 + 3760) >= 3558)
    goto LABEL_209;
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_229:
    __break(1u);
    goto LABEL_230;
  }
  sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_230:
    __break(1u);
LABEL_231:
    __break(1u);
    goto LABEL_232;
  }
  sub_1AE4FD3A8();
  sub_1AE769C74();
  if (v32 && v66 == v29)
    goto LABEL_145;
  v98 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F665C();
  if ((v98 & 1) != 0)
    goto LABEL_74;
  if (!_Records_GDEntityPredicate_records)
    goto LABEL_231;
  sub_1AE50881C();
  if (v92 == v93)
    goto LABEL_210;
  if (*(uint64_t *)(v99 + 4336) >= 3558)
  {
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
    goto LABEL_213;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_232:
    __break(1u);
    goto LABEL_233;
  }
  sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_233:
    __break(1u);
LABEL_234:
    __break(1u);
    goto LABEL_235;
  }
  sub_1AE4FD3A8();
  sub_1AE769C74();
  if (v32 && v66 == v29)
  {
LABEL_145:
    sub_1AE4FCA54();
    sub_1AE4F6710();
    sub_1AE4F6648();
    sub_1AE4FD924();
LABEL_146:
    sub_1AE768100();
    if (v106)
    {
      v47 = v105;
      v48 = v106;
      v49 = (int *)sub_1AE4FDF3C();
      v46 = v153;
      goto LABEL_39;
    }
    goto LABEL_42;
  }
  v101 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F665C();
  if ((v101 & 1) != 0)
    goto LABEL_74;
  if (!_Records_GDEntityPredicate_records)
    goto LABEL_234;
  sub_1AE50881C();
  if (v92 == v93)
    goto LABEL_212;
  if (*(uint64_t *)(v102 + 3664) >= 3558)
  {
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
    goto LABEL_215;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_235:
    __break(1u);
    goto LABEL_236;
  }
  sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_236:
    __break(1u);
LABEL_237:
    __break(1u);
    goto LABEL_238;
  }
  sub_1AE4FD3A8();
  sub_1AE769C74();
  if (v32 && v66 == v29)
    goto LABEL_171;
  v104 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F665C();
  if ((v104 & 1) != 0)
  {
LABEL_143:
    sub_1AE4FCA54();
    sub_1AE4F9038();
    goto LABEL_144;
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_243:
    __break(1u);
    goto LABEL_244;
  }
  sub_1AE50881C();
  if (v92 == v93)
    goto LABEL_221;
  if (*(uint64_t *)(v107 + 3688) >= 3558)
  {
LABEL_222:
    __break(1u);
LABEL_223:
    __break(1u);
    goto LABEL_224;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_244:
    __break(1u);
    goto LABEL_245;
  }
  sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  sub_1AE4FD3A8();
  sub_1AE769C74();
  if (v32 && v66 == v29)
  {
LABEL_171:
    sub_1AE4FCA54();
    sub_1AE4F6710();
LABEL_172:
    swift_bridgeObjectRelease();
    sub_1AE4FD924();
LABEL_173:
    v118 = v145;
    sub_1AE767E94(a1, v145);
    if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v118, 1, v154) == 1)
    {
      v71 = v145;
      goto LABEL_79;
    }
    sub_1AE505E5C(v146, v145, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v152 + 32));
    v119 = *(void **)(v155 + 104);
    v120 = (void *)sub_1AE92487C();
    v121 = sub_1AE50A44C(v119, sel_stringFromDate_);

    v155 = sub_1AE925E3C();
    v150 = v122;

    sub_1AE4FEFD4();
    if (!_Records_GDEntityPredicate_records)
      goto LABEL_237;
    sub_1AE50881C();
    if (v92 == v93)
      goto LABEL_214;
    if (*(_QWORD *)(v123 + 3664) >= AssociatedTypeWitness)
    {
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
      goto LABEL_218;
    }
    if (!_Records_GDEntityPredicate_predicateIds)
    {
LABEL_238:
      __break(1u);
      goto LABEL_239;
    }
    v125 = v158;
    v124 = v159;
    v126 = sub_1AE925F8C();
    if (!_Records_GDEntityPredicate_labels)
    {
LABEL_239:
      __break(1u);
      goto LABEL_240;
    }
    v128 = v126;
    v129 = v127;
    sub_1AE925F8C();
    if (v125 == v128 && v124 == v129)
    {
      sub_1AE4F66E8();
      sub_1AE4F665C();
      sub_1AE4FD924();
    }
    else
    {
      v131 = sub_1AE4FB6F0();
      sub_1AE4F66E8();
      sub_1AE4F9038();
      sub_1AE4F665C();
      sub_1AE4F76D8();
      if ((v131 & 1) == 0)
      {
        v132 = 1;
        goto LABEL_189;
      }
    }
    sub_1AE505E5C(v147, v146, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v152 + 16));
    v132 = 0;
LABEL_189:
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v147, v132, 1, v154);
    sub_1AE4FEFD4();
    if (!_Records_GDEntityPredicate_records)
    {
LABEL_240:
      __break(1u);
      goto LABEL_241;
    }
    sub_1AE50881C();
    if (v92 == v93)
      goto LABEL_216;
    if (*(_QWORD *)(v133 + 3688) >= AssociatedTypeWitness)
    {
LABEL_218:
      __break(1u);
      goto LABEL_219;
    }
    if (!_Records_GDEntityPredicate_predicateIds)
    {
LABEL_241:
      __break(1u);
      goto LABEL_242;
    }
    v135 = v158;
    v134 = v159;
    v136 = sub_1AE925F8C();
    if (!_Records_GDEntityPredicate_labels)
    {
LABEL_242:
      __break(1u);
      goto LABEL_243;
    }
    v138 = v136;
    v139 = v137;
    sub_1AE925F8C();
    if (v135 == v138 && v134 == v139)
    {
      sub_1AE4F665C();
      sub_1AE4F6728();
      sub_1AE4FD924();
    }
    else
    {
      v141 = sub_1AE4FB6F0();
      sub_1AE4F665C();
      sub_1AE4F9038();
      sub_1AE4F6728();
      sub_1AE4F81B8();
      if ((v141 & 1) == 0)
      {
        v142 = 1;
LABEL_203:
        v88 = v148;
        sub_1AE769CAC(v148, v142, 1);
        sub_1AE4FDC10(v146, *(uint64_t (**)(uint64_t, uint64_t))(v152 + 8));
        v46 = v153;
        v143 = v150;
        *v153 = v155;
        v46[1] = v143;
        v49 = (int *)sub_1AE4FDF3C();
        v89 = (uint64_t)v46 + v49[5];
        v90 = v147;
        goto LABEL_98;
      }
    }
    sub_1AE505E5C(v148, v146, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v152 + 16));
    v142 = 0;
    goto LABEL_203;
  }
  v109 = sub_1AE5003D4();
  sub_1AE4F6648();
  sub_1AE4F665C();
  if ((v109 & 1) != 0)
    goto LABEL_143;
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_246:
    __break(1u);
    goto LABEL_247;
  }
  sub_1AE50881C();
  if (v92 == v93)
    goto LABEL_226;
  if (*(uint64_t *)(v110 + 3712) >= 3558)
  {
LABEL_227:
    __break(1u);
LABEL_228:
    __break(1u);
    goto LABEL_229;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_247:
    __break(1u);
    goto LABEL_248;
  }
  v111 = sub_1AE4FCA60();
  if (_Records_GDEntityPredicate_labels)
  {
    v113 = v111;
    v114 = v112;
    sub_1AE925F8C();
    if (v113 == v30 && v114 == v29)
      goto LABEL_208;
    v116 = sub_1AE5003D4();
    sub_1AE4FCA54();
    sub_1AE4F9038();
    sub_1AE4F76D8();
    sub_1AE4F665C();
    if ((v116 & 1) == 0)
    {
      v49 = (int *)sub_1AE4FDF3C();
      v117 = v153;
      sub_1AE507684(v49[5]);
      sub_1AE507684(v49[6]);
      *v117 = v28;
      v117[1] = v27;
      *(uint64_t *)((char *)v117 + v49[7]) = MEMORY[0x1E0DEE9D8];
      v57 = (uint64_t)v117;
      goto LABEL_41;
    }
LABEL_144:
    sub_1AE4F6710();
    goto LABEL_173;
  }
LABEL_248:
  __break(1u);
}

void sub_1AE7694F4(_QWORD *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[5];

  v4 = v3;
  if ((a2 & 1) != 0)
  {
    swift_beginAccess();
    v7 = v3[2];
    v8 = a1[3];
    v9 = a1[4];
    sub_1AE4F9858(a1, v8);
    v10 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 24);
    swift_bridgeObjectRetain();
    v10(v94, v8, v9);
    sub_1AE56E748(v94, v7);
    v12 = v11;
    sub_1AE525EF8((uint64_t)v94);
    sub_1AE4F76D8();
    if ((v12 & 1) != 0)
      goto LABEL_21;
  }
  v13 = a1[3];
  v14 = a1[4];
  sub_1AE4F9858(a1, v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 24))(&v89, v13, v14);
  if (!_Records_GDEntityPredicate_records)
    goto LABEL_26;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 40) >= 2674)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 41) >= 3558)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v16 = v89;
  v15 = v90;
  v17 = sub_1AE925F8C();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_28:
    __break(1u);
    return;
  }
  v19 = v17;
  v20 = v18;
  sub_1AE925F8C();
  if (v16 == v19 && v15 == v20)
  {
    swift_bridgeObjectRelease();
    sub_1AE4F66E8();
    sub_1AE4FD924();
    goto LABEL_18;
  }
  v22 = sub_1AE4FB6F0();
  swift_bridgeObjectRelease();
  sub_1AE4F9038();
  sub_1AE4F66E8();
  sub_1AE4F76D8();
  if ((v22 & 1) != 0)
  {
LABEL_18:
    v65 = v4[10];
    v64 = v4[11];
    v66 = (int *)sub_1AE4FDF3C();
    v67 = (uint64_t)a3 + v66[5];
    sub_1AE4F675C();
    sub_1AE50A594(v67);
    sub_1AE50A594((uint64_t)a3 + v66[6]);
    *a3 = v65;
    a3[1] = v64;
    *(uint64_t *)((char *)a3 + v66[7]) = MEMORY[0x1E0DEE9D8];
    sub_1AE4FCF34((uint64_t)a3, 0);
    swift_bridgeObjectRetain();
    return;
  }
  sub_1AE5095E0();
  v23 = sub_1AE769C4C();
  v92 = v23;
  v24 = sub_1AE50A054();
  sub_1AE5090E0(v24, v25, v26, v27, v28, v29, v30, v31, v79, v81, v83, v85, v87, v88, v89, v90, v91, v92, v93);
  sub_1AE769C60();
  v32 = sub_1AE56413C(v23, (uint64_t)&protocol requirements base descriptor for BaseEntityFactProtocol);
  sub_1AE506694(v32, v33, v34, v35, v36, v37);
  if ((v19 & 1) == 0)
    goto LABEL_15;
  sub_1AE5095E0();
  v38 = sub_1AE769C4C();
  v92 = v38;
  v39 = sub_1AE50A054();
  sub_1AE5090E0(v39, v40, v41, v42, v43, v44, v45, v46, v80, v82, v84, v86, v87, v88, v89, v90, v91, v92, v93);
  sub_1AE769C60();
  MEMORY[0x12](&v87, v38, &protocol requirements base descriptor for BaseEntityFactProtocol);
  v47 = v87;
  v48 = v88;
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v89);
  if ((v48 & 1) != 0)
  {
LABEL_15:
    sub_1AE5095E0();
    v49 = sub_1AE769C4C();
    v92 = v49;
    v50 = sub_1AE50A054();
    sub_1AE5090E0(v50, v51, v52, v53, v54, v55, v56, v57, v80, v82, v84, v86, v87, v88, v89, v90, v91, v92, v93);
    sub_1AE769C60();
    v58 = sub_1AE564104(v49, (uint64_t)&protocol requirements base descriptor for BaseEntityFactProtocol);
    sub_1AE506694(v58, v59, v60, v61, v62, v63);
    if ((v19 & 1) != 0)
    {
      sub_1AE7686C4(a1, a3);
      return;
    }
    goto LABEL_21;
  }
  sub_1AE515AE0(v47, v4[3]);
  if (!v69)
  {
LABEL_21:
    sub_1AE4FDF3C();
    sub_1AE769C88();
    goto LABEL_22;
  }
  v70 = v68;
  v71 = v69;
  v72 = (int *)sub_1AE4FDF3C();
  v73 = (uint64_t)a3 + v72[5];
  sub_1AE4F675C();
  sub_1AE769C94(v73);
  sub_1AE769C94((uint64_t)a3 + v72[6]);
  sub_1AE501548((uint64_t *)&unk_1ED30FDA0);
  v74 = sub_1AE4F66BC();
  *(_OWORD *)(v74 + 16) = xmmword_1AE934250;
  *(_QWORD *)(v74 + 32) = v47;
  *a3 = v70;
  a3[1] = v71;
  *(uint64_t *)((char *)a3 + v72[7]) = v74;
  v75 = (uint64_t)a3;
  v76 = 0;
  v77 = 1;
  v78 = (uint64_t)v72;
LABEL_22:
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v75, v76, v77, v78);
}

void sub_1AE7698D4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, char a4@<W3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  __int16 v37;

  v35 = a2;
  sub_1AE501548(&qword_1EEDA28B8);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v11);
  v13 = (uint64_t *)((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_1AE4FDF3C();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v15);
  v17 = (uint64_t *)((char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1AE7694F4(a3, a4, v13);
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v13, 1, v14) == 1)
  {
    sub_1AE52982C((uint64_t)v13, &qword_1EEDA28B8);
    sub_1AE4FCF34(a6, 1);
  }
  else
  {
    sub_1AE769B78((uint64_t)v13, (uint64_t)v17);
    if (a5)
    {
      v18 = *v17;
      v19 = v17[1];
      sub_1AE769C3C((uint64_t)a5);
      swift_bridgeObjectRetain();
      v20 = a5(a1, v35, v18, v19);
      v22 = v21;
      sub_1AE6263E0((uint64_t)a5);
    }
    else
    {
      v23 = a3[3];
      v24 = a3[4];
      sub_1AE4F9858(a3, v23);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v24 + 24))(v36, v23, v24);
      v26 = v36[0];
      v25 = v36[1];
      v28 = v36[2];
      v27 = v36[3];
      v29 = v37;
      type metadata accessor for K2TTripleTextualizer();
      inited = swift_initStackObject();
      *(_QWORD *)(inited + 16) = v26;
      *(_QWORD *)(inited + 24) = v25;
      *(_QWORD *)(inited + 32) = v28;
      *(_QWORD *)(inited + 40) = v27;
      *(_WORD *)(inited + 48) = v29;
      v31 = *v17;
      v32 = v17[1];
      swift_bridgeObjectRetain();
      v20 = sub_1AE779FF8(a1, v35, v31, v32);
      v22 = v33;
      sub_1AE4F66E8();
      sub_1AE4F76D8();
    }
    swift_bridgeObjectRelease_n();
    *v17 = v20;
    v17[1] = v22;
    sub_1AE769BBC((uint64_t)v17, a6);
    sub_1AE4FCF34(a6, 0);
    sub_1AE769C00((uint64_t)v17);
  }
  sub_1AE4F8180();
}

uint64_t sub_1AE769AD0()
{
  uint64_t v0;
  void *v1;
  void *v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = *(void **)(v0 + 40);
  v2 = *(void **)(v0 + 48);

  swift_release();
  swift_bridgeObjectRelease();
  sub_1AE4F6648();

  return v0;
}

uint64_t sub_1AE769B38()
{
  sub_1AE769AD0();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for K2TBaseEntityTextualizer()
{
  return objc_opt_self();
}

uint64_t sub_1AE769B78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for K2TTextualization();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AE769BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for K2TTextualization();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AE769C00(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for K2TTextualization();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AE769C3C(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_1AE769C4C()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t sub_1AE769C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_1AE769C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  return _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)va);
}

uint64_t sub_1AE769C94(uint64_t a1)
{
  uint64_t v1;

  return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(a1, 1, 1, v1);
}

uint64_t sub_1AE769CA4()
{
  return sub_1AE92487C();
}

uint64_t sub_1AE769CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(a1, a2, a3, v3);
}

uint64_t sub_1AE769CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  void (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v4 = sub_1AE9249B4();
  v64 = *(_QWORD *)(v4 - 8);
  v65 = v4;
  MEMORY[0x1E0C80A78](v4);
  v63 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1AE501548(&qword_1EED93EE0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1AE9245A0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v62 - v14;
  v16 = sub_1AE925E78();
  v78 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v77 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1AE501548(&qword_1ED30EB60);
  v19 = MEMORY[0x1E0C80A78](v18);
  v69 = (uint64_t)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v66 = (char *)&v62 - v22;
  MEMORY[0x1E0C80A78](v21);
  v79 = (char *)&v62 - v23;
  v82 = sub_1AE9248DC();
  v80 = *(_QWORD *)(v82 - 8);
  v24 = MEMORY[0x1E0C80A78](v82);
  v76 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v74 = (char *)&v62 - v26;
  v27 = *(_QWORD *)(a1 + 16);
  if (!v27)
  {
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  v67 = v15;
  v68 = v13;
  v70 = v10;
  v72 = v9;
  v73 = v8;
  swift_bridgeObjectRetain();
  v62 = a1;
  v28 = (_BYTE *)(a1 + 88);
  v29 = MEMORY[0x1E0DEE9D8];
  v30 = (uint64_t)v79;
  v31 = v82;
  v75 = a2;
  v71 = v16;
  do
  {
    if ((*v28 & 1) != 0)
    {
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v30, 1, 1, v31);
LABEL_14:
      sub_1AE52FBE8(v30, &qword_1ED30EB60);
      goto LABEL_20;
    }
    v85 = v29;
    v32 = *((_QWORD *)v28 - 4);
    v34 = *((_QWORD *)v28 - 2);
    v33 = *((_QWORD *)v28 - 1);
    v83 = *((_QWORD *)v28 - 6);
    swift_bridgeObjectRetain();
    v84 = v32;
    swift_bridgeObjectRetain();
    sub_1AE59CC30(v34, v33, 0);
    sub_1AE59CC30(v34, v33, 0);
    v35 = v77;
    sub_1AE925E6C();
    v36 = sub_1AE925E48();
    v38 = v37;
    (*(void (**)(char *, uint64_t))(v78 + 8))(v35, v16);
    if (v38 >> 60 == 15)
    {
      v39 = 1;
LABEL_7:
      v30 = (uint64_t)v79;
      v31 = v82;
      goto LABEL_12;
    }
    sub_1AE564A00();
    v41 = v72;
    v40 = (uint64_t)v73;
    v42 = v81;
    sub_1AE9243A8();
    if (v42)
    {

      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v40, 1, 1, v41);
      v81 = 0;
LABEL_11:
      sub_1AE50BDA0(v36, v38);
      sub_1AE52FBE8(v40, &qword_1EED93EE0);
      v39 = 1;
      v16 = v71;
      v30 = (uint64_t)v79;
      v31 = v82;
      goto LABEL_12;
    }
    v81 = 0;
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v40, 0, 1, v41);
    if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v40, 1, v41) == 1)
      goto LABEL_11;
    v47 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v67, v40, v41);
    v48 = v69;
    sub_1AE924570();
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v68, v47, v41);
    v49 = v82;
    if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v48, 1, v82) == 1)
    {
      v50 = v63;
      sub_1AE92499C();
      v51 = v68;
      sub_1AE924978();
      v52 = v36;
      v53 = (uint64_t)v66;
      sub_1AE50BDA0(v52, v38);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v50, v65);
      v54 = *(void (**)(char *, uint64_t))(v70 + 8);
      v54(v51, v41);
      v54(v67, v41);
      sub_1AE52FBE8(v69, &qword_1ED30EB60);
      if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v53, 1, v82) == 1)
        goto LABEL_26;
      v55 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 32);
    }
    else
    {
      sub_1AE50BDA0(v36, v38);
      v56 = v49;
      v57 = *(void (**)(char *, uint64_t))(v70 + 8);
      v57(v68, v41);
      v57(v67, v41);
      v55 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 32);
      v53 = (uint64_t)v66;
      v55(v66, v69, v56);
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v53, 0, 1, v56);
      if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v53, 1, v56) == 1)
      {
LABEL_26:
        sub_1AE52FBE8(v53, &qword_1ED30EB60);
        v39 = 1;
        v16 = v71;
        goto LABEL_7;
      }
    }
    v30 = (uint64_t)v79;
    v58 = v53;
    v31 = v82;
    v55(v79, v58, v82);
    v39 = 0;
    v16 = v71;
LABEL_12:
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v30, v39, 1, v31);
    sub_1AE59CC40(v34, v33, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AE59CC40(v34, v33, 0);
    if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v30, 1, v31) == 1)
    {
      v29 = v85;
      goto LABEL_14;
    }
    v43 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 32);
    v44 = v74;
    v43(v74, v30, v31);
    v43(v76, (uint64_t)v44, v31);
    v29 = v85;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1AE51A600();
      v29 = v59;
    }
    v45 = *(_QWORD *)(v29 + 16);
    if (v45 >= *(_QWORD *)(v29 + 24) >> 1)
    {
      sub_1AE51A600();
      v29 = v60;
    }
    *(_QWORD *)(v29 + 16) = v45 + 1;
    v46 = v29
        + ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))
        + *(_QWORD *)(v80 + 72) * v45;
    v31 = v82;
    v43((char *)v46, (uint64_t)v76, v82);
LABEL_20:
    v28 += 64;
    --v27;
  }
  while (v27);
  swift_release();
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t sub_1AE76A3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    v4 = 0;
    v5 = MEMORY[0x1E0DEE9D8];
    do
    {
      if (*(_QWORD *)(v3 + 16))
      {
        v6 = sub_1AE536D68();
        if ((v7 & 1) != 0)
        {
          v8 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v6);
          v9 = *v8;
          v10 = v8[1];
          sub_1AE4FB930();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1AE772874();
            sub_1AE519C48();
            v5 = v13;
          }
          v11 = *(_QWORD *)(v5 + 16);
          if (v11 >= *(_QWORD *)(v5 + 24) >> 1)
          {
            sub_1AE519C48();
            v5 = v14;
          }
          *(_QWORD *)(v5 + 16) = v11 + 1;
          v12 = v5 + 16 * v11;
          *(_QWORD *)(v12 + 32) = v9;
          *(_QWORD *)(v12 + 40) = v10;
        }
      }
      ++v4;
    }
    while (v2 != v4);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  return v5;
}

void sub_1AE76A4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  _QWORD v28[5];
  uint64_t v29;

  sub_1AE64A2FC(v28);
  v5 = v28[0];
  v6 = v28[3];
  v7 = v28[4];
  v26 = v28[1];
  v27 = (unint64_t)(v28[2] + 64) >> 6;
  v29 = a3;
  v25 = (uint64_t *)(a3 + 32);
  swift_bridgeObjectRetain();
  v8 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  while (v7)
  {
    v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v10 = v9 | (v6 << 6);
LABEL_20:
    v15 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v10);
    v16 = *(_QWORD *)(a2 + 16);
    v17 = (uint64_t *)(a2 + 32);
    if (v16)
    {
      while (1)
      {
        v18 = *v17++;
        if (v18 == v15)
          break;
        if (!--v16)
          goto LABEL_23;
      }
LABEL_28:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AE519D1C();
        v8 = v23;
      }
      v22 = *(_QWORD *)(v8 + 16);
      if (v22 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        sub_1AE519D1C();
        v8 = v24;
      }
      *(_QWORD *)(v8 + 16) = v22 + 1;
      *(_QWORD *)(v8 + 8 * v22 + 32) = v15;
    }
    else
    {
LABEL_23:
      v19 = *(_QWORD *)(v29 + 16);
      if (v19)
      {
        v20 = v25;
        while (1)
        {
          v21 = *v20++;
          if (v21 == v15)
            goto LABEL_28;
          if (!--v19)
            goto LABEL_2;
        }
      }
    }
  }
  v11 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v11 >= v27)
      goto LABEL_33;
    v12 = *(_QWORD *)(v26 + 8 * v11);
    v13 = v6 + 1;
    if (!v12)
    {
      v13 = v6 + 2;
      if (v6 + 2 >= v27)
        goto LABEL_33;
      v12 = *(_QWORD *)(v26 + 8 * v13);
      if (!v12)
      {
        v13 = v6 + 3;
        if (v6 + 3 >= v27)
          goto LABEL_33;
        v12 = *(_QWORD *)(v26 + 8 * v13);
        if (!v12)
        {
          v13 = v6 + 4;
          if (v6 + 4 >= v27)
            goto LABEL_33;
          v12 = *(_QWORD *)(v26 + 8 * v13);
          if (!v12)
          {
            v13 = v6 + 5;
            if (v6 + 5 >= v27)
              goto LABEL_33;
            v12 = *(_QWORD *)(v26 + 8 * v13);
            if (!v12)
            {
              v14 = v6 + 6;
              while (v14 < v27)
              {
                v12 = *(_QWORD *)(v26 + 8 * v14++);
                if (v12)
                {
                  v13 = v14 - 1;
                  goto LABEL_19;
                }
              }
LABEL_33:
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              return;
            }
          }
        }
      }
    }
LABEL_19:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v6 = v13;
    goto LABEL_20;
  }
  __break(1u);
}

uint64_t sub_1AE76A754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v7[8];
  _BYTE v8[64];

  v1 = v0;
  sub_1AE77235C(v0, (uint64_t)v7, &qword_1EEDA15E0);
  v2 = v7[0];
  v3 = v7[1];
  sub_1AE77235C(v1, (uint64_t)v8, &qword_1EEDA15E0);
  if (v8[57])
    return 2;
  if (v2 == 49 && v3 == 0xE100000000000000)
    return 1;
  sub_1AE4F7714();
  if ((sub_1AE4FB6F0() & 1) != 0)
    return 1;
  if (v2 == 48 && v3 == 0xE100000000000000)
    return 0;
  sub_1AE4F7714();
  if ((sub_1AE4FB6F0() & 1) != 0)
    return 0;
  else
    return 2;
}

void sub_1AE76A81C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[8];
  _BYTE v63[72];

  sub_1AE4FC4D4();
  v1 = v0;
  v57 = v2;
  v61 = v3;
  sub_1AE77235C(v0, (uint64_t)v62, &qword_1EEDA15E0);
  v58 = v62[1];
  v59 = v62[0];
  v55 = sub_1AE9249B4();
  v54 = *(_QWORD *)(v55 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F9024();
  sub_1AE5085B4(v5);
  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v6);
  sub_1AE4F686C();
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v48 - v8;
  sub_1AE501548(&qword_1EED93EE0);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v10);
  sub_1AE4F666C();
  v13 = v12 - v11;
  v14 = sub_1AE9245A0();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  sub_1AE4FFEB4();
  v18 = v16 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v48 - v20;
  v22 = sub_1AE925E78();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  sub_1AE4F666C();
  v26 = v25 - v24;
  v60 = v1;
  sub_1AE77235C(v1, (uint64_t)v63, &qword_1EEDA15E0);
  if (!v63[57])
  {
    v50 = v18;
    v51 = v21;
    v52 = v15;
    v49 = v9;
    sub_1AE4F66C4();
    sub_1AE925E6C();
    v27 = sub_1AE925E48();
    v29 = v28;
    sub_1AE772460(v60);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v26, v22);
    v30 = v61;
    if (v29 >> 60 != 15)
    {
      sub_1AE564A00();
      sub_1AE9243A8();
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v13, 0, 1, v14);
      sub_1AE506078(v13, 1, v14);
      if (v42)
      {
        sub_1AE772A08(v27);
        v31 = &qword_1EED93EE0;
        v32 = v13;
      }
      else
      {
        v60 = v27;
        v37 = v52;
        v38 = (uint64_t)v51;
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v51, v13, v14);
        v39 = v56;
        sub_1AE924570();
        v40 = v50;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v50, v38, v14);
        v41 = sub_1AE4F675C();
        sub_1AE4FCF0C(v39);
        if (v42)
        {
          v43 = v53;
          sub_1AE92499C();
          v46 = (uint64_t)v49;
          sub_1AE772B74();
          sub_1AE772A08(v60);
          sub_1AE772B68();
          v44(v43, v55);
          sub_1AE7729B8(v40);
          v45 = sub_1AE7729B8(v38);
          sub_1AE772B40(v45, &qword_1ED30EB60);
          sub_1AE4FCF0C(v46);
          if (!v42)
          {
            sub_1AE772B54();
LABEL_16:
            sub_1AE772B48(v30);
            sub_1AE7728E8();
            goto LABEL_8;
          }
        }
        else
        {
          sub_1AE772A08(v60);
          sub_1AE7729B8(v40);
          sub_1AE7729B8(v38);
          sub_1AE772B54();
          v46 = (uint64_t)v49;
          sub_1AE772978();
          _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v46, 0, 1, v41);
          sub_1AE4FCF0C(v46);
          if (!v47)
            goto LABEL_16;
        }
        v31 = &qword_1ED30EB60;
        v32 = v46;
      }
      sub_1AE52FBE8(v32, v31);
    }
  }
  sub_1AE4F675C();
  sub_1AE769C88();
LABEL_8:
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v33, v34, v35, v36);
  sub_1AE4F8180();
}

void sub_1AE76AC24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  _QWORD v52[2];
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  sub_1AE4FC4D4();
  v62 = v1;
  v63 = v2;
  v4 = v3;
  v61 = v5;
  v7 = v6;
  v8 = sub_1AE9249B4();
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v9);
  sub_1AE4F9024();
  v54 = v10;
  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v11);
  sub_1AE4F686C();
  v60 = v12;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v13);
  sub_1AE5094B0();
  v57 = v14;
  sub_1AE501548(&qword_1EED93EE0);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v15);
  sub_1AE4F666C();
  v18 = v17 - v16;
  v19 = sub_1AE9245A0();
  v59 = *(_QWORD *)(v19 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v20);
  sub_1AE4F686C();
  v58 = v21;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)v52 - v23;
  v25 = sub_1AE925E78();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  sub_1AE4F90C8();
  if ((v4 & 1) != 0)
  {
    sub_1AE4F675C();
    sub_1AE769C88();
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v32, v33, v34, v35);
    return;
  }
  v53 = v24;
  sub_1AE4F66C4();
  sub_1AE925E6C();
  v27 = sub_1AE925E48();
  v29 = v28;
  v30 = sub_1AE753ADC();
  sub_1AE59CC40(v30, v31, 0);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v0, v25);
  if (v29 >> 60 != 15)
  {
    sub_1AE564A00();
    sub_1AE9243A8();
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v18, 0, 1, v19);
    sub_1AE506078(v18, 1, v19);
    if (v36)
    {
      sub_1AE50BDA0(v27, v29);
      v37 = &qword_1EED93EE0;
      v38 = v18;
    }
    else
    {
      v52[1] = v29;
      v61 = v27;
      v43 = v59;
      v44 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v53, v18, v19);
      v45 = v60;
      sub_1AE924570();
      (*(void (**)(uint64_t, char *, uint64_t))(v43 + 16))(v58, v44, v19);
      v46 = sub_1AE4F675C();
      sub_1AE4FCF0C(v45);
      if (v47)
      {
        v48 = v54;
        sub_1AE92499C();
        v50 = v57;
        sub_1AE772B74();
        sub_1AE772B00();
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v48, v56);
        sub_1AE772998();
        v49 = sub_1AE772B18();
        sub_1AE772B40(v49, &qword_1ED30EB60);
        sub_1AE4FCF0C(v50);
        if (!v36)
        {
          sub_1AE772B54();
LABEL_18:
          sub_1AE772B48(v7);
          sub_1AE7728E8();
          goto LABEL_10;
        }
      }
      else
      {
        sub_1AE772B00();
        sub_1AE772998();
        sub_1AE772B18();
        sub_1AE772B54();
        v50 = v57;
        sub_1AE772978();
        _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v50, 0, 1, v46);
        sub_1AE4FCF0C(v50);
        if (!v51)
          goto LABEL_18;
      }
      v37 = &qword_1ED30EB60;
      v38 = v50;
    }
    sub_1AE52FBE8(v38, v37);
  }
  sub_1AE4F675C();
  sub_1AE769C88();
LABEL_10:
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v39, v40, v41, v42);
  sub_1AE4F8180();
}

void sub_1AE76AF98(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v25;
  uint64_t v26;

  v2 = a1;
  v3 = 0;
  v25 = *(_QWORD *)(a1 + 16);
  v19 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  v4 = v3 << 6;
  while (1)
  {
    if (v25 == v3)
    {
      swift_bridgeObjectRelease();
      sub_1AE525EF8((uint64_t)a2);
      return;
    }
    v5 = v3;
    if (v3 >= *(_QWORD *)(v2 + 16))
      break;
    v6 = *(_QWORD *)(v2 + v4 + 32);
    v7 = *(_QWORD *)(v2 + v4 + 40);
    v8 = *(_QWORD *)(v2 + v4 + 56);
    v22 = *(_QWORD *)(v2 + v4 + 48);
    v21 = *(_WORD *)(v2 + v4 + 64);
    v9 = *(_QWORD *)(v2 + v4 + 72);
    v10 = *(_QWORD *)(v2 + v4 + 80);
    v11 = *(_BYTE *)(v2 + v4 + 88);
    if (v6 != *a2 || v7 != a2[1])
    {
      v4 += 64;
      ++v3;
      v13 = sub_1AE926D60();
      v2 = a1;
      if ((v13 & 1) == 0)
        continue;
    }
    sub_1AE4FB930();
    sub_1AE4F67A4();
    sub_1AE59CC30(v9, v10, v11);
    v14 = v19;
    v26 = v19;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1AE772874();
      sub_1AE521648();
      v14 = v19;
    }
    v15 = *(_QWORD *)(v14 + 16);
    v16 = v15 + 1;
    v2 = a1;
    if (v15 >= *(_QWORD *)(v14 + 24) >> 1)
    {
      v18 = v15 + 1;
      v20 = *(_QWORD *)(v14 + 16);
      sub_1AE521648();
      v16 = v18;
      v15 = v20;
      v2 = a1;
      v14 = v26;
    }
    v3 = v5 + 1;
    *(_QWORD *)(v14 + 16) = v16;
    v19 = v14;
    v17 = v14 + (v15 << 6);
    *(_QWORD *)(v17 + 32) = v6;
    *(_QWORD *)(v17 + 40) = v7;
    *(_QWORD *)(v17 + 48) = v22;
    *(_QWORD *)(v17 + 56) = v8;
    *(_WORD *)(v17 + 64) = v21;
    *(_QWORD *)(v17 + 72) = v9;
    *(_QWORD *)(v17 + 80) = v10;
    *(_BYTE *)(v17 + 88) = v11;
    goto LABEL_2;
  }
  __break(1u);
}

void sub_1AE76B144(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1AE8894B8();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_1AE771850(v5);
  *a1 = v2;
}

void sub_1AE76B1AC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = a1;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  sub_1AE4FB75C();
  v5 = sub_1AE507F58();
  sub_1AE4F6648();
LABEL_4:
  v6 = sub_1AE805DF0(0, v3, v5, v2);
  if ((v7 & 1) != 0)
    v8 = v5;
  else
    v8 = v6;
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v4)
  {
    sub_1AE4FB75C();
    v10 = sub_1AE507F58();
    sub_1AE4F6648();
    if (v10 < 0)
    {
LABEL_24:
      __break(1u);
      return;
    }
    sub_1AE4FB75C();
    v9 = sub_1AE507F58();
    sub_1AE4F6648();
  }
  else
  {
    v9 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v9 < v8)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((v2 & 0xC000000000000001) != 0 && v8)
  {
    type metadata accessor for EntityResolutionRankingService.RankedEntities.ScoredEntity();
    v11 = 0;
    do
    {
      v12 = v11 + 1;
      sub_1AE92694C();
      v11 = v12;
    }
    while (v8 != v12);
  }
  if (v4)
  {
    sub_1AE4FB75C();
    sub_1AE926AE4();
    sub_1AE4F6824();
  }
  sub_1AE4FCDD0();
}

void sub_1AE76B318(uint64_t a1)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1AE925F44();
    sub_1AE926040();
    sub_1AE4F6648();
    sub_1AE753ADC();
    sub_1AE4FCDD0();
  }
}

uint64_t sub_1AE76B3C0(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1AE805DF0(0, result, *(_QWORD *)(a2 + 16), a2);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_9;
  if (v3 >= v5)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

void sub_1AE76B42C(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  _OWORD v14[2];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v7 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(v4 + 112) = *(_QWORD *)a1;
  *(_QWORD *)(v4 + 120) = v7;
  *(_QWORD *)(v4 + 128) = v9;
  *(_QWORD *)(v4 + 136) = v8;
  *(_QWORD *)(v4 + 144) = v10;
  *(_QWORD *)(v4 + 152) = v11;
  *(_BYTE *)(v4 + 160) = v12;
  *(_QWORD *)&v15 = v9;
  *((_QWORD *)&v15 + 1) = v8;
  v16 = v10;
  v17 = v11;
  v18 = v12;
  v13 = a3[1];
  v14[0] = *a3;
  v14[1] = v13;
  swift_bridgeObjectRetain();
  sub_1AE4F6730();
  sub_1AE767D50(&v15, a2, v14, a4);
  sub_1AE4F685C();
}

__n128 *sub_1AE76B4A4()
{
  __n128 *v0;
  __n128 *inited;

  sub_1AE501548(&qword_1ED319608);
  v0 = (__n128 *)swift_allocObject();
  sub_1AE50AA94(v0, (__n128)xmmword_1AE934250);
  static EntityPredicate.isA.getter();
  inited = (__n128 *)swift_initStackObject();
  sub_1AE50AA94(inited, (__n128)xmmword_1AE934250);
  static EntityPredicate.name.getter();
  sub_1AE60EFEC();
  return v0;
}

void sub_1AE76B528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;

  sub_1AE4FC4D4();
  v57 = sub_1AE772AB8();
  v56 = *(_QWORD *)(v57 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v2);
  sub_1AE4F9024();
  sub_1AE5085B4(v3);
  v4 = *(_QWORD **)(*(_QWORD *)(v0 + 120) + 16);
  if (!v4)
  {
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_27:
    v32 = v4[2];
    if (v32)
    {
      swift_retain();
      v33 = v4;
      v34 = v4 + 9;
      v1 = MEMORY[0x1E0DEE9D8];
      do
      {
        if (!*((_BYTE *)v34 + 57))
        {
          v36 = *v34;
          v35 = v34[1];
          sub_1AE4FB75C();
          if ((sub_1AE64A9C8() & 1) == 0)
          {
            sub_1AE4FCA68();
            v1 = v39;
          }
          v37 = *(_QWORD *)(v1 + 16);
          if (v37 >= *(_QWORD *)(v1 + 24) >> 1)
          {
            sub_1AE4FCA68();
            v1 = v40;
          }
          *(_QWORD *)(v1 + 16) = v37 + 1;
          v38 = v1 + 16 * v37;
          *(_QWORD *)(v38 + 32) = v36;
          *(_QWORD *)(v38 + 40) = v35;
        }
        v34 += 13;
        --v32;
      }
      while (v32);
      v4 = v33;
      sub_1AE4F6A6C();
    }
    else
    {
      v1 = MEMORY[0x1E0DEE9D8];
    }
    swift_release();
    v41 = *(_QWORD *)(v1 + 16);
    if (v41 > 1)
    {
      if (qword_1EED99828 != -1)
LABEL_48:
        swift_once();
      v42 = sub_1AE4F6854();
      v43 = (_DWORD *)sub_1AE4FB608(v42, (uint64_t)qword_1EED9F7E8);
      swift_retain_n();
      sub_1AE925B54();
      v44 = sub_1AE736C34();
      if (sub_1AE772594(v44))
      {
        sub_1AE4F66A0();
        v72 = sub_1AE7725A4();
        *v43 = 136642819;
        swift_bridgeObjectRetain();
        sub_1AE4F67A4();
        sub_1AE4FB764();
        v45 = sub_1AE925EA8();
        sub_1AE520ED4(v45, v46, (uint64_t)&v72, v47, v48, v49, v50, v51, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65,
          v66);
        sub_1AE92676C();
        sub_1AE4FC54C();
        sub_1AE4F6728();
        sub_1AE77253C(&dword_1AE4F2000, v52, v53, "Multiple names found for entity %{sensitive}s.");
        sub_1AE4F7970();
        sub_1AE4F9064();
      }

      sub_1AE4FC54C();
      v41 = *(_QWORD *)(v1 + 16);
    }
    if (v41)
    {
      sub_1AE4FB75C();
      sub_1AE4F76D8();
      sub_1AE924498();
      sub_1AE4F7630();
      sub_1AE9267A8();
      sub_1AE772B68();
      v54(v55, v57);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1AE4F76D8();
    }
    sub_1AE4F7714();
    sub_1AE4F8180();
    return;
  }
  v63 = 233;
  v62 = 2674;
  v5 = sub_1AE772820(3558);
  v58 = MEMORY[0x1E0DEE9D8];
  v59 = v0;
  v60 = v5;
  while (_Records_GDEntityPredicate_records)
  {
    sub_1AE772630();
    if (v6 == v7)
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    sub_1AE7726BC();
    if (v6 == v7)
      goto LABEL_47;
    v70 = v4;
    if (!_Records_GDEntityPredicate_predicateIds)
      goto LABEL_50;
    v9 = sub_1AE772B24(v8);
    v69 = v10;
    v71 = v9;
    v12 = *(_QWORD *)(v11 + 56);
    v64 = *(_QWORD *)(v11 + 48);
    LODWORD(v65) = *(unsigned __int16 *)(v11 + 64);
    v14 = *(_QWORD *)(v11 + 72);
    v13 = *(_QWORD *)(v11 + 80);
    v15 = *(_QWORD *)(v11 + 88);
    v16 = *(_QWORD *)(v11 + 96);
    v18 = *(_QWORD *)(v11 + 104);
    v17 = *(_QWORD *)(v11 + 112);
    v19 = *(_QWORD *)(v11 + 120);
    v20 = *(unsigned __int8 *)(v11 + 128);
    v21 = *(unsigned __int8 *)(v11 + 129);
    swift_bridgeObjectRetain();
    sub_1AE4F67A4();
    HIDWORD(v65) = v21;
    v66 = v14;
    v67 = v13;
    v68 = v20;
    sub_1AE59CC8C(v14, v13, v15, v16, v18, v17, v19, v20, v21);
    sub_1AE4F66C4();
    sub_1AE4F67A4();
    v22 = sub_1AE925F8C();
    if (!_Records_GDEntityPredicate_labels)
      goto LABEL_51;
    v24 = v22;
    v25 = v23;
    sub_1AE772628();
    v1 = v26;
    if (v69 == v24 && v71 == v25)
    {
      sub_1AE4F6648();
      sub_1AE4F76D8();
      sub_1AE4F6824();
    }
    else
    {
      v28 = sub_1AE4FB6F0();
      sub_1AE4F6648();
      sub_1AE4F665C();
      sub_1AE4F76D8();
      sub_1AE4F9038();
      if ((v28 & 1) == 0)
        goto LABEL_18;
    }
    if (!HIDWORD(v65))
    {
      v29 = v58;
      if ((sub_1AE4F77E0() & 1) == 0)
      {
        sub_1AE505770();
        v29 = v58;
      }
      v1 = v64;
      v30 = *(_QWORD *)(v29 + 16);
      if (v30 >= *(_QWORD *)(v29 + 24) >> 1)
      {
        sub_1AE7724A8();
        v29 = v58;
      }
      *(_QWORD *)(v29 + 16) = v30 + 1;
      v58 = v29;
      v31 = v29 + 104 * v30;
      *(_QWORD *)(v31 + 32) = v69;
      *(_QWORD *)(v31 + 40) = v71;
      *(_QWORD *)(v31 + 48) = v64;
      *(_QWORD *)(v31 + 56) = v12;
      *(_WORD *)(v31 + 64) = v65;
      *(_QWORD *)(v31 + 72) = v14;
      *(_QWORD *)(v31 + 80) = v67;
      *(_QWORD *)(v31 + 88) = v15;
      *(_QWORD *)(v31 + 96) = v16;
      *(_QWORD *)(v31 + 104) = v18;
      *(_QWORD *)(v31 + 112) = v17;
      *(_QWORD *)(v31 + 120) = v19;
      *(_WORD *)(v31 + 128) = v68;
      goto LABEL_24;
    }
LABEL_18:
    sub_1AE4F6648();
    sub_1AE4F665C();
    sub_1AE59CA28(v14, v67, v15, v16, v18, v17, v19, v68, SBYTE4(v65));
LABEL_24:
    v4 = (_QWORD *)((char *)v70 - 1);
    if (v70 == (_QWORD *)1)
    {
      swift_bridgeObjectRelease();
      v4 = (_QWORD *)v58;
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
}

void sub_1AE76BB44()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[4];
  _OWORD v53[2];
  __int16 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[2];
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[2];
  __int128 v64;
  __int128 v65;
  __int16 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unsigned __int8 v71;
  char v72;
  _OWORD v73[2];
  __int16 v74;

  sub_1AE4FC4D4();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  sub_1AE501548(&qword_1EEDA28B8);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v11);
  sub_1AE4F666C();
  v14 = v13 - v12;
  v15 = sub_1AE4FDF3C();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v16);
  sub_1AE4F90C8();
  sub_1AE772784(&v64, v6);
  v51 = v10;
  if (v72 == 1)
  {
    v17 = v68;
    v18 = v69;
    v19 = v70;
    v20 = v71;
    v48 = v67;
    v61 = v67;
    v62 = v68;
    v49 = *((_QWORD *)&v68 + 1);
    v50 = *((_QWORD *)&v69 + 1);
    v63[0] = v69;
    *(_QWORD *)&v63[1] = v70;
    BYTE8(v63[1]) = v71;
    if (*(_QWORD *)(v4 + 24))
    {
      sub_1AE57C238(v4, (uint64_t)&v58);
    }
    else
    {
      v21 = *(_OWORD *)(v4 + 16);
      v58 = *(_OWORD *)v4;
      v59 = v21;
      v60 = *(_QWORD *)(v4 + 32);
    }
    v45 = v8;
    v46 = v18;
    v47 = v19;
    if (*((_QWORD *)&v59 + 1))
    {
      sub_1AE50AF58(&v58, (uint64_t)&v55);
      v44 = *(_QWORD *)&v57[0];
      v22 = sub_1AE4F9858(&v55, *((uint64_t *)&v56 + 1));
      v43 = (uint64_t)&v43;
      MEMORY[0x1E0C80A78](v22);
      sub_1AE4FB764();
      sub_1AE4F6804();
      sub_1AE4F66CC();
      if ((sub_1AE926118() & 1) == 0)
      {
        sub_1AE59CA28(v48, *((uint64_t *)&v48 + 1), v17, v49, v46, v50, v47, v20, 1);
        _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v55);
        goto LABEL_19;
      }
      LODWORD(v44) = v20;
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v55);
    }
    else
    {
      LODWORD(v44) = v20;
      sub_1AE4F67A4();
      sub_1AE4F6804();
      sub_1AE4F66CC();
    }
    v55 = v61;
    v56 = v62;
    v57[0] = v63[0];
    *(_OWORD *)((char *)v57 + 9) = *(_OWORD *)((char *)v63 + 9);
    v73[0] = v64;
    v73[1] = v65;
    v74 = v66;
    v53[0] = v64;
    v53[1] = v65;
    v54 = v66;
    v31 = v2[3];
    v32 = (void *)v2[5];
    v33 = (void *)v2[6];
    v34 = (void *)v2[7];
    v52[0] = v2[4];
    v52[1] = (uint64_t)v32;
    v52[2] = (uint64_t)v33;
    v52[3] = (uint64_t)v34;
    v35 = (void *)v2[13];
    sub_1AE5C7880((uint64_t)v73);
    sub_1AE4F66E0();
    v36 = v32;
    v37 = v33;
    v38 = v34;
    sub_1AE77AE20((uint64_t)&v55, v51, v45, (uint64_t)v53, v31, v52, v35, (uint64_t *)&v58);

    sub_1AE4FC564();
    sub_1AE525EF8((uint64_t)v73);
    sub_1AE59CA28(v48, *((uint64_t *)&v48 + 1), v17, v49, v46, v50, v47, v44, 1);
    v39 = *((_QWORD *)&v59 + 1);
    v40 = v60;
    sub_1AE4F9858(&v58, *((uint64_t *)&v59 + 1));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v4, v39, v40);
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v58);
  }
  else
  {
    if (*(_QWORD *)(v4 + 24))
    {
      sub_1AE57C238(v4, (uint64_t)&v55);
    }
    else
    {
      v23 = *(_OWORD *)(v4 + 16);
      v55 = *(_OWORD *)v4;
      v56 = v23;
      *(_QWORD *)&v57[0] = *(_QWORD *)(v4 + 32);
    }
    if (!*((_QWORD *)&v56 + 1)
      || (sub_1AE50AF58(&v55, (uint64_t)&v61),
          v24 = sub_1AE4F9858(&v61, *((uint64_t *)&v62 + 1)),
          MEMORY[0x1E0C80A78](v24),
          v25 = sub_1AE926118(),
          _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v61),
          (v25 & 1) != 0))
    {
      *((_QWORD *)&v62 + 1) = sub_1AE4F69EC();
      sub_1AE772970(&qword_1EED9CC28, v26, (uint64_t)&protocol conformance descriptor for Fact<A>);
      *(_QWORD *)&v63[0] = v27;
      *(_QWORD *)&v61 = sub_1AE772698();
      sub_1AE772784((void *)(v61 + 16), &v64);
      v28 = *(_QWORD *)(v4 + 24) == 0;
      sub_1AE73348C((uint64_t)&v64);
      sub_1AE7698D4(v51, v8, &v61, v28, 0, v14);
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v61);
      v29 = sub_1AE506078(v14, 1, v15);
      if (v30)
      {
        sub_1AE772B40(v29, &qword_1EEDA28B8);
      }
      else
      {
        sub_1AE769B78(v14, (uint64_t)v1);
        sub_1AE501548(&qword_1ED31BCD0);
        v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_1AE934250;
        v42 = v1[1];
        *(_QWORD *)(v41 + 32) = *v1;
        *(_QWORD *)(v41 + 40) = v42;
        swift_bridgeObjectRetain();
        sub_1AE769C00((uint64_t)v1);
      }
    }
  }
LABEL_19:
  sub_1AE4F8180();
}

BOOL sub_1AE76BFE4(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  _BOOL8 result;

  if (*a1 != *a2)
    return 0;
  v3 = a1[6];
  v4 = a2[1];
  if (a1[1] == *a3 && a1[2] == a3[1])
    return v3 == v4;
  v6 = sub_1AE926D60();
  result = 0;
  if ((v6 & 1) != 0)
    return v3 == v4;
  return result;
}

uint64_t sub_1AE76C070(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  if (*a1 != *(_QWORD *)(a2 + 112))
    return 0;
  if (a1[1] == *a3 && a1[2] == a3[1])
    return 1;
  else
    return sub_1AE926D60() & 1;
}

uint64_t sub_1AE76C0E0()
{
  uint64_t v0;
  uint64_t v1;

  sub_1AE7727F8();
  sub_1AE76C128();
  v1 = v0;
  sub_1AE4F665C();
  return v1;
}

void sub_1AE76C128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[112];

  sub_1AE4FC4D4();
  v1 = v0;
  v3 = v2;
  sub_1AE7727F8();
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    sub_1AE4F6728();
LABEL_36:
    sub_1AE4F8180();
    return;
  }
  v48 = v4 + 32;
  sub_1AE4FB764();
  v6 = 0;
  v7 = MEMORY[0x1E0DEE9D8];
  v43 = v0;
  v47 = v3;
  v42 = v4;
  v44 = v5;
  while (v6 < *(_QWORD *)(v4 + 16))
  {
    sub_1AE772784(v63, (const void *)(v48 + 104 * v6));
    if (*(_QWORD *)(v3 + 24))
    {
      sub_1AE7727C0();
    }
    else
    {
      v8 = *(_QWORD *)(v1 + 120);
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v45 = v7;
        v46 = v6;
        sub_1AE7727C0();
        sub_1AE7727C0();
        v62 = MEMORY[0x1E0DEE9D8];
        sub_1AE4F6730();
        sub_1AE5215B4();
        v10 = 0;
        v11 = v62;
        v49 = v8;
        do
        {
          v54 = v10;
          v55 = v9;
          v12 = v8 + v10;
          v52 = *(_QWORD *)(v12 + 32);
          v53 = v11;
          v13 = *(_QWORD *)(v12 + 56);
          v51 = *(_QWORD *)(v12 + 48);
          v50 = *(_WORD *)(v12 + 64);
          v15 = *(_QWORD *)(v12 + 72);
          v14 = *(_QWORD *)(v12 + 80);
          v16 = *(_QWORD *)(v12 + 88);
          v17 = *(_QWORD *)(v12 + 96);
          v19 = *(_QWORD *)(v12 + 104);
          v18 = *(_QWORD *)(v12 + 112);
          v20 = *(_QWORD *)(v12 + 120);
          v21 = *(unsigned __int8 *)(v12 + 128);
          v22 = *(_BYTE *)(v12 + 129);
          v58 = *(_QWORD *)(v12 + 40);
          swift_bridgeObjectRetain();
          v57 = v13;
          sub_1AE4F66C4();
          v56 = v15;
          v23 = v15;
          v24 = v19;
          v25 = v14;
          v11 = v53;
          sub_1AE59CC8C(v23, v25, v16, v17, v24, v18, v20, v21, v22);
          v62 = v53;
          v27 = *(_QWORD *)(v53 + 16);
          v26 = *(_QWORD *)(v53 + 24);
          if (v27 >= v26 >> 1)
          {
            sub_1AE506008(v26);
            sub_1AE5215B4();
            v11 = v62;
          }
          v60 = sub_1AE501548(&qword_1EED994F0);
          sub_1AE52FB78(&qword_1EED9CC28, &qword_1EED994F0, (uint64_t)&protocol conformance descriptor for Fact<A>);
          v61 = v28;
          v29 = sub_1AE772698();
          *(_QWORD *)&v59 = v29;
          *(_QWORD *)(v29 + 16) = v52;
          *(_QWORD *)(v29 + 24) = v58;
          *(_QWORD *)(v29 + 32) = v51;
          *(_QWORD *)(v29 + 40) = v57;
          *(_WORD *)(v29 + 48) = v50;
          *(_QWORD *)(v29 + 56) = v56;
          *(_QWORD *)(v29 + 64) = v25;
          *(_QWORD *)(v29 + 72) = v16;
          *(_QWORD *)(v29 + 80) = v17;
          *(_QWORD *)(v29 + 88) = v24;
          *(_QWORD *)(v29 + 96) = v18;
          *(_QWORD *)(v29 + 104) = v20;
          *(_BYTE *)(v29 + 112) = v21;
          *(_BYTE *)(v29 + 113) = v22;
          *(_QWORD *)(v11 + 16) = v27 + 1;
          sub_1AE50AF58(&v59, v11 + 40 * v27 + 32);
          v10 = v54 + 104;
          v9 = v55 - 1;
          v8 = v49;
        }
        while (v55 != 1);
        sub_1AE4F81B8();
        v1 = v43;
        v6 = v46;
        v3 = v47;
        v4 = v42;
        v7 = v45;
      }
      else
      {
        sub_1AE7727C0();
        sub_1AE7727C0();
        v11 = MEMORY[0x1E0DEE9D8];
      }
      v30 = sub_1AE779140((uint64_t)v63, v11);
      sub_1AE4F9038();
      sub_1AE772A5C();
      v5 = v44;
      if ((v30 & 1) != 0)
      {
        sub_1AE772A5C();
        goto LABEL_33;
      }
    }
    sub_1AE772784(&v59, v63);
    sub_1AE76BB44();
    v32 = v31;
    sub_1AE772A5C();
    *(_QWORD *)&v59 = v7;
    v62 = v32;
    sub_1AE4F69EC();
    sub_1AE52FB78(&qword_1EEDA28C8, &qword_1ED319DE0, MEMORY[0x1E0DEAF50]);
    if ((sub_1AE926490() & 1) != 0)
    {
      sub_1AE4F81B8();
    }
    else
    {
      v33 = *(_QWORD *)(v32 + 16);
      v34 = *(_QWORD *)(v7 + 16);
      if (__OFADD__(v34, v33))
        goto LABEL_38;
      if (!swift_isUniquelyReferenced_nonNull_native() || v34 + v33 > *(_QWORD *)(v7 + 24) >> 1)
      {
        sub_1AE519C48();
        v7 = v35;
      }
      if (*(_QWORD *)(v32 + 16))
      {
        v36 = *(_QWORD *)(v7 + 16);
        if ((*(_QWORD *)(v7 + 24) >> 1) - v36 < v33)
          goto LABEL_40;
        v37 = v7 + 16 * v36 + 32;
        if (v32 + 32 < v37 + 16 * v33 && v37 < v32 + 32 + 16 * v33)
          goto LABEL_42;
        swift_arrayInitWithCopy();
        if (v33)
        {
          v39 = *(_QWORD *)(v7 + 16);
          v40 = __OFADD__(v39, v33);
          v41 = v39 + v33;
          if (v40)
            goto LABEL_41;
          *(_QWORD *)(v7 + 16) = v41;
        }
      }
      else if (v33)
      {
        goto LABEL_39;
      }
      sub_1AE4F81B8();
      v3 = v47;
    }
LABEL_33:
    if (++v6 == v5)
    {
      sub_1AE4F6728();
      sub_1AE4F6710();
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  sub_1AE926B20();
  __break(1u);
}

uint64_t sub_1AE76C5D8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = sub_1AE7727F8();
  if (v2)
  {
    v3 = v2;
  }
  else
  {
    v1 = 0x797469746E45;
    v3 = 0xE600000000000000;
  }
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v0 + 312))(v1, v3);
  return sub_1AE5FB7A4();
}

void sub_1AE76C62C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  __int128 v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t inited;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t *v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  char *v138;
  char *v139;
  id v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145[4];
  _OWORD v146[2];
  __int16 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 v154;
  uint64_t v155[3];
  uint64_t v156;
  uint64_t v157;
  uint64_t v158[5];
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 v165;
  char v166;
  __int128 v167;
  __int128 v168;
  __int16 v169;

  sub_1AE4FC4D4();
  v119 = v1;
  v120 = v2;
  v4 = v3;
  sub_1AE501548(&qword_1EEDA28B8);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4FFEB4();
  v8 = (uint64_t *)(v6 - v7);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v113 - v10;
  v121 = sub_1AE4FDF3C();
  v118 = *(_QWORD *)(v121 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v12);
  sub_1AE4F686C();
  v127 = (uint64_t *)v13;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v14);
  sub_1AE4F6A60();
  v113 = v15;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v16);
  sub_1AE4F6A60();
  v116 = v17;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v18);
  sub_1AE4F6A60();
  v115 = v19;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v20);
  sub_1AE5094B0();
  v122 = v21;
  v158[0] = v0[15];
  swift_bridgeObjectRetain_n();
  sub_1AE76B144(v158);
  sub_1AE4F76D8();
  v22 = v158[0];
  v23 = *(char **)(v158[0] + 16);
  v24 = MEMORY[0x1E0DEE9D8];
  v123 = v4;
  v128 = v0;
  v126 = v23;
  if (v23)
  {
    v117 = v11;
    v114 = v8;
    v25 = 0;
    v124 = v158[0] + 32;
    v125 = v158[0];
    while (1)
    {
      if ((unint64_t)v25 >= *(_QWORD *)(v22 + 16))
      {
        __break(1u);
        sub_1AE7379EC();
        __break(1u);
        return;
      }
      v129 = v25;
      v130 = v24;
      v26 = (__int128 *)(v124 + 104 * (_QWORD)v25);
      sub_1AE772784(v158, v26);
      v27 = *((_QWORD *)&v159 + 1);
      v28 = v160;
      v29 = v161;
      v30 = v163;
      v31 = v164;
      v32 = v165;
      v33 = *((_WORD *)v26 + 16);
      v34 = v26[1];
      v167 = *v26;
      v168 = v34;
      v169 = v33;
      if (v166 == 1)
        break;
      v52 = v128[15];
      v53 = *(char **)(v52 + 16);
      if (v53)
      {
        sub_1AE772850();
        sub_1AE772850();
        v155[0] = MEMORY[0x1E0DEE9D8];
        sub_1AE4F6804();
        sub_1AE5215B4();
        v54 = 0;
        v55 = v155[0];
        v131 = v52;
        do
        {
          v137 = v55;
          v138 = v54;
          v139 = v53;
          v56 = &v54[v52];
          v58 = *((_QWORD *)v56 + 4);
          v57 = *((_QWORD *)v56 + 5);
          v59 = *((_QWORD *)v56 + 7);
          v134 = *((_QWORD *)v56 + 6);
          v135 = v58;
          v133 = *((unsigned __int16 *)v56 + 32);
          v60 = (void *)*((_QWORD *)v56 + 9);
          v132 = *((_QWORD *)v56 + 10);
          v61 = *((_QWORD *)v56 + 11);
          v62 = *((_QWORD *)v56 + 12);
          v63 = *((_QWORD *)v56 + 13);
          v64 = (void *)*((_QWORD *)v56 + 14);
          v65 = *((_QWORD *)v56 + 15);
          v66 = v56[128];
          v67 = v56[129];
          v144 = v57;
          swift_bridgeObjectRetain();
          v143 = v59;
          sub_1AE4F6708();
          v136 = v67;
          v112 = v67;
          v140 = v60;
          v141 = v64;
          v68 = (uint64_t)v60;
          v69 = v132;
          v55 = v137;
          v142 = v63;
          sub_1AE59CC8C(v68, v132, v61, v62, v63, (uint64_t)v64, v65, v66, v112);
          v155[0] = v55;
          v71 = *(_QWORD *)(v55 + 16);
          v70 = *(_QWORD *)(v55 + 24);
          v32 = v71 + 1;
          if (v71 >= v70 >> 1)
          {
            sub_1AE506008(v70);
            sub_1AE5215B4();
            v55 = v155[0];
          }
          v150 = sub_1AE501548(&qword_1EED994F0);
          sub_1AE52FB78(&qword_1EED9CC28, &qword_1EED994F0, (uint64_t)&protocol conformance descriptor for Fact<A>);
          v151 = v72;
          v73 = sub_1AE772698();
          *(_QWORD *)&v148 = v73;
          v74 = v144;
          *(_QWORD *)(v73 + 16) = v135;
          *(_QWORD *)(v73 + 24) = v74;
          v75 = v143;
          *(_QWORD *)(v73 + 32) = v134;
          *(_QWORD *)(v73 + 40) = v75;
          *(_WORD *)(v73 + 48) = v133;
          *(_QWORD *)(v73 + 56) = v140;
          *(_QWORD *)(v73 + 64) = v69;
          *(_QWORD *)(v73 + 72) = v61;
          *(_QWORD *)(v73 + 80) = v62;
          v76 = v141;
          *(_QWORD *)(v73 + 88) = v142;
          *(_QWORD *)(v73 + 96) = v76;
          *(_QWORD *)(v73 + 104) = v65;
          *(_BYTE *)(v73 + 112) = v66;
          *(_BYTE *)(v73 + 113) = v136;
          *(_QWORD *)(v55 + 16) = v32;
          sub_1AE50AF58(&v148, v55 + 40 * v71 + 32);
          v54 = v138 + 104;
          v53 = v139 - 1;
          v52 = v131;
        }
        while (v139 != (char *)1);
        sub_1AE4F67AC();
        v4 = v123;
      }
      else
      {
        sub_1AE772850();
        sub_1AE772850();
        v55 = MEMORY[0x1E0DEE9D8];
      }
      v82 = sub_1AE779140((uint64_t)v158, v55);
      sub_1AE4F9038();
      sub_1AE772858();
      v24 = v130;
      if ((v82 & 1) != 0)
      {
        sub_1AE772858();
      }
      else
      {
        v150 = sub_1AE4F69EC();
        sub_1AE52FB78(&qword_1EED9CC28, &qword_1EED994F0, (uint64_t)&protocol conformance descriptor for Fact<A>);
        v151 = v83;
        *(_QWORD *)&v148 = sub_1AE772698();
        sub_1AE772784((void *)(v148 + 16), v158);
        sub_1AE772850();
        v46 = v114;
        sub_1AE7694F4(&v148, 1, v114);
        _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v148);
        sub_1AE506078((uint64_t)v46, 1, v121);
        if (!v79)
        {
          v22 = v116;
          sub_1AE769B78((uint64_t)v46, v116);
          *(_QWORD *)&v148 = 40;
          *((_QWORD *)&v148 + 1) = 0xE100000000000000;
          sub_1AE753ADC();
          sub_1AE925E9C();
          sub_1AE772858();
          sub_1AE772530();
          sub_1AE4F81B8();
          sub_1AE925F74();
          sub_1AE4F6730();
          sub_1AE772530();
          sub_1AE4F81B8();
          sub_1AE4F7838();
          sub_1AE4F81B8();
          v84 = v148;
          *(_OWORD *)v22 = v148;
          v4 = *(_QWORD *)(v24 + 16);
          if (v4)
          {
            sub_1AE7726E0();
            sub_1AE772A10();
            while (1)
            {
              v85 = *(v46 - 1) == (_QWORD)v84 && *v46 == *((_QWORD *)&v84 + 1);
              if (v85 || (sub_1AE4FB6F0() & 1) != 0)
                break;
              v46 = (uint64_t *)((char *)v46 + v22);
              if (!--v32)
                goto LABEL_42;
            }
            v4 = v123;
            v22 = v125;
            v46 = v129;
          }
          else
          {
LABEL_42:
            sub_1AE769BBC(v116, v113);
            if ((sub_1AE7728E0() & 1) == 0)
            {
              sub_1AE7726A4();
              v24 = v89;
            }
            sub_1AE7727DC();
            if (v80)
            {
              sub_1AE7726A4();
              v24 = v90;
            }
            sub_1AE772664();
            sub_1AE769B78(v113, v86);
          }
          sub_1AE769C00(v116);
          goto LABEL_50;
        }
        sub_1AE772858();
        sub_1AE52FBE8((uint64_t)v46, &qword_1EEDA28B8);
      }
      v22 = v125;
      v46 = v129;
LABEL_50:
      v25 = (uint64_t *)((char *)v46 + 1);
      if (v25 == (uint64_t *)v126)
        goto LABEL_54;
    }
    v148 = v159;
    v149 = v160;
    v150 = v161;
    v151 = v162;
    v152 = v163;
    v153 = v164;
    v154 = v165;
    v146[0] = v167;
    v146[1] = v168;
    v147 = v169;
    v35 = v128[3];
    v36 = (void *)v128[5];
    v38 = (char *)v128[6];
    v37 = (void *)v128[7];
    v137 = v128[4];
    v138 = v38;
    v140 = v37;
    v145[0] = v137;
    v145[1] = (uint64_t)v36;
    v145[2] = (uint64_t)v38;
    v145[3] = (uint64_t)v37;
    v141 = (void *)v128[13];
    v142 = v35;
    v39 = v159;
    v143 = v159;
    v144 = v160;
    v40 = v162;
    sub_1AE73348C((uint64_t)v158);
    v41 = v39;
    v42 = v27;
    v43 = v28;
    v44 = v29;
    v45 = v29;
    v46 = (uint64_t *)v32;
    sub_1AE59CC8C(v41, v27, v43, v44, v40, v30, v31, v32, 1);
    sub_1AE5C7880((uint64_t)&v167);
    v47 = v137;
    swift_retain();
    v139 = v36;
    v48 = v138;
    v49 = v140;
    sub_1AE77AE20((uint64_t)&v148, v119, v120, (uint64_t)v146, v142, v145, v141, v155);
    sub_1AE772858();

    swift_release();
    sub_1AE525EF8((uint64_t)&v167);
    sub_1AE59CA28(v143, v42, v144, v45, v40, v30, v31, (uint64_t)v46, 1);
    v50 = v156;
    v51 = v157;
    sub_1AE4F9858(v155, v156);
    v22 = (uint64_t)v117;
    (*(void (**)(uint64_t, uint64_t))(v51 + 40))(v50, v51);
    sub_1AE506078(v22, 1, v121);
    if (v79)
    {
      sub_1AE52FBE8(v22, &qword_1EEDA28B8);
      v4 = v123;
      v24 = v130;
    }
    else
    {
      sub_1AE769B78(v22, (uint64_t)v122);
      v24 = v130;
      v4 = *(_QWORD *)(v130 + 16);
      if (!v4)
      {
LABEL_22:
        sub_1AE769BBC((uint64_t)v122, v115);
        if ((sub_1AE7728E0() & 1) == 0)
        {
          sub_1AE7726A4();
          v24 = v87;
        }
        sub_1AE7727DC();
        if (v80)
        {
          sub_1AE7726A4();
          v24 = v88;
        }
        sub_1AE772664();
        sub_1AE769B78(v115, v81);
        sub_1AE769C00((uint64_t)v122);
        goto LABEL_49;
      }
      sub_1AE7726E0();
      v77 = *v122;
      v78 = v122[1];
      sub_1AE772A10();
      while (1)
      {
        v79 = *(v46 - 1) == v77 && *v46 == v78;
        if (v79 || (sub_1AE4FB6F0() & 1) != 0)
          break;
        v46 = (uint64_t *)((char *)v46 + v22);
        if (!--v47)
          goto LABEL_22;
      }
      sub_1AE769C00((uint64_t)v122);
      v4 = v123;
    }
    v22 = v125;
    v46 = v129;
LABEL_49:
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v155);
    goto LABEL_50;
  }
LABEL_54:
  swift_release();
  v91 = *(_QWORD *)(v24 + 16);
  if (v91)
  {
    *(_QWORD *)&v148 = MEMORY[0x1E0DEE9D8];
    sub_1AE4F67A4();
    sub_1AE52154C();
    sub_1AE7726E0();
    v130 = v24;
    v93 = v24 + v92;
    v95 = *(_QWORD *)(v94 + 72);
    do
    {
      v96 = v127;
      sub_1AE769BBC(v93, (uint64_t)v127);
      v98 = *v96;
      v97 = v96[1];
      sub_1AE4F6804();
      sub_1AE769C00((uint64_t)v96);
      v99 = v148;
      if ((sub_1AE64A9C8() & 1) == 0)
      {
        sub_1AE772874();
        sub_1AE52154C();
        v99 = v148;
      }
      v101 = *(_QWORD *)(v99 + 16);
      v100 = *(_QWORD *)(v99 + 24);
      if (v101 >= v100 >> 1)
      {
        sub_1AE506008(v100);
        sub_1AE52154C();
        v99 = v148;
      }
      *(_QWORD *)(v99 + 16) = v101 + 1;
      v102 = v99 + 16 * v101;
      *(_QWORD *)(v102 + 32) = v98;
      *(_QWORD *)(v102 + 40) = v97;
      v93 += v95;
      --v91;
    }
    while (v91);
    v103 = v130;
    sub_1AE4F67AC();
    *(_QWORD *)&v148 = v99;
    sub_1AE4F69EC();
    sub_1AE772970((unint64_t *)&qword_1ED318BD0, v104, MEMORY[0x1E0DEAF20]);
    sub_1AE925DC4();
    swift_release();
    *(_QWORD *)&v148 = 0;
    *((_QWORD *)&v148 + 1) = 0xE000000000000000;
    sub_1AE92691C();
    v105 = v120;
    sub_1AE4F6708();
    sub_1AE4F9038();
    *(_QWORD *)&v148 = v119;
    *((_QWORD *)&v148 + 1) = v105;
    sub_1AE925F74();
    sub_1AE772530();
    sub_1AE4F81B8();
    sub_1AE501548((uint64_t *)&unk_1ED30FDA0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1AE934250;
    *(_QWORD *)(inited + 32) = v128[14];
    v4 = v123;
    v107 = sub_1AE753ADC();
    sub_1AE77BFF8(v107, v108, v103, v109, v110);
    v111 = 0;
  }
  else
  {
    sub_1AE4F6728();
    v111 = 1;
  }
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v4, v111, 1, v121);
  sub_1AE4F8180();
}

uint64_t sub_1AE76D034()
{
  swift_bridgeObjectRelease();
  sub_1AE4F665C();
  return sub_1AE5FB7A4();
}

uint64_t type metadata accessor for K2TEntityTextualizer()
{
  return objc_opt_self();
}

uint64_t sub_1AE76D088()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 272))();
}

uint64_t sub_1AE76D0B0()
{
  return sub_1AE76C0E0();
}

uint64_t sub_1AE76D0D0()
{
  return sub_1AE76C5D8();
}

__n128 *sub_1AE76D0F0()
{
  return sub_1AE76DB34((uint64_t (*)(__n128 *))static EntityPredicate.firstName.getter, (void (*)(uint64_t))static EntityPredicate.familyName.getter);
}

uint64_t sub_1AE76D104(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[2];
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  char v19;

  v6 = *(_OWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_BYTE *)(a1 + 48);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v6;
  v17 = v7;
  v18 = v8;
  v19 = v9;
  v10 = a3[1];
  v15[0] = *a3;
  v15[1] = v10;
  v11 = a4;
  sub_1AE76B42C((uint64_t)v16, a2, v15, a4);
  v13 = v12;
  sub_1AE501548(&qword_1ED319608);
  *(_OWORD *)(swift_initStackObject() + 16) = xmmword_1AE933BD0;
  swift_retain();
  static EntityPredicate.firstName.getter();
  static EntityPredicate.familyName.getter();
  swift_beginAccess();
  sub_1AE4F6730();
  sub_1AE60EFEC();
  swift_endAccess();
  swift_release();

  swift_setDeallocating();
  sub_1AE85EADC();
  return v13;
}

void sub_1AE76D208()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  char v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  __int16 v102;
  __int16 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  sub_1AE4FC4D4();
  v3 = v0;
  v4 = sub_1AE772AB8();
  MEMORY[0x1E0C80A78](v4);
  sub_1AE772718();
  if (v5)
  {
LABEL_2:
    sub_1AE4F8180();
    return;
  }
  v99 = v1;
  v106 = v4;
  v6 = *(_QWORD *)(*(_QWORD *)(v0 + 120) + 16);
  if (!v6)
  {
    v107 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_30:
    if (v107[2])
    {
      v30 = swift_retain() + 72;
      v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        if (!*(_BYTE *)(v30 + 57))
        {
          v33 = *(_QWORD *)v30;
          v32 = *(_QWORD *)(v30 + 8);
          sub_1AE4F66C4();
          if ((sub_1AE505598() & 1) == 0)
          {
            sub_1AE501E84();
            v31 = v36;
          }
          sub_1AE7726F0();
          if (v34)
          {
            sub_1AE501E84();
            v31 = v37;
          }
          v31[2] = v0;
          v35 = &v31[2 * v2];
          v35[4] = v33;
          v35[5] = v32;
        }
        sub_1AE772A38();
      }
      while (!v25);
      sub_1AE7379EC();
    }
    else
    {
      v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    sub_1AE7379EC();
    if (v31[2])
    {
      v39 = v31[4];
      v38 = v31[5];
      sub_1AE4F66CC();
      sub_1AE4F6648();
      v121 = v39;
      v122 = v38;
      sub_1AE924498();
      sub_1AE4F7630();
      v97 = sub_1AE9267A8();
      v98 = v40;
      sub_1AE772B68();
      v41 = v106;
      v42(v99, v106);
      sub_1AE508374();
    }
    else
    {
      sub_1AE4F6648();
      v97 = 0;
      v98 = 0;
      v41 = v106;
    }
    v43 = *(_QWORD *)(*(_QWORD *)(v3 + 120) + 16);
    if (!v43)
    {
      v44 = MEMORY[0x1E0DEE9D8];
LABEL_73:
      if (*(_QWORD *)(v44 + 16))
      {
        swift_retain();
        v85 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        do
        {
          if (!*(_BYTE *)(v44 + 129))
          {
            v87 = *(_QWORD *)(v44 + 72);
            v86 = *(_QWORD *)(v44 + 80);
            sub_1AE4F66C4();
            if ((sub_1AE505598() & 1) == 0)
            {
              sub_1AE501E84();
              v85 = v89;
            }
            sub_1AE7726F0();
            if (v34)
            {
              sub_1AE501E84();
              v85 = v90;
            }
            v85[2] = v41;
            v88 = &v85[2 * v2];
            v88[4] = v87;
            v88[5] = v86;
            v41 = v106;
          }
          sub_1AE772A38();
        }
        while (!v25);
        swift_release();
      }
      else
      {
        v85 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      swift_release();
      if (v85[2])
      {
        v91 = v41;
        v93 = v85[4];
        v92 = v85[5];
        sub_1AE4F66CC();
        sub_1AE4F6648();
        v121 = v93;
        v122 = v92;
        sub_1AE924498();
        sub_1AE4F7630();
        sub_1AE9267A8();
        v95 = v94;
        sub_1AE772B68();
        v96(v99, v91);
        sub_1AE508374();
        if (v98)
        {
          if (v95)
          {
            v121 = v97;
            v122 = v98;
            sub_1AE4F7838();
            sub_1AE509ECC();
            sub_1AE4F665C();
          }
        }
      }
      else
      {
        sub_1AE4F6648();
      }
      goto LABEL_2;
    }
    sub_1AE5060B0(&_Records_GDEntityPredicate_records_count);
    v44 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if (v101 < 64)
        goto LABEL_95;
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_101;
      sub_1AE772630();
      if (v7 == v8)
        goto LABEL_96;
      sub_1AE7726BC();
      if (v7 == v8)
        goto LABEL_97;
      v120 = v43;
      v116 = v44;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_102;
      v46 = sub_1AE772B24(v45);
      v114 = v47;
      v49 = *(_QWORD *)(v48 + 56);
      v105 = *(_QWORD *)(v48 + 48);
      v103 = *(_WORD *)(v48 + 64);
      v50 = *(_QWORD *)(v48 + 72);
      v51 = *(_QWORD *)(v48 + 80);
      v2 = *(_QWORD *)(v48 + 88);
      v52 = *(_QWORD *)(v48 + 96);
      v53 = *(_QWORD *)(v48 + 104);
      v54 = *(_QWORD *)(v48 + 112);
      v55 = *(_QWORD *)(v48 + 120);
      v56 = *(unsigned __int8 *)(v48 + 128);
      v118 = v46;
      v57 = *(unsigned __int8 *)(v48 + 129);
      swift_bridgeObjectRetain();
      sub_1AE4FB764();
      v108 = v50;
      v110 = v51;
      v58 = sub_1AE4F7714();
      v112 = v56;
      sub_1AE59CC8C(v58, v59, v2, v52, v53, v54, v55, v56, v57);
      sub_1AE4F6730();
      sub_1AE4FB764();
      v60 = sub_1AE925F8C();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_103;
      v62 = v60;
      v63 = v61;
      sub_1AE772628();
      if (v114 == v62 && v118 == v63)
      {
        sub_1AE4F665C();
        sub_1AE4F6648();
        sub_1AE4F6824();
      }
      else
      {
        v65 = sub_1AE4FB6F0();
        sub_1AE4F665C();
        sub_1AE4F81B8();
        sub_1AE4F6648();
        sub_1AE4F9038();
        if ((v65 & 1) == 0)
        {
          sub_1AE4F665C();
          v66 = sub_1AE4F81B8();
          sub_1AE7726C8(v66, v67, v68, v69, v70, v71, v72, v73, v57);
          v41 = v106;
          goto LABEL_64;
        }
      }
      v41 = v106;
      if (!v57)
      {
        v44 = v116;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v121 = v116;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1AE7724A8();
          v41 = v106;
          v44 = v121;
        }
        v83 = *(_QWORD *)(v44 + 16);
        if (v83 >= *(_QWORD *)(v44 + 24) >> 1)
        {
          sub_1AE7724A8();
          v41 = v106;
          v44 = v121;
        }
        *(_QWORD *)(v44 + 16) = v83 + 1;
        v84 = v44 + 104 * v83;
        *(_QWORD *)(v84 + 32) = v114;
        *(_QWORD *)(v84 + 40) = v118;
        *(_QWORD *)(v84 + 48) = v105;
        *(_QWORD *)(v84 + 56) = v49;
        *(_WORD *)(v84 + 64) = v103;
        *(_QWORD *)(v84 + 72) = v108;
        *(_QWORD *)(v84 + 80) = v110;
        *(_QWORD *)(v84 + 88) = v2;
        *(_QWORD *)(v84 + 96) = v52;
        *(_QWORD *)(v84 + 104) = v53;
        *(_QWORD *)(v84 + 112) = v54;
        *(_QWORD *)(v84 + 120) = v55;
        *(_WORD *)(v84 + 128) = v112;
        goto LABEL_70;
      }
      sub_1AE4F665C();
      v74 = sub_1AE4F81B8();
      sub_1AE7726C8(v74, v75, v76, v77, v78, v79, v80, v81, v57);
LABEL_64:
      v44 = v116;
LABEL_70:
      v43 = v120 - 1;
      if (v120 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_73;
      }
    }
  }
  sub_1AE5060B0(&_Records_GDEntityPredicate_records_count);
  v107 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v100 = v0;
  while (v101 >= 62)
  {
    if (!_Records_GDEntityPredicate_records)
      goto LABEL_98;
    sub_1AE772630();
    if (v7 == v8)
      goto LABEL_93;
    sub_1AE7726BC();
    if (v7 == v8)
      goto LABEL_94;
    v119 = v6;
    if (!_Records_GDEntityPredicate_predicateIds)
      goto LABEL_99;
    v10 = sub_1AE772B24(v9);
    v115 = v11;
    v117 = v10;
    v13 = *(_QWORD *)(v12 + 56);
    v104 = *(_QWORD *)(v12 + 48);
    v102 = *(_WORD *)(v12 + 64);
    v15 = *(_QWORD *)(v12 + 72);
    v14 = *(_QWORD *)(v12 + 80);
    v16 = *(_QWORD *)(v12 + 88);
    v2 = *(_QWORD *)(v12 + 96);
    v18 = *(_QWORD *)(v12 + 104);
    v17 = *(_QWORD *)(v12 + 112);
    v19 = *(_QWORD *)(v12 + 120);
    v20 = *(unsigned __int8 *)(v12 + 128);
    v21 = *(unsigned __int8 *)(v12 + 129);
    swift_bridgeObjectRetain();
    sub_1AE4FB75C();
    v109 = v15;
    v111 = v14;
    v113 = v20;
    sub_1AE59CC8C(v15, v14, v16, v2, v18, v17, v19, v20, v21);
    sub_1AE4F66C4();
    sub_1AE4FB75C();
    v22 = sub_1AE925F8C();
    if (!_Records_GDEntityPredicate_labels)
      goto LABEL_100;
    v24 = v22;
    v0 = (unint64_t)v23;
    sub_1AE772628();
    v25 = v115 == v24 && v117 == v0;
    if (v25)
    {
      sub_1AE4F6648();
      sub_1AE4F6728();
      sub_1AE4F6824();
    }
    else
    {
      v26 = sub_1AE4FB6F0();
      sub_1AE4F6648();
      sub_1AE4F665C();
      sub_1AE4F6728();
      sub_1AE4F9038();
      if ((v26 & 1) == 0)
        goto LABEL_21;
    }
    v0 = v21;
    if (!v21)
    {
      v0 = (unint64_t)v107;
      v27 = sub_1AE4F77E0();
      v121 = (uint64_t)v107;
      if ((v27 & 1) == 0)
      {
        v0 = (unint64_t)&v121;
        sub_1AE7724A8();
        v107 = (_QWORD *)v121;
      }
      v3 = v100;
      v28 = v107[2];
      if (v28 >= v107[3] >> 1)
      {
        v0 = (unint64_t)&v121;
        sub_1AE7724A8();
        v107 = (_QWORD *)v121;
      }
      v107[2] = v28 + 1;
      v29 = &v107[13 * v28];
      v29[4] = v115;
      v29[5] = v117;
      v29[6] = v104;
      v29[7] = v13;
      *((_WORD *)v29 + 32) = v102;
      v29[9] = v109;
      v29[10] = v111;
      v29[11] = v16;
      v29[12] = v2;
      v29[13] = v18;
      v29[14] = v17;
      v29[15] = v19;
      *((_WORD *)v29 + 64) = v113;
      goto LABEL_27;
    }
LABEL_21:
    sub_1AE4F6648();
    sub_1AE4F665C();
    sub_1AE59CA28(v15, v111, v16, v2, v18, v17, v19, v113, v21);
    v3 = v100;
LABEL_27:
    v6 = v119 - 1;
    if (v119 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
}

uint64_t type metadata accessor for K2TPersonTextualizer()
{
  return objc_opt_self();
}

__n128 *sub_1AE76DB20()
{
  return sub_1AE76DB34((uint64_t (*)(__n128 *))static EntityPredicate.hasAddress.getter, (void (*)(uint64_t))static EntityPredicate.thoroughfare.getter);
}

__n128 *sub_1AE76DB34(uint64_t (*a1)(__n128 *), void (*a2)(uint64_t))
{
  __n128 *v4;
  __n128 *inited;
  __n128 *v6;
  uint64_t v7;

  v4 = sub_1AE76B4A4();
  sub_1AE501548(&qword_1ED319608);
  inited = (__n128 *)swift_initStackObject();
  v6 = sub_1AE50AA94(inited, (__n128)xmmword_1AE933BD0);
  v7 = a1(v6);
  a2(v7);
  sub_1AE60EFEC();
  return v4;
}

void sub_1AE76DBB0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int128 *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t inited;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  BOOL v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  char v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  os_log_type_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  unint64_t v155;
  uint64_t v156;
  _DWORD *v157;
  os_log_type_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unsigned int v201;
  _QWORD *v202;
  uint64_t v203;
  __int16 v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  __int16 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  uint64_t v218;

  sub_1AE4FC4D4();
  v4 = sub_1AE772AB8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_1AE772718();
  if (v6)
    goto LABEL_2;
  v181 = v1;
  v7 = *(_QWORD *)(*(_QWORD *)(v0 + 120) + 16);
  v200 = v4;
  v180 = v5;
  v179 = v0;
  if (v7)
  {
    v185 = 233;
    v184 = 2674;
    sub_1AE772820(3558);
    sub_1AE68FF44(MEMORY[0x1E0DEE9D8]);
    v182 = v8;
    while (1)
    {
      if (!_Records_GDEntityPredicate_records)
      {
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
        return;
      }
      sub_1AE772630();
      if (v9 == v10)
      {
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        swift_once();
LABEL_82:
        v79 = sub_1AE4F6854();
        sub_1AE4FB608(v79, (uint64_t)qword_1EED9F7E8);
        sub_1AE772700();
        sub_1AE925B54();
        v80 = sub_1AE736C34();
        if (sub_1AE772594(v80))
        {
          sub_1AE4F66A0();
          v218 = sub_1AE7725A4();
          sub_1AE508C44(4.9654e-34);
          sub_1AE4FB930();
          sub_1AE4FB764();
          v81 = sub_1AE7727A8();
          sub_1AE772A00(v81, v82, v83, v84, v85, v86, v87, v88, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188,
            v189);
          sub_1AE77263C(v89);
          sub_1AE4FC54C();
          sub_1AE4F66E8();
          sub_1AE77253C(&dword_1AE4F2000, v90, v91, "Multiple names found in address for entity %{sensitive}s.");
          sub_1AE4F7970();
          sub_1AE4F9064();
        }

        sub_1AE4FC54C();
        v78 = *(_QWORD *)(v2 + 16);
        goto LABEL_85;
      }
      sub_1AE7726BC();
      if (v9 == v10)
        goto LABEL_184;
      v206 = v7;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_199;
      v12 = sub_1AE772B24(v11);
      v188 = v13;
      v203 = v12;
      v15 = *(_QWORD *)(v14 + 56);
      v187 = *(_QWORD *)(v14 + 48);
      LODWORD(v186) = *(unsigned __int16 *)(v14 + 64);
      v16 = *(_QWORD *)(v14 + 72);
      v17 = *(_QWORD *)(v14 + 80);
      v18 = *(_QWORD *)(v14 + 88);
      v2 = *(_QWORD *)(v14 + 96);
      v20 = *(_QWORD *)(v14 + 104);
      v19 = *(_QWORD *)(v14 + 112);
      v3 = *(_QWORD *)(v14 + 120);
      v21 = *(unsigned __int8 *)(v14 + 128);
      v22 = *(unsigned __int8 *)(v14 + 129);
      swift_bridgeObjectRetain();
      sub_1AE4F6730();
      LODWORD(v189) = v22;
      v191 = v17;
      v193 = v18;
      v23 = v18;
      v24 = v15;
      v201 = v21;
      sub_1AE59CC8C(v16, v17, v23, v2, v20, v19, v3, v21, v22);
      sub_1AE4FB75C();
      sub_1AE4F6730();
      v25 = sub_1AE772A50();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_200;
      v27 = v25;
      v28 = v26;
      sub_1AE772628();
      v1 = v29;
      v30 = v188 == v27 && v203 == v28;
      if (v30)
        break;
      v31 = sub_1AE4FB6F0();
      sub_1AE4F665C();
      sub_1AE4F6648();
      sub_1AE4F81B8();
      sub_1AE4F9038();
      if ((v31 & 1) != 0)
        goto LABEL_19;
      sub_1AE4F665C();
      sub_1AE4F6648();
      sub_1AE59CA28(v16, v191, v193, v2, v20, v19, v3, v201, v22);
LABEL_24:
      v7 = v206 - 1;
      v4 = v200;
      if (v206 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
    }
    sub_1AE4F665C();
    sub_1AE4F81B8();
    sub_1AE4F6824();
LABEL_19:
    v211 = v209;
    if ((sub_1AE4F77E0() & 1) == 0)
    {
      sub_1AE7728BC();
      sub_1AE7724A8();
      sub_1AE68FF44(v211);
    }
    sub_1AE7728BC();
    v33 = *(_QWORD *)(v32 + 16);
    v1 = v33 + 1;
    if (v33 >= *(_QWORD *)(v32 + 24) >> 1)
    {
      sub_1AE7724A8();
      sub_1AE68FF44(v211);
    }
    sub_1AE7728BC();
    *(_QWORD *)(v34 + 16) = v1;
    v35 = v34 + 104 * v33;
    *(_QWORD *)(v35 + 32) = v188;
    *(_QWORD *)(v35 + 40) = v203;
    *(_QWORD *)(v35 + 48) = v187;
    *(_QWORD *)(v35 + 56) = v24;
    *(_WORD *)(v35 + 64) = v186;
    *(_QWORD *)(v35 + 72) = v16;
    *(_QWORD *)(v35 + 80) = v191;
    *(_QWORD *)(v35 + 88) = v193;
    *(_QWORD *)(v35 + 96) = v2;
    *(_QWORD *)(v35 + 104) = v20;
    *(_QWORD *)(v35 + 112) = v19;
    *(_QWORD *)(v35 + 120) = v3;
    *(_BYTE *)(v35 + 128) = v201;
    *(_BYTE *)(v35 + 129) = v22;
    goto LABEL_24;
  }
  sub_1AE68FF44(MEMORY[0x1E0DEE9D8]);
LABEL_27:
  sub_1AE7728BC();
  v37 = *(_QWORD *)(v36 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v37)
  {
    swift_retain();
    v38 = 0;
    v39 = MEMORY[0x1E0DEE9D8];
    do
    {
      sub_1AE7728BC();
      v41 = v40 + v38;
      if (*(_BYTE *)(v41 + 129) == 1)
      {
        v207 = *(_OWORD *)(v41 + 72);
        v2 = *(unsigned __int8 *)(v41 + 128);
        v3 = *(_QWORD *)(v41 + 112);
        v42 = *(_QWORD *)(v41 + 120);
        v4 = *(_QWORD *)(v41 + 96);
        v43 = *(_QWORD *)(v41 + 104);
        v1 = *(_QWORD *)(v41 + 88);
        sub_1AE4F6730();
        sub_1AE4F66C4();
        sub_1AE4FB75C();
        if ((sub_1AE4F77E0() & 1) == 0)
        {
          sub_1AE5063B4();
          sub_1AE519E10();
          v39 = v47;
        }
        v44 = *(_QWORD *)(v39 + 16);
        v45 = v39;
        if (v44 >= *(_QWORD *)(v39 + 24) >> 1)
        {
          sub_1AE519E10();
          v45 = v48;
        }
        *(_QWORD *)(v45 + 16) = v44 + 1;
        v39 = v45;
        v46 = v45 + (v44 << 6);
        *(_OWORD *)(v46 + 32) = v207;
        *(_QWORD *)(v46 + 48) = v1;
        *(_QWORD *)(v46 + 56) = v4;
        *(_QWORD *)(v46 + 64) = v43;
        *(_QWORD *)(v46 + 72) = v3;
        *(_QWORD *)(v46 + 80) = v42;
        *(_BYTE *)(v46 + 88) = v2;
        sub_1AE7729F4();
      }
      v38 += 104;
      --v37;
    }
    while (v37);
    sub_1AE7729E8();
    v7 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v39 = MEMORY[0x1E0DEE9D8];
  }
  sub_1AE7729E8();
  v211 = v7;
  v194 = *(_QWORD *)(v39 + 16);
  if (!v194)
  {
    sub_1AE4F9038();
    v2 = MEMORY[0x1E0DEE9D8];
LABEL_80:
    v78 = *(_QWORD *)(v2 + 16);
    if (v78 > 1)
    {
      if (qword_1EED99828 != -1)
        goto LABEL_190;
      goto LABEL_82;
    }
LABEL_85:
    if (!v78)
    {
      sub_1AE4F6A6C();
      goto LABEL_2;
    }
    v7 = *(_QWORD *)(v2 + 48);
    sub_1AE4FB75C();
    sub_1AE4F66CC();
    sub_1AE4F66C4();
    sub_1AE4F6A6C();
    v92 = *(_QWORD *)(v7 + 16);
    v198 = v7;
    v205 = v92;
    if (v92)
    {
      sub_1AE4FB75C();
      v7 += 48;
      v93 = (uint64_t *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_201;
        sub_1AE772630();
        if (v9 == v10)
          goto LABEL_186;
        if (*(uint64_t *)(v94 + 40) >= 3558)
          goto LABEL_187;
        v210 = v92;
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_202;
        sub_1AE7728C8();
        v204 = v95;
        v96 = *(_QWORD *)(v7 + 24);
        v97 = *(_QWORD *)(v7 + 32);
        v100 = v99 + v98;
        v4 = *(unsigned __int8 *)(v7 + 40);
        sub_1AE4F6730();
        sub_1AE4F67A4();
        sub_1AE59CC30(v96, v97, v4);
        sub_1AE4F6730();
        sub_1AE4F67A4();
        sub_1AE772B38();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_203;
        sub_1AE772920();
        if (v3 == v100 && v1 == v97)
        {
          sub_1AE4F6728();
          sub_1AE4F66E8();
          sub_1AE4F6824();
        }
        else
        {
          v102 = sub_1AE4FB6F0();
          sub_1AE4F6728();
          sub_1AE4F81B8();
          sub_1AE4F66E8();
          sub_1AE4F67AC();
          if ((v102 & 1) == 0)
          {
            sub_1AE4F6728();
            sub_1AE4F81B8();
            v103 = v96;
            v104 = v97;
            v105 = v4;
            goto LABEL_103;
          }
        }
        if ((v4 & 1) == 0)
        {
          v106 = sub_1AE4F77E0();
          v211 = (uint64_t)v93;
          if ((v106 & 1) == 0)
          {
            v93 = &v211;
            sub_1AE77265C();
            sub_1AE772B0C();
          }
          sub_1AE772908();
          v4 = v200;
          if (v107)
          {
            v93 = &v211;
            sub_1AE77265C();
            sub_1AE772B0C();
          }
          sub_1AE772B80();
          *(_WORD *)(v108 + 64) = v204;
          *(_QWORD *)(v108 + 72) = v96;
          *(_QWORD *)(v108 + 80) = v97;
          *(_BYTE *)(v108 + 88) = 0;
          goto LABEL_109;
        }
        sub_1AE4F6728();
        sub_1AE4F81B8();
        v103 = v96;
        v104 = v97;
        v105 = 1;
LABEL_103:
        sub_1AE59CC40(v103, v104, v105);
        sub_1AE7729F4();
LABEL_109:
        v7 += 64;
        v92 = v210 - 1;
        if (v210 == 1)
        {
          sub_1AE5001F4();
          goto LABEL_113;
        }
      }
    }
    v93 = (uint64_t *)MEMORY[0x1E0DEE9D8];
LABEL_113:
    v1 = v93[2];
    if (v1)
    {
      sub_1AE4F66E0();
      v109 = v93 + 11;
      v2 = MEMORY[0x1E0DEE9D8];
      do
      {
        if ((*v109 & 1) == 0)
        {
          v110 = *((_QWORD *)v109 - 2);
          v7 = *((_QWORD *)v109 - 1);
          sub_1AE4FB75C();
          if ((sub_1AE7728E0() & 1) == 0)
          {
            sub_1AE7729D0();
            sub_1AE519C48();
            v2 = v113;
          }
          v111 = *(_QWORD *)(v2 + 16);
          if (v111 >= *(_QWORD *)(v2 + 24) >> 1)
          {
            sub_1AE519C48();
            v2 = v114;
          }
          *(_QWORD *)(v2 + 16) = v111 + 1;
          v112 = v2 + 16 * v111;
          *(_QWORD *)(v112 + 32) = v110;
          *(_QWORD *)(v112 + 40) = v7;
        }
        v109 += 64;
        --v1;
      }
      while (v1);
      sub_1AE4FC564();
    }
    else
    {
      v2 = MEMORY[0x1E0DEE9D8];
    }
    sub_1AE4FC564();
    v115 = *(_QWORD *)(v2 + 16);
    if (v115 <= 1)
    {
      v7 = v198;
      v129 = v205;
      if (v115 == 1)
      {
        sub_1AE5001F4();
        sub_1AE5001F4();
        sub_1AE4F6648();
        if (*(_QWORD *)(v2 + 16))
        {
          v131 = *(_QWORD *)(v2 + 32);
          v130 = *(_QWORD *)(v2 + 40);
          sub_1AE4FB75C();
          sub_1AE4F6728();
          v211 = v131;
          v212 = v130;
          sub_1AE924498();
          sub_1AE4F7630();
          sub_1AE9267A8();
          (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v181, v4);
        }
        goto LABEL_178;
      }
    }
    else
    {
      if (qword_1EED99828 != -1)
        swift_once();
      v116 = sub_1AE4F6854();
      sub_1AE4FB608(v116, (uint64_t)qword_1EED9F7E8);
      sub_1AE772700();
      sub_1AE925B54();
      v117 = sub_1AE736C34();
      if (sub_1AE772594(v117))
      {
        sub_1AE4F66A0();
        v218 = sub_1AE7725A4();
        sub_1AE508C44(4.9654e-34);
        sub_1AE4FB930();
        sub_1AE4FB764();
        v118 = sub_1AE7727A8();
        sub_1AE772A00(v118, v119, v120, v121, v122, v123, v124, v125, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188,
          v189);
        sub_1AE77263C(v126);
        sub_1AE4FC54C();
        sub_1AE4F66E8();
        sub_1AE77253C(&dword_1AE4F2000, v127, v128, "Multiple names found in address for entity %{sensitive}s.");
        sub_1AE4F7970();
        sub_1AE4F9064();
      }

      sub_1AE4FC54C();
      v7 = v198;
      v129 = v205;
    }
    sub_1AE4F6728();
    if (!v129)
    {
      sub_1AE5001F4();
      sub_1AE5001F4();
      sub_1AE4F6648();
      v132 = (uint64_t *)MEMORY[0x1E0DEE9D8];
      v147 = v181;
LABEL_160:
      v148 = v132[2];
      if (v148)
      {
        sub_1AE4F66E0();
        v149 = v132 + 11;
        v51 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        do
        {
          if ((*v149 & 1) == 0)
          {
            v150 = *((_QWORD *)v149 - 2);
            v7 = *((_QWORD *)v149 - 1);
            sub_1AE4FB75C();
            if ((sub_1AE64A9C8() & 1) == 0)
            {
              sub_1AE4FCA68();
              v51 = v153;
            }
            v151 = v51[2];
            if (v151 >= v51[3] >> 1)
            {
              sub_1AE4FCA68();
              v51 = v154;
            }
            v51[2] = v151 + 1;
            v152 = &v51[2 * v151];
            v152[4] = v150;
            v152[5] = v7;
            v147 = v181;
          }
          v149 += 64;
          --v148;
        }
        while (v148);
        sub_1AE4FC564();
      }
      else
      {
        v51 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      sub_1AE4FC564();
      v155 = v51[2];
      v1 = v180;
      if (v155 > 1)
      {
        if (qword_1EED99828 != -1)
          goto LABEL_197;
        goto LABEL_173;
      }
      goto LABEL_176;
    }
    sub_1AE4FB75C();
    v7 += 48;
    v132 = (uint64_t *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_204;
      sub_1AE772630();
      if (v9 == v10)
        goto LABEL_188;
      if (*(uint64_t *)(v133 + 712) >= 3558)
        goto LABEL_189;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_205;
      sub_1AE7728C8();
      v208 = v134;
      v135 = *(_QWORD *)(v7 + 24);
      v136 = *(_QWORD *)(v7 + 32);
      v139 = v138 + v137;
      v4 = *(unsigned __int8 *)(v7 + 40);
      sub_1AE4F6730();
      sub_1AE4F67A4();
      sub_1AE59CC30(v135, v136, v4);
      sub_1AE4F6730();
      sub_1AE4F67A4();
      sub_1AE772B38();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_206;
      sub_1AE772920();
      if (v3 == v139 && v136 == 0)
      {
        sub_1AE4F6728();
        sub_1AE4F66E8();
        sub_1AE4F6824();
      }
      else
      {
        v141 = sub_1AE4FB6F0();
        sub_1AE4F6728();
        sub_1AE4F81B8();
        sub_1AE4F66E8();
        sub_1AE4F67AC();
        if ((v141 & 1) == 0)
        {
          sub_1AE4F6728();
          sub_1AE4F81B8();
          v142 = v135;
          v143 = v136;
          v144 = v4;
          goto LABEL_150;
        }
      }
      if ((v4 & 1) == 0)
      {
        v145 = sub_1AE4F77E0();
        v211 = (uint64_t)v132;
        if ((v145 & 1) == 0)
        {
          v132 = &v211;
          sub_1AE77265C();
          sub_1AE772B0C();
        }
        sub_1AE772908();
        v4 = v200;
        if (v107)
        {
          v132 = &v211;
          sub_1AE77265C();
          sub_1AE772B0C();
        }
        sub_1AE772B80();
        *(_WORD *)(v146 + 64) = v208;
        *(_QWORD *)(v146 + 72) = v135;
        *(_QWORD *)(v146 + 80) = v136;
        *(_BYTE *)(v146 + 88) = 0;
        goto LABEL_156;
      }
      sub_1AE4F6728();
      sub_1AE4F81B8();
      v142 = v135;
      v143 = v136;
      v144 = 1;
LABEL_150:
      sub_1AE59CC40(v142, v143, v144);
      sub_1AE7729F4();
LABEL_156:
      v7 += 64;
      v30 = v205-- == 1;
      v147 = v181;
      if (v30)
      {
        sub_1AE5001F4();
        sub_1AE5001F4();
        sub_1AE4F6824();
        goto LABEL_160;
      }
    }
  }
  v49 = 0;
  v192 = v39 + 32;
  v185 = MEMORY[0x1E0DEE9D8];
  v186 = v39;
LABEL_40:
  if (v49 >= *(_QWORD *)(v39 + 16))
    goto LABEL_185;
  v50 = (__int128 *)(v192 + (v49 << 6));
  v7 = *((_QWORD *)v50 + 2);
  v51 = *(_QWORD **)(v7 + 16);
  if (!v51)
    goto LABEL_77;
  v199 = v49;
  v190 = *v50;
  v52 = *((_QWORD *)v50 + 4);
  v189 = *((_QWORD *)v50 + 3);
  v53 = *((_QWORD *)v50 + 6);
  v188 = *((_QWORD *)v50 + 5);
  LODWORD(v187) = *((unsigned __int8 *)v50 + 56);
  swift_bridgeObjectRetain_n();
  v196 = v52;
  sub_1AE4F66CC();
  v195 = v53;
  sub_1AE4F66C4();
  v197 = v7;
  v54 = (unsigned __int8 *)(v7 + 88);
  while (1)
  {
    v2 = *((_QWORD *)v54 - 7);
    v1 = *((_QWORD *)v54 - 6);
    sub_1AE68FF44(*((_QWORD *)v54 - 4));
    v55 = *((_QWORD *)v54 - 2);
    v56 = *((_QWORD *)v54 - 1);
    v4 = *v54;
    sub_1AE501548(&qword_1ED319608);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1AE933BD0;
    if (!_Records_GDEntityPredicate_records)
      break;
    v58 = *((_QWORD *)_Records_GDEntityPredicate_records + 4);
    if (v58 >= 2674)
    {
      __break(1u);
LABEL_181:
      __break(1u);
      __break(1u);
LABEL_182:
      __break(1u);
      goto LABEL_178;
    }
    v7 = *((_QWORD *)_Records_GDEntityPredicate_records + 5);
    if (v7 >= 3558)
      goto LABEL_181;
    v202 = v51;
    if (!_Records_GDEntityPredicate_predicateIds)
      goto LABEL_192;
    v3 = inited;
    v59 = *((_WORD *)_Records_GDEntityPredicate_records + 12);
    v51 = (_QWORD *)((char *)_Records_GDEntityPredicate_predicateIds + v58);
    sub_1AE4F6730();
    swift_bridgeObjectRetain();
    sub_1AE59CC30(v55, v56, v4);
    v60 = sub_1AE772B38();
    if (!_Records_GDEntityPredicate_labels)
      goto LABEL_193;
    v51 = (_QWORD *)v60;
    v62 = v61;
    v63 = sub_1AE925F8C();
    *(_QWORD *)(v3 + 32) = v51;
    *(_QWORD *)(v3 + 40) = v62;
    *(_QWORD *)(v3 + 48) = v63;
    *(_QWORD *)(v3 + 56) = v64;
    *(_WORD *)(v3 + 64) = v59;
    if (!_Records_GDEntityPredicate_records)
      goto LABEL_194;
    if (*((uint64_t *)_Records_GDEntityPredicate_records + 88) >= 2674
      || *((_QWORD *)_Records_GDEntityPredicate_records + 89) >= 3558)
    {
      goto LABEL_182;
    }
    if (!_Records_GDEntityPredicate_predicateIds)
      goto LABEL_195;
    v7 = *((unsigned __int16 *)_Records_GDEntityPredicate_records + 348);
    v66 = sub_1AE925F8C();
    if (!_Records_GDEntityPredicate_labels)
      goto LABEL_196;
    v68 = v66;
    v69 = v67;
    v70 = sub_1AE925F8C();
    *(_QWORD *)(v3 + 72) = v68;
    *(_QWORD *)(v3 + 80) = v69;
    *(_QWORD *)(v3 + 88) = v70;
    *(_QWORD *)(v3 + 96) = v71;
    *(_WORD *)(v3 + 104) = v7;
    v72 = *(_QWORD *)(v3 + 32) == v2 && *(_QWORD *)(v3 + 40) == v1;
    if (v72
      || (sub_1AE4FB6F0() & 1) != 0
      || (*(_QWORD *)(v3 + 72) == v2 ? (v73 = *(_QWORD *)(v3 + 80) == v1) : (v73 = 0), v73))
    {
      sub_1AE4F6710();
    }
    else
    {
      v74 = sub_1AE4FB6F0();
      sub_1AE4F6710();
      if ((v74 & 1) == 0)
      {
        sub_1AE5001F4();
        sub_1AE4F81B8();
        sub_1AE7727C8();
        goto LABEL_69;
      }
    }
    sub_1AE5001F4();
    sub_1AE4F81B8();
    sub_1AE7727C8();
    if (!(_DWORD)v4)
    {
      v1 = v197;
      sub_1AE4F6824();
      if ((sub_1AE505598() & 1) == 0)
      {
        sub_1AE772874();
        sub_1AE521674();
      }
      v75 = v211;
      v76 = *(_QWORD *)(v211 + 16);
      v7 = v76 + 1;
      v4 = v200;
      v39 = v186;
      if (v76 >= *(_QWORD *)(v211 + 24) >> 1)
      {
        sub_1AE521674();
        v39 = v186;
        v75 = v211;
      }
      *(_QWORD *)(v75 + 16) = v7;
      v185 = v75;
      v77 = v75 + (v76 << 6);
      *(_OWORD *)(v77 + 32) = v190;
      *(_QWORD *)(v77 + 48) = v197;
      *(_QWORD *)(v77 + 56) = v189;
      *(_QWORD *)(v77 + 64) = v196;
      *(_QWORD *)(v77 + 72) = v188;
      *(_QWORD *)(v77 + 80) = v195;
      *(_BYTE *)(v77 + 88) = v187;
LABEL_76:
      v49 = v199;
LABEL_77:
      if (++v49 == v194)
      {
        sub_1AE4F9038();
        v2 = v211;
        goto LABEL_80;
      }
      goto LABEL_40;
    }
LABEL_69:
    v54 += 64;
    v51 = (_QWORD *)((char *)v202 - 1);
    if (v202 == (_QWORD *)1)
    {
      sub_1AE5001F4();
      sub_1AE5001F4();
      swift_bridgeObjectRelease_n();
      sub_1AE7729F4();
      v39 = v186;
      goto LABEL_76;
    }
  }
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  swift_once();
LABEL_173:
  v156 = sub_1AE4F6854();
  v157 = (_DWORD *)sub_1AE4FB608(v156, (uint64_t)qword_1EED9F7E8);
  swift_retain_n();
  sub_1AE925B54();
  v158 = sub_1AE736C34();
  if (sub_1AE772594(v158))
  {
    sub_1AE4F66A0();
    v218 = sub_1AE7725A4();
    *v157 = 136642819;
    sub_1AE68FF44((uint64_t)(v157 + 1));
    v159 = *(_QWORD *)(v179 + 120);
    v160 = *(_QWORD *)(v179 + 128);
    v161 = *(_QWORD *)(v179 + 136);
    v162 = *(_QWORD *)(v179 + 144);
    v163 = *(_QWORD *)(v179 + 152);
    v164 = *(_BYTE *)(v179 + 160);
    v211 = *(_QWORD *)(v179 + 112);
    v212 = v159;
    v213 = v160;
    v214 = v161;
    v215 = v162;
    v216 = v163;
    v217 = v164;
    swift_bridgeObjectRetain();
    sub_1AE4F67A4();
    sub_1AE4FB764();
    v165 = sub_1AE7727A8();
    sub_1AE772A00(v165, v166, v167, v168, v169, v170, v171, v172, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188,
      v189);
    v211 = v173;
    sub_1AE92676C();
    sub_1AE4FC54C();
    sub_1AE4F6728();
    sub_1AE77253C(&dword_1AE4F2000, v174, v175, "Multiple full street names found in address for entity %{sensitive}s.");
    sub_1AE4F7970();
    sub_1AE4F9064();
  }

  sub_1AE4FC54C();
  v147 = v181;
  v155 = v51[2];
LABEL_176:
  if (v155)
  {
    v177 = v51[4];
    v176 = v51[5];
    sub_1AE4FB75C();
    sub_1AE4F76D8();
    v211 = v177;
    v212 = v176;
    sub_1AE924498();
    sub_1AE4F7630();
    sub_1AE9267A8();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v147, v4);
  }
LABEL_178:
  swift_bridgeObjectRelease();
LABEL_2:
  sub_1AE4F8180();
}

void sub_1AE76F084(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  _OWORD v9[2];
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  char v13;

  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE *)(a1 + 48);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v8 = a3[1];
  v9[0] = *a3;
  v9[1] = v8;
  sub_1AE76B42C((uint64_t)v10, a2, v9, a4);
}

uint64_t type metadata accessor for K2TLocationTextualizer()
{
  return objc_opt_self();
}

void sub_1AE76F0EC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  char v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  _QWORD v69[6];
  char v70;

  v4 = a1[1];
  v51 = a1[2];
  v52 = *a1;
  v49 = a1[4];
  v50 = a1[3];
  v48 = a1[5];
  v47 = *((_BYTE *)a1 + 48);
  v54 = *(_OWORD *)(a3 + 1);
  v45 = a3[3];
  v46 = *a3;
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    v7 = MEMORY[0x1E0DEE9D8];
LABEL_23:
    if (*(_QWORD *)(v7 + 16))
    {
      sub_1AE4F66E0();
      v31 = (uint64_t *)(v7 + 72);
      v32 = MEMORY[0x1E0DEE9D8];
      while (*((_BYTE *)v31 + 57))
      {
LABEL_36:
        sub_1AE772A38();
        if (v26)
        {
          sub_1AE4FC564();
          goto LABEL_47;
        }
      }
      v33 = v7;
      v34 = *v31;
      v35 = v31[1];
      v36 = *v31 == 49 && v35 == 0xE100000000000000;
      if (v36 || (sub_1AE4FB6F0() & 1) != 0)
      {
        v37 = 1;
        if ((sub_1AE505598() & 1) != 0)
          goto LABEL_32;
      }
      else
      {
        v39 = v34 == 48 && v35 == 0xE100000000000000;
        if (!v39 && (sub_1AE4FB6F0() & 1) == 0)
          goto LABEL_35;
        v37 = 0;
        if ((sub_1AE505598() & 1) != 0)
        {
LABEL_32:
          sub_1AE7726F0();
          if (v38)
          {
            sub_1AE7726B0();
            v32 = v41;
          }
          *(_QWORD *)(v32 + 16) = v34;
          *(_BYTE *)(v32 + v3 + 32) = v37;
LABEL_35:
          v7 = v33;
          goto LABEL_36;
        }
      }
      sub_1AE7726B0();
      v32 = v40;
      goto LABEL_32;
    }
    v32 = MEMORY[0x1E0DEE9D8];
LABEL_47:
    sub_1AE4FC564();
    if (*(_QWORD *)(v32 + 16))
    {
      v42 = *(_BYTE *)(v32 + 32);
      sub_1AE4F6648();
      if ((v42 & 1) != 0)
      {
        v43 = (void *)v54;
        v44 = (id)v54;
LABEL_52:
        v69[0] = v52;
        v69[1] = v4;
        v69[2] = v51;
        v69[3] = v50;
        v69[4] = v49;
        v69[5] = v48;
        v70 = v47;
        v66 = v46;
        v67 = v54;
        v68 = v45;
        sub_1AE76B42C((uint64_t)v69, a2, &v66, v43);
        return;
      }
    }
    else
    {
      sub_1AE4F6648();
    }
    v43 = 0;
    goto LABEL_52;
  }
  sub_1AE4F67A4();
  v6 = 0;
  v7 = MEMORY[0x1E0DEE9D8];
  v55 = v4;
  while (1)
  {
    if (!_Records_GDEntityPredicate_records)
      goto LABEL_55;
    if (*((uint64_t *)_Records_GDEntityPredicate_records + 331) >= 2674)
      break;
    if (*((uint64_t *)_Records_GDEntityPredicate_records + 332) >= 3558)
      goto LABEL_54;
    v63 = v5;
    v64 = v7;
    if (!_Records_GDEntityPredicate_predicateIds)
      goto LABEL_56;
    v62 = v6;
    v8 = v4 + v6;
    v61 = *(_QWORD *)(v4 + v6 + 32);
    v65 = *(_QWORD *)(v4 + v6 + 40);
    v9 = *(_QWORD *)(v4 + v6 + 56);
    v57 = *(_QWORD *)(v4 + v6 + 48);
    v56 = *(_WORD *)(v4 + v6 + 64);
    v11 = *(_QWORD *)(v4 + v6 + 72);
    v10 = *(_QWORD *)(v4 + v6 + 80);
    v12 = *(_QWORD *)(v4 + v6 + 88);
    v13 = *(_QWORD *)(v4 + v6 + 96);
    v15 = *(_QWORD *)(v4 + v6 + 104);
    v14 = *(_QWORD *)(v4 + v6 + 112);
    v16 = *(_QWORD *)(v4 + v6 + 120);
    v17 = *(unsigned __int8 *)(v4 + v6 + 128);
    v18 = *(_BYTE *)(v8 + 129);
    swift_bridgeObjectRetain();
    sub_1AE4FB930();
    v58 = v10;
    v59 = v15;
    v19 = v15;
    v20 = v9;
    v60 = v17;
    sub_1AE59CC8C(v11, v10, v12, v13, v19, v14, v16, v17, v18);
    sub_1AE4FB75C();
    sub_1AE4FB930();
    v21 = sub_1AE925F8C();
    if (!_Records_GDEntityPredicate_labels)
      goto LABEL_57;
    v23 = v21;
    v24 = v22;
    sub_1AE772628();
    v3 = v25;
    v26 = v61 == v23 && v65 == v24;
    if (v26)
    {
      sub_1AE4F665C();
      sub_1AE4F66E8();
      sub_1AE4F6824();
LABEL_15:
      v7 = v64;
      v69[0] = v64;
      if ((sub_1AE4F77E0() & 1) == 0)
      {
        sub_1AE7724A8();
        v7 = v69[0];
      }
      v29 = *(_QWORD *)(v7 + 16);
      v28 = *(_QWORD *)(v7 + 24);
      v3 = v29 + 1;
      if (v29 >= v28 >> 1)
      {
        sub_1AE506008(v28);
        sub_1AE7724A8();
        v7 = v69[0];
      }
      *(_QWORD *)(v7 + 16) = v3;
      v30 = v7 + 104 * v29;
      *(_QWORD *)(v30 + 32) = v61;
      *(_QWORD *)(v30 + 40) = v65;
      *(_QWORD *)(v30 + 48) = v57;
      *(_QWORD *)(v30 + 56) = v20;
      *(_WORD *)(v30 + 64) = v56;
      *(_QWORD *)(v30 + 72) = v11;
      *(_QWORD *)(v30 + 80) = v58;
      *(_QWORD *)(v30 + 88) = v12;
      *(_QWORD *)(v30 + 96) = v13;
      *(_QWORD *)(v30 + 104) = v59;
      *(_QWORD *)(v30 + 112) = v14;
      *(_QWORD *)(v30 + 120) = v16;
      *(_BYTE *)(v30 + 128) = v60;
      *(_BYTE *)(v30 + 129) = v18;
      goto LABEL_20;
    }
    v27 = sub_1AE4FB6F0();
    sub_1AE4F665C();
    sub_1AE4F6648();
    sub_1AE4F66E8();
    sub_1AE4F9038();
    if ((v27 & 1) != 0)
      goto LABEL_15;
    sub_1AE4F665C();
    sub_1AE4F6648();
    sub_1AE59CA28(v11, v58, v12, v13, v59, v14, v16, v60, v18);
    v7 = v64;
LABEL_20:
    v6 = v62 + 104;
    v5 = v63 - 1;
    v4 = v55;
    if (v63 == 1)
    {
      sub_1AE4F6728();
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
}

void sub_1AE76F5B4()
{
  __n128 *inited;

  sub_1AE76B4A4();
  sub_1AE501548(&qword_1ED319608);
  inited = (__n128 *)swift_initStackObject();
  sub_1AE50AA94(inited, (__n128)xmmword_1AE934250);
  static EntityPredicate.isAllDay.getter();
  sub_1AE60EFEC();
  sub_1AE4F685C();
}

void sub_1AE76F614(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  char v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  _OWORD v74[2];
  __int16 v75;
  _OWORD v76[2];
  __int16 v77;

  v5 = v4;
  sub_1AE68FF44(a4);
  v9 = sub_1AE4F675C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  sub_1AE4F686C();
  v69 = v11;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v12);
  sub_1AE5094B0();
  sub_1AE5085B4(v13);
  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v14);
  sub_1AE4FFEB4();
  v17 = v15 - v16;
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v61 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v61 - v22;
  v24 = *(_OWORD *)(a2 + 16);
  v76[0] = *(_OWORD *)a2;
  v76[1] = v24;
  v77 = *(_WORD *)(a2 + 32);
  v25 = *(_OWORD *)(a3 + 16);
  v74[0] = *(_OWORD *)a3;
  v74[1] = v25;
  v75 = *(_WORD *)(a3 + 32);
  sub_1AE5C7880((uint64_t)v76);
  v26 = sub_1AE4FB75C();
  sub_1AE76AF98(v26, v76);
  v28 = v27;
  swift_retain();
  sub_1AE769CB4(v28, v5);
  sub_1AE4F81B8();
  sub_1AE56AD74();
  v29 = v23;
  swift_bridgeObjectRelease();
  sub_1AE5281B4((uint64_t)v23, (uint64_t)v21);
  sub_1AE506078((uint64_t)v21, 1, v9);
  if (!v30)
  {
    sub_1AE52FBE8((uint64_t)v23, &qword_1ED30EB60);
    v48 = v65;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v65, v21, v9);
    sub_1AE7728F8(v48);
    return;
  }
  v68 = v10;
  sub_1AE52FBE8((uint64_t)v21, &qword_1ED30EB60);
  sub_1AE4FB75C();
  sub_1AE5C7880((uint64_t)v74);
  sub_1AE76AF98(a1, v74);
  v32 = *(_QWORD *)(v31 + 16);
  v63 = (uint64_t)v29;
  v64 = v31;
  if (v32)
  {
    v61 = 0;
    v33 = (_BYTE *)(v31 + 88);
    v34 = MEMORY[0x1E0DEE9D8];
    while ((*v33 & 1) != 0)
    {
LABEL_25:
      v33 += 64;
      if (!--v32)
        goto LABEL_37;
    }
    v35 = *((_QWORD *)v33 - 6);
    v36 = *((_QWORD *)v33 - 2);
    v37 = *((_QWORD *)v33 - 1);
    v73 = 0;
    v38 = MEMORY[0x1E0C80A78](v35);
    *(&v61 - 2) = (uint64_t)&v73;
    if ((v37 & 0x1000000000000000) != 0 || !(v37 & 0x2000000000000000 | v36 & 0x1000000000000000))
    {
      sub_1AE772B94(v38);
      sub_1AE4F66C4();
      sub_1AE501E5C();
      v45 = v61;
      sub_1AE9268F8();
      v61 = v45;
      sub_1AE772688();
      sub_1AE4F81B8();
    }
    else
    {
      v67 = &v61;
      if ((v37 & 0x2000000000000000) != 0)
      {
        v70 = v36;
        v71 = v37 & 0xFFFFFFFFFFFFFFLL;
        switch((char)v36)
        {
          case 0:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
            goto LABEL_16;
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
            goto LABEL_31;
          default:
            if (v36 == 32)
            {
LABEL_16:
              sub_1AE772B60();
              sub_1AE4F66C4();
              sub_1AE501E5C();
LABEL_17:
              v41 = 0;
              goto LABEL_18;
            }
LABEL_31:
            sub_1AE772B60();
            sub_1AE4F66C4();
            sub_1AE501E5C();
            if (!_swift_stdlib_strtod_clocale())
              goto LABEL_17;
            sub_1AE503324();
LABEL_18:
            v72 = v41;
            sub_1AE59CC40(v36, v37, 0);
            sub_1AE4F665C();
            sub_1AE4F81B8();
            sub_1AE772688();
            break;
        }
        goto LABEL_19;
      }
      if ((v36 & 0x1000000000000000) != 0)
      {
        v39 = (_BYTE *)((v37 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v62 = v38;
        v39 = (_BYTE *)sub_1AE926994();
        v38 = v62;
      }
      switch(*v39)
      {
        case 0:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
          goto LABEL_12;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
          goto LABEL_28;
        default:
          if (*v39 == 32)
          {
LABEL_12:
            sub_1AE772B60();
            sub_1AE4F66C4();
            sub_1AE501E5C();
            v40 = 0;
          }
          else
          {
LABEL_28:
            sub_1AE772B94(v38);
            sub_1AE4F66C4();
            sub_1AE501E5C();
            if (_swift_stdlib_strtod_clocale())
              sub_1AE503324();
            else
              v40 = 0;
          }
          v72 = v40;
          sub_1AE59CC40(v36, v37, 0);
          sub_1AE4F665C();
          break;
      }
    }
    swift_bridgeObjectRelease();
    sub_1AE772688();
LABEL_19:
    if ((v72 & 1) != 0)
    {
      v42 = v73;
      if ((sub_1AE7728E0() & 1) == 0)
      {
        sub_1AE7729D0();
        sub_1AE51A298();
        v34 = v46;
      }
      v44 = *(_QWORD *)(v34 + 16);
      v43 = *(_QWORD *)(v34 + 24);
      if (v44 >= v43 >> 1)
      {
        sub_1AE5D8C50(v43);
        sub_1AE51A298();
        v34 = v47;
      }
      *(_QWORD *)(v34 + 16) = v44 + 1;
      *(_QWORD *)(v34 + 8 * v44 + 32) = v42;
    }
    goto LABEL_25;
  }
  v34 = MEMORY[0x1E0DEE9D8];
LABEL_37:
  sub_1AE5001F4();
  v49 = *(_QWORD *)(v34 + 16);
  if (v49)
  {
    sub_1AE4F67A4();
    v50 = 0;
    v51 = MEMORY[0x1E0DEE9D8];
    do
    {
      sub_1AE924858();
      sub_1AE7728F8(v17);
      sub_1AE506078(v17, 1, v9);
      if (v30)
      {
        sub_1AE52FBE8(v17, &qword_1ED30EB60);
      }
      else
      {
        v52 = v66;
        sub_1AE772B30(v66, v17);
        sub_1AE772B30(v69, v52);
        v53 = sub_1AE505598();
        if ((v53 & 1) == 0)
        {
          sub_1AE51A600();
          v51 = v58;
        }
        v55 = *(_QWORD *)(v51 + 16);
        v54 = *(_QWORD *)(v51 + 24);
        if (v55 >= v54 >> 1)
        {
          sub_1AE772A8C(v54);
          sub_1AE51A600();
          v51 = v59;
        }
        *(_QWORD *)(v51 + 16) = v55 + 1;
        sub_1AE7726E0();
        sub_1AE772B30(v51 + v56 + *(_QWORD *)(v57 + 72) * v55, v69);
      }
      ++v50;
    }
    while (v49 != v50);
    sub_1AE4F6728();
  }
  v60 = v63;
  sub_1AE4F6728();
  sub_1AE56AD74();
  sub_1AE4F6648();
  sub_1AE52FBE8(v60, &qword_1ED30EB60);
}

void sub_1AE76FC10()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  int v176;
  uint64_t v177;
  unint64_t v178;
  id v179;
  uint64_t v180;
  id v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  id v185;
  void *v186;
  uint64_t v187;
  id v188;
  void (*v189)(void *, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char v236;
  char v238;
  unint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _BYTE *v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t *v264;
  int *v265;
  unint64_t v266;
  unint64_t v267;
  char v268;
  char v269;
  void *v270;
  void *v271;
  char v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  __int128 v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _BYTE v308[48];
  uint64_t v309;
  unint64_t v310;
  _QWORD v311[2];
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;

  sub_1AE4FC4D4();
  v2 = v1;
  v4 = v3;
  v275 = v5;
  v278 = sub_1AE4F675C();
  v276 = *(_QWORD *)(v278 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v6);
  sub_1AE4F686C();
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v7);
  sub_1AE4F6A60();
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v270 - v9;
  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v11);
  sub_1AE4F686C();
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v12);
  sub_1AE4F6A60();
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v13);
  sub_1AE4F6A60();
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v14);
  sub_1AE4F6A60();
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v15);
  sub_1AE4F6A60();
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v16);
  sub_1AE4F6A60();
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v17);
  sub_1AE5094B0();
  sub_1AE5085B4(v18);
  v314 = 0;
  v315 = 0xE000000000000000;
  v20 = v0[9];
  v19 = v0[10];
  v283 = v0;
  v21 = v0[11];
  sub_1AE4F6730();
  sub_1AE4F66CC();
  static EntityClass.calendarEvent.getter();
  v22 = v311[1];
  v23 = v313;
  v24 = v19 == v312 && v21 == v313;
  if (v24)
  {
    sub_1AE4F81B8();
    sub_1AE4F6824();
    sub_1AE4F76D8();
    goto LABEL_8;
  }
  sub_1AE4F7714();
  v25 = sub_1AE4FB6F0();
  sub_1AE4F9038();
  sub_1AE4F81B8();
  sub_1AE4F67AC();
  sub_1AE4F76D8();
  if ((v25 & 1) != 0)
  {
LABEL_8:
    swift_bridgeObjectRetain_n();
    sub_1AE76B318(1);
    v22 = sub_1AE926718();
    v23 = v26;
    sub_1AE4F81B8();
    v27 = sub_1AE5BB100(1uLL, v19, v21);
    v309 = v22;
    v310 = v23;
    v311[0] = v27;
    v311[1] = v28;
    v312 = v29;
    v313 = v30;
    v20 = sub_1AE7722CC();
    sub_1AE4F6804();
    sub_1AE925F5C();
    sub_1AE4F67AC();
    sub_1AE4F6648();
    v311[0] = v309;
    v311[1] = v310;
    sub_1AE4F7838();
    sub_1AE507F48();
    sub_1AE4F6648();
  }
  sub_1AE509ECC();
  sub_1AE772750();
  v284 = v10;
  if (!v2)
  {
    v32 = MEMORY[0x1E0DEE9D8];
LABEL_34:
    v61 = *(_QWORD *)(v32 + 16);
    v62 = MEMORY[0x1E0DEE9D8];
    if (v61)
    {
      sub_1AE4F66E0();
      v63 = 0;
      v31 = MEMORY[0x1E0DEE9D8];
      v304 = v32;
      do
      {
        sub_1AE772950();
        if (v24)
        {
          sub_1AE772568(v64);
          sub_1AE4F6730();
          sub_1AE4F66C4();
          if ((sub_1AE505598() & 1) == 0)
          {
            sub_1AE772550();
            v31 = v66;
          }
          sub_1AE772930();
          if (v65)
          {
            sub_1AE5066A0();
            v31 = v67;
          }
          sub_1AE506384();
          sub_1AE772828();
        }
        v63 += 104;
        --v61;
      }
      while (v61);
      sub_1AE4FC564();
      v62 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v31 = MEMORY[0x1E0DEE9D8];
    }
    sub_1AE4FC564();
    v311[0] = v62;
    if (*(_QWORD *)(v31 + 16))
    {
      sub_1AE4FB75C();
      v20 = 48;
      do
      {
        sub_1AE772A84();
        sub_1AE772AC0();
        sub_1AE772A64();
      }
      while (!v24);
      sub_1AE4F6648();
    }
    sub_1AE4F6648();
    v68 = *(_QWORD *)(v311[0] + 16);
    v297 = v311[0];
    if (v68)
    {
      v299 = 2674;
      v298 = 3558;
      v69 = v311[0] + 48;
      v70 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_302;
        v71 = *((_QWORD *)_Records_GDEntityPredicate_records + 154);
        if (v71 >= v299)
          goto LABEL_286;
        if (*((_QWORD *)_Records_GDEntityPredicate_records + 155) >= v298)
          goto LABEL_287;
        v304 = v68;
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_303;
        v72 = *(char **)(v69 - 16);
        v23 = *(_QWORD *)(v69 - 8);
        v61 = *(_QWORD *)(v69 + 8);
        v300 = *(_QWORD *)v69;
        LODWORD(v301) = *(unsigned __int16 *)(v69 + 16);
        v22 = *(_QWORD *)(v69 + 24);
        v4 = *(_QWORD *)(v69 + 32);
        v73 = (char *)_Records_GDEntityPredicate_predicateIds + v71;
        v20 = *(unsigned __int8 *)(v69 + 40);
        sub_1AE4F6804();
        sub_1AE4FB930();
        *(_QWORD *)&v302 = v4;
        sub_1AE59CC30(v22, v4, v20);
        sub_1AE4F6804();
        sub_1AE4FB930();
        sub_1AE925F8C();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_304;
        sub_1AE772940();
        if (v72 == v73 && v23 == v4)
          break;
        v31 = sub_1AE4FB6F0();
        sub_1AE4F66E8();
        sub_1AE4F67AC();
        sub_1AE4F6718();
        sub_1AE4F6710();
        if ((v31 & 1) != 0)
          goto LABEL_65;
        sub_1AE4F66E8();
        sub_1AE4F67AC();
        sub_1AE772880();
LABEL_70:
        sub_1AE772A24();
        if (v24)
          goto LABEL_74;
      }
      sub_1AE4F66E8();
      sub_1AE4F6718();
      sub_1AE4F6824();
LABEL_65:
      v75 = sub_1AE4F77E0();
      v311[0] = v70;
      if ((v75 & 1) == 0)
      {
        sub_1AE77265C();
        v70 = (_QWORD *)v311[0];
      }
      v76 = v300;
      v4 = v70[2];
      v31 = v4 + 1;
      if (v4 >= v70[3] >> 1)
      {
        sub_1AE77265C();
        v70 = (_QWORD *)v311[0];
      }
      v70[2] = v31;
      v77 = &v70[8 * v4];
      v77[4] = v72;
      v77[5] = v23;
      v77[6] = v76;
      v77[7] = v61;
      sub_1AE772804((uint64_t)v77);
      goto LABEL_70;
    }
    v70 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_74:
    sub_1AE5001F4();
    if (v70[2])
    {
      sub_1AE4F66E0();
      v20 = (unint64_t)(v70 + 11);
      v78 = MEMORY[0x1E0DEE9D8];
      do
      {
        if (*(_BYTE *)v20 == 1)
        {
          v22 = v70[9];
          v79 = v78;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v80 = v79;
          }
          else
          {
            sub_1AE772874();
            sub_1AE519D1C();
            v80 = v82;
          }
          v23 = *(_QWORD *)(v80 + 16);
          v81 = *(_QWORD *)(v80 + 24);
          v31 = v23 + 1;
          if (v23 >= v81 >> 1)
          {
            sub_1AE5D8C50(v81);
            sub_1AE519D1C();
            v80 = v83;
          }
          *(_QWORD *)(v80 + 16) = v31;
          *(_QWORD *)(v80 + 8 * v23 + 32) = v22;
        }
        sub_1AE772A64();
      }
      while (!v24);
      v84 = v78;
      swift_release();
    }
    else
    {
      v84 = MEMORY[0x1E0DEE9D8];
    }
    sub_1AE4FC564();
    sub_1AE7729A8();
    v273 = v84;
    v85 = v84;
    v86 = 0;
    v87 = sub_1AE76A3C0(v85, v31);
    v88 = v87;
    v274 = 0;
    v89 = *(_QWORD *)(v87 + 16);
    if (v89)
    {
      if (v89 == 1)
      {
        v277 = 1;
        sub_1AE772960();
        v86 = *(_QWORD *)(v88 + 32);
        v20 = *(_QWORD *)(v88 + 40);
        sub_1AE4F6730();
        sub_1AE4F6648();
        sub_1AE56782C(15);
        sub_1AE544754();
        sub_1AE77278C();
        v311[0] = v91;
        v311[1] = v90 | 0xED00002000000000;
        sub_1AE772530();
        sub_1AE4F81B8();
        sub_1AE507F48();
        sub_1AE4F6648();
      }
      else
      {
        v311[0] = v87;
        sub_1AE4F69EC();
        sub_1AE772970(qword_1EED9E3C0, v92, MEMORY[0x1E0DEAF38]);
        v86 = sub_1AE92604C();
        v20 = v93;
        sub_1AE4F6648();
        sub_1AE56782C(16);
        sub_1AE544754();
        sub_1AE77278C();
        v311[0] = v95;
        v311[1] = v94 | 0xEE00207300000000;
        sub_1AE772530();
        sub_1AE4F81B8();
        sub_1AE507F48();
        sub_1AE4F6648();
        v277 = 1;
      }
    }
    else
    {
      sub_1AE4F6648();
      v277 = 0;
    }
    v31 = *(_QWORD *)(v283[15] + 16);
    if (v31)
    {
      sub_1AE73717C(233);
      sub_1AE737188(2674);
      v96 = sub_1AE772820(3558);
      v97 = MEMORY[0x1E0DEE9D8];
      v285 = v96;
      while (1)
      {
        if (v287 < 111)
          goto LABEL_288;
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_305;
        sub_1AE772630();
        if (v34 == v35)
          goto LABEL_289;
        sub_1AE7726BC();
        if (v34 == v35)
          goto LABEL_290;
        *(_QWORD *)&v302 = v99;
        v304 = v31;
        v301 = v97;
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_306;
        sub_1AE7724F0(v98);
        v101 = v100[11];
        v23 = v100[12];
        v102 = v100[15];
        sub_1AE772AAC(v104 + v103);
        sub_1AE4FB930();
        v288 = v86;
        v269 = v86;
        v86 = v61;
        v289 = v20;
        v290 = v97;
        v292 = v101;
        v105 = v101;
        v106 = v299;
        sub_1AE7724B0(v20, v97, v105, v107, v108, v109, v110, v111, v269);
        sub_1AE4FB75C();
        sub_1AE4FB930();
        sub_1AE7727B4();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_307;
        v113 = v112;
        sub_1AE772628();
        sub_1AE772A70();
        if (v24 && v106 == v113)
          break;
        v22 = sub_1AE4FB6F0();
        sub_1AE4F665C();
        sub_1AE4F6648();
        sub_1AE4F66E8();
        sub_1AE4F9038();
        sub_1AE772AA0();
        if ((v22 & 1) != 0)
          goto LABEL_109;
        sub_1AE4F665C();
        v115 = sub_1AE4F6648();
        sub_1AE50A5A4(v115, v116, v117, v118, v119, v120, v121, v122, (char)v270);
        v97 = v301;
LABEL_114:
        v4 = v102 + 104;
        v31 = v304 - 1;
        if (v304 == 1)
        {
          swift_bridgeObjectRelease();
          goto LABEL_117;
        }
      }
      sub_1AE4F665C();
      sub_1AE4F66E8();
      sub_1AE4F6824();
      sub_1AE772AA0();
LABEL_109:
      v97 = v301;
      v123 = sub_1AE4F77E0();
      v311[0] = v97;
      if ((v123 & 1) == 0)
      {
        sub_1AE505770();
        v97 = v311[0];
      }
      v61 = *(_QWORD *)(v97 + 16);
      v22 = v61 + 1;
      if (v61 >= *(_QWORD *)(v97 + 24) >> 1)
      {
        sub_1AE7724A8();
        v97 = v311[0];
      }
      sub_1AE4FDF44();
      goto LABEL_114;
    }
    v97 = MEMORY[0x1E0DEE9D8];
LABEL_117:
    v124 = v284;
    if (*(_QWORD *)(v97 + 16))
    {
      sub_1AE4F66E0();
      v22 = v97 + 72;
      v125 = MEMORY[0x1E0DEE9D8];
      v23 = 0xE100000000000000;
      while (*(_BYTE *)(v22 + 57))
      {
LABEL_130:
        sub_1AE772A38();
        if (v24)
        {
          sub_1AE4FC564();
          goto LABEL_141;
        }
      }
      v126 = v97;
      v127 = *(_QWORD *)v22;
      v86 = *(_QWORD *)(v22 + 8);
      v128 = *(_QWORD *)v22 == 49 && v86 == 0xE100000000000000;
      if (v128 || (sub_1AE4FB6F0() & 1) != 0)
      {
        v86 = 1;
        if ((sub_1AE505598() & 1) != 0)
          goto LABEL_126;
      }
      else
      {
        v129 = v127 == 48 && v86 == 0xE100000000000000;
        if (!v129 && (sub_1AE4FB6F0() & 1) == 0)
        {
LABEL_129:
          v97 = v126;
          goto LABEL_130;
        }
        v86 = 0;
        if ((sub_1AE505598() & 1) != 0)
        {
LABEL_126:
          sub_1AE7726F0();
          if (v65)
          {
            sub_1AE7726B0();
            v125 = v131;
          }
          *(_QWORD *)(v125 + 16) = v127;
          *(_BYTE *)(v125 + v61 + 32) = v86;
          goto LABEL_129;
        }
      }
      sub_1AE7726B0();
      v125 = v130;
      goto LABEL_126;
    }
    v125 = MEMORY[0x1E0DEE9D8];
LABEL_141:
    sub_1AE4FC564();
    if (*(_QWORD *)(v125 + 16))
    {
      sub_1AE66B86C(0, 1, v125);
      LODWORD(v285) = *(unsigned __int8 *)(v125 + 32);
    }
    else
    {
      LODWORD(v285) = 0;
    }
    sub_1AE4F6648();
    sub_1AE772750();
    if (v86)
    {
      v31 = 233;
      swift_bridgeObjectRetain();
      sub_1AE73717C(2674);
      sub_1AE737188(3558);
      v286 = v132;
      while (1)
      {
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_308;
        sub_1AE772630();
        if (v34 == v35)
          goto LABEL_291;
        sub_1AE7726BC();
        if (v34 == v35)
          goto LABEL_292;
        sub_1AE7728A0();
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_309;
        sub_1AE7724F0(v133);
        v135 = v134[11];
        v23 = v134[12];
        v136 = v134[15];
        sub_1AE772860(v137);
        sub_1AE4FB930();
        v138 = sub_1AE7725B4();
        v292 = v135;
        sub_1AE7724B0(v138, v139, v135, v140, v141, v142, v143, v144, (char)v270);
        sub_1AE4FB75C();
        sub_1AE4FB930();
        sub_1AE7727B4();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_310;
        v146 = v145;
        sub_1AE772628();
        sub_1AE772A70();
        if (v24 && v146 == 233)
          break;
        v22 = sub_1AE4FB6F0();
        sub_1AE4F665C();
        sub_1AE4F6648();
        sub_1AE4F66E8();
        sub_1AE4F9038();
        sub_1AE772AA0();
        if ((v22 & 1) != 0)
          goto LABEL_160;
        sub_1AE4F665C();
        v148 = sub_1AE4F6648();
        sub_1AE50A5A4(v148, v149, v150, v151, v152, v153, v154, v155, v272);
        sub_1AE772828();
LABEL_165:
        v4 = v136 + 104;
        sub_1AE7729C0();
        if (v24)
        {
          swift_bridgeObjectRelease();
          v124 = v284;
          goto LABEL_169;
        }
      }
      sub_1AE4F665C();
      sub_1AE4F66E8();
      sub_1AE4F6824();
      sub_1AE772AA0();
LABEL_160:
      v146 = v304;
      v156 = sub_1AE4F77E0();
      v311[0] = v146;
      if ((v156 & 1) == 0)
      {
        sub_1AE505770();
        v146 = v311[0];
      }
      v157 = *(_QWORD *)(v146 + 16);
      v22 = v157 + 1;
      if (v157 >= *(_QWORD *)(v146 + 24) >> 1)
      {
        sub_1AE7724A8();
        v146 = v311[0];
      }
      sub_1AE4FDF44();
      goto LABEL_165;
    }
    v146 = MEMORY[0x1E0DEE9D8];
LABEL_169:
    v158 = *(_QWORD *)(v146 + 16);
    v159 = MEMORY[0x1E0DEE9D8];
    if (v158)
    {
      sub_1AE4F66E0();
      v160 = 0;
      v161 = MEMORY[0x1E0DEE9D8];
      v304 = v146;
      do
      {
        sub_1AE772950();
        if (v24)
        {
          sub_1AE772568(v162);
          sub_1AE4F6730();
          sub_1AE4F66C4();
          if ((sub_1AE505598() & 1) == 0)
          {
            sub_1AE772550();
            v161 = v163;
          }
          sub_1AE772930();
          if (v65)
          {
            sub_1AE5066A0();
            v161 = v164;
          }
          sub_1AE506384();
          v124 = v284;
          sub_1AE772828();
        }
        v160 += 104;
        --v158;
      }
      while (v158);
      sub_1AE4FC564();
      v159 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v161 = MEMORY[0x1E0DEE9D8];
    }
    sub_1AE4FC564();
    v311[0] = v159;
    v165 = *(_QWORD *)(v161 + 16);
    if (v165)
    {
      sub_1AE4FB75C();
      do
      {
        sub_1AE772A84();
        sub_1AE772AC0();
        sub_1AE772A64();
      }
      while (!v24);
      sub_1AE4F6648();
    }
    sub_1AE4F6648();
    v166 = v311[0];
    static EntityPredicate.startTime.getter();
    sub_1AE772764();
    static EntityPredicate.imputedStartTime.getter();
    sub_1AE7725E4();
    v167 = v282;
    v168 = (uint64_t)v283;
    sub_1AE76F614(v166, v169, v170, v282);
    sub_1AE4F81B8();
    sub_1AE4F665C();
    sub_1AE4F67AC();
    sub_1AE4F76D8();
    static EntityPredicate.endTime.getter();
    sub_1AE772764();
    static EntityPredicate.imputedEndTime.getter();
    sub_1AE7725E4();
    v171 = v281;
    sub_1AE76F614(v166, v172, v173, v281);
    sub_1AE4F81B8();
    sub_1AE4F665C();
    sub_1AE4F67AC();
    sub_1AE4F76D8();
    sub_1AE4F6648();
    v174 = 48;
    if ((_DWORD)v285)
      v174 = 40;
    v175 = *(void **)(v168 + v174);
    sub_1AE772894(v167, (uint64_t)&v303);
    v22 = v278;
    v176 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v168, 1, v278);
    v23 = 0x1F25E9000;
    v285 = (uint64_t)v175;
    if (v176 == 1)
    {
      sub_1AE772AF8((uint64_t)v175, &qword_1ED30EB60);
      sub_1AE772894(v171, (uint64_t)&v299);
      v177 = sub_1AE506078(v168, 1, v22);
      v178 = v276;
      if (v24)
      {
        sub_1AE772AF8(v177, &qword_1ED30EB60);
        goto LABEL_196;
      }
      v183 = v270;
      (*(void (**)(void *, uint64_t, uint64_t))(v276 + 32))(v270, v168, v22);
      v184 = sub_1AE92487C();
      v185 = sub_1AE772614(v184);

      sub_1AE925E3C();
      sub_1AE772A44();
      strcpy((char *)v311, " has end on ");
      BYTE5(v311[1]) = 0;
      HIWORD(v311[1]) = -5120;
      sub_1AE772530();
      sub_1AE4F81B8();
      sub_1AE507F48();
      sub_1AE4F6648();
      (*(void (**)(void *, uint64_t))(v178 + 8))(v183, v22);
    }
    else
    {
      v4 = v276;
      sub_1AE772AEC((uint64_t)v124);
      v179 = v175;
      v180 = sub_1AE92487C();
      v181 = sub_1AE772614(v180);

      sub_1AE925E3C();
      strcpy((char *)v311, " has start on ");
      HIBYTE(v311[1]) = -18;
      sub_1AE925F74();
      v22 = v278;
      swift_bridgeObjectRelease();
      v165 = v311[1];
      sub_1AE509ECC();
      sub_1AE4F665C();
      sub_1AE772894(v171, (uint64_t)&v300);
      sub_1AE506078((uint64_t)&v314, 1, v22);
      if (v24)
      {
        v182 = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v124, v22);
        sub_1AE772AF8(v182, &qword_1ED30EB60);
      }
      else
      {
        v186 = v271;
        sub_1AE772AEC((uint64_t)v271);
        v187 = sub_1AE92487C();
        v188 = sub_1AE772614(v187);

        sub_1AE925E3C();
        sub_1AE772A44();
        strcpy((char *)v311, " until ");
        v311[1] = 0xE700000000000000;
        sub_1AE772530();
        sub_1AE4F81B8();
        sub_1AE507F48();
        sub_1AE4F6648();
        v189 = *(void (**)(void *, uint64_t))(v4 + 8);
        v189(v186, v22);
        v189(v124, v22);
      }
    }
    v277 = 1;
LABEL_196:
    sub_1AE772750();
    if (v165)
    {
      v31 = 233;
      swift_bridgeObjectRetain();
      sub_1AE73717C(2674);
      sub_1AE737188(3558);
      v286 = v190;
      while (1)
      {
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_311;
        sub_1AE772630();
        if (v34 == v35)
          goto LABEL_293;
        sub_1AE7726BC();
        if (v34 == v35)
          goto LABEL_294;
        sub_1AE7728A0();
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_312;
        v192 = sub_1AE772834(v191);
        sub_1AE772730(v192);
        v22 = v193[11];
        v194 = v193[12];
        v195 = v193[13];
        v196 = v193[14];
        v4 = v193[15];
        sub_1AE772860(v197);
        sub_1AE4F6804();
        v198 = sub_1AE7725B4();
        v291 = v22;
        v292 = v194;
        v293 = v195;
        v294 = v196;
        v295 = v4;
        sub_1AE772988(v198, v199, v22, v194, v195, v196, v4, v200, (char)v270);
        sub_1AE4FB75C();
        sub_1AE4F6804();
        sub_1AE7727B4();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_313;
        v202 = v201;
        sub_1AE772628();
        sub_1AE772BA0();
        if (v24 && v202 == 233)
          break;
        v204 = sub_1AE4FB6F0();
        sub_1AE4F665C();
        sub_1AE4F6648();
        sub_1AE4F67AC();
        sub_1AE4F9038();
        if ((v204 & 1) != 0)
          goto LABEL_212;
        sub_1AE4F665C();
        v205 = sub_1AE4F6648();
        sub_1AE50ACE4(v205, v206, v207, v208, v209, v210, v211, v212, v272);
        sub_1AE772828();
LABEL_217:
        sub_1AE7729C0();
        if (v24)
        {
          swift_bridgeObjectRelease();
          goto LABEL_221;
        }
      }
      sub_1AE4F665C();
      sub_1AE4F67AC();
      sub_1AE4F6824();
LABEL_212:
      v202 = v304;
      v213 = sub_1AE4F77E0();
      v311[0] = v202;
      if ((v213 & 1) == 0)
      {
        sub_1AE505770();
        v202 = v311[0];
      }
      v214 = *(_QWORD *)(v202 + 16);
      v23 = v214 + 1;
      if (v214 >= *(_QWORD *)(v202 + 24) >> 1)
      {
        sub_1AE7724A8();
        v202 = v311[0];
      }
      sub_1AE503898();
      goto LABEL_217;
    }
    v202 = MEMORY[0x1E0DEE9D8];
LABEL_221:
    v215 = *(_QWORD *)(v202 + 16);
    v216 = MEMORY[0x1E0DEE9D8];
    if (v215)
    {
      sub_1AE4F66E0();
      v217 = 0;
      v31 = MEMORY[0x1E0DEE9D8];
      v304 = v202;
      do
      {
        sub_1AE772950();
        if (v24)
        {
          v302 = *(_OWORD *)(v218 + 72);
          v219 = *(_BYTE *)(v218 + 128);
          v23 = *(_QWORD *)(v218 + 112);
          v220 = *(_QWORD *)(v218 + 120);
          v221 = *(_QWORD *)(v218 + 96);
          v222 = *(_QWORD *)(v218 + 104);
          v22 = *(_QWORD *)(v218 + 88);
          sub_1AE4F6708();
          sub_1AE4F6730();
          sub_1AE4F66C4();
          v223 = sub_1AE505598();
          v301 = v221;
          if ((v223 & 1) == 0)
          {
            sub_1AE772550();
            v31 = v226;
          }
          sub_1AE772930();
          if (v65)
          {
            sub_1AE5066A0();
            v31 = v227;
          }
          *(_QWORD *)(v31 + 16) = v221;
          v224 = v31 + (v4 << 6);
          *(_OWORD *)(v224 + 32) = v302;
          v225 = v301;
          *(_QWORD *)(v224 + 48) = v22;
          *(_QWORD *)(v224 + 56) = v225;
          *(_QWORD *)(v224 + 64) = v222;
          *(_QWORD *)(v224 + 72) = v23;
          *(_QWORD *)(v224 + 80) = v220;
          *(_BYTE *)(v224 + 88) = v219;
          sub_1AE772828();
        }
        v217 += 104;
        --v215;
      }
      while (v215);
      sub_1AE4FC564();
      v216 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v31 = MEMORY[0x1E0DEE9D8];
    }
    sub_1AE4FC564();
    v311[0] = v216;
    if (*(_QWORD *)(v31 + 16))
    {
      sub_1AE4FB75C();
      do
      {
        sub_1AE772A84();
        sub_1AE772AC0();
        sub_1AE772A64();
      }
      while (!v24);
      sub_1AE4F6648();
    }
    sub_1AE4F6648();
    v228 = *(_QWORD *)(v311[0] + 16);
    v296 = v311[0];
    if (v228)
    {
      v299 = 233;
      v298 = 2674;
      v297 = 3558;
      v229 = v311[0] + 48;
      v230 = MEMORY[0x1E0DEE9D8];
      while (1)
      {
        if (v299 < 28)
          goto LABEL_295;
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_314;
        v231 = *((_QWORD *)_Records_GDEntityPredicate_records + 82);
        if (v231 >= v298)
          goto LABEL_296;
        if (*((_QWORD *)_Records_GDEntityPredicate_records + 83) >= v297)
          goto LABEL_297;
        v304 = v228;
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_315;
        v232 = *(char **)(v229 - 16);
        v23 = *(_QWORD *)(v229 - 8);
        v233 = *(_QWORD *)(v229 + 8);
        v301 = *(_QWORD *)v229;
        LODWORD(v300) = *(unsigned __int16 *)(v229 + 16);
        v22 = *(_QWORD *)(v229 + 24);
        v234 = *(_QWORD *)(v229 + 32);
        v235 = (char *)_Records_GDEntityPredicate_predicateIds + v231;
        v236 = *(_BYTE *)(v229 + 40);
        sub_1AE4F6804();
        sub_1AE4FB930();
        *(_QWORD *)&v302 = v234;
        sub_1AE59CC30(v22, v234, v236);
        sub_1AE4F6804();
        sub_1AE4FB930();
        sub_1AE925F8C();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_316;
        sub_1AE772940();
        if (v232 == v235 && v23 == v234)
          break;
        v31 = sub_1AE4FB6F0();
        sub_1AE4F66E8();
        sub_1AE4F67AC();
        sub_1AE4F6718();
        sub_1AE4F6710();
        if ((v31 & 1) != 0)
          goto LABEL_253;
        sub_1AE4F66E8();
        sub_1AE4F67AC();
        sub_1AE772880();
LABEL_258:
        sub_1AE772A24();
        if (v24)
          goto LABEL_262;
      }
      sub_1AE4F66E8();
      sub_1AE4F6718();
      sub_1AE4F6824();
LABEL_253:
      v238 = sub_1AE4F77E0();
      v311[0] = v230;
      if ((v238 & 1) == 0)
      {
        sub_1AE77265C();
        v230 = v311[0];
      }
      v239 = *(_QWORD *)(v230 + 16);
      v31 = v239 + 1;
      if (v239 >= *(_QWORD *)(v230 + 24) >> 1)
      {
        sub_1AE77265C();
        v230 = v311[0];
      }
      *(_QWORD *)(v230 + 16) = v31;
      v240 = (_QWORD *)(v230 + (v239 << 6));
      v240[4] = v232;
      v240[5] = v23;
      v240[6] = v301;
      v240[7] = v233;
      sub_1AE772804((uint64_t)v240);
      goto LABEL_258;
    }
    v230 = MEMORY[0x1E0DEE9D8];
LABEL_262:
    sub_1AE5001F4();
    v241 = *(_QWORD *)(v230 + 16);
    if (v241)
    {
      sub_1AE4F66E0();
      v242 = (_BYTE *)(v230 + 88);
      v243 = MEMORY[0x1E0DEE9D8];
      do
      {
        if (*v242 == 1)
        {
          v244 = *((_QWORD *)v242 - 2);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1AE772874();
            sub_1AE519D1C();
            v243 = v247;
          }
          v246 = *(_QWORD *)(v243 + 16);
          v245 = *(_QWORD *)(v243 + 24);
          v31 = v246 + 1;
          if (v246 >= v245 >> 1)
          {
            sub_1AE5D8C50(v245);
            sub_1AE519D1C();
            v243 = v248;
          }
          *(_QWORD *)(v243 + 16) = v31;
          *(_QWORD *)(v243 + 8 * v246 + 32) = v244;
        }
        v242 += 64;
        --v241;
      }
      while (v241);
      sub_1AE4FC564();
    }
    else
    {
      v243 = MEMORY[0x1E0DEE9D8];
    }
    sub_1AE4FC564();
    sub_1AE7729A8();
    v249 = sub_1AE76A3C0(v243, v31);
    v250 = *(_QWORD *)(v249 + 16);
    if (v250)
    {
      if (v250 == 1)
      {
        sub_1AE772960();
        sub_1AE4F6804();
        sub_1AE4F6648();
        sub_1AE56782C(17);
        sub_1AE544754();
        v311[0] = 0x7461206874697720;
        v311[1] = 0xEF206565646E6574;
      }
      else
      {
        v311[0] = v249;
        sub_1AE4F69EC();
        sub_1AE772970(qword_1EED9E3C0, v255, MEMORY[0x1E0DEAF38]);
        sub_1AE92604C();
        sub_1AE4F6648();
        sub_1AE56782C(18);
        sub_1AE544754();
        v311[0] = 0xD000000000000010;
        v311[1] = 0x80000001AE984870;
      }
      sub_1AE925F74();
      sub_1AE4F67AC();
      sub_1AE507F48();
      sub_1AE4F6648();
      sub_1AE4F7838();
    }
    else
    {
      sub_1AE4F6648();
      sub_1AE4F7838();
      if ((v277 & 1) == 0)
      {
        sub_1AE4F81B8();
        sub_1AE5001F4();
        sub_1AE772BB4();
        sub_1AE772AC8((uint64_t)&v307);
        sub_1AE772AC8((uint64_t)v308);
        sub_1AE508374();
        sub_1AE4FDF3C();
        sub_1AE769C88();
LABEL_284:
        _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v251, v252, v253, v254);
        sub_1AE4F8180();
        return;
      }
    }
    v23 = v314;
    v31 = v315;
    sub_1AE5281B4(v282, v279);
    sub_1AE5281B4(v281, v280);
    v256 = v283;
    v257 = v273;
    sub_1AE4F67A4();
    sub_1AE4F6730();
    sub_1AE4FB75C();
    v258 = sub_1AE4F6708();
    sub_1AE76A4F8(v258, v257, v243);
    v260 = v259;
    sub_1AE4F6648();
    sub_1AE4F76D8();
    sub_1AE4F81B8();
    sub_1AE4F6728();
    v22 = v256[14];
    sub_1AE4F66CC();
    v261 = v260;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
LABEL_298:
      sub_1AE5063B4();
      sub_1AE519D1C();
      v261 = v266;
    }
    v263 = *(_QWORD *)(v261 + 16);
    v262 = *(_QWORD *)(v261 + 24);
    if (v263 >= v262 >> 1)
    {
      sub_1AE772A8C(v262);
      sub_1AE519D1C();
      v261 = v267;
    }
    *(_QWORD *)(v261 + 16) = v263 + 1;
    *(_QWORD *)(v261 + 8 * v263 + 32) = v22;
    sub_1AE4F9038();
    sub_1AE772BB4();
    sub_1AE772AD4((uint64_t)&v307);
    sub_1AE772AD4((uint64_t)v308);
    v264 = v275;
    *v275 = v23;
    v264[1] = v31;
    v265 = (int *)sub_1AE4FDF3C();
    sub_1AE772AE0((uint64_t)v264 + v265[5], (uint64_t)&v305);
    sub_1AE772AE0((uint64_t)v264 + v265[6], (uint64_t)&v306);
    *(unint64_t *)((char *)v264 + v265[7]) = v261;
    sub_1AE7728E8();
    goto LABEL_284;
  }
  v31 = 233;
  swift_bridgeObjectRetain();
  sub_1AE73717C(2674);
  sub_1AE737188(3558);
  v32 = MEMORY[0x1E0DEE9D8];
  v286 = v33;
  while (_Records_GDEntityPredicate_records)
  {
    sub_1AE772630();
    if (v34 == v35)
    {
      __break(1u);
LABEL_285:
      __break(1u);
LABEL_286:
      __break(1u);
LABEL_287:
      __break(1u);
LABEL_288:
      __break(1u);
LABEL_289:
      __break(1u);
LABEL_290:
      __break(1u);
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
      goto LABEL_298;
    }
    sub_1AE7726BC();
    if (v34 == v35)
      goto LABEL_285;
    v299 = v37;
    v300 = v2;
    v304 = v32;
    if (!_Records_GDEntityPredicate_predicateIds)
      goto LABEL_300;
    v38 = sub_1AE772834(v36);
    sub_1AE772730(v38);
    v40 = v39[9];
    v41 = v39[10];
    v20 = v39[11];
    v4 = v39[12];
    v42 = v39[13];
    v22 = v39[14];
    v43 = v39[15];
    sub_1AE772AAC(v45 + v44);
    sub_1AE4F6804();
    v288 = v2;
    v268 = v2;
    v2 = v23;
    v289 = v40;
    v46 = v40;
    v31 = v301;
    v290 = v41;
    v291 = v20;
    v292 = v4;
    v293 = v42;
    v294 = v22;
    v295 = v43;
    sub_1AE772988(v46, v41, v20, v4, v42, v22, v43, v47, v268);
    sub_1AE4FB75C();
    sub_1AE4F6804();
    sub_1AE772A50();
    if (!_Records_GDEntityPredicate_labels)
      goto LABEL_301;
    v32 = v48;
    sub_1AE772628();
    sub_1AE772BA0();
    if (v24 && v31 == v32)
    {
      sub_1AE4F665C();
      sub_1AE4F67AC();
      sub_1AE4F6824();
LABEL_25:
      v32 = v304;
      v59 = sub_1AE4F77E0();
      v311[0] = v32;
      if ((v59 & 1) == 0)
      {
        sub_1AE505770();
        v32 = v311[0];
      }
      v60 = *(_QWORD *)(v32 + 16);
      v23 = v60 + 1;
      if (v60 >= *(_QWORD *)(v32 + 24) >> 1)
      {
        sub_1AE7724A8();
        v32 = v311[0];
      }
      sub_1AE503898();
      goto LABEL_30;
    }
    v50 = sub_1AE4FB6F0();
    sub_1AE4F665C();
    sub_1AE4F6648();
    sub_1AE4F67AC();
    sub_1AE4F9038();
    if ((v50 & 1) != 0)
      goto LABEL_25;
    sub_1AE4F665C();
    v51 = sub_1AE4F6648();
    sub_1AE50ACE4(v51, v52, v53, v54, v55, v56, v57, v58, (char)v270);
    sub_1AE772828();
LABEL_30:
    sub_1AE7729C0();
    if (v24)
    {
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_300:
  __break(1u);
LABEL_301:
  __break(1u);
LABEL_302:
  __break(1u);
LABEL_303:
  __break(1u);
LABEL_304:
  __break(1u);
LABEL_305:
  __break(1u);
LABEL_306:
  __break(1u);
LABEL_307:
  __break(1u);
LABEL_308:
  __break(1u);
LABEL_309:
  __break(1u);
LABEL_310:
  __break(1u);
LABEL_311:
  __break(1u);
LABEL_312:
  __break(1u);
LABEL_313:
  __break(1u);
LABEL_314:
  __break(1u);
LABEL_315:
  __break(1u);
LABEL_316:
  __break(1u);
}

uint64_t sub_1AE771784()
{
  sub_1AE769AD0();
  swift_bridgeObjectRelease();
  sub_1AE4F665C();
  sub_1AE4F9038();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for K2TEventTextualizer()
{
  return objc_opt_self();
}

void sub_1AE7717F0(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  char v7;

  v3 = *a1;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  if (v6 && _swift_stdlib_strtod_clocale())
    sub_1AE503324();
  else
    v7 = 0;
  *a2 = v7;
}

void sub_1AE771850(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  char v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  char *v115;
  __int16 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int16 v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v3 = a1[1];
  v4 = sub_1AE926D0C();
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_1AE771FD4(0, v3, 1, a1);
      return;
    }
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  v5 = v4;
  sub_1AE519660(v3 / 2);
  v106 = v6;
  v115 = v7;
  v112 = v3;
  v104 = a1;
  if (v3 <= 0)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    v45 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_110:
    if (v45 < 2)
    {
LABEL_125:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(_QWORD *)(v106 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
      return;
    }
    v95 = *v104;
    while (1)
    {
      v96 = v45 - 2;
      if (v45 < 2)
        break;
      if (!v95)
        goto LABEL_157;
      v97 = *(_QWORD *)(v10 + 32 + 16 * v96);
      v98 = *(_QWORD *)(v10 + 32 + 16 * (v45 - 1) + 8);
      sub_1AE77210C((char *)(v95 + 104 * v97), (char *)(v95 + 104 * *(_QWORD *)(v10 + 32 + 16 * (v45 - 1))), v95 + 104 * v98, v115);
      if (v1)
        goto LABEL_122;
      if (v98 < v97)
        goto LABEL_143;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AE8893F4();
        v10 = v101;
      }
      if (v96 >= *(_QWORD *)(v10 + 16))
        goto LABEL_144;
      v99 = (_QWORD *)(v10 + 32 + 16 * v96);
      *v99 = v97;
      v99[1] = v98;
      v100 = *(_QWORD *)(v10 + 16);
      if (v45 > v100)
        goto LABEL_145;
      memmove((void *)(v10 + 32 + 16 * (v45 - 1)), (const void *)(v10 + 32 + 16 * v45), 16 * (v100 - v45));
      *(_QWORD *)(v10 + 16) = v100 - 1;
      v45 = v100 - 1;
      v3 = v112;
      if (v100 <= 2)
        goto LABEL_125;
    }
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
  v105 = v5;
  v8 = 0;
  v9 = *a1;
  v102 = *a1 - 104;
  v103 = *a1 + 8;
  v10 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v11 = v8 + 1;
    v111 = v8;
    if (v8 + 1 >= v3)
      goto LABEL_36;
    v12 = v8 + 1;
    v13 = (uint64_t *)(v9 + 104 * v11);
    v14 = *v13;
    v15 = v13[1];
    v16 = (_QWORD *)(v9 + 104 * v8);
    if (v14 == *v16 && v15 == v16[1])
    {
      v19 = v8 + 2;
      if (v8 + 2 >= v3)
        goto LABEL_35;
      v18 = 0;
    }
    else
    {
      v18 = sub_1AE926D60();
      v19 = v8 + 2;
      if (v8 + 2 >= v3)
        goto LABEL_24;
    }
    v20 = (_QWORD *)(v103 + 104 * v19);
    v21 = v12;
    do
    {
      v22 = (_QWORD *)(v9 + 104 * v21);
      if (*(v20 - 1) == *v22 && *v20 == v22[1])
      {
        if ((v18 & 1) == 0)
          goto LABEL_21;
        v8 = v111;
        v3 = v112;
LABEL_27:
        if (v19 >= v8)
        {
          if (v8 < v19)
          {
            v125 = v9;
            v25 = v8;
            v26 = 104 * v19;
            v27 = v19;
            v28 = v25;
            v29 = 104 * v25;
            do
            {
              if (v28 != --v27)
              {
                if (!v125)
                  goto LABEL_156;
                v118 = *(_OWORD *)(v125 + v29);
                v30 = v125 + v26;
                v31 = *(_QWORD *)(v125 + v29 + 16);
                v32 = *(_QWORD *)(v125 + v29 + 24);
                v116 = *(_WORD *)(v125 + v29 + 32);
                v122 = *(_QWORD *)(v125 + v29 + 88);
                v120 = *(_WORD *)(v125 + v29 + 96);
                v113 = *(_OWORD *)(v125 + v29 + 40);
                v107 = *(_OWORD *)(v125 + v29 + 72);
                v109 = *(_OWORD *)(v125 + v29 + 56);
                memmove((void *)(v125 + v29), (const void *)(v125 + v26 - 104), 0x68uLL);
                *(_OWORD *)(v30 - 104) = v118;
                *(_QWORD *)(v30 - 88) = v31;
                *(_QWORD *)(v30 - 80) = v32;
                *(_WORD *)(v30 - 72) = v116;
                *(_OWORD *)(v30 - 64) = v113;
                *(_OWORD *)(v30 - 48) = v109;
                *(_OWORD *)(v30 - 32) = v107;
                *(_QWORD *)(v30 - 16) = v122;
                *(_WORD *)(v30 - 8) = v120;
              }
              ++v28;
              v26 -= 104;
              v29 += 104;
            }
            while (v28 < v27);
            v11 = v19;
            v8 = v111;
            v3 = v112;
            v9 = v125;
            goto LABEL_36;
          }
LABEL_35:
          v11 = v19;
          goto LABEL_36;
        }
        goto LABEL_152;
      }
      if (((v18 ^ sub_1AE926D60()) & 1) != 0)
        goto LABEL_23;
LABEL_21:
      v20 += 13;
      v24 = v19 + 1;
      v21 = v19;
      v19 = v24;
    }
    while (v24 < v112);
    v19 = v24;
LABEL_23:
    v8 = v111;
    v3 = v112;
LABEL_24:
    v11 = v19;
    if ((v18 & 1) != 0)
      goto LABEL_27;
LABEL_36:
    v33 = v11;
    if (v11 >= v3)
      goto LABEL_56;
    v34 = v11 - v8;
    if (__OFSUB__(v33, v8))
      goto LABEL_147;
    if (v34 >= v105)
      goto LABEL_56;
    if (__OFADD__(v8, v105))
      goto LABEL_150;
    if (v8 + v105 >= v3)
      v35 = v3;
    else
      v35 = v8 + v105;
    if (v35 < v8)
      goto LABEL_151;
    if (v33 != v35)
    {
      v126 = v9;
      v108 = v10;
      v36 = v102 + 104 * v33;
      v110 = v35;
      do
      {
        v114 = v36;
        do
        {
          v37 = *(_QWORD *)(v36 + 104) == *(_QWORD *)v36 && *(_QWORD *)(v36 + 112) == *(_QWORD *)(v36 + 8);
          if (v37 || (sub_1AE926D60() & 1) == 0)
            break;
          if (!v126)
            goto LABEL_154;
          v38 = *(_QWORD *)(v36 + 120);
          v39 = *(_QWORD *)(v36 + 128);
          v40 = *(_WORD *)(v36 + 136);
          v41 = *(_QWORD *)(v36 + 192);
          v42 = *(_WORD *)(v36 + 200);
          v121 = *(_OWORD *)(v36 + 144);
          v123 = *(_OWORD *)(v36 + 104);
          v117 = *(_OWORD *)(v36 + 176);
          v119 = *(_OWORD *)(v36 + 160);
          memcpy((void *)(v36 + 104), (const void *)v36, 0x68uLL);
          *(_OWORD *)v36 = v123;
          *(_QWORD *)(v36 + 16) = v38;
          *(_QWORD *)(v36 + 24) = v39;
          *(_WORD *)(v36 + 32) = v40;
          *(_OWORD *)(v36 + 40) = v121;
          *(_OWORD *)(v36 + 56) = v119;
          *(_OWORD *)(v36 + 72) = v117;
          *(_QWORD *)(v36 + 88) = v41;
          *(_WORD *)(v36 + 96) = v42;
          v36 -= 104;
          ++v8;
        }
        while (v33 != v8);
        ++v33;
        v36 = v114 + 104;
        v8 = v111;
      }
      while (v33 != v110);
      v33 = v110;
      v10 = v108;
      v9 = v126;
    }
LABEL_56:
    if (v33 < v8)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1AE889310(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
      v10 = v93;
    }
    v44 = *(_QWORD *)(v10 + 16);
    v43 = *(_QWORD *)(v10 + 24);
    v45 = v44 + 1;
    v124 = v33;
    if (v44 >= v43 >> 1)
    {
      sub_1AE889310(v43 > 1, v44 + 1, 1, (char *)v10);
      v10 = v94;
    }
    *(_QWORD *)(v10 + 16) = v45;
    v46 = v10 + 32;
    v47 = (uint64_t *)(v10 + 32 + 16 * v44);
    *v47 = v8;
    v47[1] = v124;
    if (v44)
      break;
    v45 = 1;
LABEL_104:
    v3 = v112;
    v8 = v124;
    if (v124 >= v112)
      goto LABEL_110;
  }
  while (1)
  {
    v48 = v45 - 1;
    if (v45 >= 4)
    {
      v53 = v46 + 16 * v45;
      v54 = *(_QWORD *)(v53 - 64);
      v55 = *(_QWORD *)(v53 - 56);
      v59 = __OFSUB__(v55, v54);
      v56 = v55 - v54;
      if (v59)
        goto LABEL_131;
      v58 = *(_QWORD *)(v53 - 48);
      v57 = *(_QWORD *)(v53 - 40);
      v59 = __OFSUB__(v57, v58);
      v51 = v57 - v58;
      v52 = v59;
      if (v59)
        goto LABEL_132;
      v60 = v45 - 2;
      v61 = (uint64_t *)(v46 + 16 * (v45 - 2));
      v63 = *v61;
      v62 = v61[1];
      v59 = __OFSUB__(v62, v63);
      v64 = v62 - v63;
      if (v59)
        goto LABEL_133;
      v59 = __OFADD__(v51, v64);
      v65 = v51 + v64;
      if (v59)
        goto LABEL_135;
      if (v65 >= v56)
      {
        v83 = (uint64_t *)(v46 + 16 * v48);
        v85 = *v83;
        v84 = v83[1];
        v59 = __OFSUB__(v84, v85);
        v86 = v84 - v85;
        if (v59)
          goto LABEL_141;
        v76 = v51 < v86;
        goto LABEL_93;
      }
    }
    else
    {
      if (v45 != 3)
      {
        v77 = *(_QWORD *)(v10 + 32);
        v78 = *(_QWORD *)(v10 + 40);
        v59 = __OFSUB__(v78, v77);
        v70 = v78 - v77;
        v71 = v59;
        goto LABEL_87;
      }
      v50 = *(_QWORD *)(v10 + 32);
      v49 = *(_QWORD *)(v10 + 40);
      v59 = __OFSUB__(v49, v50);
      v51 = v49 - v50;
      v52 = v59;
    }
    if ((v52 & 1) != 0)
      goto LABEL_134;
    v60 = v45 - 2;
    v66 = (uint64_t *)(v46 + 16 * (v45 - 2));
    v68 = *v66;
    v67 = v66[1];
    v69 = __OFSUB__(v67, v68);
    v70 = v67 - v68;
    v71 = v69;
    if (v69)
      goto LABEL_136;
    v72 = (uint64_t *)(v46 + 16 * v48);
    v74 = *v72;
    v73 = v72[1];
    v59 = __OFSUB__(v73, v74);
    v75 = v73 - v74;
    if (v59)
      goto LABEL_138;
    if (__OFADD__(v70, v75))
      goto LABEL_140;
    if (v70 + v75 >= v51)
    {
      v76 = v51 < v75;
LABEL_93:
      if (v76)
        v48 = v60;
      goto LABEL_95;
    }
LABEL_87:
    if ((v71 & 1) != 0)
      goto LABEL_137;
    v79 = (uint64_t *)(v46 + 16 * v48);
    v81 = *v79;
    v80 = v79[1];
    v59 = __OFSUB__(v80, v81);
    v82 = v80 - v81;
    if (v59)
      goto LABEL_139;
    if (v82 < v70)
      goto LABEL_104;
LABEL_95:
    v87 = v48 - 1;
    if (v48 - 1 >= v45)
    {
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
      goto LABEL_142;
    }
    if (!v9)
      goto LABEL_155;
    v88 = (uint64_t *)(v46 + 16 * v87);
    v89 = *v88;
    v90 = (_QWORD *)(v46 + 16 * v48);
    v91 = v90[1];
    sub_1AE77210C((char *)(v9 + 104 * *v88), (char *)(v9 + 104 * *v90), v9 + 104 * v91, v115);
    if (v1)
      break;
    if (v91 < v89)
      goto LABEL_128;
    if (v48 > *(_QWORD *)(v10 + 16))
      goto LABEL_129;
    *v88 = v89;
    *(_QWORD *)(v46 + 16 * v87 + 8) = v91;
    v92 = *(_QWORD *)(v10 + 16);
    if (v48 >= v92)
      goto LABEL_130;
    v45 = v92 - 1;
    memmove((void *)(v46 + 16 * v48), v90 + 2, 16 * (v92 - 1 - v48));
    *(_QWORD *)(v10 + 16) = v92 - 1;
    if (v92 <= 2)
      goto LABEL_104;
  }
LABEL_122:
  swift_bridgeObjectRelease();
  if (v112 < -1)
    goto LABEL_149;
  *(_QWORD *)(v106 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_1AE771FD4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v14 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v20 = *a4;
    v5 = *a4 + 104 * a3 - 104;
    while (2)
    {
      v6 = v14;
      v15 = v5;
      do
      {
        result = *(_QWORD *)(v5 + 104);
        if (result == *(_QWORD *)v5 && *(_QWORD *)(v5 + 112) == *(_QWORD *)(v5 + 8))
          break;
        result = sub_1AE926D60();
        if ((result & 1) == 0)
          break;
        if (!v20)
        {
          __break(1u);
          return result;
        }
        v8 = *(_QWORD *)(v5 + 120);
        v9 = *(_QWORD *)(v5 + 128);
        v10 = *(_WORD *)(v5 + 136);
        v11 = *(_QWORD *)(v5 + 192);
        v12 = *(_WORD *)(v5 + 200);
        v18 = *(_OWORD *)(v5 + 144);
        v19 = *(_OWORD *)(v5 + 104);
        v16 = *(_OWORD *)(v5 + 176);
        v17 = *(_OWORD *)(v5 + 160);
        result = (uint64_t)memcpy((void *)(v5 + 104), (const void *)v5, 0x68uLL);
        *(_OWORD *)v5 = v19;
        *(_QWORD *)(v5 + 16) = v8;
        *(_QWORD *)(v5 + 24) = v9;
        *(_WORD *)(v5 + 32) = v10;
        *(_OWORD *)(v5 + 40) = v18;
        *(_OWORD *)(v5 + 56) = v17;
        *(_OWORD *)(v5 + 72) = v16;
        *(_QWORD *)(v5 + 88) = v11;
        *(_WORD *)(v5 + 96) = v12;
        v5 -= 104;
        ++v6;
      }
      while (v4 != v6);
      ++v4;
      v5 = v15 + 104;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_1AE77210C(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  char *v14;
  char *v16;
  char *v17;
  char *v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 104;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 104;
  if (v9 >= v11)
  {
    sub_1AE51FBC4(a2, (uint64_t)(a3 - (_QWORD)a2) / 104, a4);
    v12 = (unint64_t)&v4[104 * v11];
    if (v7 >= v6 || v10 < 104)
      goto LABEL_43;
    v16 = (char *)(a3 - 104);
    while (1)
    {
      v17 = v16 + 104;
      v18 = (char *)(v12 - 104);
      v19 = *(_QWORD *)(v12 - 104) == *((_QWORD *)v6 - 13) && *(_QWORD *)(v12 - 96) == *((_QWORD *)v6 - 12);
      if (v19 || (sub_1AE926D60() & 1) == 0)
      {
        v21 = v17 != (char *)v12 || (unint64_t)v16 >= v12;
        v12 -= 104;
        if (!v21)
          goto LABEL_39;
      }
      else
      {
        v20 = v17 != v6 || v16 >= v6;
        v18 = v6 - 104;
        v6 -= 104;
        if (!v20)
          goto LABEL_39;
      }
      memmove(v16, v18, 0x68uLL);
LABEL_39:
      v16 -= 104;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_43;
    }
  }
  sub_1AE51FBC4(a1, (a2 - a1) / 104, a4);
  v12 = (unint64_t)&v4[104 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 104)
  {
    while (1)
    {
      v13 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
      if (!v13 && (sub_1AE926D60() & 1) != 0)
        break;
      v14 = v4;
      v13 = v7 == v4;
      v4 += 104;
      if (!v13)
        goto LABEL_13;
LABEL_14:
      v7 += 104;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v14 = v6;
    v13 = v7 == v6;
    v6 += 104;
    if (v13)
      goto LABEL_14;
LABEL_13:
    memmove(v7, v14, 0x68uLL);
    goto LABEL_14;
  }
LABEL_19:
  v6 = v7;
LABEL_43:
  sub_1AE51FBC4(v4, (uint64_t)(v12 - (_QWORD)v4) / 104, v6);
  return 1;
}

unint64_t sub_1AE7722CC()
{
  unint64_t result;

  result = qword_1EEDA28C0;
  if (!qword_1EEDA28C0)
  {
    result = MEMORY[0x1AF454B70](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EEDA28C0);
  }
  return result;
}

uint64_t sub_1AE772308(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

void sub_1AE77235C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  sub_1AE501548(a3);
  v3 = sub_1AE4F7714();
  v4(v3);
  sub_1AE4F6664();
}

_QWORD *sub_1AE772398@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1AE7723D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AE59CA28(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(unsigned __int8 *)(v0 + 112), *(_BYTE *)(v0 + 113));
  return swift_deallocObject();
}

uint64_t sub_1AE772428(_QWORD *a1)
{
  uint64_t v1;

  return sub_1AE76C070(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24)) & 1;
}

BOOL sub_1AE772444(_QWORD *a1)
{
  uint64_t v1;

  return sub_1AE76BFE4(a1, *(_QWORD **)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t sub_1AE772460(uint64_t a1)
{
  sub_1AE59CA28(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(_BYTE *)(a1 + 57));
  return a1;
}

void sub_1AE7724A8()
{
  sub_1AE52161C();
}

uint64_t sub_1AE7724B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 384) = v10;
  *(_QWORD *)(v14 - 376) = v11;
  *(_QWORD *)(v14 - 368) = v13;
  *(_QWORD *)(v14 - 360) = v12;
  *(_DWORD *)(v14 - 352) = v9;
  return sub_1AE59CC8C(a1, a2, a3, v10, v11, v13, v12, v9, a9);
}

uint64_t sub_1AE7724F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  *(_QWORD *)(v2 - 400) = v1;
  v3 = a1 + v1;
  v5 = *(_QWORD *)(a1 + v1 + 32);
  result = *(_QWORD *)(a1 + v1 + 40);
  *(_QWORD *)(v2 - 344) = v5;
  *(_QWORD *)(v2 - 336) = result;
  *(_QWORD *)(v2 - 432) = *(_QWORD *)(v3 + 48);
  *(_DWORD *)(v2 - 436) = *(unsigned __int16 *)(v3 + 64);
  return result;
}

uint64_t sub_1AE772530()
{
  return sub_1AE925F74();
}

void sub_1AE77253C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_1AE772550()
{
  sub_1AE519E10();
}

uint64_t sub_1AE772568@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_OWORD *)(v1 - 320) = *(_OWORD *)(a1 + 72);
  *(_DWORD *)(v1 - 304) = *(unsigned __int8 *)(a1 + 128);
  return swift_bridgeObjectRetain();
}

BOOL sub_1AE772594(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1AE7725A4()
{
  return swift_slowAlloc();
}

uint64_t sub_1AE7725B4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  *(_DWORD *)(v3 - 420) = v0;
  *(_QWORD *)(v3 - 416) = v2;
  result = v2;
  *(_QWORD *)(v3 - 408) = v1;
  return result;
}

void sub_1AE7725E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;

  v1 = *(_QWORD *)(v0 - 224);
  v2 = *(_QWORD *)(v0 - 216);
  v3 = *(_QWORD *)(v0 - 208);
  v4 = *(_WORD *)(v0 - 200);
  *(_QWORD *)(v0 - 272) = *(_QWORD *)(v0 - 232);
  *(_QWORD *)(v0 - 264) = v1;
  *(_QWORD *)(v0 - 256) = v2;
  *(_QWORD *)(v0 - 248) = v3;
  *(_WORD *)(v0 - 240) = v4;
}

id sub_1AE772614(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  return objc_msgSend(v1, (SEL)(v2 + 328), a1);
}

uint64_t sub_1AE772628()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE77263C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 264) = a1;
  return sub_1AE92676C();
}

void sub_1AE77265C()
{
  sub_1AE521648();
}

void sub_1AE772664()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
}

uint64_t sub_1AE772688()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1AE59CC40(v0, v1, 0);
}

uint64_t sub_1AE772698()
{
  return swift_allocObject();
}

void sub_1AE7726A4()
{
  sub_1AE51B54C();
}

void sub_1AE7726B0()
{
  sub_1AE519D54();
}

uint64_t sub_1AE7726C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;

  return sub_1AE59CA28(*(_QWORD *)(v9 - 224), *(_QWORD *)(v9 - 216), *(_QWORD *)(v9 - 208), *(_QWORD *)(v9 - 200), *(_QWORD *)(v9 - 192), *(_QWORD *)(v9 - 184), *(_QWORD *)(v9 - 176), *(unsigned int *)(v9 - 168), a9);
}

uint64_t sub_1AE772700()
{
  return swift_retain_n();
}

void sub_1AE772718()
{
  sub_1AE76B528();
}

uint64_t sub_1AE772730(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 - 256) = result;
  *(_QWORD *)(v3 - 432) = *(_QWORD *)(v1 + 48);
  *(_DWORD *)(v3 - 436) = *(unsigned __int16 *)(v1 + 64);
  return result;
}

uint64_t sub_1AE772750()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 - 488) + 120);
}

void sub_1AE772764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;

  v1 = *(_QWORD *)(v0 - 144);
  v2 = *(_QWORD *)(v0 - 136);
  v3 = *(_QWORD *)(v0 - 128);
  v4 = *(_WORD *)(v0 - 120);
  *(_QWORD *)(v0 - 192) = *(_QWORD *)(v0 - 152);
  *(_QWORD *)(v0 - 184) = v1;
  *(_QWORD *)(v0 - 176) = v2;
  *(_QWORD *)(v0 - 168) = v3;
  *(_WORD *)(v0 - 160) = v4;
}

void *sub_1AE772784(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x62uLL);
}

uint64_t sub_1AE7727A8()
{
  return sub_1AE925EA8();
}

uint64_t sub_1AE7727B4()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE7727C0()
{
  uint64_t v0;

  return sub_1AE73348C(v0 - 192);
}

uint64_t sub_1AE7727C8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  return sub_1AE59CC40(*(_QWORD *)(v2 - 312), v0, v1);
}

uint64_t sub_1AE7727F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

void sub_1AE772804(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(a1 + 64) = *(_DWORD *)(v1 - 256);
  v5 = *(_QWORD *)(v4 - 304);
  *(_QWORD *)(a1 + 72) = v3;
  *(_QWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 88) = v2;
}

uint64_t sub_1AE772820@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE772834(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  *(_QWORD *)(v2 - 344) = v1;
  v3 = a1 + v1;
  v5 = *(_QWORD *)(a1 + v1 + 32);
  result = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v2 - 352) = v5;
  return result;
}

uint64_t sub_1AE772850()
{
  uint64_t v0;

  return sub_1AE73348C(v0 - 232);
}

uint64_t sub_1AE772858()
{
  uint64_t v0;

  return sub_1AE73352C(v0 - 232);
}

uint64_t sub_1AE772860@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 328) = v1 + a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE772874()
{
  return 0;
}

uint64_t sub_1AE772880()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  return sub_1AE59CC40(v1, *(_QWORD *)(v2 - 304), v0);
}

uint64_t sub_1AE772894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AE5281B4(a1, *(_QWORD *)(a2 - 256));
}

void sub_1AE7728A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 320) = v0;
  *(_QWORD *)(v3 - 304) = v2;
  *(_QWORD *)(v3 - 280) = v1;
}

void sub_1AE7728C8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 304) = *v0;
}

uint64_t sub_1AE7728E0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_1AE7728F8(uint64_t a1)
{
  uint64_t v1;

  return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(a1, 0, 1, v1);
}

uint64_t sub_1AE772920()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE772940()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE772960()
{
  uint64_t v0;

  return sub_1AE66B86C(0, 1, v0);
}

void sub_1AE772970(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  sub_1AE52FB78(a1, v3, a3);
}

uint64_t sub_1AE772978()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v3, v0);
}

uint64_t sub_1AE772988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_DWORD *)(v10 - 360) = v9;
  return sub_1AE59CC8C(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_1AE772998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1AE7729A8()
{
  return swift_retain();
}

uint64_t sub_1AE7729B8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_1AE7729D0()
{
  return 0;
}

uint64_t sub_1AE7729E8()
{
  return swift_release();
}

void sub_1AE772A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  sub_1AE520ED4(a1, a2, v20 - 208, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t sub_1AE772A08(uint64_t a1)
{
  unint64_t v1;

  return sub_1AE50BDA0(a1, v1);
}

void sub_1AE772A44()
{
  void *v0;

}

uint64_t sub_1AE772A50()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE772A5C()
{
  uint64_t v0;

  return sub_1AE73352C(v0 - 192);
}

uint64_t sub_1AE772A84()
{
  return swift_bridgeObjectRetain();
}

BOOL sub_1AE772A8C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1AE772AAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE772AB8()
{
  return sub_1AE9244BC();
}

void sub_1AE772AC0()
{
  sub_1AE60FC44();
}

void sub_1AE772AC8(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_1AE52FBE8(*(_QWORD *)(a1 - 256), v1);
}

void sub_1AE772AD4(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_1AE52FBE8(*(_QWORD *)(a1 - 256), v1);
}

void sub_1AE772AE0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_1AE77235C(*(_QWORD *)(a2 - 256), a1, v2);
}

uint64_t sub_1AE772AEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

void sub_1AE772AF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1AE52FBE8(v2, a2);
}

uint64_t sub_1AE772B00()
{
  uint64_t v0;

  return sub_1AE50BDA0(*(_QWORD *)(v0 - 96), *(_QWORD *)(v0 - 168));
}

uint64_t sub_1AE772B18()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_1AE772B24(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(a1 + v1 + 40);
}

uint64_t sub_1AE772B30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_1AE772B38()
{
  return sub_1AE925F8C();
}

void sub_1AE772B40(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1AE52FBE8(v2, a2);
}

uint64_t sub_1AE772B48(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v3, v1);
}

uint64_t sub_1AE772B60()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE772B74()
{
  return sub_1AE924978();
}

void sub_1AE772B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *(_QWORD *)(v0 + 16) = v2;
  v7 = (_QWORD *)(v0 + (v3 << 6));
  v7[4] = v6;
  v7[5] = v1;
  v7[6] = v4;
  v7[7] = v5;
}

uint64_t sub_1AE772B94(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 296) = a1;
  return swift_bridgeObjectRetain();
}

void sub_1AE772BB4()
{
  uint64_t v0;

}

void sub_1AE772BC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 8);
  sub_1AE5962D8();
  v2 = MEMORY[0x1E0DEE9D8];
  sub_1AE925C98();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = v1 + 32;
    swift_bridgeObjectRetain();
    v5 = 0;
    v20 = v1 + 32;
    v21 = v1;
    do
    {
      if (v5 >= *(_QWORD *)(v1 + 16))
      {
        __break(1u);
        JUMPOUT(0x1AE7734C4);
      }
      v6 = v4 + 104 * v5;
      v7 = *(unsigned __int8 *)(v6 + 97);
      if (v7 == 1)
      {
        v10 = *(_QWORD *)(v6 + 56);
        v11 = *(_QWORD *)(v10 + 16);
        if (v11)
        {
          swift_bridgeObjectRetain();
          v12 = (_BYTE *)(v10 + 88);
          do
          {
            if ((*v12 & 1) != 0)
            {
              v13 = *((_QWORD *)v12 - 2);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1AE519D1C();
                v2 = v15;
              }
              v14 = *(_QWORD *)(v2 + 16);
              if (v14 >= *(_QWORD *)(v2 + 24) >> 1)
              {
                sub_1AE519D1C();
                v2 = v16;
              }
              *(_QWORD *)(v2 + 16) = v14 + 1;
              *(_QWORD *)(v2 + 8 * v14 + 32) = v13;
            }
            v12 += 64;
            --v11;
          }
          while (v11);
          swift_bridgeObjectRelease();
        }
        v4 = v20;
        v1 = v21;
      }
      else if (v7 == 2)
      {
        v8 = *(_QWORD *)(v6 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1AE519D1C();
          v2 = v17;
        }
        v9 = *(_QWORD *)(v2 + 16);
        if (v9 >= *(_QWORD *)(v2 + 24) >> 1)
        {
          sub_1AE519D1C();
          v2 = v18;
        }
        *(_QWORD *)(v2 + 16) = v9 + 1;
        *(_QWORD *)(v2 + 8 * v9 + 32) = v8;
      }
      ++v5;
    }
    while (v5 != v3);
    swift_bridgeObjectRelease();
  }
  sub_1AE4F9858((_QWORD *)(v19 + 16), *(_QWORD *)(v19 + 40));
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for EntitySequence();
}

void sub_1AE7734E4(uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;

  v28 = a3;
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v10 = a1[4];
  v9 = a1[5];
  v11 = *((_BYTE *)a1 + 48);
  if ((a2 & 1) != 0)
  {
    v21 = *a1;
    v22 = v6;
    v23 = v7;
    v24 = v8;
    v25 = v10;
    v26 = v9;
    v27 = v11;
    sub_1AE772BC0((uint64_t)&v21);
    if (v4)
      return;
    v13 = v12;
  }
  else
  {
    sub_1AE5962D8();
    v13 = sub_1AE925C98();
  }
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v24 = v8;
  v25 = v10;
  v26 = v9;
  v27 = v11;
  v14 = (void *)v3[8];
  v15 = (void *)v3[9];
  v16 = (void *)v3[10];
  v20[0] = v3[7];
  v20[1] = v14;
  v20[2] = v15;
  v20[3] = v16;
  swift_retain();
  v17 = v14;
  v18 = v15;
  v19 = v16;
  sub_1AE77B380((uint64_t)&v21, v13, (uint64_t)v20, v28);

  swift_release();
  swift_bridgeObjectRelease();
}

void sub_1AE773604(uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *a1;
  sub_1AE4F9858((_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 40));
  v13 = v7;
  GraphObjectBareContextProtocol.entity(for:)();
  if (!v4)
  {
    v8 = v12;
    if (v12)
    {
      v9 = v11;
      sub_1AE7734E4(&v11, a2 & 1, a3);
      sub_1AE77393C(v9, v8);
    }
    else
    {
      sub_1AE773900();
      swift_allocError();
      *v10 = 0;
      swift_willThrow();
    }
  }
}

uint64_t sub_1AE773734(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7[3];
  uint64_t v8;
  uint64_t v9;

  v6 = *a1;
  sub_1AE773604(&v6, 0, v7);
  if (!v2)
  {
    v3 = v8;
    v4 = v9;
    sub_1AE4F9858(v7, v8);
    v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
    sub_1AE4FD32C(v1);
  }
  return v1;
}

uint64_t sub_1AE7737BC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1AE5003E4(a1, a2);
  if (!v3)
  {
    sub_1AE500EE0(v7, v8, v9, v10, v11, v12, v13, v14, v16, v17, v18, v19, v20);
    v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a2, v4, v5);
    sub_1AE4FD32C(v2);
  }
  return v2;
}

void sub_1AE77382C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1AE5003E4(a1, a2);
  if (!v2)
  {
    sub_1AE500EE0(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15, v16, v17, v18);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
    sub_1AE4FD32C(v13);
  }
}

uint64_t sub_1AE773890()
{
  uint64_t v0;
  void *v1;
  void *v2;

  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 16);
  v1 = *(void **)(v0 + 64);
  v2 = *(void **)(v0 + 72);

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for K2TInProcessService()
{
  return objc_opt_self();
}

unint64_t sub_1AE773900()
{
  unint64_t result;

  result = qword_1EEDA28D0;
  if (!qword_1EEDA28D0)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for K2TError, &type metadata for K2TError);
    atomic_store(result, (unint64_t *)&qword_1EEDA28D0);
  }
  return result;
}

uint64_t sub_1AE77393C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1AE773978()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EED99548;
  if (!qword_1EED99548)
  {
    v1 = sub_1AE523CF0(&qword_1EED99540);
    result = MEMORY[0x1AF454B70](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EED99548);
  }
  return result;
}

uint64_t sub_1AE7739BC(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x1AF454C78);
  return result;
}

void sub_1AE7739F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a8 & 0xFF00) != 0xFE00)
    sub_1AE6A1928(a2, a3, a4, a5, a6, a7, a8);
}

id sub_1AE773A24(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (BYTE1(a7) != 255)
    return sub_1AE773A3C(result, a2, a3, a4, a5, a6, a7, BYTE1(a7) & 1);
  return result;
}

id sub_1AE773A3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if ((a8 & 1) != 0)
    return a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return (id)swift_bridgeObjectRetain();
}

uint64_t sub_1AE773A78(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  v8 = sub_1AE52F6A8((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v8, a1, a4);
  v9 = swift_allocObject();
  sub_1AE50AF58(&v12, v9 + 16);
  v10 = a2[1];
  *(_OWORD *)(v9 + 56) = *a2;
  *(_OWORD *)(v9 + 72) = v10;
  return v9;
}

uint64_t sub_1AE773B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  _QWORD v32[2];
  __int128 v33;
  _QWORD *v34;
  char v35;
  uint64_t v36[3];
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v39[3];
  uint64_t v40;
  uint64_t v41;

  v40 = a3;
  v41 = a4;
  v6 = sub_1AE52F6A8(v39);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v6, a1, a3);
  v7 = sub_1AE4F9858(v39, v40);
  MEMORY[0x1E0C80A78](v7);
  (*(void (**)(char *))(v9 + 16))((char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1AE52F6A8(v36);
  sub_1AE926070();
  sub_1AE503924();
  sub_1AE926760();
  if ((v35 & 1) != 0)
  {
    v11 = MEMORY[0x1E0DEE9E0];
LABEL_17:
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v36);
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v39);
    return v11;
  }
  else
  {
    v12 = (uint64_t)v34;
    v11 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)&v10 = 136315138;
    v33 = v10;
    v32[1] = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      v32[0] = v11;
      while (1)
      {
        v34 = (_QWORD *)v12;
        v13 = sub_1AE773734((uint64_t *)&v34);
        v15 = v14;
        if (v14)
          break;
        sub_1AE503924();
        sub_1AE926760();
        v12 = (uint64_t)v34;
        if ((v35 & 1) != 0)
        {
          v11 = v32[0];
          goto LABEL_17;
        }
      }
      v16 = v13;
      v17 = v32[0];
      swift_isUniquelyReferenced_nonNull_native();
      v34 = (_QWORD *)v17;
      v18 = sub_1AE536D68();
      if (__OFADD__(*(_QWORD *)(v17 + 16), (v19 & 1) == 0))
        break;
      v20 = v18;
      v21 = v19;
      sub_1AE501548(&qword_1EEDA28D8);
      if ((sub_1AE926A54() & 1) != 0)
      {
        v22 = sub_1AE536D68();
        if ((v21 & 1) != (v23 & 1))
          goto LABEL_20;
        v20 = v22;
      }
      v24 = v34;
      if ((v21 & 1) != 0)
      {
        v25 = (uint64_t)v34;
        v26 = (uint64_t *)(v34[7] + 16 * v20);
        *v26 = v16;
        v26[1] = v15;
        swift_bridgeObjectRelease();
      }
      else
      {
        v34[(v20 >> 6) + 8] |= 1 << v20;
        *(_QWORD *)(v24[6] + 8 * v20) = v12;
        v27 = (uint64_t *)(v24[7] + 16 * v20);
        *v27 = v16;
        v27[1] = v15;
        v28 = v24[2];
        v29 = __OFADD__(v28, 1);
        v30 = v28 + 1;
        if (v29)
          goto LABEL_19;
        v25 = (uint64_t)v24;
        v24[2] = v30;
      }
      swift_bridgeObjectRelease();
      sub_1AE595318((uint64_t)v36, AssociatedTypeWitness);
      sub_1AE926760();
      v12 = (uint64_t)v34;
      v11 = v25;
      if ((v35 & 1) != 0)
        goto LABEL_17;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    result = sub_1AE926DE4();
    __break(1u);
  }
  return result;
}

void sub_1AE773F7C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1AE8894A8();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_1AE7778B4(v5);
  *a1 = v2;
}

uint64_t sub_1AE773FE4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, _OWORD *a6, void *a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_BYTE *)(a1 + 56);
  v16 = *a4;
  v17 = *((_QWORD *)a4 + 2);
  v18 = *((_QWORD *)a4 + 3);
  v19 = *((_WORD *)a4 + 16);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)a1;
  *(_QWORD *)(v7 + 128) = v10;
  *(_QWORD *)(v7 + 136) = v11;
  *(_QWORD *)(v7 + 144) = v12;
  *(_QWORD *)(v7 + 152) = v13;
  *(_QWORD *)(v7 + 160) = v14;
  *(_BYTE *)(v7 + 168) = v15;
  *(_QWORD *)(v7 + 176) = a2;
  *(_QWORD *)(v7 + 184) = a3;
  *(_OWORD *)(v7 + 192) = v16;
  *(_QWORD *)(v7 + 208) = v17;
  *(_QWORD *)(v7 + 216) = v18;
  *(_WORD *)(v7 + 224) = v19;
  *(_QWORD *)&v23 = v11;
  *((_QWORD *)&v23 + 1) = v12;
  v24 = v13;
  v25 = v14;
  v26 = v15;
  v20 = a6[1];
  v22[0] = *a6;
  v22[1] = v20;
  swift_bridgeObjectRetain();
  sub_1AE4F6730();
  return sub_1AE767D50(&v23, a5, v22, a7);
}

void sub_1AE77408C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  _QWORD *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  BOOL v69;
  BOOL v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  ValueMetadata *v88;
  _UNKNOWN **v89;
  _OWORD v90[5];

  sub_1AE4FC4D4();
  a19 = v21;
  a20 = v22;
  v23 = v20;
  v25 = v24;
  sub_1AE501548(&qword_1EEDA28B8);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v26);
  sub_1AE4F666C();
  v29 = v28 - v27;
  v30 = sub_1AE4FDF3C();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v31);
  sub_1AE4F9024();
  sub_1AE5085B4(v32);
  v33 = v20[16];
  v34 = *(_QWORD *)(v33 + 16);
  if (!v34)
  {
LABEL_58:
    sub_1AE4F8180();
    return;
  }
  v35 = v90;
  v80 = v33 + 32;
  v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v37 = 0;
  v79 = v36;
  v76 = v30;
  v77 = v33;
  v75 = v20;
  v74 = v25;
  v73 = v29;
  v78 = v34;
  while (1)
  {
    if (v37 >= *(_QWORD *)(v33 + 16))
    {
      __break(1u);
      goto LABEL_60;
    }
    v38 = (__int128 *)(v80 + (v37 << 6));
    v39 = *v38;
    v40 = v38[1];
    v41 = v38[2];
    *(_OWORD *)((char *)v35 + 41) = *(__int128 *)((char *)v38 + 41);
    v90[1] = v40;
    v90[2] = v41;
    v90[0] = v39;
    v81 = v37;
    if (*(_QWORD *)(v25 + 24))
      break;
    v42 = v23[16];
    v43 = *(_QWORD *)(v42 + 16);
    if (v43)
    {
      sub_1AE5071D4();
      sub_1AE5071D4();
      *(_QWORD *)&v84 = MEMORY[0x1E0DEE9D8];
      sub_1AE4FB75C();
      sub_1AE5215B4();
      v44 = v84;
      v35 = (_OWORD *)(v42 + 48);
      do
      {
        v45 = *((_QWORD *)v35 - 1);
        v83 = *((_QWORD *)v35 - 2);
        v46 = *((_QWORD *)v35 + 1);
        v82 = *((_WORD *)v35 + 8);
        v33 = *((_QWORD *)v35 + 3);
        v47 = *((_QWORD *)v35 + 4);
        v48 = *((_BYTE *)v35 + 40);
        sub_1AE4FB930();
        sub_1AE4F81B0();
        sub_1AE779DD0(v33);
        *(_QWORD *)&v84 = v44;
        v30 = *(_QWORD *)(v44 + 16);
        v49 = *(_QWORD *)(v44 + 24);
        if (v30 >= v49 >> 1)
        {
          sub_1AE506008(v49);
          sub_1AE5215B4();
          v44 = v84;
        }
        v88 = &type metadata for Subfact;
        v89 = &protocol witness table for Subfact;
        v50 = sub_1AE505788();
        *(_QWORD *)&v87 = v50;
        *(_QWORD *)(v50 + 16) = v83;
        *(_QWORD *)(v50 + 24) = v45;
        sub_1AE779D28();
        *(_QWORD *)(v51 + 32) = v52;
        *(_QWORD *)(v51 + 40) = v46;
        *(_WORD *)(v51 + 48) = v82;
        *(_QWORD *)(v51 + 56) = v33;
        *(_QWORD *)(v51 + 64) = v47;
        *(_BYTE *)(v51 + 72) = v48;
        *(_QWORD *)(v44 + 16) = v30 + 1;
        sub_1AE50AF58(&v87, v44 + 40 * v30 + 32);
        v35 += 4;
        --v43;
      }
      while (v43);
      sub_1AE5001F4();
      v23 = v75;
      v25 = v74;
      v29 = v73;
      sub_1AE779EDC();
    }
    else
    {
      sub_1AE5071D4();
      sub_1AE5071D4();
      v44 = MEMORY[0x1E0DEE9D8];
    }
    v53 = sub_1AE77824C((uint64_t)v90, v44);
    sub_1AE4F9038();
    sub_1AE779D20();
    v34 = v78;
    if ((v53 & 1) == 0)
      goto LABEL_15;
    sub_1AE779D20();
LABEL_38:
    v37 = v81 + 1;
    if (v81 + 1 == v34)
    {
      sub_1AE4F76D8();
      goto LABEL_58;
    }
  }
  sub_1AE5071D4();
LABEL_15:
  if (*(_QWORD *)(v25 + 24))
  {
    sub_1AE57C238(v25, (uint64_t)&v84);
  }
  else
  {
    v54 = *(_OWORD *)(v25 + 16);
    v84 = *(_OWORD *)v25;
    v85 = v54;
    v86 = *(_QWORD *)(v25 + 32);
  }
  if (*((_QWORD *)&v85 + 1))
  {
    sub_1AE50AF58(&v84, (uint64_t)&v87);
    sub_1AE4F9858(&v87, (uint64_t)v88);
    sub_1AE779EF4();
    MEMORY[0x1E0C80A78](v55);
    sub_1AE779ECC();
    *(_QWORD *)(v56 - 16) = v23;
    *(_QWORD *)(v56 - 8) = v35;
    sub_1AE779EBC();
    if ((sub_1AE779FDC() & 1) == 0)
    {
      sub_1AE779D20();
      sub_1AE779F6C();
LABEL_37:
      v35 = v90;
      goto LABEL_38;
    }
    sub_1AE779F6C();
    v35 = v90;
  }
  v57 = (uint64_t *)v23[22];
  v58 = v23[23];
  v88 = &type metadata for Subfact;
  v89 = &protocol witness table for Subfact;
  *(_QWORD *)&v87 = sub_1AE505788();
  sub_1AE779FB4(v87);
  *(_OWORD *)(v59 + 57) = *(_OWORD *)((char *)v35 + 41);
  v60 = *(_QWORD *)(v25 + 24) == 0;
  sub_1AE4F6730();
  sub_1AE7698D4((uint64_t)v57, v58, &v87, v60, 0, v29);
  sub_1AE4F81B8();
  sub_1AE779F6C();
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v29, 1, v30) == 1)
  {
    sub_1AE777874(v29);
    goto LABEL_38;
  }
  sub_1AE5066B8(v29, (uint64_t)&a12);
  v61 = *v57;
  v62 = v57[1];
  v63 = v79[2];
  if (!v63)
    goto LABEL_32;
  v64 = v79[4] == v61 && v79[5] == v62;
  if (v64 || (sub_1AE4FB6F0() & 1) != 0)
    goto LABEL_29;
  if (v63 == 1)
    goto LABEL_32;
  sub_1AE779E94((uint64_t)&a13);
  v69 = v64 && v68 == v62;
  if (v69 || (sub_1AE4FB6F0() & 1) != 0)
  {
LABEL_29:
    sub_1AE779DA8((uint64_t)&a12);
    goto LABEL_38;
  }
  if (v63 == 2)
  {
LABEL_32:
    sub_1AE4F6730();
    if ((sub_1AE779DEC() & 1) != 0)
    {
      v33 = v77;
      v65 = v79;
    }
    else
    {
      sub_1AE772874();
      sub_1AE519C48();
      v65 = v71;
      v33 = v77;
    }
    v66 = v65[2];
    if (v66 >= v65[3] >> 1)
    {
      sub_1AE509B04();
      v65 = v72;
    }
    v65[2] = v66 + 1;
    v79 = v65;
    v67 = &v65[2 * v66];
    v67[4] = v61;
    v67[5] = v62;
    sub_1AE779DA8((uint64_t)&a12);
    goto LABEL_37;
  }
  v35 = v79 + 9;
  v33 = 2;
  while (1)
  {
    v30 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    v70 = *((_QWORD *)v35 - 1) == v61 && *(_QWORD *)v35 == v62;
    if (v70 || (sub_1AE4FB6F0() & 1) != 0)
    {
      sub_1AE779EDC();
      goto LABEL_29;
    }
    ++v35;
    ++v33;
    v64 = v30 == v63;
    v30 = v76;
    if (v64)
      goto LABEL_32;
  }
LABEL_60:
  __break(1u);
}

void sub_1AE77460C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  __int16 v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  ValueMetadata *v97;
  _UNKNOWN **v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[25];
  uint64_t v103;
  uint64_t v104;

  sub_1AE4FC4D4();
  a19 = v22;
  a20 = v23;
  v24 = v20;
  v82 = v25;
  sub_1AE501548(&qword_1EEDA28B8);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v26);
  sub_1AE4F666C();
  v29 = (uint64_t *)(v28 - v27);
  v83 = sub_1AE4FDF3C();
  sub_1AE4F8160(*(_QWORD *)(v83 - 8));
  MEMORY[0x1E0C80A78](v30);
  sub_1AE4F686C();
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v31);
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v32);
  sub_1AE5094B0();
  sub_1AE5085B4(v33);
  *(_QWORD *)&v100 = *(_QWORD *)(v20 + 128);
  sub_1AE4FDFD0();
  sub_1AE779F04((uint64_t *)&v100);
  if (v21)
  {
LABEL_46:
    swift_release();
    __break(1u);
    return;
  }
  sub_1AE4F6648();
  v34 = v100;
  v35 = MEMORY[0x1E0DEE9D8];
  v89 = *(_QWORD *)(v100 + 16);
  if (v89)
  {
    v36 = 0;
    v88 = v100 + 32;
    v37 = MEMORY[0x1E0DEE9D8];
    v87 = v100;
    v85 = v20;
    v84 = v29;
    while (v36 < *(_QWORD *)(v34 + 16))
    {
      v38 = (__int128 *)(v88 + (v36 << 6));
      v39 = *v38;
      v40 = v38[1];
      v41 = v38[2];
      *(_OWORD *)&v102[9] = *(__int128 *)((char *)v38 + 41);
      v101 = v40;
      *(_OWORD *)v102 = v41;
      v100 = v39;
      v42 = *(uint64_t **)(v24 + 128);
      v43 = v42[2];
      if (v43)
      {
        v91 = v37;
        sub_1AE5071D4();
        sub_1AE5071D4();
        v99 = v35;
        sub_1AE4FB75C();
        sub_1AE5215B4();
        v44 = v99;
        v42 += 6;
        do
        {
          v45 = *(v42 - 1);
          v46 = v42[1];
          v94 = *v42;
          v95 = *(v42 - 2);
          v93 = *((_WORD *)v42 + 8);
          v47 = v42[3];
          v48 = v42[4];
          v49 = *((_BYTE *)v42 + 40);
          sub_1AE4F66C4();
          sub_1AE4F81B0();
          sub_1AE779E2C();
          v99 = v44;
          v51 = *(_QWORD *)(v44 + 16);
          v50 = *(_QWORD *)(v44 + 24);
          if (v51 >= v50 >> 1)
          {
            sub_1AE506008(v50);
            sub_1AE5215B4();
            v44 = v99;
          }
          v97 = &type metadata for Subfact;
          v98 = &protocol witness table for Subfact;
          v52 = sub_1AE505788();
          *(_QWORD *)&v96 = v52;
          *(_QWORD *)(v52 + 16) = v95;
          *(_QWORD *)(v52 + 24) = v45;
          *(_QWORD *)(v52 + 32) = v94;
          *(_QWORD *)(v52 + 40) = v46;
          *(_WORD *)(v52 + 48) = v93;
          *(_QWORD *)(v52 + 56) = v47;
          *(_QWORD *)(v52 + 64) = v48;
          *(_BYTE *)(v52 + 72) = v49;
          *(_QWORD *)(v44 + 16) = v51 + 1;
          sub_1AE50AF58(&v96, v44 + 40 * v51 + 32);
          v42 += 8;
          --v43;
        }
        while (v43);
        sub_1AE5001F4();
        v24 = v85;
        v37 = v91;
        v29 = v84;
        v35 = MEMORY[0x1E0DEE9D8];
        v34 = v87;
      }
      else
      {
        sub_1AE5071D4();
        sub_1AE5071D4();
        v44 = v35;
      }
      v53 = sub_1AE77824C((uint64_t)&v100, v44);
      sub_1AE4F9038();
      sub_1AE779D20();
      if ((v53 & 1) != 0)
      {
        sub_1AE779D20();
      }
      else
      {
        v97 = &type metadata for Subfact;
        v98 = &protocol witness table for Subfact;
        *(_QWORD *)&v96 = sub_1AE505788();
        sub_1AE779FB4(v96);
        *(_OWORD *)(v54 + 57) = *(_OWORD *)&v102[9];
        sub_1AE5071D4();
        sub_1AE7694F4(&v96, 1, v29);
        _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v96);
        sub_1AE779D5C((uint64_t)v29, 1, (uint64_t)&a10);
        if (v62)
        {
          sub_1AE779D20();
          sub_1AE777874((uint64_t)v29);
        }
        else
        {
          v92 = v36;
          v55 = *((_QWORD *)&v101 + 1);
          sub_1AE5066B8((uint64_t)v29, (uint64_t)&a13);
          v56 = v42[1];
          *(_QWORD *)&v96 = *v42;
          *((_QWORD *)&v96 + 1) = v56;
          sub_1AE4F6708();
          sub_1AE779D34();
          sub_1AE4F6730();
          sub_1AE925F74();
          sub_1AE779D20();
          sub_1AE4F81B8();
          sub_1AE509604();
          sub_1AE4F76D8();
          v57 = v96;
          *(_OWORD *)v42 = v96;
          v58 = *(_QWORD *)(v37 + 16);
          if (v58)
          {
            sub_1AE779C8C();
            v60 = (_QWORD *)(v37 + v59 + 8);
            v61 = v58;
            while (1)
            {
              v62 = *(v60 - 1) == (_QWORD)v57 && *v60 == *((_QWORD *)&v57 + 1);
              if (v62 || (sub_1AE4FB6F0() & 1) != 0)
                break;
              v60 = (_QWORD *)((char *)v60 + v55);
              if (!--v61)
                goto LABEL_25;
            }
            v34 = v87;
            v36 = v92;
          }
          else
          {
LABEL_25:
            sub_1AE779F74(v86, (uint64_t)&v104);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1AE772874();
              sub_1AE51B54C();
              v37 = v67;
            }
            v34 = v87;
            v64 = *(_QWORD *)(v37 + 16);
            v63 = *(_QWORD *)(v37 + 24);
            v36 = v92;
            if (v64 >= v63 >> 1)
            {
              sub_1AE506008(v63);
              sub_1AE51B54C();
              v37 = v68;
            }
            *(_QWORD *)(v37 + 16) = v64 + 1;
            sub_1AE69016C();
            sub_1AE779F3C(v37 + v65 + *(_QWORD *)(v66 + 72) * v64, (uint64_t)&v104);
          }
          sub_1AE779DA8((uint64_t)&a13);
        }
      }
      if (++v36 == v89)
      {
        swift_release();
        goto LABEL_35;
      }
    }
    __break(1u);
    goto LABEL_46;
  }
  swift_release();
  v37 = MEMORY[0x1E0DEE9D8];
LABEL_35:
  v69 = *(_QWORD *)(v37 + 16);
  if (v69)
  {
    *(_QWORD *)&v96 = v35;
    sub_1AE4FB930();
    sub_1AE779D04();
    sub_1AE69016C();
    v71 = v37 + v70;
    v73 = *(_QWORD *)(v72 + 72);
    do
    {
      sub_1AE779F20(v71);
      v75 = *v90;
      v74 = v90[1];
      sub_1AE4F66C4();
      sub_1AE779F18();
      v76 = v96;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AE614AD8();
        v76 = v96;
      }
      v78 = *(_QWORD *)(v76 + 16);
      v77 = *(_QWORD *)(v76 + 24);
      if (v78 >= v77 >> 1)
      {
        sub_1AE506008(v77);
        sub_1AE614AD8();
        v76 = v96;
      }
      *(_QWORD *)(v76 + 16) = v78 + 1;
      v79 = v76 + 16 * v78;
      *(_QWORD *)(v79 + 32) = v75;
      *(_QWORD *)(v79 + 40) = v74;
      v71 += v73;
      --v69;
    }
    while (v69);
    sub_1AE4F76D8();
    *(_QWORD *)&v96 = v76;
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE779FD4();
    v80 = sub_1AE779CEC();
    swift_release();
    *(_QWORD *)&v96 = 40;
    *((_QWORD *)&v96 + 1) = 0xE100000000000000;
    sub_1AE925E9C();
    sub_1AE925F74();
    sub_1AE4F81B8();
    sub_1AE779D34();
    sub_1AE779D14();
    sub_1AE4F665C();
    sub_1AE509604();
    sub_1AE779E5C(v96, *((uint64_t *)&v96 + 1), MEMORY[0x1E0DEE9D8], (uint64_t)&v103);
    v81 = 0;
  }
  else
  {
    sub_1AE4F66E8();
    v81 = 1;
    v80 = v82;
  }
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v80, v81, 1, v83);
  sub_1AE4F8180();
}

uint64_t sub_1AE774C28()
{
  swift_bridgeObjectRelease();
  sub_1AE4F665C();
  sub_1AE4F6648();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE774C78()
{
  uint64_t v0;

  v0 = sub_1AE769AD0();
  swift_bridgeObjectRelease();
  sub_1AE4F665C();
  sub_1AE4F9038();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AE4F9038();
  return v0;
}

uint64_t sub_1AE774CD4()
{
  sub_1AE774C78();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for K2TSubEntityTextualizer()
{
  return objc_opt_self();
}

uint64_t sub_1AE774D10()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 336))();
}

uint64_t sub_1AE774D38()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 344))();
}

uint64_t sub_1AE774D60()
{
  return sub_1AE776360(static EntityPredicate.relationshipLabel.getter);
}

void sub_1AE774D6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  _OWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _OWORD *v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  BOOL v83;
  uint64_t v84;
  BOOL v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99[2];
  _QWORD v100[3];
  ValueMetadata *v101;
  _UNKNOWN **v102;
  _BYTE v103[16];
  _BYTE v104[16];
  uint64_t v105;
  _QWORD v106[4];
  uint64_t v107;

  sub_1AE4FC4D4();
  v91 = v2;
  sub_1AE501548(&qword_1EEDA28B8);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v3);
  sub_1AE4F686C();
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v4);
  sub_1AE5094B0();
  v88 = v5;
  sub_1AE4FDF3C();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v6);
  sub_1AE4F686C();
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v7);
  sub_1AE5094B0();
  sub_1AE5085B4(v8);
  v95 = v0;
  v92 = v0[16];
  v9 = *(_QWORD *)(v92 + 16);
  if (!v9)
  {
    v23 = 0;
    goto LABEL_22;
  }
  sub_1AE4FDFD0();
  while (1)
  {
    if (!_Records_GDEntityPredicate_records)
      goto LABEL_161;
    sub_1AE772630();
    if (v11 == v12)
      break;
    if (*(uint64_t *)(v10 + 808) >= 3558)
      goto LABEL_152;
    if (!_Records_GDEntityPredicate_predicateIds)
      goto LABEL_162;
    v13 = *(_QWORD *)(v92 + 32);
    v14 = *(_QWORD *)(v92 + 40);
    v15 = *(_QWORD *)(v92 + 72);
    v9 = *(_QWORD *)(v92 + 80);
    v1 = *(unsigned __int8 *)(v92 + 88);
    sub_1AE4F67A4();
    sub_1AE4FB764();
    v16 = v15;
    v97 = v9;
    sub_1AE59CC30(v15, v9, v1);
    sub_1AE4F67A4();
    sub_1AE4FB764();
    v17 = sub_1AE925F8C();
    if (!_Records_GDEntityPredicate_labels)
      goto LABEL_166;
    v19 = v17;
    v20 = v18;
    sub_1AE925F8C();
    v21 = v13 == v19 && v14 == v20;
    if (v21)
    {
      sub_1AE4F6824();
      sub_1AE4F6710();
      sub_1AE4F67AC();
LABEL_19:
      sub_1AE4F6824();
      sub_1AE779F90(v16);
      sub_1AE4F6710();
      sub_1AE4F6728();
      sub_1AE59CC40(v16, v9, v1);
      if ((v1 & 1) != 0)
      {
        v23 = 0;
        v9 = 0;
      }
      else
      {
        v23 = sub_1AE925E9C();
        v9 = v24;
        sub_1AE59CC40(v16, v97, 0);
      }
LABEL_22:
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = v23;
      v25[3] = v9;
      v25[4] = v95;
      v89 = *(_QWORD *)(v95[16] + 16);
      if (!v89)
      {
        swift_retain();
        swift_release();
LABEL_144:
        sub_1AE4F8180();
        return;
      }
      v90 = v95[16];
      swift_retain();
      swift_bridgeObjectRetain();
      v26 = v90;
      v27 = 0;
LABEL_24:
      if (v27 >= *(_QWORD *)(v26 + 16))
      {
LABEL_146:
        __break(1u);
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
        __break(1u);
        break;
      }
      sub_1AE779CC4((uint64_t)&v107);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_158;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 100) >= 2674)
        goto LABEL_147;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 101) >= 3558)
        goto LABEL_148;
      v96 = v29;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_159;
      sub_1AE779CA4(v28);
      sub_1AE779FAC();
      v30 = sub_1AE50A604();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_160;
      v32 = v30;
      v33 = v31;
      v35 = v106[3];
      v34 = v107;
      sub_1AE779FA4();
      v36 = v35 == v32 && v34 == v33;
      v94 = v34;
      v93 = v35;
      if (v36)
      {
        sub_1AE4F665C();
        sub_1AE4F6648();
        sub_1AE779D80();
      }
      else
      {
        v37 = sub_1AE4FB6F0();
        sub_1AE4F665C();
        sub_1AE4F6648();
        sub_1AE779D80();
        if ((v37 & 1) == 0)
          goto LABEL_52;
      }
      v38 = v95[16];
      v39 = *(_QWORD *)(v38 + 16);
      if (v39)
      {
        sub_1AE4FDFD0();
        v40 = (char *)(v38 + 88);
        while (_Records_GDEntityPredicate_records)
        {
          sub_1AE772630();
          if (v11 == v12)
          {
            __break(1u);
LABEL_145:
            __break(1u);
            goto LABEL_146;
          }
          if (*(uint64_t *)(v41 + 784) >= 3558)
            goto LABEL_145;
          v98 = v39;
          if (!_Records_GDEntityPredicate_predicateIds)
            goto LABEL_155;
          v42 = *((_QWORD *)v40 - 7);
          v43 = *((_QWORD *)v40 - 6);
          v34 = *((_QWORD *)v40 - 4);
          v44 = *((_QWORD *)v40 - 2);
          v45 = *((_QWORD *)v40 - 1);
          v46 = *v40;
          sub_1AE4F81B0();
          sub_1AE4F6730();
          sub_1AE59CC30(v44, v45, v46);
          sub_1AE4F81B0();
          sub_1AE4F6730();
          v47 = sub_1AE779DDC();
          if (!_Records_GDEntityPredicate_labels)
            goto LABEL_156;
          v49 = v47;
          v50 = v48;
          sub_1AE507698();
          v1 = v51;
          if (v42 == v49 && v43 == v50)
          {
            sub_1AE4F6824();
            sub_1AE4F66E8();
            sub_1AE779DE4();
            sub_1AE779E0C();
LABEL_92:
            sub_1AE4F6824();
            sub_1AE779E7C();
            goto LABEL_107;
          }
          v53 = sub_1AE4FB6F0();
          sub_1AE4F6824();
          sub_1AE4F6824();
          sub_1AE4F66E8();
          sub_1AE4F6710();
          sub_1AE779E0C();
          if ((v53 & 1) != 0)
            goto LABEL_92;
          v40 += 64;
          v39 = v98 - 1;
          if (v98 == 1)
          {
            sub_1AE4F6824();
            goto LABEL_52;
          }
        }
        goto LABEL_154;
      }
LABEL_52:
      if (*(_QWORD *)(v91 + 24))
        sub_1AE57C238(v91, (uint64_t)v99);
      else
        sub_1AE779D3C(v91);
      sub_1AE779D28();
      if (v54)
      {
        sub_1AE50AF58(v99, (uint64_t)v100);
        sub_1AE4F9858(v100, (uint64_t)v101);
        sub_1AE779EF4();
        MEMORY[0x1E0C80A78](v55);
        sub_1AE779ECC();
        *(_QWORD *)(v56 - 16) = v95;
        *(_QWORD *)(v56 - 8) = v103;
        sub_1AE779EBC();
        if ((sub_1AE779FDC() & 1) != 0)
        {
          sub_1AE506A20();
          goto LABEL_58;
        }
        sub_1AE779E7C();
        sub_1AE506A20();
LABEL_107:
        v27 = v96 + 1;
        v26 = v90;
        if (v96 + 1 == v89)
        {
          swift_release();
          sub_1AE4F6648();
          goto LABEL_144;
        }
        goto LABEL_24;
      }
LABEL_58:
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_163;
      sub_1AE772630();
      if (v11 == v12)
        goto LABEL_149;
      if (*(uint64_t *)(v57 + 784) >= 3558)
        goto LABEL_150;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_164;
      sub_1AE779FAC();
      v58 = sub_1AE50A604();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_165;
      v60 = v58;
      v61 = v59;
      sub_1AE779FA4();
      if (v93 == v60 && v94 == v61)
      {
        swift_bridgeObjectRelease();
        sub_1AE4F6648();
        sub_1AE779D80();
      }
      else
      {
        v63 = sub_1AE4FB6F0();
        sub_1AE4F665C();
        sub_1AE4F6648();
        sub_1AE779D80();
        if ((v63 & 1) == 0)
        {
          v64 = v95[22];
          v65 = (_QWORD *)v95[23];
          v101 = &type metadata for Subfact;
          v102 = &protocol witness table for Subfact;
          v66 = (_OWORD *)sub_1AE505788();
          sub_1AE4F6C54(v66);
          sub_1AE779DBC(v64, v100, v87);
          sub_1AE4F665C();
          sub_1AE506A20();
          sub_1AE779D5C(v87, 1, (uint64_t)&v105);
          if (!v21)
          {
            sub_1AE5066B8(v87, (uint64_t)v103);
            sub_1AE779F58();
            if (!v87)
              goto LABEL_100;
            v78 = *(_QWORD **)(v77 + 32) == v95 && *(_QWORD *)(v77 + 40) == v1;
            if (!v78 && (sub_1AE4FB6F0() & 1) == 0)
            {
              if (v87 == 1)
                goto LABEL_100;
              sub_1AE779E94((uint64_t)v106);
              v85 = v21 && v84 == v1;
              if (!v85 && (sub_1AE4FB6F0() & 1) == 0)
              {
                if (v87 != 2)
                {
                  sub_1AE779E84();
                  while (!__OFADD__(v34, 1))
                  {
                    v86 = (_QWORD *)*(v65 - 1) == v95 && *v65 == v1;
                    if (v86 || (sub_1AE4FB6F0() & 1) != 0)
                      goto LABEL_105;
                    sub_1AE779E1C();
                    if (v21)
                      goto LABEL_100;
                  }
                  goto LABEL_157;
                }
LABEL_100:
                sub_1AE4FB930();
                if ((sub_1AE779DEC() & 1) == 0)
                  sub_1AE505E64();
                sub_1AE5060D8();
                if (v74)
                  sub_1AE509B04();
                else
                  v80 = v79;
                sub_1AE779DF4(v80);
              }
            }
LABEL_105:
            v76 = v103;
LABEL_106:
            sub_1AE779DA8((uint64_t)v76);
            goto LABEL_107;
          }
          v67 = v87;
LABEL_76:
          sub_1AE777874(v67);
          goto LABEL_107;
        }
      }
      v68 = v95[22];
      v69 = (_QWORD *)v95[23];
      v101 = &type metadata for Subfact;
      v102 = &protocol witness table for Subfact;
      v70 = (_OWORD *)sub_1AE505788();
      sub_1AE4F6C54(v70);
      swift_retain();
      sub_1AE7698D4(v68, (uint64_t)v69, v100, v34, sub_1AE778240, v88);
      swift_release();
      sub_1AE4F665C();
      sub_1AE506A20();
      sub_1AE779D5C(v88, 1, (uint64_t)&v105);
      if (v21)
      {
        v67 = v88;
        goto LABEL_76;
      }
      sub_1AE5066B8(v88, (uint64_t)v104);
      sub_1AE779F58();
      if (v68)
      {
        v72 = *(_QWORD **)(v71 + 32) == v95 && *(_QWORD *)(v71 + 40) == v1;
        if (!v72 && (sub_1AE4FB6F0() & 1) == 0)
        {
          if (v68 == 1)
            goto LABEL_85;
          sub_1AE779E94((uint64_t)v106);
          v82 = v21 && v81 == v1;
          if (!v82 && (sub_1AE4FB6F0() & 1) == 0)
          {
            if (v68 != 2)
            {
              sub_1AE779E84();
              while (!__OFADD__(v34, 1))
              {
                v83 = (_QWORD *)*(v69 - 1) == v95 && *v69 == v1;
                if (v83 || (sub_1AE4FB6F0() & 1) != 0)
                  goto LABEL_90;
                sub_1AE779E1C();
                if (v21)
                  goto LABEL_85;
              }
              goto LABEL_153;
            }
            goto LABEL_85;
          }
        }
      }
      else
      {
LABEL_85:
        sub_1AE4FB930();
        if ((sub_1AE779DEC() & 1) == 0)
          sub_1AE505E64();
        sub_1AE5060D8();
        if (v74)
          sub_1AE509B04();
        else
          v75 = v73;
        sub_1AE779DF4(v75);
      }
LABEL_90:
      v76 = v104;
      goto LABEL_106;
    }
    v22 = sub_1AE4FB6F0();
    sub_1AE4F6710();
    sub_1AE4F6728();
    sub_1AE4F67AC();
    sub_1AE4F81B8();
    if ((v22 & 1) != 0)
      goto LABEL_19;
    sub_1AE4F6710();
    sub_1AE4F6728();
    sub_1AE59CC40(v16, v9, v1);
    sub_1AE779F44();
    if (v21)
    {
      sub_1AE4F6824();
      v23 = 0;
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1AE775858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRetain();
    sub_1AE925F74();
    sub_1AE925F74();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1AE925F74();
    swift_bridgeObjectRetain();
    sub_1AE925F74();
    swift_bridgeObjectRelease();
  }
  sub_1AE925F74();
  sub_1AE925F74();
}

void sub_1AE775950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  ValueMetadata *v138;
  _UNKNOWN **v139;

  sub_1AE4FC4D4();
  a19 = v21;
  a20 = v22;
  v110 = v23;
  sub_1AE501548(&qword_1EEDA28B8);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v24);
  sub_1AE4F666C();
  v27 = v26 - v25;
  v115 = sub_1AE4FDF3C();
  sub_1AE4F8160(*(_QWORD *)(v115 - 8));
  MEMORY[0x1E0C80A78](v28);
  sub_1AE4F686C();
  v121 = v29;
  MEMORY[0x1E0C80A78](v30);
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v31);
  v33 = (uint64_t *)((char *)&v109 - v32);
  v127 = v20;
  v34 = *(_QWORD *)(v20 + 128);
  v35 = *(_QWORD *)(v34 + 16);
  v122 = v27;
  v116 = (char *)&v109 - v32;
  if (!v35)
    goto LABEL_19;
  v132 = 2674;
  v133 = 233;
  v131 = 3558;
  sub_1AE779FC8();
  v130 = v34;
  v36 = (char *)(v34 + 88);
  while (1)
  {
    if (v133 < 34)
    {
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      swift_release();
      __break(1u);
      return;
    }
    if (!_Records_GDEntityPredicate_records)
      goto LABEL_104;
    if (*((_QWORD *)_Records_GDEntityPredicate_records + 100) >= v132)
      goto LABEL_96;
    if (*((_QWORD *)_Records_GDEntityPredicate_records + 101) >= v131)
      goto LABEL_97;
    v134 = v35;
    if (!_Records_GDEntityPredicate_predicateIds)
      goto LABEL_105;
    v37 = *((_QWORD *)v36 - 7);
    v38 = *((_QWORD *)v36 - 6);
    v40 = *((_QWORD *)v36 - 2);
    v39 = *((_QWORD *)v36 - 1);
    v41 = *v36;
    sub_1AE4F6804();
    sub_1AE4F67A4();
    v34 = v40;
    v135 = v39;
    sub_1AE779DD0(v40);
    sub_1AE4F6804();
    sub_1AE4F67A4();
    v42 = sub_1AE925F8C();
    if (!_Records_GDEntityPredicate_labels)
      goto LABEL_106;
    v44 = v42;
    v45 = v43;
    sub_1AE925F8C();
    v33 = v46;
    v47 = v37 == v44 && v38 == v45;
    if (v47)
    {
      sub_1AE4F6824();
      sub_1AE4F6728();
      sub_1AE4F6710();
      sub_1AE68FF50();
      goto LABEL_18;
    }
    v48 = sub_1AE4FB6F0();
    sub_1AE4F6728();
    sub_1AE4F67AC();
    sub_1AE4F6710();
    sub_1AE4F66E8();
    if ((v48 & 1) != 0)
      break;
    sub_1AE4F6728();
    sub_1AE4F67AC();
    sub_1AE59CC40(v34, v135, v41);
    v36 += 64;
    v35 = v134 - 1;
    v33 = v116;
    if (v134 == 1)
    {
      sub_1AE4F6824();
      sub_1AE779FE4();
      goto LABEL_21;
    }
  }
  sub_1AE68FF50();
LABEL_18:
  v49 = v135;
  sub_1AE4F6824();
  sub_1AE779DD0(v34);
  sub_1AE4F6728();
  sub_1AE4F67AC();
  sub_1AE59CC40(v34, v49, v41);
  if ((v41 & 1) != 0)
  {
LABEL_19:
    sub_1AE779FE4();
  }
  else
  {
    v111 = sub_1AE925E9C();
    v112 = v50;
    sub_1AE59CC40(v34, v49, 0);
  }
LABEL_21:
  v136 = *(_QWORD *)(v127 + 128);
  sub_1AE4FDFD0();
  sub_1AE779F04(&v136);
  if (v34)
    goto LABEL_107;
  sub_1AE4F6648();
  v51 = v136;
  if (*(_QWORD *)(v136 + 16))
  {
    v52 = 0;
    v118 = v136 + 32;
    v119 = 233;
    v134 = 2674;
    v133 = 3558;
    v123 = MEMORY[0x1E0DEE9D8];
    v117 = v136;
    while (1)
    {
      if (v52 >= *(_QWORD *)(v51 + 16))
      {
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }
      if (v119 < 34)
        goto LABEL_92;
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_101;
      if (*((_QWORD *)_Records_GDEntityPredicate_records + 100) >= v134)
        goto LABEL_93;
      if (*((_QWORD *)_Records_GDEntityPredicate_records + 101) >= v133)
        goto LABEL_94;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_102;
      v53 = v33;
      v54 = (uint64_t *)(v118 + (v52 << 6));
      v55 = *v54;
      v56 = v54[1];
      v57 = v54[3];
      v126 = v54[2];
      v125 = *((unsigned __int16 *)v54 + 16);
      v59 = v54[5];
      v58 = v54[6];
      v60 = *((unsigned __int8 *)v54 + 56);
      sub_1AE4F81B0();
      sub_1AE4F6708();
      v129 = v59;
      v131 = v58;
      LODWORD(v130) = v60;
      sub_1AE59CC30(v59, v58, v60);
      sub_1AE4F81B0();
      v132 = v57;
      sub_1AE4F6708();
      v61 = sub_1AE50A604();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_103;
      v63 = v61;
      v64 = v62;
      sub_1AE925F8C();
      v65 = v55 == v63 && v56 == v64;
      v33 = v53;
      v128 = v56;
      v124 = v55;
      if (v65)
      {
        sub_1AE779F7C();
        sub_1AE4F9038();
        sub_1AE4F6824();
        v67 = v122;
      }
      else
      {
        v66 = sub_1AE4FB6F0();
        sub_1AE779F7C();
        sub_1AE4F6718();
        sub_1AE4F9038();
        sub_1AE4F6648();
        v67 = v122;
        if ((v66 & 1) == 0)
          goto LABEL_54;
      }
      v68 = *(_QWORD *)(*(_QWORD *)(v127 + 128) + 16);
      if (v68)
      {
        v114 = v52;
        sub_1AE779F0C();
        v113 = v64;
        v69 = v64 + 88;
        while (_Records_GDEntityPredicate_records)
        {
          if (*((_QWORD *)_Records_GDEntityPredicate_records + 100) >= v134)
          {
            __break(1u);
LABEL_90:
            __break(1u);
            goto LABEL_91;
          }
          if (*((_QWORD *)_Records_GDEntityPredicate_records + 101) >= v133)
            goto LABEL_90;
          if (!_Records_GDEntityPredicate_predicateIds)
            goto LABEL_99;
          v135 = v68;
          v70 = *(_QWORD *)(v69 - 56);
          v71 = *(_QWORD *)(v69 - 48);
          v33 = *(_QWORD **)(v69 - 8);
          sub_1AE4F66C4();
          sub_1AE4F66CC();
          sub_1AE779E2C();
          sub_1AE4F66C4();
          sub_1AE4F66CC();
          v72 = sub_1AE925F8C();
          if (!_Records_GDEntityPredicate_labels)
            goto LABEL_100;
          v74 = v72;
          v75 = v73;
          sub_1AE925F8C();
          if (v70 == v74 && v71 == v75)
          {
            sub_1AE4F6824();
            sub_1AE4F6728();
            sub_1AE779DE4();
            sub_1AE779E3C();
          }
          else
          {
            v77 = sub_1AE4FB6F0();
            sub_1AE4F6824();
            sub_1AE4F6824();
            sub_1AE4F6728();
            sub_1AE4F81B8();
            sub_1AE779E3C();
            if ((v77 & 1) == 0)
            {
              sub_1AE779F7C();
              swift_bridgeObjectRelease();
              sub_1AE4F6824();
              sub_1AE59CC40(v129, v131, v130);
              sub_1AE68FF50();
              v51 = v117;
              v52 = v114;
              goto LABEL_74;
            }
          }
          v69 += 64;
          v68 = v135 - 1;
          if (v135 == 1)
          {
            sub_1AE4F6824();
            v67 = v122;
            sub_1AE68FF50();
            v52 = v114;
            goto LABEL_54;
          }
        }
        goto LABEL_98;
      }
LABEL_54:
      v138 = &type metadata for Subfact;
      v139 = &protocol witness table for Subfact;
      v78 = sub_1AE505788();
      v136 = v78;
      v79 = v128;
      *(_QWORD *)(v78 + 16) = v124;
      *(_QWORD *)(v78 + 24) = v79;
      v80 = v132;
      *(_QWORD *)(v78 + 32) = v126;
      *(_QWORD *)(v78 + 40) = v80;
      *(_WORD *)(v78 + 48) = v125;
      v81 = v131;
      *(_QWORD *)(v78 + 56) = v129;
      *(_QWORD *)(v78 + 64) = v81;
      *(_BYTE *)(v78 + 72) = v130;
      sub_1AE7694F4(&v136, 1, (uint64_t *)v67);
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v136);
      sub_1AE779D5C(v67, 1, (uint64_t)&a13);
      if (v47)
      {
        sub_1AE777874(v67);
        v51 = v117;
      }
      else
      {
        sub_1AE769B78(v67, (uint64_t)v33);
        v82 = v111;
        v83 = v112;
        if (!v112)
          v82 = sub_1AE925E9C();
        v84 = v52;
        v136 = v82;
        v137 = v83;
        sub_1AE4FB75C();
        sub_1AE779D34();
        sub_1AE4F66C4();
        sub_1AE779D14();
        sub_1AE4F6824();
        v85 = v136;
        v86 = v137;
        *v33 = v136;
        v33[1] = v86;
        v87 = *(_QWORD *)(v123 + 16);
        if (v87)
        {
          sub_1AE779C8C();
          v89 = (_QWORD *)(v123 + v88 + 8);
          v90 = v87;
          while (1)
          {
            v91 = *(v89 - 1) == v85 && *v89 == v86;
            if (v91 || (sub_1AE4FB6F0() & 1) != 0)
              break;
            v89 = (_QWORD *)((char *)v89 + v67);
            if (!--v90)
              goto LABEL_67;
          }
          v51 = v117;
          v52 = v84;
        }
        else
        {
LABEL_67:
          sub_1AE779F74((uint64_t)v33, (uint64_t)&a9);
          v92 = v123;
          if ((sub_1AE4F6C90() & 1) == 0)
          {
            sub_1AE772874();
            sub_1AE51B54C();
            v92 = v99;
          }
          v51 = v117;
          v52 = v84;
          v94 = *(_QWORD *)(v92 + 16);
          v93 = *(_QWORD *)(v92 + 24);
          if (v94 >= v93 >> 1)
          {
            sub_1AE5D8C50(v93);
            sub_1AE51B54C();
            v123 = v100;
          }
          else
          {
            v123 = v92;
          }
          *(_QWORD *)(v123 + 16) = v94 + 1;
          sub_1AE69016C();
          sub_1AE779F3C(v96 + v95 + *(_QWORD *)(v97 + 72) * v94, (uint64_t)&a9);
        }
        sub_1AE769C00((uint64_t)v33);
      }
LABEL_74:
      ++v52;
      sub_1AE779D28();
      if (v52 == v98)
      {
        sub_1AE5001F4();
        sub_1AE50A24C();
        v101 = v123;
        goto LABEL_78;
      }
    }
  }
  sub_1AE50A24C();
  sub_1AE5001F4();
  v101 = MEMORY[0x1E0DEE9D8];
LABEL_78:
  if (*(_QWORD *)(v101 + 16))
  {
    v136 = MEMORY[0x1E0DEE9D8];
    sub_1AE4F66C4();
    sub_1AE779D04();
    sub_1AE69016C();
    v102 = v101;
    v104 = v101 + v103;
    do
    {
      sub_1AE779F20(v104);
      sub_1AE4F6708();
      sub_1AE779F18();
      v105 = v136;
      if ((sub_1AE4F6C90() & 1) == 0)
      {
        sub_1AE614AD8();
        v105 = v136;
      }
      v106 = *(_QWORD *)(v105 + 24);
      if (*(_QWORD *)(v105 + 16) >= v106 >> 1)
      {
        sub_1AE506008(v106);
        sub_1AE614AD8();
        v105 = v136;
      }
      sub_1AE779EA4();
    }
    while (!v47);
    sub_1AE4F6718();
    v136 = v105;
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE779FD4();
    sub_1AE779CEC();
    swift_release();
    v136 = 40;
    v137 = 0xE100000000000000;
    sub_1AE779D14();
    sub_1AE4F665C();
    sub_1AE509604();
    v107 = v110;
    sub_1AE77BFF8(v136, v137, v102, MEMORY[0x1E0DEE9D8], v110);
    v108 = 0;
  }
  else
  {
    sub_1AE4F665C();
    v108 = 1;
    v107 = v110;
  }
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v107, v108, 1, v115);
  sub_1AE4F8180();
}

uint64_t type metadata accessor for K2TAgentAffiliationRelationshipTextualizer()
{
  return objc_opt_self();
}

uint64_t sub_1AE776354()
{
  return sub_1AE776360(static EntityPredicate.locationLabel.getter);
}

uint64_t sub_1AE776360(void (*a1)(void))
{
  uint64_t v2;

  sub_1AE501548(&qword_1ED319608);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1AE934250;
  static EntityPredicate.isA.getter();
  *(_OWORD *)(swift_initStackObject() + 16) = xmmword_1AE934250;
  a1();
  sub_1AE60EFEC();
  return v2;
}

void sub_1AE7763F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  uint64_t v57;
  BOOL v58;
  _QWORD *v59;
  char v60;
  _QWORD *v61;
  _QWORD *v62;
  BOOL v63;
  BOOL v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73[2];
  _OWORD *v74;
  uint64_t v75;
  ValueMetadata *v76;
  _UNKNOWN **v77;
  _OWORD v78[2];
  _BYTE v79[25];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  sub_1AE4FC4D4();
  v69 = v1;
  sub_1AE501548(&qword_1EEDA28B8);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v2);
  sub_1AE4F9024();
  sub_1AE5085B4(v3);
  v70 = v0;
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    v21 = 0;
    goto LABEL_21;
  }
  sub_1AE4FDFD0();
  v6 = (unsigned __int8 *)(v4 + 88);
  while (1)
  {
    if (!_Records_GDEntityPredicate_records)
      goto LABEL_113;
    sub_1AE772630();
    if (v8 == v9)
      break;
    if (*(uint64_t *)(v7 + 2248) >= 3558)
      goto LABEL_105;
    if (!_Records_GDEntityPredicate_predicateIds)
      goto LABEL_114;
    v11 = *((_QWORD *)v6 - 7);
    v10 = *((_QWORD *)v6 - 6);
    v13 = *((_QWORD *)v6 - 2);
    v12 = *((_QWORD *)v6 - 1);
    v14 = *v6;
    sub_1AE4F67A4();
    sub_1AE4FB764();
    v72 = v12;
    sub_1AE779F90(v13);
    sub_1AE4F67A4();
    sub_1AE4FB764();
    v15 = sub_1AE50A604();
    if (!_Records_GDEntityPredicate_labels)
      goto LABEL_115;
    v17 = v15;
    v18 = v16;
    sub_1AE925F8C();
    v19 = v11 == v17 && v10 == v18;
    if (v19)
    {
      sub_1AE4F6824();
      sub_1AE4F6710();
      sub_1AE4F76D8();
LABEL_18:
      sub_1AE4F6824();
      sub_1AE59CC30(v13, v72, v14);
      sub_1AE4F6710();
      sub_1AE4F6728();
      sub_1AE59CC40(v13, v72, v14);
      if (v14)
        v21 = 0;
      else
        v21 = v72;
LABEL_21:
      v22 = *(_QWORD *)(v70 + 128);
      v68 = *(_QWORD *)(v22 + 16);
      if (!v68)
      {
        sub_1AE4F665C();
LABEL_99:
        sub_1AE4F8180();
        return;
      }
      sub_1AE4FB75C();
      v23 = 0;
      v66 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v67 = v22;
LABEL_23:
      if (v23 >= *(_QWORD *)(v22 + 16))
      {
LABEL_101:
        __break(1u);
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
        __break(1u);
        break;
      }
      sub_1AE779CC4((uint64_t)&v82);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_110;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 280) >= 2674)
        goto LABEL_102;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 281) >= 3558)
        goto LABEL_103;
      v71 = v25;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_111;
      sub_1AE779CA4(v24);
      sub_1AE779FAC();
      v26 = sub_1AE50A604();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_112;
      v28 = v26;
      v29 = v27;
      v30 = v80;
      v31 = v81;
      sub_1AE779FA4();
      if (v30 == v28 && v31 == v29)
      {
        sub_1AE4F665C();
        sub_1AE4F9038();
        sub_1AE779D80();
      }
      else
      {
        v33 = sub_1AE4FB6F0();
        sub_1AE4F665C();
        sub_1AE4F9038();
        sub_1AE779D80();
        if ((v33 & 1) == 0)
          goto LABEL_54;
      }
      v34 = *(_QWORD *)(v70 + 128);
      if (*(_QWORD *)(v34 + 16))
      {
        sub_1AE4FDFD0();
        while (_Records_GDEntityPredicate_records)
        {
          sub_1AE772630();
          if (v8 == v9)
          {
            __break(1u);
LABEL_100:
            __break(1u);
            goto LABEL_101;
          }
          if (*(uint64_t *)(v35 + 2248) >= 3558)
            goto LABEL_100;
          if (!_Records_GDEntityPredicate_predicateIds)
            goto LABEL_108;
          v36 = *(_QWORD *)(v34 + 32);
          v37 = *(_QWORD *)(v34 + 40);
          v38 = *(_QWORD *)(v34 + 72);
          v39 = *(_QWORD *)(v34 + 80);
          v40 = *(_BYTE *)(v34 + 88);
          sub_1AE4F67A4();
          sub_1AE4FB764();
          sub_1AE59CC30(v38, v39, v40);
          sub_1AE4F67A4();
          sub_1AE4FB764();
          v41 = sub_1AE50A604();
          if (!_Records_GDEntityPredicate_labels)
            goto LABEL_109;
          v43 = v41;
          v44 = v42;
          sub_1AE507698();
          if (v36 == v43 && v37 == v44)
          {
            sub_1AE4F6824();
            sub_1AE4F6648();
            sub_1AE779DE4();
            sub_1AE779D94();
          }
          else
          {
            v46 = sub_1AE4FB6F0();
            sub_1AE4F6824();
            sub_1AE4F6824();
            sub_1AE4F6648();
            sub_1AE4F81B8();
            sub_1AE779D94();
            if ((v46 & 1) == 0)
            {
              sub_1AE4F6824();
              sub_1AE779E7C();
              goto LABEL_78;
            }
          }
          sub_1AE779F44();
          if (v19)
          {
            sub_1AE4F6824();
            goto LABEL_54;
          }
        }
        goto LABEL_107;
      }
LABEL_54:
      if (*(_QWORD *)(v69 + 24))
        sub_1AE57C238(v69, (uint64_t)v73);
      else
        sub_1AE779D3C(v69);
      sub_1AE779D28();
      if (v47)
      {
        sub_1AE50AF58(v73, (uint64_t)&v74);
        sub_1AE4F9858(&v74, (uint64_t)v76);
        sub_1AE779EF4();
        MEMORY[0x1E0C80A78](v48);
        sub_1AE779ECC();
        *(_QWORD *)(v49 - 16) = v70;
        *(_QWORD *)(v49 - 8) = v78;
        sub_1AE779EBC();
        if ((sub_1AE779FDC() & 1) != 0)
        {
          sub_1AE506A20();
          goto LABEL_60;
        }
        sub_1AE779E7C();
        sub_1AE506A20();
LABEL_78:
        v22 = v67;
        v23 = v71 + 1;
        if (v71 + 1 == v68)
        {
          sub_1AE4F665C();
          sub_1AE4F6648();
          goto LABEL_99;
        }
        goto LABEL_23;
      }
LABEL_60:
      v50 = *(_QWORD *)(v70 + 176);
      v76 = &type metadata for Subfact;
      v77 = &protocol witness table for Subfact;
      v51 = (_OWORD *)sub_1AE505788();
      v74 = v51;
      v52 = v78[1];
      v51[1] = v78[0];
      v51[2] = v52;
      v51[3] = *(_OWORD *)v79;
      *(_OWORD *)((char *)v51 + 57) = *(_OWORD *)&v79[9];
      v53 = *(_QWORD *)(v69 + 24) == 0;
      sub_1AE4F66C4();
      sub_1AE779DBC(v50, &v74, (uint64_t)v65);
      sub_1AE4F665C();
      sub_1AE506A20();
      v54 = sub_1AE4FDF3C();
      if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v65, 1, v54) == 1)
      {
        sub_1AE777874((uint64_t)v65);
        goto LABEL_78;
      }
      v56 = (_OWORD *)*v65;
      v55 = v65[1];
      sub_1AE4F66CC();
      sub_1AE769C00((uint64_t)v65);
      if (v21)
      {
        v74 = v56;
        v75 = v55;
        sub_1AE779D34();
        sub_1AE4F66C4();
        sub_1AE925F74();
        sub_1AE4F665C();
        sub_1AE509604();
        v56 = v74;
        v55 = v75;
      }
      v57 = v66[2];
      if (v57)
      {
        v58 = (_OWORD *)v66[4] == v56 && v66[5] == v55;
        if (v58 || (sub_1AE4FB6F0() & 1) != 0)
          goto LABEL_70;
        if (v57 != 1)
        {
          v63 = (_OWORD *)v66[6] == v56 && v66[7] == v55;
          if (v63 || (sub_1AE4FB6F0() & 1) != 0)
          {
LABEL_70:
            sub_1AE4F9038();
            goto LABEL_78;
          }
          if (v57 != 2)
          {
            sub_1AE779E84();
            while (!__OFADD__(v53, 1))
            {
              v64 = *(_OWORD **)(v21 - 8) == v56 && *(_QWORD *)v21 == v55;
              if (v64 || (sub_1AE4FB6F0() & 1) != 0)
                goto LABEL_70;
              sub_1AE779E1C();
              if (v19)
                goto LABEL_73;
            }
            goto LABEL_106;
          }
        }
      }
LABEL_73:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AE772874();
        sub_1AE519C48();
      }
      sub_1AE5060D8();
      if (v60)
        sub_1AE509B04();
      else
        v61 = v59;
      v61[2] = v57;
      v66 = v61;
      v62 = &v61[2 * v21];
      v62[4] = v56;
      v62[5] = v55;
      goto LABEL_78;
    }
    v20 = sub_1AE4FB6F0();
    sub_1AE4F6710();
    sub_1AE4F6728();
    sub_1AE4F76D8();
    sub_1AE4F81B8();
    if ((v20 & 1) != 0)
      goto LABEL_18;
    sub_1AE4F6710();
    sub_1AE4F6728();
    sub_1AE59CC40(v13, v72, v14);
    v6 += 64;
    if (!--v5)
    {
      sub_1AE4F6824();
      v21 = 0;
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
}

uint64_t sub_1AE776C88(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t result;

  if (*a1 != a2[14])
    return 0;
  v6 = a1[6];
  v5 = a1[7];
  v7 = a1[8];
  v8 = a1[1] == a2[24] && a1[2] == a2[25];
  if (v8 || (v9 = sub_1AE926D60(), result = 0, (v9 & 1) != 0))
  {
    if (v6 == a2[15])
    {
      if (v5 == *a3 && v7 == a3[1])
        return 1;
      else
        return sub_1AE926D60() & 1;
    }
    return 0;
  }
  return result;
}

void sub_1AE776D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  ValueMetadata *v134;
  _QWORD v135[3];

  sub_1AE4FC4D4();
  a19 = v21;
  a20 = v22;
  v111 = v23;
  sub_1AE501548(&qword_1EEDA28B8);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v24);
  sub_1AE4F9024();
  v112 = v25;
  v113 = sub_1AE4FDF3C();
  sub_1AE4F8160(*(_QWORD *)(v113 - 8));
  MEMORY[0x1E0C80A78](v26);
  sub_1AE4F686C();
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v27);
  sub_1AE4FDAA8();
  MEMORY[0x1E0C80A78](v28);
  sub_1AE5094B0();
  sub_1AE5085B4(v29);
  v30 = *(_QWORD *)(v20 + 128);
  v31 = *(_QWORD *)(v30 + 16);
  if (!v31)
  {
    sub_1AE779F28();
    goto LABEL_22;
  }
  sub_1AE779FC8();
  v32 = (unsigned __int8 *)(v30 + 88);
  while (1)
  {
    if (!_Records_GDEntityPredicate_records)
      goto LABEL_105;
    sub_1AE779E4C();
    if (v34 == v35)
    {
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      swift_release();
      __break(1u);
      return;
    }
    if (*(uint64_t *)(v33 + 2248) >= 3558)
      goto LABEL_98;
    v129 = v31;
    if (!_Records_GDEntityPredicate_predicateIds)
      goto LABEL_106;
    v37 = *((_QWORD *)v32 - 7);
    v36 = *((_QWORD *)v32 - 6);
    v38 = *((_QWORD *)v32 - 2);
    v39 = *((_QWORD *)v32 - 1);
    v40 = *v32;
    sub_1AE4F6708();
    sub_1AE4F6804();
    v41 = v38;
    v42 = v38;
    v30 = v39;
    sub_1AE59CC30(v42, v39, v40);
    sub_1AE4F6708();
    sub_1AE4F6804();
    v43 = sub_1AE925F8C();
    if (!_Records_GDEntityPredicate_labels)
      goto LABEL_107;
    v45 = v43;
    v46 = v44;
    sub_1AE925F8C();
    v47 = v37 == v45 && v36 == v46;
    if (v47)
      break;
    v48 = sub_1AE4FB6F0();
    sub_1AE4F67AC();
    sub_1AE4F76D8();
    sub_1AE4F6710();
    sub_1AE4F6728();
    if ((v48 & 1) != 0)
      goto LABEL_18;
    sub_1AE4F67AC();
    sub_1AE4F76D8();
    sub_1AE779E6C();
    v32 += 64;
    v31 = v129 - 1;
    if (v129 == 1)
    {
      sub_1AE4F6824();
      sub_1AE779F28();
      goto LABEL_22;
    }
  }
  sub_1AE4F6824();
  sub_1AE4F67AC();
  sub_1AE4F6710();
LABEL_18:
  sub_1AE4F6824();
  sub_1AE59CC30(v41, v30, v40);
  sub_1AE4F67AC();
  sub_1AE4F76D8();
  sub_1AE779E6C();
  if (v40)
    v49 = 0;
  else
    v49 = v30;
  v110 = v49;
LABEL_22:
  sub_1AE779D28();
  v132 = *(_QWORD *)(v50 + 128);
  sub_1AE4FDFD0();
  sub_1AE779F04(&v132);
  if (v30)
    goto LABEL_108;
  sub_1AE4F6648();
  v51 = v132;
  v116 = *(_QWORD *)(v132 + 16);
  if (v116)
  {
    v52 = 0;
    v115 = v132 + 32;
    v118 = MEMORY[0x1E0DEE9D8];
    v114 = v132;
    while (1)
    {
      if (v52 >= *(_QWORD *)(v51 + 16))
      {
LABEL_94:
        __break(1u);
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
        __break(1u);
        goto LABEL_97;
      }
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_102;
      sub_1AE779E4C();
      if (v34 == v35)
        goto LABEL_95;
      if (*(uint64_t *)(v53 + 2248) >= 3558)
        goto LABEL_96;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_103;
      v54 = (uint64_t *)(v115 + (v52 << 6));
      v55 = *v54;
      v56 = v54[1];
      v58 = v54[2];
      v57 = v54[3];
      v122 = *((_WORD *)v54 + 16);
      v60 = v54[5];
      v59 = v54[6];
      v61 = *((_BYTE *)v54 + 56);
      sub_1AE4F67A4();
      sub_1AE4FB764();
      v124 = v59;
      v125 = v61;
      sub_1AE779F9C(v60, v59);
      sub_1AE4F67A4();
      v126 = v57;
      sub_1AE4FB764();
      v62 = sub_1AE779DDC();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_104;
      v64 = v62;
      v65 = v63;
      sub_1AE925F8C();
      v66 = v55 == v64 && v56 == v65;
      v123 = v56;
      v121 = v55;
      if (v66)
      {
        v68 = v57;
        sub_1AE4F6648();
        sub_1AE4F9038();
        sub_1AE4F6824();
        v69 = v60;
      }
      else
      {
        v67 = sub_1AE4FB6F0();
        v68 = v57;
        sub_1AE4F6648();
        sub_1AE4F6728();
        sub_1AE4F9038();
        sub_1AE4F665C();
        v69 = v60;
        if ((v67 & 1) == 0)
          goto LABEL_56;
      }
      sub_1AE779D28();
      v71 = *(_QWORD *)(*(_QWORD *)(v70 + 128) + 16);
      if (v71)
      {
        v119 = v52;
        sub_1AE779F0C();
        v72 = (char *)(v68 + 88);
        v127 = v58;
        while (_Records_GDEntityPredicate_records)
        {
          sub_1AE779E4C();
          if (v34 == v35)
          {
            __break(1u);
LABEL_93:
            __break(1u);
            goto LABEL_94;
          }
          if (*(uint64_t *)(v73 + 2248) >= 3558)
            goto LABEL_93;
          if (!_Records_GDEntityPredicate_predicateIds)
            goto LABEL_100;
          v128 = v71;
          v75 = *((_QWORD *)v72 - 7);
          v74 = *((_QWORD *)v72 - 6);
          v76 = *((_QWORD *)v72 - 2);
          v77 = *((_QWORD *)v72 - 1);
          v78 = *v72;
          sub_1AE4F6708();
          sub_1AE4F67A4();
          v130 = v76;
          sub_1AE779F9C(v76, v77);
          sub_1AE4F6708();
          sub_1AE4F67A4();
          v79 = sub_1AE779DDC();
          if (!_Records_GDEntityPredicate_labels)
            goto LABEL_101;
          v81 = v79;
          v82 = v80;
          sub_1AE507698();
          if (v75 == v81 && v74 == v82)
          {
            sub_1AE4F6824();
            sub_1AE4F9038();
            sub_1AE779DE4();
            sub_1AE59CC40(v130, v77, v78);
            v58 = v127;
          }
          else
          {
            v84 = sub_1AE4FB6F0();
            sub_1AE4F6824();
            sub_1AE4F6824();
            sub_1AE4F9038();
            sub_1AE4F81B8();
            sub_1AE59CC40(v130, v77, v78);
            v58 = v127;
            if ((v84 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1AE4F6824();
              sub_1AE59CC40(v60, v124, v125);
              v51 = v114;
              v52 = v119;
              goto LABEL_74;
            }
          }
          v72 += 64;
          --v71;
          if (v128 == 1)
          {
            sub_1AE4F6824();
            v52 = v119;
            v68 = v126;
            v69 = v60;
            goto LABEL_56;
          }
        }
        goto LABEL_99;
      }
LABEL_56:
      v134 = &type metadata for Subfact;
      v135[0] = &protocol witness table for Subfact;
      v85 = sub_1AE505788();
      v132 = v85;
      *(_QWORD *)(v85 + 16) = v121;
      *(_QWORD *)(v85 + 24) = v123;
      *(_QWORD *)(v85 + 32) = v58;
      *(_QWORD *)(v85 + 40) = v68;
      *(_WORD *)(v85 + 48) = v122;
      *(_QWORD *)(v85 + 56) = v69;
      *(_QWORD *)(v85 + 64) = v124;
      *(_BYTE *)(v85 + 72) = v125;
      sub_1AE4FB764();
      sub_1AE4FB75C();
      sub_1AE779F9C(v69, v124);
      sub_1AE7694F4(&v132, 1, v112);
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v132);
      sub_1AE779D5C((uint64_t)v112, 1, (uint64_t)&a11);
      if (v47)
      {
        sub_1AE4F6718();
        sub_1AE4F6710();
        sub_1AE59CC40(v69, v124, v125);
        sub_1AE777874((uint64_t)v112);
        v51 = v114;
      }
      else
      {
        v120 = v52;
        sub_1AE769B78((uint64_t)v112, (uint64_t)v117);
        v86 = v117[1];
        v132 = *v117;
        v133 = v86;
        sub_1AE4F66C4();
        sub_1AE779D34();
        sub_1AE4F81B0();
        sub_1AE925F74();
        sub_1AE4F6718();
        sub_1AE4F6710();
        sub_1AE59CC40(v69, v124, v125);
        sub_1AE4F6718();
        sub_1AE509604();
        sub_1AE4F665C();
        v87 = v132;
        v88 = v133;
        *v117 = v132;
        v117[1] = v88;
        v89 = *(_QWORD *)(v118 + 16);
        if (v89)
        {
          sub_1AE779C8C();
          v91 = (_QWORD *)(v118 + v90 + 8);
          v92 = v89;
          while (1)
          {
            v93 = *(v91 - 1) == v87 && *v91 == v88;
            if (v93 || (sub_1AE4FB6F0() & 1) != 0)
              break;
            v91 = (uint64_t *)((char *)v117 + (_QWORD)v91);
            if (!--v92)
              goto LABEL_67;
          }
          v51 = v114;
          v52 = v120;
        }
        else
        {
LABEL_67:
          sub_1AE779F74((uint64_t)v117, (uint64_t)v135);
          if ((sub_1AE779DEC() & 1) != 0)
          {
            v94 = v118;
          }
          else
          {
            sub_1AE772874();
            sub_1AE51B54C();
          }
          v96 = *(_QWORD *)(v94 + 16);
          v95 = *(_QWORD *)(v94 + 24);
          v51 = v114;
          v52 = v120;
          if (v96 >= v95 >> 1)
          {
            sub_1AE5D8C50(v95);
            sub_1AE51B54C();
          }
          *(_QWORD *)(v94 + 16) = v96 + 1;
          sub_1AE69016C();
          v118 = v97;
          sub_1AE779F3C(v97 + v98 + *(_QWORD *)(v99 + 72) * v96, (uint64_t)v135);
        }
        sub_1AE779DA8((uint64_t)&a16);
      }
LABEL_74:
      if (++v52 == v116)
      {
        sub_1AE50A24C();
        v100 = v118;
        goto LABEL_78;
      }
    }
  }
  sub_1AE50A24C();
  v100 = MEMORY[0x1E0DEE9D8];
LABEL_78:
  if (*(_QWORD *)(v100 + 16))
  {
    v101 = v100;
    sub_1AE779D28();
    v132 = sub_1AE925E9C();
    v133 = v102;
    if (v110)
    {
      sub_1AE925F74();
      sub_1AE4F6648();
      sub_1AE509604();
      sub_1AE925F74();
      sub_1AE4F6648();
    }
    if (*(_QWORD *)(v101 + 16))
    {
      v131 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1AE779D04();
      sub_1AE69016C();
      v104 = v101 + v103;
      do
      {
        sub_1AE779F20(v104);
        sub_1AE4F6708();
        sub_1AE779F18();
        v105 = v131;
        if ((sub_1AE4F6C90() & 1) == 0)
        {
          sub_1AE614AD8();
          v105 = v131;
        }
        v106 = *(_QWORD *)(v105 + 24);
        if (*(_QWORD *)(v105 + 16) >= v106 >> 1)
        {
          sub_1AE506008(v106);
          sub_1AE614AD8();
        }
        sub_1AE779EA4();
      }
      while (!v47);
      sub_1AE4F6718();
    }
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE779FD4();
    v109 = sub_1AE779CEC();
    sub_1AE4F81B8();
    sub_1AE925F74();
    sub_1AE4F81B8();
    sub_1AE779D34();
    sub_1AE779D14();
    sub_1AE4F665C();
    sub_1AE509604();
    sub_1AE779E5C(40, 0xE100000000000000, MEMORY[0x1E0DEE9D8], (uint64_t)&v134);
    v107 = v109;
    v108 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1AE5001F4();
    v107 = v111;
    v108 = 1;
  }
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v107, v108, 1, v113);
  sub_1AE4F8180();
}

uint64_t sub_1AE7777B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, void *a7)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int128 v15;
  _OWORD v17[2];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  _OWORD v22[3];
  uint64_t v23;
  char v24;

  v8 = *(_OWORD *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 56);
  v11 = *(_OWORD *)a4;
  v12 = *(_QWORD *)(a4 + 16);
  v13 = *(_QWORD *)(a4 + 24);
  v14 = *(_WORD *)(a4 + 32);
  v22[0] = *(_OWORD *)a1;
  v22[1] = v8;
  v22[2] = v7;
  v23 = v9;
  v24 = v10;
  v18 = v11;
  v19 = v12;
  v20 = v13;
  v21 = v14;
  v15 = a6[1];
  v17[0] = *a6;
  v17[1] = v15;
  return sub_1AE773FE4((uint64_t)v22, a2, a3, &v18, a5, v17, a7);
}

uint64_t type metadata accessor for K2TAddressAndLocationRelationshipTextualizer()
{
  return objc_opt_self();
}

uint64_t sub_1AE77783C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AE59CC40(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  return swift_deallocObject();
}

uint64_t sub_1AE777874(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1AE501548(&qword_1EEDA28B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1AE7778B4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  __int128 v33;
  BOOL v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  char v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  BOOL v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  __int128 v105;
  __int128 v106;
  char v107;
  int64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;

  v3 = a1[1];
  v4 = sub_1AE926D0C();
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_1AE777F74(0, v3, 1, a1);
      return;
    }
    goto LABEL_150;
  }
  v5 = v4;
  v146 = v1;
  sub_1AE519654(v3 / 2);
  v141 = v6;
  v142 = v3;
  v144 = v7;
  v139 = a1;
  if (v3 <= 0)
  {
    v145 = MEMORY[0x1E0DEE9D8];
    v44 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_116:
    if (v44 < 2)
    {
LABEL_127:
      v128 = swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        sub_1AE779F84(v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, (uint64_t)v139, v140, v141);
        return;
      }
      goto LABEL_155;
    }
    v120 = *v139;
    while (1)
    {
      v121 = v44 - 2;
      if (v44 < 2)
        break;
      if (!v120)
        goto LABEL_159;
      v122 = v145;
      v123 = *(_QWORD *)(v145 + 32 + 16 * v121);
      v124 = *(_QWORD *)(v145 + 32 + 16 * (v44 - 1) + 8);
      sub_1AE778060((char *)(v120 + (v123 << 6)), (char *)(v120 + (*(_QWORD *)(v145 + 32 + 16 * (v44 - 1)) << 6)), v120 + (v124 << 6), v144);
      if (v146)
        goto LABEL_112;
      if (v124 < v123)
        goto LABEL_145;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AE8893F4();
        v122 = v127;
      }
      if (v121 >= *(_QWORD *)(v122 + 16))
        goto LABEL_146;
      v125 = (_QWORD *)(v122 + 32 + 16 * v121);
      *v125 = v123;
      v125[1] = v124;
      v126 = *(_QWORD *)(v122 + 16);
      if (v44 > v126)
        goto LABEL_147;
      memmove((void *)(v122 + 32 + 16 * (v44 - 1)), (const void *)(v122 + 32 + 16 * v44), 16 * (v126 - v44));
      v145 = v122;
      *(_QWORD *)(v122 + 16) = v126 - 1;
      v44 = v126 - 1;
      v3 = v142;
      if (v126 <= 2)
        goto LABEL_127;
    }
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
    return;
  }
  v140 = v5;
  v8 = 0;
  v9 = *a1;
  v137 = *a1 + 56;
  v138 = *a1 + 8;
  v145 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v10 = v8++;
    if (v8 >= v3)
      goto LABEL_38;
    v11 = (uint64_t *)(v9 + (v8 << 6));
    v12 = *v11;
    v13 = v11[1];
    v14 = (_QWORD *)(v9 + (v10 << 6));
    if (v12 == *v14 && v13 == v14[1])
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v3)
        goto LABEL_37;
      v16 = 0;
LABEL_13:
      v18 = (_QWORD *)(v138 + (v17 << 6));
      do
      {
        v19 = (_QWORD *)(v9 + (v8 << 6));
        if (*(v18 - 1) == *v19 && *v18 == v19[1])
        {
          if ((v16 & 1) != 0)
            goto LABEL_24;
        }
        else if (((v16 ^ sub_1AE505B70()) & 1) != 0)
        {
          goto LABEL_23;
        }
        v18 += 8;
        v21 = v17 + 1;
        v8 = v17;
        v17 = v21;
      }
      while (v21 < v3);
      v17 = v21;
      goto LABEL_23;
    }
    v16 = sub_1AE505B70();
    v17 = v10 + 2;
    if (v10 + 2 < v3)
      goto LABEL_13;
LABEL_23:
    v8 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_38;
LABEL_24:
    if (v17 < v10)
      goto LABEL_154;
    if (v10 < v17)
    {
      v22 = (v17 << 6) - 64;
      v23 = v10 << 6;
      v24 = v17;
      v25 = v10;
      do
      {
        if (v25 != --v24)
        {
          if (!v9)
            goto LABEL_158;
          v26 = v9 + v23;
          v27 = v9 + v22;
          v28 = *(_QWORD *)(v9 + v23);
          v29 = *(_QWORD *)(v9 + v23 + 8);
          v30 = *(_QWORD *)(v9 + v23 + 16);
          v31 = *(_QWORD *)(v9 + v23 + 24);
          v32 = *(_WORD *)(v9 + v23 + 32);
          v33 = *(_OWORD *)(v9 + v23 + 40);
          v34 = v23 != v22 || v26 >= v9 + v22 + 64;
          v35 = *(_BYTE *)(v26 + 56);
          if (v34)
          {
            v36 = *(_OWORD *)v27;
            v37 = *(_OWORD *)(v27 + 16);
            v38 = *(_OWORD *)(v27 + 48);
            *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
            *(_OWORD *)(v26 + 48) = v38;
            *(_OWORD *)v26 = v36;
            *(_OWORD *)(v26 + 16) = v37;
          }
          *(_QWORD *)v27 = v28;
          *(_QWORD *)(v27 + 8) = v29;
          *(_QWORD *)(v27 + 16) = v30;
          *(_QWORD *)(v27 + 24) = v31;
          *(_WORD *)(v27 + 32) = v32;
          *(_OWORD *)(v27 + 40) = v33;
          *(_BYTE *)(v27 + 56) = v35;
        }
        ++v25;
        v22 -= 64;
        v23 += 64;
      }
      while (v25 < v24);
    }
LABEL_37:
    v8 = v17;
LABEL_38:
    if (v8 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v8, v10))
      goto LABEL_149;
    if (v8 - v10 >= v140)
      goto LABEL_47;
    if (__OFADD__(v10, v140))
      goto LABEL_152;
    if (v10 + v140 >= v3)
      v39 = v3;
    else
      v39 = v10 + v140;
    if (v39 < v10)
      goto LABEL_153;
    if (v8 == v39)
    {
LABEL_47:
      v40 = v145;
    }
    else
    {
      v92 = v137 + (v8 << 6);
      v40 = v145;
      v143 = v10;
      do
      {
        v93 = v10;
        v94 = v92;
        do
        {
          v95 = (_OWORD *)(v94 - 56);
          v96 = (_OWORD *)(v94 - 120);
          v97 = *(_QWORD *)(v94 - 56) == *(_QWORD *)(v94 - 120) && *(_QWORD *)(v94 - 48) == *(_QWORD *)(v94 - 112);
          if (v97 || (sub_1AE505B70() & 1) == 0)
            break;
          if (!v9)
            goto LABEL_156;
          v99 = *(_OWORD *)(v94 - 88);
          v98 = *(_OWORD *)(v94 - 72);
          *(_BYTE *)(v94 - 64) = *(_BYTE *)v94;
          v94 -= 64;
          v100 = *(_QWORD *)(v94 + 8);
          v101 = *(_QWORD *)(v94 + 16);
          v102 = *(_QWORD *)(v94 + 24);
          v103 = *(_QWORD *)(v94 + 32);
          v104 = *(_WORD *)(v94 + 40);
          v105 = v96[1];
          *v95 = *v96;
          v95[1] = v105;
          v106 = *(_OWORD *)(v94 + 48);
          v95[2] = v99;
          v95[3] = v98;
          *(_QWORD *)(v94 - 56) = v100;
          *(_QWORD *)(v94 - 48) = v101;
          *(_QWORD *)(v94 - 40) = v102;
          *(_QWORD *)(v94 - 32) = v103;
          *(_WORD *)(v94 - 24) = v104;
          ++v93;
          *(_OWORD *)(v94 - 16) = v106;
        }
        while (v8 != v93);
        ++v8;
        v92 += 64;
        v10 = v143;
      }
      while (v8 != v39);
      v8 = v39;
    }
    if (v8 < v10)
      goto LABEL_148;
    v41 = v10;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v107 = sub_1AE772874();
      sub_1AE889310(v107, v108, v109, (char *)v40);
      v40 = v110;
    }
    v43 = *(_QWORD *)(v40 + 16);
    v42 = *(_QWORD *)(v40 + 24);
    v44 = v43 + 1;
    if (v43 >= v42 >> 1)
    {
      sub_1AE889310(v42 > 1, v43 + 1, 1, (char *)v40);
      v40 = v111;
    }
    *(_QWORD *)(v40 + 16) = v44;
    v45 = v40 + 32;
    v46 = (uint64_t *)(v40 + 32 + 16 * v43);
    *v46 = v41;
    v46[1] = v8;
    v145 = v40;
    if (v43)
      break;
    v44 = 1;
LABEL_96:
    v3 = v142;
    if (v8 >= v142)
      goto LABEL_116;
  }
  while (1)
  {
    v47 = v44 - 1;
    if (v44 >= 4)
    {
      v52 = v45 + 16 * v44;
      v53 = *(_QWORD *)(v52 - 64);
      v54 = *(_QWORD *)(v52 - 56);
      v58 = __OFSUB__(v54, v53);
      v55 = v54 - v53;
      if (v58)
        goto LABEL_133;
      v57 = *(_QWORD *)(v52 - 48);
      v56 = *(_QWORD *)(v52 - 40);
      v58 = __OFSUB__(v56, v57);
      v50 = v56 - v57;
      v51 = v58;
      if (v58)
        goto LABEL_134;
      v59 = v44 - 2;
      v60 = (uint64_t *)(v45 + 16 * (v44 - 2));
      v62 = *v60;
      v61 = v60[1];
      v58 = __OFSUB__(v61, v62);
      v63 = v61 - v62;
      if (v58)
        goto LABEL_135;
      v58 = __OFADD__(v50, v63);
      v64 = v50 + v63;
      if (v58)
        goto LABEL_137;
      if (v64 >= v55)
      {
        v82 = (uint64_t *)(v45 + 16 * v47);
        v84 = *v82;
        v83 = v82[1];
        v58 = __OFSUB__(v83, v84);
        v85 = v83 - v84;
        if (v58)
          goto LABEL_143;
        v75 = v50 < v85;
        goto LABEL_85;
      }
    }
    else
    {
      if (v44 != 3)
      {
        v76 = *(_QWORD *)(v40 + 32);
        v77 = *(_QWORD *)(v40 + 40);
        v58 = __OFSUB__(v77, v76);
        v69 = v77 - v76;
        v70 = v58;
        goto LABEL_79;
      }
      v49 = *(_QWORD *)(v40 + 32);
      v48 = *(_QWORD *)(v40 + 40);
      v58 = __OFSUB__(v48, v49);
      v50 = v48 - v49;
      v51 = v58;
    }
    if ((v51 & 1) != 0)
      goto LABEL_136;
    v59 = v44 - 2;
    v65 = (uint64_t *)(v45 + 16 * (v44 - 2));
    v67 = *v65;
    v66 = v65[1];
    v68 = __OFSUB__(v66, v67);
    v69 = v66 - v67;
    v70 = v68;
    if (v68)
      goto LABEL_138;
    v71 = (uint64_t *)(v45 + 16 * v47);
    v73 = *v71;
    v72 = v71[1];
    v58 = __OFSUB__(v72, v73);
    v74 = v72 - v73;
    if (v58)
      goto LABEL_140;
    if (__OFADD__(v69, v74))
      goto LABEL_142;
    if (v69 + v74 >= v50)
    {
      v75 = v50 < v74;
LABEL_85:
      if (v75)
        v47 = v59;
      goto LABEL_87;
    }
LABEL_79:
    if ((v70 & 1) != 0)
      goto LABEL_139;
    v78 = (uint64_t *)(v45 + 16 * v47);
    v80 = *v78;
    v79 = v78[1];
    v58 = __OFSUB__(v79, v80);
    v81 = v79 - v80;
    if (v58)
      goto LABEL_141;
    if (v81 < v69)
      goto LABEL_96;
LABEL_87:
    v86 = v47 - 1;
    if (v47 - 1 >= v44)
    {
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
      goto LABEL_144;
    }
    if (!v9)
      goto LABEL_157;
    v87 = (uint64_t *)(v45 + 16 * v86);
    v88 = *v87;
    v89 = (_QWORD *)(v45 + 16 * v47);
    v90 = v89[1];
    sub_1AE778060((char *)(v9 + (*v87 << 6)), (char *)(v9 + (*v89 << 6)), v9 + (v90 << 6), v144);
    if (v146)
      break;
    if (v90 < v88)
      goto LABEL_130;
    if (v47 > *(_QWORD *)(v145 + 16))
      goto LABEL_131;
    *v87 = v88;
    *(_QWORD *)(v45 + 16 * v86 + 8) = v90;
    v91 = *(_QWORD *)(v145 + 16);
    if (v47 >= v91)
      goto LABEL_132;
    v40 = v145;
    v44 = v91 - 1;
    memmove((void *)(v45 + 16 * v47), v89 + 2, 16 * (v91 - 1 - v47));
    *(_QWORD *)(v145 + 16) = v91 - 1;
    if (v91 <= 2)
      goto LABEL_96;
  }
LABEL_112:
  v112 = swift_bridgeObjectRelease();
  if (v142 < -1)
    goto LABEL_151;
  sub_1AE779F84(v112, v113, v114, v115, v116, v117, v118, v119, v136, v137, v138, (uint64_t)v139, v140, v141);
}

uint64_t sub_1AE777F74(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  __int128 v21;
  __int128 v22;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + (a3 << 6) + 56;
    while (2)
    {
      v9 = v6;
      v10 = v8;
      do
      {
        result = *(_QWORD *)(v10 - 56);
        v11 = (_OWORD *)(v10 - 56);
        v12 = (_OWORD *)(v10 - 120);
        if (result == *(_QWORD *)(v10 - 120) && *(_QWORD *)(v10 - 48) == *(_QWORD *)(v10 - 112))
          break;
        result = sub_1AE505B70();
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        v15 = *(_OWORD *)(v10 - 88);
        v14 = *(_OWORD *)(v10 - 72);
        *(_BYTE *)(v10 - 64) = *(_BYTE *)v10;
        v10 -= 64;
        v16 = *(_QWORD *)(v10 + 8);
        v17 = *(_QWORD *)(v10 + 16);
        v18 = *(_QWORD *)(v10 + 24);
        v19 = *(_QWORD *)(v10 + 32);
        v20 = *(_WORD *)(v10 + 40);
        v21 = v12[1];
        *v11 = *v12;
        v11[1] = v21;
        v22 = *(_OWORD *)(v10 + 48);
        v11[2] = v15;
        v11[3] = v14;
        *(_QWORD *)(v10 - 56) = v16;
        *(_QWORD *)(v10 - 48) = v17;
        *(_QWORD *)(v10 - 40) = v18;
        *(_QWORD *)(v10 - 32) = v19;
        *(_WORD *)(v10 - 24) = v20;
        ++v9;
        *(_OWORD *)(v10 - 16) = v22;
      }
      while (v4 != v9);
      ++v4;
      v8 += 64;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_1AE778060(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 64;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 64;
  if (v9 >= v11)
  {
    sub_1AE51FB40(a2, (uint64_t)(a3 - (_QWORD)a2) / 64, a4);
    v12 = (unint64_t)&v4[64 * v11];
    if (v7 >= v6 || v10 < 64)
      goto LABEL_43;
    v19 = (char *)(a3 - 64);
    while (1)
    {
      v20 = v19 + 64;
      v21 = (char *)(v12 - 64);
      v22 = *(_QWORD *)(v12 - 64) == *((_QWORD *)v6 - 8) && *(_QWORD *)(v12 - 56) == *((_QWORD *)v6 - 7);
      if (v22 || (sub_1AE505B70() & 1) == 0)
      {
        v24 = v20 != (char *)v12 || (unint64_t)v19 >= v12;
        v12 -= 64;
        if (!v24)
          goto LABEL_39;
      }
      else
      {
        v23 = v20 != v6 || v19 >= v6;
        v21 = v6 - 64;
        v6 -= 64;
        if (!v23)
          goto LABEL_39;
      }
      v25 = *(_OWORD *)v21;
      v26 = *((_OWORD *)v21 + 1);
      v27 = *((_OWORD *)v21 + 3);
      *((_OWORD *)v19 + 2) = *((_OWORD *)v21 + 2);
      *((_OWORD *)v19 + 3) = v27;
      *(_OWORD *)v19 = v25;
      *((_OWORD *)v19 + 1) = v26;
LABEL_39:
      v19 -= 64;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_43;
    }
  }
  sub_1AE51FB40(a1, (a2 - a1) / 64, a4);
  v12 = (unint64_t)&v4[64 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 64)
  {
    while (1)
    {
      v13 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
      if (!v13 && (sub_1AE505B70() & 1) != 0)
        break;
      v14 = v4;
      v13 = v7 == v4;
      v4 += 64;
      if (!v13)
        goto LABEL_13;
LABEL_14:
      v7 += 64;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v14 = v6;
    v13 = v7 == v6;
    v6 += 64;
    if (v13)
      goto LABEL_14;
LABEL_13:
    v15 = *(_OWORD *)v14;
    v16 = *((_OWORD *)v14 + 1);
    v17 = *((_OWORD *)v14 + 3);
    *((_OWORD *)v7 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v7 + 3) = v17;
    *(_OWORD *)v7 = v15;
    *((_OWORD *)v7 + 1) = v16;
    goto LABEL_14;
  }
LABEL_19:
  v6 = v7;
LABEL_43:
  sub_1AE51FB40(v4, (uint64_t)(v12 - (_QWORD)v4) / 64, v6);
  return 1;
}

uint64_t sub_1AE778214()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AE778240(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1AE775858(result, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
  return result;
}

uint64_t sub_1AE77824C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[3];
  uint64_t v122;
  uint64_t v123;
  _OWORD v124[2];
  __int16 v125;

  if (!_Records_GDEntityPredicate_records)
  {
LABEL_208:
    __break(1u);
    goto LABEL_209;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 466) >= 2674)
  {
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  v2 = 3558;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 467) >= 3558)
  {
LABEL_152:
    __break(1u);
LABEL_153:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_154;
  }
  v118 = a2;
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_209:
    __break(1u);
    goto LABEL_210;
  }
  v3 = *(_OWORD *)(result + 16);
  v124[0] = *(_OWORD *)result;
  v124[1] = v3;
  v125 = *(_WORD *)(result + 32);
  v117 = result;
  sub_1AE7335EC(result);
  sub_1AE5C7880((uint64_t)v124);
  result = sub_1AE925F8C();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
    goto LABEL_214;
  }
  v5 = result;
  v6 = v4;
  sub_1AE925F8C();
  v7 = v124[0];
  if (v5 == *(_QWORD *)&v124[0] && v6 == *((_QWORD *)&v124[0] + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_73;
  }
  v9 = sub_1AE926D60();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
LABEL_73:
    sub_1AE525EF8((uint64_t)v124);
    v40 = *(_QWORD *)(v118 + 16);
    if (!v40)
      goto LABEL_187;
    v41 = v118 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1AE57C238(v41, (uint64_t)v121);
      v42 = v122;
      v43 = v123;
      sub_1AE4F9858(v121, v122);
      result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v43 + 24))(&v119, v42, v43);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_198;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 175) >= 2674)
      {
        __break(1u);
LABEL_133:
        __break(1u);
        goto LABEL_134;
      }
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 176) >= 3558)
        goto LABEL_133;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_199;
      v45 = v119;
      v44 = v120;
      result = sub_1AE925F8C();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_200;
      v47 = result;
      v48 = v46;
      sub_1AE925F8C();
      if (v45 == v47 && v44 == v48)
      {
LABEL_188:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v121);
LABEL_189:
        swift_bridgeObjectRelease();
        sub_1AE733648(v117);
        return 1;
      }
      v50 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v121);
      if ((v50 & 1) != 0)
        goto LABEL_189;
      v41 += 40;
      if (!--v40)
      {
LABEL_86:
        swift_bridgeObjectRelease();
        goto LABEL_187;
      }
    }
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_218:
    __break(1u);
    goto LABEL_219;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 472) >= 2674)
  {
LABEL_170:
    __break(1u);
    goto LABEL_171;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 473) >= 3558)
  {
LABEL_171:
    __break(1u);
    goto LABEL_172;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_219:
    __break(1u);
    goto LABEL_220;
  }
  result = sub_1AE925F8C();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
    goto LABEL_222;
  }
  v11 = result;
  v12 = v10;
  sub_1AE925F8C();
  if (v11 == (_QWORD)v7 && v12 == *((_QWORD *)&v7 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_88;
  }
  v14 = sub_1AE926D60();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
  {
LABEL_88:
    sub_1AE525EF8((uint64_t)v124);
    v51 = *(_QWORD *)(v118 + 16);
    if (!v51)
      goto LABEL_187;
    v52 = v118 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1AE57C238(v52, (uint64_t)v121);
      v53 = v122;
      v54 = v123;
      sub_1AE4F9858(v121, v122);
      result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v54 + 24))(&v119, v53, v54);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_205;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 220) >= 2674)
      {
        __break(1u);
LABEL_150:
        __break(1u);
        __break(1u);
        goto LABEL_151;
      }
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 221) >= 3558)
        goto LABEL_150;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_206;
      v56 = v119;
      v55 = v120;
      result = sub_1AE925F8C();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_207;
      v58 = result;
      v59 = v57;
      sub_1AE925F8C();
      if (v56 == v58 && v55 == v59)
        goto LABEL_188;
      v61 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v121);
      if ((v61 & 1) != 0)
        goto LABEL_189;
      v52 += 40;
      if (!--v51)
        goto LABEL_86;
    }
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_226:
    __break(1u);
    goto LABEL_227;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 469) >= 2674)
  {
LABEL_192:
    __break(1u);
    goto LABEL_193;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 470) >= 3558)
  {
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
    __break(1u);
LABEL_196:
    __break(1u);
    goto LABEL_197;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_227:
    __break(1u);
    goto LABEL_228;
  }
  result = sub_1AE925F8C();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_228:
    __break(1u);
LABEL_229:
    __break(1u);
LABEL_230:
    __break(1u);
LABEL_231:
    __break(1u);
    goto LABEL_232;
  }
  v16 = result;
  v17 = v15;
  sub_1AE925F8C();
  if (v16 == (_QWORD)v7 && v17 == *((_QWORD *)&v7 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_103;
  }
  v19 = sub_1AE926D60();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
  {
LABEL_103:
    sub_1AE525EF8((uint64_t)v124);
    v62 = *(_QWORD *)(v118 + 16);
    if (!v62)
      goto LABEL_187;
    v63 = v118 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1AE57C238(v63, (uint64_t)v121);
      v64 = v122;
      v65 = v123;
      sub_1AE4F9858(v121, v122);
      result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v65 + 24))(&v119, v64, v65);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_215;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 469) >= 2674)
      {
        __break(1u);
LABEL_169:
        __break(1u);
        __break(1u);
        goto LABEL_170;
      }
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 470) >= 3558)
        goto LABEL_169;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_216;
      v67 = v119;
      v66 = v120;
      result = sub_1AE925F8C();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_217;
      v69 = result;
      v70 = v68;
      sub_1AE925F8C();
      if (v67 == v69 && v66 == v70)
        goto LABEL_188;
      v72 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v121);
      if ((v72 & 1) != 0)
        goto LABEL_189;
      v63 += 40;
      if (!--v62)
        goto LABEL_86;
    }
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_232:
    __break(1u);
    goto LABEL_233;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 541) >= 2674)
    goto LABEL_196;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 542) >= 3558)
  {
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
    goto LABEL_204;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_233:
    __break(1u);
    goto LABEL_234;
  }
  result = sub_1AE925F8C();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_234:
    __break(1u);
LABEL_235:
    __break(1u);
LABEL_236:
    __break(1u);
LABEL_237:
    __break(1u);
    goto LABEL_238;
  }
  v21 = result;
  v22 = v20;
  sub_1AE925F8C();
  if (v21 == (_QWORD)v7 && v22 == *((_QWORD *)&v7 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_118;
  }
  v24 = sub_1AE926D60();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
  {
LABEL_118:
    sub_1AE525EF8((uint64_t)v124);
    v73 = *(_QWORD *)(v118 + 16);
    if (!v73)
      goto LABEL_187;
    v74 = v118 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1AE57C238(v74, (uint64_t)v121);
      v75 = v122;
      v76 = v123;
      sub_1AE4F9858(v121, v122);
      result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v76 + 24))(&v119, v75, v76);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_223;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 538) >= 2674)
      {
        __break(1u);
LABEL_191:
        __break(1u);
        goto LABEL_192;
      }
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 539) >= 3558)
        goto LABEL_191;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_224;
      v78 = v119;
      v77 = v120;
      result = sub_1AE925F8C();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_225;
      v80 = result;
      v81 = v79;
      sub_1AE925F8C();
      if (v78 == v80 && v77 == v81)
        goto LABEL_188;
      v83 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v121);
      if ((v83 & 1) != 0)
        goto LABEL_189;
      v74 += 40;
      if (!--v73)
        goto LABEL_86;
    }
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_238:
    __break(1u);
    goto LABEL_239;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 457) >= 2674)
    goto LABEL_203;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 458) >= 3558)
  {
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
    goto LABEL_208;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_239:
    __break(1u);
    goto LABEL_240;
  }
  result = sub_1AE925F8C();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_240:
    __break(1u);
LABEL_241:
    __break(1u);
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
    goto LABEL_244;
  }
  v26 = result;
  v27 = v25;
  sub_1AE925F8C();
  if (v26 == (_QWORD)v7 && v27 == *((_QWORD *)&v7 + 1))
  {
LABEL_134:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_135;
  }
  v29 = sub_1AE926D60();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
  {
LABEL_135:
    sub_1AE525EF8((uint64_t)v124);
    v84 = *(_QWORD *)(v118 + 16);
    if (!v84)
      goto LABEL_187;
    v85 = v118 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1AE57C238(v85, (uint64_t)v121);
      v86 = v122;
      v87 = v123;
      sub_1AE4F9858(v121, v122);
      result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v87 + 24))(&v119, v86, v87);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_229;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 7) >= 2674)
        goto LABEL_194;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 8) >= 3558)
        goto LABEL_195;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_230;
      v89 = v119;
      v88 = v120;
      result = sub_1AE925F8C();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_231;
      v91 = result;
      v92 = v90;
      sub_1AE925F8C();
      if (v89 == v91 && v88 == v92)
        goto LABEL_188;
      v94 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v121);
      if ((v94 & 1) != 0)
        goto LABEL_189;
      v85 += 40;
      if (!--v84)
        goto LABEL_86;
    }
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_244:
    __break(1u);
    goto LABEL_245;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 460) >= 2674)
    goto LABEL_213;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 461) >= 3558)
  {
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
    goto LABEL_218;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  result = sub_1AE925F8C();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_246:
    __break(1u);
    goto LABEL_247;
  }
  v31 = result;
  v32 = v30;
  sub_1AE925F8C();
  if (v31 == (_QWORD)v7 && v32 == *((_QWORD *)&v7 + 1))
    goto LABEL_153;
  v34 = sub_1AE926D60();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v34 & 1) != 0)
  {
LABEL_154:
    sub_1AE525EF8((uint64_t)v124);
    v95 = *(_QWORD *)(v118 + 16);
    if (!v95)
      goto LABEL_187;
    v96 = v118 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1AE57C238(v96, (uint64_t)v121);
      v97 = v122;
      v98 = v123;
      sub_1AE4F9858(v121, v122);
      result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v98 + 24))(&v119, v97, v98);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_235;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 388) >= 2674)
        goto LABEL_201;
      if (*((_QWORD *)_Records_GDEntityPredicate_records + 389) >= v2)
        goto LABEL_202;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_236;
      v100 = v119;
      v99 = v120;
      result = sub_1AE925F8C();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_237;
      v102 = result;
      v103 = v101;
      sub_1AE925F8C();
      if (v100 == v102 && v99 == v103)
        goto LABEL_188;
      v105 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v121);
      if ((v105 & 1) != 0)
        goto LABEL_189;
      v96 += 40;
      if (!--v95)
        goto LABEL_86;
    }
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_247:
    __break(1u);
    goto LABEL_248;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 463) >= 2674)
    goto LABEL_221;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 464) >= 3558)
  {
LABEL_222:
    __break(1u);
LABEL_223:
    __break(1u);
LABEL_224:
    __break(1u);
LABEL_225:
    __break(1u);
    goto LABEL_226;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_248:
    __break(1u);
    goto LABEL_249;
  }
  result = sub_1AE925F8C();
  if (_Records_GDEntityPredicate_labels)
  {
    v36 = result;
    v37 = v35;
    sub_1AE925F8C();
    if (v36 != (_QWORD)v7 || v37 != *((_QWORD *)&v7 + 1))
    {
      v39 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AE525EF8((uint64_t)v124);
      if ((v39 & 1) == 0)
        goto LABEL_187;
LABEL_173:
      v106 = *(_QWORD *)(v118 + 16);
      if (v106)
      {
        v107 = v118 + 32;
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_1AE57C238(v107, (uint64_t)v121);
          v108 = v122;
          v109 = v123;
          sub_1AE4F9858(v121, v122);
          result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v109 + 24))(&v119, v108, v109);
          if (!_Records_GDEntityPredicate_records)
            goto LABEL_241;
          if (*((uint64_t *)_Records_GDEntityPredicate_records + 334) >= 2674)
            goto LABEL_211;
          if (*((uint64_t *)_Records_GDEntityPredicate_records + 335) >= 3558)
            goto LABEL_212;
          if (!_Records_GDEntityPredicate_predicateIds)
            goto LABEL_242;
          v111 = v119;
          v110 = v120;
          result = sub_1AE925F8C();
          if (!_Records_GDEntityPredicate_labels)
            goto LABEL_243;
          v113 = result;
          v114 = v112;
          sub_1AE925F8C();
          if (v111 == v113 && v110 == v114)
            goto LABEL_188;
          v116 = sub_1AE926D60();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v121);
          if ((v116 & 1) != 0)
            goto LABEL_189;
          v107 += 40;
          if (!--v106)
            goto LABEL_86;
        }
      }
LABEL_187:
      sub_1AE733648(v117);
      return 0;
    }
LABEL_172:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AE525EF8((uint64_t)v124);
    goto LABEL_173;
  }
LABEL_249:
  __break(1u);
  return result;
}

uint64_t sub_1AE779124(_QWORD *a1)
{
  uint64_t v1;

  return sub_1AE776C88(a1, *(_QWORD **)(v1 + 16), *(_QWORD **)(v1 + 24)) & 1;
}

uint64_t sub_1AE779140(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  char v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  char v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD v294[3];
  uint64_t v295;
  _OWORD v296[2];
  __int16 v297;

  if (!_Records_GDEntityPredicate_records)
  {
LABEL_216:
    __break(1u);
    goto LABEL_217;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 466) >= 2674)
  {
LABEL_156:
    __break(1u);
    goto LABEL_157;
  }
  v2 = *((_QWORD *)_Records_GDEntityPredicate_records + 467);
  v4 = 3558;
  if (v2 >= 3558)
  {
LABEL_157:
    __break(1u);
LABEL_158:
    sub_1AE4F67AC();
    result = sub_1AE4F9038();
    goto LABEL_159;
  }
  v284 = a2;
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_217:
    __break(1u);
    goto LABEL_218;
  }
  v5 = *(_OWORD *)(result + 16);
  v296[0] = *(_OWORD *)result;
  v296[1] = v5;
  v297 = *(_WORD *)(result + 32);
  v277 = result;
  sub_1AE73348C(result);
  sub_1AE5C7880((uint64_t)v296);
  result = sub_1AE779DDC();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_218:
    __break(1u);
LABEL_219:
    __break(1u);
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
    goto LABEL_222;
  }
  v7 = result;
  v8 = v6;
  sub_1AE925F8C();
  v3 = *((_QWORD *)&v296[0] + 1);
  v9 = v7 == *(_QWORD *)&v296[0] && v8 == *((_QWORD *)&v296[0] + 1);
  if (v9)
  {
    sub_1AE4F66E8();
    result = sub_1AE4F76D8();
    goto LABEL_73;
  }
  v10 = sub_1AE4FB6F0();
  sub_1AE4F66E8();
  result = sub_1AE4F76D8();
  if ((v10 & 1) != 0)
  {
LABEL_73:
    v81 = sub_1AE779C84(result, v11, v12, v13, v14, v15, v16, v17, v277, v284, v292, v293);
    sub_1AE4F7980(v81, v82, v83, v84, v85, v86, v87, v88, v278, v286);
    if (!v2)
      goto LABEL_194;
    v89 = sub_1AE779CFC();
    while (1)
    {
      sub_1AE779C78(v89, v90, v91, v92, v93, v94, v95);
      v96 = v295;
      v97 = sub_1AE4F9858(v294, v295);
      result = (uint64_t)sub_1AE500EF0((uint64_t)v97, v98);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_206;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 175) >= 2674)
      {
        __break(1u);
LABEL_137:
        __break(1u);
        goto LABEL_138;
      }
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 176) >= 3558)
        goto LABEL_137;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_207;
      result = sub_1AE501E90();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_208;
      sub_1AE4FBE20();
      sub_1AE779D74();
      if (v9 && v3 == v96)
      {
LABEL_195:
        sub_1AE4F67AC();
        sub_1AE4F66E8();
        v270 = sub_1AE4F6824();
        sub_1AE769C80(v270, v271, v272, v273, v274, v275, v276);
LABEL_196:
        swift_bridgeObjectRelease();
        sub_1AE73352C(v277);
        return 1;
      }
      v100 = sub_1AE4FB6F0();
      sub_1AE4F67AC();
      sub_1AE4F9038();
      sub_1AE4F66E8();
      v101 = sub_1AE4F76D8();
      sub_1AE769C80(v101, v102, v103, v104, v105, v106, v107);
      if ((v100 & 1) != 0)
        goto LABEL_196;
      sub_1AE779D88();
      if (v9)
      {
LABEL_87:
        swift_bridgeObjectRelease();
        goto LABEL_194;
      }
    }
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_226:
    __break(1u);
    goto LABEL_227;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 472) >= 2674)
  {
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }
  v2 = *((_QWORD *)_Records_GDEntityPredicate_records + 473);
  if (v2 >= 3558)
  {
LABEL_177:
    __break(1u);
    goto LABEL_178;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_227:
    __break(1u);
    goto LABEL_228;
  }
  result = sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_228:
    __break(1u);
LABEL_229:
    __break(1u);
    goto LABEL_230;
  }
  sub_1AE50A5F4();
  sub_1AE779DB0();
  if (v9 && v8 == v3)
  {
    sub_1AE4F67AC();
    result = sub_1AE4F9038();
    goto LABEL_89;
  }
  v19 = sub_1AE4FB6F0();
  sub_1AE4F67AC();
  result = sub_1AE4F76D8();
  if ((v19 & 1) != 0)
  {
LABEL_89:
    v108 = sub_1AE779C84(result, v20, v21, v22, v23, v24, v25, v26, v277, v284, v292, v293);
    sub_1AE4F7980(v108, v109, v110, v111, v112, v113, v114, v115, v279, v287);
    if (!v2)
      goto LABEL_194;
    v116 = sub_1AE779CFC();
    while (1)
    {
      sub_1AE779C78(v116, v117, v118, v119, v120, v121, v122);
      v123 = v295;
      v124 = sub_1AE4F9858(v294, v295);
      result = (uint64_t)sub_1AE500EF0((uint64_t)v124, v125);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_213;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 220) >= 2674)
      {
        __break(1u);
LABEL_155:
        __break(1u);
        __break(1u);
        goto LABEL_156;
      }
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 221) >= 3558)
        goto LABEL_155;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_214;
      result = sub_1AE501E90();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_215;
      sub_1AE4FBE20();
      sub_1AE779D74();
      if (v9 && v3 == v123)
        goto LABEL_195;
      v127 = sub_1AE4FB6F0();
      sub_1AE4F67AC();
      sub_1AE4F9038();
      sub_1AE4F66E8();
      v128 = sub_1AE4F76D8();
      sub_1AE769C80(v128, v129, v130, v131, v132, v133, v134);
      if ((v127 & 1) != 0)
        goto LABEL_196;
      sub_1AE779D88();
      if (v9)
        goto LABEL_87;
    }
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_234:
    __break(1u);
    goto LABEL_235;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 469) >= 2674)
  {
LABEL_200:
    __break(1u);
    goto LABEL_201;
  }
  v2 = *((_QWORD *)_Records_GDEntityPredicate_records + 470);
  if (v2 >= 3558)
  {
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
    __break(1u);
LABEL_204:
    __break(1u);
    goto LABEL_205;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_235:
    __break(1u);
    goto LABEL_236;
  }
  result = sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_236:
    __break(1u);
LABEL_237:
    __break(1u);
LABEL_238:
    __break(1u);
LABEL_239:
    __break(1u);
    goto LABEL_240;
  }
  sub_1AE50A5F4();
  sub_1AE779DB0();
  if (v9 && v8 == v3)
  {
    sub_1AE4F67AC();
    result = sub_1AE4F9038();
    goto LABEL_105;
  }
  v28 = sub_1AE4FB6F0();
  sub_1AE4F67AC();
  result = sub_1AE4F76D8();
  if ((v28 & 1) != 0)
  {
LABEL_105:
    v135 = sub_1AE779C84(result, v29, v30, v31, v32, v33, v34, v35, v277, v284, v292, v293);
    sub_1AE4F7980(v135, v136, v137, v138, v139, v140, v141, v142, v280, v288);
    if (!v2)
      goto LABEL_194;
    v143 = sub_1AE779CFC();
    while (1)
    {
      sub_1AE779C78(v143, v144, v145, v146, v147, v148, v149);
      v150 = v295;
      v151 = sub_1AE4F9858(v294, v295);
      result = (uint64_t)sub_1AE500EF0((uint64_t)v151, v152);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_223;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 469) >= 2674)
      {
        __break(1u);
LABEL_175:
        __break(1u);
        __break(1u);
        goto LABEL_176;
      }
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 470) >= 3558)
        goto LABEL_175;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_224;
      result = sub_1AE501E90();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_225;
      sub_1AE4FBE20();
      sub_1AE779D74();
      if (v9 && v3 == v150)
        goto LABEL_195;
      v154 = sub_1AE4FB6F0();
      sub_1AE4F67AC();
      sub_1AE4F9038();
      sub_1AE4F66E8();
      v155 = sub_1AE4F76D8();
      sub_1AE769C80(v155, v156, v157, v158, v159, v160, v161);
      if ((v154 & 1) != 0)
        goto LABEL_196;
      sub_1AE779D88();
      if (v9)
        goto LABEL_87;
    }
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_240:
    __break(1u);
    goto LABEL_241;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 541) >= 2674)
    goto LABEL_204;
  v36 = *((_QWORD *)_Records_GDEntityPredicate_records + 542);
  if (v36 >= 3558)
  {
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
    goto LABEL_212;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_241:
    __break(1u);
    goto LABEL_242;
  }
  result = sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  sub_1AE50A5F4();
  sub_1AE779DB0();
  if (v9 && v8 == v3)
  {
    sub_1AE4F67AC();
    result = sub_1AE4F9038();
    goto LABEL_121;
  }
  v38 = sub_1AE4FB6F0();
  sub_1AE4F67AC();
  result = sub_1AE4F76D8();
  if ((v38 & 1) != 0)
  {
LABEL_121:
    v162 = sub_1AE779C84(result, v39, v40, v41, v42, v43, v44, v45, v277, v284, v292, v293);
    sub_1AE4F7980(v162, v163, v164, v165, v166, v167, v168, v169, v281, v289);
    if (!v36)
      goto LABEL_194;
    v170 = sub_1AE779CFC();
    while (1)
    {
      sub_1AE779C78(v170, v171, v172, v173, v174, v175, v176);
      v177 = v295;
      v178 = sub_1AE4F9858(v294, v295);
      result = (uint64_t)sub_1AE500EF0((uint64_t)v178, v179);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_231;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 538) >= 2674)
      {
        __break(1u);
LABEL_199:
        __break(1u);
        goto LABEL_200;
      }
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 539) >= 3558)
        goto LABEL_199;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_232;
      result = sub_1AE501E90();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_233;
      sub_1AE4FBE20();
      sub_1AE779D74();
      if (v9 && v3 == v177)
        goto LABEL_195;
      v181 = sub_1AE4FB6F0();
      sub_1AE4F67AC();
      sub_1AE4F9038();
      sub_1AE4F66E8();
      v182 = sub_1AE4F76D8();
      sub_1AE769C80(v182, v183, v184, v185, v186, v187, v188);
      if ((v181 & 1) != 0)
        goto LABEL_196;
      sub_1AE779D88();
      if (v9)
        goto LABEL_87;
    }
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_246:
    __break(1u);
    goto LABEL_247;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 457) >= 2674)
    goto LABEL_211;
  v2 = *((_QWORD *)_Records_GDEntityPredicate_records + 458);
  if (v2 >= 3558)
  {
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
    goto LABEL_216;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_247:
    __break(1u);
    goto LABEL_248;
  }
  result = sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
LABEL_250:
    __break(1u);
LABEL_251:
    __break(1u);
    goto LABEL_252;
  }
  sub_1AE50A5F4();
  sub_1AE779DB0();
  if (v9 && v8 == v3)
  {
LABEL_138:
    sub_1AE4F67AC();
    result = sub_1AE4F9038();
    goto LABEL_139;
  }
  v47 = sub_1AE4FB6F0();
  sub_1AE4F67AC();
  result = sub_1AE4F76D8();
  if ((v47 & 1) != 0)
  {
LABEL_139:
    v189 = sub_1AE779C84(result, v48, v49, v50, v51, v52, v53, v54, v277, v284, v292, v293);
    sub_1AE4F7980(v189, v190, v191, v192, v193, v194, v195, v196, v282, v290);
    if (!v2)
      goto LABEL_194;
    v197 = sub_1AE779CFC();
    while (1)
    {
      sub_1AE779C78(v197, v198, v199, v200, v201, v202, v203);
      v204 = v295;
      v205 = sub_1AE4F9858(v294, v295);
      result = (uint64_t)sub_1AE500EF0((uint64_t)v205, v206);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_237;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 7) >= 2674)
        goto LABEL_202;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 8) >= 3558)
        goto LABEL_203;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_238;
      result = sub_1AE501E90();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_239;
      sub_1AE4FBE20();
      sub_1AE779D74();
      if (v9 && v3 == v204)
        goto LABEL_195;
      v208 = sub_1AE4FB6F0();
      sub_1AE4F67AC();
      sub_1AE4F9038();
      sub_1AE4F66E8();
      v209 = sub_1AE4F76D8();
      sub_1AE769C80(v209, v210, v211, v212, v213, v214, v215);
      if ((v208 & 1) != 0)
        goto LABEL_196;
      sub_1AE779D88();
      if (v9)
        goto LABEL_87;
    }
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_252:
    __break(1u);
    goto LABEL_253;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 460) >= 2674)
    goto LABEL_221;
  v2 = *((_QWORD *)_Records_GDEntityPredicate_records + 461);
  if (v2 >= 3558)
  {
LABEL_222:
    __break(1u);
LABEL_223:
    __break(1u);
LABEL_224:
    __break(1u);
LABEL_225:
    __break(1u);
    goto LABEL_226;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_253:
    __break(1u);
    goto LABEL_254;
  }
  result = sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_254:
    __break(1u);
    goto LABEL_255;
  }
  sub_1AE50A5F4();
  sub_1AE779DB0();
  if (v9 && v8 == v3)
    goto LABEL_158;
  v56 = sub_1AE4FB6F0();
  sub_1AE4F67AC();
  result = sub_1AE4F76D8();
  if ((v56 & 1) != 0)
  {
LABEL_159:
    v216 = sub_1AE779C84(result, v57, v58, v59, v60, v61, v62, v63, v277, v284, v292, v293);
    sub_1AE4F7980(v216, v217, v218, v219, v220, v221, v222, v223, v283, v291);
    if (!v2)
      goto LABEL_194;
    v224 = sub_1AE779CFC();
    while (1)
    {
      sub_1AE779C78(v224, v225, v226, v227, v228, v229, v230);
      v231 = v295;
      v232 = sub_1AE4F9858(v294, v295);
      result = (uint64_t)sub_1AE500EF0((uint64_t)v232, v233);
      if (!_Records_GDEntityPredicate_records)
        goto LABEL_243;
      if (*((uint64_t *)_Records_GDEntityPredicate_records + 388) >= 2674)
        goto LABEL_209;
      if (*((_QWORD *)_Records_GDEntityPredicate_records + 389) >= v4)
        goto LABEL_210;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_244;
      result = sub_1AE501E90();
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_245;
      sub_1AE4FBE20();
      sub_1AE779D74();
      if (v9 && v3 == v231)
        goto LABEL_195;
      v235 = sub_1AE4FB6F0();
      sub_1AE4F67AC();
      sub_1AE4F9038();
      sub_1AE4F66E8();
      v236 = sub_1AE4F76D8();
      sub_1AE769C80(v236, v237, v238, v239, v240, v241, v242);
      if ((v235 & 1) != 0)
        goto LABEL_196;
      sub_1AE779D88();
      if (v9)
        goto LABEL_87;
    }
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_255:
    __break(1u);
    goto LABEL_256;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 463) >= 2674)
    goto LABEL_229;
  v2 = *((_QWORD *)_Records_GDEntityPredicate_records + 464);
  if (v2 >= 3558)
  {
LABEL_230:
    __break(1u);
LABEL_231:
    __break(1u);
LABEL_232:
    __break(1u);
LABEL_233:
    __break(1u);
    goto LABEL_234;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_256:
    __break(1u);
    goto LABEL_257;
  }
  result = sub_1AE4FCA60();
  if (_Records_GDEntityPredicate_labels)
  {
    sub_1AE50A5F4();
    sub_1AE779DB0();
    if (!v9 || v8 != v3)
    {
      v3 = sub_1AE4FB6F0();
      sub_1AE4F67AC();
      v65 = sub_1AE4F76D8();
      v73 = sub_1AE779C84(v65, v66, v67, v68, v69, v70, v71, v72, v277, v284, v292, v293);
      if ((v3 & 1) == 0)
        goto LABEL_194;
LABEL_179:
      sub_1AE4F7980(v73, v74, v75, v76, v77, v78, v79, v80, v277, v285);
      if (v2)
      {
        v251 = sub_1AE779CFC();
        while (1)
        {
          sub_1AE779C78(v251, v252, v253, v254, v255, v256, v257);
          v258 = v295;
          v259 = sub_1AE4F9858(v294, v295);
          result = (uint64_t)sub_1AE500EF0((uint64_t)v259, v260);
          if (!_Records_GDEntityPredicate_records)
            goto LABEL_249;
          if (*((uint64_t *)_Records_GDEntityPredicate_records + 334) >= 2674)
            goto LABEL_219;
          if (*((uint64_t *)_Records_GDEntityPredicate_records + 335) >= 3558)
            goto LABEL_220;
          if (!_Records_GDEntityPredicate_predicateIds)
            goto LABEL_250;
          result = sub_1AE501E90();
          if (!_Records_GDEntityPredicate_labels)
            goto LABEL_251;
          sub_1AE4FBE20();
          sub_1AE779D74();
          if (v9 && v3 == v258)
            goto LABEL_195;
          v262 = sub_1AE4FB6F0();
          sub_1AE4F67AC();
          sub_1AE4F9038();
          sub_1AE4F66E8();
          v263 = sub_1AE4F76D8();
          sub_1AE769C80(v263, v264, v265, v266, v267, v268, v269);
          if ((v262 & 1) != 0)
            goto LABEL_196;
          sub_1AE779D88();
          if (v9)
            goto LABEL_87;
        }
      }
LABEL_194:
      sub_1AE73352C(v277);
      return 0;
    }
LABEL_178:
    sub_1AE4F67AC();
    v243 = sub_1AE4F9038();
    v73 = sub_1AE779C84(v243, v244, v245, v246, v247, v248, v249, v250, v277, v284, v292, v293);
    goto LABEL_179;
  }
LABEL_257:
  __break(1u);
  return result;
}

uint64_t sub_1AE779C60(_QWORD *a1)
{
  return sub_1AE779124(a1) & 1;
}

uint64_t sub_1AE779C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  return sub_1AE57C238(v7, (uint64_t)va);
}

uint64_t sub_1AE779C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  return sub_1AE525EF8((uint64_t)va);
}

uint64_t sub_1AE779CA4@<X0>(__int128 *a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[1];
  *(_WORD *)(v1 - 112) = *((_WORD *)a1 + 16);
  v4 = v1 - 208;
  *(_OWORD *)(v4 + 64) = v2;
  *(_OWORD *)(v4 + 80) = v3;
  return sub_1AE7335EC(v1 - 208);
}

__n128 sub_1AE779CC4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD *)(a1 - 256) + (v1 << 6);
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  v6 = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v2 - 167) = *(_OWORD *)(v3 + 41);
  *(_OWORD *)(v2 - 192) = v5;
  *(_OWORD *)(v2 - 176) = v6;
  *(__n128 *)(v2 - 208) = result;
  return result;
}

uint64_t sub_1AE779CEC()
{
  return sub_1AE925DC4();
}

uint64_t sub_1AE779CFC()
{
  return swift_bridgeObjectRetain();
}

void sub_1AE779D04()
{
  sub_1AE52154C();
}

uint64_t sub_1AE779D14()
{
  return sub_1AE925F74();
}

uint64_t sub_1AE779D20()
{
  uint64_t v0;

  return sub_1AE733648(v0 - 160);
}

uint64_t sub_1AE779D34()
{
  return sub_1AE925F74();
}

__n128 sub_1AE779D3C(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 - 288) = *(_OWORD *)a1;
  *(_OWORD *)(v1 - 272) = v3;
  *(_QWORD *)(v1 - 256) = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t sub_1AE779D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(a1, a2, *(_QWORD *)(a3 - 256));
}

uint64_t sub_1AE779D80()
{
  uint64_t v0;

  return sub_1AE525EF8(v0 - 144);
}

uint64_t sub_1AE779D94()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  return sub_1AE59CC40(*(_QWORD *)(v2 - 304), v1, v0);
}

uint64_t sub_1AE779DA8@<X0>(uint64_t a1@<X8>)
{
  return sub_1AE769C00(*(_QWORD *)(a1 - 256));
}

void sub_1AE779DBC(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;

  sub_1AE7698D4(a1, v3, a2, v4, 0, a3);
}

uint64_t sub_1AE779DD0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  return sub_1AE59CC30(a1, v1, v2);
}

uint64_t sub_1AE779DDC()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE779DE4()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1AE779DEC()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_1AE779DF4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(result + 16) = v1;
  *(_QWORD *)(v5 - 424) = result;
  v6 = result + 16 * v3;
  *(_QWORD *)(v6 + 32) = v2;
  *(_QWORD *)(v6 + 40) = v4;
  return result;
}

uint64_t sub_1AE779E0C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  return sub_1AE59CC40(v1, v2, v0);
}

uint64_t sub_1AE779E2C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  return sub_1AE59CC30(v1, v2, v0);
}

uint64_t sub_1AE779E3C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  return sub_1AE59CC40(v1, v2, v0);
}

uint64_t sub_1AE779E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_1AE77BFF8(a1, a2, v4, a3, *(_QWORD **)(a4 - 256));
}

uint64_t sub_1AE779E6C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  return sub_1AE59CC40(v0, v1, v2);
}

uint64_t sub_1AE779E7C()
{
  uint64_t v0;

  return sub_1AE733648(v0 - 208);
}

uint64_t sub_1AE779E94@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(*(_QWORD *)(a1 - 256) + 48);
}

void sub_1AE779EA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v0 + 16) = v2;
  v5 = v0 + 16 * v4;
  *(_QWORD *)(v5 + 32) = v3;
  *(_QWORD *)(v5 + 40) = v1;
}

void sub_1AE779F04(uint64_t *a1)
{
  sub_1AE773F7C(a1);
}

uint64_t sub_1AE779F0C()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_1AE779F18()
{
  uint64_t v0;

  return sub_1AE769C00(v0);
}

uint64_t sub_1AE779F20(uint64_t a1)
{
  uint64_t v1;

  return sub_1AE769BBC(a1, v1);
}

void sub_1AE779F28()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 384) = 0;
  *(_QWORD *)(v0 - 376) = 0;
}

uint64_t sub_1AE779F3C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1AE769B78(*(_QWORD *)(a2 - 256), a1);
}

uint64_t sub_1AE779F6C()
{
  uint64_t v0;

  return _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 - 200);
}

uint64_t sub_1AE779F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AE769BBC(a1, *(_QWORD *)(a2 - 256));
}

uint64_t sub_1AE779F7C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE779F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_QWORD *)(a14 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE779F90(uint64_t a1)
{
  uint64_t v1;
  char v2;

  return sub_1AE59CC30(a1, v1, v2);
}

uint64_t sub_1AE779F9C(uint64_t a1, uint64_t a2)
{
  char v2;

  return sub_1AE59CC30(a1, a2, v2);
}

uint64_t sub_1AE779FA4()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE779FAC()
{
  uint64_t v0;

  return sub_1AE5C7880(v0 - 144);
}

__n128 sub_1AE779FB4(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 - 144);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 - 160);
  *(_OWORD *)(a1 + 32) = v2;
  result = *(__n128 *)(v1 - 128);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1AE779FC8()
{
  return swift_bridgeObjectRetain_n();
}

unint64_t sub_1AE779FD4()
{
  return sub_1AE568D9C();
}

uint64_t sub_1AE779FDC()
{
  return sub_1AE926118();
}

void sub_1AE779FE4()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 352) = 0;
  *(_QWORD *)(v0 - 344) = 0;
}

uint64_t sub_1AE779FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t result;
  char v22;
  char v24;
  char v26;
  uint64_t v27;
  char v29;
  char v31;
  uint64_t v32;
  char v34;
  char v36;
  char v38;
  char v40;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v52;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v75;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v87;
  uint64_t v89;
  uint64_t v91;

  if (!_Records_GDEntityPredicate_records)
    goto LABEL_151;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 4) >= 2674)
  {
    __break(1u);
    goto LABEL_84;
  }
  v7 = *((_QWORD *)_Records_GDEntityPredicate_records + 5);
  v5 = 3558;
  if (v7 >= 3558)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  v4 = *(_QWORD *)(v4 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AE925F8C();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_153:
    __break(1u);
LABEL_154:
    sub_1AE4F67AC();
    sub_1AE4F6710();
    goto LABEL_155;
  }
  sub_1AE772940();
  sub_1AE509B18();
  v8 = v8 && v6 == v4;
  if (v8)
  {
    sub_1AE4F67AC();
    sub_1AE4F6718();
    goto LABEL_18;
  }
  v9 = sub_1AE5003FC();
  sub_1AE4F6718();
  sub_1AE4F6710();
  if ((v9 & 1) != 0)
  {
LABEL_18:
    sub_1AE4F67AC();
    sub_1AE4F9038();
    sub_1AE509610();
LABEL_19:
    sub_1AE925F74();
LABEL_20:
    sub_1AE925F74();
    return v91;
  }
  static EntityPredicate.citizenOf.getter();
  sub_1AE77ADE8(v10, v11, v12, v13, v14, v15, v16, v17, v82, a1, a2, a3, a4, v91);
  if (v8 && v7 == v4)
  {
    sub_1AE4F67AC();
    sub_1AE4F6710();
    sub_1AE4FD924();
    goto LABEL_22;
  }
  v19 = sub_1AE5003FC();
  sub_1AE4F6710();
  sub_1AE4F6718();
  if ((v19 & 1) != 0)
  {
    sub_1AE4F67AC();
    sub_1AE4F9038();
LABEL_22:
    sub_1AE505794();
    sub_1AE92691C();
    sub_1AE4FF004();
    sub_1AE4F6648();
    v91 = v83;
    sub_1AE508828();
    goto LABEL_19;
  }
  if (!_Records_GDEntityPredicate_records)
    goto LABEL_160;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 184) >= 2674)
  {
    __break(1u);
    goto LABEL_144;
  }
  v7 = *((_QWORD *)_Records_GDEntityPredicate_records + 185);
  if (v7 >= 3558)
  {
LABEL_144:
    __break(1u);
LABEL_145:
    sub_1AE4F67AC();
    sub_1AE4F6710();
    goto LABEL_146;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_161:
    __break(1u);
    goto LABEL_162;
  }
  sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_162:
    __break(1u);
    __break(1u);
LABEL_163:
    __break(1u);
    goto LABEL_164;
  }
  sub_1AE772940();
  sub_1AE509B18();
  if (v8 && v6 == v4)
  {
    sub_1AE4F67AC();
    sub_1AE4F6718();
    goto LABEL_55;
  }
  v22 = sub_1AE5003FC();
  sub_1AE4F6718();
  result = sub_1AE4F6710();
  if ((v22 & 1) != 0)
  {
LABEL_55:
    sub_1AE4F67AC();
    sub_1AE4F9038();
    sub_1AE50A068();
    sub_1AE4FF004();
    sub_1AE4F6648();
    v91 = v83;
LABEL_56:
    sub_1AE5090F0();
    goto LABEL_19;
  }
  if (!_Records_GDEntityPredicate_records)
  {
    __break(1u);
    goto LABEL_168;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 190) >= 2674)
  {
    __break(1u);
    goto LABEL_148;
  }
  v7 = *((_QWORD *)_Records_GDEntityPredicate_records + 191);
  if (v7 >= 3558)
  {
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_168:
    __break(1u);
    goto LABEL_169;
  }
  result = sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_169:
    __break(1u);
    goto LABEL_170;
  }
  sub_1AE772940();
  sub_1AE509B18();
  if (v8 && v6 == v4)
  {
    sub_1AE4F67AC();
    sub_1AE4F6718();
    goto LABEL_58;
  }
  v24 = sub_1AE5003FC();
  sub_1AE4F6718();
  sub_1AE4F6710();
  if ((v24 & 1) != 0)
  {
LABEL_58:
    sub_1AE4F67AC();
    sub_1AE4F9038();
    sub_1AE77AE0C();
    sub_1AE4FF004();
    sub_1AE4F6648();
    sub_1AE50A60C();
    goto LABEL_56;
  }
  if (!_Records_GDEntityPredicate_records)
  {
    __break(1u);
    goto LABEL_191;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 175) >= 2674)
    goto LABEL_149;
  v6 = *((_QWORD *)_Records_GDEntityPredicate_records + 176);
  if (v6 >= 3558)
  {
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
    goto LABEL_152;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_191:
    __break(1u);
    goto LABEL_192;
  }
  sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
    goto LABEL_194;
  }
  sub_1AE4FD3B8();
  sub_1AE4F6C98();
  if (v8 && v7 == v4)
    goto LABEL_80;
  v26 = sub_1AE5003FC();
  sub_1AE4F6710();
  sub_1AE4F6718();
  if ((v26 & 1) != 0)
  {
LABEL_53:
    v27 = v83;
LABEL_81:
    sub_1AE4F67AC();
    sub_1AE4F9038();
    sub_1AE77AE0C();
    sub_1AE50837C();
    sub_1AE4F6648();
    v91 = v27;
LABEL_82:
    sub_1AE5090F0();
    sub_1AE925F74();
    goto LABEL_20;
  }
  if (!_Records_GDEntityPredicate_records)
  {
    __break(1u);
    goto LABEL_203;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 466) >= 2674)
  {
    __break(1u);
    goto LABEL_157;
  }
  v6 = *((_QWORD *)_Records_GDEntityPredicate_records + 467);
  if (v6 >= 3558)
  {
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
    goto LABEL_159;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_203:
    __break(1u);
    goto LABEL_204;
  }
  sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_204:
    __break(1u);
    goto LABEL_205;
  }
  sub_1AE4FD3B8();
  sub_1AE4F6C98();
  if (v8 && v7 == v4)
  {
LABEL_80:
    v27 = v83;
    sub_1AE4F67AC();
    sub_1AE4F6710();
    goto LABEL_81;
  }
  v29 = sub_1AE5003FC();
  sub_1AE4F6710();
  result = sub_1AE4F6718();
  if ((v29 & 1) != 0)
    goto LABEL_53;
  if (!_Records_GDEntityPredicate_records)
  {
    __break(1u);
    goto LABEL_217;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 241) >= 2674)
    goto LABEL_158;
  v6 = *((_QWORD *)_Records_GDEntityPredicate_records + 242);
  if (v6 >= 3558)
  {
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
    goto LABEL_161;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_217:
    __break(1u);
    goto LABEL_218;
  }
  result = sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_218:
    __break(1u);
    goto LABEL_219;
  }
  sub_1AE4FD3B8();
  sub_1AE4F6C98();
  if (v8 && v7 == v4)
    goto LABEL_141;
  v31 = sub_1AE5003FC();
  sub_1AE4F6710();
  sub_1AE4F6718();
  if ((v31 & 1) != 0)
  {
LABEL_79:
    v32 = v83;
LABEL_142:
    sub_1AE4F67AC();
    sub_1AE4F9038();
    sub_1AE505794();
    sub_1AE92691C();
    sub_1AE50837C();
    sub_1AE4F6648();
    v91 = v32;
    goto LABEL_82;
  }
LABEL_85:
  if (!_Records_GDEntityPredicate_records)
  {
    __break(1u);
    goto LABEL_245;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 469) >= 2674)
    goto LABEL_163;
  if (*((_QWORD *)_Records_GDEntityPredicate_records + 470) >= v5)
  {
LABEL_164:
    __break(1u);
LABEL_165:
    sub_1AE4F67AC();
    sub_1AE4F6710();
    sub_1AE4FD924();
    goto LABEL_166;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_246:
    __break(1u);
LABEL_247:
    sub_1AE4F67AC();
    sub_1AE4F6718();
    sub_1AE4FD924();
    goto LABEL_215;
  }
  sub_1AE4FD3B8();
  sub_1AE4F6C98();
  if (v8 && v7 == v4)
  {
LABEL_141:
    v32 = v83;
    sub_1AE4F67AC();
    sub_1AE4F6710();
    goto LABEL_142;
  }
  v34 = sub_1AE5003FC();
  sub_1AE4F6710();
  result = sub_1AE4F6718();
  if ((v34 & 1) != 0)
    goto LABEL_79;
  if (!_Records_GDEntityPredicate_records)
  {
    __break(1u);
    goto LABEL_250;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 7) >= 2674)
  {
    __break(1u);
    goto LABEL_187;
  }
  if (*((_QWORD *)_Records_GDEntityPredicate_records + 8) >= v5)
  {
LABEL_187:
    __break(1u);
LABEL_188:
    sub_1AE4F67AC();
    sub_1AE4F6718();
    goto LABEL_55;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_250:
    __break(1u);
    goto LABEL_251;
  }
  result = sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_251:
    __break(1u);
    __break(1u);
LABEL_252:
    __break(1u);
    goto LABEL_253;
  }
  sub_1AE4FD3B8();
  sub_1AE4F6C98();
  if (v8 && v7 == v4)
    goto LABEL_145;
  v36 = sub_1AE5003FC();
  sub_1AE4F6710();
  result = sub_1AE4F6718();
  if ((v36 & 1) != 0)
  {
LABEL_146:
    sub_1AE4F67AC();
    sub_1AE4F9038();
    sub_1AE77ADF8();
    sub_1AE4FF004();
    sub_1AE4F6648();
    sub_1AE4F9558();
    goto LABEL_19;
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_254:
    __break(1u);
    goto LABEL_255;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 457) >= 2674)
    goto LABEL_193;
  if (*((_QWORD *)_Records_GDEntityPredicate_records + 458) >= v5)
  {
LABEL_194:
    __break(1u);
LABEL_195:
    sub_1AE4F67AC();
    sub_1AE4F6710();
    sub_1AE4FD924();
    goto LABEL_196;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_255:
    __break(1u);
    goto LABEL_256;
  }
  result = sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_256:
    __break(1u);
    goto LABEL_257;
  }
  sub_1AE4FD3B8();
  sub_1AE4F6C98();
  if (v8 && v7 == v4)
    goto LABEL_145;
  v38 = sub_1AE5003FC();
  sub_1AE4F6710();
  result = sub_1AE4F6718();
  if ((v38 & 1) != 0)
    goto LABEL_146;
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_257:
    __break(1u);
    goto LABEL_258;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 388) >= 2674)
  {
    __break(1u);
    goto LABEL_213;
  }
  if (*((_QWORD *)_Records_GDEntityPredicate_records + 389) >= v5)
  {
LABEL_213:
    __break(1u);
LABEL_214:
    sub_1AE4F67AC();
    sub_1AE4F6710();
    sub_1AE4FD924();
    goto LABEL_215;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_258:
    __break(1u);
    goto LABEL_259;
  }
  result = sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_259:
    __break(1u);
    goto LABEL_260;
  }
  sub_1AE4FD3B8();
  sub_1AE4F6C98();
  if (v8 && v7 == v4)
    goto LABEL_154;
  v40 = sub_1AE5003FC();
  sub_1AE4F6710();
  result = sub_1AE4F6718();
  if ((v40 & 1) != 0)
  {
LABEL_155:
    sub_1AE4F67AC();
    sub_1AE4F9038();
    sub_1AE505794();
    sub_1AE92691C();
    sub_1AE4FF004();
    sub_1AE4F6648();
    sub_1AE4F9558();
    goto LABEL_19;
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_260:
    __break(1u);
    goto LABEL_261;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 460) >= 2674)
  {
    __break(1u);
    goto LABEL_241;
  }
  v6 = *((_QWORD *)_Records_GDEntityPredicate_records + 461);
  if (v6 >= v5)
  {
LABEL_241:
    __break(1u);
LABEL_242:
    sub_1AE4F67AC();
    sub_1AE4F6718();
    goto LABEL_243;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_261:
    __break(1u);
    goto LABEL_262;
  }
  result = sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
    goto LABEL_264;
  }
  sub_1AE4FD3B8();
  sub_1AE4F6C98();
  if (v8 && v7 == v4)
    goto LABEL_154;
  v42 = sub_1AE5003FC();
  sub_1AE4F6710();
  sub_1AE4F6718();
  if ((v42 & 1) != 0)
    goto LABEL_155;
  static EntityPredicate.attendeeIdentifier.getter();
  sub_1AE77ADE8(v43, v44, v45, v46, v47, v48, v49, v50, v82, v83, v85, v87, v89, v91);
  if (v8 && v7 == v4)
    goto LABEL_165;
  v52 = sub_1AE5003FC();
  sub_1AE4F6710();
  result = sub_1AE4F6718();
  if ((v52 & 1) != 0)
  {
    sub_1AE4F67AC();
    sub_1AE4F9038();
LABEL_166:
    sub_1AE77ADF8();
    sub_1AE4FF004();
    sub_1AE4F6648();
    sub_1AE4F9558();
    goto LABEL_19;
  }
LABEL_170:
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 544) >= 2674)
    goto LABEL_252;
  if (*((_QWORD *)_Records_GDEntityPredicate_records + 545) >= v5)
  {
LABEL_253:
    __break(1u);
    goto LABEL_254;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_268:
    __break(1u);
    goto LABEL_269;
  }
  result = sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_269:
    __break(1u);
    goto LABEL_270;
  }
  sub_1AE508C84();
  sub_1AE509B18();
  if (v8 && v6 == v4)
    goto LABEL_188;
  v54 = sub_1AE5003FC();
  sub_1AE4F6718();
  sub_1AE4F6710();
  if ((v54 & 1) != 0)
    goto LABEL_55;
  static EntityPredicate.isAllDay.getter();
  sub_1AE77ADE8(v55, v56, v57, v58, v59, v60, v61, v62, v82, v83, v85, v87, v89, v91);
  if (v8 && v7 == v4)
    goto LABEL_195;
  v64 = sub_1AE5003FC();
  sub_1AE4F6710();
  sub_1AE4F6718();
  if ((v64 & 1) != 0)
  {
    sub_1AE4F67AC();
    sub_1AE4F9038();
LABEL_196:
    v65 = v87 == 49 && v89 == 0xE100000000000000;
    if (v65 || (sub_1AE926D60() & 1) != 0)
    {
      sub_1AE509610();
      sub_1AE508828();
    }
    else
    {
      sub_1AE505794();
      sub_1AE92691C();
      sub_1AE4FF004();
      sub_1AE4F6648();
      v91 = v83;
      sub_1AE508828();
    }
    goto LABEL_20;
  }
LABEL_205:
  static EntityPredicate.phoneNumber.getter();
  sub_1AE77ADE8(v66, v67, v68, v69, v70, v71, v72, v73, v82, v83, v85, v87, v89, v91);
  if (v8 && v7 == v4)
    goto LABEL_214;
  v75 = sub_1AE5003FC();
  sub_1AE4F6710();
  result = sub_1AE4F6718();
  if ((v75 & 1) != 0)
  {
    sub_1AE4F67AC();
    sub_1AE4F9038();
LABEL_215:
    sub_1AE505794();
    sub_1AE92691C();
    sub_1AE4FF004();
    sub_1AE4F6648();
    sub_1AE50A60C();
    goto LABEL_56;
  }
LABEL_219:
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_270:
    __break(1u);
    goto LABEL_271;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 280) >= 2674)
    goto LABEL_263;
  if (*((_QWORD *)_Records_GDEntityPredicate_records + 281) >= v5)
  {
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
    goto LABEL_266;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_271:
    __break(1u);
    goto LABEL_272;
  }
  result = sub_1AE4FCA60();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_272:
    __break(1u);
    goto LABEL_273;
  }
  sub_1AE508C84();
  sub_1AE509B18();
  if (v8 && v6 == v4)
    goto LABEL_242;
  v77 = sub_1AE5003FC();
  sub_1AE4F6718();
  result = sub_1AE4F6710();
  if ((v77 & 1) != 0)
  {
LABEL_243:
    sub_1AE4F67AC();
    sub_1AE4F9038();
    sub_1AE505794();
    sub_1AE92691C();
    sub_1AE4FF004();
    sub_1AE4F6648();
    sub_1AE50A60C();
    goto LABEL_56;
  }
  if (!_Records_GDEntityPredicate_records)
  {
LABEL_273:
    __break(1u);
    goto LABEL_274;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 100) >= 2674)
    goto LABEL_265;
  if (*((_QWORD *)_Records_GDEntityPredicate_records + 101) >= v5)
  {
LABEL_266:
    __break(1u);
    goto LABEL_267;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_274:
    __break(1u);
    goto LABEL_275;
  }
  result = sub_1AE4FCA60();
  if (_Records_GDEntityPredicate_labels)
  {
    v79 = v78;
    sub_1AE925F8C();
    sub_1AE509B18();
    if (!v8 || v79 != v4)
    {
      v81 = sub_1AE5003FC();
      sub_1AE4F67AC();
      sub_1AE4F9038();
      sub_1AE4F6718();
      sub_1AE4F6710();
      if ((v81 & 1) == 0)
      {
        sub_1AE509610();
        sub_1AE925F74();
        sub_1AE925E9C();
        sub_1AE925F74();
        sub_1AE4F6648();
        goto LABEL_19;
      }
      goto LABEL_215;
    }
    goto LABEL_247;
  }
LABEL_275:
  __break(1u);
  return result;
}

uint64_t sub_1AE77AD94()
{
  swift_bridgeObjectRelease();
  sub_1AE4F6648();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for K2TTripleTextualizer()
{
  return objc_opt_self();
}

uint64_t sub_1AE77ADE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return a14;
}

uint64_t sub_1AE77ADF8()
{
  return sub_1AE92691C();
}

uint64_t sub_1AE77AE0C()
{
  return sub_1AE92691C();
}

uint64_t sub_1AE77AE20@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, void *a7@<X6>, uint64_t *a8@<X8>)
{
  void *v8;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  BOOL v14;
  id v15;
  id v16;
  id v17;
  char v18;
  char v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  void *v27;
  BOOL v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t v45;
  _OWORD *v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  void *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  char v111;

  if (!_Records_GDEntityClass_records)
    goto LABEL_47;
  if (*(uint64_t *)(_Records_GDEntityClass_records + 0x4D0) >= 1336)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (*(uint64_t *)(_Records_GDEntityClass_records + 0x4D8) >= 2889)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v74 = a8;
  if (!_Records_GDEntityClass_classIds[0])
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v59 = *(_QWORD *)result;
  v60 = *(_QWORD *)(result + 8);
  v64 = *(_QWORD *)(result + 16);
  v8 = *(void **)(result + 32);
  v75 = *(_QWORD *)(result + 24);
  v10 = *(_QWORD *)(result + 40);
  v9 = *(void **)(result + 48);
  v76 = *(_BYTE *)(result + 56);
  v61 = *(_QWORD *)a4;
  v65 = *(_QWORD *)(a4 + 8);
  v62 = *(_QWORD *)(a4 + 16);
  v66 = *(_QWORD *)(a4 + 24);
  HIDWORD(v63) = *(unsigned __int16 *)(a4 + 32);
  v67 = *a6;
  v68 = (void *)a6[1];
  v69 = (void *)a6[2];
  v70 = (void *)a6[3];
  v11 = *(_BYTE *)(_Records_GDEntityClass_records + 0x4C8);
  swift_bridgeObjectRetain();
  sub_1AE4FB930();
  result = sub_1AE779DDC();
  if (!_Records_GDEntityClass_labels)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v107 = result;
  v108 = v12;
  v109 = sub_1AE925F8C();
  v110 = v13;
  v111 = v11;
  v14 = v109 == v10 && v13 == v9;
  if (v14 || (sub_1AE4F9570() & 1) != 0)
  {
    sub_1AE4F76D8();
    sub_1AE4F6710();
    sub_1AE4F9038();
    sub_1AE4F81B8();
LABEL_12:
    v89 = v59;
    v90 = v60;
    v91 = v64;
    v92 = v75;
    v93 = v8;
    v94 = v10;
    v95 = v9;
    v96 = v76;
    v102 = v67;
    v103 = v68;
    v104 = (uint64_t)v69;
    v105 = v70;
    v77 = type metadata accessor for K2TAgentAffiliationRelationshipTextualizer();
    sub_1AE4F66BC();
    sub_1AE4F66C4();
    sub_1AE4F6730();
    sub_1AE4FB930();
    sub_1AE4F6730();
    sub_1AE4F81B0();
    sub_1AE4FB75C();
    sub_1AE4FB75C();
    sub_1AE50668C();
    v15 = v68;
    v16 = v69;
    v17 = v70;
    result = sub_1AE776330(&v89);
LABEL_13:
    v74[3] = v77;
    v74[4] = (uint64_t)&off_1E5DAA098;
    *v74 = result;
    return result;
  }
  v89 = v75;
  v90 = (uint64_t)v8;
  sub_1AE4FBE30();
  sub_1AE77BB5C();
  v19 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AE4F67AC();
  sub_1AE4F81B8();
  result = sub_1AE4F9038();
  if ((v19 & 1) != 0)
    goto LABEL_12;
  if (!_Records_GDEntityClass_records)
    goto LABEL_50;
  if (*(uint64_t *)(_Records_GDEntityClass_records + 0x1A0) >= 1336)
    goto LABEL_43;
  if (*(uint64_t *)(_Records_GDEntityClass_records + 0x1A8) >= 2889)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (!_Records_GDEntityClass_classIds[0])
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v20 = (void *)*(unsigned __int8 *)(_Records_GDEntityClass_records + 0x198);
  sub_1AE507B04();
  sub_1AE4FB930();
  result = sub_1AE779DDC();
  if (!_Records_GDEntityClass_labels)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v22 = v21;
  v102 = result;
  v103 = v21;
  v104 = sub_1AE77BB70();
  v105 = v23;
  v106 = (char)v20;
  v24 = v104 == v10 && v23 == v9;
  if (v24 || (sub_1AE4F9570() & 1) != 0)
    goto LABEL_39;
  v89 = v75;
  v90 = (uint64_t)v8;
  sub_1AE4FBE30();
  sub_1AE77BB5C();
  sub_1AE77BB64();
  sub_1AE4F6710();
  sub_1AE4F81B8();
  sub_1AE4F76D8();
  result = sub_1AE4F9038();
  if ((v20 & 1) != 0)
    goto LABEL_40;
  if (!_Records_GDEntityClass_records)
    goto LABEL_53;
  if (*(uint64_t *)(_Records_GDEntityClass_records + 0x218) >= 1336)
    goto LABEL_45;
  if (*(uint64_t *)(_Records_GDEntityClass_records + 0x220) >= 2889)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (!_Records_GDEntityClass_classIds[0])
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v25 = *(_BYTE *)(_Records_GDEntityClass_records + 0x210);
  sub_1AE507B04();
  sub_1AE4FB930();
  result = sub_1AE779DDC();
  if (_Records_GDEntityClass_labels)
  {
    v97 = result;
    v98 = v26;
    v99 = sub_1AE77BB70();
    v100 = v27;
    v101 = v25;
    v28 = v99 == v10 && v27 == v9;
    if (v28 || (sub_1AE4F9570() & 1) != 0)
    {
LABEL_39:
      swift_bridgeObjectRelease();
      sub_1AE4F9038();
      sub_1AE4F81B8();
      sub_1AE4F76D8();
      goto LABEL_40;
    }
    v89 = v75;
    v90 = (uint64_t)v8;
    sub_1AE4FBE30();
    sub_1AE77BB5C();
    sub_1AE77BB64();
    sub_1AE4F6710();
    sub_1AE4F81B8();
    sub_1AE4F76D8();
    sub_1AE4F9038();
    if ((v20 & 1) == 0)
    {
      sub_1AE50040C();
      v78 = type metadata accessor for K2TSubEntityTextualizer();
      sub_1AE4F66BC();
      sub_1AE4F66C4();
      sub_1AE4F6730();
      sub_1AE4FB930();
      sub_1AE4F6730();
      sub_1AE4F81B0();
      sub_1AE4FB75C();
      sub_1AE4FB75C();
      sub_1AE50668C();
      v29 = v8;
      v30 = v22;
      v31 = v20;
      v32 = a7;
      v33 = a7;
      v41 = sub_1AE509100((uint64_t)v33, v34, v35, v36, v37, v38, v39, v40, (uint64_t)a7, v59, v60, v61, v62, v63, v64, v65, v66, v67, (uint64_t)v68,
              (uint64_t)v69,
              (uint64_t)v70,
              a2,
              a3,
              a5,
              (uint64_t)v74,
              v75,
              v78,
              v80,
              v81,
              v82,
              v83,
              v84,
              v85,
              v86,
              v87,
              v88,
              v89);
      result = sub_1AE773FE4((uint64_t)v41, v42, v43, v44, v45, v46, v32);
      goto LABEL_13;
    }
LABEL_40:
    sub_1AE50040C();
    v79 = type metadata accessor for K2TAddressAndLocationRelationshipTextualizer();
    sub_1AE4F66BC();
    sub_1AE4F66C4();
    sub_1AE4F6730();
    sub_1AE4FB930();
    sub_1AE4F6730();
    sub_1AE4F81B0();
    sub_1AE4FB75C();
    sub_1AE4FB75C();
    sub_1AE50668C();
    v47 = v8;
    v48 = v22;
    v49 = v20;
    v57 = sub_1AE509100((uint64_t)v49, v50, v51, v52, v53, v54, v55, v56, (uint64_t)a7, v59, v60, v61, v62, v63, v64, v65, v66, v67, (uint64_t)v68,
            (uint64_t)v69,
            (uint64_t)v70,
            a2,
            a3,
            a5,
            (uint64_t)v74,
            v75,
            v79,
            v80,
            v81,
            v82,
            v83,
            v84,
            v85,
            v86,
            v87,
            v88,
            v89);
    result = sub_1AE776330(v57);
    goto LABEL_13;
  }
LABEL_55:
  __break(1u);
  return result;
}

void sub_1AE77B380(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char *v8;
  char v9;
  void *v10;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  void *v19;
  id v21;
  id v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  unsigned int v39;
  uint64_t v40[4];
  uint64_t v41[7];
  __int128 v42;
  uint64_t v43;
  void *v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  void *v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char v54;

  if (!_Records_GDEntityClass_records)
    goto LABEL_51;
  v5 = *(_QWORD *)(_Records_GDEntityClass_records + 0xB0);
  if (v5 >= 1336)
  {
    __break(1u);
    goto LABEL_46;
  }
  if (*(uint64_t *)(_Records_GDEntityClass_records + 0xB8) >= 2889)
  {
LABEL_46:
    __break(1u);
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (!_Records_GDEntityClass_classIds[0])
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v39 = *(unsigned __int8 *)(a1 + 48);
  v35 = *(void **)(a3 + 16);
  v36 = *(void **)(a3 + 24);
  v8 = &_Records_GDEntityClass_classIds[0][v5];
  v9 = *(_BYTE *)(_Records_GDEntityClass_records + 0xA8);
  sub_1AE4F6804();
  sub_1AE4F66C4();
  sub_1AE779DDC();
  if (!_Records_GDEntityClass_labels)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v50 = v8;
  v51 = v4;
  v52 = sub_1AE507F60();
  v53 = v10;
  v54 = v9;
  if (v52 == v7 && v10 == v6)
    goto LABEL_12;
  if ((sub_1AE4FCA74() & 1) != 0)
  {
    sub_1AE508C94();
LABEL_12:
    sub_1AE544754();
    sub_1AE4F76D8();
    sub_1AE4F9038();
    sub_1AE4F6710();
LABEL_13:
    sub_1AE50A07C();
    *(_QWORD *)&v46 = v4;
    *((_QWORD *)&v46 + 1) = 2889;
    v47 = (uint64_t)v35;
    v48 = v36;
    type metadata accessor for K2TLocationTextualizer();
    sub_1AE4FD3C8();
    sub_1AE4FB75C();
    sub_1AE4F6804();
    sub_1AE4F66C4();
    sub_1AE4FB75C();
    sub_1AE5069F0();
    v12 = (id)0xB49;
    v13 = v35;
    v14 = v36;
    sub_1AE76F084((uint64_t)v41, a2, &v46, 0);
LABEL_14:
    a4[3] = v7;
    a4[4] = (uint64_t)&off_1E5DA8F50;
    *a4 = v15;
    return;
  }
  sub_1AE4FDFDC();
  sub_1AE77BB5C();
  sub_1AE5094E0();
  sub_1AE4F67AC();
  sub_1AE4F6718();
  sub_1AE4F6710();
  sub_1AE4F9038();
  if ((v6 & 1) != 0)
    goto LABEL_13;
  if (!_Records_GDEntityClass_records)
    goto LABEL_54;
  v16 = *(_QWORD *)(_Records_GDEntityClass_records + 0x278);
  if (v16 >= 1336)
    goto LABEL_47;
  if (*(uint64_t *)(_Records_GDEntityClass_records + 0x280) >= 2889)
  {
LABEL_48:
    __break(1u);
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (!_Records_GDEntityClass_classIds[0])
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v17 = *(_BYTE *)(_Records_GDEntityClass_records + 0x270);
  v18 = &_Records_GDEntityClass_classIds[0][v16];
  sub_1AE4F6804();
  sub_1AE4F66C4();
  sub_1AE779DDC();
  if (!_Records_GDEntityClass_labels)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  *(_QWORD *)&v46 = v18;
  *((_QWORD *)&v46 + 1) = v4;
  v47 = sub_1AE507F60();
  v48 = v19;
  v49 = v17;
  if (v47 == v7 && v19 == v6)
    goto LABEL_27;
  if ((sub_1AE4FCA74() & 1) != 0)
  {
    sub_1AE508C94();
LABEL_27:
    sub_1AE544754();
    sub_1AE4F76D8();
    sub_1AE4F9038();
    sub_1AE4F6710();
LABEL_28:
    sub_1AE50A07C();
    *(_QWORD *)&v42 = v4;
    *((_QWORD *)&v42 + 1) = 2889;
    v43 = (uint64_t)v35;
    v44 = v36;
    type metadata accessor for K2TPersonTextualizer();
    sub_1AE4FD3C8();
    sub_1AE4FB75C();
    sub_1AE4F6804();
    sub_1AE4F66C4();
    sub_1AE4FB75C();
    sub_1AE5069F0();
    v21 = (id)0xB49;
    v22 = v35;
    v23 = v36;
    v15 = sub_1AE76D104((uint64_t)v41, a2, &v42, 0);
    goto LABEL_14;
  }
  sub_1AE4FDFDC();
  sub_1AE77BB5C();
  sub_1AE5094E0();
  sub_1AE4F67AC();
  sub_1AE4F6718();
  sub_1AE4F6710();
  sub_1AE4F9038();
  if ((v6 & 1) != 0)
    goto LABEL_28;
  if (!_Records_GDEntityClass_records)
    goto LABEL_57;
  if (*(uint64_t *)(_Records_GDEntityClass_records + 0x380) >= 1336)
    goto LABEL_49;
  if (*(uint64_t *)(_Records_GDEntityClass_records + 0x388) >= 2889)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (!_Records_GDEntityClass_classIds[0])
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v24 = *(_BYTE *)(_Records_GDEntityClass_records + 0x378);
  sub_1AE4F6804();
  sub_1AE4F66C4();
  v25 = sub_1AE779DDC();
  if (_Records_GDEntityClass_labels)
  {
    *(_QWORD *)&v42 = v25;
    *((_QWORD *)&v42 + 1) = v26;
    v43 = sub_1AE77BB70();
    v44 = v27;
    v45 = v24;
    if (v43 != v7 || v27 != v6)
    {
      if ((sub_1AE4FCA74() & 1) == 0)
      {
        sub_1AE4FDFDC();
        sub_1AE77BB5C();
        sub_1AE5094E0();
        sub_1AE4F67AC();
        sub_1AE4F6718();
        sub_1AE4F6710();
        sub_1AE4F9038();
        if ((v6 & 1) == 0)
        {
          sub_1AE501EA0();
          type metadata accessor for K2TEntityTextualizer();
          sub_1AE4FD3C8();
          sub_1AE4FB75C();
          sub_1AE4F6804();
          sub_1AE4F66C4();
          sub_1AE4FB75C();
          sub_1AE5069F0();
          v32 = (id)0xB49;
          v33 = v6;
          v34 = (id)v39;
          sub_1AE76B42C((uint64_t)v41, a2, v40, 0);
          goto LABEL_14;
        }
        goto LABEL_42;
      }
      sub_1AE508C94();
    }
    sub_1AE544754();
    sub_1AE4F76D8();
    sub_1AE4F9038();
    sub_1AE4F6710();
LABEL_42:
    sub_1AE501EA0();
    type metadata accessor for K2TEventTextualizer();
    sub_1AE4FD3C8();
    sub_1AE4FB75C();
    sub_1AE4F6804();
    sub_1AE4F66C4();
    sub_1AE4FB75C();
    sub_1AE5069F0();
    v29 = (id)0xB49;
    v30 = v6;
    v31 = (id)v39;
    sub_1AE76F0EC(v41, a2, v40);
    goto LABEL_14;
  }
LABEL_59:
  __break(1u);
}

uint64_t sub_1AE77B86C()
{
  uint64_t v0;
  uint64_t result;

  sub_1AE77BB20();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1AE938D60;
  *(_QWORD *)(v0 + 32) = type metadata accessor for K2TEntityTextualizer();
  *(_QWORD *)(v0 + 40) = type metadata accessor for K2TPersonTextualizer();
  *(_QWORD *)(v0 + 48) = type metadata accessor for K2TLocationTextualizer();
  *(_QWORD *)(v0 + 56) = type metadata accessor for K2TEventTextualizer();
  *(_QWORD *)(v0 + 64) = type metadata accessor for K2TSubEntityTextualizer();
  *(_QWORD *)(v0 + 72) = type metadata accessor for K2TAgentAffiliationRelationshipTextualizer();
  result = type metadata accessor for K2TAddressAndLocationRelationshipTextualizer();
  *(_QWORD *)(v0 + 80) = result;
  qword_1EEE11FC0 = v0;
  return result;
}

void sub_1AE77B910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t inited;

  if (qword_1EED99868 != -1)
    goto LABEL_26;
  while (1)
  {
    v0 = qword_1EEE11FC0;
    v1 = *(_QWORD *)(qword_1EEE11FC0 + 16);
    if (!v1)
      break;
    v2 = sub_1AE4F66C4();
    v3 = 0;
    v4 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 8 * v3 + 32) + 152))(v2);
      v6 = *(_QWORD *)(v5 + 16);
      v7 = *(_QWORD *)(v4 + 16);
      if (__OFADD__(v7, v6))
        break;
      v8 = v5;
      if (!swift_isUniquelyReferenced_nonNull_native() || v7 + v6 > *(_QWORD *)(v4 + 24) >> 1)
      {
        sub_1AE519DF4();
        v4 = v9;
      }
      if (*(_QWORD *)(v8 + 16))
      {
        v10 = *(_QWORD *)(v4 + 16);
        if ((*(_QWORD *)(v4 + 24) >> 1) - v10 < v6)
          goto LABEL_24;
        v11 = v4 + 40 * v10 + 32;
        if (v8 + 32 < v11 + 40 * v6 && v11 < v8 + 32 + 40 * v6)
        {
          sub_1AE926B20();
          __break(1u);
          return;
        }
        swift_arrayInitWithCopy();
        if (v6)
        {
          v13 = *(_QWORD *)(v4 + 16);
          v14 = __OFADD__(v13, v6);
          v15 = v13 + v6;
          if (v14)
            goto LABEL_25;
          *(_QWORD *)(v4 + 16) = v15;
        }
      }
      else if (v6)
      {
        goto LABEL_23;
      }
      v2 = sub_1AE4F9038();
      if (v1 == ++v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    swift_once();
  }
LABEL_21:
  sub_1AE501548(&qword_1ED319608);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AE934250;
  static EntityPredicate.empty.getter(inited + 32);
  sub_1AE60EFEC();
  sub_1AE8982B4();
}

uint64_t sub_1AE77BB20()
{
  uint64_t v0;

  v0 = sub_1AE501548(&qword_1EEDA28E0);
  if (sub_1AE66947C(v0))
    return sub_1AE501548(&qword_1EED99648);
  else
    return sub_1AE501548(&qword_1EEDA28E8);
}

void sub_1AE77BB5C()
{
  sub_1AE5519D8();
}

uint64_t sub_1AE77BB64()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE77BB70()
{
  return sub_1AE925F8C();
}

uint64_t K2TClient.init(context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v23;
  __int128 v24;
  id v25;
  id v26;
  __int128 v27;
  uint64_t v28;
  _UNKNOWN **v29;

  v4 = sub_1AE4F82EC(objc_allocWithZone(MEMORY[0x1E0CB3578]));
  objc_msgSend(v4, sel_setTimeStyle_, 0);
  sub_1AE4FF014(v4, sel_setDateStyle_);
  v5 = sub_1AE4F82EC(objc_allocWithZone(MEMORY[0x1E0CB3578]));
  objc_msgSend(v5, sel_setTimeStyle_, 2);
  sub_1AE4FF014(v5, sel_setDateStyle_);
  v6 = sub_1AE4F82EC(objc_allocWithZone(MEMORY[0x1E0CB3570]));
  sub_1AE4FF014(v6, sel_setUnitsStyle_);
  objc_msgSend(v6, sel_setMaximumUnitCount_, 2);
  sub_1AE9243C0();
  swift_allocObject();
  v7 = sub_1AE9243B4();
  v8 = type metadata accessor for K2TInProcessService();
  sub_1AE57C238(a1, (uint64_t)&v27);
  *(_QWORD *)&v24 = v7;
  *((_QWORD *)&v24 + 1) = v4;
  v25 = v5;
  v26 = v6;
  v9 = v28;
  v10 = (uint64_t)v29;
  v11 = sub_1AE595318((uint64_t)&v27, v28);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  v15 = sub_1AE773A78((uint64_t)v13, &v24, v8, v9, v10);
  v16 = v4;
  v17 = v5;
  v18 = v6;
  swift_retain();
  v19 = v16;
  v20 = v17;
  v21 = v18;
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v27);
  v28 = v8;
  v29 = &off_1E5DA8450;

  swift_release();
  *(_QWORD *)&v27 = v15;
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(a1);
  return sub_1AE50AF58(&v27, a2);
}

uint64_t K2TClient.entityName(subjectId:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *a1;
  sub_1AE4F9858(v1, v1[3]);
  v4 = v2;
  return sub_1AE773734(&v4);
}

uint64_t K2TClient.entityNames(subjectIds:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *sub_1AE4F9858(v1, v1[3]);
  v4 = a1[3];
  v5 = a1[4];
  v6 = sub_1AE4F9858(a1, v4);
  return sub_1AE773B00((uint64_t)v6, v3, v4, v5);
}

uint64_t K2TClient.factLevelSummaries(subjectId:renderTriples:)(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v6;

  v4 = *a1;
  sub_1AE4F9858(v2, v2[3]);
  v6 = v4;
  return sub_1AE7737BC(&v6, a2);
}

void K2TClient.entityLevelSummary(subjectId:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  sub_1AE4F9858(v1, v1[3]);
  v4 = v2;
  sub_1AE77382C(&v4, v3);
}

uint64_t initializeWithCopy for K2TClient(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for K2TClient(uint64_t *a1, uint64_t *a2)
{
  sub_1AE65F6C8(a1, a2);
  return a1;
}

uint64_t assignWithTake for K2TClient(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for K2TClient(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for K2TClient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for K2TClient()
{
  return &type metadata for K2TClient;
}

uint64_t sub_1AE77BFF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v75 = a4;
  v76 = a1;
  v77 = a2;
  v7 = sub_1AE9248DC();
  v91 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  sub_1AE4F686C();
  v89 = v8;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v9);
  sub_1AE4F6A60();
  v83 = v10;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v11);
  sub_1AE4F6A60();
  v87 = v12;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v13);
  v82 = (uint64_t)&v72 - v14;
  v15 = (int *)sub_1AE4FDF3C();
  v16 = *((_QWORD *)v15 - 1);
  MEMORY[0x1E0C80A78](v15);
  sub_1AE4F686C();
  v84 = v17;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v18);
  sub_1AE4F6A60();
  v88 = v19;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v72 - v21;
  v23 = sub_1AE501548(&qword_1ED30EB60);
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  sub_1AE4F6A60();
  v80 = v27;
  sub_1AE4F9350();
  v29 = MEMORY[0x1E0C80A78](v28);
  v31 = (char *)&v72 - v30;
  MEMORY[0x1E0C80A78](v29);
  v32 = *(_QWORD *)(a3 + 16);
  v78 = (char *)&v72 - v33;
  v79 = a3;
  if (v32)
  {
    v73 = v16;
    v74 = a5;
    sub_1AE4FD3D8();
    v90 = *(_QWORD *)(v16 + 72);
    swift_bridgeObjectRetain();
    v34 = MEMORY[0x1E0DEE9D8];
    v35 = a3;
    v36 = v32;
    v81 = v15;
    v85 = v26;
    v86 = v7;
    do
    {
      sub_1AE769BBC(v35, (uint64_t)v22);
      sub_1AE5281B4((uint64_t)&v22[v15[5]], (uint64_t)v31);
      sub_1AE769C00((uint64_t)v22);
      if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v31, 1, v7) == 1)
      {
        sub_1AE657280((uint64_t)v31);
      }
      else
      {
        v37 = v82;
        sub_1AE501ED0(v82, (uint64_t)v31);
        sub_1AE501ED0(v87, v37);
        if ((sub_1AE505598() & 1) == 0)
        {
          sub_1AE500470();
          v34 = v41;
        }
        v38 = *(_QWORD *)(v34 + 16);
        if (v38 >= *(_QWORD *)(v34 + 24) >> 1)
        {
          sub_1AE500470();
          v34 = v42;
        }
        *(_QWORD *)(v34 + 16) = v38 + 1;
        sub_1AE4FF01C();
        v7 = v86;
        sub_1AE501ED0(v39 + v40 * v38, v87);
        v15 = v81;
        v26 = v85;
      }
      v35 += v90;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
    sub_1AE50AD34();
    sub_1AE4F6648();
    swift_bridgeObjectRetain();
    v43 = MEMORY[0x1E0DEE9D8];
    v44 = v32;
    v16 = v73;
    a5 = v74;
    do
    {
      v45 = v88;
      sub_1AE769BBC(a3, v88);
      sub_1AE5281B4(v45 + v15[6], (uint64_t)v26);
      sub_1AE769C00(v45);
      if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v26, 1, v7) == 1)
      {
        sub_1AE657280((uint64_t)v26);
      }
      else
      {
        v46 = (uint64_t)v26;
        v47 = v83;
        sub_1AE4FCA88(v83, v46);
        sub_1AE4FCA88(v89, v47);
        if ((sub_1AE505598() & 1) == 0)
        {
          sub_1AE500470();
          v43 = v52;
        }
        v48 = *(_QWORD *)(v43 + 16);
        if (v48 >= *(_QWORD *)(v43 + 24) >> 1)
        {
          sub_1AE500470();
          v43 = v53;
        }
        *(_QWORD *)(v43 + 16) = v48 + 1;
        sub_1AE4FF01C();
        v51 = v86;
        sub_1AE4FCA88(v49 + v50 * v48, v89);
        v7 = v51;
        v26 = v85;
      }
      a3 += v90;
      --v44;
    }
    while (v44);
    a3 = v79;
  }
  else
  {
    sub_1AE50AD34();
  }
  swift_bridgeObjectRelease();
  sub_1AE50AD34();
  sub_1AE4F6648();
  if (v32)
  {
    sub_1AE4FD3D8();
    v54 = *(_QWORD *)(v16 + 72);
    swift_bridgeObjectRetain();
    v55 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v56 = v84;
      sub_1AE769BBC(a3, v84);
      v57 = *(_QWORD *)(v56 + v15[7]);
      swift_bridgeObjectRetain();
      sub_1AE769C00(v56);
      v58 = *(_QWORD *)(v57 + 16);
      v59 = *(_QWORD *)(v55 + 16);
      if (__OFADD__(v59, v58))
        break;
      if (!sub_1AE505598() || v59 + v58 > *(_QWORD *)(v55 + 24) >> 1)
      {
        sub_1AE519D1C();
        v55 = v60;
      }
      if (*(_QWORD *)(v57 + 16))
      {
        v61 = *(_QWORD *)(v55 + 16);
        if ((*(_QWORD *)(v55 + 24) >> 1) - v61 < v58)
          goto LABEL_45;
        v62 = (void *)(v55 + 8 * v61 + 32);
        if (v57 + 32 < (unint64_t)v62 + 8 * v58 && (unint64_t)v62 < v57 + 32 + 8 * v58)
          goto LABEL_47;
        memcpy(v62, (const void *)(v57 + 32), 8 * v58);
        if (v58)
        {
          v64 = *(_QWORD *)(v55 + 16);
          v65 = __OFADD__(v64, v58);
          v66 = v64 + v58;
          if (v65)
            goto LABEL_46;
          *(_QWORD *)(v55 + 16) = v66;
        }
      }
      else if (v58)
      {
        goto LABEL_44;
      }
      swift_bridgeObjectRelease();
      a3 += v54;
      if (!--v32)
      {
        swift_bridgeObjectRelease();
        goto LABEL_42;
      }
    }
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    result = sub_1AE926B20();
    __break(1u);
  }
  else
  {
    v55 = MEMORY[0x1E0DEE9D8];
LABEL_42:
    swift_bridgeObjectRelease();
    v92 = v55;
    sub_1AE60EEC0();
    sub_1AE898248();
    sub_1AE5922D8();
    v68 = v67;
    sub_1AE4F6648();
    v70 = v77;
    v69 = (uint64_t)v78;
    *a5 = v76;
    a5[1] = v70;
    sub_1AE5298B4(v69, (uint64_t)a5 + v15[5]);
    result = sub_1AE5298B4(v80, (uint64_t)a5 + v15[6]);
    *(_QWORD *)((char *)a5 + v15[7]) = v68;
  }
  return result;
}

BOOL static K2TError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t K2TError.hash(into:)()
{
  return sub_1AE926ED4();
}

uint64_t K2TError.hashValue.getter()
{
  sub_1AE926EC8();
  sub_1AE926ED4();
  return sub_1AE926F10();
}

uint64_t K2TTextualization.text.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void K2TTextualization.text.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  sub_1AE4F6624();
}

uint64_t (*K2TTextualization.text.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t K2TTextualization.startTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1AE4FDF3C();
  return sub_1AE503930(v1 + *(int *)(v3 + 20), a1);
}

uint64_t type metadata accessor for K2TTextualization()
{
  uint64_t result;

  result = qword_1EEDA28F8;
  if (!qword_1EEDA28F8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t K2TTextualization.endTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1AE4FDF3C();
  return sub_1AE503930(v1 + *(int *)(v3 + 24), a1);
}

uint64_t K2TTextualization.entityRelationships.getter()
{
  sub_1AE4FDF3C();
  return swift_bridgeObjectRetain();
}

uint64_t static K2TTextualization.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1AE926D60();
}

unint64_t sub_1AE77C7AC()
{
  unint64_t result;

  result = qword_1EEDA28F0;
  if (!qword_1EEDA28F0)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for K2TError, &type metadata for K2TError);
    atomic_store(result, (unint64_t *)&qword_1EEDA28F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for K2TError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AE77C838 + 4 * byte_1AE959465[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AE77C86C + 4 * asc_1AE959460[v4]))();
}

uint64_t sub_1AE77C86C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE77C874(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE77C87CLL);
  return result;
}

uint64_t sub_1AE77C888(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE77C890);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AE77C894(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE77C89C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for K2TError()
{
  return &type metadata for K2TError;
}

void destroy for K2THelperObjects(id *a1)
{
  swift_release();

}

_QWORD *initializeWithCopy for K2THelperObjects(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_retain();
  v6 = v3;
  v7 = v4;
  v8 = v5;
  return a1;
}

_QWORD *assignWithCopy for K2THelperObjects(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  v7 = (void *)a2[2];
  v8 = (void *)a1[2];
  a1[2] = v7;
  v9 = v7;

  v10 = (void *)a2[3];
  v11 = (void *)a1[3];
  a1[3] = v10;
  v12 = v10;

  return a1;
}

uint64_t assignWithTake for K2THelperObjects(uint64_t a1, _OWORD *a2)
{
  void *v4;
  void *v5;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  return a1;
}

uint64_t getEnumTagSinglePayload for K2THelperObjects(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for K2THelperObjects(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for K2THelperObjects()
{
  return &type metadata for K2THelperObjects;
}

uint64_t *initializeBufferWithCopyOfBuffer for K2TTextualization(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1AE9248DC();
    swift_bridgeObjectRetain();
    if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v10, 1, v11))
    {
      v12 = sub_1AE501548(&qword_1ED30EB60);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v9, 0, 1, v11);
    }
    v14 = a3[6];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)a2 + v14, 1, v11))
    {
      v17 = sub_1AE501548(&qword_1ED30EB60);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v15, v16, v11);
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v15, 0, 1, v11);
    }
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for K2TTextualization(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1AE9248DC();
  if (!_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  if (!_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v6, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v6, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for K2TTextualization(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1AE9248DC();
  swift_bridgeObjectRetain();
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v9, 1, v10))
  {
    v11 = sub_1AE501548(&qword_1ED30EB60);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v8, 0, 1, v10);
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)a2 + v12, 1, v10))
  {
    v15 = sub_1AE501548(&qword_1ED30EB60);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v13, v14, v10);
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v13, 0, 1, v10);
  }
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for K2TTextualization(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1AE9248DC();
  v10 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v7, 1, v9);
  v11 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = sub_1AE501548(&qword_1ED30EB60);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)a1 + v14, 1, v9);
  v18 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v16, 1, v9);
  if (!v17)
  {
    v19 = *(_QWORD *)(v9 - 8);
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v15, v16, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v9);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    v20 = sub_1AE501548(&qword_1ED30EB60);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v15, v16, v9);
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v15, 0, 1, v9);
LABEL_13:
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for K2TTextualization(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1AE9248DC();
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v8, 1, v9))
  {
    v10 = sub_1AE501548(&qword_1ED30EB60);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)a2 + v11, 1, v9))
  {
    v14 = sub_1AE501548(&qword_1ED30EB60);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v12, v13, v9);
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v12, 0, 1, v9);
  }
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *assignWithTake for K2TTextualization(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1AE9248DC();
  v11 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v8, 1, v10);
  v12 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v9, 1, v10);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    v14 = sub_1AE501548(&qword_1ED30EB60);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  v15 = a3[6];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)a1 + v15, 1, v10);
  v19 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v17, 1, v10);
  if (!v18)
  {
    v20 = *(_QWORD *)(v10 - 8);
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v16, v17, v10);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v10);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v21 = sub_1AE501548(&qword_1ED30EB60);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v16, v17, v10);
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v16, 0, 1, v10);
LABEL_13:
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for K2TTextualization()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AE77D320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1AE501548(&qword_1ED30EB60);
    return _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for K2TTextualization()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1AE77D3A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_1AE4F6624();
  }
  else
  {
    v7 = sub_1AE501548(&qword_1ED30EB60);
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

void sub_1AE77D40C()
{
  unint64_t v0;

  sub_1AE52A140();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1AE77D490()
{
  _QWORD *v0;
  uint64_t v1;

  v0 = static KGQ.Keyword.allCases.getter();
  v1 = MEMORY[0x1E0DEE9E0];
  if (v0[2])
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1AE77D8A8()
{
  uint64_t v0;

  type metadata accessor for KnosisQueryParam();
  v0 = sub_1AE925C98();
  type metadata accessor for QueryNode();
  swift_allocObject();
  sub_1AE883BA0(25965, 0xE200000000000000, v0);
  return 0;
}

uint64_t sub_1AE77D920()
{
  return 0;
}

uint64_t sub_1AE77D930()
{
  type metadata accessor for QueryContext();
  return sub_1AE77D964();
}

uint64_t sub_1AE77D964()
{
  uint64_t result;
  double v1;

  result = sub_1AE924864();
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18)
    return sub_1AE926D18();
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1AE77D9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v0 = sub_1AE9249B4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1AE9248DC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for QueryContext();
  sub_1AE92499C();
  sub_1AE924954();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v8 = sub_1AE77D964();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

void sub_1AE77DAEC(uint64_t a1)
{
  sub_1AE77DE30(a1, sub_1AE77DAF8);
}

void sub_1AE77DAF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_1AE4FC4D4();
  v31 = v0;
  v29 = v3;
  v4 = sub_1AE4F675C();
  v32 = *(_QWORD *)(v4 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4F936C();
  v6 = sub_1AE9249B4();
  v30 = *(_QWORD *)(v6 - 8);
  sub_1AE4F6630();
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v27 - v11;
  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v13);
  sub_1AE4F6744();
  sub_1AE501548(&qword_1EEDA2908);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v14);
  sub_1AE501548(&qword_1EEDA2910);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1AE9245A0();
  v27 = *(_QWORD *)(v18 - 8);
  v28 = v18;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v19);
  sub_1AE5009EC();
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v17, 1, 1, v6);
  sub_1AE5076A0();
  v20 = sub_1AE507F70();
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v20, v21, v22, v23);
  sub_1AE77E8A0();
  sub_1AE77E888();
  sub_1AE50A09C();
  sub_1AE92499C();
  sub_1AE924954();
  v24 = *(void (**)(char *, uint64_t))(v30 + 8);
  v24(v10, v6);
  sub_1AE924984();
  v25 = v32;
  sub_1AE4FD3F0(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
  v24(v12, v6);
  sub_1AE77E828(v1);
  if (v26)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v2, v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v29, v1, v4);
    sub_1AE4F8180();
  }
}

void sub_1AE77DD70()
{
  sub_1AE77DD84();
}

void sub_1AE77DD84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v0 = sub_1AE4F675C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for QueryContext();
  sub_1AE77E020();
  sub_1AE77D964();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_1AE506D40();
  sub_1AE4FCDD0();
}

void sub_1AE77DE24(uint64_t a1)
{
  sub_1AE77DE30(a1, sub_1AE77DEA8);
}

void sub_1AE77DE30(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1AE4F675C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  sub_1AE4F936C();
  type metadata accessor for QueryContext();
  a2();
  sub_1AE77D964();
  sub_1AE4FD3F0(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1AE506D40();
  sub_1AE4FCDD0();
}

void sub_1AE77DEA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1AE4FC4D4();
  v14 = v2;
  v3 = sub_1AE4F675C();
  v16 = *(_QWORD *)(v3 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F936C();
  v5 = sub_1AE9249A8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v15 = sub_1AE77E80C();
  v7 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v10);
  sub_1AE50688C();
  sub_1AE92499C();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v0, *MEMORY[0x1E0CB10F8], v5);
  sub_1AE77E020();
  sub_1AE924990();
  v11 = v16;
  sub_1AE4FD3F0(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v15);
  sub_1AE77E828(v1);
  if (v12)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14, v1, v3);
    sub_1AE4F8180();
  }
}

void sub_1AE77E00C()
{
  sub_1AE77DD84();
}

void sub_1AE77E020()
{
  uint64_t v0;
  unsigned int *v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(unint64_t, _QWORD, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;

  sub_1AE4FC4D4();
  v20 = v1;
  v21 = v2;
  v19 = v3;
  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v4);
  v5 = sub_1AE50A620();
  MEMORY[0x1E0C80A78](v5);
  v6 = sub_1AE4F9580();
  v17 = *(_QWORD *)(v6 - 8);
  v18 = v6;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v7);
  sub_1AE50AD3C();
  sub_1AE501548(&qword_1EEDA2918);
  v8 = sub_1AE9249A8();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1AE933BD0;
  v13 = v12 + v11;
  v14 = *(void (**)(unint64_t, _QWORD, uint64_t))(v9 + 104);
  v14(v13, *v20, v8);
  v14(v13 + v10, *v21, v8);
  sub_1AE56C228(v12);
  sub_1AE508388();
  swift_bridgeObjectRelease();
  sub_1AE77E844();
  sub_1AE50A09C();
  sub_1AE77E8B4();
  sub_1AE77E844();
  v15 = sub_1AE4F675C();
  sub_1AE77E864(v15);
  if (v16)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v0, v18);
    sub_1AE77E894(v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32));
    sub_1AE4F8180();
  }
}

void sub_1AE77E188(uint64_t a1)
{
  sub_1AE77DE30(a1, sub_1AE77E194);
}

void sub_1AE77E194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1AE4FC4D4();
  sub_1AE4F675C();
  sub_1AE507B10();
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4F683C();
  sub_1AE501548(&qword_1EEDA2908);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v6);
  sub_1AE50688C();
  sub_1AE501548(&qword_1EEDA2910);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v7);
  v8 = sub_1AE4F6CA4();
  v19 = *(_QWORD *)(v8 - 8);
  v20 = v8;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v9);
  v10 = sub_1AE77E80C();
  v18 = *(_QWORD *)(v10 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v11);
  sub_1AE5009EC();
  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v12);
  sub_1AE5057A4();
  v13 = sub_1AE507F70();
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v13, v14, v15, v10);
  v16 = sub_1AE5076A0();
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v2, 1, 1, v16);
  sub_1AE4FF038();
  sub_1AE77E8A0();
  sub_1AE924594();
  sub_1AE77E020();
  sub_1AE508CA4();
  sub_1AE4FD3F0(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v1, v20);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v4, v10);
  sub_1AE77E828(v3);
  if (v17)
  {
    __break(1u);
  }
  else
  {
    sub_1AE77E850();
    sub_1AE4F8180();
  }
}

void sub_1AE77E32C(uint64_t a1)
{
  sub_1AE77DE30(a1, sub_1AE77E338);
}

void sub_1AE77E338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  sub_1AE4FC4D4();
  v12 = v1;
  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v2);
  v3 = sub_1AE50A620();
  MEMORY[0x1E0C80A78](v3);
  v11 = sub_1AE4F9580();
  v4 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  sub_1AE50AD3C();
  sub_1AE501548(&qword_1EEDA2918);
  v5 = sub_1AE9249A8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1AE934250;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v6 + 104))(v8 + v7, *MEMORY[0x1E0CB1158], v5);
  sub_1AE56C228(v8);
  sub_1AE508388();
  swift_bridgeObjectRelease();
  sub_1AE77E844();
  sub_1AE50A09C();
  sub_1AE77E8B4();
  sub_1AE77E844();
  v9 = sub_1AE4F675C();
  sub_1AE77E864(v9);
  if (v10)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v11);
    sub_1AE77E894(v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32));
    sub_1AE4F8180();
  }
}

void sub_1AE77E488(uint64_t a1)
{
  sub_1AE77DE30(a1, sub_1AE77E494);
}

void sub_1AE77E494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_1AE4FC4D4();
  v27 = v4;
  v28 = v5;
  v26 = v0;
  v22[1] = v6;
  sub_1AE4F675C();
  sub_1AE507B10();
  MEMORY[0x1E0C80A78](v7);
  sub_1AE4F683C();
  sub_1AE501548(&qword_1EEDA2908);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v8);
  sub_1AE4F6744();
  sub_1AE501548(&qword_1EEDA2910);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v9);
  v10 = sub_1AE4F6CA4();
  v24 = *(_QWORD *)(v10 - 8);
  v25 = v10;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1AE9249B4();
  v23 = *(_QWORD *)(v14 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v15);
  sub_1AE5009EC();
  sub_1AE501548(&qword_1ED30EB60);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v16);
  sub_1AE5057A4();
  v17 = sub_1AE507F70();
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v17, v18, v19, v14);
  v20 = sub_1AE5076A0();
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v1, 1, 1, v20);
  sub_1AE4FF038();
  sub_1AE77E888();
  sub_1AE77E338();
  sub_1AE508CA4();
  sub_1AE4FD3F0(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v25);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v3, v14);
  sub_1AE77E828(v2);
  if (v21)
  {
    __break(1u);
  }
  else
  {
    sub_1AE77E850();
    sub_1AE4F8180();
  }
}

uint64_t sub_1AE77E638()
{
  return sub_1AE77E658(86400.0);
}

uint64_t sub_1AE77E658(double a1)
{
  uint64_t result;

  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a1 < 9.22337204e18)
    return sub_1AE926D18();
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1AE77E6D4()
{
  return sub_1AE77E658(604800.0);
}

uint64_t sub_1AE77E6F4()
{
  return sub_1AE77E658(2592000.0);
}

uint64_t sub_1AE77E714()
{
  return sub_1AE77E658(31536000.0);
}

uint64_t sub_1AE77E734()
{
  type metadata accessor for QueryContext();
  sub_1AE924864();
  return sub_1AE926388();
}

uint64_t sub_1AE77E778()
{
  type metadata accessor for QueryContext();
  sub_1AE924864();
  return sub_1AE926388();
}

uint64_t sub_1AE77E7BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1AE77E7E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t sub_1AE77E80C()
{
  return sub_1AE9249B4();
}

uint64_t sub_1AE77E828(uint64_t a1)
{
  uint64_t v1;

  return _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(a1, 1, v1);
}

uint64_t sub_1AE77E844()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t sub_1AE77E850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v0 + 32))(*(_QWORD *)(v3 - 120), v2, v1);
}

uint64_t sub_1AE77E864(uint64_t a1)
{
  uint64_t v1;

  return _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v1, 1, a1);
}

uint64_t sub_1AE77E888()
{
  return sub_1AE924594();
}

uint64_t sub_1AE77E894@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t sub_1AE77E8B4()
{
  return sub_1AE924978();
}

uint64_t sub_1AE77E8C0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  BOOL v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  if (a1 >> 62)
    goto LABEL_24;
  v1 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v1; v1 = sub_1AE926AD8())
  {
    v2 = 0;
    v25 = v1;
    while (1)
    {
      v3 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1AF453B80](v2, a1) : *(id *)(a1 + 32 + 8 * v2);
      v4 = __OFADD__(v2, 1);
      v5 = v2 + 1;
      if (v4)
        break;
      v26 = v3;
      v27 = v5;
      v6 = objc_msgSend(v3, sel_rankedItems);
      sub_1AE53F468(0, &qword_1ED30FC60);
      v7 = sub_1AE9261CC();

      if (v7 >> 62)
      {
        swift_bridgeObjectRetain();
        v8 = sub_1AE926AD8();
        if (v8)
        {
LABEL_10:
          v9 = 4;
          while (1)
          {
            v10 = (v7 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x1AF453B80](v9 - 4, v7)
                : *(id *)(v7 + 8 * v9);
            v11 = v10;
            v12 = v9 - 3;
            if (__OFADD__(v9 - 4, 1))
              break;
            v13 = objc_msgSend(v10, sel_entityID);
            v14 = (unint64_t)objc_msgSend(v13, sel_intValue);

            v15 = 3826797;
            if ((v14 & 0x80000000000000) == 0)
              v15 = 3828069;
            v28 = v15;
            v29 = 0xE300000000000000;
            v30 = v14;
            sub_1AE926D18();
            sub_1AE925F74();
            swift_bridgeObjectRelease();
            sub_1AE555EFC((uint64_t)&v28, v28, v29, v16, v17, v18, v19, v20, v22, v23);

            swift_bridgeObjectRelease();
            ++v9;
            if (v12 == v8)
              goto LABEL_18;
          }
          __break(1u);
          break;
        }
      }
      else
      {
        v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v8)
          goto LABEL_10;
      }
LABEL_18:
      swift_bridgeObjectRelease_n();

      v2 = v27;
      if (v27 == v25)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRelease();
}

void sub_1AE77EB2C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1AE8894C8();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_1AE786E5C(v5);
  *a1 = v2;
}

uint64_t sub_1AE77EB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  sub_1AE501548(&qword_1EEDA2928);
  v4[12] = sub_1AE4FC554();
  sub_1AE4F9070();
  return sub_1AE4F90B4();
}

uint64_t sub_1AE77EBDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 16);
  *(_QWORD *)(v0 + 104) = v1;
  if (v1)
  {
    *(_QWORD *)(v0 + 112) = 162;
    *(_QWORD *)(v0 + 120) = 1336;
    *(_QWORD *)(v0 + 128) = 2889;
    swift_bridgeObjectRetain();
    v2 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v0 + 136) = 0;
    *(_QWORD *)(v0 + 144) = v2;
    __asm { BR              X9 }
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16) == 1)
  {
    sub_1AE772960();
    v4 = *(_QWORD *)(v3 + 32);
    sub_1AE78BA1C();
  }
  else
  {
    v5 = sub_1AE4F66BC();
    *(_QWORD *)(v5 + 16) = v3;
    v4 = v5 | 0x3000000000000000;
    sub_1AE4FB75C();
  }
  v6 = *(_QWORD *)(v0 + 80);
  if (*(_QWORD *)(v6 + 16))
  {
    sub_1AE4F6A24();
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  **(_QWORD **)(v0 + 64) = v4;
  swift_task_dealloc();
  v7 = (uint64_t (*)(void))sub_1AE5094FC();
  return sub_1AE78B2A0(v7);
}

uint64_t sub_1AE77F054()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = v0[14];
  sub_1AE501548((uint64_t *)&unk_1ED31BCC0);
  *(_OWORD *)(sub_1AE4F66BC() + 16) = xmmword_1AE934250;
  if (v1 < 27)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!_Records_GDEntityClass_records)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (*(_QWORD *)(_Records_GDEntityClass_records + 0x278) >= v0[15])
    goto LABEL_10;
  if (*(_QWORD *)(_Records_GDEntityClass_records + 0x280) >= v0[16])
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!_Records_GDEntityClass_classIds[0])
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1AE78B8C8();
  if (!_Records_GDEntityClass_labels)
  {
LABEL_15:
    __break(1u);
    JUMPOUT(0x1AE77F314);
  }
  sub_1AE4F66BC();
  v2 = sub_1AE78BA88();
  sub_1AE78BB74(v2, v3);
  sub_1AE50A0A4();
  sub_1AE78BB60();
  if (v8)
  {
LABEL_12:
    sub_1AE78B644();
    v7 = v4;
  }
  sub_1AE78B688(v4, v5, v6, v7);
  v9 = (_QWORD *)swift_task_alloc();
  v0[20] = v9;
  v10 = sub_1AE78BB04(v9, (uint64_t)sub_1AE77F394);
  return sub_1AE78B2BC(v10);
}

void sub_1AE77F1FC()
{
  sub_1AE4F66CC();
  sub_1AE4F665C();
  JUMPOUT(0x1AE77EFC4);
}

uint64_t sub_1AE77F394(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  sub_1AE64A8C4();
  *v5 = *v3;
  *(_QWORD *)(v2 + 168) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_1AE4F6648();
    sub_1AE4F9038();
  }
  else
  {
    *(_QWORD *)(v2 + 176) = a1;
  }
  sub_1AE4F9070();
  return sub_1AE4F77A8();
}

uint64_t sub_1AE77F404()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  _QWORD *v13;
  _QWORD *v14;

  sub_1AE60FCD8();
  v1 = sub_1AE4F66BC();
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 56);
  v2 = sub_1AE505598();
  v3 = *(_QWORD **)(v0 + 144);
  if ((v2 & 1) == 0)
  {
    sub_1AE78B270();
    v3 = v13;
  }
  v4 = v3[2];
  if (v4 >= v3[3] >> 1)
  {
    sub_1AE78B270();
    v3 = v14;
  }
  sub_1AE78B82C();
  v3[2] = v4 + 1;
  v3[v4 + 4] = v1 | v5;
  sub_1AE78BAD8();
  if (!v7)
  {
    *(_QWORD *)(v0 + 136) = v6;
    *(_QWORD *)(v0 + 144) = v3;
    __asm { BR              X10 }
  }
  sub_1AE78B8E8();
  if (v3[2] == 1)
  {
    sub_1AE772960();
    v8 = v3[4];
    sub_1AE78BA1C();
  }
  else
  {
    v9 = sub_1AE4F66BC();
    *(_QWORD *)(v9 + 16) = v3;
    v8 = v9 | 0x3000000000000000;
    sub_1AE4FB75C();
  }
  v10 = *(_QWORD *)(v0 + 80);
  if (*(_QWORD *)(v10 + 16))
  {
    sub_1AE4F6A24();
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  **(_QWORD **)(v0 + 64) = v8;
  swift_task_dealloc();
  v11 = (uint64_t (*)(void))sub_1AE5094FC();
  return sub_1AE78B2A0(v11);
}

uint64_t sub_1AE77FC18()
{
  uint64_t v0;

  sub_1AE78BA80();
  return sub_1AE4F90A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1AE77FC40(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[24] = a1;
  v2[25] = v1;
  v3 = sub_1AE9248DC();
  v2[26] = v3;
  v2[27] = *(_QWORD *)(v3 - 8);
  v2[28] = sub_1AE4FC554();
  v4 = sub_1AE78B8A8();
  v2[29] = v4;
  v2[30] = *(_QWORD *)(v4 - 8);
  v2[31] = sub_1AE4FC554();
  sub_1AE4F9070();
  return sub_1AE4F90B4();
}

void sub_1AE77FCA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __n128 *v44;
  __n128 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  __n128 *v55;
  uint64_t v56;
  __n128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  __n128 *v84;
  uint64_t v85;
  __n128 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  __n128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  __n128 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __n128 *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __n128 *v137;
  uint64_t v138;
  __n128 *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t *v161;
  unint64_t v162;
  const char *v163;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;

  v197 = *(_QWORD *)(v1 + 192);
  swift_bridgeObjectRetain();
  sub_1AE77EB2C(&v197);
  v191 = *(_QWORD *)(v197 + 16);
  if (!v191)
  {
    swift_release();
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v152 = MEMORY[0x1E0DEE9D8];
    goto LABEL_99;
  }
  v2 = 0;
  v168 = v1 + 16;
  v169 = v1 + 40;
  v186 = v1 + 72;
  v187 = v1 + 56;
  v172 = v1 + 112;
  v173 = v1 + 104;
  v170 = v1 + 128;
  v171 = v1 + 120;
  v176 = v1 + 144;
  v177 = v1 + 136;
  v182 = v1 + 160;
  v183 = v1 + 152;
  v181 = v1 + 168;
  v184 = v1 + 184;
  v185 = v1 + 88;
  v175 = *(_QWORD *)(v1 + 240);
  v174 = v197;
  v190 = v197 + 32;
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v188 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v4 = (unsigned __int8 *)(v190 + 24 * v2);
    v5 = *((_QWORD *)v4 + 1);
    v6 = *v4;
    switch(*v4)
    {
      case 0u:
        if (*(_QWORD *)(v5 + 16))
        {
          sub_1AE78B62C();
          v8 = v5 + v7;
          swift_bridgeObjectRetain_n();
          sub_1AE78B0EC(v8, *(_QWORD *)(v1 + 248));
          v9 = (char *)&loc_1AE77FE8C + *((int *)qword_1AE7813A8 + swift_getEnumCaseMultiPayload());
          __asm { BR              X9 }
        }
        sub_1AE4F81B0();
        v121 = MEMORY[0x1E0DEE9D8];
        v0 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
        v122 = *(_QWORD *)(v188 + 16);
        if (__OFADD__(v122, v0))
          goto LABEL_116;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v124 = v188;
        if (!isUniquelyReferenced_nonNull_native || v122 + v0 > *(_QWORD *)(v188 + 24) >> 1)
        {
          sub_1AE519C48();
          v124 = v125;
        }
        v188 = v124;
        if (*(_QWORD *)(v121 + 16))
        {
          v126 = *(_QWORD *)(v124 + 16);
          if ((*(_QWORD *)(v124 + 24) >> 1) - v126 < v0)
            goto LABEL_118;
          v127 = v124 + 16 * v126 + 32;
          v128 = v121 + 32 >= v127 + 16 * v0 || v127 >= v121 + 32 + 16 * v0;
          if (!v128)
            goto LABEL_120;
          swift_arrayInitWithCopy();
          if (v0)
          {
            v129 = *(_QWORD *)(v188 + 16);
            v12 = __OFADD__(v129, v0);
            v130 = v129 + v0;
            if (v12)
              goto LABEL_119;
            *(_QWORD *)(v188 + 16) = v130;
          }
        }
        else if (v0)
        {
          goto LABEL_117;
        }
        sub_1AE4F6718();
        goto LABEL_95;
      case 1u:
        sub_1AE501548(&qword_1ED319608);
        *(_OWORD *)(sub_1AE4F66BC() + 16) = xmmword_1AE934250;
        if (!_Records_GDEntityPredicate_records)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          JUMPOUT(0x1AE781350);
        }
        sub_1AE78BB9C();
        if (v11 != v12)
        {
          v13 = *(_QWORD *)(v10 + 1480);
          if (v13 >= 3558)
            goto LABEL_112;
          if (!_Records_GDEntityPredicate_predicateIds)
            goto LABEL_122;
          sub_1AE4F81B0();
          v14 = sub_1AE925F8C();
          if (!_Records_GDEntityPredicate_labels)
            goto LABEL_123;
          v16 = v14;
          v17 = v15;
          v18 = *(_QWORD *)(v1 + 200);
          sub_1AE4F66BC();
          v19 = sub_1AE78B8B8();
          *(_QWORD *)(sub_1AE78B578(v19, v20) + 16) = v18;
          sub_1AE4F81B0();
          sub_1AE506A28((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204);
          if (!v16)
          {
            sub_1AE78B288();
            sub_1AE78BB20();
            if (v22)
            {
LABEL_57:
              v32 = *(_QWORD *)(v17 + 32);
              v0 = *(_QWORD *)(v17 + 40);
              sub_1AE4F66CC();
              sub_1AE4F76D8();
              sub_1AE4F6718();
            }
            else if (v21)
            {
              sub_1AE505B78();
              v23 = (_QWORD *)v172;
LABEL_82:
              *v23 = v17;
              sub_1AE501548(&qword_1ED319DE0);
              sub_1AE568D9C();
              sub_1AE925DC4();
              sub_1AE78B9EC();
              sub_1AE4F665C();
              sub_1AE501ED8();
              sub_1AE4F76D8();
              sub_1AE4F6718();
              v32 = v197;
              v0 = v198;
            }
            else
            {
LABEL_25:
              sub_1AE4F76D8();
              sub_1AE4F6718();
              v32 = 0;
              v0 = 0xE000000000000000;
            }
            *(_QWORD *)(v13 + 24) = v32;
            *(_QWORD *)(v13 + 32) = v0;
            if ((sub_1AE7728E0() & 1) == 0)
            {
              sub_1AE509B24();
              v3 = v146;
            }
            v142 = v3[2];
            sub_1AE78BB60();
            if (v128)
            {
              sub_1AE5071DC();
              v3 = v147;
            }
            v3[2] = v0;
            v3[v142 + 4] = v13 | 0x5000000000000004;
            goto LABEL_95;
          }
LABEL_100:
          sub_1AE4F6824();
          sub_1AE78B41C();
          sub_1AE78B4B8();
          sub_1AE737420();
          sub_1AE4F90C0();
          swift_bridgeObjectRelease();
LABEL_102:
          sub_1AE4FCA90();
          goto LABEL_108;
        }
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        sub_1AE926B20();
        sub_1AE5063CC();
        return;
      case 2u:
        sub_1AE501548(&qword_1ED319608);
        *(_OWORD *)(sub_1AE4F66BC() + 16) = xmmword_1AE934250;
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_124;
        sub_1AE78BB9C();
        if (v11 == v12)
          goto LABEL_109;
        v13 = *(_QWORD *)(v24 + 1528);
        if (v13 >= 3558)
          goto LABEL_113;
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_125;
        sub_1AE4F81B0();
        v25 = sub_1AE925F8C();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_126;
        v27 = v25;
        v17 = v26;
        v28 = *(_QWORD *)(v1 + 200);
        sub_1AE4F66BC();
        v29 = sub_1AE78B8B8();
        *(_QWORD *)(sub_1AE78B578(v29, v30) + 16) = v28;
        sub_1AE4F81B0();
        sub_1AE506A28((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204);
        if (v27)
          goto LABEL_100;
        sub_1AE78B288();
        sub_1AE78BB20();
        if (v22)
          goto LABEL_57;
        if (!v31)
          goto LABEL_25;
        sub_1AE505B78();
        v23 = (_QWORD *)v173;
        goto LABEL_82;
      case 4u:
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_127;
        sub_1AE78BB9C();
        if (v11 == v12)
          goto LABEL_110;
        if (*(uint64_t *)(v33 + 1408) >= 3558)
          goto LABEL_114;
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_128;
        v192 = v3;
        v34 = *(unsigned __int16 *)(v33 + 1392);
        sub_1AE4F81B0();
        sub_1AE925F8C();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_129;
        v36 = v35;
        v37 = *(_QWORD *)(v1 + 200);
        sub_1AE4F66BC();
        v38 = sub_1AE78BA94();
        *(_QWORD *)(sub_1AE78B660(v38, v39) + 16) = v37;
        sub_1AE4F81B0();
        sub_1AE506A28((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204);
        if (v36)
          goto LABEL_101;
        sub_1AE78B288();
        sub_1AE78BB20();
        v3 = v192;
        if (v22)
          goto LABEL_58;
        if (!v40)
          goto LABEL_47;
        sub_1AE505B78();
        v41 = (_QWORD *)v171;
        goto LABEL_89;
      case 7u:
        sub_1AE4F6A24();
        v42 = sub_1AE790FF0(v5);
        sub_1AE4F6718();
        if (!v42)
        {
          sub_1AE78B41C();
          sub_1AE78B4B8();
          sub_1AE4F6728();
          sub_1AE78AFFC();
          sub_1AE4F6778();
          v162 = 0xD000000000000037;
          v163 = "type=person only supports subquery like relationship=x1";
LABEL_106:
          *v161 = v162;
          v161[1] = (unint64_t)(v163 - 32) | 0x8000000000000000;
LABEL_107:
          swift_willThrow();
          sub_1AE4F6718();
LABEL_108:
          swift_task_dealloc();
          sub_1AE4F90C0();
          sub_1AE5063CC();
          __asm { BR              X0 }
        }
        sub_1AE4F66BC();
        sub_1AE78BB88();
        sub_1AE5C6870(0x8BuLL, v43);
        sub_1AE501548(&qword_1EED9A5E0);
        v44 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78B37C(v44);
        v179 = sub_1AE4F66BC();
        v45 = (__n128 *)sub_1AE4F66BC();
        v193 = v3;
        sub_1AE78B880(v45, v46, v47, v48, v49, v50, v51, v52, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175,
          v176,
          v177,
          v179,
          v181,
          v182,
          v183,
          v184,
          v185,
          v186,
          v187,
          v188,
          v53);
        v54 = sub_1AE4F66BC();
        sub_1AE501548((uint64_t *)&unk_1ED31BCC0);
        v55 = (__n128 *)sub_1AE4F66BC();
        sub_1AE50AA94(v55, (__n128)xmmword_1AE934250);
        static EntityClass.agentAffiliationRelationshipType.getter();
        *(_QWORD *)(v54 + 16) = v55;
        v3[4] = v54 | 0x4000000000000000;
        v56 = sub_1AE4F66BC();
        static EntityPredicate.personIdentifier.getter();
        v57 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78B37C(v57);
        v58 = sub_1AE4F66BC();
        v59 = sub_1AE78D64C(v42);
        v61 = v60;
        sub_1AE4F6648();
        *(_QWORD *)(v58 + 16) = v59;
        *(_QWORD *)(v58 + 24) = v61;
        sub_1AE78B5DC();
        v57[2].n128_u64[0] = v58 | v62;
        *(_QWORD *)(v56 + 56) = v57;
        v63 = v56 | 4;
LABEL_50:
        v3[5] = v63;
        *(_QWORD *)(v178 + 16) = v3;
        v3 = v193;
        v44[2].n128_u64[0] = v178 | 0x1000000000000004;
        *(_QWORD *)(v0 + 56) = v44;
        if ((sub_1AE7728E0() & 1) == 0)
        {
          sub_1AE509B24();
          v3 = v144;
        }
        v92 = v3[2];
        v2 = v196;
        if (v92 >= v3[3] >> 1)
        {
          sub_1AE5071DC();
          v3 = v145;
        }
        v3[2] = v92 + 1;
        v3[v92 + 4] = v0 | 4;
LABEL_95:
        swift_bridgeObjectRelease();
LABEL_96:
        if (++v2 == v191)
        {
          sub_1AE78B41C();
          v152 = v188;
LABEL_99:
          *(_QWORD *)(v1 + 256) = v3;
          *(_QWORD *)(v1 + 264) = v152;
          v153 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v1 + 272) = v153;
          *v153 = v1;
          v153[1] = sub_1AE781430;
          sub_1AE5063CC();
          sub_1AE786A28(v154, v155);
          return;
        }
        break;
      case 9u:
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_130;
        sub_1AE78BB9C();
        if (v11 == v12)
          goto LABEL_111;
        if (*(uint64_t *)(v64 + 3424) >= 3558)
          goto LABEL_115;
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_131;
        v194 = v3;
        v34 = *(unsigned __int16 *)(v64 + 3408);
        sub_1AE4F81B0();
        sub_1AE925F8C();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_132;
        v66 = v65;
        v67 = *(_QWORD *)(v1 + 200);
        sub_1AE4F66BC();
        v68 = sub_1AE78BA94();
        *(_QWORD *)(sub_1AE78B660(v68, v69) + 16) = v67;
        sub_1AE4F81B0();
        sub_1AE506A28((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204);
        if (!v66)
        {
          sub_1AE78B288();
          sub_1AE78BB20();
          v3 = v194;
          if (v22)
          {
LABEL_58:
            v71 = *(_QWORD *)(v34 + 32);
            v0 = *(_QWORD *)(v34 + 40);
            sub_1AE4F66CC();
            sub_1AE4F76D8();
            sub_1AE4F6718();
          }
          else if (v70)
          {
            sub_1AE505B78();
            v41 = (_QWORD *)v170;
LABEL_89:
            *v41 = v34;
            sub_1AE501548(&qword_1ED319DE0);
            sub_1AE568D9C();
            sub_1AE78B6F4();
            sub_1AE925DC4();
            sub_1AE78B9EC();
            sub_1AE4F665C();
            sub_1AE501ED8();
            sub_1AE4F76D8();
            sub_1AE4F6718();
            v71 = v197;
            v0 = v198;
          }
          else
          {
LABEL_47:
            sub_1AE4F76D8();
            sub_1AE4F6718();
            v71 = 0;
            v0 = 0xE000000000000000;
          }
          *(_QWORD *)(v6 + 56) = v71;
          *(_QWORD *)(v6 + 64) = v0;
          *(_QWORD *)(v6 + 72) = 0;
          *(_QWORD *)(v6 + 80) = 0;
          *(_DWORD *)(v6 + 87) = 0;
          if ((sub_1AE7728E0() & 1) == 0)
          {
            sub_1AE509B24();
            v3 = v148;
          }
          v143 = v3[2];
          sub_1AE78BB60();
          if (v128)
          {
            sub_1AE5071DC();
            v3 = v149;
          }
          v3[2] = v0;
          v3[v143 + 4] = v6;
          goto LABEL_95;
        }
LABEL_101:
        sub_1AE4F6824();
        sub_1AE78B41C();
        sub_1AE78B4B8();
        sub_1AE737420();
        sub_1AE4F90C0();
        swift_bridgeObjectRelease();
        sub_1AE4F9038();
        goto LABEL_102;
      case 0xAu:
        sub_1AE4F6A24();
        v72 = sub_1AE790FF0(v5);
        sub_1AE4F6718();
        if (!v72)
        {
          sub_1AE78B41C();
          sub_1AE78B4B8();
          sub_1AE4F6728();
          sub_1AE78AFFC();
          sub_1AE4F6778();
          v162 = 0xD000000000000032;
          v163 = "type=person only support subquery like location=x1";
          goto LABEL_106;
        }
        sub_1AE4F66BC();
        sub_1AE78BB88();
        sub_1AE5C6870(0x5AuLL, v73);
        sub_1AE501548(&qword_1EED9A5E0);
        v44 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78B37C(v44);
        v180 = sub_1AE4F66BC();
        v74 = (__n128 *)sub_1AE4F66BC();
        v193 = v3;
        sub_1AE78B880(v74, v75, v76, v77, v78, v79, v80, v81, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175,
          v176,
          v177,
          v180,
          v181,
          v182,
          v183,
          v184,
          v185,
          v186,
          v187,
          v188,
          v82);
        v83 = sub_1AE4F66BC();
        sub_1AE501548((uint64_t *)&unk_1ED31BCC0);
        v84 = (__n128 *)sub_1AE4F66BC();
        sub_1AE50AA94(v84, (__n128)xmmword_1AE934250);
        static EntityClass.locationRelationshipType.getter();
        *(_QWORD *)(v83 + 16) = v84;
        v3[4] = v83 | 0x4000000000000000;
        v85 = sub_1AE4F66BC();
        sub_1AE5C6870(0x33uLL, v85 + 16);
        v86 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78B37C(v86);
        v87 = sub_1AE4F66BC();
        v88 = sub_1AE78D64C(v72);
        v90 = v89;
        sub_1AE4F6648();
        *(_QWORD *)(v87 + 16) = v88;
        *(_QWORD *)(v87 + 24) = v90;
        sub_1AE78B5DC();
        v86[2].n128_u64[0] = v87 | v91;
        *(_QWORD *)(v85 + 56) = v86;
        v63 = v85 | 4;
        goto LABEL_50;
      case 0xEu:
        v195 = v3;
        v196 = v2;
        v93 = *(_QWORD *)(v1 + 200);
        v189 = sub_1AE4F66BC();
        sub_1AE501548(&qword_1EED9A5E0);
        v94 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78B880(v94, v95, v96, v97, v98, v99, v100, v101, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175,
          v176,
          v177,
          v178,
          v181,
          v182,
          v183,
          v184,
          v185,
          v186,
          v187,
          v188,
          v102);
        v103 = sub_1AE4F66BC();
        sub_1AE501548((uint64_t *)&unk_1ED31BCC0);
        v104 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78B37C(v104);
        sub_1AE4F81B0();
        static EntityClass.topic.getter();
        *(_QWORD *)(v103 + 16) = v104;
        v3[4] = v103 | 0x4000000000000000;
        v105 = sub_1AE4F66BC();
        v106 = v5;
        v107 = swift_task_alloc();
        *(_QWORD *)(v107 + 16) = v93;
        sub_1AE4FB75C();
        sub_1AE8AC150((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B06C, v107, v106);
        v109 = v108;
        swift_task_dealloc();
        v110 = sub_1AE78D64C(v109);
        v112 = v111;
        swift_bridgeObjectRelease();
        sub_1AE4F6648();
        *(_QWORD *)(v105 + 16) = v110;
        *(_QWORD *)(v105 + 24) = v112;
        v3[5] = v105 | 0x5000000000000000;
        *(_QWORD *)(v189 + 16) = v3;
        v113 = sub_1AE4FB75C();
        v114 = sub_1AE790FF0(v113);
        sub_1AE4F6648();
        if (v114)
        {
          v115 = sub_1AE4F66BC();
          v116 = sub_1AE78D64C(v114);
          v118 = v117;
          swift_release();
          sub_1AE4F665C();
          *(_QWORD *)(v115 + 16) = v116;
          *(_QWORD *)(v115 + 24) = v118;
          sub_1AE78B5DC();
          v120 = v115 | v119;
        }
        else
        {
          sub_1AE78B82C();
          v120 = v189 | v131;
        }
        v132 = sub_1AE4F66BC();
        sub_1AE5C6870(0x5BuLL, v132 + 16);
        v133 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78B37C(v133);
        v134 = sub_1AE4F66BC();
        v135 = sub_1AE4F66BC();
        *(_OWORD *)(v135 + 16) = xmmword_1AE933BD0;
        v136 = sub_1AE4F66BC();
        v137 = (__n128 *)sub_1AE4F66BC();
        sub_1AE50AA94(v137, (__n128)xmmword_1AE934250);
        static EntityClass.topicRelationshipType.getter();
        *(_QWORD *)(v136 + 16) = v137;
        *(_QWORD *)(v135 + 32) = v136 | 0x4000000000000000;
        v138 = sub_1AE4F66BC();
        sub_1AE5C6870(0x11uLL, v138 + 16);
        v139 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78B37C(v139);
        *(_QWORD *)(v140 + 32) = v120;
        *(_QWORD *)(v138 + 56) = v140;
        *(_QWORD *)(v135 + 40) = v138 | 4;
        *(_QWORD *)(v134 + 16) = v135;
        v133[2].n128_u64[0] = v134 | 0x1000000000000004;
        v0 = v120 & 0xFFFFFFFFFFFFFFBLL;
        *(_QWORD *)(v132 + 56) = v133;
        swift_retain();
        v3 = v195;
        if ((sub_1AE7728E0() & 1) == 0)
        {
          sub_1AE509B24();
          v3 = v150;
        }
        v2 = v196;
        v141 = v3[2];
        if (v141 >= v3[3] >> 1)
        {
          sub_1AE5071DC();
          v3 = v151;
        }
        v3[2] = v141 + 1;
        v3[v141 + 4] = v132 | 4;
        swift_release();
        goto LABEL_95;
      case 0x15u:
        goto LABEL_96;
      default:
        v156 = v4[16];
        sub_1AE4F81B0();
        sub_1AE78B41C();
        sub_1AE78B4B8();
        sub_1AE4F6728();
        v197 = 0;
        v198 = 0xE000000000000000;
        sub_1AE92691C();
        v157 = v198;
        *(_QWORD *)(v1 + 40) = v197;
        *(_QWORD *)(v1 + 48) = v157;
        sub_1AE925F74();
        *(_BYTE *)(v1 + 16) = v6;
        *(_QWORD *)(v1 + 24) = v5;
        *(_BYTE *)(v1 + 32) = v156;
        sub_1AE926A48();
        sub_1AE4FDA58();
        sub_1AE515554();
        sub_1AE925F74();
        v159 = *(_QWORD *)(v1 + 40);
        v158 = *(_QWORD *)(v1 + 48);
        sub_1AE78AFFC();
        sub_1AE4F6778();
        *v160 = v159;
        v160[1] = v158;
        goto LABEL_107;
    }
  }
}

uint64_t sub_1AE781430()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_1AE64A8C4();
  *v3 = *v2;
  *(_QWORD *)(v1 + 280) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  sub_1AE4F6648();
  sub_1AE4F9070();
  return sub_1AE4F77A8();
}

uint64_t sub_1AE781498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 256);
  if ((~v1 & 0xF000000000000007) != 0)
  {
    sub_1AE78BA1C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v2 = *(_QWORD *)(v0 + 256);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1AE505FE4();
      sub_1AE51B560();
      v2 = v6;
    }
    v4 = *(_QWORD *)(v2 + 16);
    if (v4 >= *(_QWORD *)(v2 + 24) >> 1)
    {
      sub_1AE51B560();
      v2 = v7;
    }
    *(_QWORD *)(v2 + 16) = v4 + 1;
    *(_QWORD *)(v2 + 8 * v4 + 32) = v1;
    sub_1AE78B038(v1);
  }
  sub_1AE78BACC();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1AE781564()
{
  uint64_t v0;

  sub_1AE78BACC();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1AE78159C(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  __int16 v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  __n128 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  __int128 v130;
  _BYTE *v131;
  uint64_t v132;
  char *v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v6 = sub_1AE78B8A8();
  v121 = *(_QWORD *)(v6 - 8);
  v122 = v6;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v7);
  sub_1AE4F686C();
  v113 = v8;
  MEMORY[0x1E0C80A78](v9);
  v112 = (char *)&v109 - v10;
  v11 = sub_1AE4F66BC();
  v123 = sub_1AE501548((uint64_t *)&unk_1ED31BCC0);
  v12 = sub_1AE4F66BC();
  v130 = xmmword_1AE934250;
  sub_1AE50AA94((__n128 *)v12, (__n128)xmmword_1AE934250);
  static EntityClass.agentAffiliationRelationshipType.getter();
  *(_QWORD *)(v11 + 16) = v12;
  sub_1AE50A0A4();
  v14 = v13;
  sub_1AE78B7BC();
  if (v15)
  {
LABEL_95:
    sub_1AE78B27C();
    v14 = v108;
  }
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 8 * v3 + 32) = v11 | 0x4000000000000000;
  v132 = a1;
  sub_1AE4F66CC();
  sub_1AE78B2D8();
  if (v2)
  {
LABEL_108:
    sub_1AE78B6CC();
    __break(1u);
  }
  else
  {
    v16 = *(char **)(v132 + 16);
    if (v16)
    {
      v110 = a2;
      v111 = v132;
      a2 = (_BYTE *)(v132 + 48);
      v127 = 0xF000000000000007;
      v120 = 162;
      v118 = 1336;
      v117 = 2889;
      v125 = 2674;
      v126 = 233;
      v124 = 3558;
      sub_1AE78B978((__n128)xmmword_1AE933BD0);
      while (1)
      {
        v3 = *((_QWORD *)a2 - 1);
        v17 = *(a2 - 16);
        if ((_DWORD)v17 == 11)
        {
          if (!*(_QWORD *)(v3 + 16))
          {
            sub_1AE4F6804();
LABEL_56:
            sub_1AE501548(&qword_1EED9A5E0);
            v11 = sub_1AE4F66BC();
            *(_OWORD *)(v11 + 16) = v119;
            v83 = (__n128 *)sub_1AE4F66BC();
            sub_1AE78B944(v83);
            if (v32 != v33)
              goto LABEL_86;
            if (!_Records_GDEntityClass_records)
              goto LABEL_100;
            sub_1AE78B2F0();
            if (v32 == v33)
              goto LABEL_88;
            v128 = 0;
            if (*(_QWORD *)(v85 + 640) >= v117)
              goto LABEL_91;
            v131 = a2;
            v129 = (char *)v3;
            v136 = v14;
            if (!_Records_GDEntityClass_classIds[0])
              goto LABEL_103;
            v86 = v84;
            v87 = *(_BYTE *)(v85 + 624);
            sub_1AE4FD008();
            if (!_Records_GDEntityClass_labels)
              goto LABEL_104;
            sub_1AE64AAC0();
            v116 = sub_1AE4F66BC();
            v88 = sub_1AE4F66BC();
            v89 = sub_1AE925F8C();
            *(_QWORD *)(v86 + 32) = v3;
            *(_QWORD *)(v86 + 40) = a2;
            *(_QWORD *)(v86 + 48) = v89;
            *(_QWORD *)(v86 + 56) = v90;
            *(_BYTE *)(v86 + 64) = v87;
            *(_QWORD *)(v88 + 16) = v86;
            v12 = v11;
            *(_QWORD *)(v11 + 32) = v88 | 0x4000000000000000;
            v91 = sub_1AE4F66BC();
            MEMORY[0x1E0C80A78](v91);
            sub_1AE78B31C();
            v92 = (uint64_t)v129;
            sub_1AE4F66CC();
            v93 = v2;
            v2 = v128;
            sub_1AE8AC150((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204, v93, v92);
            if (v2)
            {
              sub_1AE506040();
              sub_1AE4FBC80();
              sub_1AE4F9038();
              sub_1AE4FCA90();
              sub_1AE78B394();
              sub_1AE78B9D4();
              sub_1AE78B744();
              sub_1AE4F9038();
LABEL_81:
              sub_1AE4FCA90();
              goto LABEL_82;
            }
            v95 = v94;
            sub_1AE78B304();
            if (v49)
            {
              v97 = *(_QWORD *)(v95 + 32);
              a1 = *(_QWORD *)(v95 + 40);
              sub_1AE4F66CC();
              v11 = (uint64_t)v129;
              sub_1AE4F81B8();
              sub_1AE4F6710();
              a2 = v131;
            }
            else
            {
              a2 = v131;
              if (v96)
              {
                sub_1AE78B564();
                v135 = v95;
                sub_1AE501548(&qword_1ED319DE0);
                sub_1AE568D9C();
                sub_1AE78B3F4();
                sub_1AE507F80();
                sub_1AE4F6648();
                sub_1AE501ED8();
                v11 = (uint64_t)v129;
                sub_1AE4F81B8();
                sub_1AE4F6710();
                v97 = v132;
                a1 = (uint64_t)v133;
              }
              else
              {
                v11 = (uint64_t)v129;
                sub_1AE4F81B8();
                sub_1AE4F6710();
                v97 = 0;
                a1 = 0xE000000000000000;
              }
            }
            *(_QWORD *)(v91 + 16) = v97;
            *(_QWORD *)(v91 + 24) = a1;
            *(_QWORD *)(v12 + 40) = v91 | 0x5000000000000000;
            sub_1AE78B744();
            sub_1AE4F81B8();
            *(_QWORD *)(v116 + 16) = v12;
            sub_1AE78B838();
            v127 = v98;
            v14 = v136;
            goto LABEL_70;
          }
          v25 = sub_1AE78B75C();
          sub_1AE78B96C(v25, (uint64_t)&v137);
          if (sub_1AE78B964() != 7)
          {
            sub_1AE4F6804();
            sub_1AE5071E8();
            goto LABEL_56;
          }
          sub_1AE78B744();
          v26 = v17;
          v27 = *(_QWORD *)v17;
          a1 = *(_QWORD *)(v26 + 8);
          v28 = sub_1AE4F66BC();
          *(_QWORD *)(v28 + 16) = v27;
          *(_QWORD *)(v28 + 24) = a1;
          v127 = v28 | 0x4000000000000004;
        }
        else if ((_DWORD)v17 != 21)
        {
          if ((_DWORD)v17 == 13)
          {
            sub_1AE501548(&qword_1ED319608);
            *(_OWORD *)(sub_1AE4F66BC() + 16) = v130;
            if (v126 < 34)
            {
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
              goto LABEL_95;
            }
            if (!_Records_GDEntityPredicate_records)
            {
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
              goto LABEL_108;
            }
            sub_1AE78B388();
            if (v32 == v33)
              goto LABEL_84;
            if (*(_QWORD *)(v30 + 808) >= v124)
              goto LABEL_85;
            v131 = a2;
            v129 = v16;
            v136 = v14;
            if (!_Records_GDEntityPredicate_predicateIds)
              goto LABEL_97;
            v34 = v29;
            v35 = *(_WORD *)(v30 + 792);
            v36 = (char *)_Records_GDEntityPredicate_predicateIds + v31;
            sub_1AE4F6804();
            v37 = sub_1AE78B298();
            if (!_Records_GDEntityPredicate_labels)
              goto LABEL_98;
            v39 = v37;
            v40 = v3;
            v41 = v38;
            v42 = sub_1AE4F66BC();
            v43 = sub_1AE925F8C();
            *(_QWORD *)(v34 + 32) = v39;
            *(_QWORD *)(v34 + 40) = v41;
            *(_QWORD *)(v34 + 48) = v43;
            *(_QWORD *)(v34 + 56) = v44;
            *(_WORD *)(v34 + 64) = v35;
            v45 = v42;
            *(_QWORD *)(v42 + 16) = v34;
            MEMORY[0x1E0C80A78](v43);
            sub_1AE78B31C();
            sub_1AE4F6730();
            v46 = (uint64_t)v36;
            v2 = 0;
            sub_1AE8AC150((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204, v46, v40);
            v12 = v47;
            sub_1AE78B304();
            if (v49)
            {
              v50 = *(_QWORD *)(v12 + 32);
              a1 = *(_QWORD *)(v12 + 40);
              sub_1AE4F66CC();
              sub_1AE4F67AC();
              sub_1AE4F76D8();
              v16 = v129;
              a2 = v131;
              v11 = v45;
            }
            else
            {
              v16 = v129;
              a2 = v131;
              v11 = v45;
              if (v48)
              {
                sub_1AE78B364();
                sub_1AE501548(&qword_1ED319DE0);
                sub_1AE568D9C();
                sub_1AE78B3F4();
                sub_1AE507F80();
                sub_1AE4F6648();
                sub_1AE501ED8();
                sub_1AE4F67AC();
                sub_1AE4F76D8();
                v50 = v132;
                a1 = (uint64_t)v133;
              }
              else
              {
                sub_1AE4F67AC();
                sub_1AE4F76D8();
                v50 = 0;
                a1 = 0xE000000000000000;
              }
            }
            v14 = v136;
            *(_QWORD *)(v11 + 24) = v50;
            *(_QWORD *)(v11 + 32) = a1;
            v22 = *(_QWORD *)(v14 + 16);
            sub_1AE78B900();
            if (v15)
            {
              sub_1AE78B27C();
              v14 = v99;
            }
            v24 = v11 | 0x5000000000000004;
            *(_QWORD *)(v14 + 16) = a1;
          }
          else
          {
            if ((_DWORD)v17 != 12)
            {
              v105 = *a2;
              sub_1AE4F6804();
              sub_1AE4F6710();
              sub_1AE4FBC80();
              sub_1AE78B598();
              sub_1AE500F08();
              LOBYTE(v132) = v17;
              v133 = (char *)v3;
              v134 = v105;
              sub_1AE78B264();
              sub_1AE4FDA58();
              sub_1AE508F74();
              sub_1AE78B54C();
              v106 = sub_1AE4F6778();
              sub_1AE507B24(v106, v107);
              sub_1AE78B038(v127);
              sub_1AE4F67AC();
              goto LABEL_82;
            }
            if (!*(_QWORD *)(v3 + 16))
            {
              sub_1AE4F6804();
LABEL_36:
              if (v126 < 33)
                goto LABEL_87;
              if (!_Records_GDEntityPredicate_records)
                goto LABEL_99;
              sub_1AE78B388();
              if (v32 == v33)
                goto LABEL_89;
              a1 = *(_QWORD *)(v51 + 784);
              if (a1 >= v124)
                goto LABEL_90;
              v129 = (char *)v3;
              if (!_Records_GDEntityPredicate_predicateIds)
                goto LABEL_101;
              v136 = v14;
              v52 = *(_WORD *)(v51 + 768);
              v53 = sub_1AE4FD008();
              v3 = (uint64_t)_Records_GDEntityPredicate_labels;
              if (!_Records_GDEntityPredicate_labels)
                goto LABEL_102;
              v11 = v53;
              v55 = v54;
              v56 = sub_1AE4F66BC();
              v57 = sub_1AE925F8C();
              *(_QWORD *)(v56 + 16) = v11;
              *(_QWORD *)(v56 + 24) = v55;
              *(_QWORD *)(v56 + 32) = v57;
              *(_QWORD *)(v56 + 40) = v58;
              v116 = v56;
              *(_WORD *)(v56 + 48) = v52;
              sub_1AE501548(&qword_1EED9A5E0);
              v59 = sub_1AE4F66BC();
              *(_OWORD *)(v59 + 16) = v130;
              v12 = sub_1AE4F66BC();
              *(_OWORD *)(v12 + 16) = v119;
              v60 = (__n128 *)sub_1AE4F66BC();
              sub_1AE78B944(v60);
              if (v32 != v33)
                goto LABEL_92;
              if (!_Records_GDEntityClass_records)
                goto LABEL_105;
              sub_1AE78B2F0();
              if (v32 == v33)
                goto LABEL_93;
              a1 = *(_QWORD *)(v61 + 640);
              sub_1AE78B774();
              if (v32 == v33)
                goto LABEL_94;
              v131 = a2;
              v128 = 0;
              if (!_Records_GDEntityClass_classIds[0])
                goto LABEL_107;
              v64 = v62;
              v115 = v59;
              v65 = *(_BYTE *)(v63 + 624);
              v66 = sub_1AE4FD008();
              if (!_Records_GDEntityClass_labels)
                goto LABEL_106;
              v68 = v66;
              v69 = v67;
              v114 = sub_1AE4F66BC();
              v70 = sub_1AE4F66BC();
              v71 = sub_1AE925F8C();
              *(_QWORD *)(v64 + 32) = v68;
              *(_QWORD *)(v64 + 40) = v69;
              *(_QWORD *)(v64 + 48) = v71;
              *(_QWORD *)(v64 + 56) = v72;
              *(_BYTE *)(v64 + 64) = v65;
              *(_QWORD *)(v70 + 16) = v64;
              *(_QWORD *)(v12 + 32) = v70 | 0x4000000000000000;
              v73 = sub_1AE4F66BC();
              MEMORY[0x1E0C80A78](v73);
              sub_1AE78B31C();
              v74 = (uint64_t)v129;
              sub_1AE4F6804();
              v75 = v2;
              v2 = v128;
              sub_1AE8AC150((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204, v75, v74);
              if (v2)
              {
                sub_1AE506040();
                sub_1AE4FBC80();
                sub_1AE4F67AC();
                sub_1AE4FCA90();
                sub_1AE78B394();
                sub_1AE78B9D4();
                sub_1AE4FCA90();
                *(_QWORD *)(v115 + 16) = 0;
                swift_release();
                sub_1AE78B038(v127);
                sub_1AE4F67AC();
                swift_bridgeObjectRelease();
                sub_1AE4F6648();
                goto LABEL_81;
              }
              a1 = 0;
              v77 = sub_1AE78D64C(v76);
              v79 = v78;
              sub_1AE4F67AC();
              sub_1AE4F66E8();
              *(_QWORD *)(v73 + 16) = v77;
              *(_QWORD *)(v73 + 24) = v79;
              *(_QWORD *)(v12 + 40) = v73 | 0x5000000000000000;
              *(_QWORD *)(v114 + 16) = v12;
              sub_1AE78B838();
              v80 = v115;
              *(_QWORD *)(v115 + 32) = v81;
              v12 = v116;
              *(_QWORD *)(v116 + 56) = v80;
              v14 = v136;
              v82 = *(_QWORD *)(v136 + 16);
              v11 = v82 + 1;
              if (v82 >= *(_QWORD *)(v136 + 24) >> 1)
              {
                sub_1AE78B27C();
                v14 = v100;
              }
              a2 = v131;
              *(_QWORD *)(v14 + 16) = v11;
              *(_QWORD *)(v14 + 8 * v82 + 32) = v12 | 4;
              sub_1AE4F67AC();
              goto LABEL_70;
            }
            v18 = sub_1AE78B75C();
            sub_1AE78B96C(v18, (uint64_t)&v136);
            if (sub_1AE78B964() != 7)
            {
              sub_1AE4F6804();
              sub_1AE5071E8();
              goto LABEL_36;
            }
            v19 = v17;
            v20 = *(_QWORD *)v17;
            v21 = *(_QWORD *)(v19 + 8);
            a1 = sub_1AE4F66BC();
            *(_QWORD *)(a1 + 16) = v20;
            *(_QWORD *)(a1 + 24) = v21;
            v22 = *(_QWORD *)(v14 + 16);
            v2 = *(_QWORD *)(v14 + 24);
            v11 = v22 + 1;
            sub_1AE4F6804();
            if (v22 >= v2 >> 1)
            {
              sub_1AE78B27C();
              v14 = v101;
            }
            sub_1AE78B5DC();
            v24 = a1 | v23;
            *(_QWORD *)(v14 + 16) = v11;
          }
          *(_QWORD *)(v14 + 8 * v22 + 32) = v24;
          sub_1AE4F67AC();
        }
LABEL_70:
        a2 += 24;
        if (!--v16)
        {
          sub_1AE4FBC80();
          v102 = v127;
          if ((~v127 & 0xF000000000000007) == 0)
          {
            a2 = v110;
            goto LABEL_75;
          }
          v103 = sub_1AE4F66BC();
          *(_QWORD *)(v103 + 16) = v102;
          *(_QWORD *)(v103 + 24) = v14;
          v104 = 0x2000000000000000;
          a2 = v110;
          goto LABEL_77;
        }
      }
    }
    swift_release();
LABEL_75:
    v103 = sub_1AE4F66BC();
    *(_QWORD *)(v103 + 16) = v14;
    v104 = 0x1000000000000004;
LABEL_77:
    *(_QWORD *)a2 = v104 | v103;
LABEL_82:
    sub_1AE4F667C();
  }
}

void sub_1AE78217C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  unint64_t v19;
  __n128 *v20;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  __n128 *v62;
  __n128 *v63;
  uint64_t v64;
  __n128 *v65;
  uint64_t v66;
  __n128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 *v121;
  uint64_t v122;
  __n128 *v123;
  uint64_t v124;
  __n128 *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __n128 *v142;
  __n128 *v143;
  unint64_t v144;
  __n128 *v145;
  __n128 *v146;
  __n128 *v147;
  __n128 *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __n128 *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __n128 *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  uint64_t v174;
  _QWORD *v175;
  __n128 *v176;
  uint64_t v177;
  uint64_t v178;
  __n128 *v179;
  __n128 *v180;
  uint64_t v181[3];
  int v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __n128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  __n128 *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  unint64_t v216;
  unsigned __int8 v217;
  uint64_t v218;
  uint64_t v219;

  v190 = sub_1AE78B9BC(a2);
  v189 = *(_QWORD *)(v190 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F9024();
  v188 = v5;
  *(_QWORD *)&v214 = sub_1AE78B8A8();
  v184 = *(_QWORD *)(v214 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v6);
  sub_1AE4F686C();
  v201 = v7;
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t)v181 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v181 - v13;
  MEMORY[0x1E0C80A78](v12);
  v204 = (uint64_t)v181 - v15;
  v16 = sub_1AE4F66BC();
  v185 = sub_1AE501548((uint64_t *)&unk_1ED31BCC0);
  v17 = (__n128 *)sub_1AE4F66BC();
  sub_1AE50AA94(v17, (__n128)xmmword_1AE959600);
  static EntityClass.event.getter();
  static EntityClass.calendarEvent.getter();
  static EntityClass.activityEvent.getter();
  static EntityClass.commuteActivity.getter();
  static EntityClass.transportationActivity.getter();
  static EntityClass.workingActivity.getter();
  static EntityClass.meetingActivity.getter();
  static EntityClass.eatingActivity.getter();
  static EntityClass.watchingTVActivity.getter();
  static EntityClass.communicatingActivity.getter();
  static EntityClass.shoppingActivity.getter();
  static EntityClass.mindfulnessActivity.getter();
  static EntityClass.sleepingActivity.getter();
  static EntityClass.travelingActivity.getter();
  static EntityClass.readingActivity.getter();
  static EntityClass.vacationingActivity.getter();
  static EntityClass.gamingActivity.getter();
  static EntityClass.socializingActivity.getter();
  static EntityClass.wakingUpActivity.getter();
  static EntityClass.goingToBedActivity.getter();
  static EntityClass.exercisingActivity.getter();
  static EntityClass.commuteActivity.getter();
  static EntityClass.diningActivity.getter();
  static EntityClass.attendingAPerformanceActivity.getter();
  static EntityClass.stationaryActivity.getter();
  static EntityClass.locationVisitActivity.getter();
  *(_QWORD *)(v16 + 16) = v17;
  sub_1AE50A0A4();
  v19 = v18[1].n128_u64[0];
  v20 = v18;
  if (v19 >= v18[1].n128_u64[1] >> 1)
  {
    sub_1AE5076A8();
    v20 = v176;
  }
  v20[1].n128_u64[0] = v19 + 1;
  v21 = v20;
  v20[2].n128_u64[v19] = v16 | 0x4000000000000000;
  v215 = a1;
  sub_1AE4F66CC();
  sub_1AE77EB2C(&v215);
  if (v2)
    goto LABEL_193;
  v22 = v215;
  v23 = v201;
  v194 = *(_QWORD *)(v215 + 16);
  if (!v194)
  {
    swift_release();
    v207 = 0;
    v208 = 0;
    v210 = 0;
    v156 = 0;
    v30 = 0;
    v209 = 0;
    v25 = 0;
    v205 = 0;
    v206 = 0;
    LOWORD(v26) = 0;
    v155 = MEMORY[0x1E0DEE9D8];
    v182 = 1;
LABEL_134:
    v187 = v156;
    if (*(_QWORD *)(v155 + 16))
    {
      v11 = sub_1AE4F66BC();
      v31 = sub_1AE4F66BC();
      v214 = xmmword_1AE934250;
      *(_OWORD *)(v31 + 16) = xmmword_1AE934250;
      static EntityClass.dateRelationshipType.getter();
      *(_QWORD *)(v11 + 16) = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
LABEL_174:
        sub_1AE5071DC();
        v155 = v177;
      }
      v157 = *(_QWORD *)(v155 + 16);
      sub_1AE78B638();
      if (v130)
      {
        sub_1AE5071DC();
        v155 = v178;
      }
      *(_QWORD *)(v155 + 16) = v31;
      *(_QWORD *)(v155 + 8 * v157 + 32) = v11 | 0x4000000000000000;
      v158 = sub_1AE4F66BC();
      sub_1AE78BA4C(v158);
      sub_1AE501548(&qword_1EED9A5E0);
      v159 = (__n128 *)sub_1AE4F66BC();
      sub_1AE78B37C(v159);
      *(_QWORD *)(sub_1AE4F66BC() + 16) = v155;
      sub_1AE78BA38();
      v159[2].n128_u64[0] = v160;
      *(_QWORD *)(v158 + 56) = v159;
      v161 = v21[1].n128_u64[0];
      sub_1AE78B638();
      if (v130)
      {
        sub_1AE50A63C();
        v21 = v180;
      }
      v162 = v210;
      v21[1].n128_u64[0] = (unint64_t)v159;
      v21[2].n128_u64[v161] = v158 | 4;
      if (v25)
        goto LABEL_141;
    }
    else
    {
      sub_1AE4F6728();
      v162 = v210;
      if (v25)
      {
LABEL_141:
        v163 = sub_1AE4F66BC();
        sub_1AE501548(&qword_1EEDA2948);
        v164 = sub_1AE4F66BC();
        v214 = xmmword_1AE934250;
        *(_OWORD *)(v164 + 16) = xmmword_1AE934250;
        *(_QWORD *)(v164 + 32) = v207;
        *(_QWORD *)(v164 + 40) = v25;
        v165 = v206;
        *(_QWORD *)(v164 + 48) = v205;
        *(_QWORD *)(v164 + 56) = v165;
        *(_WORD *)(v164 + 64) = v26;
        *(_QWORD *)(v163 + 16) = v164;
        v166 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78B37C(v166);
        *(_QWORD *)(v167 + 32) = v208;
        *(_QWORD *)(v167 + 40) = v162;
        *(_QWORD *)(v167 + 48) = v187;
        *(_QWORD *)(v167 + 56) = v30;
        *(_WORD *)(v167 + 64) = v209;
        *(_QWORD *)(v163 + 24) = v167;
        v168 = 0xB000000000000000;
        if ((v182 & 1) != 0)
          v168 = 0xA000000000000004;
        v169 = v168 | v163;
        v171 = v21[1].n128_u64[0];
        v170 = v21[1].n128_u64[1];
        swift_retain();
        if (v171 >= v170 >> 1)
        {
          sub_1AE50A63C();
          v21 = v179;
        }
        v21[1].n128_u64[0] = v171 + 1;
        v21[2].n128_u64[v171] = v169;
        sub_1AE4FB730();
        goto LABEL_148;
      }
    }
    sub_1AE78B590(v208, v162);
LABEL_148:
    v172 = sub_1AE4F66BC();
    *(_QWORD *)(v172 + 16) = v21;
    *(_QWORD *)v181[2] = v172 | 0x2000000000000004;
    goto LABEL_149;
  }
  v181[0] = (uint64_t)v14;
  v196 = 0;
  v208 = 0;
  v210 = 0;
  v187 = 0;
  v24 = 0;
  v209 = 0;
  v206 = 0;
  v207 = 0;
  v25 = 0;
  v205 = 0;
  v26 = 0;
  v27 = 0;
  v195 = v215 + 32;
  v213 = 233;
  v212 = 2674;
  v211 = 3558;
  v182 = 1;
  v183 = xmmword_1AE933BD0;
  v192 = (__n128)xmmword_1AE934250;
  v191 = MEMORY[0x1E0DEE9D8];
  v193 = v215;
  while (2)
  {
    if (v27 >= *(_QWORD *)(v22 + 16))
      goto LABEL_165;
    v28 = (unsigned __int8 *)(v195 + 24 * v27);
    v29 = *v28;
    v30 = *((_QWORD *)v28 + 1);
    LODWORD(v202) = v26;
    v203 = v25;
    v200 = v30;
    v31 = 1;
    switch(v29)
    {
      case 8:
        sub_1AE4F798C();
        v202 = sub_1AE4F66BC();
        v32 = sub_1AE501548(&qword_1EED9A5E0);
        v21 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78B6C0(v21, (uint64_t)&v212);
        v33 = sub_1AE4F66BC();
        v34 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78B868(v34);
        swift_bridgeObjectRetain();
        static EntityClass.person.getter();
        *(_QWORD *)(v33 + 16) = v25;
        v21[2].n128_u64[0] = v33 | 0x4000000000000000;
        v35 = sub_1AE4F66BC();
        MEMORY[0x1E0C80A78](v35);
        sub_1AE78B5C0();
        swift_bridgeObjectRetain();
        sub_1AE78B410((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204, v22, v30);
        if (v22)
        {
          sub_1AE4FBC80();
          sub_1AE4F76D8();
          sub_1AE50911C();
          sub_1AE78B310(v207, v203);
          sub_1AE5001F4();
          sub_1AE4FCF54();
          sub_1AE4FCA90();
          sub_1AE5066C4();
          v21[1].n128_u64[0] = 0;
          goto LABEL_154;
        }
        v181[1] = v32;
        v37 = sub_1AE78B8D8(v36);
        v39 = v38;
        sub_1AE4F76D8();
        sub_1AE4F6710();
        *(_QWORD *)(v35 + 16) = v37;
        *(_QWORD *)(v35 + 24) = v39;
        v21[2].n128_u64[1] = v35 | 0x5000000000000000;
        *(_QWORD *)(v202 + 16) = v21;
        sub_1AE78B82C();
        v42 = v40 | v41;
        v31 = v30;
        if (*(_QWORD *)(v30 + 16))
        {
          v30 = v40;
          sub_1AE78B62C();
          v44 = (uint64_t *)v181[0];
          sub_1AE78B0EC(v31 + v43, v181[0]);
          if (sub_1AE78BB6C() == 7)
          {
            swift_release();
            v45 = *v44;
            v46 = v44[1];
            v47 = sub_1AE4F66BC();
            *(_QWORD *)(v47 + 16) = v45;
            *(_QWORD *)(v47 + 24) = v46;
            sub_1AE78B5DC();
            v42 = v48 | v49;
          }
          else
          {
            sub_1AE78AFB8((uint64_t)v44);
          }
          v25 = v203;
          v31 = v200;
        }
        else
        {
          v25 = v203;
        }
        v137 = sub_1AE4F66CC();
        v138 = sub_1AE790FF0(v137);
        sub_1AE4F9038();
        if (v138)
        {
          v31 = sub_1AE4F66BC();
          v21 = (__n128 *)sub_1AE78D64C(v138);
          v140 = v139;
          sub_1AE4F67AC();
          swift_release();
          *(_QWORD *)(v31 + 16) = v21;
          *(_QWORD *)(v31 + 24) = v140;
          v42 = v31 | 0x4000000000000004;
        }
        v141 = sub_1AE4F66BC();
        if (v213 >= 117)
        {
          v119 = v141;
          sub_1AE5C6870(0x74uLL, v141 + 16);
          v142 = (__n128 *)sub_1AE4F66BC();
          sub_1AE78B6C0(v142, (uint64_t)&v219);
          v120 = sub_1AE4F66BC();
          sub_1AE4F66BC();
          static EntityPredicate.attendeeIdentifier.getter();
          v143 = (__n128 *)sub_1AE4F66BC();
          sub_1AE78B610(v143);
          *(_QWORD *)(v120 + 16) = v144;
          v142[2].n128_u64[0] = v120 | 0x1000000000000000;
          *(_QWORD *)(v119 + 56) = v142;
          sub_1AE78B510();
          sub_1AE78B3A0();
          v199 = v148;
          goto LABEL_127;
        }
        goto LABEL_172;
      case 9:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 19:
      case 20:
        goto LABEL_151;
      case 10:
        sub_1AE4F798C();
        v64 = v30;
        v202 = sub_1AE4F66BC();
        v30 = sub_1AE501548(&qword_1EED9A5E0);
        v65 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78B6C0(v65, (uint64_t)&v212);
        v66 = sub_1AE4F66BC();
        v67 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78B868(v67);
        sub_1AE4F6730();
        static EntityClass.place.getter();
        *(_QWORD *)(v66 + 16) = v25;
        v65[2].n128_u64[0] = v66 | 0x4000000000000000;
        v68 = sub_1AE4F66BC();
        MEMORY[0x1E0C80A78](v68);
        sub_1AE78B5C0();
        sub_1AE4F6730();
        sub_1AE78B410((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204, v22, v64);
        if (!v22)
        {
          v70 = sub_1AE78B8D8(v69);
          v31 = v71;
          sub_1AE4F81B8();
          sub_1AE4F6710();
          *(_QWORD *)(v68 + 16) = v70;
          *(_QWORD *)(v68 + 24) = v31;
          v65[2].n128_u64[1] = v68 | 0x5000000000000000;
          v25 = v202;
          *(_QWORD *)(v202 + 16) = v65;
          v72 = sub_1AE4F6730();
          v21 = (__n128 *)sub_1AE790FF0(v72);
          sub_1AE4F81B8();
          if (v21)
          {
            v31 = sub_1AE4F66BC();
            v73 = sub_1AE78D64C((uint64_t)v21);
            v75 = v74;
            sub_1AE4F66E8();
            swift_release();
            *(_QWORD *)(v31 + 16) = v73;
            *(_QWORD *)(v31 + 24) = v75;
            v42 = v31 | 0x4000000000000004;
          }
          else
          {
            sub_1AE78B82C();
            v42 = v25 | v117;
          }
          v118 = sub_1AE4F66BC();
          if (v213 >= 91)
          {
            v119 = v118;
            sub_1AE5C6870(0x5AuLL, v118 + 16);
            v120 = sub_1AE4F66BC();
            sub_1AE78B6C0((__n128 *)v120, (uint64_t)&v219);
            v202 = sub_1AE4F66BC();
            v121 = (__n128 *)sub_1AE4F66BC();
            sub_1AE78B6C0(v121, (uint64_t)&v212);
            v122 = sub_1AE4F66BC();
            v123 = (__n128 *)sub_1AE4F66BC();
            sub_1AE5B8864(v123, v192);
            *(_QWORD *)(v122 + 16) = v123;
            v121[2].n128_u64[0] = v122 | 0x4000000000000000;
            v124 = sub_1AE4F66BC();
            sub_1AE5C6870(0x33uLL, v124 + 16);
            v125 = (__n128 *)sub_1AE4F66BC();
            sub_1AE78B610(v125);
            v121[2].n128_u64[1] = v126;
            v127 = v202;
            *(_QWORD *)(v202 + 16) = v121;
            *(_QWORD *)(v120 + 32) = v127 | 0x1000000000000004;
            *(_QWORD *)(v119 + 56) = v120;
            sub_1AE78B510();
            sub_1AE78B3A0();
            v199 = v147;
            v25 = v203;
LABEL_127:
            v23 = v201;
            v145 = v199;
            v199[1].n128_u64[0] = v120;
            v21 = v145;
            v145[2].n128_u64[v42] = v119 | 4;
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_128;
          }
          goto LABEL_173;
        }
        sub_1AE4FBC80();
        sub_1AE4F81B8();
        sub_1AE50911C();
        sub_1AE78B310(v207, v203);
        sub_1AE5001F4();
        sub_1AE4FCF54();
        sub_1AE4FCA90();
        sub_1AE5066C4();
        v65[1].n128_u64[0] = 0;
LABEL_154:
        swift_bridgeObjectRelease();
        swift_release();
        sub_1AE4FCA90();
        break;
      case 17:
        if (v213 < 153)
        {
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
          goto LABEL_174;
        }
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_187;
        sub_1AE78B6E8();
        if (v77 == v78)
          goto LABEL_169;
        if (*(_QWORD *)(v76 + 3664) >= v211)
          goto LABEL_170;
        sub_1AE78B6A4();
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_191;
        v23 = *(unsigned __int16 *)(v79 + 3648);
        sub_1AE78B704();
        sub_1AE78B298();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_192;
        sub_1AE4F66BC();
        v80 = sub_1AE78B9B0();
        v82 = sub_1AE78B91C(v80, v81);
        MEMORY[0x1E0C80A78](v82);
        v181[-2] = v186;
        sub_1AE4FB764();
        sub_1AE78B410((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204, (uint64_t)&v181[-4], v25);
        v196 = &v181[-4];
        if (v181 == (uint64_t *)32)
        {
          v21 = v83;
          sub_1AE78B304();
          if (v85)
          {
            v86 = v21[2].n128_i64[0];
            v87 = v21[2].n128_u64[1];
            sub_1AE4F66CC();
            sub_1AE506240();
            sub_1AE4F66E8();
          }
          else if (v84)
          {
            sub_1AE78B34C();
            sub_1AE501548(&qword_1ED319DE0);
            sub_1AE78BA30();
            sub_1AE78B218();
            v23 = v131;
            sub_1AE507F80();
            sub_1AE4F6728();
            sub_1AE501ED8();
            sub_1AE506240();
            sub_1AE4F66E8();
            v86 = v215;
            v87 = v216;
          }
          else
          {
            sub_1AE506240();
            sub_1AE4F66E8();
            v86 = 0;
            v87 = 0xE000000000000000;
          }
          sub_1AE78B6D4();
          sub_1AE78B9C8();
          if ((v132 & 1) == 0)
          {
            sub_1AE5076A8();
            v191 = v149;
          }
          sub_1AE78B5E8();
          if (v130)
          {
            sub_1AE78B3BC();
            v191 = v150;
          }
          v133 = 0xE700000000000000;
LABEL_119:
          v136 = v191;
          *(_QWORD *)(v191 + 16) = v87;
          *(_QWORD *)(v136 + 8 * v86 + 32) = v133;
LABEL_120:
          swift_bridgeObjectRelease();
LABEL_128:
          v24 = v198;
          goto LABEL_129;
        }
LABEL_150:
        sub_1AE4F6648();
        sub_1AE50911C();
        sub_1AE78B310(v207, v203);
        sub_1AE5001F4();
        sub_1AE4FCF54();
        sub_1AE4FBC80();
        sub_1AE4F6648();
        swift_bridgeObjectRelease();
        sub_1AE4F6648();
        sub_1AE4FCA90();
        break;
      case 18:
        if (v213 < 154)
          goto LABEL_167;
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_188;
        sub_1AE78B6E8();
        if (v77 == v78)
          goto LABEL_168;
        if (*(_QWORD *)(v88 + 3688) >= v211)
          goto LABEL_171;
        sub_1AE78B6A4();
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_189;
        v23 = *(unsigned __int16 *)(v89 + 3672);
        sub_1AE78B704();
        sub_1AE78B298();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_190;
        sub_1AE4F66BC();
        v90 = sub_1AE78B9B0();
        v92 = sub_1AE78B91C(v90, v91);
        MEMORY[0x1E0C80A78](v92);
        v181[-2] = v186;
        sub_1AE4FB764();
        sub_1AE78B410((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204, (uint64_t)&v181[-4], v25);
        v196 = &v181[-4];
        if (v181 != (uint64_t *)32)
          goto LABEL_150;
        v21 = v93;
        sub_1AE78B304();
        if (v85)
        {
          v86 = v21[2].n128_i64[0];
          v87 = v21[2].n128_u64[1];
          sub_1AE4F66CC();
          sub_1AE506240();
          sub_1AE4F66E8();
        }
        else if (v94)
        {
          sub_1AE78B34C();
          sub_1AE501548(&qword_1ED319DE0);
          sub_1AE78BA30();
          sub_1AE78B218();
          v23 = v134;
          sub_1AE507F80();
          sub_1AE4F6728();
          sub_1AE501ED8();
          sub_1AE506240();
          sub_1AE4F66E8();
          v86 = v215;
          v87 = v216;
        }
        else
        {
          sub_1AE506240();
          sub_1AE4F66E8();
          v86 = 0;
          v87 = 0xE000000000000000;
        }
        sub_1AE78B6D4();
        sub_1AE78B9C8();
        if ((v135 & 1) == 0)
        {
          sub_1AE5076A8();
          v191 = v151;
        }
        sub_1AE78B5E8();
        if (v130)
        {
          sub_1AE78B3BC();
          v191 = v152;
        }
        v133 = 0xE700000000000004;
        goto LABEL_119;
      case 21:
        goto LABEL_130;
      case 22:
        goto LABEL_16;
      case 23:
        sub_1AE5060EC();
        LODWORD(v31) = sub_1AE926D60();
LABEL_16:
        sub_1AE4F798C();
        swift_bridgeObjectRetain();
        sub_1AE4F67AC();
        v54 = *(_QWORD *)(v200 + 16);
        if (v54)
        {
          v55 = v184;
          sub_1AE78B62C();
          v58 = v56 + v57;
          swift_bridgeObjectRetain();
          v59 = *(_QWORD *)(v55 + 72);
          v21 = (__n128 *)MEMORY[0x1E0DEE9D8];
          do
          {
            sub_1AE78B0EC(v58, v11);
            sub_1AE78B0EC(v11, v23);
            if (sub_1AE78BB6C() == 6)
            {
              v60 = *(_BYTE *)v23;
              sub_1AE5071E8();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1AE78BAA0();
                v21 = v62;
              }
              v61 = v21[1].n128_u64[0];
              if (v61 >= v21[1].n128_u64[1] >> 1)
              {
                sub_1AE78BAA0();
                v21 = v63;
              }
              v21[1].n128_u64[0] = v61 + 1;
              v21[2].n128_u8[v61] = v60;
              v26 = v202;
              v23 = v201;
            }
            else
            {
              sub_1AE78AFB8(v23);
              sub_1AE5071E8();
            }
            v58 += v59;
            --v54;
          }
          while (v54);
          sub_1AE4F6824();
          v25 = v203;
        }
        else
        {
          swift_bridgeObjectRelease();
          v21 = (__n128 *)MEMORY[0x1E0DEE9D8];
        }
        v95 = v21[1].n128_u64[0];
        if (!v95)
        {
          sub_1AE4F66E8();
          v182 = v31;
          sub_1AE78B9C8();
          goto LABEL_129;
        }
        v96 = 0;
LABEL_55:
        v97 = v21[2].n128_u8[v96];
        sub_1AE78B590(v208, v210);
        sub_1AE78B310(v207, v25);
        if (v97 == 18)
        {
          if (v213 < 146)
          {
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
            JUMPOUT(0x1AE783D2CLL);
          }
          if (!_Records_GDEntityPredicate_records)
            goto LABEL_176;
          sub_1AE78B6E8();
          if (v77 == v78)
            goto LABEL_157;
          if (*(_QWORD *)(v105 + 3496) >= v211)
            goto LABEL_159;
          if (!_Records_GDEntityPredicate_predicateIds)
            goto LABEL_178;
          v26 = *(unsigned __int16 *)(v105 + 3480);
          v207 = sub_1AE4FD008();
          if (!_Records_GDEntityPredicate_labels)
            goto LABEL_179;
          v106 = sub_1AE78BBA8();
          if ((unint64_t)v213 < 0x9A)
            goto LABEL_162;
          v205 = v106;
          v206 = v107;
          if (!_Records_GDEntityPredicate_records)
            goto LABEL_182;
          v108 = *((_QWORD *)_Records_GDEntityPredicate_records + 461);
          sub_1AE78B6E8();
          if (v77 == v78 || v108 >= v211)
            goto LABEL_163;
          if (!_Records_GDEntityPredicate_predicateIds)
            goto LABEL_185;
          v209 = *(unsigned __int16 *)(v109 + 3672);
          v208 = sub_1AE4FD008();
          v210 = v111;
          if (!_Records_GDEntityPredicate_labels)
            goto LABEL_186;
LABEL_90:
          ++v96;
          v112 = sub_1AE925F8C();
          if (v95 == v96)
          {
            v187 = v112;
            swift_bridgeObjectRelease();
            v182 = v31;
            sub_1AE78B9C8();
            v23 = v201;
LABEL_129:
            v22 = v193;
            v27 = v197;
LABEL_130:
            if (++v27 == v194)
            {
              v30 = v24;
              swift_release();
              v155 = v191;
              v156 = v187;
              goto LABEL_134;
            }
            continue;
          }
          goto LABEL_55;
        }
        if (v97 == 17)
        {
          if (v213 < 146)
            goto LABEL_156;
          if (!_Records_GDEntityPredicate_records)
          {
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
LABEL_188:
            __break(1u);
LABEL_189:
            __break(1u);
LABEL_190:
            __break(1u);
LABEL_191:
            __break(1u);
LABEL_192:
            __break(1u);
LABEL_193:
            sub_1AE78B6CC();
            __break(1u);
            JUMPOUT(0x1AE783E2CLL);
          }
          sub_1AE78B6E8();
          if (v77 == v78)
            goto LABEL_158;
          if (*(_QWORD *)(v98 + 3496) >= v211)
            goto LABEL_160;
          if (!_Records_GDEntityPredicate_predicateIds)
            goto LABEL_177;
          v26 = *(unsigned __int16 *)(v98 + 3480);
          v207 = sub_1AE4FD008();
          if (!_Records_GDEntityPredicate_labels)
            goto LABEL_180;
          v99 = sub_1AE78BBA8();
          if ((unint64_t)v213 < 0x99)
            goto LABEL_161;
          v205 = v99;
          v206 = v100;
          if (!_Records_GDEntityPredicate_records)
            goto LABEL_181;
          v101 = *((_QWORD *)_Records_GDEntityPredicate_records + 458);
          sub_1AE78B6E8();
          if (v77 == v78 || v101 >= v211)
            goto LABEL_164;
          if (!_Records_GDEntityPredicate_predicateIds)
            goto LABEL_184;
          v209 = *(unsigned __int16 *)(v102 + 3648);
          v208 = sub_1AE4FD008();
          v210 = v104;
          if (!_Records_GDEntityPredicate_labels)
            goto LABEL_183;
          goto LABEL_90;
        }
        sub_1AE5001F4();
        sub_1AE4FCF54();
        sub_1AE4FBC80();
        sub_1AE4F66E8();
        sub_1AE78B784();
        sub_1AE92691C();
        sub_1AE925F74();
        LOBYTE(v218) = v97;
        sub_1AE926A48();
        sub_1AE925F74();
        sub_1AE78AFFC();
        v153 = sub_1AE4F6778();
        sub_1AE507B24(v153, v154);
        break;
      default:
        if (v29)
        {
LABEL_151:
          v173 = v28[16];
          swift_bridgeObjectRetain();
          swift_release();
          sub_1AE78B590(v208, v210);
          sub_1AE78B310(v207, v25);
          sub_1AE4F66E8();
          sub_1AE4FCF54();
          sub_1AE78B784();
          sub_1AE92691C();
          sub_1AE500F08();
          LOBYTE(v215) = v29;
          v216 = v30;
          v217 = v173;
          sub_1AE78B264();
          sub_1AE925F74();
          sub_1AE78B54C();
          v174 = sub_1AE4F6778();
          sub_1AE507B24(v174, v175);
          sub_1AE4F76D8();
          goto LABEL_149;
        }
        v197 = v27;
        v198 = v24;
        if (*(_QWORD *)(v30 + 16))
        {
          sub_1AE78B62C();
          v51 = v30 + v50;
          v199 = *(__n128 **)(v52 + 72);
          swift_bridgeObjectRetain_n();
          sub_1AE78B0EC(v51, v204);
          v53 = (char *)&loc_1AE782704 + dword_1AE783E6C[sub_1AE78BB6C()];
          __asm { BR              X9 }
        }
        swift_bridgeObjectRetain_n();
        v113 = MEMORY[0x1E0DEE9D8];
        v114 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
        if (v114 == 1)
        {
          v115 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
          v116 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 40);
          sub_1AE4F66CC();
          sub_1AE506240();
          sub_1AE4F6728();
        }
        else if (v114)
        {
          sub_1AE78B564();
          v218 = v113;
          sub_1AE501548(&qword_1ED319DE0);
          sub_1AE568D9C();
          sub_1AE78B6F4();
          sub_1AE925DC4();
          sub_1AE507F80();
          sub_1AE4F67AC();
          sub_1AE501ED8();
          sub_1AE506240();
          sub_1AE4F6728();
          v115 = v215;
          v116 = v216;
        }
        else
        {
          sub_1AE506240();
          sub_1AE4F6728();
          v115 = 0;
          v116 = 0xE000000000000000;
        }
        v128 = sub_1AE4F66BC();
        *(_QWORD *)(v128 + 16) = v115;
        *(_QWORD *)(v128 + 24) = v116;
        v129 = v21[1].n128_u64[0];
        sub_1AE78B638();
        v23 = v201;
        if (v130)
        {
          sub_1AE50A63C();
          v21 = v146;
        }
        v21[1].n128_u64[0] = v116;
        v21[2].n128_u64[v129] = v128 | 0x5000000000000000;
        goto LABEL_120;
    }
    break;
  }
LABEL_149:
  sub_1AE4FCE0C();
}

void sub_1AE783EF4(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  __int16 v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  __int128 v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;

  sub_1AE78B8A8();
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4F9024();
  v65 = v6;
  v7 = sub_1AE4F66BC();
  sub_1AE501548((uint64_t *)&unk_1ED31BCC0);
  v8 = sub_1AE4F66BC();
  sub_1AE50AA94((__n128 *)v8, (__n128)xmmword_1AE934250);
  static EntityClass.addressRelationshipType.getter();
  *(_QWORD *)(v7 + 16) = v8;
  sub_1AE50A0A4();
  sub_1AE78B7BC();
  if (v10)
  {
LABEL_51:
    sub_1AE5076A8();
    v9 = v62;
  }
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 8 * v3 + 32) = v7 | 0x4000000000000000;
  v70 = v9;
  v71 = a1;
  sub_1AE4F66CC();
  sub_1AE78B2D8();
  if (v2)
  {
LABEL_58:
    sub_1AE78B6CC();
    __break(1u);
    return;
  }
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    sub_1AE737848();
    sub_1AE4FB730();
LABEL_44:
    sub_1AE78AFFC();
    sub_1AE4F6778();
    sub_1AE78B674(v58, 0xD000000000000021);
    goto LABEL_47;
  }
  v12 = a1 + 48;
  v69 = 0xF000000000000007;
  sub_1AE78B978((__n128)xmmword_1AE933BD0);
  do
  {
    v7 = *(_QWORD *)(v12 - 8);
    v8 = *(unsigned __int8 *)(v12 - 16);
    if (*(_BYTE *)(v12 - 16))
    {
      if ((_DWORD)v8 == 21)
        goto LABEL_39;
      if ((_DWORD)v8 != 15)
      {
        sub_1AE4F6730();
        sub_1AE737848();
        sub_1AE4FBC80();
        sub_1AE78B784();
        sub_1AE92691C();
        sub_1AE500F08();
        sub_1AE78B264();
        sub_1AE4FDA58();
        sub_1AE508F74();
        sub_1AE78B54C();
        v60 = sub_1AE4F6778();
        sub_1AE507B24(v60, v61);
        sub_1AE78B038(v69);
        sub_1AE4F81B8();
        goto LABEL_47;
      }
      if (*(_QWORD *)(v7 + 16))
      {
        sub_1AE78B62C();
        a1 = v7;
        sub_1AE78B0EC(v7 + v13, (uint64_t)v65);
        if (sub_1AE78B964() == 7)
        {
          sub_1AE78B038(v69);
          a1 = *v65;
          v14 = v65[1];
          v15 = sub_1AE4F66BC();
          *(_QWORD *)(v15 + 16) = a1;
          *(_QWORD *)(v15 + 24) = v14;
          v69 = v15 | 0x4000000000000004;
          goto LABEL_39;
        }
        sub_1AE4F66CC();
        sub_1AE78AFB8((uint64_t)v65);
      }
      else
      {
        sub_1AE4F6730();
      }
      sub_1AE501548(&qword_1EED9A5E0);
      v8 = sub_1AE4F66BC();
      *(_OWORD *)(v8 + 16) = v64;
      *(_OWORD *)(sub_1AE4F66BC() + 16) = xmmword_1AE934250;
      if (!_Records_GDEntityClass_records)
        goto LABEL_55;
      sub_1AE78B2F0();
      if (v19 == v20)
        goto LABEL_49;
      v3 = *(_QWORD *)(v40 + 640);
      if (v3 >= 2889)
        goto LABEL_50;
      v74 = v11;
      if (!_Records_GDEntityClass_classIds[0])
        goto LABEL_57;
      v41 = v39;
      v68 = v8;
      v42 = *(_BYTE *)(v40 + 624);
      v43 = sub_1AE4FD008();
      if (!_Records_GDEntityClass_labels)
        goto LABEL_56;
      v45 = v43;
      v46 = v44;
      v66 = sub_1AE4F66BC();
      v47 = sub_1AE4F66BC();
      v48 = sub_1AE925F8C();
      *(_QWORD *)(v41 + 32) = v45;
      *(_QWORD *)(v41 + 40) = v46;
      *(_QWORD *)(v41 + 48) = v48;
      *(_QWORD *)(v41 + 56) = v49;
      *(_BYTE *)(v41 + 64) = v42;
      *(_QWORD *)(v47 + 16) = v41;
      v50 = v47 | 0x4000000000000000;
      v51 = v68;
      *(_QWORD *)(v68 + 32) = v50;
      v52 = sub_1AE4F66BC();
      MEMORY[0x1E0C80A78](v52);
      sub_1AE78B7E4();
      sub_1AE4FB764();
      v2 = 0;
      sub_1AE8AC150((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204, 0, v7);
      v54 = v53;
      sub_1AE78B304();
      if (v35)
      {
        v3 = *(_QWORD *)(v54 + 32);
        a1 = *(_QWORD *)(v54 + 40);
        sub_1AE4F66CC();
        sub_1AE4F81B8();
        sub_1AE4F66E8();
      }
      else if (v55)
      {
        sub_1AE78B34C();
        sub_1AE501548(&qword_1ED319DE0);
        sub_1AE78BA30();
        sub_1AE78B218();
        sub_1AE507F80();
        v51 = v68;
        swift_bridgeObjectRelease();
        sub_1AE501ED8();
        sub_1AE4F81B8();
        sub_1AE4F66E8();
        v3 = v71;
        a1 = v72;
      }
      else
      {
        sub_1AE4F81B8();
        sub_1AE4F66E8();
        v3 = 0;
        a1 = 0xE000000000000000;
      }
      *(_QWORD *)(v52 + 16) = v3;
      *(_QWORD *)(v52 + 24) = a1;
      *(_QWORD *)(v51 + 40) = v52 | 0x5000000000000000;
      sub_1AE78B038(v69);
      sub_1AE4F81B8();
      *(_QWORD *)(v66 + 16) = v51;
      sub_1AE78B838();
      v69 = v56;
      v11 = v74;
    }
    else
    {
      sub_1AE501548(&qword_1ED319608);
      *(_OWORD *)(sub_1AE4F66BC() + 16) = xmmword_1AE934250;
      if (!_Records_GDEntityPredicate_records)
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      sub_1AE78B388();
      if (v19 == v20)
      {
        __break(1u);
LABEL_48:
        __break(1u);
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      if (*(uint64_t *)(v17 + 880) >= 3558)
        goto LABEL_48;
      v73 = v11;
      if (!_Records_GDEntityPredicate_predicateIds)
        goto LABEL_53;
      v21 = v16;
      v67 = v12;
      v22 = *(_WORD *)(v17 + 864);
      v23 = (char *)_Records_GDEntityPredicate_predicateIds + v18;
      sub_1AE4F6730();
      v24 = sub_1AE78B298();
      v3 = v7;
      if (!_Records_GDEntityPredicate_labels)
        goto LABEL_54;
      v26 = v24;
      v27 = v25;
      v28 = sub_1AE4F66BC();
      v29 = sub_1AE925F8C();
      *(_QWORD *)(v21 + 32) = v26;
      *(_QWORD *)(v21 + 40) = v27;
      *(_QWORD *)(v21 + 48) = v29;
      *(_QWORD *)(v21 + 56) = v30;
      *(_WORD *)(v21 + 64) = v22;
      *(_QWORD *)(v28 + 16) = v21;
      MEMORY[0x1E0C80A78](v29);
      sub_1AE78B7E4();
      sub_1AE4F6804();
      v31 = (uint64_t)v23;
      v2 = 0;
      sub_1AE8AC150((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204, v31, v7);
      v33 = v32;
      sub_1AE78B304();
      if (v35)
      {
        v36 = *(_QWORD *)(v33 + 32);
        a1 = *(_QWORD *)(v33 + 40);
        sub_1AE4F66CC();
        sub_1AE4F67AC();
        sub_1AE4F76D8();
      }
      else if (v34)
      {
        sub_1AE78B364();
        sub_1AE501548(&qword_1ED319DE0);
        sub_1AE568D9C();
        sub_1AE78B3D8();
        sub_1AE507F80();
        sub_1AE4F66E8();
        sub_1AE501ED8();
        sub_1AE4F67AC();
        sub_1AE4F76D8();
        v36 = v71;
        a1 = v72;
      }
      else
      {
        sub_1AE4F67AC();
        sub_1AE4F76D8();
        v36 = 0;
        a1 = 0xE000000000000000;
      }
      *(_QWORD *)(v28 + 24) = v36;
      *(_QWORD *)(v28 + 32) = a1;
      v37 = *(_QWORD *)(v70 + 16);
      sub_1AE78B958();
      if (v10)
      {
        sub_1AE5076A8();
        v38 = v57;
      }
      v11 = v73;
      *(_QWORD *)(v38 + 16) = a1;
      v70 = v38;
      *(_QWORD *)(v38 + 8 * v37 + 32) = v28 | 0x5000000000000004;
      sub_1AE4F67AC();
      v12 = v67;
    }
LABEL_39:
    v12 += 24;
    --v11;
  }
  while (v11);
  sub_1AE4FBC80();
  if ((~v69 & 0xF000000000000007) == 0)
  {
    sub_1AE737848();
    goto LABEL_44;
  }
  v59 = sub_1AE4F66BC();
  *(_QWORD *)(v59 + 16) = v69;
  *(_QWORD *)(v59 + 24) = v70;
  *a2 = v59 | 0x2000000000000000;
LABEL_47:
  sub_1AE4F667C();
}

void sub_1AE7846D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[12];
  __n128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;

  v4 = sub_1AE78B9BC(a2);
  v55 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)&v56 = v4;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4F9024();
  v54 = v6;
  v59 = sub_1AE78B8A8();
  v49[10] = *(_QWORD *)(v59 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v7);
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1AE4F66CC();
    __asm { BR              X9 }
  }
  v8 = sub_1AE4F66BC();
  sub_1AE501548((uint64_t *)&unk_1ED31BCC0);
  v9 = (__n128 *)sub_1AE4F66BC();
  v56 = xmmword_1AE934250;
  sub_1AE50AA94(v9, (__n128)xmmword_1AE934250);
  static EntityClass.place.getter();
  *(_QWORD *)(v8 + 16) = v9;
  sub_1AE50A0A4();
  v11 = v10;
  v12 = *(_QWORD *)(v10 + 16);
  if (v12 >= *(_QWORD *)(v10 + 24) >> 1)
  {
    sub_1AE78B27C();
    v11 = v48;
  }
  *(_QWORD *)(v11 + 16) = v12 + 1;
  *(_QWORD *)(v11 + 8 * v12 + 32) = v8 | 0x4000000000000000;
  v60 = a1;
  sub_1AE4F66CC();
  sub_1AE78B2D8();
  if (v2)
  {
    sub_1AE78B6CC();
    __break(1u);
    JUMPOUT(0x1AE78599CLL);
  }
  v13 = *(_QWORD *)(v60 + 16);
  if (v13)
  {
    v58 = 0;
    v49[11] = v60;
    v14 = (_BYTE *)(v60 + 48);
    v51 = xmmword_1AE933BD0;
    v50 = (__n128)xmmword_1AE93D1B0;
    while (1)
    {
      v15 = *(v14 - 16);
      if (v15 != 21)
      {
        v16 = *((_QWORD *)v14 - 1);
        if (*(v14 - 16))
        {
          v45 = *v14;
          sub_1AE4F67A4();
          sub_1AE4F6710();
          sub_1AE78B8B0();
          sub_1AE78B5AC();
          sub_1AE500F08();
          LOBYTE(v60) = v15;
          v61 = v16;
          v62 = v45;
          sub_1AE78B264();
          sub_1AE4F6A2C();
          sub_1AE78B54C();
          v46 = sub_1AE4F6778();
          sub_1AE507B24(v46, v47);
          swift_bridgeObjectRelease();
          goto LABEL_20;
        }
        v55 = v11;
        v53 = v13;
        v54 = sub_1AE4F66BC();
        sub_1AE501548(&qword_1EED9A5E0);
        v59 = sub_1AE4F66BC();
        *(_OWORD *)(v59 + 16) = v51;
        v17 = sub_1AE4F66BC();
        sub_1AE501548(&qword_1ED319608);
        v18 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78BA24(v18);
        v20 = v19 + 32;
        sub_1AE4F67A4();
        static EntityPredicate.name.getter();
        *(_QWORD *)(v17 + 16) = v18;
        MEMORY[0x1E0C80A78](v21);
        v49[-2] = v57;
        sub_1AE4F67A4();
        v22 = v16;
        sub_1AE78BA14((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204, (uint64_t)&v49[-4], v16);
        if (v20)
        {
          sub_1AE73EED4();
          sub_1AE78B8B0();
          sub_1AE4F67AC();
          swift_bridgeObjectRelease();
          sub_1AE4FCA90();
          *(_QWORD *)(v59 + 16) = 0;
          sub_1AE4F67AC();
          sub_1AE4FB730();
          sub_1AE4FCA90();
          goto LABEL_20;
        }
        v24 = sub_1AE78D64C(v23);
        v58 = 0;
        v25 = v24;
        v27 = v26;
        sub_1AE4F67AC();
        sub_1AE4F66E8();
        *(_QWORD *)(v17 + 24) = v25;
        *(_QWORD *)(v17 + 32) = v27;
        *(_QWORD *)(v59 + 32) = v17 | 0x5000000000000004;
        v28 = sub_1AE4F66BC();
        static EntityPredicate.hasAddress.getter();
        v29 = (__n128 *)sub_1AE4F66BC();
        sub_1AE78BA24(v29);
        v30 = sub_1AE4F66BC();
        v31 = v22;
        v32 = sub_1AE4F66BC();
        v33 = (__n128 *)sub_1AE4F66BC();
        sub_1AE50AA94(v33, v50);
        static EntityPredicate.thoroughfare.getter();
        static EntityPredicate.locality.getter();
        static EntityPredicate.administrativeArea.getter();
        static EntityPredicate.subAdministrativeArea.getter();
        *(_QWORD *)(v32 + 16) = v33;
        MEMORY[0x1E0C80A78](v34);
        sub_1AE78B7CC();
        sub_1AE4FB764();
        sub_1AE78BA14((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204, 0, v22);
        v58 = 0;
        v36 = sub_1AE78D64C(v35);
        v38 = v37;
        v52 = v31;
        sub_1AE4F6710();
        sub_1AE4F6718();
        *(_QWORD *)(v32 + 24) = v36;
        *(_QWORD *)(v32 + 32) = v38;
        *(_QWORD *)(v30 + 16) = v32 | 0x5000000000000004;
        v29[2].n128_u64[0] = v30 | 0x1000000000000000;
        *(_QWORD *)(v28 + 56) = v29;
        v39 = v59;
        *(_QWORD *)(v59 + 40) = v28 | 4;
        v40 = v54;
        v11 = v55;
        *(_QWORD *)(v54 + 16) = v39;
        v41 = *(_QWORD *)(v11 + 16);
        sub_1AE78B638();
        if (v42)
        {
          sub_1AE78B27C();
          v11 = v43;
        }
        v13 = v53;
        *(_QWORD *)(v11 + 16) = v30;
        *(_QWORD *)(v11 + 8 * v41 + 32) = v40 | 0x3000000000000000;
        swift_bridgeObjectRelease();
      }
      v14 += 24;
      if (!--v13)
      {
        sub_1AE78B8B0();
        goto LABEL_17;
      }
    }
  }
  swift_release();
LABEL_17:
  v44 = sub_1AE4F66BC();
  *(_QWORD *)(v44 + 16) = v11;
  *(_QWORD *)v49[7] = v44 | 0x2000000000000004;
LABEL_20:
  sub_1AE4FCE0C();
}

void sub_1AE785A8C(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  __n128 *v90;
  unint64_t v91;
  uint64_t v92;
  __n128 *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _BYTE *v101;
  _BYTE *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t *v128;

  v105 = a2;
  v5 = sub_1AE4F66BC();
  v112 = sub_1AE501548((uint64_t *)&unk_1ED31BCC0);
  v6 = (__n128 *)sub_1AE4F66BC();
  v119 = xmmword_1AE934250;
  sub_1AE50AA94(v6, (__n128)xmmword_1AE934250);
  static EntityClass.screenTimeSegment.getter();
  *(_QWORD *)(v5 + 16) = v6;
  sub_1AE50A0A4();
  v8 = v7;
  if (*(_QWORD *)(v7 + 16) >= *(_QWORD *)(v7 + 24) >> 1)
    goto LABEL_141;
  while (2)
  {
    sub_1AE78B734(v5 | 0x4000000000000000);
    v123 = a1;
    sub_1AE4F66CC();
    sub_1AE78B2D8();
    if (v2)
      goto LABEL_163;
    v9 = *(_QWORD *)(v123 + 16);
    if (!v9)
    {
      swift_release();
      v11 = (_BYTE *)MEMORY[0x1E0DEE9D8];
      goto LABEL_102;
    }
    v128 = 0;
    v104 = v123;
    v10 = (_BYTE *)(v123 + 48);
    v11 = (_BYTE *)MEMORY[0x1E0DEE9D8];
    v115 = 2674;
    v116 = 233;
    v114 = 3558;
    v109 = 162;
    v107 = 1336;
    v106 = 2889;
    sub_1AE78B978((__n128)xmmword_1AE933BD0);
LABEL_5:
    v12 = *((_QWORD *)v10 - 1);
    v5 = *(v10 - 16);
    switch(*(v10 - 16))
    {
      case 0xB:
      case 0xF:
        v121 = v11;
        v13 = sub_1AE501548(&qword_1EED9A5E0);
        v5 = sub_1AE4F66BC();
        *(_OWORD *)(v5 + 16) = v108;
        *(_OWORD *)(sub_1AE4F66BC() + 16) = v119;
        if (v109 < 27)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          sub_1AE5071DC();
          v8 = v100;
          continue;
        }
        if (!_Records_GDEntityClass_records)
        {
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          sub_1AE78B6CC();
          __break(1u);
          JUMPOUT(0x1AE7869FCLL);
        }
        sub_1AE78B2F0();
        if (v15 == v16)
          goto LABEL_121;
        a1 = *(_QWORD *)(v14 + 640);
        sub_1AE78B774();
        if (v15 == v16)
          goto LABEL_122;
        v113 = v10;
        v122 = v9;
        v120 = v8;
        if (!_Records_GDEntityClass_classIds[0])
          goto LABEL_144;
        v18 = v17;
        v3 = v12;
        v110 = v13;
        sub_1AE4FB764();
        v19 = sub_1AE78B298();
        if (!_Records_GDEntityClass_labels)
          goto LABEL_143;
        v21 = v19;
        v22 = v20;
        v111 = sub_1AE4F66BC();
        sub_1AE4F66BC();
        v23 = sub_1AE78BB48();
        *(_QWORD *)(v18 + 32) = v21;
        *(_QWORD *)(v18 + 40) = v22;
        sub_1AE78B7FC(v23, v24);
        v25 = sub_1AE4F66BC();
        MEMORY[0x1E0C80A78](v25);
        v2 = &v104 - 4;
        *(&v104 - 2) = v117;
        sub_1AE4FB764();
        sub_1AE78B934((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204);
        v128 = &v104 - 4;
        if (&v104 != (unint64_t *)32)
        {
          sub_1AE736404();
          sub_1AE5FC314();
          sub_1AE4FBC80();
          sub_1AE4F6824();
          sub_1AE4FCA90();
          sub_1AE5066C4();
          *(_QWORD *)(v5 + 16) = 0;
          goto LABEL_119;
        }
        v27 = sub_1AE78B9A4(v26);
        v29 = v28;
        sub_1AE4F6710();
        sub_1AE4F67AC();
        *(_QWORD *)(v25 + 16) = v27;
        *(_QWORD *)(v25 + 24) = v29;
        *(_QWORD *)(v5 + 40) = v25 | 0x5000000000000000;
        *(_QWORD *)(v111 + 16) = v5;
        v30 = sub_1AE790FF0(v12);
        sub_1AE4F6710();
        if (v30)
        {
          sub_1AE4F66BC();
          v25 = sub_1AE78BB54();
          sub_1AE4F67AC();
          sub_1AE4FB730();
          sub_1AE78B984();
        }
        if (v116 < 224)
          goto LABEL_123;
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_145;
        sub_1AE78B388();
        if (v15 == v16)
          goto LABEL_124;
        if (*(_QWORD *)(v70 + 5368) >= v114)
          goto LABEL_125;
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_146;
        a1 = *(unsigned __int16 *)(v70 + 5352);
        sub_1AE4FD008();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_147;
        sub_1AE64AAC0();
        sub_1AE4F66BC();
        v71 = sub_1AE78BAEC();
        *(_QWORD *)(v5 + 16) = v30;
        *(_QWORD *)(v5 + 24) = v25;
        *(_QWORD *)(v5 + 32) = v71;
        *(_QWORD *)(v5 + 40) = v72;
        *(_WORD *)(v5 + 48) = a1;
        v73 = sub_1AE4F66BC();
        sub_1AE78B234(v73);
        sub_1AE5071DC();
        v8 = v82;
        v11 = v121;
        v9 = v122;
        sub_1AE78B734(v5 | 4);
        goto LABEL_77;
      case 0xC:
      case 0xD:
      case 0xE:
      case 0x13:
      case 0x14:
        goto LABEL_115;
      case 0x10:
        if (v116 < 225)
          goto LABEL_126;
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_149;
        sub_1AE78B388();
        if (v15 == v16)
          goto LABEL_130;
        if (*(_QWORD *)(v55 + 5392) >= v114)
          goto LABEL_132;
        v120 = v8;
        v122 = v9;
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_153;
        sub_1AE4F81B0();
        sub_1AE78B298();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_154;
        sub_1AE4F66BC();
        v56 = sub_1AE78B604();
        v58 = sub_1AE78B334(v56, v57);
        MEMORY[0x1E0C80A78](v58);
        v2 = &v104 - 4;
        *(&v104 - 2) = v117;
        sub_1AE4F81B0();
        sub_1AE78B440((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204);
        if (&v104 == (unint64_t *)32)
        {
          v60 = v59;
          v128 = 0;
          sub_1AE78B304();
          if (v54)
          {
            v62 = *(_QWORD *)(v60 + 32);
            a1 = *(_QWORD *)(v60 + 40);
            sub_1AE4F66CC();
            sub_1AE4F6648();
            sub_1AE4F81B8();
          }
          else if (v61)
          {
            sub_1AE4F82F4();
            sub_1AE501548(&qword_1ED319DE0);
            sub_1AE78BB40();
            sub_1AE506D54();
            sub_1AE507F80();
            sub_1AE4F76D8();
            sub_1AE501ED8();
            sub_1AE4F6648();
            sub_1AE4F81B8();
            v62 = v123;
            a1 = v124;
          }
          else
          {
            sub_1AE4F6648();
            sub_1AE4F81B8();
            v62 = 0;
            a1 = 0xE000000000000000;
          }
          *(_QWORD *)(v3 + 56) = v62;
          *(_QWORD *)(v3 + 64) = a1;
          *(_QWORD *)(v3 + 72) = 0;
          *(_QWORD *)(v3 + 80) = 0;
          *(_DWORD *)(v3 + 87) = 0;
          v8 = v120;
          v81 = *(_QWORD *)(v120 + 16);
          sub_1AE78B900();
          if (v79)
          {
            sub_1AE5071DC();
            v8 = v85;
          }
          *(_QWORD *)(v8 + 16) = a1;
          *(_QWORD *)(v8 + 8 * v81 + 32) = v3;
LABEL_98:
          swift_bridgeObjectRelease();
          v9 = v122;
          goto LABEL_99;
        }
        sub_1AE736404();
        sub_1AE4F6728();
        sub_1AE4FBC80();
        sub_1AE4F6824();
        sub_1AE78B7AC();
        sub_1AE4F9038();
        goto LABEL_117;
      case 0x11:
        if (v116 < 153)
          goto LABEL_127;
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_150;
        sub_1AE78B388();
        if (v15 == v16)
          goto LABEL_129;
        if (*(_QWORD *)(v47 + 3664) >= v114)
          goto LABEL_133;
        v121 = v11;
        v122 = v9;
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_151;
        v11 = v10;
        sub_1AE4F81B0();
        sub_1AE78B298();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_152;
        sub_1AE4F66BC();
        v48 = sub_1AE78B604();
        v50 = sub_1AE78B334(v48, v49);
        MEMORY[0x1E0C80A78](v50);
        v2 = &v104 - 4;
        *(&v104 - 2) = v117;
        sub_1AE4F81B0();
        sub_1AE78B440((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204);
        if (&v104 != (unint64_t *)32)
          goto LABEL_113;
        v52 = v51;
        v128 = 0;
        sub_1AE78B304();
        v118 = v12;
        if (v54)
        {
          a1 = *(_QWORD *)(v52 + 40);
          sub_1AE4F66CC();
          sub_1AE4F6718();
          sub_1AE4F81B8();
        }
        else if (v53)
        {
          sub_1AE4F82F4();
          sub_1AE501548(&qword_1ED319DE0);
          sub_1AE78BB40();
          sub_1AE506D54();
          sub_1AE507F80();
          sub_1AE4F76D8();
          sub_1AE501ED8();
          sub_1AE4F6718();
          sub_1AE4F81B8();
          a1 = v124;
        }
        else
        {
          sub_1AE4F6718();
          sub_1AE4F81B8();
          a1 = 0xE000000000000000;
        }
        if ((sub_1AE78B74C() & 1) == 0)
        {
          sub_1AE4F959C();
          v11 = v83;
        }
        v78 = *((_QWORD *)v11 + 2);
        sub_1AE78B900();
        if (v79)
        {
          sub_1AE50A63C();
          v11 = v84;
        }
        v80 = v3 | 0x6000000000000000;
        goto LABEL_97;
      case 0x12:
        if (v116 < 154)
          goto LABEL_128;
        if (!_Records_GDEntityPredicate_records)
          goto LABEL_148;
        sub_1AE78B388();
        if (v15 == v16)
          goto LABEL_131;
        if (*(_QWORD *)(v63 + 3688) >= v114)
          goto LABEL_134;
        v121 = v11;
        v122 = v9;
        if (!_Records_GDEntityPredicate_predicateIds)
          goto LABEL_155;
        v11 = v10;
        sub_1AE4F81B0();
        sub_1AE78B298();
        if (!_Records_GDEntityPredicate_labels)
          goto LABEL_156;
        sub_1AE4F66BC();
        v64 = sub_1AE78B604();
        v66 = sub_1AE78B334(v64, v65);
        MEMORY[0x1E0C80A78](v66);
        v2 = &v104 - 4;
        *(&v104 - 2) = v117;
        sub_1AE4F81B0();
        sub_1AE78B440((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204);
        if (&v104 == (unint64_t *)32)
        {
          v68 = v67;
          v128 = 0;
          sub_1AE78B304();
          v118 = v12;
          if (v54)
          {
            a1 = *(_QWORD *)(v68 + 40);
            sub_1AE4F66CC();
            sub_1AE4F6718();
            sub_1AE4F81B8();
          }
          else if (v69)
          {
            sub_1AE4F82F4();
            sub_1AE501548(&qword_1ED319DE0);
            sub_1AE78BB40();
            sub_1AE506D54();
            sub_1AE507F80();
            sub_1AE4F76D8();
            sub_1AE501ED8();
            sub_1AE4F6718();
            sub_1AE4F81B8();
            a1 = v124;
          }
          else
          {
            sub_1AE4F6718();
            sub_1AE4F81B8();
            a1 = 0xE000000000000000;
          }
          if ((sub_1AE78B74C() & 1) == 0)
          {
            sub_1AE4F959C();
            v11 = v86;
          }
          v78 = *((_QWORD *)v11 + 2);
          sub_1AE78B900();
          if (v79)
          {
            sub_1AE50A63C();
            v11 = v87;
          }
          v80 = v3 | 0x6000000000000004;
LABEL_97:
          *((_QWORD *)v11 + 2) = a1;
          *(_QWORD *)&v11[8 * v78 + 32] = v80;
          goto LABEL_98;
        }
LABEL_113:
        sub_1AE4F6728();
        sub_1AE5FC314();
        sub_1AE4FBC80();
        sub_1AE4F6824();
        sub_1AE78B7AC();
        sub_1AE4F9038();
LABEL_117:
        sub_1AE4FCA90();
        goto LABEL_112;
      case 0x15:
        goto LABEL_99;
      default:
        if (*(v10 - 16))
        {
LABEL_115:
          v97 = *v10;
          sub_1AE4F81B0();
          sub_1AE4F6728();
          sub_1AE4F66E8();
          sub_1AE4FBC80();
          sub_1AE78B598();
          v126 = v123;
          v127 = v124;
          sub_1AE4FDA58();
          sub_1AE508F74();
          LOBYTE(v123) = v5;
          v124 = v12;
          v125 = v97;
          sub_1AE78B264();
          sub_1AE4F6A2C();
          sub_1AE78B54C();
          v98 = sub_1AE4F6778();
          sub_1AE507B24(v98, v99);
          sub_1AE4F6718();
          goto LABEL_112;
        }
        v121 = v11;
        v31 = sub_1AE501548(&qword_1EED9A5E0);
        v5 = sub_1AE4F66BC();
        *(_OWORD *)(v5 + 16) = v108;
        *(_OWORD *)(sub_1AE4F66BC() + 16) = v119;
        if (v109 < 48)
          goto LABEL_135;
        if (!_Records_GDEntityClass_records)
          goto LABEL_157;
        if (*(_QWORD *)(_Records_GDEntityClass_records + 0x470) >= v107)
          goto LABEL_136;
        v118 = v12;
        a1 = *(_QWORD *)(_Records_GDEntityClass_records + 0x478);
        sub_1AE78B774();
        if (v15 == v16)
          goto LABEL_137;
        v113 = v10;
        v122 = v9;
        v120 = v8;
        if (!_Records_GDEntityClass_classIds[0])
          goto LABEL_158;
        v33 = v32;
        v110 = v31;
        v3 = v118;
        sub_1AE4FB764();
        v34 = sub_1AE78B298();
        if (!_Records_GDEntityClass_labels)
          goto LABEL_159;
        v36 = v34;
        v37 = v35;
        v111 = sub_1AE4F66BC();
        sub_1AE4F66BC();
        v38 = sub_1AE78BB48();
        *(_QWORD *)(v33 + 32) = v36;
        *(_QWORD *)(v33 + 40) = v37;
        sub_1AE78B7FC(v38, v39);
        v40 = sub_1AE4F66BC();
        MEMORY[0x1E0C80A78](v40);
        v2 = &v104 - 4;
        *(&v104 - 2) = v117;
        sub_1AE4FB764();
        sub_1AE78B934((void (*)(uint64_t *__return_ptr, uint64_t))sub_1AE78B204);
        v128 = &v104 - 4;
        if (&v104 == (unint64_t *)32)
        {
          v42 = sub_1AE78B9A4(v41);
          v44 = v43;
          sub_1AE4F6710();
          sub_1AE4F67AC();
          *(_QWORD *)(v40 + 16) = v42;
          *(_QWORD *)(v40 + 24) = v44;
          *(_QWORD *)(v5 + 40) = v40 | 0x5000000000000000;
          *(_QWORD *)(v111 + 16) = v5;
          v45 = sub_1AE4FB764();
          v46 = sub_1AE790FF0(v45);
          sub_1AE4F6710();
          if (v46)
          {
            sub_1AE4F66BC();
            v40 = sub_1AE78BB54();
            sub_1AE4F67AC();
            sub_1AE4FB730();
            sub_1AE78B984();
          }
          if (v116 < 147)
            goto LABEL_138;
          if (!_Records_GDEntityPredicate_records)
            goto LABEL_160;
          sub_1AE78B388();
          if (v15 == v16)
            goto LABEL_139;
          if (*(_QWORD *)(v74 + 3520) >= v114)
            goto LABEL_140;
          if (!_Records_GDEntityPredicate_predicateIds)
            goto LABEL_161;
          a1 = *(unsigned __int16 *)(v74 + 3504);
          sub_1AE4FD008();
          if (!_Records_GDEntityPredicate_labels)
            goto LABEL_162;
          sub_1AE64AAC0();
          sub_1AE4F66BC();
          v75 = sub_1AE78BAEC();
          *(_QWORD *)(v5 + 16) = v46;
          *(_QWORD *)(v5 + 24) = v40;
          *(_QWORD *)(v5 + 32) = v75;
          *(_QWORD *)(v5 + 40) = v76;
          *(_WORD *)(v5 + 48) = a1;
          v77 = sub_1AE4F66BC();
          sub_1AE78B234(v77);
          sub_1AE5071DC();
          v8 = v88;
          v11 = v121;
          v9 = v122;
          sub_1AE78B734(v5 | 4);
          sub_1AE73EED4();
LABEL_77:
          swift_release();
          v10 = v113;
LABEL_99:
          v10 += 24;
          if (!--v9)
          {
            sub_1AE4FBC80();
LABEL_102:
            if (*((_QWORD *)v11 + 2))
            {
              v89 = sub_1AE4F66BC();
              v90 = (__n128 *)sub_1AE4F66BC();
              sub_1AE78BA24(v90);
              static EntityClass.dateRelationshipType.getter();
              *(_QWORD *)(v89 + 16) = v90;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1AE4F959C();
                v11 = v101;
              }
              v91 = *((_QWORD *)v11 + 2);
              if (v91 >= *((_QWORD *)v11 + 3) >> 1)
              {
                sub_1AE4F959C();
                v11 = v102;
              }
              *((_QWORD *)v11 + 2) = v91 + 1;
              *(_QWORD *)&v11[8 * v91 + 32] = v89 | 0x4000000000000000;
              v92 = sub_1AE4F66BC();
              sub_1AE78BA4C(v92);
              sub_1AE501548(&qword_1EED9A5E0);
              v93 = (__n128 *)sub_1AE4F66BC();
              sub_1AE78BA24(v93);
              *(_QWORD *)(sub_1AE4F66BC() + 16) = v11;
              sub_1AE78BA38();
              v93[2].n128_u64[0] = v94;
              *(_QWORD *)(v92 + 56) = v93;
              v95 = *(_QWORD *)(v8 + 16);
              if (v95 >= *(_QWORD *)(v8 + 24) >> 1)
              {
                sub_1AE5071DC();
                v8 = v103;
              }
              *(_QWORD *)(v8 + 16) = v95 + 1;
              *(_QWORD *)(v8 + 8 * v95 + 32) = v92 | 4;
            }
            else
            {
              sub_1AE4F66E8();
            }
            v96 = sub_1AE4F66BC();
            *(_QWORD *)(v96 + 16) = v8;
            *v105 = v96 | 0x2000000000000004;
            goto LABEL_112;
          }
          goto LABEL_5;
        }
        sub_1AE736404();
        sub_1AE5FC314();
        sub_1AE4FBC80();
        sub_1AE4F6710();
        sub_1AE4FCA90();
        sub_1AE5066C4();
        *(_QWORD *)(v5 + 16) = 0;
        sub_1AE4F6710();
LABEL_119:
        swift_release();
        sub_1AE4FCA90();
LABEL_112:
        sub_1AE4F667C();
        return;
    }
  }
}

uint64_t sub_1AE786A28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  sub_1AE4F9070();
  return swift_task_switch();
}

uint64_t sub_1AE786A48()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(void);
  uint64_t (*v14)(id, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 32);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(_QWORD **)(v0 + 40);
    *(_QWORD *)(v0 + 16) = v1;
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE568D9C();
    v3 = sub_1AE925DC4();
    v5 = v4;
    sub_1AE501548(&qword_1ED31BCD0);
    v6 = sub_1AE4F66BC();
    *(_OWORD *)(v6 + 16) = xmmword_1AE934250;
    static EntityClass.person.getter();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 32) = v15;
    *(_QWORD *)(v6 + 40) = v16;
    v7 = objc_allocWithZone((Class)GDEntityResolutionRequest);
    v8 = sub_1AE786D60(v3, v5, v6, 0, 0, 0, 1);
    *(_QWORD *)(v0 + 48) = v8;
    v9 = v2[4];
    v10 = v2[5];
    sub_1AE4F9858(v2 + 1, v9);
    v14 = (uint64_t (*)(id, uint64_t, uint64_t))(**(int **)(v10 + 16) + *(_QWORD *)(v10 + 16));
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v11;
    *v11 = v0;
    v11[1] = sub_1AE786BC4;
    return v14(v8, v9, v10);
  }
  else
  {
    **(_QWORD **)(v0 + 24) = 0xF000000000000007;
    v13 = (uint64_t (*)(void))sub_1AE5094FC();
    return v13();
  }
}

uint64_t sub_1AE786BC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  sub_1AE64A8C4();
  *v5 = *v3;
  *(_QWORD *)(v2 + 64) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v2 + 72) = a1;
  sub_1AE4F9070();
  return sub_1AE4F77A8();
}

uint64_t sub_1AE786C20()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);

  v3 = (void *)v0[9];
  v4 = (void *)v0[6];
  v5 = (uint64_t *)v0[3];
  v6 = objc_msgSend(v3, sel_rankedResults, MEMORY[0x1E0DEE9E8]);
  sub_1AE53F468(0, &qword_1ED30FC68);
  v7 = sub_1AE9261CC();

  sub_1AE77E8C0(v7);
  sub_1AE4F76D8();
  v8 = sub_1AE4F66BC();
  swift_bridgeObjectRetain();
  sub_1AE58FBA8();
  v10 = v9;
  sub_1AE4F665C();
  sub_1AE78D64C(v10);
  sub_1AE64AAC0();
  swift_release();

  *(_QWORD *)(v8 + 16) = v1;
  *(_QWORD *)(v8 + 24) = v2;
  sub_1AE4F665C();
  sub_1AE78B5DC();
  *v5 = v8 | v11;
  v12 = (uint64_t (*)(void))sub_1AE5094FC();
  return v12();
}

uint64_t sub_1AE786D34()
{
  uint64_t v0;

  return sub_1AE4F90A8(*(uint64_t (**)(void))(v0 + 8));
}

id sub_1AE786D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  void *v7;
  void *v8;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v8 = v7;
  v14 = (void *)sub_1AE925E18();
  swift_bridgeObjectRelease();
  if (!a3)
  {
    v15 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v16 = 0;
    goto LABEL_6;
  }
  v15 = (void *)sub_1AE9261C0();
  swift_bridgeObjectRelease();
  if (!a4)
    goto LABEL_5;
LABEL_3:
  sub_1AE53F468(0, &qword_1EED9D158);
  v16 = (void *)sub_1AE9261C0();
  swift_bridgeObjectRelease();
LABEL_6:
  v17 = objc_msgSend(v8, sel_initWithText_entityClassFilter_spans_mode_constraint_includeInferredNames_, v14, v15, v16, a5, a6, a7 & 1);

  return v17;
}

void sub_1AE786E5C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v3 = a1[1];
  if (sub_1AE926D0C() >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_1AE788E18(0, v3, 1, (uint64_t)a1);
      return;
    }
    goto LABEL_100;
  }
  sub_1AE5197A0(v3 / 2);
  v71 = a1;
  v72 = v4;
  v76 = v5;
  v73 = v3;
  if (v3 <= 0)
    goto LABEL_64;
  v6 = 0;
  v7 = MEMORY[0x1E0DEE9D8];
  v77 = *a1;
  while (1)
  {
    v8 = v6 + 1;
    v74 = v7;
    v75 = v6;
    if (v6 + 1 < v3)
      __asm { BR              X8 }
    if (v8 < v6)
      goto LABEL_99;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v7 = v74;
    }
    else
    {
      sub_1AE889310(0, *(_QWORD *)(v74 + 16) + 1, 1, (char *)v74);
      v7 = v61;
    }
    v10 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v7 + 24);
    v11 = v10 + 1;
    if (v10 >= v9 >> 1)
    {
      sub_1AE889310(v9 > 1, v10 + 1, 1, (char *)v7);
      v7 = v62;
    }
    *(_QWORD *)(v7 + 16) = v11;
    v12 = v7 + 32;
    v13 = (uint64_t *)(v7 + 32 + 16 * v10);
    *v13 = v75;
    v13[1] = v8;
    v78 = v8;
    if (v10)
      break;
    v11 = 1;
LABEL_56:
    v6 = v78;
    v3 = v73;
    if (v78 >= v73)
      goto LABEL_65;
  }
  v14 = v7;
  while (1)
  {
    v15 = v11 - 1;
    if (v11 >= 4)
    {
      v20 = v12 + 16 * v11;
      v21 = *(_QWORD *)(v20 - 64);
      v22 = *(_QWORD *)(v20 - 56);
      v26 = __OFSUB__(v22, v21);
      v23 = v22 - v21;
      if (v26)
        goto LABEL_84;
      v25 = *(_QWORD *)(v20 - 48);
      v24 = *(_QWORD *)(v20 - 40);
      v26 = __OFSUB__(v24, v25);
      v18 = v24 - v25;
      v19 = v26;
      if (v26)
        goto LABEL_85;
      v27 = v11 - 2;
      v28 = (uint64_t *)(v12 + 16 * (v11 - 2));
      v30 = *v28;
      v29 = v28[1];
      v26 = __OFSUB__(v29, v30);
      v31 = v29 - v30;
      if (v26)
        goto LABEL_86;
      v26 = __OFADD__(v18, v31);
      v32 = v18 + v31;
      if (v26)
        goto LABEL_88;
      if (v32 >= v23)
      {
        v51 = (uint64_t *)(v12 + 16 * v15);
        v53 = *v51;
        v52 = v51[1];
        v26 = __OFSUB__(v52, v53);
        v54 = v52 - v53;
        v33 = v77;
        if (v26)
          goto LABEL_94;
        v44 = v18 < v54;
        goto LABEL_45;
      }
    }
    else
    {
      if (v11 != 3)
      {
        v45 = *(_QWORD *)(v7 + 32);
        v46 = *(_QWORD *)(v7 + 40);
        v26 = __OFSUB__(v46, v45);
        v38 = v46 - v45;
        v39 = v26;
        v33 = v77;
        goto LABEL_39;
      }
      v17 = *(_QWORD *)(v7 + 32);
      v16 = *(_QWORD *)(v7 + 40);
      v26 = __OFSUB__(v16, v17);
      v18 = v16 - v17;
      v19 = v26;
    }
    v33 = v77;
    if ((v19 & 1) != 0)
      goto LABEL_87;
    v27 = v11 - 2;
    v34 = (uint64_t *)(v12 + 16 * (v11 - 2));
    v36 = *v34;
    v35 = v34[1];
    v37 = __OFSUB__(v35, v36);
    v38 = v35 - v36;
    v39 = v37;
    if (v37)
      goto LABEL_89;
    v40 = (uint64_t *)(v12 + 16 * v15);
    v42 = *v40;
    v41 = v40[1];
    v26 = __OFSUB__(v41, v42);
    v43 = v41 - v42;
    if (v26)
      goto LABEL_92;
    if (__OFADD__(v38, v43))
      goto LABEL_93;
    if (v38 + v43 >= v18)
    {
      v44 = v18 < v43;
LABEL_45:
      if (v44)
        v15 = v27;
      goto LABEL_47;
    }
LABEL_39:
    if ((v39 & 1) != 0)
      goto LABEL_90;
    v47 = (uint64_t *)(v12 + 16 * v15);
    v49 = *v47;
    v48 = v47[1];
    v26 = __OFSUB__(v48, v49);
    v50 = v48 - v49;
    if (v26)
      goto LABEL_91;
    if (v50 < v38)
    {
      v7 = v14;
      goto LABEL_56;
    }
LABEL_47:
    v55 = v15 - 1;
    if (v15 - 1 >= v11)
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      __break(1u);
LABEL_100:
      __break(1u);
      JUMPOUT(0x1AE788AB8);
    }
    if (!v33)
    {
      __break(1u);
      JUMPOUT(0x1AE788AD0);
    }
    v56 = (uint64_t *)(v12 + 16 * v55);
    v57 = *v56;
    v58 = (_QWORD *)(v12 + 16 * v15);
    v59 = v58[1];
    sub_1AE789AF8(v33 + 24 * *v56, v33 + 24 * *v58, v33 + 24 * v59, v76);
    if (v1)
      break;
    if (v59 < v57)
      goto LABEL_81;
    if (v15 > *(_QWORD *)(v14 + 16))
      goto LABEL_82;
    *v56 = v57;
    *(_QWORD *)(v12 + 16 * v55 + 8) = v59;
    v60 = *(_QWORD *)(v14 + 16);
    if (v15 >= v60)
      goto LABEL_83;
    v11 = v60 - 1;
    memmove((void *)(v12 + 16 * v15), v58 + 2, 16 * (v60 - 1 - v15));
    v7 = v14;
    *(_QWORD *)(v14 + 16) = v60 - 1;
    if (v60 <= 2)
      goto LABEL_56;
  }
LABEL_62:
  swift_bridgeObjectRelease();
  if (v73 < -1)
  {
    __break(1u);
LABEL_64:
    v7 = MEMORY[0x1E0DEE9D8];
    v11 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_65:
    if (v11 >= 2)
    {
      v63 = *v71;
      do
      {
        v64 = v11 - 2;
        if (v11 < 2)
          goto LABEL_95;
        if (!v63)
        {
          __break(1u);
          JUMPOUT(0x1AE788AD8);
        }
        v65 = v7;
        v66 = *(_QWORD *)(v7 + 32 + 16 * v64);
        v67 = *(_QWORD *)(v7 + 32 + 16 * (v11 - 1) + 8);
        sub_1AE789AF8(v63 + 24 * v66, v63 + 24 * *(_QWORD *)(v7 + 32 + 16 * (v11 - 1)), v63 + 24 * v67, v76);
        if (v1)
          goto LABEL_62;
        if (v67 < v66)
          goto LABEL_96;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1AE8893F4();
          v65 = v70;
        }
        if (v64 >= *(_QWORD *)(v65 + 16))
          goto LABEL_97;
        v68 = (_QWORD *)(v65 + 32 + 16 * v64);
        *v68 = v66;
        v68[1] = v67;
        v69 = *(_QWORD *)(v65 + 16);
        if (v11 > v69)
          goto LABEL_98;
        memmove((void *)(v65 + 32 + 16 * (v11 - 1)), (const void *)(v65 + 32 + 16 * v11), 16 * (v69 - v11));
        v7 = v65;
        *(_QWORD *)(v65 + 16) = v69 - 1;
        v11 = v69 - 1;
      }
      while (v69 > 2);
    }
    swift_bridgeObjectRelease();
    if (v73 < -1)
    {
      __break(1u);
      JUMPOUT(0x1AE788AC8);
    }
  }
  *(_QWORD *)(v72 + 16) = 0;
  swift_bridgeObjectRelease();
}

void sub_1AE788E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
    __asm { BR              X8 }
}

uint64_t sub_1AE789AF8(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = a2 - a1;
  v7 = (uint64_t)(a2 - a1) / 24;
  v8 = a3 - a2;
  v9 = (uint64_t)(a3 - a2) / 24;
  if (v7 >= v9)
  {
    sub_1AE5208C8(a2, (uint64_t)(a3 - a2) / 24, a4);
    v14 = a2;
    v11 = a4;
    v12 = a4 + 24 * v9;
    if (a1 < a2 && v8 >= 24)
      __asm { BR              X8 }
  }
  else
  {
    sub_1AE5208C8(a1, (uint64_t)(a2 - a1) / 24, a4);
    v11 = a4;
    v12 = a4 + 24 * v7;
    if (a2 < a3 && v6 >= 24)
      __asm { BR              X8 }
    v14 = a1;
  }
  sub_1AE5208C8(v11, (v12 - v11) / 24, v14);
  return 1;
}

uint64_t sub_1AE78AF58()
{
  sub_1AE78BB18();
  return swift_deallocObject();
}

uint64_t sub_1AE78AF78(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1AE501548(&qword_1EEDA2928);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AE78AFB8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KGQ.Value();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AE78AFF4()
{
  return sub_1AE78B170();
}

unint64_t sub_1AE78AFFC()
{
  unint64_t result;

  result = qword_1EEDA2938;
  if (!qword_1EEDA2938)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE9598F4, &type metadata for KGQConversionError);
    atomic_store(result, &qword_1EEDA2938);
  }
  return result;
}

uint64_t sub_1AE78B038(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_release();
  return result;
}

uint64_t sub_1AE78B054()
{
  sub_1AE608144();
  sub_1AE4FBE44();
  return swift_deallocObject();
}

void sub_1AE78B06C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1AE78D40C(a1, a2);
}

uint64_t sub_1AE78B084()
{
  return sub_1AE78B1CC();
}

uint64_t sub_1AE78B08C()
{
  uint64_t v0;

  sub_1AE608144();
  sub_1AE509B3C();
  sub_1AE525C94(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(unsigned __int16 *)(v0 + 88), *(_BYTE *)(v0 + 90));
  return swift_deallocObject();
}

uint64_t sub_1AE78B0C4()
{
  sub_1AE78BB18();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AE78B0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KGQ.Value();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AE78B130()
{
  sub_1AE78B858();
  sub_1AE608144();
  sub_1AE4FBE44();
  return swift_deallocObject();
}

uint64_t sub_1AE78B14C()
{
  sub_1AE78BB18();
  sub_1AE608144();
  sub_1AE4FBE44();
  return swift_deallocObject();
}

uint64_t sub_1AE78B168()
{
  return sub_1AE78B170();
}

uint64_t sub_1AE78B170()
{
  sub_1AE78B858();
  return sub_1AE78B658();
}

uint64_t sub_1AE78B198()
{
  sub_1AE608144();
  sub_1AE509B3C();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AE78B1C4()
{
  return sub_1AE78B1CC();
}

uint64_t sub_1AE78B1CC()
{
  sub_1AE608144();
  sub_1AE509B3C();
  swift_bridgeObjectRelease();
  return sub_1AE78B658();
}

void sub_1AE78B204(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1AE78B06C(a1, a2);
}

uint64_t sub_1AE78B218()
{
  return sub_1AE925DC4();
}

uint64_t sub_1AE78B234(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v3 - 176);
  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(v1 + 56) = a1;
  return swift_retain();
}

uint64_t sub_1AE78B264()
{
  return sub_1AE926A48();
}

void sub_1AE78B270()
{
  sub_1AE51B560();
}

void sub_1AE78B27C()
{
  sub_1AE51B560();
}

uint64_t sub_1AE78B288()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 200) = v0;
  return swift_task_dealloc();
}

uint64_t sub_1AE78B298()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE78B2A0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1AE78B2BC(uint64_t a1)
{
  return sub_1AE77FC40(a1);
}

void sub_1AE78B2D8()
{
  uint64_t v0;

  sub_1AE77EB2C((uint64_t *)(v0 - 128));
}

uint64_t sub_1AE78B310(uint64_t a1, uint64_t a2)
{
  return sub_1AE52F880(a1, a2);
}

uint64_t sub_1AE78B334(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v3;
  *(_QWORD *)(v5 + 32) = result;
  *(_QWORD *)(v5 + 40) = a2;
  *(_WORD *)(v5 + 48) = v4;
  return result;
}

void sub_1AE78B34C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = 10075;
  *(_QWORD *)(v1 - 120) = 0xE200000000000000;
  *(_QWORD *)(v1 - 104) = v0;
}

void sub_1AE78B364()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = 10075;
  *(_QWORD *)(v1 - 120) = 0xE200000000000000;
  *(_QWORD *)(v1 - 104) = v0;
}

__n128 sub_1AE78B37C(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 144);
  a1[1] = result;
  return result;
}

uint64_t sub_1AE78B394()
{
  return swift_release();
}

void sub_1AE78B3A0()
{
  sub_1AE51B560();
}

void sub_1AE78B3BC()
{
  sub_1AE51B560();
}

uint64_t sub_1AE78B3D8()
{
  return sub_1AE925DC4();
}

uint64_t sub_1AE78B3F4()
{
  return sub_1AE925DC4();
}

void sub_1AE78B410(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  sub_1AE8AC150(a1, a2, a3);
}

uint64_t sub_1AE78B41C()
{
  return swift_release();
}

void sub_1AE78B440(void (*a1)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  sub_1AE8AC150(a1, v1, v2);
}

uint64_t sub_1AE78B450()
{
  return sub_1AE926D60();
}

uint64_t sub_1AE78B468()
{
  return 0x63734174726F73;
}

uint64_t sub_1AE78B47C()
{
  return 0x65746144646E65;
}

uint64_t sub_1AE78B490()
{
  return 0x6765746143707061;
}

uint64_t sub_1AE78B4A4()
{
  return 0x7473657265746E69;
}

uint64_t sub_1AE78B4B8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE78B4C0()
{
  return 0x6565646E65747461;
}

uint64_t sub_1AE78B4D4()
{
  return 0x6E6F6974616C6572;
}

uint64_t sub_1AE78B4E8()
{
  return 0x6464416C69616D65;
}

uint64_t sub_1AE78B4FC()
{
  return 0x6D754E656E6F6870;
}

uint64_t sub_1AE78B510()
{
  return swift_retain();
}

void sub_1AE78B528(double a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = (uint64_t)a1;
}

uint64_t sub_1AE78B538()
{
  return 0x73736572646461;
}

unint64_t sub_1AE78B54C()
{
  return sub_1AE78AFFC();
}

void sub_1AE78B564()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 128) = 10075;
  *(_QWORD *)(v0 - 120) = 0xE200000000000000;
}

uint64_t sub_1AE78B578(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = v4;
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  *(_WORD *)(v2 + 64) = v5;
  *(_QWORD *)(v6 + 16) = v2;
  return swift_task_alloc();
}

uint64_t sub_1AE78B590(uint64_t a1, uint64_t a2)
{
  return sub_1AE52F880(a1, a2);
}

uint64_t sub_1AE78B598()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 128) = 0;
  *(_QWORD *)(v0 - 120) = 0xE000000000000000;
  return sub_1AE92691C();
}

uint64_t sub_1AE78B5AC()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 128) = 0;
  *(_QWORD *)(v0 - 120) = 0xE000000000000000;
  return sub_1AE92691C();
}

uint64_t sub_1AE78B604()
{
  return sub_1AE925F8C();
}

__n128 sub_1AE78B610(__n128 *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 - 336);
  a1[1] = result;
  a1[2].n128_u64[0] = v1;
  *(_QWORD *)(v2 + 56) = a1;
  return result;
}

void sub_1AE78B644()
{
  sub_1AE51B560();
}

uint64_t sub_1AE78B658()
{
  return swift_deallocObject();
}

uint64_t sub_1AE78B660(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;

  *(_QWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  *(_WORD *)(v2 + 48) = v5;
  return swift_task_alloc();
}

uint64_t sub_1AE78B674@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = a2;
  a1[1] = (v2 - 32) | 0x8000000000000000;
  return swift_willThrow();
}

void sub_1AE78B688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 152) = a4;
  *(_QWORD *)(a4 + 16) = v5;
  *(_QWORD *)(a4 + 8 * v6 + 32) = v4 | 0x4000000000000000;
  *(_QWORD *)(v7 + 56) = a4;
}

void sub_1AE78B6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 280) = v1;
  *(_QWORD *)(v3 - 272) = v0;
  *(_QWORD *)(v3 - 264) = v2;
}

__n128 sub_1AE78B6C0@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a2 - 256);
  a1[1] = result;
  return result;
}

uint64_t sub_1AE78B6CC()
{
  return swift_release();
}

uint64_t sub_1AE78B6D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = v1;
  *(_QWORD *)(v2 + 64) = v0;
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_1AE78B6F4()
{
  return 2567207;
}

uint64_t sub_1AE78B704()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE78B714()
{
  return 0x65756C6176;
}

uint64_t sub_1AE78B724()
{
  return 0x656372756F73;
}

void sub_1AE78B734(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 8 * v1 + 32) = a1;
}

uint64_t sub_1AE78B744()
{
  uint64_t v0;

  return sub_1AE78B038(*(_QWORD *)(v0 - 192));
}

uint64_t sub_1AE78B74C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = v1;
  *(_QWORD *)(v2 + 64) = v0;
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_1AE78B75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 240) + 80);
  return v0 + ((v2 + 32) & ~v2);
}

void sub_1AE78B784()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 128) = 0;
  *(_QWORD *)(v0 - 120) = 0xE000000000000000;
}

uint64_t sub_1AE78B794()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 128) = 0;
  *(_QWORD *)(v0 - 120) = 0xE000000000000000;
  return v0 - 128;
}

uint64_t sub_1AE78B7AC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE78B7FC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)(v4 + 48) = result;
  *(_QWORD *)(v4 + 56) = a2;
  *(_BYTE *)(v4 + 64) = v5;
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v2 + 32) = v3 | 0x4000000000000000;
  return result;
}

unint64_t sub_1AE78B848()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 104) = 32;
  *(_QWORD *)(v0 - 96) = 0xE100000000000000;
  return sub_1AE4F7630();
}

uint64_t sub_1AE78B858()
{
  return swift_release();
}

__n128 sub_1AE78B868(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 336);
  a1[1] = result;
  return result;
}

__n128 sub_1AE78B880(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,__n128 a31)
{
  __n128 result;

  result = a31;
  a1[1] = a31;
  return result;
}

void sub_1AE78B890(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = v1;
  *(_QWORD *)(v2 - 120) = 0xE300000000000000;
  *(_QWORD *)(v2 - 104) = a1;
}

uint64_t sub_1AE78B8A8()
{
  return type metadata accessor for KGQ.Value();
}

uint64_t sub_1AE78B8B0()
{
  return swift_release();
}

uint64_t sub_1AE78B8B8()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE78B8C8()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE78B8D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 288) = v1;
  return sub_1AE78D64C(a1);
}

uint64_t sub_1AE78B8E8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE78B8F0()
{
  uint64_t v0;

  return sub_1AE78AFB8(v0);
}

uint64_t sub_1AE78B90C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1AE5BC078(v1, v0, 10);
}

uint64_t sub_1AE78B91C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v4;
  *(_QWORD *)(v3 + 32) = result;
  *(_QWORD *)(v3 + 40) = a2;
  *(_WORD *)(v3 + 48) = v5;
  return result;
}

void sub_1AE78B934(void (*a1)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  sub_1AE8AC150(a1, v1, v2);
}

__n128 sub_1AE78B944(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 160);
  a1[1] = result;
  return result;
}

uint64_t sub_1AE78B964()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_1AE78B96C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1AE78B0EC(a1, *(_QWORD *)(a2 - 256));
}

void sub_1AE78B978(__n128 a1)
{
  uint64_t v1;

  *(__n128 *)(v1 - 272) = a1;
}

void sub_1AE78B984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v2;
}

uint64_t sub_1AE78B9A4(uint64_t a1)
{
  return sub_1AE78D64C(a1);
}

uint64_t sub_1AE78B9B0()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE78B9BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return sub_1AE9248DC();
}

uint64_t sub_1AE78B9D4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_release();
}

uint64_t sub_1AE78B9E0()
{
  return sub_1AE925F74();
}

uint64_t sub_1AE78B9EC()
{
  return sub_1AE925F74();
}

uint64_t sub_1AE78BA08()
{
  return sub_1AE9267CC();
}

void sub_1AE78BA14(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  sub_1AE8AC150(a1, a2, a3);
}

uint64_t sub_1AE78BA1C()
{
  return swift_retain();
}

__n128 sub_1AE78BA24(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 176);
  a1[1] = result;
  return result;
}

unint64_t sub_1AE78BA30()
{
  return sub_1AE568D9C();
}

void sub_1AE78BA4C(uint64_t a1)
{
  sub_1AE5C6870(0x91uLL, a1 + 16);
}

uint64_t sub_1AE78BA80()
{
  return swift_task_dealloc();
}

uint64_t sub_1AE78BA88()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE78BA94()
{
  return sub_1AE925F8C();
}

void sub_1AE78BAA0()
{
  sub_1AE51B57C();
}

void sub_1AE78BAAC()
{
  sub_1AE519C48();
}

uint64_t sub_1AE78BACC()
{
  return swift_task_dealloc();
}

uint64_t sub_1AE78BAEC()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE78BAF8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_release();
}

uint64_t sub_1AE78BB04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 80);
}

uint64_t sub_1AE78BB18()
{
  return swift_bridgeObjectRelease();
}

unint64_t sub_1AE78BB40()
{
  return sub_1AE568D9C();
}

uint64_t sub_1AE78BB48()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE78BB54()
{
  uint64_t v0;

  return sub_1AE78D64C(v0);
}

uint64_t sub_1AE78BB6C()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_1AE78BB74(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = result;
  *(_QWORD *)(v3 + 56) = a2;
  *(_BYTE *)(v3 + 64) = v6;
  *(_QWORD *)(v2 + 16) = v3;
  return result;
}

void sub_1AE78BB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = v0;
  *(_QWORD *)(v2 - 176) = v1;
}

uint64_t sub_1AE78BBA8()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE78BBC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v35 = a3;
  v38 = type metadata accessor for KGQ.Value();
  v5 = *(_QWORD *)(v38 - 8);
  v6 = MEMORY[0x1E0C80A78](v38);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v34 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  v36 = a2;
  v37 = v11;
  if (v11)
  {
    v34 = v5;
    swift_bridgeObjectRetain_n();
    v12 = 0;
    v13 = MEMORY[0x1E0DEE9D8];
    v14 = a1;
    do
    {
      v15 = *(_QWORD *)(a1 + 8 * v12 + 32);
      v39 = 0;
      v40 = 0xE000000000000000;
      sub_1AE925D94();
      v41 = v15;
      sub_1AE926D18();
      sub_1AE925F74();
      swift_bridgeObjectRelease();
      v16 = v39;
      v17 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AE78D0D4();
        sub_1AE519C48();
        v13 = v20;
      }
      v18 = *(_QWORD *)(v13 + 16);
      if (v18 >= *(_QWORD *)(v13 + 24) >> 1)
      {
        sub_1AE519C48();
        v13 = v21;
      }
      ++v12;
      *(_QWORD *)(v13 + 16) = v18 + 1;
      v19 = v13 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v16;
      *(_QWORD *)(v19 + 40) = v17;
      a1 = v14;
    }
    while (v37 != v12);
    swift_bridgeObjectRelease_n();
    a2 = v36;
    v5 = v34;
  }
  else
  {
    v13 = MEMORY[0x1E0DEE9D8];
  }
  v22 = sub_1AE78D64C(v13);
  v24 = v23;
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(a2 + 16);
  if (v25)
  {
    v34 = v22;
    v37 = v24;
    v26 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v27 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain();
    v28 = MEMORY[0x1E0DEE9D8];
    do
    {
      sub_1AE78B0EC(v26, (uint64_t)v10);
      sub_1AE78B0EC((uint64_t)v10, (uint64_t)v8);
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        v29 = *v8;
        sub_1AE78AFB8((uint64_t)v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1AE78D0D4();
          sub_1AE51B57C();
          v28 = v31;
        }
        v30 = *(_QWORD *)(v28 + 16);
        if (v30 >= *(_QWORD *)(v28 + 24) >> 1)
        {
          sub_1AE51B57C();
          v28 = v32;
        }
        *(_QWORD *)(v28 + 16) = v30 + 1;
        *(_BYTE *)(v28 + v30 + 32) = v29;
      }
      else
      {
        sub_1AE78AFB8((uint64_t)v8);
        sub_1AE78AFB8((uint64_t)v10);
      }
      v26 += v27;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
    v24 = v37;
    v22 = v34;
  }
  else
  {
    v28 = MEMORY[0x1E0DEE9D8];
  }
  sub_1AE78BECC(v22, v24, v28, v35);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE78BECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
    v7 = MEMORY[0x1E0DEE9D8];
    v8 = sub_1AE4F66BC();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    swift_bridgeObjectRetain();
    sub_1AE5C6870(0x91uLL, v8 + 32);
    *(_QWORD *)(v8 + 72) = v7;
    if ((sub_1AE4F6C90() & 1) == 0)
    {
      sub_1AE500F38();
      v6 = v18;
    }
    v9 = v6[2];
    if (v9 >= v6[3] >> 1)
    {
      sub_1AE503938();
      v6 = v19;
    }
    v6[2] = v9 + 1;
    v6[v9 + 4] = v8 | 0x7000000000000004;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v5 + 16))
  {
    v10 = sub_1AE4F66BC();
    *(_QWORD *)(v10 + 16) = a1;
    *(_QWORD *)(v10 + 24) = a2;
    *(_QWORD *)(v10 + 32) = v5;
    swift_bridgeObjectRetain();
    if ((sub_1AE4F6C90() & 1) == 0)
    {
      sub_1AE500F38();
      v6 = v16;
    }
    v11 = a4;
    v12 = v6[2];
    v13 = v12 + 1;
    if (v12 >= v6[3] >> 1)
    {
      sub_1AE503938();
      v6 = v17;
    }
    v6[2] = v13;
    v6[v12 + 4] = v10 | 0x7000000000000000;
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = v6[2];
    v11 = a4;
  }
  if (v13 == 1)
  {
    sub_1AE66B86C(0, 1, v6);
    v14 = v6[4];
    swift_retain();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    result = sub_1AE4F66BC();
    *(_QWORD *)(result + 16) = v6;
    v14 = result | 0x3000000000000000;
  }
  *v11 = v14;
  return result;
}

uint64_t sub_1AE78CFE0()
{
  sub_1AE608144();
  sub_1AE509B3C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AE78D014()
{
  sub_1AE608144();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AE78D03C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AE78D060()
{
  sub_1AE608144();
  sub_1AE509B3C();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AE78D08C()
{
  uint64_t v0;

  sub_1AE608144();
  sub_1AE509B3C();
  sub_1AE525C94(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(unsigned __int16 *)(v0 + 88), *(_BYTE *)(v0 + 90));
  return swift_deallocObject();
}

uint64_t sub_1AE78D0D4()
{
  return 0;
}

uint64_t sub_1AE78D0EC()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_1AE78D0FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = sub_1AE9248DC();
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for KGQ.Value();
  MEMORY[0x1E0C80A78](v3);
  sub_1AE78B0EC(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (char *)&loc_1AE78D1B4 + dword_1AE78D3EC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1AE78D1C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  v3 = v0[1];
  *(_QWORD *)(v1 - 80) = *v0;
  *(_QWORD *)(v1 - 72) = v3;
  *(_QWORD *)(v1 - 96) = 32;
  *(_QWORD *)(v1 - 88) = 0xE100000000000000;
  sub_1AE4F7630();
  if ((sub_1AE9267CC() & 1) != 0)
  {
    *(_QWORD *)(v1 - 80) = 39;
    *(_QWORD *)(v1 - 72) = 0xE100000000000000;
    sub_1AE925F74();
    swift_bridgeObjectRelease();
    sub_1AE925F74();
    return *(_QWORD *)(v1 - 80);
  }
  return v2;
}

void sub_1AE78D40C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  sub_1AE78D0FC(a1);
  if (!v2)
  {
    *a2 = v4;
    a2[1] = v5;
  }
}

uint64_t destroy for KGQConversion(id *a1)
{

  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)(a1 + 1));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KGQConversion(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = a1 + 8;
  v6 = a2 + 8;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  v10 = v4;
  v9(v5, v6, v8);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KGQConversion(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  sub_1AE65F6C8((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for KGQConversion(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for KGQConversion()
{
  return &type metadata for KGQConversion;
}

void sub_1AE78D5E4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1AE8894D8();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_1AE78FC68(v5);
  *a1 = v2;
}

uint64_t sub_1AE78D64C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    if (v1 == 1)
    {
      v1 = *(_QWORD *)(a1 + 32);
      sub_1AE4F66CC();
    }
    else
    {
      sub_1AE501548(&qword_1ED319DE0);
      sub_1AE568D9C();
      sub_1AE925DC4();
      sub_1AE925F74();
      sub_1AE4F6648();
      sub_1AE501ED8();
      return 10075;
    }
  }
  return v1;
}

uint64_t sub_1AE78D6F4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = v0;
  return swift_task_switch();
}

void sub_1AE78D70C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *(_QWORD *)(v0[13] + 48);
  swift_bridgeObjectRetain_n();
  sub_1AE78D5E4(&v5);
  sub_1AE4F9038();
  v1 = v5;
  v0[14] = v5;
  v2 = *(_QWORD *)(v1 + 16);
  v0[15] = v2;
  if (v2)
  {
    sub_1AE790674(0);
    v0[18] = *(_QWORD *)(v3 + 40);
    v0[19] = *(_QWORD *)(v3 + 48);
    __asm { BR              X8 }
  }
  swift_release();
  sub_1AE790620();
  sub_1AE7905FC();
  __asm { BR              X1 }
}

uint64_t sub_1AE78E420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1AE7905CC();
  sub_1AE7905CC();
  v3 = sub_1AE79063C();
  *(_QWORD *)(v1 + 160) = sub_1AE790878(v3);
  sub_1AE79066C(v2, v0);
  sub_1AE7905CC();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 168) = v4;
  *v4 = v1;
  v4[1] = sub_1AE78E8CC;
  sub_1AE7905FC();
  return sub_1AE77EB94(v5, v6, v7);
}

void sub_1AE78E490()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;

  sub_1AE78FB68();
  sub_1AE4F6778();
  *v2 = 0;
  sub_1AE78FBA4(v1, v0, 3u);
  JUMPOUT(0x1AE78E4FCLL);
}

uint64_t sub_1AE78E578()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1AE5083AC();
  sub_1AE5083AC();
  if (!sub_1AE790648())
  {
    sub_1AE78FB68();
    sub_1AE4F6778();
    *v4 = 3;
    swift_willThrow();
    sub_1AE7906D8();
    v5 = sub_1AE79063C();
    sub_1AE78FBF4(v5, v6, v0);
    v7 = sub_1AE79063C();
    sub_1AE78FBF4(v7, v8, v0);
    sub_1AE7905FC();
    __asm { BR              X0 }
  }
  swift_bridgeObjectRelease();
  sub_1AE7906AC();
  v1 = sub_1AE50961C();
  return v2(v1);
}

uint64_t sub_1AE78E5AC()
{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;

  sub_1AE500F50();
  v2 = sub_1AE790504();
  sub_1AE4F9038();
  if ((v2 & 1) == 0)
  {
    *(_BYTE *)(v1 - 88) = v0;
    PersonalKnowledgeToolResultAttributeSemanticType.rawValue.getter();
    sub_1AE505B8C();
    v7 = v7 && v6 == 0xE800000000000000;
    if (v7)
    {
      sub_1AE7905C4();
    }
    else
    {
      sub_1AE79053C();
      sub_1AE4F9038();
    }
    sub_1AE501548(&qword_1EED9A5E8);
    v8 = sub_1AE7905B8();
    v9 = sub_1AE5B7814(v8, 1);
    sub_1AE7906B8(v9, v10);
    sub_1AE79058C();
    sub_1AE78AFFC();
    sub_1AE4F6778();
    *v11 = 0;
    v11[1] = 0;
    sub_1AE5083AC();
    JUMPOUT(0x1AE78E548);
  }
  v3 = sub_1AE4F95A8();
  return v4(v3);
}

void sub_1AE78E614()
{
  sub_1AE790528();
  JUMPOUT(0x1AE78E6B0);
}

void sub_1AE78E61C()
{
  sub_1AE508CC8();
  JUMPOUT(0x1AE78E6B0);
}

void sub_1AE78E624()
{
  sub_1AE4F95A8();
  JUMPOUT(0x1AE78E6B0);
}

void sub_1AE78E634()
{
  sub_1AE501EF0();
  JUMPOUT(0x1AE78E6B0);
}

void sub_1AE78E63C()
{
  sub_1AE4FBE64();
  JUMPOUT(0x1AE78E6B0);
}

uint64_t sub_1AE78E644()
{
  char v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  sub_1AE4FD3FC();
  v0 = sub_1AE790504();
  sub_1AE4F9038();
  if ((v0 & 1) == 0)
    JUMPOUT(0x1AE78E844);
  v1 = sub_1AE4F95A8();
  return v2(v1);
}

void sub_1AE78E64C()
{
  sub_1AE4FDFF4();
  JUMPOUT(0x1AE78E6B0);
}

void sub_1AE78E660()
{
  sub_1AE5057D0();
  JUMPOUT(0x1AE78E6B0);
}

void sub_1AE78E668()
{
  unsigned int v0;

  v0 = sub_1AE507B30();
  sub_1AE4FDC24(v0);
  JUMPOUT(0x1AE78E6B0);
}

void sub_1AE78E6A0()
{
  sub_1AE4FF0B8();
  JUMPOUT(0x1AE78E6B0);
}

void sub_1AE78E6DC()
{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;

  sub_1AE50961C();
  v2 = sub_1AE509B44();
  sub_1AE4F665C();
  if ((v2 & 1) == 0)
  {
    *(_BYTE *)(v1 - 88) = v0;
    PersonalKnowledgeToolResultAttributeSemanticType.rawValue.getter();
    sub_1AE505B8C();
    v4 = v4 && v3 == 0xE800000000000000;
    if (v4)
    {
      sub_1AE7905C4();
    }
    else
    {
      sub_1AE79053C();
      sub_1AE4F9038();
    }
  }
  sub_1AE501548(&qword_1EED9A5E8);
  v5 = sub_1AE7905B8();
  v6 = sub_1AE5B7814(v5, 1);
  sub_1AE7906B8(v6, v7);
  sub_1AE79058C();
  sub_1AE78AFFC();
  sub_1AE4F6778();
  *v8 = 0;
  v8[1] = 0;
  sub_1AE5083AC();
  JUMPOUT(0x1AE78E548);
}

uint64_t sub_1AE78E8CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    sub_1AE4F9038();
    sub_1AE4F6648();
    sub_1AE4F665C();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1AE4F9038();
  }
  return swift_task_switch();
}

void sub_1AE78E960()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = v0[12];
  v2 = *(_QWORD *)(v0[13] + 56);
  if ((sub_1AE4F77E0() & 1) == 0)
  {
    sub_1AE790568();
    v2 = v13;
  }
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 >= *(_QWORD *)(v2 + 24) >> 1)
  {
    sub_1AE790580();
    v2 = v14;
  }
  v4 = v0[19];
  v5 = v0[20];
  v7 = v0[17];
  v6 = v0[18];
  v8 = v0[13];
  *(_QWORD *)(v2 + 16) = v3 + 1;
  v9 = (_QWORD *)(v2 + 24 * v3);
  v9[4] = v7;
  v9[5] = v1;
  v9[6] = v5;
  sub_1AE79066C(v6, v4);
  *(_QWORD *)(v8 + 56) = v2;
  if (*(_QWORD *)(v2 + 16))
  {
    sub_1AE505E7C();
    swift_bridgeObjectRelease();
  }
  v10 = v0[16] + 1;
  if (v10 != v0[15])
  {
    sub_1AE790674(v10);
    v0[18] = *(_QWORD *)(v11 + 40);
    v0[19] = *(_QWORD *)(v11 + 48);
    __asm { BR              X8 }
  }
  sub_1AE7906D8();
  sub_1AE790620();
  sub_1AE790650();
  __asm { BR              X1 }
}

uint64_t sub_1AE78FB34()
{
  uint64_t v0;

  sub_1AE79066C(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1AE78FB68()
{
  unint64_t result;

  result = qword_1EEDA2958;
  if (!qword_1EEDA2958)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for PersonalKnowledgeToolResultAttributeError, &type metadata for PersonalKnowledgeToolResultAttributeError);
    atomic_store(result, (unint64_t *)&qword_1EEDA2958);
  }
  return result;
}

uint64_t sub_1AE78FBA4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 < 2u)
  {
LABEL_4:
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (a3 != 2)
  {
    if (a3 != 3)
      return result;
    goto LABEL_4;
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE78FBF4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 < 2u)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (a3 != 2)
  {
    if (a3 != 3)
      return result;
    goto LABEL_4;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE78FC44()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1AE78FC68(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;

  v3 = a1[1];
  v4 = sub_1AE926D0C();
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_1AE790294(0, v3, 1, a1);
      return;
    }
    goto LABEL_130;
  }
  v5 = v4;
  sub_1AE5197AC(v3 / 2);
  v97 = a1;
  v98 = v6;
  v102 = v7;
  v100 = v3;
  if (v3 <= 0)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    v37 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_96:
    if (v37 < 2)
    {
LABEL_107:
      swift_bridgeObjectRelease();
      if (v100 >= -1)
      {
        *(_QWORD *)(v98 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_135;
    }
    v88 = *v97;
    while (1)
    {
      v89 = v37 - 2;
      if (v37 < 2)
        break;
      if (!v88)
        goto LABEL_139;
      v90 = *(_QWORD *)(v10 + 32 + 16 * v89);
      v91 = *(_QWORD *)(v10 + 32 + 16 * (v37 - 1) + 8);
      sub_1AE79030C((char *)(v88 + 32 * v90), (char *)(v88 + 32 * *(_QWORD *)(v10 + 32 + 16 * (v37 - 1))), v88 + 32 * v91, v102);
      if (v1)
        goto LABEL_92;
      if (v91 < v90)
        goto LABEL_125;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AE8893F4();
        v10 = v94;
      }
      if (v89 >= *(_QWORD *)(v10 + 16))
        goto LABEL_126;
      v92 = (_QWORD *)(v10 + 32 + 16 * v89);
      *v92 = v90;
      v92[1] = v91;
      v93 = *(_QWORD *)(v10 + 16);
      if (v37 > v93)
        goto LABEL_127;
      memmove((void *)(v10 + 32 + 16 * (v37 - 1)), (const void *)(v10 + 32 + 16 * v37), 16 * (v93 - v37));
      *(_QWORD *)(v10 + 16) = v93 - 1;
      v37 = v93 - 1;
      if (v93 <= 2)
        goto LABEL_107;
    }
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
    return;
  }
  v8 = 0;
  v9 = *a1;
  v95 = *a1 + 24;
  v96 = *a1 + 64;
  v10 = MEMORY[0x1E0DEE9D8];
  v99 = v5;
  v101 = *a1;
  while (1)
  {
    v11 = v8++;
    if (v8 < v3)
    {
      v12 = *(_QWORD *)(v9 + 32 * v8);
      v13 = 32 * v11;
      v14 = *(_QWORD *)(v9 + 32 * v11);
      v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        v15 = (_QWORD *)(v96 + 32 * v11);
        while (v12 < v14 != *v15 >= *(v15 - 4))
        {
          v15 += 4;
          if (++v8 >= v3)
          {
            v8 = v3;
            break;
          }
        }
      }
      if (v12 < v14)
      {
        if (v8 < v11)
          goto LABEL_132;
        if (v11 < v8)
        {
          v16 = 32 * v8 - 32;
          v17 = v8;
          v18 = v11;
          do
          {
            if (v18 != --v17)
            {
              if (!v9)
                goto LABEL_138;
              v19 = (_OWORD *)(v9 + v13);
              v20 = v9 + v16;
              v21 = *(_OWORD *)(v9 + v13);
              v22 = *(_QWORD *)(v9 + v13 + 16);
              v23 = *(_BYTE *)(v9 + v13 + 24);
              if (v13 != v16 || (unint64_t)v19 >= v9 + v16 + 32)
              {
                v25 = *(_OWORD *)(v20 + 16);
                *v19 = *(_OWORD *)v20;
                v19[1] = v25;
              }
              *(_OWORD *)v20 = v21;
              *(_QWORD *)(v20 + 16) = v22;
              *(_BYTE *)(v20 + 24) = v23;
            }
            ++v18;
            v16 -= 32;
            v13 += 32;
          }
          while (v18 < v17);
        }
      }
    }
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v11))
        goto LABEL_129;
      if (v8 - v11 < v5)
      {
        v26 = v11 + v5;
        if (__OFADD__(v11, v5))
          goto LABEL_133;
        if (v26 >= v3)
          v26 = v3;
        if (v26 < v11)
          goto LABEL_134;
        if (v8 != v26)
        {
          v27 = v95 + 32 * v8;
          do
          {
            v28 = v11;
            v29 = v27;
            do
            {
              v30 = (_OWORD *)(v29 - 24);
              v31 = *(_QWORD *)(v29 - 24);
              if (v31 >= *(_QWORD *)(v29 - 56))
                break;
              if (!v9)
                goto LABEL_136;
              v33 = *(_OWORD *)(v29 - 56);
              v32 = *(_OWORD *)(v29 - 40);
              *(_BYTE *)(v29 - 32) = *(_BYTE *)v29;
              v29 -= 32;
              v34 = *(_OWORD *)(v29 + 16);
              *v30 = v33;
              v30[1] = v32;
              *(_QWORD *)(v29 - 24) = v31;
              *(_OWORD *)(v29 - 16) = v34;
              ++v28;
            }
            while (v8 != v28);
            ++v8;
            v27 += 32;
          }
          while (v8 != v26);
          v8 = v26;
        }
      }
    }
    if (v8 < v11)
      goto LABEL_128;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1AE889310(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
      v10 = v86;
    }
    v36 = *(_QWORD *)(v10 + 16);
    v35 = *(_QWORD *)(v10 + 24);
    v37 = v36 + 1;
    v9 = v101;
    if (v36 >= v35 >> 1)
    {
      sub_1AE889310(v35 > 1, v36 + 1, 1, (char *)v10);
      v9 = v101;
      v10 = v87;
    }
    *(_QWORD *)(v10 + 16) = v37;
    v38 = v10 + 32;
    v39 = (uint64_t *)(v10 + 32 + 16 * v36);
    *v39 = v11;
    v39[1] = v8;
    if (v36)
      break;
    v37 = 1;
LABEL_87:
    v5 = v99;
    v3 = v100;
    if (v8 >= v100)
      goto LABEL_96;
  }
  while (1)
  {
    v40 = v37 - 1;
    if (v37 >= 4)
    {
      v45 = v38 + 16 * v37;
      v46 = *(_QWORD *)(v45 - 64);
      v47 = *(_QWORD *)(v45 - 56);
      v51 = __OFSUB__(v47, v46);
      v48 = v47 - v46;
      if (v51)
        goto LABEL_113;
      v50 = *(_QWORD *)(v45 - 48);
      v49 = *(_QWORD *)(v45 - 40);
      v51 = __OFSUB__(v49, v50);
      v43 = v49 - v50;
      v44 = v51;
      if (v51)
        goto LABEL_114;
      v52 = v37 - 2;
      v53 = (uint64_t *)(v38 + 16 * (v37 - 2));
      v55 = *v53;
      v54 = v53[1];
      v51 = __OFSUB__(v54, v55);
      v56 = v54 - v55;
      if (v51)
        goto LABEL_115;
      v51 = __OFADD__(v43, v56);
      v57 = v43 + v56;
      if (v51)
        goto LABEL_117;
      if (v57 >= v48)
      {
        v75 = (uint64_t *)(v38 + 16 * v40);
        v77 = *v75;
        v76 = v75[1];
        v51 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v51)
          goto LABEL_123;
        v68 = v43 < v78;
        goto LABEL_76;
      }
    }
    else
    {
      if (v37 != 3)
      {
        v69 = *(_QWORD *)(v10 + 32);
        v70 = *(_QWORD *)(v10 + 40);
        v51 = __OFSUB__(v70, v69);
        v62 = v70 - v69;
        v63 = v51;
        goto LABEL_70;
      }
      v42 = *(_QWORD *)(v10 + 32);
      v41 = *(_QWORD *)(v10 + 40);
      v51 = __OFSUB__(v41, v42);
      v43 = v41 - v42;
      v44 = v51;
    }
    if ((v44 & 1) != 0)
      goto LABEL_116;
    v52 = v37 - 2;
    v58 = (uint64_t *)(v38 + 16 * (v37 - 2));
    v60 = *v58;
    v59 = v58[1];
    v61 = __OFSUB__(v59, v60);
    v62 = v59 - v60;
    v63 = v61;
    if (v61)
      goto LABEL_118;
    v64 = (uint64_t *)(v38 + 16 * v40);
    v66 = *v64;
    v65 = v64[1];
    v51 = __OFSUB__(v65, v66);
    v67 = v65 - v66;
    if (v51)
      goto LABEL_120;
    if (__OFADD__(v62, v67))
      goto LABEL_122;
    if (v62 + v67 >= v43)
    {
      v68 = v43 < v67;
LABEL_76:
      if (v68)
        v40 = v52;
      goto LABEL_78;
    }
LABEL_70:
    if ((v63 & 1) != 0)
      goto LABEL_119;
    v71 = (uint64_t *)(v38 + 16 * v40);
    v73 = *v71;
    v72 = v71[1];
    v51 = __OFSUB__(v72, v73);
    v74 = v72 - v73;
    if (v51)
      goto LABEL_121;
    if (v74 < v62)
      goto LABEL_87;
LABEL_78:
    v79 = v10;
    v80 = v40 - 1;
    if (v40 - 1 >= v37)
    {
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }
    if (!v9)
      goto LABEL_137;
    v81 = (uint64_t *)(v38 + 16 * v80);
    v82 = *v81;
    v83 = (_QWORD *)(v38 + 16 * v40);
    v84 = v83[1];
    sub_1AE79030C((char *)(v9 + 32 * *v81), (char *)(v9 + 32 * *v83), v9 + 32 * v84, v102);
    if (v1)
      break;
    if (v84 < v82)
      goto LABEL_110;
    if (v40 > *(_QWORD *)(v79 + 16))
      goto LABEL_111;
    *v81 = v82;
    *(_QWORD *)(v38 + 16 * v80 + 8) = v84;
    v85 = *(_QWORD *)(v79 + 16);
    if (v40 >= v85)
      goto LABEL_112;
    v10 = v79;
    v37 = v85 - 1;
    memmove((void *)(v38 + 16 * v40), v83 + 2, 16 * (v85 - 1 - v40));
    *(_QWORD *)(v79 + 16) = v85 - 1;
    v9 = v101;
    if (v85 <= 2)
      goto LABEL_87;
  }
LABEL_92:
  swift_bridgeObjectRelease();
  if (v100 < -1)
    goto LABEL_131;
  *(_QWORD *)(v98 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_1AE790294(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 32 * a3 + 24;
    while (2)
    {
      v6 = result;
      v7 = v5;
      do
      {
        v8 = (_OWORD *)(v7 - 24);
        v9 = *(_QWORD *)(v7 - 24);
        if (v9 >= *(_QWORD *)(v7 - 56))
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        v11 = *(_OWORD *)(v7 - 56);
        v10 = *(_OWORD *)(v7 - 40);
        *(_BYTE *)(v7 - 32) = *(_BYTE *)v7;
        v7 -= 32;
        v12 = *(_OWORD *)(v7 + 16);
        *v8 = v11;
        v8[1] = v10;
        *(_QWORD *)(v7 - 24) = v9;
        *(_OWORD *)(v7 - 16) = v12;
        ++v6;
      }
      while (a3 != v6);
      ++a3;
      v5 += 32;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_1AE79030C(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  __int128 v15;
  char *v17;
  char *v18;
  char *v19;
  BOOL v20;
  BOOL v21;
  __int128 v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 32;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 32;
  if (v9 >= v11)
  {
    sub_1AE520950(a2, (uint64_t)(a3 - (_QWORD)a2) / 32, a4);
    v12 = &v4[32 * v11];
    if (v7 >= v6 || v10 < 32)
      goto LABEL_35;
    v17 = (char *)(a3 - 32);
    while (1)
    {
      v18 = v17 + 32;
      v19 = v6 - 32;
      if (*((_QWORD *)v12 - 4) >= *((_QWORD *)v6 - 4))
      {
        v21 = v18 != v12 || v17 >= v12;
        v19 = v12 - 32;
        v12 -= 32;
        if (!v21)
          goto LABEL_31;
      }
      else
      {
        v20 = v18 != v6 || v17 >= v6;
        v6 -= 32;
        if (!v20)
          goto LABEL_31;
      }
      v22 = *((_OWORD *)v19 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v19;
      *((_OWORD *)v17 + 1) = v22;
LABEL_31:
      v17 -= 32;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_35;
    }
  }
  sub_1AE520950(a1, (a2 - a1) / 32, a4);
  v12 = &v4[32 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (*(_QWORD *)v6 >= *(_QWORD *)v4)
    {
      v13 = v4;
      v14 = v7 == v4;
      v4 += 32;
      if (!v14)
        goto LABEL_9;
LABEL_10:
      v7 += 32;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_15;
    }
    v13 = v6;
    v14 = v7 == v6;
    v6 += 32;
    if (v14)
      goto LABEL_10;
LABEL_9:
    v15 = *((_OWORD *)v13 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v13;
    *((_OWORD *)v7 + 1) = v15;
    goto LABEL_10;
  }
LABEL_15:
  v6 = v7;
LABEL_35:
  sub_1AE520950(v4, (v12 - v4) / 32, v6);
  return 1;
}

uint64_t getEnumTagSinglePayload for KGQConversionError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

ValueMetadata *type metadata accessor for KGQConversionError()
{
  return &type metadata for KGQConversionError;
}

uint64_t sub_1AE790504()
{
  return sub_1AE926D60();
}

uint64_t sub_1AE790528()
{
  return 0x746E657665;
}

uint64_t sub_1AE79053C()
{
  return sub_1AE926D60();
}

uint64_t sub_1AE790558()
{
  return 1634891108;
}

void sub_1AE790568()
{
  sub_1AE51B628();
}

void sub_1AE790580()
{
  sub_1AE51B628();
}

uint64_t sub_1AE79058C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1AE78FBF4(v1, v0, 2u);
}

uint64_t sub_1AE79059C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1AE78FBF4(v0, v1, 2u);
}

uint64_t sub_1AE7905AC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7905B8()
{
  return swift_allocObject();
}

uint64_t sub_1AE7905C4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7905CC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1AE78FBA4(v1, v0, 0);
}

uint64_t sub_1AE7905DC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1AE78FBA4(v1, v0, 1u);
}

uint64_t sub_1AE7905EC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1AE78FBA4(v0, v1, 0);
}

unint64_t sub_1AE790618()
{
  return sub_1AE568D9C();
}

uint64_t sub_1AE790620()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE790634(uint64_t a1, uint64_t a2)
{
  return sub_1AE78FBF4(a1, a2, 1u);
}

uint64_t sub_1AE79063C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE790648()
{
  uint64_t v0;

  return sub_1AE790FF0(v0);
}

uint64_t sub_1AE79066C(uint64_t a1, uint64_t a2)
{
  return sub_1AE78FBF4(a1, a2, 0);
}

void sub_1AE790674(uint64_t a1@<X8>)
{
  _QWORD *v1;

  v1[16] = a1;
  v1[17] = *(_QWORD *)(v1[14] + 32 * a1 + 32);
}

uint64_t sub_1AE79068C()
{
  uint64_t v0;

  return sub_1AE790FF0(v0);
}

uint64_t sub_1AE790694()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7906B8(uint64_t a1, _BYTE *a2)
{
  char v2;
  char v3;

  *a2 = v3;
  a2[1] = v2;
  return nullsub_1(a1);
}

uint64_t sub_1AE7906C4()
{
  return 0x69746E6565726373;
}

uint64_t sub_1AE7906D8()
{
  return swift_release();
}

void sub_1AE7906E0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 10075;
  *(_QWORD *)(v0 + 24) = 0xE200000000000000;
}

uint64_t destroy for KGQNodeSignature()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KGQNodeSignature(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KGQNodeSignature(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for KGQNodeSignature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for KGQNodeSignature()
{
  return &type metadata for KGQNodeSignature;
}

uint64_t sub_1AE790878(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  do
  {
    v5 = *(_BYTE *)(a1 + v3 + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1AE4FF0D4();
      v4 = v7;
    }
    v6 = *(_QWORD *)(v4 + 16);
    if (v6 >= *(_QWORD *)(v4 + 24) >> 1)
    {
      sub_1AE4FF0D4();
      v4 = v8;
    }
    ++v3;
    *(_QWORD *)(v4 + 16) = v6 + 1;
    *(_WORD *)(v4 + 2 * v6 + 32) = (0xB1102010900uLL >> (8 * v5));
  }
  while (v1 != v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1AE790964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _QWORD v18[2];
  __int16 v19;

  v4 = type metadata accessor for KGQ.Value();
  MEMORY[0x1E0C80A78](v4);
  v7 = (unsigned __int8 *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  if (!v8)
    return MEMORY[0x1E0DEE9D8];
  v18[0] = v2;
  v18[1] = a2;
  v9 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v10 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain();
  v11 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    sub_1AE78B0EC(v9, (uint64_t)v7);
    if (swift_getEnumCaseMultiPayload() != 6)
      break;
    sub_1AE790B2C(*v7, &v19);
    v12 = v19;
    if ((v19 & 0xFF00) != 0x500)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AE5004C4();
        v11 = v14;
      }
      v13 = *(_QWORD *)(v11 + 16);
      if (v13 >= *(_QWORD *)(v11 + 24) >> 1)
      {
        sub_1AE5004C4();
        v11 = v15;
      }
      *(_QWORD *)(v11 + 16) = v13 + 1;
      *(_WORD *)(v11 + 2 * v13 + 32) = v12;
    }
    v9 += v10;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      return v11;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AE78FB68();
  swift_allocError();
  *v16 = 0;
  swift_willThrow();
  sub_1AE78AFB8((uint64_t)v7);
  return v11;
}

uint64_t sub_1AE790B2C@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  *a2 = word_1AE959976[(char)result];
  return result;
}

void sub_1AE790B44(unsigned __int8 a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  sub_1AE791E7C(a4, a5, a3, a1);
}

uint64_t sub_1AE790B60(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v3 = sub_1AE7911F0(a2);
  v5 = v4;
  if (v3 == sub_1AE7911F0(a1) && v5 == v6)
    v8 = 0;
  else
    v8 = sub_1AE926D60();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

BOOL sub_1AE790BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5 < a1;
}

BOOL sub_1AE790BF4(unint64_t a1, unint64_t a2)
{
  return a2 < a1;
}

void sub_1AE790C00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  v8 = sub_1AE503960(a1, a2, a3, a4, a5, a6, a7, a8, v24, v27, v29, v31, v33, v35, v37, v39, v41, v43, v45, v47);
  v16 = sub_1AE4FCACC((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v25);
  sub_1AE7936F0((uint64_t)v16, v17, v18, v19, v20, v21, v22, v23, v26, v28, v30, v32, v34, v36, v38, v40, v42, v44, v46,
    v48);
  sub_1AE50962C();
}

uint64_t sub_1AE790C28(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  if (v3 == *a1 && v4 == a1[1])
    return sub_1AE536584();
  else
    return sub_1AE926D60();
}

BOOL sub_1AE790C4C(unsigned __int8 a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  char v5;

  sub_1AE791E7C(a4, a5, a3, a1);
  return (v5 & 1) == 0;
}

uint64_t sub_1AE790C80(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  v3 = sub_1AE7911F0(a2);
  v5 = v4;
  if (v3 == sub_1AE7911F0(a1) && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
    v9 = 1;
  }
  else
  {
    v8 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v8 ^ 1;
  }
  return v9 & 1;
}

BOOL sub_1AE790D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a5 >= a1;
}

BOOL sub_1AE790D20(unint64_t a1, unint64_t a2)
{
  return a2 >= a1;
}

void sub_1AE790D2C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  v8 = sub_1AE503960(a1, a2, a3, a4, a5, a6, a7, a8, v24, v27, v29, v31, v33, v35, v37, v39, v41, v43, v45, v47);
  v16 = sub_1AE4FCACC((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v25);
  sub_1AE7936F0((uint64_t)v16, v17, v18, v19, v20, v21, v22, v23, v26, v28, v30, v32, v34, v36, v38, v40, v42, v44, v46,
    v48);
  sub_1AE50962C();
}

uint64_t sub_1AE790D58(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;

  v3 = *a2;
  v4 = a2[1];
  if (v3 == *a1 && v4 == a1[1])
    v6 = 1;
  else
    v6 = sub_1AE505B70() ^ 1;
  return v6 & 1;
}

BOOL sub_1AE790D94(unsigned __int8 a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  char v4;

  sub_1AE791E7C(a1, a2, a3, a4);
  return (v4 & 1) == 0;
}

uint64_t sub_1AE790DB0(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  v3 = sub_1AE7911F0(a1);
  v5 = v4;
  if (v3 == sub_1AE7911F0(a2) && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
    v9 = 1;
  }
  else
  {
    v8 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v8 ^ 1;
  }
  return v9 & 1;
}

BOOL sub_1AE790E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a1 >= a5;
}

BOOL sub_1AE790E4C(unint64_t a1, unint64_t a2)
{
  return a1 >= a2;
}

void sub_1AE790E58(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[11];
  uint64_t v17[11];

  v8 = sub_1AE503960(a1, a2, a3, a4, a5, a6, a7, a8, v16[0], v16[1], v16[2], v16[3], v16[4], v16[5], v16[6], v16[7], v16[8], v16[9], v16[10],
         v17[0]);
  sub_1AE4FCACC((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v16[0]);
  static KnosisInternalFact.< infix(_:_:)(v17, v16);
  sub_1AE50962C();
}

uint64_t sub_1AE790E8C(_QWORD *a1, _QWORD *a2)
{
  char v3;

  if (*a1 == *a2 && a1[1] == a2[1])
    v3 = 1;
  else
    v3 = sub_1AE505B70() ^ 1;
  return v3 & 1;
}

void *static KGQ.Keyword.allCases.getter()
{
  return &unk_1E5DAF0E8;
}

uint64_t KGQ.Keyword.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AE790F00 + 4 * byte_1AE9599B0[*v0]))(17741, 0xE200000000000000);
}

uint64_t sub_1AE790F10()
{
  return sub_1AE509B60(0x4B454557u);
}

void sub_1AE790F40()
{
  JUMPOUT(0x1AE790F4CLL);
}

uint64_t sub_1AE790F64()
{
  return 0x545F464F5F444E45;
}

uint64_t sub_1AE790F84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1AE78B8A8();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v1);
  sub_1AE4FB7E8();
  v2 = sub_1AE50A9B8();
  sub_1AE78B0EC(v2, v3);
  if (!swift_getEnumCaseMultiPayload())
    return *(_QWORD *)v0;
  sub_1AE5071E8();
  return 0;
}

uint64_t sub_1AE790FF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[4];
  uint64_t v24;
  unint64_t v25;

  v2 = sub_1AE78B8A8();
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (_QWORD *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v3);
  v8 = (char *)v23 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v11 = *(_QWORD *)(v6 + 72);
    v23[1] = a1;
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x1E0DEE9D8];
    v23[2] = v2;
    do
    {
      sub_1AE78B0EC(v10, (uint64_t)v8);
      v13 = sub_1AE4F6B80();
      sub_1AE78B0EC(v13, v14);
      if (sub_1AE5004D0() == 5)
      {
        v15 = *v5;
        v24 = 0;
        v25 = 0xE000000000000000;
        sub_1AE925D94();
        v23[3] = v15;
        sub_1AE926D18();
        sub_1AE925F74();
        swift_bridgeObjectRelease();
        v17 = v24;
        v16 = v25;
        sub_1AE78AFB8((uint64_t)v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1AE4FB7A4();
          v12 = v20;
        }
        v18 = *(_QWORD *)(v12 + 16);
        if (v18 >= *(_QWORD *)(v12 + 24) >> 1)
        {
          sub_1AE4FB7A4();
          v12 = v21;
        }
        *(_QWORD *)(v12 + 16) = v18 + 1;
        v19 = v12 + 16 * v18;
        *(_QWORD *)(v19 + 32) = v17;
        *(_QWORD *)(v19 + 40) = v16;
      }
      else
      {
        sub_1AE78AFB8((uint64_t)v5);
        sub_1AE78AFB8((uint64_t)v8);
      }
      v10 += v11;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
  }
  if (!*(_QWORD *)(v12 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v12;
}

uint64_t sub_1AE7911F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AE79121C + 4 * byte_1AE9599C1[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1AE79121C()
{
  return 0x6D614E7473726966;
}

uint64_t sub_1AE791398()
{
  return 0x65746144646E65;
}

void sub_1AE7913B0()
{
  JUMPOUT(0x1AE7913BCLL);
}

uint64_t sub_1AE7913C0()
{
  return 1701869940;
}

uint64_t sub_1AE7913CC()
{
  return 0x74696D696CLL;
}

uint64_t sub_1AE7913E0()
{
  return 0x63734174726F73;
}

uint64_t sub_1AE7913F8()
{
  return 0x6373654474726F73;
}

uint64_t sub_1AE791410()
{
  return 0x656372756F73;
}

uint64_t sub_1AE791424()
{
  return 0x65756C6176;
}

BOOL sub_1AE791438(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

void sub_1AE79144C(uint64_t a1, _QWORD *a2)
{
  if (*(_QWORD *)a1 == *a2)
    sub_1AE79147C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  else
    sub_1AE536584();
}

void sub_1AE79147C(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

BOOL sub_1AE7914AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char v6;
  _BOOL8 result;

  result = 0;
  if (!a6 && (sub_1AE5EA198(a1, a4) & 1) != 0)
  {
    sub_1AE50A9B8();
    sub_1AE5E9970();
    if ((v6 & 1) != 0)
      return 1;
  }
  return result;
}

uint64_t sub_1AE79158C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE7915B0(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AE790D14);
}

uint64_t sub_1AE791598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE7915B0(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AE790E40);
}

uint64_t sub_1AE7915A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE7915B0(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AE790BE8);
}

uint64_t sub_1AE7915B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned __int8 *)(a2 + 24));
}

void sub_1AE7915D8(uint64_t a1)
{
  sub_1AE79147C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

IntelligencePlatform::KGQ::QType_optional __swiftcall KGQ.QType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  char v4;
  IntelligencePlatform::KGQ::QType_optional result;

  v2 = v1;
  v3 = sub_1AE926B44();
  sub_1AE4F6648();
  v4 = 6;
  if (v3 < 6)
    v4 = v3;
  *v2 = v4;
  sub_1AE4F6624();
  return result;
}

uint64_t KGQ.QType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AE79166C + 4 * byte_1AE9599E3[*v0]))(0x6E6F73726570, 0xE600000000000000);
}

uint64_t sub_1AE79166C()
{
  return sub_1AE4FDC24(0x616C6572u);
}

uint64_t sub_1AE791688()
{
  return 0x746E657665;
}

uint64_t sub_1AE79169C()
{
  return 0x69746E6565726373;
}

uint64_t sub_1AE7916B8()
{
  return 0x6E6F697461636F6CLL;
}

void sub_1AE7916D0()
{
  unsigned __int8 *v0;

  sub_1AE512E5C(*v0);
}

void sub_1AE7916D8(uint64_t a1)
{
  char *v1;

  sub_1AE5E84F4(a1, *v1);
}

void sub_1AE7916E0(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1AE54F7AC(a1, *v1);
}

IntelligencePlatform::KGQ::QType_optional sub_1AE7916E8(Swift::String *a1)
{
  return KGQ.QType.init(rawValue:)(*a1);
}

void sub_1AE7916F4(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = KGQ.QType.rawValue.getter();
  a1[1] = v2;
  sub_1AE4F6664();
}

void sub_1AE791714(char *a1)
{
  sub_1AE510714(*a1);
}

uint64_t sub_1AE791720(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v3 = sub_1AE7911F0(a1);
  v5 = v4;
  if (v3 == sub_1AE7911F0(a2) && v5 == v6)
    v8 = 0;
  else
    v8 = sub_1AE505B70();
  sub_1AE4F6648();
  sub_1AE4F9038();
  return v8 & 1;
}

uint64_t sub_1AE791798()
{
  unint64_t v0;

  v0 = sub_1AE926DA8();
  sub_1AE4F6648();
  if (v0 >= 0x1A)
    return 26;
  else
    return v0;
}

uint64_t sub_1AE7917E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t (*a6)(uint64_t))
{
  uint64_t v6;

  if ((a5(a1, a3) & 1) == 0)
    return 0;
  v6 = sub_1AE50A9B8();
  return a6(v6);
}

uint64_t sub_1AE791838(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_1AE791854 + 4 * byte_1AE9599E9[a2]))();
}

void sub_1AE791854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if ((_BYTE)a4)
    sub_1AE536584();
  else
    sub_1AE5E9858(a1, a3, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

void sub_1AE791894()
{
  unsigned __int8 *v0;

  sub_1AE512E18(*v0);
}

uint64_t sub_1AE79189C(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1AE5E85B8(a1, *v1);
}

void sub_1AE7918A4(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1AE54F7B8(a1, *v1);
}

uint64_t sub_1AE7918AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1AE791798();
  *a1 = result;
  return result;
}

void sub_1AE7918D8(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *a1 = sub_1AE7911F0(*v1);
  a1[1] = v3;
  sub_1AE4F6664();
}

void sub_1AE7918FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  sub_1AE510708(*a1, *a2);
}

uint64_t sub_1AE791908(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1AE791720(*a1, *a2);
}

uint64_t sub_1AE791914(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1AE790C80(*a1, *a2);
}

uint64_t sub_1AE791920(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1AE790DB0(*a1, *a2);
}

uint64_t sub_1AE79192C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1AE790B60(*a1, *a2);
}

uint64_t sub_1AE791938(uint64_t *a1, uint64_t *a2)
{
  return sub_1AE7917E4(*a1, a1[1], *a2, a2[1], sub_1AE5EA198, (uint64_t (*)(uint64_t))sub_1AE5E9970) & 1;
}

uint64_t sub_1AE791970(uint64_t *a1, uint64_t *a2)
{
  return sub_1AE7917E4(*a1, a1[1], *a2, a2[1], sub_1AE5E996C, (uint64_t (*)(uint64_t))sub_1AE5E9858) & 1;
}

uint64_t sub_1AE7919A8(uint64_t *a1, uint64_t *a2)
{
  return sub_1AE7917E4(*a1, a1[1], *a2, a2[1], sub_1AE5E996C, (uint64_t (*)(uint64_t))sub_1AE5E9970) & 1;
}

uint64_t sub_1AE7919E0(uint64_t a1)
{
  return sub_1AE791838(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t _s20IntelligencePlatform3KGQV8VariableV8asStringSSvg_0()
{
  sub_1AE925D94();
  sub_1AE926D18();
  sub_1AE925F74();
  sub_1AE4F6648();
  return 0;
}

void sub_1AE791A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;

  v19 = a1;
  v20 = a2;
  v3 = sub_1AE9248DC();
  v18[1] = *(_QWORD *)(v3 - 8);
  v18[2] = v3;
  MEMORY[0x1E0C80A78](v3);
  v18[0] = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AE78B8A8();
  sub_1AE4F66F0();
  v6 = MEMORY[0x1E0C80A78](v5);
  v7 = MEMORY[0x1E0C80A78](v6);
  v18[3] = (char *)v18 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v10 = MEMORY[0x1E0C80A78](v9);
  v11 = MEMORY[0x1E0C80A78](v10);
  v12 = MEMORY[0x1E0C80A78](v11);
  v13 = MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v13);
  sub_1AE501548(&qword_1EEDA2990);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v14);
  sub_1AE4FB7E8();
  v16 = v2 + *(int *)(v15 + 48);
  sub_1AE78B0EC(v19, v2);
  sub_1AE78B0EC(v20, v16);
  v17 = (char *)sub_1AE791C34 + 4 * byte_1AE9599ED[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1AE791C34()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;

  sub_1AE78B0EC(v0, (uint64_t)v2);
  v4 = *v2;
  v3 = v2[1];
  if (!sub_1AE5004D0())
  {
    if (v4 == *v1 && v3 == v1[1])
    {
      sub_1AE4F6824();
    }
    else
    {
      v6 = sub_1AE4FB6F0();
      sub_1AE4F9038();
      sub_1AE4F665C();
      if ((v6 & 1) == 0)
      {
        sub_1AE5071E8();
        goto LABEL_9;
      }
    }
    sub_1AE5071E8();
    v7 = 1;
    return v7 & 1;
  }
  sub_1AE4F665C();
  sub_1AE792ADC(v0);
LABEL_9:
  v7 = 0;
  return v7 & 1;
}

void *sub_1AE791E54()
{
  return &unk_1E5DAF368;
}

void sub_1AE791E64()
{
  sub_1AE5465F4();
}

void sub_1AE791E6C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E5DAF368;
}

void sub_1AE791E7C(unsigned __int8 a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v5 = sub_1AE7911F0(a1);
  v7 = v6;
  if (v5 == sub_1AE7911F0(a4) && v7 == v8)
  {
    sub_1AE4F6824();
  }
  else
  {
    sub_1AE5063EC();
    v10 = sub_1AE4FB6F0();
    sub_1AE4F665C();
    sub_1AE4F81B8();
    if ((v10 & 1) == 0)
    {
      sub_1AE5063EC();
      sub_1AE505B70();
      sub_1AE4F665C();
      sub_1AE4F81B8();
    }
  }
  sub_1AE4F66A8();
}

#error "1AE791FB0: call analysis failed (funcsize=44)"

uint64_t sub_1AE791FCC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE792014(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AE791F1C);
}

void sub_1AE791FD8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  sub_1AE791E7C(*(_BYTE *)a1, *(_QWORD *)(a1 + 8), a3, *a2);
}

uint64_t sub_1AE791FF0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE792014(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AE790C4C);
}

uint64_t sub_1AE791FFC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE792014(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AE790D94);
}

uint64_t sub_1AE792008(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE792014(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1AE790B44);
}

uint64_t sub_1AE792014(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*a1, *((_QWORD *)a1 + 1), a1[16], *a2, *((_QWORD *)a2 + 1), a2[16]);
}

uint64_t sub_1AE792038@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;

  swift_bridgeObjectRetain();
  v6 = sub_1AE56AAFC(a1, a2);
  v8 = v7;
  sub_1AE4F9038();
  if (v8)
  {
    if (v6 == 120 && v8 == 0xE100000000000000)
    {
      sub_1AE4F81B8();
    }
    else
    {
      sub_1AE4F6B80();
      v10 = sub_1AE4FB6F0();
      sub_1AE4F81B8();
      if ((v10 & 1) == 0)
        goto LABEL_14;
    }
    v11 = sub_1AE5BB100(1uLL, a1, a2);
    MEMORY[0x1AF4530E8](v11);
    sub_1AE4F9038();
    sub_1AE925F98();
    if (v12)
    {
      while (1)
      {
        sub_1AE925D88();
        if ((v13 & 1) != 0)
          break;
        sub_1AE925F74();
        sub_1AE4F665C();
        sub_1AE925F98();
        if (!v14)
          goto LABEL_12;
      }
      sub_1AE4F665C();
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_12:
      swift_bridgeObjectRelease();
    }
  }
LABEL_14:
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  return result;
}

BOOL static KGQ.Variable.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void KGQ.Variable.hash(into:)()
{
  sub_1AE926ED4();
  sub_1AE4F6664();
}

void KGQ.Variable.hashValue.getter()
{
  sub_1AE4F76E0();
  sub_1AE4F6694();
  sub_1AE4F905C();
  sub_1AE4F6650();
}

void sub_1AE792428()
{
  sub_1AE926EC8();
  sub_1AE4F6694();
  sub_1AE4F905C();
  sub_1AE4F6650();
}

uint64_t KGQ.Keyword.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AE792478 + 4 * byte_1AE9599F5[*v0]))(17741, 0xE200000000000000);
}

uint64_t sub_1AE792488()
{
  return sub_1AE509B60(0x4B454557u);
}

void sub_1AE7924B8()
{
  JUMPOUT(0x1AE7924C4);
}

uint64_t sub_1AE7924DC()
{
  return 0x545F464F5F444E45;
}

IntelligencePlatform::KGQ::Keyword_optional __swiftcall KGQ.Keyword.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  char v4;
  IntelligencePlatform::KGQ::Keyword_optional result;

  v2 = v1;
  v3 = sub_1AE926DA8();
  sub_1AE4F6648();
  v4 = 17;
  if (v3 < 0x11)
    v4 = v3;
  *v2 = v4;
  sub_1AE4F6624();
  return result;
}

IntelligencePlatform::KGQ::Keyword_optional sub_1AE792550(Swift::String *a1)
{
  return KGQ.Keyword.init(rawValue:)(*a1);
}

void sub_1AE79255C(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = KGQ.Keyword.rawValue.getter();
  a1[1] = v2;
  sub_1AE4F6664();
}

void sub_1AE79257C()
{
  unsigned __int8 *v0;

  sub_1AE512E68(*v0);
}

uint64_t sub_1AE792584(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1AE5E84E8(a1, *v1);
}

void sub_1AE79258C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1AE54F7A0(a1, *v1);
}

void sub_1AE792594(unsigned __int8 *a1, unsigned __int8 *a2)
{
  sub_1AE51055C(*a1, *a2);
}

void sub_1AE7925A0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E5DAF0E8;
}

unint64_t sub_1AE7925B8()
{
  unint64_t result;

  result = qword_1EEDA2960;
  if (!qword_1EEDA2960)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for KGQ.QType, &type metadata for KGQ.QType);
    atomic_store(result, (unint64_t *)&qword_1EEDA2960);
  }
  return result;
}

unint64_t sub_1AE7925F8()
{
  unint64_t result;

  result = qword_1EEDA2968;
  if (!qword_1EEDA2968)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for KGQ.Variable, &type metadata for KGQ.Variable);
    atomic_store(result, (unint64_t *)&qword_1EEDA2968);
  }
  return result;
}

unint64_t sub_1AE792638()
{
  unint64_t result;

  result = qword_1EEDA2970;
  if (!qword_1EEDA2970)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for KGQ.Keyword, &type metadata for KGQ.Keyword);
    atomic_store(result, (unint64_t *)&qword_1EEDA2970);
  }
  return result;
}

void sub_1AE792674()
{
  sub_1AE793410(&qword_1EEDA2978, &qword_1EEDA2980);
}

void type metadata accessor for KGQ()
{
  sub_1AE4F67D4();
}

uint64_t storeEnumTagSinglePayload for KGQ.QType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1AE7926F0 + 4 * byte_1AE959A0B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1AE792724 + 4 * byte_1AE959A06[v4]))();
}

uint64_t sub_1AE792724(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE79272C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE792734);
  return result;
}

uint64_t sub_1AE792740(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE792748);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1AE79274C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE792754(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for KGQ.QType()
{
  sub_1AE4F67D4();
}

void type metadata accessor for KGQ.Variable()
{
  sub_1AE4F67D4();
}

uint64_t getEnumTagSinglePayload for KGQ.Keyword(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF0)
  {
    if (a2 + 16 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 16) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 17;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v5 = v6 - 17;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for KGQ.Keyword(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1AE79284C + 4 * byte_1AE959A15[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1AE792880 + 4 * byte_1AE959A10[v4]))();
}

uint64_t sub_1AE792880(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE792888(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE792890);
  return result;
}

uint64_t sub_1AE79289C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE7928A4);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1AE7928A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7928B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for KGQ.Keyword()
{
  sub_1AE4F67D4();
}

uint64_t sub_1AE7928C8(uint64_t a1)
{
  return sub_1AE78FBF4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_1AE7928D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  sub_1AE78FBA4(v3, v4, v5);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return a1;
}

uint64_t sub_1AE792928(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  sub_1AE78FBA4(v3, v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v5;
  sub_1AE78FBF4(v6, v7, v8);
  return a1;
}

uint64_t sub_1AE792984(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v7 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1AE78FBF4(v5, v6, v7);
  return a1;
}

uint64_t sub_1AE7929D0(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 25))
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 3)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1AE792A10(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

void type metadata accessor for KGQ.Expression()
{
  sub_1AE4F67D4();
}

unint64_t sub_1AE792A68()
{
  unint64_t result;

  result = qword_1EEDA2988;
  if (!qword_1EEDA2988)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE959D44, &unk_1E5DAE958);
    atomic_store(result, (unint64_t *)&qword_1EEDA2988);
  }
  return result;
}

uint64_t type metadata accessor for KGQ.Value()
{
  uint64_t result;

  result = qword_1EEDA2998;
  if (!qword_1EEDA2998)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1AE792ADC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1AE501548(&qword_1EEDA2990);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1AE792B1C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1AE792B68 + 4 * byte_1AE959A1F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1AE792B9C + 4 * byte_1AE959A1A[v4]))();
}

uint64_t sub_1AE792B9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE792BA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE792BACLL);
  return result;
}

uint64_t sub_1AE792BB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE792BC0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1AE792BC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE792BCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for KGQ.Argument.Operation()
{
  sub_1AE4F67D4();
}

void sub_1AE792BE8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  sub_1AE4F6664();
}

uint64_t sub_1AE792C20(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t sub_1AE792C74(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

void type metadata accessor for KGQ.Argument()
{
  sub_1AE4F67D4();
}

_QWORD *sub_1AE792CC4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 7)
    {
      if (EnumCaseMultiPayload == 2)
      {
        v10 = sub_1AE9248DC();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        goto LABEL_9;
      }
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
      }
    }
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain();
LABEL_9:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  v9 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
  swift_retain();
  return a1;
}

uint64_t sub_1AE792DBC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 7)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result)
      return result;
    return swift_bridgeObjectRelease();
  }
  v3 = sub_1AE9248DC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_QWORD *sub_1AE792E24(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 7)
  {
    if (EnumCaseMultiPayload == 2)
    {
      v8 = sub_1AE9248DC();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_7;
    }
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
  }
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  swift_bridgeObjectRetain();
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *sub_1AE792EF4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_1AE78AFB8((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 7)
    {
      if (EnumCaseMultiPayload == 2)
      {
        v7 = sub_1AE9248DC();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_8;
      }
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
    }
    *a1 = *a2;
    a1[1] = a2[1];
    swift_bridgeObjectRetain();
LABEL_8:
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1AE792FE4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v6 = sub_1AE9248DC();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1AE793070(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1AE78AFB8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = sub_1AE9248DC();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1AE793118()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1AE9248DC();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1AE7931AC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 25 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 25) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE6)
    return ((uint64_t (*)(void))((char *)&loc_1AE7931F8 + 4 * byte_1AE959A29[v4]))();
  *a1 = a2 + 25;
  return ((uint64_t (*)(void))((char *)sub_1AE79322C + 4 * byte_1AE959A24[v4]))();
}

uint64_t sub_1AE79322C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE793234(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE79323CLL);
  return result;
}

uint64_t sub_1AE793248(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE793250);
  *(_BYTE *)result = a2 + 25;
  return result;
}

uint64_t sub_1AE793254(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE79325C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for KGQ.Verb()
{
  sub_1AE4F67D4();
}

uint64_t sub_1AE793278(uint64_t a1)
{
  return sub_1AE78FBF4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_1AE793288(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1AE78FBA4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1AE4F6624();
}

uint64_t sub_1AE7932C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1AE78FBA4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1AE78FBF4(v6, v7, v8);
  return a1;
}

uint64_t sub_1AE79331C(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1AE78FBF4(v4, v5, v6);
  return a1;
}

void type metadata accessor for KGQ.Clause()
{
  sub_1AE4F67D4();
}

unint64_t sub_1AE793370()
{
  unint64_t result;

  result = qword_1EEDA29A8;
  if (!qword_1EEDA29A8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE959E34, &unk_1E5DAED78);
    atomic_store(result, (unint64_t *)&qword_1EEDA29A8);
  }
  return result;
}

unint64_t sub_1AE7933B0()
{
  unint64_t result;

  result = qword_1EEDA29B0;
  if (!qword_1EEDA29B0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE959F44, &unk_1E5DAF430);
    atomic_store(result, (unint64_t *)&qword_1EEDA29B0);
  }
  return result;
}

void sub_1AE7933EC()
{
  sub_1AE793410(&qword_1EEDA29B8, &qword_1EEDA29C0);
}

void sub_1AE793410(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_1AE523CF0(a2);
    atomic_store(MEMORY[0x1AF454B70](MEMORY[0x1E0DEAF50], v3), a1);
  }
  sub_1AE4F6664();
}

unint64_t sub_1AE793450()
{
  unint64_t result;

  result = qword_1EEDA29C8;
  if (!qword_1EEDA29C8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE959FE4, &unk_1E5DAF3A0);
    atomic_store(result, (unint64_t *)&qword_1EEDA29C8);
  }
  return result;
}

void type metadata accessor for KGQ.Filter()
{
  sub_1AE4F67D4();
}

uint64_t sub_1AE7934A0(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1AE7934D4(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AE793514(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AE79354C(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 3)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1AE79358C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

void type metadata accessor for KGQ.Compute()
{
  sub_1AE4F67D4();
}

void type metadata accessor for KGQ.Get()
{
  sub_1AE4F67D4();
}

void sub_1AE7935E8(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  sub_1AE4F665C();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  sub_1AE4F6648();
  sub_1AE4F6624();
}

void sub_1AE793634(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  sub_1AE4F6664();
}

void type metadata accessor for KGQ.All()
{
  sub_1AE4F67D4();
}

uint64_t sub_1AE793680()
{
  return 0x444E455F594144;
}

uint64_t sub_1AE793698()
{
  return 0x4B4545575F31;
}

uint64_t sub_1AE7936AC()
{
  return 0x524145595F31;
}

uint64_t sub_1AE7936C0()
{
  return 0x5941445F31;
}

uint64_t sub_1AE7936D4()
{
  return 5721934;
}

uint64_t sub_1AE7936E4(unsigned int a1)
{
  return a1 | 0x444E455F00000000;
}

uint64_t sub_1AE7936F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return static KnosisInternalFact.< infix(_:_:)(&a9, &a20);
}

void KnosisAccessConfig.init(clientIdentifier:entitledIndexTypes:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v6 = a1[1];
  v7 = *((_BYTE *)a1 + 16);
  if (qword_1ED30FB20 != -1)
    swift_once();
  v8 = swift_bridgeObjectRetain();
  sub_1AE7AF1E8(v8, a2);
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v9;
}

uint64_t KnosisAccessConfig.description.getter()
{
  sub_1AE92691C();
  sub_1AE925F74();
  sub_1AE926A48();
  sub_1AE925F74();
  sub_1AE655564();
  swift_bridgeObjectRetain();
  sub_1AE9263F4();
  sub_1AE925F74();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1AE793884()
{
  uint64_t result;

  result = sub_1AE56B570();
  qword_1ED3274C0 = result;
  return result;
}

void static KnosisAccessConfig.initForInProcess()(uint64_t a1@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = static KnosisIndexType.allCases.getter();
  v3 = sub_1AE8985EC((uint64_t)v2);
  if (qword_1ED30FB20 != -1)
    swift_once();
  v4 = swift_bridgeObjectRetain();
  sub_1AE7AF1E8(v4, v3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  *(_QWORD *)(a1 + 24) = v5;
}

uint64_t destroy for KnosisAccessConfig(uint64_t a1)
{
  sub_1AE579F84(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KnosisAccessConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1AE526540(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KnosisAccessConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1AE526540(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  sub_1AE579F84(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for KnosisAccessConfig(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_1AE579F84(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KnosisAccessConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KnosisAccessConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KnosisAccessConfig()
{
  return &type metadata for KnosisAccessConfig;
}

uint64_t KnosisConfig.init(defaultResultLimit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  void (*v15)(uint64_t, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = sub_1AE924780();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v12 = (char *)&v20 - v11;
  if (qword_1ED31C450 != -1)
    swift_once();
  result = sub_1AE4FF0E0(0xD000000000000010, 0x80000001AE984D00, v9, v10, (void *)qword_1ED31C4B0);
  if (v14)
  {
    sub_1AE9246FC();
    swift_bridgeObjectRelease();
    v15 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
    v15(a2, v12, v4);
    result = sub_1AE4FF0E0(0x614D746E65746E69, 0xE900000000000070, v16, v17, (void *)qword_1ED31C4B0);
    if (v18)
    {
      sub_1AE9246FC();
      swift_bridgeObjectRelease();
      v19 = type metadata accessor for KnosisConfig();
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v15)(a2 + *(int *)(v19 + 20), v8, v4);
      *(_QWORD *)(a2 + *(int *)(v19 + 24)) = a1;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t KnosisConfig.init(defaultResultLimit:vopFileURL:intentMapFileURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;

  v8 = sub_1AE924780();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(a4, a2, v8);
  v10 = type metadata accessor for KnosisConfig();
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(a4 + *(int *)(v10 + 20), a3, v8);
  *(_QWORD *)(a4 + *(int *)(v10 + 24)) = a1;
  return result;
}

uint64_t sub_1AE793D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;

  v6 = (void *)sub_1AE925E18();
  swift_bridgeObjectRelease();
  v7 = (void *)sub_1AE925E18();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(a5, sel_pathForResource_ofType_, v6, v7);

  if (!v8)
    return 0;
  v9 = sub_1AE925E3C();

  return v9;
}

uint64_t type metadata accessor for KnosisConfig()
{
  uint64_t result;

  result = qword_1ED30ECB8;
  if (!qword_1ED30ECB8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KnosisConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1AE924780();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t destroy for KnosisConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = sub_1AE924780();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t initializeWithCopy for KnosisConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1AE924780();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for KnosisConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1AE924780();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for KnosisConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1AE924780();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for KnosisConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1AE924780();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for KnosisConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AE7940FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1AE5004DC();
  return _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v1, v0, v2);
}

uint64_t storeEnumTagSinglePayload for KnosisConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1AE794130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1AE5004DC();
  return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v1, v0, v0, v2);
}

uint64_t sub_1AE79415C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1AE924780();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1AE7941D4(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  id v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1AE926868();
    sub_1AE53F468(0, &qword_1EEDA29D0);
    sub_1AE794A1C();
    sub_1AE92640C();
    v1 = v31;
    v29 = v32;
    v3 = v33;
    v2 = v34;
    v4 = v35;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v3 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v2 = 0;
  }
  v28 = (unint64_t)(v3 + 64) >> 6;
  v30 = MEMORY[0x1E0DEE9D8];
  if (v1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v4)
    {
      v8 = (v4 - 1) & v4;
      v9 = __clz(__rbit64(v4)) | (v2 << 6);
      v10 = v2;
      goto LABEL_29;
    }
    v12 = v2 + 1;
    if (__OFADD__(v2, 1))
      break;
    if (v12 >= v28)
      goto LABEL_36;
    v13 = *(_QWORD *)(v29 + 8 * v12);
    v10 = v2 + 1;
    if (!v13)
    {
      v10 = v2 + 2;
      if (v2 + 2 >= v28)
        goto LABEL_36;
      v13 = *(_QWORD *)(v29 + 8 * v10);
      if (!v13)
      {
        v10 = v2 + 3;
        if (v2 + 3 >= v28)
          goto LABEL_36;
        v13 = *(_QWORD *)(v29 + 8 * v10);
        if (!v13)
        {
          v10 = v2 + 4;
          if (v2 + 4 >= v28)
            goto LABEL_36;
          v13 = *(_QWORD *)(v29 + 8 * v10);
          if (!v13)
          {
            v10 = v2 + 5;
            if (v2 + 5 >= v28)
              goto LABEL_36;
            v13 = *(_QWORD *)(v29 + 8 * v10);
            if (!v13)
            {
              v14 = v2 + 6;
              while (v14 < v28)
              {
                v13 = *(_QWORD *)(v29 + 8 * v14++);
                if (v13)
                {
                  v10 = v14 - 1;
                  goto LABEL_28;
                }
              }
LABEL_36:
              sub_1AE592EFC();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v8 = (v13 - 1) & v13;
    v9 = __clz(__rbit64(v13)) + (v10 << 6);
LABEL_29:
    v11 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v9);
    if (!v11)
      goto LABEL_36;
    while (1)
    {
      v15 = v1;
      v16 = objc_msgSend(v11, "arg");
      v17 = sub_1AE925E3C();
      v19 = v18;

      v20 = objc_msgSend(v11, sel_value);
      v21 = sub_1AE925E3C();
      v23 = v22;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AE51B6FC();
        v30 = v26;
      }
      v24 = *(_QWORD *)(v30 + 16);
      if (v24 >= *(_QWORD *)(v30 + 24) >> 1)
      {
        sub_1AE51B6FC();
        v30 = v27;
      }
      *(_QWORD *)(v30 + 16) = v24 + 1;
      v25 = (_QWORD *)(v30 + 32 * v24);
      v25[4] = v17;
      v25[5] = v19;
      v25[6] = v21;
      v25[7] = v23;
      v2 = v10;
      v4 = v8;
      v1 = v15;
      if ((v15 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (sub_1AE926874())
      {
        sub_1AE53F468(0, &qword_1EEDA29D0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v11 = v36;
        swift_unknownObjectRelease();
        v10 = v2;
        v8 = v4;
        if (v36)
          continue;
      }
      goto LABEL_36;
    }
  }
  __break(1u);
}

id static KnosisKGQRequest.initWithGDKnosisRequest(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id result;

  v4 = objc_msgSend(a1, sel_query);
  v5 = sub_1AE925E3C();
  v7 = v6;

  v8 = sub_1AE794958(a1);
  if (v9)
    v10 = v8;
  else
    v10 = 0;
  if (v9)
    v11 = v9;
  else
    v11 = 0xE000000000000000;
  v12 = objc_msgSend(a1, sel_limit);
  v13 = sub_1AE926424();

  v14 = objc_msgSend(a1, sel_offset);
  v15 = sub_1AE926424();

  LOBYTE(v14) = objc_msgSend(a1, sel_enableDebug);
  result = objc_msgSend(a1, sel_enableTextualization);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v13;
  *(_QWORD *)(a2 + 48) = v15;
  *(_BYTE *)(a2 + 56) = (_BYTE)v14;
  *(_BYTE *)(a2 + 57) = (_BYTE)result;
  return result;
}

id static KnosisIntentRequest.initWithGDKnosisRequest(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;

  v3 = a1;
  v5 = sub_1AE7949B0(a1);
  v34 = v3;
  if (!v5)
  {
    v10 = MEMORY[0x1E0DEE9D8];
LABEL_19:
    v26 = sub_1AE4FED3C(v5, sel_query);
    sub_1AE925E3C();
    sub_1AE5004EC();
    v28 = sub_1AE4FED3C(v27, sel_limit);
    v29 = sub_1AE926424();

    v31 = sub_1AE4FED3C(v30, sel_offset);
    v32 = sub_1AE926424();

    result = objc_msgSend(v34, sel_enableDebug);
    *(_QWORD *)a2 = v2;
    *(_QWORD *)(a2 + 8) = v3;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = v29;
    *(_QWORD *)(a2 + 40) = v32;
    *(_BYTE *)(a2 + 48) = (_BYTE)result;
    return result;
  }
  v6 = v5;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 >= 0)
      v2 = v5 & 0xFFFFFFFFFFFFFF8;
    else
      v2 = v5;
    swift_bridgeObjectRetain();
    result = (id)sub_1AE926AD8();
    v7 = (uint64_t)result;
  }
  else
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain();
  }
  v33 = a2;
  if (!v7)
  {
    v10 = MEMORY[0x1E0DEE9D8];
LABEL_18:
    v5 = swift_bridgeObjectRelease_n();
    a2 = v33;
    goto LABEL_19;
  }
  if (v7 >= 1)
  {
    v9 = 0;
    v10 = MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v11 = (id)MEMORY[0x1AF453B80](v9, v6);
      else
        v11 = *(id *)(v6 + 8 * v9 + 32);
      v12 = v11;
      v13 = objc_msgSend(v11, sel_intent, v33);
      v14 = sub_1AE925E3C();
      v3 = v15;

      v16 = objc_msgSend(v12, sel_args);
      sub_1AE53F468(0, &qword_1EEDA29D0);
      sub_1AE794A1C();
      v17 = sub_1AE9263E8();

      sub_1AE7941D4(v17);
      swift_bridgeObjectRelease();
      v18 = sub_1AE898A90();
      v19 = objc_msgSend(v12, sel_score);
      sub_1AE9263C4();
      v21 = v20;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AE500F90();
        v10 = v24;
      }
      v22 = *(_QWORD *)(v10 + 16);
      v2 = v22 + 1;
      if (v22 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        sub_1AE500F90();
        v10 = v25;
      }
      ++v9;
      *(_QWORD *)(v10 + 16) = v2;
      v23 = v10 + 32 * v22;
      *(_QWORD *)(v23 + 32) = v14;
      *(_QWORD *)(v23 + 40) = v3;
      *(_QWORD *)(v23 + 48) = v18;
      *(_DWORD *)(v23 + 56) = v21;
    }
    while (v7 != v9);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AE794958(void *a1)
{
  uint64_t v1;

  if (!objc_msgSend(a1, "kgq"))
    return 0;
  sub_1AE925E3C();
  sub_1AE5004EC();
  return v1;
}

uint64_t sub_1AE7949B0(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_intentArgs);
  if (!v1)
    return 0;
  v2 = v1;
  sub_1AE53F468(0, &qword_1EEDA29E0);
  v3 = sub_1AE9261CC();

  return v3;
}

unint64_t sub_1AE794A1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEDA29D8;
  if (!qword_1EEDA29D8)
  {
    v1 = sub_1AE53F468(255, &qword_1EEDA29D0);
    result = MEMORY[0x1AF454B70](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEDA29D8);
  }
  return result;
}

uint64_t KnosisKGQRequest.init(query:kgq:contextFacts:limit:offset:enableDebug:enableTextualization:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char a10)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 56) = a8;
  *(_BYTE *)(a9 + 57) = a10;
  return result;
}

uint64_t KnosisIntentRequest.init(query:intentRequests:contextFacts:limit:offset:enableDebug:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  *(_QWORD *)(a8 + 40) = a6;
  *(_BYTE *)(a8 + 48) = a7;
  return result;
}

uint64_t IntentRequest.init(intent:args:score:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  *(float *)(a4 + 24) = a5;
  return result;
}

IntelligencePlatform::IntentArg __swiftcall IntentArg.init(arg:value:)(Swift::String arg, Swift::String value)
{
  Swift::String *v2;
  IntelligencePlatform::IntentArg result;

  *v2 = arg;
  v2[1] = value;
  result.value = value;
  result.arg = arg;
  return result;
}

unint64_t KnosisKGQRequest.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(unsigned __int8 *)(v0 + 56);
  v3 = *(unsigned __int8 *)(v0 + 57);
  sub_1AE92691C();
  swift_bridgeObjectRelease();
  sub_1AE4F66C4();
  sub_1AE779D14();
  sub_1AE4F665C();
  sub_1AE796C20();
  sub_1AE5004F8();
  sub_1AE509B74();
  sub_1AE4F81B8();
  sub_1AE925F74();
  sub_1AE5004F8();
  sub_1AE509B74();
  sub_1AE4F6648();
  if (v2 != 1)
  {
    if (!v3)
      goto LABEL_3;
LABEL_7:
    sub_1AE509B74();
    if (!v1)
      goto LABEL_5;
    goto LABEL_4;
  }
  sub_1AE796C14();
  if (v3)
    goto LABEL_7;
LABEL_3:
  if (v1)
  {
LABEL_4:
    sub_1AE92691C();
    swift_bridgeObjectRelease();
    sub_1AE926D18();
    sub_1AE4FBAE0();
    sub_1AE4F6648();
    sub_1AE925F74();
    sub_1AE4F6648();
  }
LABEL_5:
  sub_1AE4FF0F0();
  return 0xD000000000000011;
}

uint64_t KnosisIntentRequest.description.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(v0 + 48);
  sub_1AE92691C();
  sub_1AE4FBAE0();
  v2 = swift_bridgeObjectRetain();
  MEMORY[0x1AF453400](v2, &type metadata for IntentRequest);
  sub_1AE4FBAE0();
  sub_1AE4F6648();
  sub_1AE4F665C();
  sub_1AE508848();
  sub_1AE5004F8();
  sub_1AE4FBAE0();
  sub_1AE4F81B8();
  sub_1AE796C20();
  sub_1AE5004F8();
  sub_1AE4FBAE0();
  sub_1AE4F6648();
  if (v1 == 1)
    sub_1AE796C14();
  sub_1AE4FF0F0();
  return 0;
}

unint64_t IntentRequest.description.getter()
{
  sub_1AE92691C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1AE925F74();
  sub_1AE4F81B8();
  sub_1AE925F74();
  sub_1AE796170();
  swift_bridgeObjectRetain();
  sub_1AE9263F4();
  sub_1AE925F74();
  sub_1AE4F6648();
  sub_1AE4F665C();
  sub_1AE4FF0F0();
  return 0xD000000000000014;
}

uint64_t static IntentRequest.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  char v10;
  uint64_t result;

  v2 = sub_1AE50A0DC(a1);
  v6 = *(float *)(v5 + 24);
  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(float *)(v4 + 24);
  if (v2 == *(_QWORD *)v4 && v3 == *(_QWORD *)(v4 + 8))
    return sub_1AE7955EC(v1, v7) & (v6 == v8);
  v10 = sub_1AE4FB6F0();
  result = 0;
  if ((v10 & 1) != 0)
    return sub_1AE7955EC(v1, v7) & (v6 == v8);
  return result;
}

uint64_t sub_1AE794F24(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  _QWORD *v14;
  int64_t v15;
  _BYTE v16[72];

  if (a1 != (_QWORD *)a2)
  {
    if (a1[2] != *(_QWORD *)(a2 + 16))
      return 0;
    v14 = a1 + 7;
    sub_1AE4FD438();
    v15 = (unint64_t)(v5 + 63) >> 6;
    if ((v6 & v4) != 0)
    {
      v7 = __clz(__rbit64(v6 & v4));
      goto LABEL_18;
    }
    if ((unint64_t)(v5 + 63) >> 6 > 1)
    {
      v8 = v14[1];
      v9 = 1;
      if (v8)
        goto LABEL_17;
      v9 = 2;
      if ((unint64_t)(v5 + 63) >> 6 <= 2)
        return 1;
      v8 = v14[2];
      if (v8)
        goto LABEL_17;
      v9 = 3;
      if ((unint64_t)(v5 + 63) >> 6 <= 3)
        return 1;
      v8 = v14[3];
      if (v8)
      {
LABEL_17:
        v7 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_18:
        v11 = *(_BYTE *)(a1[6] + v7);
        sub_1AE926EC8();
        sub_1AE5E80C4((uint64_t)v16, v11);
        v12 = sub_1AE926F10() & ~(-1 << *(_BYTE *)(a2 + 32));
        if (((*(_QWORD *)(a2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
          __asm { BR              X9 }
        return 0;
      }
      v10 = 4;
      if (v15 > 4)
      {
        v8 = v14[4];
        if (v8)
        {
          v9 = 4;
          goto LABEL_17;
        }
        while (1)
        {
          v9 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            JUMPOUT(0x1AE795354);
          }
          if (v9 >= v15)
            break;
          v8 = v14[v9];
          ++v10;
          if (v8)
            goto LABEL_17;
        }
      }
    }
  }
  return 1;
}

void sub_1AE79539C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v27 = a1 + 56;
  sub_1AE4FD438();
  v7 = v6 & v5;
  v28 = (unint64_t)(v8 + 63) >> 6;
  if ((v6 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v29 = v4;
  for (i = v9 | (v4 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    v15 = v3;
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 40 * i + 8);
    sub_1AE926EC8();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_1AE925F14();
    sub_1AE4F81B8();
    v17 = sub_1AE926F10();
    v18 = -1 << *(_BYTE *)(a2 + 32);
    v19 = v17 & ~v18;
    sub_1AE508CD8();
    if ((v20 & 1) == 0)
      goto LABEL_35;
    sub_1AE509150();
    v22 = v22 && v21 == v16;
    if (!v22 && (sub_1AE4FB6F0() & 1) == 0)
    {
      v23 = ~v18;
      while (1)
      {
        v19 = (v19 + 1) & v23;
        sub_1AE508CD8();
        if ((v24 & 1) == 0)
          break;
        sub_1AE509150();
        v26 = v22 && v25 == v16;
        if (v26 || (sub_1AE4FB6F0() & 1) != 0)
          goto LABEL_32;
      }
LABEL_35:
      sub_1AE4F76D8();
      sub_1AE4F81B8();
      return;
    }
LABEL_32:
    sub_1AE4F76D8();
    sub_1AE4F81B8();
    v3 = v15;
    v4 = v29;
    if (v7)
      goto LABEL_4;
LABEL_5:
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v11 >= v28)
      return;
    v12 = *(_QWORD *)(v27 + 8 * v11);
    v13 = v4 + 1;
    if (!v12)
    {
      v13 = v4 + 2;
      if (v4 + 2 >= v28)
        return;
      v12 = *(_QWORD *)(v27 + 8 * v13);
      if (!v12)
      {
        v13 = v4 + 3;
        if (v4 + 3 >= v28)
          return;
        v12 = *(_QWORD *)(v27 + 8 * v13);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v7 = (v12 - 1) & v12;
    v29 = v13;
  }
  v14 = v4 + 4;
  if (v4 + 4 >= v28)
    return;
  v12 = *(_QWORD *)(v27 + 8 * v14);
  if (v12)
  {
    v13 = v4 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v28)
      return;
    v12 = *(_QWORD *)(v27 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_18;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_1AE7955EC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  int64_t v32;

  if (result == a2)
    return 1;
  v2 = a2;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v28 = result;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  if (!v6)
    goto LABEL_8;
LABEL_7:
  v31 = (v6 - 1) & v6;
  v32 = v3;
  for (i = __clz(__rbit64(v6)) | (v3 << 6); ; i = __clz(__rbit64(v10)) + (v11 << 6))
  {
    v13 = (uint64_t *)(*(_QWORD *)(result + 48) + 32 * i);
    v15 = *v13;
    v14 = v13[1];
    v17 = v13[2];
    v16 = v13[3];
    sub_1AE926EC8();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_1AE925F14();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1AE925F14();
    swift_bridgeObjectRelease();
    v18 = sub_1AE926F10();
    v19 = -1 << *(_BYTE *)(v2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
    {
LABEL_41:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v21 = ~v19;
    v22 = *(_QWORD *)(a2 + 48);
    while (1)
    {
      v23 = (_QWORD *)(v22 + 32 * v20);
      v24 = v23[2];
      v25 = v23[3];
      v26 = *v23 == v15 && v23[1] == v14;
      if (v26 || (sub_1AE926D60() & 1) != 0)
      {
        v27 = v24 == v17 && v25 == v16;
        if (v27 || (sub_1AE926D60() & 1) != 0)
          break;
      }
      v20 = (v20 + 1) & v21;
      if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
        goto LABEL_41;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v32;
    v2 = a2;
    result = v28;
    v6 = v31;
    if (v31)
      goto LABEL_7;
LABEL_8:
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v9 >= v30)
      return 1;
    v10 = *(_QWORD *)(v29 + 8 * v9);
    v11 = v3 + 1;
    if (!v10)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v10 = *(_QWORD *)(v29 + 8 * v11);
      if (!v10)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v10 = *(_QWORD *)(v29 + 8 * v11);
        if (!v10)
        {
          v11 = v3 + 4;
          if (v3 + 4 >= v30)
            return 1;
          v10 = *(_QWORD *)(v29 + 8 * v11);
          if (!v10)
            break;
        }
      }
    }
LABEL_23:
    v31 = (v10 - 1) & v10;
    v32 = v11;
  }
  v12 = v3 + 5;
  if (v3 + 5 >= v30)
    return 1;
  v10 = *(_QWORD *)(v29 + 8 * v12);
  if (v10)
  {
    v11 = v3 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v30)
      return 1;
    v10 = *(_QWORD *)(v29 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_1AE7958E0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x614E746E65746E69 && a2 == 0xEA0000000000656DLL;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 1936159329 && a2 == 0xE400000000000000;
    if (v6 || (sub_1AE926D60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_1AE795A20(char a1)
{
  if (!a1)
    return 0x614E746E65746E69;
  if (a1 == 1)
    return 1936159329;
  return 0x65726F6373;
}

uint64_t sub_1AE795A70()
{
  char *v0;

  return sub_1AE795A20(*v0);
}

uint64_t sub_1AE795A78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE7958E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE795A9C()
{
  sub_1AE7961AC();
  return sub_1AE926F94();
}

uint64_t sub_1AE795AC4()
{
  sub_1AE7961AC();
  return sub_1AE926FA0();
}

uint64_t IntentRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_1AE501548(&qword_1EEDA29F0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F683C();
  v6 = a1[3];
  v7 = a1;
  v9 = v8;
  sub_1AE4F9858(v7, v6);
  sub_1AE7961AC();
  sub_1AE926F4C();
  sub_1AE4FD9E0();
  if (!v1)
  {
    sub_1AE501548(&qword_1EEDA2A00);
    sub_1AE7961E8();
    sub_1AE926CC4();
    sub_1AE926CAC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v2, v9);
}

uint64_t sub_1AE795C60(_QWORD *a1)
{
  return IntentRequest.encode(to:)(a1);
}

uint64_t IntentArg.description.getter()
{
  sub_1AE92691C();
  swift_bridgeObjectRelease();
  sub_1AE4F66C4();
  sub_1AE779D14();
  sub_1AE4F665C();
  sub_1AE508848();
  swift_bridgeObjectRetain();
  sub_1AE925F74();
  sub_1AE4F76D8();
  sub_1AE4FF0F0();
  return 0x41746E65746E493CLL;
}

uint64_t IntentArg.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1AE925F14();
  sub_1AE4F81B8();
  sub_1AE4F66CC();
  sub_1AE925F14();
  return swift_bridgeObjectRelease();
}

uint64_t static IntentArg.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;

  v2 = sub_1AE50A0DC(a1);
  v6 = *(_QWORD *)(v5 + 24);
  v7 = v4[2];
  v8 = v4[3];
  v9 = v2 == *v4 && v3 == v4[1];
  if (v9 || (v10 = sub_1AE4FB6F0(), result = 0, (v10 & 1) != 0))
  {
    if (v1 == v7 && v6 == v8)
      return 1;
    else
      return sub_1AE926D60();
  }
  return result;
}

uint64_t sub_1AE795E20(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 6779489 && a2 == 0xE300000000000000;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_1AE926D60();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1AE795EF4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65756C6176;
  else
    return 6779489;
}

uint64_t sub_1AE795F20()
{
  char *v0;

  return sub_1AE795EF4(*v0);
}

uint64_t sub_1AE795F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE795E20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE795F4C()
{
  sub_1AE796288();
  return sub_1AE926F94();
}

uint64_t sub_1AE795F74()
{
  sub_1AE796288();
  return sub_1AE926FA0();
}

uint64_t IntentArg.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v4 = sub_1AE501548(&qword_1EEDA2A18);
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F683C();
  sub_1AE4F9858(a1, a1[3]);
  sub_1AE796288();
  sub_1AE926F4C();
  sub_1AE4FD9E0();
  if (!v1)
    sub_1AE4FD9E0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

void IntentArg.hashValue.getter()
{
  sub_1AE926EC8();
  sub_1AE4F66C4();
  sub_1AE4FC630();
  sub_1AE4F665C();
  sub_1AE4F66CC();
  sub_1AE4F9240();
  sub_1AE4F9038();
  sub_1AE926F10();
  sub_1AE4F685C();
}

void sub_1AE796108()
{
  sub_1AE926EC8();
  sub_1AE4F66C4();
  sub_1AE4FC630();
  sub_1AE4F665C();
  sub_1AE4F66CC();
  sub_1AE4F9240();
  sub_1AE4F9038();
  sub_1AE926F10();
  sub_1AE4F685C();
}

uint64_t sub_1AE796158(_QWORD *a1)
{
  return IntentArg.encode(to:)(a1);
}

unint64_t sub_1AE796170()
{
  unint64_t result;

  result = qword_1EEDA29E8;
  if (!qword_1EEDA29E8)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for IntentArg, &type metadata for IntentArg);
    atomic_store(result, (unint64_t *)&qword_1EEDA29E8);
  }
  return result;
}

unint64_t sub_1AE7961AC()
{
  unint64_t result;

  result = qword_1EEDA29F8;
  if (!qword_1EEDA29F8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95A4E8, &type metadata for IntentRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA29F8);
  }
  return result;
}

unint64_t sub_1AE7961E8()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EEDA2A08;
  if (!qword_1EEDA2A08)
  {
    v1 = sub_1AE523CF0(&qword_1EEDA2A00);
    v2 = sub_1AE79624C();
    result = MEMORY[0x1AF454B70](MEMORY[0x1E0DEB3B8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEDA2A08);
  }
  return result;
}

unint64_t sub_1AE79624C()
{
  unint64_t result;

  result = qword_1EEDA2A10;
  if (!qword_1EEDA2A10)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for IntentArg, &type metadata for IntentArg);
    atomic_store(result, (unint64_t *)&qword_1EEDA2A10);
  }
  return result;
}

unint64_t sub_1AE796288()
{
  unint64_t result;

  result = qword_1EEDA2A20;
  if (!qword_1EEDA2A20)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95A498, &type metadata for IntentArg.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2A20);
  }
  return result;
}

unint64_t sub_1AE7962C8()
{
  unint64_t result;

  result = qword_1EEDA2A28;
  if (!qword_1EEDA2A28)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for IntentArg, &type metadata for IntentArg);
    atomic_store(result, (unint64_t *)&qword_1EEDA2A28);
  }
  return result;
}

uint64_t initializeWithCopy for KnosisKGQRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KnosisKGQRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

__n128 initializeWithTake for KnosisKGQRequest(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for KnosisKGQRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for KnosisKGQRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 58))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KnosisKGQRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 58) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for KnosisKGQRequest()
{
  sub_1AE4F67D4();
}

uint64_t destroy for KnosisIntentRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KnosisIntentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KnosisIntentRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for KnosisIntentRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for KnosisIntentRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KnosisIntentRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for KnosisIntentRequest()
{
  sub_1AE4F67D4();
}

uint64_t initializeWithCopy for IntentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IntentRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for IntentRequest(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for IntentRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for IntentRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 28))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IntentRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 28) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for IntentRequest()
{
  sub_1AE4F67D4();
}

void type metadata accessor for IntentArg()
{
  sub_1AE4F67D4();
}

uint64_t storeEnumTagSinglePayload for IntentArg.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1AE796948 + 4 * byte_1AE95A135[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1AE79697C + 4 * asc_1AE95A130[v4]))();
}

uint64_t sub_1AE79697C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE796984(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE79698CLL);
  return result;
}

uint64_t sub_1AE796998(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE7969A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1AE7969A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7969AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IntentArg.CodingKeys()
{
  return &type metadata for IntentArg.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IntentRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AE796A14 + 4 * byte_1AE95A13F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AE796A48 + 4 * byte_1AE95A13A[v4]))();
}

uint64_t sub_1AE796A48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE796A50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE796A58);
  return result;
}

uint64_t sub_1AE796A64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE796A6CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AE796A70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE796A78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IntentRequest.CodingKeys()
{
  return &type metadata for IntentRequest.CodingKeys;
}

unint64_t sub_1AE796A98()
{
  unint64_t result;

  result = qword_1EEDA2A30;
  if (!qword_1EEDA2A30)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95A3B8, &type metadata for IntentRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2A30);
  }
  return result;
}

unint64_t sub_1AE796AD8()
{
  unint64_t result;

  result = qword_1EEDA2A38;
  if (!qword_1EEDA2A38)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95A470, &type metadata for IntentArg.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2A38);
  }
  return result;
}

unint64_t sub_1AE796B18()
{
  unint64_t result;

  result = qword_1EEDA2A40;
  if (!qword_1EEDA2A40)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95A3E0, &type metadata for IntentArg.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2A40);
  }
  return result;
}

unint64_t sub_1AE796B58()
{
  unint64_t result;

  result = qword_1EEDA2A48;
  if (!qword_1EEDA2A48)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95A408, &type metadata for IntentArg.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2A48);
  }
  return result;
}

unint64_t sub_1AE796B98()
{
  unint64_t result;

  result = qword_1EEDA2A50;
  if (!qword_1EEDA2A50)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95A328, &type metadata for IntentRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2A50);
  }
  return result;
}

unint64_t sub_1AE796BD8()
{
  unint64_t result;

  result = qword_1EEDA2A58;
  if (!qword_1EEDA2A58)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95A350, &type metadata for IntentRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2A58);
  }
  return result;
}

uint64_t sub_1AE796C14()
{
  return sub_1AE925F74();
}

uint64_t sub_1AE796C20()
{
  return sub_1AE925F74();
}

void sub_1AE796C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  _OWORD *v12;
  __int16 v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[18];
  _OWORD v19[2];
  __int16 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v17 = v3;
  v5 = *(unsigned __int16 *)(v0 + 32);
  v6 = *(unsigned __int8 *)(v0 + 34);
  v7 = *(_QWORD *)(v0 + 80);
  v28 = MEMORY[0x1E0DEE9D8];
  sub_1AE525B74(v2, v1, v4, v3, v5, v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = sub_1AE798DAC();
  sub_1AE4F66E8();
  sub_1AE525C94(v2, v1, v4, v17, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AE4F66E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v8 + 16))
  {
    sub_1AE4FD458(v19);
    sub_1AE4FD458(v18);
    __asm { BR              X8 }
  }
  swift_bridgeObjectRelease();
  v18[0] = MEMORY[0x1E0DEE9D8];
  v9 = *(_QWORD *)(v7 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = 0;
    do
    {
      v11 = sub_1AE500F9C(v7 + v10);
      v19[0] = v12[2];
      v19[1] = v12[3];
      v20 = v13;
      v21 = v14;
      v22 = *(_OWORD *)((char *)v12 + 72);
      v23 = *(_OWORD *)((char *)v12 + 88);
      v24 = *(_OWORD *)((char *)v12 + 104);
      v25 = v11;
      v26 = v15;
      v27 = v16;
      sub_1AE796C2C();
      MEMORY[0x1AF4533D0]();
      if (*(_QWORD *)((v18[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1AE926220();
      sub_1AE92625C();
      sub_1AE9261FC();
      v10 += 112;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  __asm { BR              X9 }
}

id sub_1AE796F64()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1AE4F6708();
  v2 = objc_allocWithZone((Class)GDKnosisAnswer);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1AE7977EC(v1, v0, v6, v7, v5, v4);
}

void __swiftcall KnosisResult.toGDKnosisResult()(GDKnosisResult *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(unsigned __int8 *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 56);
  v22 = *(_QWORD *)(v1 + 48);
  v23 = *(_QWORD *)(v1 + 16);
  v21 = *(_BYTE *)(v1 + 80);
  v8 = *(_OWORD *)(v1 + 152);
  v24 = MEMORY[0x1E0DEE9D8];
  v9 = *(_QWORD *)(v5 + 16);
  if (v9)
  {
    v19 = *(_OWORD *)(v1 + 152);
    v20 = *(_QWORD *)v1;
    swift_bridgeObjectRetain();
    v10 = 0;
    do
    {
      sub_1AE500F9C(v5 + v10);
      sub_1AE796C2C();
      MEMORY[0x1AF4533D0]();
      if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1AE500504();
      sub_1AE92625C();
      sub_1AE9261FC();
      v10 += 112;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    v2 = v20;
    *(_QWORD *)&v8 = v19;
  }
  if ((_QWORD)v8)
  {
    sub_1AE7971F8();
    v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  v13 = v6 + 1;
  if (v3)
    v14 = v2;
  else
    v14 = 0;
  if (v3)
    v15 = v3;
  else
    v15 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AE4F6708();
  v16 = (void *)sub_1AE926430();
  v17 = (void *)sub_1AE926430();
  v18 = objc_allocWithZone((Class)GDKnosisResult);
  sub_1AE7976A4(v14, v15, v23, v4, v13, v24, v22, v7, v16, v17, v21, v12);
}

void sub_1AE7971F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *v0;
  if (*v0 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v2 = v0[1];
  v3 = v0[2];
  v4 = *(_QWORD *)(v3 + 16);
  v5 = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v12 = v2;
    v13 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1AE9269DC();
    v6 = (uint64_t *)(v3 + 64);
    do
    {
      v7 = *(v6 - 4);
      v8 = *(v6 - 3);
      v9 = *(v6 - 2);
      v10 = *(v6 - 1);
      v11 = *v6;
      v6 += 5;
      objc_allocWithZone((Class)GDKnosisExecStep);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1AE797C08(v7, v8, v9, v10, v11);
      sub_1AE9269B8();
      sub_1AE9269E8();
      sub_1AE9269F4();
      sub_1AE9269C4();
      --v4;
    }
    while (v4);
    v5 = v13;
    swift_bridgeObjectRelease();
    v2 = v12;
  }
  objc_allocWithZone((Class)GDKnosisDebug);
  swift_bridgeObjectRetain();
  sub_1AE797CD8(v1, v5, v2);
}

void sub_1AE79735C()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  _BYTE __src[144];
  _QWORD v10[19];
  uint64_t v11;
  _QWORD __dst[19];

  memcpy(__dst, v0, 0x90uLL);
  v11 = MEMORY[0x1E0DEE9D8];
  sub_1AE525A98((uint64_t)__dst);
  swift_bridgeObjectRetain();
  v1 = sub_1AE798DAC();
  swift_bridgeObjectRelease();
  sub_1AE525BB8((uint64_t)__dst);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = __dst[0];
    v4 = __dst[1];
    v5 = v2 - 1;
    for (i = 32; ; i += 144)
    {
      memcpy(v10, (const void *)(v1 + i), 0x90uLL);
      memcpy(__src, (const void *)(v1 + i), sizeof(__src));
      sub_1AE525A98((uint64_t)v10);
      sub_1AE79735C(v3, v4);
      v7 = sub_1AE525BB8((uint64_t)v10);
      MEMORY[0x1AF4533D0](v7);
      if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1AE926220();
      sub_1AE92625C();
      sub_1AE9261FC();
      if (!v5)
        break;
      --v5;
    }
  }
  swift_bridgeObjectRelease();
  sub_1AE53F468(0, (unint64_t *)&qword_1ED318F50);
  swift_bridgeObjectRetain();
  sub_1AE9266D0();
  swift_bridgeObjectRetain();
  sub_1AE9266D0();
  sub_1AE501548(&qword_1EED99648);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1AE95A550;
  sub_1AE53F468(0, &qword_1EEDA2A70);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v8 + 32) = sub_1AE797634();
  v10[0] = v8;
  sub_1AE9261FC();
  sub_1AE9266D0();
  __asm { BR              X10 }
}

id sub_1AE797594()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = v0;
  v8 = swift_bridgeObjectRetain();
  v9 = (void *)sub_1AE9266D0();
  v10 = objc_allocWithZone((Class)GDKnosisFact);
  return sub_1AE79796C(v13, v3, v12, v14, v15, MEMORY[0x1E0DEE9D8], v5, MEMORY[0x1E0DEE9D8], v1, v6, v4, v2, v7, v8, MEMORY[0x1E0DEE9D8], v9);
}

id sub_1AE797634()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v1 = (void *)sub_1AE925E18();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithPrimary_, v1);

  return v2;
}

id sub_1AE7976A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, char a11, void *a12)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v19;
  void *v20;

  v13 = (void *)sub_1AE925E18();
  swift_bridgeObjectRelease();
  v14 = (void *)sub_1AE925E18();
  swift_bridgeObjectRelease();
  sub_1AE53F468(0, &qword_1EED98E48);
  v15 = (void *)sub_1AE9261C0();
  swift_bridgeObjectRelease();
  if (a8)
  {
    v16 = (void *)sub_1AE925E18();
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
  }
  LOBYTE(v19) = a11 & 1;
  v17 = objc_msgSend(v20, sel_initWithQuery_kgq_status_answers_errorMessage_limit_offset_hasMoreAnswers_debug_, v13, v14, a5, v15, v16, a9, a10, v19, a12);

  return v17;
}

id sub_1AE7977EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  if (a2)
  {
    v9 = (void *)sub_1AE925E18();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  if (!a4)
  {
    v10 = 0;
    if (a6)
      goto LABEL_6;
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  v10 = (void *)sub_1AE925E18();
  swift_bridgeObjectRelease();
  if (!a6)
    goto LABEL_8;
LABEL_6:
  v11 = (void *)sub_1AE925E18();
  swift_bridgeObjectRelease();
LABEL_9:
  sub_1AE53F468(0, &qword_1EEDA2A68);
  v12 = (void *)sub_1AE9261C0();
  swift_bridgeObjectRelease();
  sub_1AE53F468(0, &qword_1EED98E48);
  v13 = (void *)sub_1AE9261C0();
  swift_bridgeObjectRelease();
  v14 = (void *)sub_1AE9261C0();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v6, sel_initWithAnswerId_name_textualization_facts_parents_requestIds_, v9, v10, v11, v12, v13, v14);

  return v15;
}

id sub_1AE79796C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;

  v27 = (void *)sub_1AE925E18();
  swift_bridgeObjectRelease();
  v18 = (void *)sub_1AE925E18();
  swift_bridgeObjectRelease();
  if (a6)
  {
    sub_1AE53F468(0, &qword_1EEDA2A70);
    v19 = (void *)sub_1AE9261C0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = 0;
  }
  if (a8)
  {
    v29 = (void *)sub_1AE9261C0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = 0;
  }
  if (a10)
  {
    v20 = (void *)sub_1AE925E18();
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = 0;
  }
  if (a11)
  {
    sub_1AE53F468(0, &qword_1EEDA2A70);
    v21 = (void *)sub_1AE9261C0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = 0;
  }
  if (a14)
  {
    v22 = (void *)sub_1AE925E18();
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = 0;
  }
  if (a15)
  {
    sub_1AE53F468(0, &qword_1EEDA2A70);
    v23 = (void *)sub_1AE9261C0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = 0;
  }
  sub_1AE53F468(0, &qword_1EEDA2A68);
  v25 = (void *)sub_1AE9261C0();
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v28, sel_initWithFactId_score_subjectId_subjectAlias_subjectPopularity_subjectIsa_predicateId_predicateAlias_predicatePopularity_objectID_objectAlias_objectPopularity_qualifiers_, v27, a3, v18, v19, a7, v29, v20, v21, a12, v22, v23, a16, v25);

  return v26;
}

id sub_1AE797C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  if (a2)
  {
    v8 = (void *)sub_1AE925E18();
    swift_bridgeObjectRelease();
    if (a4)
      goto LABEL_3;
LABEL_6:
    v9 = 0;
    if (a5)
      goto LABEL_4;
LABEL_7:
    v10 = 0;
    goto LABEL_8;
  }
  v8 = 0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  v9 = (void *)sub_1AE925E18();
  swift_bridgeObjectRelease();
  if (!a5)
    goto LABEL_7;
LABEL_4:
  v10 = (void *)sub_1AE9261C0();
  swift_bridgeObjectRelease();
LABEL_8:
  v11 = objc_msgSend(v5, sel_initWithKgQueryNode_indexQuery_messages_, v8, v9, v10);

  return v11;
}

id sub_1AE797CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v6;
  void *v7;
  id v8;

  if (!a2)
  {
    v6 = 0;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  sub_1AE53F468(0, &qword_1EEDA2A60);
  v6 = (void *)sub_1AE9261C0();
  swift_bridgeObjectRelease();
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v7 = (void *)sub_1AE9261C0();
  swift_bridgeObjectRelease();
LABEL_6:
  v8 = objc_msgSend(v3, sel_initWithIndexCallCount_execSteps_messages_, a1, v6, v7);

  return v8;
}

uint64_t sub_1AE797D9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1AE5216A0();
    v2 = v11;
    v4 = a1 + 72;
    do
    {
      v5 = *(_QWORD *)(v4 + 40);
      v6 = KnosisAnswer.extendedTriples()();
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        sub_1AE5216A0();
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      v4 += 112;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void sub_1AE797EC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1AE521708();
    v3 = sub_1AE64A338(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      v5 = v3;
      if (v3 < 1 << *(_BYTE *)(a1 + 32))
      {
        v6 = a1 + 64;
        while ((*(_QWORD *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v4 != *(_DWORD *)(a1 + 36))
            goto LABEL_18;
          v11 = v1;
          v12 = v4;
          sub_1AE4F81B0();
          v7 = sub_1AE79C54C();
          sub_1AE4F6718();
          v8 = *(_QWORD *)(v14 + 16);
          if (v8 >= *(_QWORD *)(v14 + 24) >> 1)
            sub_1AE521708();
          *(_QWORD *)(v14 + 16) = v8 + 1;
          v9 = v14 + 16 * v8;
          *(_QWORD *)(v9 + 32) = v13;
          *(_QWORD *)(v9 + 40) = v7;
          if ((uint64_t)v5 >= -(-1 << *(_BYTE *)(a1 + 32)))
            goto LABEL_19;
          v6 = a1 + 64;
          if ((*(_QWORD *)(a1 + 64 + 8 * (v5 >> 6)) & (1 << v5)) == 0)
            goto LABEL_20;
          if (v12 != *(_DWORD *)(a1 + 36))
            goto LABEL_21;
          v10 = sub_1AE926850();
          --v1;
          if (v11 == 1)
            return;
          v5 = v10;
          if ((v10 & 0x8000000000000000) == 0)
          {
            v4 = *(_DWORD *)(a1 + 36);
            if (v10 < 1 << *(_BYTE *)(a1 + 32))
              continue;
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void GraphNode.id.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1AE7980D0()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  return v0;
}

void KnosisFact.allQualifiers.getter()
{
  sub_1AE4FB75C();
  sub_1AE7AE1A0();
  sub_1AE4F6648();
  sub_1AE4FE870();
}

uint64_t sub_1AE798134(uint64_t a1, uint64_t a2)
{
  const void *v2;
  __int128 *v3;
  uint64_t v4;
  _QWORD __dst[18];
  __int128 v7[2];
  uint64_t v8;

  if (*(_QWORD *)(a1 + 16))
  {
    v2 = (const void *)(a1 + 32);
    v3 = (__int128 *)(a2 + 96);
    swift_bridgeObjectRetain();
    sub_1AE7AA4CC(v3, (uint64_t)v7);
    memcpy(__dst, v2, sizeof(__dst));
    sub_1AE7AA4CC(v7, (uint64_t)&v8);
    __asm { BR              X9 }
  }
  sub_1AE525BB8(a2);
  v4 = MEMORY[0x1E0DEE9D8];
  sub_1AE562F90();
  return v4;
}

void sub_1AE798558(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = a1;
  v24 = *(_QWORD *)(a1 + 16);
  if (v24)
  {
    v3 = 0;
    v20 = (uint64_t *)(a2 + 80);
    v21 = a1 + 32;
    v4 = MEMORY[0x1E0DEE9D8];
    v22 = a2;
    do
    {
      v31 = v4;
      while (1)
      {
        if (v3 >= *(_QWORD *)(v2 + 16))
        {
          __break(1u);
          return;
        }
        v5 = (uint64_t *)(v21 + 112 * v3);
        v6 = *v5;
        v38 = v5[1];
        v7 = v5[2];
        v29 = v5[4];
        v30 = v5[3];
        v28 = *((_WORD *)v5 + 20);
        v37 = v5[6];
        v34 = v5[7];
        v36 = v5[8];
        v26 = v5[10];
        v27 = v5[9];
        v25 = *((_WORD *)v5 + 44);
        v33 = v5[12];
        v35 = v5[13];
        v32 = v3 + 1;
        v8 = *(_QWORD *)(a2 + 16);
        if (!v8)
          break;
        v9 = v20;
        while (1)
        {
          if (*(v9 - 6) == v6)
          {
            v11 = *v9;
            v10 = v9[1];
            v12 = v9[2];
            v13 = v9[6];
            v14 = v9[7];
            v15 = *(v9 - 5) == v38 && *(v9 - 4) == v7;
            if ((v15 || (sub_1AE926D60() & 1) != 0) && v11 == v37)
            {
              v16 = v10 == v34 && v12 == v36;
              if (v16 || (sub_1AE926D60() & 1) != 0)
              {
                v17 = v13 == v33 && v14 == v35;
                if (v17 || (sub_1AE926D60() & 1) != 0)
                  break;
              }
            }
          }
          v9 += 14;
          if (!--v8)
            goto LABEL_28;
        }
        v2 = a1;
        v3 = v32;
        a2 = v22;
        if (v32 == v24)
          goto LABEL_33;
      }
LABEL_28:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v4 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1AE5215E8();
        v4 = v31;
      }
      v18 = *(_QWORD *)(v4 + 16);
      if (v18 >= *(_QWORD *)(v4 + 24) >> 1)
      {
        sub_1AE5215E8();
        v4 = v31;
      }
      *(_QWORD *)(v4 + 16) = v18 + 1;
      v19 = v4 + 112 * v18;
      *(_QWORD *)(v19 + 32) = v6;
      *(_QWORD *)(v19 + 40) = v38;
      *(_QWORD *)(v19 + 48) = v7;
      *(_QWORD *)(v19 + 56) = v30;
      *(_QWORD *)(v19 + 64) = v29;
      *(_WORD *)(v19 + 72) = v28;
      *(_QWORD *)(v19 + 80) = v37;
      *(_QWORD *)(v19 + 88) = v34;
      *(_QWORD *)(v19 + 96) = v36;
      *(_QWORD *)(v19 + 104) = v27;
      *(_QWORD *)(v19 + 112) = v26;
      *(_WORD *)(v19 + 120) = v25;
      *(_QWORD *)(v19 + 128) = v33;
      *(_QWORD *)(v19 + 136) = v35;
      v2 = a1;
      v3 = v32;
      a2 = v22;
    }
    while (v32 != v24);
  }
LABEL_33:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_1AE798840(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1AE798880()
{
  sub_1AE925F74();
  return swift_bridgeObjectRelease();
}

void sub_1AE7988D8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1AE798910()
{
  sub_1AE5FBA48();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE798A08(const void *a1)
{
  _QWORD v3[16];

  v3[0] = 0;
  v3[1] = 0xE000000000000000;
  sub_1AE92691C();
  v3[14] = 0;
  v3[15] = 0xE000000000000000;
  sub_1AE925F74();
  memcpy(v3, a1, 0x69uLL);
  sub_1AE926A48();
  sub_1AE4F7838();
  sub_1AE925F74();
  return sub_1AE4F665C();
}

void GraphNode.asEntity.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;

  v2 = *((unsigned __int8 *)v1 + 34);
  if (v2 == 1)
    v3 = *v1;
  else
    v3 = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v2 != 1;
}

uint64_t sub_1AE798AF0(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((sub_1AE64A9C8() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_1AE798B64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (*(_QWORD *)(a2 + 16) && (v3 = sub_1AE536D68(), (v4 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v3);
    swift_bridgeObjectRetain_n();
    sub_1AE798AF0(&v7, (uint64_t (*)(uint64_t))sub_1AE889418, (uint64_t (*)(_QWORD *))sub_1AE7A96C0);
    swift_bridgeObjectRelease();
    v5 = v7;
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9D8];
  }
  sub_1AE501548(&qword_1EEDA2CE0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v5;
  return result;
}

double sub_1AE798C18@<D0>(uint64_t a1@<X0>, char a2@<W6>, uint64_t a3@<X8>)
{
  return sub_1AE7994F0(a1, (void (*)(__int128 *__return_ptr, id *, uint64_t, uint64_t))sub_1AE7AD824, a2, a3);
}

uint64_t sub_1AE798C6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = MEMORY[0x1E0DEE9D8];
  swift_retain_n();
  sub_1AE59B214();
  swift_release();
  if (v1)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v14 = *(_QWORD *)&v10[0];
    swift_beginAccess();
    v5 = *(_QWORD *)(v3 + 16);
    swift_bridgeObjectRetain();
    sub_1AE59AE98(&v14, v5, (uint64_t)v10);
    swift_release();
    result = swift_bridgeObjectRelease();
    v6 = v10[1];
    v7 = v11;
    v8 = v12;
    v9 = v13;
    *(_OWORD *)a1 = v10[0];
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 48) = v9;
  }
  return result;
}

uint64_t sub_1AE798DAC()
{
  return sub_1AE798DC0();
}

uint64_t sub_1AE798DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v20[5];
  uint64_t v21;

  sub_1AE64A2FC(v20);
  v0 = v20[0];
  v21 = v20[1];
  v1 = v20[3];
  v2 = v20[4];
  v3 = (unint64_t)(v20[2] + 64) >> 6;
  sub_1AE4F6730();
  v4 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    goto LABEL_3;
LABEL_2:
  sub_1AE7AE034();
  while (1)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * v5);
    v10 = *(_QWORD *)(v9 + 16);
    v11 = *(_QWORD *)(v4 + 16);
    if (__OFADD__(v11, v10))
      break;
    sub_1AE4F6804();
    if (!sub_1AE4F6C90() || v11 + v10 > *(_QWORD *)(v4 + 24) >> 1)
    {
      sub_1AE519C64();
      v4 = v12;
    }
    if (*(_QWORD *)(v9 + 16))
    {
      if ((*(_QWORD *)(v4 + 24) >> 1) - *(_QWORD *)(v4 + 16) < v10)
        goto LABEL_38;
      sub_1AE509638();
      v15 = v15 || v13 >= v14;
      if (!v15)
        goto LABEL_41;
      swift_arrayInitWithCopy();
      if (v10)
      {
        v16 = *(_QWORD *)(v4 + 16);
        v17 = __OFADD__(v16, v10);
        v18 = v16 + v10;
        if (v17)
          goto LABEL_39;
        *(_QWORD *)(v4 + 16) = v18;
      }
    }
    else if (v10)
    {
      goto LABEL_37;
    }
    sub_1AE4F67AC();
    if (v2)
      goto LABEL_2;
LABEL_3:
    v6 = v1 + 1;
    if (__OFADD__(v1, 1))
      goto LABEL_40;
    if (v6 >= v3)
      goto LABEL_35;
    if (!*(_QWORD *)(v21 + 8 * v6))
    {
      if (v1 + 2 >= v3)
        goto LABEL_35;
      if (!*(_QWORD *)(v21 + 8 * (v1 + 2)))
      {
        if (v1 + 3 >= v3)
          goto LABEL_35;
        if (!*(_QWORD *)(v21 + 8 * (v1 + 3)))
        {
          if (v1 + 4 >= v3)
            goto LABEL_35;
          if (!*(_QWORD *)(v21 + 8 * (v1 + 4)))
          {
            if (v1 + 5 >= v3)
              goto LABEL_35;
            if (!*(_QWORD *)(v21 + 8 * (v1 + 5)))
            {
              v7 = v1 + 6;
              while (v7 < v3)
              {
                if (*(_QWORD *)(v21 + 8 * v7++))
                  goto LABEL_17;
              }
LABEL_35:
              sub_1AE4FC564();
              return v4;
            }
          }
        }
      }
    }
LABEL_17:
    sub_1AE7ADE18();
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  sub_1AE4FE030();
  result = sub_1AE500FB4();
  __break(1u);
  return result;
}

uint64_t Array<A>.graphObjectContext()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  return sub_1AE7ADE50(v2, a1);
}

uint64_t Array<A>.entityIdsWithAnswers()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  v2 = swift_bridgeObjectRetain();
  v3 = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  v20 = v2;
  do
  {
    v5 = v2 + v3;
    if (*(_BYTE *)(v2 + v3 + 66) == 1)
    {
      v6 = *(_QWORD *)(v5 + 32);
      v7 = *(_QWORD *)(v5 + 56);
      v8 = *(_QWORD *)(v5 + 72);
      v9 = *(_QWORD *)(v5 + 96);
      v25 = *(_OWORD *)(v5 + 80);
      v26 = *(_OWORD *)(v5 + 104);
      v10 = *(_QWORD *)(v5 + 120);
      v11 = *(_BYTE *)(v5 + 128);
      v12 = *(_QWORD *)(v5 + 136);
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v5 + 40);
      v21 = *(_WORD *)(v5 + 64);
      sub_1AE7ADCDC(v6, v23, v22, v7, v21);
      sub_1AE4FB75C();
      sub_1AE7ADCD4();
      sub_1AE7ADCCC();
      sub_1AE4FB764();
      sub_1AE4F66C4();
      v24 = v12;
      v13 = v9;
      if ((sub_1AE4F6C90() & 1) == 0)
      {
        sub_1AE505FE4();
        sub_1AE51B1A0();
        v4 = v17;
      }
      v15 = *(_QWORD *)(v4 + 16);
      v14 = *(_QWORD *)(v4 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1AE4FBAB0(v14);
        sub_1AE51B1A0();
        v4 = v18;
      }
      *(_QWORD *)(v4 + 16) = v15 + 1;
      v16 = v4 + 120 * v15;
      *(_QWORD *)(v16 + 32) = v6;
      *(_QWORD *)(v16 + 40) = v6;
      *(_QWORD *)(v16 + 48) = v23;
      *(_QWORD *)(v16 + 56) = v22;
      *(_QWORD *)(v16 + 64) = v7;
      *(_WORD *)(v16 + 72) = v21;
      *(_BYTE *)(v16 + 74) = 1;
      *(_QWORD *)(v16 + 80) = v8;
      *(_OWORD *)(v16 + 88) = v25;
      *(_QWORD *)(v16 + 104) = v13;
      *(_OWORD *)(v16 + 112) = v26;
      *(_QWORD *)(v16 + 128) = v10;
      *(_BYTE *)(v16 + 136) = v11;
      *(_QWORD *)(v16 + 144) = v24;
      v2 = v20;
    }
    v3 += 112;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v4;
}

void Array<A>.entityIdsWithAnswers(for:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  char v16;
  _BYTE v17[6];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[5];
  uint64_t v22;
  uint64_t v23;

  sub_1AE7ADBDC();
  v4 = 0;
  v5 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  sub_1AE7ADDD4();
  while (1)
  {
    if (v2 == v4)
    {
      sub_1AE4F81B8();
      Array<A>.entityIdsWithAnswers()(v5);
      sub_1AE4FC564();
      sub_1AE7ADCAC();
      return;
    }
    if (v4 >= v2)
      break;
    ++v4;
    sub_1AE7ADC08();
    if (v6)
    {
      sub_1AE7ADF6C();
      if (v6)
      {
        sub_1AE509164();
        sub_1AE4FB764();
        sub_1AE7ADCD4();
        sub_1AE7ADCCC();
        sub_1AE4F81B0();
        sub_1AE4FB930();
        if ((sub_1AE4F77E0() & 1) == 0)
          sub_1AE7ADB80();
        sub_1AE7AE29C();
        if (v16)
          sub_1AE506400();
        sub_1AE7ADB1C(v7, v8, v9, v10, v11, v12, v13, v14, *(int *)v17, *(__int16 *)&v17[4], v18, v19, v20, *(int *)v21, v21[4], v22, v23, v3, v1,
          v0,
          v15);
        goto LABEL_2;
      }
    }
  }
  __break(1u);
}

uint64_t sub_1AE7992C0@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  sub_1AE799320((void (*)(uint64_t, char *))sub_1AE7ADAD8, a1);
  return swift_bridgeObjectRelease();
}

void sub_1AE799320(void (*a1)(uint64_t, char *)@<X0>, uint64_t a2@<X8>)
{
  char v3;
  __int128 v4;
  __int128 v5;
  _OWORD v6[3];
  unsigned __int16 v7;

  sub_1AE6A30F8(a1, (uint64_t)v6);
  v3 = v7;
  if (HIBYTE(v7) <= 0xFEu)
  {
    if ((v7 & 0x100) != 0)
    {
      sub_1AE501548((uint64_t *)&unk_1ED319C60);
      swift_willThrowTypedImpl();
    }
    else
    {
      v4 = v6[1];
      v5 = v6[2];
      *(_OWORD *)a2 = v6[0];
      *(_OWORD *)(a2 + 16) = v4;
      *(_OWORD *)(a2 + 32) = v5;
      *(_BYTE *)(a2 + 48) = v3;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
}

double sub_1AE7993BC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  char v11;

  swift_bridgeObjectRetain();
  sub_1AE798C6C((uint64_t)v8);
  if (!v1)
  {
    result = *(double *)v8;
    v4 = v8[1];
    v5 = v9;
    v6 = v10;
    v7 = v11;
    *(_OWORD *)a1 = v8[0];
    *(_OWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = v7;
  }
  return result;
}

uint64_t sub_1AE79940C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  uint64_t v14[7];

  v14[6] = a8;
  v14[4] = a6;
  v14[5] = a7;
  v14[3] = swift_getAssociatedTypeWitness();
  v12 = sub_1AE52F6A8(v14);
  sub_1AE501548(&qword_1EED9F7D8);
  CustomKnosisResultContext.getOrInitInitializationResources<A>(for:)(a2, a3, (uint64_t)v12);
  sub_1AE7A92E8(a1, a5, (uint64_t)v14);
  return _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v14);
}

double sub_1AE7994F0@<D0>(uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, id *, uint64_t, uint64_t)@<X1>, char a3@<W4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  unint64_t v32;
  id v33[2];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _BYTE v40[48];
  _BYTE v41[48];
  _QWORD v42[3];
  __int128 v43;
  __int128 v44;
  char v45;

  EntityClass.init(intValue:)(SHIBYTE(a1), (uint64_t)&v37);
  v8 = *((_QWORD *)&v37 + 1);
  if (!*((_QWORD *)&v37 + 1))
  {
    if (qword_1ED31BCB0 != -1)
      swift_once();
    v14 = sub_1AE925B6C();
    sub_1AE4FB608(v14, (uint64_t)qword_1ED31BC90);
    v15 = sub_1AE925B54();
    v16 = sub_1AE9265F8();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      *(_QWORD *)&v37 = v18;
      *(_DWORD *)v17 = 136315138;
      v42[0] = a1;
      v19 = EntityIdentifier.stringValue.getter();
      sub_1AE520ED4(v19, v20, (uint64_t)&v37, v21, v22, v23, v24, v25, v31, v32, (uint64_t)v33[0], (uint64_t)v33[1], v34, *((uint64_t *)&v34 + 1), v35, v36, v37, *((uint64_t *)&v37 + 1), v38,
        *((uint64_t *)&v38 + 1));
      v42[0] = v26;
      sub_1AE92676C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1AE4F2000, v15, v16, "untypedId.entityClass for %s is nil in createDynamicGraphObject", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF454C78](v18, -1, -1);
      MEMORY[0x1AF454C78](v17, -1, -1);
    }

    sub_1AE59C9B0();
    v27 = swift_allocError();
    *(_QWORD *)v28 = 2;
    *(_OWORD *)(v28 + 8) = 0u;
    *(_OWORD *)(v28 + 24) = 0u;
    *(_OWORD *)(v28 + 33) = 0u;
    *(_BYTE *)(v28 + 49) = 2;
    goto LABEL_11;
  }
  v9 = v37;
  v10 = v38;
  v11 = v39;
  v43 = v37;
  v44 = v38;
  v45 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AE515BB8();
  sub_1AE52F880(v9, v8);
  sub_1AE77235C((uint64_t)v41, (uint64_t)v42, &qword_1EEDA2CD8);
  v12 = v42[0];
  if (!v42[0])
  {
    if ((a3 & 1) == 0)
    {
      *(_QWORD *)(a4 + 32) = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_BYTE *)(a4 + 40) = -1;
      sub_1AE52F880(v9, v8);
      return result;
    }
    sub_1AE6A4010();
    v27 = swift_allocError();
    *(_QWORD *)v29 = v9;
    *(_QWORD *)(v29 + 8) = v8;
    *(_OWORD *)(v29 + 16) = v10;
    *(_BYTE *)(v29 + 32) = v11;
LABEL_11:
    swift_willThrow();
    *(_QWORD *)a4 = v27;
    *(_BYTE *)(a4 + 40) = 1;
    return result;
  }
  v13 = v42[1];
  swift_release();
  swift_release();
  *(_OWORD *)v33 = v43;
  v34 = v44;
  LOBYTE(v35) = v45;
  a2(&v37, v33, v12, v13);
  sub_1AE52F880(v9, v8);
  sub_1AE77235C((uint64_t)&v37, (uint64_t)v40, &qword_1EED9F9F0);
  sub_1AE77235C((uint64_t)v40, (uint64_t)v33, &qword_1EED9F9F0);
  if (*((_QWORD *)&v34 + 1))
  {
    sub_1AE50AF58((__int128 *)v33, (uint64_t)&v37);
    sub_1AE50AF58(&v37, a4);
    *(_BYTE *)(a4 + 40) = 0;
  }
  else
  {
    sub_1AE52FBE8((uint64_t)v33, &qword_1EED9F9F0);
    *(_QWORD *)(a4 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_BYTE *)(a4 + 40) = -1;
  }
  return result;
}

void KnosisResult.query.getter()
{
  sub_1AE4F66CC();
  sub_1AE4F7714();
  sub_1AE4F6664();
}

void KnosisResult.kgq.getter()
{
  sub_1AE4F66CC();
  sub_1AE4F7714();
  sub_1AE4F6664();
}

void KnosisResult.status.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

void KnosisResult.errorMessage.getter()
{
  sub_1AE4F66CC();
  sub_1AE4F7714();
  sub_1AE4F6664();
}

uint64_t KnosisResult.limit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t KnosisResult.offset.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t KnosisResult.hasMoreAnswers.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t KnosisResult.Status.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AE799A04 + 4 * byte_1AE95A57C[*v0]))(0x73736563637573, 0xE700000000000000);
}

uint64_t sub_1AE799A0C()
{
  return 0x746E65746E496F6ELL;
}

uint64_t KnosisResult.Status.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AE799A54 + 4 * byte_1AE95A580[*v0]))(0x73736563637573, 0xE700000000000000);
}

uint64_t sub_1AE799A5C()
{
  return 0x746E65746E496F6ELL;
}

IntelligencePlatform::KnosisResult::Status_optional __swiftcall KnosisResult.Status.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  char v4;
  IntelligencePlatform::KnosisResult::Status_optional result;

  v2 = v1;
  v3 = sub_1AE926B44();
  sub_1AE4F6648();
  v4 = 4;
  if (v3 < 4)
    v4 = v3;
  *v2 = v4;
  sub_1AE4F6624();
  return result;
}

void sub_1AE799AC0(char *a1)
{
  sub_1AE51283C(*a1);
}

void sub_1AE799ACC()
{
  unsigned __int8 *v0;

  sub_1AE512B0C(*v0);
}

void sub_1AE799AD4(uint64_t a1)
{
  char *v1;

  sub_1AE5E95C8(a1, *v1);
}

void sub_1AE799ADC(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1AE5500E4(a1, *v1);
}

IntelligencePlatform::KnosisResult::Status_optional sub_1AE799AE4(Swift::String *a1)
{
  return KnosisResult.Status.init(rawValue:)(*a1);
}

void sub_1AE799AF0(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = KnosisResult.Status.rawValue.getter();
  a1[1] = v2;
  sub_1AE4F6664();
}

uint64_t sub_1AE799B10()
{
  sub_1AE7AD75C();
  return sub_1AE926148();
}

uint64_t KnosisResult.queryFeatures.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[11];
  v3 = v1[12];
  v4 = v1[13];
  v5 = v1[14];
  v6 = v1[15];
  v7 = v1[16];
  v8 = v1[17];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_1AE7AA1A0(v2, v3);
}

__n128 KnosisResult.queryFeatures.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __int128 v5;
  __int128 v6;

  v5 = a1[1];
  v6 = *a1;
  v4 = (__n128)a1[2];
  v2 = *((_QWORD *)a1 + 6);
  sub_1AE56E64C(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
  *(_OWORD *)(v1 + 88) = v6;
  *(_OWORD *)(v1 + 104) = v5;
  result = v4;
  *(__n128 *)(v1 + 120) = v4;
  *(_QWORD *)(v1 + 136) = v2;
  return result;
}

uint64_t (*KnosisResult.queryFeatures.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t KnosisResult.debug.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[18];
  v3 = v1[19];
  v4 = v1[20];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_1AE53F164(v2, v3);
}

__n128 KnosisResult.debug.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_i64[0];
  sub_1AE53F134(v1[18], v1[19]);
  result = v4;
  *((__n128 *)v1 + 9) = v4;
  v1[20] = v2;
  return result;
}

uint64_t (*KnosisResult.debug.modify())(_QWORD)
{
  return nullsub_1;
}

void KnosisResult.description.getter()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  sub_1AE595C2C();
  v1 = *(_BYTE *)(v0 + 40);
  sub_1AE92691C();
  sub_1AE925F74();
  sub_1AE4FB930();
  sub_1AE7AE180();
  sub_1AE4F66E8();
  sub_1AE925F74();
  sub_1AE5FBF28();
  sub_1AE4FBAE0();
  sub_1AE4F6728();
  sub_1AE925F74();
  sub_1AE5FBF28();
  sub_1AE4FBAE0();
  sub_1AE4F67AC();
  sub_1AE925F74();
  sub_1AE798840(v1);
  sub_1AE7AE484();
  sub_1AE7AE478();
  v2 = sub_1AE4F6730();
  MEMORY[0x1AF453400](v2, &type metadata for KnosisAnswer);
  sub_1AE4FBAE0();
  sub_1AE4F81B8();
  sub_1AE4F76D8();
  sub_1AE925F74();
  sub_1AE4FB75C();
  sub_1AE5FBA48();
  sub_1AE4F6648();
  sub_1AE4F7838();
  sub_1AE50AA58();
}

uint64_t KnosisResult.answerIds.getter()
{
  uint64_t v0;
  char *v1;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16))
  {
    v1 = (char *)&loc_1AE799E7C + 4 * byte_1AE95A584[*(unsigned __int8 *)(swift_bridgeObjectRetain() + 66)];
    __asm { BR              X8 }
  }
  return MEMORY[0x1E0DEE9D8];
}

void KnosisResult.answerFacts.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  sub_1AE505CD4();
  v32 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  if (!v32)
  {
LABEL_47:
    sub_1AE4F778C();
    return;
  }
  v33 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  v1 = v33;
  v2 = 0;
  v3 = MEMORY[0x1E0DEE9D8];
LABEL_3:
  if (v2 < *(_QWORD *)(v1 + 16))
  {
    sub_1AE7AE028();
    v6 = *(_QWORD *)(v5 + 80);
    v35 = *(_QWORD *)(v6 + 16);
    if (!v35)
      goto LABEL_45;
    v31 = v4;
    v36 = v6 + 32;
    sub_1AE4FB75C();
    v7 = 0;
    v34 = v6;
LABEL_6:
    if (v7 >= *(_QWORD *)(v6 + 16))
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v8 = *(_QWORD *)(v36 + 112 * v7 + 72);
    v37 = v7 + 1;
    v9 = v8 + 64;
    v10 = 1 << *(_BYTE *)(v8 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v8 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    sub_1AE4F6708();
    v14 = 0;
    if (v12)
    {
LABEL_11:
      sub_1AE4F79B8();
      v16 = v15 | (v14 << 6);
      goto LABEL_26;
    }
    while (1)
    {
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_52;
      if (v17 >= v13)
        goto LABEL_43;
      v18 = *(_QWORD *)(v9 + 8 * v17);
      ++v14;
      if (!v18)
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v13)
          goto LABEL_43;
        v18 = *(_QWORD *)(v9 + 8 * v14);
        if (!v18)
        {
          v14 = v17 + 2;
          if (v17 + 2 >= v13)
            goto LABEL_43;
          v18 = *(_QWORD *)(v9 + 8 * v14);
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v13)
            {
LABEL_43:
              swift_release();
              v6 = v34;
              v7 = v37;
              if (v37 != v35)
                goto LABEL_6;
              sub_1AE4F6648();
              v1 = v33;
              v4 = v31;
LABEL_45:
              v2 = v4 + 1;
              if (v2 == v32)
              {
                swift_bridgeObjectRelease();
                goto LABEL_47;
              }
              goto LABEL_3;
            }
            v18 = *(_QWORD *)(v9 + 8 * v19);
            if (!v18)
            {
              while (1)
              {
                v14 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_53;
                if (v14 >= v13)
                  goto LABEL_43;
                v18 = *(_QWORD *)(v9 + 8 * v14);
                ++v19;
                if (v18)
                  goto LABEL_25;
              }
            }
            v14 = v19;
          }
        }
      }
LABEL_25:
      v12 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_26:
      v20 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v16);
      v21 = *(_QWORD *)(v20 + 16);
      v22 = *(_QWORD *)(v3 + 16);
      if (__OFADD__(v22, v21))
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      sub_1AE4F6804();
      if (!sub_1AE4F77E0() || v22 + v21 > *(_QWORD *)(v3 + 24) >> 1)
      {
        sub_1AE7ADEEC();
        v3 = v23;
      }
      if (*(_QWORD *)(v20 + 16))
      {
        sub_1AE7ADD28();
        if (v24 != v25)
          goto LABEL_50;
        sub_1AE509638();
        v28 = v28 || v26 >= v27;
        if (!v28)
          goto LABEL_56;
        swift_arrayInitWithCopy();
        if (v21)
        {
          v29 = *(_QWORD *)(v3 + 16);
          v25 = __OFADD__(v29, v21);
          v30 = v29 + v21;
          if (v25)
            goto LABEL_51;
          *(_QWORD *)(v3 + 16) = v30;
        }
      }
      else if (v21)
      {
        goto LABEL_49;
      }
      sub_1AE4F67AC();
      if (v12)
        goto LABEL_11;
    }
  }
LABEL_55:
  __break(1u);
LABEL_56:
  sub_1AE4FE030();
  sub_1AE500FB4();
  __break(1u);
}

uint64_t KnosisResult.graphObjectContext()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  return sub_1AE7ADE50(v2, a1);
}

Swift::String __swiftcall KnosisResult.finalAnswer(sortByText:)(Swift::Bool sortByText)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  Swift::String result;
  uint64_t v28;
  unint64_t v29;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v2 + 16);
  if (sortByText)
  {
    if (v3)
    {
      sub_1AE4F6A24();
      v4 = (uint64_t *)(v2 + 96);
      v5 = MEMORY[0x1E0DEE9D8];
      do
      {
        v6 = *v4;
        if (*v4)
        {
          v7 = *(v4 - 1);
          sub_1AE4F66C4();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1AE501E84();
            v5 = v10;
          }
          v8 = *(_QWORD *)(v5 + 16);
          if (v8 >= *(_QWORD *)(v5 + 24) >> 1)
          {
            sub_1AE501E84();
            v5 = v11;
          }
          *(_QWORD *)(v5 + 16) = v8 + 1;
          v9 = v5 + 16 * v8;
          *(_QWORD *)(v9 + 32) = v7;
          *(_QWORD *)(v9 + 40) = v6;
        }
        v4 += 14;
        --v3;
      }
      while (v3);
      sub_1AE4F6824();
    }
    else
    {
      v5 = MEMORY[0x1E0DEE9D8];
    }
    v28 = v5;
    sub_1AE4FB75C();
    sub_1AE798AF0(&v28, (uint64_t (*)(uint64_t))sub_1AE889428, (uint64_t (*)(_QWORD *))sub_1AE5319FC);
    sub_1AE4F6648();
    v13 = (_QWORD *)v28;
  }
  else if (v3)
  {
    sub_1AE4F6A24();
    v12 = (uint64_t *)(v2 + 96);
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v14 = *v12;
      if (*v12)
      {
        v15 = *(v12 - 1);
        sub_1AE4F66C4();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1AE501E84();
          v13 = v18;
        }
        v16 = v13[2];
        if (v16 >= v13[3] >> 1)
        {
          sub_1AE501E84();
          v13 = v19;
        }
        v13[2] = v16 + 1;
        v17 = &v13[2 * v16];
        v17[4] = v15;
        v17[5] = v14;
      }
      v12 += 14;
      --v3;
    }
    while (v3);
    sub_1AE4F6824();
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v20 = v13[2];
  if (v20 == 1)
  {
    v22 = v13[4];
    v21 = v13[5];
    sub_1AE4F66C4();
    sub_1AE4F6648();
  }
  else if (v20)
  {
    v28 = 0;
    v29 = 0xE000000000000000;
    sub_1AE92691C();
    swift_bridgeObjectRelease();
    v28 = 0x7261206572656854;
    v29 = 0xEA00000000002065;
    sub_1AE926D18();
    sub_1AE925F74();
    sub_1AE4F76D8();
    sub_1AE7AE484();
    sub_1AE925F74();
    sub_1AE4FB75C();
    v23 = 0;
    v24 = v13 + 5;
    do
    {
      sub_1AE4F6804();
      sub_1AE926D18();
      sub_1AE925F74();
      sub_1AE7AE3B0();
      sub_1AE4F67AC();
      sub_1AE7AE2EC();
      sub_1AE4F76D8();
      sub_1AE7AE2EC();
      sub_1AE4F76D8();
      v24 += 2;
      ++v23;
    }
    while (v20 != v23);
    sub_1AE4F6824();
    v22 = v28;
    v21 = v29;
  }
  else
  {
    sub_1AE4F6648();
    v21 = 0xEA00000000002E72;
    v22 = 0x6577736E61206F4ELL;
  }
  v25 = v22;
  v26 = (void *)v21;
  result._object = v26;
  result._countAndFlagsBits = v25;
  return result;
}

uint64_t sub_1AE79A6B4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  char v15;

  v2 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 7432043 && a2 == 0xE300000000000000;
    if (v6 || (sub_1AE926D60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x73726577736E61 && a2 == 0xE700000000000000;
      if (v7 || (sub_1AE926D60() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
        if (v8 || (sub_1AE926D60() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x73654D726F727265 && a2 == 0xEC00000065676173;
          if (v9 || (sub_1AE926D60() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            v10 = a1 == 0x74696D696CLL && a2 == 0xE500000000000000;
            if (v10 || (sub_1AE926D60() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              v11 = a1 == 0x74657366666FLL && a2 == 0xE600000000000000;
              if (v11 || (sub_1AE926D60() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else
              {
                v12 = a1 == 0x4165726F4D736168 && a2 == 0xEE0073726577736ELL;
                if (v12 || (sub_1AE926D60() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7;
                }
                else
                {
                  v13 = a1 == 0x6165467972657571 && a2 == 0xED00007365727574;
                  if (v13 || (sub_1AE926D60() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 8;
                  }
                  else if (a1 == 0x6775626564 && a2 == 0xE500000000000000)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else
                  {
                    v15 = sub_1AE926D60();
                    swift_bridgeObjectRelease();
                    if ((v15 & 1) != 0)
                      return 9;
                    else
                      return 10;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1AE79AAC8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AE79AAF8 + 4 * byte_1AE95A589[a1]))(0x7972657571, 0xE500000000000000);
}

uint64_t sub_1AE79AAF8()
{
  return 7432043;
}

uint64_t sub_1AE79AB08()
{
  return 0x73726577736E61;
}

uint64_t sub_1AE79AB20()
{
  return 0x737574617473;
}

uint64_t sub_1AE79AB34()
{
  return 0x73654D726F727265;
}

uint64_t sub_1AE79AB54()
{
  return 0x74696D696CLL;
}

uint64_t sub_1AE79AB64()
{
  return 0x74657366666FLL;
}

uint64_t sub_1AE79AB78()
{
  return 0x4165726F4D736168;
}

uint64_t sub_1AE79AB9C()
{
  return 0x6165467972657571;
}

uint64_t sub_1AE79ABC0()
{
  return 0x6775626564;
}

uint64_t sub_1AE79ABD0()
{
  unsigned __int8 *v0;

  return sub_1AE79AAC8(*v0);
}

uint64_t sub_1AE79ABD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE79A6B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE79ABFC()
{
  sub_1AE7AA1F0();
  return sub_1AE926F94();
}

uint64_t sub_1AE79AC24()
{
  sub_1AE7AA1F0();
  return sub_1AE926FA0();
}

void KnosisResult.encode(to:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1AE4F67EC();
  v2 = v1;
  v3 = sub_1AE501548(&qword_1EEDA2A78);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  sub_1AE4F666C();
  v5 = v2[3];
  v6 = v2;
  v9 = v8 - v7;
  sub_1AE4F9858(v6, v5);
  sub_1AE7AA1F0();
  sub_1AE926F4C();
  sub_1AE7ADF7C();
  sub_1AE926C40();
  if (!v0)
  {
    sub_1AE7AE25C();
    sub_1AE52FE10();
    sub_1AE7AB2BC(&qword_1EEDA2A90, &qword_1EEDA2A88, (uint64_t (*)(void))sub_1AE7AA22C, MEMORY[0x1E0DEAF10]);
    sub_1AE7AE564();
    sub_1AE7AA268();
    sub_1AE7AE564();
    sub_1AE7AE25C();
    sub_1AE7AE0FC();
    sub_1AE7AE0FC();
    sub_1AE926C94();
    sub_1AE7AA2A4();
    sub_1AE7ADD84();
    sub_1AE7AA2E0();
    sub_1AE7ADD84();
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v3);
  sub_1AE4F667C();
}

void sub_1AE79AF78()
{
  KnosisResult.encode(to:)();
}

uint64_t sub_1AE79AF90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  v3 = a1;
  v4 = a2 + 32;
  v24 = (uint64_t *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = MEMORY[0x1E0DEE9D8];
  v19 = v3;
  do
  {
    v7 = v4 + 112 * v5;
    if (*(_BYTE *)(v7 + 34) == 1)
    {
      v8 = *(_QWORD *)(v3 + 16);
      if (v8)
      {
        v9 = *(_QWORD *)v7;
        v10 = *(_QWORD *)(v7 + 24);
        v11 = *(unsigned __int16 *)(v7 + 32);
        v25 = *(_QWORD *)(v7 + 64);
        v26 = *(_OWORD *)(v7 + 48);
        v27 = *(_OWORD *)(v7 + 72);
        v12 = *(_QWORD *)(v7 + 88);
        v13 = v24;
        v14 = *(_QWORD *)(v7 + 104);
        while (1)
        {
          v15 = *v13++;
          if (v15 == v9)
            break;
          if (!--v8)
            goto LABEL_14;
        }
        v22 = *(_BYTE *)(v7 + 96);
        v23 = *(_QWORD *)(v7 + 40);
        v20 = *(_QWORD *)(v7 + 16);
        v21 = *(_QWORD *)(v7 + 8);
        sub_1AE525B74(v9, v21, v20, v10, v11, 1u);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1AE5216D4();
        v16 = *(_QWORD *)(v6 + 16);
        if (v16 >= *(_QWORD *)(v6 + 24) >> 1)
          sub_1AE5216D4();
        *(_QWORD *)(v6 + 16) = v16 + 1;
        v17 = v6 + 112 * v16;
        *(_QWORD *)(v17 + 32) = v9;
        *(_QWORD *)(v17 + 40) = v21;
        v3 = v19;
        *(_QWORD *)(v17 + 48) = v20;
        *(_QWORD *)(v17 + 56) = v10;
        *(_WORD *)(v17 + 64) = v11;
        *(_BYTE *)(v17 + 66) = 1;
        *(_QWORD *)(v17 + 72) = v23;
        *(_OWORD *)(v17 + 80) = v26;
        *(_QWORD *)(v17 + 96) = v25;
        *(_OWORD *)(v17 + 104) = v27;
        *(_QWORD *)(v17 + 120) = v12;
        *(_BYTE *)(v17 + 128) = v22;
        *(_QWORD *)(v17 + 136) = v14;
      }
    }
LABEL_14:
    ++v5;
  }
  while (v5 != v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1AE79B1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_1AE9262C8();
  v6 = v5;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    v8 = a2 + 32;
    v9 = (_QWORD *)(v5 + 32);
    v34 = a2;
    swift_bridgeObjectRetain();
    v10 = 0;
    v11 = MEMORY[0x1E0DEE9D8];
    v35 = v9;
    v36 = v6;
    do
    {
      v12 = v8 + 112 * v10;
      if (*(_BYTE *)(v12 + 34) == 1)
      {
        v13 = *(_QWORD *)(v6 + 16);
        if (v13)
        {
          v15 = *(_QWORD *)v12;
          v14 = *(_QWORD *)(v12 + 8);
          v16 = *(_QWORD *)(v12 + 16);
          v17 = *(_QWORD *)(v12 + 24);
          v18 = *(unsigned __int16 *)(v12 + 32);
          v19 = *(_QWORD *)(v12 + 40);
          v20 = *(_OWORD *)(v12 + 48);
          v41 = *(_QWORD *)(v12 + 64);
          v21 = *(_OWORD *)(v12 + 72);
          v42 = v20;
          v43 = v21;
          v22 = *(_QWORD *)(v12 + 88);
          v23 = v9;
          v24 = *(_QWORD *)(v12 + 104);
          while (1)
          {
            v25 = *v23++;
            if (v25 == v15)
              break;
            if (!--v13)
              goto LABEL_14;
          }
          v39 = *(unsigned __int8 *)(v12 + 96);
          v40 = v19;
          v37 = v16;
          v38 = v14;
          sub_1AE525B74(v15, v14, v16, v17, v18, 1u);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v44 = v11;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1AE5216D4();
            v11 = v44;
          }
          v27 = v40;
          v28 = v39;
          v29 = *(_QWORD *)(v11 + 16);
          v31 = v37;
          v30 = v38;
          if (v29 >= *(_QWORD *)(v11 + 24) >> 1)
          {
            sub_1AE5216D4();
            v31 = v37;
            v30 = v38;
            v28 = v39;
            v27 = v40;
            v11 = v44;
          }
          *(_QWORD *)(v11 + 16) = v29 + 1;
          v32 = v11 + 112 * v29;
          *(_QWORD *)(v32 + 32) = v15;
          *(_QWORD *)(v32 + 40) = v30;
          *(_QWORD *)(v32 + 48) = v31;
          *(_QWORD *)(v32 + 56) = v17;
          *(_WORD *)(v32 + 64) = v18;
          *(_BYTE *)(v32 + 66) = 1;
          *(_QWORD *)(v32 + 72) = v27;
          *(_OWORD *)(v32 + 80) = v42;
          *(_QWORD *)(v32 + 96) = v41;
          *(_OWORD *)(v32 + 104) = v43;
          *(_QWORD *)(v32 + 120) = v22;
          *(_BYTE *)(v32 + 128) = v28;
          *(_QWORD *)(v32 + 136) = v24;
          v9 = v35;
          v6 = v36;
        }
      }
LABEL_14:
      ++v10;
    }
    while (v10 != v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t Array<A>.triples(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;

  sub_1AE7ADBDC();
  v4 = 0;
  v5 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  sub_1AE7ADDD4();
  while (v3 != v4)
  {
    if (v4 >= v3)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      sub_1AE4FE030();
      result = sub_1AE500FB4();
      __break(1u);
      return result;
    }
    ++v4;
    sub_1AE7ADC08();
    if (v6)
    {
      sub_1AE7ADF6C();
      if (v6)
      {
        v8 = *(_QWORD *)(v0 + v7 - 32);
        v9 = *(_QWORD *)(v0 + v7 - 16);
        v34 = *(_QWORD *)(v0 + v7 - 24);
        v35 = *(_QWORD *)(v0 + v7 - 40);
        v36 = *(_OWORD *)(v0 + v7 - 8);
        v10 = *(_QWORD *)(v0 + v7 + 8);
        v33 = *(_BYTE *)(v0 + v7 + 16);
        v11 = *(_QWORD *)(v0 + v7 + 24);
        v31 = *(_QWORD *)(v0 + v7 - 64);
        v32 = *(_QWORD *)(v0 + v7 - 72);
        v30 = *(_QWORD *)(v0 + v7 - 56);
        sub_1AE7ADCDC(v1, v32, v31, v30, *(unsigned __int16 *)(v0 + v7 - 48));
        sub_1AE4FB764();
        sub_1AE7ADCD4();
        sub_1AE7ADCCC();
        sub_1AE4F81B0();
        sub_1AE4FB930();
        if ((sub_1AE4F77E0() & 1) == 0)
          sub_1AE7ADB80();
        sub_1AE7AE29C();
        if (v26)
          sub_1AE506400();
        *(_QWORD *)(v5 + 16) = v8;
        v12 = (_QWORD *)(v5 + 112 * v2);
        v12[4] = v1;
        v12[5] = v32;
        v12[6] = v31;
        v12[7] = v30;
        sub_1AE7AE28C((uint64_t)v12);
        *(_QWORD *)(v13 + 72) = v35;
        *(_QWORD *)(v13 + 80) = v8;
        *(_QWORD *)(v13 + 88) = v34;
        *(_QWORD *)(v13 + 96) = v9;
        *(_OWORD *)(v13 + 104) = v36;
        *(_QWORD *)(v13 + 120) = v10;
        *(_BYTE *)(v13 + 128) = v33;
        *(_QWORD *)(v13 + 136) = v11;
        goto LABEL_2;
      }
    }
  }
  sub_1AE4F81B8();
  v14 = sub_1AE7AE4F8();
  sub_1AE4FC564();
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    sub_1AE4F6730();
    v16 = MEMORY[0x1E0DEE9D8];
    v17 = 32;
    while (1)
    {
      v18 = *(_QWORD *)(v14 + v17);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v16 + 16);
      if (__OFADD__(v20, v19))
        goto LABEL_36;
      sub_1AE4F6804();
      if (!sub_1AE4F77E0() || v20 + v19 > *(_QWORD *)(v16 + 24) >> 1)
      {
        sub_1AE519D38();
        v16 = v21;
      }
      if (*(_QWORD *)(v18 + 16))
      {
        sub_1AE7ADD28();
        if (v22 != v23)
          goto LABEL_38;
        sub_1AE50AD88();
        v26 = v26 || v24 >= v25;
        if (!v26)
          goto LABEL_40;
        swift_arrayInitWithCopy();
        if (v19)
        {
          v27 = *(_QWORD *)(v16 + 16);
          v23 = __OFADD__(v27, v19);
          v28 = v27 + v19;
          if (v23)
            goto LABEL_39;
          *(_QWORD *)(v16 + 16) = v28;
        }
      }
      else if (v19)
      {
        goto LABEL_37;
      }
      sub_1AE4F67AC();
      v17 += 16;
      if (!--v15)
      {
        sub_1AE4F81B8();
        goto LABEL_34;
      }
    }
  }
  v16 = MEMORY[0x1E0DEE9D8];
LABEL_34:
  sub_1AE4F81B8();
  return v16;
}

void Array<A>.triplesWithParentAnswers(for:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  char v15;
  _BYTE v16[6];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[5];
  uint64_t v21;
  uint64_t v22;

  sub_1AE7ADBDC();
  v4 = 0;
LABEL_2:
  sub_1AE7ADDD4();
  while (1)
  {
    if (v2 == v4)
    {
      sub_1AE4F81B8();
      sub_1AE7AE4F8();
      sub_1AE4FC564();
      sub_1AE7ADCAC();
      return;
    }
    if (v4 >= v2)
      break;
    ++v4;
    sub_1AE7ADC08();
    if (v5)
    {
      sub_1AE7ADF6C();
      if (v5)
      {
        sub_1AE509164();
        sub_1AE4FB764();
        sub_1AE7ADCD4();
        sub_1AE7ADCCC();
        sub_1AE4F81B0();
        sub_1AE4FB930();
        if ((sub_1AE4F77E0() & 1) == 0)
          sub_1AE7ADB80();
        sub_1AE7AE29C();
        if (v15)
          sub_1AE506400();
        sub_1AE7ADB1C(v6, v7, v8, v9, v10, v11, v12, v13, *(int *)v16, *(__int16 *)&v16[4], v17, v18, v19, *(int *)v20, v20[4], v21, v22, v3, v1,
          v0,
          v14);
        goto LABEL_2;
      }
    }
  }
  __break(1u);
}

uint64_t Array<A>.triplesWithParentAnswers()(uint64_t a1)
{
  return sub_1AE797D9C(a1);
}

void Array<A>.triples<A>(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  Array<A>.triplesWithParentAnswers<A>(for:)(a1, a2);
  if (!v2)
  {
    sub_1AE7AE190(v3);
    sub_1AE4F9038();
  }
  sub_1AE4FC4F8();
}

void Array<A>.triplesWithParentAnswers<A>(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_1AE79B1B8(a1, a2);
  sub_1AE7AE170(v2);
  sub_1AE4F9038();
  sub_1AE4FC4F8();
}

_QWORD *sub_1AE79B8C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  __int128 v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  int64_t v68;
  unint64_t v69;
  int64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  int64_t v74;
  unint64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v116;
  unint64_t v117;
  int64_t v118;
  int64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  _QWORD __dst[18];
  uint64_t v151;
  _QWORD v152[6];

  __dst[0] = MEMORY[0x1E0DEE9E0];
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = swift_bridgeObjectRetain();
    v3 = 0;
    v4 = MEMORY[0x1E0DEE9E0];
    v121 = v2;
    do
    {
      v132 = v3;
      v147 = v4;
      v6 = *(_QWORD *)(v2 + v3 + 32);
      v5 = *(_QWORD *)(v2 + v3 + 40);
      v7 = *(_QWORD *)(v2 + v3 + 48);
      v8 = *(_QWORD *)(v2 + v3 + 56);
      v9 = *(unsigned __int16 *)(v2 + v3 + 64);
      v10 = *(unsigned __int8 *)(v2 + v3 + 66);
      v11 = *(_QWORD *)(v2 + v3 + 96);
      v140 = *(_QWORD *)(v2 + v3 + 72);
      v142 = *(_QWORD *)(v2 + v3 + 88);
      v148 = *(_OWORD *)(v2 + v3 + 104);
      v12 = *(_QWORD *)(v2 + v3 + 120);
      v143 = *(_BYTE *)(v2 + v3 + 128);
      v134 = *(_QWORD *)(v2 + v3 + 136);
      v136 = *(_QWORD *)(v2 + v3 + 80);
      if (v10 == 1)
        v13 = *(_QWORD *)(v2 + v3 + 32);
      else
        v13 = 0;
      v138 = v13;
      v144 = sub_1AE536E20(v13, v10 != 1);
      v15 = *(_QWORD *)(v4 + 16);
      v16 = (v14 & 1) == 0;
      v17 = __OFADD__(v15, v16);
      v18 = v15 + v16;
      if (v17)
        goto LABEL_127;
      v19 = v14;
      v20 = *(_QWORD *)(v147 + 24);
      v128 = v7;
      v124 = v8;
      v130 = v9;
      v21 = v9;
      v22 = v18;
      sub_1AE525B74(v6, v5, v7, v8, v21, v10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = v144;
      if (v20 < v22)
      {
        sub_1AE635690();
        v147 = __dst[0];
        v24 = sub_1AE536E20(v138, v10 != 1);
        if ((v19 & 1) != (v25 & 1))
          goto LABEL_134;
        v23 = v24;
      }
      if ((v19 & 1) != 0)
      {
        v26 = *(_QWORD *)(v147 + 56);
        v27 = *(_QWORD *)(v26 + 8 * v23);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v26 + 8 * v23) = v27;
        v145 = v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1AE519ED0();
          v27 = v41;
          *(_QWORD *)(v26 + 8 * v23) = v41;
        }
        v2 = v121;
        v29 = *(_QWORD *)(v27 + 16);
        v4 = v147;
        v30 = v148;
        v31 = v130;
        v33 = v5;
        v32 = v128;
        v34 = v6;
        if (v29 >= *(_QWORD *)(v27 + 24) >> 1)
        {
          sub_1AE519ED0();
          v33 = v5;
          v32 = v128;
          v31 = v130;
          v30 = v148;
          v4 = v147;
          v27 = v42;
          v2 = v121;
          v34 = v6;
          *(_QWORD *)(v26 + 8 * v145) = v27;
        }
        v35 = v132;
        *(_QWORD *)(v27 + 16) = v29 + 1;
        v36 = v27 + 112 * v29;
        *(_QWORD *)(v36 + 32) = v34;
        *(_QWORD *)(v36 + 40) = v33;
        *(_QWORD *)(v36 + 48) = v32;
        *(_QWORD *)(v36 + 56) = v124;
        *(_WORD *)(v36 + 64) = v31;
        *(_BYTE *)(v36 + 66) = v10;
        *(_QWORD *)(v36 + 72) = v140;
        *(_QWORD *)(v36 + 80) = v136;
        *(_QWORD *)(v36 + 88) = v142;
        *(_QWORD *)(v36 + 96) = v11;
        *(_OWORD *)(v36 + 104) = v30;
        *(_QWORD *)(v36 + 120) = v12;
        *(_BYTE *)(v36 + 128) = v143;
        *(_QWORD *)(v36 + 136) = v134;
      }
      else
      {
        sub_1AE501548(&qword_1EED9AAB8);
        v37 = swift_allocObject();
        *(_OWORD *)(v37 + 16) = xmmword_1AE934250;
        *(_QWORD *)(v37 + 32) = v6;
        *(_QWORD *)(v37 + 40) = v5;
        *(_QWORD *)(v37 + 48) = v7;
        *(_QWORD *)(v37 + 56) = v124;
        *(_WORD *)(v37 + 64) = v130;
        *(_BYTE *)(v37 + 66) = v10;
        *(_QWORD *)(v37 + 72) = v140;
        *(_QWORD *)(v37 + 80) = v136;
        *(_QWORD *)(v37 + 88) = v142;
        *(_QWORD *)(v37 + 96) = v11;
        *(_OWORD *)(v37 + 104) = v148;
        *(_QWORD *)(v37 + 120) = v12;
        *(_BYTE *)(v37 + 128) = v143;
        *(_QWORD *)(v37 + 136) = v134;
        v4 = v147;
        *(_QWORD *)(v147 + 8 * (v23 >> 6) + 64) |= 1 << v23;
        v38 = *(_QWORD *)(v147 + 48) + 16 * v23;
        *(_QWORD *)v38 = v138;
        *(_BYTE *)(v38 + 8) = v10 != 1;
        *(_QWORD *)(*(_QWORD *)(v147 + 56) + 8 * v23) = v37;
        v39 = *(_QWORD *)(v147 + 16);
        v17 = __OFADD__(v39, 1);
        v40 = v39 + 1;
        if (v17)
          goto LABEL_129;
        *(_QWORD *)(v147 + 16) = v40;
        v2 = v121;
        v35 = v132;
      }
      v3 = v35 + 112;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v147 = MEMORY[0x1E0DEE9E0];
  }
  sub_1AE501548(&qword_1EEDA2AB8);
  sub_1AE5962D8();
  v43 = (_QWORD *)sub_1AE925C98();
  v44 = 0;
  v45 = v147;
  v46 = v147 + 64;
  v47 = 1 << *(_BYTE *)(v147 + 32);
  v48 = -1;
  if (v47 < 64)
    v48 = ~(-1 << v47);
  v49 = v48 & *(_QWORD *)(v147 + 64);
  v50 = (unint64_t)(v47 + 63) >> 6;
  while (v49)
  {
    v51 = __clz(__rbit64(v49));
    v49 &= v49 - 1;
    v52 = v51 | (v44 << 6);
LABEL_40:
    v56 = *(_QWORD *)(v45 + 48) + 16 * v52;
    if ((*(_BYTE *)(v56 + 8) & 1) == 0)
    {
      v117 = v49;
      v118 = v44;
      v119 = v50;
      v120 = v46;
      v122 = *(_QWORD *)v56;
      v57 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v52);
      v58 = *(_QWORD *)(v57 + 16);
      if (v58)
      {
        v116 = v43;
        v151 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        sub_1AE5216A0();
        v59 = 0;
        v60 = v151;
        v123 = v58;
        v125 = v57 + 32;
        while (1)
        {
          v61 = v59;
          v62 = v125 + 112 * v59;
          v63 = *(_QWORD *)v62;
          v139 = *(_QWORD *)(v62 + 8);
          v141 = *(_QWORD *)v62;
          v126 = v61 + 1;
          v127 = v60;
          v65 = *(_QWORD *)(v62 + 16);
          v64 = *(_QWORD *)(v62 + 24);
          v137 = v65;
          v135 = *(unsigned __int16 *)(v62 + 32);
          v66 = *(_BYTE *)(v62 + 34);
          v133 = v66;
          v146 = *(_QWORD *)(v62 + 80);
          sub_1AE64A2FC(v152);
          v67 = v152[0];
          v149 = v152[1];
          v68 = v152[3];
          v131 = v152[2];
          v69 = v152[4];
          sub_1AE525B74(v63, v139, v65, v64, v135, v66);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v129 = v64;
          sub_1AE525B74(v141, v139, v65, v64, v135, v66);
          v70 = (unint64_t)(v131 + 64) >> 6;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v71 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          if (v69)
          {
LABEL_44:
            v72 = __clz(__rbit64(v69));
            v69 &= v69 - 1;
            v73 = v72 | (v68 << 6);
            goto LABEL_63;
          }
          while (1)
          {
            v74 = v68 + 1;
            if (__OFADD__(v68, 1))
              goto LABEL_122;
            if (v74 >= v70)
              goto LABEL_80;
            v75 = *(_QWORD *)(v149 + 8 * v74);
            v76 = v68 + 1;
            if (!v75)
            {
              v76 = v68 + 2;
              if (v68 + 2 >= v70)
                goto LABEL_80;
              v75 = *(_QWORD *)(v149 + 8 * v76);
              if (!v75)
              {
                v76 = v68 + 3;
                if (v68 + 3 >= v70)
                  goto LABEL_80;
                v75 = *(_QWORD *)(v149 + 8 * v76);
                if (!v75)
                {
                  v76 = v68 + 4;
                  if (v68 + 4 >= v70)
                    goto LABEL_80;
                  v75 = *(_QWORD *)(v149 + 8 * v76);
                  if (!v75)
                  {
                    v76 = v68 + 5;
                    if (v68 + 5 >= v70)
                      goto LABEL_80;
                    v75 = *(_QWORD *)(v149 + 8 * v76);
                    if (!v75)
                      break;
                  }
                }
              }
            }
LABEL_62:
            v69 = (v75 - 1) & v75;
            v73 = __clz(__rbit64(v75)) + (v76 << 6);
            v68 = v76;
LABEL_63:
            v78 = *(_QWORD *)(*(_QWORD *)(v67 + 56) + 8 * v73);
            v79 = *(_QWORD *)(v78 + 16);
            v80 = v71[2];
            if (__OFADD__(v80, v79))
            {
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              sub_1AE926B20();
              __break(1u);
LABEL_134:
              sub_1AE501548(&qword_1EEDA2CF0);
              while (1)
              {
LABEL_135:
                sub_1AE926DE4();
                __break(1u);
              }
            }
            swift_bridgeObjectRetain();
            if (!swift_isUniquelyReferenced_nonNull_native() || v80 + v79 > v71[3] >> 1)
            {
              sub_1AE519C64();
              v71 = v81;
            }
            if (*(_QWORD *)(v78 + 16))
            {
              v82 = v71[2];
              if ((v71[3] >> 1) - v82 < v79)
                goto LABEL_120;
              v83 = (unint64_t)&v71[18 * v82 + 4];
              if (v78 + 32 < v83 + 144 * v79 && v83 < v78 + 32 + 144 * v79)
                goto LABEL_133;
              swift_arrayInitWithCopy();
              if (v79)
              {
                v85 = v71[2];
                v17 = __OFADD__(v85, v79);
                v86 = v85 + v79;
                if (v17)
                  goto LABEL_121;
                v71[2] = v86;
              }
            }
            else if (v79)
            {
              goto LABEL_119;
            }
            swift_bridgeObjectRelease();
            if (v69)
              goto LABEL_44;
          }
          v76 = v68 + 6;
          if (v68 + 6 < v70)
            break;
LABEL_80:
          swift_bridgeObjectRelease();
          swift_release();
          sub_1AE525C94(v141, v139, v65, v129, v135, v133);
          swift_bridgeObjectRelease();
          v87 = v146;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v88 = v71[2];
          if (v88)
          {
            swift_bridgeObjectRetain();
            memcpy(__dst, v71 + 4, sizeof(__dst));
            KnosisFact.extendedTriples()();
            v91 = (_QWORD *)(v89 + 16);
            v90 = *(_QWORD *)(v89 + 16);
            v92 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
            v93 = v92 + v90;
            if (__OFADD__(v92, v90))
              goto LABEL_123;
            v94 = v89;
            v95 = 22;
            v96 = MEMORY[0x1E0DEE9D8];
            while (1)
            {
              if (!swift_isUniquelyReferenced_nonNull_native() || v93 > *(_QWORD *)(v96 + 24) >> 1)
              {
                sub_1AE519D38();
                v96 = v97;
              }
              if (*v91)
              {
                v98 = *(_QWORD *)(v96 + 16);
                if ((*(_QWORD *)(v96 + 24) >> 1) - v98 < v90)
                  goto LABEL_125;
                v99 = v96 + 112 * v98 + 32;
                if (v94 + 32 < v99 + 112 * v90 && v99 < v94 + 32 + 112 * v90)
                  goto LABEL_133;
                swift_arrayInitWithCopy();
                if (v90)
                {
                  v101 = *(_QWORD *)(v96 + 16);
                  v17 = __OFADD__(v101, v90);
                  v102 = v101 + v90;
                  if (v17)
                    goto LABEL_126;
                  *(_QWORD *)(v96 + 16) = v102;
                }
              }
              else if (v90)
              {
                goto LABEL_124;
              }
              swift_bridgeObjectRelease();
              if (!--v88)
                break;
              memcpy(__dst, &v71[v95], sizeof(__dst));
              KnosisFact.extendedTriples()();
              v94 = v103;
              v91 = (_QWORD *)(v103 + 16);
              v90 = *(_QWORD *)(v103 + 16);
              v104 = *(_QWORD *)(v96 + 16);
              v95 += 18;
              v93 = v104 + v90;
              if (__OFADD__(v104, v90))
                goto LABEL_123;
            }
            swift_bridgeObjectRelease_n();
            v87 = v146;
          }
          else
          {
            swift_bridgeObjectRelease();
            v96 = MEMORY[0x1E0DEE9D8];
          }
          swift_bridgeObjectRetain();
          sub_1AE525C94(v141, v139, v137, v129, v135, v133);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v60 = v127;
          v151 = v127;
          v105 = *(_QWORD *)(v127 + 16);
          if (v105 >= *(_QWORD *)(v127 + 24) >> 1)
          {
            sub_1AE5216A0();
            v87 = v146;
            v60 = v151;
          }
          *(_QWORD *)(v60 + 16) = v105 + 1;
          v106 = v60 + 16 * v105;
          *(_QWORD *)(v106 + 32) = v96;
          *(_QWORD *)(v106 + 40) = v87;
          v59 = v126;
          if (v126 == v123)
          {
            swift_bridgeObjectRelease();
            v43 = v116;
            goto LABEL_108;
          }
        }
        v75 = *(_QWORD *)(v149 + 8 * v76);
        if (!v75)
        {
          v77 = v68 + 7;
          do
          {
            if (v77 >= v70)
              goto LABEL_80;
            v75 = *(_QWORD *)(v149 + 8 * v77++);
          }
          while (!v75);
          v76 = v77 - 1;
        }
        goto LABEL_62;
      }
      v60 = MEMORY[0x1E0DEE9D8];
LABEL_108:
      swift_isUniquelyReferenced_nonNull_native();
      __dst[0] = v43;
      v107 = sub_1AE536D68();
      if (__OFADD__(v43[2], (v108 & 1) == 0))
        goto LABEL_131;
      v109 = v107;
      v110 = v108;
      sub_1AE501548(&qword_1EEDA2CE8);
      if ((sub_1AE926A54() & 1) != 0)
      {
        v111 = sub_1AE536D68();
        if ((v110 & 1) != (v112 & 1))
          goto LABEL_135;
        v109 = v111;
      }
      v43 = (_QWORD *)__dst[0];
      if ((v110 & 1) != 0)
      {
        *(_QWORD *)(*(_QWORD *)(__dst[0] + 56) + 8 * v109) = v60;
        swift_bridgeObjectRelease();
      }
      else
      {
        *(_QWORD *)(__dst[0] + 8 * (v109 >> 6) + 64) |= 1 << v109;
        *(_QWORD *)(v43[6] + 8 * v109) = v122;
        *(_QWORD *)(v43[7] + 8 * v109) = v60;
        v113 = v43[2];
        v17 = __OFADD__(v113, 1);
        v114 = v113 + 1;
        if (v17)
          goto LABEL_132;
        v43[2] = v114;
      }
      v46 = v120;
      swift_bridgeObjectRelease();
      v45 = v147;
      v50 = v119;
      v49 = v117;
      v44 = v118;
    }
  }
  v53 = v44 + 1;
  if (__OFADD__(v44, 1))
    goto LABEL_128;
  if (v53 >= v50)
    goto LABEL_117;
  v54 = *(_QWORD *)(v46 + 8 * v53);
  ++v44;
  if (v54)
    goto LABEL_39;
  v44 = v53 + 1;
  if (v53 + 1 >= v50)
    goto LABEL_117;
  v54 = *(_QWORD *)(v46 + 8 * v44);
  if (v54)
    goto LABEL_39;
  v44 = v53 + 2;
  if (v53 + 2 >= v50)
    goto LABEL_117;
  v54 = *(_QWORD *)(v46 + 8 * v44);
  if (v54)
  {
LABEL_39:
    v49 = (v54 - 1) & v54;
    v52 = __clz(__rbit64(v54)) + (v44 << 6);
    goto LABEL_40;
  }
  v55 = v53 + 3;
  if (v55 >= v50)
    goto LABEL_117;
  v54 = *(_QWORD *)(v46 + 8 * v55);
  if (v54)
  {
    v44 = v55;
    goto LABEL_39;
  }
  while (1)
  {
    v44 = v55 + 1;
    if (__OFADD__(v55, 1))
      goto LABEL_130;
    if (v44 >= v50)
      break;
    v54 = *(_QWORD *)(v46 + 8 * v44);
    ++v55;
    if (v54)
      goto LABEL_39;
  }
LABEL_117:
  swift_release();
  return v43;
}

void Array<A>.triples()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = sub_1AE79B8C4(a1);
  if (!v1)
  {
    sub_1AE7AE190((uint64_t)v2);
    sub_1AE4F9038();
  }
  sub_1AE4FC4F8();
}

_QWORD *Array<A>.triplesGroupedByEntityIdentifierWithParentAnswers()(uint64_t a1)
{
  return sub_1AE79B8C4(a1);
}

uint64_t sub_1AE79C54C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  sub_1AE595C2C();
  *v2 = *v1;
  v3 = *(_QWORD *)(v0 + 16);
  if (v3)
  {
    v4 = v0;
    swift_bridgeObjectRetain();
    v5 = MEMORY[0x1E0DEE9D8];
    for (i = 32; ; i += 16)
    {
      v7 = *(_QWORD *)(v4 + i);
      v8 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v5 + 16);
      if (__OFADD__(v9, v8))
        break;
      sub_1AE4F6730();
      if (!sub_1AE4F77E0() || v9 + v8 > *(_QWORD *)(v5 + 24) >> 1)
      {
        sub_1AE7ADEE0();
        v5 = v10;
      }
      if (*(_QWORD *)(v7 + 16))
      {
        sub_1AE7ADFE8();
        if (v11 != v12)
          goto LABEL_24;
        sub_1AE50AD88();
        v15 = v15 || v13 >= v14;
        if (!v15)
          goto LABEL_26;
        swift_arrayInitWithCopy();
        if (v8)
        {
          v16 = *(_QWORD *)(v5 + 16);
          v12 = __OFADD__(v16, v8);
          v17 = v16 + v8;
          if (v12)
            goto LABEL_25;
          *(_QWORD *)(v5 + 16) = v17;
        }
      }
      else if (v8)
      {
        goto LABEL_23;
      }
      sub_1AE4F81B8();
      if (!--v3)
      {
        sub_1AE4F6648();
        return v5;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    sub_1AE4FE030();
    result = sub_1AE500FB4();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t KnosisAnswer.extendedTriples()()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  _BYTE v32[160];

  v31 = *(_QWORD *)(v0 + 24);
  v1 = *(_BYTE *)(v0 + 34);
  v2 = *(unsigned __int16 *)(v0 + 32);
  sub_1AE7AE3F8();
  sub_1AE525B74(v3, v4, v5, v6, v2, v1);
  sub_1AE4F66C4();
  sub_1AE4F6A24();
  sub_1AE4F6730();
  sub_1AE4FB930();
  swift_bridgeObjectRetain();
  v7 = sub_1AE7AE1A0();
  sub_1AE4F76D8();
  sub_1AE7AE3F8();
  sub_1AE525C94(v8, v9, v10, v31, v2, v1);
  sub_1AE4F81B8();
  swift_bridgeObjectRelease();
  sub_1AE4F76D8();
  swift_bridgeObjectRelease();
  sub_1AE4F66E8();
  v11 = *(_QWORD *)(v7 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  if (!v11)
  {
LABEL_23:
    sub_1AE4F6648();
    return v12;
  }
  sub_1AE4FB75C();
  sub_1AE4FFCC0(v32, (const void *)(v7 + 32));
  KnosisFact.extendedTriples()();
  v15 = (_QWORD *)(v13 + 16);
  v14 = *(_QWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v12 + 16);
  v17 = v16 + v14;
  if (__OFADD__(v16, v14))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    sub_1AE4F6648();
    goto LABEL_23;
  }
  v18 = 176;
  while (1)
  {
    if (!sub_1AE5D8B40() || v17 > *(_QWORD *)(v12 + 24) >> 1)
    {
      sub_1AE519D38();
      v12 = v19;
    }
    if (!*v15)
      break;
    sub_1AE7ADFE8();
    if (v21 != v22)
      goto LABEL_25;
    sub_1AE7AE32C(v12 + 112 * v20);
    sub_1AE50AD88();
    v25 = v25 || v23 >= v24;
    if (!v25)
      goto LABEL_27;
    swift_arrayInitWithCopy();
    if (v14)
    {
      v26 = *(_QWORD *)(v12 + 16);
      v22 = __OFADD__(v26, v14);
      v27 = v26 + v14;
      if (v22)
        goto LABEL_26;
      *(_QWORD *)(v12 + 16) = v27;
    }
LABEL_18:
    sub_1AE4F9038();
    if (!--v11)
      goto LABEL_22;
    sub_1AE4FFCC0(v32, (const void *)(v7 + v18));
    KnosisFact.extendedTriples()();
    v15 = (_QWORD *)(v28 + 16);
    v14 = *(_QWORD *)(v28 + 16);
    v29 = *(_QWORD *)(v12 + 16);
    v18 += 144;
    v17 = v29 + v14;
    if (__OFADD__(v29, v14))
      goto LABEL_21;
  }
  if (!v14)
    goto LABEL_18;
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  sub_1AE4FE030();
  result = sub_1AE500FB4();
  __break(1u);
  return result;
}

uint64_t CustomKnosisResultContext.init<>(knosisAnswers:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  ObjectSynthesisDictionaryMapping.init()(&v7);
  v4 = v7;
  type metadata accessor for InitializationResourcesManager();
  v5 = sub_1AE4F66BC();
  result = sub_1AE925C98();
  *(_QWORD *)(v5 + 16) = result;
  *a2 = v4;
  a2[1] = a1;
  a2[2] = v5;
  return result;
}

uint64_t sub_1AE79C964@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = Array<A>.triples(for:)();
  if (!v1)
    *a1 = result;
  return result;
}

void sub_1AE79C990(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;

  Array<A>.triples<A>(for:)(a1, *v2);
  if (!v3)
    *a2 = v5;
}

void sub_1AE79C9C4(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  Array<A>.triples()(*v1);
  if (!v2)
    *a1 = v4;
}

uint64_t CustomKnosisResultContext.tripleProvider.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CustomKnosisResultContext.objectMapping.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t CustomKnosisResultContext.objectMapping.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*CustomKnosisResultContext.objectMapping.modify())(_QWORD)
{
  return nullsub_1;
}

void CustomKnosisResultContext.getOrInitInitializationResources<A>(for:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  sub_1AE767240(a1, a2, a3);
  sub_1AE4F6664();
}

uint64_t CustomKnosisResultContext.init(knosisAnswers:objectMapping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = type metadata accessor for CustomKnosisResultContext(0, a3, a4, a4);
  v10 = *(int *)(v9 + 40);
  type metadata accessor for InitializationResourcesManager();
  v11 = sub_1AE4F66BC();
  *(_QWORD *)(v11 + 16) = sub_1AE925C98();
  *(_QWORD *)(a5 + v10) = v11;
  *(_QWORD *)(a5 + *(int *)(v9 + 36)) = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a2, a3);
}

uint64_t sub_1AE79CB20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD v29[6];
  unsigned __int16 v30;
  uint64_t v31;

  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v10;
  v28 = &v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AE6A31B0((_QWORD *(*)(uint64_t *__return_ptr))sub_1AE7ADAF0, (uint64_t)v29);
  swift_bridgeObjectRelease();
  v13 = v30;
  if (HIBYTE(v30) > 0xFEu)
  {
    swift_bridgeObjectRelease();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v15 = a4;
    v16 = 1;
    return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v15, v16, 1, TupleTypeMetadata2);
  }
  v17 = v29[0];
  if ((v30 & 0x100) == 0)
  {
    v26 = v29[2];
    v27 = v29[1];
    v24 = v29[4];
    v25 = v29[3];
    v23 = v29[5];
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4, v8);
    v18 = swift_getTupleTypeMetadata2();
    CustomKnosisResultContext.init(knosisAnswers:objectMapping:)(a2, (uint64_t)v12, v8, *(_QWORD *)(a3 + 24), a4 + *(int *)(v18 + 48));
    v19 = v27;
    *(_QWORD *)a4 = v17;
    *(_QWORD *)(a4 + 8) = v19;
    v20 = v25;
    *(_QWORD *)(a4 + 16) = v26;
    *(_QWORD *)(a4 + 24) = v20;
    v21 = v23;
    *(_QWORD *)(a4 + 32) = v24;
    *(_QWORD *)(a4 + 40) = v21;
    *(_BYTE *)(a4 + 48) = v13;
    v15 = a4;
    v16 = 0;
    TupleTypeMetadata2 = v18;
    return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v15, v16, 1, TupleTypeMetadata2);
  }
  v31 = v29[0];
  sub_1AE501548((uint64_t *)&unk_1ED319C60);
  swift_willThrowTypedImpl();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE79CD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  sub_1AE79CDF8(v4, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  sub_1AE501548(&qword_1EEDA2AB8);
  swift_getTupleTypeMetadata2();
  sub_1AE52FB78(&qword_1EEDA2AC0, &qword_1EEDA2AB8, MEMORY[0x1E0DEAF38]);
  v5 = sub_1AE926088();
  swift_release();
  return v5;
}

uint64_t (*sub_1AE79CDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = type metadata accessor for CustomKnosisResultContext(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - v9, a1, v7);
  v11 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, v10, v7);
  return sub_1AE7AD8C8;
}

void CustomKnosisResultContext.entityFromAnswers(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X3>, uint64_t@<X8>);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;

  sub_1AE507B40();
  v3 = v1;
  v5 = v4;
  v7 = *v6;
  v8 = CustomKnosisResultContext.tripleProvider.getter();
  v9 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRetain();
  v10 = 0;
  v11 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  sub_1AE7ADDD4();
  while (1)
  {
    if (v9 == v10)
    {
      sub_1AE4F67AC();
      sub_1AE7ADCF4();
      sub_1AE4F67AC();
      sub_1AE4F682C();
      v27 = sub_1AE79D14C(v0, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), v26);
      MEMORY[0x1E0C80A78](v27);
      sub_1AE4F69EC();
      sub_1AE4FBE7C();
      sub_1AE772970(&qword_1EEDA2AC0, v28, MEMORY[0x1E0DEAF38]);
      sub_1AE926088();
      sub_1AE4F6700();
      sub_1AE4F76D8();
      sub_1AE507ED4();
      sub_1AE4FCE0C();
      return;
    }
    if (v10 >= *(_QWORD *)(v8 + 16))
      break;
    ++v10;
    sub_1AE7ADC08();
    if (v13 && v7 == *(_QWORD *)(v12 + 32))
    {
      v35 = v3;
      v36 = v0;
      sub_1AE7ADF54();
      v33 = v14;
      v34 = v15;
      v37 = *(_OWORD *)(v16 - 8);
      v17 = *(_QWORD *)(v16 + 8);
      v32 = *(_BYTE *)(v16 + 16);
      v30 = v19;
      v31 = v18;
      v29 = v20;
      sub_1AE7ADCDC(v7, v18, v19, v20, v21);
      sub_1AE7AE498();
      sub_1AE7ADCD4();
      sub_1AE7ADCCC();
      sub_1AE4F6730();
      sub_1AE4F66CC();
      if ((sub_1AE64A9C8() & 1) == 0)
        sub_1AE7ADB80();
      v23 = *(_QWORD *)(v11 + 16);
      v22 = *(_QWORD *)(v11 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_1AE7ADD14(v22);
        sub_1AE506400();
        v0 = v11;
      }
      *(_QWORD *)(v11 + 16) = v23 + 1;
      v24 = (_QWORD *)(v11 + 112 * v23);
      v24[4] = v7;
      v24[5] = v31;
      v24[6] = v30;
      v24[7] = v29;
      sub_1AE7AE28C((uint64_t)v24);
      *(_QWORD *)(v25 + 72) = v34;
      *(_QWORD *)(v25 + 80) = v0;
      v3 = v35;
      *(_QWORD *)(v25 + 88) = v33;
      *(_QWORD *)(v25 + 96) = v2;
      *(_OWORD *)(v25 + 104) = v37;
      *(_QWORD *)(v25 + 120) = v17;
      *(_BYTE *)(v25 + 128) = v32;
      *(_QWORD *)(v25 + 136) = v2;
      v0 = v36;
      goto LABEL_2;
    }
  }
  __break(1u);
}

uint64_t (*sub_1AE79D14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = type metadata accessor for CustomKnosisResultContext(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - v9, a1, v7);
  v11 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, v10, v7);
  return sub_1AE7AD8C8;
}

void CustomKnosisResultContext.entitiesFromAnswers<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);

  sub_1AE4F67EC();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v32 = CustomKnosisResultContext.tripleProvider.getter();
  Array<A>.triplesWithParentAnswers<A>(for:)(v31, v32);
  sub_1AE4F6710();
  if (!v21)
  {
    v33 = sub_1AE79D364(v20, *(_QWORD *)(v29 + 16), v27, *(_QWORD *)(v29 + 24), v25);
    a10 = &a9;
    MEMORY[0x1E0C80A78](v33);
    sub_1AE501548(&qword_1EEDA2AB8);
    sub_1AE4FBE7C();
    sub_1AE4FB9D4();
    sub_1AE5962D8();
    sub_1AE7AE310();
    sub_1AE4F6728();
    sub_1AE4F6700();
  }
  sub_1AE507ED4();
  sub_1AE4F667C();
}

uint64_t (*sub_1AE79D364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v17;

  v10 = type metadata accessor for CustomKnosisResultContext(0, a2, a4, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v17 - v12, a1, v10);
  v14 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = a3;
  *((_QWORD *)v15 + 4) = a4;
  *((_QWORD *)v15 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v15[v14], v13, v10);
  return sub_1AE7AD9F4;
}

uint64_t sub_1AE79D450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for CustomKnosisResultContext(0, a3, a5, a4);
  return sub_1AE79CD10(a1, v6, v7, v8);
}

uint64_t CustomKnosisResultContext.entitiesGroupedByEntityIdentifierFromAnswers()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);

  v4 = CustomKnosisResultContext.tripleProvider.getter();
  sub_1AE7AE170(v4);
  sub_1AE4F81B8();
  if (!v2)
  {
    v6 = sub_1AE79D5C0(v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v5);
    MEMORY[0x1E0C80A78](v6);
    sub_1AE501548(&qword_1EEDA2AB8);
    sub_1AE4FBE7C();
    sub_1AE4FB9D4();
    sub_1AE5962D8();
    v1 = sub_1AE7AE310();
    sub_1AE4F67AC();
    sub_1AE4F6700();
  }
  return v1;
}

uint64_t (*sub_1AE79D5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = type metadata accessor for CustomKnosisResultContext(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - v9, a1, v7);
  v11 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, v10, v7);
  return sub_1AE7AD8E0;
}

uint64_t sub_1AE79D694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for CustomKnosisResultContext(0, a3, a4, a4);
  return sub_1AE79CD10(a1, v5, v6, v7);
}

uint64_t CustomKnosisResultContext.entitiesFromAnswers()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = CustomKnosisResultContext.tripleProvider.getter();
  sub_1AE7AE4AC(v4);
  sub_1AE4F81B8();
  sub_1AE79D7D8(v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v5);
  sub_1AE4F69EC();
  sub_1AE4FBE7C();
  sub_1AE772970(&qword_1EEDA2AC0, v6, MEMORY[0x1E0DEAF38]);
  sub_1AE926088();
  sub_1AE4FD97C();
  sub_1AE4F6700();
  sub_1AE4F76D8();
  return v2;
}

uint64_t (*sub_1AE79D7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = type metadata accessor for CustomKnosisResultContext(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - v9, a1, v7);
  v11 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, v10, v7);
  return sub_1AE7AD8C8;
}

uint64_t sub_1AE79D8AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;

  v8 = type metadata accessor for CustomKnosisResultContext(0, a3, a4, a3);
  return sub_1AE79CB20(a1, a2, v8, a5);
}

uint64_t sub_1AE79D910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v7 = v6;
  v59 = a1;
  v11 = sub_1AE92670C();
  v12 = MEMORY[0x1E0C80A78](v11);
  v57 = (char *)&v51 - v13;
  v14 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v18 = sub_1AE92670C();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v63 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v61 = a6;
  v62 = (int64_t *)((char *)&v51 - v22);
  v60 = a3;
  v23 = a6;
  v24 = v16;
  v25 = a4;
  v27 = type metadata accessor for TypedEntityIdentifier(255, a3, v23, v26);
  swift_getTupleTypeMetadata2();
  sub_1AE926238();
  v54 = MEMORY[0x1AF454B70](&protocol conformance descriptor for TypedEntityIdentifier<A>, v27);
  v55 = v27;
  v28 = sub_1AE925C98();
  v29 = *(_QWORD *)(v59 + 64);
  v53 = v59 + 64;
  v67 = v28;
  v30 = 1 << *(_BYTE *)(v59 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & v29;
  v58 = (unint64_t)(v30 + 63) >> 6;
  v51 = v58 - 1;
  result = swift_bridgeObjectRetain();
  v34 = 0;
  v52 = result + 96;
  v56 = v19;
  while (1)
  {
    if (v32)
    {
      v35 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      v64 = v34;
      v36 = v35 | (v34 << 6);
      v37 = v63;
      goto LABEL_6;
    }
    v43 = v34 + 1;
    v37 = v63;
    if (__OFADD__(v34, 1))
      break;
    if (v43 >= v58)
    {
      v64 = v34;
      v32 = 0;
      v39 = 1;
      goto LABEL_7;
    }
    v44 = *(_QWORD *)(v53 + 8 * v43);
    if (v44)
      goto LABEL_14;
    if (v34 + 2 >= v58)
    {
      v32 = 0;
      v39 = 1;
LABEL_21:
      v64 = v43;
      goto LABEL_7;
    }
    v44 = *(_QWORD *)(v53 + 8 * (v34 + 2));
    if (v44)
    {
      v43 = v34 + 2;
LABEL_14:
      v32 = (v44 - 1) & v44;
      v36 = __clz(__rbit64(v44)) + (v43 << 6);
      v64 = v43;
LABEL_6:
      v38 = *(_QWORD *)(v59 + 56);
      *(_QWORD *)v37 = *(_QWORD *)(*(_QWORD *)(v59 + 48) + 8 * v36);
      (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(&v37[*(int *)(TupleTypeMetadata2 + 48)], v38 + *(_QWORD *)(v14 + 72) * v36, v25);
      v39 = 0;
      goto LABEL_7;
    }
    v43 = v34 + 3;
    if (v34 + 3 < v58)
    {
      v44 = *(_QWORD *)(v53 + 8 * v43);
      if (v44)
        goto LABEL_14;
      while (v34 + 4 < v58)
      {
        v44 = *(_QWORD *)(v52 + 8 * v34++);
        if (v44)
        {
          v43 = v34 + 3;
          goto LABEL_14;
        }
      }
      v32 = 0;
      v39 = 1;
      v43 = v51;
      goto LABEL_21;
    }
    v32 = 0;
    v39 = 1;
    v64 = v34 + 2;
LABEL_7:
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v37, v39, 1, TupleTypeMetadata2);
    v40 = v62;
    (*(void (**)(void))(v19 + 32))();
    if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v40, 1, TupleTypeMetadata2) == 1)
    {
      swift_release();
      return v67;
    }
    v41 = v40;
    v42 = *v40;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v24, (char *)v41 + *(int *)(TupleTypeMetadata2 + 48), v25);
    v65 = v42;
    TypedEntityIdentifier.init(untyped:)(&v65, v60, v61, &v66);
    if (v7)
    {

      result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v24, v25);
      v7 = 0;
    }
    else
    {
      v45 = v66;
      v46 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
      v47 = v18;
      v48 = v14;
      v49 = v24;
      v50 = (uint64_t)v57;
      v46(v57, v49, v25);
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v50, 0, 1, v25);
      v66 = v45;
      sub_1AE925CF8();
      v24 = v49;
      v14 = v48;
      v18 = v47;
      v7 = 0;
      v19 = v56;
      sub_1AE925D1C();
      result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v24, v25);
    }
    v34 = v64;
  }
  __break(1u);
  return result;
}

uint64_t sub_1AE79DDA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata2;
  void (*v24)(_QWORD, _QWORD, _QWORD);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  void (*v43)(_QWORD, _QWORD, _QWORD);
  uint64_t v44;

  v8 = v7;
  v40 = a7;
  v41 = a6;
  v42 = a3;
  v35 = *(_QWORD *)(a4 + 16);
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](a1);
  v34 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AE523CF0((uint64_t *)&unk_1ED319C60);
  v14 = sub_1AE926F28();
  v39 = sub_1AE92670C();
  v37 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v16 = (char *)&v30 - v15;
  v38 = sub_1AE92670C();
  v36 = *(_QWORD *)(v38 - 8);
  v17 = MEMORY[0x1E0C80A78](v38);
  v19 = (char *)&v30 - v18;
  v31 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v17);
  v32 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a1;
  swift_bridgeObjectRetain();
  sub_1AE501548(&qword_1EED99518);
  sub_1AE52FB78(&qword_1EED99520, &qword_1EED99518, MEMORY[0x1E0DEAF38]);
  MEMORY[0x1AF454B70](&protocol conformance descriptor for CustomKnosisResultContext<A>, a4);
  v21 = v8;
  sub_1AE6A2F30(a5, v42, a5, (uint64_t)v16);
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v16, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v39);
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v19, 1, 1, a5);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v38);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v40, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    v24 = v43;
    sub_1AE762974(v14, (uint64_t)&v44, (uint64_t)v19);
    if (v24)
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v19, 0, 1, a5);
      v25 = v32;
      v43 = *(void (**)(_QWORD, _QWORD, _QWORD))(v31 + 32);
      v43(v32, v19, a5);
      v26 = (uint64_t)v34;
      v27 = v35;
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v34, v21, v35);
      v28 = swift_getTupleTypeMetadata2();
      v29 = v40;
      CustomKnosisResultContext.init(knosisAnswers:objectMapping:)(a2, v26, v27, *(_QWORD *)(a4 + 24), v40 + *(int *)(v28 + 48));
      v43(v29, v25, a5);
      return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v29, 0, 1, v28);
    }
  }
}

uint64_t sub_1AE79E130()
{
  sub_1AE501548(&qword_1EEDA2AB8);
  swift_getTupleTypeMetadata2();
  sub_1AE52FB78(&qword_1EEDA2AC0, &qword_1EEDA2AB8, MEMORY[0x1E0DEAF38]);
  return sub_1AE926088();
}

uint64_t sub_1AE79E1F4@<X0>(uint64_t *a1@<X0>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = *a1;
  v12 = a1[1];
  v13 = type metadata accessor for CustomKnosisResultContext(0, a3, a5, a3);
  return sub_1AE79DDA4(v11, v12, a2, v13, a4, a6, a7);
}

void CustomKnosisResultContext.graphObjectFromAnswers<A>(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_1AE507B40();
  v2 = v1;
  v4 = v3;
  v6 = *v5;
  v7 = CustomKnosisResultContext.tripleProvider.getter();
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRetain();
  v9 = 0;
  v10 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  sub_1AE7ADDD4();
  while (1)
  {
    if (v8 == v9)
    {
      sub_1AE4F6728();
      sub_1AE7ADCF4();
      sub_1AE4F6728();
      v26 = sub_1AE4F682C();
      MEMORY[0x1E0C80A78](v26);
      sub_1AE4F69EC();
      sub_1AE4FBE7C();
      sub_1AE772970(&qword_1EEDA2AC0, v27, MEMORY[0x1E0DEAF38]);
      sub_1AE7ADDBC();
      sub_1AE7AE09C();
      sub_1AE6149C4();
      sub_1AE4FCE0C();
      return;
    }
    if (v9 >= *(_QWORD *)(v7 + 16))
      break;
    ++v9;
    sub_1AE7ADC08();
    if (v13 && v6 == *(_QWORD *)(v12 + 32))
    {
      v33 = v0;
      v34 = v4;
      v14 = *(_QWORD *)(v7 + v11 - 32);
      sub_1AE7ADDF4(v7 + v11);
      v16 = *(_QWORD *)(v15 + 24);
      v29 = v18;
      v30 = v17;
      v28 = v19;
      sub_1AE7ADCDC(v6, v17, v18, v19, v20);
      sub_1AE4FB930();
      sub_1AE7ADCD4();
      sub_1AE7ADCCC();
      sub_1AE4F6804();
      sub_1AE4F66CC();
      v32 = v2;
      if ((sub_1AE64A9C8() & 1) == 0)
        sub_1AE7ADB80();
      v22 = *(_QWORD *)(v10 + 16);
      v21 = *(_QWORD *)(v10 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_1AE7ADD14(v21);
        sub_1AE506400();
        v14 = v10;
      }
      *(_QWORD *)(v10 + 16) = v22 + 1;
      v23 = (_QWORD *)(v10 + 112 * v22);
      v23[4] = v6;
      v23[5] = v30;
      v23[6] = v29;
      v23[7] = v28;
      sub_1AE7AE28C((uint64_t)v23);
      *(_QWORD *)(v24 + 72) = v31;
      *(_QWORD *)(v24 + 80) = v14;
      v2 = v32;
      sub_1AE7ADF18(v24);
      *(_QWORD *)(v25 + 136) = v16;
      v0 = v33;
      v4 = v34;
      goto LABEL_2;
    }
  }
  __break(1u);
}

void CustomKnosisResultContext.graphObjectsFromAnswers<A, B>(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[8];
  uint64_t v28;

  sub_1AE4F67EC();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v23 = v0;
  v12 = CustomKnosisResultContext.tripleProvider.getter();
  v13 = *(_QWORD *)(v11 + 16);
  v24 = *(_QWORD *)(v11 + 24);
  v25 = v13;
  v27[2] = v13;
  v27[3] = v9;
  v28 = v9;
  v27[4] = v7;
  v27[5] = v24;
  v26 = v5;
  v27[6] = v5;
  v27[7] = v3;
  v15 = sub_1AE57E0E0((uint64_t)sub_1AE69E5B8, (uint64_t)v27, v7, (uint64_t)&type metadata for EntityIdentifier, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v14);
  v16 = sub_1AE79AF90(v15, v12);
  v17 = sub_1AE79B8C4(v16);
  sub_1AE4F76D8();
  sub_1AE4F81B8();
  sub_1AE4F6710();
  if (!v1)
  {
    v18 = sub_1AE501548(&qword_1EEDA2AB8);
    sub_1AE79D910((uint64_t)v17, v25, v28, v18, v24, v26);
    v22[1] = v22;
    v19 = sub_1AE4F67AC();
    MEMORY[0x1E0C80A78](v19);
    v21 = type metadata accessor for TypedEntityIdentifier(0, v28, v26, v20);
    sub_1AE4FBE7C();
    sub_1AE4FB9D4();
    MEMORY[0x1AF454B70](&protocol conformance descriptor for TypedEntityIdentifier<A>, v21);
    sub_1AE925C8C();
    sub_1AE4FD97C();
    sub_1AE4F67AC();
  }
  sub_1AE6149C4();
  sub_1AE4F667C();
}

uint64_t sub_1AE79E690@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  type metadata accessor for CustomKnosisResultContext(0, a1, a3, a2);
  result = sub_1AE79E130();
  if (!v4)
    *a4 = result;
  return result;
}

void CustomKnosisResultContext.graphObjectsGroupedByEntityIdentifierFromAnswers<A>(ofType:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  sub_1AE4F67EC();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = CustomKnosisResultContext.tripleProvider.getter();
  v8 = sub_1AE7AE170(v7);
  sub_1AE4F6728();
  if (!v0)
  {
    v9 = *(_QWORD *)(v6 + 16);
    v10 = sub_1AE501548(&qword_1EEDA2AB8);
    sub_1AE79D910((uint64_t)v8, v9, v4, v10, *(_QWORD *)(v6 + 24), v2);
    v14[1] = v14;
    v11 = sub_1AE4F67AC();
    MEMORY[0x1E0C80A78](v11);
    v13 = type metadata accessor for TypedEntityIdentifier(0, v4, v2, v12);
    sub_1AE4FBE7C();
    sub_1AE4FB9D4();
    MEMORY[0x1AF454B70](&protocol conformance descriptor for TypedEntityIdentifier<A>, v13);
    sub_1AE925C8C();
    sub_1AE4F76D8();
  }
  sub_1AE507ED4();
  sub_1AE4F667C();
}

uint64_t sub_1AE79E85C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  type metadata accessor for CustomKnosisResultContext(0, a1, a3, a2);
  result = sub_1AE79E130();
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t *CustomKnosisResultContext.graphObjectsFromAnswers<A>(ofType:)()
{
  uint64_t v0;

  sub_1AE7AE4B4();
  v0 = CustomKnosisResultContext.tripleProvider.getter();
  sub_1AE7AE4AC(v0);
  sub_1AE4F66E8();
  sub_1AE52FE10();
  sub_1AE4FBE7C();
  sub_1AE52FB78(&qword_1EEDA2AC0, &qword_1EEDA2AB8, MEMORY[0x1E0DEAF38]);
  sub_1AE926088();
  sub_1AE4FD97C();
  swift_bridgeObjectRelease();
  return &qword_1EEDA2AB8;
}

void sub_1AE79E9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v13 = sub_1AE7AE3D0();
  v17 = type metadata accessor for CustomKnosisResultContext(v13, v14, v16, v15);
  sub_1AE79DDA4(v8, v9, a7, v17, a4, a6, v7);
  sub_1AE4FCE34();
}

uint64_t sub_1AE79EA24@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11[2];
  unsigned __int8 v12;
  __int128 v13[2];
  __int128 v14[2];
  uint64_t v15;

  if (!*(_QWORD *)(result + 16))
    goto LABEL_4;
  v9 = *(_QWORD *)(result + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AE798C18(v9, a3 & 1, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if (v12 == 255)
  {
    sub_1AE52FBE8((uint64_t)v11, &qword_1EED9CAB8);
    result = swift_bridgeObjectRelease();
LABEL_4:
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    return result;
  }
  if ((v12 & 1) != 0)
  {
    v15 = *(_QWORD *)&v11[0];
    sub_1AE501548((uint64_t *)&unk_1ED319C60);
    swift_willThrowTypedImpl();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1AE50AF58(v11, (uint64_t)v13);
    sub_1AE50AF58(v13, (uint64_t)v14);
    *(_QWORD *)(a5 + 40) = a4;
    type metadata accessor for InitializationResourcesManager();
    v10 = swift_allocObject();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v10 + 16) = sub_1AE925C98();
    *(_QWORD *)(a5 + 48) = a2;
    *(_QWORD *)(a5 + 56) = v10;
    return sub_1AE50AF58(v14, a5);
  }
}

uint64_t sub_1AE79EBB4@<X0>(uint64_t a1@<X0>, char a2@<W3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39[2];
  unsigned __int8 v40;
  __int128 v41[2];
  __int128 v42[3];
  uint64_t v43;

  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = MEMORY[0x1E0C80A78](a1);
  if (!*(_QWORD *)(v14 + 16))
  {
    sub_1AE523CF0(&qword_1EED9F9F8);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(a6, 1, 1, TupleTypeMetadata2);
  }
  v33 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v17;
  v35 = v7;
  v37 = a6;
  v38 = v14;
  v43 = *(_QWORD *)(v14 + 32);
  v36 = v15;
  swift_bridgeObjectRetain();
  sub_1AE501548(&qword_1EED99518);
  sub_1AE52FB78(&qword_1EED99520, &qword_1EED99518, MEMORY[0x1E0DEAF38]);
  v19 = v18;
  MEMORY[0x1AF454B70](&protocol conformance descriptor for CustomKnosisResultContext<A>, a3);
  sub_1AE6A2E68(&v43, a2 & 1, a4, (uint64_t)v39, a3, v19, (uint64_t)&protocol witness table for ExtendedTriple, a5);
  if (v40 == 255)
  {
    sub_1AE52FBE8((uint64_t)v39, &qword_1EED9CAB8);
    swift_bridgeObjectRelease();
    sub_1AE523CF0(&qword_1EED9F9F8);
    v20 = swift_getTupleTypeMetadata2();
    v21 = v37;
    v22 = 1;
    return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v21, v22, 1, v20);
  }
  v26 = v36;
  v25 = v37;
  if ((v40 & 1) == 0)
  {
    sub_1AE50AF58(v39, (uint64_t)v41);
    sub_1AE50AF58(v41, (uint64_t)v42);
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v28 = (uint64_t)v33;
    v29 = v6;
    v30 = v34;
    v27(v33, v29, v34);
    sub_1AE523CF0(&qword_1EED9F9F8);
    v31 = swift_getTupleTypeMetadata2();
    CustomKnosisResultContext.init(knosisAnswers:objectMapping:)(v26, v28, v30, *(_QWORD *)(a3 + 24), v25 + *(int *)(v31 + 48));
    sub_1AE50AF58(v42, v25);
    v21 = v25;
    v22 = 0;
    v20 = v31;
    return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v21, v22, 1, v20);
  }
  v43 = *(_QWORD *)&v39[0];
  sub_1AE501548((uint64_t *)&unk_1ED319C60);
  swift_willThrowTypedImpl();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE79EE78()
{
  sub_1AE501548(&qword_1EEDA2AB8);
  sub_1AE523CF0(&qword_1EED9F9F8);
  swift_getTupleTypeMetadata2();
  sub_1AE52FB78(&qword_1EEDA2AC0, &qword_1EEDA2AB8, MEMORY[0x1E0DEAF38]);
  return sub_1AE926088();
}

uint64_t sub_1AE79EF3C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  char v9;
  uint64_t v11;
  uint64_t v12;

  v9 = a2;
  v11 = *a1;
  v12 = type metadata accessor for CustomKnosisResultContext(0, a3, a5, a2);
  return sub_1AE79EBB4(v11, v9, v12, a4, a6, a7);
}

void CustomKnosisResultContext.graphObjectFromAnswers<A>(forUntyped:mapping:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_1AE507B40();
  v2 = v1;
  v4 = v3;
  v6 = *v5;
  v7 = CustomKnosisResultContext.tripleProvider.getter();
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRetain();
  v9 = 0;
  v10 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  sub_1AE7ADDD4();
  while (1)
  {
    if (v8 == v9)
    {
      sub_1AE4F6710();
      sub_1AE7ADCF4();
      sub_1AE4F6710();
      v22 = sub_1AE4F682C();
      MEMORY[0x1E0C80A78](v22);
      sub_1AE4F69EC();
      sub_1AE523CF0(&qword_1EED9F9F8);
      sub_1AE4FBE7C();
      sub_1AE772970(&qword_1EEDA2AC0, v23, MEMORY[0x1E0DEAF38]);
      sub_1AE7ADDBC();
      sub_1AE7AE09C();
      sub_1AE6149C4();
      sub_1AE4FCE0C();
      return;
    }
    if (v9 >= *(_QWORD *)(v7 + 16))
      break;
    ++v9;
    sub_1AE7ADC08();
    if (v12 && v6 == *(_QWORD *)(v11 + 32))
    {
      v29 = v2;
      v30 = v0;
      sub_1AE7ADF54();
      sub_1AE7ADDF4(v13);
      v24 = v14;
      v26 = v16;
      v27 = v15;
      v25 = v17;
      sub_1AE7ADCDC(v6, v14, v15, v16, v17);
      sub_1AE7AE498();
      sub_1AE7ADCD4();
      sub_1AE7ADCCC();
      sub_1AE4F6730();
      sub_1AE4F66CC();
      if ((sub_1AE64A9C8() & 1) == 0)
        sub_1AE7ADB80();
      v19 = *(_QWORD *)(v10 + 16);
      v18 = *(_QWORD *)(v10 + 24);
      if (v19 >= v18 >> 1)
      {
        sub_1AE7ADD14(v18);
        sub_1AE506400();
        v0 = v10;
      }
      *(_QWORD *)(v10 + 16) = v19 + 1;
      v20 = v10 + 112 * v19;
      *(_QWORD *)(v20 + 32) = v6;
      *(_QWORD *)(v20 + 40) = v24;
      *(_QWORD *)(v20 + 48) = v27;
      *(_QWORD *)(v20 + 56) = v26;
      *(_WORD *)(v20 + 64) = v25;
      *(_BYTE *)(v20 + 66) = 1;
      *(_QWORD *)(v20 + 72) = v28;
      *(_QWORD *)(v20 + 80) = v0;
      v2 = v29;
      sub_1AE7ADF18(v20);
      *(_QWORD *)(v21 + 136) = v4;
      v0 = v30;
      goto LABEL_2;
    }
  }
  __break(1u);
}

void CustomKnosisResultContext.graphObjectsFromAnswers<A, B>(forUntyped:mapping:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  sub_1AE4F67EC();
  v2 = v1;
  v3 = CustomKnosisResultContext.tripleProvider.getter();
  Array<A>.triplesWithParentAnswers<A>(for:)(v2, v3);
  v4 = sub_1AE4F67AC();
  if (!v0)
  {
    v5[1] = v5;
    MEMORY[0x1E0C80A78](v4);
    sub_1AE501548(&qword_1EEDA2AB8);
    sub_1AE523CF0(&qword_1EED9F9F8);
    sub_1AE4FBE7C();
    sub_1AE4FB9D4();
    sub_1AE5962D8();
    sub_1AE7ADE8C();
    sub_1AE4F76D8();
  }
  sub_1AE507ED4();
  sub_1AE4F667C();
}

uint64_t sub_1AE79F348@<X0>(uint64_t a1@<X3>, uint64_t a2@<X6>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  type metadata accessor for CustomKnosisResultContext(0, a1, a2, a1);
  result = sub_1AE79EE78();
  if (!v3)
    *a3 = result;
  return result;
}

void CustomKnosisResultContext.graphObjectsGroupedByEntityIdentifierFromAnswers<A>(mapping:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1AE4F67EC();
  v1 = sub_1AE7AE2E0();
  sub_1AE7AE170(v1);
  v2 = sub_1AE4F6710();
  if (!v0)
  {
    MEMORY[0x1E0C80A78](v2);
    sub_1AE501548(&qword_1EEDA2AB8);
    sub_1AE523CF0(&qword_1EED9F9F8);
    sub_1AE4FBE7C();
    sub_1AE4FB9D4();
    sub_1AE5962D8();
    sub_1AE7ADE8C();
    sub_1AE4F76D8();
  }
  sub_1AE507ED4();
  sub_1AE4F667C();
}

uint64_t sub_1AE79F4BC@<X0>(uint64_t a1@<X3>, uint64_t a2@<X5>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  type metadata accessor for CustomKnosisResultContext(0, a1, a2, a1);
  result = sub_1AE79EE78();
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_1AE79F544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  _QWORD v9[3];
  uint64_t v10;

  v9[2] = a4;
  v10 = a1;
  v9[0] = a2;
  v9[1] = a3;
  swift_bridgeObjectRetain();
  v5 = sub_1AE797D9C(a3);
  swift_bridgeObjectRelease();
  v8[2] = v9;
  v8[3] = &v10;
  v6 = sub_1AE8AC284((void (*)(__int128 *__return_ptr, __int128 *))sub_1AE7AD7C8, (uint64_t)v8, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t *CustomKnosisResultContext.graphObjectsFromAnswers<A>(mapping:)()
{
  uint64_t v0;

  sub_1AE7AE4B4();
  v0 = sub_1AE7AE2E0();
  sub_1AE7AE4AC(v0);
  sub_1AE4F6728();
  sub_1AE52FE10();
  sub_1AE523CF0(&qword_1EED9F9F8);
  sub_1AE4FBE7C();
  sub_1AE52FB78(&qword_1EEDA2AC0, &qword_1EEDA2AB8, MEMORY[0x1E0DEAF38]);
  sub_1AE926088();
  sub_1AE4FD97C();
  swift_bridgeObjectRelease();
  return &qword_1EEDA2AB8;
}

uint64_t sub_1AE79F6CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1AE79EA24(a1, a2, 1, a3, a4);
}

void sub_1AE79F6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = sub_1AE7AE3D0();
  v14 = type metadata accessor for CustomKnosisResultContext(v11, v12, v13, v12);
  sub_1AE79EBB4(v8, 1, v14, a5, a7, v7);
  sub_1AE4FCE34();
}

void CustomKnosisResultContext.graphObjectFromAnswers(forUntyped:)()
{
  CustomKnosisResultContext.graphObjectFromAnswers<A>(forUntyped:mapping:)();
}

void CustomKnosisResultContext.graphObjectsFromAnswers<A>(forUntyped:)()
{
  CustomKnosisResultContext.graphObjectsFromAnswers<A, B>(forUntyped:mapping:)();
}

void CustomKnosisResultContext.graphObjectsGroupedByEntityIdentifierFromAnswers()()
{
  CustomKnosisResultContext.graphObjectsGroupedByEntityIdentifierFromAnswers<A>(mapping:)();
}

uint64_t *CustomKnosisResultContext.graphObjectsFromAnswers()()
{
  return CustomKnosisResultContext.graphObjectsFromAnswers<A>(mapping:)();
}

void (*sub_1AE79F808(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CustomKnosisResultContext.objectMapping.modify();
  return sub_1AE63E23C;
}

uint64_t sub_1AE79F84C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CustomKnosisResultContext.tripleProvider.getter();
  *a1 = result;
  return result;
}

void sub_1AE79F870(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  CustomKnosisResultContext.getOrInitInitializationResources<A>(for:)(a1, a2, a3);
}

uint64_t KnosisAnswer.answerId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(unsigned __int16 *)(v1 + 32);
  *(_WORD *)(a1 + 32) = v6;
  return sub_1AE7ADC34(v2, v3, v4, v5, v6, *(_BYTE *)(v1 + 34), a1);
}

__n128 KnosisAnswer.answerId.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  char v5;
  __n128 result;
  __int128 v7;

  sub_1AE7ADC94(a1);
  sub_1AE525C94(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int16 *)(v2 + 32), *(_BYTE *)(v2 + 34));
  *(_OWORD *)v2 = v7;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v3;
  *(_WORD *)(v2 + 32) = v4;
  *(_BYTE *)(v2 + 34) = v5;
  sub_1AE501BAC();
  return result;
}

uint64_t (*KnosisAnswer.answerId.modify())(_QWORD)
{
  return nullsub_1;
}

void KnosisAnswer.name.getter()
{
  sub_1AE4F66CC();
  sub_1AE4F7714();
  sub_1AE4F6664();
}

void KnosisAnswer.name.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1AE4F6B50();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v0;
  sub_1AE4F6624();
}

uint64_t (*KnosisAnswer.name.modify())(_QWORD)
{
  return nullsub_1;
}

void KnosisAnswer.textualization.getter()
{
  sub_1AE4F66CC();
  sub_1AE4F7714();
  sub_1AE4F6664();
}

void KnosisAnswer.textualization.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1AE4F6B50();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = v0;
  sub_1AE4F6624();
}

uint64_t (*KnosisAnswer.textualization.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t KnosisAnswer.facts.getter()
{
  return swift_bridgeObjectRetain();
}

void KnosisAnswer.facts.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = a1;
  sub_1AE4F6664();
}

uint64_t (*KnosisAnswer.facts.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t KnosisAnswer.parent.getter()
{
  return swift_bridgeObjectRetain();
}

void KnosisAnswer.parent.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 80) = a1;
  sub_1AE4F6664();
}

uint64_t (*KnosisAnswer.parent.modify())(_QWORD)
{
  return nullsub_1;
}

double KnosisAnswer.score.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

void KnosisAnswer.score.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 88) = a1;
}

uint64_t (*KnosisAnswer.score.modify())(_QWORD)
{
  return nullsub_1;
}

void KnosisAnswer.argGroup.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 96);
}

_BYTE *KnosisAnswer.argGroup.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 96) = *result;
  return result;
}

uint64_t (*KnosisAnswer.argGroup.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t KnosisAnswer.requestIds.getter()
{
  return swift_bridgeObjectRetain();
}

void KnosisAnswer.requestIds.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 104) = a1;
  sub_1AE4F6664();
}

uint64_t (*KnosisAnswer.requestIds.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t KnosisAnswer.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1AE505CD4();
  v1 = *(unsigned __int8 *)(v0 + 34);
  sub_1AE92691C();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(_QWORD))((char *)sub_1AE79FB4C + 4 * byte_1AE95A593[v1]))(0);
}

void sub_1AE79FB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1AE4F6730();
  sub_1AE925F74();
  sub_1AE4F6718();
  sub_1AE4F7838();
  if (v12)
  {
    sub_1AE5FBA48();
    sub_1AE925F74();
    sub_1AE509ECC();
    sub_1AE4F665C();
  }
  sub_1AE4F6708();
  sub_1AE7AE134();
  sub_1AE7AE0BC(v13, v14, v15, v16, v17);
  swift_bridgeObjectRetain();
  sub_1AE4FB75C();
  sub_1AE4F81B0();
  sub_1AE4F66CC();
  sub_1AE4F66C4();
  v18 = sub_1AE7AE1A0();
  sub_1AE4F6648();
  sub_1AE7AE134();
  sub_1AE525C94(v19, v20, v21, v22, v23, a12);
  sub_1AE4F9038();
  sub_1AE4F6718();
  sub_1AE4F6648();
  sub_1AE736F74();
  swift_bridgeObjectRelease();
  MEMORY[0x1AF453400](v18, &type metadata for KnosisFact);
  sub_1AE925F74();
  sub_1AE4F665C();
  swift_bridgeObjectRelease();
  sub_1AE4F7838();
  sub_1AE509ECC();
  sub_1AE4F665C();
  v24 = sub_1AE4F81B0();
  MEMORY[0x1AF453400](v24, &type metadata for KnosisAnswer);
  sub_1AE925F74();
  sub_1AE4F6718();
  sub_1AE4F665C();
  sub_1AE4F7838();
  sub_1AE5FBA48();
  sub_1AE4F6648();
  sub_1AE5FBA48();
  sub_1AE4F6648();
  sub_1AE5FBA48();
  sub_1AE4F6648();
  sub_1AE4F778C();
}

void KnosisFact.extendedTriples()()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t i;
  BOOL v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  __int16 v32;
  __int128 v34;
  uint64_t v35;
  _BYTE v36[16];
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  __int128 v41[2];
  uint64_t v42[4];
  char v43;

  sub_1AE4FFCC0(v36, v0);
  sub_1AE7AA4CC(&v37, (uint64_t)v41);
  sub_1AE7AA4CC(v41, (uint64_t)v42);
  if (v43 == 1)
  {
    v1 = v40;
    if (!*(_QWORD *)(v40 + 16))
    {
      sub_1AE4F6730();
      sub_1AE4F6708();
      static EntityPredicate.empty.getter((uint64_t)v31);
      __asm { BR              X10 }
    }
    v30 = v40 + 64;
    sub_1AE4F95DC();
    v4 = v3 & v2;
    v6 = (unint64_t)(v5 + 63) >> 6;
    sub_1AE4F6730();
    v7 = 0;
    v8 = MEMORY[0x1E0DEE9D8];
    if (!v4)
      goto LABEL_5;
LABEL_4:
    sub_1AE64102C();
    for (i = v9 | (v7 << 6); ; i = v15 + (v7 << 6))
    {
      v16 = *(_QWORD *)(v1 + 48) + 40 * i;
      v17 = *(_WORD *)(v16 + 32);
      v18 = *(_OWORD *)(v16 + 16);
      v31[0] = *(_OWORD *)v16;
      v31[1] = v18;
      v32 = v17;
      sub_1AE53F554();
      sub_1AE53F554();
      sub_1AE525A98((uint64_t)v36);
      v19 = sub_1AE4FB930();
      v20 = sub_1AE798134(v19, (uint64_t)v36);
      sub_1AE562F90();
      sub_1AE4F66E8();
      v21 = *(_QWORD *)(v20 + 16);
      v22 = *(_QWORD *)(v8 + 16);
      if (__OFADD__(v22, v21))
        break;
      if (!sub_1AE4F77E0() || v22 + v21 > *(_QWORD *)(v8 + 24) >> 1)
      {
        sub_1AE7ADEE0();
        v8 = v23;
      }
      if (*(_QWORD *)(v20 + 16))
      {
        sub_1AE7ADD28();
        if (v24 != v11)
          goto LABEL_44;
        sub_1AE50AD88();
        v27 = v27 || v25 >= v26;
        if (!v27)
        {
          sub_1AE4FE030();
          sub_1AE500FB4();
          __break(1u);
          swift_release();
          __break(1u);
          JUMPOUT(0x1AE7A0344);
        }
        swift_arrayInitWithCopy();
        if (v21)
        {
          v28 = *(_QWORD *)(v8 + 16);
          v11 = __OFADD__(v28, v21);
          v29 = v28 + v21;
          if (v11)
            goto LABEL_45;
          *(_QWORD *)(v8 + 16) = v29;
        }
      }
      else if (v21)
      {
        goto LABEL_43;
      }
      sub_1AE4F67AC();
      if (v4)
        goto LABEL_4;
LABEL_5:
      v11 = __OFADD__(v7++, 1);
      if (v11)
        goto LABEL_46;
      if (v7 >= v6)
      {
LABEL_39:
        swift_release();
        *(_QWORD *)&v34 = v8;
        sub_1AE4F66CC();
        sub_1AE798AF0((uint64_t *)&v34, (uint64_t (*)(uint64_t))sub_1AE889418, (uint64_t (*)(_QWORD *))sub_1AE7A96C0);
        sub_1AE4F9038();
        goto LABEL_41;
      }
      if (!*(_QWORD *)(v30 + 8 * v7))
      {
        v12 = v7 + 1;
        if (v7 + 1 >= v6)
          goto LABEL_39;
        if (!*(_QWORD *)(v30 + 8 * v12))
        {
          v12 = v7 + 2;
          if (v7 + 2 >= v6)
            goto LABEL_39;
          if (!*(_QWORD *)(v30 + 8 * v12))
          {
            v12 = v7 + 3;
            if (v7 + 3 >= v6)
              goto LABEL_39;
            if (!*(_QWORD *)(v30 + 8 * v12))
            {
              while (1)
              {
                v7 = v12 + 1;
                if (__OFADD__(v12, 1))
                  goto LABEL_47;
                if (v7 >= v6)
                  goto LABEL_39;
                ++v12;
                if (*(_QWORD *)(v30 + 8 * v7))
                  goto LABEL_15;
              }
            }
          }
        }
        v7 = v12;
      }
LABEL_15:
      sub_1AE50766C();
      v4 = v14 & v13;
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    JUMPOUT(0x1AE7A02D0);
  }
  sub_1AE4FFCC0(v31, v36);
  KnosisFact.splitSubentityIdentifier()();
  if (v35)
  {
    sub_1AE7AA4CC(&v38, (uint64_t)&v34);
    sub_1AE7AA4CC(&v34, (uint64_t)v31);
    __asm { BR              X10 }
  }
LABEL_41:
  sub_1AE4F8180();
}

void sub_1AE7A036C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  _QWORD *v55;
  uint64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[16];
  uint64_t v97;
  uint64_t v98;
  char v99[136];
  uint64_t v100;
  _QWORD v101[5];
  _QWORD v102[6];

  v1 = *(_QWORD *)(v0 + 80);
  v73 = *(_QWORD *)(v1 + 16);
  if (v73)
  {
    v2 = *(unsigned __int8 *)(v0 + 96);
    v74 = v1 + 32;
    v75 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRetain();
    v3 = v75;
    v4 = 0;
    v5 = MEMORY[0x1E0DEE9D8];
    HIDWORD(v84) = v2;
    do
    {
      if (v4 >= *(_QWORD *)(v3 + 16))
        goto LABEL_105;
      sub_1AE7AE028();
      v91 = *(_QWORD *)v6;
      v87 = v5;
      v89 = *(_QWORD *)(v6 + 8);
      v7 = *(_QWORD *)(v6 + 24);
      v8 = *(unsigned __int16 *)(v6 + 32);
      v9 = *(unsigned __int8 *)(v6 + 34);
      v10 = *(_QWORD *)(v6 + 72);
      v85 = *(_QWORD *)(v6 + 16);
      v76 = v11 + 1;
      v12 = *(_QWORD *)(v6 + 64);
      v13 = *(_QWORD *)(v6 + 48);
      sub_1AE64A2FC(v101);
      v15 = v101[0];
      v14 = v101[1];
      v16 = v101[3];
      v81 = v101[2];
      v17 = v101[4];
      sub_1AE4F6A24();
      v78 = v7;
      v77 = __PAIR64__(v8, v9);
      sub_1AE525B74(v91, v89, v85, v7, v8, v9);
      v18 = (unint64_t)(v81 + 64) >> 6;
      v82 = v13;
      sub_1AE4F66CC();
      v80 = v12;
      sub_1AE4F66C4();
      v79 = v10;
      sub_1AE4F6804();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = MEMORY[0x1E0DEE9D8];
      if (v17)
      {
LABEL_5:
        sub_1AE7AE2C0();
        v21 = v20 | (v16 << 6);
        goto LABEL_23;
      }
      while (1)
      {
        v22 = v16 + 1;
        if (__OFADD__(v16, 1))
          goto LABEL_103;
        if (v22 >= v18)
          break;
        if (!*(_QWORD *)(v14 + 8 * v22))
        {
          if (v16 + 2 >= v18)
            break;
          if (!*(_QWORD *)(v14 + 8 * (v16 + 2)))
          {
            if (v16 + 3 >= v18)
              break;
            if (!*(_QWORD *)(v14 + 8 * (v16 + 3)))
            {
              if (v16 + 4 >= v18)
                break;
              if (!*(_QWORD *)(v14 + 8 * (v16 + 4)))
              {
                if (v16 + 5 >= v18)
                  break;
                if (!*(_QWORD *)(v14 + 8 * (v16 + 5)))
                {
                  if (v16 + 6 >= v18)
                    break;
                  if (!*(_QWORD *)(v14 + 8 * (v16 + 6)))
                  {
                    v23 = v16 + 7;
                    while (v23 < v18)
                    {
                      if (*(_QWORD *)(v14 + 8 * v23++))
                        goto LABEL_22;
                    }
                    break;
                  }
                }
              }
            }
          }
        }
LABEL_22:
        sub_1AE7ADFF8();
        v16 = v25;
LABEL_23:
        v26 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v21);
        v27 = *(_QWORD *)(v26 + 16);
        v28 = *(_QWORD *)(v19 + 16);
        if (__OFADD__(v28, v27))
          goto LABEL_97;
        sub_1AE4F6730();
        if (!sub_1AE7ADE10() || v28 + v27 > *(_QWORD *)(v19 + 24) >> 1)
        {
          sub_1AE7ADEF8();
          v19 = v29;
        }
        if (*(_QWORD *)(v26 + 16))
        {
          sub_1AE7AE2AC();
          if (v30 != v31)
            goto LABEL_101;
          sub_1AE509638();
          v34 = v34 || v32 >= v33;
          if (!v34)
            goto LABEL_106;
          swift_arrayInitWithCopy();
          if (v27)
          {
            v35 = *(_QWORD *)(v19 + 16);
            v31 = __OFADD__(v35, v27);
            v36 = v35 + v27;
            if (v31)
              goto LABEL_102;
            *(_QWORD *)(v19 + 16) = v36;
          }
        }
        else if (v27)
        {
          goto LABEL_98;
        }
        sub_1AE4F81B8();
        if (v17)
          goto LABEL_5;
      }
      sub_1AE4F6648();
      swift_release();
      sub_1AE525C94(v91, v89, v85, v78, HIDWORD(v77), v77);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AE4F6648();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v37 = *(_QWORD *)(v19 + 16);
      if (v37)
      {
        v38 = 0;
        v90 = v19;
        v92 = v19 + 32;
        v39 = HIDWORD(v84);
        v5 = v87;
        v83 = v37;
        while (1)
        {
          sub_1AE4FFCC0(v99, (const void *)(v92 + 144 * v38));
          if (v39)
          {
            if (v39 != 1)
              __asm { BR              X9 }
          }
          else
          {
            v40 = v100;
            if (!*(_QWORD *)(v100 + 16))
              __asm { BR              X9 }
            sub_1AE64A2FC(v102);
            v41 = v102[0];
            v42 = v102[1];
            v44 = v102[2];
            v43 = v102[3];
            v45 = v102[4];
            v46 = sub_1AE4F6730();
            sub_1AE7ADF34(v46, v47, v48, v49, v50, v51, v52, v53, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79,
              v80,
              v82,
              v83,
              v84,
              v85,
              v38,
              v5,
              v90,
              v92,
              v93,
              v94,
              v95,
              v96[0],
              v96[1],
              v96[2],
              v96[3],
              v96[4],
              v96[5],
              v96[6],
              v96[7],
              v96[8],
              v96[9],
              v96[10],
              v96[11],
              v96[12],
              v96[13],
              v96[14],
              v96[15],
              v97,
              v98,
              v99[0]);
            v54 = (unint64_t)(v44 + 64) >> 6;
            v85 = v40;
            sub_1AE4F6730();
            v55 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (v45)
            {
LABEL_47:
              sub_1AE7AE034();
              goto LABEL_65;
            }
            while (1)
            {
              v57 = v43 + 1;
              if (__OFADD__(v43, 1))
                goto LABEL_100;
              if (v57 >= v54)
                goto LABEL_82;
              if (!*(_QWORD *)(v42 + 8 * v57))
              {
                if (v43 + 2 >= v54)
                  goto LABEL_82;
                if (!*(_QWORD *)(v42 + 8 * (v43 + 2)))
                {
                  if (v43 + 3 >= v54)
                    goto LABEL_82;
                  if (!*(_QWORD *)(v42 + 8 * (v43 + 3)))
                  {
                    if (v43 + 4 >= v54)
                      goto LABEL_82;
                    if (!*(_QWORD *)(v42 + 8 * (v43 + 4)))
                    {
                      if (v43 + 5 >= v54)
                        goto LABEL_82;
                      if (!*(_QWORD *)(v42 + 8 * (v43 + 5)))
                      {
                        if (v43 + 6 >= v54)
                          goto LABEL_82;
                        if (!*(_QWORD *)(v42 + 8 * (v43 + 6)))
                          break;
                      }
                    }
                  }
                }
              }
LABEL_64:
              sub_1AE7ADE18();
LABEL_65:
              v60 = *(_QWORD *)(*(_QWORD *)(v41 + 56) + 8 * v56);
              v61 = *(_QWORD *)(v60 + 16);
              v62 = v55[2];
              if (__OFADD__(v62, v61))
              {
                __break(1u);
LABEL_95:
                __break(1u);
LABEL_96:
                __break(1u);
LABEL_97:
                __break(1u);
LABEL_98:
                __break(1u);
LABEL_99:
                __break(1u);
LABEL_100:
                __break(1u);
LABEL_101:
                __break(1u);
LABEL_102:
                __break(1u);
LABEL_103:
                __break(1u);
LABEL_104:
                __break(1u);
LABEL_105:
                __break(1u);
LABEL_106:
                sub_1AE4FE030();
                sub_1AE500FB4();
                __break(1u);
                JUMPOUT(0x1AE7A0B80);
              }
              sub_1AE4F66C4();
              if (!sub_1AE7728E0() || v62 + v61 > v55[3] >> 1)
              {
                sub_1AE7AE530();
                sub_1AE519C64();
                v55 = v63;
              }
              if (*(_QWORD *)(v60 + 16))
              {
                if ((v55[3] >> 1) - v55[2] < v61)
                  goto LABEL_96;
                sub_1AE509638();
                if (!v34 && v64 < v65)
                  goto LABEL_106;
                swift_arrayInitWithCopy();
                if (v61)
                {
                  v67 = v55[2];
                  v31 = __OFADD__(v67, v61);
                  v68 = v67 + v61;
                  if (v31)
                    goto LABEL_99;
                  v55[2] = v68;
                }
              }
              else if (v61)
              {
                goto LABEL_95;
              }
              sub_1AE4F665C();
              if (v45)
                goto LABEL_47;
            }
            v58 = v43 + 7;
            while (v58 < v54)
            {
              if (*(_QWORD *)(v42 + 8 * v58++))
                goto LABEL_64;
            }
LABEL_82:
            swift_bridgeObjectRelease();
            swift_release();
            sub_1AE525BB8((uint64_t)v99);
            if (v55[2])
            {
              sub_1AE4FFCC0(v96, v55 + 4);
              __asm { BR              X9 }
            }
            sub_1AE4F6728();
            v39 = HIDWORD(v84);
            v5 = v88;
            v37 = v83;
            v38 = v86;
          }
          if (++v38 == v37)
            break;
          if (v38 >= *(_QWORD *)(v90 + 16))
            goto LABEL_104;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_1AE4F66E8();
        v5 = v87;
      }
      v3 = v75;
      v4 = v76;
    }
    while (v76 != v73);
    swift_bridgeObjectRelease();
  }
  sub_1AE4F8180();
}

void sub_1AE7A0BBC()
{
  uint64_t v0;
  int64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v124;
  uint64_t v125;
  int64_t v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned __int8 v224;
  unsigned __int8 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned __int8 v260;
  unsigned __int8 v261;
  int v262;
  int v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD v269[5];
  char __s2[8];
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD v275[6];

  v166 = 0;
  v4 = *(_QWORD *)(v0 + 80);
  v5 = MEMORY[0x1E0DEE9D8];
  v268 = MEMORY[0x1E0DEE9D8];
  v186 = *(_QWORD *)(v4 + 16);
  v170 = v4;
  if (v186)
  {
    v178 = v4 + 32;
    v174 = 3558;
    sub_1AE4F6A24();
    v182 = 233;
    while (1)
    {
      sub_1AE7AE028();
      v7 = *(_QWORD *)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = *(_QWORD *)(v6 + 16);
      v9 = *(_QWORD *)(v6 + 24);
      v11 = *(unsigned __int16 *)(v6 + 32);
      v231 = *(unsigned __int16 *)(v6 + 32);
      v224 = *(_BYTE *)(v6 + 34);
      v259 = *(_QWORD *)(v6 + 72);
      v264 = *(_QWORD *)(v6 + 80);
      v191 = v12 + 1;
      v236 = *(_QWORD *)(v6 + 64);
      sub_1AE64A2FC(v269);
      v13 = v269[0];
      v14 = v269[1];
      v1 = v269[3];
      v267 = v269[2];
      v15 = v269[4];
      sub_1AE7AE0BC(v7, v8, v10, v9, v11);
      sub_1AE4F66CC();
      sub_1AE4F6A24();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1AE4F66CC();
      v214 = v8;
      v219 = v7;
      v204 = v9;
      v209 = v10;
      sub_1AE7AE0BC(v7, v8, v10, v9, v231);
      v16 = (unint64_t)(v267 + 64) >> 6;
      sub_1AE4F66CC();
      swift_bridgeObjectRetain();
      sub_1AE4F6A24();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v3 = MEMORY[0x1E0DEE9D8];
      if (v15)
      {
LABEL_4:
        v17 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v18 = v17 | (v1 << 6);
        goto LABEL_18;
      }
      while (1)
      {
        v19 = v1 + 1;
        if (__OFADD__(v1, 1))
          goto LABEL_161;
        if (v19 >= v16)
          goto LABEL_41;
        v20 = *(_QWORD *)(v14 + 8 * v19);
        if (!v20)
          break;
LABEL_17:
        v15 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v19 << 6);
        v1 = v19;
LABEL_18:
        v22 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v18);
        v23 = *(_QWORD *)(v22 + 16);
        v24 = *(_QWORD *)(v3 + 16);
        if (__OFADD__(v24, v23))
        {
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
          JUMPOUT(0x1AE7A1C14);
        }
        sub_1AE4F66CC();
        if (!swift_isUniquelyReferenced_nonNull_native() || v24 + v23 > *(_QWORD *)(v3 + 24) >> 1)
        {
          sub_1AE519C64();
          v3 = v25;
        }
        if (*(_QWORD *)(v22 + 16))
        {
          v26 = *(_QWORD *)(v3 + 16);
          if ((*(_QWORD *)(v3 + 24) >> 1) - v26 < v23)
            goto LABEL_157;
          sub_1AE7AE32C(v3 + 144 * v26);
          sub_1AE509638();
          v29 = v29 || v27 >= v28;
          if (!v29)
          {
LABEL_170:
            sub_1AE4FE030();
            sub_1AE500FB4();
            __break(1u);
            JUMPOUT(0x1AE7A1C7CLL);
          }
          swift_arrayInitWithCopy();
          if (v23)
          {
            v30 = *(_QWORD *)(v3 + 16);
            v31 = __OFADD__(v30, v23);
            v32 = v30 + v23;
            if (v31)
              goto LABEL_160;
            *(_QWORD *)(v3 + 16) = v32;
          }
        }
        else if (v23)
        {
          goto LABEL_156;
        }
        sub_1AE4F9038();
        if (v15)
          goto LABEL_4;
      }
      v21 = v1 + 2;
      if (v1 + 2 >= v16)
        goto LABEL_41;
      v20 = *(_QWORD *)(v14 + 8 * v21);
      if (v20)
        break;
      v21 = v1 + 3;
      if (v1 + 3 >= v16)
        goto LABEL_41;
      v20 = *(_QWORD *)(v14 + 8 * v21);
      if (v20)
        break;
      v21 = v1 + 4;
      if (v1 + 4 >= v16)
        goto LABEL_41;
      v20 = *(_QWORD *)(v14 + 8 * v21);
      if (v20)
        break;
      v21 = v1 + 5;
      if (v1 + 5 >= v16)
        goto LABEL_41;
      v20 = *(_QWORD *)(v14 + 8 * v21);
      if (v20)
        break;
      v19 = v1 + 6;
      if (v1 + 6 < v16)
      {
        v20 = *(_QWORD *)(v14 + 8 * v19);
        if (!v20)
        {
          v33 = v1 + 7;
          do
          {
            if (v33 >= v16)
              goto LABEL_41;
            v20 = *(_QWORD *)(v14 + 8 * v33++);
          }
          while (!v20);
          v19 = v33 - 1;
        }
        goto LABEL_17;
      }
LABEL_41:
      sub_1AE4F9038();
      v34 = swift_release();
      sub_1AE7ADE64(v34, v35, v36, v37, v38, v39, v40, v41, v150, v154, v158, v162, v166, v170, v174, v178, v182, v186, v191,
        v195,
        v199,
        v204,
        v209,
        v214,
        v219,
        v224,
        v229,
        v231);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AE4F9038();
      sub_1AE7AE178();
      swift_bridgeObjectRelease();
      v2 = *(_QWORD *)(v3 + 16);
      if (v2)
      {
        sub_1AE4F81B0();
        __asm { BR              X10 }
      }
      v42 = sub_1AE4F6718();
      sub_1AE7ADE64(v42, v43, v44, v45, v46, v47, v48, v49, v151, v155, v159, v163, v167, v171, v175, v179, v183, v187, v192,
        v196,
        v200,
        v205,
        v210,
        v215,
        v220,
        v225,
        v230,
        v232);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1AE7AE178();
      swift_bridgeObjectRelease();
      sub_1AE60F400();
      if (v190 == v186)
      {
        sub_1AE4F6824();
        v5 = v268;
        goto LABEL_45;
      }
    }
    v19 = v21;
    goto LABEL_17;
  }
LABEL_45:
  v50 = *(_QWORD *)(v5 + 16);
  v51 = MEMORY[0x1E0DEE9D8];
  if (v50)
  {
    sub_1AE4FB75C();
    v52 = MEMORY[0x1E0DEE9D8];
    v53 = 32;
    do
    {
      v1 = *(_QWORD *)(v5 + v53);
      if ((sub_1AE7728E0() & 1) == 0)
      {
        sub_1AE7ADBFC();
        v52 = v54;
      }
      v2 = *(_QWORD *)(v52 + 16);
      if (v2 >= *(_QWORD *)(v52 + 24) >> 1)
      {
        sub_1AE7ADBFC();
        v52 = v55;
      }
      *(_QWORD *)(v52 + 16) = v2 + 1;
      *(_QWORD *)(v52 + 8 * v2 + 32) = v1;
      v53 += 56;
      --v50;
    }
    while (v50);
    sub_1AE4F6648();
  }
  else
  {
    v52 = MEMORY[0x1E0DEE9D8];
  }
  sub_1AE4F6648();
  v275[0] = v51;
  if (v186)
  {
    v226 = v52;
    v233 = v170 + 32;
    sub_1AE4F6A24();
    do
    {
      sub_1AE7AE4E4();
      v58 = *(_QWORD *)(v56 + 16);
      v57 = *(_QWORD *)(v56 + 24);
      sub_1AE7ADBA4(v56);
      sub_1AE64A2FC(__s2);
      v60 = *(_QWORD *)__s2;
      v59 = v271;
      v61 = v273;
      v239 = v272;
      v62 = v274;
      v63 = sub_1AE7AE1F8();
      sub_1AE7ADFC8(v63, v64, v58, v57, v2);
      sub_1AE4FB75C();
      sub_1AE4F6A24();
      sub_1AE7ADFC0();
      sub_1AE7AE0C4();
      sub_1AE4FB75C();
      v251 = v3;
      v255 = v1;
      v65 = sub_1AE7AE1F8();
      v243 = v57;
      v247 = v58;
      sub_1AE7ADFC8(v65, v66, v58, v57, v264);
      v1 = (unint64_t)(v239 + 64) >> 6;
      sub_1AE4FB75C();
      sub_1AE7AE3E4();
      sub_1AE4F6A24();
      sub_1AE7ADFC0();
      sub_1AE7AE0C4();
      v2 = MEMORY[0x1E0DEE9D8];
      if (v62)
      {
LABEL_57:
        sub_1AE7ADFA0();
        goto LABEL_70;
      }
      while (1)
      {
        v68 = v61 + 1;
        if (__OFADD__(v61, 1))
          goto LABEL_164;
        if (v68 >= v1)
          goto LABEL_93;
        if (!*(_QWORD *)(v59 + 8 * v68))
        {
          if (v61 + 2 >= v1)
            goto LABEL_93;
          if (!*(_QWORD *)(v59 + 8 * (v61 + 2)))
          {
            if (v61 + 3 >= v1)
              goto LABEL_93;
            if (!*(_QWORD *)(v59 + 8 * (v61 + 3)))
            {
              if (v61 + 4 >= v1)
                goto LABEL_93;
              if (!*(_QWORD *)(v59 + 8 * (v61 + 4)))
              {
                if (v61 + 5 >= v1)
                  goto LABEL_93;
                if (!*(_QWORD *)(v59 + 8 * (v61 + 5)))
                {
                  if (v61 + 6 >= v1)
                    goto LABEL_93;
                  if (!*(_QWORD *)(v59 + 8 * (v61 + 6)))
                    break;
                }
              }
            }
          }
        }
LABEL_69:
        sub_1AE7ADEA0();
LABEL_70:
        v3 = *(_QWORD *)(*(_QWORD *)(v60 + 56) + 8 * v67);
        v69 = *(_QWORD *)(v3 + 16);
        v70 = *(_QWORD *)(v2 + 16);
        if (__OFADD__(v70, v69))
          goto LABEL_158;
        sub_1AE4F81B0();
        if (!sub_1AE7ADE10() || v70 + v69 > *(_QWORD *)(v2 + 24) >> 1)
        {
          sub_1AE7ADEF8();
          v2 = v71;
        }
        if (*(_QWORD *)(v3 + 16))
        {
          sub_1AE7AE2AC();
          if (v73 != v31)
            goto LABEL_162;
          sub_1AE7AE338(v72);
          sub_1AE509638();
          if (!v29 && v74 < v75)
            goto LABEL_170;
          swift_arrayInitWithCopy();
          if (v69)
          {
            v77 = *(_QWORD *)(v2 + 16);
            v31 = __OFADD__(v77, v69);
            v78 = v77 + v69;
            if (v31)
              goto LABEL_163;
            *(_QWORD *)(v2 + 16) = v78;
          }
        }
        else if (v69)
        {
          goto LABEL_159;
        }
        sub_1AE4F6718();
        if (v62)
          goto LABEL_57;
      }
      v79 = v61 + 7;
      while (v79 < v1)
      {
        if (*(_QWORD *)(v59 + 8 * v79++))
          goto LABEL_69;
      }
LABEL_93:
      sub_1AE4F6648();
      v81 = swift_release();
      sub_1AE7ADB90(v81, v82, v83, v84, v85, v86, v87, v88, v150, v154, v158, v162, v166, v170, v174, v178, v182, v186, v190,
        v195,
        v199,
        v203,
        v208,
        v213,
        v218,
        v226,
        v233,
        v236,
        v239,
        v243,
        v247,
        v251,
        v255,
        v259,
        SHIDWORD(v259),
        v264);
      sub_1AE7ADE48();
      sub_1AE4F7950();
      sub_1AE4F6648();
      sub_1AE7AE0B4();
      sub_1AE7ADF88();
      v89 = *(_QWORD *)(v2 + 16);
      if (v89)
      {
        sub_1AE4FB930();
        v90 = (_BYTE *)(v2 + 82);
        v91 = MEMORY[0x1E0DEE9D8];
        do
        {
          if (*v90 == 1)
          {
            v1 = *(_QWORD *)(v90 - 34);
            if ((sub_1AE7728E0() & 1) == 0)
            {
              sub_1AE7ADBFC();
              v91 = v94;
            }
            v93 = *(_QWORD *)(v91 + 16);
            v92 = *(_QWORD *)(v91 + 24);
            if (v93 >= v92 >> 1)
            {
              sub_1AE4FBAB0(v92);
              sub_1AE519D1C();
              v91 = v95;
            }
            *(_QWORD *)(v91 + 16) = v93 + 1;
            *(_QWORD *)(v91 + 8 * v93 + 32) = v1;
          }
          v90 += 144;
          --v89;
        }
        while (v89);
        sub_1AE4F66E8();
      }
      v96 = sub_1AE4F66E8();
      sub_1AE7ADB90(v96, v97, v98, v99, v100, v101, v102, v103, v152, v156, v160, v164, v168, v172, v176, v180, v184, v188, v193,
        v197,
        v201,
        v206,
        v211,
        v216,
        v221,
        v227,
        v234,
        v237,
        v240,
        v244,
        v248,
        v252,
        v256,
        v260,
        v262,
        v265);
      sub_1AE7ADE48();
      sub_1AE4F7950();
      sub_1AE7AE31C();
      sub_1AE7AE0B4();
      sub_1AE7ADF88();
      sub_1AE7AE4A4();
    }
    while (v236 != v186);
    sub_1AE4F6824();
    v222 = v275[0];
    sub_1AE4F6A24();
    do
    {
      sub_1AE7AE4E4();
      v106 = *(_QWORD *)(v104 + 16);
      v105 = *(_QWORD *)(v104 + 24);
      sub_1AE7ADBA4(v104);
      sub_1AE64A2FC(v275);
      v108 = v275[0];
      v107 = v275[1];
      v109 = v275[3];
      v241 = v275[2];
      v110 = v275[4];
      v111 = sub_1AE7AE1F8();
      sub_1AE7ADFC8(v111, v112, v106, v105, v2);
      sub_1AE4FB75C();
      sub_1AE4F6A24();
      sub_1AE7ADFC0();
      sub_1AE7AE0C4();
      sub_1AE4FB75C();
      v253 = v3;
      v257 = v1;
      v113 = sub_1AE7AE1F8();
      v245 = v105;
      v249 = v106;
      sub_1AE7ADFC8(v113, v114, v106, v105, v264);
      v1 = (unint64_t)(v241 + 64) >> 6;
      sub_1AE4FB75C();
      sub_1AE7AE3E4();
      sub_1AE4F6A24();
      sub_1AE7ADFC0();
      sub_1AE7AE0C4();
      v2 = MEMORY[0x1E0DEE9D8];
      if (v110)
      {
LABEL_106:
        sub_1AE7ADFA0();
        goto LABEL_119;
      }
      while (1)
      {
        v116 = v109 + 1;
        if (__OFADD__(v109, 1))
          goto LABEL_169;
        if (v116 >= v1)
          goto LABEL_142;
        if (!*(_QWORD *)(v107 + 8 * v116))
        {
          if (v109 + 2 >= v1)
            goto LABEL_142;
          if (!*(_QWORD *)(v107 + 8 * (v109 + 2)))
          {
            if (v109 + 3 >= v1)
              goto LABEL_142;
            if (!*(_QWORD *)(v107 + 8 * (v109 + 3)))
            {
              if (v109 + 4 >= v1)
                goto LABEL_142;
              if (!*(_QWORD *)(v107 + 8 * (v109 + 4)))
              {
                if (v109 + 5 >= v1)
                  goto LABEL_142;
                if (!*(_QWORD *)(v107 + 8 * (v109 + 5)))
                {
                  if (v109 + 6 >= v1)
                    goto LABEL_142;
                  if (!*(_QWORD *)(v107 + 8 * (v109 + 6)))
                    break;
                }
              }
            }
          }
        }
LABEL_118:
        sub_1AE7ADEA0();
LABEL_119:
        v3 = *(_QWORD *)(*(_QWORD *)(v108 + 56) + 8 * v115);
        v117 = *(_QWORD *)(v3 + 16);
        v118 = *(_QWORD *)(v2 + 16);
        if (__OFADD__(v118, v117))
        {
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
          JUMPOUT(0x1AE7A1C34);
        }
        sub_1AE4F81B0();
        if (!sub_1AE7ADE10() || v118 + v117 > *(_QWORD *)(v2 + 24) >> 1)
        {
          sub_1AE7ADEF8();
          v2 = v119;
        }
        if (*(_QWORD *)(v3 + 16))
        {
          v120 = *(_QWORD *)(v2 + 16);
          if ((*(_QWORD *)(v2 + 24) >> 1) - v120 < v117)
            goto LABEL_167;
          sub_1AE7AE338(v120);
          sub_1AE509638();
          if (!v29 && v121 < v122)
            goto LABEL_170;
          swift_arrayInitWithCopy();
          if (v117)
          {
            v124 = *(_QWORD *)(v2 + 16);
            v31 = __OFADD__(v124, v117);
            v125 = v124 + v117;
            if (v31)
              goto LABEL_168;
            *(_QWORD *)(v2 + 16) = v125;
          }
        }
        else if (v117)
        {
          goto LABEL_166;
        }
        sub_1AE4F6718();
        if (v110)
          goto LABEL_106;
      }
      v126 = v109 + 7;
      while (v126 < v1)
      {
        if (*(_QWORD *)(v107 + 8 * v126++))
          goto LABEL_118;
      }
LABEL_142:
      sub_1AE4F6648();
      v128 = swift_release();
      sub_1AE7ADB90(v128, v129, v130, v131, v132, v133, v134, v135, v150, v154, v158, v162, v166, v170, v174, v178, v182, v186, v190,
        v195,
        v199,
        v203,
        v208,
        v213,
        v222,
        v226,
        v233,
        v236,
        v241,
        v245,
        v249,
        v253,
        v257,
        v259,
        SHIDWORD(v259),
        v264);
      sub_1AE7ADE48();
      sub_1AE4F7950();
      sub_1AE4F6648();
      sub_1AE7AE0B4();
      sub_1AE7ADF88();
      v136 = *(_QWORD *)(v2 + 16);
      if (v136)
      {
        sub_1AE4FB930();
        v137 = (_BYTE *)(v2 + 162);
        v138 = MEMORY[0x1E0DEE9D8];
        do
        {
          if (*v137 == 1)
          {
            v1 = *(_QWORD *)(v137 - 34);
            if ((sub_1AE7728E0() & 1) == 0)
            {
              sub_1AE7ADBFC();
              v138 = v140;
            }
            v139 = *(_QWORD *)(v138 + 16);
            if (v139 >= *(_QWORD *)(v138 + 24) >> 1)
            {
              sub_1AE7ADBFC();
              v138 = v141;
            }
            *(_QWORD *)(v138 + 16) = v139 + 1;
            *(_QWORD *)(v138 + 8 * v139 + 32) = v1;
          }
          v137 += 144;
          --v136;
        }
        while (v136);
        sub_1AE4F66E8();
      }
      v142 = sub_1AE4F66E8();
      sub_1AE7ADB90(v142, v143, v144, v145, v146, v147, v148, v149, v153, v157, v161, v165, v169, v173, v177, v181, v185, v189, v194,
        v198,
        v202,
        v207,
        v212,
        v217,
        v223,
        v228,
        v235,
        v238,
        v242,
        v246,
        v250,
        v254,
        v258,
        v261,
        v263,
        v266);
      sub_1AE7ADE48();
      sub_1AE4F7950();
      sub_1AE7AE31C();
      sub_1AE7AE0B4();
      sub_1AE7ADF88();
      sub_1AE7AE4A4();
    }
    while (v236 != v186);
    sub_1AE4F6824();
  }
  sub_1AE60EEC0();
  sub_1AE7AE4A4();
  sub_1AE898248();
}

void KnosisFact.splitSubentityIdentifier()()
{
  __asm { BR              X11 }
}

uint64_t sub_1AE7A1D10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = swift_bridgeObjectRetain();
  sub_1AE4F7630();
  sub_1AE7AE124();
  v1 = sub_1AE9267D8();
  sub_1AE4F665C();
  if (*(_QWORD *)(v1 + 16) <= 2uLL)
    goto LABEL_12;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1AE7AA5DC();
    v1 = v10;
  }
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    __break(1u);
    JUMPOUT(0x1AE7A1F08);
  }
  *(_QWORD *)(v1 + 16) = v2 - 1;
  if (v2 == 1)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  *(_QWORD *)(v1 + 16) = v2 - 2;
  if (v2 == 2)
  {
    sub_1AE4F9038();
    goto LABEL_11;
  }
  *(_QWORD *)(v1 + 16) = v2 - 3;
  sub_1AE4F67AC();
  sub_1AE7AE3EC();
  MEMORY[0x1AF4530E8]();
  sub_1AE4F6728();
  v3 = sub_1AE7AE04C();
  EntityIdentifier.init(_:)(v3, v4, v5);
  if ((v11 & 1) != 0)
  {
    sub_1AE4F9038();
  }
  else
  {
    sub_1AE7AE3F8();
    MEMORY[0x1AF4530E8]();
    sub_1AE4F66E8();
    v7 = sub_1AE7AE04C();
    EntityPredicate.init(id:)(v7, v8, v9);
    if (v11)
      sub_1AE7AE324();
  }
LABEL_12:
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)v0 = 0u;
  return result;
}

void sub_1AE7A1F1C()
{
  sub_1AE4F67EC();
  __asm { BR              X10 }
}

void sub_1AE7A1F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1AE4F6804();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = v2;
  sub_1AE4F667C();
}

uint64_t sub_1AE7A3974()
{
  uint64_t v0;
  _QWORD *v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[96];
  unsigned __int8 v48;
  _QWORD v49[4];
  __int16 v50;
  _QWORD v51[4];
  __int16 v52;
  _QWORD v53[4];
  __int16 v54;

  if (!_Records_GDEntityPredicate_records)
    goto LABEL_35;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 4) >= 2674)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 5) >= 3558)
  {
LABEL_30:
    __break(1u);
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v43 = v1[6];
  v2 = *((_WORD *)_Records_GDEntityPredicate_records + 12);
  sub_1AE4FD008();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v53[0] = v1;
  v53[1] = v0;
  v53[2] = sub_1AE7ADCE4();
  v53[3] = v3;
  v54 = v2;
  v44 = v1[9];
  sub_1AE515B14((uint64_t)v53, v44);
  v5 = v4;
  sub_1AE4F81B8();
  sub_1AE4F6648();
  if (v5)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v6 = sub_1AE4FFCC0(v47, (const void *)(v5 + 32));
      v7 = v48;
      sub_1AE525F2C((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14, v42, v43, v44, 3558, 2674, 233, v45, v46);
      sub_1AE4F665C();
      __asm { BR              X9 }
    }
    sub_1AE4F665C();
  }
  if (!_Records_GDEntityPredicate_records)
    goto LABEL_38;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 184) >= 2674)
    goto LABEL_31;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 185) >= 3558)
  {
LABEL_32:
    __break(1u);
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v15 = *((_WORD *)_Records_GDEntityPredicate_records + 732);
  sub_1AE4FD008();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v51[0] = v1;
  v51[1] = v0;
  v51[2] = sub_1AE7ADCE4();
  v51[3] = v16;
  v52 = v15;
  sub_1AE515B14((uint64_t)v51, v44);
  v18 = v17;
  sub_1AE4F665C();
  sub_1AE4F6648();
  if (v18)
  {
    if (*(_QWORD *)(v18 + 16))
    {
      v19 = sub_1AE4FFCC0(v47, (const void *)(v18 + 32));
      v20 = v48;
      sub_1AE525F2C((uint64_t)v19, v21, v22, v23, v24, v25, v26, v27, (uint64_t)v1, v43, v44, 3558, 2674, 233, v18, v46);
      sub_1AE4F81B8();
      __asm { BR              X8 }
    }
    sub_1AE4F67AC();
  }
  if (!_Records_GDEntityPredicate_records)
    goto LABEL_41;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 190) >= 2674)
    goto LABEL_33;
  if (*((uint64_t *)_Records_GDEntityPredicate_records + 191) >= 3558)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (!_Records_GDEntityPredicate_predicateIds)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v28 = *((_WORD *)_Records_GDEntityPredicate_records + 756);
  sub_1AE4FD008();
  if (!_Records_GDEntityPredicate_labels)
  {
LABEL_43:
    __break(1u);
    JUMPOUT(0x1AE7A4134);
  }
  v49[0] = v1;
  v49[1] = v0;
  v49[2] = sub_1AE7ADCE4();
  v49[3] = v29;
  v50 = v28;
  sub_1AE515B14((uint64_t)v49, v44);
  v31 = v30;
  sub_1AE4F665C();
  sub_1AE4F6648();
  if (v31)
  {
    if (*(_QWORD *)(v31 + 16))
    {
      v32 = sub_1AE4FFCC0(v47, (const void *)(v31 + 32));
      v33 = v48;
      sub_1AE525F2C((uint64_t)v32, v34, v35, v36, v37, v38, v39, v40, (uint64_t)v1, v43, v44, 3558, 2674, 233, v31, v46);
      sub_1AE4F81B8();
      __asm { BR              X8 }
    }
    sub_1AE4F66E8();
  }
  result = sub_1AE505D44();
  v1[5] = 0;
  v1[6] = 0xE000000000000000;
  return result;
}

uint64_t sub_1AE7A4198(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD *@<X8>);
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[56];
  __n128 v31;
  __n128 v32;
  __int16 v33;
  __n128 v34;
  __n128 v35;
  __int16 v36;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = v1;
    v4 = result;
    swift_bridgeObjectRetain();
    v5 = 0;
    v29 = v2 - 1;
    for (i = 32; ; i += 144)
    {
      v7 = v4;
      sub_1AE4FFCC0(v30, (const void *)(v4 + i));
      v34 = v31;
      v35 = v32;
      v36 = v33;
      sub_1AE525A98((uint64_t)v30);
      sub_1AE525A98((uint64_t)v30);
      sub_1AE4F6708();
      sub_1AE4F6804();
      sub_1AE6263E0((uint64_t)v5);
      swift_isUniquelyReferenced_nonNull_native();
      v8 = *(_QWORD *)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0x8000000000000000;
      v9 = sub_1AE536DB0();
      if (__OFADD__(*(_QWORD *)(v8 + 16), (v10 & 1) == 0))
        break;
      v11 = v9;
      v12 = v10;
      sub_1AE501548(&qword_1EED9B1E0);
      if ((sub_1AE926A54() & 1) != 0)
      {
        v13 = sub_1AE536DB0();
        if ((v12 & 1) != (v14 & 1))
          goto LABEL_23;
        v11 = v13;
      }
      *(_QWORD *)(v3 + 72) = v8;
      swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(v3 + 72);
      if ((v12 & 1) == 0)
      {
        sub_1AE7AE144(v15 + 8 * (v11 >> 6));
        sub_1AE7AE418((__n128 *)(v16 + v11 * v17), v34, v35);
        *(_QWORD *)(v18 + 8 * v11) = MEMORY[0x1E0DEE9D8];
        v19 = *(_QWORD *)(v15 + 16);
        v20 = v19 + 1;
        v21 = __OFADD__(v19, 1);
        sub_1AE4F66CC();
        if (v21)
          goto LABEL_22;
        *(_QWORD *)(v15 + 16) = v20;
        sub_1AE4F6708();
      }
      swift_bridgeObjectRetain();
      v22 = *(_QWORD *)(v15 + 56);
      sub_1AE4F9038();
      v23 = *(_QWORD *)(v22 + 8 * v11);
      v24 = sub_1AE4F77E0();
      *(_QWORD *)(v22 + 8 * v11) = v23;
      if ((v24 & 1) == 0)
      {
        sub_1AE7ADEEC();
        v23 = v27;
        *(_QWORD *)(v22 + 8 * v11) = v27;
      }
      v26 = *(_QWORD *)(v23 + 16);
      v25 = *(_QWORD *)(v23 + 24);
      if (v26 >= v25 >> 1)
      {
        sub_1AE506008(v25);
        sub_1AE7ADEEC();
        v23 = v28;
        *(_QWORD *)(v22 + 8 * v11) = v28;
      }
      v4 = v7;
      *(_QWORD *)(v23 + 16) = v26 + 1;
      sub_1AE4FFCC0((void *)(v23 + 144 * v26 + 32), v30);
      sub_1AE525BB8((uint64_t)v30);
      sub_1AE4F67AC();
      sub_1AE4F76D8();
      if (!v29)
        return sub_1AE4F66E8();
      --v29;
      v5 = sub_1AE7A43FC;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    result = sub_1AE926DE4();
    __break(1u);
  }
  return result;
}

void sub_1AE7A43FC(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
}

void sub_1AE7A440C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(unsigned __int8 *)(v2 + 34);
  sub_1AE501548(&qword_1EED9A560);
  v6 = sub_1AE4F66BC();
  *(_OWORD *)(v6 + 16) = xmmword_1AE933BD0;
  v7 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v6 + 32) = a1;
  *(_QWORD *)(v6 + 40) = a2;
  sub_1AE4F67A4();
  v8 = MEMORY[0x1AF45322C](45, 0xE100000000000000, 50);
  *(_QWORD *)(v6 + 88) = v7;
  *(_QWORD *)(v6 + 64) = v8;
  *(_QWORD *)(v6 + 72) = v9;
  sub_1AE50AD74();
  sub_1AE4F6648();
  v10 = sub_1AE4F66BC();
  *(_OWORD *)(v10 + 16) = xmmword_1AE93D1B0;
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  *(_QWORD *)(v10 + 88) = v7;
  *(_QWORD *)(v10 + 56) = v7;
  *(_QWORD *)(v10 + 64) = 0x4920524557534E41;
  *(_QWORD *)(v10 + 72) = 0xEA00000000003A44;
  __asm { BR              X9 }
}

uint64_t sub_1AE7A4540()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  __n128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  unsigned __int8 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  unsigned __int8 v104;

  sub_1AE4F67A4();
  sub_1AE4FB75C();
  v5 = v2;
  v6 = MEMORY[0x1E0DEA968];
  v0[15] = MEMORY[0x1E0DEA968];
  v0[12] = v5;
  v0[13] = v74;
  v90 = 40;
  v91 = 0xE100000000000000;
  swift_bridgeObjectRetain();
  sub_1AE5FBF70();
  v7 = v6;
  swift_bridgeObjectRelease();
  sub_1AE4F7838();
  v0[19] = v6;
  v0[16] = 40;
  v0[17] = 0xE100000000000000;
  sub_1AE50AD74();
  sub_1AE4F665C();
  v8 = sub_1AE4F66BC();
  *(_OWORD *)(v8 + 16) = xmmword_1AE93D190;
  *(_QWORD *)(v8 + 32) = v4;
  *(_QWORD *)(v8 + 40) = v3;
  *(_QWORD *)(v8 + 56) = v6;
  *(_QWORD *)(v8 + 64) = 0x696C617574786554;
  *(_QWORD *)(v8 + 72) = 0xEF3A6E6F6974617ALL;
  *(_QWORD *)(v8 + 120) = v6;
  v9 = 0xD000000000000011;
  if (v1)
    v9 = v89;
  v10 = 0x80000001AE984E70;
  if (v1)
    v10 = v1;
  *(_QWORD *)(v8 + 88) = v6;
  *(_QWORD *)(v8 + 96) = v9;
  *(_QWORD *)(v8 + 104) = v10;
  sub_1AE4F67A4();
  sub_1AE4F6708();
  sub_1AE50AD74();
  sub_1AE4F6648();
  if (*(_QWORD *)(v80 + 16))
  {
    v11 = sub_1AE4F66BC();
    *(_OWORD *)(v11 + 16) = xmmword_1AE93D190;
    *(_QWORD *)(v11 + 32) = v4;
    *(_QWORD *)(v11 + 40) = v3;
    *(_QWORD *)(v11 + 88) = v6;
    *(_QWORD *)(v11 + 56) = v6;
    strcpy((char *)(v11 + 64), "REQUEST IDs:");
    *(_BYTE *)(v11 + 77) = 0;
    *(_WORD *)(v11 + 78) = -5120;
    v90 = v80;
    sub_1AE4F67A4();
    sub_1AE4FB930();
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE52FB78((unint64_t *)&qword_1ED318BD0, &qword_1ED319DE0, MEMORY[0x1E0DEAF20]);
    v12 = sub_1AE925DC4();
    v14 = v13;
    sub_1AE4F66E8();
    *(_QWORD *)(v11 + 120) = v6;
    *(_QWORD *)(v11 + 96) = v12;
    *(_QWORD *)(v11 + 104) = v14;
    sub_1AE50AD74();
    sub_1AE4F6648();
  }
  sub_1AE7AE34C();
  v15 = v83;
  v85 = v4;
  v16 = v81;
  v73 = v1;
  if (*(_QWORD *)(v83 + 16) && v88 >= 1)
  {
    v17 = *(_QWORD *)(v83 + 16);
    v18 = (__n128 *)swift_allocObject();
    sub_1AE7AE084(v18, v19, v20, v21, v22, v23, v24, v25, v65, v66, v67, v68, v69, v71, v1, v74, v76, v78, v80,
      v81,
      v26);
    v27[7] = v6;
    v27[8] = 0x4620544E45524150;
    v27[9] = v6;
    sub_1AE4F67A4();
    sub_1AE50AD74();
    sub_1AE4F6648();
    sub_1AE4F66C4();
    v28 = 0;
    do
    {
      v29 = v15 + v28;
      v31 = *(_QWORD *)(v15 + v28 + 32);
      v30 = *(_QWORD *)(v15 + v28 + 40);
      v33 = *(_QWORD *)(v15 + v28 + 48);
      v32 = *(_QWORD *)(v15 + v28 + 56);
      v34 = *(_QWORD *)(v15 + v28 + 72);
      v35 = *(_QWORD *)(v15 + v28 + 96);
      v36 = *(_QWORD *)(v29 + 104);
      v37 = *(_QWORD *)(v29 + 112);
      v38 = *(_QWORD *)(v29 + 120);
      v39 = *(_BYTE *)(v29 + 128);
      v40 = *(_QWORD *)(v29 + 136);
      v41 = *(_BYTE *)(v29 + 66);
      v42 = *(unsigned __int16 *)(v29 + 64);
      v90 = v31;
      v91 = v30;
      v84 = v30;
      v92 = v33;
      v93 = v32;
      v86 = v33;
      v87 = v32;
      v94 = v42;
      v95 = v41;
      v96 = v34;
      v97 = *(_OWORD *)(v29 + 80);
      v98 = v35;
      v99 = v36;
      v100 = v37;
      v101 = v38;
      v102 = v39;
      v103 = v40;
      sub_1AE525B74(v31, v30, v33, v32, v42, v41);
      sub_1AE4F66C4();
      sub_1AE4F6804();
      sub_1AE4F6708();
      sub_1AE4F6730();
      sub_1AE4F67A4();
      sub_1AE925F74();
      v6 = 0xE100000000000000;
      sub_1AE7A440C(9, 0xE100000000000000);
      sub_1AE4F67AC();
      v15 = v83;
      sub_1AE525C94(v31, v84, v86, v87, v42, v41);
      sub_1AE4F81B8();
      sub_1AE4F76D8();
      sub_1AE7AE31C();
      swift_bridgeObjectRelease();
      sub_1AE4F6728();
      v28 += 112;
      --v17;
    }
    while (v17);
    sub_1AE4F665C();
    v4 = v85;
    v7 = MEMORY[0x1E0DEA968];
    v16 = v81;
    sub_1AE7AE34C();
  }
  v43 = (__n128 *)sub_1AE4F66BC();
  sub_1AE7AE084(v43, v44, v45, v46, v47, v48, v49, v50, v65, v66, v67, v68, v69, v71, v73, v74, v76, v78, v80, v81, v51);
  v52[7] = v7;
  v52[8] = 0x4620595449544E45;
  v52[9] = v6;
  sub_1AE4F67A4();
  sub_1AE50AD74();
  sub_1AE4F6648();
  sub_1AE525B74(v79, v75, v72, v16, v70, v77);
  swift_bridgeObjectRetain();
  sub_1AE4FB75C();
  sub_1AE4F6A24();
  sub_1AE4F66C4();
  sub_1AE4F66CC();
  v53 = sub_1AE7AE1A0();
  sub_1AE4F66E8();
  sub_1AE7AE3EC();
  sub_1AE525C94(v54, v55, v56, v82, v70, v57);
  sub_1AE4F9038();
  sub_1AE7AE178();
  sub_1AE4F66E8();
  sub_1AE736F74();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v53 + 16))
  {
    sub_1AE4FFCC0(&v90, (const void *)(v53 + 32));
    v59 = *((_QWORD *)&v97 + 1);
    v58 = v98;
    v60 = v104;
    v61 = sub_1AE4F66BC();
    *(_OWORD *)(v61 + 16) = xmmword_1AE93D1C0;
    *(_QWORD *)(v61 + 32) = v4;
    *(_QWORD *)(v61 + 40) = v3;
    *(_QWORD *)(v61 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v61 + 64) = 11565;
    *(_QWORD *)(v61 + 72) = 0xE200000000000000;
    v62 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v61 + 120) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v61 + 88) = v62;
    *(_QWORD *)(v61 + 96) = v59;
    *(_QWORD *)(v61 + 104) = v58;
    sub_1AE4F67A4();
    sub_1AE4F66CC();
    sub_1AE4FB75C();
    sub_1AE525A98((uint64_t)&v90);
    v63 = MEMORY[0x1E0DEA968];
    sub_1AE5FBA48();
    sub_1AE4F6648();
    sub_1AE4F7838();
    *(_QWORD *)(v61 + 128) = 40;
    *(_QWORD *)(v61 + 136) = 0xE100000000000000;
    *(_QWORD *)(v61 + 184) = v63;
    *(_QWORD *)(v61 + 152) = v63;
    *(_QWORD *)(v61 + 160) = 9;
    *(_QWORD *)(v61 + 168) = 0xE100000000000000;
    __asm { BR              X8 }
  }
  return sub_1AE4F6648();
}

uint64_t sub_1AE7A4F48(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  char v13;

  v2 = a1 == 0x6449726577736E61 && a2 == 0xE800000000000000;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 1701667182 && a2 == 0xE400000000000000;
    if (v6 || (sub_1AE926D60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x696C617574786574 && a2 == 0xEE006E6F6974617ALL;
      if (v7 || (sub_1AE926D60() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x7374636166 && a2 == 0xE500000000000000;
        if (v8 || (sub_1AE926D60() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x746E65726170 && a2 == 0xE600000000000000;
          if (v9 || (sub_1AE926D60() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            v10 = a1 == 0x65726F6373 && a2 == 0xE500000000000000;
            if (v10 || (sub_1AE926D60() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              v11 = a1 == 0x70756F7247677261 && a2 == 0xE800000000000000;
              if (v11 || (sub_1AE926D60() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else if (a1 == 0x4974736575716572 && a2 == 0xEA00000000007364)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                v13 = sub_1AE926D60();
                swift_bridgeObjectRelease();
                if ((v13 & 1) != 0)
                  return 7;
                else
                  return 8;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1AE7A527C()
{
  return 8;
}

uint64_t sub_1AE7A5284(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AE7A52B8 + 4 * byte_1AE95A598[a1]))(0x6449726577736E61, 0xE800000000000000);
}

uint64_t sub_1AE7A52B8()
{
  return 1701667182;
}

uint64_t sub_1AE7A52C8()
{
  return 0x696C617574786574;
}

uint64_t sub_1AE7A52EC()
{
  return 0x7374636166;
}

uint64_t sub_1AE7A5300()
{
  return 0x746E65726170;
}

uint64_t sub_1AE7A5314()
{
  return 0x65726F6373;
}

uint64_t sub_1AE7A5328()
{
  return 0x70756F7247677261;
}

uint64_t sub_1AE7A533C()
{
  return 0x4974736575716572;
}

uint64_t sub_1AE7A5358()
{
  unsigned __int8 *v0;

  return sub_1AE7A5284(*v0);
}

uint64_t sub_1AE7A5360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE7A4F48(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE7A5384@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1AE7A527C();
  *a1 = result;
  return result;
}

uint64_t sub_1AE7A53A8()
{
  sub_1AE7AAEBC();
  return sub_1AE926F94();
}

uint64_t sub_1AE7A53D0()
{
  sub_1AE7AAEBC();
  return sub_1AE926FA0();
}

void KnosisAnswer.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  sub_1AE507B40();
  v3 = v2;
  v4 = sub_1AE501548(&qword_1EEDA2AC8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F683C();
  sub_1AE4F9858(v3, v3[3]);
  sub_1AE7AAEBC();
  sub_1AE926F4C();
  sub_1AE7AAEF8();
  sub_1AE7AE26C();
  sub_1AE926CC4();
  if (!v0)
  {
    sub_1AE7AE304();
    sub_1AE7AE304();
    sub_1AE501548(&qword_1EEDA2AE0);
    sub_1AE7AAF34();
    sub_1AE4FC9E0();
    sub_1AE501548(&qword_1EEDA2A88);
    sub_1AE7AB2BC(&qword_1EEDA2A90, &qword_1EEDA2A88, (uint64_t (*)(void))sub_1AE7AA22C, MEMORY[0x1E0DEAF10]);
    sub_1AE7AE26C();
    sub_1AE4FC9E0();
    sub_1AE926CA0();
    sub_1AE7AAFFC();
    sub_1AE7AE26C();
    sub_1AE4FC9E0();
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE7AB268(&qword_1EEDA04C8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1AE4FC9E0();
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
  sub_1AE595D68();
  sub_1AE4FCE0C();
}

void sub_1AE7A56D0()
{
  KnosisAnswer.encode(to:)();
}

uint64_t KnosisAnswer.toEntity()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  __int128 v4;
  __int128 v5;
  _OWORD v6[3];
  unsigned __int16 v7;

  KnosisAnswer.extendedTriples()();
  sub_1AE6A31B0((_QWORD *(*)(uint64_t *__return_ptr))sub_1AE7AB0C8, (uint64_t)v6);
  result = sub_1AE4F9038();
  v3 = v7;
  if (HIBYTE(v7) <= 0xFEu)
  {
    if ((v7 & 0x100) != 0)
    {
      sub_1AE501548((uint64_t *)&unk_1ED319C60);
      return swift_willThrowTypedImpl();
    }
    else
    {
      v4 = v6[1];
      v5 = v6[2];
      *(_OWORD *)a1 = v6[0];
      *(_OWORD *)(a1 + 16) = v4;
      *(_OWORD *)(a1 + 32) = v5;
      *(_BYTE *)(a1 + 48) = v3;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

void KnosisAnswer.toGraphObject()(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  v6 = v1[6];
  v25 = v1[5];
  v24 = v1[7];
  v20 = v1[8];
  v7 = v1[10];
  v8 = v1[11];
  v23 = *((_BYTE *)v1 + 96);
  v21 = v1[9];
  v22 = v1[13];
  v9 = *((_BYTE *)v1 + 34);
  v10 = *((unsigned __int16 *)v1 + 16);
  sub_1AE501548(&qword_1EED9AAB8);
  v11 = sub_1AE4F66BC();
  *(_OWORD *)(v11 + 16) = xmmword_1AE934250;
  *(_QWORD *)(v11 + 32) = v2;
  *(_QWORD *)(v11 + 40) = v3;
  *(_QWORD *)(v11 + 48) = v5;
  *(_QWORD *)(v11 + 56) = v4;
  *(_WORD *)(v11 + 64) = v10;
  *(_BYTE *)(v11 + 66) = v9;
  *(_QWORD *)(v11 + 72) = v25;
  *(_QWORD *)(v11 + 80) = v6;
  *(_QWORD *)(v11 + 88) = v24;
  *(_QWORD *)(v11 + 96) = v20;
  *(_QWORD *)(v11 + 104) = v21;
  *(_QWORD *)(v11 + 112) = v7;
  *(_QWORD *)(v11 + 120) = v8;
  *(_BYTE *)(v11 + 128) = v23;
  *(_QWORD *)(v11 + 136) = v22;
  sub_1AE7AE3F8();
  sub_1AE525B74(v12, v13, v14, v15, v10, v9);
  sub_1AE4F67A4();
  sub_1AE4FB75C();
  sub_1AE4F6730();
  sub_1AE4F6708();
  swift_bridgeObjectRetain();
  ObjectSynthesisDictionaryMapping.init()(&v27);
  v16 = v27;
  type metadata accessor for InitializationResourcesManager();
  v17 = sub_1AE4F66BC();
  *(_QWORD *)(v17 + 16) = sub_1AE925C98();
  v18 = sub_1AE79F544(v16, v16, v11, v17);
  if (v26)
  {
    swift_release();
    sub_1AE4F9038();
    sub_1AE4F76D8();
  }
  else
  {
    sub_1AE56AE00(v18, &v27);
    sub_1AE4F66E8();
    swift_release();
    sub_1AE4F9038();
    sub_1AE4F76D8();
    if (v28)
    {
      swift_release();
      sub_1AE4F9038();
      swift_bridgeObjectRelease();
      sub_1AE50AF58(&v27, a1);
    }
    else
    {
      sub_1AE52FBE8((uint64_t)&v27, &qword_1EEDA2B10);
      *(_QWORD *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
  }
}

void KnosisAnswer.toGraphObject<A>(ofType:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;

  sub_1AE507B40();
  v53 = v2;
  v54 = v3;
  v50 = v4;
  v51 = v5;
  v40 = v6;
  v49 = sub_1AE523CF0(&qword_1EED9F7D8);
  v41 = sub_1AE4FBE7C();
  v7 = sub_1AE92670C();
  v37 = *(_QWORD *)(v7 - 8);
  v38 = v7;
  MEMORY[0x1E0C80A78](v7);
  v39 = (char *)&v36 - v8;
  v9 = *(_QWORD *)v0;
  v10 = *(_QWORD *)(v0 + 8);
  v11 = *(_QWORD *)(v0 + 16);
  v12 = *(_QWORD *)(v0 + 24);
  v13 = *(_QWORD *)(v0 + 40);
  v14 = *(_QWORD *)(v0 + 48);
  v47 = *(_QWORD *)(v0 + 56);
  v48 = v13;
  v15 = *(_QWORD *)(v0 + 64);
  v42 = v14;
  v43 = v15;
  v16 = *(_QWORD *)(v0 + 72);
  v17 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 88);
  v46 = *(unsigned __int8 *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 104);
  v44 = v16;
  v45 = v19;
  v20 = *(_BYTE *)(v0 + 34);
  v21 = *(unsigned __int16 *)(v0 + 32);
  sub_1AE501548(&qword_1EED9AAB8);
  v22 = sub_1AE4F66BC();
  *(_OWORD *)(v22 + 16) = xmmword_1AE934250;
  v23 = v9;
  *(_QWORD *)(v22 + 32) = v9;
  *(_QWORD *)(v22 + 40) = v10;
  v24 = v11;
  *(_QWORD *)(v22 + 48) = v11;
  *(_QWORD *)(v22 + 56) = v12;
  *(_WORD *)(v22 + 64) = v21;
  *(_BYTE *)(v22 + 66) = v20;
  *(_QWORD *)(v22 + 72) = v48;
  *(_QWORD *)(v22 + 80) = v14;
  v26 = v43;
  v25 = v44;
  *(_QWORD *)(v22 + 88) = v47;
  *(_QWORD *)(v22 + 96) = v26;
  *(_QWORD *)(v22 + 104) = v25;
  *(_QWORD *)(v22 + 112) = v17;
  *(_QWORD *)(v22 + 120) = v18;
  *(_BYTE *)(v22 + 128) = v46;
  *(_QWORD *)(v22 + 136) = v45;
  sub_1AE7AE0BC(v23, v10, v24, v12, v21);
  sub_1AE4F6708();
  sub_1AE4FB75C();
  sub_1AE4F67A4();
  sub_1AE4FB930();
  swift_bridgeObjectRetain();
  ObjectSynthesisDictionaryMapping.init()(v52);
  v27 = v52[0];
  type metadata accessor for InitializationResourcesManager();
  v28 = sub_1AE4F66BC();
  *(_QWORD *)(v28 + 16) = sub_1AE925C98();
  v52[0] = v27;
  v52[1] = v22;
  v52[2] = v28;
  v29 = CustomKnosisResultContext.graphObjectsFromAnswers<A>(ofType:)();
  if (v1)
  {
    swift_release();
    sub_1AE4F81B8();
    sub_1AE4F66E8();
  }
  else
  {
    v52[0] = v29;
    v30 = v41;
    v31 = sub_1AE9262B0();
    MEMORY[0x1AF454B70](MEMORY[0x1E0DEAF50], v31);
    v32 = (uint64_t)v39;
    sub_1AE926520();
    sub_1AE4F6718();
    swift_release();
    sub_1AE4F81B8();
    sub_1AE4F66E8();
    v33 = _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v32, 1, v30);
    v34 = v40;
    if (v33 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v32, v38);
      v35 = 1;
    }
    else
    {
      swift_release();
      sub_1AE4F9038();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v34, v32);
      v35 = 0;
    }
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v34, v35, 1, v51);
  }
  sub_1AE4FCE0C();
}

uint64_t Array<A>.prettyPrint()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    v2 = 0;
    do
    {
      sub_1AE7AE21C();
      sub_1AE525B74(v3, v4, v5, v6, v7, v8);
      sub_1AE4F66CC();
      sub_1AE4F6708();
      sub_1AE4F6708();
      sub_1AE4F81B0();
      sub_1AE4F6804();
      sub_1AE7A440C(0, 0xE000000000000000);
      sub_1AE7AE21C();
      sub_1AE525C94(v9, v10, v11, v12, v13, v14);
      sub_1AE4F6718();
      sub_1AE4F76D8();
      sub_1AE736F74();
      swift_bridgeObjectRelease();
      sub_1AE4F67AC();
      v2 += 112;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void GraphNode.asString.getter()
{
  uint64_t v0;

  if (!*(_BYTE *)(v0 + 34))
    sub_1AE4FB75C();
  sub_1AE4F6664();
}

void GraphNode.asPredicate.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  if (*((_BYTE *)v1 + 34) == 2)
  {
    v3 = *((_WORD *)v1 + 16);
    v5 = v1[2];
    v4 = v1[3];
    v8 = v1;
    v6 = *v1;
    v7 = v8[1];
    sub_1AE4F66C4();
    sub_1AE4F6730();
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v5 = 0;
    v4 = 0;
    v3 = 0;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = v3;
  sub_1AE4FCDD0();
}

void GraphNode.asType.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (*((_BYTE *)v1 + 34) == 3)
  {
    v4 = v1[2];
    v3 = v1[3];
    v6 = *v1;
    v5 = v1[1];
    v7 = *((_BYTE *)v1 + 32);
    sub_1AE4F66C4();
    sub_1AE4F6730();
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v4 = 0;
    v3 = 0;
    v7 = 0;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = v7;
  sub_1AE4FCDD0();
}

void GraphNode.description.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1AE7A5F94()
{
  uint64_t v1;

  sub_1AE4FB75C();
  sub_1AE509ECC();
  sub_1AE4F665C();
  sub_1AE4F7838();
  return v1;
}

void GraphNode.init(id:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;

  if ((sub_1AE926004() & 1) != 0
    && (sub_1AE4F66C4(), v6 = sub_1AE7AE074(), EntityIdentifier.init(_:)(v6, v7, v8), v21 != 1))
  {
    a1 = v20;
    sub_1AE4F665C();
    v12 = 0;
    v15 = 0;
    v14 = 0;
    v13 = 0;
    v16 = 1;
  }
  else
  {
    sub_1AE4F66C4();
    v9 = sub_1AE7AE074();
    EntityPredicate.init(id:)(v9, v10, v11);
    v12 = v21;
    if (v21)
    {
      v13 = v24;
      v15 = v22;
      v14 = v23;
      a1 = v20;
      sub_1AE4F665C();
      v16 = 2;
    }
    else
    {
      sub_1AE4F66C4();
      v17 = sub_1AE7AE074();
      EntityClass.init(id:)(v17, v18, v19);
      v15 = 0;
      v14 = 0;
      v13 = 0;
      v16 = 0;
      v12 = a2;
    }
  }
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 24) = v14;
  *(_WORD *)(a3 + 32) = v13;
  *(_BYTE *)(a3 + 34) = v16;
}

void GraphNode.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(v1 + 34);
  sub_1AE4F9858(a1, a1[3]);
  sub_1AE926F40();
  sub_1AE501548(&qword_1EEDA2B18);
  *(_OWORD *)(swift_initStackObject() + 16) = xmmword_1AE934250;
  __asm { BR              X9 }
}

uint64_t sub_1AE7A6178()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5[15];

  v2[4] = 0x676E69727473;
  v2[5] = 0xE600000000000000;
  sub_1AE4F6708();
  v2[6] = v0;
  v2[7] = v1;
  *(_QWORD *)(v3 - 56) = sub_1AE925C98();
  sub_1AE595318((uint64_t)v5, v5[3]);
  sub_1AE501548(&qword_1ED30F918);
  sub_1AE7AB0E0();
  sub_1AE926D78();
  sub_1AE4F81B8();
  return _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v5);
}

void GraphNode.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1AE7A62E4()
{
  sub_1AE4F8320();
  return sub_1AE925F14();
}

void sub_1AE7A6308()
{
  sub_1AE4F8320();
  sub_1AE926EF8();
  sub_1AE4F6624();
}

void static GraphNode.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_1AE7A63DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned __int8 v6;
  uint64_t v7;
  int v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (v8)
  {
    swift_bridgeObjectRetain();
    sub_1AE7AE2F8();
    sub_1AE7AE0BC(v11, v12, v13, v14, v15);
    v16 = sub_1AE7AE1A8();
    sub_1AE525C94(v16, v17, v18, v19, v20, v6);
    sub_1AE525C94(v2, v7, v4, v3, v7, v8);
    v10 = 0;
  }
  else
  {
    if (v0 == v2 && v1 == v7)
      v10 = 1;
    else
      v10 = sub_1AE7ADD54();
    sub_1AE7AE2F8();
    sub_1AE7ADBF4(v21, v22, v23, v24, v25);
    v26 = sub_1AE7ADEBC();
    sub_1AE7ADBF4(v26, v27, v28, v29, v5);
    v30 = sub_1AE7AE1D8();
    sub_1AE525C94(v30, v31, v32, v33, v34, 0);
    v35 = sub_1AE7AE0D4();
    sub_1AE525C94(v35, v36, v37, v38, v39, 0);
  }
  return v10 & 1;
}

void GraphNode.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 34);
  sub_1AE4F76E0();
  __asm { BR              X9 }
}

uint64_t sub_1AE7A66EC()
{
  sub_1AE926ED4();
  sub_1AE7ADE58();
  return sub_1AE4F905C();
}

void sub_1AE7A6794(_QWORD *a1)
{
  GraphNode.encode(to:)(a1);
}

void sub_1AE7A67B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 34);
  sub_1AE926EC8();
  __asm { BR              X9 }
}

uint64_t sub_1AE7A67F4()
{
  sub_1AE926ED4();
  sub_1AE925F14();
  return sub_1AE926F10();
}

void KnosisFact.id.getter()
{
  sub_1AE4F66CC();
  sub_1AE4F7714();
  sub_1AE4F6664();
}

void KnosisFact.id.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_1AE7AE204();
  *v1 = v2;
  v1[1] = v0;
  sub_1AE4F6624();
}

uint64_t (*KnosisFact.id.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t KnosisFact.subject.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(unsigned __int16 *)(v1 + 48);
  *(_WORD *)(a1 + 32) = v6;
  return sub_1AE7ADC34(v2, v3, v4, v5, v6, *(_BYTE *)(v1 + 50), a1);
}

__n128 KnosisFact.subject.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  char v5;
  __n128 result;
  __int128 v7;

  sub_1AE7ADC94(a1);
  sub_1AE525C94(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(unsigned __int16 *)(v2 + 48), *(_BYTE *)(v2 + 50));
  *(_OWORD *)(v2 + 16) = v7;
  *(_QWORD *)(v2 + 32) = v1;
  *(_QWORD *)(v2 + 40) = v3;
  *(_WORD *)(v2 + 48) = v4;
  *(_BYTE *)(v2 + 50) = v5;
  sub_1AE501BAC();
  return result;
}

uint64_t (*KnosisFact.subject.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t KnosisFact.predicate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(v1 + 72);
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_WORD *)(v1 + 88);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain();
  return sub_1AE4FBC60();
}

__n128 KnosisFact.predicate.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  __n128 result;
  __int128 v6;

  v6 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *((_WORD *)a1 + 16);
  swift_bridgeObjectRelease();
  sub_1AE4F6648();
  *(_OWORD *)(v1 + 56) = v6;
  *(_QWORD *)(v1 + 72) = v2;
  *(_QWORD *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = v4;
  sub_1AE501BAC();
  return result;
}

uint64_t (*KnosisFact.predicate.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t KnosisFact.object.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 96);
  v3 = *(_QWORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(unsigned __int16 *)(v1 + 128);
  *(_WORD *)(a1 + 32) = v6;
  return sub_1AE7ADC34(v2, v3, v4, v5, v6, *(_BYTE *)(v1 + 130), a1);
}

__n128 KnosisFact.object.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  char v5;
  __n128 result;
  __int128 v7;

  sub_1AE7ADC94(a1);
  sub_1AE525C94(*(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120), *(unsigned __int16 *)(v2 + 128), *(_BYTE *)(v2 + 130));
  *(_OWORD *)(v2 + 96) = v7;
  *(_QWORD *)(v2 + 112) = v1;
  *(_QWORD *)(v2 + 120) = v3;
  *(_WORD *)(v2 + 128) = v4;
  *(_BYTE *)(v2 + 130) = v5;
  sub_1AE501BAC();
  return result;
}

uint64_t (*KnosisFact.object.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t KnosisFact.qualifiers.getter()
{
  return swift_bridgeObjectRetain();
}

void KnosisFact.qualifiers.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 136) = a1;
  sub_1AE4F6664();
}

uint64_t (*KnosisFact.qualifiers.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t KnosisFact.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1AE595C2C();
  v1 = *(unsigned __int8 *)(v0 + 130);
  sub_1AE92691C();
  swift_bridgeObjectRelease();
  sub_1AE4FB930();
  sub_1AE7AE180();
  sub_1AE4F66E8();
  sub_1AE925F74();
  sub_1AE4F6730();
  sub_1AE5FBF70();
  sub_1AE4F81B8();
  sub_1AE7AE478();
  return ((uint64_t (*)(_QWORD))((char *)sub_1AE7A6BA0 + 4 * byte_1AE95A5BE[v1]))(0);
}

void sub_1AE7A6BA0()
{
  sub_1AE4FB75C();
  sub_1AE509ECC();
  sub_1AE4F665C();
  sub_1AE50AA58();
}

void KnosisFact.init(subject:predicate:object:)(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 34);
  sub_1AE501548(&qword_1EEDA2AF8);
  sub_1AE525A5C();
  sub_1AE925C98();
  __asm { BR              X9 }
}

uint64_t sub_1AE7A6CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_1AE4F66C4();
  *(_QWORD *)(v24 - 96) = v23;
  *(_QWORD *)(v24 - 88) = v22;
  sub_1AE4F67A4();
  sub_1AE4F7838();
  sub_1AE4F6728();
  v25 = *(_QWORD *)(v24 - 88);
  *(_QWORD *)(v24 - 96) = *(_QWORD *)(v24 - 96);
  *(_QWORD *)(v24 - 88) = v25;
  sub_1AE4F67A4();
  sub_1AE925F74();
  sub_1AE4F6728();
  v26 = *(_QWORD *)(v24 - 88);
  *(_QWORD *)(v24 - 96) = *(_QWORD *)(v24 - 96);
  *(_QWORD *)(v24 - 88) = v26;
  sub_1AE4F67A4();
  sub_1AE4F7838();
  v27 = sub_1AE4F6728();
  return ((uint64_t (*)(uint64_t))((char *)sub_1AE7A6D48 + 4 * byte_1AE95A5C8[a22]))(v27);
}

uint64_t sub_1AE7A6D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  sub_1AE4F81B0();
  *(_QWORD *)(v7 - 96) = v2;
  *(_QWORD *)(v7 - 88) = v6;
  sub_1AE4F67A4();
  sub_1AE7ADF7C();
  sub_1AE925F74();
  sub_1AE4F6728();
  result = sub_1AE4F6718();
  v9 = *(_QWORD *)(v7 - 88);
  *(_QWORD *)v0 = *(_QWORD *)(v7 - 96);
  *(_QWORD *)(v0 + 8) = v9;
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v18;
  *(_QWORD *)(v0 + 32) = v21;
  *(_QWORD *)(v0 + 40) = v20;
  *(_WORD *)(v0 + 48) = v19;
  *(_BYTE *)(v0 + 50) = v16;
  *(_DWORD *)(v0 + 51) = *(_DWORD *)(v7 - 101);
  *(_BYTE *)(v0 + 55) = *(_BYTE *)(v7 - 97);
  *(_QWORD *)(v0 + 56) = v5;
  *(_QWORD *)(v0 + 64) = v1;
  *(_QWORD *)(v0 + 72) = v17;
  *(_QWORD *)(v0 + 80) = v15;
  *(_WORD *)(v0 + 88) = v13;
  *(_WORD *)(v0 + 94) = *(_WORD *)(v7 - 92);
  *(_DWORD *)(v0 + 90) = *(_DWORD *)(v7 - 96);
  *(_QWORD *)(v0 + 96) = v4;
  *(_QWORD *)(v0 + 104) = v22;
  *(_QWORD *)(v0 + 112) = v14;
  *(_QWORD *)(v0 + 120) = v12;
  *(_WORD *)(v0 + 128) = v11;
  *(_BYTE *)(v0 + 130) = v23;
  *(_BYTE *)(v0 + 135) = *(_BYTE *)(v7 - 102);
  *(_DWORD *)(v0 + 131) = *(_DWORD *)(v7 - 106);
  *(_QWORD *)(v0 + 136) = v10;
  return result;
}

void KnosisFact.init(subject:predicate:object:relationshipId:relationshipPredicate:)(__int128 *a1@<X0>, __int128 *a2@<X2>, __int128 *a3@<X4>, _QWORD *a4@<X8>)
{
  __int16 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[16];
  __int128 v23;
  __int128 v24;
  __int16 v25;

  v5 = *((_WORD *)a1 + 16);
  v6 = *((_BYTE *)a1 + 34);
  v15 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *((_WORD *)a2 + 16);
  v10 = *((_BYTE *)a2 + 34);
  v11 = a3[1];
  v23 = *a3;
  v24 = v11;
  v25 = *((_WORD *)a3 + 16);
  v12 = a1[1];
  v16 = *a1;
  v17 = v12;
  v18 = v5;
  v19 = v6;
  KnosisFact.init(subject:predicate:object:)((uint64_t)&v16);
  v14 = v20;
  v13 = v21;
  memcpy(a4 + 2, v22, 0x80uLL);
  *a4 = v14;
  a4[1] = v13;
  sub_1AE501548(&qword_1EED9AAC8);
  *(_OWORD *)(sub_1AE4F66BC() + 16) = xmmword_1AE934250;
  v20 = v14;
  v21 = v13;
  v22[0] = 0;
  v22[1] = 0;
  *(_DWORD *)((char *)&v22[1] + 7) = 0;
  v16 = v15;
  *(_QWORD *)&v17 = v7;
  *((_QWORD *)&v17 + 1) = v8;
  v18 = v9;
  v19 = v10;
  sub_1AE4F66CC();
  sub_1AE53F554();
  KnosisFact.init(subject:predicate:object:)((uint64_t)&v20);
  sub_1AE655290();
  sub_1AE562F90();
}

void sub_1AE7A6FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unsigned __int8 v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *@<X8>);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  int v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  void (*v55)(_QWORD *@<X8>);
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned __int16 v64;
  unint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[56];
  __n128 v83;
  __n128 v84;
  __int16 v85;
  _QWORD v86[5];
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int16 v95;
  unsigned __int8 v96;
  int v97;
  char v98;
  int v99;
  __int16 v100;
  int v101;
  char v102;
  __n128 v103;
  __n128 v104;
  __int16 v105;

  sub_1AE4F67EC();
  v74 = v1;
  v3 = v2[1];
  v73 = *v2;
  v4 = v2[6];
  v6 = v2[7];
  v5 = v2[8];
  v7 = v2[9];
  v80 = v2[10];
  sub_1AE501548(&qword_1EEDA2AF8);
  sub_1AE525A5C();
  v8 = sub_1AE925C98();
  sub_1AE4F6708();
  sub_1AE4F81B0();
  v9 = sub_1AE7AE1F8();
  GraphNode.init(id:)(v9, v10, v11);
  v76 = v91;
  v77 = v92;
  v78 = v93;
  v79 = v94;
  v12 = v95;
  v13 = v96;
  v75 = v95;
  if (!v6 || (sub_1AE4FB764(), EntityPredicate.init(id:)(v4, v6, (uint64_t)&v91), !v92))
  {
    v91 = 0;
    v92 = 0xE000000000000000;
    sub_1AE92691C();
    swift_bridgeObjectRelease();
    v91 = 0xD00000000000001BLL;
    v92 = 0x80000001AE984E90;
    sub_1AE7AE178();
    if (!v6)
    {
      swift_bridgeObjectRelease();
      v6 = 0xE000000000000000;
    }
    sub_1AE4F6718();
    sub_1AE4F76D8();
    sub_1AE7AE42C();
    sub_1AE4F6728();
    sub_1AE925F74();
    sub_1AE4F6710();
    v47 = v91;
    v48 = v92;
    sub_1AE7ADA9C();
    v49 = sub_1AE4F6778();
    *v50 = v47;
    v50[1] = v48;
    sub_1AE509B7C(v49, (uint64_t)v50);
    v16 = 0;
    v51 = 0;
    v52 = 0;
    goto LABEL_26;
  }
  v72 = v92;
  v66 = v94;
  if (!v7)
  {
    sub_1AE7AE178();
    swift_bridgeObjectRelease();
    sub_1AE4F6710();
    sub_1AE4F6718();
    sub_1AE4F76D8();
    sub_1AE7AE42C();
    sub_1AE7ADA9C();
    v53 = sub_1AE4F6778();
    *v54 = 0xD000000000000018;
    v54[1] = 0x80000001AE984EB0;
    sub_1AE509B7C(v53, (uint64_t)v54);
    v16 = 0;
    v52 = 0;
    v51 = 1;
LABEL_26:
    sub_1AE4F76D8();
    sub_1AE525C94(v76, v77, v78, v79, v75, v13);
    if (v51)
    {
      sub_1AE4F6728();
      swift_bridgeObjectRelease();
    }
    if (v52)
      sub_1AE525C94(v6, v71, v70, v69, v68, v67);
    sub_1AE4F81B8();
    sub_1AE626508((uint64_t)v16);
LABEL_31:
    sub_1AE4F667C();
    return;
  }
  v62 = v91;
  v63 = v93;
  v64 = v95;
  sub_1AE4F67A4();
  GraphNode.init(id:)(v5, v7, (uint64_t)&v91);
  v14 = v92;
  v65 = v91;
  v69 = v94;
  v70 = v93;
  v67 = v96;
  v68 = v95;
  sub_1AE4F6728();
  sub_1AE4F6710();
  sub_1AE4F6718();
  sub_1AE4F76D8();
  sub_1AE7AE42C();
  v15 = *(_QWORD *)(v80 + 16);
  v71 = v14;
  if (!v15)
  {
    swift_bridgeObjectRelease();
    v55 = 0;
    v57 = v65;
    v56 = v66;
    v58 = v74;
    v59 = v70;
LABEL_36:
    *(_DWORD *)(v58 + 51) = v101;
    *(_BYTE *)(v58 + 55) = v102;
    *(_DWORD *)(v58 + 90) = v99;
    *(_WORD *)(v58 + 94) = v100;
    *(_DWORD *)(v58 + 131) = v97;
    *(_BYTE *)(v58 + 135) = v98;
    sub_1AE626508((uint64_t)v55);
    *(_QWORD *)v58 = v73;
    *(_QWORD *)(v58 + 8) = v3;
    *(_QWORD *)(v58 + 16) = v76;
    *(_QWORD *)(v58 + 24) = v77;
    *(_QWORD *)(v58 + 32) = v78;
    *(_QWORD *)(v58 + 40) = v79;
    *(_WORD *)(v58 + 48) = v12;
    *(_BYTE *)(v58 + 50) = v13;
    *(_QWORD *)(v58 + 56) = v62;
    *(_QWORD *)(v58 + 64) = v72;
    *(_QWORD *)(v58 + 72) = v63;
    *(_QWORD *)(v58 + 80) = v56;
    *(_WORD *)(v58 + 88) = v64;
    *(_QWORD *)(v58 + 96) = v57;
    *(_QWORD *)(v58 + 104) = v71;
    *(_QWORD *)(v58 + 112) = v59;
    *(_QWORD *)(v58 + 120) = v69;
    *(_WORD *)(v58 + 128) = v68;
    *(_BYTE *)(v58 + 130) = v67;
    *(_QWORD *)(v58 + 136) = v8;
    goto LABEL_31;
  }
  v60 = v13;
  v61 = v3;
  v16 = 0;
  v17 = (uint64_t *)(v80 + 56);
  v18 = v15 - 1;
  v19 = v0;
  while (1)
  {
    v20 = v17[6];
    v21 = v17[7];
    v22 = *v17;
    v23 = v17[1];
    v24 = *(v17 - 1);
    v25 = *(v17 - 2);
    v86[0] = *(v17 - 3);
    v86[1] = v25;
    v86[2] = v24;
    v86[3] = v22;
    v86[4] = v23;
    v26 = *((_OWORD *)v17 + 2);
    v87 = *((_OWORD *)v17 + 1);
    v88 = v26;
    v89 = v20;
    v90 = v21;
    swift_bridgeObjectRetain();
    sub_1AE4F66C4();
    sub_1AE4F6804();
    sub_1AE4FB75C();
    sub_1AE4F67A4();
    sub_1AE4FB764();
    sub_1AE7A6FB0(&v91, v86);
    if (v19)
    {
      sub_1AE7AE178();
      v51 = 1;
      v52 = 1;
      v13 = v60;
      v6 = v65;
      goto LABEL_26;
    }
    sub_1AE4FFCC0(v82, &v91);
    v103 = v83;
    v104 = v84;
    v105 = v85;
    sub_1AE4F6804();
    sub_1AE4FB764();
    sub_1AE525A98((uint64_t)v82);
    sub_1AE626508((uint64_t)v16);
    sub_1AE4F6C90();
    v81 = v8;
    v27 = sub_1AE536DB0();
    if (__OFADD__(*(_QWORD *)(v8 + 16), (v28 & 1) == 0))
      break;
    v29 = v27;
    v30 = v28;
    sub_1AE501548(&qword_1EED9B1E0);
    if ((sub_1AE926A54() & 1) != 0)
    {
      v31 = sub_1AE536DB0();
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_39;
      v29 = v31;
    }
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
      sub_1AE7AE144(v8 + 8 * (v29 >> 6));
      sub_1AE7AE418((__n128 *)(v33 + v29 * v34), v103, v104);
      *(_QWORD *)(v35 + 8 * v29) = MEMORY[0x1E0DEE9D8];
      v36 = *(_QWORD *)(v8 + 16);
      v37 = v36 + 1;
      v38 = __OFADD__(v36, 1);
      sub_1AE4F66CC();
      if (v38)
        goto LABEL_38;
      *(_QWORD *)(v8 + 16) = v37;
      sub_1AE4F6804();
    }
    swift_bridgeObjectRetain();
    v39 = *(_QWORD *)(v8 + 56);
    sub_1AE4F9038();
    v40 = *(_QWORD *)(v39 + 8 * v29);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v39 + 8 * v29) = v40;
    v42 = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1AE519C64();
      v40 = v45;
      *(_QWORD *)(v39 + 8 * v29) = v45;
    }
    v44 = *(_QWORD *)(v40 + 16);
    v43 = *(_QWORD *)(v40 + 24);
    if (v44 >= v43 >> 1)
    {
      sub_1AE4FBAB0(v43);
      sub_1AE519C64();
      v40 = v46;
      *(_QWORD *)(v39 + 8 * v29) = v46;
    }
    v19 = 0;
    *(_QWORD *)(v40 + 16) = v44 + 1;
    sub_1AE4FFCC0((void *)(v40 + 144 * v44 + 32), v82);
    sub_1AE525BB8((uint64_t)v82);
    sub_1AE4F6710();
    sub_1AE4F67AC();
    if (!v42)
    {
      sub_1AE7AE178();
      v55 = sub_1AE7A43FC;
      v3 = v61;
      v13 = v60;
      v12 = v75;
      v57 = v65;
      v56 = v66;
      v58 = v74;
      v59 = v70;
      v8 = v81;
      goto LABEL_36;
    }
    v17 += 11;
    v18 = v42 - 1;
    v16 = sub_1AE7A43FC;
    v8 = v81;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  sub_1AE926DE4();
  __break(1u);
}

uint64_t static KnosisFact.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1AE926D60();
}

void KnosisFact.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 50);
  sub_1AE4F6804();
  sub_1AE925F14();
  sub_1AE4F67AC();
  __asm { BR              X9 }
}

uint64_t sub_1AE7A76B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1AE7ADC24();
  sub_1AE4F81B0();
  sub_1AE7ADF90();
  sub_1AE525C94(v18, v19, a9, v17, a11, 0);
  sub_1AE4F6A24();
  sub_1AE4FB764();
  sub_1AE925F14();
  sub_1AE4F6710();
  v20 = sub_1AE4F6824();
  return ((uint64_t (*)(uint64_t))((char *)sub_1AE7A779C + 4 * byte_1AE95A5D2[a17]))(v20);
}

uint64_t sub_1AE7A779C()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  sub_1AE7ADC24();
  sub_1AE4F66CC();
  sub_1AE925F14();
  v1 = sub_1AE4F7714();
  sub_1AE525C94(v1, v2, v4, v5, v6, 0);
  sub_1AE4FB75C();
  sub_1AE7AA7AC(v0, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7A7894(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  char v10;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x7463656A627573 && a2 == 0xE700000000000000;
    if (v6 || (sub_1AE926D60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x7461636964657270 && a2 == 0xE900000000000065;
      if (v7 || (sub_1AE926D60() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x7463656A626FLL && a2 == 0xE600000000000000;
        if (v8 || (sub_1AE926D60() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0x656966696C617571 && a2 == 0xEA00000000007372)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          v10 = sub_1AE926D60();
          swift_bridgeObjectRelease();
          if ((v10 & 1) != 0)
            return 4;
          else
            return 5;
        }
      }
    }
  }
}

uint64_t sub_1AE7A7A98(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1AE7A7AC0 + 4 * byte_1AE95A5D7[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1AE7A7AC0()
{
  return 0x7463656A627573;
}

uint64_t sub_1AE7A7AD8()
{
  return 0x7461636964657270;
}

uint64_t sub_1AE7A7AF4()
{
  return 0x7463656A626FLL;
}

uint64_t sub_1AE7A7B08()
{
  return 0x656966696C617571;
}

uint64_t sub_1AE7A7B24()
{
  unsigned __int8 *v0;

  return sub_1AE7A7A98(*v0);
}

uint64_t sub_1AE7A7B2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE7A7894(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE7A7B50()
{
  sub_1AE7AB13C();
  return sub_1AE926F94();
}

uint64_t sub_1AE7A7B78()
{
  sub_1AE7AB13C();
  return sub_1AE926FA0();
}

void KnosisFact.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  sub_1AE4F67EC();
  v3 = v2;
  sub_1AE501548(&qword_1EEDA2B20);
  sub_1AE7AE3BC();
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F683C();
  sub_1AE4F9858(v3, v3[3]);
  sub_1AE7AB13C();
  sub_1AE7ADDE0();
  sub_1AE926C88();
  if (!v0)
  {
    sub_1AE7AAEF8();
    sub_1AE4FD9D4();
    sub_1AE5C7844();
    sub_1AE4FD9D4();
    sub_1AE4FD9D4();
    sub_1AE501548(&qword_1EEDA2AE0);
    sub_1AE7AAF34();
    sub_1AE4FD9D4();
  }
  sub_1AE4FC6EC(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1AE595D68();
  sub_1AE4F667C();
}

void KnosisFact.hashValue.getter()
{
  sub_1AE4F76E0();
  KnosisFact.hash(into:)();
  sub_1AE4F905C();
  sub_1AE4F6650();
}

void sub_1AE7A7E30()
{
  KnosisFact.encode(to:)();
}

void sub_1AE7A7E4C()
{
  sub_1AE926EC8();
  KnosisFact.hash(into:)();
  sub_1AE4F905C();
  sub_1AE4F6650();
}

uint64_t QueryFeatures.intentArgInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_DWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  return sub_1AE4FBC60();
}

__n128 QueryFeatures.intentArgInfo.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  __n128 result;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 6);
  swift_bridgeObjectRelease();
  sub_1AE4F665C();
  *(_QWORD *)v1 = v3;
  result = *(__n128 *)(a1 + 1);
  *(__n128 *)(v1 + 8) = result;
  *(_DWORD *)(v1 + 24) = v4;
  return result;
}

uint64_t (*QueryFeatures.intentArgInfo.modify())(_QWORD)
{
  return nullsub_1;
}

void QueryFeatures.routeName.getter()
{
  sub_1AE4F66CC();
  sub_1AE4F7714();
  sub_1AE4F6664();
}

void QueryFeatures.routeName.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1AE4F6B50();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v0;
  sub_1AE4F6624();
}

uint64_t (*QueryFeatures.routeName.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t QueryFeatures.routeFlags.getter()
{
  return swift_bridgeObjectRetain();
}

void QueryFeatures.routeFlags.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  sub_1AE4F6664();
}

uint64_t (*QueryFeatures.routeFlags.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t sub_1AE7A7FA4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x7241746E65746E69 && a2 == 0xED00006F666E4967;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6D614E6574756F72 && a2 == 0xE900000000000065;
    if (v6 || (sub_1AE926D60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x616C466574756F72 && a2 == 0xEA00000000007367)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_1AE7A812C(char a1)
{
  if (!a1)
    return 0x7241746E65746E69;
  if (a1 == 1)
    return 0x6D614E6574756F72;
  return 0x616C466574756F72;
}

uint64_t sub_1AE7A8198()
{
  char *v0;

  return sub_1AE7A812C(*v0);
}

uint64_t sub_1AE7A81A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE7A7FA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE7A81C4()
{
  sub_1AE7AB178();
  return sub_1AE926F94();
}

uint64_t sub_1AE7A81EC()
{
  sub_1AE7AB178();
  return sub_1AE926FA0();
}

void QueryFeatures.encode(to:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_1AE507B40();
  v2 = v1;
  v3 = sub_1AE501548(&qword_1EEDA2B30);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  sub_1AE4F683C();
  sub_1AE4F9858(v2, v2[3]);
  sub_1AE7AB178();
  sub_1AE7ADDE0();
  sub_1AE7AB1B4();
  sub_1AE4FD9D4();
  if (!v0)
  {
    sub_1AE4FD9E0();
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE7AB268(&qword_1EEDA04C8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1AE4FD9D4();
  }
  sub_1AE4FC6EC(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1AE595D68();
  sub_1AE4FCE0C();
}

void sub_1AE7A8378()
{
  QueryFeatures.encode(to:)();
}

uint64_t Debug.indexCallCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Debug.indexCallCount.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Debug.indexCallCount.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Debug.messages.getter()
{
  return swift_bridgeObjectRetain();
}

void Debug.messages.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  sub_1AE4F6664();
}

uint64_t (*Debug.messages.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t Debug.execSteps.getter()
{
  return swift_bridgeObjectRetain();
}

void Debug.execSteps.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  sub_1AE4F6664();
}

uint64_t (*Debug.execSteps.modify())(_QWORD)
{
  return nullsub_1;
}

Swift::Void __swiftcall Debug.append(contentOf:)(IntelligencePlatform::Debug contentOf)
{
  _QWORD *v1;

  if (__OFADD__(*v1, *(_QWORD *)contentOf.indexCallCount))
  {
    __break(1u);
  }
  else
  {
    *v1 += *(_QWORD *)contentOf.indexCallCount;
    swift_bridgeObjectRetain();
    sub_1AE60EE2C();
    sub_1AE4F66C4();
    sub_1AE60F498();
    sub_1AE4F6624();
  }
}

Swift::Void __swiftcall Debug.addExecStep(_:)(IntelligencePlatform::ExecStep *a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  uint64_t v5;
  void *rawValue;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  countAndFlagsBits = a1->queryNode._countAndFlagsBits;
  object = a1->queryNode._object;
  v5 = a1->indexQuery._countAndFlagsBits;
  v4 = a1->indexQuery._object;
  rawValue = a1->messages._rawValue;
  sub_1AE4F66C4();
  sub_1AE4F6730();
  sub_1AE4F6708();
  sub_1AE8DD2B8();
  v7 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  sub_1AE8DD5EC(v7);
  v8 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v8 + 16) = v7 + 1;
  v9 = (_QWORD *)(v8 + 40 * v7);
  v9[4] = countAndFlagsBits;
  v9[5] = object;
  v9[6] = v5;
  v9[7] = v4;
  v9[8] = rawValue;
  *(_QWORD *)(v1 + 16) = v8;
}

uint64_t sub_1AE7A84FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x6C61437865646E69 && a2 == 0xEE00746E756F436CLL;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x736567617373656DLL && a2 == 0xE800000000000000;
    if (v6 || (sub_1AE926D60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x7065745363657865 && a2 == 0xE900000000000073)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_1AE7A8678(char a1)
{
  if (!a1)
    return 0x6C61437865646E69;
  if (a1 == 1)
    return 0x736567617373656DLL;
  return 0x7065745363657865;
}

uint64_t sub_1AE7A86E0()
{
  char *v0;

  return sub_1AE7A8678(*v0);
}

uint64_t sub_1AE7A86E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE7A84FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE7A870C()
{
  sub_1AE7AB1F0();
  return sub_1AE926F94();
}

uint64_t sub_1AE7A8734()
{
  sub_1AE7AB1F0();
  return sub_1AE926FA0();
}

void Debug.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  sub_1AE4F67EC();
  v3 = v2;
  sub_1AE501548(&qword_1EEDA2B48);
  sub_1AE7AE3BC();
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F683C();
  sub_1AE4F9858(v3, v3[3]);
  sub_1AE7AB1F0();
  sub_1AE926F4C();
  sub_1AE926CB8();
  if (!v0)
  {
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE7AB268(&qword_1EEDA04C8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1AE7AE544();
    sub_1AE4FD9D4();
    sub_1AE4F69EC();
    sub_1AE7AB2BC(&qword_1EEDA2B60, &qword_1EEDA2B58, (uint64_t (*)(void))sub_1AE7AB22C, MEMORY[0x1E0DEAF10]);
    sub_1AE7AE544();
    sub_1AE4FD9D4();
  }
  sub_1AE4FC6EC(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1AE595D68();
  sub_1AE4F667C();
}

void Debug.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1AE4F67EC();
  v12 = v11;
  v14 = v13;
  v15 = sub_1AE501548(&qword_1EEDA2B70);
  MEMORY[0x1E0C80A78](v15);
  sub_1AE4F666C();
  sub_1AE4F9858(v12, v12[3]);
  sub_1AE7AB1F0();
  sub_1AE926F34();
  if (!v10)
  {
    LOBYTE(a10) = 0;
    v16 = sub_1AE926BE0();
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE7AB268(&qword_1ED318F18, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_1AE7ADF3C();
    sub_1AE73548C();
    sub_1AE501548(&qword_1EEDA2B58);
    sub_1AE7AB2BC(&qword_1EEDA2B78, &qword_1EEDA2B58, (uint64_t (*)(void))sub_1AE7AB314, MEMORY[0x1E0DEAF40]);
    v18 = v17;
    sub_1AE4F67A4();
    sub_1AE7ADF3C();
    sub_1AE73548C();
    sub_1AE4F777C();
    if (!v18)
    {
      sub_1AE4F66CC();
      swift_bridgeObjectRelease();
      *v14 = v16;
      v14[1] = a10;
      v14[2] = a10;
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v12);
      goto LABEL_4;
    }
    sub_1AE4F6728();
  }
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v12);
LABEL_4:
  swift_bridgeObjectRelease();
  sub_1AE4F6728();
  sub_1AE4F667C();
}

void sub_1AE7A8A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  Debug.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_1AE7A8AA0()
{
  Debug.encode(to:)();
}

void ExecStep.queryNode.getter()
{
  sub_1AE4F66CC();
  sub_1AE4F7714();
  sub_1AE4F6664();
}

void ExecStep.queryNode.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  sub_1AE7AE204();
  *v1 = v2;
  v1[1] = v0;
  sub_1AE4F6624();
}

uint64_t (*ExecStep.queryNode.modify())(_QWORD)
{
  return nullsub_1;
}

void ExecStep.indexQuery.getter()
{
  sub_1AE4F66CC();
  sub_1AE4F7714();
  sub_1AE4F6664();
}

void ExecStep.indexQuery.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1AE4F6B50();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v0;
  sub_1AE4F6624();
}

uint64_t (*ExecStep.indexQuery.modify())(_QWORD)
{
  return nullsub_1;
}

void ExecStep.messages.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  sub_1AE4F6664();
}

uint64_t (*ExecStep.messages.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t ExecStep.description.getter()
{
  uint64_t v0;
  _QWORD v2[2];

  sub_1AE92691C();
  sub_1AE505D44();
  strcpy((char *)v2, "[queryNode: ");
  sub_1AE4F6730();
  sub_1AE5FBF70();
  sub_1AE4F81B8();
  sub_1AE925F74();
  sub_1AE4F6804();
  sub_1AE7AE3B0();
  sub_1AE4F67AC();
  sub_1AE925F74();
  v0 = sub_1AE4FB75C();
  MEMORY[0x1AF453400](v0, MEMORY[0x1E0DEA968]);
  sub_1AE925F74();
  sub_1AE4F6648();
  sub_1AE4F665C();
  sub_1AE4F7838();
  return v2[0];
}

void static ExecStep.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (sub_1AE4FB6F0() & 1) != 0)
  {
    v7 = v2 == v4 && v3 == v5;
    if (v7 || (sub_1AE4FB6F0() & 1) != 0)
    {
      v8 = (_QWORD *)sub_1AE4F7714();
      sub_1AE5E97A0(v8, v9);
    }
  }
}

uint64_t sub_1AE7A8D48(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x646F4E7972657571 && a2 == 0xE900000000000065;
  if (v2 || (sub_1AE926D60() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6575517865646E69 && a2 == 0xEA00000000007972;
    if (v6 || (sub_1AE926D60() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x736567617373656DLL && a2 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = sub_1AE926D60();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_1AE7A8EAC(char a1)
{
  if (!a1)
    return 0x646F4E7972657571;
  if (a1 == 1)
    return 0x6575517865646E69;
  return 0x736567617373656DLL;
}

uint64_t sub_1AE7A8F0C()
{
  char *v0;

  return sub_1AE7A8EAC(*v0);
}

uint64_t sub_1AE7A8F14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1AE7A8D48(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1AE7A8F38()
{
  sub_1AE7AB350();
  return sub_1AE926F94();
}

uint64_t sub_1AE7A8F60()
{
  sub_1AE7AB350();
  return sub_1AE926FA0();
}

void ExecStep.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  sub_1AE4F67EC();
  v3 = v2;
  v4 = sub_1AE501548(&qword_1EEDA2B88);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  sub_1AE4F683C();
  sub_1AE4F9858(v3, v3[3]);
  sub_1AE7AB350();
  sub_1AE926F4C();
  sub_1AE7ADF7C();
  sub_1AE926C88();
  if (!v0)
  {
    sub_1AE4FD9E0();
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE7AB268(&qword_1EEDA04C8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1AE4FD9D4();
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
  sub_1AE595D68();
  sub_1AE4F667C();
}

void ExecStep.init(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1AE4F67EC();
  v2 = v1;
  v4 = v3;
  v5 = sub_1AE501548(&qword_1EEDA2B98);
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4F666C();
  sub_1AE4F9858(v2, v2[3]);
  sub_1AE7AB350();
  sub_1AE926F34();
  if (!v0)
  {
    v6 = sub_1AE7AE234();
    v8 = v7;
    v15 = v6;
    swift_bridgeObjectRetain();
    v9 = sub_1AE7AE234();
    v11 = v10;
    v14 = v9;
    sub_1AE501548(&qword_1ED319DE0);
    sub_1AE7AB268(&qword_1ED318F18, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    v13 = v12;
    sub_1AE4FB764();
    sub_1AE73548C();
    if (!v13)
    {
      sub_1AE4F6A04();
      sub_1AE4F66CC();
      swift_bridgeObjectRelease();
      *v4 = v15;
      v4[1] = v8;
      v4[2] = v14;
      v4[3] = v11;
      v4[4] = v16;
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v2);
      goto LABEL_4;
    }
    sub_1AE4F6A04();
    sub_1AE4F76D8();
    sub_1AE4F6710();
  }
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v2);
LABEL_4:
  swift_bridgeObjectRelease();
  sub_1AE4F6710();
  sub_1AE4F76D8();
  sub_1AE4F667C();
}

void sub_1AE7A92B8()
{
  ExecStep.init(from:)();
}

void sub_1AE7A92CC()
{
  ExecStep.encode(to:)();
}

uint64_t sub_1AE7A92E8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(_QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void (*v25)(_QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[48];
  _QWORD v39[3];
  uint64_t v40;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[3];
  v37 = a1[2];
  v8 = *((_BYTE *)a1 + 32);
  sub_1AE53F554();
  sub_1AE515BB8();
  sub_1AE562F90();
  sub_1AE77235C((uint64_t)v38, (uint64_t)v39, &qword_1EEDA2CD8);
  if (v39[0])
  {
    v26 = a3;
    v9 = (void (*)(_QWORD, _QWORD))v39[2];
    v10 = *(_QWORD *)(a2 + 16);
    v40 = MEMORY[0x1E0DEE9D8];
    sub_1AE5215E8();
    v11 = v40;
    if (v10)
    {
      v25 = v9;
      v12 = swift_bridgeObjectRetain();
      v13 = 0;
      v27 = a2;
      do
      {
        v14 = *(_QWORD *)(v12 + v13 + 48);
        v34 = *(_QWORD *)(v12 + v13 + 40);
        v35 = *(_QWORD *)(v12 + v13 + 32);
        v15 = *(_QWORD *)(v12 + v13 + 64);
        v33 = *(_QWORD *)(v12 + v13 + 56);
        v32 = *(_WORD *)(v12 + v13 + 72);
        v16 = *(_QWORD *)(v12 + v13 + 96);
        v30 = *(_QWORD *)(v12 + v13 + 88);
        v31 = *(_QWORD *)(v12 + v13 + 80);
        v17 = *(_QWORD *)(v12 + v13 + 112);
        v29 = *(_QWORD *)(v12 + v13 + 104);
        v28 = *(_WORD *)(v12 + v13 + 120);
        v18 = *(_QWORD *)(v12 + v13 + 136);
        v20 = *(_QWORD *)(v11 + 16);
        v19 = *(_QWORD *)(v11 + 24);
        v36 = *(_QWORD *)(v12 + v13 + 128);
        v40 = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v20 >= v19 >> 1)
        {
          sub_1AE5215E8();
          v11 = v40;
        }
        *(_QWORD *)(v11 + 16) = v20 + 1;
        v21 = v11 + 112 * v20;
        *(_QWORD *)(v21 + 32) = v35;
        *(_QWORD *)(v21 + 40) = v34;
        *(_QWORD *)(v21 + 48) = v14;
        *(_QWORD *)(v21 + 56) = v33;
        *(_QWORD *)(v21 + 64) = v15;
        *(_WORD *)(v21 + 72) = v32;
        *(_QWORD *)(v21 + 80) = v31;
        *(_QWORD *)(v21 + 88) = v30;
        *(_QWORD *)(v21 + 96) = v16;
        *(_QWORD *)(v21 + 104) = v29;
        *(_QWORD *)(v21 + 112) = v17;
        *(_WORD *)(v21 + 120) = v28;
        v13 += 112;
        *(_QWORD *)(v21 + 128) = v36;
        *(_QWORD *)(v21 + 136) = v18;
        --v10;
        v12 = v27;
      }
      while (v10);
      swift_bridgeObjectRelease();
      v9 = v25;
    }
    sub_1AE501548(&qword_1EEDA2CE0);
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = v11;
    v40 = v22;
    v9(&v40, v26);
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    sub_1AE6A4010();
    swift_allocError();
    *(_QWORD *)v24 = v5;
    *(_QWORD *)(v24 + 8) = v6;
    *(_QWORD *)(v24 + 16) = v37;
    *(_QWORD *)(v24 + 24) = v7;
    *(_BYTE *)(v24 + 32) = v8;
    sub_1AE53F554();
    return swift_willThrow();
  }
}

uint64_t sub_1AE7A958C(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD v11[5];
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_1AE798B64(a4, a3);
  sub_1AE926A30();
  do
  {
    sub_1AE926B2C();
    v4 = v23;
    if (!v23)
      break;
    v5 = v21;
    v6 = v22;
    v11[0] = v21;
    v11[1] = v22;
    v11[2] = v23;
    v11[3] = v24;
    v11[4] = v25;
    v12 = v26;
    v13 = v27;
    v14 = v28;
    v15 = v29;
    v16 = v30;
    v17 = v31;
    v18 = v32;
    v19 = v33;
    v20 = v34;
    v7 = v35;
    v8 = a1(v11);
    sub_1AE6942B0(v5, v6, v4);
    v35 = v7;
    if (v7)
      break;
  }
  while ((v8 & 1) != 0);
  swift_release();
  return swift_release();
}

void sub_1AE7A96C0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  _BOOL4 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  _QWORD *v113;
  char *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  uint64_t v122;
  __int16 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v3 = a1[1];
  v4 = sub_1AE926D0C();
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_1AE7A9E88(0, (char *)v3, (char *)1, a1);
      return;
    }
    goto LABEL_150;
  }
  v106 = v4;
  sub_1AE519648(v3 / 2);
  v104 = a1;
  v105 = v5;
  v114 = v6;
  v107 = v3;
  if (v3 <= 0)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    v42 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_113:
    if (v42 < 2)
    {
LABEL_126:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(_QWORD *)(v105 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_156;
    }
    v93 = *v104;
    while (1)
    {
      v94 = v42 - 2;
      if (v42 < 2)
        break;
      if (!v93)
        goto LABEL_159;
      v95 = v9;
      v96 = *(_QWORD *)(v9 + 32 + 16 * v94);
      v97 = *(_QWORD *)(v9 + 32 + 16 * (v42 - 1) + 8);
      sub_1AE7A9FDC((char *)(v93 + 112 * v96), (char *)(v93 + 112 * *(_QWORD *)(v9 + 32 + 16 * (v42 - 1))), v93 + 112 * v97, v114);
      if (v1)
        goto LABEL_109;
      if (v97 < v96)
        goto LABEL_145;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v98 = v95;
      }
      else
      {
        sub_1AE8893F4();
        v98 = v102;
      }
      if (v94 >= *(_QWORD *)(v98 + 16))
        goto LABEL_146;
      v99 = (_QWORD *)(v98 + 32 + 16 * v94);
      *v99 = v96;
      v99[1] = v97;
      v100 = *(_QWORD *)(v98 + 16);
      if (v42 > v100)
        goto LABEL_147;
      v101 = v98;
      memmove((void *)(v98 + 32 + 16 * (v42 - 1)), (const void *)(v98 + 32 + 16 * v42), 16 * (v100 - v42));
      v9 = v101;
      *(_QWORD *)(v101 + 16) = v100 - 1;
      v42 = v100 - 1;
      v3 = v107;
      if (v100 <= 2)
        goto LABEL_126;
    }
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
    return;
  }
  v7 = 0;
  v8 = *a1;
  v103 = v8 + 104;
  v9 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v10 = v7;
    v11 = v7 + 1;
    v110 = v9;
    v111 = v7;
    if (v7 + 1 >= v3)
      goto LABEL_35;
    v12 = (unint64_t *)(v8 + 112 * v11);
    v13 = *v12;
    v14 = v12[6];
    v15 = (unint64_t *)(v8 + 112 * v10);
    if (v13 >= *v15)
    {
      if (v13 == *v15)
      {
        v16 = v14 < v15[6];
        v11 = v10 + 2;
        if (v10 + 2 >= v3)
          goto LABEL_26;
      }
      else
      {
        v11 = v10 + 2;
        if (v10 + 2 >= v3)
          goto LABEL_35;
        v16 = 0;
      }
    }
    else
    {
      v11 = v10 + 2;
      if (v10 + 2 >= v3)
        goto LABEL_28;
      v16 = 1;
    }
    v17 = v3 <= v11 + 1 ? v11 + 1 : v3;
    v18 = (unint64_t *)(v8 + 112 * v11);
    do
    {
      v19 = v13;
      v13 = *v18;
      v20 = v18[6];
      if (*v18 >= v19)
      {
        if (*v18 == v19)
        {
          if (((v16 ^ (v20 >= v14)) & 1) == 0)
            goto LABEL_26;
        }
        else if (v16)
        {
          goto LABEL_27;
        }
      }
      else if (!v16)
      {
        goto LABEL_35;
      }
      v18 += 14;
      ++v11;
      v14 = v20;
    }
    while (v11 < v3);
    v11 = v17;
LABEL_26:
    if (v16)
    {
LABEL_27:
      if (v11 < v10)
        goto LABEL_152;
LABEL_28:
      if (v10 < v11)
      {
        v21 = 112 * v11;
        v22 = v11;
        v23 = v11;
        v24 = v10;
        v25 = 112 * v10;
        do
        {
          if (v24 != --v23)
          {
            if (!v8)
              goto LABEL_158;
            v26 = *(_QWORD *)(v8 + v25 + 32);
            v27 = v8 + v21;
            v28 = *(_WORD *)(v8 + v25 + 40);
            v125 = *(_QWORD *)(v8 + v25 + 80);
            v123 = *(_WORD *)(v8 + v25 + 88);
            v119 = *(_QWORD *)(v8 + v25 + 104);
            v121 = *(_QWORD *)(v8 + v25 + 96);
            v112 = *(_OWORD *)(v8 + v25 + 16);
            v108 = *(_OWORD *)(v8 + v25);
            v115 = *(_OWORD *)(v8 + v25 + 48);
            v117 = *(_OWORD *)(v8 + v25 + 64);
            memmove((void *)(v8 + v25), (const void *)(v8 + v21 - 112), 0x70uLL);
            *(_OWORD *)(v27 - 112) = v108;
            *(_OWORD *)(v27 - 96) = v112;
            *(_QWORD *)(v27 - 80) = v26;
            *(_WORD *)(v27 - 72) = v28;
            *(_OWORD *)(v27 - 64) = v115;
            *(_OWORD *)(v27 - 48) = v117;
            *(_QWORD *)(v27 - 32) = v125;
            *(_WORD *)(v27 - 24) = v123;
            *(_QWORD *)(v27 - 16) = v121;
            *(_QWORD *)(v27 - 8) = v119;
          }
          ++v24;
          v21 -= 112;
          v25 += 112;
        }
        while (v24 < v23);
        v3 = v107;
        v11 = v22;
        v10 = v111;
      }
    }
LABEL_35:
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v10))
        goto LABEL_149;
      if (v11 - v10 < v106)
      {
        if (__OFADD__(v10, v106))
          goto LABEL_153;
        if (v10 + v106 >= v3)
          v29 = v3;
        else
          v29 = v10 + v106;
        if (v29 < v10)
          goto LABEL_154;
        if (v11 != v29)
        {
          v30 = (_QWORD *)(v103 + 112 * v11);
          v109 = v29;
          do
          {
            v31 = *(_QWORD *)(v8 + 112 * v11);
            v113 = v30;
            v32 = v111;
            do
            {
              v33 = *(v30 - 27);
              if (v31 >= v33 && (v31 != v33 || *(v30 - 7) >= *(v30 - 21)))
                break;
              if (!v8)
                goto LABEL_155;
              v35 = v8;
              v118 = *((_OWORD *)v30 - 6);
              v36 = *(v30 - 10);
              v37 = *(v30 - 9);
              v38 = *((_WORD *)v30 - 32);
              v124 = *(_OWORD *)(v30 - 5);
              v122 = *(v30 - 3);
              v120 = *((_WORD *)v30 - 8);
              v39 = *v30;
              v126 = *(v30 - 1);
              v116 = *(_OWORD *)(v30 - 7);
              memcpy(v30 - 13, v30 - 27, 0x70uLL);
              *(v30 - 14) = v39;
              v30 -= 14;
              *(v30 - 13) = v31;
              *((_OWORD *)v30 - 6) = v118;
              *(v30 - 10) = v36;
              *(v30 - 9) = v37;
              *((_WORD *)v30 - 32) = v38;
              *(_OWORD *)(v30 - 7) = v116;
              *(_OWORD *)(v30 - 5) = v124;
              *(v30 - 3) = v122;
              *((_WORD *)v30 - 8) = v120;
              ++v32;
              *(v30 - 1) = v126;
              v8 = v35;
            }
            while (v11 != v32);
            ++v11;
            v30 = v113 + 14;
          }
          while (v11 != v109);
          v11 = v109;
          v10 = v111;
        }
      }
    }
    if (v11 < v10)
      goto LABEL_148;
    v127 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v9 = v110;
    }
    else
    {
      sub_1AE889310(0, *(_QWORD *)(v110 + 16) + 1, 1, (char *)v110);
      v9 = v91;
    }
    v41 = *(_QWORD *)(v9 + 16);
    v40 = *(_QWORD *)(v9 + 24);
    v42 = v41 + 1;
    if (v41 >= v40 >> 1)
    {
      sub_1AE889310(v40 > 1, v41 + 1, 1, (char *)v9);
      v9 = v92;
    }
    *(_QWORD *)(v9 + 16) = v42;
    v43 = v9 + 32;
    v44 = (uint64_t *)(v9 + 32 + 16 * v41);
    *v44 = v111;
    v44[1] = v127;
    if (v41)
      break;
    v42 = 1;
LABEL_103:
    v3 = v107;
    v7 = v127;
    if (v127 >= v107)
      goto LABEL_113;
  }
  while (1)
  {
    v45 = v42 - 1;
    if (v42 >= 4)
    {
      v50 = v43 + 16 * v42;
      v51 = *(_QWORD *)(v50 - 64);
      v52 = *(_QWORD *)(v50 - 56);
      v56 = __OFSUB__(v52, v51);
      v53 = v52 - v51;
      if (v56)
        goto LABEL_133;
      v55 = *(_QWORD *)(v50 - 48);
      v54 = *(_QWORD *)(v50 - 40);
      v56 = __OFSUB__(v54, v55);
      v48 = v54 - v55;
      v49 = v56;
      if (v56)
        goto LABEL_134;
      v57 = v42 - 2;
      v58 = (uint64_t *)(v43 + 16 * (v42 - 2));
      v60 = *v58;
      v59 = v58[1];
      v56 = __OFSUB__(v59, v60);
      v61 = v59 - v60;
      if (v56)
        goto LABEL_135;
      v56 = __OFADD__(v48, v61);
      v62 = v48 + v61;
      if (v56)
        goto LABEL_137;
      if (v62 >= v53)
      {
        v80 = (uint64_t *)(v43 + 16 * v45);
        v82 = *v80;
        v81 = v80[1];
        v56 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v56)
          goto LABEL_143;
        v73 = v48 < v83;
        goto LABEL_92;
      }
    }
    else
    {
      if (v42 != 3)
      {
        v74 = *(_QWORD *)(v9 + 32);
        v75 = *(_QWORD *)(v9 + 40);
        v56 = __OFSUB__(v75, v74);
        v67 = v75 - v74;
        v68 = v56;
        goto LABEL_86;
      }
      v47 = *(_QWORD *)(v9 + 32);
      v46 = *(_QWORD *)(v9 + 40);
      v56 = __OFSUB__(v46, v47);
      v48 = v46 - v47;
      v49 = v56;
    }
    if ((v49 & 1) != 0)
      goto LABEL_136;
    v57 = v42 - 2;
    v63 = (uint64_t *)(v43 + 16 * (v42 - 2));
    v65 = *v63;
    v64 = v63[1];
    v66 = __OFSUB__(v64, v65);
    v67 = v64 - v65;
    v68 = v66;
    if (v66)
      goto LABEL_138;
    v69 = (uint64_t *)(v43 + 16 * v45);
    v71 = *v69;
    v70 = v69[1];
    v56 = __OFSUB__(v70, v71);
    v72 = v70 - v71;
    if (v56)
      goto LABEL_140;
    if (__OFADD__(v67, v72))
      goto LABEL_142;
    if (v67 + v72 >= v48)
    {
      v73 = v48 < v72;
LABEL_92:
      if (v73)
        v45 = v57;
      goto LABEL_94;
    }
LABEL_86:
    if ((v68 & 1) != 0)
      goto LABEL_139;
    v76 = (uint64_t *)(v43 + 16 * v45);
    v78 = *v76;
    v77 = v76[1];
    v56 = __OFSUB__(v77, v78);
    v79 = v77 - v78;
    if (v56)
      goto LABEL_141;
    if (v79 < v67)
      goto LABEL_103;
LABEL_94:
    v84 = v45 - 1;
    if (v45 - 1 >= v42)
    {
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
      goto LABEL_144;
    }
    if (!v8)
      goto LABEL_157;
    v85 = v9;
    v86 = (uint64_t *)(v43 + 16 * v84);
    v87 = *v86;
    v88 = (_QWORD *)(v43 + 16 * v45);
    v89 = v88[1];
    sub_1AE7A9FDC((char *)(v8 + 112 * *v86), (char *)(v8 + 112 * *v88), v8 + 112 * v89, v114);
    if (v1)
      break;
    if (v89 < v87)
      goto LABEL_130;
    if (v45 > *(_QWORD *)(v85 + 16))
      goto LABEL_131;
    *v86 = v87;
    *(_QWORD *)(v43 + 16 * v84 + 8) = v89;
    v90 = *(_QWORD *)(v85 + 16);
    if (v45 >= v90)
      goto LABEL_132;
    v42 = v90 - 1;
    memmove((void *)(v43 + 16 * v45), v88 + 2, 16 * (v90 - 1 - v45));
    v9 = v85;
    *(_QWORD *)(v85 + 16) = v90 - 1;
    if (v90 <= 2)
      goto LABEL_103;
  }
LABEL_109:
  swift_bridgeObjectRelease();
  if (v107 < -1)
    goto LABEL_151;
  *(_QWORD *)(v105 + 16) = 0;
  swift_bridgeObjectRelease();
}

char *sub_1AE7A9E88(char *result, char *a2, char *a3, uint64_t *a4)
{
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int16 v21;
  __int128 v22;
  uint64_t v23;

  v16 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v18 = *a4;
    v5 = (_QWORD *)(*a4 + 112 * (_QWORD)a3 + 104);
    while (2)
    {
      v6 = *(_QWORD *)(v18 + 112 * (_QWORD)v4);
      v17 = v5;
      v7 = v16;
      do
      {
        v8 = *(v5 - 27);
        if (v6 >= v8 && (v6 != v8 || *(v5 - 7) >= *(v5 - 21)))
          break;
        if (!v18)
        {
          __break(1u);
          return result;
        }
        v20 = *((_OWORD *)v5 - 6);
        v11 = *(v5 - 10);
        v10 = *(v5 - 9);
        v12 = *((_WORD *)v5 - 32);
        v22 = *(_OWORD *)(v5 - 5);
        v13 = *(v5 - 3);
        v21 = *((_WORD *)v5 - 8);
        v14 = *v5;
        v23 = *(v5 - 1);
        v19 = *(_OWORD *)(v5 - 7);
        result = (char *)memcpy(v5 - 13, v5 - 27, 0x70uLL);
        *(v5 - 14) = v14;
        v5 -= 14;
        *(v5 - 13) = v6;
        *((_OWORD *)v5 - 6) = v20;
        *(v5 - 10) = v11;
        *(v5 - 9) = v10;
        *((_WORD *)v5 - 32) = v12;
        *(_OWORD *)(v5 - 7) = v19;
        *(_OWORD *)(v5 - 5) = v22;
        *(v5 - 3) = v13;
        *((_WORD *)v5 - 8) = v21;
        ++v7;
        *(v5 - 1) = v23;
      }
      while (v4 != v7);
      ++v4;
      v5 = v17 + 14;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_1AE7A9FDC(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v14;
  BOOL v15;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 112;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 112;
  if (v9 >= v11)
  {
    sub_1AE51FAE0(a2, (uint64_t)(a3 - (_QWORD)a2) / 112, a4);
    v12 = (unint64_t)&v4[112 * v11];
    if (v7 >= v6 || v10 < 112)
      goto LABEL_45;
    v17 = (char *)(a3 - 112);
    while (1)
    {
      v18 = v17 + 112;
      v19 = *(_QWORD *)(v12 - 112);
      v20 = v6 - 112;
      v21 = *((_QWORD *)v6 - 14);
      if (v19 >= v21 && (v19 == v21 ? (v22 = *(_QWORD *)(v12 - 64) >= *((_QWORD *)v6 - 8)) : (v22 = 1), v22))
      {
        v23 = v18 != (char *)v12 || (unint64_t)v17 >= v12;
        v20 = (char *)(v12 - 112);
        v12 -= 112;
        if (!v23)
          goto LABEL_41;
      }
      else
      {
        v24 = v18 != v6 || v17 >= v6;
        v6 -= 112;
        if (!v24)
          goto LABEL_41;
      }
      memmove(v17, v20, 0x70uLL);
LABEL_41:
      v17 -= 112;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_45;
    }
  }
  sub_1AE51FAE0(a1, (a2 - a1) / 112, a4);
  v12 = (unint64_t)&v4[112 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 112)
  {
    while (*(_QWORD *)v6 < *(_QWORD *)v4 || *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 6) < *((_QWORD *)v4 + 6))
    {
      v14 = v6;
      v15 = v7 == v6;
      v6 += 112;
      if (!v15)
        goto LABEL_14;
LABEL_15:
      v7 += 112;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_20;
    }
    v14 = v4;
    v15 = v7 == v4;
    v4 += 112;
    if (v15)
      goto LABEL_15;
LABEL_14:
    memmove(v7, v14, 0x70uLL);
    goto LABEL_15;
  }
LABEL_20:
  v6 = v7;
LABEL_45:
  sub_1AE51FAE0(v4, (uint64_t)(v12 - (_QWORD)v4) / 112, v6);
  return 1;
}

uint64_t sub_1AE7AA1A0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1AE7AA1F0()
{
  unint64_t result;

  result = qword_1EEDA2A80;
  if (!qword_1EEDA2A80)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B254, &type metadata for KnosisResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2A80);
  }
  return result;
}

unint64_t sub_1AE7AA22C()
{
  unint64_t result;

  result = qword_1EEDA2A98;
  if (!qword_1EEDA2A98)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for KnosisAnswer, &type metadata for KnosisAnswer);
    atomic_store(result, (unint64_t *)&qword_1EEDA2A98);
  }
  return result;
}

unint64_t sub_1AE7AA268()
{
  unint64_t result;

  result = qword_1EEDA2AA0;
  if (!qword_1EEDA2AA0)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for KnosisResult.Status, &type metadata for KnosisResult.Status);
    atomic_store(result, (unint64_t *)&qword_1EEDA2AA0);
  }
  return result;
}

unint64_t sub_1AE7AA2A4()
{
  unint64_t result;

  result = qword_1EEDA2AA8;
  if (!qword_1EEDA2AA8)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for QueryFeatures, &type metadata for QueryFeatures);
    atomic_store(result, (unint64_t *)&qword_1EEDA2AA8);
  }
  return result;
}

unint64_t sub_1AE7AA2E0()
{
  unint64_t result;

  result = qword_1EEDA2AB0;
  if (!qword_1EEDA2AB0)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for Debug, &type metadata for Debug);
    atomic_store(result, (unint64_t *)&qword_1EEDA2AB0);
  }
  return result;
}

uint64_t type metadata accessor for CustomKnosisResultContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1AE501778(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CustomKnosisResultContext);
}

uint64_t sub_1AE7AA328(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 32))(*a1, a1[1]);
}

uint64_t sub_1AE7AA350@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 48))(*a1);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_1AE7AA380@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 32))(*a1);
  if (!v3)
    *a2 = result;
  return result;
}

void sub_1AE7AA3B0(uint64_t a1)
{
  sub_1AE7AA424(a1, 1);
}

uint64_t sub_1AE7AA3C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_1AE79E690(v1[2], v1[3], v1[5], a1);
}

uint64_t sub_1AE7AA3EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_1AE79E85C(v1[2], v1[3], v1[4], a1);
}

void sub_1AE7AA40C(uint64_t a1)
{
  sub_1AE7AA424(a1, 0);
}

void sub_1AE7AA424(uint64_t a1, int a2)
{
  uint64_t *v2;

  sub_1AE79E9BC(a1, v2[6], v2[2], v2[3], v2[4], v2[5], a2);
}

void sub_1AE7AA448(uint64_t a1)
{
  sub_1AE7AA4AC(a1);
}

uint64_t sub_1AE7AA45C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1AE79F348(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_1AE7AA48C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1AE79F4BC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), a1);
}

void sub_1AE7AA4AC(uint64_t a1)
{
  uint64_t *v1;

  sub_1AE79F6F8(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1AE7AA4CC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_DWORD *)(a2 + 31) = *(_DWORD *)((char *)a1 + 31);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1AE7AA4E4(uint64_t a1)
{
  sub_1AE525B74(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int16 *)(a1 + 32), *(_BYTE *)(a1 + 34));
  return a1;
}

void sub_1AE7AA51C()
{
  sub_1AE509648();
  sub_1AE519ED0();
}

void sub_1AE7AA52C()
{
  sub_1AE509648();
  sub_1AE519C48();
}

void sub_1AE7AA53C()
{
  sub_1AE509648();
  sub_1AE519F94();
}

void sub_1AE7AA54C(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_1AE4FB75C();
    sub_1AE926AD8();
    sub_1AE4F6648();
  }
  JUMPOUT(0x1AF453B8CLL);
}

void sub_1AE7AA5AC()
{
  sub_1AE509648();
  sub_1AE51AAC8();
}

void sub_1AE7AA5BC()
{
  sub_1AE509648();
  sub_1AE51AB68();
}

void sub_1AE7AA5CC()
{
  sub_1AE509648();
  sub_1AE519D1C();
}

void sub_1AE7AA5DC()
{
  sub_1AE509648();
  sub_1AE51B718();
}

void sub_1AE7AA5EC()
{
  sub_1AE509648();
  sub_1AE51ADF0();
}

void sub_1AE7AA5FC()
{
  sub_1AE509648();
  sub_1AE51BCE0();
}

uint64_t sub_1AE7AA60C(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_1AE7A958C(a1, a2, *a3, a4);
}

void sub_1AE7AA624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t i;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  sub_1AE505CD4();
  a27 = v28;
  a28 = v29;
  v31 = v30;
  v33 = v32;
  v52 = v30 + 64;
  sub_1AE4F95DC();
  v36 = v35 & v34;
  v38 = (unint64_t)(v37 + 63) >> 6;
  swift_bridgeObjectRetain();
  v39 = 0;
  v40 = 0;
  if (!v36)
    goto LABEL_3;
LABEL_2:
  sub_1AE4F79B8();
  for (i = v41 | (v40 << 6); ; i = v47 + (v40 << 6))
  {
    v48 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * i);
    v49 = *((_QWORD *)v33 + 8);
    v50 = v33[1];
    a11 = *v33;
    a12 = v50;
    v51 = v33[3];
    a13 = v33[2];
    a14 = v51;
    a15 = v49;
    sub_1AE4F6A24();
    sub_1AE4F66CC();
    sub_1AE925F14();
    sub_1AE4F67AC();
    sub_1AE5E8240();
    sub_1AE4F67AC();
    sub_1AE7AAC3C((uint64_t)&a11, v48);
    sub_1AE4F9038();
    v39 ^= sub_1AE926F10();
    if (v36)
      goto LABEL_2;
LABEL_3:
    v43 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
      goto LABEL_19;
    }
    if (v43 >= v38)
      goto LABEL_17;
    ++v40;
    if (!*(_QWORD *)(v52 + 8 * v43))
    {
      v40 = v43 + 1;
      if (v43 + 1 >= v38)
        goto LABEL_17;
      if (!*(_QWORD *)(v52 + 8 * v40))
        break;
    }
LABEL_14:
    sub_1AE50766C();
    v36 = v46 & v45;
  }
  v44 = v43 + 2;
  if (v44 >= v38)
  {
LABEL_17:
    swift_release();
    sub_1AE926ED4();
    sub_1AE4F778C();
    return;
  }
  if (*(_QWORD *)(v52 + 8 * v44))
  {
    v40 = v44;
    goto LABEL_14;
  }
  while (1)
  {
    v40 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v40 >= v38)
      goto LABEL_17;
    ++v44;
    if (*(_QWORD *)(v52 + 8 * v40))
      goto LABEL_14;
  }
LABEL_19:
  __break(1u);
}

uint64_t sub_1AE7AA7AC(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v17;
  int64_t v18;
  uint64_t v21;
  _QWORD __dst[18];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v17 = a2 + 64;
  v2 = 1 << *(_BYTE *)(a2 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a2 + 64);
  v18 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = 0;
  while (1)
  {
    if (v4)
    {
      v21 = (v4 - 1) & v4;
      v7 = __clz(__rbit64(v4)) | (v6 << 6);
      goto LABEL_18;
    }
    v8 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v8 >= v18)
      goto LABEL_21;
    v9 = *(_QWORD *)(v17 + 8 * v8);
    ++v6;
    if (!v9)
    {
      v6 = v8 + 1;
      if (v8 + 1 >= v18)
        goto LABEL_21;
      v9 = *(_QWORD *)(v17 + 8 * v6);
      if (!v9)
        break;
    }
LABEL_17:
    v21 = (v9 - 1) & v9;
    v7 = __clz(__rbit64(v9)) + (v6 << 6);
LABEL_18:
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v7);
    v12 = *((_QWORD *)a1 + 8);
    v13 = a1[1];
    v23 = *a1;
    v24 = v13;
    v14 = a1[3];
    v25 = a1[2];
    v26 = v14;
    v27 = v12;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AE925F14();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_1AE926ED4();
    if (*(_QWORD *)(v11 + 16))
    {
      memcpy(__dst, (const void *)(v11 + 32), sizeof(__dst));
      v15 = BYTE2(__dst[6]);
      swift_bridgeObjectRetain();
      sub_1AE525A98((uint64_t)__dst);
      sub_1AE925F14();
      swift_bridgeObjectRelease();
      __asm { BR              X8 }
    }
    swift_bridgeObjectRelease();
    v5 ^= sub_1AE926F10();
    v4 = v21;
  }
  v10 = v8 + 2;
  if (v10 < v18)
  {
    v9 = *(_QWORD *)(v17 + 8 * v10);
    if (!v9)
    {
      while (1)
      {
        v6 = v10 + 1;
        if (__OFADD__(v10, 1))
          break;
        if (v6 >= v18)
          goto LABEL_21;
        v9 = *(_QWORD *)(v17 + 8 * v6);
        ++v10;
        if (v9)
          goto LABEL_17;
      }
LABEL_23:
      __break(1u);
      JUMPOUT(0x1AE7AAC14);
    }
    v6 = v10;
    goto LABEL_17;
  }
LABEL_21:
  swift_release();
  return sub_1AE926ED4();
}

uint64_t sub_1AE7AAC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;

  sub_1AE926F10();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  for (v6 &= v6 - 1; ; v6 = (v12 - 1) & v12)
  {
    sub_1AE926EC8();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_1AE925F14();
    swift_bridgeObjectRelease();
    v14 = sub_1AE926F10();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v9 ^= v14;
    if (v6)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_1AE926ED4();
    }
    v12 = *(_QWORD *)(v3 + 8 * v10);
    if (!v12)
      break;
LABEL_14:
    ;
  }
  v13 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    ++v10;
    goto LABEL_14;
  }
  while (1)
  {
    v10 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v12 = *(_QWORD *)(v3 + 8 * v10);
    ++v13;
    if (v12)
      goto LABEL_14;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

void sub_1AE7AADF8()
{
  unint64_t *v0;
  unint64_t v1;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v3;

  v1 = *v0;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v1 & 0x8000000000000000) != 0
    || (v1 & 0x4000000000000000) != 0)
  {
    sub_1AE7AA54C(v1);
  }
  v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v3 - 1;
    sub_1AE9261FC();
    sub_1AE4F6664();
  }
  else
  {
    __break(1u);
  }
}

void sub_1AE7AAE60()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1AE7AA5DC();
    v1 = v3;
  }
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    *(_QWORD *)(v1 + 16) = v2 - 1;
    *v0 = v1;
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_1AE7AAEBC()
{
  unint64_t result;

  result = qword_1EEDA2AD0;
  if (!qword_1EEDA2AD0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B204, &type metadata for KnosisAnswer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2AD0);
  }
  return result;
}

unint64_t sub_1AE7AAEF8()
{
  unint64_t result;

  result = qword_1EEDA2AD8;
  if (!qword_1EEDA2AD8)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for GraphNode, &type metadata for GraphNode);
    atomic_store(result, (unint64_t *)&qword_1EEDA2AD8);
  }
  return result;
}

unint64_t sub_1AE7AAF34()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1EEDA2AE8;
  if (!qword_1EEDA2AE8)
  {
    v1 = sub_1AE523CF0(&qword_1EEDA2AE0);
    v2 = sub_1AE5C7844();
    sub_1AE7AB2BC(&qword_1EEDA2AF0, &qword_1EEDA2AF8, (uint64_t (*)(void))sub_1AE7AAFC0, MEMORY[0x1E0DEAF10]);
    v4[0] = v2;
    v4[1] = v3;
    result = MEMORY[0x1AF454B70](MEMORY[0x1E0DEA0B8], v1, v4);
    atomic_store(result, (unint64_t *)&qword_1EEDA2AE8);
  }
  return result;
}

unint64_t sub_1AE7AAFC0()
{
  unint64_t result;

  result = qword_1EEDA2B00;
  if (!qword_1EEDA2B00)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for KnosisFact, &type metadata for KnosisFact);
    atomic_store(result, (unint64_t *)&qword_1EEDA2B00);
  }
  return result;
}

unint64_t sub_1AE7AAFFC()
{
  unint64_t result;

  result = qword_1EEDA2B08;
  if (!qword_1EEDA2B08)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for KnosisQueryArg, &type metadata for KnosisQueryArg);
    atomic_store(result, (unint64_t *)&qword_1EEDA2B08);
  }
  return result;
}

void sub_1AE7AB038(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v3 = *v1;
  if ((sub_1AE5D8B40() & 1) == 0)
  {
    sub_1AE7AA5EC();
    v3 = v11;
  }
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = v3 + 80 * v5;
    v7 = *(_QWORD *)(v6 + 96);
    v8 = *(_BYTE *)(v6 + 104);
    v9 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)a1 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a1 + 16) = v9;
    v10 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 72) = v8;
    *(_QWORD *)(v3 + 16) = v5;
    *v1 = v3;
    sub_1AE4F6624();
  }
  else
  {
    __break(1u);
  }
}

double sub_1AE7AB0B0@<D0>(uint64_t a1@<X8>)
{
  return sub_1AE7993BC(a1);
}

double sub_1AE7AB0C8@<D0>(uint64_t a1@<X8>)
{
  return sub_1AE7AB0B0(a1);
}

unint64_t sub_1AE7AB0E0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EED9B248;
  if (!qword_1EED9B248)
  {
    v1 = sub_1AE523CF0(&qword_1ED30F918);
    v2[0] = MEMORY[0x1E0DEA970];
    v2[1] = MEMORY[0x1E0DEA970];
    result = MEMORY[0x1AF454B70](MEMORY[0x1E0DEA0B8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EED9B248);
  }
  return result;
}

unint64_t sub_1AE7AB13C()
{
  unint64_t result;

  result = qword_1EEDA2B28;
  if (!qword_1EEDA2B28)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B1B4, &type metadata for KnosisFact.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2B28);
  }
  return result;
}

unint64_t sub_1AE7AB178()
{
  unint64_t result;

  result = qword_1EEDA2B38;
  if (!qword_1EEDA2B38)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B164, &type metadata for QueryFeatures.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2B38);
  }
  return result;
}

unint64_t sub_1AE7AB1B4()
{
  unint64_t result;

  result = qword_1EEDA2B40;
  if (!qword_1EEDA2B40)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for IntentRequest, &type metadata for IntentRequest);
    atomic_store(result, (unint64_t *)&qword_1EEDA2B40);
  }
  return result;
}

unint64_t sub_1AE7AB1F0()
{
  unint64_t result;

  result = qword_1EEDA2B50;
  if (!qword_1EEDA2B50)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B114, &type metadata for Debug.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2B50);
  }
  return result;
}

unint64_t sub_1AE7AB22C()
{
  unint64_t result;

  result = qword_1EEDA2B68;
  if (!qword_1EEDA2B68)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for ExecStep, &type metadata for ExecStep);
    atomic_store(result, (unint64_t *)&qword_1EEDA2B68);
  }
  return result;
}

void sub_1AE7AB268(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!*a1)
  {
    v6 = sub_1AE523CF0(&qword_1ED319DE0);
    v7 = a2;
    atomic_store(MEMORY[0x1AF454B70](a3, v6, &v7), a1);
  }
  sub_1AE4FE870();
}

void sub_1AE7AB2BC(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  if (!*a1)
  {
    v7 = sub_1AE523CF0(a2);
    v8 = a3();
    atomic_store(MEMORY[0x1AF454B70](a4, v7, &v8), a1);
  }
  sub_1AE4FE870();
}

unint64_t sub_1AE7AB314()
{
  unint64_t result;

  result = qword_1EEDA2B80;
  if (!qword_1EEDA2B80)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for ExecStep, &type metadata for ExecStep);
    atomic_store(result, (unint64_t *)&qword_1EEDA2B80);
  }
  return result;
}

unint64_t sub_1AE7AB350()
{
  unint64_t result;

  result = qword_1EEDA2B90;
  if (!qword_1EEDA2B90)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B0C4, &type metadata for ExecStep.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2B90);
  }
  return result;
}

unint64_t sub_1AE7AB390()
{
  unint64_t result;

  result = qword_1EEDA2BA0;
  if (!qword_1EEDA2BA0)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for KnosisResult.Status, &type metadata for KnosisResult.Status);
    atomic_store(result, (unint64_t *)&qword_1EEDA2BA0);
  }
  return result;
}

void sub_1AE7AB3CC()
{
  sub_1AE52FB78(&qword_1EED99520, &qword_1EED99518, MEMORY[0x1E0DEAF38]);
}

void sub_1AE7AB3F8()
{
  sub_1AE52FB78((unint64_t *)&unk_1EED99530, &qword_1EED99528, MEMORY[0x1E0DEAF38]);
}

_UNKNOWN **sub_1AE7AB424()
{
  return &protocol witness table for ExtendedTriple;
}

void sub_1AE7AB430(uint64_t a1)
{
  uint64_t v2;

  sub_1AE52FB78(&qword_1EEDA2BA8, &qword_1EEDA2A88, (uint64_t)&protocol conformance descriptor for <A> [A]);
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_1AE7AB46C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1AF454B70](&protocol conformance descriptor for CustomKnosisResultContext<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1AE7AB498()
{
  sub_1AE52FB78(&qword_1EEDA2BA8, &qword_1EEDA2A88, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

unint64_t sub_1AE7AB4C8()
{
  unint64_t result;

  result = qword_1EEDA2BB0;
  if (!qword_1EEDA2BB0)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for GraphNode, &type metadata for GraphNode);
    atomic_store(result, (unint64_t *)&qword_1EEDA2BB0);
  }
  return result;
}

unint64_t sub_1AE7AB508()
{
  unint64_t result;

  result = qword_1EEDA2BB8[0];
  if (!qword_1EEDA2BB8[0])
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for KnosisFact, &type metadata for KnosisFact);
    atomic_store(result, qword_1EEDA2BB8);
  }
  return result;
}

uint64_t destroy for KnosisResult(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 96))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  result = *(_QWORD *)(a1 + 152);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for KnosisResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v7;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    v8 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v8;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v9;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  }
  v10 = *(_QWORD *)(a2 + 152);
  if (v10)
  {
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v10;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  }
  return a1;
}

uint64_t assignWithCopy for KnosisResult(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v4 = (_OWORD *)(a1 + 88);
  v5 = (__int128 *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1AE7AB998(a1 + 88);
      v8 = *(_OWORD *)(a2 + 104);
      v7 = *(_OWORD *)(a2 + 120);
      v9 = *v5;
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 104) = v8;
      *(_OWORD *)(a1 + 120) = v7;
      *v4 = v9;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v5;
    v11 = *(_OWORD *)(a2 + 104);
    v12 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 104) = v11;
    *(_OWORD *)(a1 + 120) = v12;
    *v4 = v10;
  }
  v13 = (_OWORD *)(a1 + 144);
  v14 = (_OWORD *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 152);
  if (*(_QWORD *)(a1 + 152))
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1AE7AB9C4(a1 + 144);
      v16 = *(_QWORD *)(a2 + 160);
      *v13 = *v14;
      *(_QWORD *)(a1 + 160) = v16;
    }
  }
  else if (v15)
  {
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *v14;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *v13 = v17;
  }
  return a1;
}

uint64_t sub_1AE7AB998(uint64_t a1)
{
  destroy for QueryFeatures();
  return a1;
}

uint64_t sub_1AE7AB9C4(uint64_t a1)
{
  destroy for IntentRequest();
  return a1;
}

void *initializeWithTake for KnosisResult(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

uint64_t assignWithTake for KnosisResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  if (*(_QWORD *)(a1 + 96))
  {
    v7 = *(_QWORD *)(a2 + 96);
    if (v7)
    {
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v7;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
      v8 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = v8;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1AE7AB998(a1 + 88);
  }
  v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
LABEL_6:
  if (!*(_QWORD *)(a1 + 152))
  {
LABEL_10:
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    return a1;
  }
  v10 = *(_QWORD *)(a2 + 152);
  if (!v10)
  {
    sub_1AE7AB9C4(a1 + 144);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KnosisResult(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 168))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KnosisResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for KnosisResult()
{
  sub_1AE4F67D4();
}

uint64_t storeEnumTagSinglePayload for KnosisResult.Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1AE7ABC4C + 4 * byte_1AE95A5E1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1AE7ABC80 + 4 * byte_1AE95A5DC[v4]))();
}

uint64_t sub_1AE7ABC80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7ABC88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE7ABC90);
  return result;
}

uint64_t sub_1AE7ABC9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE7ABCA4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1AE7ABCA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7ABCB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for KnosisResult.Status()
{
  sub_1AE4F67D4();
}

uint64_t sub_1AE7ABCC8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1AE7ABD50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1AE7ABE20(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1AE7ABE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1AE7ABEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1AE7ABF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1AE7ABFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_1AE7AC058(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
    else
    {
      return _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(a1, v6, v4);
    }
  }
  else
  {
    if (((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1AE7AC0DC + 4 * byte_1AE95A5E6[v11]))();
  }
}

void sub_1AE7AC15C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
  }
  if (a2 > v6)
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v10 = ~v6 + a2;
      bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
      *a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1AE7AC250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a2)
  {
    if (a3 < 0x7FFFFFFF)
    {
      v8 = (_QWORD *)((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((a2 & 0x80000000) != 0)
        v9 = a2 ^ 0x80000000;
      else
        v9 = (a2 - 1);
      *v8 = v9;
    }
    else
    {
      return _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v5, a2, a3, a4);
    }
  }
  return result;
}

uint64_t destroy for KnosisAnswer(uint64_t a1)
{
  sub_1AE525C94(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int16 *)(a1 + 32), *(_BYTE *)(a1 + 34));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KnosisAnswer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 34);
  v9 = *(unsigned __int16 *)(a2 + 32);
  sub_1AE525B74(*(_QWORD *)a2, v5, v6, v7, v9, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 34) = v8;
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KnosisAnswer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 34);
  v9 = *(unsigned __int16 *)(a2 + 32);
  sub_1AE525B74(*(_QWORD *)a2, v5, v6, v7, v9, v8);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v14 = *(unsigned __int16 *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v9;
  v15 = *(_BYTE *)(a1 + 34);
  *(_BYTE *)(a1 + 34) = v8;
  sub_1AE525C94(v10, v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for KnosisAnswer(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v4 = *(_WORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 34);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  v11 = *(unsigned __int16 *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v4;
  v12 = *(_BYTE *)(a1 + 34);
  *(_BYTE *)(a1 + 34) = v5;
  sub_1AE525C94(v6, v7, v8, v9, v11, v12);
  v13 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KnosisAnswer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 112))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 72);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KnosisAnswer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for KnosisAnswer()
{
  sub_1AE4F67D4();
}

uint64_t destroy for GraphNode(uint64_t a1)
{
  return sub_1AE525C94(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int16 *)(a1 + 32), *(_BYTE *)(a1 + 34));
}

uint64_t initializeWithCopy for GraphNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 34);
  v8 = *(unsigned __int16 *)(a2 + 32);
  sub_1AE525B74(*(_QWORD *)a2, v4, v5, v6, v8, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 34) = v7;
  return a1;
}

uint64_t assignWithCopy for GraphNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 34);
  v8 = *(unsigned __int16 *)(a2 + 32);
  sub_1AE525B74(*(_QWORD *)a2, v4, v5, v6, v8, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v13 = *(unsigned __int16 *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v8;
  v14 = *(_BYTE *)(a1 + 34);
  *(_BYTE *)(a1 + 34) = v7;
  sub_1AE525C94(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for GraphNode(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;

  v3 = *(_WORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 34);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(unsigned __int16 *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v3;
  v11 = *(_BYTE *)(a1 + 34);
  *(_BYTE *)(a1 + 34) = v4;
  sub_1AE525C94(v5, v7, v6, v8, v10, v11);
  return a1;
}

uint64_t sub_1AE7AC7E8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 34) <= 3u)
    return *(unsigned __int8 *)(a1 + 34);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_1AE7AC800(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    LOBYTE(a2) = 4;
    *(_WORD *)(result + 32) = 0;
  }
  *(_BYTE *)(result + 34) = a2;
  return result;
}

void type metadata accessor for GraphNode()
{
  sub_1AE4F67D4();
}

uint64_t destroy for KnosisFact(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1AE525C94(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 48), *(_BYTE *)(a1 + 50));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AE525C94(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(unsigned __int16 *)(a1 + 128), *(_BYTE *)(a1 + 130));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KnosisFact(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 50);
  v10 = *(unsigned __int16 *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_1AE525B74(v5, v6, v7, v8, v10, v9);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_WORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 50) = v9;
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a2 + 120);
  LOBYTE(v10) = *(_BYTE *)(a2 + 130);
  v17 = *(unsigned __int16 *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AE525B74(v13, v14, v15, v16, v17, v10);
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v15;
  *(_QWORD *)(a1 + 120) = v16;
  *(_WORD *)(a1 + 128) = v17;
  *(_BYTE *)(a1 + 130) = v10;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KnosisFact(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_BYTE *)(a2 + 50);
  v9 = *(_WORD *)(a2 + 48);
  sub_1AE525B74(v4, v5, v6, v7, v9, v8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v14 = *(unsigned __int16 *)(a1 + 48);
  *(_WORD *)(a1 + 48) = v9;
  v15 = *(_BYTE *)(a1 + 50);
  *(_BYTE *)(a1 + 50) = v8;
  sub_1AE525C94(v10, v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_BYTE *)(a2 + 130);
  v21 = *(_WORD *)(a2 + 128);
  sub_1AE525B74(v16, v17, v18, v19, v21, v20);
  v22 = *(_QWORD *)(a1 + 96);
  v23 = *(_QWORD *)(a1 + 104);
  v24 = *(_QWORD *)(a1 + 112);
  v25 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  v26 = *(unsigned __int16 *)(a1 + 128);
  *(_WORD *)(a1 + 128) = v21;
  v27 = *(_BYTE *)(a1 + 130);
  *(_BYTE *)(a1 + 130) = v20;
  sub_1AE525C94(v22, v23, v24, v25, v26, v27);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for KnosisFact(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x90uLL);
}

uint64_t assignWithTake for KnosisFact(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v24;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_WORD *)(a2 + 48);
  v6 = *(_BYTE *)(a2 + 50);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v11;
  v12 = *(unsigned __int16 *)(a1 + 48);
  *(_WORD *)(a1 + 48) = v5;
  v13 = *(_BYTE *)(a1 + 50);
  *(_BYTE *)(a1 + 50) = v6;
  sub_1AE525C94(v7, v8, v9, v10, v12, v13);
  v14 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v15;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v16 = *(_WORD *)(a2 + 128);
  v17 = *(_BYTE *)(a2 + 130);
  v18 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 104);
  v20 = *(_QWORD *)(a1 + 112);
  v21 = *(_QWORD *)(a1 + 120);
  v22 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v22;
  v23 = *(unsigned __int16 *)(a1 + 128);
  *(_WORD *)(a1 + 128) = v16;
  v24 = *(_BYTE *)(a1 + 130);
  *(_BYTE *)(a1 + 130) = v17;
  sub_1AE525C94(v18, v19, v20, v21, v23, v24);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KnosisFact(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 144))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KnosisFact(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for KnosisFact()
{
  sub_1AE4F67D4();
}

void type metadata accessor for KnosisError()
{
  sub_1AE4F67D4();
}

uint64_t destroy for QueryFeatures()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for QueryFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for QueryFeatures(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for QueryFeatures(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryFeatures(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QueryFeatures(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for QueryFeatures()
{
  sub_1AE4F67D4();
}

void sub_1AE7ACEB8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_1AE4F66CC();
  sub_1AE4F6664();
}

void type metadata accessor for Debug()
{
  sub_1AE4F67D4();
}

_QWORD *assignWithCopy for ExecStep(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for ExecStep()
{
  sub_1AE4F67D4();
}

ValueMetadata *type metadata accessor for ExecStep.CodingKeys()
{
  return &type metadata for ExecStep.CodingKeys;
}

ValueMetadata *type metadata accessor for Debug.CodingKeys()
{
  return &type metadata for Debug.CodingKeys;
}

uint64_t _s20IntelligencePlatform8ExecStepV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AE7ACFF8 + 4 * byte_1AE95A5FA[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AE7AD02C + 4 * byte_1AE95A5F5[v4]))();
}

uint64_t sub_1AE7AD02C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7AD034(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE7AD03CLL);
  return result;
}

uint64_t sub_1AE7AD048(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE7AD050);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AE7AD054(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7AD05C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for QueryFeatures.CodingKeys()
{
  return &type metadata for QueryFeatures.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for KnosisFact.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1AE7AD0C4 + 4 * byte_1AE95A604[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1AE7AD0F8 + 4 * byte_1AE95A5FF[v4]))();
}

uint64_t sub_1AE7AD0F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7AD100(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE7AD108);
  return result;
}

uint64_t sub_1AE7AD114(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE7AD11CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1AE7AD120(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7AD128(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KnosisFact.CodingKeys()
{
  return &type metadata for KnosisFact.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for KnosisAnswer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1AE7AD190 + 4 * byte_1AE95A60E[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1AE7AD1C4 + 4 * byte_1AE95A609[v4]))();
}

uint64_t sub_1AE7AD1C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7AD1CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE7AD1D4);
  return result;
}

uint64_t sub_1AE7AD1E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE7AD1E8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1AE7AD1EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7AD1F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KnosisAnswer.CodingKeys()
{
  return &type metadata for KnosisAnswer.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for KnosisResult.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1AE7AD25C + 4 * byte_1AE95A618[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1AE7AD290 + 4 * byte_1AE95A613[v4]))();
}

uint64_t sub_1AE7AD290(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7AD298(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE7AD2A0);
  return result;
}

uint64_t sub_1AE7AD2AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE7AD2B4);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1AE7AD2B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7AD2C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KnosisResult.CodingKeys()
{
  return &type metadata for KnosisResult.CodingKeys;
}

unint64_t sub_1AE7AD2E0()
{
  unint64_t result;

  result = qword_1EEDA2C40;
  if (!qword_1EEDA2C40)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95AD04, &type metadata for KnosisResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2C40);
  }
  return result;
}

unint64_t sub_1AE7AD320()
{
  unint64_t result;

  result = qword_1EEDA2C48;
  if (!qword_1EEDA2C48)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95ADBC, &type metadata for KnosisAnswer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2C48);
  }
  return result;
}

unint64_t sub_1AE7AD360()
{
  unint64_t result;

  result = qword_1EEDA2C50;
  if (!qword_1EEDA2C50)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95AE74, &type metadata for KnosisFact.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2C50);
  }
  return result;
}

unint64_t sub_1AE7AD3A0()
{
  unint64_t result;

  result = qword_1EEDA2C58;
  if (!qword_1EEDA2C58)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95AF2C, &type metadata for QueryFeatures.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2C58);
  }
  return result;
}

unint64_t sub_1AE7AD3E0()
{
  unint64_t result;

  result = qword_1EEDA2C60;
  if (!qword_1EEDA2C60)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95AFE4, &type metadata for Debug.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2C60);
  }
  return result;
}

unint64_t sub_1AE7AD420()
{
  unint64_t result;

  result = qword_1EEDA2C68;
  if (!qword_1EEDA2C68)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B09C, &type metadata for ExecStep.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2C68);
  }
  return result;
}

unint64_t sub_1AE7AD460()
{
  unint64_t result;

  result = qword_1EEDA2C70;
  if (!qword_1EEDA2C70)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B00C, &type metadata for ExecStep.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2C70);
  }
  return result;
}

unint64_t sub_1AE7AD4A0()
{
  unint64_t result;

  result = qword_1EEDA2C78;
  if (!qword_1EEDA2C78)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B034, &type metadata for ExecStep.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2C78);
  }
  return result;
}

unint64_t sub_1AE7AD4E0()
{
  unint64_t result;

  result = qword_1EEDA2C80;
  if (!qword_1EEDA2C80)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95AF54, &type metadata for Debug.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2C80);
  }
  return result;
}

unint64_t sub_1AE7AD520()
{
  unint64_t result;

  result = qword_1EEDA2C88;
  if (!qword_1EEDA2C88)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95AF7C, &type metadata for Debug.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2C88);
  }
  return result;
}

unint64_t sub_1AE7AD560()
{
  unint64_t result;

  result = qword_1EEDA2C90;
  if (!qword_1EEDA2C90)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95AE9C, &type metadata for QueryFeatures.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2C90);
  }
  return result;
}

unint64_t sub_1AE7AD5A0()
{
  unint64_t result;

  result = qword_1EEDA2C98;
  if (!qword_1EEDA2C98)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95AEC4, &type metadata for QueryFeatures.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2C98);
  }
  return result;
}

unint64_t sub_1AE7AD5E0()
{
  unint64_t result;

  result = qword_1EEDA2CA0;
  if (!qword_1EEDA2CA0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95ADE4, &type metadata for KnosisFact.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2CA0);
  }
  return result;
}

unint64_t sub_1AE7AD620()
{
  unint64_t result;

  result = qword_1EEDA2CA8;
  if (!qword_1EEDA2CA8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95AE0C, &type metadata for KnosisFact.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2CA8);
  }
  return result;
}

unint64_t sub_1AE7AD660()
{
  unint64_t result;

  result = qword_1EEDA2CB0;
  if (!qword_1EEDA2CB0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95AD2C, &type metadata for KnosisAnswer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2CB0);
  }
  return result;
}

unint64_t sub_1AE7AD6A0()
{
  unint64_t result;

  result = qword_1EEDA2CB8;
  if (!qword_1EEDA2CB8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95AD54, &type metadata for KnosisAnswer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2CB8);
  }
  return result;
}

unint64_t sub_1AE7AD6E0()
{
  unint64_t result;

  result = qword_1EEDA2CC0;
  if (!qword_1EEDA2CC0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95AC74, &type metadata for KnosisResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2CC0);
  }
  return result;
}

unint64_t sub_1AE7AD720()
{
  unint64_t result;

  result = qword_1EEDA2CC8;
  if (!qword_1EEDA2CC8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95AC9C, &type metadata for KnosisResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2CC8);
  }
  return result;
}

unint64_t sub_1AE7AD75C()
{
  unint64_t result;

  result = qword_1EEDA2CD0;
  if (!qword_1EEDA2CD0)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for KnosisResult.Status, &type metadata for KnosisResult.Status);
    atomic_store(result, (unint64_t *)&qword_1EEDA2CD0);
  }
  return result;
}

uint64_t sub_1AE7AD798@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1AE79F6CC(*a1, a1[1], *a2, a3);
}

uint64_t sub_1AE7AD7C8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1AE7AD798(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_1AE7AD7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  __int128 v6;
  _OWORD v8[2];
  char v9;

  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  v9 = *(_BYTE *)(a1 + 32);
  return sub_1AE79940C((uint64_t *)v8, a2, a3, *a4, *a5, *a6, a6[1], a6[2]);
}

uint64_t sub_1AE7AD824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;

  return sub_1AE7AD7E0(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t sub_1AE7AD840()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1AE7AD864(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1AE8692C8(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_1AE7AD87C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1AE79EF3C(a1, *(unsigned __int8 *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_1AE7AD8A0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1AE79E1F4(a1, *(unsigned __int8 *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_1AE7AD8C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_1AE7AD938(a1, a2, a3, a4);
}

uint64_t sub_1AE7AD8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for CustomKnosisResultContext(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v5 = sub_1AE7AE05C();
  return sub_1AE79D694(v5, v6, v7, v8);
}

uint64_t sub_1AE7AD938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  type metadata accessor for CustomKnosisResultContext(0, v8, v9, a3);
  return sub_1AE79D8AC(a1, a2, v8, v9, a4);
}

uint64_t sub_1AE7AD9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1AE7AE38C(a1, a2, *(_QWORD *)(v4 + 32), a4);
  sub_1AE505BA4();
  sub_1AE7AE380();
  sub_1AE7AE374();
  sub_1AE7AE3EC();
  return sub_1AE4FF104();
}

uint64_t sub_1AE7AD9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v4 + 32);
  type metadata accessor for CustomKnosisResultContext(0, *(_QWORD *)(v4 + 16), v5, a4);
  v6 = sub_1AE7AE05C();
  return sub_1AE79D450(v6, v7, v8, v9, v5);
}

uint64_t sub_1AE7ADA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1AE7AE38C(a1, a2, *(_QWORD *)(v4 + 24), a4);
  sub_1AE505BA4();
  sub_1AE7AE380();
  sub_1AE7AE374();
  sub_1AE7AE3EC();
  return sub_1AE4FF104();
}

unint64_t sub_1AE7ADA9C()
{
  unint64_t result;

  result = qword_1EEDA2CF8;
  if (!qword_1EEDA2CF8)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for KnosisError, &type metadata for KnosisError);
    atomic_store(result, (unint64_t *)&qword_1EEDA2CF8);
  }
  return result;
}

uint64_t sub_1AE7ADAD8(uint64_t (*a1)(_QWORD *), uint64_t a2)
{
  uint64_t v2;

  return sub_1AE7AA60C(a1, a2, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

double sub_1AE7ADAF0@<D0>(uint64_t a1@<X8>)
{
  return sub_1AE7AB0C8(a1);
}

uint64_t sub_1AE7ADB08(_QWORD *a1)
{
  return sub_1AE7AA328(a1);
}

__n128 sub_1AE7ADB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__n128 a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 result;

  *(_QWORD *)(v21 + 16) = v24;
  v27 = v21 + 112 * v23;
  *(_QWORD *)(v27 + 32) = v22;
  *(_QWORD *)(v27 + 40) = a13;
  *(_QWORD *)(v27 + 48) = a12;
  *(_QWORD *)(v27 + 56) = a11;
  *(_WORD *)(v27 + 64) = a10;
  *(_BYTE *)(v27 + 66) = 1;
  *(_QWORD *)(v27 + 72) = a17;
  *(_QWORD *)(v27 + 80) = a19;
  *(_QWORD *)(v27 + 88) = a16;
  *(_QWORD *)(v27 + 96) = a18;
  result = a21;
  *(__n128 *)(v27 + 104) = a21;
  *(_QWORD *)(v27 + 120) = v26;
  *(_BYTE *)(v27 + 128) = a15;
  *(_QWORD *)(v27 + 136) = v25;
  return result;
}

void sub_1AE7ADB80()
{
  sub_1AE5216D4();
}

uint64_t sub_1AE7ADB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned __int8 a34,int a35,unsigned int a36)
{
  return sub_1AE525C94(a33, a32, a31, a30, a36, a34);
}

uint64_t sub_1AE7ADBA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(v1 - 232) = *(_QWORD *)(a1 + 80);
  return result;
}

uint64_t sub_1AE7ADBDC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE7ADBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1AE525B74(a1, a2, a3, a4, a5, 0);
}

void sub_1AE7ADBFC()
{
  sub_1AE519D1C();
}

uint64_t sub_1AE7ADC24()
{
  return sub_1AE926ED4();
}

uint64_t sub_1AE7ADC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  return sub_1AE525BB8((uint64_t)va);
}

uint64_t sub_1AE7ADC34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int8 a6@<W5>, uint64_t a7@<X8>)
{
  *(_BYTE *)(a7 + 34) = a6;
  return sub_1AE525B74(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1AE7ADC3C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7ADC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return a15;
}

uint64_t sub_1AE7ADC7C()
{
  uint64_t v0;

  return v0;
}

__n128 sub_1AE7ADC94(uint64_t a1)
{
  return *(__n128 *)a1;
}

uint64_t sub_1AE7ADCCC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE7ADCD4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE7ADCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1AE525B74(a1, a2, a3, a4, a5, 1u);
}

uint64_t sub_1AE7ADCE4()
{
  return sub_1AE925F8C();
}

uint64_t sub_1AE7ADCF4()
{
  uint64_t v0;

  return sub_1AE797D9C(v0);
}

uint64_t sub_1AE7ADD04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1AE525C94(a1, a2, a3, *(_QWORD *)(v3 + 256), *(unsigned int *)(v3 + 248), *(_DWORD *)(v3 + 224));
}

BOOL sub_1AE7ADD14@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1AE7ADD3C()
{
  uint64_t v0;

  return sub_1AE525C94(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 256), *(unsigned int *)(v0 + 248), *(_DWORD *)(v0 + 288));
}

uint64_t sub_1AE7ADD54()
{
  return sub_1AE926D60();
}

uint64_t sub_1AE7ADD6C()
{
  return 0x746C757365526F6ELL;
}

uint64_t sub_1AE7ADD84()
{
  return sub_1AE926C70();
}

uint64_t sub_1AE7ADD9C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7ADDBC()
{
  return sub_1AE926088();
}

uint64_t sub_1AE7ADDE0()
{
  return sub_1AE926F4C();
}

__n128 sub_1AE7ADDF4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;

  *(_QWORD *)(v3 - 184) = v1;
  *(_QWORD *)(v3 - 176) = v2;
  result = *(__n128 *)(a1 - 8);
  *(__n128 *)(v3 - 112) = result;
  *(_DWORD *)(v3 - 188) = *(unsigned __int8 *)(a1 + 16);
  return result;
}

uint64_t sub_1AE7ADE10()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void sub_1AE7ADE34()
{
  uint64_t v0;

  sub_1AE830E0C(*(_QWORD *)(*(_QWORD *)(v0 + 408) + 16) - 1);
}

uint64_t sub_1AE7ADE48()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7ADE50@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return CustomKnosisResultContext.init<>(knosisAnswers:)(a1, a2);
}

uint64_t sub_1AE7ADE58()
{
  return sub_1AE925F14();
}

uint64_t sub_1AE7ADE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned __int8 a26,int a27,unsigned int a28)
{
  return sub_1AE525C94(a25, a24, a23, a22, a28, a26);
}

uint64_t sub_1AE7ADE78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return sub_1AE525B74(a1, a2, v3, v4, *(unsigned int *)(v2 + 312), *(_DWORD *)(v2 + 304));
}

uint64_t sub_1AE7ADE8C()
{
  return sub_1AE925C8C();
}

uint64_t sub_1AE7ADEBC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7ADED8()
{
  uint64_t v0;

  return sub_1AE525BB8(v0 + 464);
}

void sub_1AE7ADEE0()
{
  sub_1AE519D38();
}

void sub_1AE7ADEEC()
{
  sub_1AE519C64();
}

void sub_1AE7ADEF8()
{
  sub_1AE519C64();
}

uint64_t sub_1AE7ADF04()
{
  return 0x726F727265;
}

__n128 sub_1AE7ADF18@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  *(_QWORD *)(a1 + 88) = v2;
  *(_QWORD *)(a1 + 96) = v1;
  result = *(__n128 *)(v3 - 112);
  *(__n128 *)(a1 + 104) = result;
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = *(_DWORD *)(v3 - 188);
  return result;
}

uint64_t sub_1AE7ADF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  return sub_1AE525A98((uint64_t)&a50);
}

uint64_t sub_1AE7ADF3C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7ADF7C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7ADF88()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7ADF90()
{
  return sub_1AE925F14();
}

uint64_t sub_1AE7ADFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1AE525B74(a1, a2, a3, a4, a5, 2u);
}

uint64_t sub_1AE7ADFC0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE7ADFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v5;

  return sub_1AE525B74(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_1AE7AE04C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7AE05C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7AE074()
{
  uint64_t v0;

  return v0;
}

__n128 sub_1AE7AE084(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__n128 a21)
{
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 result;

  result = a21;
  a1[1] = a21;
  a1[2].n128_u64[0] = v23;
  a1[2].n128_u64[1] = v22;
  a1[5].n128_u64[1] = v21;
  return result;
}

uint64_t sub_1AE7AE09C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7AE0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1AE525B74(a1, a2, a3, a4, a5, 3u);
}

uint64_t sub_1AE7AE0B4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7AE0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v5;

  return sub_1AE525B74(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_1AE7AE0C4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE7AE0CC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1AE7AE0D4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7AE0FC()
{
  return sub_1AE926CB8();
}

uint64_t sub_1AE7AE124()
{
  return 126;
}

void sub_1AE7AE144(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) |= v1;
}

uint64_t sub_1AE7AE168()
{
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1AE7AE170(uint64_t a1)
{
  return sub_1AE79B8C4(a1);
}

uint64_t sub_1AE7AE178()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7AE180()
{
  return sub_1AE925F74();
}

void sub_1AE7AE190(uint64_t a1)
{
  sub_1AE797EC8(a1);
}

uint64_t sub_1AE7AE1A0()
{
  return sub_1AE798DC0();
}

uint64_t sub_1AE7AE1A8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7AE1C0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7AE1D8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7AE1F0()
{
  uint64_t v0;

  return sub_1AE525A98(v0 + 464);
}

uint64_t sub_1AE7AE1F8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7AE204()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7AE214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  return sub_1AE525A98((uint64_t)&a32);
}

uint64_t sub_1AE7AE234()
{
  return sub_1AE926BB0();
}

uint64_t sub_1AE7AE244()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7AE25C()
{
  return sub_1AE926C88();
}

uint64_t sub_1AE7AE26C()
{
  uint64_t v0;

  return v0 - 120;
}

void sub_1AE7AE27C()
{
  sub_1AE519D38();
}

void sub_1AE7AE28C(uint64_t a1@<X8>)
{
  __int16 v1;

  *(_WORD *)(a1 + 64) = v1;
  *(_BYTE *)(a1 + 66) = 1;
}

uint64_t sub_1AE7AE2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return sub_1AE525B74(a1, a2, a3, a4, v5, *(_DWORD *)(v4 + 288));
}

uint64_t sub_1AE7AE2E0()
{
  return CustomKnosisResultContext.tripleProvider.getter();
}

uint64_t sub_1AE7AE2EC()
{
  return sub_1AE925F74();
}

uint64_t sub_1AE7AE304()
{
  return sub_1AE926C40();
}

uint64_t sub_1AE7AE310()
{
  return sub_1AE925CE0();
}

uint64_t sub_1AE7AE31C()
{
  return swift_bridgeObjectRelease();
}

void sub_1AE7AE324()
{
  JUMPOUT(0x1AF4530E8);
}

uint64_t sub_1AE7AE32C@<X0>(uint64_t a1@<X8>)
{
  return a1 + 32;
}

uint64_t sub_1AE7AE338@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + 144 * a1 + 32;
}

uint64_t sub_1AE7AE374()
{
  return swift_release();
}

uint64_t sub_1AE7AE380()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7AE38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for CustomKnosisResultContext(0, v4, a3, a4);
}

uint64_t sub_1AE7AE3B0()
{
  return sub_1AE925F74();
}

uint64_t sub_1AE7AE3D0()
{
  return 0;
}

uint64_t sub_1AE7AE3E4()
{
  return swift_bridgeObjectRetain();
}

void sub_1AE7AE418(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>)
{
  uint64_t v3;

  *a1 = a2;
  a1[1] = a3;
  a1[2].n128_u16[0] = *(_WORD *)(v3 - 96);
}

uint64_t sub_1AE7AE42C()
{
  return swift_bridgeObjectRelease();
}

void sub_1AE7AE464()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 328) = (unint64_t)(*(_QWORD *)(v0 + 328) + 64) >> 6;
}

uint64_t sub_1AE7AE478()
{
  return sub_1AE925F74();
}

uint64_t sub_1AE7AE484()
{
  return 0x73726577736E6120;
}

uint64_t sub_1AE7AE498()
{
  return swift_bridgeObjectRetain();
}

void sub_1AE7AE4A4()
{
  sub_1AE60EEC0();
}

uint64_t sub_1AE7AE4AC(uint64_t a1)
{
  return sub_1AE797D9C(a1);
}

uint64_t sub_1AE7AE4C8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1AE7AE4DC()
{
  return EntityIdentifier.stringValue.getter();
}

uint64_t sub_1AE7AE4F8()
{
  uint64_t v0;

  return sub_1AE797D9C(v0);
}

uint64_t sub_1AE7AE544()
{
  uint64_t v0;

  return v0 - 72;
}

uint64_t sub_1AE7AE558()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7AE564()
{
  return sub_1AE926CC4();
}

void KnosisServer.executeKGQ(request:)()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  os_signpost_type_t v48;
  uint8_t *v49;
  os_signpost_id_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  id v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint8_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120[3];
  _QWORD v121[18];
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char v131;

  sub_1AE4FC4D4();
  v96 = v0;
  v5 = v4;
  v110 = v6;
  v97 = (int *)type metadata accessor for Renderer(0);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v7);
  sub_1AE4F9024();
  v116 = v8;
  v99 = sub_1AE7B4C70();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v9);
  sub_1AE4F666C();
  v12 = v11 - v10;
  v13 = sub_1AE925AE8();
  v108 = *(_QWORD *)(v13 - 8);
  v109 = v13;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v14);
  sub_1AE4F686C();
  v106 = v15;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v16);
  v107 = (char *)&v93 - v17;
  v18 = sub_1AE4F6854();
  v101 = *(_QWORD *)(v18 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v19);
  v102 = (uint64_t)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AE7B4B78();
  v21 = sub_1AE925B0C();
  v104 = *(_QWORD *)(v21 - 8);
  v105 = v21;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v22);
  sub_1AE4F9024();
  v118 = v23;
  sub_1AE7B4B78();
  v103 = type metadata accessor for LogSignpost();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v24);
  sub_1AE4F90F4();
  v25 = *(_QWORD *)v5;
  v26 = *(_QWORD *)(v5 + 8);
  v27 = *(_QWORD *)(v5 + 24);
  v113 = *(_QWORD *)(v5 + 16);
  v114 = v25;
  v28 = *(_QWORD *)(v5 + 32);
  v115 = *(_QWORD *)(v5 + 40);
  v117 = *(_QWORD *)(v5 + 48);
  LODWORD(v25) = *(unsigned __int8 *)(v5 + 56);
  v111 = *(unsigned __int8 *)(v5 + 57);
  v112 = v25;
  if (qword_1ED3193F0 != -1)
    swift_once();
  v29 = sub_1AE4FB608(v18, (uint64_t)qword_1ED3193D8);
  sub_1AE4F6A24();
  sub_1AE4F6A24();
  sub_1AE4F6A24();
  v95 = v29;
  sub_1AE925B54();
  v30 = sub_1AE505BCC();
  v31 = sub_1AE7B4BF4(v30);
  v100 = v12;
  if (v31)
  {
    v32 = sub_1AE4F66A0();
    v94 = v18;
    v33 = (uint8_t *)v32;
    v34 = sub_1AE4F66A0();
    v98 = v2;
    *(_DWORD *)v33 = 136315138;
    v121[0] = v34;
    v93 = v33 + 4;
    *(_QWORD *)&v125 = v114;
    *((_QWORD *)&v125 + 1) = v26;
    v126 = v113;
    v127 = v27;
    v128 = v28;
    v129 = v115;
    v130 = v117;
    v131 = v112;
    v35 = sub_1AE7B4CA8(v111);
    sub_1AE520ED4(v35, v36, (uint64_t)v121, v37, v38, v39, v40, v41, (uint64_t)v93, v94, v95, v96, (uint64_t)v97, v98, v99, v100, v101, v102, v103,
      v104);
    sub_1AE7B4C1C(v42);
    sub_1AE92676C();
    sub_1AE4F6824();
    sub_1AE4F6824();
    sub_1AE4F6824();
    sub_1AE4F9038();
    sub_1AE508348(&dword_1AE4F2000, v1, v3, "executeKGQ called with request %s", v33);
    sub_1AE5081C8();
    sub_1AE4F9064();
  }

  sub_1AE4F6824();
  sub_1AE4F6824();
  v43 = v26;
  sub_1AE4F6824();
  v44 = v27;
  v45 = v107;
  if (qword_1ED31C728 != -1)
    swift_once();
  v46 = sub_1AE4FB608(v18, (uint64_t)qword_1ED31C710);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(v101 + 16))(v102, v46, v18);
  sub_1AE925AF4();
  sub_1AE925B00();
  sub_1AE925AC4();
  v47 = sub_1AE925B00();
  v48 = sub_1AE926670();
  if ((sub_1AE926700() & 1) != 0)
  {
    v49 = (uint8_t *)sub_1AE4F66A0();
    *(_WORD *)v49 = 0;
    v50 = sub_1AE925AD0();
    sub_1AE5079F0(&dword_1AE4F2000, v47, v48, v50, "Knosis.executeKGQ", "", v49);
    sub_1AE4F9064();
  }

  v52 = v108;
  v51 = v109;
  (*(void (**)(uint64_t, char *, uint64_t))(v108 + 16))(v106, v45, v109);
  sub_1AE925B3C();
  sub_1AE4FCE84();
  v53 = sub_1AE925B30();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v45, v51);
  *(_QWORD *)v2 = "Knosis.executeKGQ";
  *(_QWORD *)(v2 + 8) = 17;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = v53;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 32))(v2 + *(int *)(v103 + 24), v118, v105);
  v54 = v117;
  if ((v117 & 0x8000000000000000) != 0)
  {
    v92 = v110;
    *v110 = 0;
    v92[1] = 0;
    v92[2] = 0;
    v92[3] = 0xE000000000000000;
    v92[4] = MEMORY[0x1E0DEE9D8];
    *((_BYTE *)v92 + 40) = 2;
    v92[6] = 0xD00000000000001FLL;
    v92[7] = 0x80000001AE984F10;
    v92[8] = 0;
    v92[9] = 0;
    *((_BYTE *)v92 + 80) = 0;
    *(_OWORD *)(v92 + 11) = 0u;
    *(_OWORD *)(v92 + 13) = 0u;
    *(_OWORD *)(v92 + 15) = 0u;
    *(_OWORD *)(v92 + 17) = 0u;
    *(_OWORD *)(v92 + 19) = 0u;
  }
  else
  {
    type metadata accessor for QueryTree();
    v126 = 0;
    v125 = 0uLL;
    LODWORD(v127) = 0;
    sub_1AE506D88();
    sub_1AE4F6804();
    sub_1AE4FB764();
    v55 = v115;
    sub_1AE883754(v114, v43, v113, v44, 0, &v125, v115, v54, v112, v111);
    v57 = v56;
    v58 = static KnosisIndexType.allCases.getter();
    v59 = sub_1AE8985EC((uint64_t)v58);
    if (qword_1ED30FB20 != -1)
      swift_once();
    v60 = swift_bridgeObjectRetain();
    sub_1AE7AF364(v60, v59, (void (*)(char *, _QWORD))sub_1AE5564D8);
    v125 = 0uLL;
    LOBYTE(v126) = 2;
    v127 = v61;
    v62 = v100;
    v63 = v96;
    v64 = sub_1AE7B0E9C(v100, v57, v55, (uint64_t)&v125);
    v66 = v65;
    sub_1AE7B4C0C();
    swift_bridgeObjectRelease();
    v67 = v116;
    sub_1AE56CC34(v62, v116, (uint64_t (*)(_QWORD))type metadata accessor for QueryContext);
    v68 = *(_QWORD *)(v63 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_defaultResultLimit);
    v69 = v97;
    *(_QWORD *)(v67 + v97[5]) = MEMORY[0x1E0DEE9E8];
    *(_QWORD *)(v67 + v69[6]) = v64;
    *(_QWORD *)(v67 + v69[7]) = v66;
    *(_BYTE *)(v67 + v69[8]) = 4;
    *(_QWORD *)(v67 + v69[9]) = v68;
    *(_QWORD *)(v67 + v69[10]) = MEMORY[0x1E0DEE9D8];
    v118 = v64;
    swift_retain();
    v117 = (unint64_t)v66;
    v70 = v66;
    sub_1AE856598();
    if (*(_BYTE *)(v62 + *(int *)(v99 + 52)) == 1)
    {
      v71 = (uint64_t *)(v62 + *(int *)(v99 + 48));
      v73 = *v71;
      v72 = v71[1];
      v74 = v71[2];
      v75 = v2;
      v76 = v122;
      v77 = v123;
      sub_1AE4F66CC();
      sub_1AE4F6804();
      v78 = v76;
      v2 = v75;
      sub_1AE53F134(v78, v77);
      v122 = v73;
      v123 = v72;
      v124 = v74;
    }
    sub_1AE4FD464(&v125, v121);
    sub_1AE506A38();
    sub_1AE506A38();
    v79 = sub_1AE925B54();
    v80 = sub_1AE9265E0();
    if (os_log_type_enabled(v79, v80))
    {
      v81 = sub_1AE4F66A0();
      v98 = v2;
      v82 = (uint8_t *)v81;
      v120[0] = sub_1AE4F66A0();
      *(_DWORD *)v82 = 136315138;
      sub_1AE506A38();
      v83 = sub_1AE7AEEE0();
      v85 = v84;
      sub_1AE4F6CEC();
      sub_1AE520ED4(v83, v85, (uint64_t)v120, v86, v87, v88, v89, v90, (uint64_t)v93, v94, v95, v96, (uint64_t)v97, v98, v99, v100, v101, v102, v103,
        v104);
      v119 = v91;
      sub_1AE92676C();
      sub_1AE4F81B8();
      sub_1AE4F6CEC();
      sub_1AE4F6CEC();
      sub_1AE508348(&dword_1AE4F2000, v79, v80, "Rendered result: %s", v82);
      sub_1AE5081C8();
      sub_1AE4F9064();
    }

    swift_release();
    sub_1AE4F6CEC();
    sub_1AE4F6CEC();

    swift_release();
    sub_1AE53D160(v116, type metadata accessor for Renderer);
    sub_1AE53D160(v62, (uint64_t (*)(_QWORD))type metadata accessor for QueryContext);
    sub_1AE4F9094();
    sub_1AE4FD464(v110, v121);
  }
  sub_1AE7B4220();
  sub_1AE53D160(v2, (uint64_t (*)(_QWORD))type metadata accessor for LogSignpost);
  sub_1AE4F8180();
}

void sub_1AE7AEDC8()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_BYTE *, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE v10[32];
  _BYTE __dst[105];

  sub_1AE7B4C84();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v4);
  sub_1AE505804();
  sub_1AE6905AC();
  MEMORY[0x1E0C80A78](v5);
  sub_1AE501F28();
  MEMORY[0x1E0C80A78](v6);
  v8 = &v10[-v7];
  memcpy(__dst, v0, sizeof(__dst));
  sub_1AE7B4C8C();
  sub_1AE4FCE84();
  sub_1AE7B4C94();
  sub_1AE7B4C40();
  sub_1AE7B4C7C();
  sub_1AE7B4BC0();
  sub_1AE7B4B84(v2);
  sub_1AE7B4B84((uint64_t)v8);
  v3(v10, 0);
  sub_1AE7B498C();
  sub_1AE505E90();
  if (v1)
  {
    sub_1AE4F6700();
    sub_1AE4F6834();
  }
  else
  {
    sub_1AE5076B0();
    sub_1AE7B4B58();
    sub_1AE4F954C();
    sub_1AE4F6700();
  }
  sub_1AE4F66A8();
}

uint64_t sub_1AE7AEEE0()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t *, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1AE4FC4D4();
  v18 = v4;
  v19 = v5;
  sub_1AE7B4C84();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v6);
  sub_1AE505804();
  sub_1AE6905AC();
  MEMORY[0x1E0C80A78](v7);
  sub_1AE501F28();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v15 - v9;
  sub_1AE4FD464(&v17, v0);
  sub_1AE7B4C8C();
  sub_1AE4FCE84();
  sub_1AE7B4C94();
  sub_1AE7B4C40();
  sub_1AE7B4C7C();
  sub_1AE7B4BC0();
  sub_1AE7B4B84(v2);
  sub_1AE7B4B84((uint64_t)v10);
  v3(&v16, 0);
  sub_1AE7B4AD8();
  sub_1AE505E90();
  if (v1)
  {
    sub_1AE4F6700();
    sub_1AE4F6834();
  }
  else
  {
    sub_1AE5076B0();
    v12 = sub_1AE7B4B58();
    if (v13)
    {
      v11 = v12;
      sub_1AE4F954C();
      sub_1AE4F6700();
      return v11;
    }
    sub_1AE4F954C();
    sub_1AE4F6700();
  }
  return 0;
}

void sub_1AE7AF004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(_BYTE *, _QWORD);
  _BYTE v16[32];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1AE7B4C84();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v7);
  sub_1AE505804();
  sub_1AE6905AC();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1E0C80A78](v9);
  v13 = &v16[-v12 - 8];
  v17 = a1;
  v18 = a2;
  v19 = a3;
  sub_1AE7B4C8C();
  sub_1AE4FCE84();
  sub_1AE7B4C94();
  sub_1AE9243CC();
  v14 = (void (*)(_BYTE *, _QWORD))sub_1AE7B4C7C();
  sub_1AE59900C((uint64_t)v13, (uint64_t)v11);
  sub_1AE7B4B84((uint64_t)v11);
  sub_1AE7B4B84((uint64_t)v13);
  v14(v16, 0);
  sub_1AE7AA2E0();
  sub_1AE505E90();
  if (v3)
  {
    sub_1AE4F6700();
    sub_1AE4F6834();
  }
  else
  {
    sub_1AE5076B0();
    sub_1AE7B4B58();
    sub_1AE4F954C();
    sub_1AE4F6700();
  }
  sub_1AE4F66A8();
}

uint64_t sub_1AE7AF14C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  __int16 v11;

  v9 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 32;
    do
    {
      v5 = *(_OWORD *)(a1 + v4 + 16);
      v10[0] = *(_OWORD *)(a1 + v4);
      v10[1] = v5;
      v11 = *(_WORD *)(a1 + v4 + 32);
      sub_1AE5C7880((uint64_t)v10);
      sub_1AE555DB4(&v8, v10);
      swift_bridgeObjectRelease();
      sub_1AE4F9038();
      v4 += 40;
      --v3;
    }
    while (v3);
    sub_1AE4F6648();
    return v9;
  }
  else
  {
    v6 = a2;
    sub_1AE4F6648();
  }
  return v6;
}

void sub_1AE7AF1E8(uint64_t a1, uint64_t a2)
{
  sub_1AE7AF364(a1, a2, (void (*)(char *, _QWORD))sub_1AE5564D8);
}

void sub_1AE7AF1F4(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];

  v3 = 0;
  v24[2] = a2;
  v4 = a1 + 56;
  sub_1AE4F95DC();
  v7 = v6 & v5;
  v9 = (unint64_t)(v8 + 63) >> 6;
  if ((v6 & v5) == 0)
    goto LABEL_3;
LABEL_2:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v10 | (v3 << 6); ; i = __clz(__rbit64(v13)) + (v3 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v15;
    v17 = v15[1];
    sub_1AE4F6730();
    sub_1AE555EFC((uint64_t)v24, v16, v17, v18, v19, v20, v21, v22, v23, v24[0]);
    swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_2;
LABEL_3:
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v12 >= v9)
      goto LABEL_21;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      v3 = v12 + 1;
      if (v12 + 1 >= v9)
        goto LABEL_21;
      v13 = *(_QWORD *)(v4 + 8 * v3);
      if (!v13)
      {
        v3 = v12 + 2;
        if (v12 + 2 >= v9)
          goto LABEL_21;
        v13 = *(_QWORD *)(v4 + 8 * v3);
        if (!v13)
        {
          v3 = v12 + 3;
          if (v12 + 3 >= v9)
            goto LABEL_21;
          v13 = *(_QWORD *)(v4 + 8 * v3);
          if (!v13)
            break;
        }
      }
    }
LABEL_18:
    v7 = (v13 - 1) & v13;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
  {
LABEL_21:
    sub_1AE4FB730();
    return;
  }
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
  {
    v3 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v3 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v3 >= v9)
      goto LABEL_21;
    v13 = *(_QWORD *)(v4 + 8 * v3);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_23:
  __break(1u);
}

void sub_1AE7AF358(uint64_t a1, uint64_t a2)
{
  sub_1AE7AF364(a1, a2, (void (*)(char *, _QWORD))sub_1AE556FE0);
}

void sub_1AE7AF364(uint64_t a1, uint64_t a2, void (*a3)(char *, _QWORD))
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  char v17;
  uint64_t v18;

  v5 = 0;
  v18 = a2;
  v6 = a1 + 56;
  sub_1AE4F95DC();
  v9 = v8 & v7;
  v11 = (unint64_t)(v10 + 63) >> 6;
  if ((v8 & v7) == 0)
    goto LABEL_3;
LABEL_2:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    a3(&v17, *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + i));
    if (v9)
      goto LABEL_2;
LABEL_3:
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v14 >= v11)
      goto LABEL_21;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v11)
        goto LABEL_21;
      v15 = *(_QWORD *)(v6 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v11)
          goto LABEL_21;
        v15 = *(_QWORD *)(v6 + 8 * v5);
        if (!v15)
        {
          v5 = v14 + 3;
          if (v14 + 3 >= v11)
            goto LABEL_21;
          v15 = *(_QWORD *)(v6 + 8 * v5);
          if (!v15)
            break;
        }
      }
    }
LABEL_18:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 4;
  if (v16 >= v11)
  {
LABEL_21:
    sub_1AE4FB730();
    return;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v11)
      goto LABEL_21;
    v15 = *(_QWORD *)(v6 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_23:
  __break(1u);
}

void sub_1AE7AF4B4(uint64_t a1)
{
  sub_1AE7AF50C(a1, &qword_1EEDA2D30, &qword_1EEDA2D38);
}

void sub_1AE7AF4E0(uint64_t a1)
{
  sub_1AE7AF50C(a1, (uint64_t *)&unk_1EED94948, &qword_1EED94940);
}

void sub_1AE7AF50C(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _QWORD v38[2];
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[5];
  _QWORD v44[5];
  _OWORD v45[2];
  uint64_t v46;

  v6 = sub_1AE924780();
  v42 = *(_QWORD *)(v6 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v7);
  sub_1AE4F686C();
  v40 = v8;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v38 - v10;
  v39 = type metadata accessor for KnosisConfig();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v12);
  sub_1AE4F686C();
  v41 = v13;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v38 - v15;
  if (qword_1ED3193F0 != -1)
    swift_once();
  v17 = sub_1AE925B6C();
  sub_1AE4FB608(v17, (uint64_t)qword_1ED3193D8);
  v18 = sub_1AE925B54();
  v19 = sub_1AE9265E0();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)sub_1AE4F66A0();
    v38[0] = v16;
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1AE4F2000, v18, v19, "Initializing Knosis with SubgraphView", v20, 2u);
    sub_1AE4F9064();
  }

  v45[0] = *(_OWORD *)a1;
  v44[3] = sub_1AE501548(a2);
  sub_1AE7B4A64(a3, a2);
  v44[4] = v21;
  v22 = sub_1AE505820();
  v44[0] = v22;
  v23 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v22 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 48) = *(_QWORD *)(a1 + 32);
  sub_1AE501548(&qword_1EED94990);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1AE934250;
  *(_BYTE *)(inited + 32) = 6;
  *(_QWORD *)(inited + 64) = &type metadata for TriplesIndexHandler;
  *(_QWORD *)(inited + 72) = &off_1E5DBAE50;
  v25 = sub_1AE505820();
  *(_QWORD *)(inited + 40) = v25;
  sub_1AE7B49F0((uint64_t)v44, v25 + 16);
  sub_1AE578F28((uint64_t)v45);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1AE501548(&qword_1EED93E20);
  sub_1AE655564();
  v46 = sub_1AE925C98();
  v43[3] = (uint64_t)&type metadata for ContextIndexHandler;
  v43[4] = (uint64_t)&off_1E5DBA558;
  sub_1AE742048((uint64_t)v43);
  v28 = v46;
  if (qword_1ED31C450 != -1)
    swift_once();
  sub_1AE4FF0E0(0xD000000000000010, 0x80000001AE984D00, v26, v27, (void *)qword_1ED31C4B0);
  if (v29)
  {
    sub_1AE9246FC();
    swift_bridgeObjectRelease();
    v30 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    v30(v16, v11, v6);
    sub_1AE4FF0E0(0x614D746E65746E69, 0xE900000000000070, v31, v32, (void *)qword_1ED31C4B0);
    if (v33)
    {
      v34 = v40;
      sub_1AE9246FC();
      swift_bridgeObjectRelease();
      v35 = v39;
      v30(&v16[*(int *)(v39 + 20)], v34, v6);
      *(_QWORD *)&v16[*(int *)(v35 + 24)] = 20;
      v36 = v41;
      sub_1AE56CC34((uint64_t)v16, v41, (uint64_t (*)(_QWORD))type metadata accessor for KnosisConfig);
      v43[0] = v28;
      v37 = objc_allocWithZone((Class)type metadata accessor for KnosisServer());
      KnosisServer.init(config:indexHandler:)(v36, v43);
      sub_1AE574264((uint64_t)v45);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_1AE53D160((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for KnosisConfig);
      sub_1AE7B4A2C((uint64_t)v44);
      sub_1AE4F667C();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1AE7AF94C(uint64_t a1)
{
  sub_1AE7AF50C(a1, &qword_1EEDA2D40, &qword_1EEDA2D48);
}

void KnosisServer.__allocating_init(config:indexHandler:)(uint64_t a1, uint64_t *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  KnosisServer.init(config:indexHandler:)(a1, a2);
}

void KnosisServer.init(config:indexHandler:)(uint64_t a1, uint64_t *a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  NSObject *v42;
  os_signpost_type_t v43;
  uint8_t *v44;
  os_signpost_id_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 *v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  id v114;
  char *v115;
  _QWORD *v116;
  objc_class *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  __int128 *v131;
  uint64_t v132;
  __int128 *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  objc_super v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  _QWORD v149[5];
  char v150;
  uint64_t v151;

  v121 = sub_1AE924780();
  v5 = *(_QWORD *)(v121 - 8);
  MEMORY[0x1E0C80A78](v121);
  sub_1AE4F666C();
  v8 = v7 - v6;
  v128 = type metadata accessor for KnosisConfig();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v9);
  *(_QWORD *)&v137 = (char *)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AE7B4B78();
  v136 = sub_1AE925AE8();
  v134 = *(uint64_t **)(v136 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v11);
  sub_1AE4F686C();
  v132 = v12;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v13);
  v133 = (__int128 *)((char *)&v118 - v14);
  sub_1AE7B4B78();
  v15 = sub_1AE925B6C();
  v125 = *(_QWORD *)(v15 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v16);
  sub_1AE4F9024();
  v124 = v17;
  sub_1AE7B4B78();
  v18 = sub_1AE925B0C();
  v130 = *(_QWORD *)(v18 - 8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v19);
  sub_1AE4F9024();
  v138 = v20;
  sub_1AE7B4B78();
  v126 = type metadata accessor for LogSignpost();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v21);
  v127 = (uint64_t *)((char *)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = *a2;
  v24 = qword_1ED3193F0;
  v129 = v2;
  if (v24 == -1)
    goto LABEL_2;
LABEL_59:
  swift_once();
LABEL_2:
  sub_1AE4FB608(v15, (uint64_t)qword_1ED3193D8);
  swift_bridgeObjectRetain_n();
  v25 = sub_1AE925B54();
  v26 = sub_1AE9265E0();
  v27 = os_log_type_enabled(v25, v26);
  v122 = v8;
  v123 = a1;
  v135 = v23;
  v120 = v5;
  v131 = (__int128 *)v18;
  if (v27)
  {
    v28 = (uint8_t *)sub_1AE4F66A0();
    *(_QWORD *)&v140 = sub_1AE4F66A0();
    *(_DWORD *)v28 = 136315138;
    v119 = (unint64_t)(v28 + 4);
    swift_bridgeObjectRetain();
    sub_1AE501548(&qword_1EED93E20);
    sub_1AE655564();
    v29 = sub_1AE925CB0();
    v31 = v30;
    sub_1AE505B1C();
    sub_1AE520ED4(v29, v31, (uint64_t)&v140, v32, v33, v34, v35, v36, v118, v119, v120, v121, v122, v123, v124, v125, v126, (uint64_t)v127, v128,
      (uint64_t)v129);
    *(_QWORD *)&v145 = v37;
    sub_1AE92676C();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AE4F2000, v25, v26, "Initializing Knosis with indexHandlers: %s", v28, 0xCu);
    swift_arrayDestroy();
    sub_1AE4F9064();
  }

  swift_bridgeObjectRelease_n();
  v38 = v124;
  v39 = v128;
  if (qword_1ED31C728 != -1)
    swift_once();
  v40 = sub_1AE4FB608(v15, (uint64_t)qword_1ED31C710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 16))(v38, v40, v15);
  sub_1AE925AF4();
  sub_1AE925B00();
  v41 = v133;
  sub_1AE925AC4();
  v42 = sub_1AE925B00();
  v43 = sub_1AE926670();
  if ((sub_1AE926700() & 1) != 0)
  {
    v44 = (uint8_t *)sub_1AE4F66A0();
    *(_WORD *)v44 = 0;
    v45 = sub_1AE925AD0();
    _os_signpost_emit_with_name_impl(&dword_1AE4F2000, v42, v43, v45, "Knosis.init", "", v44, 2u);
    sub_1AE4F9064();
  }

  v46 = v134;
  v47 = v136;
  ((void (*)(uint64_t, __int128 *, uint64_t))v134[2])(v132, v41, v136);
  sub_1AE925B3C();
  sub_1AE4FCE84();
  v48 = sub_1AE925B30();
  ((void (*)(__int128 *, uint64_t))v46[1])(v41, v47);
  v49 = v127;
  *v127 = "Knosis.init";
  v49[1] = 11;
  *((_BYTE *)v49 + 16) = 2;
  v49[3] = v48;
  (*(void (**)(char *, uint64_t, __int128 *))(v130 + 32))((char *)v49 + *(int *)(v126 + 24), v138, v131);
  v50 = v129;
  *(_QWORD *)&v129[OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_defaultResultLimit] = *(_QWORD *)(a1 + *(int *)(v39 + 24));
  v51 = v137;
  sub_1AE56CC34(a1, v137, (uint64_t (*)(_QWORD))type metadata accessor for KnosisConfig);
  v52 = *((_QWORD *)&v137 + 1);
  v53 = sub_1AE82E318(v51);
  v15 = v52;
  if (v52)
  {
    sub_1AE505B1C();
    sub_1AE7B4220();
    sub_1AE53D160(a1, (uint64_t (*)(_QWORD))type metadata accessor for KnosisConfig);
    sub_1AE53D160((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for LogSignpost);
    goto LABEL_52;
  }
  v56 = (uint64_t *)&v50[OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_operators];
  *v56 = v53;
  v56[1] = v54;
  v56[2] = v55;
  v126 = v54 + 64;
  sub_1AE4F95DC();
  v8 = v58 & v57;
  v130 = (unint64_t)(v59 + 63) >> 6;
  v131 = &v146;
  v132 = v60;
  v133 = &v141;
  v125 = v130 - 1;
  swift_bridgeObjectRetain();
  v18 = 0;
  v138 = MEMORY[0x1E0DEE9D8];
  v134 = v56;
  v5 = v135;
  if (v8)
  {
LABEL_11:
    v61 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v62 = v61 | (v18 << 6);
LABEL_12:
    v63 = *(_QWORD *)(v132 + 56);
    v64 = (_QWORD *)(*(_QWORD *)(v132 + 48) + 16 * v62);
    v65 = v64[1];
    *(_QWORD *)&v145 = *v64;
    *((_QWORD *)&v145 + 1) = v65;
    sub_1AE57C238(v63 + 40 * v62, (uint64_t)v131);
    sub_1AE4F66CC();
    goto LABEL_22;
  }
  while (1)
  {
    v66 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v66 < v130)
    {
      v67 = *(_QWORD *)(v126 + 8 * v66);
      if (v67)
        goto LABEL_16;
      v18 += 2;
      if (v66 + 1 >= v130)
      {
        v18 = v66;
      }
      else
      {
        v67 = *(_QWORD *)(v126 + 8 * v18);
        if (v67)
        {
          ++v66;
LABEL_16:
          v8 = (v67 - 1) & v67;
          v62 = __clz(__rbit64(v67)) + (v66 << 6);
          v18 = v66;
          goto LABEL_12;
        }
        if (v66 + 2 < v130)
        {
          v67 = *(_QWORD *)(v126 + 8 * (v66 + 2));
          if (v67)
          {
            v66 += 2;
            goto LABEL_16;
          }
          v78 = v66 + 3;
          if (v66 + 3 < v130)
          {
            v67 = *(_QWORD *)(v126 + 8 * v78);
            if (!v67)
            {
              while (1)
              {
                v66 = v78 + 1;
                if (__OFADD__(v78, 1))
                  break;
                if (v66 >= v130)
                {
                  v18 = v125;
                  goto LABEL_21;
                }
                v67 = *(_QWORD *)(v126 + 8 * v66);
                ++v78;
                if (v67)
                  goto LABEL_16;
              }
              __break(1u);
              return;
            }
            v66 += 3;
            goto LABEL_16;
          }
          v18 = v66 + 2;
        }
      }
    }
LABEL_21:
    v8 = 0;
    v148 = 0;
    v146 = 0u;
    v147 = 0u;
    v145 = 0u;
LABEL_22:
    sub_1AE7B4744((uint64_t)&v145, (uint64_t)&v140);
    v68 = *((_QWORD *)&v140 + 1);
    if (!*((_QWORD *)&v140 + 1))
      break;
    v69 = v140;
    sub_1AE50AF58(v133, (uint64_t)&v145);
    v71 = *((_QWORD *)&v146 + 1);
    v70 = v147;
    sub_1AE4F9858(&v145, *((uint64_t *)&v146 + 1));
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 + 8) + 8))(v149, v69, v68, v71);
    if (v15)
    {
      sub_1AE5094CC();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v145);
LABEL_47:
      v98 = 0;
      v99 = v127;
LABEL_48:
      sub_1AE7B4220();
      sub_1AE53D160(v123, (uint64_t (*)(_QWORD))type metadata accessor for KnosisConfig);
      sub_1AE53D160((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for LogSignpost);
      swift_release();
      sub_1AE4F81B8();
      sub_1AE4F9038();
      if (!v68)
      {
        swift_bridgeObjectRelease();
        sub_1AE4F67AC();
        sub_1AE4F76D8();
        sub_1AE4F81B8();
        sub_1AE4F9038();
      }
      v50 = v129;
      if ((v98 & 1) != 0)
      {

        sub_1AE4F9038();
LABEL_53:
        type metadata accessor for KnosisServer();
        swift_deallocPartialClassInstance();
        goto LABEL_54;
      }
LABEL_52:

      goto LABEL_53;
    }
    *((_QWORD *)&v137 + 1) = 0;
    swift_bridgeObjectRelease();
    v72 = v149[1];
    a1 = v149[2];
    v136 = v149[0];
    *(_QWORD *)&v137 = v149[3];
    v73 = v149[4];
    v74 = v150;
    sub_1AE4F67A4();
    sub_1AE4FB764();
    sub_1AE4F66CC();
    v23 = v18;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1AE51AFC4();
      v138 = v79;
    }
    v75 = *(_QWORD *)(v138 + 16);
    if (v75 >= *(_QWORD *)(v138 + 24) >> 1)
    {
      sub_1AE51AFC4();
      v138 = v80;
    }
    v76 = v138;
    *(_QWORD *)(v138 + 16) = v75 + 1;
    v77 = v76 + 48 * v75;
    *(_QWORD *)(v77 + 32) = v136;
    *(_QWORD *)(v77 + 40) = v72;
    *(_QWORD *)(v77 + 48) = a1;
    *(_BYTE *)(v77 + 56) = v74;
    *(_QWORD *)(v77 + 64) = v137;
    *(_QWORD *)(v77 + 72) = v73;
    sub_1AE7B47C8((uint64_t)v149);
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v145);
    v56 = v134;
    v5 = v135;
    v15 = *((_QWORD *)&v137 + 1);
    v18 = v23;
    if (v8)
      goto LABEL_11;
  }
  *((_QWORD *)&v137 + 1) = v15;
  swift_release();
  v81 = *v56;
  v82 = v56;
  sub_1AE4F6708();
  sub_1AE4F6804();
  sub_1AE60DD4C();
  v83 = sub_1AE58FBA4(v81);
  swift_release();
  sub_1AE4F67AC();
  sub_1AE4F76D8();
  v84 = qword_1ED30FB80;
  sub_1AE4F6708();
  sub_1AE4F6804();
  sub_1AE60DD4C();
  if (v84 != -1)
    swift_once();
  v85 = qword_1ED3274C8;
  sub_1AE4F66CC();
  swift_release();
  sub_1AE4F67AC();
  sub_1AE4F76D8();
  sub_1AE830AB0(v138, v83, v85, (uint64_t *)&v140);
  v86 = v140;
  v87 = v141;
  v88 = v142;
  v89 = &v129[OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_parser];
  *(_OWORD *)v89 = v140;
  *((_OWORD *)v89 + 1) = v87;
  *((_OWORD *)v89 + 2) = v88;
  v140 = v86;
  v141 = v87;
  v142 = v88;
  v138 = v86;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v137 = *((_QWORD *)&v86 + 1);
  sub_1AE4F66C4();
  sub_1AE4F6804();
  swift_bridgeObjectRetain();
  sub_1AE4F6730();
  v90 = *((_QWORD *)&v137 + 1);
  sub_1AE8C8DC8((uint64_t)&v140, v91, v92, v93, v94, v95, v96, v97, v118, v119, v120, v121, v122, v123, v124, v125, v126, (uint64_t)v127, v128,
    (uint64_t)v129);
  if (v90)
  {
    swift_bridgeObjectRelease();
    sub_1AE4F66E8();
    sub_1AE4F67AC();
    sub_1AE61B5CC();
    sub_1AE5094CC();
    sub_1AE505B1C();
    goto LABEL_47;
  }
  swift_bridgeObjectRelease();
  sub_1AE4F66E8();
  sub_1AE4F67AC();
  sub_1AE61B5CC();
  sub_1AE5094CC();
  *(_QWORD *)&v129[OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_indexHandler] = v135;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v120 + 16))(v122, v123 + *(int *)(v128 + 20), v121);
  *((_QWORD *)&v137 + 1) = 0;
  v101 = *v82;
  v100 = v82[1];
  v102 = (__int128 *)v82[2];
  v103 = *(_QWORD *)v89;
  v138 = *((_QWORD *)v89 + 1);
  v104 = *((_QWORD *)v89 + 3);
  *(_QWORD *)&v137 = *((_QWORD *)v89 + 2);
  v105 = *((_QWORD *)v89 + 4);
  v106 = *((_QWORD *)v89 + 5);
  v128 = v105;
  sub_1AE9243C0();
  sub_1AE4FCE84();
  sub_1AE4F6804();
  v131 = (__int128 *)v101;
  swift_bridgeObjectRetain();
  v130 = v100;
  swift_bridgeObjectRetain();
  v133 = v102;
  swift_retain();
  v132 = v103;
  v107 = v122;
  swift_bridgeObjectRetain();
  sub_1AE4F6730();
  sub_1AE4F67A4();
  swift_bridgeObjectRetain();
  sub_1AE4F6708();
  v136 = sub_1AE9243B4();
  v108 = *((_QWORD *)&v137 + 1);
  sub_1AE9247B0();
  if (v108)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AE4F66E8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AE4F81B8();
    swift_bridgeObjectRelease();
    sub_1AE505B1C();
    sub_1AE736F50();
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v107, v121);
    v98 = 1;
    v99 = v127;
    goto LABEL_48;
  }
  v109 = v133;
  *((_QWORD *)&v137 + 1) = v104;
  sub_1AE7B478C();
  sub_1AE9243A8();
  v151 = v135;
  *(_QWORD *)&v145 = v132;
  *((_QWORD *)&v145 + 1) = v138;
  v146 = v137;
  *(_QWORD *)&v147 = v128;
  *((_QWORD *)&v147 + 1) = v106;
  sub_1AE73A2F4(v140, (uint64_t)v131, v130, (uint64_t)v109, &v151, &v140);
  sub_1AE7B4B68();
  sub_1AE7B4BA8();
  sub_1AE736F50();
  v110 = v144;
  v111 = v141;
  v113 = v142;
  v112 = v143;
  v114 = v129;
  v115 = &v129[OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_intentHandler];
  *(_OWORD *)v115 = v140;
  *((_OWORD *)v115 + 1) = v111;
  *((_OWORD *)v115 + 2) = v113;
  *((_OWORD *)v115 + 3) = v112;
  *((_QWORD *)v115 + 8) = v110;

  v116 = v127;
  sub_1AE7B4220();
  sub_1AE53D160((uint64_t)v116, (uint64_t (*)(_QWORD))type metadata accessor for LogSignpost);
  v117 = (objc_class *)type metadata accessor for KnosisServer();
  v139.receiver = v114;
  v139.super_class = v117;
  objc_msgSendSuper2(&v139, sel_init);
  sub_1AE53D160(v123, (uint64_t (*)(_QWORD))type metadata accessor for KnosisConfig);
LABEL_54:
  sub_1AE4F667C();
}

void static KnosisServer.withEntitySubgraphView()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE v7[40];

  if (qword_1ED3193F0 != -1)
    swift_once();
  v0 = sub_1AE4F6854();
  v1 = sub_1AE4FB608(v0, (uint64_t)qword_1ED3193D8);
  sub_1AE925B54();
  v2 = sub_1AE5086D8();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)sub_1AE4F66A0();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1AE4F2000, v1, v2, "Initializing Knosis with EntitySubgraphView", v3, 2u);
    sub_1AE4F9064();
  }

  if (qword_1ED31C9B0 != -1)
    swift_once();
  sub_1AE5071F0();
  sub_1AE7B450C(v4, v5, v6);
  sub_1AE7AF50C((uint64_t)v7, (uint64_t *)&unk_1EED94948, &qword_1EED94940);
}

id KnosisServer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void KnosisServer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id KnosisServer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KnosisServer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void __swiftcall KnosisServer.executeKGQ(request:)(GDKnosisResult *__return_ptr retstr, GDKnosisRequest *request)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  GDKnosisResult *v24;
  _QWORD v25[7];
  char v26;
  unsigned __int8 v27;
  _QWORD v28[21];

  sub_1AE7B4C4C();
  if (qword_1ED3193F0 != -1)
    swift_once();
  v6 = sub_1AE4F6854();
  sub_1AE4F77E8(v6, (uint64_t)qword_1ED3193D8);
  v7 = sub_1AE5086D8();
  if (sub_1AE6147E0(v7))
  {
    v8 = (_WORD *)sub_1AE4F66A0();
    sub_1AE7B4C34(v8);
    sub_1AE4FBE84(&dword_1AE4F2000, v9, v10, "executeKGQ called from obj-c in-process");
    sub_1AE4F9064();
  }

  v12 = sub_1AE4FDA6C(v11, sel_query);
  sub_1AE925E3C();
  sub_1AE4F7964();
  v13 = sub_1AE794958(v3);
  if (v14)
    v15 = v13;
  else
    v15 = 0;
  if (v14)
    v16 = v14;
  else
    v16 = 0xE000000000000000;
  v17 = sub_1AE4FDA6C(v13, sel_limit);
  v18 = sub_1AE7B4BEC();

  v20 = sub_1AE4FDA6C(v19, sel_offset);
  v21 = sub_1AE7B4BEC();

  v23 = sub_1AE4FDA6C(v22, sel_enableDebug);
  v25[0] = v2;
  v25[1] = v4;
  v25[2] = v15;
  v25[3] = v16;
  v25[4] = 0;
  v25[5] = v18;
  v25[6] = v21;
  v26 = (char)v23;
  v27 = sub_1AE4FDA6C((uint64_t)v23, sel_enableTextualization);
  KnosisServer.executeKGQ(request:)();
  sub_1AE7B4C04();
  sub_1AE4F76D8();
  sub_1AE4F81B8();
  sub_1AE4FD464(v25, v28);
  KnosisResult.toGDKnosisResult()(v24);
  sub_1AE56E58C(v28);
}

void __swiftcall KnosisServer.executeKGQWithGraphObjectContext(request:)(GDKnosisResultContext *__return_ptr retstr, GDKnosisRequest *request)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unsigned __int8 v35;
  _QWORD v36[21];

  sub_1AE7B4C4C();
  if (qword_1ED3193F0 != -1)
    swift_once();
  v6 = sub_1AE4F6854();
  sub_1AE4F77E8(v6, (uint64_t)qword_1ED3193D8);
  v7 = sub_1AE5086D8();
  if (sub_1AE6147E0(v7))
  {
    v8 = (_WORD *)sub_1AE4F66A0();
    sub_1AE7B4C34(v8);
    sub_1AE4FBE84(&dword_1AE4F2000, v9, v10, "executeKGQWithGraphObjectContext called from obj-c in-process");
    sub_1AE4F9064();
  }

  v12 = sub_1AE4FDA6C(v11, sel_query);
  sub_1AE925E3C();
  sub_1AE4F7964();
  v13 = sub_1AE794958(v3);
  if (v14)
    v15 = v13;
  else
    v15 = 0;
  if (v14)
    v16 = v14;
  else
    v16 = 0xE000000000000000;
  v17 = sub_1AE4FDA6C(v13, sel_limit);
  v18 = sub_1AE7B4BEC();

  v20 = sub_1AE4FDA6C(v19, sel_offset);
  v21 = sub_1AE7B4BEC();

  v23 = sub_1AE4FDA6C(v22, sel_enableDebug);
  v27 = (uint64_t)v2;
  v28 = v4;
  v29 = v15;
  v30 = v16;
  v31 = 0;
  v32 = v18;
  v33 = v21;
  v34 = (char)v23;
  v35 = sub_1AE4FDA6C((uint64_t)v23, sel_enableTextualization);
  KnosisServer.executeKGQ(request:)();
  sub_1AE7B4C04();
  sub_1AE4F76D8();
  sub_1AE4F81B8();
  type metadata accessor for GDKnosisResultContext(0);
  v24 = v36[4];
  sub_1AE4FB75C();
  ObjectSynthesisDictionaryMapping.init()(&v27);
  v25 = v27;
  type metadata accessor for InitializationResourcesManager();
  v26 = sub_1AE4F6738();
  *(_QWORD *)(v26 + 16) = sub_1AE925C98();
  sub_1AE56E58C(v36);
  v27 = v25;
  v28 = v24;
  v29 = v26;
  sub_1AE690AEC(&v27);
  sub_1AE4F6700();
  sub_1AE4F6648();
  sub_1AE4F665C();
}

uint64_t sub_1AE7B0E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int *v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  os_log_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *Context;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[2];

  v5 = v4;
  Context = (int *)type metadata accessor for QueryContext();
  MEMORY[0x1E0C80A78](Context);
  v92 = (uint64_t *)((char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)a4;
  v12 = *(_QWORD *)(a4 + 8);
  v13 = *(unsigned __int8 *)(a4 + 16);
  v14 = *(_QWORD *)(a4 + 24);
  if (qword_1ED3193F0 != -1)
    swift_once();
  v15 = sub_1AE925B6C();
  v16 = sub_1AE4FB608(v15, (uint64_t)qword_1ED3193D8);
  swift_retain();
  sub_1AE526540(v11, v12, v13);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1AE526540(v11, v12, v13);
  swift_bridgeObjectRetain();
  v87 = v16;
  v17 = sub_1AE925B54();
  v18 = sub_1AE9265E0();
  v19 = v18;
  v20 = os_log_type_enabled(v17, v18);
  v85 = a3;
  v86 = a1;
  v91 = v5;
  v89 = v11;
  HIDWORD(v88) = v13;
  if (v20)
  {
    v21 = swift_slowAlloc();
    LODWORD(v88) = v19;
    v22 = v11;
    v23 = v13;
    v24 = v21;
    v84 = swift_slowAlloc();
    v102[0] = v84;
    *(_DWORD *)v24 = 136315650;
    swift_retain();
    v83 = v17;
    v25 = sub_1AE8837BC();
    v27 = v26;
    swift_release();
    sub_1AE520ED4(v25, v27, (uint64_t)v102, v28, v29, v30, v31, v32, v82, (unint64_t)v83, v84, v85, v86, v87, v88, v89, (uint64_t)Context, v91, (uint64_t)v92,
      v93);
    v96 = v33;
    sub_1AE92676C();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2048;
    v96 = a3;
    sub_1AE92676C();
    *(_WORD *)(v24 + 22) = 2080;
    v96 = 0;
    v97 = 0xE000000000000000;
    sub_1AE526540(v22, v12, v23);
    swift_bridgeObjectRetain();
    sub_1AE92691C();
    v94 = v96;
    v95 = v97;
    sub_1AE925F74();
    v96 = v22;
    v97 = v12;
    LOBYTE(v98) = v23;
    sub_1AE926A48();
    sub_1AE925F74();
    sub_1AE655564();
    swift_bridgeObjectRetain();
    sub_1AE9263F4();
    sub_1AE925F74();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AE579F84(v22, v12, v23);
    swift_bridgeObjectRelease();
    sub_1AE520ED4(v94, v95, (uint64_t)v102, v34, v35, v36, v37, v38, v82, (unint64_t)v83, v84, v85, v86, v87, v88, v89, (uint64_t)Context, v91, (uint64_t)v92,
      v93);
    v96 = v39;
    v5 = v91;
    sub_1AE92676C();
    swift_bridgeObjectRelease();
    sub_1AE579F84(v22, v12, v23);
    swift_bridgeObjectRelease();
    v40 = v12;
    sub_1AE579F84(v22, v12, v23);
    swift_bridgeObjectRelease();
    v41 = v83;
    _os_log_impl(&dword_1AE4F2000, v83, (os_log_type_t)v88, "Executing KGQ with queryTree:%s, requestLimit:%ld, accessConfig:%s", (uint8_t *)v24, 0x20u);
    v42 = v84;
    swift_arrayDestroy();
    MEMORY[0x1AF454C78](v42, -1, -1);
    MEMORY[0x1AF454C78](v24, -1, -1);

  }
  else
  {
    swift_release_n();
    sub_1AE579F84(v11, v12, v13);
    swift_bridgeObjectRelease();
    sub_1AE579F84(v11, v12, v13);

    swift_bridgeObjectRelease();
    v40 = v12;
  }
  v43 = *(_QWORD *)(v5 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_indexHandler);
  v44 = *(_BYTE *)(a2 + 104);
  LODWORD(v88) = *(unsigned __int8 *)(a2 + 105);
  v45 = Context;
  v46 = v92;
  swift_retain();
  v47 = v89;
  v48 = BYTE4(v88);
  sub_1AE526540(v89, v40, BYTE4(v88));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AE9248D0();
  v46[1] = 0;
  v46[2] = 0;
  v49 = (char *)v46 + v45[8];
  *((_QWORD *)v49 + 10) = 0;
  *((_OWORD *)v49 + 3) = 0u;
  *((_OWORD *)v49 + 4) = 0u;
  *((_OWORD *)v49 + 1) = 0u;
  *((_OWORD *)v49 + 2) = 0u;
  *(_OWORD *)v49 = 0u;
  *(_OWORD *)(v49 + 88) = xmmword_1AE934380;
  v49[104] = 0;
  v50 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)((char *)v46 + v45[10]) = MEMORY[0x1E0DEE9D8];
  v51 = (_QWORD *)((char *)v46 + v45[12]);
  *v51 = 0;
  v51[1] = v50;
  v51[2] = v50;
  v52 = v45[13];
  v53 = v45[14];
  *v46 = a2;
  *(_QWORD *)((char *)v46 + v45[9]) = v43;
  *((_BYTE *)v46 + v52) = v44;
  v54 = v91;
  v55 = (char *)v46 + v45[11];
  *(_QWORD *)v55 = v47;
  *((_QWORD *)v55 + 1) = v40;
  v55[16] = v48;
  *((_QWORD *)v55 + 3) = v14;
  *((_BYTE *)v46 + v53) = v88;
  v56 = *(_QWORD *)(v54 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_parser + 8);
  v58 = *(_QWORD *)(v54 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_parser + 16);
  v57 = *(_QWORD *)(v54 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_parser + 24);
  v59 = *(_QWORD *)(v54 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_parser + 32);
  v60 = *(_QWORD *)(v54 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_parser + 40);
  v96 = *(_QWORD *)(v54 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_parser);
  v97 = v56;
  v98 = v58;
  v99 = v57;
  v100 = v59;
  v101 = v60;
  v61 = *(_QWORD *)(a2 + 32);
  v62 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AE83060C(v61, v62);
  v64 = v63;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v94 = v64;
  v65 = v85;
  if ((v85 & 0x8000000000000000) == 0)
  {
    v66 = *(_QWORD *)(v64 + 48);
    if (v66 < 0)
      goto LABEL_11;
    if (v66 > v85)
      v65 = *(_QWORD *)(v64 + 48);
  }
  *(_QWORD *)(v64 + 48) = v65;
LABEL_11:
  *(_QWORD *)(a2 + 48) = v64;
  swift_retain();
  swift_release();
  v67 = sub_1AE82C36C((uint64_t)v92, (uint64_t)&v94, *(_QWORD *)(v54 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_operators), *(_QWORD *)(v54 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_operators + 8), *(_QWORD *)(v54 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_operators + 16));
  swift_release();
  v102[0] = v67;
  v69 = sub_1AE925B54();
  v70 = sub_1AE9265E0();
  if (os_log_type_enabled(v69, v70))
  {
    v71 = (uint8_t *)swift_slowAlloc();
    v72 = swift_slowAlloc();
    v96 = v72;
    *(_DWORD *)v71 = 136315138;
    swift_beginAccess();
    swift_retain();
    v73 = sub_1AE85E39C();
    v75 = v74;
    swift_release();
    sub_1AE520ED4(v73, v75, (uint64_t)&v96, v76, v77, v78, v79, v80, v82, (unint64_t)v83, v84, v85, v86, v87, v88, v89, (uint64_t)Context, v91, (uint64_t)v92,
      v93);
    v93 = v81;
    sub_1AE92676C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AE4F2000, v69, v70, "ExecuteKGQ resultGraph:%s", v71, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF454C78](v72, -1, -1);
    MEMORY[0x1AF454C78](v71, -1, -1);
  }

  sub_1AE7B4B14((uint64_t)v92, v86);
  swift_beginAccess();
  return v102[0];
}

void KnosisServer.executeKGQForXpc(request:accessConfig:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  NSObject *v28;
  os_signpost_type_t v29;
  uint8_t *v30;
  os_signpost_id_t v31;
  NSObject *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint8_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  int *v72;
  id v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  GDKnosisResult *v91;
  uint64_t v92;
  GDKnosisResult *v93;
  uint8_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint8_t *v110;
  NSObject *v111;
  NSObject *v112;
  _QWORD *v113;
  _QWORD v114[21];
  _QWORD v115[21];
  _QWORD v116[18];
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  __int128 v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;

  sub_1AE4FC4D4();
  v99 = v0;
  v3 = v2;
  v5 = v4;
  v100 = (int *)type metadata accessor for Renderer(0);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v6);
  sub_1AE4F9024();
  v102 = v7;
  v101 = sub_1AE7B4C70();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v8);
  sub_1AE4F9024();
  v112 = v9;
  v111 = sub_1AE60DED4();
  isa = v111[-1].isa;
  v11 = MEMORY[0x1E0C80A78](v111);
  v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v94 - v14;
  v16 = sub_1AE4F6854();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  sub_1AE4F666C();
  v20 = v19 - v18;
  v21 = sub_1AE925B0C();
  v109 = *(_QWORD *)(v21 - 8);
  v110 = (uint8_t *)v21;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v22);
  sub_1AE4F90F4();
  v108 = type metadata accessor for LogSignpost();
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v23);
  v113 = (uint8_t **)((char *)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = *(_QWORD *)v3;
  v97 = *(_QWORD *)(v3 + 8);
  v98 = v25;
  HIDWORD(v96) = *(unsigned __int8 *)(v3 + 16);
  v95 = *(_QWORD *)(v3 + 24);
  if (qword_1ED31C728 != -1)
    swift_once();
  v26 = sub_1AE4FB608(v16, (uint64_t)qword_1ED31C710);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v106 = v16;
  v27(v20, v26, v16);
  sub_1AE925AF4();
  sub_1AE925B00();
  sub_1AE925AC4();
  v28 = sub_1AE925B00();
  v29 = sub_1AE926670();
  if ((sub_1AE926700() & 1) != 0)
  {
    v30 = (uint8_t *)sub_1AE4F66A0();
    *(_WORD *)v30 = 0;
    v31 = sub_1AE925AD0();
    sub_1AE5079F0(&dword_1AE4F2000, v28, v29, v31, "Knosis.executeKGQForXpc", "", v30);
    sub_1AE4F9064();
  }

  v32 = v111;
  (*((void (**)(char *, char *, NSObject *))isa + 2))(v13, v15, v111);
  sub_1AE925B3C();
  sub_1AE4FCE84();
  v33 = sub_1AE925B30();
  (*((void (**)(char *, NSObject *))isa + 1))(v15, v32);
  v34 = v113;
  *v113 = "Knosis.executeKGQForXpc";
  v34[1] = 23;
  *((_BYTE *)v34 + 16) = 2;
  v34[3] = v33;
  v35 = (*(uint64_t (**)(char *, uint64_t, uint8_t *))(v109 + 32))((char *)v34 + *(int *)(v108 + 24), v1, v110);
  v36 = sub_1AE501F44(v35, sel_query);
  v111 = sub_1AE925E3C();
  v38 = v37;

  v39 = sub_1AE794958(v5);
  if (v40)
    v41 = v39;
  else
    v41 = 0;
  v110 = (uint8_t *)v41;
  if (v40)
    v42 = v40;
  else
    v42 = 0xE000000000000000;
  v43 = sub_1AE501F44(v39, sel_limit);
  v109 = sub_1AE926424();

  v45 = sub_1AE501F44(v44, sel_offset);
  v105 = sub_1AE926424();

  LODWORD(v108) = objc_msgSend(v5, sel_enableDebug);
  v107 = objc_msgSend(v5, sel_enableTextualization);
  if (qword_1ED3193F0 != -1)
    swift_once();
  v46 = sub_1AE4FB608(v106, (uint64_t)qword_1ED3193D8);
  sub_1AE4F6A24();
  sub_1AE4F6A24();
  v106 = v46;
  sub_1AE925B54();
  v47 = sub_1AE505BCC();
  v48 = sub_1AE7B4BF4(v47);
  v103 = v42;
  v104 = v38;
  if (v48)
  {
    v49 = (uint8_t *)sub_1AE4F66A0();
    v50 = sub_1AE4F66A0();
    *(_DWORD *)v49 = 136315138;
    v116[0] = v50;
    v94 = v49 + 4;
    *(_QWORD *)&v120 = v111;
    *((_QWORD *)&v120 + 1) = v38;
    v121 = (uint64_t)v110;
    v122 = v42;
    v123 = 0;
    v124 = v109;
    v125 = v105;
    v126 = v108;
    v51 = sub_1AE7B4CA8(v107);
    sub_1AE520ED4(v51, v52, (uint64_t)v116, v53, v54, v55, v56, v57, (uint64_t)v94, v95, v96, v97, v98, v99, (uint64_t)v100, v101, v102, v103, v104,
      v105);
    sub_1AE7B4C1C(v58);
    sub_1AE92676C();
    sub_1AE4F6824();
    sub_1AE4F6824();
    sub_1AE4F6824();
    sub_1AE4F9038();
    sub_1AE508348(&dword_1AE4F2000, v32, (os_log_type_t)v28, "ExecuteKGQForXpc called with request %s", v49);
    sub_1AE5081C8();
    sub_1AE4F9064();
  }

  sub_1AE4F6824();
  sub_1AE4F6824();
  sub_1AE4F6824();
  if (v105 < 0)
  {
    sub_1AE7B4C04();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v120 = 0uLL;
    v121 = 0;
    v122 = 0xE000000000000000;
    v123 = MEMORY[0x1E0DEE9D8];
    LOBYTE(v124) = 2;
    *(double *)&v90 = sub_1AE7B4B8C(0xD00000000000001ELL);
    v127 = v90;
    v128 = v90;
    v129 = v90;
    v130 = v90;
    v131 = v90;
    sub_1AE4FD464(v116, &v120);
    KnosisResult.toGDKnosisResult()(v91);
    sub_1AE4F6CEC();
    v92 = (uint64_t)v113;
  }
  else
  {
    v59 = v105;
    v60 = *(_QWORD *)(v99 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_defaultResultLimit);
    v61 = v109;
    if (v60 >= v109)
      v62 = v109;
    else
      v62 = *(_QWORD *)(v99 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_defaultResultLimit);
    if (v62 >= 0)
      v63 = v62;
    else
      v63 = *(_QWORD *)(v99 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_defaultResultLimit);
    type metadata accessor for QueryTree();
    v121 = 0;
    v120 = 0uLL;
    LODWORD(v122) = 0;
    sub_1AE506D88();
    v64 = v104;
    sub_1AE4F67A4();
    v65 = v103;
    sub_1AE4FB764();
    sub_1AE883754((uint64_t)v111, v64, (uint64_t)v110, v65, 0, &v120, v63, v59, v108, v107);
    *(_QWORD *)&v120 = v98;
    *((_QWORD *)&v120 + 1) = v97;
    LOBYTE(v121) = BYTE4(v96);
    v122 = v95;
    v66 = v112;
    v111 = v67;
    v68 = sub_1AE7B0E9C((uint64_t)v112, v67, v61, (uint64_t)&v120);
    v70 = v69;
    sub_1AE7B4C04();
    swift_bridgeObjectRelease();
    sub_1AE4F6728();
    v71 = v102;
    sub_1AE56CC34((uint64_t)v66, v102, (uint64_t (*)(_QWORD))type metadata accessor for QueryContext);
    v72 = v100;
    *(_QWORD *)(v71 + v100[5]) = MEMORY[0x1E0DEE9E8];
    *(_QWORD *)(v71 + v72[6]) = v68;
    *(_QWORD *)(v71 + v72[7]) = v70;
    *(_BYTE *)(v71 + v72[8]) = 4;
    *(_QWORD *)(v71 + v72[9]) = v60;
    *(_QWORD *)(v71 + v72[10]) = MEMORY[0x1E0DEE9D8];
    swift_retain();
    v73 = v70;
    sub_1AE856598();
    if (*((_BYTE *)&v66->isa + *(int *)(v101 + 52)) == 1)
    {
      v74 = (uint64_t *)((char *)v112 + *(int *)(v101 + 48));
      v76 = *v74;
      v75 = v74[1];
      v66 = v74[2];
      v77 = v117;
      v78 = v118;
      sub_1AE4F66CC();
      sub_1AE4F66C4();
      sub_1AE53F134(v77, v78);
      v117 = v76;
      v118 = v75;
      v119 = v66;
    }
    sub_1AE4FD464(&v120, v116);
    sub_1AE506A38();
    sub_1AE506A38();
    sub_1AE925B54();
    v79 = sub_1AE505BCC();
    if (os_log_type_enabled(v66, v79))
    {
      v80 = (uint8_t *)sub_1AE4F66A0();
      v115[0] = sub_1AE4F66A0();
      *(_DWORD *)v80 = 136315138;
      v110 = v80 + 4;
      sub_1AE506A38();
      v81 = sub_1AE7AEEE0();
      v83 = v82;
      sub_1AE4F6CEC();
      sub_1AE520ED4(v81, v83, (uint64_t)v115, v84, v85, v86, v87, v88, (uint64_t)v94, v95, v96, v97, v98, v99, (uint64_t)v100, v101, v102, v103, v104,
        v105);
      v114[0] = v89;
      sub_1AE92676C();
      swift_bridgeObjectRelease();
      sub_1AE4F6CEC();
      sub_1AE4F6CEC();
      sub_1AE508348(&dword_1AE4F2000, v66, v79, "Rendered result: %s", v80);
      sub_1AE5081C8();
      sub_1AE4F9064();
    }
    sub_1AE4F6CEC();
    sub_1AE4F6CEC();

    v92 = (uint64_t)v113;
    sub_1AE4F9094();
    sub_1AE4FD464(v114, v116);
    sub_1AE4FD464(v115, v116);
    sub_1AE7B4664(v114);
    KnosisResult.toGDKnosisResult()(v93);
    sub_1AE4F6700();

    sub_1AE4F682C();
    sub_1AE56E58C(v114);
    sub_1AE53D160(v71, type metadata accessor for Renderer);
    sub_1AE53D160((uint64_t)v112, (uint64_t (*)(_QWORD))type metadata accessor for QueryContext);
    sub_1AE4FD464(v115, v116);
    sub_1AE56E58C(v115);
  }
  sub_1AE7B4220();
  sub_1AE53D160(v92, (uint64_t (*)(_QWORD))type metadata accessor for LogSignpost);
  sub_1AE4F8180();
}

void __swiftcall KnosisServer.executeIntents(request:)(GDKnosisResult *__return_ptr retstr, GDKnosisRequest *request)
{
  void *v2;
  void *v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  GDKnosisResult *v9;
  _QWORD v10[3];
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  _QWORD v20[21];

  sub_1AE7B4C4C();
  if (qword_1ED3193F0 != -1)
    swift_once();
  v4 = sub_1AE4F6854();
  sub_1AE4F77E8(v4, (uint64_t)qword_1ED3193D8);
  v5 = sub_1AE5086D8();
  if (sub_1AE6147E0(v5))
  {
    v6 = (_WORD *)sub_1AE4F66A0();
    sub_1AE7B4C34(v6);
    sub_1AE4FBE84(&dword_1AE4F2000, v7, v8, "ExecuteIntents called from obj-c in-process");
    sub_1AE4F9064();
  }

  static KnosisIntentRequest.initWithGDKnosisRequest(_:)(v3, (uint64_t)v10);
  v14 = v10[0];
  v15 = v10[1];
  v16 = v10[2];
  v17 = v11;
  v18 = v12;
  v19 = v13;
  KnosisServer.executeIntents(request:)();
  sub_1AE4F81B8();
  sub_1AE4F665C();
  sub_1AE7B4C58();
  sub_1AE4FD464(v10, v20);
  KnosisResult.toGDKnosisResult()(v9);
  sub_1AE56E58C(v20);
}

void KnosisServer.executeIntents(request:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  Class isa;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  Class v47;
  Class v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _BYTE *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t Tree;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  __int128 v95;
  __int128 v96;
  char *v97;
  _QWORD v98[2];
  char v99;
  uint64_t v100;
  __int128 v101;
  NSObject *v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  _BYTE v106[7];
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  NSObject *v110;
  char v111;
  _BYTE v112[7];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  _QWORD v122[5];
  char v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  NSObject *v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD v139[2];
  _DWORD v140[2];
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  NSObject *v150;
  char v151;
  _BYTE v152[7];
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;

  sub_1AE4FC4D4();
  v84 = v0;
  v80 = v1;
  v3 = v2[1];
  v4 = v2[2];
  v5 = v2[3];
  v6 = v2[5];
  v87 = v2[4];
  v89 = *v2;
  LODWORD(v85) = *((unsigned __int8 *)v2 + 48);
  if (qword_1ED3193F0 != -1)
    swift_once();
  v7 = sub_1AE4F6854();
  v8 = sub_1AE4FB608(v7, (uint64_t)qword_1ED3193D8);
  sub_1AE4F6A24();
  sub_1AE4F6A24();
  sub_1AE4F6A24();
  v79 = v8;
  v9 = sub_1AE925B54();
  v10 = sub_1AE9265E0();
  if (sub_1AE4F833C(v9))
  {
    v11 = (uint8_t *)sub_1AE4F66A0();
    v122[0] = sub_1AE4F66A0();
    *(_DWORD *)v11 = 136315138;
    v141 = v89;
    v142 = v3;
    v143 = v4;
    v144 = v5;
    v145 = v87;
    v146 = v6;
    LOBYTE(v147) = v85;
    v12 = KnosisIntentRequest.description.getter();
    sub_1AE520ED4(v12, v13, (uint64_t)v122, v14, v15, v16, v17, v18, v74, (unint64_t)v75, (uint64_t)v76, v77, v8, v80, Tree, (uint64_t)v82, (uint64_t)v83, v84, v85,
      v87);
    v141 = v19;
    sub_1AE92676C();
    sub_1AE4F6824();
    sub_1AE4F6824();
    sub_1AE4F6824();
    sub_1AE4F9038();
    sub_1AE508348(&dword_1AE4F2000, v9, v10, "executeIntents called with request %s", v11);
    sub_1AE5081C8();
    sub_1AE4F9064();
  }

  sub_1AE4F6824();
  sub_1AE4F6824();
  sub_1AE4F6824();
  v141 = v89;
  v142 = v3;
  v143 = 0;
  v144 = 0xE000000000000000;
  sub_1AE7B4BD4(MEMORY[0x1E0DEE9D8]);
  v147 = v20;
  v148 = 0x80000001AE984FB0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v153 = 0u;
  v154 = 0u;
  v155 = 0u;
  v156 = 0u;
  v157 = 0u;
  isa = v4[2].isa;
  v22 = (void *)v80;
  if (isa)
  {
    v23 = v89;
    v75 = (char *)&v146 + 1;
    v76 = v152;
    v82 = v112;
    v83 = v106;
    Tree = type metadata accessor for QueryTree();
    sub_1AE4F6804();
    sub_1AE4F66C4();
    v24 = 0x80000001AE984FB0;
    v25 = v3;
    v26 = 0;
    v27 = 0;
    v28 = v4;
    v4 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v97 = (char *)isa - 1;
    v40 = v28 + 7;
    v41 = 0xD000000000000012;
    v42 = MEMORY[0x1E0DEE9D8];
    v43 = 0xE000000000000000;
    v44 = v25;
    v45 = 2;
    while (1)
    {
      v122[0] = v23;
      v122[1] = v44;
      v122[2] = v26;
      v122[3] = v43;
      v122[4] = v42;
      v123 = v45;
      v124 = v41;
      v125 = v24;
      v126 = v27;
      v127 = v4;
      v128 = v29 & 1;
      v129 = v30;
      v130 = v31;
      v131 = v32;
      v132 = v33;
      v133 = v34;
      v134 = v35;
      v135 = v36;
      v136 = v37;
      v137 = v38;
      v138 = v39;
      v46 = (int)v40->isa;
      v48 = v40[-2].isa;
      v47 = v40[-1].isa;
      v94 = v40;
      *&v101 = v40[-3];
      *((_QWORD *)&v101 + 1) = v48;
      v102 = v47;
      LODWORD(v103) = v46;
      sub_1AE506D88();
      sub_1AE4F6730();
      sub_1AE4F66CC();
      sub_1AE4FB75C();
      sub_1AE4F8328();
      sub_1AE883754(v49, v50, v51, v52, v53, v54, v55, v56, v85, 0);
      v58 = v57;
      v59 = static KnosisIndexType.allCases.getter();
      v60 = sub_1AE8985EC((uint64_t)v59);
      if (qword_1ED30FB20 != -1)
        swift_once();
      v61 = swift_bridgeObjectRetain();
      sub_1AE7AF364(v61, v60, (void (*)(char *, _QWORD))sub_1AE5564D8);
      v98[0] = 0;
      v98[1] = 0;
      v99 = 2;
      v100 = v62;
      sub_1AE7B2AAC(v58, (uint64_t)v98, &v101);
      sub_1AE4FB730();
      sub_1AE7B4C0C();
      sub_1AE4F665C();
      sub_1AE56E58C(v122);
      v44 = *((_QWORD *)&v101 + 1);
      v23 = v101;
      v26 = v102;
      v43 = v103;
      v42 = v104;
      v45 = v105;
      v140[0] = *(_DWORD *)v106;
      *(_DWORD *)((char *)v140 + 3) = *(_DWORD *)&v106[3];
      v41 = v107;
      v24 = v108;
      v27 = v109;
      v4 = v110;
      v63 = v111;
      *(_DWORD *)((char *)v139 + 3) = *(_DWORD *)&v112[3];
      v139[0] = *(_DWORD *)v112;
      v30 = v113;
      v31 = v114;
      v32 = v115;
      v33 = v116;
      v34 = v117;
      v35 = v118;
      v36 = v119;
      v37 = v120;
      v39 = *((_QWORD *)&v121 + 1);
      v38 = v121;
      if (*(_QWORD *)(v104 + 16))
      {
        v90 = v117;
        v92 = v120;
        v78 = v108;
        v95 = v121;
        v86 = v118;
        v88 = v119;
        sub_1AE7B4C64();
        *(_QWORD *)v80 = v23;
        *(_QWORD *)(v80 + 8) = v44;
        *(_QWORD *)(v80 + 16) = v26;
        *(_QWORD *)(v80 + 24) = v43;
        *(_QWORD *)(v80 + 32) = v42;
        *(_BYTE *)(v80 + 40) = v45;
        *(_DWORD *)(v80 + 41) = v140[0];
        *(_DWORD *)(v80 + 44) = *(_DWORD *)((char *)v140 + 3);
        *(_QWORD *)(v80 + 48) = v41;
        *(_QWORD *)(v80 + 56) = v78;
        *(_QWORD *)(v80 + 64) = v27;
        *(_QWORD *)(v80 + 72) = v4;
        *(_BYTE *)(v80 + 80) = v63;
        *(_DWORD *)(v80 + 81) = v139[0];
        *(_DWORD *)(v80 + 84) = *(_DWORD *)((char *)v139 + 3);
        *(_QWORD *)(v80 + 88) = Tree;
        *(_QWORD *)(v80 + 96) = v112;
        *(_QWORD *)(v80 + 104) = v106;
        *(_QWORD *)(v80 + 112) = v84;
        *(_QWORD *)(v80 + 120) = v90;
        *(_QWORD *)(v80 + 128) = v86;
        *(_QWORD *)(v80 + 136) = v88;
        *(_QWORD *)(v80 + 144) = v92;
        *(_OWORD *)(v80 + 152) = v95;
        goto LABEL_18;
      }
      if (!v97)
        break;
      v40 = v94 + 4;
      v29 = v111 & 1;
      --v97;
    }
    v91 = v117;
    v93 = v120;
    v77 = v108;
    v96 = v121;
    v85 = v118;
    v87 = v119;
    sub_1AE7B4C64();
    v141 = v23;
    v142 = v44;
    v143 = v26;
    v144 = v43;
    v145 = v42;
    LOBYTE(v146) = v45;
    *(_DWORD *)((char *)&v146 + 1) = v140[0];
    HIDWORD(v146) = *(_DWORD *)((char *)v140 + 3);
    v147 = v41;
    v148 = v77;
    v149 = v27;
    v150 = v4;
    v151 = v63;
    *(_DWORD *)v152 = v139[0];
    *(_DWORD *)&v152[3] = *(_DWORD *)((char *)v139 + 3);
    v22 = (void *)v80;
    *(_QWORD *)&v153 = Tree;
    *((_QWORD *)&v153 + 1) = v112;
    *(_QWORD *)&v154 = v106;
    *((_QWORD *)&v154 + 1) = v84;
    *(_QWORD *)&v155 = v91;
    *((_QWORD *)&v155 + 1) = v85;
    *(_QWORD *)&v156 = v87;
    *((_QWORD *)&v156 + 1) = v93;
    v157 = v96;
  }
  else
  {
    sub_1AE4F6804();
  }
  sub_1AE925B54();
  v64 = sub_1AE505BCC();
  if (sub_1AE4F833C(v4))
  {
    v65 = (uint8_t *)sub_1AE4F66A0();
    v98[0] = sub_1AE4F66A0();
    *(_DWORD *)v65 = 136315138;
    sub_1AE4F9094();
    sub_1AE4FD464(v122, &v141);
    KnosisResult.description.getter();
    sub_1AE520ED4(v66, v67, (uint64_t)v98, v68, v69, v70, v71, v72, v74, (unint64_t)v75, (uint64_t)v76, v77, v79, v80, Tree, (uint64_t)v82, (uint64_t)v83, v84, v85,
      v87);
    v122[0] = v73;
    sub_1AE7B4BB4();
    sub_1AE4F9038();
    sub_1AE508348(&dword_1AE4F2000, v4, v64, "Rendered result: %s", v65);
    sub_1AE5081C8();
    sub_1AE4F9064();
  }

  sub_1AE4F9094();
  sub_1AE4FD464(v22, &v141);
LABEL_18:
  sub_1AE4F8180();
}

void __swiftcall KnosisServer.executeIntentsWithGraphObjectContext(request:)(GDKnosisResultContext *__return_ptr retstr, GDKnosisRequest *request)
{
  void *v2;
  void *v3;
  uint64_t v4;
  os_log_type_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD v13[21];

  sub_1AE7B4C4C();
  if (qword_1ED3193F0 != -1)
    swift_once();
  v4 = sub_1AE4F6854();
  sub_1AE4F77E8(v4, (uint64_t)qword_1ED3193D8);
  v5 = sub_1AE5086D8();
  if (sub_1AE6147E0(v5))
  {
    v6 = (_WORD *)sub_1AE4F66A0();
    sub_1AE7B4C34(v6);
    sub_1AE4FBE84(&dword_1AE4F2000, v7, v8, "ExecuteIntentsWithGraphObjectContext called from obj-c in-process");
    sub_1AE4F9064();
  }

  static KnosisIntentRequest.initWithGDKnosisRequest(_:)(v3, (uint64_t)v12);
  KnosisServer.executeIntents(request:)();
  sub_1AE4F81B8();
  sub_1AE4F665C();
  sub_1AE7B4C58();
  type metadata accessor for GDKnosisResultContext(0);
  v9 = v13[4];
  sub_1AE4FB75C();
  ObjectSynthesisDictionaryMapping.init()(v12);
  v10 = v12[0];
  type metadata accessor for InitializationResourcesManager();
  v11 = sub_1AE4F6738();
  *(_QWORD *)(v11 + 16) = sub_1AE925C98();
  sub_1AE56E58C(v13);
  v12[0] = v10;
  v12[1] = v9;
  v12[2] = v11;
  sub_1AE690AEC(v12);
  sub_1AE4F6700();
  sub_1AE4F6648();
  sub_1AE4F665C();
}

void sub_1AE7B2AAC(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  NSObject *v48;
  os_signpost_type_t v49;
  uint8_t *v50;
  os_signpost_id_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  _OWORD *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  _OWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t Context;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  char v148;
  uint64_t v149;

  v113 = a3;
  v111 = (int *)type metadata accessor for Renderer(0);
  MEMORY[0x1E0C80A78](v111);
  v112 = (uint64_t)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for IntentExecResult();
  MEMORY[0x1E0C80A78](v109);
  v7 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Context = type metadata accessor for QueryContext();
  MEMORY[0x1E0C80A78](Context);
  v129 = (uint64_t)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1AE925AE8();
  v122 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v120 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v121 = (char *)&v104 - v12;
  v13 = sub_1AE925B6C();
  v114 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v115 = (uint64_t)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_1AE925B0C();
  v118 = *(_QWORD *)(v119 - 8);
  MEMORY[0x1E0C80A78](v119);
  v117 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for LogSignpost();
  MEMORY[0x1E0C80A78](v116);
  v127 = (uint64_t *)((char *)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(_QWORD *)a2;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = *(unsigned __int8 *)(a2 + 16);
  v20 = *(_QWORD *)(a2 + 24);
  if (qword_1ED3193F0 != -1)
    swift_once();
  v21 = sub_1AE4FB608(v13, (uint64_t)qword_1ED3193D8);
  swift_retain();
  sub_1AE526540(v17, v18, v19);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1AE526540(v17, v18, v19);
  swift_bridgeObjectRetain();
  v110 = v21;
  v22 = sub_1AE925B54();
  v23 = sub_1AE9265E0();
  v24 = v23;
  v25 = os_log_type_enabled(v22, v23);
  v132 = a1;
  v130 = v17;
  v126 = v18;
  LODWORD(v125) = v19;
  v124 = v20;
  v123 = v7;
  if (v25)
  {
    v26 = swift_slowAlloc();
    v107 = swift_slowAlloc();
    v133 = v107;
    *(_DWORD *)v26 = 136315394;
    swift_retain();
    HIDWORD(v106) = v24;
    v27 = sub_1AE8837BC();
    v108 = v9;
    v29 = v28;
    swift_release();
    sub_1AE520ED4(v27, v29, (uint64_t)&v133, v30, v31, v32, v33, v34, v104, v105, v106, v107, v108, v109, v110, (uint64_t)v111, v112, (uint64_t)v113, v114,
      v115);
    *(_QWORD *)&v134 = v35;
    sub_1AE92676C();
    swift_release_n();
    v36 = v130;
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    v105 = v26 + 14;
    *(_QWORD *)&v134 = 0;
    *((_QWORD *)&v134 + 1) = 0xE000000000000000;
    sub_1AE526540(v36, v18, v19);
    swift_bridgeObjectRetain();
    sub_1AE92691C();
    v147 = v134;
    sub_1AE925F74();
    *(_QWORD *)&v134 = v36;
    *((_QWORD *)&v134 + 1) = v18;
    LOBYTE(v135) = v19;
    sub_1AE926A48();
    sub_1AE925F74();
    sub_1AE655564();
    swift_bridgeObjectRetain();
    sub_1AE9263F4();
    sub_1AE925F74();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1AE579F84(v36, v18, v19);
    swift_bridgeObjectRelease();
    sub_1AE520ED4(v147, *((uint64_t *)&v147 + 1), (uint64_t)&v133, v37, v38, v39, v40, v41, v104, v105, v106, v107, v108, v109, v110, (uint64_t)v111, v112, (uint64_t)v113, v114,
      v115);
    *(_QWORD *)&v134 = v42;
    sub_1AE92676C();
    swift_bridgeObjectRelease();
    sub_1AE579F84(v36, v18, v19);
    swift_bridgeObjectRelease();
    v43 = v36;
    v9 = v108;
    sub_1AE579F84(v43, v18, v19);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1AE4F2000, v22, BYTE4(v106), "Executing KGQ with queryTree:%s, accessConfig:%s", (uint8_t *)v26, 0x16u);
    v44 = v107;
    swift_arrayDestroy();
    MEMORY[0x1AF454C78](v44, -1, -1);
    MEMORY[0x1AF454C78](v26, -1, -1);

  }
  else
  {
    swift_release_n();
    sub_1AE579F84(v17, v18, v19);
    swift_bridgeObjectRelease();
    sub_1AE579F84(v17, v18, v19);

    swift_bridgeObjectRelease();
  }
  v45 = v121;
  if (qword_1ED31C728 != -1)
    swift_once();
  v46 = sub_1AE4FB608(v13, (uint64_t)qword_1ED31C710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 16))(v115, v46, v13);
  v47 = v117;
  sub_1AE925AF4();
  sub_1AE925B00();
  sub_1AE925AC4();
  v48 = sub_1AE925B00();
  v49 = sub_1AE926670();
  if ((sub_1AE926700() & 1) != 0)
  {
    v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v50 = 0;
    v51 = sub_1AE925AD0();
    _os_signpost_emit_with_name_impl(&dword_1AE4F2000, v48, v49, v51, "Knosis.executeIntent", "", v50, 2u);
    MEMORY[0x1AF454C78](v50, -1, -1);
  }

  v52 = v122;
  (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v120, v45, v9);
  sub_1AE925B3C();
  swift_allocObject();
  v53 = sub_1AE925B30();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v45, v9);
  v54 = v127;
  *v127 = "Knosis.executeIntent";
  v54[1] = 20;
  *((_BYTE *)v54 + 16) = 2;
  v54[3] = v53;
  (*(void (**)(char *, char *, uint64_t))(v118 + 32))((char *)v54 + *(int *)(v116 + 24), v47, v119);
  v55 = *(_QWORD *)(v131 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_intentHandler + 8);
  v56 = *(_QWORD *)(v131 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_intentHandler + 16);
  v57 = *(_QWORD *)(v131 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_intentHandler + 24);
  v58 = *(_QWORD *)(v131 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_intentHandler + 32);
  v59 = *(_QWORD *)(v131 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_intentHandler + 40);
  v61 = *(_QWORD *)(v131 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_intentHandler + 48);
  v60 = *(_QWORD *)(v131 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_intentHandler + 56);
  v62 = *(_QWORD *)(v131 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_intentHandler + 64);
  *(_QWORD *)&v134 = *(_QWORD *)(v131 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_intentHandler);
  *((_QWORD *)&v134 + 1) = v55;
  v135 = v56;
  *(_QWORD *)&v136 = v57;
  *((_QWORD *)&v136 + 1) = v58;
  v137 = v59;
  v138 = v61;
  v139 = v60;
  *(_QWORD *)&v140 = v62;
  *(_QWORD *)&v147 = v130;
  *((_QWORD *)&v147 + 1) = v126;
  v148 = v125;
  v149 = v124;
  v122 = v134;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v63 = (uint64_t)v123;
  sub_1AE73B4CC(v132, (uint64_t)&v147, (uint64_t)v123);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v64 = v109;
  v65 = *(_QWORD *)(v63 + *(int *)(v109 + 20));
  v66 = v129;
  sub_1AE56CC34(v63, v129, (uint64_t (*)(_QWORD))type metadata accessor for QueryContext);
  v67 = *(int *)(v64 + 28);
  v68 = v63 + *(int *)(v64 + 24);
  v69 = *(_QWORD *)(v68 + 8);
  v124 = *(_QWORD *)v68;
  v70 = *(_QWORD *)(v68 + 16);
  LODWORD(v120) = *(_DWORD *)(v68 + 24);
  v71 = *(char **)(v68 + 40);
  v122 = *(_QWORD *)(v68 + 32);
  v72 = *(_QWORD *)(v68 + 48);
  v73 = *(unsigned __int8 *)(v63 + v67);
  v130 = v65;
  swift_retain();
  v126 = v69;
  swift_bridgeObjectRetain();
  v125 = v70;
  swift_bridgeObjectRetain();
  v121 = v71;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AE53D160(v63, (uint64_t (*)(_QWORD))type metadata accessor for IntentExecResult);
  v74 = v132;
  v75 = *(_QWORD *)(v72 + 16);
  v76 = v130;
  if (v75)
  {
    LODWORD(v123) = v73;
    swift_bridgeObjectRetain_n();
    v77 = v72 + 40;
    v78 = MEMORY[0x1E0DEE9D8];
    do
    {
      swift_bridgeObjectRetain();
      v79 = sub_1AE926B44();
      swift_bridgeObjectRelease();
      if (v79 <= 2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1AE51B7D4();
          v78 = v81;
        }
        v80 = *(_QWORD *)(v78 + 16);
        if (v80 >= *(_QWORD *)(v78 + 24) >> 1)
        {
          sub_1AE51B7D4();
          v78 = v82;
        }
        *(_QWORD *)(v78 + 16) = v80 + 1;
        *(_BYTE *)(v78 + v80 + 32) = v79;
      }
      v77 += 16;
      --v75;
    }
    while (v75);
    swift_bridgeObjectRelease_n();
    v66 = v129;
    v74 = v132;
    LOBYTE(v73) = (_BYTE)v123;
  }
  else
  {
    v78 = MEMORY[0x1E0DEE9D8];
  }
  v83 = v112;
  sub_1AE56CC34(v66, v112, (uint64_t (*)(_QWORD))type metadata accessor for QueryContext);
  v84 = *(_QWORD *)(v131 + OBJC_IVAR____TtC20IntelligencePlatform12KnosisServer_defaultResultLimit);
  v85 = v111;
  *(_QWORD *)(v83 + v111[5]) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v83 + v85[6]) = v76;
  *(_QWORD *)(v83 + v85[7]) = 0;
  *(_BYTE *)(v83 + v85[8]) = v73;
  *(_QWORD *)(v83 + v85[9]) = v84;
  *(_QWORD *)(v83 + v85[10]) = v78;
  swift_retain();
  v86 = 0;
  sub_1AE856598();
  if (*(_BYTE *)(v66 + *(int *)(Context + 52)) == 1)
  {
    if (*(_QWORD *)(v74 + 64))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_1AE898A90();
    }
    sub_1AE592440();
    v91 = v90;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v147 = 0;
    *((_QWORD *)&v147 + 1) = 0xE000000000000000;
    sub_1AE92691C();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v147 = 0x203A746E65746E69;
    *((_QWORD *)&v147 + 1) = 0xE800000000000000;
    sub_1AE925F74();
    swift_bridgeObjectRelease();
    sub_1AE925F74();
    MEMORY[0x1AF453400](v91, &type metadata for IntentArg);
    sub_1AE925F74();
    swift_release();
    swift_bridgeObjectRelease();
    v92 = v129;
    v93 = (uint64_t *)(v129 + *(int *)(Context + 48));
    sub_1AE7B4854(0, 0, v147, *((uint64_t *)&v147 + 1));

    swift_release();
    sub_1AE53D160(v83, type metadata accessor for Renderer);
    v87 = *v93;
    v88 = v93[1];
    v89 = v93[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1AE53D160(v92, (uint64_t (*)(_QWORD))type metadata accessor for QueryContext);
    sub_1AE53F134(v144, v145);
  }
  else
  {

    swift_release();
    sub_1AE53D160(v83, type metadata accessor for Renderer);
    sub_1AE53D160(v66, (uint64_t (*)(_QWORD))type metadata accessor for QueryContext);
    v87 = v144;
    v88 = v145;
    v89 = v146;
  }
  v94 = v120;
  sub_1AE56E64C(v142, v143);
  v95 = v135;
  v96 = v137;
  v97 = v138;
  v98 = v139;
  v99 = v141;
  v100 = v113;
  *v113 = v134;
  *((_QWORD *)v100 + 2) = v95;
  *(_OWORD *)((char *)v100 + 24) = v136;
  *((_BYTE *)v100 + 40) = v96;
  *((_QWORD *)v100 + 6) = v97;
  *((_QWORD *)v100 + 7) = v98;
  v100[4] = v140;
  *((_BYTE *)v100 + 80) = v99;
  v101 = v126;
  *((_QWORD *)v100 + 11) = v124;
  *((_QWORD *)v100 + 12) = v101;
  *((_QWORD *)v100 + 13) = v125;
  *((_QWORD *)v100 + 14) = v94;
  v102 = v121;
  *((_QWORD *)v100 + 15) = v122;
  *((_QWORD *)v100 + 16) = v102;
  *((_QWORD *)v100 + 17) = v72;
  *((_QWORD *)v100 + 18) = v87;
  *((_QWORD *)v100 + 19) = v88;
  *((_QWORD *)v100 + 20) = v89;
  v103 = (uint64_t)v127;
  sub_1AE7B4220();
  sub_1AE53D160(v103, (uint64_t (*)(_QWORD))type metadata accessor for LogSignpost);
}

void KnosisServer.executeIntentsXpc(request:accessConfig:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  GDKnosisResult *v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  GDKnosisResult *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t Tree;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD v128[5];
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;

  sub_1AE4FC4D4();
  v98 = v0;
  v2 = v1;
  v96 = *(_QWORD *)(v3 + 8);
  v97 = *(_QWORD *)v3;
  HIDWORD(v95) = *(unsigned __int8 *)(v3 + 16);
  v94 = *(_QWORD *)(v3 + 24);
  v4 = objc_msgSend(v1, sel_query);
  v5 = sub_1AE925E3C();
  v7 = v6;

  v166 = v5;
  v167 = v7;
  v168 = 0;
  v169 = 0xE000000000000000;
  sub_1AE7B4BD4(MEMORY[0x1E0DEE9D8]);
  *(double *)&v9 = sub_1AE7B4B8C(v8);
  v177 = v9;
  v178 = v9;
  v179 = v9;
  v180 = v9;
  v181 = v9;
  static KnosisIntentRequest.initWithGDKnosisRequest(_:)(v2, (uint64_t)&v145);
  v10 = v146;
  v11 = v147;
  v12 = v148;
  v100 = v149;
  v101 = v145;
  v13 = v150;
  HIDWORD(v99) = v151;
  if (qword_1ED3193F0 != -1)
    swift_once();
  v14 = sub_1AE4F6854();
  v15 = sub_1AE4FB608(v14, (uint64_t)qword_1ED3193D8);
  sub_1AE4F6A24();
  sub_1AE4F6A24();
  sub_1AE4F6A24();
  v91 = v15;
  v16 = sub_1AE925B54();
  v17 = sub_1AE9265E0();
  if (sub_1AE4F833C(v16))
  {
    v18 = (uint8_t *)sub_1AE4F66A0();
    LOBYTE(v128[0]) = sub_1AE4F66A0();
    *(_DWORD *)v18 = 136315138;
    v145 = v101;
    v146 = v10;
    v147 = v11;
    v148 = v12;
    v149 = v100;
    v150 = v13;
    LOBYTE(v151) = BYTE4(v99);
    v19 = KnosisIntentRequest.description.getter();
    sub_1AE7B4C9C(v19, v20, v21, v22, v23, v24, v25, v26, v77, v78, v79, v80, *((uint64_t *)&v80 + 1), v81, v82, v83, v84, v85, v86,
      v87,
      v88,
      v89,
      v90,
      v15,
      Tree,
      v93,
      v94,
      v95,
      v96,
      v97,
      v98,
      v99,
      v100,
      v101,
      (uint64_t)(v18 + 4),
      v104,
      v105,
      v106,
      v107,
      v108,
      *((uint64_t *)&v108 + 1),
      v109,
      v110,
      v111,
      v112,
      v113,
      v114,
      v115,
      v116,
      v117,
      v118,
      v119,
      v120,
      v121,
      v122,
      v123,
      v124,
      v125,
      v126,
      v127,
      v128[0]);
    v145 = v27;
    sub_1AE92676C();
    sub_1AE4F6824();
    sub_1AE4F6824();
    sub_1AE4F6824();
    sub_1AE4F9038();
    sub_1AE508348(&dword_1AE4F2000, v16, v17, "ExecuteIntentsXpc called with request %s", v18);
    sub_1AE5081C8();
    sub_1AE4F9064();
  }

  sub_1AE4F6824();
  sub_1AE4F6824();
  sub_1AE4F6824();
  v28 = *(_QWORD *)(v11 + 16);
  if (v28)
  {
    v78 = v12;
    v93 = v10;
    v29 = v166;
    v30 = v167;
    v31 = v11;
    v12 = v168;
    v32 = v169;
    v33 = v170;
    v34 = v171;
    v35 = v173;
    v89 = v174;
    v90 = v172;
    v88 = v175;
    HIDWORD(v87) = v176;
    v85 = *((_QWORD *)&v177 + 1);
    v86 = v177;
    v83 = *((_QWORD *)&v178 + 1);
    v84 = v178;
    v36 = v180;
    v81 = *((_QWORD *)&v179 + 1);
    v82 = v179;
    v37 = *((_QWORD *)&v180 + 1);
    v80 = v181;
    v103 = v28;
    Tree = type metadata accessor for QueryTree();
    swift_bridgeObjectRetain();
    v39 = v89;
    v38 = v90;
    v40 = v81;
    v41 = v82;
    v42 = v88;
    v43 = BYTE4(v87);
    v45 = v83;
    v44 = v84;
    v47 = *((_QWORD *)&v80 + 1);
    v46 = v80;
    v49 = v85;
    v48 = v86;
    v102 = v103 - 1;
    v79 = v31;
    v50 = (_DWORD *)(v31 + 56);
    while (1)
    {
      v128[0] = v29;
      v128[1] = v30;
      v128[2] = v12;
      v128[3] = v32;
      v128[4] = v33;
      v129 = v34;
      v130 = v38;
      v131 = v35;
      v132 = v39;
      v133 = v42;
      v134 = v43 & 1;
      v135 = v48;
      v136 = v49;
      v137 = v44;
      v138 = v45;
      v139 = v41;
      v140 = v40;
      v141 = v36;
      v142 = v37;
      v143 = v46;
      v144 = v47;
      v51 = *v50;
      v53 = *((_QWORD *)v50 - 2);
      v52 = *((_QWORD *)v50 - 1);
      *(_QWORD *)&v108 = *((_QWORD *)v50 - 3);
      *((_QWORD *)&v108 + 1) = v53;
      v109 = v52;
      LODWORD(v110) = v51;
      sub_1AE506D88();
      sub_1AE4F66C4();
      sub_1AE4F66CC();
      sub_1AE4F66C4();
      sub_1AE4F8328();
      sub_1AE883754(v54, v55, v56, v57, v58, v59, v60, v61, SBYTE4(v99), 0);
      v104 = v97;
      v105 = v96;
      LOBYTE(v106) = BYTE4(v95);
      v107 = v94;
      sub_1AE7B2AAC(v62, (uint64_t)&v104, &v108);
      sub_1AE56E58C(v128);
      sub_1AE4FD464(&v145, &v108);
      v33 = v149;
      if (*(_QWORD *)(v149 + 16))
      {
        swift_bridgeObjectRelease();
        sub_1AE4F665C();
        sub_1AE4F6824();
        sub_1AE4FD464(&v108, &v145);
        sub_1AE7B4664(&v145);
        KnosisResult.toGDKnosisResult()(v63);
        sub_1AE4F682C();
        sub_1AE56E58C(&v145);
        goto LABEL_16;
      }
      sub_1AE4F682C();
      if (!v102)
        break;
      v50 += 8;
      v46 = v164;
      v47 = v165;
      v48 = v156;
      v49 = v157;
      v44 = v158;
      v45 = v159;
      v41 = v160;
      v40 = v161;
      v37 = v163;
      v36 = v162;
      v43 = v155;
      v42 = v154;
      v39 = v153;
      v38 = v151;
      v35 = v152;
      v34 = v150;
      v12 = v147;
      v32 = v148;
      --v102;
      v29 = v145;
      v30 = v146;
    }
    swift_bridgeObjectRelease();
    sub_1AE4F6648();
    sub_1AE4F665C();
    sub_1AE4FD464(&v166, &v145);
    sub_1AE4F6648();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1AE4F81B8();
    sub_1AE4F6728();
  }
  v64 = sub_1AE925B54();
  v65 = sub_1AE9265E0();
  if (sub_1AE735B8C(v65))
  {
    v66 = (uint8_t *)sub_1AE4F66A0();
    v128[0] = sub_1AE4F66A0();
    *(_DWORD *)v66 = 136315138;
    sub_1AE4F9094();
    sub_1AE4FD464(&v145, &v166);
    KnosisResult.description.getter();
    sub_1AE7B4C9C(v67, v68, v69, v70, v71, v72, v73, v74, v77, v78, v79, v80, *((uint64_t *)&v80 + 1), v81, v82, v83, v84, v85, v86,
      v87,
      v88,
      v89,
      v90,
      v91,
      Tree,
      v93,
      v94,
      v95,
      v96,
      v97,
      v98,
      v99,
      v100,
      v101,
      v102,
      v104,
      v105,
      v106,
      v107,
      v108,
      *((uint64_t *)&v108 + 1),
      v109,
      v110,
      v111,
      v112,
      v113,
      v114,
      v115,
      v116,
      v117,
      v118,
      v119,
      v120,
      v121,
      v122,
      v123,
      v124,
      v125,
      v126,
      v127,
      v128[0]);
    v145 = v75;
    sub_1AE7B4BB4();
    sub_1AE4F9038();
    sub_1AE508348(&dword_1AE4F2000, v64, (os_log_type_t)v12, "Rendered result: %s", v66);
    sub_1AE5081C8();
    sub_1AE4F9064();
  }

  sub_1AE4F9094();
  sub_1AE4FD464(&v145, &v166);
  sub_1AE4FD464(v128, &v166);
  KnosisResult.toGDKnosisResult()(v76);
LABEL_16:
  sub_1AE56E58C(&v145);
  sub_1AE4F8180();
}

void sub_1AE7B4220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_signpost_id_t v23;
  os_signpost_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;

  sub_1AE4FC4D4();
  v1 = v0;
  v2 = sub_1AE925B18();
  v26 = *(_QWORD *)(v2 - 8);
  v27 = v2;
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v3);
  sub_1AE4F9024();
  v25 = v4;
  v5 = sub_1AE60DED4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  sub_1AE4F666C();
  v9 = v8 - v7;
  v10 = sub_1AE925B0C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  sub_1AE4F666C();
  v14 = v13 - v12;
  v15 = type metadata accessor for LogSignpost();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v14, v1 + *(int *)(v15 + 24), v10);
  v28 = *(const char **)v1;
  v16 = *(_BYTE *)(v1 + 16);
  sub_1AE60DD4C();
  v17 = sub_1AE925B00();
  sub_1AE925B24();
  v24 = sub_1AE926664();
  if ((sub_1AE926700() & 1) == 0)
  {
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
    sub_1AE4F8180();
    return;
  }
  if ((v16 & 1) == 0)
  {
    if (v28)
    {
      v19 = v26;
      v18 = v27;
      v20 = v25;
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_15;
  }
  if ((unint64_t)v28 >> 32)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v28 >> 11 != 27)
  {
    v19 = v26;
    v18 = v27;
    v20 = v25;
    if (v28 >> 16 <= 0x10)
    {
      v28 = (const char *)&v29;
LABEL_9:
      sub_1AE60DD4C();
      sub_1AE925B48();
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v19 + 88))(v20, v18) == *MEMORY[0x1E0DF2190])
      {
        v21 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v18);
        v21 = "";
      }
      v22 = (uint8_t *)sub_1AE4F66A0();
      *(_WORD *)v22 = 0;
      v23 = sub_1AE925AD0();
      sub_1AE5079F0(&dword_1AE4F2000, v17, v24, v23, v28, v21, v22);
      sub_1AE4F9064();
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
}

uint64_t sub_1AE7B4460()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1AE5071F0();
  return sub_1AE7B450C(v0, v1, v2);
}

uint64_t sub_1AE7B44AC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1AE7B450C(0xD000000000000010, 0x80000001AE985070, a1);
}

uint64_t sub_1AE7B450C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v8;
  void *v9;
  id v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(id, uint64_t, uint64_t);
  id v16;
  uint64_t result;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21[2];

  v21[1] = *(id *)MEMORY[0x1E0C80C00];
  v8 = *(void **)(v3 + OBJC_IVAR___GDSwiftViewService_accessRequester);
  v9 = (void *)sub_1AE925E18();
  v21[0] = 0;
  v10 = objc_msgSend(v8, sel_requestAssertionForViewName_error_, v9, v21);

  v11 = v21[0];
  if (v10)
  {
    v20 = a2;
    v12 = *(_QWORD **)(v3 + OBJC_IVAR___GDSwiftViewService_databaseCache);
    v13 = v12[5];
    v14 = v12[6];
    sub_1AE4F9858(v12 + 2, v13);
    v15 = *(uint64_t (**)(id, uint64_t, uint64_t))(v14 + 8);
    v16 = v11;
    result = v15(v10, v13, v14);
    if (v4)
    {
      return swift_unknownObjectRelease();
    }
    else
    {
      *a3 = a1;
      a3[1] = v20;
      a3[2] = v10;
      a3[3] = result;
      a3[4] = v18;
    }
  }
  else
  {
    v19 = v21[0];
    sub_1AE9246B4();

    return swift_willThrow();
  }
  return result;
}

_QWORD *sub_1AE7B4664(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[11];
  v3 = a1[12];
  v5 = a1[19];
  v6 = a1[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1AE7AA1A0(v2, v3);
  sub_1AE53F164(v6, v5);
  return a1;
}

uint64_t type metadata accessor for KnosisServer()
{
  return objc_opt_self();
}

uint64_t sub_1AE7B4744(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1AE501548(&qword_1ED30FC38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1AE7B478C()
{
  unint64_t result;

  result = qword_1ED30FBF8;
  if (!qword_1ED30FBF8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE967298, &unk_1E5DC8490);
    atomic_store(result, (unint64_t *)&qword_1ED30FBF8);
  }
  return result;
}

uint64_t sub_1AE7B47C8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AE7B4854(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = result;
  v9 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 + v10 > *(_QWORD *)(v6 + 24) >> 1)
  {
    sub_1AE519C48();
    v6 = v13;
  }
  v14 = v6 + 32 + 16 * v8;
  result = swift_arrayDestroy();
  if (!v10)
    goto LABEL_13;
  v15 = *(_QWORD *)(v6 + 16);
  if (__OFSUB__(v15, a2))
    goto LABEL_19;
  result = (uint64_t)sub_1AE51F99C((char *)(v6 + 32 + 16 * a2), v15 - a2, (char *)(v14 + 16));
  v16 = *(_QWORD *)(v6 + 16);
  v17 = __OFADD__(v16, v10);
  v18 = v16 + v10;
  if (!v17)
  {
    *(_QWORD *)(v6 + 16) = v18;
LABEL_13:
    *(_QWORD *)v14 = a3;
    *(_QWORD *)(v14 + 8) = a4;
    *v4 = v6;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t method lookup function for KnosisServer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KnosisServer.__allocating_init(config:indexHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

unint64_t sub_1AE7B498C()
{
  unint64_t result;

  result = qword_1EED98BB8;
  if (!qword_1EED98BB8)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for IndexQuery, &type metadata for IndexQuery);
    atomic_store(result, (unint64_t *)&qword_1EED98BB8);
  }
  return result;
}

uint64_t sub_1AE7B49CC()
{
  uint64_t v0;

  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1AE7B49F0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for K2TClient(a2, a1);
  return a2;
}

uint64_t sub_1AE7B4A2C(uint64_t a1)
{
  destroy for InferenceServiceInstanceEnum();
  return a1;
}

void sub_1AE7B4A64(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_1AE523CF0(a2);
    atomic_store(MEMORY[0x1AF454B70](&unk_1AE964B14, v3), a1);
  }
  sub_1AE4F6664();
}

uint64_t sub_1AE7B4AA4()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1AE7B4AD8()
{
  unint64_t result;

  result = qword_1EEDA2D50;
  if (!qword_1EEDA2D50)
  {
    result = MEMORY[0x1AF454B70](&protocol conformance descriptor for KnosisResult, &type metadata for KnosisResult);
    atomic_store(result, (unint64_t *)&qword_1EEDA2D50);
  }
  return result;
}

uint64_t sub_1AE7B4B14(uint64_t a1, uint64_t a2)
{
  uint64_t Context;

  Context = type metadata accessor for QueryContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Context - 8) + 32))(a2, a1, Context);
  return a2;
}

uint64_t sub_1AE7B4B58()
{
  return sub_1AE925E54();
}

uint64_t sub_1AE7B4B68()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[2] + 8))(v0[4], v0[3]);
}

uint64_t sub_1AE7B4B78()
{
  return 0;
}

uint64_t sub_1AE7B4B84(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

double sub_1AE7B4B8C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = a1;
  *(_QWORD *)(v2 - 200) = (v1 - 32) | 0x8000000000000000;
  *(_QWORD *)(v2 - 192) = 0;
  *(_QWORD *)(v2 - 184) = 0;
  *(_BYTE *)(v2 - 176) = 0;
  return 0.0;
}

uint64_t sub_1AE7B4BA8()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1AE50BDB4(v1, v0);
}

uint64_t sub_1AE7B4BB4()
{
  return sub_1AE92676C();
}

uint64_t sub_1AE7B4BC0()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1AE59900C(v1, v0);
}

void sub_1AE7B4BD4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 224) = a1;
  *(_BYTE *)(v1 - 216) = 2;
}

uint64_t sub_1AE7B4BEC()
{
  return sub_1AE926424();
}

BOOL sub_1AE7B4BF4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1AE7B4C04()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7B4C0C()
{
  return sub_1AE579F84(0, 0, 2u);
}

uint64_t sub_1AE7B4C1C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return v1 - 256;
}

_WORD *sub_1AE7B4C34(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1AE7B4C40()
{
  return sub_1AE9243CC();
}

uint64_t sub_1AE7B4C58()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7B4C64()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1AE7B4C70()
{
  return type metadata accessor for QueryContext();
}

uint64_t sub_1AE7B4C7C()
{
  return sub_1AE9243E4();
}

uint64_t sub_1AE7B4C84()
{
  return sub_1AE925E78();
}

uint64_t sub_1AE7B4C8C()
{
  return sub_1AE924408();
}

uint64_t sub_1AE7B4C94()
{
  return sub_1AE9243FC();
}

void sub_1AE7B4C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_1AE520ED4(a1, a2, (uint64_t)&a61, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

unint64_t sub_1AE7B4CA8@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 199) = a1;
  return KnosisKGQRequest.description.getter();
}

void sub_1AE7B4CB4()
{
  uint64_t v0;
  void (*v1)(uint64_t *__return_ptr);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  void *v32;
  __int128 *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t *__return_ptr);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;

  sub_1AE4F67EC();
  v71 = v1;
  v2 = v0;
  v4 = v3;
  v6 = v5;
  sub_1AE501548(&qword_1EED9F8A0);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_1AE4FBE98();
  v10 = MEMORY[0x1E0C80A78](v70);
  v62 = (uint64_t)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v59 = (uint64_t)&v55 - v13;
  v14 = *(_QWORD *)(v6 + 16);
  if (!v14)
  {
    sub_1AE4FFCA0();
LABEL_38:
    sub_1AE4F667C();
    return;
  }
  v15 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v73 = *(_QWORD *)(v12 + 72);
  v68 = 162;
  v67 = 1336;
  v66 = 2889;
  swift_bridgeObjectRetain();
  v69 = MEMORY[0x1E0DEE9D8];
  v61 = xmmword_1AE934260;
  v56 = v15;
  v16 = v15;
  v65 = v4;
  v64 = v6;
  v63 = v9;
  while (1)
  {
    v17 = v4;
    v18 = *(_QWORD *)(v6 + v16);
    EntityClass.init(intValue:)(SHIBYTE(v18), (uint64_t)&v77);
    v4 = v78;
    v75 = v16;
    v76 = v14;
    if (!v78)
    {
      sub_1AE52F844();
      v32 = (void *)sub_1AE4F6778();
      *v33 = v61;
      v33[1] = 0u;
      v33[2] = 0u;
      v33[3] = 0u;
      *(__int128 *)((char *)v33 + 57) = 0u;
      v4 = v17;
LABEL_17:
      swift_willThrow();

      v74 = 0;
      v34 = 0;
      v35 = 1;
      goto LABEL_20;
    }
    if (v68 < 55)
      break;
    if (!_Records_GDEntityClass_records)
      goto LABEL_42;
    if (*(_QWORD *)(_Records_GDEntityClass_records + 0x518) >= v67)
      goto LABEL_40;
    v6 = *(_QWORD *)(_Records_GDEntityClass_records + 0x520);
    if (v6 >= v66)
      goto LABEL_41;
    v74 = v18;
    if (!_Records_GDEntityClass_classIds[0])
      goto LABEL_43;
    v72 = v2;
    v19 = v77;
    v20 = v79;
    v21 = v80;
    v22 = v81;
    v23 = *(unsigned __int8 *)(_Records_GDEntityClass_records + 0x510);
    v24 = sub_1AE925F8C();
    if (!_Records_GDEntityClass_labels)
      goto LABEL_44;
    v26 = v24;
    v27 = v25;
    v28 = sub_1AE925F8C();
    v82 = v26;
    v83 = v27;
    v84 = v28;
    v85 = v29;
    v86 = v23;
    v30 = v28 == v20 && v21 == v29;
    if (v30 || (v6 = v28, v60 = v23, v31 = v29, (sub_1AE926D60() & 1) != 0))
    {
      sub_1AE508854(v19);
      swift_bridgeObjectRelease();
    }
    else
    {
      v57 = v27;
      v77 = v19;
      v78 = v4;
      v79 = v20;
      v80 = v21;
      LOBYTE(v81) = v22;
      EntityClass.ancestorClassesSet.getter();
      sub_1AE5519D8();
      v58 = v50;
      swift_bridgeObjectRelease();
      if ((v58 & 1) == 0)
      {
        sub_1AE52F844();
        v32 = (void *)sub_1AE4F6778();
        v51 = v57;
        *(_QWORD *)v52 = v26;
        *(_QWORD *)(v52 + 8) = v51;
        *(_QWORD *)(v52 + 16) = v6;
        *(_QWORD *)(v52 + 24) = v31;
        *(_QWORD *)(v52 + 32) = v60;
        *(_QWORD *)(v52 + 40) = v19;
        *(_QWORD *)(v52 + 48) = v4;
        *(_QWORD *)(v52 + 56) = v20;
        *(_QWORD *)(v52 + 64) = v21;
        *(_BYTE *)(v52 + 72) = v22;
        sub_1AE7B8A58();
        v9 = v63;
        goto LABEL_17;
      }
      sub_1AE508854(v19);
      sub_1AE4F67AC();
    }
    swift_bridgeObjectRelease();
    v35 = 0;
    sub_1AE7B8A58();
    v34 = v72;
    v9 = v63;
LABEL_20:
    v71(&v77);
    v2 = v34;
    if (v34)
    {
      swift_bridgeObjectRelease();
      sub_1AE4F66E8();
      sub_1AE4FFCA0();
      goto LABEL_38;
    }
    v36 = v80;
    v37 = v81;
    v38 = sub_1AE4F9858(&v77, v80);
    if ((v35 & 1) != 0)
    {
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v77);
      sub_1AE769C88();
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v39, v40, v41, v70);
    }
    else
    {
      v42 = v38;
      v43 = sub_1AE501548(&qword_1EED9FD58);
      TypedEntityIdentifier.graphObject<A>(from:)(v42, v43, v36, v37);
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v77);
      if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v9, 1, v70) != 1)
      {
        v46 = v59;
        sub_1AE7B89F8((uint64_t)v9, v59);
        sub_1AE7B89F8(v46, v62);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v45 = v75;
        v44 = v76;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v48 = v69;
        }
        else
        {
          sub_1AE51B890();
          v48 = v53;
        }
        v49 = *(_QWORD *)(v48 + 16);
        if (v49 >= *(_QWORD *)(v48 + 24) >> 1)
        {
          sub_1AE51B890();
          v48 = v54;
        }
        *(_QWORD *)(v48 + 16) = v49 + 1;
        v69 = v48;
        sub_1AE73D7CC(v62, v48 + v56 + v49 * v73, type metadata accessor for CustomGraphActivityEvent);
        goto LABEL_30;
      }
    }
    v45 = v75;
    v44 = v76;
    sub_1AE52FBE8((uint64_t)v9, &qword_1EED9F8A0);
LABEL_30:
    v16 = v45 + v73;
    v14 = v44 - 1;
    if (!v14)
    {
      sub_1AE4FFCA0();
      sub_1AE4F66E8();
      goto LABEL_38;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

void sub_1AE7B5218()
{
  uint64_t v0;
  void (*v1)(_QWORD *__return_ptr, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD *__return_ptr, uint64_t);
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[5];

  sub_1AE4F67EC();
  v50 = v1;
  v2 = v0;
  v4 = v3;
  v6 = v5;
  sub_1AE501548(&qword_1EED9F8A0);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v7);
  sub_1AE4F9024();
  v9 = v8;
  sub_1AE501548(&qword_1EED9F9D8);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for CustomGraphBehaviorActivityEvent(0);
  v45 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  sub_1AE4F686C();
  v48 = v13;
  MEMORY[0x1E0C80A78](v14);
  v44 = (uint64_t)v43 - v15;
  v16 = *(_QWORD *)(v6 + 16);
  if (v16)
  {
    v46 = v12;
    sub_1AE4FB75C();
    v43[1] = v6;
    v17 = (char *)(v6 + 64);
    v18 = MEMORY[0x1E0DEE9D8];
    v47 = v4;
    while (1)
    {
      v19 = *v17;
      v20 = sub_1AE4F6730();
      v50(v53, v20);
      if (v2)
        break;
      v51 = v18;
      v52 = 0;
      v22 = v53[3];
      v21 = v53[4];
      v23 = sub_1AE7B8A90();
      if ((v19 & 1) != 0)
      {
        _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v53);
        sub_1AE4FBE98();
        v24 = v9;
        sub_1AE769C88();
        _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v25, v26, v27, v28);
        v2 = v52;
      }
      else
      {
        v29 = v23;
        v30 = sub_1AE501548(&qword_1EED9FD58);
        v24 = v9;
        v31 = v52;
        TypedEntityIdentifier.graphObject<A>(from:)(v29, v30, v22, v21);
        v2 = v31;
        if (v31)
        {
          _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v53);
          break;
        }
        _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v53);
        v32 = sub_1AE4FBE98();
        _s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v9, 1, v32);
      }
      v18 = v51;
      v33 = (uint64_t)v46;
      v34 = v24;
      sub_1AE52FBE8(v24, &qword_1EED9F8A0);
      sub_1AE769C88();
      v35 = v49;
      _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v36, v37, v38, v49);
      sub_1AE4F81B8();
      if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v33, 1, v35) == 1)
      {
        sub_1AE52FBE8(v33, &qword_1EED9F9D8);
      }
      else
      {
        v39 = v44;
        sub_1AE7B89F8(v33, v44);
        sub_1AE7B89F8(v39, v48);
        if ((sub_1AE508CEC() & 1) == 0)
        {
          sub_1AE7B8998();
          v18 = v41;
        }
        v40 = *(_QWORD *)(v18 + 16);
        if (v40 >= *(_QWORD *)(v18 + 24) >> 1)
        {
          sub_1AE7B8998();
          v18 = v42;
        }
        *(_QWORD *)(v18 + 16) = v40 + 1;
        sub_1AE73D7CC(v48, v18+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v40, type metadata accessor for CustomGraphBehaviorActivityEvent);
      }
      v17 += 40;
      --v16;
      v9 = v34;
      if (!v16)
      {
        sub_1AE4FC564();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    swift_bridgeObjectRelease();
    sub_1AE4F81B8();
    sub_1AE4F67AC();
    sub_1AE4FC564();
  }
  else
  {
    sub_1AE4FC564();
  }
LABEL_20:
  sub_1AE4F667C();
}

void sub_1AE7B5540()
{
  uint64_t v0;
  void (*v1)(_QWORD *__return_ptr, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD *__return_ptr, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];

  sub_1AE4F67EC();
  v41 = v1;
  v2 = v0;
  v4 = v3;
  v6 = v5;
  sub_1AE501548(&qword_1EED9BAD8);
  sub_1AE4F66F0();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CustomGraphPerson(0);
  v37 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  sub_1AE4F686C();
  v40 = v11;
  MEMORY[0x1E0C80A78](v12);
  v36 = (uint64_t)&v35 - v13;
  v14 = *(_QWORD *)(v6 + 16);
  if (v14)
  {
    sub_1AE4FB75C();
    v35 = v6;
    v15 = (_BYTE *)(v6 + 88);
    v16 = MEMORY[0x1E0DEE9D8];
    v38 = v10;
    v39 = v4;
    while (1)
    {
      v44 = v14;
      v17 = *((_QWORD *)v15 - 5);
      v18 = *v15;
      swift_bridgeObjectRetain();
      sub_1AE4F6730();
      v45 = v17;
      v19 = swift_bridgeObjectRetain();
      v41(v46, v19);
      if (v2)
        break;
      v42 = v16;
      v43 = 0;
      v20 = v46[3];
      v21 = v46[4];
      v22 = sub_1AE7B8A90();
      if ((v18 & 1) != 0)
      {
        _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v46);
        sub_1AE769C88();
        v23 = v38;
        _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v24, v25, v26, v38);
        sub_1AE4F81B8();
        sub_1AE4F67AC();
        sub_1AE737420();
        v16 = v42;
        v2 = v43;
      }
      else
      {
        v27 = v22;
        v28 = sub_1AE501548(&qword_1EEDA0620);
        v29 = v43;
        TypedEntityIdentifier.graphObject<A>(from:)(v27, v28, v20, v21);
        v2 = v29;
        if (v29)
        {
          _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v46);
          break;
        }
        _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v46);
        sub_1AE4F81B8();
        sub_1AE4F67AC();
        sub_1AE737420();
        v16 = v42;
        v23 = v38;
      }
      v30 = v44;
      if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v9, 1, v23) == 1)
      {
        sub_1AE52FBE8((uint64_t)v9, &qword_1EED9BAD8);
      }
      else
      {
        v31 = v36;
        sub_1AE73D7CC((uint64_t)v9, v36, type metadata accessor for CustomGraphPerson);
        sub_1AE73D7CC(v31, v40, type metadata accessor for CustomGraphPerson);
        if ((sub_1AE737D44() & 1) == 0)
        {
          sub_1AE7B8A84();
          v16 = v33;
        }
        v32 = *(_QWORD *)(v16 + 16);
        if (v32 >= *(_QWORD *)(v16 + 24) >> 1)
        {
          sub_1AE7B8A84();
          v16 = v34;
        }
        *(_QWORD *)(v16 + 16) = v32 + 1;
        sub_1AE73D7CC(v40, v16+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v32, type metadata accessor for CustomGraphPerson);
      }
      v15 += 64;
      v14 = v30 - 1;
      if (!v14)
      {
        sub_1AE4FC564();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    swift_bridgeObjectRelease();
    sub_1AE4F81B8();
    sub_1AE4F67AC();
    sub_1AE737420();
    sub_1AE4F6718();
    sub_1AE4FC564();
  }
  else
  {
    sub_1AE4FC564();
  }
LABEL_20:
  sub_1AE4F667C();
}

void sub_1AE7B583C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD *__return_ptr, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *__return_ptr, uint64_t);
  _BYTE *v19;
  uint64_t v20;
  _BYTE __src[400];
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[50];
  _BYTE v26[408];
  uint64_t v27;

  sub_1AE4F67EC();
  v18 = v2;
  v3 = v0;
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
  {
    v5 = (_BYTE *)(v1 + 88);
    swift_bridgeObjectRetain();
    v27 = v4 - 1;
    v6 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v7 = *((_QWORD *)v5 - 1);
      v8 = *v5;
      sub_1AE4F81B0();
      swift_bridgeObjectRetain();
      v9 = sub_1AE4FB764();
      v18(v22, v9);
      if (v3)
        break;
      v19 = v5;
      v20 = v6;
      v11 = v23;
      v10 = v24;
      v12 = sub_1AE4F9858(v22, v23);
      if ((v8 & 1) != 0)
      {
        _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v22);
        sub_1AE4F6728();
        sub_1AE4F6718();
        sub_1AE4F6710();
        sub_1AE7B8744(v25);
        sub_1AE7B874C((uint64_t)v25, (uint64_t)v26);
        v3 = 0;
      }
      else
      {
        v13 = v12;
        v25[0] = v7;
        v14 = sub_1AE501548(&qword_1EED9FCD0);
        TypedEntityIdentifier.graphObject<A>(from:)(v13, v14, v11, v10);
        v3 = 0;
        _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v22);
        sub_1AE4F6728();
        sub_1AE4F6718();
        sub_1AE4F6710();
      }
      v6 = v20;
      sub_1AE7B874C((uint64_t)v26, (uint64_t)v22);
      sub_1AE7B874C((uint64_t)v22, (uint64_t)v25);
      if (sub_1AE57D778((uint64_t)v25) == 1)
      {
        if (!v27)
          goto LABEL_17;
      }
      else
      {
        if ((sub_1AE508CEC() & 1) == 0)
        {
          sub_1AE5076C0();
          v6 = v16;
        }
        v15 = *(_QWORD *)(v6 + 16);
        if (v15 >= *(_QWORD *)(v6 + 24) >> 1)
        {
          sub_1AE5076C0();
          v6 = v17;
        }
        sub_1AE7B874C((uint64_t)v22, (uint64_t)__src);
        *(_QWORD *)(v6 + 16) = v15 + 1;
        memcpy((void *)(v6 + 400 * v15 + 32), __src, 0x190uLL);
        if (!v27)
        {
LABEL_17:
          sub_1AE4FC564();
          swift_bridgeObjectRelease();
          goto LABEL_19;
        }
      }
      v5 = v19 + 64;
      --v27;
    }
    swift_bridgeObjectRelease();
    sub_1AE4F6728();
    sub_1AE4F6718();
    sub_1AE4F6710();
    sub_1AE4F67AC();
    sub_1AE4FC564();
  }
  else
  {
    sub_1AE4FC564();
  }
LABEL_19:
  sub_1AE4F667C();
}

uint64_t KTSContextRepresentationProtocol.description.getter(uint64_t a1, uint64_t (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1AE92691C();
  sub_1AE50A664();
  v4 = a2[5](a1, a2);
  v5 = type metadata accessor for CustomGraphPerson(0);
  MEMORY[0x1AF453400](v4, v5);
  sub_1AE509B74();
  swift_bridgeObjectRelease();
  sub_1AE4F6728();
  sub_1AE7B8A40();
  sub_1AE501F4C(a2[6]);
  MEMORY[0x1AF453400]();
  sub_1AE509B74();
  swift_bridgeObjectRelease();
  sub_1AE4F6728();
  sub_1AE50A664();
  v6 = sub_1AE501F4C(a2[7]);
  type metadata accessor for CustomGraphActivityEvent(0);
  MEMORY[0x1AF453400](v6);
  sub_1AE509B74();
  sub_1AE4F6728();
  swift_bridgeObjectRelease();
  sub_1AE7B8A30();
  sub_1AE501F4C(a2[8]);
  MEMORY[0x1AF453400]();
  sub_1AE509B74();
  sub_1AE4F6728();
  sub_1AE4F6710();
  sub_1AE7B8A30();
  sub_1AE501F4C(a2[9]);
  MEMORY[0x1AF453400]();
  sub_1AE509B74();
  sub_1AE4F6728();
  sub_1AE4F6710();
  sub_1AE925F74();
  sub_1AE501F4C(a2[10]);
  MEMORY[0x1AF453400]();
  sub_1AE509B74();
  sub_1AE4F6728();
  sub_1AE4F6710();
  sub_1AE50A664();
  sub_1AE501F4C(a2[11]);
  MEMORY[0x1AF453400]();
  sub_1AE509B74();
  sub_1AE4F6728();
  sub_1AE4F6710();
  sub_1AE50A664();
  sub_1AE501F4C(a2[12]);
  MEMORY[0x1AF453400]();
  sub_1AE509B74();
  sub_1AE4F6710();
  sub_1AE4F6728();
  sub_1AE50A664();
  sub_1AE501F4C(a2[13]);
  MEMORY[0x1AF453400]();
  sub_1AE509B74();
  sub_1AE4F6648();
  swift_bridgeObjectRelease();
  sub_1AE4FF0F0();
  return 0;
}

uint64_t sub_1AE7B5DF4@<X0>(uint64_t a1@<X8>)
{
  return sub_1AE7B6418(a1);
}

#error "1AE7B5E18: call analysis failed (funcsize=6)"

void sub_1AE7B5E24()
{
  sub_1AE7B669C();
}

void sub_1AE7B5E40()
{
  sub_1AE7B67C0();
}

void sub_1AE7B5E5C()
{
  sub_1AE7B6918();
}

void sub_1AE7B5E78()
{
  sub_1AE7B6958();
}

void sub_1AE7B5E94()
{
  sub_1AE7B6A7C();
}

void sub_1AE7B5EB0()
{
  sub_1AE7B6BD4();
}

void sub_1AE7B5ECC()
{
  sub_1AE7B6C14();
}

void sub_1AE7B5EE8()
{
  sub_1AE7B6D38();
}

void sub_1AE7B5F04()
{
  sub_1AE7B6E90();
}

uint64_t sub_1AE7B5F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  BOOL v7;
  char v8;

  sub_1AE7B89E0();
  v4 = v4 && v2 == v3;
  if (v4 || (sub_1AE7B8924(), (sub_1AE4F91C4() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    sub_1AE7B89C8();
    v7 = v4 && v0 == v6;
    if (v7 || (sub_1AE505BD4(), (sub_1AE4F91C4() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (v1 == 0xD000000000000012 && v0 == 0x80000001AE985280)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = sub_1AE4F91C4();
      sub_1AE4F6648();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_1AE7B6028(char a1)
{
  if (!a1)
    return sub_1AE505E9C();
  if (a1 == 1)
    return 0x65746E6F4373746BLL;
  return 0xD000000000000012;
}

void sub_1AE7B6084()
{
  sub_1AE7B6FE4();
}

uint64_t sub_1AE7B60A0()
{
  char *v0;

  return sub_1AE7B6028(*v0);
}

uint64_t sub_1AE7B60A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1AE7B5F20();
  *a1 = result;
  return result;
}

void sub_1AE7B60CC(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1AE7B60D8()
{
  sub_1AE7B8048();
  return sub_1AE926F94();
}

uint64_t sub_1AE7B6100()
{
  sub_1AE7B8048();
  return sub_1AE926FA0();
}

uint64_t KTSContextRepresentation.__allocating_init(originContext:ktsContext:destinationContext:graphLifeEventContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_1AE7B8A9C();
  KTSContextRepresentation.init(originContext:ktsContext:destinationContext:graphLifeEventContext:)(a1, a2, a3, a4);
  return v8;
}

void KTSContextRepresentation.__allocating_init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1AE4F79CC();
  KTSContextRepresentation.init(from:)(v0, v1, v2, v3, v4, v5, v6, v7);
  sub_1AE4FC4F8();
}

void KTSContextRepresentation.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1AE7B7244(a1, (uint64_t)&unk_1EEDA2D60, (uint64_t)sub_1AE7B8048, (uint64_t)&type metadata for KTSContextRepresentation.CodingKeys, (uint64_t)type metadata accessor for KTSContextRepresentation, a6, a7, a8, vars0, vars8);
}

uint64_t sub_1AE7B61EC()
{
  return sub_1AE7B7474();
}

void sub_1AE7B6218()
{
  sub_1AE7B8984();
}

uint64_t KTSContextRepresentation.__deallocating_deinit()
{
  KTSContextRepresentation.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1AE7B6258@<X0>(uint64_t a1@<X8>)
{
  return sub_1AE7B5DF4(a1);
}

uint64_t sub_1AE7B6278()
{
  return sub_1AE7B5E08();
}

void sub_1AE7B6298()
{
  sub_1AE7B5E24();
}

void sub_1AE7B62B8()
{
  sub_1AE7B5E40();
  sub_1AE4FD974();
}

void sub_1AE7B62D4()
{
  sub_1AE7B5E5C();
}

void sub_1AE7B62F4()
{
  sub_1AE7B5E78();
}

void sub_1AE7B6314()
{
  sub_1AE7B5E94();
}

void sub_1AE7B6334()
{
  sub_1AE7B5EB0();
}

void sub_1AE7B6354()
{
  sub_1AE7B5ECC();
}

void sub_1AE7B6374()
{
  sub_1AE7B5EE8();
  sub_1AE4FD974();
}

void sub_1AE7B6390()
{
  sub_1AE7B5F04();
}

void sub_1AE7B63B0()
{
  sub_1AE7B6218();
}

void sub_1AE7B63D0(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  KTSContextRepresentation.__allocating_init(from:)();
  if (!v1)
    *a1 = v3;
}

uint64_t sub_1AE7B63F8()
{
  return sub_1AE7B61EC();
}

uint64_t sub_1AE7B6418@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;

  v4 = v1 + 40;
  v5 = swift_beginAccess();
  sub_1AE7B8A6C(v5, v6, v7, v8, v9, v10, v11);
  v12 = v25;
  sub_1AE52FBE8((uint64_t)&v24, &qword_1EEDA2D58);
  if (v12)
    goto LABEL_2;
  if (qword_1ED31C9B0 != -1)
    swift_once();
  v21 = (void *)qword_1ED31C9A0;
  v22 = sub_1AE501548(&qword_1EED98FE0);
  swift_allocObject();
  result = CustomLifeEventContext.init<>(viewService:)(v21);
  if (!v2)
  {
    v23 = result;
    v25 = v22;
    v26 = sub_1AE69A9EC();
    *(_QWORD *)&v24 = v23;
    swift_beginAccess();
    sub_1AE7B8000((uint64_t)&v24, v4);
    v13 = swift_endAccess();
LABEL_2:
    result = sub_1AE7B8A6C(v13, v14, v15, v16, v17, v18, v19);
    if (v25)
      return sub_1AE50AF58(&v24, a1);
    else
      __break(1u);
  }
  return result;
}

void sub_1AE7B654C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;

  sub_1AE4F6CF4();
  if (*(_QWORD *)(*(_QWORD *)(v14 + 24) + 16))
  {
    sub_1AE4FBE98();
    sub_1AE503974();
    v16 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v17 = *(_QWORD *)(v14 + *(int *)(a14 + 40));
      swift_retain();
      sub_1AE4FB764();
      sub_1AE7B5218();
      if (v15)
      {
        sub_1AE509ED4();
        sub_1AE4F67AC();
        sub_1AE4F6710();
        goto LABEL_24;
      }
      v19 = v18;
      sub_1AE4F6710();
      sub_1AE5066DC();
      if (v20)
        break;
      if (!sub_1AE508CEC() || (sub_1AE7B8948(), !(v22 ^ v20 | v21)))
      {
        sub_1AE7B8998();
        v16 = v23;
      }
      if (*(_QWORD *)(v19 + 16))
      {
        v24 = (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16);
        v25 = type metadata accessor for CustomGraphBehaviorActivityEvent(0);
        if (v24 < v17)
          goto LABEL_27;
        v26 = sub_1AE4FF114(v25);
        v28 = v28 || v26 >= v27;
        if (!v28)
          goto LABEL_29;
        sub_1AE7B8A28();
        if (v17)
        {
          sub_1AE7B8A4C();
          if (v20)
            goto LABEL_28;
          *(_QWORD *)(v16 + 16) = v29;
        }
      }
      else if (v17)
      {
        goto LABEL_26;
      }
      sub_1AE4F6728();
      sub_1AE7B8968();
      if (v21)
      {
        sub_1AE509ED4();
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    sub_1AE4FE030();
    sub_1AE500FB4();
    __break(1u);
  }
  else
  {
LABEL_24:
    sub_1AE7B8978();
    sub_1AE4FBC3C();
  }
}

void sub_1AE7B669C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;

  sub_1AE4F6CF4();
  if (*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16))
  {
    sub_1AE4FBE98();
    sub_1AE503974();
    v4 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      sub_1AE507FB0();
      sub_1AE4FB764();
      sub_1AE7B8904();
      if (v1)
      {
        sub_1AE509ED4();
        sub_1AE4F67AC();
        sub_1AE4F6710();
        goto LABEL_24;
      }
      v6 = v5;
      sub_1AE4F6710();
      sub_1AE5066DC();
      if (v7)
        break;
      if (!sub_1AE508CEC() || (sub_1AE7B8948(), !(v9 ^ v7 | v8)))
      {
        sub_1AE7B898C();
        v4 = v10;
      }
      if (*(_QWORD *)(v6 + 16))
      {
        v11 = sub_1AE7B88C0();
        if (v2 < v3)
          goto LABEL_27;
        v12 = sub_1AE4FF114(v11);
        v14 = v14 || v12 >= v13;
        if (!v14)
          goto LABEL_29;
        sub_1AE7B8A28();
        if (v3)
        {
          sub_1AE7B8A4C();
          if (v7)
            goto LABEL_28;
          *(_QWORD *)(v4 + 16) = v15;
        }
      }
      else if (v3)
      {
        goto LABEL_26;
      }
      sub_1AE4F6728();
      sub_1AE7B8968();
      if (v8)
      {
        sub_1AE509ED4();
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    sub_1AE4FE030();
    sub_1AE500FB4();
    __break(1u);
  }
  else
  {
LABEL_24:
    sub_1AE7B8978();
    sub_1AE4FBC3C();
  }
}

void sub_1AE7B67C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  sub_1AE4F6CF4();
  if (*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16))
  {
    sub_1AE4FBE98();
    sub_1AE4FD46C();
    v3 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      sub_1AE5083BC();
      sub_1AE4F81B0();
      sub_1AE7B8914();
      if (v1)
      {
        sub_1AE509ED4();
        sub_1AE4F67AC();
        sub_1AE4F6718();
        goto LABEL_24;
      }
      v5 = v4;
      sub_1AE4F6718();
      sub_1AE7B8A00();
      if (v6)
        break;
      if (!sub_1AE508CEC() || (sub_1AE7B8948(), !(v8 ^ v6 | v7)))
      {
        sub_1AE5076C0();
        v3 = v9;
      }
      if (*(_QWORD *)(v5 + 16))
      {
        sub_1AE7B8954();
        if (v8 != v6)
          goto LABEL_27;
        sub_1AE50AD88();
        v12 = v12 || v10 >= v11;
        if (!v12)
          goto LABEL_29;
        swift_arrayInitWithCopy();
        if (v2)
        {
          v13 = *(_QWORD *)(v3 + 16);
          v6 = __OFADD__(v13, v2);
          v14 = v13 + v2;
          if (v6)
            goto LABEL_28;
          *(_QWORD *)(v3 + 16) = v14;
        }
      }
      else if (v2)
      {
        goto LABEL_26;
      }
      sub_1AE4F6710();
      sub_1AE7B8A18();
      if (v7)
      {
        sub_1AE509ED4();
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    sub_1AE4FE030();
    sub_1AE500FB4();
    __break(1u);
  }
  else
  {
LABEL_24:
    sub_1AE7B8978();
    sub_1AE4FBC3C();
  }
}

void sub_1AE7B6918()
{
  sub_1AE4F66E0();
  sub_1AE4F6730();
  sub_1AE506100();
  sub_1AE4F81B8();
  sub_1AE4FC4F8();
}

void sub_1AE7B6958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;

  sub_1AE4F6CF4();
  if (*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16))
  {
    sub_1AE4FBE98();
    sub_1AE503974();
    v4 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      sub_1AE507FB0();
      sub_1AE4FB764();
      sub_1AE7B8904();
      if (v1)
      {
        sub_1AE509ED4();
        sub_1AE4F67AC();
        sub_1AE4F6710();
        goto LABEL_24;
      }
      v6 = v5;
      sub_1AE4F6710();
      sub_1AE5066DC();
      if (v7)
        break;
      if (!sub_1AE508CEC() || (sub_1AE7B8948(), !(v9 ^ v7 | v8)))
      {
        sub_1AE7B898C();
        v4 = v10;
      }
      if (*(_QWORD *)(v6 + 16))
      {
        v11 = sub_1AE7B88C0();
        if (v2 < v3)
          goto LABEL_27;
        v12 = sub_1AE4FF114(v11);
        v14 = v14 || v12 >= v13;
        if (!v14)
          goto LABEL_29;
        sub_1AE7B8A28();
        if (v3)
        {
          sub_1AE7B8A4C();
          if (v7)
            goto LABEL_28;
          *(_QWORD *)(v4 + 16) = v15;
        }
      }
      else if (v3)
      {
        goto LABEL_26;
      }
      sub_1AE4F6728();
      sub_1AE7B8968();
      if (v8)
      {
        sub_1AE509ED4();
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    sub_1AE4FE030();
    sub_1AE500FB4();
    __break(1u);
  }
  else
  {
LABEL_24:
    sub_1AE7B8978();
    sub_1AE4FBC3C();
  }
}

void sub_1AE7B6A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  sub_1AE4F6CF4();
  if (*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16))
  {
    sub_1AE4FBE98();
    sub_1AE4FD46C();
    v3 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      sub_1AE5083BC();
      sub_1AE4F81B0();
      sub_1AE7B8914();
      if (v1)
      {
        sub_1AE509ED4();
        sub_1AE4F67AC();
        sub_1AE4F6718();
        goto LABEL_24;
      }
      v5 = v4;
      sub_1AE4F6718();
      sub_1AE7B8A00();
      if (v6)
        break;
      if (!sub_1AE508CEC() || (sub_1AE7B8948(), !(v8 ^ v6 | v7)))
      {
        sub_1AE5076C0();
        v3 = v9;
      }
      if (*(_QWORD *)(v5 + 16))
      {
        sub_1AE7B8954();
        if (v8 != v6)
          goto LABEL_27;
        sub_1AE50AD88();
        v12 = v12 || v10 >= v11;
        if (!v12)
          goto LABEL_29;
        swift_arrayInitWithCopy();
        if (v2)
        {
          v13 = *(_QWORD *)(v3 + 16);
          v6 = __OFADD__(v13, v2);
          v14 = v13 + v2;
          if (v6)
            goto LABEL_28;
          *(_QWORD *)(v3 + 16) = v14;
        }
      }
      else if (v2)
      {
        goto LABEL_26;
      }
      sub_1AE4F6710();
      sub_1AE7B8A18();
      if (v7)
      {
        sub_1AE509ED4();
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    sub_1AE4FE030();
    sub_1AE500FB4();
    __break(1u);
  }
  else
  {
LABEL_24:
    sub_1AE7B8978();
    sub_1AE4FBC3C();
  }
}

void sub_1AE7B6BD4()
{
  sub_1AE4F66E0();
  sub_1AE4F6730();
  sub_1AE506100();
  sub_1AE4F81B8();
  sub_1AE4FC4F8();
}

void sub_1AE7B6C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;

  sub_1AE4F6CF4();
  if (*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16))
  {
    sub_1AE4FBE98();
    sub_1AE503974();
    v4 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      sub_1AE507FB0();
      sub_1AE4FB764();
      sub_1AE7B8904();
      if (v1)
      {
        sub_1AE509ED4();
        sub_1AE4F67AC();
        sub_1AE4F6710();
        goto LABEL_24;
      }
      v6 = v5;
      sub_1AE4F6710();
      sub_1AE5066DC();
      if (v7)
        break;
      if (!sub_1AE508CEC() || (sub_1AE7B8948(), !(v9 ^ v7 | v8)))
      {
        sub_1AE7B898C();
        v4 = v10;
      }
      if (*(_QWORD *)(v6 + 16))
      {
        v11 = sub_1AE7B88C0();
        if (v2 < v3)
          goto LABEL_27;
        v12 = sub_1AE4FF114(v11);
        v14 = v14 || v12 >= v13;
        if (!v14)
          goto LABEL_29;
        sub_1AE7B8A28();
        if (v3)
        {
          sub_1AE7B8A4C();
          if (v7)
            goto LABEL_28;
          *(_QWORD *)(v4 + 16) = v15;
        }
      }
      else if (v3)
      {
        goto LABEL_26;
      }
      sub_1AE4F6728();
      sub_1AE7B8968();
      if (v8)
      {
        sub_1AE509ED4();
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    sub_1AE4FE030();
    sub_1AE500FB4();
    __break(1u);
  }
  else
  {
LABEL_24:
    sub_1AE7B8978();
    sub_1AE4FBC3C();
  }
}

void sub_1AE7B6D38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  sub_1AE4F6CF4();
  if (*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16))
  {
    sub_1AE4FBE98();
    sub_1AE4FD46C();
    v3 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      sub_1AE5083BC();
      sub_1AE4F81B0();
      sub_1AE7B8914();
      if (v1)
      {
        sub_1AE509ED4();
        sub_1AE4F67AC();
        sub_1AE4F6718();
        goto LABEL_24;
      }
      v5 = v4;
      sub_1AE4F6718();
      sub_1AE7B8A00();
      if (v6)
        break;
      if (!sub_1AE508CEC() || (sub_1AE7B8948(), !(v8 ^ v6 | v7)))
      {
        sub_1AE5076C0();
        v3 = v9;
      }
      if (*(_QWORD *)(v5 + 16))
      {
        sub_1AE7B8954();
        if (v8 != v6)
          goto LABEL_27;
        sub_1AE50AD88();
        v12 = v12 || v10 >= v11;
        if (!v12)
          goto LABEL_29;
        swift_arrayInitWithCopy();
        if (v2)
        {
          v13 = *(_QWORD *)(v3 + 16);
          v6 = __OFADD__(v13, v2);
          v14 = v13 + v2;
          if (v6)
            goto LABEL_28;
          *(_QWORD *)(v3 + 16) = v14;
        }
      }
      else if (v2)
      {
        goto LABEL_26;
      }
      sub_1AE4F6710();
      sub_1AE7B8A18();
      if (v7)
      {
        sub_1AE509ED4();
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    sub_1AE4FE030();
    sub_1AE500FB4();
    __break(1u);
  }
  else
  {
LABEL_24:
    sub_1AE7B8978();
    sub_1AE4FBC3C();
  }
}

void sub_1AE7B6E90()
{
  sub_1AE4F66E0();
  sub_1AE4F6730();
  sub_1AE506100();
  sub_1AE4F81B8();
  sub_1AE4FC4F8();
}

uint64_t sub_1AE7B6ED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  BOOL v7;
  char v8;

  sub_1AE7B89E0();
  v4 = v4 && v2 == v3;
  if (v4 || (sub_1AE7B8924(), (sub_1AE4F91C4() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    sub_1AE7B89C8();
    v7 = v4 && v0 == v6;
    if (v7 || (sub_1AE505BD4(), (sub_1AE4F91C4() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (v1 == 0xD000000000000013 && v0 == 0x80000001AE985310)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = sub_1AE4F91C4();
      sub_1AE4F6648();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

void sub_1AE7B6FE4()
{
  sub_1AE926EC8();
  sub_1AE926ED4();
  sub_1AE926F10();
  sub_1AE4F6650();
}

uint64_t sub_1AE7B7020(char a1)
{
  if (!a1)
    return sub_1AE505E9C();
  if (a1 == 1)
    return 0x65746E6F4373746BLL;
  return 0xD000000000000013;
}

void sub_1AE7B7080()
{
  sub_1AE926EC8();
  sub_1AE926ED4();
  sub_1AE926F10();
  sub_1AE4F6650();
}

uint64_t sub_1AE7B70B8()
{
  char *v0;

  return sub_1AE7B7020(*v0);
}

uint64_t sub_1AE7B70C0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1AE7B6ED0();
  *a1 = result;
  return result;
}

uint64_t sub_1AE7B70E4()
{
  sub_1AE7B812C();
  return sub_1AE926F94();
}

uint64_t sub_1AE7B710C()
{
  sub_1AE7B812C();
  return sub_1AE926FA0();
}

uint64_t _s20IntelligencePlatform24KTSContextRepresentationC13originContext03ktsF0011destinationF0014graphLifeEventF0ACSayAA019CustomGraphActivityK0VG_A2jA0ljkF0CyAA0m6ObjectF0CyAA12SubgraphViewCAA0O26SynthesisDictionaryMappingVGGSgtcfc_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v10[5];

  *(_OWORD *)(v4 + 40) = 0u;
  *(_QWORD *)(v4 + 72) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  if (a4)
  {
    v10[3] = sub_1AE501548(&qword_1EED98FE0);
    v10[4] = sub_1AE69A9EC();
    v10[0] = a4;
    swift_beginAccess();
    sub_1AE7B8000((uint64_t)v10, v4 + 40);
    swift_endAccess();
  }
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  return v4;
}

void KTSContextAggregateRepresentation.__allocating_init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1AE4F79CC();
  KTSContextAggregateRepresentation.init(from:)(v0, v1, v2, v3, v4, v5, v6, v7);
  sub_1AE4FC4F8();
}

void KTSContextAggregateRepresentation.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  sub_1AE7B7244(a1, (uint64_t)&unk_1EEDA2D98, (uint64_t)sub_1AE7B812C, (uint64_t)&type metadata for KTSContextAggregateRepresentation.CodingKeys, (uint64_t)type metadata accessor for KTSContextAggregateRepresentation, a6, a7, a8, vars0, vars8);
}

void sub_1AE7B7244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void (*v13)(void);
  void (*v14)(void);
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);

  sub_1AE4F67EC();
  v21 = v12;
  v14 = v13;
  v16 = v15;
  v20 = sub_1AE501548(v17);
  MEMORY[0x1E0C80A78](v20);
  sub_1AE4F9024();
  *(_OWORD *)(v10 + 40) = 0u;
  *(_QWORD *)(v10 + 72) = 0;
  *(_OWORD *)(v10 + 56) = 0u;
  sub_1AE4F9858(v16, v16[3]);
  v14();
  sub_1AE926F34();
  if (v11)
  {
    v19 = (uint64_t)v16;
    sub_1AE52FBE8(v10 + 40, &qword_1EEDA2D58);
    v21(v18);
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_1AE501548(&qword_1EED9A9F8);
    sub_1AE7B80A4(&qword_1EEDA2D70, &qword_1EEDA2D78, (uint64_t)&protocol conformance descriptor for CustomGraphActivityEvent, MEMORY[0x1E0DEAF40]);
    sub_1AE926BEC();
    *(_QWORD *)(v10 + 16) = a10;
    sub_1AE7B88D4(1);
    sub_1AE926BEC();
    *(_QWORD *)(v10 + 24) = a10;
    sub_1AE7B88D4(2);
    sub_1AE926BEC();
    v19 = (uint64_t)v16;
    sub_1AE509B88();
    *(_QWORD *)(v10 + 32) = a10;
  }
  _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0(v19);
  sub_1AE4F667C();
}

uint64_t sub_1AE7B7448()
{
  return sub_1AE7B7474();
}

uint64_t sub_1AE7B7474()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  void (*v5)(void);
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1AE4F67EC();
  v19 = v2;
  v20 = v3;
  v5 = v4;
  v16 = v1;
  v6 = v0;
  v8 = v7;
  v10 = sub_1AE501548(v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1AE4F9858(v8, v8[3]);
  v5();
  sub_1AE926F4C();
  v18 = v6[2];
  v17 = 0;
  sub_1AE501548(&qword_1EED9A9F8);
  sub_1AE7B80A4(&qword_1EEDA2D88, &qword_1EEDA2D90, (uint64_t)&protocol conformance descriptor for CustomGraphActivityEvent, MEMORY[0x1E0DEAF10]);
  v14 = v16;
  sub_1AE926CC4();
  if (!v14)
  {
    v18 = v6[3];
    sub_1AE507B54(1);
    v18 = v6[4];
    sub_1AE507B54(2);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void sub_1AE7B75DC()
{
  sub_1AE7B8984();
}

void sub_1AE7B75F8()
{
  sub_1AE92691C();
  sub_1AE925F74();
  type metadata accessor for CustomGraphActivityEvent(0);
  sub_1AE4F6730();
  sub_1AE7B8A38();
}

void sub_1AE7B765C()
{
  sub_1AE4F8344();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AE7B8A30();
  sub_1AE4F6730();
  sub_1AE7B8A38();
}

void sub_1AE7B7698()
{
  sub_1AE4F8344();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AE7B8A40();
  sub_1AE4FB75C();
  sub_1AE7B8A38();
}

uint64_t sub_1AE7B76D0()
{
  uint64_t v1;

  sub_1AE925F74();
  sub_1AE4F6648();
  swift_bridgeObjectRelease();
  sub_1AE4FF0F0();
  return v1;
}

uint64_t _s20IntelligencePlatform24KTSContextRepresentationCfd_0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1AE52FBE8(v0 + 40, &qword_1EEDA2D58);
  return v0;
}

void sub_1AE7B774C()
{
  sub_1AE7B75DC();
}

void sub_1AE7B776C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  KTSContextAggregateRepresentation.__allocating_init(from:)();
  if (!v1)
    *a1 = v3;
}

uint64_t sub_1AE7B7794()
{
  return sub_1AE7B7448();
}

uint64_t sub_1AE7B77B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t result;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD v260[5];
  _QWORD v261[3];
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  v198 = a2;
  v4 = a1 + 32;
  sub_1AE57C238(a1 + 32, (uint64_t)v261);
  swift_bridgeObjectRetain();
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = v4;
  v7 = v2;
  do
  {
    v8 = sub_1AE57C238(v6, (uint64_t)v260);
    sub_1AE5091B0(v8, v9, v10, v11, v12, v13, v14, v15, v172, v177, v182, v187, v192, v198, v203, v208, v214, v221, v226,
      v230,
      v235,
      v240,
      v245,
      v250,
      v255,
      v256,
      v257,
      v258,
      v259,
      v260[0]);
    v16 = sub_1AE501548(&qword_1EED9A828);
    v222 = type metadata accessor for KTSContextRepresentation();
    v17 = sub_1AE506A00();
    if ((_DWORD)v17)
    {
      v25 = *(_QWORD *)(v231 + 16);
      sub_1AE4F6730();
      v17 = sub_1AE50A24C();
    }
    else
    {
      v25 = 0;
    }
    v26 = sub_1AE5091B0(v17, v18, v19, v20, v21, v22, v23, v24, v173, v178, v183, v188, v193, v199, v204, v209, v215, v222, v16,
            v231,
            v236,
            v241,
            v246,
            v251,
            v255,
            v256,
            v257,
            v258,
            v259,
            v260[0]);
    if (!v25)
    {
      sub_1AE7B89A4(v26, v27, v28, v29, v30, v31, v32, v33, v174, v179, v184);
      type metadata accessor for KTSContextAggregateRepresentation();
      if (!sub_1AE50965C())
      {
        v43 = _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v255);
        sub_1AE7B8A10(v43, v44, v45, v46, v47, v48, v49, v50, v174, v179, v184, v189, v194, v200, v205, v210, v216, v223, v227,
          v232,
          v237,
          v242,
          v247,
          v252,
          v255,
          v256,
          v257,
          v258,
          v259,
          v260[0]);
        goto LABEL_14;
      }
      v25 = v264[2];
      sub_1AE4F6730();
      sub_1AE50A24C();
    }
    v34 = _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v255);
    sub_1AE7B8A10(v34, v35, v36, v37, v38, v39, v40, v41, v174, v179, v184, v189, v194, v200, v205, v210, v216, v223, v227,
      v232,
      v237,
      v242,
      v247,
      v252,
      v255,
      v256,
      v257,
      v258,
      v259,
      v260[0]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1AE7B8A78();
      v5 = v51;
    }
    v42 = *(_QWORD *)(v5 + 16);
    if (v42 >= *(_QWORD *)(v5 + 24) >> 1)
    {
      sub_1AE7B8A78();
      v5 = v52;
    }
    *(_QWORD *)(v5 + 16) = v42 + 1;
    *(_QWORD *)(v5 + 8 * v42 + 32) = v25;
LABEL_14:
    v6 += 40;
    --v7;
  }
  while (v7);
  v211 = a1;
  sub_1AE4F66E8();
  v217 = *(_QWORD *)(v5 + 16);
  if (v217)
  {
    sub_1AE4FB764();
    v53 = 0;
    v54 = MEMORY[0x1E0DEE9D8];
    do
    {
      v55 = *(_QWORD *)(v5 + 8 * v53 + 32);
      v56 = *(_QWORD *)(v55 + 16);
      v57 = *(_QWORD *)(v54 + 16);
      if (__OFADD__(v57, v56))
      {
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
        goto LABEL_122;
      }
      sub_1AE4F81B0();
      if (!swift_isUniquelyReferenced_nonNull_native() || v57 + v56 > *(_QWORD *)(v54 + 24) >> 1)
      {
        sub_1AE51B890();
        v54 = v58;
      }
      if (*(_QWORD *)(v55 + 16))
      {
        v59 = (*(_QWORD *)(v54 + 24) >> 1) - *(_QWORD *)(v54 + 16);
        sub_1AE4FBE98();
        if (v59 < v56)
          goto LABEL_124;
        sub_1AE7B89B0();
        sub_1AE50AD88();
        v62 = v62 || v60 >= v61;
        if (!v62)
          goto LABEL_130;
        swift_arrayInitWithCopy();
        if (v56)
        {
          v63 = *(_QWORD *)(v54 + 16);
          v64 = __OFADD__(v63, v56);
          v65 = v63 + v56;
          if (v64)
            goto LABEL_127;
          *(_QWORD *)(v54 + 16) = v65;
        }
      }
      else if (v56)
      {
        goto LABEL_119;
      }
      sub_1AE4F6718();
      ++v53;
    }
    while (v217 != v53);
    sub_1AE4F6710();
  }
  else
  {
    v54 = MEMORY[0x1E0DEE9D8];
  }
  sub_1AE4F6710();
  swift_bridgeObjectRetain();
  v67 = MEMORY[0x1E0DEE9D8];
  v68 = v4;
  v69 = v2;
  while (2)
  {
    v70 = sub_1AE57C238(v68, (uint64_t)v260);
    sub_1AE5091B0(v70, v71, v72, v73, v74, v75, v76, v77, v172, v177, v182, v187, v192, v198, v203, v211, v217, v221, v226,
      v230,
      v235,
      v240,
      v245,
      v250,
      v255,
      v256,
      v257,
      v258,
      v259,
      v260[0]);
    v78 = sub_1AE506A00();
    if ((_DWORD)v78)
    {
      v86 = *(_QWORD *)(v233 + 24);
      sub_1AE4F6730();
      v78 = sub_1AE50A24C();
    }
    else
    {
      v86 = 0;
    }
    v87 = sub_1AE5091B0(v78, v79, v80, v81, v82, v83, v84, v85, v175, v180, v185, v190, v195, v201, v206, v212, v218, v224, v228,
            v233,
            v238,
            v243,
            v248,
            v253,
            v255,
            v256,
            v257,
            v258,
            v259,
            v260[0]);
    if (v86)
    {
LABEL_45:
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v255);
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v260);
      if ((sub_1AE737D44() & 1) == 0)
      {
        sub_1AE7B88F8();
        v67 = v104;
      }
      v95 = *(_QWORD *)(v67 + 16);
      if (v95 >= *(_QWORD *)(v67 + 24) >> 1)
      {
        sub_1AE7B88F8();
        v67 = v105;
      }
      *(_QWORD *)(v67 + 16) = v95 + 1;
      *(_QWORD *)(v67 + 8 * v95 + 32) = v86;
    }
    else
    {
      sub_1AE7B89A4(v87, v88, v89, v90, v91, v92, v93, v94, v172, v177, v182);
      type metadata accessor for KTSContextAggregateRepresentation();
      if (sub_1AE50965C())
      {
        v86 = v264[3];
        sub_1AE4F6730();
        sub_1AE50A24C();
        goto LABEL_45;
      }
      v96 = _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v255);
      sub_1AE7B8A10(v96, v97, v98, v99, v100, v101, v102, v103, v172, v177, v182, v187, v192, v198, v203, v211, v217, v221, v226,
        v230,
        v235,
        v240,
        v245,
        v250,
        v255,
        v256,
        v257,
        v258,
        v259,
        v260[0]);
    }
    v68 += 40;
    if (--v69)
      continue;
    break;
  }
  v196 = v54;
  sub_1AE4F76D8();
  v219 = *(_QWORD *)(v67 + 16);
  if (v219)
  {
    sub_1AE4F81B0();
    v106 = 0;
    v107 = MEMORY[0x1E0DEE9D8];
    do
    {
      v108 = *(_QWORD *)(v67 + 8 * v106 + 32);
      v109 = *(_QWORD *)(v108 + 16);
      v110 = *(_QWORD *)(v107 + 16);
      if (__OFADD__(v110, v109))
        goto LABEL_120;
      sub_1AE4F6730();
      if (!swift_isUniquelyReferenced_nonNull_native() || v110 + v109 > *(_QWORD *)(v107 + 24) >> 1)
      {
        sub_1AE51B890();
        v107 = v111;
      }
      if (*(_QWORD *)(v108 + 16))
      {
        v112 = (*(_QWORD *)(v107 + 24) >> 1) - *(_QWORD *)(v107 + 16);
        sub_1AE4FBE98();
        if (v112 < v109)
          goto LABEL_125;
        sub_1AE7B89B0();
        sub_1AE50AD88();
        if (!v62 && v113 < v114)
          goto LABEL_130;
        swift_arrayInitWithCopy();
        if (v109)
        {
          v116 = *(_QWORD *)(v107 + 16);
          v64 = __OFADD__(v116, v109);
          v117 = v116 + v109;
          if (v64)
            goto LABEL_128;
          *(_QWORD *)(v107 + 16) = v117;
        }
      }
      else if (v109)
      {
        goto LABEL_121;
      }
      sub_1AE4F81B8();
      ++v106;
    }
    while (v219 != v106);
    sub_1AE4F6718();
  }
  else
  {
    v107 = MEMORY[0x1E0DEE9D8];
  }
  sub_1AE4F6718();
  swift_bridgeObjectRetain();
  v118 = MEMORY[0x1E0DEE9D8];
  while (2)
  {
    v119 = sub_1AE57C238(v4, (uint64_t)v260);
    sub_1AE5091B0(v119, v120, v121, v122, v123, v124, v125, v126, v172, v177, v182, v187, v196, v198, v203, v211, v219, v221, v226,
      v230,
      v235,
      v240,
      v245,
      v250,
      v255,
      v256,
      v257,
      v258,
      v259,
      v260[0]);
    v127 = sub_1AE506A00();
    if ((_DWORD)v127)
    {
      v135 = *(_QWORD *)(v234 + 32);
      sub_1AE4F6730();
      v127 = sub_1AE50A24C();
    }
    else
    {
      v135 = 0;
    }
    v136 = sub_1AE5091B0(v127, v128, v129, v130, v131, v132, v133, v134, v176, v181, v186, v191, v197, v202, v207, v213, v220, v225, v229,
             v234,
             v239,
             v244,
             v249,
             v254,
             v255,
             v256,
             v257,
             v258,
             v259,
             v260[0]);
    if (v135)
    {
LABEL_80:
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v255);
      _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v260);
      if ((sub_1AE737D44() & 1) == 0)
      {
        sub_1AE7B88F8();
        v118 = v153;
      }
      v144 = *(_QWORD *)(v118 + 16);
      if (v144 >= *(_QWORD *)(v118 + 24) >> 1)
      {
        sub_1AE7B88F8();
        v118 = v154;
      }
      *(_QWORD *)(v118 + 16) = v144 + 1;
      *(_QWORD *)(v118 + 8 * v144 + 32) = v135;
    }
    else
    {
      sub_1AE7B89A4(v136, v137, v138, v139, v140, v141, v142, v143, v172, v177, v182);
      type metadata accessor for KTSContextAggregateRepresentation();
      if (sub_1AE50965C())
      {
        v135 = v264[4];
        sub_1AE4F6730();
        sub_1AE50A24C();
        goto LABEL_80;
      }
      v145 = _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&v255);
      sub_1AE7B8A10(v145, v146, v147, v148, v149, v150, v151, v152, v172, v177, v182, v187, v196, v198, v203, v211, v219, v221, v226,
        v230,
        v235,
        v240,
        v245,
        v250,
        v255,
        v256,
        v257,
        v258,
        v259,
        v260[0]);
    }
    v4 += 40;
    if (--v2)
      continue;
    break;
  }
  sub_1AE4F76D8();
  v155 = *(_QWORD *)(v118 + 16);
  if (!v155)
  {
    v157 = MEMORY[0x1E0DEE9D8];
LABEL_108:
    sub_1AE4F6718();
    if (v198)
    {
      v168 = v198;
    }
    else
    {
      v169 = v262;
      v170 = v263;
      v66 = (uint64_t)sub_1AE4F9858(v261, v262);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v170 + 24))(v260, v169, v170);
      if (v203)
      {
        sub_1AE4F67AC();
        sub_1AE4F6710();
        sub_1AE4F76D8();
        _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v261);
        return v66;
      }
      sub_1AE501548(&qword_1EEDA2E00);
      sub_1AE501548(&qword_1EED98FE0);
      if (!sub_1AE506A00())
      {
        sub_1AE4F67AC();
        sub_1AE4F6710();
        sub_1AE4F76D8();
        v66 = 0;
        goto LABEL_111;
      }
      v168 = v255;
    }
    type metadata accessor for KTSContextAggregateRepresentation();
    v66 = swift_allocObject();
    swift_retain();
    KTSContextRepresentation.init(originContext:ktsContext:destinationContext:graphLifeEventContext:)(v196, v107, v157, v168);
LABEL_111:
    _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)v261);
    return v66;
  }
  sub_1AE4F81B0();
  v156 = 0;
  v157 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v158 = *(_QWORD *)(v118 + 8 * v156 + 32);
    v159 = *(_QWORD *)(v158 + 16);
    v160 = *(_QWORD *)(v157 + 16);
    if (__OFADD__(v160, v159))
      break;
    swift_bridgeObjectRetain();
    if (!sub_1AE508CEC() || v160 + v159 > *(_QWORD *)(v157 + 24) >> 1)
    {
      sub_1AE51B890();
      v157 = v161;
    }
    if (*(_QWORD *)(v158 + 16))
    {
      v162 = (*(_QWORD *)(v157 + 24) >> 1) - *(_QWORD *)(v157 + 16);
      sub_1AE4FBE98();
      if (v162 < v159)
        goto LABEL_126;
      sub_1AE50AD88();
      if (!v62 && v163 < v164)
        goto LABEL_130;
      swift_arrayInitWithCopy();
      if (v159)
      {
        v166 = *(_QWORD *)(v157 + 16);
        v64 = __OFADD__(v166, v159);
        v167 = v166 + v159;
        if (v64)
          goto LABEL_129;
        *(_QWORD *)(v157 + 16) = v167;
      }
    }
    else if (v159)
    {
      goto LABEL_123;
    }
    swift_bridgeObjectRelease();
    if (v155 == ++v156)
    {
      sub_1AE4F6718();
      goto LABEL_108;
    }
  }
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  sub_1AE4FE030();
  result = sub_1AE500FB4();
  __break(1u);
  return result;
}

double static KTSContextAggregateRepresentation.emptyRepresentation.getter()
{
  uint64_t v0;
  double result;
  uint64_t v2;

  type metadata accessor for KTSContextAggregateRepresentation();
  v0 = sub_1AE7B8A9C();
  result = 0.0;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_QWORD *)(v0 + 72) = 0;
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 32) = v2;
  return result;
}

uint64_t sub_1AE7B7FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1AE501548(&qword_1EEDA2D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1AE7B8000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1AE501548(&qword_1EEDA2D58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1AE7B8048()
{
  unint64_t result;

  result = qword_1EEDA2D68;
  if (!qword_1EEDA2D68)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B684, &type metadata for KTSContextRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2D68);
  }
  return result;
}

uint64_t type metadata accessor for KTSContextRepresentation()
{
  return objc_opt_self();
}

uint64_t sub_1AE7B80A4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    v9 = sub_1AE523CF0(&qword_1EED9A9F8);
    sub_1AE562F54(a2, 255, type metadata accessor for CustomGraphActivityEvent, a3);
    v11 = v10;
    result = MEMORY[0x1AF454B70](a4, v9, &v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1AE7B812C()
{
  unint64_t result;

  result = qword_1EEDA2DA0;
  if (!qword_1EEDA2DA0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B634, &type metadata for KTSContextAggregateRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2DA0);
  }
  return result;
}

uint64_t type metadata accessor for KTSContextAggregateRepresentation()
{
  return objc_opt_self();
}

void sub_1AE7B8188(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1AE562F54(&qword_1EEDA2DB0, a2, (uint64_t (*)(uint64_t))type metadata accessor for KTSContextRepresentation, (uint64_t)&protocol conformance descriptor for KTSContextRepresentation);
  *(_QWORD *)(a1 + 8) = v3;
  sub_1AE562F54(&qword_1EEDA2DB8, v4, (uint64_t (*)(uint64_t))type metadata accessor for KTSContextRepresentation, (uint64_t)&protocol conformance descriptor for KTSContextRepresentation);
  *(_QWORD *)(a1 + 16) = v5;
}

void sub_1AE7B81E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1AE562F54(&qword_1EEDA2DC0, a2, (uint64_t (*)(uint64_t))type metadata accessor for KTSContextAggregateRepresentation, (uint64_t)&protocol conformance descriptor for KTSContextAggregateRepresentation);
  *(_QWORD *)(a1 + 8) = v3;
  sub_1AE562F54(&qword_1EEDA2DC8, v4, (uint64_t (*)(uint64_t))type metadata accessor for KTSContextAggregateRepresentation, (uint64_t)&protocol conformance descriptor for KTSContextAggregateRepresentation);
  *(_QWORD *)(a1 + 16) = v5;
}

uint64_t dispatch thunk of KTSContextRepresentationProtocol.lifeEventContext.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of KTSContextRepresentationProtocol.behaviors.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of KTSContextRepresentationProtocol.originPeople.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of KTSContextRepresentationProtocol.originPlaces.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of KTSContextRepresentationProtocol.originActivities.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of KTSContextRepresentationProtocol.people.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of KTSContextRepresentationProtocol.places.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of KTSContextRepresentationProtocol.activities.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of KTSContextRepresentationProtocol.destinationPeople.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of KTSContextRepresentationProtocol.destinationPlaces.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of KTSContextRepresentationProtocol.destinationActivities.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of KTSContextRepresentationProtocol.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t method lookup function for KTSContextRepresentation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KTSContextRepresentation.lifeEventContext.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of KTSContextRepresentation.behaviors.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of KTSContextRepresentation.originPeople.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of KTSContextRepresentation.originPlaces.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of KTSContextRepresentation.originActivities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of KTSContextRepresentation.people.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of KTSContextRepresentation.places.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of KTSContextRepresentation.activities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of KTSContextRepresentation.destinationPeople.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of KTSContextRepresentation.destinationPlaces.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of KTSContextRepresentation.destinationActivities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of KTSContextRepresentation.__allocating_init(originContext:ktsContext:destinationContext:graphLifeEventContext:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of KTSContextRepresentation.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t dispatch thunk of KTSContextRepresentation.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of KTSContextRepresentation.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t method lookup function for KTSContextAggregateRepresentation()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for KTSContextAggregateRepresentation.CodingKeys()
{
  return &type metadata for KTSContextAggregateRepresentation.CodingKeys;
}

uint64_t _s20IntelligencePlatform33KTSContextAggregateRepresentationC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1AE7B8544 + 4 * byte_1AE95B2F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1AE7B8578 + 4 * byte_1AE95B2F0[v4]))();
}

uint64_t sub_1AE7B8578(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7B8580(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1AE7B8588);
  return result;
}

uint64_t sub_1AE7B8594(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1AE7B859CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1AE7B85A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1AE7B85A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KTSContextRepresentation.CodingKeys()
{
  return &type metadata for KTSContextRepresentation.CodingKeys;
}

unint64_t sub_1AE7B85C8()
{
  unint64_t result;

  result = qword_1EEDA2DD0;
  if (!qword_1EEDA2DD0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B554, &type metadata for KTSContextRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2DD0);
  }
  return result;
}

unint64_t sub_1AE7B8608()
{
  unint64_t result;

  result = qword_1EEDA2DD8;
  if (!qword_1EEDA2DD8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B60C, &type metadata for KTSContextAggregateRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2DD8);
  }
  return result;
}

unint64_t sub_1AE7B8648()
{
  unint64_t result;

  result = qword_1EEDA2DE0;
  if (!qword_1EEDA2DE0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B57C, &type metadata for KTSContextAggregateRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2DE0);
  }
  return result;
}

unint64_t sub_1AE7B8688()
{
  unint64_t result;

  result = qword_1EEDA2DE8;
  if (!qword_1EEDA2DE8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B5A4, &type metadata for KTSContextAggregateRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2DE8);
  }
  return result;
}

unint64_t sub_1AE7B86C8()
{
  unint64_t result;

  result = qword_1EEDA2DF0;
  if (!qword_1EEDA2DF0)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B4C4, &type metadata for KTSContextRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2DF0);
  }
  return result;
}

unint64_t sub_1AE7B8708()
{
  unint64_t result;

  result = qword_1EEDA2DF8;
  if (!qword_1EEDA2DF8)
  {
    result = MEMORY[0x1AF454B70](&unk_1AE95B4EC, &type metadata for KTSContextRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEDA2DF8);
  }
  return result;
}

void sub_1AE7B8744(void *a1)
{
  bzero(a1, 0x190uLL);
}

uint64_t sub_1AE7B874C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1AE501548(&qword_1EED9F9E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of KTSContextAggregateRepresentation.__allocating_init(from:)()
{
  return dispatch thunk of KTSContextRepresentation.__allocating_init(from:)();
}

uint64_t dispatch thunk of KTSContextAggregateRepresentation.lifeEventContext.getter()
{
  return dispatch thunk of KTSContextRepresentation.lifeEventContext.getter();
}

uint64_t dispatch thunk of KTSContextAggregateRepresentation.encode(to:)()
{
  return dispatch thunk of KTSContextRepresentation.encode(to:)();
}

uint64_t dispatch thunk of KTSContextAggregateRepresentation.behaviors.getter()
{
  return dispatch thunk of KTSContextRepresentation.behaviors.getter();
}

uint64_t dispatch thunk of KTSContextAggregateRepresentation.originPeople.getter()
{
  return dispatch thunk of KTSContextRepresentation.originPeople.getter();
}

uint64_t dispatch thunk of KTSContextAggregateRepresentation.originPlaces.getter()
{
  return dispatch thunk of KTSContextRepresentation.originPlaces.getter();
}

uint64_t dispatch thunk of KTSContextAggregateRepresentation.originActivities.getter()
{
  return dispatch thunk of KTSContextRepresentation.originActivities.getter();
}

uint64_t dispatch thunk of KTSContextAggregateRepresentation.people.getter()
{
  return dispatch thunk of KTSContextRepresentation.people.getter();
}

uint64_t dispatch thunk of KTSContextAggregateRepresentation.places.getter()
{
  return dispatch thunk of KTSContextRepresentation.places.getter();
}

uint64_t dispatch thunk of KTSContextAggregateRepresentation.activities.getter()
{
  return dispatch thunk of KTSContextRepresentation.activities.getter();
}

uint64_t dispatch thunk of KTSContextAggregateRepresentation.destinationPeople.getter()
{
  return dispatch thunk of KTSContextRepresentation.destinationPeople.getter();
}

uint64_t dispatch thunk of KTSContextAggregateRepresentation.destinationPlaces.getter()
{
  return dispatch thunk of KTSContextRepresentation.destinationPlaces.getter();
}

uint64_t dispatch thunk of KTSContextAggregateRepresentation.destinationActivities.getter()
{
  return dispatch thunk of KTSContextRepresentation.destinationActivities.getter();
}

uint64_t sub_1AE7B88AC@<X0>(uint64_t a1@<X8>)
{
  return sub_1AE7B6258(a1);
}

uint64_t sub_1AE7B88C0()
{
  return type metadata accessor for CustomGraphPerson(0);
}

uint64_t sub_1AE7B88D4@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 81) = a1;
  return v1;
}

void sub_1AE7B88F8()
{
  sub_1AE51B8B8();
}

void sub_1AE7B8904()
{
  sub_1AE7B5540();
}

void sub_1AE7B8914()
{
  sub_1AE7B583C();
}

uint64_t sub_1AE7B8924()
{
  return 0x6F436E696769726FLL;
}

uint64_t sub_1AE7B8978()
{
  uint64_t v0;

  return v0;
}

void sub_1AE7B8984()
{
  sub_1AE7B75F8();
}

void sub_1AE7B898C()
{
  sub_1AE51B7E0();
}

void sub_1AE7B8998()
{
  sub_1AE51B8A4();
}

uint64_t sub_1AE7B89A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  return sub_1AE57C238((uint64_t)va1, (uint64_t)va);
}

void sub_1AE7B89F8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_1AE73D7CC(a1, a2, v2);
}

uint64_t sub_1AE7B8A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  return _s20IntelligencePlatform28InferenceServiceInstanceEnumOwxx_0((uint64_t)&a30);
}

uint64_t sub_1AE7B8A28()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_1AE7B8A30()
{
  return sub_1AE925F74();
}

void sub_1AE7B8A38()
{
  JUMPOUT(0x1AF453400);
}

uint64_t sub_1AE7B8A40()
{
  return sub_1AE925F74();
}

uint64_t sub_1AE7B8A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  return sub_1AE7B7FB8(v7, (uint64_t)va);
}

void sub_1AE7B8A78()
{
  sub_1AE51B8B8();
}

void sub_1AE7B8A84()
{
  sub_1AE51B7E0();
}

_QWORD *sub_1AE7B8A90()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1AE4F9858((_QWORD *)(v1 - 120), v0);
}

uint64_t sub_1AE7B8A9C()
{
  return swift_allocObject();
}

double sub_1AE7B8AA8(unint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  BOOL v21;
  _QWORD v23[2];
  unint64_t v24;

  v4 = v3;
  v8 = sub_1AE501548(&qword_1EED9E350);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_12;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v12; v12 = sub_1AE926AD8())
  {
    v23[1] = v4;
    v24 = a1 & 0xC000000000000001;
    v4 = 4;
    v13 = a1;
    while (1)
    {
      if (v24)
      {
        v14 = MEMORY[0x1AF453B80](v4 - 4, a1);
      }
      else
      {
        v14 = *(_QWORD *)(a1 + 8 * v4);
        swift_retain();
      }
      a1 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v15 = (double *)(v14 + OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_score);
      swift_beginAccess();
      v16 = *v15;
      v17 = v14 + OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_distanceInMeters;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v17, v8);
      sub_1AE92445C();
      v19 = v18;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_release();
      v20 = a3 * a2;
      a3 = a3 + v19;
      a2 = v20 / a3 + v16 * v19 / a3;
      ++v4;
      v21 = a1 == v12;
      a1 = v13;
      if (v21)
        goto LABEL_13;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
LABEL_13:
  swift_bridgeObjectRelease();
  return a2;
}

void sub_1AE7B8C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1AE4F67EC();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = sub_1AE501548((uint64_t *)&unk_1EED9E340);
  sub_1AE4FB8D0();
  MEMORY[0x1E0C80A78](v8);
  sub_1AE4F666C();
  v11 = v10 - v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v6, v4, v7);
  v12 = *(_QWORD *)(v2 + 16);
  if (v12)
  {
    v13 = v2 + ((*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80));
    v14 = *(_QWORD *)(v0 + 72);
    sub_1AE524254(0, &qword_1EED99698);
    sub_1AE4F66CC();
    do
    {
      sub_1AE924468();
      sub_1AE4FB7D0(v6, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v6, v11, v7);
      v13 += v14;
      --v12;
    }
    while (v12);
    sub_1AE4F9038();
  }
  sub_1AE4F667C();
}

uint64_t sub_1AE7B8D94(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = (uint64_t *)(a2 + 32);
    while (1)
    {
      v4 = *v3++;
      v5 = __OFADD__(result, v4);
      result += v4;
      if (v5)
        break;
      if (!--v2)
        return result;
    }
    __break(1u);
  }
  return result;
}

void sub_1AE7B8DBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = sub_1AE501548(&qword_1EED9AA50);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (uint64_t *)((char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v32 = v1;
    v39 = MEMORY[0x1E0DEE9D8];
    sub_1AE521E4C();
    v7 = v39;
    v8 = sub_1AE64A338(a1);
    if ((v8 & 0x8000000000000000) == 0)
    {
      v10 = v8;
      if (v8 < 1 << *(_BYTE *)(a1 + 32))
      {
        v11 = a1 + 64;
        v33 = a1 + 64;
        while ((*(_QWORD *)(v11 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
        {
          if ((_DWORD)v9 != *(_DWORD *)(a1 + 36))
            goto LABEL_18;
          v12 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v10);
          v38 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
          v13 = *(int *)(v35 + 48);
          v36 = v9;
          v37 = v13;
          v14 = v12;
          objc_msgSend(v14, sel_coordinate);
          v16 = v15;
          objc_msgSend(v14, sel_coordinate);
          v18 = v17;
          objc_msgSend(v14, sel_altitude);
          v20 = v19;
          objc_msgSend(v14, sel_horizontalAccuracy);
          v22 = v21;
          objc_msgSend(v14, sel_verticalAccuracy);
          v24 = v23;
          objc_msgSend(v14, sel_course);
          v26 = v25;
          objc_msgSend(v14, sel_speed);
          v28 = v27;
          v29 = objc_msgSend(v14, sel_timestamp);
          type metadata accessor for CodableLocation();
          sub_1AE9248A0();

          *v5 = v18;
          v5[1] = v16;
          v5[2] = v20;
          v5[3] = v22;
          v5[5] = v28;
          v5[6] = v26;
          v5[4] = v24;
          *(_QWORD *)((char *)v5 + v37) = v38;
          v39 = v7;
          v30 = *(_QWORD *)(v7 + 16);
          if (v30 >= *(_QWORD *)(v7 + 24) >> 1)
          {
            sub_1AE521E4C();
            v7 = v39;
          }
          *(_QWORD *)(v7 + 16) = v30 + 1;
          sub_1AE64DBA0((uint64_t)v5, v7+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v30, &qword_1EED9AA50);
          if ((uint64_t)v10 >= -(-1 << *(_BYTE *)(a1 + 32)))
            goto LABEL_19;
          v11 = v33;
          if ((*(_QWORD *)(v33 + 8 * (v10 >> 6)) & (1 << v10)) == 0)
            goto LABEL_20;
          if ((_DWORD)v36 != *(_DWORD *)(a1 + 36))
            goto LABEL_21;
          v31 = sub_1AE926850();
          if (!--v6)
            return;
          v10 = v31;
          if ((v31 & 0x8000000000000000) == 0)
          {
            v9 = *(unsigned int *)(a1 + 36);
            if (v31 < 1 << *(_BYTE *)(a1 + 32))
              continue;
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void sub_1AE7B90D8(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    sub_1AE521A0C();
    if (v2 < 0)
    {
      __break(1u);
      return;
    }
    v3 = 0;
    while (v2 != v3)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v4 = MEMORY[0x1AF453B80](v3, a1);
      }
      else
      {
        v4 = *(_QWORD *)(a1 + 8 * v3 + 32);
        swift_retain();
      }
      v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_score);
      swift_beginAccess();
      v6 = *v5;
      swift_release();
      v7 = *(_QWORD *)(v8 + 16);
      if (v7 >= *(_QWORD *)(v8 + 24) >> 1)
        sub_1AE521A0C();
      ++v3;
      *(_QWORD *)(v8 + 16) = v7 + 1;
      *(_QWORD *)(v8 + 8 * v7 + 32) = v6;
      if (v2 == v3)
        return;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = sub_1AE926AD8();
    swift_bridgeObjectRelease();
  }
}

void sub_1AE7B9254()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  sub_1AE4F67EC();
  v15 = v0;
  v2 = v1;
  v3 = sub_1AE501548((uint64_t *)&unk_1EED9E340);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  sub_1AE4F666C();
  v7 = v6 - v5;
  if (v2 >> 62)
    goto LABEL_15;
  v8 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v8)
    {
LABEL_13:
      sub_1AE4FD264();
      sub_1AE4F667C();
      return;
    }
    v16 = MEMORY[0x1E0DEE9D8];
    sub_1AE7D3754();
    sub_1AE521F84();
    if (v8 < 0)
      break;
    v9 = 0;
    v14 = v2 & 0xC000000000000001;
    v10 = v2;
    while (v8 != v9)
    {
      if (v14)
        v2 = MEMORY[0x1AF453B80](v9, v2);
      else
        sub_1AE7D3748();
      v11 = v2 + *v15;
      sub_1AE4F9094();
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16))(v7, v11, v3);
      swift_release();
      v12 = *(_QWORD *)(v16 + 16);
      if (v12 >= *(_QWORD *)(v16 + 24) >> 1)
        sub_1AE521F84();
      ++v9;
      *(_QWORD *)(v16 + 16) = v12 + 1;
      sub_1AE7D3538();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v13 + *(_QWORD *)(v4 + 72) * v12, v7, v3);
      v2 = v10;
      if (v8 == v9)
        goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v8 = sub_1AE507F58();
    swift_bridgeObjectRelease();
  }
  __break(1u);
}

void sub_1AE7B9404(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a1 >> 62)
    goto LABEL_15;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v5)
    {
LABEL_13:
      sub_1AE4FD264();
      return;
    }
    v12 = MEMORY[0x1E0DEE9D8];
    sub_1AE7D3754();
    sub_1AE521A74();
    if (v5 < 0)
      break;
    v6 = 0;
    while (v5 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v7 = sub_1AE7D2D18();
        v8 = MEMORY[0x1AF453B80](v7);
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 8 * v6 + 32);
        swift_retain();
      }
      v9 = (uint64_t *)(v8 + *a3);
      sub_1AE4F9094();
      v10 = *v9;
      swift_release();
      v11 = *(_QWORD *)(v12 + 16);
      if (v11 >= *(_QWORD *)(v12 + 24) >> 1)
        sub_1AE521A74();
      ++v6;
      *(_QWORD *)(v12 + 16) = v11 + 1;
      *(_QWORD *)(v12 + 8 * v11 + 32) = v10;
      if (v5 == v6)
        goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    sub_1AE4F6708();
    v5 = sub_1AE507F58();
    sub_1AE4F76D8();
  }
  __break(1u);
}

uint64_t sub_1AE7B9560(unint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void (*v16)(BOOL, unint64_t, uint64_t);
  uint64_t v17;

  if (a1 >> 62)
    goto LABEL_15;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v8)
      return sub_1AE4FD264();
    v17 = MEMORY[0x1E0DEE9D8];
    v9 = sub_1AE7D3754();
    result = a3(v9);
    if (v8 < 0)
      break;
    v16 = (void (*)(BOOL, unint64_t, uint64_t))a3;
    v11 = 0;
    a3 = (uint64_t (*)(uint64_t))(a1 & 0xC000000000000001);
    while (v8 != v11)
    {
      if (a3)
        v4 = MEMORY[0x1AF453B80](v11, a1);
      else
        sub_1AE7D3748();
      v12 = (uint64_t *)(v4 + *a4);
      sub_1AE4F9094();
      v13 = *v12;
      sub_1AE4FB764();
      swift_release();
      v15 = *(_QWORD *)(v17 + 16);
      v14 = *(_QWORD *)(v17 + 24);
      v4 = v15 + 1;
      if (v15 >= v14 >> 1)
        v16(v14 > 1, v15 + 1, 1);
      ++v11;
      *(_QWORD *)(v17 + 16) = v4;
      *(_QWORD *)(v17 + 8 * v15 + 32) = v13;
      if (v8 == v11)
        return sub_1AE4FD264();
    }
    __break(1u);
LABEL_15:
    sub_1AE4F6804();
    v8 = sub_1AE507F58();
    sub_1AE4F67AC();
  }
  __break(1u);
  return result;
}

uint64_t sub_1AE7B96C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    sub_1AE521E80();
    v4 = v12;
    for (i = (uint64_t *)(a1 + 32); ; ++i)
    {
      v10 = *i;
      swift_bridgeObjectRetain();
      sub_1AE7CABD0(&v10, &v11);
      if (v2)
        break;
      v2 = 0;
      swift_bridgeObjectRelease();
      v7 = v11;
      v12 = v4;
      v8 = *(_QWORD *)(v4 + 16);
      if (v8 >= *(_QWORD *)(v4 + 24) >> 1)
      {
        sub_1AE521E80();
        v4 = v12;
      }
      *(_QWORD *)(v4 + 16) = v8 + 1;
      *(_QWORD *)(v4 + 8 * v8 + 32) = v7;
      if (!--v3)
        return v4;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t sub_1AE7B97D4(unint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);

  if (a1 >> 62)
    goto LABEL_15;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_1AE4F66CC();
  for (; v5; v5 = sub_1AE507F58())
  {
    v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a3;
    a3 = a1 & 0xC000000000000001;
    v6 = MEMORY[0x1E0DEE9D8];
    for (i = 4; ; ++i)
    {
      if (a3)
      {
        v8 = MEMORY[0x1AF453B80](i - 4, a1);
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 8 * i);
        swift_retain();
      }
      v9 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v10 = (uint64_t *)(v8 + *a2);
      sub_1AE4F9094();
      v11 = *v10;
      v12 = (uint64_t *)(v8 + OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_score);
      sub_1AE4F9094();
      v13 = *v12;
      sub_1AE4F67A4();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_1AE7D3400(0, *(_QWORD *)(v6 + 16) + 1, v14, v15, v16, v17, v18, v19, v24, v25);
      v21 = *(_QWORD *)(v6 + 16);
      v20 = *(_QWORD *)(v6 + 24);
      if (v21 >= v20 >> 1)
        v6 = sub_1AE7D3400(v20 > 1, v21 + 1, v14, v15, v16, v17, v18, v19, v24, v25);
      *(_QWORD *)(v6 + 16) = v21 + 1;
      v22 = v6 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v11;
      *(_QWORD *)(v22 + 40) = v13;
      if (v9 == v5)
      {
        sub_1AE4F9038();
        return v6;
      }
    }
    __break(1u);
LABEL_15:
    sub_1AE4F66CC();
  }
  sub_1AE4F9038();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1AE7B9978(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = type metadata accessor for CodableLocation();
  v32 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v27 - v6;
  if (a1 >> 62)
    goto LABEL_23;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; v8 = sub_1AE926AD8())
  {
    v9 = 0;
    v10 = a1 & 0xC000000000000001;
    v28 = a1 + 32;
    v11 = MEMORY[0x1E0DEE9D8];
    v30 = v8;
    v31 = a1;
    v29 = a1 & 0xC000000000000001;
    while (1)
    {
      if (v10)
      {
        v12 = MEMORY[0x1AF453B80](v9, a1);
      }
      else
      {
        v12 = *(_QWORD *)(v28 + 8 * v9);
        swift_retain();
      }
      if (__OFADD__(v9++, 1))
        break;
      v36 = v11;
      v14 = (uint64_t *)(v12 + OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_route);
      swift_beginAccess();
      v15 = *v14;
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 16);
        if (v16)
        {
          v34 = v12;
          v35 = v9;
          v37 = MEMORY[0x1E0DEE9D8];
          swift_bridgeObjectRetain();
          sub_1AE9269DC();
          sub_1AE524254(0, &qword_1EED9A668);
          v17 = *(unsigned __int8 *)(v32 + 80);
          v33 = v15;
          v18 = v15 + ((v17 + 32) & ~v17);
          v19 = *(_QWORD *)(v32 + 72);
          do
          {
            sub_1AE640264(v18, (uint64_t)v7);
            sub_1AE640264((uint64_t)v7, (uint64_t)v5);
            CLLocation.init(model:)((uint64_t)v5);
            sub_1AE57B7C0((uint64_t)v7);
            sub_1AE9269B8();
            sub_1AE9269E8();
            sub_1AE9269F4();
            sub_1AE9269C4();
            v18 += v19;
            --v16;
          }
          while (v16);
          v20 = v37;
          swift_release();
          swift_bridgeObjectRelease();
          v8 = v30;
          a1 = v31;
          v9 = v35;
          v10 = v29;
        }
        else
        {
          swift_release();
          v20 = MEMORY[0x1E0DEE9D8];
        }
        v21 = v36;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1AE51B8CC();
          v21 = v24;
        }
        v22 = *(_QWORD *)(v21 + 16);
        v23 = v21;
        if (v22 >= *(_QWORD *)(v21 + 24) >> 1)
        {
          sub_1AE51B8CC();
          v23 = v25;
        }
        *(_QWORD *)(v23 + 16) = v22 + 1;
        v11 = v23;
        *(_QWORD *)(v23 + 8 * v22 + 32) = v20;
      }
      else
      {
        swift_release();
        v11 = v36;
      }
      if (v9 == v8)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

void sub_1AE7B9C80(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(_QWORD *__return_ptr, uint64_t), uint64_t (*a5)(_QWORD), uint64_t a6, double a7)
{
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  double v35;
  double v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(_QWORD);
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD v69[6];

  v55 = a6;
  v61 = a5;
  v68 = a2;
  v65 = sub_1AE501548(&qword_1EED9E350);
  sub_1AE4FB8D0();
  MEMORY[0x1E0C80A78](v13);
  sub_1AE4F9024();
  v59 = v14;
  v67 = a3;
  v63 = sub_1AE501548(a3);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v15);
  sub_1AE4F686C();
  v57 = v16;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v17);
  sub_1AE4F6A60();
  v56 = v18;
  sub_1AE4F9350();
  MEMORY[0x1E0C80A78](v19);
  sub_1AE6906A8();
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v52 - v21;
  a4(v69, a1);
  v64 = v69[0];
  v60 = v69[1];
  v66 = v69[3];
  v23 = v69[4];
  v62 = (unint64_t)(v69[2] + 64) >> 6;
  sub_1AE4F66CC();
  v58 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  if (v23)
  {
LABEL_3:
    v24 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    v25 = v24 | (v66 << 6);
    goto LABEL_20;
  }
  while (1)
  {
    v26 = v66 + 1;
    if (__OFADD__(v66, 1))
    {
      __break(1u);
      return;
    }
    if (v26 >= v62)
      goto LABEL_30;
    v27 = *(_QWORD *)(v60 + 8 * v26);
    v28 = v66 + 1;
    if (!v27)
    {
      v28 = v66 + 2;
      if (v66 + 2 >= v62)
        goto LABEL_30;
      v27 = *(_QWORD *)(v60 + 8 * v28);
      if (!v27)
      {
        v28 = v66 + 3;
        if (v66 + 3 >= v62)
          goto LABEL_30;
        v27 = *(_QWORD *)(v60 + 8 * v28);
        if (!v27)
        {
          v28 = v66 + 4;
          if (v66 + 4 >= v62)
            goto LABEL_30;
          v27 = *(_QWORD *)(v60 + 8 * v28);
          if (!v27)
          {
            v28 = v66 + 5;
            if (v66 + 5 >= v62)
              goto LABEL_30;
            v27 = *(_QWORD *)(v60 + 8 * v28);
            if (!v27)
              break;
          }
        }
      }
    }
LABEL_19:
    v23 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v28 << 6);
    v66 = v28;
LABEL_20:
    v30 = *(_BYTE *)(*(_QWORD *)(v64 + 48) + v25);
    v31 = *(_QWORD *)(v8 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v8 + 16))(&v22[*(int *)(v63 + 48)], *(_QWORD *)(v64 + 56) + v31 * v25, v65);
    *v22 = v30;
    sub_1AE64DBA0((uint64_t)v22, (uint64_t)v7, v67);
    if (*(_QWORD *)(v68 + 16))
    {
      v32 = v61(*v7);
      if ((v33 & 1) != 0)
      {
        v34 = v8;
        sub_1AE7D3114(v59, *(_QWORD *)(v68 + 56) + v32 * v31);
        sub_1AE92445C();
        v36 = v35;
        v37 = *(void (**)(uint64_t))(v8 + 8);
        v38 = sub_1AE7D352C();
        v37(v38);
        if (v36 != 0.0)
        {
          v39 = v63;
          v40 = *(int *)(v63 + 48);
          v41 = (uint64_t)&v56[v40];
          v53 = &v56[v40];
          v52 = &v7[v40];
          v42 = *v7;
          *v56 = v42;
          v43 = v65;
          sub_1AE7D3114(v41, (uint64_t)&v7[v40]);
          v44 = (uint64_t)&v57[*(int *)(v39 + 48)];
          v54 = v42;
          *v57 = v42;
          sub_1AE7D3114(v44, (uint64_t)v52);
          sub_1AE92445C();
          v46 = v45;
          v47 = sub_1AE7D352C();
          v37(v47);
          ((void (*)(_BYTE *, uint64_t))v37)(v53, v43);
          sub_1AE7D3818();
          v48 = v58;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v48 = sub_1AE7D3174(0, *(_QWORD *)(v48 + 16) + 1);
          v50 = *(_QWORD *)(v48 + 16);
          v49 = *(_QWORD *)(v48 + 24);
          v8 = v34;
          if (v50 >= v49 >> 1)
            v48 = sub_1AE7D3174(v49 > 1, v50 + 1);
          *(_QWORD *)(v48 + 16) = v50 + 1;
          v58 = v48;
          v51 = v48 + 16 * v50;
          *(_BYTE *)(v51 + 32) = v54;
          *(double *)(v51 + 40) = v46 * a7 / v36;
          goto LABEL_2;
        }
      }
    }
    sub_1AE7D3818();
    if (v23)
      goto LABEL_3;
  }
  v29 = v66 + 6;
  while (v29 < v62)
  {
    v27 = *(_QWORD *)(v60 + 8 * v29++);
    if (v27)
    {
      v28 = v29 - 1;
      goto LABEL_19;
    }
  }
LABEL_30:
  sub_1AE4F6728();
  swift_release();
}

uint64_t sub_1AE7BA094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = (double *)(a2 + 40);
    do
    {
      v8 = *v7;
      v9 = *((_QWORD *)v7 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1AE7B9C80(v9, a3, &qword_1EEDA3210, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1AE64A2FC, sub_1AE536F4C, (uint64_t)sub_1AE51B9CC, v8);
      sub_1AE62C1D8();
      a1 = sub_1AE7BB524(v10, a1);
      swift_bridgeObjectRelease();
      v7 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AE7BA1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = (double *)(a2 + 40);
    do
    {
      v8 = *v7;
      v9 = *((_QWORD *)v7 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1AE7B9C80(v9, a3, &qword_1EEDA3208, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1AE64A2FC, sub_1AE536F4C, (uint64_t)sub_1AE51B9E8, v8);
      sub_1AE62C1FC(v10);
      a1 = sub_1AE7BB4AC(v11, a1, (uint64_t)sub_1AE7D2610, (void (*)(uint64_t))sub_1AE7D0B8C);
      swift_bridgeObjectRelease();
      v7 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AE7BA2D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = (double *)(a2 + 40);
    do
    {
      v8 = *v7;
      v9 = *((_QWORD *)v7 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1AE7B9C80(v9, a3, &qword_1EEDA3200, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1AE64A2FC, sub_1AE536F4C, (uint64_t)sub_1AE51BA04, v8);
      sub_1AE62C210(v10);
      a1 = sub_1AE7BB4AC(v11, a1, (uint64_t)sub_1AE7D26FC, (void (*)(uint64_t))sub_1AE7D0D88);
      swift_bridgeObjectRelease();
      v7 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AE7BA3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = (double *)(a2 + 40);
    do
    {
      v8 = *v7;
      v9 = *((_QWORD *)v7 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1AE7B9C80(v9, a3, &qword_1EEDA31F8, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1AE64A2FC, sub_1AE536F4C, (uint64_t)sub_1AE51BA20, v8);
      sub_1AE62C224(v10);
      a1 = sub_1AE7BB4AC(v11, a1, (uint64_t)sub_1AE7D26FC, (void (*)(uint64_t))sub_1AE7D0F84);
      swift_bridgeObjectRelease();
      v7 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AE7BA524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = (double *)(a2 + 40);
    do
    {
      v8 = *v7;
      v9 = *((_QWORD *)v7 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1AE7B9C80(v9, a3, &qword_1EEDA31F0, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1AE64A2FC, sub_1AE536F4C, (uint64_t)sub_1AE51BA3C, v8);
      sub_1AE62C238(v10);
      a1 = sub_1AE7BB4AC(v11, a1, (uint64_t)sub_1AE7D26FC, (void (*)(uint64_t))sub_1AE7D1180);
      swift_bridgeObjectRelease();
      v7 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AE7BA64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = (double *)(a2 + 40);
    do
    {
      v8 = *v7;
      v9 = *((_QWORD *)v7 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1AE7B9C80(v9, a3, &qword_1EEDA31E8, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1AE64A2FC, sub_1AE536F4C, (uint64_t)sub_1AE51BA58, v8);
      sub_1AE62C24C();
      a1 = sub_1AE7BB5CC(v10, a1);
      swift_bridgeObjectRelease();
      v7 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1AE7BA764(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t result;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  v44 = a1;
  v52 = sub_1AE501548(&qword_1EED9E350);
  v50 = *(_QWORD *)(v52 - 8);
  v4 = MEMORY[0x1E0C80A78](v52);
  v48 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v47 = (char *)v41 - v7;
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v41 - v8;
  v10 = sub_1AE501548(&qword_1EEDA31C8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (_QWORD *)((char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = *(_QWORD *)(a2 + 16);
  if (!v43)
    return (uint64_t)v44;
  v41[2] = v2;
  v42 = a2 + 32;
  v41[1] = a2;
  swift_bridgeObjectRetain();
  v13 = 0;
  v49 = v12;
  while (1)
  {
    v46 = v13;
    v14 = *(_QWORD *)(v42 + 8 * v13);
    swift_bridgeObjectRetain_n();
    v15 = v44;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v54 = v15;
    sub_1AE7BB678(v14, (uint64_t)sub_1AE7D249C, 0, &v53);
    v45 = v14;
    swift_bridgeObjectRetain();
    sub_1AE7BC17C();
    v17 = sub_1AE501548(&qword_1EED9AA38);
    if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v12, 1, v17) != 1)
      break;
LABEL_4:
    v13 = v46 + 1;
    swift_bridgeObjectRelease();
    sub_1AE592EFC();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13 == v43)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v44;
    }
  }
  v51 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  v18 = v44;
  while (1)
  {
    v20 = *v12;
    v19 = v12[1];
    v21 = v9;
    v51(v9, (char *)v12 + *(int *)(v17 + 48), v52);
    v23 = sub_1AE536EDC(v20, v19);
    v24 = v18[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      break;
    v27 = v22;
    if (v18[3] >= v26)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1AE501548(&qword_1EEDA31D0);
        sub_1AE926A60();
      }
    }
    else
    {
      sub_1AE6373F4(v26, isUniquelyReferenced_nonNull_native & 1);
      v28 = sub_1AE536EDC(v20, v19);
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_22;
      v23 = v28;
    }
    v18 = v54;
    if ((v27 & 1) != 0)
    {
      v30 = v50;
      v31 = *(_QWORD *)(v50 + 72) * v23;
      v32 = v48;
      v33 = v52;
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v48, v54[7] + v31, v52);
      sub_1AE524254(0, &qword_1EED996A0);
      v34 = v47;
      v9 = v21;
      sub_1AE924468();
      v35 = *(void (**)(char *, uint64_t))(v30 + 8);
      v35(v32, v33);
      v35(v21, v33);
      swift_bridgeObjectRelease();
      v18 = v54;
      (*(void (**)(unint64_t, char *, uint64_t))(v30 + 40))(v54[7] + v31, v34, v33);
    }
    else
    {
      v54[(v23 >> 6) + 8] |= 1 << v23;
      v36 = (uint64_t *)(v18[6] + 16 * v23);
      *v36 = v20;
      v36[1] = v19;
      v9 = v21;
      v51((char *)(v18[7] + *(_QWORD *)(v50 + 72) * v23), v21, v52);
      v37 = v18[2];
      v38 = __OFADD__(v37, 1);
      v39 = v37 + 1;
      if (v38)
        goto LABEL_21;
      v18[2] = v39;
    }
    v12 = v49;
    sub_1AE7BC17C();
    v17 = sub_1AE501548(&qword_1EED9AA38);
    isUniquelyReferenced_nonNull_native = 1;
    if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v12, 1, v17) == 1)
      goto LABEL_4;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = sub_1AE926DE4();
  __break(1u);
  return result;
}

uint64_t sub_1AE7BABCC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v5 = v4;
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
    return a1;
  swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    sub_1AE4FB930();
    sub_1AE508CEC();
    v10 = sub_1AE7D2D18();
    a4(v10);
    if (v5)
      break;
    v5 = 0;
    ++v9;
    sub_1AE4FDCF0();
    if (v7 == v9)
    {
      sub_1AE4F81B8();
      return a1;
    }
  }
  sub_1AE4FDCF0();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1AE7BAC94(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t result;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;

  v51 = sub_1AE501548(&qword_1EED9A850);
  v49 = *(_QWORD *)(v51 - 8);
  v5 = MEMORY[0x1E0C80A78](v51);
  v47 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v46 = (char *)v41 - v8;
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v41 - v9;
  v11 = sub_1AE501548(&qword_1EEDA3198);
  MEMORY[0x1E0C80A78](v11);
  v13 = (_QWORD *)((char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = *(_QWORD *)(a2 + 16);
  if (!v43)
    return (uint64_t)a1;
  v41[2] = v2;
  v42 = a2 + 32;
  v41[1] = a2;
  swift_bridgeObjectRetain();
  v14 = 0;
  v48 = v13;
  while (1)
  {
    v45 = v14;
    v15 = *(_QWORD *)(v42 + 8 * v14);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v53 = a1;
    sub_1AE7BB678(v15, (uint64_t)sub_1AE7D24B8, 0, &v52);
    v44 = v15;
    swift_bridgeObjectRetain();
    sub_1AE7BC17C();
    v17 = sub_1AE501548(&qword_1EED9AA30);
    if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v13, 1, v17) != 1)
      break;
LABEL_4:
    v14 = v45 + 1;
    swift_bridgeObjectRelease();
    sub_1AE592EFC();
    swift_release();
    swift_bridgeObjectRelease();
    if (v14 == v43)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)a1;
    }
  }
  v50 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
  while (1)
  {
    v18 = (char *)v13 + *(int *)(v17 + 48);
    v19 = *v13;
    v20 = v13[1];
    v21 = v10;
    v50(v10, v18, v51);
    v23 = sub_1AE536EDC(v19, v20);
    v24 = a1[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      break;
    v27 = v22;
    if (a1[3] >= v26)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1AE501548(&qword_1EEDA31A0);
        sub_1AE926A60();
      }
    }
    else
    {
      sub_1AE637420(v26, isUniquelyReferenced_nonNull_native & 1);
      v28 = sub_1AE536EDC(v19, v20);
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_22;
      v23 = v28;
    }
    a1 = v53;
    if ((v27 & 1) != 0)
    {
      v30 = v49;
      v31 = *(_QWORD *)(v49 + 72) * v23;
      v32 = v47;
      v33 = v51;
      (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v47, v53[7] + v31, v51);
      sub_1AE524254(0, &qword_1EED996A8);
      v34 = v46;
      v10 = v21;
      sub_1AE924468();
      v35 = *(void (**)(char *, uint64_t))(v30 + 8);
      v35(v32, v33);
      v35(v21, v33);
      swift_bridgeObjectRelease();
      a1 = v53;
      (*(void (**)(unint64_t, char *, uint64_t))(v30 + 40))(v53[7] + v31, v34, v33);
    }
    else
    {
      v53[(v23 >> 6) + 8] |= 1 << v23;
      v36 = (uint64_t *)(a1[6] + 16 * v23);
      *v36 = v19;
      v36[1] = v20;
      v10 = v21;
      v50((char *)(a1[7] + *(_QWORD *)(v49 + 72) * v23), v21, v51);
      v37 = a1[2];
      v38 = __OFADD__(v37, 1);
      v39 = v37 + 1;
      if (v38)
        goto LABEL_21;
      a1[2] = v39;
    }
    v13 = v48;
    sub_1AE7BC17C();
    v17 = sub_1AE501548(&qword_1EED9AA30);
    isUniquelyReferenced_nonNull_native = 1;
    if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0((uint64_t)v13, 1, v17) == 1)
      goto LABEL_4;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = sub_1AE926DE4();
  __break(1u);
  return result;
}

uint64_t sub_1AE7BB0D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t result;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD *__return_ptr, _QWORD *);
  int64_t v48;
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[6];
  _QWORD *v52;

  v41 = *(_QWORD *)(a2 + 16);
  if (!v41)
    return (uint64_t)a1;
  v40 = a2;
  v42 = a2 + 32;
  swift_bridgeObjectRetain();
  v2 = 0;
  while (2)
  {
    v3 = *(_QWORD *)(v42 + 8 * v2);
    v44 = v2 + 1;
    swift_bridgeObjectRetain_n();
    v4 = a1;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52 = a1;
    sub_1AE7BB678(v3, (uint64_t)sub_1AE7D2694, 0, v51);
    v6 = v51[0];
    v48 = v51[3];
    v7 = v51[4];
    v46 = v51[1];
    v47 = (void (*)(_QWORD *__return_ptr, _QWORD *))v51[5];
    v45 = (unint64_t)(v51[2] + 64) >> 6;
    swift_bridgeObjectRetain();
    while (1)
    {
      if (v7)
      {
        v8 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v9 = v8 | (v48 << 6);
        goto LABEL_22;
      }
      v10 = v48 + 1;
      if (__OFADD__(v48, 1))
        goto LABEL_39;
      if (v10 >= v45)
        goto LABEL_33;
      v11 = *(_QWORD *)(v46 + 8 * v10);
      v12 = v48 + 1;
      if (!v11)
      {
        v12 = v48 + 2;
        if (v48 + 2 >= v45)
          goto LABEL_33;
        v11 = *(_QWORD *)(v46 + 8 * v12);
        if (!v11)
        {
          v12 = v48 + 3;
          if (v48 + 3 >= v45)
            goto LABEL_33;
          v11 = *(_QWORD *)(v46 + 8 * v12);
          if (!v11)
          {
            v12 = v48 + 4;
            if (v48 + 4 >= v45)
              goto LABEL_33;
            v11 = *(_QWORD *)(v46 + 8 * v12);
            if (!v11)
            {
              v12 = v48 + 5;
              if (v48 + 5 >= v45)
                goto LABEL_33;
              v11 = *(_QWORD *)(v46 + 8 * v12);
              if (!v11)
                break;
            }
          }
        }
      }
LABEL_21:
      v7 = (v11 - 1) & v11;
      v9 = __clz(__rbit64(v11)) + (v12 << 6);
      v48 = v12;
LABEL_22:
      v14 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v9);
      v15 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v9);
      v50[0] = v14;
      v50[1] = v15;
      v16 = v14;
      v47(v49, v50);

      v18 = (void *)v49[0];
      v17 = v49[1];
      sub_1AE537530();
      v27 = v26;
      v28 = v4[2];
      v29 = (v19 & 1) == 0;
      v30 = v28 + v29;
      if (__OFADD__(v28, v29))
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        sub_1AE524254(0, &qword_1EED9A668);
        result = sub_1AE926DE4();
        __break(1u);
        return result;
      }
      v31 = v19;
      if (v4[3] >= v30)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1AE501548(&qword_1EEDA3190);
          sub_1AE926A60();
        }
      }
      else
      {
        sub_1AE6376E4(v30, isUniquelyReferenced_nonNull_native & 1, v20, v21, v22, v23, v24, v25, v39, v40);
        sub_1AE537530();
        if ((v31 & 1) != (v33 & 1))
          goto LABEL_40;
        v27 = v32;
      }
      v4 = v52;
      if ((v31 & 1) != 0)
      {
        v34 = *(_QWORD *)(v52[7] + 8 * v27);

        if (__OFADD__(v34, v17))
          goto LABEL_37;
        *(_QWORD *)(v4[7] + 8 * v27) = v34 + v17;
        isUniquelyReferenced_nonNull_native = 1;
      }
      else
      {
        v52[(v27 >> 6) + 8] |= 1 << v27;
        *(_QWORD *)(v4[6] + 8 * v27) = v18;
        *(_QWORD *)(v4[7] + 8 * v27) = v17;
        v35 = v4[2];
        v36 = __OFADD__(v35, 1);
        v37 = v35 + 1;
        if (v36)
          goto LABEL_38;
        v4[2] = v37;
        isUniquelyReferenced_nonNull_native = 1;
      }
    }
    v13 = v48 + 6;
    while (v13 < v45)
    {
      v11 = *(_QWORD *)(v46 + 8 * v13++);
      if (v11)
      {
        v12 = v13 - 1;
        goto LABEL_21;
      }
    }
LABEL_33:
    swift_bridgeObjectRelease();
    sub_1AE592EFC();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = v44;
    if (v44 != v41)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  return (uint64_t)a1;
}

uint64_t sub_1AE7BB468(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v5 < v2)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

uint64_t sub_1AE7BB4AC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v6;

  swift_isUniquelyReferenced_nonNull_native();
  v6 = sub_1AE7D33A8();
  a4(v6);
  sub_1AE4FDCF0();
  if (v4)
    sub_1AE4F9038();
  return sub_1AE4FD264();
}

uint64_t sub_1AE7BB524(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_1AE7D137C(a1, (uint64_t)sub_1AE7D26FC, 0, isUniquelyReferenced_nonNull_native, &v8, (uint64_t)sub_1AE536F4C, (void (*)(void))sub_1AE63721C, (uint64_t)&type metadata for TrafficBucket, &qword_1EED9EC00);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1AE7BB5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_1AE7D137C(a1, (uint64_t)sub_1AE7D26FC, 0, isUniquelyReferenced_nonNull_native, &v8, (uint64_t)sub_1AE536F4C, (void (*)(void))sub_1AE637258, (uint64_t)&type metadata for TerrainType, &qword_1EED9EBC0);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1AE7BB678@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = -1 << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64)
    v8 = ~(-1 << -(char)v4);
  else
    v8 = -1;
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

void sub_1AE7BB6B8(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *);
  id v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[7];

  if (v1[4])
  {
    sub_1AE7D37E0();
    v8 = v7 | (v6 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 48 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = v9[2];
    v13 = v9[3];
    v14 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v8);
    v15 = v9[4];
    v16 = v9[5];
    v1[3] = v4;
    v1[4] = v5;
    v17 = (void (*)(_QWORD *))v1[5];
    v33[0] = v10;
    v33[1] = v11;
    v33[2] = v12;
    v33[3] = v13;
    v33[4] = v15;
    v33[5] = v16;
    v33[6] = v14;
    sub_1AE4F66C4();
    sub_1AE4F6730();
    sub_1AE4F6708();
    v18 = v14;
    v17(v33);

    sub_1AE4F76D8();
    sub_1AE4F81B8();
    swift_bridgeObjectRelease();
    return;
  }
  if (!__OFADD__(v1[3], 1))
  {
    sub_1AE7D37A0();
    if (v20 == v21)
      goto LABEL_22;
    sub_1AE7D3794();
    if (!v26)
    {
      v19 = v22;
      if (v22 + 1 >= v24)
        goto LABEL_22;
      if (*(_QWORD *)(v25 + 8 * (v22 + 1)))
        goto LABEL_8;
      v19 = v22 + 1;
      if (v22 + 2 >= v24)
        goto LABEL_22;
      if (*(_QWORD *)(v25 + 8 * (v22 + 2)))
        goto LABEL_8;
      v29 = v22 + 3;
      v19 = v22 + 2;
      if (v22 + 3 >= v24)
        goto LABEL_22;
      if (*(_QWORD *)(v25 + 8 * v29))
        goto LABEL_8;
      v30 = v22 + 4;
      v19 = v29;
      if (v30 >= v24)
      {
LABEL_22:
        v1[3] = v19;
        v1[4] = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_QWORD *)(a1 + 48) = 0;
        return;
      }
      if (!*(_QWORD *)(v25 + 8 * v30))
      {
        v19 = v24 - 1;
        v31 = v23 + 6;
        while (v31 < v24)
        {
          sub_1AE7D3788();
          if (v32)
            goto LABEL_8;
        }
        goto LABEL_22;
      }
    }
LABEL_8:
    sub_1AE7D3774();
    v8 = v28 + (v27 << 6);
    v4 = v27;
    goto LABEL_3;
  }
  __break(1u);
}

void sub_1AE7BB85C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, _QWORD *);
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  if (v0[4])
  {
    sub_1AE7D3494();
LABEL_3:
    v5 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v2);
    v6 = *v5;
    v7 = v5[1];
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v2);
    v0[3] = v4;
    v0[4] = v3;
    v9 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v21[0] = v6;
    v21[1] = v7;
    v21[2] = v8;
    sub_1AE4FB75C();
    v9(&v20, v21);
    sub_1AE4F6648();
LABEL_23:
    sub_1AE4FD30C();
    return;
  }
  if (!__OFADD__(v0[3], 1))
  {
    sub_1AE7D3718();
    if (v10 == v11)
      goto LABEL_22;
    sub_1AE7D3794();
    if (!v16)
    {
      if (v12 + 1 >= v14)
        goto LABEL_22;
      if (*(_QWORD *)(v15 + 8 * (v12 + 1)))
        goto LABEL_8;
      if (v12 + 2 >= v14)
        goto LABEL_22;
      if (*(_QWORD *)(v15 + 8 * (v12 + 2)))
        goto LABEL_8;
      if (v12 + 3 >= v14)
        goto LABEL_22;
      if (*(_QWORD *)(v15 + 8 * (v12 + 3)))
        goto LABEL_8;
      v17 = v12 + 4;
      if (v17 >= v14)
      {
LABEL_22:
        sub_1AE7D37C0();
        goto LABEL_23;
      }
      if (!*(_QWORD *)(v15 + 8 * v17))
      {
        v18 = v13 + 6;
        while (v18 < v14)
        {
          sub_1AE7D3788();
          if (v19)
            goto LABEL_8;
        }
        goto LABEL_22;
      }
    }
LABEL_8:
    sub_1AE7D31D4();
    goto LABEL_3;
  }
  __break(1u);
}

void sub_1AE7BB984(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *__return_ptr, _QWORD *);
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  __int128 v35;
  char v36;
  _QWORD v37[4];
  char v38;

  if (v1[4])
  {
    sub_1AE7D37E0();
    v8 = v7 | (v6 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = *(_QWORD *)(v3 + 56) + 24 * v8;
    v13 = *(_QWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    LOBYTE(v12) = *(_BYTE *)(v12 + 16);
    v1[3] = v4;
    v1[4] = v5;
    v15 = (void (*)(_QWORD *__return_ptr, _QWORD *))v1[5];
    v37[0] = v10;
    v37[1] = v11;
    v37[2] = v13;
    v37[3] = v14;
    v38 = v12;
    sub_1AE4F66C4();
    v15(v34, v37);
    sub_1AE4F665C();
    v16 = v34[0];
    v17 = v34[1];
    v18 = v35;
    v19 = v36;
LABEL_23:
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v17;
    *(_OWORD *)(a1 + 16) = v18;
    *(_BYTE *)(a1 + 32) = v19;
    return;
  }
  if (!__OFADD__(v1[3], 1))
  {
    sub_1AE7D37A0();
    if (v21 == v22)
      goto LABEL_22;
    sub_1AE7D3794();
    if (!v27)
    {
      v20 = v23;
      if (v23 + 1 >= v25)
        goto LABEL_22;
      if (*(_QWORD *)(v26 + 8 * (v23 + 1)))
        goto LABEL_8;
      v20 = v23 + 1;
      if (v23 + 2 >= v25)
        goto LABEL_22;
      if (*(_QWORD *)(v26 + 8 * (v23 + 2)))
        goto LABEL_8;
      v30 = v23 + 3;
      v20 = v23 + 2;
      if (v23 + 3 >= v25)
        goto LABEL_22;
      if (*(_QWORD *)(v26 + 8 * v30))
        goto LABEL_8;
      v31 = v23 + 4;
      v20 = v30;
      if (v31 >= v25)
      {
LABEL_22:
        v16 = 0;
        v17 = 0;
        v19 = 0;
        v1[3] = v20;
        v1[4] = 0;
        v18 = 0uLL;
        goto LABEL_23;
      }
      if (!*(_QWORD *)(v26 + 8 * v31))
      {
        v20 = v25 - 1;
        v32 = v24 + 6;
        while (v32 < v25)
        {
          sub_1AE7D3788();
          if (v33)
            goto LABEL_8;
        }
        goto LABEL_22;
      }
    }
LABEL_8:
    sub_1AE7D3774();
    v8 = v29 + (v28 << 6);
    v4 = v28;
    goto LABEL_3;
  }
  __break(1u);
}

void sub_1AE7BBB00()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;

  sub_1AE4FC4D4();
  v5 = v4;
  v38 = v6;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = sub_1AE501548(v9);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v14);
  sub_1AE5009EC();
  v41 = v8;
  sub_1AE501548(v8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v15);
  sub_1AE505DEC();
  MEMORY[0x1E0C80A78](v16);
  sub_1AE7D3318();
  v18 = *v0;
  v17 = v0[1];
  v19 = v0[3];
  v20 = v0[4];
  v34 = v3;
  v35 = v10;
  v39 = v0[2];
  v40 = v17;
  if (v20)
  {
    v36 = v5;
    v37 = v12;
    v21 = (v20 - 1) & v20;
    v22 = __clz(__rbit64(v20)) | (v19 << 6);
LABEL_3:
    v23 = *(_BYTE *)(*(_QWORD *)(v18 + 48) + v22);
    v24 = sub_1AE501548(v38);
    sub_1AE7D36B0(*(_QWORD *)(v24 - 8));
    v25 = 0;
    *v2 = v23;
LABEL_4:
    v5 = v36;
    v12 = v37;
    goto LABEL_5;
  }
  v29 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  v30 = (unint64_t)(v0[2] + 64) >> 6;
  if (v29 >= v30)
  {
    v21 = 0;
    v25 = 1;
    goto LABEL_5;
  }
  v31 = *(_QWORD *)(v17 + 8 * v29);
  if (v31)
  {
    v36 = v5;
    v37 = v12;
LABEL_12:
    v21 = (v31 - 1) & v31;
    v22 = __clz(__rbit64(v31)) + (v29 << 6);
    v19 = v29;
    goto LABEL_3;
  }
  v32 = v19 + 2;
  if (v19 + 2 >= v30)
  {
    v21 = 0;
    v25 = 1;
    ++v19;
    goto LABEL_5;
  }
  v31 = *(_QWORD *)(v17 + 8 * v32);
  if (v31)
  {
LABEL_16:
    v36 = v5;
    v37 = v12;
    v29 = v32;
    goto LABEL_12;
  }
  if (v19 + 3 >= v30)
    goto LABEL_29;
  v31 = *(_QWORD *)(v17 + 8 * (v19 + 3));
  if (v31)
  {
    v36 = v5;
    v37 = v12;
    v29 = v19 + 3;
    goto LABEL_12;
  }
  v32 = v19 + 4;
  if (v19 + 4 < v30)
  {
    v31 = *(_QWORD *)(v17 + 8 * v32);
    if (v31)
      goto LABEL_16;
    v29 = v19 + 5;
    if (v19 + 5 < v30)
    {
      v36 = v5;
      v37 = v12;
      v31 = *(_QWORD *)(v17 + 8 * v29);
      if (v31)
        goto LABEL_12;
      v29 = v30 - 1;
      v33 = v19 + 6;
      while (v33 < v30)
      {
        v31 = *(_QWORD *)(v17 + 8 * v33++);
        if (v31)
        {
          v29 = v33 - 1;
          goto LABEL_12;
        }
      }
LABEL_32:
      v21 = 0;
      v25 = 1;
      v19 = v29;
      goto LABEL_4;
    }
LABEL_29:
    v21 = 0;
    v25 = 1;
    v19 = v32;
    goto LABEL_5;
  }
  v21 = 0;
  v25 = 1;
  v19 += 3;
LABEL_5:
  v26 = 1;
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v2, v25, 1, v13);
  *v0 = v18;
  v0[1] = v40;
  v0[2] = v39;
  v0[3] = v19;
  v0[4] = v21;
  v27 = (void (*)(uint64_t))v0[5];
  sub_1AE64DBA0((uint64_t)v2, v1, v41);
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v1, 1, v13) != 1)
  {
    sub_1AE64DBA0(v1, v34, v35);
    v27(v34);
    sub_1AE524534(v34, v35);
    v26 = 0;
  }
  v28 = sub_1AE501548(v5);
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v12, v26, 1, v28);
  sub_1AE4F8180();
}

uint64_t sub_1AE7BBDAC@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t (*v10)(char *);
  uint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  char v18[8];
  uint64_t v19;

  v2 = *v1;
  v4 = v1[3];
  v3 = v1[4];
  v5 = v4;
  if (v3)
  {
    v6 = (v3 - 1) & v3;
    v7 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_3:
    v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v7);
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v7);
    v1[3] = v5;
    v1[4] = v6;
    v10 = (uint64_t (*)(char *))v1[5];
    v18[0] = v8;
    v19 = v9;
    return v10(v18);
  }
  v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = (unint64_t)(v1[2] + 64) >> 6;
    if (v12 < v13)
    {
      v14 = v1[1];
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        v6 = (v15 - 1) & v15;
        v7 = __clz(__rbit64(v15)) + (v12 << 6);
        v5 = v12;
        goto LABEL_3;
      }
      v16 = v4 + 2;
      v5 = v4 + 1;
      if (v4 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          v12 = v16;
          goto LABEL_7;
        }
        v5 = v4 + 2;
        if (v4 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * (v4 + 3));
          if (v15)
          {
            v12 = v4 + 3;
            goto LABEL_7;
          }
          v16 = v4 + 4;
          v5 = v4 + 3;
          if (v4 + 4 < v13)
          {
            v15 = *(_QWORD *)(v14 + 8 * v16);
            if (v15)
              goto LABEL_10;
            v12 = v4 + 5;
            v5 = v4 + 4;
            if (v4 + 5 < v13)
            {
              v15 = *(_QWORD *)(v14 + 8 * v12);
              if (v15)
                goto LABEL_7;
              v5 = v13 - 1;
              v17 = v4 + 6;
              while (v17 < v13)
              {
                v15 = *(_QWORD *)(v14 + 8 * v17++);
                if (v15)
                {
                  v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v5;
    v1[4] = 0;
    *a1 = xmmword_1AE95B6E0;
  }
  return result;
}

void sub_1AE7BBF04(__n128 *a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  void (*v11)(char *);
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  char v18[8];
  uint64_t v19;

  v3 = *v2;
  v5 = v2[3];
  v4 = v2[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v8);
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v8);
    v2[3] = v6;
    v2[4] = v7;
    v11 = (void (*)(char *))v2[5];
    v18[0] = v9;
    v19 = v10;
    v11(v18);
LABEL_23:
    sub_1AE509D68();
    return;
  }
  v12 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    v13 = (unint64_t)(v2[2] + 64) >> 6;
    if (v12 < v13)
    {
      v14 = v2[1];
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        v7 = (v15 - 1) & v15;
        v8 = __clz(__rbit64(v15)) + (v12 << 6);
        v6 = v12;
        goto LABEL_3;
      }
      v16 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          v12 = v16;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * (v5 + 3));
          if (v15)
          {
            v12 = v5 + 3;
            goto LABEL_7;
          }
          v16 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v13)
          {
            v15 = *(_QWORD *)(v14 + 8 * v16);
            if (v15)
              goto LABEL_10;
            v12 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v13)
            {
              v15 = *(_QWORD *)(v14 + 8 * v12);
              if (v15)
                goto LABEL_7;
              v6 = v13 - 1;
              v17 = v5 + 6;
              while (v17 < v13)
              {
                v15 = *(_QWORD *)(v14 + 8 * v17++);
                if (v15)
                {
                  v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v2[3] = v6;
    v2[4] = 0;
    *a1 = a2;
    goto LABEL_23;
  }
  __break(1u);
}

void sub_1AE7BC04C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, _QWORD *);
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  if (v0[4])
  {
    sub_1AE7D3494();
LABEL_3:
    v5 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v2);
    v6 = *v5;
    v7 = v5[1];
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v2);
    v0[3] = v4;
    v0[4] = v3;
    v9 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v21[0] = v6;
    v21[1] = v7;
    v21[2] = v8;
    sub_1AE4FB75C();
    sub_1AE4F66C4();
    v9(&v20, v21);
    sub_1AE4F665C();
    sub_1AE4F6648();
LABEL_23:
    sub_1AE4FD30C();
    return;
  }
  if (!__OFADD__(v0[3], 1))
  {
    sub_1AE7D3718();
    if (v10 == v11)
      goto LABEL_22;
    sub_1AE7D3794();
    if (!v16)
    {
      if (v12 + 1 >= v14)
        goto LABEL_22;
      if (*(_QWORD *)(v15 + 8 * (v12 + 1)))
        goto LABEL_8;
      if (v12 + 2 >= v14)
        goto LABEL_22;
      if (*(_QWORD *)(v15 + 8 * (v12 + 2)))
        goto LABEL_8;
      if (v12 + 3 >= v14)
        goto LABEL_22;
      if (*(_QWORD *)(v15 + 8 * (v12 + 3)))
        goto LABEL_8;
      v17 = v12 + 4;
      if (v17 >= v14)
      {
LABEL_22:
        sub_1AE7D37C0();
        goto LABEL_23;
      }
      if (!*(_QWORD *)(v15 + 8 * v17))
      {
        v18 = v13 + 6;
        while (v18 < v14)
        {
          sub_1AE7D3788();
          if (v19)
            goto LABEL_8;
        }
        goto LABEL_22;
      }
    }
LABEL_8:
    sub_1AE7D31D4();
    goto LABEL_3;
  }
  __break(1u);
}

void sub_1AE7BC17C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;

  sub_1AE4FC4D4();
  v47 = v4;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v45 = sub_1AE501548(v9);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v13);
  sub_1AE4F683C();
  sub_1AE501548(v8);
  sub_1AE4F6630();
  MEMORY[0x1E0C80A78](v14);
  sub_1AE505DEC();
  MEMORY[0x1E0C80A78](v15);
  sub_1AE7D3318();
  v17 = *v0;
  v16 = v0[1];
  v18 = v0[3];
  v19 = v18;
  v40 = v1;
  v41 = v10;
  v46 = v0[2];
  if (!v0[4])
  {
    v31 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      return;
    }
    v32 = (unint64_t)(v0[2] + 64) >> 6;
    if (v31 < v32)
    {
      if (*(_QWORD *)(v16 + 8 * v31))
      {
LABEL_7:
        v20 = (uint64_t *)sub_1AE7D3734();
        v22 = (v33 - 1) & v33;
        v24 = __clz(__rbit64(v33)) + (v34 << 6);
        v19 = v34;
        goto LABEL_3;
      }
      v19 = v18 + 1;
      if (v18 + 2 < v32)
      {
        if (*(_QWORD *)(v16 + 8 * (v18 + 2)))
          goto LABEL_7;
        v19 = v18 + 2;
        if (v18 + 3 < v32)
        {
          if (*(_QWORD *)(v16 + 8 * (v18 + 3)))
            goto LABEL_7;
          v19 = v18 + 3;
          if (v18 + 4 < v32)
          {
            if (*(_QWORD *)(v16 + 8 * (v18 + 4)))
              goto LABEL_7;
            v19 = v18 + 4;
            if (v18 + 5 < v32)
            {
              if (*(_QWORD *)(v16 + 8 * (v18 + 5)))
                goto LABEL_7;
              v19 = v32 - 1;
              v35 = v18 + 6;
              while (v35 < v32)
              {
                if (*(_QWORD *)(v16 + 8 * v35++))
                  goto LABEL_7;
              }
            }
          }
        }
      }
    }
    v6 = v0[1];
    v30 = v45;
    _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v3, 1, 1, v45);
    v22 = 0;
    goto LABEL_22;
  }
  v20 = (uint64_t *)sub_1AE7D3734();
  v22 = (v21 - 1) & v21;
  v24 = __clz(__rbit64(v21)) | (v23 << 6);
LABEL_3:
  v25 = (uint64_t *)(*(_QWORD *)(v17 + 48) + 16 * v24);
  v26 = v17;
  v28 = *v25;
  v27 = v25[1];
  v29 = sub_1AE501548(v20);
  v30 = v45;
  sub_1AE7D36B0(*(_QWORD *)(v29 - 8));
  *v3 = v28;
  v3[1] = v27;
  v17 = v26;
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0((uint64_t)v3, 0, 1, v45);
  sub_1AE4F66C4();
  v12 = v42;
  v2 = v43;
  v8 = v44;
LABEL_22:
  *v0 = v17;
  v0[1] = v6;
  v0[2] = v46;
  v0[3] = v19;
  v0[4] = v22;
  v37 = (void (*)(uint64_t))v0[5];
  sub_1AE64DBA0((uint64_t)v3, v2, v8);
  v38 = 1;
  if (_s20IntelligencePlatform17UnstructuredImageV5AssetOwet_0(v2, 1, v30) != 1)
  {
    sub_1AE64DBA0(v2, v40, v41);
    v37(v40);
    sub_1AE524534(v40, v41);
    v38 = 0;
  }
  v39 = sub_1AE501548(v47);
  _s20IntelligencePlatform17UnstructuredImageV5AssetOwst_0(v12, v38, 1, v39);
  sub_1AE4F8180();
}

double sub_1AE7BC418()
{
  uint64_t v0;

  sub_1AE4F9094();
  return *(double *)(v0 + 16);
}

void sub_1AE7BC440(double a1)
{
  uint64_t v1;

  sub_1AE4FB9BC();
  *(double *)(v1 + 16) = a1;
  sub_1AE7D35DC();
}

void sub_1AE7BC470()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

double sub_1AE7BC4A4()
{
  uint64_t v0;

  sub_1AE4F9094();
  return *(double *)(v0 + 24);
}

void sub_1AE7BC4CC(double a1)
{
  uint64_t v1;

  sub_1AE4FB9BC();
  *(double *)(v1 + 24) = a1;
  sub_1AE7D35DC();
}

void sub_1AE7BC4FC()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BC530(uint64_t a1@<X8>)
{
  sub_1AE7BCC34(&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_distanceInMeters, &qword_1EED9E350, a1);
}

void sub_1AE7BC544(uint64_t a1)
{
  sub_1AE7BCCA0(a1, (uint64_t)&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_distanceInMeters, &qword_1EED9E350);
}

void sub_1AE7BC558()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BC594()
{
  swift_bridgeObjectRetain();
  sub_1AE7BC5C8();
}

void sub_1AE7BC5BC()
{
  sub_1AE7BD3D0();
}

void sub_1AE7BC5C8()
{
  sub_1AE7BD410();
}

void sub_1AE7BC5D4()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

uint64_t sub_1AE7BC610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  v9 = sub_1AE524560(a1, a2, a3, a4, a5);
  MEMORY[0x1E0C80A78](v9);
  sub_1AE4F683C();
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v6, a1);
  return a6(v6);
}

void sub_1AE7BC680(uint64_t a1@<X8>)
{
  sub_1AE7BCC34(&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_elevationGainInMeters, &qword_1EED9E350, a1);
}

void sub_1AE7BC694(uint64_t a1)
{
  sub_1AE7BCCA0(a1, (uint64_t)&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_elevationGainInMeters, &qword_1EED9E350);
}

void sub_1AE7BC6A8()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BC6E4(uint64_t a1@<X8>)
{
  sub_1AE7BCC34(&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_durationInSeconds, &qword_1EED9A850, a1);
}

void sub_1AE7BC6F8(uint64_t a1)
{
  sub_1AE7BCCA0(a1, (uint64_t)&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_durationInSeconds, &qword_1EED9A850);
}

void sub_1AE7BC70C()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BC748(uint64_t a1@<X8>)
{
  sub_1AE7BCC34(&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_expectedDurationInSecondsNoTraffic, &qword_1EED9A850, a1);
}

void sub_1AE7BC75C(uint64_t a1)
{
  sub_1AE7BCCA0(a1, (uint64_t)&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_expectedDurationInSecondsNoTraffic, &qword_1EED9A850);
}

void sub_1AE7BC770()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BC7AC()
{
  swift_bridgeObjectRetain();
  sub_1AE7BC7E0();
}

void sub_1AE7BC7D4()
{
  sub_1AE7BD3D0();
}

void sub_1AE7BC7E0()
{
  sub_1AE7BD410();
}

void sub_1AE7BC7EC()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BC828()
{
  swift_bridgeObjectRetain();
  sub_1AE7BC85C();
}

void sub_1AE7BC850()
{
  sub_1AE7BD3D0();
}

void sub_1AE7BC85C()
{
  sub_1AE7BD410();
}

void sub_1AE7BC868()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BC8A4()
{
  swift_bridgeObjectRetain();
  sub_1AE7BC8D8();
}

void sub_1AE7BC8CC()
{
  sub_1AE7BD3D0();
}

void sub_1AE7BC8D8()
{
  sub_1AE7BD410();
}

void sub_1AE7BC8E4()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BC920()
{
  swift_bridgeObjectRetain();
  sub_1AE7BC954();
}

void sub_1AE7BC948()
{
  sub_1AE7BD3D0();
}

void sub_1AE7BC954()
{
  sub_1AE7BD410();
}

void sub_1AE7BC960()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BC99C()
{
  swift_bridgeObjectRetain();
  sub_1AE7BC9D0();
}

void sub_1AE7BC9C4()
{
  sub_1AE7BD3D0();
}

void sub_1AE7BC9D0()
{
  sub_1AE7BD410();
}

void sub_1AE7BC9DC()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BCA18()
{
  swift_bridgeObjectRetain();
  sub_1AE7BCA4C();
}

void sub_1AE7BCA40()
{
  sub_1AE7BD3D0();
}

void sub_1AE7BCA4C()
{
  sub_1AE7BD410();
}

void sub_1AE7BCA58()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BCA94(uint64_t a1@<X8>)
{
  sub_1AE7BCC34(&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_averageSpeedInMetersPerSecond, &qword_1EED9A888, a1);
}

void sub_1AE7BCAA8(uint64_t a1)
{
  sub_1AE7BCCA0(a1, (uint64_t)&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_averageSpeedInMetersPerSecond, &qword_1EED9A888);
}

void sub_1AE7BCABC()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

double sub_1AE7BCAF8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_score;
  sub_1AE4F9094();
  return *(double *)v1;
}

uint64_t sub_1AE7BCB34(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_score);
  result = sub_1AE4FB9BC();
  *v3 = a1;
  return result;
}

void sub_1AE7BCB80()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BCBBC(uint64_t a1@<X8>)
{
  sub_1AE7BCC34(&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_usageKwh, (uint64_t *)&unk_1EED9E340, a1);
}

void sub_1AE7BCBD0(uint64_t a1)
{
  sub_1AE7BCCA0(a1, (uint64_t)&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_usageKwh, (uint64_t *)&unk_1EED9E340);
}

void sub_1AE7BCBE4()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BCC20(uint64_t a1@<X8>)
{
  sub_1AE7BCC34(&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_optimalUsageKwh, (uint64_t *)&unk_1EED9E340, a1);
}

void sub_1AE7BCC34(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *a1;
  sub_1AE4F9094();
  v7 = sub_1AE501548(a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, v6, v7);
  sub_1AE4FCDE0();
}

void sub_1AE7BCC8C(uint64_t a1)
{
  sub_1AE7BCCA0(a1, (uint64_t)&OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_optimalUsageKwh, (uint64_t *)&unk_1EED9E340);
}

void sub_1AE7BCCA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t);

  sub_1AE4FB9BC();
  sub_1AE501548(a3);
  v4 = sub_1AE753ADC();
  v5(v4);
  swift_endAccess();
  sub_1AE4FCDE0();
}

void sub_1AE7BCD00()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BCD3C()
{
  sub_1AE4F9094();
  sub_1AE506B30();
}

void sub_1AE7BCD70(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_numBrakingEvents);
  sub_1AE4FB9BC();
  *v3 = a1;
  sub_1AE506B30();
}

void sub_1AE7BCDAC()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BCDE8()
{
  sub_1AE4F9094();
  sub_1AE506B30();
}

void sub_1AE7BCE1C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_numAccelEvents);
  sub_1AE4FB9BC();
  *v3 = a1;
  sub_1AE506B30();
}

void sub_1AE7BCE58()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BCE94()
{
  sub_1AE4F9094();
  sub_1AE506B30();
}

void sub_1AE7BCEC8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC20IntelligencePlatform21KTSDataRepresentation_numHighSpeedEvents);
  sub_1AE4FB9BC();
  *v3 = a1;
  sub_1AE506B30();
}

void sub_1AE7BCF04()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BCF40()
{
  swift_bridgeObjectRetain();
  sub_1AE7BCF74();
}

void sub_1AE7BCF68()
{
  sub_1AE7BD3D0();
}

void sub_1AE7BCF74()
{
  sub_1AE7BD410();
}

void sub_1AE7BCF80()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BCFBC()
{
  swift_bridgeObjectRetain();
  sub_1AE7BCFF0();
}

void sub_1AE7BCFE4()
{
  sub_1AE7BD3D0();
}

void sub_1AE7BCFF0()
{
  sub_1AE7BD410();
}

void sub_1AE7BCFFC()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BD038()
{
  swift_bridgeObjectRetain();
  sub_1AE7BD06C();
}

void sub_1AE7BD060()
{
  sub_1AE7BD3D0();
}

void sub_1AE7BD06C()
{
  sub_1AE7BD410();
}

void sub_1AE7BD078()
{
  sub_1AE4FB9BC();
  sub_1AE4F6664();
}

void sub_1AE7BD0B4()
{
  swift_bridgeObjectRetain();
  sub_1AE7BD0E8();
}

